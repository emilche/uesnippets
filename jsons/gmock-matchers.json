[
  {
    "label": "MatcherInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherInterface"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "FooMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooMatcherImpl"
  },
  {
    "label": "StringMatchResultListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMatchResultListener"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "templates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "templates"
  },
  {
    "label": "MatcherCastImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherCastImpl"
  },
  {
    "label": "MatcherCastImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherCastImpl"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "MatcherCastImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherCastImpl"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "SafeMatcherCastImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SafeMatcherCastImpl"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "TuplePrefix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TuplePrefix"
  },
  {
    "label": "TuplePrefix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TuplePrefix"
  },
  {
    "label": "TransformTupleValuesHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransformTupleValuesHelper"
  },
  {
    "label": "IterateOverTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterateOverTuple"
  },
  {
    "label": "IterateOverTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterateOverTuple"
  },
  {
    "label": "AnyMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyMatcherImpl"
  },
  {
    "label": "AnythingMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnythingMatcher"
  },
  {
    "label": "IsNullMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IsNullMatcher"
  },
  {
    "label": "NotNullMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotNullMatcher"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "RefMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefMatcher"
  },
  {
    "label": "RefMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "StrEqualityMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrEqualityMatcher"
  },
  {
    "label": "HasSubstrMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HasSubstrMatcher"
  },
  {
    "label": "StartsWithMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StartsWithMatcher"
  },
  {
    "label": "EndsWithMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EndsWithMatcher"
  },
  {
    "label": "PairMatchBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairMatchBase"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "Eq2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq2Matcher"
  },
  {
    "label": "Ne2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ne2Matcher"
  },
  {
    "label": "Lt2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lt2Matcher"
  },
  {
    "label": "Gt2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Gt2Matcher"
  },
  {
    "label": "Le2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Le2Matcher"
  },
  {
    "label": "Ge2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ge2Matcher"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "NotMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotMatcherImpl"
  },
  {
    "label": "NotMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotMatcher"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "AllOfMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllOfMatcherImpl"
  },
  {
    "label": "CombiningMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CombiningMatcher"
  },
  {
    "label": "VariadicMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VariadicMatcher"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "AnyOfMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyOfMatcherImpl"
  },
  {
    "label": "MatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherImpl"
  },
  {
    "label": "SomeOfArrayMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SomeOfArrayMatcher"
  },
  {
    "label": "TrulyMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrulyMatcher"
  },
  {
    "label": "convertible",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "convertible"
  },
  {
    "label": "MatcherAsPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatcherAsPredicate"
  },
  {
    "label": "PredicateFormatterFromMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredicateFormatterFromMatcher"
  },
  {
    "label": "FloatingEqMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatingEqMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "FloatingEq2Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatingEq2Matcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "PointeeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointeeMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "WhenDynamicCastToMatcherBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenDynamicCastToMatcherBase"
  },
  {
    "label": "WhenDynamicCastToMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenDynamicCastToMatcher"
  },
  {
    "label": "WhenDynamicCastToMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenDynamicCastToMatcher"
  },
  {
    "label": "FieldMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldMatcher"
  },
  {
    "label": "PropertyMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PropertyMatcher"
  },
  {
    "label": "CallableTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallableTraits"
  },
  {
    "label": "CallableTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallableTraits"
  },
  {
    "label": "ResultOfMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultOfMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "SizeIsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SizeIsMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "BeginEndDistanceIsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BeginEndDistanceIsMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "ContainerEqMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerEqMatcher"
  },
  {
    "label": "LessComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessComparator"
  },
  {
    "label": "WhenSortedByMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhenSortedByMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "PointwiseMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointwiseMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "QuantifierMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QuantifierMatcherImpl"
  },
  {
    "label": "ContainsMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainsMatcherImpl"
  },
  {
    "label": "EachMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EachMatcherImpl"
  },
  {
    "label": "ContainsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainsMatcher"
  },
  {
    "label": "EachMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EachMatcher"
  },
  {
    "label": "Rank1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rank1"
  },
  {
    "label": "Rank0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rank0"
  },
  {
    "label": "KeyMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyMatcherImpl"
  },
  {
    "label": "KeyMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyMatcher"
  },
  {
    "label": "PairMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairMatcherImpl"
  },
  {
    "label": "PairMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PairMatcher"
  },
  {
    "label": "ElementsAreMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsAreMatcherImpl"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "UnorderedMatcherRequire",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnorderedMatcherRequire"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "UnorderedElementsAreMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedElementsAreMatcherImpl"
  },
  {
    "label": "CastAndAppendTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CastAndAppendTransform"
  },
  {
    "label": "UnorderedElementsAreMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedElementsAreMatcher"
  },
  {
    "label": "ElementsAreMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsAreMatcher"
  },
  {
    "label": "UnorderedElementsAreArrayMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnorderedElementsAreArrayMatcher"
  },
  {
    "label": "ElementsAreArrayMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementsAreArrayMatcher"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "BoundSecondMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoundSecondMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "OptionalMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptionalMatcher"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "VariantMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VariantMatcher"
  },
  {
    "label": "AnyCastMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyCastMatcher"
  },
  {
    "label": "ArgsTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgsTuple"
  },
  {
    "label": "ArgsMatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgsMatcherImpl"
  },
  {
    "label": "InnerMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerMatcher"
  },
  {
    "label": "ArgsMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgsMatcher"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "CastImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CastImpl(polymorphic_matcher_or_value,\n                    std::is_convertible<M, Matcher<T>>{},\n                    std::is_convertible<M, T>{})"
  },
  {
    "label": "CastImpl()",
    "kind": "Method",
    "detail": "Function (Matcher<T>)",
    "insertText": "CastImpl(const M& value,\n                             std::false_type /* convertible_to_matcher */,\n                             std::false_type /* convertible_to_T */)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (Matcher<T>)",
    "insertText": "A()"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchAndExplain(str, listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchAndExplain(str, listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchAndExplain(str, listener)"
  },
  {
    "label": "MatchAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchAndExplain(str, listener)"
  },
  {
    "label": "MakeMatcher()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeMatcher(new Impl<const ::std::tuple<T1, T2>&>)"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "MatchPrintAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchPrintAndExplain(*pointer, matcher_, listener)"
  },
  {
    "label": "MatchPrintAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchPrintAndExplain(to, this->matcher_, listener)"
  },
  {
    "label": "MatchPrintAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchPrintAndExplain(*to, this->matcher_, listener)"
  },
  {
    "label": "MatchPrintAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchPrintAndExplain(obj.*field_, matcher_, listener)"
  },
  {
    "label": "MatchPrintAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchPrintAndExplain(result, matcher_, listener)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "f(arg)"
  },
  {
    "label": "MatchPrintAndExplain()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MatchPrintAndExplain(result, matcher_, listener)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(ContainsMatcherImpl)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(EachMatcherImpl)"
  },
  {
    "label": "NextGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextGraph()"
  },
  {
    "label": "Randomize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Randomize()"
  },
  {
    "label": "FindMaxBipartiteMatching()",
    "kind": "Method",
    "detail": "Function (ElementMatcherPairs)",
    "insertText": "FindMaxBipartiteMatching(const MatchMatrix& g)"
  },
  {
    "label": "FormatMatcherDescription()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatMatcherDescription(bool negation,\n                                                const char* matcher_name,\n                                                const Strings& param_values)"
  },
  {
    "label": "ElementsAreArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ElementsAreArray(pointer, pointer + count)"
  },
  {
    "label": "ElementsAreArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ElementsAreArray(array, N)"
  },
  {
    "label": "UnorderedElementsAreArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UnorderedElementsAreArray(pointer, pointer + count)"
  },
  {
    "label": "UnorderedElementsAreArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UnorderedElementsAreArray(array, N)"
  },
  {
    "label": "Eq()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Eq(value)"
  },
  {
    "label": "UnorderedElementsAreArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "UnorderedElementsAreArray(matchers)"
  },
  {
    "label": "IsSupersetOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsSupersetOf(pointer, pointer + count)"
  },
  {
    "label": "IsSupersetOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsSupersetOf(array, N)"
  },
  {
    "label": "IsSubsetOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsSubsetOf(pointer, pointer + count)"
  },
  {
    "label": "IsSubsetOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsSubsetOf(array, N)"
  },
  {
    "label": "AnyOfArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AnyOfArray(ptr, ptr + count)"
  },
  {
    "label": "AllOfArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllOfArray(ptr, ptr + count)"
  },
  {
    "label": "AnyOfArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AnyOfArray(array, N)"
  },
  {
    "label": "AllOfArray()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllOfArray(array, N)"
  }
]