[
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FAutoCompleteCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoCompleteCommand"
  },
  {
    "label": "FCanvasTextItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTextItem"
  },
  {
    "label": "FCanvasTileItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTileItem"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FAutoCompleteNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoCompleteNode"
  },
  {
    "label": "UConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConsole"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "ScrollbackSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScrollbackSelection"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "other",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "other"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "SetInputText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputText( const FString& Text )"
  },
  {
    "label": "SetCursorPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorPos( int32 Position )"
  },
  {
    "label": "ConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsoleCommand(const FString& Command)"
  },
  {
    "label": "ClearOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOutput()"
  },
  {
    "label": "OutputText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputText(const FString& Text)"
  },
  {
    "label": "StartTyping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTyping(const FString& Text)"
  },
  {
    "label": "FlushPlayerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPlayerInput()"
  },
  {
    "label": "ProcessControlKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessControlKey(FKey Key, EInputEvent Event)"
  },
  {
    "label": "ProcessShiftKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessShiftKey(FKey Key, EInputEvent Event)"
  },
  {
    "label": "AppendInputText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendInputText(const FString& Text)"
  },
  {
    "label": "BuildRuntimeAutoCompleteList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildRuntimeAutoCompleteList(bool bForce = false)"
  },
  {
    "label": "AugmentRuntimeAutoCompleteList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AugmentRuntimeAutoCompleteList(TArray<FAutoCompleteCommand>& List)"
  },
  {
    "label": "UpdateCompleteIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCompleteIndices()"
  },
  {
    "label": "InputChar_Typing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar_Typing( int32 ControllerId, const FString& Unicode )"
  },
  {
    "label": "InputChar_Typing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar_Typing(FInputDeviceId DeviceId, const FString& Unicode)"
  },
  {
    "label": "PostRender_Console_Typing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender_Console_Typing(class UCanvas* Canvas)"
  },
  {
    "label": "BeginState_Typing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginState_Typing(FName PreviousStateName)"
  },
  {
    "label": "EndState_Typing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndState_Typing( FName NextStateName )"
  },
  {
    "label": "InputChar_Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar_Open( int32 ControllerId, const FString& Unicode )"
  },
  {
    "label": "InputChar_Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar_Open( FInputDeviceId DeviceId, const FString& Unicode )"
  },
  {
    "label": "InputKey_Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey_Open( int32 ControllerId, FKey Key, EInputEvent Event, float AmountDepressed = 1.f, bool bGamepad = false )"
  },
  {
    "label": "InputKey_Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey_Open(FInputDeviceId DeviceId, FKey Key, EInputEvent Event, float AmountDepressed = 1.f, bool bGamepad = false)"
  },
  {
    "label": "PostRender_Console_Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender_Console_Open(class UCanvas* Canvas)"
  },
  {
    "label": "BeginState_Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginState_Open(FName PreviousStateName)"
  },
  {
    "label": "EndState_Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndState_Open(FName NextStateName)"
  },
  {
    "label": "InputChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar(int32 ControllerId, const FString& Unicode)"
  },
  {
    "label": "InputChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar(FInputDeviceId DeviceId, const FString& Unicode)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(int32 ControllerId, FKey Key, EInputEvent Event, float AmountDepressed=1.f, bool bGamepad=false)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FInputDeviceId DeviceId, FKey Key, EInputEvent Event, float AmountDepressed=1.f, bool bGamepad=false)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMove(FViewport* Viewport, int32 X, int32 Y)"
  },
  {
    "label": "CapturedMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapturedMouseMove(FViewport* InViewport, int32 X, int32 Y)"
  },
  {
    "label": "PostRender_Console()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender_Console(class UCanvas* Canvas)"
  },
  {
    "label": "FakeGotoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeGotoState(FName NextStateName)"
  },
  {
    "label": "InvalidateAutocomplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAutocomplete()"
  },
  {
    "label": "InputKey_InputLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey_InputLine(FInputDeviceId DeviceId, FKey Key, EInputEvent Event, float AmountDepressed = 1.f, bool bGamepad = false)"
  },
  {
    "label": "OutputTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTextLine(const FString& Text)"
  },
  {
    "label": "PostRender_InputLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender_InputLine(class UCanvas* Canvas, FIntPoint UserInputLinePos)"
  },
  {
    "label": "SetAutoCompleteFromHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoCompleteFromHistory()"
  },
  {
    "label": "SetInputLineFromAutoComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputLineFromAutoComplete()"
  },
  {
    "label": "UpdatePrecompletedInputLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrecompletedInputLine()"
  },
  {
    "label": "NormalizeHistoryBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeHistoryBuffer()"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLine(\n\t\tUCanvas* Canvas, UFont* Font, FCanvasTileItem& TileBlack, FCanvasTileItem& TileWhite,\n\t\tFCanvasTextItem ConsoleText, const FString& Line, float PenX, float PenY, float PosLeft,\n\t\tTArray<FString>& SelectedLines)"
  },
  {
    "label": "GetPosInTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPosInTextLine(UCanvas* Canvas, UFont* Font, const FString& Line, float MousePosX, float& PosInLine, int32& PosInString)"
  },
  {
    "label": "GetPosTextLineEnd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPosTextLineEnd(UCanvas* Canvas, UFont* Font, const FString& Line)"
  }
]