[
  {
    "label": "CoalescerPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoalescerPair"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "SmallPtrSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallPtrSet"
  },
  {
    "label": "VNInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VNInfo"
  },
  {
    "label": "LiveQueryResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveQueryResult"
  },
  {
    "label": "LiveRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRange"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Segment"
  },
  {
    "label": "LiveRangeUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRangeUpdater"
  },
  {
    "label": "LiveInterval",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveInterval"
  },
  {
    "label": "SubRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SubRange"
  },
  {
    "label": "SingleLinkedListIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleLinkedListIterator"
  },
  {
    "label": "ConnectedVNInfoEqClasses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConnectedVNInfoEqClasses"
  },
  {
    "label": "VNInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVEINTERVAL_H # define LLVM_CODEGEN_LIVEINTERVAL_H # include \" llvm / ADT / IntEqClasses . h \" # include \" llvm / CodeGen / SlotIndexes . h \" # include \" llvm / Support / AlignOf . h \" # include \" llvm / Support / Allocator . h \" # include<cassert> # include<climits> # include<set> namespace llvm { class CoalescerPair ; class LiveIntervals ; class MachineInstr ; class MachineRegisterInfo ; class TargetRegisterInfo ; class raw_ostream ; template<T,unsigned Small> class SmallPtrSet ; class VNInfo { public : typedef BumpPtrAllocator Allocator ; unsigned id ; SlotIndex def ;)",
    "insertText": "VNInfo(unsigned i, SlotIndex d) : id(i), def(d)"
  },
  {
    "label": "VNInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VNInfo(unsigned i, const VNInfo &orig) : id(i), def(orig.def)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copyFrom(VNInfo &src)"
  },
  {
    "label": "isPHIDef()",
    "kind": "Method",
    "detail": "Function (def = src . def ; } bool)",
    "insertText": "isPHIDef()"
  },
  {
    "label": "isUnused()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnused()"
  },
  {
    "label": "markUnused()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "markUnused()"
  },
  {
    "label": "SlotIndex()",
    "kind": "Method",
    "detail": "Function (def =)",
    "insertText": "SlotIndex()"
  },
  {
    "label": "LiveQueryResult()",
    "kind": "Method",
    "detail": "Function (} } ; class LiveQueryResult { VNInfo* const EarlyVal ; VNInfo* const LateVal ; const SlotIndex EndPoint ; const bool Kill ; public :)",
    "insertText": "LiveQueryResult(VNInfo *EarlyVal, VNInfo *LateVal, SlotIndex EndPoint, bool Kill) : EarlyVal(EarlyVal), LateVal(LateVal), EndPoint(EndPoint), Kill(Kill)"
  },
  {
    "label": "valueIn()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "valueIn()"
  },
  {
    "label": "valueOut()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "valueOut()"
  },
  {
    "label": "valueOutOrDead()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "valueOutOrDead()"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Segment(SlotIndex S, SlotIndex E, VNInfo *V) : start(S), end(E), valno(V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(S < E && \"Cannot create empty or backwards segment\")"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(SlotIndex I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((S < E) && \"Backwards interval?\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Segment &Other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; typedef SmallVector<Segment,4> Segments ; typedef SmallVector<VNInfo*,4> VNInfoList ; Segments segments ; VNInfoList valnos ; typedef std::set<Segment> SegmentSet ; std::unique_ptr<SegmentSet> segmentSet ; typedef Segments::iterator iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "vni_begin()",
    "kind": "Method",
    "detail": "Function (} typedef VNInfoList::iterator vni_iterator ; vni_iterator)",
    "insertText": "vni_begin()"
  },
  {
    "label": "vni_end()",
    "kind": "Method",
    "detail": "Function (} vni_iterator)",
    "insertText": "vni_end()"
  },
  {
    "label": "LiveRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LiveRange(bool UseSegmentSet = false) : segmentSet(UseSegmentSet ? llvm::make_unique<SegmentSet>() : nullptr)"
  },
  {
    "label": "LiveRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LiveRange(const LiveRange &Other, BumpPtrAllocator &Allocator)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Other.segmentSet == nullptr && \"Copying of LiveRanges with active SegmentSets is not supported\")"
  },
  {
    "label": "createValueCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createValueCopy(VNI, Allocator)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const Segment &S : Other.segments)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (segments .)",
    "insertText": "push_back(Segment(S.start, S.end, valnos[S.valno->id]))"
  },
  {
    "label": "advanceTo()",
    "kind": "Method",
    "detail": "Function (} } iterator)",
    "insertText": "advanceTo(iterator I, SlotIndex Pos)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != end())"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "find(SlotIndex Pos)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "hasAtLeastOneValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasAtLeastOneValue()"
  },
  {
    "label": "containsOneValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "containsOneValue()"
  },
  {
    "label": "getNumValNums()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumValNums()"
  },
  {
    "label": "getValNumInfo()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "getValNumInfo(unsigned ValNo)"
  },
  {
    "label": "getNextValue()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "getNextValue(SlotIndex def, VNInfo::Allocator &VNInfoAllocator)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (VNInfo* VNI =)",
    "insertText": "new(VNInfoAllocator) VNInfo((unsigned)valnos.size(), def)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (valnos .)",
    "insertText": "push_back(VNI)"
  },
  {
    "label": "createValueCopy()",
    "kind": "Method",
    "detail": "Function (VNInfo*)",
    "insertText": "createValueCopy(const VNInfo *orig, VNInfo::Allocator &VNInfoAllocator)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (VNInfo* VNI =)",
    "insertText": "new(VNInfoAllocator) VNInfo((unsigned)valnos.size(), *orig)"
  },
  {
    "label": "MergeValueNumberInto()",
    "kind": "Method",
    "detail": "Function (VNInfo*)",
    "insertText": "MergeValueNumberInto(VNInfo *V1, VNInfo *V2)"
  },
  {
    "label": "MergeSegmentsInAsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeSegmentsInAsValue(const LiveRange &RHS, VNInfo *LHSValNo)"
  },
  {
    "label": "MergeValueInAsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeValueInAsValue(const LiveRange &RHS, const VNInfo *RHSValNo, VNInfo *LHSValNo)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "beginIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "beginIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"Call to beginIndex() on empty range.\")"
  },
  {
    "label": "endIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "endIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"Call to endIndex() on empty range.\")"
  },
  {
    "label": "expiredAt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "expiredAt(SlotIndex index)"
  },
  {
    "label": "liveAt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "liveAt(SlotIndex index)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const_iterator r =)",
    "insertText": "find(index)"
  },
  {
    "label": "getSegmentContaining()",
    "kind": "Method",
    "detail": "Function (} const Segment*)",
    "insertText": "getSegmentContaining(SlotIndex Idx)"
  },
  {
    "label": "FindSegmentContaining()",
    "kind": "Method",
    "detail": "Function (const_iterator I =)",
    "insertText": "FindSegmentContaining(Idx)"
  },
  {
    "label": "getVNInfoAt()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "getVNInfoAt(SlotIndex Idx)"
  },
  {
    "label": "getVNInfoBefore()",
    "kind": "Method",
    "detail": "Function (} VNInfo*)",
    "insertText": "getVNInfoBefore(SlotIndex Idx)"
  },
  {
    "label": "FindSegmentContaining()",
    "kind": "Method",
    "detail": "Function (const_iterator I =)",
    "insertText": "FindSegmentContaining(Idx.getPrevSlot())"
  },
  {
    "label": "FindSegmentContaining()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "FindSegmentContaining(SlotIndex Idx)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator I =)",
    "insertText": "find(Idx)"
  },
  {
    "label": "overlaps()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "overlaps(const LiveRange &other)"
  },
  {
    "label": "overlaps()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "overlaps(const LiveRange &Other, const CoalescerPair &CP, const SlotIndexes&)"
  },
  {
    "label": "overlaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "overlaps(SlotIndex Start, SlotIndex End)"
  },
  {
    "label": "overlapsFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "overlapsFrom(const LiveRange &Other, const_iterator I)"
  },
  {
    "label": "covers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "covers(const LiveRange &Other)"
  },
  {
    "label": "addSegment()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "addSegment(Segment S)"
  },
  {
    "label": "extendInBlock()",
    "kind": "Method",
    "detail": "Function (VNInfo*)",
    "insertText": "extendInBlock(SlotIndex StartIdx, SlotIndex Use)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "join(LiveRange &Other, const int *ValNoAssignments, const int *RHSValNoAssignments, SmallVectorImpl<VNInfo *> &NewVNInfo)"
  },
  {
    "label": "isLocal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLocal(SlotIndex Start, SlotIndex End)"
  },
  {
    "label": "removeSegment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeSegment(SlotIndex Start, SlotIndex End, bool RemoveDeadValNo = false)"
  },
  {
    "label": "removeSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeSegment(Segment S, bool RemoveDeadValNo = false)"
  },
  {
    "label": "removeSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeSegment(S.start, S.end, RemoveDeadValNo)"
  },
  {
    "label": "removeSegment()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "removeSegment(iterator I)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (} LiveQueryResult)",
    "insertText": "Query(SlotIndex Idx)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const_iterator I =)",
    "insertText": "find(Idx.getBaseIndex())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VNInfo* EarlyVal = nullptr ; VNInfo* LateVal = nullptr ; SlotIndex EndPoint ; bool Kill = false ;)",
    "insertText": "if(I->start <= Idx.getBaseIndex())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EarlyVal = I -> valno ; EndPoint = I -> end ;)",
    "insertText": "if(SlotIndex::isSameInstr(Idx, I->end))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Kill = true ;)",
    "insertText": "if(++I == E) return LiveQueryResult(EarlyVal, LateVal, EndPoint, Kill)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EarlyVal->def == Idx.getBaseIndex())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!SlotIndex::isEarlierInstr(Idx, I->start))"
  },
  {
    "label": "LiveQueryResult()",
    "kind": "Method",
    "detail": "Function (LateVal = I -> valno ; EndPoint = I -> end ; } return)",
    "insertText": "LiveQueryResult(EarlyVal, LateVal, EndPoint, Kill)"
  },
  {
    "label": "removeValNo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeValNo(VNInfo *ValNo)"
  },
  {
    "label": "isZeroLength()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isZeroLength(SlotIndexes *Indexes)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (# ifdef NDEBUG void)",
    "insertText": "verify()"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "append(const LiveRange::Segment S)"
  },
  {
    "label": "addSegmentToSet()",
    "kind": "Method",
    "detail": "Function (private : class LiveRangeUpdater ; void)",
    "insertText": "addSegmentToSet(Segment S)"
  },
  {
    "label": "markValNoForDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markValNoForDeletion(VNInfo *V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const LiveRange &LR)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (LR .)",
    "insertText": "print(OS)"
  },
  {
    "label": "SubRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SubRange(unsigned LaneMask, const LiveRange &Other, BumpPtrAllocator &Allocator) : LiveRange(Other, Allocator), Next(nullptr), LaneMask(LaneMask)"
  },
  {
    "label": "LiveInterval()",
    "kind": "Method",
    "detail": "Function (} } ; private : SubRange* SubRanges ; public : const unsigned reg ; float weight ;)",
    "insertText": "LiveInterval(unsigned Reg, float Weight) : SubRanges(nullptr), reg(Reg), weight(Weight)"
  },
  {
    "label": "LiveInterval()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LiveInterval()"
  },
  {
    "label": "clearSubRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearSubRanges()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T> class SingleLinkedListIterator { T* P ; public : SingleLinkedListIterator<)",
    "insertText": "T(T *P) : P(P)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SingleLinkedListIterator<T>&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (P = P -> Next ; return* this ; } SingleLinkedListIterator<T>&)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SingleLinkedListIterator res =* this ; + +* this ; return res ; } bool)",
    "insertText": "operator(const SingleLinkedListIterator<T> &Other)"
  },
  {
    "label": "subrange_end()",
    "kind": "Method",
    "detail": "Function (} subrange_iterator)",
    "insertText": "subrange_end()"
  },
  {
    "label": "subrange_begin()",
    "kind": "Method",
    "detail": "Function (} typedef SingleLinkedListIterator<const SubRange> const_subrange_iterator ; const_subrange_iterator)",
    "insertText": "subrange_begin()"
  },
  {
    "label": "subranges()",
    "kind": "Method",
    "detail": "Function (} iterator_range<subrange_iterator>)",
    "insertText": "subranges()"
  },
  {
    "label": "createSubRange()",
    "kind": "Method",
    "detail": "Function (} SubRange*)",
    "insertText": "createSubRange(BumpPtrAllocator &Allocator, unsigned LaneMask)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (SubRange* Range =)",
    "insertText": "new(Allocator) SubRange(LaneMask)"
  },
  {
    "label": "appendSubRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendSubRange(Range)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (SubRange* Range =)",
    "insertText": "new(Allocator) SubRange(LaneMask, CopyFrom, Allocator)"
  },
  {
    "label": "removeEmptySubRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeEmptySubRanges()"
  },
  {
    "label": "constructMainRangeFromSubranges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "constructMainRangeFromSubranges(const SlotIndexes &Indexes, VNInfo::Allocator &VNIAllocator)"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSize()"
  },
  {
    "label": "isSpillable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSpillable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (weight = llvm::huge_valf ; } bool)",
    "insertText": "operator(const LiveInterval& other)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (# ifdef NDEBUG void)",
    "insertText": "verify(const MachineRegisterInfo *MRI = nullptr)"
  },
  {
    "label": "appendSubRange()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "appendSubRange(SubRange *Range)"
  },
  {
    "label": "freeSubRange()",
    "kind": "Method",
    "detail": "Function (Range -> Next = SubRanges ; SubRanges = Range ; } void)",
    "insertText": "freeSubRange(SubRange *S)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const LiveInterval &LI)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(SlotIndex V, const LiveRange::Segment &S)"
  },
  {
    "label": "LiveRangeUpdater()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LiveRangeUpdater(LiveRange *lr = nullptr) : LR(lr)"
  },
  {
    "label": "LiveRangeUpdater()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LiveRangeUpdater()"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flush()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "add(LiveRange::Segment)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(SlotIndex Start, SlotIndex End, VNInfo *VNI)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(LiveRange::Segment(Start, End, VNI))"
  },
  {
    "label": "isDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDirty()"
  },
  {
    "label": "setDest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDest(LiveRange *lr)"
  },
  {
    "label": "getDest()",
    "kind": "Method",
    "detail": "Function (LR = lr ; } LiveRange*)",
    "insertText": "getDest()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const LiveRangeUpdater &X)"
  },
  {
    "label": "Renumber()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "Renumber()"
  },
  {
    "label": "ConnectedVNInfoEqClasses()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ConnectedVNInfoEqClasses(LiveIntervals &lis) : LIS(lis)"
  },
  {
    "label": "Classify()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "Classify(const LiveInterval *LI)"
  },
  {
    "label": "getEqClass()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getEqClass(const VNInfo *VNI)"
  }
]