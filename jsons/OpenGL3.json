[
  {
    "label": "FPlatformOpenGLContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLContext"
  },
  {
    "label": "FPlatformOpenGLDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLDevice"
  },
  {
    "label": "FOpenGL3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGL3"
  },
  {
    "label": "IsDebugContent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OpenGLPlatform . h \" # if UGL_PLATFORM_SUPPORTS_GL3 # include \" Containers / Map . h \" # include \" OpenGLBase . h \" struct FPlatformOpenGLContext ; struct FPlatformOpenGLDevice ; # define USE_OPENGL_NAME_CACHE 1 # define OPENGL_NAME_CACHE_SIZE 1 0 2 4 struct FOpenGL3 : public FOpenGLBase { bool)",
    "insertText": "IsDebugContent()"
  },
  {
    "label": "glQueryCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glQueryCounter(QueryID, GL_TIMESTAMP)"
  },
  {
    "label": "BeginQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginQuery(GLenum QueryType, GLuint QueryId)"
  },
  {
    "label": "glBeginQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBeginQuery(QueryType, QueryId)"
  },
  {
    "label": "EndQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndQuery(GLenum QueryType)"
  },
  {
    "label": "glEndQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glEndQuery(QueryType)"
  },
  {
    "label": "GetQueryObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetQueryObject(GLuint QueryId, EQueryMode QueryMode, GLuint64* OutResult)"
  },
  {
    "label": "QueryName()",
    "kind": "Method",
    "detail": "Function (GLenum)",
    "insertText": "QueryName(QueryMode == QM_Result)"
  },
  {
    "label": "glGetQueryObjectui64v()",
    "kind": "Method",
    "detail": "Function (GLuint64 Result = 0 ;)",
    "insertText": "glGetQueryObjectui64v(QueryId, QueryName, &Result)"
  },
  {
    "label": "ReadBuffer()",
    "kind": "Method",
    "detail": "Function (* OutResult = Result ; } void)",
    "insertText": "ReadBuffer(GLenum Mode)"
  },
  {
    "label": "glReadBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glReadBuffer(Mode)"
  },
  {
    "label": "DrawBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawBuffer(GLenum Mode)"
  },
  {
    "label": "glDrawBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawBuffer(Mode)"
  },
  {
    "label": "DeleteSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteSync(UGLsync Sync)"
  },
  {
    "label": "glDeleteSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteSync(Sync)"
  },
  {
    "label": "FenceSync()",
    "kind": "Method",
    "detail": "Function (} UGLsync)",
    "insertText": "FenceSync(GLenum Condition, GLbitfield Flags)"
  },
  {
    "label": "IsSync()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSync(UGLsync Sync)"
  },
  {
    "label": "ClientWaitSync()",
    "kind": "Method",
    "detail": "Function (} EFenceResult)",
    "insertText": "ClientWaitSync(UGLsync Sync, GLbitfield Flags, GLuint64 Timeout)"
  },
  {
    "label": "glClientWaitSync()",
    "kind": "Method",
    "detail": "Function (GLenum Result =)",
    "insertText": "glClientWaitSync(Sync, Flags, Timeout)"
  },
  {
    "label": "glGenSamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenSamplers(Count, Samplers)"
  },
  {
    "label": "DeleteSamplers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteSamplers(GLsizei Count, GLuint* Samplers)"
  },
  {
    "label": "glDeleteSamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteSamplers(Count, Samplers)"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSamplerParameter(GLuint Sampler, GLenum Parameter, GLint Value)"
  },
  {
    "label": "glSamplerParameteri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glSamplerParameteri(Sampler, Parameter, Value)"
  },
  {
    "label": "BindSampler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindSampler(GLuint Unit, GLuint Sampler)"
  },
  {
    "label": "glBindSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindSampler(Unit, Sampler)"
  },
  {
    "label": "PolygonMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PolygonMode(GLenum Face, GLenum Mode)"
  },
  {
    "label": "glPolygonMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPolygonMode(Face, Mode)"
  },
  {
    "label": "VertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribDivisor(GLuint Index, GLuint Divisor)"
  },
  {
    "label": "glVertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribDivisor(Index, Divisor)"
  },
  {
    "label": "MapBufferRange()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "MapBufferRange(GLenum Type, uint32 InOffset, uint32 InSize, EResourceLockMode LockMode)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (GLenum Access ;)",
    "insertText": "switch(LockMode)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_WriteOnly :)",
    "insertText": "Access(GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_WRITE_BIT)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (# if 1 Access | = GL_MAP_UNSYNCHRONIZED_BIT ; # endif break ; case EResourceLockMode::RLM_WriteOnlyUnsynchronized :)",
    "insertText": "Access(GL_MAP_WRITE_BIT | GL_MAP_UNSYNCHRONIZED_BIT)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_WriteOnlyPersistent :)",
    "insertText": "Access(GL_MAP_WRITE_BIT | GL_MAP_PERSISTENT_BIT | GL_MAP_COHERENT_BIT)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_ReadWrite : default :)",
    "insertText": "Access(GL_MAP_READ_BIT | GL_MAP_WRITE_BIT)"
  },
  {
    "label": "glMapBufferRange()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "glMapBufferRange(Type, InOffset, InSize, Access)"
  },
  {
    "label": "UnmapBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnmapBuffer(GLenum Type)"
  },
  {
    "label": "glUnmapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUnmapBuffer(Type)"
  },
  {
    "label": "UnmapBufferRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnmapBufferRange(GLenum Type, uint32 InOffset, uint32 InSize)"
  },
  {
    "label": "UnmapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapBuffer(Type)"
  },
  {
    "label": "GenQueries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenQueries(GLsizei NumQueries, GLuint* QueryIDs)"
  },
  {
    "label": "glGenQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenQueries(NumQueries, QueryIDs)"
  },
  {
    "label": "DeleteQueries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteQueries(GLsizei NumQueries, const GLuint* QueryIDs)"
  },
  {
    "label": "glDeleteQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteQueries(NumQueries, QueryIDs)"
  },
  {
    "label": "GetQueryObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetQueryObject(GLuint QueryId, EQueryMode QueryMode, GLuint* OutResult)"
  },
  {
    "label": "glGetQueryObjectuiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetQueryObjectuiv(QueryId, QueryName, OutResult)"
  },
  {
    "label": "BindBufferBase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindBufferBase(GLenum Target, GLuint Index, GLuint Buffer)"
  },
  {
    "label": "glBindBufferBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBufferBase(Target, Index, Buffer)"
  },
  {
    "label": "BindBufferRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindBufferRange(GLenum Target, GLuint Index, GLuint Buffer, GLintptr Offset, GLsizeiptr Size)"
  },
  {
    "label": "glBindBufferRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBufferRange(Target, Index, Buffer, Offset, Size)"
  },
  {
    "label": "GetUniformBlockIndex()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "GetUniformBlockIndex(GLuint Program, const GLchar* UniformBlockName)"
  },
  {
    "label": "UniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UniformBlockBinding(GLuint Program, GLuint UniformBlockIndex, GLuint UniformBlockBinding)"
  },
  {
    "label": "glUniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniformBlockBinding(Program, UniformBlockIndex, UniformBlockBinding)"
  },
  {
    "label": "BindFragDataLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindFragDataLocation(GLuint Program, GLuint Color, const GLchar* Name)"
  },
  {
    "label": "glBindFragDataLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindFragDataLocation(Program, Color, Name)"
  },
  {
    "label": "TexParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexParameter(GLenum Target, GLenum Parameter, GLint Value)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexParameteri(Target, Parameter, Value)"
  },
  {
    "label": "FramebufferTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level)"
  },
  {
    "label": "glFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTexture(Target, Attachment, Texture, Level)"
  },
  {
    "label": "FramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture3D(GLenum Target, GLenum Attachment, GLenum TexTarget, GLuint Texture, GLint Level, GLint ZOffset)"
  },
  {
    "label": "glFramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTexture3D(Target, Attachment, TexTarget, Texture, Level, ZOffset)"
  },
  {
    "label": "FramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTextureLayer(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLint Layer)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTextureLayer(Target, Attachment, Texture, Level, Layer)"
  },
  {
    "label": "Uniform4uiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Uniform4uiv(GLint Location, GLsizei Count, const GLuint* Value)"
  },
  {
    "label": "glUniform4uiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform4uiv(Location, Count, Value)"
  },
  {
    "label": "BlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlitFramebuffer(GLint SrcX0, GLint SrcY0, GLint SrcX1, GLint SrcY1, GLint DstX0, GLint DstY0, GLint DstX1, GLint DstY1, GLbitfield Mask, GLenum Filter)"
  },
  {
    "label": "glBlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBlitFramebuffer(SrcX0, SrcY0, SrcX1, SrcY1, DstX0, DstY0, DstX1, DstY1, Mask, Filter)"
  },
  {
    "label": "DrawBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawBuffers(GLsizei NumBuffers, const GLenum* Buffers)"
  },
  {
    "label": "glDrawBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawBuffers(NumBuffers, Buffers)"
  },
  {
    "label": "DepthRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DepthRange(GLdouble Near, GLdouble Far)"
  },
  {
    "label": "glDepthRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDepthRange(Near, Far)"
  },
  {
    "label": "EnableIndexed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableIndexed(GLenum Parameter, GLuint Index)"
  },
  {
    "label": "glEnablei()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glEnablei(Parameter, Index)"
  },
  {
    "label": "DisableIndexed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableIndexed(GLenum Parameter, GLuint Index)"
  },
  {
    "label": "glDisablei()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDisablei(Parameter, Index)"
  },
  {
    "label": "ColorMaskIndexed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ColorMaskIndexed(GLuint Index, GLboolean Red, GLboolean Green, GLboolean Blue, GLboolean Alpha)"
  },
  {
    "label": "glColorMaski()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glColorMaski(Index, Red, Green, Blue, Alpha)"
  },
  {
    "label": "VertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribPointer(GLuint Index, GLint Size, GLenum Type, GLboolean Normalized, GLsizei Stride, const GLvoid* Pointer)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribPointer(Index, Size, Type, Normalized, Stride, Pointer)"
  },
  {
    "label": "VertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribIPointer(GLuint Index, GLint Size, GLenum Type, GLsizei Stride, const GLvoid* Pointer)"
  },
  {
    "label": "glVertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribIPointer(Index, Size, Type, Stride, Pointer)"
  },
  {
    "label": "VertexAttrib4Nsv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4Nsv(GLuint AttributeIndex, const GLshort* Values)"
  },
  {
    "label": "glVertexAttrib4Nsv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4Nsv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttrib4sv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4sv(GLuint AttributeIndex, const GLshort* Values)"
  },
  {
    "label": "glVertexAttrib4sv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4sv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttribI4sv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribI4sv(GLuint AttributeIndex, const GLshort* Values)"
  },
  {
    "label": "glVertexAttribI4sv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribI4sv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttribI4usv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribI4usv(GLuint AttributeIndex, const GLushort* Values)"
  },
  {
    "label": "glVertexAttribI4usv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribI4usv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttrib4Nubv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4Nubv(GLuint AttributeIndex, const GLubyte* Values)"
  },
  {
    "label": "glVertexAttrib4Nubv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4Nubv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttrib4ubv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4ubv(GLuint AttributeIndex, const GLubyte* Values)"
  },
  {
    "label": "glVertexAttrib4ubv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4ubv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttribI4ubv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribI4ubv(GLuint AttributeIndex, const GLubyte* Values)"
  },
  {
    "label": "glVertexAttribI4ubv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribI4ubv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttrib4Nbv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4Nbv(GLuint AttributeIndex, const GLbyte* Values)"
  },
  {
    "label": "glVertexAttrib4Nbv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4Nbv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttrib4bv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4bv(GLuint AttributeIndex, const GLbyte* Values)"
  },
  {
    "label": "glVertexAttrib4bv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4bv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttribI4bv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribI4bv(GLuint AttributeIndex, const GLbyte* Values)"
  },
  {
    "label": "glVertexAttribI4bv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribI4bv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttrib4dv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttrib4dv(GLuint AttributeIndex, const GLdouble* Values)"
  },
  {
    "label": "glVertexAttrib4dv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttrib4dv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttribI4iv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribI4iv(GLuint AttributeIndex, const GLint* Values)"
  },
  {
    "label": "glVertexAttribI4iv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribI4iv(AttributeIndex, Values)"
  },
  {
    "label": "VertexAttribI4uiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribI4uiv(GLuint AttributeIndex, const GLuint* Values)"
  },
  {
    "label": "glVertexAttribI4uiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribI4uiv(AttributeIndex, Values)"
  },
  {
    "label": "DrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawArraysInstanced(GLenum Mode, GLint First, GLsizei Count, GLsizei InstanceCount)"
  },
  {
    "label": "glDrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawArraysInstanced(Mode, First, Count, InstanceCount)"
  },
  {
    "label": "DrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawElementsInstanced(GLenum Mode, GLsizei Count, GLenum Type, const GLvoid* Indices, GLsizei InstanceCount)"
  },
  {
    "label": "glDrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawElementsInstanced(Mode, Count, Type, Indices, InstanceCount)"
  },
  {
    "label": "DrawRangeElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawRangeElements(GLenum Mode, GLuint Start, GLuint End, GLsizei Count, GLenum Type, const GLvoid* Indices)"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawRangeElements(Mode, Start, End, Count, Type, Indices)"
  },
  {
    "label": "ClearBufferfv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBufferfv(GLenum Buffer, GLint DrawBufferIndex, const GLfloat* Value)"
  },
  {
    "label": "glClearBufferfv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearBufferfv(Buffer, DrawBufferIndex, Value)"
  },
  {
    "label": "ClearBufferfi()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBufferfi(GLenum Buffer, GLint DrawBufferIndex, GLfloat Depth, GLint Stencil)"
  },
  {
    "label": "glClearBufferfi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearBufferfi(Buffer, DrawBufferIndex, Depth, Stencil)"
  },
  {
    "label": "ClearBufferiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBufferiv(GLenum Buffer, GLint DrawBufferIndex, const GLint* Value)"
  },
  {
    "label": "glClearBufferiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearBufferiv(Buffer, DrawBufferIndex, Value)"
  },
  {
    "label": "ClearDepth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDepth(GLdouble Depth)"
  },
  {
    "label": "glClearDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearDepth(Depth)"
  },
  {
    "label": "TexImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexImage3D(GLenum Target, GLint Level, GLint InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLint Border, GLenum Format, GLenum Type, const GLvoid* PixelData)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexImage3D(Target, Level, InternalFormat, Width, Height, Depth, Border, Format, Type, PixelData)"
  },
  {
    "label": "CompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompressedTexImage3D(GLenum Target, GLint Level, GLenum InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLint Border, GLsizei ImageSize, const GLvoid* PixelData)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCompressedTexImage3D(Target, Level, InternalFormat, Width, Height, Depth, Border, ImageSize, PixelData)"
  },
  {
    "label": "CompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompressedTexSubImage2D(GLenum Target, GLint Level, GLsizei Width, GLsizei Height, GLenum Format, GLsizei ImageSize, const GLvoid* PixelData)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCompressedTexSubImage2D(Target, Level, 0, 0, Width, Height, Format, ImageSize, PixelData)"
  },
  {
    "label": "TexImage2DMultisample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexImage2DMultisample(GLenum Target, GLsizei Samples, GLint InternalFormat, GLsizei Width, GLsizei Height, GLboolean FixedSampleLocations)"
  },
  {
    "label": "glTexImage2DMultisample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexImage2DMultisample(Target, Samples, InternalFormat, Width, Height, FixedSampleLocations)"
  },
  {
    "label": "TexBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexBuffer(GLenum Target, GLenum InternalFormat, GLuint Buffer)"
  },
  {
    "label": "glTexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexBuffer(Target, InternalFormat, Buffer)"
  },
  {
    "label": "TexSubImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLenum Type, const GLvoid* PixelData)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexSubImage3D(Target, Level, XOffset, YOffset, ZOffset, Width, Height, Depth, Format, Type, PixelData)"
  },
  {
    "label": "CopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTexSubImage1D(GLenum Target, GLint Level, GLint XOffset, GLint X, GLint Y, GLsizei Width)"
  },
  {
    "label": "glCopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyTexSubImage1D(Target, Level, XOffset, X, Y, Width)"
  },
  {
    "label": "CopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTexSubImage2D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint X, GLint Y, GLsizei Width, GLsizei Height)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyTexSubImage2D(Target, Level, XOffset, YOffset, X, Y, Width, Height)"
  },
  {
    "label": "CopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLint X, GLint Y, GLsizei Width, GLsizei Height)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyTexSubImage3D(Target, Level, XOffset, YOffset, ZOffset, X, Y, Width, Height)"
  },
  {
    "label": "GetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCompressedTexImage(GLenum Target, GLint Level, GLvoid* OutImageData)"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetCompressedTexImage(Target, Level, OutImageData)"
  },
  {
    "label": "GetTexImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTexImage(GLenum Target, GLint Level, GLenum Format, GLenum Type, GLvoid* OutPixelData)"
  },
  {
    "label": "glGetTexImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetTexImage(Target, Level, Format, Type, OutPixelData)"
  },
  {
    "label": "CopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyBufferSubData(GLenum ReadTarget, GLenum WriteTarget, GLintptr ReadOffset, GLintptr WriteOffset, GLsizeiptr Size)"
  },
  {
    "label": "glCopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyBufferSubData(ReadTarget, WriteTarget, ReadOffset, WriteOffset, Size)"
  },
  {
    "label": "CreateShader()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "CreateShader(GLenum Type)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (# if USE_OPENGL_NAME_CACHE TMap<GLenum,TArray<GLuint>> ShaderNames ; TArray<GLuint>& Shaders = ShaderNames .)",
    "insertText": "FindOrAdd(Type)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (GLuint Resource =)",
    "insertText": "glCreateShader(Type)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Shaders .)",
    "insertText": "Add(Resource)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} } return Shaders .)",
    "insertText": "Pop()"
  },
  {
    "label": "CreateProgram()",
    "kind": "Method",
    "detail": "Function (# endif } GLuint)",
    "insertText": "CreateProgram()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if USE_OPENGL_NAME_CACHE TArray<GLuint> ProgramNames ;)",
    "insertText": "if(!ProgramNames.Num())"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (GLuint Resource =)",
    "insertText": "glCreateProgram()"
  },
  {
    "label": "GenBuffers()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "GenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if USE_OPENGL_NAME_CACHE)",
    "insertText": "if(n < OPENGL_NAME_CACHE_SIZE - NextBufferName)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(buffers, &BufferNamesCache[NextBufferName], sizeof(GLuint)*n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextBufferName + = n ; } else {)",
    "insertText": "if(n >= OPENGL_NAME_CACHE_SIZE)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenBuffers(n, buffers)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} else { GLsizei Leftover = OPENGL_NAME_CACHE_SIZE - NextBufferName ;)",
    "insertText": "Memcpy(buffers, &BufferNamesCache[NextBufferName], sizeof(GLuint)*Leftover)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenBuffers(OPENGL_NAME_CACHE_SIZE, BufferNamesCache)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (n - = Leftover ; buffers + = Leftover ;)",
    "insertText": "Memcpy(buffers, BufferNamesCache, sizeof(GLuint)*n)"
  },
  {
    "label": "GenTextures()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "GenTextures(GLsizei n, GLuint *textures)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if USE_OPENGL_NAME_CACHE)",
    "insertText": "if(n < OPENGL_NAME_CACHE_SIZE - NextTextureName)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(textures, &TextureNamesCache[NextTextureName], sizeof(GLuint)*n)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenTextures(n, textures)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} else { GLsizei Leftover = OPENGL_NAME_CACHE_SIZE - NextTextureName ;)",
    "insertText": "Memcpy(textures, &TextureNamesCache[NextTextureName], sizeof(GLuint)*Leftover)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenTextures(OPENGL_NAME_CACHE_SIZE, TextureNamesCache)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (n - = Leftover ; textures + = Leftover ;)",
    "insertText": "Memcpy(textures, TextureNamesCache, sizeof(GLuint)*n)"
  },
  {
    "label": "CompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "CompressedTexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLsizei ImageSize, const GLvoid* PixelData)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCompressedTexSubImage3D(Target, Level, XOffset, YOffset, ZOffset, Width, Height, Depth, Format, ImageSize, PixelData)"
  },
  {
    "label": "GenerateMipmap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateMipmap(GLenum Target)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenerateMipmap(Target)"
  },
  {
    "label": "GetStringIndexed()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "GetStringIndexed(GLenum Name, GLuint Index)"
  },
  {
    "label": "GetMajorVersion()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "GetMajorVersion()"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GLint MajorVersion = 0 ;)",
    "insertText": "glGetIntegerv(GL_MAJOR_VERSION, &MajorVersion)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GLint MinorVersion = 0 ;)",
    "insertText": "glGetIntegerv(GL_MINOR_VERSION, &MinorVersion)"
  },
  {
    "label": "glProgramParameteri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glProgramParameteri(Program, PName, Value)"
  },
  {
    "label": "ProgramUniform1i()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform1i(GLuint Program, GLint Location, GLint V0)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform1i(Location, V0)"
  },
  {
    "label": "ProgramUniform4iv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4iv(GLuint Program, GLint Location, GLsizei Count, const GLint *Value)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform4iv(Location, Count, Value)"
  },
  {
    "label": "ProgramUniform4fv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4fv(GLuint Program, GLint Location, GLsizei Count, const GLfloat *Value)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform4fv(Location, Count, Value)"
  },
  {
    "label": "ProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4uiv(GLuint Program, GLint Location, GLsizei Count, const GLuint *Value)"
  },
  {
    "label": "GetProgramPipelineiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetProgramPipelineiv(GLuint Pipeline, GLenum Pname, GLint* Params)"
  },
  {
    "label": "glGetProgramPipelineiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetProgramPipelineiv(Pipeline, Pname, Params)"
  },
  {
    "label": "ValidateProgramPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateProgramPipeline(GLuint Pipeline)"
  },
  {
    "label": "glValidateProgramPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glValidateProgramPipeline(Pipeline)"
  },
  {
    "label": "GetProgramPipelineInfoLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetProgramPipelineInfoLog(GLuint Pipeline, GLsizei BufSize, GLsizei* Length, GLchar* InfoLog)"
  },
  {
    "label": "glGetProgramPipelineInfoLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetProgramPipelineInfoLog(Pipeline, BufSize, Length, InfoLog)"
  },
  {
    "label": "IsProgramPipeline()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProgramPipeline(GLuint Pipeline)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (} FPlatformOpenGLDevice*)",
    "insertText": "CreateDevice() UGL_REQUIRED(NULL) static FPlatformOpenGLContext* CreateContext( FPlatformOpenGLDevice* Device, void* WindowHandle ) UGL_REQUIRED(NULL) static void ProcessQueryGLInt()"
  },
  {
    "label": "ProcessExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExtensions(const FString& ExtensionsString)"
  },
  {
    "label": "GetReadHalfFloatPixelsEnum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetReadHalfFloatPixelsEnum()"
  }
]