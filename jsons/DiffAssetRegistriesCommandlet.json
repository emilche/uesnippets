[
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "UDiffAssetRegistriesCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDiffAssetRegistriesCommandlet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EAssetFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAssetFlags"
  },
  {
    "label": "FChangeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeInfo"
  },
  {
    "label": "FDeterminismInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeterminismInfo"
  },
  {
    "label": "FChunkChangeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkChangeInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Commandlets / Commandlet . h \" # include \" Misc / AssetRegistryInterface . h \" # include \" AssetRegistry / AssetRegistryState . h \" # include \" DiffAssetRegistriesCommandlet . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDiffAssets, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class IAssetRegistry ;)",
    "insertText": "UCLASS(CustomConstructor, config=Editor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (enum class SortOrder { BySize,ByName,ByClass,ByChange,} ; enum EAssetFlags {)",
    "insertText": "Add(1 << 0), Remove = (1 << 1), GuidChange = (1 << 2), HashChange = (1 << 3), DepGuidChange = (1 << 4), DepHashChange = (1 << 5)"
  },
  {
    "label": "ChangeFlagsDelete()",
    "kind": "Method",
    "detail": "Function (struct FChangeInfo { enum class EChangeFlags { ChangeFlagsNone = 0,)",
    "insertText": "ChangeFlagsDelete(1 << 0), ChangeFlagsEdit = (1 << 1), ChangeFlagsAdd = (1 << 2)"
  },
  {
    "label": "FChangeInfo()",
    "kind": "Method",
    "detail": "Function (int64 Adds,AddedBytes ; int64 Changes,ChangedBytes ; int64 Deletes,DeletedBytes ; int64 Unchanged,UnchangedBytes ;)",
    "insertText": "FChangeInfo()"
  },
  {
    "label": "GetChangePercentage()",
    "kind": "Method",
    "detail": "Function (Adds = AddedBytes = 0 ; Changes = ChangedBytes = 0 ; Deletes = DeletedBytes = 0 ; Unchanged = UnchangedBytes = 0 ; } float)",
    "insertText": "GetChangePercentage()"
  },
  {
    "label": "GetTotalChangeCount()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetTotalChangeCount()"
  },
  {
    "label": "GetChangeFlags()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetChangeFlags()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 Flags =)",
    "insertText": "int32(EChangeFlags::ChangeFlagsNone)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Flags | =)",
    "insertText": "int32(EChangeFlags::ChangeFlagsAdd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Changes > 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Flags | =)",
    "insertText": "int32(EChangeFlags::ChangeFlagsEdit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Deletes > 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Flags | =)",
    "insertText": "int32(EChangeFlags::ChangeFlagsDelete)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Flags ; } const FChangeInfo&)",
    "insertText": "operator(const FChangeInfo& Rhs)"
  },
  {
    "label": "AddDirect()",
    "kind": "Method",
    "detail": "Function (Adds + = Rhs . Adds ; AddedBytes + = Rhs . AddedBytes ; Changes + = Rhs . Changes ; ChangedBytes + = Rhs . ChangedBytes ; Deletes + = Rhs . Deletes ; DeletedBytes + = Rhs . DeletedBytes ; Unchanged + = Rhs . Unchanged ; UnchangedBytes + = Rhs . UnchangedBytes ; return* this ; } } ; struct FDeterminismInfo { int64 DirectSize ; int64 DirectCount ; int64 IndirectSize ; int64 IndirectCount ; TArray<int64> Direct ; TArray<int64> Indirect ; void)",
    "insertText": "AddDirect(const FChangeInfo& Rhs)"
  },
  {
    "label": "GetTotalChangeSize()",
    "kind": "Method",
    "detail": "Function (DirectSize + = Rhs .)",
    "insertText": "GetTotalChangeSize()"
  },
  {
    "label": "AddIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIndirect(const FChangeInfo& Rhs)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (} } ; struct FChunkChangeInfo { TSet<FName> IncludedAssets ; TMap<FName,FChangeInfo> ChangesByClass ; TMap<FName,FDeterminismInfo> Determinism ; } ;)",
    "insertText": "GENERATED_UCLASS_BODY() public: UDiffAssetRegistriesCommandlet(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (LogToConsole = true ; } int32)",
    "insertText": "Main(const FString& Params)"
  },
  {
    "label": "DiffAssetRegistries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiffAssetRegistries(const FString& OldPath, const FString& NewPath, bool bUseSourceGuid, bool bEnginePackagesOnly)"
  },
  {
    "label": "ConsistencyCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsistencyCheck(const FString& OldPath, const FString& NewPath)"
  },
  {
    "label": "RecordAdd()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RecordAdd(FName InAssetPath, const FAssetPackageData& InNewData)"
  },
  {
    "label": "RecordEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEdit(FName InAssetPath, const FAssetPackageData& InNewData, const FAssetPackageData& InOldData)"
  },
  {
    "label": "RecordDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordDelete(FName InAssetPath, const FAssetPackageData& InOldData)"
  },
  {
    "label": "RecordNoChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNoChange(FName InAssetPath, const FAssetPackageData& InData)"
  },
  {
    "label": "GetClassName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClassName(FAssetRegistryState& InRegistryState, FName InAssetPath)"
  },
  {
    "label": "GetAssetChunks()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetAssetChunks(FAssetRegistryState& InRegistryState, FName InAssetPath)"
  },
  {
    "label": "IsInRelevantChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInRelevantChunk(FAssetRegistryState& InRegistryState, FName InAssetPath)"
  },
  {
    "label": "LogChangedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogChangedFiles(FArchive *CSVFile, const FString &OldPath, const FString &NewPath)"
  },
  {
    "label": "LogClassSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogClassSummary(FArchive *CSVFile, const FString& HeaderPrefix, const TMap<FName, FChangeInfo>& InChangeInfoByAsset, bool bDoWarnings, TMap<FName, FDeterminismInfo> DeterminismInfo = TMap<FName, FDeterminismInfo>())"
  },
  {
    "label": "SummarizeDeterminism()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummarizeDeterminism()"
  },
  {
    "label": "PopulateChangelistMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateChangelistMap(const FString &Branch, const FString &CL, bool bEnginePackages)"
  },
  {
    "label": "FillChangelists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillChangelists(FString Branch, FString CL, FString BasePath, FString AssetPath)"
  },
  {
    "label": "LaunchP4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchP4(const FString& Args, TArray<FString>& Output, int32& OutReturnCode)"
  }
]