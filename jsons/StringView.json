[
  {
    "label": "TStringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringView"
  },
  {
    "label": "StringViewGetData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / Crc . h \" # include \" Misc / CString . h \" # include \" Misc / ReverseIterate . h \" # include \" String / Find . h \" # include \" Templates / Requires . h \" # include \" Templates / UnrealTemplate . h \" # include \" Traits / ElementType . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" Traits / IsCharType . h \" # include \" Traits / IsContiguousContainer . h \" # include<type_traits> namespace UE::Core::Private { template<. . . ArgTypes> auto)",
    "insertText": "StringViewGetData(ArgTypes&&... Args) -> decltype(GetData(Forward<ArgTypes>(Args)...))"
  },
  {
    "label": "TStringView()",
    "kind": "Method",
    "detail": "Function (} } template<CharType> class TStringView { public : using ElementType = CharType ; using ViewType = TStringView<CharType> ; public :)",
    "insertText": "TStringView()"
  },
  {
    "label": "TStringView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStringView(const CharType* InData UE_LIFETIMEBOUND) : DataPtr(InData) , Size(InData ? TCString<CharType>::Strlen(InData) : 0)"
  },
  {
    "label": "TStringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStringView(const CharType* InData UE_LIFETIMEBOUND, int32 InSize) : DataPtr(InData) , Size(InSize)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherCharType)",
    "insertText": "UE_REQUIRES(TAnd< TIsCharType<OtherCharType>, TIsCharEncodingCompatibleWith<OtherCharType, CharType> >::Value ) > constexpr inline TStringView(const OtherCharType* InData UE_LIFETIMEBOUND) : DataPtr((const CharType*)InData) , Size(InData ? TCString<CharType>::Strlen((const CharType*)InData) : 0)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherCharType)",
    "insertText": "UE_REQUIRES(TAnd< TIsCharType<OtherCharType>, TIsCharEncodingCompatibleWith<OtherCharType, CharType> >::Value ) > constexpr inline TStringView(const OtherCharType* InData UE_LIFETIMEBOUND, int32 InSize) : DataPtr((const CharType*)InData) , Size(InSize)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(TAnd< TIsContiguousContainer<CharRangeType>, TIsCharType<TElementType_T<CharRangeType>>, TIsCharEncodingCompatibleWith<TElementType_T<CharRangeType>, CharType> >::Value && !std::is_array_v<std::remove_reference_t<CharRangeType>> && !std::is_same_v<CharRangeType, ViewType> ) > constexpr inline TStringView(const CharRangeType& InRange UE_LIFETIMEBOUND) : DataPtr((const CharType*)UE::Core::Private::StringViewGetData(InRange)) , Size(IntCastChecked<int32>(GetNum(InRange)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const CharType&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] const CharType*)",
    "insertText": "GetData()"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] int32)",
    "insertText": "Len()"
  },
  {
    "label": "RemoveSuffix()",
    "kind": "Method",
    "detail": "Function (DataPtr + = CharCount ; Size - = CharCount ; } void)",
    "insertText": "RemoveSuffix(int32 CharCount)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Size - = CharCount ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "CopyString()",
    "kind": "Method",
    "detail": "Function (DataPtr = nullptr ; Size = 0 ; } int32)",
    "insertText": "CopyString(CharType* Dest, int32 CharCount, int32 Position = 0)"
  },
  {
    "label": "SubStr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "SubStr(int32 Position, int32 CharCount)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] ViewType)",
    "insertText": "Left(int32 CharCount)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "LeftChop(int32 CharCount)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "Right(int32 CharCount)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "RightChop(int32 CharCount)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "Mid(int32 Position, int32 CharCount = MAX_int32)"
  },
  {
    "label": "TrimStartAndEnd()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "TrimStartAndEnd()"
  },
  {
    "label": "TrimStart()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "TrimStart()"
  },
  {
    "label": "TrimEnd()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ViewType)",
    "insertText": "TrimEnd()"
  },
  {
    "label": "LeftInline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeftInline(int32 CharCount)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Left(CharCount)"
  },
  {
    "label": "LeftChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LeftChopInline(int32 CharCount)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "LeftChop(CharCount)"
  },
  {
    "label": "RightInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightInline(int32 CharCount)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Right(CharCount)"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightChopInline(int32 CharCount)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "RightChop(CharCount)"
  },
  {
    "label": "MidInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MidInline(int32 Position, int32 CharCount = MAX_int32)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Mid(Position, CharCount)"
  },
  {
    "label": "TrimStartAndEndInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrimStartAndEndInline()"
  },
  {
    "label": "TrimStartInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrimStartInline()"
  },
  {
    "label": "TrimEndInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrimEndInline()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<OtherRangeType,)",
    "insertText": "decltype(MakeStringView(DeclVal<OtherRangeType>()))* = nullptr> [[nodiscard]] inline bool Equals(OtherRangeType&& Other, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "MakeStringView()",
    "kind": "Method",
    "detail": "Function (const auto OtherView =)",
    "insertText": "MakeStringView(Forward<OtherRangeType>(Other))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherCharType)",
    "insertText": "UE_REQUIRES(TIsCharType_V<OtherCharType>) > [[nodiscard]] inline bool Equals(const OtherCharType* Other, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<OtherRangeType,)",
    "insertText": "decltype(MakeStringView(DeclVal<OtherRangeType>()))* = nullptr> [[nodiscard]] inline int32 Compare(OtherRangeType&& Other, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherCharType)",
    "insertText": "UE_REQUIRES(TIsCharType_V<OtherCharType>) > [[nodiscard]] inline int32 Compare(TStringView<OtherCharType> Other, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} template<OtherCharType> [ [ nodiscard ] ] int32)",
    "insertText": "Compare(const OtherCharType* Other, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "StartsWith(CharType Prefix)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "EndsWith(CharType Suffix)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] int32)",
    "insertText": "Find(ViewType Search, int32 StartPosition = 0, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Contains(ViewType Search, ESearchCase::Type SearchCase = ESearchCase::CaseSensitive)"
  },
  {
    "label": "FindChar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindChar(CharType Search, int32& OutIndex)"
  },
  {
    "label": "FindLastChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindLastChar(CharType Search, int32& OutIndex)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "PrivateEquals()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "PrivateEquals(TStringView Lhs, const CharType* Rhs)"
  },
  {
    "label": "PrivateEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrivateEquals(TStringView Lhs, TStringView Rhs)"
  },
  {
    "label": "PrivateLess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrivateLess(TStringView Lhs, TStringView Rhs)"
  },
  {
    "label": "PrivateEquals()",
    "kind": "Method",
    "detail": "Function (template<OtherCharType> bool)",
    "insertText": "PrivateEquals(const OtherCharType* Other, ESearchCase::Type SearchCase)"
  },
  {
    "label": "PrivateCompare()",
    "kind": "Method",
    "detail": "Function (template<OtherCharType> int32)",
    "insertText": "PrivateCompare(TStringView<OtherCharType> Other, ESearchCase::Type SearchCase)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (public : auto)",
    "insertText": "GetNum(TStringView String)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(TStringView View)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TStringView Lhs, TStringView Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<CharRangeType&&, TStringView>) > friend inline auto operator==(TStringView Lhs, CharRangeType&& Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<CharRangeType&&, TStringView>) > friend inline auto operator==(CharRangeType&& Lhs, TStringView Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<CharRangeType&&, TStringView>) > friend inline auto operator!=(TStringView Lhs, CharRangeType&& Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<CharRangeType&&, TStringView>) > friend inline auto operator!=(CharRangeType&& Lhs, TStringView Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<CharRangeType&&, TStringView>) > friend inline auto operator<(TStringView Lhs, CharRangeType&& Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharRangeType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<CharRangeType&&, TStringView>) > friend inline auto operator<(CharRangeType&& Lhs, TStringView Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TStringView Lhs, const CharType* Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const CharType* Lhs, TStringView Rhs)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : const CharType*)",
    "insertText": "begin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} TReversePointerIterator<const CharType>)",
    "insertText": "rend()"
  },
  {
    "label": "TStringView()",
    "kind": "Method",
    "detail": "Function (TStringView<TElementType_T<CharRangeType>>)",
    "insertText": "TStringView(CharRangeType&& Range)"
  },
  {
    "label": "MakeStringView()",
    "kind": "Method",
    "detail": "Function (template<CharPtrOrRangeType> auto)",
    "insertText": "MakeStringView(CharPtrOrRangeType&& CharPtrOrRange UE_LIFETIMEBOUND) -> decltype(TStringView(Forward<CharPtrOrRangeType>(CharPtrOrRange)))"
  },
  {
    "label": "MakeStringView()",
    "kind": "Method",
    "detail": "Function (} template<CharPtrType> auto)",
    "insertText": "MakeStringView(CharPtrType&& CharPtr UE_LIFETIMEBOUND, int32 Size) -> decltype(TStringView(Forward<CharPtrType>(CharPtr), Size))"
  },
  {
    "label": "_PrivateSV()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_TCHAR_IS_UTF8CHAR FStringView operator \" \")",
    "insertText": "_PrivateSV(const ANSICHAR* String, size_t Size)"
  },
  {
    "label": "_PrivateSV()",
    "kind": "Method",
    "detail": "Function (} # else FStringView operator \" \")",
    "insertText": "_PrivateSV(const TCHAR* String, size_t Size)"
  },
  {
    "label": "_PrivateASV()",
    "kind": "Method",
    "detail": "Function (} # endif FAnsiStringView operator \" \")",
    "insertText": "_PrivateASV(const ANSICHAR* String, size_t Size)"
  },
  {
    "label": "_PrivateWSV()",
    "kind": "Method",
    "detail": "Function (} FWideStringView operator \" \")",
    "insertText": "_PrivateWSV(const WIDECHAR* String, size_t Size)"
  },
  {
    "label": "_PrivateU8SV()",
    "kind": "Method",
    "detail": "Function (} FUtf8StringView operator \" \")",
    "insertText": "_PrivateU8SV(const ANSICHAR* String, size_t Size)"
  },
  {
    "label": "TEXTVIEW()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_TCHAR_IS_UTF8CHAR # define)",
    "insertText": "TEXTVIEW(str) (str##_PrivateSV) #else #define TEXTVIEW(str) TEXT(str##_PrivateSV) #endif #define ANSITEXTVIEW(str) (str##_PrivateASV) #define WIDETEXTVIEW(str) PREPROCESSOR_JOIN(WIDETEXT(str), _PrivateWSV) #define UTF8TEXTVIEW(str) (str##_PrivateU8SV) template <typename CharType> inline const CharType& TStringView<CharType>::operator[](int32 Index)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 CopyCount =)",
    "insertText": "Min(Size - Position, CharCount)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dest, DataPtr + Position, CopyCount * sizeof(CharType))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 OutLen =)",
    "insertText": "Clamp(CharCount, 0, Size)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 OutLen =)",
    "insertText": "Clamp(Size - CharCount, 0, Size)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringView<CharType> TStringView<CharType)",
    "insertText": "Mid(int32 Position, int32 CharCount)"
  },
  {
    "label": "NegativePositionOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NegativePositionOffset(Position < 0)"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (CharCount + = NegativePositionOffset ; Position - = NegativePositionOffset ;)",
    "insertText": "Position(Position > CurrentLength)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (CharCount =)",
    "insertText": "Clamp(CharCount, 0, (CurrentLength - Position))"
  },
  {
    "label": "ViewType()",
    "kind": "Method",
    "detail": "Function (ViewType Result =)",
    "insertText": "ViewType(CurrentStart + Position, CharCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 SpaceCount = 0 ;)",
    "insertText": "for(CharType Char : *this)"
  },
  {
    "label": "ViewType()",
    "kind": "Method",
    "detail": "Function (break ; } + + SpaceCount ; } return)",
    "insertText": "ViewType(DataPtr + SpaceCount, Size - SpaceCount)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 NewSize = Size ;)",
    "insertText": "while(NewSize && TChar<CharType>::IsWhitespace(DataPtr[NewSize - 1]))"
  },
  {
    "label": "ViewType()",
    "kind": "Method",
    "detail": "Function (- - NewSize ; } return)",
    "insertText": "ViewType(DataPtr, NewSize)"
  },
  {
    "label": "PrivateEquals()",
    "kind": "Method",
    "detail": "Function (} template<CharType> template<OtherCharType> bool TStringView<CharType)",
    "insertText": "PrivateEquals(const OtherCharType* const Other, ESearchCase::Type SearchCase)"
  },
  {
    "label": "Strnicmp()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Strnicmp(GetData(), Other, Len()) == 0 && !Other[Len()"
  },
  {
    "label": "PrivateCompare()",
    "kind": "Method",
    "detail": "Function (} } template<CharType> template<OtherCharType> int32 TStringView<CharType)",
    "insertText": "PrivateCompare(TStringView<OtherCharType> OtherView, ESearchCase::Type SearchCase)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 MinLen =)",
    "insertText": "Min(SelfLen, OtherLen)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "Strncmp(GetData(), OtherView.GetData(), MinLen)"
  },
  {
    "label": "Strnicmp()",
    "kind": "Method",
    "detail": "Function (} else { Result =)",
    "insertText": "Strnicmp(GetData(), OtherView.GetData(), MinLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Result != 0)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "Strncmp(GetData(), Other, Len())"
  },
  {
    "label": "Strnicmp()",
    "kind": "Method",
    "detail": "Function (} else { Result =)",
    "insertText": "Strnicmp(GetData(), Other, Len())"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (} template<CharType> bool TStringView<CharType)",
    "insertText": "StartsWith(ViewType Prefix, ESearchCase::Type SearchCase)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (} template<CharType> bool TStringView<CharType)",
    "insertText": "EndsWith(ViewType Suffix, ESearchCase::Type SearchCase)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} template<CharType> int32 TStringView<CharType)",
    "insertText": "Find(const ViewType Search, const int32 StartPosition, ESearchCase::Type SearchCase)"
  },
  {
    "label": "FindFirst()",
    "kind": "Method",
    "detail": "Function (const int32 Index = UE::)",
    "insertText": "FindFirst(RightChop(StartPosition), Search, SearchCase)"
  },
  {
    "label": "FindFirstChar()",
    "kind": "Method",
    "detail": "Function (OutIndex = UE::)",
    "insertText": "FindFirstChar(*this, Search)"
  },
  {
    "label": "FindLastChar()",
    "kind": "Method",
    "detail": "Function (OutIndex = UE::)",
    "insertText": "FindLastChar(*this, Search)"
  }
]