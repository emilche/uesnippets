[
  {
    "label": "FPerParticleEulerStepVelocity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleEulerStepVelocity"
  },
  {
    "label": "T_PARTICLES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_PARTICLES"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticleEulerStepVelocity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PerParticleRule . h \" # include \" Chaos / Particle / ParticleUtilities . h \" # include \" Chaos / Utilities . h \" namespace Chaos { class FPerParticleEulerStepVelocity : public FPerParticleRule { public :)",
    "insertText": "FPerParticleEulerStepVelocity()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} template<class T_PARTICLES> void)",
    "insertText": "ApplyHelper(T_PARTICLES& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetV(Index, InParticles.GetV(Index) + InParticles.Acceleration(Index) * Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FDynamicParticles& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelper(InParticles, Dt, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TRigidParticles<FReal, 3>& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetW(Index, InParticles.GetW(Index) + InParticles.AngularAcceleration(Index) * Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "SetV(Particle.GetV() + Particle.Acceleration() * Dt)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "SetW(Particle.GetW() + Particle.AngularAcceleration() * Dt)"
  }
]