[
  {
    "label": "FNetConnAnalyticsVars",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnAnalyticsVars"
  },
  {
    "label": "FNetConnAnalyticsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetConnAnalyticsData"
  },
  {
    "label": "FPerNetConnData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerNetConnData"
  },
  {
    "label": "FNetConnAnalyticsVars()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / Analytics / NetAnalytics . h \" # include \" Net / Core / Connection / NetCloseResult . h \" struct FNetConnAnalyticsVars { struct FNetConnAnalyticsData ; using FNetResult = UE::Net::FNetResult ; public :)",
    "insertText": "FNetConnAnalyticsVars()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FNetConnAnalyticsVars& A)"
  },
  {
    "label": "CommitAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitAnalytics(FNetConnAnalyticsVars& AggregatedData)"
  },
  {
    "label": "IncreaseOutOfOrderPacketsLostCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseOutOfOrderPacketsLostCount(int32 Count=1)"
  },
  {
    "label": "IncreaseOutOfOrderPacketsRecoveredCount()",
    "kind": "Method",
    "detail": "Function (OutOfOrderPacketsLostCount + = Count ; } void)",
    "insertText": "IncreaseOutOfOrderPacketsRecoveredCount(int32 Count=1)"
  },
  {
    "label": "IncreaseOutOfOrderPacketsDuplicateCount()",
    "kind": "Method",
    "detail": "Function (OutOfOrderPacketsRecoveredCount + = Count ; } void)",
    "insertText": "IncreaseOutOfOrderPacketsDuplicateCount(int32 Count=1)"
  },
  {
    "label": "AddFailedPingAddressICMP()",
    "kind": "Method",
    "detail": "Function (OutOfOrderPacketsDuplicateCount + = Count ; } void)",
    "insertText": "AddFailedPingAddressICMP(FString PingAddress)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (FailedPingAddressesICMP .)",
    "insertText": "AddUnique(PingAddress)"
  },
  {
    "label": "AddFailedPingAddressUDP()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddFailedPingAddressUDP(FString PingAddress)"
  },
  {
    "label": "SendAnalytics()",
    "kind": "Method",
    "detail": "Function (} } public : uint64 OutAckOnlyCount ; uint64 OutKeepAliveCount ; private : uint64 OutOfOrderPacketsLostCount = 0 ; uint64 OutOfOrderPacketsRecoveredCount = 0 ; uint64 OutOfOrderPacketsDuplicateCount = 0 ; public : TUniquePtr<FNetResult> CloseReason ; TArray<FString> ClientCloseReasons ; TMap<FString,int32> RecoveredFaults ; private : TArray<FString> FailedPingAddressesICMP ; TArray<FString> FailedPingAddressesUDP ; public : struct FPerNetConnData { TUniquePtr<FNetResult> CloseReason ; TArray<FString> ClientCloseReasons ; } ; TArray<FPerNetConnData> PerConnectionData ; } ; struct FNetConnAnalyticsData : public TBasicNetAnalyticsData<FNetConnAnalyticsVars> { public : void)",
    "insertText": "SendAnalytics()"
  }
]