[
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_RANGES_RANGES_H_ # define BASE_RANGES_RANGES_H_ # include<array> # include<iterator> # include<type_traits> # include<utility> # include \" base / template_util . h \" namespace base { namespace internal { template<T,size_t N> T*)",
    "insertText": "begin(T (&array)[N], priority_tag<2>)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> const T*)",
    "insertText": "begin(const std::array<T, N>& array, priority_tag<2>)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} template<Range> auto)",
    "insertText": "begin(Range&& range, priority_tag<0>) -> decltype(begin(std::forward<Range>(range)))"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> T*)",
    "insertText": "end(T (&array)[N], priority_tag<2>)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N> const T*)",
    "insertText": "end(const std::array<T, N>& array, priority_tag<2>)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<Range> auto)",
    "insertText": "end(Range&& range, priority_tag<1>) -> decltype(std::forward<Range>(range).end())"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<Range> auto)",
    "insertText": "end(Range&& range, priority_tag<0>) -> decltype(end(std::forward<Range>(range)))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } namespace ranges { template<Range> auto)",
    "insertText": "begin(Range&& range) noexcept -> decltype(internal::begin(std::forward<Range>(range), internal::priority_tag<2>()))"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<Range> auto)",
    "insertText": "end(Range&& range) noexcept -> decltype(internal::end(std::forward<Range>(range), internal::priority_tag<2>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Range> using iterator_t =)",
    "insertText": "decltype(ranges::begin(std::declval<Range&>()))"
  }
]