[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "FDataLayersBroadcast",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayersBroadcast"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FSubsystemCollectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsystemCollectionBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UDEPRECATED_DataLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_DataLayer"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UEditorEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorEngine"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UExternalDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerAsset"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFilter"
  },
  {
    "label": "FExternalDataLayerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalDataLayerTest"
  },
  {
    "label": "DATALAYEREDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DATALAYEREDITOR_API"
  },
  {
    "label": "DataLayerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayerType"
  },
  {
    "label": "UContentBundleEditingSubmodule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UContentBundleEditingSubmodule"
  },
  {
    "label": "FExternalDataLayerWorldSurrogateReferencingObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalDataLayerWorldSurrogateReferencingObject"
  },
  {
    "label": "WorldPartitionTests",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorldPartitionTests"
  },
  {
    "label": "DataLayerInstanceType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayerInstanceType"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" DataLayerAction . h \" # include \" Delegates / Delegate . h \" # include \" EditorSubsystem . h \" # include \" Engine / World . h \" # include \" IActorEditorContextClient . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Tickable . h \" # include \" Misc / Optional . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" WorldPartition / WorldPartitionHandle . h \" # include \" WorldPartition / DataLayer / ActorDataLayer . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # include \" WorldPartition / DataLayer / WorldDataLayers . h \" # include \" LevelEditorDragDropHandler . h \" # include \" DataLayerEditorSubsystem . generated . h \" class AActor ; class AWorldDataLayers ; class FDataLayersBroadcast ; class FLevelEditorViewportClient ; class FSubsystemCollectionBase ; class SWidget ; class UDEPRECATED_DataLayer ; class UDataLayerAsset ; class UEditorEngine ; class ULevel ; class UObject ; class UWorld ; class UWorldPartition ; class UExternalDataLayerAsset ; struct FFrame ; enum class EExternalDataLayerRegistrationState : uint8 ; template<TItemType> class IFilter ; namespace WorldPartitionTests { class FExternalDataLayerTest ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FDataLayerCreationParameters()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UDataLayerEditorSubsystem()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UDataLayerEditorSubsystem*)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (typedef IFilter<const TWeakObjectPtr<AActor>&> FActorFilter ; void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "UDataLayerEditorSubsystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UDataLayerEditorSubsystem()"
  },
  {
    "label": "GetTickableGameObjectWorld()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetTickableGameObjectWorld()"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "OnExecuteActorEditorContextAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExecuteActorEditorContextAction(UWorld* InWorld, const EActorEditorContextAction& InType, AActor* InActor = nullptr)"
  },
  {
    "label": "GetActorEditorContextDisplayInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActorEditorContextDisplayInfo(UWorld* InWorld, FActorEditorContextClientDisplayInfo& OutDiplayInfo)"
  },
  {
    "label": "CanResetContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResetContext(UWorld* InWorld)"
  },
  {
    "label": "GetOnActorEditorContextClientChanged()",
    "kind": "Method",
    "detail": "Function (FOnActorEditorContextClientChanged&)",
    "insertText": "GetOnActorEditorContextClientChanged()"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances(const TArray<const UDataLayerAsset*> DataLayerAssets)"
  },
  {
    "label": "CreateDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (template<class DataLayerType,. . . Args> DataLayerType*)",
    "insertText": "CreateDataLayerInstance(AWorldDataLayers* WorldDataLayers, Args&&... InArgs)"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(UDataLayerEditorSubsystem, FOnDataLayerChanged, const EDataLayerAction , const TWeakObjectPtr<const UDataLayerInstance>& , const FName&)"
  },
  {
    "label": "OnDataLayerChanged()",
    "kind": "Method",
    "detail": "Function (FOnDataLayerChanged&)",
    "insertText": "OnDataLayerChanged()"
  },
  {
    "label": "OnActorDataLayersChanged()",
    "kind": "Method",
    "detail": "Function (FOnActorDataLayersChanged&)",
    "insertText": "OnActorDataLayersChanged()"
  },
  {
    "label": "OnActorDataLayersEditorLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (FOnActorDataLayersEditorLoadingStateChanged&)",
    "insertText": "OnActorDataLayersEditorLoadingStateChanged()"
  },
  {
    "label": "SelectActorsInDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectActorsInDataLayer(UDataLayerInstance* DataLayer, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden, const TSharedPtr<FActorFilter>& Filter)"
  },
  {
    "label": "SelectActorsInDataLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectActorsInDataLayers(const TArray<UDataLayerInstance*>& DataLayers, const bool bSelect, const bool bNotify, const bool bSelectEvenIfHidden, const TSharedPtr<FActorFilter>& Filter)"
  },
  {
    "label": "SetActorsPinStateInDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorsPinStateInDataLayers(const TArray<UDataLayerInstance*>& DataLayerInstances, const bool bPinned)"
  },
  {
    "label": "AppendActorsFromDataLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActorsFromDataLayer(UDataLayerInstance* DataLayer, TArray<AActor*>& InOutActors, const TSharedPtr<FActorFilter>& Filter)"
  },
  {
    "label": "AppendActorsFromDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendActorsFromDataLayers(const TArray<UDataLayerInstance*>& DataLayers, TArray<AActor*>& InOutActors, const TSharedPtr<FActorFilter>& Filter)"
  },
  {
    "label": "GetActorsFromDataLayer()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "GetActorsFromDataLayer(UDataLayerInstance* DataLayer, const TSharedPtr<FActorFilter>& Filter)"
  },
  {
    "label": "GetActorsFromDataLayers()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "GetActorsFromDataLayers(const TArray<UDataLayerInstance*>& DataLayers, const TSharedPtr<FActorFilter>& Filter)"
  },
  {
    "label": "GetDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (UDataLayerInstance*)",
    "insertText": "GetDataLayerInstance(const FName& DataLayerInstanceName)"
  },
  {
    "label": "AddAllDataLayersTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllDataLayersTo(TArray<TWeakObjectPtr<UDataLayerInstance>>& OutDataLayers)"
  },
  {
    "label": "ResetUserSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetUserSettings()"
  },
  {
    "label": "DoesDataLayerContainSelectedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesDataLayerContainSelectedActors(const UDataLayerInstance* DataLayer)"
  },
  {
    "label": "HasDeprecatedDataLayers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDeprecatedDataLayers()"
  },
  {
    "label": "SetDataLayerShortName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDataLayerShortName(UDataLayerInstance* InDataLayerInstance, const FString& InNewShortName)"
  },
  {
    "label": "GetSelectedActors()",
    "kind": "Method",
    "detail": "Function (TArray<AActor*>)",
    "insertText": "GetSelectedActors()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "EditorMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorMapChange()"
  },
  {
    "label": "EditorRefreshDataLayerBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorRefreshDataLayerBrowser()"
  },
  {
    "label": "PostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndoRedo()"
  },
  {
    "label": "UpdateRegisteredWorldDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegisteredWorldDelegates()"
  },
  {
    "label": "OnWorldPartitionInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionInitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "OnWorldPartitionUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPartitionUninitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "OnLoadedActorAddedToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadedActorAddedToLevel(AActor& InActor)"
  },
  {
    "label": "OnDataLayerEditorLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataLayerEditorLoadingStateChanged(bool bIsFromUserChange)"
  },
  {
    "label": "SetDataLayerIsLoadedInEditorInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDataLayerIsLoadedInEditorInternal(UDataLayerInstance* DataLayer, const bool bIsLoadedInEditor, const bool bIsFromUserChange)"
  },
  {
    "label": "PassDataLayersFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassDataLayersFilter(UWorld* World, const FWorldPartitionHandle& ActorHandle)"
  },
  {
    "label": "BroadcastActorDataLayersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastActorDataLayersChanged(const TWeakObjectPtr<AActor>& ChangedActor)"
  },
  {
    "label": "BroadcastDataLayerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastDataLayerChanged(const EDataLayerAction Action, const TWeakObjectPtr<const UDataLayerInstance>& ChangedDataLayer, const FName& ChangedProperty)"
  },
  {
    "label": "BroadcastDataLayerEditorLoadingStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastDataLayerEditorLoadingStateChanged(bool bIsFromUserChange)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "RebuildSelectedDataLayersFromEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildSelectedDataLayersFromEditorSelection()"
  },
  {
    "label": "GetSelectedDataLayersFromEditorSelection()",
    "kind": "Method",
    "detail": "Function (const TSet<TWeakObjectPtr<const UDataLayerInstance>>&)",
    "insertText": "GetSelectedDataLayersFromEditorSelection()"
  },
  {
    "label": "SetParentDataLayerForDataLayersInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParentDataLayerForDataLayersInternal(const TArray<UDataLayerInstance*>& DataLayers, UDataLayerInstance* ParentDataLayer)"
  },
  {
    "label": "UpdateAllActorsVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAllActorsVisibility(const bool bNotifySelectionChange, const bool bRedrawViewports, ULevel* InLevel)"
  },
  {
    "label": "IsActorValidForDataLayerForClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorValidForDataLayerForClasses(AActor* Actor, const TSet<TSubclassOf<UDataLayerInstance>>& DataLayerInstanceClasses)"
  },
  {
    "label": "OnActorPreSpawnInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorPreSpawnInitialization(AActor* InActor)"
  },
  {
    "label": "OnNewActorsPlaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewActorsPlaced(UObject* InObjToUse, const TArray<AActor*>& InPlacedActors)"
  },
  {
    "label": "OnEditorActorReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorActorReplaced(AActor* InOldActor, AActor* InNewActor)"
  },
  {
    "label": "OnExternalDataLayerAssetRegistrationStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalDataLayerAssetRegistrationStateChanged(const UExternalDataLayerAsset* ExternalDataLayerAsset, EExternalDataLayerRegistrationState OldState, EExternalDataLayerRegistrationState NewState)"
  },
  {
    "label": "OnLevelEditorDragDropWorldSurrogateReferencingObject()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FLevelEditorDragDropWorldSurrogateReferencingObject>)",
    "insertText": "OnLevelEditorDragDropWorldSurrogateReferencingObject(UWorld* ReferencingWorld, const FSoftObjectPath& Object)"
  },
  {
    "label": "ApplyContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyContext(AActor* InActor, bool bInForceTryApply = false)"
  },
  {
    "label": "GetActorSpawningExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (const UExternalDataLayerInstance*)",
    "insertText": "GetActorSpawningExternalDataLayerInstance(AActor* InActor)"
  },
  {
    "label": "GetReferencingWorldSurrogateObjectForObject()",
    "kind": "Method",
    "detail": "Function (const UExternalDataLayerAsset*)",
    "insertText": "GetReferencingWorldSurrogateObjectForObject(UWorld* ReferencingWorld, const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UDataLayerInstance* NewDataLayer = nullptr ;)",
    "insertText": "if(WorldDataLayers)"
  },
  {
    "label": "DataLayerInstanceType()",
    "kind": "Method",
    "detail": "Function (NewDataLayer = WorldDataLayers -> CreateDataLayer<)",
    "insertText": "DataLayerInstanceType(Forward<Args>(InArgs)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NewDataLayer != nullptr)"
  },
  {
    "label": "BroadcastDataLayerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastDataLayerChanged(EDataLayerAction::Add, NewDataLayer, NAME_None)"
  },
  {
    "label": "DataLayerInstanceType()",
    "kind": "Method",
    "detail": "Function (} return CastChecked<)",
    "insertText": "DataLayerInstanceType(NewDataLayer)"
  }
]