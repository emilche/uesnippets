[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "FTimingEventSearchParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventSearchParameters"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "ITimingViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingViewDrawHelper"
  },
  {
    "label": "FTooltipDrawState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTooltipDrawState"
  },
  {
    "label": "ITimingEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingEvent"
  },
  {
    "label": "ITimingEventRelation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingEventRelation"
  },
  {
    "label": "ITimingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingEventFilter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimingTrackOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingTrackOrder"
  },
  {
    "label": "ITimingTrackUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingTrackUpdateContext"
  },
  {
    "label": "ITimingTrackDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingTrackDrawContext"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FTimingViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingViewDrawHelper"
  },
  {
    "label": "Scrollable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsCore / Common / SimpleRtti . h \" # include \" Insights / Config . h \" # if UE_INSIGHTS_BACKWARD_COMPATIBILITY_UE54 # include \" Insights / ITimingViewSession . h \" # endif class FMenuBuilder ; struct FGeometry ; namespace UE::Insights { class FDrawContext ; } namespace UE::Insights { class FFilterConfigurator ; } class FTimingEventSearchParameters ; class FTimingTrackViewport ; class ITimingViewDrawHelper ; class FTooltipDrawState ; class ITimingEvent ; class ITimingEventRelation ; class ITimingEventFilter ; enum class ETimingTrackLocation : uint32 { None = 0,)",
    "insertText": "Scrollable(1 << 0), TopDocked = (1 << 1), BottomDocked = (1 << 2), Foreground = (1 << 3)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ETimingTrackLocation)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (struct FTimingTrackOrder { int32 GroupRange = 1 0 0 0 0 0 ; int32 TimeRuler = - 2* GroupRange ; int32 Markers = - 1* GroupRange ; int32 First = 0 ; int32 Task = 1* GroupRange ; int32 Memory = 2* GroupRange ; int32 Gpu = 3* GroupRange ; int32 Cpu = 4* GroupRange ; int32 Last = 5* GroupRange ; } ; enum class ETimingTrackFlags : uint32 { None = 0,)",
    "insertText": "IsVisible(1 << 0), IsDirty = (1 << 1), IsSelected = (1 << 2), IsHovered = (1 << 3), IsHeaderHovered = (1 << 4)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ETimingTrackFlags)"
  },
  {
    "label": "Content()",
    "kind": "Method",
    "detail": "Function (enum class EDrawEventMode : uint32 { None = 0,)",
    "insertText": "Content(1 << 0), Hovered = (1 << 1), Selected = (1 << 2)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EDrawEventMode)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (class ITimingTrackUpdateContext { public : const FGeometry&)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (const FTimingTrackViewport&)",
    "insertText": "GetViewport()"
  },
  {
    "label": "GetMousePosition()",
    "kind": "Method",
    "detail": "Function (const FVector2D&)",
    "insertText": "GetMousePosition()"
  },
  {
    "label": "GetHoveredEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetHoveredEvent()"
  },
  {
    "label": "GetSelectedEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetSelectedEvent()"
  },
  {
    "label": "GetEventFilter()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<ITimingEventFilter>)",
    "insertText": "GetEventFilter()"
  },
  {
    "label": "GetCurrentRelations()",
    "kind": "Method",
    "detail": "Function (const TArray<TUniquePtr<ITimingEventRelation>>&)",
    "insertText": "GetCurrentRelations()"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "GetDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeltaTime()"
  },
  {
    "label": "GetDrawContext()",
    "kind": "Method",
    "detail": "Function (UE::Insights::FDrawContext&)",
    "insertText": "GetDrawContext()"
  },
  {
    "label": "GetHelper()",
    "kind": "Method",
    "detail": "Function (const ITimingViewDrawHelper&)",
    "insertText": "GetHelper()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI_BASE()",
    "kind": "Method",
    "detail": "Function (} ; class FBaseTimingTrack : public TSharedFromThis<FBaseTimingTrack> { class FTimingViewDrawHelper ;)",
    "insertText": "INSIGHTS_DECLARE_RTTI_BASE(FBaseTimingTrack) protected: explicit FBaseTimingTrack(const FString& InName = FString()) : Id(GenerateId()) , Name(InName) , ValidLocations(ETimingTrackLocation::Scrollable) , Location(ETimingTrackLocation::None) , Order(0) , PosY(0.0f) , Height(0.0f) , Flags(ETimingTrackFlags::IsVisible | ETimingTrackFlags::IsDirty)"
  },
  {
    "label": "FBaseTimingTrack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBaseTimingTrack()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (PosY = 0 . 0 f ; Height = 0 . 0 f ; Flags = ETimingTrackFlags::IsVisible | ETimingTrackFlags::IsDirty ; } uint64)",
    "insertText": "GetId()"
  },
  {
    "label": "GetValidLocations()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } ETimingTrackLocation)",
    "insertText": "GetValidLocations()"
  },
  {
    "label": "OnLocationChanged()",
    "kind": "Method",
    "detail": "Function (Location = InLocation ;)",
    "insertText": "OnLocationChanged()"
  },
  {
    "label": "SetDirtyFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirtyFlag()"
  },
  {
    "label": "GetOrder()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetOrder()"
  },
  {
    "label": "GetPosY()",
    "kind": "Method",
    "detail": "Function (Order = InOrder ; } float)",
    "insertText": "GetPosY()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (PosY = InPosY ; } float)",
    "insertText": "GetHeight()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (Height = InHeight ; } bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Show()"
  },
  {
    "label": "OnVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (Flags | = ETimingTrackFlags::IsVisible ;)",
    "insertText": "OnVisibilityChanged()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Hide()"
  },
  {
    "label": "ToggleVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleVisibility()"
  },
  {
    "label": "SetVisibilityFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisibilityFlag(bool bIsVisible)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (bIsVisible ?)",
    "insertText": "Show() : Hide()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "OnDirtyFlagChanged()",
    "kind": "Method",
    "detail": "Function (Flags | = ETimingTrackFlags::IsDirty ;)",
    "insertText": "OnDirtyFlagChanged()"
  },
  {
    "label": "ClearDirtyFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDirtyFlag()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Select()"
  },
  {
    "label": "OnSelectedFlagChanged()",
    "kind": "Method",
    "detail": "Function (Flags | = ETimingTrackFlags::IsSelected ;)",
    "insertText": "OnSelectedFlagChanged()"
  },
  {
    "label": "Unselect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unselect()"
  },
  {
    "label": "ToggleSelectedFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleSelectedFlag()"
  },
  {
    "label": "SetSelectedFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectedFlag(bool bIsSelected)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (bIsSelected ?)",
    "insertText": "Select() : Unselect()"
  },
  {
    "label": "IsHovered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHovered()"
  },
  {
    "label": "SetHoveredState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHoveredState(bool bIsHovered)"
  },
  {
    "label": "IsHeaderHovered()",
    "kind": "Method",
    "detail": "Function (bIsHovered ? Flags | = ETimingTrackFlags::IsHovered : Flags& = ~ ETimingTrackFlags::IsHovered ; } bool)",
    "insertText": "IsHeaderHovered()"
  },
  {
    "label": "SetHeaderHoveredState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeaderHoveredState(bool bIsHeaderHovered)"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (bIsHeaderHovered ? Flags | = ETimingTrackFlags::IsHeaderHovered : Flags& = ~ ETimingTrackFlags::IsHeaderHovered ; } void)",
    "insertText": "PreUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PreDraw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "DrawEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawEvent(const ITimingTrackDrawContext& Context, const ITimingEvent& InTimingEvent, EDrawEventMode InDrawMode)"
  },
  {
    "label": "PostDraw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetEvent(float InPosX, float InPosY, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "OnEventHovered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEventHovered(const ITimingEvent& InHoveredEvent)"
  },
  {
    "label": "OnEventSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEventSelected(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "OnClipboardCopyEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClipboardCopyEvent(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "GetChildTrack()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FBaseTimingTrack>)",
    "insertText": "GetChildTrack()"
  },
  {
    "label": "SetParentTrack()",
    "kind": "Method",
    "detail": "Function (ChildTrack = InTrack ; } ; void)",
    "insertText": "SetParentTrack(TWeakPtr<FBaseTimingTrack> InTrack)"
  },
  {
    "label": "GetParentTrack()",
    "kind": "Method",
    "detail": "Function (ParentTrack = InTrack ; } TWeakPtr<FBaseTimingTrack>)",
    "insertText": "GetParentTrack()"
  },
  {
    "label": "SetFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFilterConfigurator(TSharedPtr<UE::Insights::FFilterConfigurator> InFilterConfigurator)"
  },
  {
    "label": "SetValidLocations()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetValidLocations(ETimingTrackLocation InValidLocations)"
  },
  {
    "label": "GenerateId()",
    "kind": "Method",
    "detail": "Function (ValidLocations = InValidLocations ; } uint64)",
    "insertText": "GenerateId()"
  }
]