[
  {
    "label": "machine_load_store",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store"
  },
  {
    "label": "machine_load_store_relaxed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_relaxed"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_gcc_power_H)"
  },
  {
    "label": "__BIG_ENDIAN__()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_gcc_power_H # include<stdint . h> # include<unistd . h> # if __powerpc64__ | | __ppc64__ # define __TBB_WORDSIZE 8 # else # define __TBB_WORDSIZE 4 # endif # if)",
    "insertText": "__BIG_ENDIAN__(defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_BIG_ENDIAN__) #define __TBB_ENDIANNESS __TBB_ENDIAN_BIG #elif __LITTLE_ENDIAN__ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_LITTLE_ENDIAN__) #define __TBB_ENDIANNESS __TBB_ENDIAN_LITTLE #elif defined(__BYTE_ORDER__) #define __TBB_ENDIANNESS __TBB_ENDIAN_UNSUPPORTED #else #define __TBB_ENDIANNESS __TBB_ENDIAN_DETECT #endif #if __TBB_WORDSIZE==8 #define __TBB_64BIT_ATOMICS 1 #elif __bgp__ #define __TBB_64BIT_ATOMICS 0 #else #ifndef __TBB_64BIT_ATOMICS #define __TBB_64BIT_ATOMICS 0 #endif #endif inline int32_t __TBB_machine_cmpswp4 (volatile void *ptr, int32_t value, int32_t comparand)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int32_t result ; __asm__)",
    "insertText": "__volatile__(\"sync\\n\" \"0:\\n\\t\" \"lwarx %[res],0,%[ptr]\\n\\t\" \"cmpw %[res],%[cmp]\\n\\t\" \"bne- 1f\\n\\t\" \"stwcx. %[val],0,%[ptr]\\n\\t\" \"bne- 0b\\n\" \"1:\\n\\t\" \"isync\" : [res]\"=&r\"(result) , \"+m\"(* (int32_t*) ptr) : [ptr]\"r\"(ptr) , [val]\"r\"(value) , [cmp]\"r\"(comparand) : \"memory\" , \"cr0\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int64_t result ; __asm__)",
    "insertText": "__volatile__(\"sync\\n\" \"0:\\n\\t\" \"ldarx %[res],0,%[ptr]\\n\\t\" \"cmpd %[res],%[cmp]\\n\\t\" \"bne- 1f\\n\\t\" \"stdcx. %[val],0,%[ptr]\\n\\t\" \"bne- 0b\\n\" \"1:\\n\\t\" \"isync\" : [res]\"=&r\"(result) , \"+m\"(* (int64_t*) ptr) : [ptr]\"r\"(ptr) , [val]\"r\"(value) , [cmp]\"r\"(comparand) : \"memory\" , \"cr0\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int64_t result ; int64_t value_register,comparand_register,result_register ; __asm__)",
    "insertText": "__volatile__(\"sync\\n\\t\" \"ld %[val],%[valm]\\n\\t\" \"ld %[cmp],%[cmpm]\\n\" \"0:\\n\\t\" \"ldarx %[res],0,%[ptr]\\n\\t\" \"cmpd %[res],%[cmp]\\n\\t\" \"bne- 1f\\n\\t\" \"stdcx. %[val],0,%[ptr]\\n\\t\" \"bne- 0b\\n\" \"1:\\n\\t\" \"std %[res],%[resm]\\n\\t\" \"isync\" : [resm]\"=m\"(result) , [res] \"=&r\"( result_register) , [val] \"=&r\"( value_register) , [cmp] \"=&r\"(comparand_register) , \"+m\"(* (int64_t*) ptr) : [ptr] \"r\"(ptr) , [valm]\"m\"(value) , [cmpm]\"m\"(comparand) : \"memory\" , \"cr0\")"
  },
  {
    "label": "load_with_acquire()",
    "kind": "Method",
    "detail": "Function (\\ T)",
    "insertText": "load_with_acquire(const volatile T& location)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ T result ; \\ __asm__)",
    "insertText": "__volatile__(ldx \" %[res],0(%[ptr])\\n\" \\ \"0:\\n\\t\" \\ cmpx \" %[res],%[res]\\n\\t\" \\ \"bne- 0b\\n\\t\" \\ \"isync\" \\ : [res]\"=r\"(result) \\ : [ptr]\"b\"(&location) \\ , \"m\"(location) \\ : \"memory\" \\ , \"cr0\")"
  },
  {
    "label": "store_with_release()",
    "kind": "Method",
    "detail": "Function (\\ return result ; \\ } \\ void)",
    "insertText": "store_with_release(volatile T &location, T value)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "__volatile__(\"lwsync\\n\\t\" \\ stx \" %[val],0(%[ptr])\" \\ : \"=m\"(location) \\ : [ptr]\"b\"(&location) \\ , [val]\"r\"(value) \\ : \"memory\")"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ \\ template<T> \\ struct machine_load_store_relaxed<T,S> { \\ T)",
    "insertText": "load(const __TBB_atomic T& location)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ T result ; \\ __asm__)",
    "insertText": "__volatile__(ldx \" %[res],0(%[ptr])\" \\ : [res]\"=r\"(result) \\ : [ptr]\"b\"(&location) \\ , \"m\"(location) \\)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (\\ return result ; \\ } \\ void)",
    "insertText": "store(__TBB_atomic T &location, T value)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "__volatile__(stx \" %[val],0(%[ptr])\" \\ : \"=m\"(location) \\ : [ptr]\"b\"(&location) \\ , [val]\"r\"(value) \\)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_LOAD_STORE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; namespace tbb { namespace internal {)",
    "insertText": "__TBB_MACHINE_DEFINE_LOAD_STORE(1,\"lbz\",\"stb\",\"cmpw\") __TBB_MACHINE_DEFINE_LOAD_STORE(2,\"lhz\",\"sth\",\"cmpw\") __TBB_MACHINE_DEFINE_LOAD_STORE(4,\"lwz\",\"stw\",\"cmpw\") #if __TBB_WORDSIZE==8 __TBB_MACHINE_DEFINE_LOAD_STORE(8,\"ld\" ,\"std\",\"cmpd\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (T result ; T result_register ; __asm__)",
    "insertText": "__volatile__(\"ld %[res],0(%[ptr])\\n\\t\" \"std %[res],%[resm]\\n\" \"0:\\n\\t\" \"cmpd %[res],%[res]\\n\\t\" \"bne- 0b\\n\\t\" \"isync\" : [resm]\"=m\"(result) , [res]\"=&r\"(result_register) : [ptr]\"b\"(&location) , \"m\"(location) : \"memory\" , \"cr0\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (T value_register ; __asm__)",
    "insertText": "__volatile__(\"lwsync\\n\\t\" \"ld %[val],%[valm]\\n\\t\" \"std %[val],0(%[ptr])\" : \"=m\"(location) , [val]\"=&r\"(value_register) : [ptr]\"b\"(&location) , [valm]\"m\"(value) : \"memory\")"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} } ; struct machine_load_store_relaxed<T,8> { T)",
    "insertText": "load(const volatile T& location)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (T result ; T result_register ; __asm__)",
    "insertText": "__volatile__(\"ld %[res],0(%[ptr])\\n\\t\" \"std %[res],%[resm]\" : [resm]\"=m\"(result) , [res]\"=&r\"(result_register) : [ptr]\"b\"(&location) , \"m\"(location))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (T value_register ; __asm__)",
    "insertText": "__volatile__(\"ld %[val],%[valm]\\n\\t\" \"std %[val],0(%[ptr])\" : \"=m\"(location) , [val]\"=&r\"(value_register) : [ptr]\"b\"(&location) , [valm]\"m\"(value))"
  },
  {
    "label": "__TBB_control_consistency_helper()",
    "kind": "Method",
    "detail": "Function (} } ; # define __TBB_machine_load_store_relaxed_8 # endif } } # undef __TBB_MACHINE_DEFINE_LOAD_STORE # define __TBB_USE_GENERIC_PART_WORD_CAS 1 # define __TBB_USE_GENERIC_FETCH_ADD 1 # define __TBB_USE_GENERIC_FETCH_STORE 1 # define __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE 1 # define)",
    "insertText": "__TBB_control_consistency_helper() __asm__ __volatile__(\"isync\": : :\"memory\") #define __TBB_full_memory_fence() __asm__ __volatile__( \"sync\": : :\"memory\") static inline intptr_t __TBB_machine_lg( uintptr_t x)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(x, \"__TBB_Log2(0) undefined\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (# if __TBB_WORDSIZE = = 8 __asm__)",
    "insertText": "__volatile__(\"cntlzd %0,%0\" : \"+r\"(x))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (# else __asm__)",
    "insertText": "__volatile__(\"cntlzw %0,%0\" : \"+r\"(x))"
  },
  {
    "label": "__TBB_Log2()",
    "kind": "Method",
    "detail": "Function (# endif } # define)",
    "insertText": "__TBB_Log2(V) __TBB_machine_lg(V)"
  },
  {
    "label": "__TBB_machine_trylockbyte()",
    "kind": "Method",
    "detail": "Function (# define __TBB_Flag __TBB_Flag bool)",
    "insertText": "__TBB_machine_trylockbyte(__TBB_atomic __TBB_Flag &flag)"
  }
]