[
  {
    "label": "FAnimationUpdateSharedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateSharedContext"
  },
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "IAnimNotifyEventContextDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimNotifyEventContextDataInterface"
  },
  {
    "label": "IGraphMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGraphMessage"
  },
  {
    "label": "FScopedGraphTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedGraphTag"
  },
  {
    "label": "FScopedGraphMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedGraphMessage"
  },
  {
    "label": "TScopedGraphMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScopedGraphMessage"
  },
  {
    "label": "TOptionalScopedGraphMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptionalScopedGraphMessage"
  },
  {
    "label": "FMessageStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageStack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeInfo"
  },
  {
    "label": "FMessageEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageEntry"
  },
  {
    "label": "DECLARE_ANIMGRAPH_MESSAGE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / UnrealTypeTraits . h \" struct FAnimationUpdateSharedContext ; struct FAnimationBaseContext ; struct FAnimNode_Base ; class IAnimNotifyEventContextDataInterface ; # define)",
    "insertText": "DECLARE_ANIMGRAPH_MESSAGE(ClassName) \\ public: \\ static FName GetStaticTypeName()"
  },
  {
    "label": "DECLARE_ANIMGRAPH_MESSAGE_API()",
    "kind": "Method",
    "detail": "Function (} \\ private : \\ const FName ; # define)",
    "insertText": "DECLARE_ANIMGRAPH_MESSAGE_API(ClassName, ModuleApi) \\ public: \\ static FName GetStaticTypeName()"
  },
  {
    "label": "IMPLEMENT_ANIMGRAPH_MESSAGE()",
    "kind": "Method",
    "detail": "Function (} \\ private : \\ ModuleApi const FName ; # define)",
    "insertText": "IMPLEMENT_ANIMGRAPH_MESSAGE(ClassName) \\ const FName ClassName::TypeName = TEXT(#ClassName)"
  },
  {
    "label": "IMPLEMENT_NOTIFY_CONTEXT_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "IMPLEMENT_NOTIFY_CONTEXT_INTERFACE(ClassName) \\ IMPLEMENT_ANIMGRAPH_MESSAGE(ClassName)"
  },
  {
    "label": "DECLARE_NOTIFY_CONTEXT_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_NOTIFY_CONTEXT_INTERFACE(ClassName) \\ DECLARE_ANIMGRAPH_MESSAGE(ClassName) #define DECLARE_NOTIFY_CONTEXT_INTERFACE_API(ClassName, ModuleApi) \\ DECLARE_ANIMGRAPH_MESSAGE_API(ClassName, ModuleApi)"
  },
  {
    "label": "IAnimNotifyEventContextDataInterface()",
    "kind": "Method",
    "detail": "Function (namespace Anim { class IAnimNotifyEventContextDataInterface { public : ~)",
    "insertText": "IAnimNotifyEventContextDataInterface()"
  },
  {
    "label": "GetStaticTypeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStaticTypeName()"
  },
  {
    "label": "Is()",
    "kind": "Method",
    "detail": "Function (template<Type> bool)",
    "insertText": "Is()"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (} template<Type> const Type&)",
    "insertText": "As()"
  },
  {
    "label": "IGraphMessage()",
    "kind": "Method",
    "detail": "Function (} private : const FName BaseTypeName ; } ; class IGraphMessage { public : ~)",
    "insertText": "IGraphMessage()"
  },
  {
    "label": "MakeUniqueEventContextData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IAnimNotifyEventContextDataInterface> NullPtr ; return NullPtr ; } TUniquePtr<const IAnimNotifyEventContextDataInterface>)",
    "insertText": "MakeUniqueEventContextData()"
  },
  {
    "label": "FScopedGraphTag()",
    "kind": "Method",
    "detail": "Function (} private : const FName BaseTypeName ; } ; struct FScopedGraphTag {)",
    "insertText": "FScopedGraphTag(const FAnimationBaseContext& InContext, FName InTag)"
  },
  {
    "label": "FScopedGraphTag()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedGraphTag()"
  },
  {
    "label": "FScopedGraphMessage()",
    "kind": "Method",
    "detail": "Function (private : FAnimationUpdateSharedContext* SharedContext ; FName Tag ; } ; struct FScopedGraphMessage { protected :)",
    "insertText": "FScopedGraphMessage(const FAnimationBaseContext& InContext)"
  },
  {
    "label": "PushMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMessage(const FAnimationBaseContext& InContext, TSharedRef<IGraphMessage> InMessage, FName InMessageType)"
  },
  {
    "label": "PopMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopMessage()"
  },
  {
    "label": "TScopedGraphMessage()",
    "kind": "Method",
    "detail": "Function (FAnimationUpdateSharedContext* SharedContext ; FName MessageType ; } ; template<TGraphMessageType> struct TScopedGraphMessage : FScopedGraphMessage { template<. . . TArgs>)",
    "insertText": "TScopedGraphMessage(const FAnimationBaseContext& InContext, TArgs&&... Args) : FScopedGraphMessage(InContext)"
  },
  {
    "label": "TGraphMessageType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TGraphMessageType> Message = MakeShared<)",
    "insertText": "TGraphMessageType(Forward<TArgs>(Args)...)"
  },
  {
    "label": "PushMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMessage(InContext, Message, Message->GetTypeName())"
  },
  {
    "label": "TScopedGraphMessage()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopedGraphMessage()"
  },
  {
    "label": "TOptionalScopedGraphMessage()",
    "kind": "Method",
    "detail": "Function (} } ; template<TGraphMessageType> struct TOptionalScopedGraphMessage : FScopedGraphMessage { template<. . . TArgs>)",
    "insertText": "TOptionalScopedGraphMessage(bool bInCondition, const FAnimationBaseContext& InContext, TArgs&&... Args) : FScopedGraphMessage(InContext) , bCondition(bInCondition)"
  },
  {
    "label": "TOptionalScopedGraphMessage()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TOptionalScopedGraphMessage()"
  },
  {
    "label": "FMessageStack()",
    "kind": "Method",
    "detail": "Function (} } private : bool bCondition ; } ; struct FMessageStack { public : struct FScopedGraphTag ; struct FScopedGraphMessage ;)",
    "insertText": "FMessageStack()"
  },
  {
    "label": "FMessageStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMessageStack(FMessageStack&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMessageStack&)",
    "insertText": "operator(const FMessageStack&)"
  },
  {
    "label": "FMessageStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMessageStack(FMessageStack&& InMessageStack)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMessageStack&)",
    "insertText": "operator(FMessageStack&&)"
  },
  {
    "label": "ForEachMessage()",
    "kind": "Method",
    "detail": "Function (enum class EEnumerate { Stop,Continue,} ; struct FNodeInfo { FAnimNode_Base* Node ; const UScriptStruct* NodeStruct ; } ; template<TGraphMessageType> void)",
    "insertText": "ForEachMessage(TFunctionRef<EEnumerate(TGraphMessageType&)> InFunction)"
  },
  {
    "label": "TopMessage()",
    "kind": "Method",
    "detail": "Function (} template<TGraphMessageType> void)",
    "insertText": "TopMessage(TFunctionRef<void(TGraphMessageType&)> InFunction)"
  },
  {
    "label": "TopMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TopMessage(TGraphMessageType::GetStaticTypeName(), [&InFunction](IGraphMessage& InMessage) { InFunction(static_cast<TGraphMessageType&>(InMessage)); })"
  },
  {
    "label": "TopMessageWeakPtr()",
    "kind": "Method",
    "detail": "Function (} template<TGraphMessageType> void)",
    "insertText": "TopMessageWeakPtr(TFunctionRef<void(TWeakPtr<TGraphMessageType>&)> InFunction)"
  },
  {
    "label": "TopMessageSharedPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TopMessageSharedPtr(TGraphMessageType::GetStaticTypeName(), [&InFunction](TSharedPtr<IGraphMessage>& InMessage) { TSharedPtr<TGraphMessageType> PinPtr = StaticCastSharedPtr<TGraphMessageType>(InMessage); TWeakPtr<TGraphMessageType> WeakPtr(PinPtr); InFunction(WeakPtr); })"
  },
  {
    "label": "HasMessage()",
    "kind": "Method",
    "detail": "Function (} template<TGraphMessageType> bool)",
    "insertText": "HasMessage()"
  },
  {
    "label": "ForEachTag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachTag(FName InTagId, TFunctionRef<EEnumerate(FNodeInfo)> InFunction)"
  },
  {
    "label": "CopyForCachedUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyForCachedUpdate(const FMessageStack& InStack)"
  },
  {
    "label": "MakeEventContextData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeEventContextData(TArray<TUniquePtr<const IAnimNotifyEventContextDataInterface>>& ContextData)"
  },
  {
    "label": "PushMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushMessage(FName InMessageType, FAnimNode_Base* InNode, const UScriptStruct* InStruct, TSharedRef<IGraphMessage> InMessage)"
  },
  {
    "label": "PopMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopMessage(FName InMessageType)"
  },
  {
    "label": "ForEachMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachMessage(FName InMessageType, TFunctionRef<EEnumerate(IGraphMessage&)> InFunction)"
  },
  {
    "label": "TopMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TopMessage(FName InMessageType, TFunctionRef<void(IGraphMessage&)> InFunction)"
  },
  {
    "label": "TopMessageSharedPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TopMessageSharedPtr(FName InMessageType, TFunctionRef<void(TSharedPtr<IGraphMessage>&)> InFunction)"
  },
  {
    "label": "BottomMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BottomMessage(FName InMessageType, TFunctionRef<void(IGraphMessage&)> InFunction)"
  },
  {
    "label": "HasMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMessage(FName InMessageType)"
  },
  {
    "label": "PushTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTag(FAnimNode_Base* InNode, const UScriptStruct* InStruct, FName InTag)"
  },
  {
    "label": "PopTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopTag(FName InTag)"
  }
]