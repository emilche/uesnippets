[
  {
    "label": "USet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "USet"
  },
  {
    "label": "UCharProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCharProperty"
  },
  {
    "label": "UCharCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCharCategory"
  },
  {
    "label": "UCharDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCharDirection"
  },
  {
    "label": "UBidiPairedBracketType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UBidiPairedBracketType"
  },
  {
    "label": "UBlockCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UBlockCode"
  },
  {
    "label": "UEastAsianWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UEastAsianWidth"
  },
  {
    "label": "UCharNameChoice",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCharNameChoice"
  },
  {
    "label": "UPropertyNameChoice",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UPropertyNameChoice"
  },
  {
    "label": "UDecompositionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDecompositionType"
  },
  {
    "label": "UJoiningType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UJoiningType"
  },
  {
    "label": "UJoiningGroup",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UJoiningGroup"
  },
  {
    "label": "UGraphemeClusterBreak",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UGraphemeClusterBreak"
  },
  {
    "label": "UWordBreakValues",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UWordBreakValues"
  },
  {
    "label": "USentenceBreak",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "USentenceBreak"
  },
  {
    "label": "ULineBreak",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ULineBreak"
  },
  {
    "label": "UNumericType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumericType"
  },
  {
    "label": "UHangulSyllableType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UHangulSyllableType"
  },
  {
    "label": "UIndicPositionalCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UIndicPositionalCategory"
  },
  {
    "label": "UIndicSyllabicCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UIndicSyllabicCategory"
  },
  {
    "label": "UVerticalOrientation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UVerticalOrientation"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef UCHAR_H # define UCHAR_H # include \" unicode / utypes . h \" # include \" unicode / stringoptions . h \" # include \" unicode / ucpmap . h \" # if !)",
    "insertText": "defined(USET_DEFINED) && !defined(U_IN_DOXYGEN)"
  },
  {
    "label": "U_MASK()",
    "kind": "Method",
    "detail": "Function (# endif U_CDECL_BEGIN # define U_UNICODE_VERSION \" 1 2 . 0 \" # define UCHAR_MIN_VALUE 0 # define UCHAR_MAX_VALUE 0 x10ffff # define)",
    "insertText": "U_MASK(x) ((uint32_t)1<<(x))"
  },
  {
    "label": "U_MASK()",
    "kind": "Method",
    "detail": "Function (UCHAR_ALPHABETIC = 0,UCHAR_BINARY_START = UCHAR_ALPHABETIC,UCHAR_ASCII_HEX_DIGIT = 1,UCHAR_BIDI_CONTROL = 2,UCHAR_BIDI_MIRRORED = 3,UCHAR_DASH = 4,UCHAR_DEFAULT_IGNORABLE_CODE_POINT = 5,UCHAR_DEPRECATED = 6,UCHAR_DIACRITIC = 7,UCHAR_EXTENDER = 8,UCHAR_FULL_COMPOSITION_EXCLUSION = 9,UCHAR_GRAPHEME_BASE = 1 0,UCHAR_GRAPHEME_EXTEND = 1 1,UCHAR_GRAPHEME_LINK = 1 2,UCHAR_HEX_DIGIT = 1 3,UCHAR_HYPHEN = 1 4,UCHAR_ID_CONTINUE = 1 5,UCHAR_ID_START = 1 6,UCHAR_IDEOGRAPHIC = 1 7,UCHAR_IDS_BINARY_OPERATOR = 1 8,UCHAR_IDS_TRINARY_OPERATOR = 1 9,UCHAR_JOIN_CONTROL = 2 0,UCHAR_LOGICAL_ORDER_EXCEPTION = 2 1,UCHAR_LOWERCASE = 2 2,UCHAR_MATH = 2 3,UCHAR_NONCHARACTER_CODE_POINT = 2 4,UCHAR_QUOTATION_MARK = 2 5,UCHAR_RADICAL = 2 6,UCHAR_SOFT_DOTTED = 2 7,UCHAR_TERMINAL_PUNCTUATION = 2 8,UCHAR_UNIFIED_IDEOGRAPH = 2 9,UCHAR_UPPERCASE = 3 0,UCHAR_WHITE_SPACE = 3 1,UCHAR_XID_CONTINUE = 3 2,UCHAR_XID_START = 3 3,UCHAR_CASE_SENSITIVE = 3 4,UCHAR_S_TERM = 3 5,UCHAR_VARIATION_SELECTOR = 3 6,UCHAR_NFD_INERT = 3 7,UCHAR_NFKD_INERT = 3 8,UCHAR_NFC_INERT = 3 9,UCHAR_NFKC_INERT = 4 0,UCHAR_SEGMENT_STARTER = 4 1,UCHAR_PATTERN_SYNTAX = 4 2,UCHAR_PATTERN_WHITE_SPACE = 4 3,UCHAR_POSIX_ALNUM = 4 4,UCHAR_POSIX_BLANK = 4 5,UCHAR_POSIX_GRAPH = 4 6,UCHAR_POSIX_PRINT = 4 7,UCHAR_POSIX_XDIGIT = 4 8,UCHAR_CASED = 4 9,UCHAR_CASE_IGNORABLE = 5 0,UCHAR_CHANGES_WHEN_LOWERCASED = 5 1,UCHAR_CHANGES_WHEN_UPPERCASED = 5 2,UCHAR_CHANGES_WHEN_TITLECASED = 5 3,UCHAR_CHANGES_WHEN_CASEFOLDED = 5 4,UCHAR_CHANGES_WHEN_CASEMAPPED = 5 5,UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = 5 6,UCHAR_EMOJI = 5 7,UCHAR_EMOJI_PRESENTATION = 5 8,UCHAR_EMOJI_MODIFIER = 5 9,UCHAR_EMOJI_MODIFIER_BASE = 6 0,UCHAR_EMOJI_COMPONENT = 6 1,UCHAR_REGIONAL_INDICATOR = 6 2,UCHAR_PREPENDED_CONCATENATION_MARK = 6 3,UCHAR_EXTENDED_PICTOGRAPHIC = 6 4,# ifndef UCHAR_BINARY_LIMIT,# endif UCHAR_BIDI_CLASS = 0 x1000,UCHAR_INT_START = UCHAR_BIDI_CLASS,UCHAR_BLOCK = 0 x1001,UCHAR_CANONICAL_COMBINING_CLASS = 0 x1002,UCHAR_DECOMPOSITION_TYPE = 0 x1003,UCHAR_EAST_ASIAN_WIDTH = 0 x1004,UCHAR_GENERAL_CATEGORY = 0 x1005,UCHAR_JOINING_GROUP = 0 x1006,UCHAR_JOINING_TYPE = 0 x1007,UCHAR_LINE_BREAK = 0 x1008,UCHAR_NUMERIC_TYPE = 0 x1009,UCHAR_SCRIPT = 0 x100A,UCHAR_HANGUL_SYLLABLE_TYPE = 0 x100B,UCHAR_NFD_QUICK_CHECK = 0 x100C,UCHAR_NFKD_QUICK_CHECK = 0 x100D,UCHAR_NFC_QUICK_CHECK = 0 x100E,UCHAR_NFKC_QUICK_CHECK = 0 x100F,UCHAR_LEAD_CANONICAL_COMBINING_CLASS = 0 x1010,UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = 0 x1011,UCHAR_GRAPHEME_CLUSTER_BREAK = 0 x1012,UCHAR_SENTENCE_BREAK = 0 x1013,UCHAR_WORD_BREAK = 0 x1014,UCHAR_BIDI_PAIRED_BRACKET_TYPE = 0 x1015,UCHAR_INDIC_POSITIONAL_CATEGORY = 0 x1016,UCHAR_INDIC_SYLLABIC_CATEGORY = 0 x1017,UCHAR_VERTICAL_ORIENTATION = 0 x1018,# ifndef UCHAR_INT_LIMIT = 0 x1019,# endif UCHAR_GENERAL_CATEGORY_MASK = 0 x2000,UCHAR_MASK_START = UCHAR_GENERAL_CATEGORY_MASK,# ifndef UCHAR_MASK_LIMIT = 0 x2001,# endif UCHAR_NUMERIC_VALUE = 0 x3000,UCHAR_DOUBLE_START = UCHAR_NUMERIC_VALUE,# ifndef UCHAR_DOUBLE_LIMIT = 0 x3001,# endif UCHAR_AGE = 0 x4000,UCHAR_STRING_START = UCHAR_AGE,UCHAR_BIDI_MIRRORING_GLYPH = 0 x4001,UCHAR_CASE_FOLDING = 0 x4002,# ifndef UCHAR_ISO_COMMENT = 0 x4003,# endif UCHAR_LOWERCASE_MAPPING = 0 x4004,UCHAR_NAME = 0 x4005,UCHAR_SIMPLE_CASE_FOLDING = 0 x4006,UCHAR_SIMPLE_LOWERCASE_MAPPING = 0 x4007,UCHAR_SIMPLE_TITLECASE_MAPPING = 0 x4008,UCHAR_SIMPLE_UPPERCASE_MAPPING = 0 x4009,UCHAR_TITLECASE_MAPPING = 0 x400A,# ifndef UCHAR_UNICODE_1_NAME = 0 x400B,# endif UCHAR_UPPERCASE_MAPPING = 0 x400C,UCHAR_BIDI_PAIRED_BRACKET = 0 x400D,# ifndef UCHAR_STRING_LIMIT = 0 x400E,# endif UCHAR_SCRIPT_EXTENSIONS = 0 x7000,UCHAR_OTHER_PROPERTY_START = UCHAR_SCRIPT_EXTENSIONS,# ifndef UCHAR_OTHER_PROPERTY_LIMIT = 0 x7001,# endif UCHAR_INVALID_CODE = - 1 } UCharProperty ; typedef enum UCharCategory { U_UNASSIGNED = 0,U_GENERAL_OTHER_TYPES = 0,U_UPPERCASE_LETTER = 1,U_LOWERCASE_LETTER = 2,U_TITLECASE_LETTER = 3,U_MODIFIER_LETTER = 4,U_OTHER_LETTER = 5,U_NON_SPACING_MARK = 6,U_ENCLOSING_MARK = 7,U_COMBINING_SPACING_MARK = 8,U_DECIMAL_DIGIT_NUMBER = 9,U_LETTER_NUMBER = 1 0,U_OTHER_NUMBER = 1 1,U_SPACE_SEPARATOR = 1 2,U_LINE_SEPARATOR = 1 3,U_PARAGRAPH_SEPARATOR = 1 4,U_CONTROL_CHAR = 1 5,U_FORMAT_CHAR = 1 6,U_PRIVATE_USE_CHAR = 1 7,U_SURROGATE = 1 8,U_DASH_PUNCTUATION = 1 9,U_START_PUNCTUATION = 2 0,U_END_PUNCTUATION = 2 1,U_CONNECTOR_PUNCTUATION = 2 2,U_OTHER_PUNCTUATION = 2 3,U_MATH_SYMBOL = 2 4,U_CURRENCY_SYMBOL = 2 5,U_MODIFIER_SYMBOL = 2 6,U_OTHER_SYMBOL = 2 7,U_INITIAL_PUNCTUATION = 2 8,U_FINAL_PUNCTUATION = 2 9,U_CHAR_CATEGORY_COUNT } UCharCategory ; # define U_GC_CN_MASK)",
    "insertText": "U_MASK(U_GENERAL_OTHER_TYPES) #define U_GC_LU_MASK U_MASK(U_UPPERCASE_LETTER) #define U_GC_LL_MASK U_MASK(U_LOWERCASE_LETTER) #define U_GC_LT_MASK U_MASK(U_TITLECASE_LETTER) #define U_GC_LM_MASK U_MASK(U_MODIFIER_LETTER) #define U_GC_LO_MASK U_MASK(U_OTHER_LETTER) #define U_GC_MN_MASK U_MASK(U_NON_SPACING_MARK) #define U_GC_ME_MASK U_MASK(U_ENCLOSING_MARK) #define U_GC_MC_MASK U_MASK(U_COMBINING_SPACING_MARK) #define U_GC_ND_MASK U_MASK(U_DECIMAL_DIGIT_NUMBER) #define U_GC_NL_MASK U_MASK(U_LETTER_NUMBER) #define U_GC_NO_MASK U_MASK(U_OTHER_NUMBER) #define U_GC_ZS_MASK U_MASK(U_SPACE_SEPARATOR) #define U_GC_ZL_MASK U_MASK(U_LINE_SEPARATOR) #define U_GC_ZP_MASK U_MASK(U_PARAGRAPH_SEPARATOR) #define U_GC_CC_MASK U_MASK(U_CONTROL_CHAR) #define U_GC_CF_MASK U_MASK(U_FORMAT_CHAR) #define U_GC_CO_MASK U_MASK(U_PRIVATE_USE_CHAR) #define U_GC_CS_MASK U_MASK(U_SURROGATE) #define U_GC_PD_MASK U_MASK(U_DASH_PUNCTUATION) #define U_GC_PS_MASK U_MASK(U_START_PUNCTUATION) #define U_GC_PE_MASK U_MASK(U_END_PUNCTUATION) #define U_GC_PC_MASK U_MASK(U_CONNECTOR_PUNCTUATION) #define U_GC_PO_MASK U_MASK(U_OTHER_PUNCTUATION) #define U_GC_SM_MASK U_MASK(U_MATH_SYMBOL) #define U_GC_SC_MASK U_MASK(U_CURRENCY_SYMBOL) #define U_GC_SK_MASK U_MASK(U_MODIFIER_SYMBOL) #define U_GC_SO_MASK U_MASK(U_OTHER_SYMBOL) #define U_GC_PI_MASK U_MASK(U_INITIAL_PUNCTUATION) #define U_GC_PF_MASK U_MASK(U_FINAL_PUNCTUATION) #define U_GC_L_MASK \\ (U_GC_LU_MASK|U_GC_LL_MASK|U_GC_LT_MASK|U_GC_LM_MASK|U_GC_LO_MASK) #define U_GC_LC_MASK \\ (U_GC_LU_MASK|U_GC_LL_MASK|U_GC_LT_MASK) #define U_GC_M_MASK (U_GC_MN_MASK|U_GC_ME_MASK|U_GC_MC_MASK) #define U_GC_N_MASK (U_GC_ND_MASK|U_GC_NL_MASK|U_GC_NO_MASK) #define U_GC_Z_MASK (U_GC_ZS_MASK|U_GC_ZL_MASK|U_GC_ZP_MASK) #define U_GC_C_MASK \\ (U_GC_CN_MASK|U_GC_CC_MASK|U_GC_CF_MASK|U_GC_CO_MASK|U_GC_CS_MASK) #define U_GC_P_MASK \\ (U_GC_PD_MASK|U_GC_PS_MASK|U_GC_PE_MASK|U_GC_PC_MASK|U_GC_PO_MASK| \\ U_GC_PI_MASK|U_GC_PF_MASK) #define U_GC_S_MASK (U_GC_SM_MASK|U_GC_SC_MASK|U_GC_SK_MASK|U_GC_SO_MASK)"
  },
  {
    "label": "u_hasBinaryProperty()",
    "kind": "Method",
    "detail": "Function (U_LEFT_TO_RIGHT = 0,U_RIGHT_TO_LEFT = 1,U_EUROPEAN_NUMBER = 2,U_EUROPEAN_NUMBER_SEPARATOR = 3,U_EUROPEAN_NUMBER_TERMINATOR = 4,U_ARABIC_NUMBER = 5,U_COMMON_NUMBER_SEPARATOR = 6,U_BLOCK_SEPARATOR = 7,U_SEGMENT_SEPARATOR = 8,U_WHITE_SPACE_NEUTRAL = 9,U_OTHER_NEUTRAL = 1 0,U_LEFT_TO_RIGHT_EMBEDDING = 1 1,U_LEFT_TO_RIGHT_OVERRIDE = 1 2,U_RIGHT_TO_LEFT_ARABIC = 1 3,U_RIGHT_TO_LEFT_EMBEDDING = 1 4,U_RIGHT_TO_LEFT_OVERRIDE = 1 5,U_POP_DIRECTIONAL_FORMAT = 1 6,U_DIR_NON_SPACING_MARK = 1 7,U_BOUNDARY_NEUTRAL = 1 8,U_FIRST_STRONG_ISOLATE = 1 9,U_LEFT_TO_RIGHT_ISOLATE = 2 0,U_RIGHT_TO_LEFT_ISOLATE = 2 1,U_POP_DIRECTIONAL_ISOLATE = 2 2,# ifndef U_CHAR_DIRECTION_COUNT # endif } UCharDirection ; typedef enum UBidiPairedBracketType { U_BPT_NONE,U_BPT_OPEN,U_BPT_CLOSE,# ifndef U_BPT_COUNT # endif } UBidiPairedBracketType ; enum UBlockCode { UBLOCK_NO_BLOCK = 0,UBLOCK_BASIC_LATIN = 1,UBLOCK_LATIN_1_SUPPLEMENT = 2,UBLOCK_LATIN_EXTENDED_A = 3,UBLOCK_LATIN_EXTENDED_B = 4,UBLOCK_IPA_EXTENSIONS = 5,UBLOCK_SPACING_MODIFIER_LETTERS = 6,UBLOCK_COMBINING_DIACRITICAL_MARKS = 7,UBLOCK_GREEK = 8,UBLOCK_CYRILLIC = 9,UBLOCK_ARMENIAN = 1 0,UBLOCK_HEBREW = 1 1,UBLOCK_ARABIC = 1 2,UBLOCK_SYRIAC = 1 3,UBLOCK_THAANA = 1 4,UBLOCK_DEVANAGARI = 1 5,UBLOCK_BENGALI = 1 6,UBLOCK_GURMUKHI = 1 7,UBLOCK_GUJARATI = 1 8,UBLOCK_ORIYA = 1 9,UBLOCK_TAMIL = 2 0,UBLOCK_TELUGU = 2 1,UBLOCK_KANNADA = 2 2,UBLOCK_MALAYALAM = 2 3,UBLOCK_SINHALA = 2 4,UBLOCK_THAI = 2 5,UBLOCK_LAO = 2 6,UBLOCK_TIBETAN = 2 7,UBLOCK_MYANMAR = 2 8,UBLOCK_GEORGIAN = 2 9,UBLOCK_HANGUL_JAMO = 3 0,UBLOCK_ETHIOPIC = 3 1,UBLOCK_CHEROKEE = 3 2,UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 3 3,UBLOCK_OGHAM = 3 4,UBLOCK_RUNIC = 3 5,UBLOCK_KHMER = 3 6,UBLOCK_MONGOLIAN = 3 7,UBLOCK_LATIN_EXTENDED_ADDITIONAL = 3 8,UBLOCK_GREEK_EXTENDED = 3 9,UBLOCK_GENERAL_PUNCTUATION = 4 0,UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = 4 1,UBLOCK_CURRENCY_SYMBOLS = 4 2,UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = 4 3,UBLOCK_LETTERLIKE_SYMBOLS = 4 4,UBLOCK_NUMBER_FORMS = 4 5,UBLOCK_ARROWS = 4 6,UBLOCK_MATHEMATICAL_OPERATORS = 4 7,UBLOCK_MISCELLANEOUS_TECHNICAL = 4 8,UBLOCK_CONTROL_PICTURES = 4 9,UBLOCK_OPTICAL_CHARACTER_RECOGNITION = 5 0,UBLOCK_ENCLOSED_ALPHANUMERICS = 5 1,UBLOCK_BOX_DRAWING = 5 2,UBLOCK_BLOCK_ELEMENTS = 5 3,UBLOCK_GEOMETRIC_SHAPES = 5 4,UBLOCK_MISCELLANEOUS_SYMBOLS = 5 5,UBLOCK_DINGBATS = 5 6,UBLOCK_BRAILLE_PATTERNS = 5 7,UBLOCK_CJK_RADICALS_SUPPLEMENT = 5 8,UBLOCK_KANGXI_RADICALS = 5 9,UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = 6 0,UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = 6 1,UBLOCK_HIRAGANA = 6 2,UBLOCK_KATAKANA = 6 3,UBLOCK_BOPOMOFO = 6 4,UBLOCK_HANGUL_COMPATIBILITY_JAMO = 6 5,UBLOCK_KANBUN = 6 6,UBLOCK_BOPOMOFO_EXTENDED = 6 7,UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = 6 8,UBLOCK_CJK_COMPATIBILITY = 6 9,UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = 7 0,UBLOCK_CJK_UNIFIED_IDEOGRAPHS = 7 1,UBLOCK_YI_SYLLABLES = 7 2,UBLOCK_YI_RADICALS = 7 3,UBLOCK_HANGUL_SYLLABLES = 7 4,UBLOCK_HIGH_SURROGATES = 7 5,UBLOCK_HIGH_PRIVATE_USE_SURROGATES = 7 6,UBLOCK_LOW_SURROGATES = 7 7,UBLOCK_PRIVATE_USE_AREA = 7 8,UBLOCK_PRIVATE_USE = UBLOCK_PRIVATE_USE_AREA,UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = 7 9,UBLOCK_ALPHABETIC_PRESENTATION_FORMS = 8 0,UBLOCK_ARABIC_PRESENTATION_FORMS_A = 8 1,UBLOCK_COMBINING_HALF_MARKS = 8 2,UBLOCK_CJK_COMPATIBILITY_FORMS = 8 3,UBLOCK_SMALL_FORM_VARIANTS = 8 4,UBLOCK_ARABIC_PRESENTATION_FORMS_B = 8 5,UBLOCK_SPECIALS = 8 6,UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = 8 7,UBLOCK_OLD_ITALIC = 8 8,UBLOCK_GOTHIC = 8 9,UBLOCK_DESERET = 9 0,UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 9 1,UBLOCK_MUSICAL_SYMBOLS = 9 2,UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 9 3,UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = 9 4,UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 9 5,UBLOCK_TAGS = 9 6,UBLOCK_CYRILLIC_SUPPLEMENT = 9 7,UBLOCK_CYRILLIC_SUPPLEMENTARY = UBLOCK_CYRILLIC_SUPPLEMENT,UBLOCK_TAGALOG = 9 8,UBLOCK_HANUNOO = 9 9,UBLOCK_BUHID = 1 0 0,UBLOCK_TAGBANWA = 1 0 1,UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 1 0 2,UBLOCK_SUPPLEMENTAL_ARROWS_A = 1 0 3,UBLOCK_SUPPLEMENTAL_ARROWS_B = 1 0 4,UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 1 0 5,UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 1 0 6,UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 1 0 7,UBLOCK_VARIATION_SELECTORS = 1 0 8,UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 1 0 9,UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 1 1 0,UBLOCK_LIMBU = 1 1 1,UBLOCK_TAI_LE = 1 1 2,UBLOCK_KHMER_SYMBOLS = 1 1 3,UBLOCK_PHONETIC_EXTENSIONS = 1 1 4,UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 1 1 5,UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 1 1 6,UBLOCK_LINEAR_B_SYLLABARY = 1 1 7,UBLOCK_LINEAR_B_IDEOGRAMS = 1 1 8,UBLOCK_AEGEAN_NUMBERS = 1 1 9,UBLOCK_UGARITIC = 1 2 0,UBLOCK_SHAVIAN = 1 2 1,UBLOCK_OSMANYA = 1 2 2,UBLOCK_CYPRIOT_SYLLABARY = 1 2 3,UBLOCK_TAI_XUAN_JING_SYMBOLS = 1 2 4,UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 1 2 5,UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 1 2 6,UBLOCK_ANCIENT_GREEK_NUMBERS = 1 2 7,UBLOCK_ARABIC_SUPPLEMENT = 1 2 8,UBLOCK_BUGINESE = 1 2 9,UBLOCK_CJK_STROKES = 1 3 0,UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 1 3 1,UBLOCK_COPTIC = 1 3 2,UBLOCK_ETHIOPIC_EXTENDED = 1 3 3,UBLOCK_ETHIOPIC_SUPPLEMENT = 1 3 4,UBLOCK_GEORGIAN_SUPPLEMENT = 1 3 5,UBLOCK_GLAGOLITIC = 1 3 6,UBLOCK_KHAROSHTHI = 1 3 7,UBLOCK_MODIFIER_TONE_LETTERS = 1 3 8,UBLOCK_NEW_TAI_LUE = 1 3 9,UBLOCK_OLD_PERSIAN = 1 4 0,UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 1 4 1,UBLOCK_SUPPLEMENTAL_PUNCTUATION = 1 4 2,UBLOCK_SYLOTI_NAGRI = 1 4 3,UBLOCK_TIFINAGH = 1 4 4,UBLOCK_VERTICAL_FORMS = 1 4 5,UBLOCK_NKO = 1 4 6,UBLOCK_BALINESE = 1 4 7,UBLOCK_LATIN_EXTENDED_C = 1 4 8,UBLOCK_LATIN_EXTENDED_D = 1 4 9,UBLOCK_PHAGS_PA = 1 5 0,UBLOCK_PHOENICIAN = 1 5 1,UBLOCK_CUNEIFORM = 1 5 2,UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 1 5 3,UBLOCK_COUNTING_ROD_NUMERALS = 1 5 4,UBLOCK_SUNDANESE = 1 5 5,UBLOCK_LEPCHA = 1 5 6,UBLOCK_OL_CHIKI = 1 5 7,UBLOCK_CYRILLIC_EXTENDED_A = 1 5 8,UBLOCK_VAI = 1 5 9,UBLOCK_CYRILLIC_EXTENDED_B = 1 6 0,UBLOCK_SAURASHTRA = 1 6 1,UBLOCK_KAYAH_LI = 1 6 2,UBLOCK_REJANG = 1 6 3,UBLOCK_CHAM = 1 6 4,UBLOCK_ANCIENT_SYMBOLS = 1 6 5,UBLOCK_PHAISTOS_DISC = 1 6 6,UBLOCK_LYCIAN = 1 6 7,UBLOCK_CARIAN = 1 6 8,UBLOCK_LYDIAN = 1 6 9,UBLOCK_MAHJONG_TILES = 1 7 0,UBLOCK_DOMINO_TILES = 1 7 1,UBLOCK_SAMARITAN = 1 7 2,UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 1 7 3,UBLOCK_TAI_THAM = 1 7 4,UBLOCK_VEDIC_EXTENSIONS = 1 7 5,UBLOCK_LISU = 1 7 6,UBLOCK_BAMUM = 1 7 7,UBLOCK_COMMON_INDIC_NUMBER_FORMS = 1 7 8,UBLOCK_DEVANAGARI_EXTENDED = 1 7 9,UBLOCK_HANGUL_JAMO_EXTENDED_A = 1 8 0,UBLOCK_JAVANESE = 1 8 1,UBLOCK_MYANMAR_EXTENDED_A = 1 8 2,UBLOCK_TAI_VIET = 1 8 3,UBLOCK_MEETEI_MAYEK = 1 8 4,UBLOCK_HANGUL_JAMO_EXTENDED_B = 1 8 5,UBLOCK_IMPERIAL_ARAMAIC = 1 8 6,UBLOCK_OLD_SOUTH_ARABIAN = 1 8 7,UBLOCK_AVESTAN = 1 8 8,UBLOCK_INSCRIPTIONAL_PARTHIAN = 1 8 9,UBLOCK_INSCRIPTIONAL_PAHLAVI = 1 9 0,UBLOCK_OLD_TURKIC = 1 9 1,UBLOCK_RUMI_NUMERAL_SYMBOLS = 1 9 2,UBLOCK_KAITHI = 1 9 3,UBLOCK_EGYPTIAN_HIEROGLYPHS = 1 9 4,UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 1 9 5,UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 1 9 6,UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 1 9 7,UBLOCK_MANDAIC = 1 9 8,UBLOCK_BATAK = 1 9 9,UBLOCK_ETHIOPIC_EXTENDED_A = 2 0 0,UBLOCK_BRAHMI = 2 0 1,UBLOCK_BAMUM_SUPPLEMENT = 2 0 2,UBLOCK_KANA_SUPPLEMENT = 2 0 3,UBLOCK_PLAYING_CARDS = 2 0 4,UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 2 0 5,UBLOCK_EMOTICONS = 2 0 6,UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 2 0 7,UBLOCK_ALCHEMICAL_SYMBOLS = 2 0 8,UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 2 0 9,UBLOCK_ARABIC_EXTENDED_A = 2 1 0,UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = 2 1 1,UBLOCK_CHAKMA = 2 1 2,UBLOCK_MEETEI_MAYEK_EXTENSIONS = 2 1 3,UBLOCK_MEROITIC_CURSIVE = 2 1 4,UBLOCK_MEROITIC_HIEROGLYPHS = 2 1 5,UBLOCK_MIAO = 2 1 6,UBLOCK_SHARADA = 2 1 7,UBLOCK_SORA_SOMPENG = 2 1 8,UBLOCK_SUNDANESE_SUPPLEMENT = 2 1 9,UBLOCK_TAKRI = 2 2 0,UBLOCK_BASSA_VAH = 2 2 1,UBLOCK_CAUCASIAN_ALBANIAN = 2 2 2,UBLOCK_COPTIC_EPACT_NUMBERS = 2 2 3,UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = 2 2 4,UBLOCK_DUPLOYAN = 2 2 5,UBLOCK_ELBASAN = 2 2 6,UBLOCK_GEOMETRIC_SHAPES_EXTENDED = 2 2 7,UBLOCK_GRANTHA = 2 2 8,UBLOCK_KHOJKI = 2 2 9,UBLOCK_KHUDAWADI = 2 3 0,UBLOCK_LATIN_EXTENDED_E = 2 3 1,UBLOCK_LINEAR_A = 2 3 2,UBLOCK_MAHAJANI = 2 3 3,UBLOCK_MANICHAEAN = 2 3 4,UBLOCK_MENDE_KIKAKUI = 2 3 5,UBLOCK_MODI = 2 3 6,UBLOCK_MRO = 2 3 7,UBLOCK_MYANMAR_EXTENDED_B = 2 3 8,UBLOCK_NABATAEAN = 2 3 9,UBLOCK_OLD_NORTH_ARABIAN = 2 4 0,UBLOCK_OLD_PERMIC = 2 4 1,UBLOCK_ORNAMENTAL_DINGBATS = 2 4 2,UBLOCK_PAHAWH_HMONG = 2 4 3,UBLOCK_PALMYRENE = 2 4 4,UBLOCK_PAU_CIN_HAU = 2 4 5,UBLOCK_PSALTER_PAHLAVI = 2 4 6,UBLOCK_SHORTHAND_FORMAT_CONTROLS = 2 4 7,UBLOCK_SIDDHAM = 2 4 8,UBLOCK_SINHALA_ARCHAIC_NUMBERS = 2 4 9,UBLOCK_SUPPLEMENTAL_ARROWS_C = 2 5 0,UBLOCK_TIRHUTA = 2 5 1,UBLOCK_WARANG_CITI = 2 5 2,UBLOCK_AHOM = 2 5 3,UBLOCK_ANATOLIAN_HIEROGLYPHS = 2 5 4,UBLOCK_CHEROKEE_SUPPLEMENT = 2 5 5,UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = 2 5 6,UBLOCK_EARLY_DYNASTIC_CUNEIFORM = 2 5 7,UBLOCK_HATRAN = 2 5 8,UBLOCK_MULTANI = 2 5 9,UBLOCK_OLD_HUNGARIAN = 2 6 0,UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = 2 6 1,UBLOCK_SUTTON_SIGNWRITING = 2 6 2,UBLOCK_ADLAM = 2 6 3,UBLOCK_BHAIKSUKI = 2 6 4,UBLOCK_CYRILLIC_EXTENDED_C = 2 6 5,UBLOCK_GLAGOLITIC_SUPPLEMENT = 2 6 6,UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = 2 6 7,UBLOCK_MARCHEN = 2 6 8,UBLOCK_MONGOLIAN_SUPPLEMENT = 2 6 9,UBLOCK_NEWA = 2 7 0,UBLOCK_OSAGE = 2 7 1,UBLOCK_TANGUT = 2 7 2,UBLOCK_TANGUT_COMPONENTS = 2 7 3,UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = 2 7 4,UBLOCK_KANA_EXTENDED_A = 2 7 5,UBLOCK_MASARAM_GONDI = 2 7 6,UBLOCK_NUSHU = 2 7 7,UBLOCK_SOYOMBO = 2 7 8,UBLOCK_SYRIAC_SUPPLEMENT = 2 7 9,UBLOCK_ZANABAZAR_SQUARE = 2 8 0,UBLOCK_CHESS_SYMBOLS = 2 8 1,UBLOCK_DOGRA = 2 8 2,UBLOCK_GEORGIAN_EXTENDED = 2 8 3,UBLOCK_GUNJALA_GONDI = 2 8 4,UBLOCK_HANIFI_ROHINGYA = 2 8 5,UBLOCK_INDIC_SIYAQ_NUMBERS = 2 8 6,UBLOCK_MAKASAR = 2 8 7,UBLOCK_MAYAN_NUMERALS = 2 8 8,UBLOCK_MEDEFAIDRIN = 2 8 9,UBLOCK_OLD_SOGDIAN = 2 9 0,UBLOCK_SOGDIAN = 2 9 1,UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = 2 9 2,UBLOCK_ELYMAIC = 2 9 3,UBLOCK_NANDINAGARI = 2 9 4,UBLOCK_NYIAKENG_PUACHUE_HMONG = 2 9 5,UBLOCK_OTTOMAN_SIYAQ_NUMBERS = 2 9 6,UBLOCK_SMALL_KANA_EXTENSION = 2 9 7,UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = 2 9 8,UBLOCK_TAMIL_SUPPLEMENT = 2 9 9,UBLOCK_WANCHO = 3 0 0,# ifndef UBLOCK_COUNT = 3 0 1,# endif UBLOCK_INVALID_CODE = - 1 } ; typedef enum UBlockCode UBlockCode ; typedef enum UEastAsianWidth { U_EA_NEUTRAL,U_EA_AMBIGUOUS,U_EA_HALFWIDTH,U_EA_FULLWIDTH,U_EA_NARROW,U_EA_WIDE,# ifndef U_EA_COUNT # endif } UEastAsianWidth ; typedef enum UCharNameChoice { U_UNICODE_CHAR_NAME,# ifndef U_UNICODE_10_CHAR_NAME,# endif U_EXTENDED_CHAR_NAME = U_UNICODE_CHAR_NAME + 2,U_CHAR_NAME_ALIAS,# ifndef U_CHAR_NAME_CHOICE_COUNT # endif } UCharNameChoice ; typedef enum UPropertyNameChoice { U_SHORT_PROPERTY_NAME,U_LONG_PROPERTY_NAME,# ifndef U_PROPERTY_NAME_CHOICE_COUNT # endif } UPropertyNameChoice ; typedef enum UDecompositionType { U_DT_NONE,U_DT_CANONICAL,U_DT_COMPAT,U_DT_CIRCLE,U_DT_FINAL,U_DT_FONT,U_DT_FRACTION,U_DT_INITIAL,U_DT_ISOLATED,U_DT_MEDIAL,U_DT_NARROW,U_DT_NOBREAK,U_DT_SMALL,U_DT_SQUARE,U_DT_SUB,U_DT_SUPER,U_DT_VERTICAL,U_DT_WIDE,# ifndef U_DT_COUNT # endif } UDecompositionType ; typedef enum UJoiningType { U_JT_NON_JOINING,U_JT_JOIN_CAUSING,U_JT_DUAL_JOINING,U_JT_LEFT_JOINING,U_JT_RIGHT_JOINING,U_JT_TRANSPARENT,# ifndef U_JT_COUNT # endif } UJoiningType ; typedef enum UJoiningGroup { U_JG_NO_JOINING_GROUP,U_JG_AIN,U_JG_ALAPH,U_JG_ALEF,U_JG_BEH,U_JG_BETH,U_JG_DAL,U_JG_DALATH_RISH,U_JG_E,U_JG_FEH,U_JG_FINAL_SEMKATH,U_JG_GAF,U_JG_GAMAL,U_JG_HAH,U_JG_TEH_MARBUTA_GOAL,U_JG_HAMZA_ON_HEH_GOAL = U_JG_TEH_MARBUTA_GOAL,U_JG_HE,U_JG_HEH,U_JG_HEH_GOAL,U_JG_HETH,U_JG_KAF,U_JG_KAPH,U_JG_KNOTTED_HEH,U_JG_LAM,U_JG_LAMADH,U_JG_MEEM,U_JG_MIM,U_JG_NOON,U_JG_NUN,U_JG_PE,U_JG_QAF,U_JG_QAPH,U_JG_REH,U_JG_REVERSED_PE,U_JG_SAD,U_JG_SADHE,U_JG_SEEN,U_JG_SEMKATH,U_JG_SHIN,U_JG_SWASH_KAF,U_JG_SYRIAC_WAW,U_JG_TAH,U_JG_TAW,U_JG_TEH_MARBUTA,U_JG_TETH,U_JG_WAW,U_JG_YEH,U_JG_YEH_BARREE,U_JG_YEH_WITH_TAIL,U_JG_YUDH,U_JG_YUDH_HE,U_JG_ZAIN,U_JG_FE,U_JG_KHAPH,U_JG_ZHAIN,U_JG_BURUSHASKI_YEH_BARREE,U_JG_FARSI_YEH,U_JG_NYA,U_JG_ROHINGYA_YEH,U_JG_MANICHAEAN_ALEPH,U_JG_MANICHAEAN_AYIN,U_JG_MANICHAEAN_BETH,U_JG_MANICHAEAN_DALETH,U_JG_MANICHAEAN_DHAMEDH,U_JG_MANICHAEAN_FIVE,U_JG_MANICHAEAN_GIMEL,U_JG_MANICHAEAN_HETH,U_JG_MANICHAEAN_HUNDRED,U_JG_MANICHAEAN_KAPH,U_JG_MANICHAEAN_LAMEDH,U_JG_MANICHAEAN_MEM,U_JG_MANICHAEAN_NUN,U_JG_MANICHAEAN_ONE,U_JG_MANICHAEAN_PE,U_JG_MANICHAEAN_QOPH,U_JG_MANICHAEAN_RESH,U_JG_MANICHAEAN_SADHE,U_JG_MANICHAEAN_SAMEKH,U_JG_MANICHAEAN_TAW,U_JG_MANICHAEAN_TEN,U_JG_MANICHAEAN_TETH,U_JG_MANICHAEAN_THAMEDH,U_JG_MANICHAEAN_TWENTY,U_JG_MANICHAEAN_WAW,U_JG_MANICHAEAN_YODH,U_JG_MANICHAEAN_ZAYIN,U_JG_STRAIGHT_WAW,U_JG_AFRICAN_FEH,U_JG_AFRICAN_NOON,U_JG_AFRICAN_QAF,U_JG_MALAYALAM_BHA,U_JG_MALAYALAM_JA,U_JG_MALAYALAM_LLA,U_JG_MALAYALAM_LLLA,U_JG_MALAYALAM_NGA,U_JG_MALAYALAM_NNA,U_JG_MALAYALAM_NNNA,U_JG_MALAYALAM_NYA,U_JG_MALAYALAM_RA,U_JG_MALAYALAM_SSA,U_JG_MALAYALAM_TTA,U_JG_HANIFI_ROHINGYA_KINNA_YA,U_JG_HANIFI_ROHINGYA_PA,# ifndef U_JG_COUNT # endif } UJoiningGroup ; typedef enum UGraphemeClusterBreak { U_GCB_OTHER = 0,U_GCB_CONTROL = 1,U_GCB_CR = 2,U_GCB_EXTEND = 3,U_GCB_L = 4,U_GCB_LF = 5,U_GCB_LV = 6,U_GCB_LVT = 7,U_GCB_T = 8,U_GCB_V = 9,U_GCB_SPACING_MARK = 1 0,U_GCB_PREPEND = 1 1,U_GCB_REGIONAL_INDICATOR = 1 2,U_GCB_E_BASE = 1 3,U_GCB_E_BASE_GAZ = 1 4,U_GCB_E_MODIFIER = 1 5,U_GCB_GLUE_AFTER_ZWJ = 1 6,U_GCB_ZWJ = 1 7,# ifndef U_GCB_COUNT = 1 8 # endif } UGraphemeClusterBreak ; typedef enum UWordBreakValues { U_WB_OTHER = 0,U_WB_ALETTER = 1,U_WB_FORMAT = 2,U_WB_KATAKANA = 3,U_WB_MIDLETTER = 4,U_WB_MIDNUM = 5,U_WB_NUMERIC = 6,U_WB_EXTENDNUMLET = 7,U_WB_CR = 8,U_WB_EXTEND = 9,U_WB_LF = 1 0,U_WB_MIDNUMLET = 1 1,U_WB_NEWLINE = 1 2,U_WB_REGIONAL_INDICATOR = 1 3,U_WB_HEBREW_LETTER = 1 4,U_WB_SINGLE_QUOTE = 1 5,U_WB_DOUBLE_QUOTE = 1 6,U_WB_E_BASE = 1 7,U_WB_E_BASE_GAZ = 1 8,U_WB_E_MODIFIER = 1 9,U_WB_GLUE_AFTER_ZWJ = 2 0,U_WB_ZWJ = 2 1,U_WB_WSEGSPACE = 2 2,# ifndef U_WB_COUNT = 2 3 # endif } UWordBreakValues ; typedef enum USentenceBreak { U_SB_OTHER = 0,U_SB_ATERM = 1,U_SB_CLOSE = 2,U_SB_FORMAT = 3,U_SB_LOWER = 4,U_SB_NUMERIC = 5,U_SB_OLETTER = 6,U_SB_SEP = 7,U_SB_SP = 8,U_SB_STERM = 9,U_SB_UPPER = 1 0,U_SB_CR = 1 1,U_SB_EXTEND = 1 2,U_SB_LF = 1 3,U_SB_SCONTINUE = 1 4,# ifndef U_SB_COUNT = 1 5 # endif } USentenceBreak ; typedef enum ULineBreak { U_LB_UNKNOWN = 0,U_LB_AMBIGUOUS = 1,U_LB_ALPHABETIC = 2,U_LB_BREAK_BOTH = 3,U_LB_BREAK_AFTER = 4,U_LB_BREAK_BEFORE = 5,U_LB_MANDATORY_BREAK = 6,U_LB_CONTINGENT_BREAK = 7,U_LB_CLOSE_PUNCTUATION = 8,U_LB_COMBINING_MARK = 9,U_LB_CARRIAGE_RETURN = 1 0,U_LB_EXCLAMATION = 1 1,U_LB_GLUE = 1 2,U_LB_HYPHEN = 1 3,U_LB_IDEOGRAPHIC = 1 4,U_LB_INSEPARABLE = 1 5,U_LB_INSEPERABLE = U_LB_INSEPARABLE,U_LB_INFIX_NUMERIC = 1 6,U_LB_LINE_FEED = 1 7,U_LB_NONSTARTER = 1 8,U_LB_NUMERIC = 1 9,U_LB_OPEN_PUNCTUATION = 2 0,U_LB_POSTFIX_NUMERIC = 2 1,U_LB_PREFIX_NUMERIC = 2 2,U_LB_QUOTATION = 2 3,U_LB_COMPLEX_CONTEXT = 2 4,U_LB_SURROGATE = 2 5,U_LB_SPACE = 2 6,U_LB_BREAK_SYMBOLS = 2 7,U_LB_ZWSPACE = 2 8,U_LB_NEXT_LINE = 2 9,U_LB_WORD_JOINER = 3 0,U_LB_H2 = 3 1,U_LB_H3 = 3 2,U_LB_JL = 3 3,U_LB_JT = 3 4,U_LB_JV = 3 5,U_LB_CLOSE_PARENTHESIS = 3 6,U_LB_CONDITIONAL_JAPANESE_STARTER = 3 7,U_LB_HEBREW_LETTER = 3 8,U_LB_REGIONAL_INDICATOR = 3 9,U_LB_E_BASE = 4 0,U_LB_E_MODIFIER = 4 1,U_LB_ZWJ = 4 2,# ifndef U_LB_COUNT = 4 3 # endif } ULineBreak ; typedef enum UNumericType { U_NT_NONE,U_NT_DECIMAL,U_NT_DIGIT,U_NT_NUMERIC,# ifndef U_NT_COUNT # endif } UNumericType ; typedef enum UHangulSyllableType { U_HST_NOT_APPLICABLE,U_HST_LEADING_JAMO,U_HST_VOWEL_JAMO,U_HST_TRAILING_JAMO,U_HST_LV_SYLLABLE,U_HST_LVT_SYLLABLE,# ifndef U_HST_COUNT # endif } UHangulSyllableType ; typedef enum UIndicPositionalCategory { U_INPC_NA,U_INPC_BOTTOM,U_INPC_BOTTOM_AND_LEFT,U_INPC_BOTTOM_AND_RIGHT,U_INPC_LEFT,U_INPC_LEFT_AND_RIGHT,U_INPC_OVERSTRUCK,U_INPC_RIGHT,U_INPC_TOP,U_INPC_TOP_AND_BOTTOM,U_INPC_TOP_AND_BOTTOM_AND_RIGHT,U_INPC_TOP_AND_LEFT,U_INPC_TOP_AND_LEFT_AND_RIGHT,U_INPC_TOP_AND_RIGHT,U_INPC_VISUAL_ORDER_LEFT,} UIndicPositionalCategory ; typedef enum UIndicSyllabicCategory { U_INSC_OTHER,U_INSC_AVAGRAHA,U_INSC_BINDU,U_INSC_BRAHMI_JOINING_NUMBER,U_INSC_CANTILLATION_MARK,U_INSC_CONSONANT,U_INSC_CONSONANT_DEAD,U_INSC_CONSONANT_FINAL,U_INSC_CONSONANT_HEAD_LETTER,U_INSC_CONSONANT_INITIAL_POSTFIXED,U_INSC_CONSONANT_KILLER,U_INSC_CONSONANT_MEDIAL,U_INSC_CONSONANT_PLACEHOLDER,U_INSC_CONSONANT_PRECEDING_REPHA,U_INSC_CONSONANT_PREFIXED,U_INSC_CONSONANT_SUBJOINED,U_INSC_CONSONANT_SUCCEEDING_REPHA,U_INSC_CONSONANT_WITH_STACKER,U_INSC_GEMINATION_MARK,U_INSC_INVISIBLE_STACKER,U_INSC_JOINER,U_INSC_MODIFYING_LETTER,U_INSC_NON_JOINER,U_INSC_NUKTA,U_INSC_NUMBER,U_INSC_NUMBER_JOINER,U_INSC_PURE_KILLER,U_INSC_REGISTER_SHIFTER,U_INSC_SYLLABLE_MODIFIER,U_INSC_TONE_LETTER,U_INSC_TONE_MARK,U_INSC_VIRAMA,U_INSC_VISARGA,U_INSC_VOWEL,U_INSC_VOWEL_DEPENDENT,U_INSC_VOWEL_INDEPENDENT,} UIndicSyllabicCategory ; typedef enum UVerticalOrientation { U_VO_ROTATED,U_VO_TRANSFORMED_ROTATED,U_VO_TRANSFORMED_UPRIGHT,U_VO_UPRIGHT,} UVerticalOrientation ; U_STABLE UBool U_EXPORT2)",
    "insertText": "u_hasBinaryProperty(UChar32 c, UCharProperty which)"
  },
  {
    "label": "u_getBinaryPropertySet()",
    "kind": "Method",
    "detail": "Function (# ifndef U_CAPI const USet* U_EXPORT2)",
    "insertText": "u_getBinaryPropertySet(UCharProperty property, UErrorCode *pErrorCode)"
  },
  {
    "label": "u_isUAlphabetic()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isUAlphabetic(UChar32 c)"
  },
  {
    "label": "u_isULowercase()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isULowercase(UChar32 c)"
  },
  {
    "label": "u_isUUppercase()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isUUppercase(UChar32 c)"
  },
  {
    "label": "u_isUWhiteSpace()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isUWhiteSpace(UChar32 c)"
  },
  {
    "label": "u_getIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_getIntPropertyValue(UChar32 c, UCharProperty which)"
  },
  {
    "label": "u_getIntPropertyMinValue()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_getIntPropertyMinValue(UCharProperty which)"
  },
  {
    "label": "u_getIntPropertyMaxValue()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_getIntPropertyMaxValue(UCharProperty which)"
  },
  {
    "label": "u_getIntPropertyMap()",
    "kind": "Method",
    "detail": "Function (# ifndef U_CAPI const UCPMap* U_EXPORT2)",
    "insertText": "u_getIntPropertyMap(UCharProperty property, UErrorCode *pErrorCode)"
  },
  {
    "label": "u_getNumericValue()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE double U_EXPORT2)",
    "insertText": "u_getNumericValue(UChar32 c)"
  },
  {
    "label": "U_NO_NUMERIC_VALUE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "U_NO_NUMERIC_VALUE((double)-123456789.) U_STABLE UBool U_EXPORT2 u_islower(UChar32 c)"
  },
  {
    "label": "u_isupper()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isupper(UChar32 c)"
  },
  {
    "label": "u_istitle()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_istitle(UChar32 c)"
  },
  {
    "label": "u_isdigit()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isdigit(UChar32 c)"
  },
  {
    "label": "u_isalpha()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isalpha(UChar32 c)"
  },
  {
    "label": "u_isalnum()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isalnum(UChar32 c)"
  },
  {
    "label": "u_isxdigit()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isxdigit(UChar32 c)"
  },
  {
    "label": "u_ispunct()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_ispunct(UChar32 c)"
  },
  {
    "label": "u_isgraph()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isgraph(UChar32 c)"
  },
  {
    "label": "u_isblank()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isblank(UChar32 c)"
  },
  {
    "label": "u_isdefined()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isdefined(UChar32 c)"
  },
  {
    "label": "u_isspace()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isspace(UChar32 c)"
  },
  {
    "label": "u_isJavaSpaceChar()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isJavaSpaceChar(UChar32 c)"
  },
  {
    "label": "u_isWhitespace()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isWhitespace(UChar32 c)"
  },
  {
    "label": "u_iscntrl()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_iscntrl(UChar32 c)"
  },
  {
    "label": "u_isISOControl()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isISOControl(UChar32 c)"
  },
  {
    "label": "u_isprint()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isprint(UChar32 c)"
  },
  {
    "label": "u_isbase()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isbase(UChar32 c)"
  },
  {
    "label": "u_charDirection()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCharDirection U_EXPORT2)",
    "insertText": "u_charDirection(UChar32 c)"
  },
  {
    "label": "u_isMirrored()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isMirrored(UChar32 c)"
  },
  {
    "label": "u_charMirror()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_charMirror(UChar32 c)"
  },
  {
    "label": "u_getBidiPairedBracket()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_getBidiPairedBracket(UChar32 c)"
  },
  {
    "label": "u_charType()",
    "kind": "Method",
    "detail": "Function (U_STABLE int8_t U_EXPORT2)",
    "insertText": "u_charType(UChar32 c)"
  },
  {
    "label": "U_GET_GC_MASK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "U_GET_GC_MASK(c) U_MASK(u_charType(c)) typedef UBool U_CALLCONV UCharEnumTypeRange(const void *context, UChar32 start, UChar32 limit, UCharCategory type)"
  },
  {
    "label": "u_enumCharTypes()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "u_enumCharTypes(UCharEnumTypeRange *enumRange, const void *context)"
  },
  {
    "label": "u_getCombiningClass()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_NORMALIZATION U_STABLE uint8_t U_EXPORT2)",
    "insertText": "u_getCombiningClass(UChar32 c)"
  },
  {
    "label": "u_charDigitValue()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_charDigitValue(UChar32 c)"
  },
  {
    "label": "ublock_getCode()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBlockCode U_EXPORT2)",
    "insertText": "ublock_getCode(UChar32 c)"
  },
  {
    "label": "u_charName()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_charName(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "u_getISOComment()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "u_getISOComment(UChar32 c, char *dest, int32_t destCapacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "u_charFromName()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_charFromName(UCharNameChoice nameChoice, const char *name, UErrorCode *pErrorCode)"
  },
  {
    "label": "UEnumCharNamesFn()",
    "kind": "Method",
    "detail": "Function (typedef UBool U_CALLCONV)",
    "insertText": "UEnumCharNamesFn(void *context, UChar32 code, UCharNameChoice nameChoice, const char *name, int32_t length)"
  },
  {
    "label": "u_enumCharNames()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "u_enumCharNames(UChar32 start, UChar32 limit, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice, UErrorCode *pErrorCode)"
  },
  {
    "label": "u_getPropertyName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "u_getPropertyName(UCharProperty property, UPropertyNameChoice nameChoice)"
  },
  {
    "label": "u_getPropertyEnum()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCharProperty U_EXPORT2)",
    "insertText": "u_getPropertyEnum(const char* alias)"
  },
  {
    "label": "u_getPropertyValueName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "u_getPropertyValueName(UCharProperty property, int32_t value, UPropertyNameChoice nameChoice)"
  },
  {
    "label": "u_getPropertyValueEnum()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_getPropertyValueEnum(UCharProperty property, const char* alias)"
  },
  {
    "label": "u_isIDStart()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isIDStart(UChar32 c)"
  },
  {
    "label": "u_isIDPart()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isIDPart(UChar32 c)"
  },
  {
    "label": "u_isIDIgnorable()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isIDIgnorable(UChar32 c)"
  },
  {
    "label": "u_isJavaIDStart()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isJavaIDStart(UChar32 c)"
  },
  {
    "label": "u_isJavaIDPart()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "u_isJavaIDPart(UChar32 c)"
  },
  {
    "label": "u_tolower()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_tolower(UChar32 c)"
  },
  {
    "label": "u_toupper()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_toupper(UChar32 c)"
  },
  {
    "label": "u_totitle()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_totitle(UChar32 c)"
  },
  {
    "label": "u_foldCase()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_foldCase(UChar32 c, uint32_t options)"
  },
  {
    "label": "u_digit()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_digit(UChar32 ch, int8_t radix)"
  },
  {
    "label": "u_forDigit()",
    "kind": "Method",
    "detail": "Function (U_STABLE UChar32 U_EXPORT2)",
    "insertText": "u_forDigit(int32_t digit, int8_t radix)"
  },
  {
    "label": "u_charAge()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "u_charAge(UChar32 c, UVersionInfo versionArray)"
  },
  {
    "label": "u_getUnicodeVersion()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "u_getUnicodeVersion(UVersionInfo versionArray)"
  },
  {
    "label": "u_getFC_NFKC_Closure()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_NORMALIZATION U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_getFC_NFKC_Closure(UChar32 c, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)"
  }
]