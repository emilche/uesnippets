[
  {
    "label": "FunctionView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionView"
  },
  {
    "label": "RetT()",
    "kind": "Method",
    "detail": "Function (# ifndef API_FUNCTION_VIEW_H_ # define API_FUNCTION_VIEW_H_ # include<type_traits> # include<utility> # include \" rtc_base / checks . h \" namespace rtc { template<T> class FunctionView ; template<RetT,. . . ArgT> class FunctionView<)",
    "insertText": "RetT(ArgT...)"
  },
  {
    "label": "FunctionView()",
    "kind": "Method",
    "detail": "Function (public : template<F,std::enable_if<! std::is_function<std::remove_pointer<std::remove_reference<F>::type>::type>::value&& ! std::is_same<std::nullptr_t,std::remove_cv<F>::type>::value&& ! std::is_same<FunctionView,std::remove_cv<std::remove_reference<F>::type>::type>::value>::type* = nullptr>)",
    "insertText": "FunctionView(F&& f) : call_(CallVoidPtr<typename std::remove_reference<F>::type>)"
  },
  {
    "label": "FunctionView()",
    "kind": "Method",
    "detail": "Function (f_ . void_ptr =& f ; } template<F,std::enable_if<std::is_function<std::remove_pointer<std::remove_reference<F>::type>::type>::value>::type* = nullptr>)",
    "insertText": "FunctionView(F&& f) : call_(f ? CallFunPtr<typename std::remove_pointer<F>::type> : nullptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (f_ . fun_ptr = reinterpret_cast<)",
    "insertText": "void(*)()>(f)"
  },
  {
    "label": "FunctionView()",
    "kind": "Method",
    "detail": "Function (} template<F,std::enable_if<std::is_same<std::nullptr_t,std::remove_cv<F>::type>::value>::type* = nullptr>)",
    "insertText": "FunctionView(F&& f) : call_(nullptr)"
  },
  {
    "label": "FunctionView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionView() : call_(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RetT)",
    "insertText": "operator()(ArgT... args)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(call_)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "CallVoidPtr()",
    "kind": "Method",
    "detail": "Function (} ; template<F> RetT)",
    "insertText": "CallVoidPtr(VoidUnion vu, ArgT... args)"
  },
  {
    "label": "CallFunPtr()",
    "kind": "Method",
    "detail": "Function (} template<F> RetT)",
    "insertText": "CallFunPtr(VoidUnion vu, ArgT... args)"
  },
  {
    "label": "RetT()",
    "kind": "Method",
    "detail": "Function (} VoidUnion f_ ;)",
    "insertText": "RetT(*call_)(VoidUnion, ArgT...)"
  }
]