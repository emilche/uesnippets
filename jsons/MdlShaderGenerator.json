[
  {
    "label": "MdlShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MdlShaderGenerator"
  },
  {
    "label": "MX_GENMDL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENMDL_API"
  },
  {
    "label": "MdlShaderGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_MDLSHADERGENERATOR_H # define MATERIALX_MDLSHADERGENERATOR_H # include<MaterialXGenMdl / Export . h> # include<MaterialXGenShader / ShaderGenerator . h> MATERIALX_NAMESPACE_BEGIN using MdlShaderGeneratorPtr = shared_ptr<class MdlShaderGenerator> ; class MdlShaderGenerator : public ShaderGenerator { public :)",
    "insertText": "MdlShaderGenerator()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderGeneratorPtr)",
    "insertText": "create()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "getImplementation()",
    "kind": "Method",
    "detail": "Function (ShaderNodeImplPtr)",
    "insertText": "getImplementation(const NodeDef& nodedef, GenContext& context)"
  },
  {
    "label": "getUpstreamResult()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getUpstreamResult(const ShaderInput* input, GenContext& context)"
  },
  {
    "label": "createShader()",
    "kind": "Method",
    "detail": "Function (const string TARGET ; protected : ShaderPtr)",
    "insertText": "createShader(const string& name, ElementPtr element, GenContext& context)"
  },
  {
    "label": "emitShaderInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitShaderInputs(const VariableBlock& inputs, ShaderStage& stage)"
  }
]