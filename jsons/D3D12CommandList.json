[
  {
    "label": "FD3D12ContextCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ContextCommon"
  },
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FD3D12QueryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12QueryAllocator"
  },
  {
    "label": "FD3D12Queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Queue"
  },
  {
    "label": "FD3D12ResourceBarrierBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceBarrierBatcher"
  },
  {
    "label": "FD3D12ResidencyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResidencyHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ResidencySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResidencySet"
  },
  {
    "label": "FD3D12CommandAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandAllocator"
  },
  {
    "label": "FD3D12CommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandList"
  },
  {
    "label": "FInterfaces",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterfaces"
  },
  {
    "label": "TRValuePtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRValuePtr"
  },
  {
    "label": "FState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FState"
  },
  {
    "label": "FD3D12CommandAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHICommon . h \" # include \" RHICommandList . h \" # include \" D3D12NvidiaExtensions . h \" # include \" D3D12Resources . h \" # include \" D3D12Submission . h \" # include \" D3D12Util . h \" class FD3D12ContextCommon ; class FD3D12Device ; class FD3D12DynamicRHI ; class FD3D12QueryAllocator ; class FD3D12Queue ; class FD3D12ResourceBarrierBatcher ; struct FD3D12ResidencyHandle ; enum class ED3D12QueueType ; namespace D3DX12Residency { class ResidencySet ; } typedef D3DX12Residency::ResidencySet FD3D12ResidencySet ; class FD3D12CommandAllocator final { private : FD3D12Device ;)",
    "insertText": "FD3D12CommandAllocator(FD3D12CommandAllocator const&)"
  },
  {
    "label": "FD3D12CommandAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12CommandAllocator(FD3D12CommandAllocator&&)"
  },
  {
    "label": "FD3D12CommandAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12CommandAllocator(FD3D12Device* Device, ED3D12QueueType QueueType)"
  },
  {
    "label": "FD3D12CommandAllocator()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FD3D12CommandAllocator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FD3D12Device* const Device ; ED3D12QueueType const QueueType ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "ID3D12CommandAllocator()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "ID3D12CommandAllocator()"
  },
  {
    "label": "FD3D12CommandList()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<ID3D12CommandAllocator> CommandAllocator ; } ; class FD3D12CommandList final { private : FD3D12Device ; FD3D12ContextCommon ; FD3D12DynamicRHI ; FD3D12Queue ; FD3D12ResourceBarrierBatcher ;)",
    "insertText": "FD3D12CommandList(FD3D12CommandList const&)"
  },
  {
    "label": "FD3D12CommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12CommandList(FD3D12CommandList&&)"
  },
  {
    "label": "FD3D12CommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12CommandList(FD3D12CommandAllocator* CommandAllocator, FD3D12QueryAllocator* TimestampAllocator, FD3D12QueryAllocator* PipelineStatsAllocator)"
  },
  {
    "label": "BeginLocalQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLocalQueries()"
  },
  {
    "label": "EndLocalQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLocalQueries()"
  },
  {
    "label": "FD3D12CommandList()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FD3D12CommandList()"
  },
  {
    "label": "BeginQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginQuery(FD3D12QueryLocation const& Location)"
  },
  {
    "label": "EndQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndQuery(FD3D12QueryLocation const& Location)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(FD3D12CommandAllocator* CommandAllocator, FD3D12QueryAllocator* TimestampAllocator, FD3D12QueryAllocator* PipelineStatsAllocator)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "UpdateResidency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResidency(const FD3D12Resource* Resource)"
  },
  {
    "label": "AddToResidencySet()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_RESIDENCY_MANAGEMENT void)",
    "insertText": "AddToResidencySet(TConstArrayView<FD3D12ResidencyHandle*> Handles)"
  },
  {
    "label": "CloseResidencySet()",
    "kind": "Method",
    "detail": "Function (FD3D12ResidencySet*)",
    "insertText": "CloseResidencySet()"
  },
  {
    "label": "EmplaceProfilerEvent()",
    "kind": "Method",
    "detail": "Function (# endif # if RHI_NEW_GPU_PROFILER template<TEventType,. . . TArgs> TEventType&)",
    "insertText": "EmplaceProfilerEvent(TArgs&&... Args)"
  },
  {
    "label": "TEventType()",
    "kind": "Method",
    "detail": "Function (TEventType& Data = State . EventStream . Emplace<)",
    "insertText": "TEventType(Forward<TArgs>(Args)...)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (State . BeginEvents .)",
    "insertText": "Add(&Data)"
  },
  {
    "label": "FlushProfilerEvents()",
    "kind": "Method",
    "detail": "Function (} return Data ; } void)",
    "insertText": "FlushProfilerEvents(UE::RHI::GPUProfiler::FEventStream& Destination, uint64 CPUTimestamp)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (BeginEvent -> CPUTimestamp = CPUTimestamp ; } Destination .)",
    "insertText": "Append(MoveTemp(State.EventStream))"
  },
  {
    "label": "TRValuePtr()",
    "kind": "Method",
    "detail": "Function (} # endif private : struct FInterfaces { TRefCountPtr<ID3D12CommandList> CommandList ; TRefCountPtr<ID3D12CopyCommandList> CopyCommandList ; TRefCountPtr<ID3D12GraphicsCommandList> GraphicsCommandList ; # if D3D12_MAX_COMMANDLIST_INTERFACE> = 1 TRefCountPtr<ID3D12GraphicsCommandList1> GraphicsCommandList1 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 2 TRefCountPtr<ID3D12GraphicsCommandList2> GraphicsCommandList2 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 3 TRefCountPtr<ID3D12GraphicsCommandList3> GraphicsCommandList3 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 4 TRefCountPtr<ID3D12GraphicsCommandList4> GraphicsCommandList4 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 5 TRefCountPtr<ID3D12GraphicsCommandList5> GraphicsCommandList5 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 6 TRefCountPtr<ID3D12GraphicsCommandList6> GraphicsCommandList6 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 7 TRefCountPtr<ID3D12GraphicsCommandList7> GraphicsCommandList7 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 8 TRefCountPtr<ID3D12GraphicsCommandList8> GraphicsCommandList8 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 9 TRefCountPtr<ID3D12GraphicsCommandList9> GraphicsCommandList9 ; # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 1 0 TRefCountPtr<ID3D12GraphicsCommandList10> GraphicsCommandList10 ; # endif # if D3D12_SUPPORTS_DEBUG_COMMAND_LIST TRefCountPtr<ID3D12DebugCommandList> DebugCommandList ; # endif # if NV_AFTERMATH UE::RHICore::Nvidia::Aftermath::D3D12::FCommandList AftermathHandle = nullptr ; # endif } Interfaces ; public : template<T> class TRValuePtr { FD3D12CommandList ; FD3D12CommandList& CommandList ; T* Ptr ;)",
    "insertText": "TRValuePtr(FD3D12CommandList& CommandList, T* Ptr) : CommandList(CommandList) , Ptr(Ptr)"
  },
  {
    "label": "TRValuePtr()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TRValuePtr()"
  },
  {
    "label": "TRValuePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRValuePtr(TRValuePtr const&)"
  },
  {
    "label": "TRValuePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRValuePtr(TRValuePtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TRValuePtr&)",
    "insertText": "operator(TRValuePtr const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TRValuePtr&)",
    "insertText": "operator(TRValuePtr&&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CommandList . State . NumCommands + + ; return Ptr ; } T*)",
    "insertText": "Get()"
  },
  {
    "label": "GetNoRefCount()",
    "kind": "Method",
    "detail": "Function (CommandList . State . NumCommands + + ; return Ptr ; } T*)",
    "insertText": "GetNoRefCount()"
  },
  {
    "label": "BaseCommandList()",
    "kind": "Method",
    "detail": "Function (} public : auto)",
    "insertText": "BaseCommandList()"
  },
  {
    "label": "CopyCommandList()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "CopyCommandList()"
  },
  {
    "label": "GraphicsCommandList()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "GraphicsCommandList()"
  },
  {
    "label": "GraphicsCommandList1()",
    "kind": "Method",
    "detail": "Function (} # if D3D12_MAX_COMMANDLIST_INTERFACE> = 1 auto)",
    "insertText": "GraphicsCommandList1()"
  },
  {
    "label": "GraphicsCommandList2()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 2 auto)",
    "insertText": "GraphicsCommandList2()"
  },
  {
    "label": "GraphicsCommandList3()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 3 auto)",
    "insertText": "GraphicsCommandList3()"
  },
  {
    "label": "GraphicsCommandList4()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 4 auto)",
    "insertText": "GraphicsCommandList4()"
  },
  {
    "label": "GraphicsCommandList5()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 5 auto)",
    "insertText": "GraphicsCommandList5()"
  },
  {
    "label": "GraphicsCommandList6()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 6 auto)",
    "insertText": "GraphicsCommandList6()"
  },
  {
    "label": "GraphicsCommandList7()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 7 auto)",
    "insertText": "GraphicsCommandList7()"
  },
  {
    "label": "GraphicsCommandList8()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 8 auto)",
    "insertText": "GraphicsCommandList8()"
  },
  {
    "label": "GraphicsCommandList9()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 9 auto)",
    "insertText": "GraphicsCommandList9()"
  },
  {
    "label": "GraphicsCommandList10()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_MAX_COMMANDLIST_INTERFACE> = 1 0 auto)",
    "insertText": "GraphicsCommandList10()"
  },
  {
    "label": "DebugCommandList()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_SUPPORTS_DEBUG_COMMAND_LIST auto)",
    "insertText": "DebugCommandList()"
  },
  {
    "label": "RayTracingCommandList()",
    "kind": "Method",
    "detail": "Function (} # endif # if D3D12_RHI_RAYTRACING auto)",
    "insertText": "RayTracingCommandList()"
  },
  {
    "label": "AftermathHandle()",
    "kind": "Method",
    "detail": "Function (} # endif # if NV_AFTERMATH auto)",
    "insertText": "AftermathHandle()"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (struct FState {)",
    "insertText": "FState(FD3D12CommandAllocator* CommandAllocator, FD3D12QueryAllocator* TimestampAllocator, FD3D12QueryAllocator* PipelineStatsAllocator)"
  }
]