[
  {
    "label": "FJsonNull",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJsonNull"
  },
  {
    "label": "FJsonFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJsonFragment"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnalyticsConversion . h \" struct FJsonNull { } ; const TCHAR*)",
    "insertText": "LexToString(FJsonNull)"
  },
  {
    "label": "FJsonFragment()",
    "kind": "Method",
    "detail": "Function (} struct FJsonFragment {)",
    "insertText": "FJsonFragment(FString&& StringRef) : FragmentString(MoveTemp(StringRef))"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString FragmentString ; } ; const FString&)",
    "insertText": "LexToString(const FJsonFragment& Fragment)"
  },
  {
    "label": "FAnalyticsEventAttribute()",
    "kind": "Method",
    "detail": "Function (template<ValueType>)",
    "insertText": "FAnalyticsEventAttribute(FString InName, ValueType&& InValue)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetValue()"
  },
  {
    "label": "IsJsonFragment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsJsonFragment()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (template<ValueType> void)",
    "insertText": "SetValue(ValueType&& InValue)"
  },
  {
    "label": "FAnalyticsEventAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalyticsEventAttribute()"
  },
  {
    "label": "FAnalyticsEventAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalyticsEventAttribute(const FAnalyticsEventAttribute& RHS)"
  },
  {
    "label": "FAnalyticsEventAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalyticsEventAttribute(FAnalyticsEventAttribute&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnalyticsEventAttribute&)",
    "insertText": "operator(const FAnalyticsEventAttribute& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnalyticsEventAttribute&)",
    "insertText": "operator(FAnalyticsEventAttribute&& RHS)"
  },
  {
    "label": "IsValidAttributeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAttributeName(const FString& InName)"
  },
  {
    "label": "CheckName()",
    "kind": "Method",
    "detail": "Function (} private : FString&)",
    "insertText": "CheckName(FString& InName)"
  },
  {
    "label": "FAnalyticsEventAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalyticsEventAttribute(FAnalyticsEventAttribute&& RHS) : AttrName(MoveTemp(const_cast<FString&>(RHS.AttrName))) , AttrValueString(MoveTemp(const_cast<FString&>(RHS.AttrValueString))) , AttrValueNumber(RHS.AttrValueNumber) , AttrValueBool(RHS.AttrValueBool) , AttrType(RHS.AttrType)"
  },
  {
    "label": "FAnalyticsEventAttribute()",
    "kind": "Method",
    "detail": "Function (} template<ValueType>)",
    "insertText": "FAnalyticsEventAttribute(FString InName, ValueType&& InValue) : AttrName(MoveTemp(CheckName(InName))) , AttrValueString(AnalyticsConversionToString(Forward<ValueType>(InValue))) , AttrValueNumber(0) , AttrValueBool(false) , AttrType(TIsArithmetic<typename TDecay<ValueType>::Type>::Value || std::is_same_v<typename TDecay<ValueType>::Type, FJsonNull> || std::is_same_v<typename TDecay<ValueType>::Type, FJsonFragment> ? AttrTypeEnum::JsonFragment : AttrTypeEnum::String)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FString(AttrValueString)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "double(AttrValueNumber)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "bool(AttrValueBool)"
  },
  {
    "label": "AttrTypeEnum()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "AttrTypeEnum(AttrType)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FString(AttrValueString) = MoveTemp(const_cast<FString&>(RHS.AttrValueString))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FString(AttrValueString) = AnalyticsConversionToString(Forward<ValueType>(InValue))"
  },
  {
    "label": "SwitchToJsonFragment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwitchToJsonFragment()"
  },
  {
    "label": "MakeArray()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS namespace ImplMakeAnalyticsEventAttributeArray { template<Allocator> void)",
    "insertText": "MakeArray(TArray<FAnalyticsEventAttribute, Allocator>& Attrs)"
  },
  {
    "label": "MakeArray()",
    "kind": "Method",
    "detail": "Function (} template<Allocator,KeyType,ValueType> void)",
    "insertText": "MakeArray(TArray<FAnalyticsEventAttribute, Allocator>& Attrs, KeyType&& Key, ValueType&& Value)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Attrs .)",
    "insertText": "Emplace(Forward<KeyType>(Key), Forward<ValueType>(Value))"
  },
  {
    "label": "MakeArray()",
    "kind": "Method",
    "detail": "Function (} template<Allocator,KeyType,ValueType,. . . ArgTypes> void)",
    "insertText": "MakeArray(TArray<FAnalyticsEventAttribute, Allocator>& Attrs, KeyType&& Key, ValueType&& Value, ArgTypes&&...Args)"
  },
  {
    "label": "MakeArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeArray(Attrs, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "MakeAnalyticsEventAttributeArray()",
    "kind": "Method",
    "detail": "Function (} } template<Allocator = FDefaultAllocator,. . . ArgTypes> TArray<FAnalyticsEventAttribute,Allocator>)",
    "insertText": "MakeAnalyticsEventAttributeArray(ArgTypes&&...Args)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<FAnalyticsEventAttribute,Allocator> Attrs ; Attrs .)",
    "insertText": "Empty(sizeof...(Args) / 2)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Attrs .)",
    "insertText": "Reserve(Attrs.Num() + (sizeof...(Args) / 2))"
  }
]