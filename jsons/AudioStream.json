[
  {
    "label": "AudioStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioStream"
  },
  {
    "label": "kDefaultTimeoutNanos()",
    "kind": "Method",
    "detail": "Function (# ifndef OBOE_STREAM_H_ # define OBOE_STREAM_H_ # include<atomic> # include<cstdint> # include<ctime> # include<mutex> # include \" oboe / Definitions . h \" # include \" oboe / ResultWithValue . h \" # include \" oboe / AudioStreamBuilder . h \" # include \" oboe / AudioStreamBase . h \" # include \" CoreMinimal . h \" namespace oboe { int64_t)",
    "insertText": "kDefaultTimeoutNanos(2000 * kNanosPerMillisecond)"
  },
  {
    "label": "AudioStream()",
    "kind": "Method",
    "detail": "Function (class AudioStream : public AudioStreamBase { public :)",
    "insertText": "AudioStream()"
  },
  {
    "label": "AudioStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioStream(const AudioStreamBuilder &builder)"
  },
  {
    "label": "open()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "open()"
  },
  {
    "label": "close()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "close()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "start(int64_t timeoutNanoseconds = kDefaultTimeoutNanos)"
  },
  {
    "label": "pause()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "pause(int64_t timeoutNanoseconds = kDefaultTimeoutNanos)"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "flush(int64_t timeoutNanoseconds = kDefaultTimeoutNanos)"
  },
  {
    "label": "stop()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "stop(int64_t timeoutNanoseconds = kDefaultTimeoutNanos)"
  },
  {
    "label": "requestStart()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "requestStart()"
  },
  {
    "label": "requestPause()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "requestPause()"
  },
  {
    "label": "requestFlush()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "requestFlush()"
  },
  {
    "label": "requestStop()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "requestStop()"
  },
  {
    "label": "getState()",
    "kind": "Method",
    "detail": "Function (StreamState)",
    "insertText": "getState()"
  },
  {
    "label": "waitForStateChange()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "waitForStateChange(StreamState inputState, StreamState *nextState, int64_t timeoutNanoseconds)"
  },
  {
    "label": "setBufferSizeInFrames()",
    "kind": "Method",
    "detail": "Function (ResultWithValue<int32_t>)",
    "insertText": "setBufferSizeInFrames(int32_t requestedFrames)"
  },
  {
    "label": "isXRunCountSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isXRunCountSupported()"
  },
  {
    "label": "getFramesPerBurst()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getFramesPerBurst()"
  },
  {
    "label": "getBytesPerFrame()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBytesPerFrame()"
  },
  {
    "label": "getBytesPerSample()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getBytesPerSample()"
  },
  {
    "label": "getFramesWritten()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "getFramesWritten()"
  },
  {
    "label": "getFramesRead()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "getFramesRead()"
  },
  {
    "label": "calculateLatencyMillis()",
    "kind": "Method",
    "detail": "Function (ResultWithValue<double>)",
    "insertText": "calculateLatencyMillis()"
  },
  {
    "label": "getTimestamp()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "getTimestamp(clockid_t clockId, int64_t *framePosition, int64_t *timeNanoseconds)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (} ResultWithValue<int32_t>)",
    "insertText": "read(void *buffer, int32_t numFrames, int64_t timeoutNanoseconds)"
  },
  {
    "label": "getAudioApi()",
    "kind": "Method",
    "detail": "Function (} AudioApi)",
    "insertText": "getAudioApi()"
  },
  {
    "label": "usesAAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "usesAAudio()"
  },
  {
    "label": "getUnderlyingStream()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "getUnderlyingStream()"
  },
  {
    "label": "waitForStateTransition()",
    "kind": "Method",
    "detail": "Function (protected : Result)",
    "insertText": "waitForStateTransition(StreamState startingState, StreamState endingState, int64_t timeoutNanoseconds)"
  },
  {
    "label": "onDefaultCallback()",
    "kind": "Method",
    "detail": "Function (DataCallbackResult)",
    "insertText": "onDefaultCallback(void *audioData, int numFrames)"
  },
  {
    "label": "updateFramesWritten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateFramesWritten()"
  },
  {
    "label": "updateFramesRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateFramesRead()"
  },
  {
    "label": "isDataCallbackEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDataCallbackEnabled()"
  }
]