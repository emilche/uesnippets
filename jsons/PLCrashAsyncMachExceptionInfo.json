[
  {
    "label": "plcrash_async_mach_exception_get_siginfo()",
    "kind": "Method",
    "detail": "Function (# ifndef PLCRASH_ASYNC_MACH_EXCEPTION_INFO_H # define PLCRASH_ASYNC_MACH_EXCEPTION_INFO_H # include \" PLCrashFeatureConfig . h \" # include \" PLCrashMacros . h \" # if PLCRASH_FEATURE_MACH_EXCEPTIONS PLCR_C_BEGIN_DECLS # include<stdbool . h> # include<mach / mach . h> # include<signal . h> # include \" PLCrashAsync . h \" # ifndef EXC_UNIX_BAD_SYSCALL # define EXC_UNIX_BAD_SYSCALL 0 x10000 # endif # ifndef EXC_UNIX_BAD_PIPE # define EXC_UNIX_BAD_PIPE 0 x10001 # endif # ifndef EXC_UNIX_ABORT # define EXC_UNIX_ABORT 0 x10002 # endif bool)",
    "insertText": "plcrash_async_mach_exception_get_siginfo(exception_type_t exception_type, mach_exception_data_t codes, mach_msg_type_number_t code_count, cpu_type_t cpu_type, siginfo_t *siginfo)"
  }
]