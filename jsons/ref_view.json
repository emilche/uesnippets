[
  {
    "label": "ref_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ref_view"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_REF_VIEW_H # define _LIBCPP___RANGES_REF_VIEW_H # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / data . h> # include<__ranges / empty . h> # include<__ranges / enable_borrowed_range . h> # include<__ranges / size . h> # include<__ranges / view_interface . h> # include<__utility / forward . h> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__fun()",
    "kind": "Method",
    "detail": "Function (template<range _Range> requires is_object_v<_Range> class ref_view : public view_interface<ref_view<_Range>> { _Range* __range_ ; void)",
    "insertText": "__fun(_Range&)"
  },
  {
    "label": "__fun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__fun(_Range&&)"
  },
  {
    "label": "__fun()",
    "kind": "Method",
    "detail": "Function (public : template<class _Tp> requires __different_from<_Tp,ref_view>&& convertible_to<_Tp,_Range&>&& requires {)",
    "insertText": "__fun(declval<_Tp>())"
  },
  {
    "label": "ref_view()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "ref_view(_Tp&& __t) : __range_(std::addressof(static_cast<_Range&>(std::forward<_Tp>(__t))))"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Range&)",
    "insertText": "base()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI sentinel_t<_Range>)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "empty()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "empty(*__range_)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "size()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "data()"
  },
  {
    "label": "ref_view()",
    "kind": "Method",
    "detail": "Function (ref_view<_Range>)",
    "insertText": "ref_view(_Range&)"
  }
]