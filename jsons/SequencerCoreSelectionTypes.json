[
  {
    "label": "FSequencerCoreSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCoreSelection"
  },
  {
    "label": "FSelectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionBase"
  },
  {
    "label": "TSelectionSetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSelectionSetBase"
  },
  {
    "label": "TUniqueFragmentSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueFragmentSelectionSet"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / Selection / SequencerSelectionEventSuppressor . h \" # include \" MVVM / Selection / SequencerCoreSelectionIterators . h \" namespace UE::Sequencer { class FSequencerCoreSelection ; class FSelectionBase { public : FSimpleMulticastDelegate OnChanged ; void)",
    "insertText": "Empty()"
  },
  {
    "label": "HasPendingChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingChanges()"
  },
  {
    "label": "FSelectionBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSelectionBase()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (} FSequencerCoreSelection*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "EmptyImpl()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EmptyImpl()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FSequencerCoreSelection ; FSequencerCoreSelection* Owner ; bool bSelectionChanged ; } ; template<MixinType,KeyType> class TSelectionSetBase : public FSelectionBase { public : int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetSelected()",
    "kind": "Method",
    "detail": "Function (} const TSet<KeyType>&)",
    "insertText": "GetSelected()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Select(KeyType InKey, bool* OutNewlySelected = nullptr)"
  },
  {
    "label": "Suppressor()",
    "kind": "Method",
    "detail": "Function (FSelectionEventSuppressor)",
    "insertText": "Suppressor(GetOwner())"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (const bool bAlreadySelected = SelectionSet .)",
    "insertText": "Contains(InKey)"
  },
  {
    "label": "SelectRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRange(MakeArrayView(&InKey, 1), OutNewlySelected)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(OutNewlySelected)"
  },
  {
    "label": "SelectRange()",
    "kind": "Method",
    "detail": "Function (* OutNewlySelected = false ; } } template<RangeType> void)",
    "insertText": "SelectRange(RangeType Range, bool* OutAnySelected = nullptr)"
  },
  {
    "label": "MixinType()",
    "kind": "Method",
    "detail": "Function (MixinType* This = static_cast<)",
    "insertText": "MixinType(this)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectionSet .)",
    "insertText": "Add(Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SelectionSet.Num() != PreviousNum)"
  },
  {
    "label": "ReportChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportChanges()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* OutAnySelected = true ; } } else)",
    "insertText": "if(OutAnySelected)"
  },
  {
    "label": "ReplaceWith()",
    "kind": "Method",
    "detail": "Function (* OutAnySelected = false ; } } void)",
    "insertText": "ReplaceWith(TSelectionSetBase<MixinType, KeyType>&& OtherSelection)"
  },
  {
    "label": "MixinType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "MixinType(this)->OnDeselectItem(Key)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} SelectionSet =)",
    "insertText": "MoveTemp(OtherSelection.SelectionSet)"
  },
  {
    "label": "MixinType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "MixinType(this)->OnSelectItem(Key)"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Deselect(KeyType InKey)"
  },
  {
    "label": "MixinType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "MixinType(this)->OnDeselectItem(InKey)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (SelectionSet .)",
    "insertText": "Remove(InKey)"
  },
  {
    "label": "ReportChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportChanges(SelectionSet.Num() != PreviousNum)"
  },
  {
    "label": "RemoveByPredicate()",
    "kind": "Method",
    "detail": "Function (} } template<Filter> void)",
    "insertText": "RemoveByPredicate(Filter&& InFilter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bChanged = false ;)",
    "insertText": "for(auto It = SelectionSet.CreateIterator(); It; ++It)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const KeyType Key =* It ;)",
    "insertText": "if(InFilter(Key))"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (It .)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "ReportChanges()",
    "kind": "Method",
    "detail": "Function (bChanged = true ; } })",
    "insertText": "ReportChanges(bChanged)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } public : TSelectionSetIteratorState<KeyType>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TSelectionSetIteratorState<KeyType>)",
    "insertText": "end()"
  },
  {
    "label": "OnSelectItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnSelectItem(const KeyType&)"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected(KeyType InKey)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Select(TViewModelPtr<ModelType> InOwner, KeyType InKey, bool* OutNewlySelected = nullptr)"
  },
  {
    "label": "SelectRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRange(InOwner, MakeArrayView(&InKey, 1), OutNewlySelected)"
  },
  {
    "label": "SelectRange()",
    "kind": "Method",
    "detail": "Function (} template<RangeType> void)",
    "insertText": "SelectRange(TViewModelPtr<ModelType> InOwner, RangeType Range, bool* OutAnySelected = nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bAlreadySelected = false ; SelectionSet .)",
    "insertText": "Add(Key, &bAlreadySelected)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyToViewModel .)",
    "insertText": "Add(Key, InOwner)"
  },
  {
    "label": "ReplaceWith()",
    "kind": "Method",
    "detail": "Function (* OutAnySelected = false ; } } void)",
    "insertText": "ReplaceWith(TUniqueFragmentSelectionSet<KeyType, ModelType>&& OtherSelection)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (KeyToViewModel =)",
    "insertText": "MoveTemp(OtherSelection.KeyToViewModel)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KeyToViewModel .)",
    "insertText": "Remove(Key)"
  }
]