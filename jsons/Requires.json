[
  {
    "label": "__cplusplus()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / EnableIf . h \" # include<type_traits> # if)",
    "insertText": "__cplusplus(defined(__clang__) && ((!PLATFORM_APPLE && !PLATFORM_ANDROID && __clang_major__ == 16) || (PLATFORM_APPLE && __clang_major__ == 15) || (PLATFORM_ANDROID && __clang_major__ == 17))) #define UE_REQUIRES(...) , std::enable_if_t<(__VA_ARGS__), int> = 0 #define UE_REQUIRES_FRIEND(...) , std::enable_if_t<(__VA_ARGS__), int> #define UE_REQUIRES_DEFINITION(...) , std::enable_if_t<(__VA_ARGS__), int> #define UE_REQUIRES_EXPR(...) (!std::is_same_v<decltype(__VA_ARGS__), long long************>)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<bool B> concept BoolIdentityConcept = B ; } # define)",
    "insertText": "UE_REQUIRES(...) > requires (!!(__VA_ARGS__)) && UE::Core::Private::BoolIdentityConcept<true #define UE_REQUIRES_FRIEND(...) UE_REQUIRES(__VA_ARGS__) #define UE_REQUIRES_DEFINITION(...) UE_REQUIRES(__VA_ARGS__) #define UE_REQUIRES_EXPR(...)"
  }
]