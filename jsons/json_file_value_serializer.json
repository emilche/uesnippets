[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "JsonFileError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JsonFileError"
  },
  {
    "label": "JSONFileValueSerializer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_JSON_JSON_FILE_VALUE_SERIALIZER_H_ # define BASE_JSON_JSON_FILE_VALUE_SERIALIZER_H_ # include<stddef . h> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / files / file_path . h \" # include \" base / json / json_reader . h \" # include \" base / values . h \" class BASE_EXPORT JSONFileValueSerializer : public base::ValueSerializer { public :)",
    "insertText": "JSONFileValueSerializer()"
  },
  {
    "label": "JSONFileValueSerializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONFileValueSerializer(const base::FilePath& json_file_path)"
  },
  {
    "label": "JSONFileValueSerializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONFileValueSerializer(const JSONFileValueSerializer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONFileValueSerializer&)",
    "insertText": "operator(const JSONFileValueSerializer&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(base::ValueView root)"
  },
  {
    "label": "SerializeAndOmitBinaryValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeAndOmitBinaryValues(base::ValueView root)"
  },
  {
    "label": "SerializeInternal()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SerializeInternal(base::ValueView root, bool omit_binary_values)"
  },
  {
    "label": "JSONFileValueDeserializer()",
    "kind": "Method",
    "detail": "Function (const base::FilePath json_file_path_ ; } ; class BASE_EXPORT JSONFileValueDeserializer : public base::ValueDeserializer { public :)",
    "insertText": "JSONFileValueDeserializer()"
  },
  {
    "label": "JSONFileValueDeserializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONFileValueDeserializer(const base::FilePath& json_file_path, int options = base::JSON_PARSE_CHROMIUM_EXTENSIONS)"
  },
  {
    "label": "JSONFileValueDeserializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONFileValueDeserializer(const JSONFileValueDeserializer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONFileValueDeserializer&)",
    "insertText": "operator(const JSONFileValueDeserializer&)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::Value>)",
    "insertText": "Deserialize(int* error_code, std::string* error_message)"
  },
  {
    "label": "GetErrorMessageForCode()",
    "kind": "Method",
    "detail": "Function (enum JsonFileError { JSON_NO_ERROR = 0,JSON_ACCESS_DENIED = kErrorCodeFirstMetadataError,JSON_CANNOT_READ_FILE,JSON_FILE_LOCKED,JSON_NO_SUCH_FILE } ; const char kAccessDenied [ ] ; const char kCannotReadFile [ ] ; const char kFileLocked [ ] ; const char kNoSuchFile [ ] ; const char*)",
    "insertText": "GetErrorMessageForCode(int error_code)"
  },
  {
    "label": "get_last_read_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "get_last_read_size()"
  }
]