[
  {
    "label": "dual_inner_prod()",
    "kind": "Method",
    "detail": "Function (# ifndef PITCH_MIPSR1_H # define PITCH_MIPSR1_H # define OVERRIDE_DUAL_INNER_PROD void)",
    "insertText": "dual_inner_prod(const opus_val16 *x, const opus_val16 *y01, const opus_val16 *y02, int N, opus_val32 *xy1, opus_val32 *xy2, int arch)"
  },
  {
    "label": "xy02()",
    "kind": "Method",
    "detail": "Function (int j ; opus_val32 xy01 = 0 ; opus_val32)",
    "insertText": "xy02(void)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MULT $ac1, $0, $0\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MULT $ac2, $0, $0\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MADD $ac1, %0, %1\" : : \"r\" ((int)x[j]), \"r\" ((int)y01[j]))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"MADD $ac2, %0, %1\" : : \"r\" ((int)x[j]), \"r\" ((int)y02[j]))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (} asm)",
    "insertText": "volatile(\"mflo %0, $ac1\": \"=r\"(xy01))"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"mflo %0, $ac2\": \"=r\"(xy02))"
  },
  {
    "label": "xcorr_kernel_mips()",
    "kind": "Method",
    "detail": "Function (* xy1 = xy01 ;* xy2 = xy02 ; } void)",
    "insertText": "xcorr_kernel_mips(const opus_val16 * x, const opus_val16 * y, opus_val32 sum[4], int len)"
  },
  {
    "label": "sum_0()",
    "kind": "Method",
    "detail": "Function (int j ; opus_val16 y_0,y_1,y_2,y_3 ; opus_int64 sum_0,sum_1,sum_2,sum_3 ;)",
    "insertText": "sum_0(opus_int64)"
  },
  {
    "label": "sum_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sum_1(opus_int64)"
  },
  {
    "label": "sum_2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sum_2(opus_int64)"
  },
  {
    "label": "sum_3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sum_3(opus_int64)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (y_3 = 0 ; y_0 =* y + + ; y_1 =* y + + ; y_2 =* y + + ;)",
    "insertText": "for(j=0;j<len-3;j+=4)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (opus_val16 tmp ; tmp =* x + + ; y_3 =* y + + ; sum_0 =)",
    "insertText": "__builtin_mips_madd(sum_0, tmp, y_0)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_1 =)",
    "insertText": "__builtin_mips_madd(sum_1, tmp, y_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_2 =)",
    "insertText": "__builtin_mips_madd(sum_2, tmp, y_2)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_3 =)",
    "insertText": "__builtin_mips_madd(sum_3, tmp, y_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (tmp =* x + + ; y_0 =* y + + ; sum_0 =)",
    "insertText": "__builtin_mips_madd(sum_0, tmp, y_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_1 =)",
    "insertText": "__builtin_mips_madd(sum_1, tmp, y_2)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_2 =)",
    "insertText": "__builtin_mips_madd(sum_2, tmp, y_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_3 =)",
    "insertText": "__builtin_mips_madd(sum_3, tmp, y_0)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (tmp =* x + + ; y_1 =* y + + ; sum_0 =)",
    "insertText": "__builtin_mips_madd(sum_0, tmp, y_2)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_1 =)",
    "insertText": "__builtin_mips_madd(sum_1, tmp, y_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_2 =)",
    "insertText": "__builtin_mips_madd(sum_2, tmp, y_0)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_3 =)",
    "insertText": "__builtin_mips_madd(sum_3, tmp, y_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (tmp =* x + + ; y_2 =* y + + ; sum_0 =)",
    "insertText": "__builtin_mips_madd(sum_0, tmp, y_3)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_1 =)",
    "insertText": "__builtin_mips_madd(sum_1, tmp, y_0)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_2 =)",
    "insertText": "__builtin_mips_madd(sum_2, tmp, y_1)"
  },
  {
    "label": "__builtin_mips_madd()",
    "kind": "Method",
    "detail": "Function (sum_3 =)",
    "insertText": "__builtin_mips_madd(sum_3, tmp, y_2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j++<len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j<len)"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "sum(opus_val32)"
  }
]