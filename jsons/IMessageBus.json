[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "IMessageAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageAttachment"
  },
  {
    "label": "IMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageContext"
  },
  {
    "label": "IMessageInterceptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageInterceptor"
  },
  {
    "label": "IMessageReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageReceiver"
  },
  {
    "label": "IMessageSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageSender"
  },
  {
    "label": "IMessageSubscription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageSubscription"
  },
  {
    "label": "IMessageTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageTracer"
  },
  {
    "label": "IBusListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBusListener"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FMessageAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageAddress"
  },
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "IMessageBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageBus"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Delegates / Delegate . h \" # include \" Math / Range . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / TopLevelAssetPath . h \" class FName ; class IMessageAttachment ; class IMessageContext ; class IMessageInterceptor ; class IMessageReceiver ; class IMessageSender ; class IMessageSubscription ; class IMessageTracer ; class IBusListener ; class UScriptStruct ; enum class EMessageBusNotification : uint8 ; enum class EMessageScope : uint8 ; enum class EMessageFlags : uint32 ; struct FDateTime ; struct FMessageAddress ; struct FTimespan ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnMessageBusShutdown)"
  },
  {
    "label": "Forward()",
    "kind": "Method",
    "detail": "Function (class IMessageBus { public : void)",
    "insertText": "Forward(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const TSharedRef<IMessageSender, ESPMode::ThreadSafe>& Forwarder)"
  },
  {
    "label": "GetTracer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IMessageTracer,ESPMode::ThreadSafe>)",
    "insertText": "GetTracer()"
  },
  {
    "label": "Intercept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intercept(const TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe>& Interceptor, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "Publish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Publish(void* Message, UScriptStruct* TypeInfo, EMessageScope Scope, const TMap<FName, FString>& Annotations, const FTimespan& Delay, const FDateTime& Expiration, const TSharedRef<IMessageSender, ESPMode::ThreadSafe>& Publisher)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(const FMessageAddress& Address, const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Recipient)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(void* Message, UScriptStruct* TypeInfo, EMessageFlags Flags, const TMap<FName, FString>& Annotations, const TSharedPtr<IMessageAttachment, ESPMode::ThreadSafe>& Attachment, const TArray<FMessageAddress>& Recipients, const FTimespan& Delay, const FDateTime& Expiration, const TSharedRef<IMessageSender, ESPMode::ThreadSafe>& Sender)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Subscribe()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMessageSubscription,ESPMode::ThreadSafe>)",
    "insertText": "Subscribe(const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Subscriber, const FTopLevelAssetPath& MessageType, const TRange<EMessageScope>& ScopeRange)"
  },
  {
    "label": "Unintercept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unintercept(const TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe>& Interceptor, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FMessageAddress& Address)"
  },
  {
    "label": "Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unsubscribe(const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Subscriber, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "AddNotificationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotificationListener(const TSharedRef<IBusListener, ESPMode::ThreadSafe>& Listener)"
  },
  {
    "label": "RemoveNotificationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNotificationListener(const TSharedRef<IBusListener, ESPMode::ThreadSafe>& Listener)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (public : FOnMessageBusShutdown&)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "IMessageBus()",
    "kind": "Method",
    "detail": "Function (const FTopLevelAssetPath PATHNAME_All ; public : ~)",
    "insertText": "IMessageBus()"
  }
]