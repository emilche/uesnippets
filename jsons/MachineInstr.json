[
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineMemOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineMemOperand"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "CommentFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CommentFlag"
  },
  {
    "label": "MIFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MIFlag"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "QueryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QueryType"
  },
  {
    "label": "MICheckType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MICheckType"
  },
  {
    "label": "MachineInstrExpressionTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineInstrExpressionTrait"
  },
  {
    "label": "MachineInstr()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEINSTR_H # define LLVM_CODEGEN_MACHINEINSTR_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / DenseMapInfo . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / ilist . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / CodeGen / MachineOperand . h \" # include \" llvm / IR / DebugInfo . h \" # include \" llvm / IR / DebugLoc . h \" # include \" llvm / IR / InlineAsm . h \" # include \" llvm / MC / MCInstrDesc . h \" # include \" llvm / Support / ArrayRecycler . h \" # include \" llvm / Target / TargetOpcodes . h \" namespace llvm { template<T> class SmallVectorImpl ; class AliasAnalysis ; class TargetInstrInfo ; class TargetRegisterClass ; class TargetRegisterInfo ; class MachineFunction ; class MachineMemOperand ; class MachineInstr : public ilist_node<MachineInstr> { public : typedef MachineMemOperand** mmo_iterator ; enum CommentFlag { ReloadReuse = 0 x1 } ; enum MIFlag { NoFlags = 0,FrameSetup = 1<<0,BundledPred = 1<<1,BundledSucc = 1<<2 } ; private : const MCInstrDesc* MCID ; MachineBasicBlock* Parent ; MachineOperand* Operands ; unsigned NumOperands ; typedef ArrayRecycler<MachineOperand>::Capacity OperandCapacity ; OperandCapacity CapOperands ; uint8_t Flags ; uint8_t AsmPrinterFlags ; uint8_t NumMemRefs ; mmo_iterator MemRefs ; DebugLoc debugLoc ;)",
    "insertText": "MachineInstr(const MachineInstr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MachineInstr&)"
  },
  {
    "label": "MachineInstr()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MachineInstr()"
  },
  {
    "label": "setParent()",
    "kind": "Method",
    "detail": "Function (struct ilist_traits<MachineInstr> ; struct ilist_traits<MachineBasicBlock> ; void)",
    "insertText": "setParent(MachineBasicBlock *P)"
  },
  {
    "label": "MachineInstr()",
    "kind": "Method",
    "detail": "Function (Parent = P ; })",
    "insertText": "MachineInstr(MachineFunction &, const MachineInstr &)"
  },
  {
    "label": "MachineInstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachineInstr(MachineFunction &, const MCInstrDesc &MCID, DebugLoc dl, bool NoImp = false)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (class MachineFunction ; public : const MachineBasicBlock*)",
    "insertText": "getParent()"
  },
  {
    "label": "getAsmPrinterFlag()",
    "kind": "Method",
    "detail": "Function (AsmPrinterFlags = 0 ; } bool)",
    "insertText": "getAsmPrinterFlag(CommentFlag Flag)"
  },
  {
    "label": "AsmPrinterFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsmPrinterFlags(uint8_t)"
  },
  {
    "label": "clearAsmPrinterFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearAsmPrinterFlag(CommentFlag Flag)"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (AsmPrinterFlags& = ~ Flag ; } uint8_t)",
    "insertText": "getFlags()"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(uint8_t)"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFlags(unsigned flags)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (unsigned Mask = BundledPred | BundledSucc ;)",
    "insertText": "Flags(Flags & Mask) | (flags & ~Mask)"
  },
  {
    "label": "clearFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearFlag(MIFlag Flag)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags((uint8_t)Flag)"
  },
  {
    "label": "isInsideBundle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInsideBundle()"
  },
  {
    "label": "isBundled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBundled()"
  },
  {
    "label": "isBundledWithPred()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBundledWithPred()"
  },
  {
    "label": "isBundledWithSucc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBundledWithSucc()"
  },
  {
    "label": "bundleWithPred()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "bundleWithPred()"
  },
  {
    "label": "bundleWithSucc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bundleWithSucc()"
  },
  {
    "label": "unbundleFromPred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbundleFromPred()"
  },
  {
    "label": "unbundleFromSucc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbundleFromSucc()"
  },
  {
    "label": "getDebugLoc()",
    "kind": "Method",
    "detail": "Function (const DebugLoc&)",
    "insertText": "getDebugLoc()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isDebugValue() && \"not a DBG_VALUE\")"
  },
  {
    "label": "getDebugExpression()",
    "kind": "Method",
    "detail": "Function (} const DIExpression*)",
    "insertText": "getDebugExpression()"
  },
  {
    "label": "emitError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitError(StringRef Msg)"
  },
  {
    "label": "getDesc()",
    "kind": "Method",
    "detail": "Function (const MCInstrDesc&)",
    "insertText": "getDesc()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < getNumOperands() && \"getOperand() out of range!\")"
  },
  {
    "label": "operands_begin()",
    "kind": "Method",
    "detail": "Function (typedef MachineOperand* mop_iterator ; typedef const MachineOperand* const_mop_iterator ; mop_iterator)",
    "insertText": "operands_begin()"
  },
  {
    "label": "operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<const_mop_iterator>)",
    "insertText": "operands()"
  },
  {
    "label": "explicit_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<mop_iterator>)",
    "insertText": "explicit_operands()"
  },
  {
    "label": "implicit_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<mop_iterator>)",
    "insertText": "implicit_operands()"
  },
  {
    "label": "defs()",
    "kind": "Method",
    "detail": "Function (} iterator_range<mop_iterator>)",
    "insertText": "defs()"
  },
  {
    "label": "uses()",
    "kind": "Method",
    "detail": "Function (} iterator_range<mop_iterator>)",
    "insertText": "uses()"
  },
  {
    "label": "getOperandNo()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getOperandNo(const_mop_iterator I)"
  },
  {
    "label": "memoperands_begin()",
    "kind": "Method",
    "detail": "Function (} mmo_iterator)",
    "insertText": "memoperands_begin()"
  },
  {
    "label": "memoperands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<mmo_iterator>)",
    "insertText": "memoperands()"
  },
  {
    "label": "hasOneMemOperand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOneMemOperand()"
  },
  {
    "label": "isVariadic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isVariadic(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "hasOptionalDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOptionalDef(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isPseudo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPseudo(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isReturn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isReturn(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isCall()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCall(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isBarrier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBarrier(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isTerminator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTerminator(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBranch(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isIndirectBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIndirectBranch(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isConditionalBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConditionalBranch(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isUnconditionalBranch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnconditionalBranch(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isPredicable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPredicable(QueryType Type = AllInBundle)"
  },
  {
    "label": "isCompare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCompare(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isMoveImmediate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMoveImmediate(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isBitcast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBitcast(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isSelect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSelect(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isNotDuplicable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNotDuplicable(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isConvergent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConvergent(QueryType Type = AnyInBundle)"
  },
  {
    "label": "hasDelaySlot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDelaySlot(QueryType Type = AnyInBundle)"
  },
  {
    "label": "canFoldAsLoad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canFoldAsLoad(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isRegSequenceLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegSequenceLike(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isExtractSubregLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExtractSubregLike(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isInsertSubregLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInsertSubregLike(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "mayLoad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayLoad(QueryType Type = AnyInBundle)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (unsigned ExtraInfo =)",
    "insertText": "getOperand(InlineAsm::MIOp_ExtraInfo).getImm()"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "hasProperty(MCID::MayLoad, Type)"
  },
  {
    "label": "mayStore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayStore(QueryType Type = AnyInBundle)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "hasProperty(MCID::MayStore, Type)"
  },
  {
    "label": "mayLoadOrStore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mayLoadOrStore(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isCommutable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCommutable(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isConvertibleTo3Addr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConvertibleTo3Addr(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "usesCustomInsertionHook()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "usesCustomInsertionHook(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "hasPostISelHook()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPostISelHook(QueryType Type = IgnoreBundle)"
  },
  {
    "label": "isRematerializable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRematerializable(QueryType Type = AllInBundle)"
  },
  {
    "label": "isAsCheapAsAMove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAsCheapAsAMove(QueryType Type = AllInBundle)"
  },
  {
    "label": "hasExtraSrcRegAllocReq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasExtraSrcRegAllocReq(QueryType Type = AnyInBundle)"
  },
  {
    "label": "hasExtraDefRegAllocReq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasExtraDefRegAllocReq(QueryType Type = AnyInBundle)"
  },
  {
    "label": "isIdenticalTo()",
    "kind": "Method",
    "detail": "Function (} enum MICheckType { CheckDefs,CheckKillDead,IgnoreDefs,IgnoreVRegDefs } ; bool)",
    "insertText": "isIdenticalTo(const MachineInstr *Other, MICheckType Check = CheckDefs)"
  },
  {
    "label": "removeFromParent()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "removeFromParent()"
  },
  {
    "label": "removeFromBundle()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "removeFromBundle()"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "eraseFromParentAndMarkDBGValuesForRemoval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromParentAndMarkDBGValuesForRemoval()"
  },
  {
    "label": "eraseFromBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromBundle()"
  },
  {
    "label": "isEHLabel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEHLabel()"
  },
  {
    "label": "isGCLabel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isGCLabel()"
  },
  {
    "label": "isLabel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLabel()"
  },
  {
    "label": "isCFIInstruction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCFIInstruction()"
  },
  {
    "label": "isPosition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPosition()"
  },
  {
    "label": "isDebugValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDebugValue()"
  },
  {
    "label": "isIndirectDebugValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIndirectDebugValue()"
  },
  {
    "label": "isPHI()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPHI()"
  },
  {
    "label": "isKill()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isKill()"
  },
  {
    "label": "isImplicitDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isImplicitDef()"
  },
  {
    "label": "isInlineAsm()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInlineAsm()"
  },
  {
    "label": "isMSInlineAsm()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMSInlineAsm()"
  },
  {
    "label": "isStackAligningInlineAsm()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isStackAligningInlineAsm()"
  },
  {
    "label": "getInlineAsmDialect()",
    "kind": "Method",
    "detail": "Function (InlineAsm::AsmDialect)",
    "insertText": "getInlineAsmDialect()"
  },
  {
    "label": "isInsertSubreg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInsertSubreg()"
  },
  {
    "label": "isSubregToReg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSubregToReg()"
  },
  {
    "label": "isRegSequence()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegSequence()"
  },
  {
    "label": "isBundle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBundle()"
  },
  {
    "label": "isCopy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCopy()"
  },
  {
    "label": "isFullCopy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFullCopy()"
  },
  {
    "label": "isExtractSubreg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExtractSubreg()"
  },
  {
    "label": "isCopyLike()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCopyLike()"
  },
  {
    "label": "isIdentityCopy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIdentityCopy()"
  },
  {
    "label": "isTransient()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTransient()"
  },
  {
    "label": "getBundleSize()",
    "kind": "Method",
    "detail": "Function (default : return false ; case TargetOpcode::PHI : case TargetOpcode::COPY : case TargetOpcode::INSERT_SUBREG : case TargetOpcode::SUBREG_TO_REG : case TargetOpcode::REG_SEQUENCE : case TargetOpcode::IMPLICIT_DEF : case TargetOpcode::KILL : case TargetOpcode::CFI_INSTRUCTION : case TargetOpcode::EH_LABEL : case TargetOpcode::GC_LABEL : case TargetOpcode::DBG_VALUE : return true ; } } unsigned)",
    "insertText": "getBundleSize()"
  },
  {
    "label": "readsRegister()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "readsRegister(unsigned Reg, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "readsVirtualRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "readsVirtualRegister(unsigned Reg)"
  },
  {
    "label": "readsWritesVirtualRegister()",
    "kind": "Method",
    "detail": "Function (} std::pair<bool,bool>)",
    "insertText": "readsWritesVirtualRegister(unsigned Reg, SmallVectorImpl<unsigned> *Ops = nullptr)"
  },
  {
    "label": "killsRegister()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "killsRegister(unsigned Reg, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "definesRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "definesRegister(unsigned Reg, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "modifiesRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "modifiesRegister(unsigned Reg, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "registerDefIsDead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "registerDefIsDead(unsigned Reg, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "findRegisterUseOperandIdx()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "findRegisterUseOperandIdx(unsigned Reg, bool isKill = false, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "findRegisterUseOperand()",
    "kind": "Method",
    "detail": "Function (MachineOperand*)",
    "insertText": "findRegisterUseOperand(unsigned Reg, bool isKill = false, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "findRegisterUseOperandIdx()",
    "kind": "Method",
    "detail": "Function (int Idx =)",
    "insertText": "findRegisterUseOperandIdx(Reg, isKill, TRI)"
  },
  {
    "label": "findRegisterDefOperandIdx()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "findRegisterDefOperandIdx(unsigned Reg, bool isDead = false, bool Overlap = false, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "findRegisterDefOperand()",
    "kind": "Method",
    "detail": "Function (MachineOperand*)",
    "insertText": "findRegisterDefOperand(unsigned Reg, bool isDead = false, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "findRegisterDefOperandIdx()",
    "kind": "Method",
    "detail": "Function (int Idx =)",
    "insertText": "findRegisterDefOperandIdx(Reg, isDead, false, TRI)"
  },
  {
    "label": "findFirstPredOperandIdx()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "findFirstPredOperandIdx()"
  },
  {
    "label": "findInlineAsmFlagIdx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "findInlineAsmFlagIdx(unsigned OpIdx, unsigned *GroupNo = nullptr)"
  },
  {
    "label": "getRegClassConstraint()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass*)",
    "insertText": "getRegClassConstraint(unsigned OpIdx, const TargetInstrInfo *TII, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "getRegClassConstraintEffectForVReg()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass*)",
    "insertText": "getRegClassConstraintEffectForVReg(unsigned Reg, const TargetRegisterClass *CurRC, const TargetInstrInfo *TII, const TargetRegisterInfo *TRI, bool ExploreBundle = false)"
  },
  {
    "label": "getRegClassConstraintEffect()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass*)",
    "insertText": "getRegClassConstraintEffect(unsigned OpIdx, const TargetRegisterClass *CurRC, const TargetInstrInfo *TII, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "tieOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tieOperands(unsigned DefIdx, unsigned UseIdx)"
  },
  {
    "label": "findTiedOperandIdx()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "findTiedOperandIdx(unsigned OpIdx)"
  },
  {
    "label": "isRegTiedToUseOperand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isRegTiedToUseOperand(unsigned DefOpIdx, unsigned *UseOpIdx = nullptr)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (const MachineOperand& MO =)",
    "insertText": "getOperand(DefOpIdx)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (const MachineOperand& MO =)",
    "insertText": "getOperand(UseOpIdx)"
  },
  {
    "label": "substituteRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "substituteRegister(unsigned FromReg, unsigned ToReg, unsigned SubIdx, const TargetRegisterInfo &RegInfo)"
  },
  {
    "label": "addRegisterKilled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addRegisterKilled(unsigned IncomingReg, const TargetRegisterInfo *RegInfo, bool AddIfNotFound = false)"
  },
  {
    "label": "clearRegisterKills()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearRegisterKills(unsigned Reg, const TargetRegisterInfo *RegInfo)"
  },
  {
    "label": "addRegisterDead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addRegisterDead(unsigned Reg, const TargetRegisterInfo *RegInfo, bool AddIfNotFound = false)"
  },
  {
    "label": "clearRegisterDeads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearRegisterDeads(unsigned Reg)"
  },
  {
    "label": "addRegisterDefReadUndef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegisterDefReadUndef(unsigned Reg)"
  },
  {
    "label": "addRegisterDefined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegisterDefined(unsigned Reg, const TargetRegisterInfo *RegInfo = nullptr)"
  },
  {
    "label": "setPhysRegsDeadExcept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPhysRegsDeadExcept(ArrayRef<unsigned> UsedRegs, const TargetRegisterInfo &TRI)"
  },
  {
    "label": "isSafeToMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSafeToMove(AliasAnalysis *AA, bool &SawStore)"
  },
  {
    "label": "hasOrderedMemoryRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasOrderedMemoryRef()"
  },
  {
    "label": "isInvariantLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInvariantLoad(AliasAnalysis *AA)"
  },
  {
    "label": "isConstantValuePHI()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "isConstantValuePHI()"
  },
  {
    "label": "hasUnmodeledSideEffects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasUnmodeledSideEffects()"
  },
  {
    "label": "allDefsAreDead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "allDefsAreDead()"
  },
  {
    "label": "copyImplicitOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyImplicitOps(MachineFunction &MF, const MachineInstr *MI)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, bool SkipOpers = false)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, ModuleSlotTracker &MST, bool SkipOpers = false)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOperand(MachineFunction &MF, const MachineOperand &Op)"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOperand(const MachineOperand &Op)"
  },
  {
    "label": "setDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDesc(const MCInstrDesc &tid)"
  },
  {
    "label": "setDebugLoc()",
    "kind": "Method",
    "detail": "Function (MCID =& tid ; } void)",
    "insertText": "setDebugLoc(DebugLoc dl)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (debugLoc =)",
    "insertText": "move(dl)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(debugLoc.hasTrivialDestructor() && \"Expected trivial destructor\")"
  },
  {
    "label": "RemoveOperand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveOperand(unsigned i)"
  },
  {
    "label": "addMemOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addMemOperand(MachineFunction &MF, MachineMemOperand *MO)"
  },
  {
    "label": "setMemRefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMemRefs(mmo_iterator NewMemRefs, mmo_iterator NewMemRefsEnd)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (MemRefs = NewMemRefs ; NumMemRefs =)",
    "insertText": "uint8_t(NewMemRefsEnd - NewMemRefs)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumMemRefs == NewMemRefsEnd - NewMemRefs && \"Too many memrefs\")"
  },
  {
    "label": "clearMemRefs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearMemRefs()"
  },
  {
    "label": "untieRegOperand()",
    "kind": "Method",
    "detail": "Function (MemRefs = nullptr ; NumMemRefs = 0 ; } void)",
    "insertText": "untieRegOperand(unsigned OpIdx)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (MachineOperand& MO =)",
    "insertText": "getOperand(OpIdx)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOperand(findTiedOperandIdx(OpIdx))"
  },
  {
    "label": "getRegInfo()",
    "kind": "Method",
    "detail": "Function (MO . TiedTo = 0 ; } } private : MachineRegisterInfo*)",
    "insertText": "getRegInfo()"
  },
  {
    "label": "addImplicitDefUseOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addImplicitDefUseOperands(MachineFunction &MF)"
  },
  {
    "label": "RemoveRegOperandsFromUseLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRegOperandsFromUseLists(MachineRegisterInfo&)"
  },
  {
    "label": "AddRegOperandsToUseLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRegOperandsToUseLists(MachineRegisterInfo&)"
  },
  {
    "label": "hasPropertyInBundle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasPropertyInBundle(unsigned Mask, QueryType Type)"
  },
  {
    "label": "getRegClassConstraintEffectForVRegImpl()",
    "kind": "Method",
    "detail": "Function (const TargetRegisterClass*)",
    "insertText": "getRegClassConstraintEffectForVRegImpl(unsigned OpIdx, unsigned Reg, const TargetRegisterClass *CurRC, const TargetInstrInfo *TII, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (} ; struct MachineInstrExpressionTrait : DenseMapInfo<MachineInstr*> { MachineInstr*)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const MachineInstr* const &MI)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEqual(const MachineInstr* const &LHS, const MachineInstr* const &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const MachineInstr &MI)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (MI .)",
    "insertText": "print(OS)"
  }
]