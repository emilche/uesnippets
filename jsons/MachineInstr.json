[
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineMemOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineMemOperand"
  },
  {
    "label": "isn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isn"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "CommentFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CommentFlag"
  },
  {
    "label": "MIFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MIFlag"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "QueryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QueryType"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "MICheckType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MICheckType"
  },
  {
    "label": "constraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constraint"
  },
  {
    "label": "constraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constraint"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "MachineInstrExpressionTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineInstrExpressionTrait"
  },
  {
    "label": "getFlag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getFlag(BundledPred)"
  },
  {
    "label": "getFlag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getFlag(BundledPred)"
  },
  {
    "label": "getFlag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getFlag(BundledSucc)"
  },
  {
    "label": "bundleWithPred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bundleWithPred()"
  },
  {
    "label": "bundleWithSucc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bundleWithSucc()"
  },
  {
    "label": "unbundleFromPred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbundleFromPred()"
  },
  {
    "label": "unbundleFromSucc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbundleFromSucc()"
  },
  {
    "label": "hasPropertyInBundle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasPropertyInBundle(1 << MCFlag, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Variadic, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::HasOptionalDef, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Pseudo, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Return, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Call, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Barrier, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Terminator, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Branch, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::IndirectBranch, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Predicable, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Compare, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::MoveImm, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Bitcast, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Select, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::NotDuplicable, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Convergent, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::DelaySlot, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::FoldableAsLoad, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::RegSequence, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::ExtractSubreg, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::InsertSubreg, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::MayLoad, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::MayStore, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Commutable, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::ConvertibleTo3Addr, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::UsesCustomInserter, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::HasPostISelHook, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::Rematerializable, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::CheapAsAMove, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::ExtraSrcRegAllocReq, Type)"
  },
  {
    "label": "hasProperty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasProperty(MCID::ExtraDefRegAllocReq, Type)"
  },
  {
    "label": "eraseFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromParent()"
  },
  {
    "label": "eraseFromParentAndMarkDBGValuesForRemoval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromParentAndMarkDBGValuesForRemoval()"
  },
  {
    "label": "eraseFromBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseFromBundle()"
  },
  {
    "label": "tieOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tieOperands(unsigned DefIdx, unsigned UseIdx)"
  },
  {
    "label": "clearKillInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearKillInfo()"
  },
  {
    "label": "substituteRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "substituteRegister(unsigned FromReg, unsigned ToReg, unsigned SubIdx,\n                          const TargetRegisterInfo &RegInfo)"
  },
  {
    "label": "addRegisterKilled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addRegisterKilled(unsigned IncomingReg,\n                         const TargetRegisterInfo *RegInfo,\n                         bool AddIfNotFound = false)"
  },
  {
    "label": "clearRegisterKills()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearRegisterKills(unsigned Reg, const TargetRegisterInfo *RegInfo)"
  },
  {
    "label": "addRegisterDead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addRegisterDead(unsigned Reg, const TargetRegisterInfo *RegInfo,\n                       bool AddIfNotFound = false)"
  },
  {
    "label": "clearRegisterDeads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearRegisterDeads(unsigned Reg)"
  },
  {
    "label": "addRegisterDefReadUndef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegisterDefReadUndef(unsigned Reg)"
  },
  {
    "label": "addRegisterDefined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRegisterDefined(unsigned Reg,\n                          const TargetRegisterInfo *RegInfo = nullptr)"
  },
  {
    "label": "setPhysRegsDeadExcept()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPhysRegsDeadExcept(ArrayRef<unsigned> UsedRegs,\n                             const TargetRegisterInfo &TRI)"
  },
  {
    "label": "copyImplicitOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyImplicitOps(MachineFunction &MF, const MachineInstr *MI)"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOperand(MachineFunction &MF, const MachineOperand &Op)"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOperand(const MachineOperand &Op)"
  },
  {
    "label": "RemoveOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOperand(unsigned i)"
  },
  {
    "label": "addMemOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addMemOperand(MachineFunction &MF, MachineMemOperand *MO)"
  },
  {
    "label": "addImplicitDefUseOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addImplicitDefUseOperands(MachineFunction &MF)"
  },
  {
    "label": "RemoveRegOperandsFromUseLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRegOperandsFromUseLists(MachineRegisterInfo&)"
  },
  {
    "label": "AddRegOperandsToUseLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRegOperandsToUseLists(MachineRegisterInfo&)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getHashValue(const MachineInstr* const &MI)"
  }
]