[
  {
    "label": "Round32()",
    "kind": "Method",
    "detail": "Function (# ifndef __POPMALH__ # define __POPMALH__ # ifndef __RADRR_COREH__ # include \" rrCore . h \" # endif # define)",
    "insertText": "Round32(num ) ( ( ( num ) + 31 ) & ~31 ) #define PushMallocBytesForXPtrs( X ) ( ( X * sizeof(void*) ) + ( X * sizeof(U64) ) + 64 ) #ifdef WRAP_PUBLICS #define rfmerge3(name,add) name##add #define rfmerge2(name,add) rfmerge3(name,add) #define rfmerge(name) rfmerge2(name,WRAP_PUBLICS) #define pushmallocinit rfmerge(pushmallocinit) #define pushmalloc rfmerge(pushmalloc) #define pushmalloco rfmerge(pushmalloco) #define popmalloctotal rfmerge(popmalloctotal) #define popmalloc rfmerge(popmalloc) #endif RADDEFFUNC void RADLINK pushmallocinit(void * base,U32 num_ptrs)"
  },
  {
    "label": "pushmalloc()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "pushmalloc(void * base, void * ptr, U64 amt)"
  },
  {
    "label": "pushmalloco()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void RADLINK)",
    "insertText": "pushmalloco(void* base, void * ptr,U64 amt)"
  },
  {
    "label": "popmalloctotal()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC U64 RADLINK)",
    "insertText": "popmalloctotal(void * base)"
  },
  {
    "label": "popmalloc()",
    "kind": "Method",
    "detail": "Function (RADDEFFUNC void* RADLINK)",
    "insertText": "popmalloc(void * base, U64 amt, void* (*allocator)(UINTa bytes))"
  }
]