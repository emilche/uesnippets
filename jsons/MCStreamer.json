[
  {
    "label": "MCAsmBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackend"
  },
  {
    "label": "MCCodeEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeEmitter"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "MCInstPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstPrinter"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCSymbolELF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolELF"
  },
  {
    "label": "MCSymbolRefExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolRefExpr"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "formatted_raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "formatted_raw_ostream"
  },
  {
    "label": "AssemblerConstantPools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssemblerConstantPools"
  },
  {
    "label": "MCTargetStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCTargetStreamer"
  },
  {
    "label": "ARMTargetStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARMTargetStreamer"
  },
  {
    "label": "MCTargetStreamer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSTREAMER_H # define LLVM_MC_MCSTREAMER_H # include \" dxc / WinAdapter . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / MC / MCDirectives . h \" # include \" llvm / MC / MCDwarf . h \" # include \" llvm / MC / MCLinkerOptimizationHint . h \" # include \" llvm / MC / MCWinEH . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / SMLoc . h \" # include<string> namespace llvm { class MCAsmBackend ; class MCCodeEmitter ; class MCContext ; class MCExpr ; class MCInst ; class MCInstPrinter ; class MCSection ; class MCStreamer ; class MCSymbol ; class MCSymbolELF ; class MCSymbolRefExpr ; class MCSubtargetInfo ; class StringRef ; class Twine ; class raw_ostream ; class formatted_raw_ostream ; class AssemblerConstantPools ; typedef std::pair<MCSection*,const MCExpr*> MCSectionSubPair ; class MCTargetStreamer { protected : MCStreamer& Streamer ; public :)",
    "insertText": "MCTargetStreamer(MCStreamer &S)"
  },
  {
    "label": "MCTargetStreamer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MCTargetStreamer()"
  },
  {
    "label": "getStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer&)",
    "insertText": "getStreamer()"
  },
  {
    "label": "emitAssignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAssignment(MCSymbol *Symbol, const MCExpr *Value)"
  },
  {
    "label": "prettyPrintAsm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prettyPrintAsm(MCInstPrinter &InstPrinter, raw_ostream &OS, const MCInst &Inst, const MCSubtargetInfo &STI)"
  },
  {
    "label": "finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finish()"
  },
  {
    "label": "ARMTargetStreamer()",
    "kind": "Method",
    "detail": "Function (} ; class ARMTargetStreamer : public MCTargetStreamer { public :)",
    "insertText": "ARMTargetStreamer(MCStreamer &S)"
  },
  {
    "label": "ARMTargetStreamer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ARMTargetStreamer()"
  },
  {
    "label": "emitFnStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFnStart()"
  },
  {
    "label": "emitFnEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFnEnd()"
  },
  {
    "label": "emitCantUnwind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitCantUnwind()"
  },
  {
    "label": "emitPersonality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitPersonality(const MCSymbol *Personality)"
  },
  {
    "label": "emitPersonalityIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitPersonalityIndex(unsigned Index)"
  },
  {
    "label": "emitHandlerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitHandlerData()"
  },
  {
    "label": "emitSetFP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitSetFP(unsigned FpReg, unsigned SpReg, int64_t Offset = 0)"
  },
  {
    "label": "emitMovSP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitMovSP(unsigned Reg, int64_t Offset = 0)"
  },
  {
    "label": "emitPad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitPad(int64_t Offset)"
  },
  {
    "label": "emitRegSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitRegSave(const SmallVectorImpl<unsigned> &RegList, bool isVector)"
  },
  {
    "label": "emitUnwindRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitUnwindRaw(int64_t StackOffset, const SmallVectorImpl<uint8_t> &Opcodes)"
  },
  {
    "label": "switchVendor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "switchVendor(StringRef Vendor)"
  },
  {
    "label": "emitAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAttribute(unsigned Attribute, unsigned Value)"
  },
  {
    "label": "emitTextAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitTextAttribute(unsigned Attribute, StringRef String)"
  },
  {
    "label": "emitIntTextAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitIntTextAttribute(unsigned Attribute, unsigned IntValue, StringRef StringValue = \"\")"
  },
  {
    "label": "emitFPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFPU(unsigned FPU)"
  },
  {
    "label": "emitArch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitArch(unsigned Arch)"
  },
  {
    "label": "emitArchExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitArchExtension(unsigned ArchExt)"
  },
  {
    "label": "emitObjectArch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitObjectArch(unsigned Arch)"
  },
  {
    "label": "finishAttributeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finishAttributeSection()"
  },
  {
    "label": "emitInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitInst(uint32_t Inst, char Suffix = '\\0')"
  },
  {
    "label": "AnnotateTLSDescriptorSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateTLSDescriptorSequence(const MCSymbolRefExpr *SRE)"
  },
  {
    "label": "emitThumbSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitThumbSet(MCSymbol *Symbol, const MCExpr *Value)"
  },
  {
    "label": "addConstantPoolEntry()",
    "kind": "Method",
    "detail": "Function (const MCExpr*)",
    "insertText": "addConstantPoolEntry(const MCExpr *)"
  },
  {
    "label": "emitCurrentConstantPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitCurrentConstantPool()"
  },
  {
    "label": "MCStreamer()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<AssemblerConstantPools> ConstantPools ; } ; class MCStreamer { MCContext& Context ; std::unique_ptr<MCTargetStreamer> TargetStreamer ;)",
    "insertText": "MCStreamer(const MCStreamer &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MCStreamer&)",
    "insertText": "operator(const MCStreamer &)"
  },
  {
    "label": "getCurrentDwarfFrameInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<MCDwarfFrameInfo> DwarfFrameInfos ; MCDwarfFrameInfo*)",
    "insertText": "getCurrentDwarfFrameInfo()"
  },
  {
    "label": "EnsureValidDwarfFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureValidDwarfFrame()"
  },
  {
    "label": "EmitCFICommon()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "EmitCFICommon()"
  },
  {
    "label": "EnsureValidWinFrameInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<WinEH::FrameInfo*> WinFrameInfos ; WinEH::FrameInfo* CurrentWinFrameInfo ; void)",
    "insertText": "EnsureValidWinFrameInfo()"
  },
  {
    "label": "MCStreamer()",
    "kind": "Method",
    "detail": "Function (DenseMap<const MCSymbol*,unsigned> SymbolOrdering ; SmallVector<std::pair<MCSectionSubPair,MCSectionSubPair>,4> SectionStack ; protected :)",
    "insertText": "MCStreamer(MCContext &Ctx)"
  },
  {
    "label": "EmitCFIStartProcImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIStartProcImpl(MCDwarfFrameInfo &Frame)"
  },
  {
    "label": "EmitCFIEndProcImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIEndProcImpl(MCDwarfFrameInfo &CurFrame)"
  },
  {
    "label": "getCurrentWinFrameInfo()",
    "kind": "Method",
    "detail": "Function (WinEH::FrameInfo*)",
    "insertText": "getCurrentWinFrameInfo()"
  },
  {
    "label": "EmitRawTextImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRawTextImpl(StringRef String)"
  },
  {
    "label": "MCStreamer()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "MCStreamer()"
  },
  {
    "label": "visitUsedExpr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitUsedExpr(const MCExpr &Expr)"
  },
  {
    "label": "visitUsedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visitUsedSymbol(const MCSymbol &Sym)"
  },
  {
    "label": "setTargetStreamer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTargetStreamer(MCTargetStreamer *TS)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (TargetStreamer .)",
    "insertText": "reset(TS)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (MCContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "getNumFrameInfos()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumFrameInfos()"
  },
  {
    "label": "getDwarfFrameInfos()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<MCDwarfFrameInfo>)",
    "insertText": "getDwarfFrameInfos()"
  },
  {
    "label": "getWinFrameInfos()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<WinEH::FrameInfo*>)",
    "insertText": "getWinFrameInfos()"
  },
  {
    "label": "isVerboseAsm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVerboseAsm()"
  },
  {
    "label": "GetCommentOS()",
    "kind": "Method",
    "detail": "Function (} raw_ostream&)",
    "insertText": "GetCommentOS()"
  },
  {
    "label": "emitRawComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitRawComment(const Twine &T, bool TabPrefix = true)"
  },
  {
    "label": "AddBlankLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBlankLine()"
  },
  {
    "label": "getCurrentSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionSubPair)",
    "insertText": "getCurrentSection()"
  },
  {
    "label": "getCurrentSectionOnly()",
    "kind": "Method",
    "detail": "Function (} MCSection*)",
    "insertText": "getCurrentSectionOnly()"
  },
  {
    "label": "getPreviousSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionSubPair)",
    "insertText": "getPreviousSection()"
  },
  {
    "label": "GetSymbolOrder()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "GetSymbolOrder(const MCSymbol *Sym)"
  },
  {
    "label": "ChangeSection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeSection(MCSection *, const MCExpr *)"
  },
  {
    "label": "PushSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSection()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SectionStack .)",
    "insertText": "push_back(std::make_pair(getCurrentSection(), getPreviousSection()))"
  },
  {
    "label": "PopSection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PopSection()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (auto I = SectionStack .)",
    "insertText": "end()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - I ; MCSectionSubPair OldSection = I -> first ; - - I ; MCSectionSubPair NewSection = I -> first ;)",
    "insertText": "if(OldSection != NewSection) ChangeSection(NewSection.first, NewSection.second)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (SectionStack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "SwitchSectionNoChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchSectionNoChange(MCSection *Section, const MCExpr *Subsection = nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Section && \"Cannot switch to a null section!\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (MCSectionSubPair curSection = SectionStack .)",
    "insertText": "back()"
  },
  {
    "label": "InitSections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitSections(bool NoExecStack)"
  },
  {
    "label": "endSection()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "endSection(MCSection *Section)"
  },
  {
    "label": "AssignSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSection(MCSymbol *Symbol, MCSection *Section)"
  },
  {
    "label": "EmitLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLabel(MCSymbol *Symbol)"
  },
  {
    "label": "EmitEHSymAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitEHSymAttributes(const MCSymbol *Symbol, MCSymbol *EHSymbol)"
  },
  {
    "label": "EmitAssemblerFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAssemblerFlag(MCAssemblerFlag Flag)"
  },
  {
    "label": "EmitLinkerOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLinkerOptions(ArrayRef<std::string> Kind)"
  },
  {
    "label": "EmitDataRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitDataRegion(MCDataRegionType Kind)"
  },
  {
    "label": "EmitVersionMin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitVersionMin(MCVersionMinType, unsigned Major, unsigned Minor, unsigned Update)"
  },
  {
    "label": "EmitThumbFunc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitThumbFunc(MCSymbol *Func)"
  },
  {
    "label": "EmitAssignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAssignment(MCSymbol *Symbol, const MCExpr *Value)"
  },
  {
    "label": "EmitWeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWeakReference(MCSymbol *Alias, const MCSymbol *Symbol)"
  },
  {
    "label": "EmitSymbolAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitSymbolAttribute(MCSymbol *Symbol, MCSymbolAttr Attribute)"
  },
  {
    "label": "EmitSymbolDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSymbolDesc(MCSymbol *Symbol, unsigned DescValue)"
  },
  {
    "label": "BeginCOFFSymbolDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCOFFSymbolDef(const MCSymbol *Symbol)"
  },
  {
    "label": "EmitCOFFSymbolStorageClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSymbolStorageClass(int StorageClass)"
  },
  {
    "label": "EmitCOFFSymbolType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSymbolType(int Type)"
  },
  {
    "label": "EndCOFFSymbolDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCOFFSymbolDef()"
  },
  {
    "label": "EmitCOFFSafeSEH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSafeSEH(MCSymbol const *Symbol)"
  },
  {
    "label": "EmitCOFFSectionIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSectionIndex(MCSymbol const *Symbol)"
  },
  {
    "label": "EmitCOFFSecRel32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSecRel32(MCSymbol const *Symbol)"
  },
  {
    "label": "emitELFSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitELFSize(MCSymbolELF *Symbol, const MCExpr *Value)"
  },
  {
    "label": "EmitLOHDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLOHDirective(MCLOHType Kind, const MCLOHArgs &Args)"
  },
  {
    "label": "EmitCommonSymbol()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitCommonSymbol(MCSymbol *Symbol, uint64_t Size, unsigned ByteAlignment)"
  },
  {
    "label": "EmitLocalCommonSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLocalCommonSymbol(MCSymbol *Symbol, uint64_t Size, unsigned ByteAlignment)"
  },
  {
    "label": "EmitZerofill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitZerofill(MCSection *Section, MCSymbol *Symbol = nullptr, uint64_t Size = 0, unsigned ByteAlignment = 0)"
  },
  {
    "label": "EmitTBSSSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitTBSSSymbol(MCSection *Section, MCSymbol *Symbol, uint64_t Size, unsigned ByteAlignment = 0)"
  },
  {
    "label": "EmitBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBytes(StringRef Data)"
  },
  {
    "label": "EmitValueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueImpl(const MCExpr *Value, unsigned Size, const SMLoc &Loc = SMLoc())"
  },
  {
    "label": "EmitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValue(const MCExpr *Value, unsigned Size, const SMLoc &Loc = SMLoc())"
  },
  {
    "label": "EmitIntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitIntValue(uint64_t Value, unsigned Size)"
  },
  {
    "label": "EmitULEB128Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitULEB128Value(const MCExpr *Value)"
  },
  {
    "label": "EmitSLEB128Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSLEB128Value(const MCExpr *Value)"
  },
  {
    "label": "EmitULEB128IntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitULEB128IntValue(uint64_t Value, unsigned Padding = 0)"
  },
  {
    "label": "EmitSLEB128IntValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSLEB128IntValue(int64_t Value)"
  },
  {
    "label": "EmitSymbolValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSymbolValue(const MCSymbol *Sym, unsigned Size, bool IsSectionRelative = false)"
  },
  {
    "label": "EmitGPRel64Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitGPRel64Value(const MCExpr *Value)"
  },
  {
    "label": "EmitGPRel32Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitGPRel32Value(const MCExpr *Value)"
  },
  {
    "label": "EmitFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitFill(uint64_t NumBytes, uint8_t FillValue)"
  },
  {
    "label": "EmitZeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitZeros(uint64_t NumBytes)"
  },
  {
    "label": "EmitValueToAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueToAlignment(unsigned ByteAlignment, int64_t Value = 0, unsigned ValueSize = 1, unsigned MaxBytesToEmit = 0)"
  },
  {
    "label": "EmitCodeAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCodeAlignment(unsigned ByteAlignment, unsigned MaxBytesToEmit = 0)"
  },
  {
    "label": "EmitValueToOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitValueToOffset(const MCExpr *Offset, unsigned char Value = 0)"
  },
  {
    "label": "EmitFileDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitFileDirective(StringRef Filename)"
  },
  {
    "label": "EmitIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitIdent(StringRef IdentString)"
  },
  {
    "label": "EmitDwarfFileDirective()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "EmitDwarfFileDirective(unsigned FileNo, StringRef Directory, StringRef Filename, unsigned CUID = 0)"
  },
  {
    "label": "EmitDwarfLocDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDwarfLocDirective(unsigned FileNo, unsigned Line, unsigned Column, unsigned Flags, unsigned Isa, unsigned Discriminator, StringRef FileName)"
  },
  {
    "label": "emitAbsoluteSymbolDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAbsoluteSymbolDiff(const MCSymbol *Hi, const MCSymbol *Lo, unsigned Size)"
  },
  {
    "label": "getDwarfLineTableSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getDwarfLineTableSymbol(unsigned CUID)"
  },
  {
    "label": "EmitCFISections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFISections(bool EH, bool Debug)"
  },
  {
    "label": "EmitCFIStartProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIStartProc(bool IsSimple)"
  },
  {
    "label": "EmitCFIEndProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIEndProc()"
  },
  {
    "label": "EmitCFIDefCfa()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIDefCfa(int64_t Register, int64_t Offset)"
  },
  {
    "label": "EmitCFIDefCfaOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIDefCfaOffset(int64_t Offset)"
  },
  {
    "label": "EmitCFIDefCfaRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIDefCfaRegister(int64_t Register)"
  },
  {
    "label": "EmitCFIOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIOffset(int64_t Register, int64_t Offset)"
  },
  {
    "label": "EmitCFIPersonality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIPersonality(const MCSymbol *Sym, unsigned Encoding)"
  },
  {
    "label": "EmitCFILsda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFILsda(const MCSymbol *Sym, unsigned Encoding)"
  },
  {
    "label": "EmitCFIRememberState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIRememberState()"
  },
  {
    "label": "EmitCFIRestoreState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIRestoreState()"
  },
  {
    "label": "EmitCFISameValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFISameValue(int64_t Register)"
  },
  {
    "label": "EmitCFIRestore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIRestore(int64_t Register)"
  },
  {
    "label": "EmitCFIRelOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIRelOffset(int64_t Register, int64_t Offset)"
  },
  {
    "label": "EmitCFIAdjustCfaOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIAdjustCfaOffset(int64_t Adjustment)"
  },
  {
    "label": "EmitCFIEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIEscape(StringRef Values)"
  },
  {
    "label": "EmitCFISignalFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFISignalFrame()"
  },
  {
    "label": "EmitCFIUndefined()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIUndefined(int64_t Register)"
  },
  {
    "label": "EmitCFIRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIRegister(int64_t Register1, int64_t Register2)"
  },
  {
    "label": "EmitCFIWindowSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIWindowSave()"
  },
  {
    "label": "EmitWinCFIStartProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIStartProc(const MCSymbol *Symbol)"
  },
  {
    "label": "EmitWinCFIEndProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIEndProc()"
  },
  {
    "label": "EmitWinCFIStartChained()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIStartChained()"
  },
  {
    "label": "EmitWinCFIEndChained()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIEndChained()"
  },
  {
    "label": "EmitWinCFIPushReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIPushReg(unsigned Register)"
  },
  {
    "label": "EmitWinCFISetFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFISetFrame(unsigned Register, unsigned Offset)"
  },
  {
    "label": "EmitWinCFIAllocStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIAllocStack(unsigned Size)"
  },
  {
    "label": "EmitWinCFISaveReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFISaveReg(unsigned Register, unsigned Offset)"
  },
  {
    "label": "EmitWinCFISaveXMM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFISaveXMM(unsigned Register, unsigned Offset)"
  },
  {
    "label": "EmitWinCFIPushFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIPushFrame(bool Code)"
  },
  {
    "label": "EmitWinCFIEndProlog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinCFIEndProlog()"
  },
  {
    "label": "EmitWinEHHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinEHHandler(const MCSymbol *Sym, bool Unwind, bool Except)"
  },
  {
    "label": "EmitWinEHHandlerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWinEHHandlerData()"
  },
  {
    "label": "EmitInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInstruction(const MCInst &Inst, const MCSubtargetInfo &STI)"
  },
  {
    "label": "EmitBundleAlignMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleAlignMode(unsigned AlignPow2)"
  },
  {
    "label": "EmitBundleLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleLock(bool AlignToEnd)"
  },
  {
    "label": "EmitBundleUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleUnlock()"
  },
  {
    "label": "EmitRawText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRawText(const Twine &String)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "FinishImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishImpl()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish()"
  },
  {
    "label": "mayHaveInstructions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayHaveInstructions(MCSection &Sec)"
  },
  {
    "label": "createAsmStreamer()",
    "kind": "Method",
    "detail": "Function (MCStreamer*)",
    "insertText": "createAsmStreamer(MCContext &Ctx, std::unique_ptr<formatted_raw_ostream> OS, bool isVerboseAsm, bool useDwarfDirectory, MCInstPrinter *InstPrint, MCCodeEmitter *CE, MCAsmBackend *TAB, bool ShowInst)"
  }
]