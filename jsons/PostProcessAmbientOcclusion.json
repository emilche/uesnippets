[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FRDGSystemTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGSystemTextures"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EGTAOPass",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGTAOPass"
  },
  {
    "label": "FGTAOContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGTAOContext"
  },
  {
    "label": "FSSAOHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSSAOHelper"
  },
  {
    "label": "FSSAOCommonParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSSAOCommonParameters"
  },
  {
    "label": "FGTAOCommonParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGTAOCommonParameters"
  },
  {
    "label": "FGTAOHorizonSearchOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGTAOHorizonSearchOutputs"
  },
  {
    "label": "FGTAOTemporalOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGTAOTemporalOutputs"
  },
  {
    "label": "GetScreenSpaceAOTextureDesc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" UniformBuffer . h \" # include \" RendererInterface . h \" class FViewInfo ; struct FRDGSystemTextures ; enum class ESSAOType { EPS,ECS,EAsyncCS,} ; enum class EGTAOType { EOff,EAsyncCombinedSpatial,EAsyncHorizonSearch,ENonAsync,} ; enum EGTAOPass { EGTAOPass_None = 0 x0,EGTAOPass_HorizonSearch = 0 x1,EGTAOPass_HorizonSearchIntegrate = 0 x2,EGTAOPass_Integrate = 0 x4,EGTAOPass_SpatialFilter = 0 x8,EGTAOPass_TemporalFilter = 0 x10,EGTAOPass_Upsample = 0 x20,} ; FRDGTextureDesc)",
    "insertText": "GetScreenSpaceAOTextureDesc(ERHIFeatureLevel::Type FeatureLevel, FIntPoint Extent)"
  },
  {
    "label": "CreateScreenSpaceAOTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "CreateScreenSpaceAOTexture(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, FIntPoint Extent)"
  },
  {
    "label": "GetScreenSpaceAOFallback()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetScreenSpaceAOFallback(const FRDGSystemTextures& SystemTextures)"
  },
  {
    "label": "FGTAOContext()",
    "kind": "Method",
    "detail": "Function (class FGTAOContext { public : EGTAOType GTAOType ; uint32 FinalPass ; uint32 DownsampleFactor ; bool bUseNormals ; bool bHalfRes ; bool bHasSpatialFilter ; bool bHasTemporalFilter ;)",
    "insertText": "FGTAOContext(EGTAOType Type)"
  },
  {
    "label": "FGTAOContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGTAOContext()"
  },
  {
    "label": "IsFinalPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinalPass(EGTAOPass)"
  },
  {
    "label": "GetAmbientOcclusionQualityRT()",
    "kind": "Method",
    "detail": "Function (} ; class FSSAOHelper { public : float)",
    "insertText": "GetAmbientOcclusionQualityRT(const FSceneView& View)"
  },
  {
    "label": "GetAmbientOcclusionShaderLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAmbientOcclusionShaderLevel(const FSceneView& View)"
  },
  {
    "label": "IsAmbientOcclusionCompute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAmbientOcclusionCompute(const ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetNumAmbientOcclusionLevels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAmbientOcclusionLevels()"
  },
  {
    "label": "GetAmbientOcclusionStepMipLevelFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAmbientOcclusionStepMipLevelFactor()"
  },
  {
    "label": "GetAmbientOcclusionAsyncComputeBudget()",
    "kind": "Method",
    "detail": "Function (EAsyncComputeBudget)",
    "insertText": "GetAmbientOcclusionAsyncComputeBudget()"
  },
  {
    "label": "IsBasePassAmbientOcclusionRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBasePassAmbientOcclusionRequired(const FViewInfo& View)"
  },
  {
    "label": "IsAmbientOcclusionAsyncCompute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAmbientOcclusionAsyncCompute(const FViewInfo& View, uint32 AOPassCount)"
  },
  {
    "label": "ComputeAmbientOcclusionPassCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeAmbientOcclusionPassCount(const FViewInfo& View)"
  },
  {
    "label": "GetGTAOPassType()",
    "kind": "Method",
    "detail": "Function (EGTAOType)",
    "insertText": "GetGTAOPassType(const FViewInfo& View, uint32 Levels)"
  },
  {
    "label": "AddAmbientOcclusionSetupPass()",
    "kind": "Method",
    "detail": "Function (} ; struct FSSAOCommonParameters { TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesUniformBuffer = nullptr ; FScreenPassTextureViewport SceneTexturesViewport ; FScreenPassTexture HZBInput ; FScreenPassTexture GBufferA ; FScreenPassTexture SceneDepth ; uint32 Levels = 1 ; int32 ShaderQuality = 4 ; ESSAOType DownscaleType = ESSAOType::EPS ; ESSAOType FullscreenType = ESSAOType::EPS ; bool bNeedSmoothingPass = true ; } ; FScreenPassTexture)",
    "insertText": "AddAmbientOcclusionSetupPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FSSAOCommonParameters& CommonParameters, FScreenPassTexture Input)"
  },
  {
    "label": "AddAmbientOcclusionStepPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddAmbientOcclusionStepPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FSSAOCommonParameters& CommonParameters, const FScreenPassTexture& Input0, const FScreenPassTexture& Input1, const FScreenPassTexture& Input2, const FScreenPassTexture& HZBInput)"
  },
  {
    "label": "AddAmbientOcclusionFinalPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddAmbientOcclusionFinalPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FSSAOCommonParameters& CommonParameters, const FScreenPassTexture& Input0, const FScreenPassTexture& Input1, const FScreenPassTexture& Input2, const FScreenPassTexture& HZBInput, FScreenPassRenderTarget FinalOutput)"
  },
  {
    "label": "AddGTAOHorizonSearchPass()",
    "kind": "Method",
    "detail": "Function (struct FGTAOCommonParameters { TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTexturesUniformBuffer = nullptr ; FScreenPassTextureViewport SceneTexturesViewport ; FScreenPassTexture HZBInput ; FScreenPassTexture SceneDepth ; FScreenPassTexture SceneVelocity ; FIntRect DownsampledViewRect ; int32 ShaderQuality = 4 ; uint32 DownscaleFactor = 1 ; EGTAOType GTAOType = EGTAOType::EOff ; } ; struct FGTAOHorizonSearchOutputs { FScreenPassTexture Color ; } ; FGTAOHorizonSearchOutputs)",
    "insertText": "AddGTAOHorizonSearchPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FGTAOCommonParameters& CommonParameters, FScreenPassTexture SceneDepth, FScreenPassTexture HZBInput, FScreenPassRenderTarget HorizonOutput)"
  },
  {
    "label": "AddGTAOInnerIntegratePass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddGTAOInnerIntegratePass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FGTAOCommonParameters& CommonParameters, FScreenPassTexture SceneDepth, FScreenPassTexture HorizonsTexture)"
  },
  {
    "label": "AddGTAOHorizonSearchIntegratePass()",
    "kind": "Method",
    "detail": "Function (FGTAOHorizonSearchOutputs)",
    "insertText": "AddGTAOHorizonSearchIntegratePass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FGTAOCommonParameters& CommonParameters, FScreenPassTexture SceneDepth, FScreenPassTexture HZBInput)"
  },
  {
    "label": "AddGTAOTemporalPass()",
    "kind": "Method",
    "detail": "Function (struct FGTAOTemporalOutputs { FScreenPassRenderTarget OutputAO ; FIntPoint TargetExtent ; FIntRect ViewportRect ; } ; FGTAOTemporalOutputs)",
    "insertText": "AddGTAOTemporalPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FGTAOCommonParameters& CommonParameters, FScreenPassTexture Input, FScreenPassTexture SceneDepth, FScreenPassTexture SceneVelocity, FScreenPassTexture HistoryColor, FScreenPassTextureViewport HistoryViewport)"
  },
  {
    "label": "AddGTAOSpatialFilter()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddGTAOSpatialFilter(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FGTAOCommonParameters& CommonParameters, FScreenPassTexture Input, FScreenPassTexture InputDepth, FScreenPassRenderTarget SuggestedOutput = FScreenPassRenderTarget())"
  },
  {
    "label": "AddGTAOUpsamplePass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddGTAOUpsamplePass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FGTAOCommonParameters& CommonParameters, FScreenPassTexture Input, FScreenPassTexture SceneDepth, FScreenPassRenderTarget Output)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FHZBParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, HZBTexture) SHADER_PARAMETER_SAMPLER(SamplerState, HZBSampler) SHADER_PARAMETER(FScreenTransform, HZBRemapping) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FTextureBinding, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Texture) SHADER_PARAMETER(FIntPoint, TextureSize) SHADER_PARAMETER(FVector2f, InverseTextureSize) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "GetHZBParameters()",
    "kind": "Method",
    "detail": "Function (enum class EAOTechnique { SSAO,GTAO,} ; FHZBParameters)",
    "insertText": "GetHZBParameters(const FViewInfo& View, FScreenPassTexture HZBInput, FIntPoint InputTextureSize, EAOTechnique AOTechnique)"
  }
]