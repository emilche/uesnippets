[
  {
    "label": "HasKeyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasKeyType"
  },
  {
    "label": "ContainsImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_CONTAINS_H_ # define BASE_CONTAINERS_CONTAINS_H_ # include<type_traits> # include<utility> # include \" base / ranges / algorithm . h \" # include \" base / ranges / ranges . h \" namespace base { namespace internal { template<T,SFINAE = void> struct HasKeyType : std::false_type { } ; template<T> struct HasKeyType<T,std::void_t<T::key_type>> : std::true_type { } ; template<Container,Value> auto)",
    "insertText": "ContainsImpl(const Container& container, const Value& value, priority_tag<2>) -> decltype(container.contains(value))"
  },
  {
    "label": "ContainsImpl()",
    "kind": "Method",
    "detail": "Function (} template<Container,Value> auto)",
    "insertText": "ContainsImpl(const Container& container, const Value& value, priority_tag<1>) -> decltype(container.find(value) != container.end())"
  },
  {
    "label": "ContainsImpl()",
    "kind": "Method",
    "detail": "Function (} template<Container,Value> auto)",
    "insertText": "ContainsImpl(const Container& container, const Value& value, priority_tag<1>) -> decltype(container.find(value) != Container::npos)"
  },
  {
    "label": "ContainsImpl()",
    "kind": "Method",
    "detail": "Function (} template<Container,Value> bool)",
    "insertText": "ContainsImpl(const Container& container, const Value& value, priority_tag<0>)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } template<Container,Value> bool)",
    "insertText": "Contains(const Container& container, const Value& value)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} template<Container,Value,Proj> bool)",
    "insertText": "Contains(const Container& container, const Value& value, Proj proj)"
  }
]