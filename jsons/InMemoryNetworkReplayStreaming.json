[
  {
    "label": "FInMemoryNetworkReplayStreamingFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInMemoryNetworkReplayStreamingFactory"
  },
  {
    "label": "FNetworkReplayVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkReplayVersion"
  },
  {
    "label": "FInMemoryReplay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInMemoryReplay"
  },
  {
    "label": "FCheckpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckpoint"
  },
  {
    "label": "FStreamChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamChunk"
  },
  {
    "label": "FInMemoryReplayStreamArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInMemoryReplayStreamArchive"
  },
  {
    "label": "FInMemoryNetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInMemoryNetworkReplayStreamer"
  },
  {
    "label": "FCheckpoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Containers / UnrealString . h \" # include \" NetworkReplayStreaming . h \" # include \" Stats / Stats . h \" # include \" Modules / ModuleManager . h \" # include \" Serialization / JsonSerializer . h \" # include \" Tickable . h \" class FInMemoryNetworkReplayStreamingFactory ; class FNetworkReplayVersion ; struct FInMemoryReplay { struct FCheckpoint {)",
    "insertText": "FCheckpoint() : TimeInMS(0), StreamByteOffset(0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8> Data ; uint32 TimeInMS ; uint32 StreamByteOffset ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FStreamChunk()",
    "kind": "Method",
    "detail": "Function (TimeInMS = 0 ; StreamByteOffset = 0 ; } } ; struct FStreamChunk {)",
    "insertText": "FStreamChunk() : StartIndex(0), TimeInMS(0)"
  },
  {
    "label": "FInMemoryReplay()",
    "kind": "Method",
    "detail": "Function (} int32 StartIndex ; uint32 TimeInMS ; TArray<uint8> Data ; } ;)",
    "insertText": "FInMemoryReplay() : NetworkVersion(0)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (StreamChunks .)",
    "insertText": "Emplace()"
  },
  {
    "label": "TotalStreamSize()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8> Header ; TArray<FStreamChunk> StreamChunks ; TArray<uint8> Metadata ; TArray<FCheckpoint> Checkpoints ; FNetworkReplayStreamInfo StreamInfo ; uint32 NetworkVersion ; int64)",
    "insertText": "TotalStreamSize()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int64 TotalSize =)",
    "insertText": "sizeof(FInMemoryReplay)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (TotalSize + = Header .)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FInMemoryReplayStreamArchive()",
    "kind": "Method",
    "detail": "Function (} return TotalSize ; } } ; class FInMemoryReplayStreamArchive : public FArchive { public :)",
    "insertText": "FInMemoryReplayStreamArchive(TArray<FInMemoryReplay::FStreamChunk>& InChunks) : Pos(0) , Chunks(InChunks)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AtEnd()"
  },
  {
    "label": "GetCurrentChunk()",
    "kind": "Method",
    "detail": "Function (private : FInMemoryReplay::FStreamChunk*)",
    "insertText": "GetCurrentChunk()"
  },
  {
    "label": "FInMemoryNetworkReplayStreamer()",
    "kind": "Method",
    "detail": "Function (int64 Pos ; TArray<FInMemoryReplay::FStreamChunk>& Chunks ; } ; class FInMemoryNetworkReplayStreamer : public INetworkReplayStreamer,public FTickableGameObject { public :)",
    "insertText": "FInMemoryNetworkReplayStreamer(FInMemoryNetworkReplayStreamingFactory* InFactory) : OwningFactory(InFactory), StreamerState(EReplayStreamerState::Idle), TimeBufferHintSeconds(-1.0f)"
  },
  {
    "label": "StartStreaming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartStreaming(const FStartStreamingParameters& Params, const FStartStreamingCallback& Delegate)"
  },
  {
    "label": "StopStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStreaming()"
  },
  {
    "label": "GetHeaderArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetHeaderArchive()"
  },
  {
    "label": "GetStreamingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetStreamingArchive()"
  },
  {
    "label": "GetCheckpointArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetCheckpointArchive()"
  },
  {
    "label": "FlushCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpoint(const uint32 TimeInMS)"
  },
  {
    "label": "GotoCheckpointIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndex(const int32 CheckpointIndex, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "GotoTimeInMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoTimeInMS(const uint32 TimeInMS, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "UpdateTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTotalDemoTime(uint32 TimeInMS)"
  },
  {
    "label": "UpdatePlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackTime(uint32 TimeInMS)"
  },
  {
    "label": "GetTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTotalDemoTime()"
  },
  {
    "label": "IsDataAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailable()"
  },
  {
    "label": "SetHighPriorityTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPriorityTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsDataAvailableForTimeRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDataAvailableForTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const int32 UserIndex, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "EnumerateStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FString& MetaString, const TArray< FString >& ExtraParms, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "EnumerateRecentStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateRecentStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& Name, const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventId, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "SearchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchEvents(const FString& EventGroup, const FSearchEventsCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const int32 UserIndex, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "GetReplayID()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplayID()"
  },
  {
    "label": "RefreshHeader()",
    "kind": "Method",
    "detail": "Function (TimeBufferHintSeconds = InTimeBufferHintSeconds ; } void)",
    "insertText": "RefreshHeader()"
  },
  {
    "label": "DownloadHeader()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DownloadHeader(const FDownloadHeaderCallback& Delegate)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FDownloadHeaderResult Result ; Result . Result = EStreamingOperationResult::Success ; Delegate .)",
    "insertText": "Execute(Result)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  },
  {
    "label": "IsNamedStreamLive()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IsNamedStreamLive(const FString& StreamName)"
  },
  {
    "label": "GotoCheckpointIndexInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndexInternal(int32 CheckpointIndex, const FGotoCallback& Delegate, int32 TimeInMS)"
  },
  {
    "label": "GetCurrentReplay()",
    "kind": "Method",
    "detail": "Function (FInMemoryReplay*)",
    "insertText": "GetCurrentReplay()"
  },
  {
    "label": "GetCurrentReplayChecked()",
    "kind": "Method",
    "detail": "Function (FInMemoryReplay*)",
    "insertText": "GetCurrentReplayChecked()"
  },
  {
    "label": "CreateReplayStreamer()",
    "kind": "Method",
    "detail": "Function (FInMemoryNetworkReplayStreamingFactory* OwningFactory ; TUniquePtr<FArchive> HeaderAr ; TUniquePtr<FArchive> FileAr ; TUniquePtr<FArchive> CheckpointAr ; FInMemoryReplay::FCheckpoint CheckpointCurrentlyBeingSaved ; EReplayStreamerState StreamerState ; FString CurrentStreamName ; float TimeBufferHintSeconds ; } ; class FInMemoryNetworkReplayStreamingFactory : public INetworkReplayStreamingFactory { public : TSharedPtr<INetworkReplayStreamer>)",
    "insertText": "CreateReplayStreamer()"
  }
]