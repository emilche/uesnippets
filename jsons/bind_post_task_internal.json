[
  {
    "label": "BindPostTaskTrampoline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BindPostTaskTrampoline"
  },
  {
    "label": "BindPostTaskTrampoline()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_BIND_POST_TASK_INTERNAL_H_ # define BASE_TASK_BIND_POST_TASK_INTERNAL_H_ # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / check . h \" # include \" base / location . h \" # include \" base / task / task_runner . h \" namespace base { namespace internal { template<CallbackType> class BindPostTaskTrampoline { public :)",
    "insertText": "BindPostTaskTrampoline(scoped_refptr<TaskRunner> task_runner, const Location& location, CallbackType callback) : task_runner_(std::move(task_runner)), location_(location), callback_(std::move(callback))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(task_runner_)"
  },
  {
    "label": "BindPostTaskTrampoline()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BindPostTaskTrampoline(const BindPostTaskTrampoline& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BindPostTaskTrampoline&)",
    "insertText": "operator(const BindPostTaskTrampoline& other)"
  },
  {
    "label": "BindPostTaskTrampoline()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BindPostTaskTrampoline()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (task_runner_ ->)",
    "insertText": "PostTask(location_, base::BindOnce(&DestroyCallbackOnTaskRunner, std::move(callback_)))"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} } template<. . . Args> void)",
    "insertText": "Run(Args... args)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (task_runner_ ->)",
    "insertText": "PostTask(location_, GetClosure(&callback_, std::forward<Args>(args)...))"
  },
  {
    "label": "GetClosure()",
    "kind": "Method",
    "detail": "Function (} private : OnceClosure)",
    "insertText": "GetClosure(OnceClosure* callback)"
  },
  {
    "label": "GetClosure()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> OnceClosure)",
    "insertText": "GetClosure(OnceCallback<void(Args...)>* callback, Args&&... args)"
  },
  {
    "label": "GetClosure()",
    "kind": "Method",
    "detail": "Function (} OnceClosure)",
    "insertText": "GetClosure(RepeatingClosure* callback)"
  },
  {
    "label": "DestroyCallbackOnTaskRunner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyCallbackOnTaskRunner(CallbackType callback)"
  }
]