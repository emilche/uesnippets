[
  {
    "label": "silk_Get_Encoder_Size()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_API_H # define SILK_API_H # include \" control . h \" # include \" typedef . h \" # include \" errors . h \" # include \" entenc . h \" # include \" entdec . h \" # ifdef __cplusplus \" C \" { # endif # define SILK_MAX_FRAMES_PER_PACKET 3 typedef struct { opus_int VADFlag ; opus_int VADFlags [ SILK_MAX_FRAMES_PER_PACKET ] ; opus_int inbandFECFlag ; } silk_TOC_struct ; opus_int)",
    "insertText": "silk_Get_Encoder_Size(opus_int *encSizeBytes)"
  },
  {
    "label": "silk_InitEncoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_InitEncoder(void *encState, int arch, silk_EncControlStruct *encStatus)"
  },
  {
    "label": "silk_Encode()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_Encode(void *encState, silk_EncControlStruct *encControl, const opus_int16 *samplesIn, opus_int nSamplesIn, ec_enc *psRangeEnc, opus_int32 *nBytesOut, const opus_int prefillFlag, int activity)"
  },
  {
    "label": "silk_Get_Decoder_Size()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_Get_Decoder_Size(opus_int *decSizeBytes)"
  },
  {
    "label": "silk_InitDecoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_InitDecoder(void *decState)"
  },
  {
    "label": "silk_Decode()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_Decode(void* decState, silk_DecControlStruct* decControl, opus_int lostFlag, opus_int newPacketFlag, ec_dec *psRangeDec, opus_int16 *samplesOut, opus_int32 *nSamplesOut, int arch)"
  },
  {
    "label": "silk_get_TOC()",
    "kind": "Method",
    "detail": "Function (# if 0 opus_int)",
    "insertText": "silk_get_TOC(const opus_uint8 *payload, const opus_int nBytesIn, const opus_int nFramesPerPayload, silk_TOC_struct *Silk_TOC)"
  }
]