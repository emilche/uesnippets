[
  {
    "label": "silk_Get_Encoder_Size()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_Get_Encoder_Size(                         /* O    Returns error code                              */\n    opus_int                        *encSizeBytes       /* O    Number of bytes in SILK encoder state           */\n)"
  },
  {
    "label": "silk_InitEncoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_InitEncoder(                              /* O    Returns error code                              */\n    void                            *encState,          /* I/O  State                                           */\n    int                              arch,              /* I    Run-time architecture                           */\n    silk_EncControlStruct           *encStatus          /* O    Encoder Status                                  */\n)"
  },
  {
    "label": "silk_Get_Decoder_Size()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_Get_Decoder_Size(                         /* O    Returns error code                              */\n    opus_int                        *decSizeBytes       /* O    Number of bytes in SILK decoder state           */\n)"
  },
  {
    "label": "silk_InitDecoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_InitDecoder(                              /* O    Returns error code                              */\n    void                            *decState           /* I/O  State                                           */\n)"
  },
  {
    "label": "silk_Decode()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_Decode(                                   /* O    Returns error code                              */\n    void*                           decState,           /* I/O  State                                           */\n    silk_DecControlStruct*          decControl,         /* I/O  Control Structure                               */\n    opus_int                        lostFlag,           /* I    0: no loss, 1 loss, 2 decode fec                */\n    opus_int                        newPacketFlag,      /* I    Indicates first decoder call for this packet    */\n    ec_dec                          *psRangeDec,        /* I/O  Compressor data structure                       */\n    opus_int16                      *samplesOut,        /* O    Decoded output speech vector                    */\n    opus_int32                      *nSamplesOut,       /* O    Number of samples decoded                       */\n    int                             arch                /* I    Run-time architecture                           */\n)"
  },
  {
    "label": "silk_get_TOC()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_get_TOC(\n    const opus_uint8                *payload,           /* I    Payload data                                */\n    const opus_int                  nBytesIn,           /* I    Number of input bytes                       */\n    const opus_int                  nFramesPerPayload,  /* I    Number of SILK frames per payload           */\n    silk_TOC_struct                 *Silk_TOC           /* O    Type of content                             */\n)"
  }
]