[
  {
    "label": "IPDBRawSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPDBRawSymbol"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "PDBSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PDBSymbol"
  },
  {
    "label": "FORWARD_SYMBOL_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_DEBUGINFO_PDB_IPDBSYMBOL_H # define LLVM_DEBUGINFO_PDB_IPDBSYMBOL_H # include \" ConcreteSymbolEnumerator . h \" # include \" IPDBRawSymbol . h \" # include \" PDBExtras . h \" # include \" PDBTypes . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / Casting . h \" # include<unordered_map> # define)",
    "insertText": "FORWARD_SYMBOL_METHOD(MethodName) \\ auto MethodName() const->decltype(RawSymbol->MethodName())"
  },
  {
    "label": "MethodName()",
    "kind": "Method",
    "detail": "Function (\\ return RawSymbol ->)",
    "insertText": "MethodName()"
  },
  {
    "label": "DECLARE_PDB_SYMBOL_CONCRETE_TYPE()",
    "kind": "Method",
    "detail": "Function (\\ } namespace llvm { class IPDBRawSymbol ; class raw_ostream ; # define)",
    "insertText": "DECLARE_PDB_SYMBOL_CONCRETE_TYPE(TagValue)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "classof(const PDBSymbol *S)"
  },
  {
    "label": "PDBSymbol()",
    "kind": "Method",
    "detail": "Function (} class PDBSymbol { protected :)",
    "insertText": "PDBSymbol(const IPDBSession &PDBSession, std::unique_ptr<IPDBRawSymbol> Symbol)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (public : std::unique_ptr<PDBSymbol>)",
    "insertText": "create(const IPDBSession &PDBSession, std::unique_ptr<IPDBRawSymbol> Symbol)"
  },
  {
    "label": "PDBSymbol()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PDBSymbol()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(PDBSymDumper &Dumper)"
  },
  {
    "label": "defaultDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "defaultDump(raw_ostream &OS, int Indent)"
  },
  {
    "label": "getSymTag()",
    "kind": "Method",
    "detail": "Function (PDB_SymType)",
    "insertText": "getSymTag()"
  },
  {
    "label": "findOneChild()",
    "kind": "Method",
    "detail": "Function (template<T> std::unique_ptr<T>)",
    "insertText": "findOneChild()"
  },
  {
    "label": "Enumerator()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "Enumerator(findAllChildren<T>())"
  },
  {
    "label": "findAllChildren()",
    "kind": "Method",
    "detail": "Function (} template<T> std::unique_ptr<ConcreteSymbolEnumerator<T>>)",
    "insertText": "findAllChildren()"
  },
  {
    "label": "findChildren()",
    "kind": "Method",
    "detail": "Function (auto BaseIter = RawSymbol ->)",
    "insertText": "findChildren(T::Tag)"
  },
  {
    "label": "findAllChildren()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<IPDBEnumSymbols>)",
    "insertText": "findAllChildren(PDB_SymType Type)"
  },
  {
    "label": "findChildren()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IPDBEnumSymbols>)",
    "insertText": "findChildren(PDB_SymType Type, StringRef Name, PDB_NameSearchFlags Flags)"
  },
  {
    "label": "findChildrenByRVA()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IPDBEnumSymbols>)",
    "insertText": "findChildrenByRVA(PDB_SymType Type, StringRef Name, PDB_NameSearchFlags Flags, uint32_t RVA)"
  },
  {
    "label": "findInlineFramesByRVA()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IPDBEnumSymbols>)",
    "insertText": "findInlineFramesByRVA(uint32_t RVA)"
  },
  {
    "label": "getRawSymbol()",
    "kind": "Method",
    "detail": "Function (const IPDBRawSymbol&)",
    "insertText": "getRawSymbol()"
  }
]