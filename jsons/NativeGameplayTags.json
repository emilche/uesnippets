[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNativeGameplayTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNativeGameplayTag"
  },
  {
    "label": "UGameplayTagsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsManager"
  },
  {
    "label": "HasFileExtension()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" GameplayTagContainer . h \" # include \" GameplayTagsManager . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" enum class ENativeGameplayTagToken { PRIVATE_USE_MACRO_INSTEAD } ; namespace UE::GameplayTags::Private { bool)",
    "insertText": "HasFileExtension(const char* File)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const char* It = File ;)",
    "insertText": "while(*It)"
  },
  {
    "label": "UE_DEFINE_GAMEPLAY_TAG_COMMENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_DEFINE_GAMEPLAY_TAG_COMMENT(TagName, Tag, Comment) FNativeGameplayTag TagName(UE_PLUGIN_NAME, UE_MODULE_NAME, Tag, TEXT(Comment), ENativeGameplayTagToken::PRIVATE_USE_MACRO_INSTEAD)"
  },
  {
    "label": "UE_DEFINE_GAMEPLAY_TAG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_DEFINE_GAMEPLAY_TAG(TagName, Tag) FNativeGameplayTag TagName(UE_PLUGIN_NAME, UE_MODULE_NAME, Tag, TEXT(\"\"), ENativeGameplayTagToken::PRIVATE_USE_MACRO_INSTEAD)"
  },
  {
    "label": "UE_DEFINE_GAMEPLAY_TAG_STATIC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_DEFINE_GAMEPLAY_TAG_STATIC(TagName, Tag) static FNativeGameplayTag TagName(UE_PLUGIN_NAME, UE_MODULE_NAME, Tag, TEXT(\"\"), ENativeGameplayTagToken::PRIVATE_USE_MACRO_INSTEAD)"
  },
  {
    "label": "FNativeGameplayTag()",
    "kind": "Method",
    "detail": "Function (# ifndef UE_INCLUDE_NATIVE_GAMEPLAYTAG_METADATA # define UE_INCLUDE_NATIVE_GAMEPLAYTAG_METADATA WITH_EDITOR&& ! UE_BUILD_SHIPPING # endif class FNativeGameplayTag : public FNoncopyable { public : FName NAME_NativeGameplayTag ; public :)",
    "insertText": "FNativeGameplayTag(FName PluginName, FName ModuleName, FName TagName, const FString& TagDevComment, ENativeGameplayTagToken)"
  },
  {
    "label": "FNativeGameplayTag()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNativeGameplayTag()"
  },
  {
    "label": "FGameplayTag()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FGameplayTag()"
  },
  {
    "label": "ValidateTagRegistration()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "ValidateTagRegistration()"
  },
  {
    "label": "FGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA return)",
    "insertText": "FGameplayTagTableRow(InternalTag.GetTagName(), DeveloperComment)"
  },
  {
    "label": "FGameplayTagTableRow()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "FGameplayTagTableRow(InternalTag.GetTagName())"
  },
  {
    "label": "GetPlugin()",
    "kind": "Method",
    "detail": "Function (# endif } # if UE_INCLUDE_NATIVE_GAMEPLAYTAG_METADATA FName)",
    "insertText": "GetPlugin()"
  },
  {
    "label": "GetRegisteredNativeTags()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA FString DeveloperComment ; # endif TSet<const class FNativeGameplayTag*>&)",
    "insertText": "GetRegisteredNativeTags()"
  }
]