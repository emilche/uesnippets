[
  {
    "label": "function_input_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_input_queue"
  },
  {
    "label": "function_input_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_input_base"
  },
  {
    "label": "op_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "op_type"
  },
  {
    "label": "apply_body_task_bypass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "apply_body_task_bypass"
  },
  {
    "label": "forward_task_bypass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "forward_task_bypass"
  },
  {
    "label": "operation_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "operation_type"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "function_input",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_input"
  },
  {
    "label": "clear_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "clear_element"
  },
  {
    "label": "extract_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "extract_element"
  },
  {
    "label": "multifunction_input",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "multifunction_input"
  },
  {
    "label": "emit_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "emit_element"
  },
  {
    "label": "continue_input",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "continue_input"
  },
  {
    "label": "function_output",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_output"
  },
  {
    "label": "multifunction_output",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "multifunction_output"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__flow_graph_node_impl_H # define __TBB__flow_graph_node_impl_H # ifndef __TBB_flow_graph_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif # include \" _flow_graph_item_buffer_impl . h \" namespace internal { using tbb::internal::aggregated_operation ; using tbb::internal::aggregating_functor ; using tbb::internal::aggregator ; template<T,A> class function_input_queue : public item_buffer<T,A> { public : bool)",
    "insertText": "empty()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "front()"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "pop(T& t)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pop()"
  },
  {
    "label": "destroy_front()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "destroy_front()"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "push(T& t)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (} } ; template<Input,Policy,A,ImplType> class function_input_base : public receiver<Input>,tbb::internal::no_assign { enum op_type { reg_pred,rem_pred,try_fwd,tryput_bypass,app_body_bypass,occupy_concurrency # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION,add_blt_pred,del_blt_pred,blt_pred_cnt,blt_pred_cpy # endif } ; typedef function_input_base<Input,Policy,A,ImplType> class_type ; public : typedef Input input_type ; typedef receiver<input_type>::predecessor_type predecessor_type ; typedef predecessor_cache<input_type,null_mutex> predecessor_cache_type ; typedef function_input_queue<input_type,A> input_queue_type ; typedef A::template rebind<input_queue_type>::other queue_allocator_type ;)",
    "insertText": "__TBB_STATIC_ASSERT(!((internal::has_policy<queueing, Policy>::value) && (internal::has_policy<rejecting, Policy>::value)), \"queueing and rejecting policies can't be specified simultaneously\")"
  },
  {
    "label": "function_input_base()",
    "kind": "Method",
    "detail": "Function (# if TBB_DEPRECATED_FLOW_NODE_EXTRACTION typedef predecessor_cache_type::built_predecessors_type built_predecessors_type ; typedef receiver<input_type>::predecessor_list_type predecessor_list_type ; # endif)",
    "insertText": "function_input_base(graph &g, __TBB_FLOW_GRAPH_PRIORITY_ARG1(size_t max_concurrency, node_priority_t priority) ) : my_graph_ref(g), my_max_concurrency(max_concurrency) , __TBB_FLOW_GRAPH_PRIORITY_ARG1(my_concurrency(0), my_priority(priority)) , my_queue(!internal::has_policy<rejecting, Policy>::value ? new input_queue_type() : NULL) , forwarder_busy(false)"
  },
  {
    "label": "set_owner()",
    "kind": "Method",
    "detail": "Function (my_predecessors .)",
    "insertText": "set_owner(this)"
  },
  {
    "label": "initialize_handler()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "initialize_handler(handler_type(this))"
  },
  {
    "label": "function_input_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "function_input_base(const function_input_base& src) : receiver<Input>(), tbb::internal::no_assign() , my_graph_ref(src.my_graph_ref), my_max_concurrency(src.my_max_concurrency) , __TBB_FLOW_GRAPH_PRIORITY_ARG1(my_concurrency(0), my_priority(src.my_priority)) , my_queue(src.my_queue ? new input_queue_type() : NULL), forwarder_busy(false)"
  },
  {
    "label": "function_input_base()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "function_input_base()"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "try_put_task(const input_type& t)"
  },
  {
    "label": "register_predecessor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "register_predecessor(predecessor_type &src)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(reg_pred)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (op_data . r =& src ; my_aggregator .)",
    "insertText": "execute(&op_data)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(rem_pred)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(add_blt_pred)"
  },
  {
    "label": "internal_delete_built_predecessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_delete_built_predecessor(predecessor_type &src)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(del_blt_pred)"
  },
  {
    "label": "predecessor_count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "predecessor_count()"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(blt_pred_cnt)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(blt_pred_cpy)"
  },
  {
    "label": "built_predecessors()",
    "kind": "Method",
    "detail": "Function (} built_predecessors_type&)",
    "insertText": "built_predecessors()"
  },
  {
    "label": "reset_function_input_base()",
    "kind": "Method",
    "detail": "Function (} # endif protected : void)",
    "insertText": "reset_function_input_base(reset_flags f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (my_concurrency = 0 ;)",
    "insertText": "if(my_queue)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (my_queue ->)",
    "insertText": "reset()"
  },
  {
    "label": "reset_receiver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "reset_receiver(f)"
  },
  {
    "label": "reset_receiver()",
    "kind": "Method",
    "detail": "Function (predecessor_cache<input_type,null_mutex> my_predecessors ; void)",
    "insertText": "reset_receiver(reset_flags f)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!(f & rf_clear_edges) || my_predecessors.empty(), \"function_input_base reset failed\")"
  },
  {
    "label": "graph_reference()",
    "kind": "Method",
    "detail": "Function (} graph&)",
    "insertText": "graph_reference()"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(i, app_body_bypass)"
  },
  {
    "label": "operation_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "operation_type(op_type t) : type(char(t)), r(NULL)"
  },
  {
    "label": "perform_queued_requests()",
    "kind": "Method",
    "detail": "Function (} } ; bool forwarder_busy ; typedef internal::aggregating_functor<class_type,operation_type> handler_type ; class internal::aggregating_functor<class_type,operation_type> ; aggregator<handler_type,operation_type> my_aggregator ; task*)",
    "insertText": "perform_queued_requests()"
  },
  {
    "label": "create_body_task()",
    "kind": "Method",
    "detail": "Function (+ + my_concurrency ; new_task =)",
    "insertText": "create_body_task(my_queue->front())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { input_type i ;)",
    "insertText": "if(my_predecessors.get_item(i))"
  },
  {
    "label": "create_body_task()",
    "kind": "Method",
    "detail": "Function (+ + my_concurrency ; new_task =)",
    "insertText": "create_body_task(i)"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (} } return new_task ; } void)",
    "insertText": "handle_operations(operation_type *op_list)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (operation_type* tmp ;)",
    "insertText": "while(op_list)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (tmp = op_list ; op_list = op_list -> next ;)",
    "insertText": "switch(tmp->type)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_store_with_release(tmp->status, SUCCEEDED)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} break ; case rem_pred : my_predecessors .)",
    "insertText": "remove(*(tmp->r))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (break ; case app_body_bypass : { tmp -> bypass_t = NULL ;)",
    "insertText": "__TBB_ASSERT(my_max_concurrency != 0, NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - my_concurrency ;)",
    "insertText": "if(my_concurrency<my_max_concurrency) tmp->bypass_t = perform_queued_requests()"
  },
  {
    "label": "internal_try_put_task()",
    "kind": "Method",
    "detail": "Function (} break ; case tryput_bypass :)",
    "insertText": "internal_try_put_task(tmp)"
  },
  {
    "label": "internal_forward()",
    "kind": "Method",
    "detail": "Function (break ; case try_fwd :)",
    "insertText": "internal_forward(tmp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case occupy_concurrency :)",
    "insertText": "if(my_concurrency < my_max_concurrency)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "__TBB_store_with_release(tmp->status, FAILED)"
  },
  {
    "label": "internal_add_built_predecessor()",
    "kind": "Method",
    "detail": "Function (} break ; # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION case add_blt_pred : { my_predecessors .)",
    "insertText": "internal_add_built_predecessor(*(tmp->r))"
  },
  {
    "label": "internal_delete_built_predecessor()",
    "kind": "Method",
    "detail": "Function (} break ; case del_blt_pred : my_predecessors .)",
    "insertText": "internal_delete_built_predecessor(*(tmp->r))"
  },
  {
    "label": "copy_predecessors()",
    "kind": "Method",
    "detail": "Function (break ; case blt_pred_cpy : my_predecessors .)",
    "insertText": "copy_predecessors(*(tmp->predv))"
  },
  {
    "label": "internal_try_put_task()",
    "kind": "Method",
    "detail": "Function (break ; # endif } } } void)",
    "insertText": "internal_try_put_task(operation_type *op)"
  },
  {
    "label": "create_body_task()",
    "kind": "Method",
    "detail": "Function (+ + my_concurrency ; task* new_task =)",
    "insertText": "create_body_task(*(op->elem))"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (op -> bypass_t = new_task ;)",
    "insertText": "__TBB_store_with_release(op->status, SUCCEEDED)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(my_queue && my_queue->push(*(op->elem)))"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (} else { op -> bypass_t = NULL ;)",
    "insertText": "__TBB_store_with_release(op->status, FAILED)"
  },
  {
    "label": "internal_forward()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "internal_forward(operation_type *op)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (op -> bypass_t = NULL ;)",
    "insertText": "if(my_concurrency < my_max_concurrency || !my_max_concurrency) op->bypass_t = perform_queued_requests()"
  },
  {
    "label": "internal_try_put_bypass()",
    "kind": "Method",
    "detail": "Function (} } task*)",
    "insertText": "internal_try_put_bypass(const input_type& t)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(t, tryput_bypass)"
  },
  {
    "label": "check_op()",
    "kind": "Method",
    "detail": "Function (} else { operation_type)",
    "insertText": "check_op(t, occupy_concurrency)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "execute(&check_op)"
  },
  {
    "label": "internal_try_put_bypass()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "internal_try_put_bypass(t)"
  },
  {
    "label": "try_put_task_impl()",
    "kind": "Method",
    "detail": "Function (} } task*)",
    "insertText": "try_put_task_impl(const input_type& t, tbb::internal::false_type)"
  },
  {
    "label": "apply_body_bypass()",
    "kind": "Method",
    "detail": "Function (} } task*)",
    "insertText": "apply_body_bypass(const input_type &i)"
  },
  {
    "label": "create_body_task()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "create_body_task(const input_type &input)"
  },
  {
    "label": "forward_task()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "forward_task()"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (operation_type)",
    "insertText": "op_data(try_fwd)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (task* ttask = op_data . bypass_t ;)",
    "insertText": "__TBB_ASSERT(ttask && ttask != SUCCESSFULLY_ENQUEUED, NULL)"
  },
  {
    "label": "combine_tasks()",
    "kind": "Method",
    "detail": "Function (rval =)",
    "insertText": "combine_tasks(my_graph_ref, rval, ttask)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(op_data.status == SUCCEEDED)"
  },
  {
    "label": "spawn_forward_task()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "spawn_forward_task()"
  },
  {
    "label": "create_forward_task()",
    "kind": "Method",
    "detail": "Function (task* tp =)",
    "insertText": "create_forward_task()"
  },
  {
    "label": "spawn_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_in_graph_arena(graph_reference(), *tp)"
  },
  {
    "label": "function_input()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Input,Output,Policy,A> class function_input : public function_input_base<Input,Policy,A,function_input<Input,Output,Policy,A>> { public : typedef Input input_type ; typedef Output output_type ; typedef function_body<input_type,output_type> function_body_type ; typedef function_input<Input,Output,Policy,A> my_class ; typedef function_input_base<Input,Policy,A,my_class> base_type ; typedef function_input_queue<input_type,A> input_queue_type ; template<Body>)",
    "insertText": "function_input(graph &g, size_t max_concurrency, __TBB_FLOW_GRAPH_PRIORITY_ARG1(Body& body, node_priority_t priority) ) : base_type(g, __TBB_FLOW_GRAPH_PRIORITY_ARG1(max_concurrency, priority)) , my_body( new internal::function_body_leaf< input_type, output_type, Body>(body) ) , my_init_body( new internal::function_body_leaf< input_type, output_type, Body>(body))"
  },
  {
    "label": "function_input()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "function_input(const function_input& src ) : base_type(src), my_body( src.my_init_body->clone() ), my_init_body(src.my_init_body->clone())"
  },
  {
    "label": "function_input()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "function_input()"
  },
  {
    "label": "copy_function_object()",
    "kind": "Method",
    "detail": "Function (delete my_body ; delete my_init_body ; } template<Body> Body)",
    "insertText": "copy_function_object()"
  },
  {
    "label": "Body()",
    "kind": "Method",
    "detail": "Function (function_body_type& body_ref =* this -> my_body ; return dynamic_cast<internal::function_body_leaf<input_type,output_type,)",
    "insertText": "Body(body_ref).get_body()"
  },
  {
    "label": "apply_body_impl()",
    "kind": "Method",
    "detail": "Function (} output_type)",
    "insertText": "apply_body_impl(const input_type& i)"
  },
  {
    "label": "fgt_begin_body()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "fgt_begin_body(my_body)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (output_type)",
    "insertText": "v(*my_body)(i)"
  },
  {
    "label": "fgt_end_body()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "fgt_end_body(my_body)"
  },
  {
    "label": "apply_body_impl()",
    "kind": "Method",
    "detail": "Function (output_type v =)",
    "insertText": "apply_body_impl(i)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (# if TBB_DEPRECATED_MESSAGE_FLOW_ORDER task* successor_task =)",
    "insertText": "successors().try_put_task(v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif task* postponed_task = NULL ;)",
    "insertText": "if(base_type::my_max_concurrency != 0)"
  },
  {
    "label": "try_get_postponed_task()",
    "kind": "Method",
    "detail": "Function (postponed_task =)",
    "insertText": "try_get_postponed_task(i)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!postponed_task || postponed_task != SUCCESSFULLY_ENQUEUED, NULL)"
  },
  {
    "label": "combine_tasks()",
    "kind": "Method",
    "detail": "Function (} # if TBB_DEPRECATED_MESSAGE_FLOW_ORDER graph& g = base_type::my_graph_ref ; return)",
    "insertText": "combine_tasks(g, successor_task, postponed_task)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(postponed_task)"
  },
  {
    "label": "spawn_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_in_graph_arena(base_type::graph_reference(), *postponed_task)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# if _MSC_VER&& ! __INTEL_COMPILER # pragma)",
    "insertText": "warning(push) #pragma warning (disable: 4127) #endif if(internal::has_policy<lightweight, Policy>::value)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# if _MSC_VER&& ! __INTEL_COMPILER # pragma)",
    "insertText": "warning(pop) #endif if(!successor_task)"
  },
  {
    "label": "reset_function_input()",
    "kind": "Method",
    "detail": "Function (successor_task = SUCCESSFULLY_ENQUEUED ; } } return successor_task ; # endif } protected : void)",
    "insertText": "reset_function_input(reset_flags f)"
  },
  {
    "label": "reset_function_input_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset_function_input_base(f)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (function_body_type* tmp = my_init_body ->)",
    "insertText": "clone()"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (delete my_body ; my_body = tmp ; } } function_body_type* my_body ; function_body_type* my_init_body ; broadcast_cache<output_type>&)",
    "insertText": "successors()"
  },
  {
    "label": "clear_this()",
    "kind": "Method",
    "detail": "Function (} ; template<int N> struct clear_element { template<P> void)",
    "insertText": "clear_this(P &p)"
  },
  {
    "label": "clear_this()",
    "kind": "Method",
    "detail": "Function (clear_element<N - 1)",
    "insertText": "clear_this(p)"
  },
  {
    "label": "this_empty()",
    "kind": "Method",
    "detail": "Function (} template<P> bool)",
    "insertText": "this_empty(P &p)"
  },
  {
    "label": "extract_this()",
    "kind": "Method",
    "detail": "Function (} } ; # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION template<int N> struct extract_element { template<P> void)",
    "insertText": "extract_this(P &p)"
  },
  {
    "label": "extract_this()",
    "kind": "Method",
    "detail": "Function (extract_element<N - 1)",
    "insertText": "extract_this(p)"
  },
  {
    "label": "multifunction_input()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<Input,OutputPortSet,Policy,A> class multifunction_input : public function_input_base<Input,Policy,A,multifunction_input<Input,OutputPortSet,Policy,A>> { public : const int N = tbb::flow::tuple_size<OutputPortSet>::value ; typedef Input input_type ; typedef OutputPortSet output_ports_type ; typedef multifunction_body<input_type,output_ports_type> multifunction_body_type ; typedef multifunction_input<Input,OutputPortSet,Policy,A> my_class ; typedef function_input_base<Input,Policy,A,my_class> base_type ; typedef function_input_queue<input_type,A> input_queue_type ; template<Body>)",
    "insertText": "multifunction_input(graph &g, size_t max_concurrency, __TBB_FLOW_GRAPH_PRIORITY_ARG1(Body& body, node_priority_t priority) ) : base_type(g, __TBB_FLOW_GRAPH_PRIORITY_ARG1(max_concurrency, priority)) , my_body( new internal::multifunction_body_leaf<input_type, output_ports_type, Body>(body) ) , my_init_body( new internal::multifunction_body_leaf<input_type, output_ports_type, Body>(body))"
  },
  {
    "label": "multifunction_input()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "multifunction_input(const multifunction_input& src ) : base_type(src), my_body( src.my_init_body->clone() ), my_init_body(src.my_init_body->clone())"
  },
  {
    "label": "multifunction_input()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "multifunction_input()"
  },
  {
    "label": "Body()",
    "kind": "Method",
    "detail": "Function (multifunction_body_type& body_ref =* this -> my_body ; return* static_cast<)",
    "insertText": "Body(dynamic_cast< internal::multifunction_body_leaf<input_type, output_ports_type, Body> & >(body_ref).get_body_ptr())"
  },
  {
    "label": "apply_body_impl_bypass()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "apply_body_impl_bypass(const input_type &i)"
  },
  {
    "label": "output_ports()",
    "kind": "Method",
    "detail": "Function (} return ttask ? ttask : SUCCESSFULLY_ENQUEUED ; } output_ports_type&)",
    "insertText": "output_ports()"
  },
  {
    "label": "extract_this()",
    "kind": "Method",
    "detail": "Function (extract_element<N)",
    "insertText": "extract_this(my_output_ports)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "reset(reset_flags f)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (delete my_body ; my_body = tmp ; })",
    "insertText": "__TBB_ASSERT(!(f & rf_clear_edges) || clear_element<N>::this_empty(my_output_ports), \"multifunction_node reset failed\")"
  },
  {
    "label": "output_port()",
    "kind": "Method",
    "detail": "Function (} multifunction_body_type* my_body ; multifunction_body_type* my_init_body ; output_ports_type my_output_ports ; } ; template<size_t N,MOP> tbb::flow::tuple_element<N,MOP::output_ports_type>::type&)",
    "insertText": "output_port(MOP &op)"
  },
  {
    "label": "check_task_and_spawn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "check_task_and_spawn(graph& g, task* t)"
  },
  {
    "label": "spawn_in_graph_arena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_in_graph_arena(g, *t)"
  },
  {
    "label": "emit_this()",
    "kind": "Method",
    "detail": "Function (} } template<int N> struct emit_element { template<T,P> task*)",
    "insertText": "emit_this(graph& g, const T &t, P &p)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (task* last_task = tbb::flow::get<)",
    "insertText": "N(p).try_put_task(tbb::flow::get<N-1>(t))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (task* last_task = tbb::)",
    "insertText": "get(p).try_put_task(tbb::flow::get<0>(t))"
  },
  {
    "label": "continue_input()",
    "kind": "Method",
    "detail": "Function (} template<Body>)",
    "insertText": "continue_input(graph &g, int number_of_predecessors, __TBB_FLOW_GRAPH_PRIORITY_ARG1(Body& body, node_priority_t priority) ) : continue_receiver( __TBB_FLOW_GRAPH_PRIORITY_ARG1(number_of_predecessors, priority) ) , my_graph_ref(g) , my_body( new internal::function_body_leaf< input_type, output_type, Body>(body) ) , my_init_body( new internal::function_body_leaf< input_type, output_type, Body>(body))"
  },
  {
    "label": "continue_input()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "continue_input(const continue_input& src ) : continue_receiver(src), my_graph_ref(src.my_graph_ref), my_body( src.my_init_body->clone() ), my_init_body( src.my_init_body->clone())"
  },
  {
    "label": "continue_input()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "continue_input()"
  },
  {
    "label": "apply_body_bypass()",
    "kind": "Method",
    "detail": "Function (class apply_body_task_bypass<class_type,continue_msg> ; task*)",
    "insertText": "apply_body_bypass(input_type)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (output_type)",
    "insertText": "v(*my_body)( continue_msg())"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "execute()"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# if _MSC_VER&& ! __INTEL_COMPILER # pragma)",
    "insertText": "warning(pop) #endif return apply_body_bypass( continue_msg())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "new(task::allocate_additional_child_of( *(my_graph_ref.root_task()) ) ) apply_body_task_bypass< class_type, continue_msg >( *this, __TBB_FLOW_GRAPH_PRIORITY_ARG1(continue_msg(), my_priority))"
  },
  {
    "label": "function_output()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "function_output(const function_output & ) : sender<output_type>()"
  },
  {
    "label": "register_successor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "register_successor(successor_type &r)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "successors().register_successor( r)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "successors().remove_successor( r)"
  },
  {
    "label": "internal_add_built_successor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_add_built_successor(successor_type &r)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "successors().internal_add_built_successor( r)"
  },
  {
    "label": "internal_delete_built_successor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_delete_built_successor(successor_type &r)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "successors().internal_delete_built_successor( r)"
  },
  {
    "label": "successor_count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "successor_count()"
  },
  {
    "label": "copy_successors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copy_successors(successor_list_type &v)"
  },
  {
    "label": "successors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "successors().copy_successors(v)"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (} # endif task*)",
    "insertText": "try_put_task(const output_type &i)"
  },
  {
    "label": "multifunction_output()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "multifunction_output(const multifunction_output & ) : base_type()"
  },
  {
    "label": "try_put()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_put(const output_type &i)"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (task* res =)",
    "insertText": "try_put_task(i)"
  },
  {
    "label": "FLOW_SPAWN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLOW_SPAWN(*res)"
  },
  {
    "label": "add_nodes_impl()",
    "kind": "Method",
    "detail": "Function (} template<int N> struct emit_element ; } ; # if __TBB_FLOW_GRAPH_CPP11_FEATURES template<CompositeType> void)",
    "insertText": "add_nodes_impl(CompositeType*, bool)"
  },
  {
    "label": "add_nodes_impl()",
    "kind": "Method",
    "detail": "Function (} template<CompositeType,NodeType1,. . . NodeTypes> void)",
    "insertText": "add_nodes_impl(CompositeType *c_node, bool visible, const NodeType1& n1, const NodeTypes&... n)"
  },
  {
    "label": "NodeType1()",
    "kind": "Method",
    "detail": "Function (void* addr = const_cast<)",
    "insertText": "NodeType1(&n1)"
  },
  {
    "label": "fgt_alias_port()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fgt_alias_port(c_node, addr, visible)"
  },
  {
    "label": "add_nodes_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_nodes_impl(c_node, visible, n...)"
  }
]