[
  {
    "label": "RtpPacketizerVp8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizerVp8"
  },
  {
    "label": "RtpPacketizerVp8()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP8_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP8_H_ # include<stddef . h> # include<cstdint> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / rtp_format . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / video_coding / codecs / vp8 / include / vp8_globals . h \" namespace webrtc { class RtpPacketizerVp8 : public RtpPacketizer { public :)",
    "insertText": "RtpPacketizerVp8(rtc::ArrayView<const uint8_t> payload, PayloadSizeLimits limits, const RTPVideoHeaderVP8& hdr_info)"
  },
  {
    "label": "RtpPacketizerVp8()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPacketizerVp8()"
  },
  {
    "label": "RtpPacketizerVp8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketizerVp8(const RtpPacketizerVp8&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketizerVp8&)",
    "insertText": "operator(const RtpPacketizerVp8&)"
  },
  {
    "label": "NumPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumPackets()"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextPacket(RtpPacketToSend* packet)"
  },
  {
    "label": "BuildHeader()",
    "kind": "Method",
    "detail": "Function (private : using RawHeader = absl::InlinedVector<uint8_t,6> ; RawHeader)",
    "insertText": "BuildHeader(const RTPVideoHeaderVP8& header)"
  }
]