[
  {
    "label": "NetworkTesterPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkTesterPacket"
  },
  {
    "label": "TestController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestController"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_NETWORK_TESTER_TEST_CONTROLLER_H_ # define RTC_TOOLS_NETWORK_TESTER_TEST_CONTROLLER_H_ # include<stddef . h> # include<stdint . h> # include<array> # include<memory> # include<string> # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" p2p / base / basic_packet_socket_factory . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / ignore_wundef . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_tools / network_tester / packet_logger . h \" # include \" rtc_tools / network_tester / packet_sender . h \" # ifdef WEBRTC_NETWORK_TESTER_PROTO)",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #include \"rtc_tools/network_tester/network_tester_packet.pb.h\" RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "TestController()",
    "kind": "Method",
    "detail": "Function (# else class NetworkTesterPacket ; # endif namespace webrtc { size_t kEthernetMtu = 1 5 0 0 ; class TestController : public sigslot::has_slots<> { public :)",
    "insertText": "TestController(int min_port, int max_port, const std::string& config_file_path, const std::string& log_file_path)"
  },
  {
    "label": "TestController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestController()"
  },
  {
    "label": "TestController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestController(const TestController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestController&)",
    "insertText": "operator(const TestController&)"
  },
  {
    "label": "SendConnectTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendConnectTo(const std::string& hostname, int port)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendData(const NetworkTesterPacket& packet, absl::optional<size_t> data_size)"
  },
  {
    "label": "OnTestDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestDone()"
  },
  {
    "label": "IsTestDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTestDone()"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t len, const rtc::SocketAddress& remote_addr, const int64_t& packet_time_us)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker test_controller_thread_checker_ ; std::unique_ptr<rtc::SocketServer> socket_server_ ; std::unique_ptr<rtc::Thread> packet_sender_thread_ ; rtc::BasicPacketSocketFactory socket_factory_)",
    "insertText": "RTC_GUARDED_BY(packet_sender_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex test_done_lock_)",
    "insertText": "RTC_GUARDED_BY(test_controller_thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool local_test_done_)",
    "insertText": "RTC_GUARDED_BY(test_done_lock_)"
  }
]