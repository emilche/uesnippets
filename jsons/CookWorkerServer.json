[
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "FLogTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogTemplate"
  },
  {
    "label": "FMarshalledMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarshalledMessage"
  },
  {
    "label": "FCookDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDirector"
  },
  {
    "label": "FDiscoveredPackageReplication",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPackageReplication"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeneratorEventMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratorEventMessage"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FPackageResultsMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageResultsMessage"
  },
  {
    "label": "FWorkerConnectMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorkerConnectMessage"
  },
  {
    "label": "FAssignPackageExtraData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignPackageExtraData"
  },
  {
    "label": "FCookWorkerServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerServer"
  },
  {
    "label": "FTickState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickState"
  },
  {
    "label": "FCommunicationScopeLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommunicationScopeLock"
  },
  {
    "label": "FAssignPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignPackageData"
  },
  {
    "label": "FPackageDataExistenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDataExistenceInfo"
  },
  {
    "label": "FAssignPackagesMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssignPackagesMessage"
  },
  {
    "label": "FAbortPackagesMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbortPackagesMessage"
  },
  {
    "label": "FAbortWorkerMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbortWorkerMessage"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FInitialConfigMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialConfigMessage"
  },
  {
    "label": "FDiscoveredPackagesMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiscoveredPackagesMessage"
  },
  {
    "label": "FReplicatedLogData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicatedLogData"
  },
  {
    "label": "FUnstructuredLogData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnstructuredLogData"
  },
  {
    "label": "FLogMessagesMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogMessagesMessageHandler"
  },
  {
    "label": "FLogRecordSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogRecordSerializationContext"
  },
  {
    "label": "FHeartbeatMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeartbeatMessage"
  },
  {
    "label": "FPackageWriterMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageWriterMPCollector"
  },
  {
    "label": "FCookWorkerServer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" CompactBinaryTCP . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / RingBuffer . h \" # include \" Containers / Set . h \" # include \" Cooker / CookPackageData . h \" # include \" Cooker / CookSockets . h \" # include \" Cooker / CookTypes . h \" # include \" Cooker / MPCollector . h \" # include \" CookOnTheSide / CookOnTheFlyServer . h \" # include \" CookPackageSplitter . h \" # include \" HAL / CriticalSection . h \" # include \" IO / IoHash . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / Guid . h \" # include \" Misc / OutputDevice . h \" # include \" Templates / RefCounting . h \" class FSocket ; class ITargetPlatform ; struct FProcHandle ; namespace UE { class FLogTemplate ; } namespace UE::CompactBinaryTCP { struct FMarshalledMessage ; } namespace UE::Cook { class FCookDirector ; } namespace UE::Cook { struct FDiscoveredPackageReplication ; } namespace UE::Cook { enum class ECookDirectorThread : uint8 ; } ; namespace UE::Cook { struct FGeneratorEventMessage ; } namespace UE::Cook { struct FPackageData ; } namespace UE::Cook { struct FPackageResultsMessage ; } namespace UE::Cook { struct FWorkerConnectMessage ; } namespace UE::Cook { enum class ENotifyRemote { NotifyRemote,LocalOnly,} ; struct FAssignPackageExtraData { TMap<FName,FAssetPackageData> GeneratorPreviousGeneratedPackages ; TArray<UE::CompactBinaryTCP::FMarshalledMessage> PerPackageCollectorMessages ; } ; class FCookWorkerServer : public FThreadSafeRefCountedObject { public :)",
    "insertText": "FCookWorkerServer(FCookDirector& InDirector, int32 InProfileId, FWorkerId InWorkerId)"
  },
  {
    "label": "FCookWorkerServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCookWorkerServer()"
  },
  {
    "label": "GetProfileId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProfileId()"
  },
  {
    "label": "AbortAssignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortAssignment(FPackageData& PackageData, ECookDirectorThread TickThread, ENotifyRemote NotifyRemote = ENotifyRemote::NotifyRemote)"
  },
  {
    "label": "AbortAssignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortAssignments(TConstArrayView<FPackageData*> PackageData, ECookDirectorThread TickThread, ENotifyRemote = ENotifyRemote::NotifyRemote)"
  },
  {
    "label": "AbortAllAssignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortAllAssignments(TSet<FPackageData*>& OutPendingPackages, ECookDirectorThread TickThread)"
  },
  {
    "label": "AbortWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortWorker(TSet<FPackageData*>& OutPendingPackages, ECookDirectorThread TickThread)"
  },
  {
    "label": "TryHandleConnectMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryHandleConnectMessage(FWorkerConnectMessage& Message, FSocket* InSocket, TArray<UE::CompactBinaryTCP::FMarshalledMessage>&& OtherPacketMessages, ECookDirectorThread TickThread)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage(const IMPCollectorMessage& Message, ECookDirectorThread TickThread)"
  },
  {
    "label": "AppendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMessage(const IMPCollectorMessage& Message, ECookDirectorThread TickThread)"
  },
  {
    "label": "TickCommunication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCommunication(ECookDirectorThread TickThread)"
  },
  {
    "label": "SignalHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalHeartbeat(ECookDirectorThread TickThread, int32 HeartbeatNumber)"
  },
  {
    "label": "SignalCookComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalCookComplete(ECookDirectorThread TickThread)"
  },
  {
    "label": "HandleReceiveMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiveMessages(ECookDirectorThread TickThread)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsShuttingDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShuttingDown()"
  },
  {
    "label": "IsFlushingBeforeShutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlushingBeforeShutdown()"
  },
  {
    "label": "IsShutdownComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShutdownComplete()"
  },
  {
    "label": "NumAssignments()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumAssignments()"
  },
  {
    "label": "HasMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMessages()"
  },
  {
    "label": "GetLastReceivedHeartbeatNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLastReceivedHeartbeatNumber()"
  },
  {
    "label": "SetLastReceivedHeartbeatNumberInLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastReceivedHeartbeatNumberInLock(int32 InHeartbeatNumber)"
  },
  {
    "label": "GetPackagesAssignedFenceMarker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPackagesAssignedFenceMarker()"
  },
  {
    "label": "GetPackagesRetiredFenceMarker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPackagesRetiredFenceMarker()"
  },
  {
    "label": "FTickState()",
    "kind": "Method",
    "detail": "Function (private : enum class EConnectStatus { Uninitialized,WaitForConnect,Connected,PumpingCookComplete,WaitForDisconnect,LostConnection,} ; enum class EWorkerDetachType { Dismissed,StillRunning,ForceTerminated,Crashed,} ; enum class ETickAction { Tick,Queue,Invalid,} ; struct FTickState {)",
    "insertText": "FTickState()"
  },
  {
    "label": "FCommunicationScopeLock()",
    "kind": "Method",
    "detail": "Function (ECookDirectorThread TickThread ; ETickAction TickAction ; } ; struct FCommunicationScopeLock { FScopeLock ScopeLock ; FCookWorkerServer& Server ;)",
    "insertText": "FCommunicationScopeLock(FCookWorkerServer* InServer, ECookDirectorThread TickThread, ETickAction TickAction)"
  },
  {
    "label": "FCommunicationScopeLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCommunicationScopeLock()"
  },
  {
    "label": "LaunchProcess()",
    "kind": "Method",
    "detail": "Function (} ; private : void)",
    "insertText": "LaunchProcess()"
  },
  {
    "label": "TickWaitForConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickWaitForConnect()"
  },
  {
    "label": "TickWaitForDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickWaitForDisconnect()"
  },
  {
    "label": "PumpSendMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpSendMessages()"
  },
  {
    "label": "SendPendingMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPendingMessages()"
  },
  {
    "label": "SendPendingPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPendingPackages()"
  },
  {
    "label": "PumpReceiveMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpReceiveMessages()"
  },
  {
    "label": "AbortAllAssignmentsInLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortAllAssignmentsInLock(TSet<FPackageData*>& OutPendingPackages)"
  },
  {
    "label": "SendMessageInLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessageInLock(const IMPCollectorMessage& Message)"
  },
  {
    "label": "SendToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToState(EConnectStatus TargetStatus)"
  },
  {
    "label": "DetachFromRemoteProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromRemoteProcess(EWorkerDetachType DetachType)"
  },
  {
    "label": "SendCrashDiagnostics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCrashDiagnostics()"
  },
  {
    "label": "ShutdownRemoteProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownRemoteProcess()"
  },
  {
    "label": "HandleReceiveMessagesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiveMessagesInternal()"
  },
  {
    "label": "HandleReceivedPackagePlatformMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceivedPackagePlatformMessages(FPackageData& PackageData, const ITargetPlatform* TargetPlatform, TArray<UE::CompactBinaryTCP::FMarshalledMessage>&& Messages)"
  },
  {
    "label": "RecordResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordResults(FPackageResultsMessage& Message)"
  },
  {
    "label": "LogInvalidMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogInvalidMessage(const TCHAR* MessageTypeName)"
  },
  {
    "label": "QueueDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackage(FDiscoveredPackageReplication&& DiscoveredPackage)"
  },
  {
    "label": "HandleGeneratorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGeneratorMessage(FGeneratorEventMessage& GeneratorMessage)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (FCriticalSection CommunicationLock ; TArray<FPackageData*> PackagesToAssign ; TSet<FPackageData*> PackagesToAssignInfoPackages ; TMap<FPackageData*,FAssignPackageExtraData> PackagesToAssignExtraDatas ; TSet<FPackageData*> PendingPackages ; TArray<ITargetPlatform*> OrderedSessionPlatforms ; TArray<ITargetPlatform*> OrderedSessionAndSpecialPlatforms ; UE::CompactBinaryTCP::FSendBuffer SendBuffer ; UE::CompactBinaryTCP::FReceiveBuffer ReceiveBuffer ; TRingBuffer<UE::CompactBinaryTCP::FMarshalledMessage> ReceiveMessages ; TRingBuffer<UE::CompactBinaryTCP::FMarshalledMessage> QueuedMessagesToSendAfterPackagesToAssign ; FString CrashDiagnosticsError ; FCookDirector& Director ; UCookOnTheFlyServer& COTFS ; FSocket* Socket = nullptr ; FProcHandle CookWorkerHandle ; FTickState TickState ; uint32 CookWorkerProcessId = 0 ; int32 ProfileId = 0 ; int32 LastReceivedHeartbeatNumber = 0 ; int32 PackagesAssignedFenceMarker = 0 ; int32 PackagesRetiredFenceMarker = 0 ; double ConnectStartTimeSeconds = 0 . ; double ConnectTestStartTimeSeconds = 0 . ; FWorkerId WorkerId =)",
    "insertText": "Invalid()"
  },
  {
    "label": "MarshalToCompactBinaryTCP()",
    "kind": "Method",
    "detail": "Function (EConnectStatus ConnectStatus = EConnectStatus::Uninitialized ; bool bTerminateImmediately = false ; bool bNeedCrashDiagnostics = false ; } ; UE::CompactBinaryTCP::FMarshalledMessage)",
    "insertText": "MarshalToCompactBinaryTCP(const IMPCollectorMessage& Message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FInstigator& Instigator)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FInstigator& Instigator)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (struct FAssignPackageData { FConstructPackageData ConstructData ; FName ParentGenerator ; FInstigator Instigator ; EUrgency Urgency ; FDiscoveredPlatformSet NeedCookPlatforms ; TMap<FName,FAssetPackageData> GeneratorPreviousGeneratedPackages ; TArray<UE::CompactBinaryTCP::FMarshalledMessage> PerPackageCollectorMessages ; ICookPackageSplitter::EGeneratedRequiresGenerator DoesGeneratedRequireGenerator = ICookPackageSplitter::EGeneratedRequiresGenerator::None ; private : void)",
    "insertText": "Write(FCbWriter& Writer, TConstArrayView<const ITargetPlatform*> OrderedSessionPlatforms)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbFieldView Field, TConstArrayView<const ITargetPlatform*> OrderedSessionPlatforms)"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer, const FAssignPackageData& AssignData, TConstArrayView<const ITargetPlatform*> OrderedSessionPlatforms)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (AssignData .)",
    "insertText": "Write(Writer, OrderedSessionPlatforms)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPackageDataExistenceInfo { FConstructPackageData ConstructData ; FName ParentGenerator ; private : void)",
    "insertText": "Write(FCbWriter& Writer)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbFieldView Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FPackageDataExistenceInfo& ExistenceInfo)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (ExistenceInfo .)",
    "insertText": "Write(Writer)"
  },
  {
    "label": "FAssignPackagesMessage()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAssignPackagesMessage : public IMPCollectorMessage { public :)",
    "insertText": "FAssignPackagesMessage()"
  },
  {
    "label": "FAssignPackagesMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssignPackagesMessage(TArray<FAssignPackageData>&& InPackageDatas, TArray<FPackageDataExistenceInfo>&& InExistenceInfos)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbObjectView Object)"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetMessageType()"
  },
  {
    "label": "FAbortPackagesMessage()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FAssignPackageData> PackageDatas ; TArray<FPackageDataExistenceInfo> ExistenceInfos ; TConstArrayView<const ITargetPlatform*> OrderedSessionPlatforms ; FGuid MessageType ; } ; struct FAbortPackagesMessage : public IMPCollectorMessage { public :)",
    "insertText": "FAbortPackagesMessage()"
  },
  {
    "label": "FAbortPackagesMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAbortPackagesMessage(TArray<FName>&& InPackageNames)"
  },
  {
    "label": "FAbortWorkerMessage()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FName> PackageNames ; FGuid MessageType ; } ; struct FAbortWorkerMessage : public IMPCollectorMessage { public : enum EType { CookComplete,Abort,AbortAcknowledge,} ;)",
    "insertText": "FAbortWorkerMessage(EType InType = EType::Abort)"
  },
  {
    "label": "ReadFromLocal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadFromLocal(const UCookOnTheFlyServer& COTFS, const TConstArrayView<const ITargetPlatform*>& InOrderedSessionPlatforms, const FCookByTheBookOptions& InCookByTheBookOptions, const FCookOnTheFlyOptions& InCookOnTheFlyOptions, const FBeginCookContextForWorker& InBeginContext)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessage(UE::CompactBinaryTCP::FMarshalledMessage&& InMarshalledMessage)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MPCollectorMessages .)",
    "insertText": "Add(MoveTemp(InMarshalledMessage))"
  },
  {
    "label": "GetDirectorCookMode()",
    "kind": "Method",
    "detail": "Function (} ECookMode::Type)",
    "insertText": "GetDirectorCookMode()"
  },
  {
    "label": "ConsumeBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (} FBeginCookConfigSettings&&)",
    "insertText": "ConsumeBeginCookConfigSettings()"
  },
  {
    "label": "ConsumeCookByTheBookOptions()",
    "kind": "Method",
    "detail": "Function (} FCookByTheBookOptions&&)",
    "insertText": "ConsumeCookByTheBookOptions()"
  },
  {
    "label": "ConsumeCookOnTheFlyOptions()",
    "kind": "Method",
    "detail": "Function (} FCookOnTheFlyOptions&&)",
    "insertText": "ConsumeCookOnTheFlyOptions()"
  },
  {
    "label": "ConsumeCollectorMessages()",
    "kind": "Method",
    "detail": "Function (} TArray<UE::CompactBinaryTCP::FMarshalledMessage>&&)",
    "insertText": "ConsumeCollectorMessages()"
  },
  {
    "label": "GetBeginCookContext()",
    "kind": "Method",
    "detail": "Function (} const FBeginCookContextForWorker&)",
    "insertText": "GetBeginCookContext()"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbFieldView Field, TConstArrayView<const ITargetPlatform*> OrderedSessionAndSpecialPlatforms)"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer, const FDiscoveredPackageReplication& Package, TConstArrayView<const ITargetPlatform*> OrderedSessionAndSpecialPlatforms)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (Package .)",
    "insertText": "Write(Writer, OrderedSessionAndSpecialPlatforms)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FDiscoveredPackageReplication& OutPackage, TConstArrayView<const ITargetPlatform*> OrderedSessionAndSpecialPlatforms)"
  },
  {
    "label": "FGeneratorEventMessage()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FDiscoveredPackageReplication> Packages ; TConstArrayView<const ITargetPlatform*> OrderedSessionAndSpecialPlatforms ; FGuid MessageType ; } ; enum class EGeneratorEvent { Invalid,QueuedGeneratedPackages,QueuedGeneratedPackagesFencePassed,AllSavesCompleted,Num,} ; struct FGeneratorEventMessage : public IMPCollectorMessage {)",
    "insertText": "FGeneratorEventMessage()"
  },
  {
    "label": "FGeneratorEventMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeneratorEventMessage(EGeneratorEvent InEvent, FName InPackageName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : FName PackageName ; EGeneratorEvent Event = EGeneratorEvent::Invalid ; FGuid MessageType ; } ; struct FReplicatedLogData { struct FUnstructuredLogData { FString Message ; FName Category ; ELogVerbosity::Type Verbosity ; } ; TVariant<FUnstructuredLogData,FCbObject> LogDataVariant ; } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FReplicatedLogData& LogData)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FReplicatedLogData& OutLogData)"
  },
  {
    "label": "FLogMessagesMessageHandler()",
    "kind": "Method",
    "detail": "Function (class FLogMessagesMessageHandler : public IMPCollector,public FOutputDevice { public : ~)",
    "insertText": "FLogMessagesMessageHandler()"
  },
  {
    "label": "InitializeClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeClient()"
  },
  {
    "label": "ClientTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientTick(FMPCollectorClientTickContext& Context)"
  },
  {
    "label": "ServerReceiveMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerReceiveMessage(FMPCollectorServerMessageContext& Context, FCbObjectView Message)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, const double Time)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRecord(const FLogRecord& Record)"
  },
  {
    "label": "CanBeUsedOnAnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedOnAnyThread()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} FCbWriter&)",
    "insertText": "Serialize(FCbWriter& Writer, const FLogRecord& LogRecord)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Deserialize(FCbFieldView Field, FLogRecord& OutLogRecord, int32 ProfileId)"
  },
  {
    "label": "ConditionalFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalFlush(int32 TableSize)"
  },
  {
    "label": "FHeartbeatMessage()",
    "kind": "Method",
    "detail": "Function (private : TArray<FString> StringTable ; TArray<FAnsiString> AnsiStringTable ; TArray<FLogTemplate*> TemplateTable ; } ; FLogRecordSerializationContext LogRecordSerializationContext ; FCriticalSection QueueLock ; TArray<FReplicatedLogData> QueuedLogs ; TArray<FReplicatedLogData> QueuedLogsBackBuffer ; bool bRegistered = false ; FGuid MessageType ; } ; struct FHeartbeatMessage : public IMPCollectorMessage { public :)",
    "insertText": "FHeartbeatMessage(int32 InHeartbeatNumber=-1)"
  },
  {
    "label": "HeartbeatCategoryText()",
    "kind": "Method",
    "detail": "Function (} public : int32 HeartbeatNumber ; FGuid MessageType ; } ; FStringView)",
    "insertText": "HeartbeatCategoryText(TEXTVIEW(\"CookWorkerHeartbeat:\"))"
  },
  {
    "label": "FPackageWriterMPCollector()",
    "kind": "Method",
    "detail": "Function (class FPackageWriterMPCollector : public UE::Cook::IMPCollector { public :)",
    "insertText": "FPackageWriterMPCollector(UCookOnTheFlyServer& InCOTFS)"
  },
  {
    "label": "ClientTickPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientTickPackage(FMPCollectorClientTickPackageContext& Context)"
  }
]