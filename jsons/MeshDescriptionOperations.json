[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FOverlappingCorners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingCorners"
  },
  {
    "label": "FRawMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMesh"
  },
  {
    "label": "FUVMapParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUVMapParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPolygonGroupID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolygonGroupID"
  },
  {
    "label": "FVertexID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexID"
  },
  {
    "label": "FVertexInstanceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexInstanceID"
  },
  {
    "label": "MESHDESCRIPTIONOPERATIONS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESHDESCRIPTIONOPERATIONS_API"
  },
  {
    "label": "ETangentOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETangentOptions"
  },
  {
    "label": "ConvertToRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToRawMesh(const FMeshDescription& SourceMeshDescription, FRawMesh& DestinationRawMesh, const TMap<FName, int32>& MaterialMap)"
  },
  {
    "label": "ConvertFromRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertFromRawMesh(const FRawMesh& SourceRawMesh, FMeshDescription& DestinationMeshDescription, const TMap<int32, FName>& MaterialMap)"
  },
  {
    "label": "AppendMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMeshDescription(const FMeshDescription& SourceMesh, FMeshDescription& TargetMesh, FAppendSettings& AppendSettings)"
  },
  {
    "label": "RecomputeNormalsAndTangentsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeNormalsAndTangentsIfNeeded(FMeshDescription& MeshDescription, ETangentOptions TangentOptions, bool bForceRecomputeNormals = false, bool bForceRecomputeTangents = false)"
  },
  {
    "label": "CreatePolygonNTB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePolygonNTB(FMeshDescription& MeshDescription, float ComparisonThreshold)"
  },
  {
    "label": "CreateNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNormals(FMeshDescription& MeshDescription, ETangentOptions TangentOptions, bool bComputeTangent)"
  },
  {
    "label": "CreateMikktTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMikktTangents(FMeshDescription& MeshDescription, ETangentOptions TangentOptions)"
  },
  {
    "label": "FindOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOverlappingCorners(FOverlappingCorners& OverlappingCorners, const FMeshDescription& MeshDescription, float ComparisonThreshold)"
  },
  {
    "label": "GetUVChartCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUVChartCount(FMeshDescription& MeshDescription, int32 SrcLightmapIndex, ELightmapUVVersion LightmapUVVersion, const FOverlappingCorners& OverlappingCorners)"
  },
  {
    "label": "CreateLightMapUVLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLightMapUVLayout(FMeshDescription& MeshDescription,\n\t\tint32 SrcLightmapIndex,\n\t\tint32 DstLightmapIndex,\n\t\tint32 MinLightmapResolution,\n\t\tELightmapUVVersion LightmapUVVersion,\n\t\tconst FOverlappingCorners& OverlappingCorners)"
  },
  {
    "label": "GenerateUniqueUVsForStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateUniqueUVsForStaticMesh(const FMeshDescription& MeshDescription, int32 TextureResolution, bool bMergeIdenticalMaterials, TArray<FVector2D>& OutTexCoords)"
  },
  {
    "label": "AddUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUVChannel(FMeshDescription& MeshDescription)"
  },
  {
    "label": "InsertUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertUVChannel(FMeshDescription& MeshDescription, int32 UVChannelIndex)"
  },
  {
    "label": "RemoveUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveUVChannel(FMeshDescription& MeshDescription, int32 UVChannelIndex)"
  },
  {
    "label": "GeneratePlanarUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePlanarUV(const FMeshDescription& MeshDescription, const FUVMapParameters& Params, TMap<FVertexInstanceID, FVector2D>& OutTexCoords)"
  },
  {
    "label": "GenerateCylindricalUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCylindricalUV(FMeshDescription& MeshDescription, const FUVMapParameters& Params, TMap<FVertexInstanceID, FVector2D>& OutTexCoords)"
  },
  {
    "label": "GenerateBoxUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBoxUV(const FMeshDescription& MeshDescription, const FUVMapParameters& Params, TMap<FVertexInstanceID, FVector2D>& OutTexCoords)"
  },
  {
    "label": "RemapPolygonGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapPolygonGroups(FMeshDescription& MeshDescription, TMap<FPolygonGroupID, FPolygonGroupID>& Remap)"
  },
  {
    "label": "SwapPolygonPolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapPolygonPolygonGroup(FMeshDescription& MeshDescription, int32 SectionIndex, int32 TriangleIndexStart, int32 TriangleIndexEnd, bool bRemoveEmptyPolygonGroup)"
  },
  {
    "label": "ConvertHardEdgesToSmoothGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertHardEdgesToSmoothGroup(const FMeshDescription& SourceMeshDescription, TArray<uint32>& FaceSmoothingMasks)"
  },
  {
    "label": "ConvertSmoothGroupToHardEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSmoothGroupToHardEdges(const TArray<uint32>& FaceSmoothingMasks, FMeshDescription& DestinationMeshDescription)"
  },
  {
    "label": "HasVertexColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexColor(const FMeshDescription& MeshDescription)"
  },
  {
    "label": "BuildWeldedVertexIDRemap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWeldedVertexIDRemap(const FMeshDescription& MeshDescription, const float WeldingThreshold, TMap<FVertexID, FVertexID>& OutVertexIDRemap)"
  },
  {
    "label": "ComputeSHAHash()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "ComputeSHAHash(const FMeshDescription& MeshDescription)"
  }
]