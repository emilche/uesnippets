[
  {
    "label": "eob_adjust()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_COMMON_INVTRANS_H_ # define VPX_VP8_COMMON_INVTRANS_H_ # include \" . / vpx_config . h \" # include \" vp8_rtcd . h \" # include \" blockd . h \" # include \" onyxc_int . h \" # if CONFIG_MULTITHREAD # include \" vpx_mem / vpx_mem . h \" # endif # ifdef __cplusplus \" C \" { # endif void)",
    "insertText": "eob_adjust(char *eobs, short *diff)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int js ;)",
    "insertText": "for(js = 0; js < 16; ++js)"
  },
  {
    "label": "vp8_inverse_transform_mby()",
    "kind": "Method",
    "detail": "Function (diff + = 1 6 ; } } void)",
    "insertText": "vp8_inverse_transform_mby(MACROBLOCKD *xd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (short* DQC = xd -> dequant_y1 ;)",
    "insertText": "if(xd->mode_info_context->mbmi.mode != SPLITMV)"
  },
  {
    "label": "vp8_short_inv_walsh4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_short_inv_walsh4x4(&xd->block[24].dqcoeff[0], xd->qcoeff)"
  },
  {
    "label": "vp8_short_inv_walsh4x4_1()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "vp8_short_inv_walsh4x4_1(&xd->block[24].dqcoeff[0], xd->qcoeff)"
  },
  {
    "label": "eob_adjust()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "eob_adjust(xd->eobs, xd->qcoeff)"
  },
  {
    "label": "vp8_dequant_idct_add_y_block()",
    "kind": "Method",
    "detail": "Function (DQC = xd -> dequant_y1_dc ; })",
    "insertText": "vp8_dequant_idct_add_y_block(xd->qcoeff, DQC, xd->dst.y_buffer, xd->dst.y_stride, xd->eobs)"
  }
]