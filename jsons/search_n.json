[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_SizeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_SizeT"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_DiffT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_DiffT"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Size",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Size"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SEARCH_N_H # define _LIBCPP___ALGORITHM_SEARCH_N_H # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__functional / identity . h> # include<__iterator / advance . h> # include<__iterator / concepts . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<__ranges / concepts . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Pred, class _Iter, class _Sent, class _SizeT, class _Type, class _Proj> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter, _Iter> __search_n_forward_impl(_Iter __first, _Sent __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj)"
  },
  {
    "label": "__advance_to()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "__advance_to(__first, __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(std::__invoke(__pred, std::__invoke(__proj, *__first), __value))"
  },
  {
    "label": "__c()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } _Iter __m = __first ; _SizeT)",
    "insertText": "__c(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!std::__invoke(__pred, std::__invoke(__proj, *__m), __value))"
  },
  {
    "label": "__search_n_random_access_impl()",
    "kind": "Method",
    "detail": "Function (__first = __m ; + + __first ; break ; } } } } template<class _AlgPolicy,class _Pred,class _Iter,class _Sent,class _SizeT,class _Type,class _Proj,class _DiffT> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 std::pair<_Iter,_Iter>)",
    "insertText": "__search_n_random_access_impl(_Iter __first, _Sent __last, _SizeT __count, const _Type& __value, _Pred& __pred, _Proj& __proj, _DiffT __size1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using difference_type = iterator_traits<_Iter>::difference_type ;)",
    "insertText": "if(__count == 0) return std::make_pair(__first, __first)"
  },
  {
    "label": "difference_type()",
    "kind": "Method",
    "detail": "Function (} const auto __s = __first + __size1 -)",
    "insertText": "difference_type(__count - 1)"
  },
  {
    "label": "__search_n_impl()",
    "kind": "Method",
    "detail": "Function (__first = __m ; + + __first ; break ; } } } } template<class _Iter,class _Sent,class _DiffT,class _Type,class _Pred,class _Proj> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter,_Iter>)",
    "insertText": "__search_n_impl(_Iter __first, _Sent __last, _DiffT __count, const _Type& __value, _Pred& __pred, _Proj& __proj, __enable_if_t<__is_cpp17_random_access_iterator<_Iter>::value>* = nullptr)"
  },
  {
    "label": "__search_n_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter1,class _Sent1,class _DiffT,class _Type,class _Pred,class _Proj> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter1,_Iter1>)",
    "insertText": "__search_n_impl(_Iter1 __first, _Sent1 __last, _DiffT __count, const _Type& __value, _Pred& __pred, _Proj& __proj, __enable_if_t<__is_cpp17_forward_iterator<_Iter1>::value && !__is_cpp17_random_access_iterator<_Iter1>::value>* = nullptr)"
  },
  {
    "label": "search_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Size,class _Tp,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "search_n(_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value, _BinaryPredicate __pred)"
  },
  {
    "label": "__identity()",
    "kind": "Method",
    "detail": "Function (auto __proj =)",
    "insertText": "__identity()"
  },
  {
    "label": "search_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Size,class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "search_n(_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp& __value)"
  },
  {
    "label": "search_n()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type __v ; return)",
    "insertText": "search_n(__first, __last, std::__convert_to_integral(__count), __value, __equal_to<__v, _Tp>())"
  }
]