[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FEditorDomainSaveClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainSaveClient"
  },
  {
    "label": "FObjectPostSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPostSaveContext"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeLock"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FEndLoadPackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndLoadPackageContext"
  },
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackageDigest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDigest"
  },
  {
    "label": "IPackageDigestCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageDigestCache"
  },
  {
    "label": "FEditorDomain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomain"
  },
  {
    "label": "FLocks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocks"
  },
  {
    "label": "FPackageSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageSource"
  },
  {
    "label": "FEditorDomainConstructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainConstructor"
  },
  {
    "label": "FEditorDomainPackageSegments",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainPackageSegments"
  },
  {
    "label": "FEditorDomainReadArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainReadArchive"
  },
  {
    "label": "FEditorDomainAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainAsyncReadFileHandle"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" IO / IoHash . h \" # include \" Logging / LogMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / PackageSegment . h \" # include \" Stats / Stats2 . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" Tickable . h \" # include \" TickableEditorObject . h \" # include \" UObject / NameTypes . h \" # include \" UObject / PackageResourceManager . h \" # include \" UObject / UnrealNames . h \" class FArchive ; class FEditorDomainSaveClient ; class FObjectPostSaveContext ; class FPackagePath ; class FScopeLock ; class IAssetRegistry ; class IMappedFileHandle ; class UPackage ; struct FEndLoadPackageContext ; namespace UE::DerivedData { class FRequestOwner ; } namespace UE::EditorDomain { enum class EDomainUse : uint8 { None = 0 x0,LoadEnabled = 0 x1,SaveEnabled = 0 x2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDomainUse)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Writer, UE::EditorDomain::EDomainUse DomainUse)"
  },
  {
    "label": "FPackageDigest()",
    "kind": "Method",
    "detail": "Function (struct FPackageDigest { enum class EStatus : uint8 { NotYetRequested,Successful,InvalidPackageName,DoesNotExistInAssetRegistry,MissingClass,MissingCustomVersion,} ;)",
    "insertText": "FPackageDigest()"
  },
  {
    "label": "FPackageDigest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageDigest(EStatus InStatus, FName InStatusArg = NAME_None)"
  },
  {
    "label": "IsSuccessful()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSuccessful()"
  },
  {
    "label": "GetStatusString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStatusString()"
  },
  {
    "label": "IPackageDigestCache()",
    "kind": "Method",
    "detail": "Function (FIoHash Hash ; UE::AssetRegistry::FPackageCustomVersionsHandle CustomVersions ; EDomainUse DomainUse = EDomainUse::None ; EStatus Status = EStatus::NotYetRequested ; FName StatusArg ; } ; class IPackageDigestCache { public : ~)",
    "insertText": "IPackageDigestCache()"
  },
  {
    "label": "GetPackageDigest()",
    "kind": "Method",
    "detail": "Function (} FPackageDigest)",
    "insertText": "GetPackageDigest(FName PackageName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IPackageDigestCache*)",
    "insertText": "Get()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(IPackageDigestCache* Cache)"
  },
  {
    "label": "SetDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefault()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; } FString)",
    "insertText": "LexToString(UE::EditorDomain::FPackageDigest::EStatus Status, FName StatusArg)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEditorDomain, Log, All)"
  },
  {
    "label": "FEditorDomain()",
    "kind": "Method",
    "detail": "Function (class FEditorDomain : public IPackageResourceManager,public FTickableEditorObject,public UE::EditorDomain::IPackageDigestCache { public : enum class EPackageSource { Undecided,Workspace,Editor } ;)",
    "insertText": "FEditorDomain(EEditorDomainEnabled EnableLevel)"
  },
  {
    "label": "FEditorDomain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEditorDomain()"
  },
  {
    "label": "SupportsLocalOnlyPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsLocalOnlyPaths()"
  },
  {
    "label": "SupportsPackageOnlyPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPackageOnlyPaths()"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenReadPackage()",
    "kind": "Method",
    "detail": "Function (FOpenPackageResult)",
    "insertText": "OpenReadPackage(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenAsyncReadPackage()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult)",
    "insertText": "OpenAsyncReadPackage(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment)"
  },
  {
    "label": "OpenMappedHandleToPackage()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "OpenMappedHandleToPackage(const FPackagePath& PackagePath, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "TryMatchCaseOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMatchCaseOnDisk(const FPackagePath& PackagePath, FPackagePath* OutNormalizedPath = nullptr)"
  },
  {
    "label": "OpenReadExternalResource()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive>)",
    "insertText": "OpenReadExternalResource(EPackageExternalResource ResourceType, FStringView Identifier)"
  },
  {
    "label": "DoesExternalResourceExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesExternalResourceExist(EPackageExternalResource ResourceType, FStringView Identifier)"
  },
  {
    "label": "OpenAsyncReadExternalResource()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult)",
    "insertText": "OpenAsyncReadExternalResource(EPackageExternalResource ResourceType, FStringView Identifier)"
  },
  {
    "label": "FindPackagesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPackagesRecursive(TArray<TPair<FPackagePath, EPackageSegment>>& OutPackages, FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FStringView BasenameWildcard)"
  },
  {
    "label": "IteratePackagesInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FPackageSegmentVisitor Callback)"
  },
  {
    "label": "IteratePackagesInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInLocalOnlyDirectory(FStringView RootDir, FPackageSegmentVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FPackageSegmentStatVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInLocalOnlyDirectory(FStringView RootDir, FPackageSegmentStatVisitor Callback)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "GetPackageDigest()",
    "kind": "Method",
    "detail": "Function (} UE::EditorDomain::FPackageDigest)",
    "insertText": "GetPackageDigest(FName PackageDigest)"
  },
  {
    "label": "PrecachePackageDigest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecachePackageDigest(FName PackageName)"
  },
  {
    "label": "IsReadingPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadingPackages()"
  },
  {
    "label": "IsWritingPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWritingPackages()"
  },
  {
    "label": "BatchDownload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchDownload(TArrayView<FName> PackageNames)"
  },
  {
    "label": "FLocks()",
    "kind": "Method",
    "detail": "Function (private : class FLocks : public FThreadSafeRefCountedObject { public :)",
    "insertText": "FLocks(FEditorDomain& InOwner)"
  },
  {
    "label": "FPackageSource()",
    "kind": "Method",
    "detail": "Function (FEditorDomain* Owner ; FCriticalSection Lock ; } ; struct FPackageSource : public FThreadSafeRefCountedObject {)",
    "insertText": "FPackageSource() : bHasSaved(false), bHasLoaded(false), bHasQueriedCatalog(false), bLoadedAfterCatalogLoaded(false) , bHasRecordInEditorDomain(false)"
  },
  {
    "label": "NeedsEditorDomainSave()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsEditorDomainSave(FEditorDomain& EditorDomain)"
  },
  {
    "label": "SetHasLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasLoaded()"
  },
  {
    "label": "FEditorDomain()",
    "kind": "Method",
    "detail": "Function (UE::EditorDomain::FPackageDigest Digest ; EPackageSource Source = EPackageSource::Undecided ; bool bHasSaved : 1 ; bool bHasLoaded : 1 ; bool bHasQueriedCatalog : 1 ; bool bLoadedAfterCatalogLoaded : 1 ; bool bHasRecordInEditorDomain : 1 ; } ;)",
    "insertText": "FEditorDomain(const FEditorDomain& Other)"
  },
  {
    "label": "FEditorDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorDomain(FEditorDomain&& Other)"
  },
  {
    "label": "TryFindOrAddPackageSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryFindOrAddPackageSource(FScopeLock& ScopeLock, bool& bOutReenteredLock, FName PackageName, TRefCountPtr<FPackageSource>& OutSource, UE::EditorDomain::FPackageDigest* OutErrorDigest=nullptr)"
  },
  {
    "label": "FindPackageSource()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FPackageSource>)",
    "insertText": "FindPackageSource(const FPackagePath& PackagePath)"
  },
  {
    "label": "MarkLoadedFromWorkspaceDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkLoadedFromWorkspaceDomain(const FPackagePath& PackagePath, TRefCountPtr<FPackageSource>& PackageSource, bool bHasRecordInEditorDomain)"
  },
  {
    "label": "MarkLoadedFromEditorDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkLoadedFromEditorDomain(const FPackagePath& PackagePath, TRefCountPtr<FPackageSource>& PackageSource)"
  },
  {
    "label": "OnPostEngineInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostEngineInit()"
  },
  {
    "label": "OnEndLoadPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndLoadPackage(const FEndLoadPackageContext& Context)"
  },
  {
    "label": "FilterKeepPackagesToSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterKeepPackagesToSave(TArray<UPackage*>& InOutLoadedPackages)"
  },
  {
    "label": "OnPackageSavedWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageSavedWithContext(const FString& PackageFileName, UPackage* Package, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnAssetUpdatedOnDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetUpdatedOnDisk(const FAssetData& AssetData)"
  },
  {
    "label": "GetPackageDigest_WithinLock()",
    "kind": "Method",
    "detail": "Function (UE::EditorDomain::FPackageDigest)",
    "insertText": "GetPackageDigest_WithinLock(FScopeLock& ScopeLock, bool& bOutReenteredLock, FName PackageDigest)"
  }
]