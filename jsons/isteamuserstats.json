[
  {
    "label": "ELeaderboardDataRequest",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELeaderboardDataRequest"
  },
  {
    "label": "ELeaderboardSortMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELeaderboardSortMethod"
  },
  {
    "label": "ELeaderboardDisplayType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELeaderboardDisplayType"
  },
  {
    "label": "ELeaderboardUploadScoreMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELeaderboardUploadScoreMethod"
  },
  {
    "label": "LeaderboardEntry_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeaderboardEntry_t"
  },
  {
    "label": "ISteamUserStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamUserStats"
  },
  {
    "label": "UserStatsReceived_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserStatsReceived_t"
  },
  {
    "label": "UserStatsStored_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserStatsStored_t"
  },
  {
    "label": "UserAchievementStored_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserAchievementStored_t"
  },
  {
    "label": "LeaderboardFindResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeaderboardFindResult_t"
  },
  {
    "label": "LeaderboardScoresDownloaded_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeaderboardScoresDownloaded_t"
  },
  {
    "label": "LeaderboardScoreUploaded_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeaderboardScoreUploaded_t"
  },
  {
    "label": "NumberOfCurrentPlayers_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NumberOfCurrentPlayers_t"
  },
  {
    "label": "UserStatsUnloaded_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserStatsUnloaded_t"
  },
  {
    "label": "UserAchievementIconFetched_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserAchievementIconFetched_t"
  },
  {
    "label": "GlobalAchievementPercentagesReady_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GlobalAchievementPercentagesReady_t"
  },
  {
    "label": "LeaderboardUGCSet_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeaderboardUGCSet_t"
  },
  {
    "label": "PS3TrophiesInstalled_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PS3TrophiesInstalled_t"
  },
  {
    "label": "GlobalStatsReceived_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GlobalStatsReceived_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMUSERSTATS_H # define ISTEAMUSERSTATS_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" # include \" isteamremotestorage . h \" enum { k_cchStatNameMax = 1 2 8 } ; enum { k_cchLeaderboardNameMax = 1 2 8 } ; enum { k_cLeaderboardDetailsMax = 6 4 } ; typedef uint64 SteamLeaderboard_t ; typedef uint64 SteamLeaderboardEntries_t ; enum ELeaderboardDataRequest { k_ELeaderboardDataRequestGlobal = 0,k_ELeaderboardDataRequestGlobalAroundUser = 1,k_ELeaderboardDataRequestFriends = 2,k_ELeaderboardDataRequestUsers = 3 } ; enum ELeaderboardSortMethod { k_ELeaderboardSortMethodNone = 0,k_ELeaderboardSortMethodAscending = 1,k_ELeaderboardSortMethodDescending = 2,} ; enum ELeaderboardDisplayType { k_ELeaderboardDisplayTypeNone = 0,k_ELeaderboardDisplayTypeNumeric = 1,k_ELeaderboardDisplayTypeTimeSeconds = 2,k_ELeaderboardDisplayTypeTimeMilliSeconds = 3,} ; enum ELeaderboardUploadScoreMethod { k_ELeaderboardUploadScoreMethodNone = 0,k_ELeaderboardUploadScoreMethodKeepBest = 1,k_ELeaderboardUploadScoreMethodForceUpdate = 2,} ; # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (CSteamID m_steamIDUser ; int32 m_nGlobalRank ; int32 m_nScore ; int32 m_cDetails ; UGCHandle_t m_hUGC ; } ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "STEAM_CALL_BACK()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "STEAM_CALL_BACK(UserStatsReceived_t ) virtual bool RequestCurrentStats()"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetStatInt32 ) virtual bool GetStat( const char *pchName, int32 *pData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetStatFloat ) virtual bool GetStat( const char *pchName, float *pData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetStatInt32 ) virtual bool SetStat( const char *pchName, int32 nData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetStatFloat ) virtual bool SetStat( const char *pchName, float fData)"
  },
  {
    "label": "UpdateAvgRateStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength)"
  },
  {
    "label": "GetAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAchievement(const char *pchName, bool *pbAchieved)"
  },
  {
    "label": "SetAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAchievement(const char *pchName)"
  },
  {
    "label": "ClearAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearAchievement(const char *pchName)"
  },
  {
    "label": "GetAchievementAndUnlockTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)"
  },
  {
    "label": "StoreStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreStats()"
  },
  {
    "label": "GetAchievementIcon()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetAchievementIcon(const char *pchName)"
  },
  {
    "label": "GetAchievementDisplayAttribute()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetAchievementDisplayAttribute(const char *pchName, const char *pchKey)"
  },
  {
    "label": "IndicateAchievementProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)"
  },
  {
    "label": "GetNumAchievements()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumAchievements()"
  },
  {
    "label": "GetAchievementName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetAchievementName(uint32 iAchievement)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(UserStatsReceived_t ) virtual SteamAPICall_t RequestUserStats( CSteamID steamIDUser)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetUserStatInt32 ) virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, int32 *pData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetUserStatFloat ) virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, float *pData)"
  },
  {
    "label": "GetUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved)"
  },
  {
    "label": "GetUserAchievementAndUnlockTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserAchievementAndUnlockTime(CSteamID steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)"
  },
  {
    "label": "ResetAllStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetAllStats(bool bAchievementsToo)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LeaderboardFindResult_t) virtual SteamAPICall_t FindOrCreateLeaderboard( const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LeaderboardFindResult_t ) virtual SteamAPICall_t FindLeaderboard( const char *pchLeaderboardName)"
  },
  {
    "label": "GetLeaderboardName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)"
  },
  {
    "label": "GetLeaderboardEntryCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)"
  },
  {
    "label": "GetLeaderboardSortMethod()",
    "kind": "Method",
    "detail": "Function (ELeaderboardSortMethod)",
    "insertText": "GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)"
  },
  {
    "label": "GetLeaderboardDisplayType()",
    "kind": "Method",
    "detail": "Function (ELeaderboardDisplayType)",
    "insertText": "GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LeaderboardScoresDownloaded_t ) virtual SteamAPICall_t DownloadLeaderboardEntries( SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LeaderboardScoresDownloaded_t ) virtual SteamAPICall_t DownloadLeaderboardEntriesForUsers( SteamLeaderboard_t hSteamLeaderboard, STEAM_ARRAY_COUNT_D(cUsers, Array of users to retrieve) CSteamID *prgUsers, int cUsers)"
  },
  {
    "label": "GetDownloadedLeaderboardEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LeaderboardScoreUploaded_t ) virtual SteamAPICall_t UploadLeaderboardScore( SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(LeaderboardUGCSet_t ) virtual SteamAPICall_t AttachLeaderboardUGC( SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(NumberOfCurrentPlayers_t ) virtual SteamAPICall_t GetNumberOfCurrentPlayers()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(GlobalAchievementPercentagesReady_t ) virtual SteamAPICall_t RequestGlobalAchievementPercentages()"
  },
  {
    "label": "GetMostAchievedAchievementInfo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)"
  },
  {
    "label": "GetNextMostAchievedAchievementInfo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)"
  },
  {
    "label": "GetAchievementAchievedPercent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAchievementAchievedPercent(const char *pchName, float *pflPercent)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(GlobalStatsReceived_t ) virtual SteamAPICall_t RequestGlobalStats( int nHistoryDays)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetGlobalStatInt64 ) virtual bool GetGlobalStat( const char *pchStatName, int64 *pData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetGlobalStatDouble ) virtual bool GetGlobalStat( const char *pchStatName, double *pData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetGlobalStatHistoryInt64 ) virtual int32 GetGlobalStatHistory( const char *pchStatName, STEAM_ARRAY_COUNT(cubData) int64 *pData, uint32 cubData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetGlobalStatHistoryDouble ) virtual int32 GetGlobalStatHistory( const char *pchStatName, STEAM_ARRAY_COUNT(cubData) double *pData, uint32 cubData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetAchievementProgressLimitsInt32 ) virtual bool GetAchievementProgressLimits( const char *pchName, int32 *pnMinProgress, int32 *pnMaxProgress)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetAchievementProgressLimitsFloat ) virtual bool GetAchievementProgressLimits( const char *pchName, float *pfMinProgress, float *pfMaxProgress)"
  },
  {
    "label": "SteamUserStats()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMUSERSTATS_INTERFACE_VERSION \" STEAMUSERSTATS_INTERFACE_VERSION012 \" ISteamUserStats*)",
    "insertText": "SteamUserStats()"
  },
  {
    "label": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_USER_INTERFACE_ACCESSOR(ISteamUserStats *, SteamUserStats, STEAMUSERSTATS_INTERFACE_VERSION)"
  }
]