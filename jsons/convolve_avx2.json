[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_CONVOLVE_AVX2_H_ # define VPX_VPX_DSP_X86_CONVOLVE_AVX2_H_ # include<immintrin . h> # include \" . / vpx_config . h \" # if)",
    "insertText": "defined(__clang__) #if (__clang_major__ > 0 && __clang_major__ < 3) || \\ (__clang_major__ == 3 && __clang_minor__ <= 3) || \\ (defined(__APPLE__) && defined(__apple_build_version__) && \\ ((__clang_major__ == 4 && __clang_minor__ <= 2) || \\ (__clang_major__ == 5 && __clang_minor__ == 0))) #define MM256_BROADCASTSI128_SI256(x) \\ _mm_broadcastsi128_si256((__m128i const *)&(x)) #else #define MM256_BROADCASTSI128_SI256(x) _mm256_broadcastsi128_si256(x) #endif #elif defined(__GNUC__) #if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ <= 6) #define MM256_BROADCASTSI128_SI256(x) \\ _mm_broadcastsi128_si256((__m128i const *)&(x)) #elif __GNUC__ == 4 && __GNUC_MINOR__ == 7 #define MM256_BROADCASTSI128_SI256(x) _mm_broadcastsi128_si256(x) #else #define MM256_BROADCASTSI128_SI256(x) _mm256_broadcastsi128_si256(x) #endif #else #define MM256_BROADCASTSI128_SI256(x) _mm256_broadcastsi128_si256(x) #endif static INLINE void shuffle_filter_avx2(const int16_t *const filter, __m256i *const f)"
  },
  {
    "label": "MM256_BROADCASTSI128_SI256()",
    "kind": "Method",
    "detail": "Function (const __m256i f_values =)",
    "insertText": "MM256_BROADCASTSI128_SI256(_mm_load_si128((const __m128i *)filter))"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (f [ 0 ] =)",
    "insertText": "_mm256_shuffle_epi8(f_values, _mm256_set1_epi16(0x0200u))"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (f [ 1 ] =)",
    "insertText": "_mm256_shuffle_epi8(f_values, _mm256_set1_epi16(0x0604u))"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (f [ 2 ] =)",
    "insertText": "_mm256_shuffle_epi8(f_values, _mm256_set1_epi16(0x0a08u))"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (f [ 3 ] =)",
    "insertText": "_mm256_shuffle_epi8(f_values, _mm256_set1_epi16(0x0e0cu))"
  },
  {
    "label": "convolve8_16_avx2()",
    "kind": "Method",
    "detail": "Function (} __m256i)",
    "insertText": "convolve8_16_avx2(const __m256i *const s, const __m256i *const f)"
  },
  {
    "label": "_mm256_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i k_64 =)",
    "insertText": "_mm256_set1_epi16(1 << 6)"
  },
  {
    "label": "_mm256_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i x0 =)",
    "insertText": "_mm256_maddubs_epi16(s[0], f[0])"
  },
  {
    "label": "_mm256_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i x1 =)",
    "insertText": "_mm256_maddubs_epi16(s[1], f[1])"
  },
  {
    "label": "_mm256_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i x2 =)",
    "insertText": "_mm256_maddubs_epi16(s[2], f[2])"
  },
  {
    "label": "_mm256_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i x3 =)",
    "insertText": "_mm256_maddubs_epi16(s[3], f[3])"
  },
  {
    "label": "_mm256_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m256i sum1,sum2 ; sum1 =)",
    "insertText": "_mm256_add_epi16(x0, x2)"
  },
  {
    "label": "_mm256_add_epi16()",
    "kind": "Method",
    "detail": "Function (sum2 =)",
    "insertText": "_mm256_add_epi16(x1, x3)"
  },
  {
    "label": "_mm256_add_epi16()",
    "kind": "Method",
    "detail": "Function (sum1 =)",
    "insertText": "_mm256_add_epi16(sum1, k_64)"
  },
  {
    "label": "_mm256_adds_epi16()",
    "kind": "Method",
    "detail": "Function (sum1 =)",
    "insertText": "_mm256_adds_epi16(sum1, sum2)"
  },
  {
    "label": "_mm256_srai_epi16()",
    "kind": "Method",
    "detail": "Function (sum1 =)",
    "insertText": "_mm256_srai_epi16(sum1, 7)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i k_64 =)",
    "insertText": "_mm_set1_epi16(1 << 6)"
  },
  {
    "label": "_mm_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i x0 =)",
    "insertText": "_mm_maddubs_epi16(_mm256_castsi256_si128(s[0]), _mm256_castsi256_si128(f[0]))"
  },
  {
    "label": "_mm_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i x1 =)",
    "insertText": "_mm_maddubs_epi16(_mm256_castsi256_si128(s[1]), _mm256_castsi256_si128(f[1]))"
  },
  {
    "label": "_mm_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i x2 =)",
    "insertText": "_mm_maddubs_epi16(_mm256_castsi256_si128(s[2]), _mm256_castsi256_si128(f[2]))"
  },
  {
    "label": "_mm_maddubs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i x3 =)",
    "insertText": "_mm_maddubs_epi16(_mm256_castsi256_si128(s[3]), _mm256_castsi256_si128(f[3]))"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i sum1,sum2 ; sum1 =)",
    "insertText": "_mm_add_epi16(x0, x2)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (sum2 =)",
    "insertText": "_mm_add_epi16(x1, x3)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (sum1 =)",
    "insertText": "_mm_add_epi16(sum1, k_64)"
  },
  {
    "label": "_mm_adds_epi16()",
    "kind": "Method",
    "detail": "Function (sum1 =)",
    "insertText": "_mm_adds_epi16(sum1, sum2)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (sum1 =)",
    "insertText": "_mm_srai_epi16(sum1, 7)"
  },
  {
    "label": "_mm256_castsi128_si256()",
    "kind": "Method",
    "detail": "Function (const __m256i tmp =)",
    "insertText": "_mm256_castsi128_si256(_mm_loadu_si128((const __m128i *)lo))"
  },
  {
    "label": "mm256_loadu2_epi64()",
    "kind": "Method",
    "detail": "Function (} __m256i)",
    "insertText": "mm256_loadu2_epi64(const void *lo, const void *hi)"
  },
  {
    "label": "_mm256_castsi128_si256()",
    "kind": "Method",
    "detail": "Function (const __m256i tmp =)",
    "insertText": "_mm256_castsi128_si256(_mm_loadl_epi64((const __m128i *)lo))"
  },
  {
    "label": "mm256_store2_si128()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mm256_store2_si128(__m128i *const dst_ptr_1, __m128i *const dst_ptr_2, const __m256i *const src)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128(dst_ptr_1, _mm256_castsi256_si128(*src))"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128(dst_ptr_2, _mm256_extractf128_si256(*src, 1))"
  },
  {
    "label": "mm256_storeu2_epi64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mm256_storeu2_epi64(__m128i *const dst_ptr_1, __m128i *const dst_ptr_2, const __m256i *const src)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64(dst_ptr_1, _mm256_castsi256_si128(*src))"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64(dst_ptr_2, _mm256_extractf128_si256(*src, 1))"
  },
  {
    "label": "mm256_storeu2_epi32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mm256_storeu2_epi32(__m128i *const dst_ptr_1, __m128i *const dst_ptr_2, const __m256i *const src)"
  },
  {
    "label": "mm256_round_epi32()",
    "kind": "Method",
    "detail": "Function (} __m256i)",
    "insertText": "mm256_round_epi32(const __m256i *const src, const __m256i *const half_depth, const int depth)"
  },
  {
    "label": "_mm256_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m256i nearest_src =)",
    "insertText": "_mm256_add_epi32(*src, *half_depth)"
  },
  {
    "label": "mm256_round_epi16()",
    "kind": "Method",
    "detail": "Function (} __m256i)",
    "insertText": "mm256_round_epi16(const __m256i *const src, const __m256i *const half_depth, const int depth)"
  },
  {
    "label": "_mm256_adds_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i nearest_src =)",
    "insertText": "_mm256_adds_epi16(*src, *half_depth)"
  },
  {
    "label": "mm256_madd_add_epi32()",
    "kind": "Method",
    "detail": "Function (} __m256i)",
    "insertText": "mm256_madd_add_epi32(const __m256i *const src_0, const __m256i *const src_1, const __m256i *const ker_0, const __m256i *const ker_1)"
  },
  {
    "label": "_mm256_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i tmp_0 =)",
    "insertText": "_mm256_madd_epi16(*src_0, *ker_0)"
  },
  {
    "label": "_mm256_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m256i tmp_1 =)",
    "insertText": "_mm256_madd_epi16(*src_1, *ker_1)"
  }
]