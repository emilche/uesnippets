[
  {
    "label": "FMetalCommandBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandBuffer"
  },
  {
    "label": "FMetalCommandBufferFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandBufferFence"
  },
  {
    "label": "FMetalCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandList"
  },
  {
    "label": "FMetalFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalFence"
  },
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "FMetalCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandQueue"
  },
  {
    "label": "FMetalCommandQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" RHI . h \" # include \" RHIFeatureLevel . h \" # include \" Containers / LockFreeList . h \" class FMetalCommandBuffer ; class FMetalCommandBufferFence ; class FMetalCommandList ; class FMetalFence ; class FMetalDevice ; class FMetalCommandQueue { public : # pragma mark - Public C + + Boilerplate -)",
    "insertText": "FMetalCommandQueue(FMetalDevice& Device, uint32 const MaxNumCommandBuffers = 0)"
  },
  {
    "label": "FMetalCommandQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalCommandQueue(void)"
  },
  {
    "label": "CreateCommandBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma mark - Public Command Buffer Mutators - FMetalCommandBuffer*)",
    "insertText": "CreateCommandBuffer(void)"
  },
  {
    "label": "CommitCommandBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitCommandBuffer(FMetalCommandBuffer* CommandBuffer)"
  },
  {
    "label": "CreateFence()",
    "kind": "Method",
    "detail": "Function (FMetalFence*)",
    "insertText": "CreateFence(NS::String* Label)"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (# pragma mark - Public Command Queue Accessors - FMetalDevice&)",
    "insertText": "GetDevice(void)"
  },
  {
    "label": "GetQueue()",
    "kind": "Method",
    "detail": "Function (MTL::CommandQueue*)",
    "insertText": "GetQueue(void)"
  },
  {
    "label": "SupportsSeparateMSAAAndResolveTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSeparateMSAAAndResolveTarget()"
  },
  {
    "label": "IsUMASystem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUMASystem()"
  },
  {
    "label": "InsertDebugCaptureBoundary()",
    "kind": "Method",
    "detail": "Function (} # pragma mark - Public Debug Support - void)",
    "insertText": "InsertDebugCaptureBoundary(void)"
  }
]