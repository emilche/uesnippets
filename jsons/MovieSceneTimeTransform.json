[
  {
    "label": "FMovieSceneTimeTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeTransform"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / FrameTime . h \" # include \" MovieSceneTimeTransform . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTimeTransform() : TimeScale(1.f) , Offset(0)"
  },
  {
    "label": "FMovieSceneTimeTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeTransform(FFrameTime InOffset, float InTimeScale = 1.f) : TimeScale(InTimeScale) , Offset(InOffset)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneTimeTransform)",
    "insertText": "Inverse()"
  },
  {
    "label": "IsNearlyZero()",
    "kind": "Method",
    "detail": "Function (const FFrameTime NewOffset =)",
    "insertText": "IsNearlyZero(TimeScale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FFrameTime)",
    "insertText": "operator(FFrameTime InTime, const FMovieSceneTimeTransform& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InTime = InTime* RHS ; return InTime ; } template<T> TRange<T>)",
    "insertText": "operator(const TRange<T>& LHS, const FMovieSceneTimeTransform& RHS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TRange<T> Result = LHS ;)",
    "insertText": "if(!Result.GetLowerBound().IsOpen())"
  },
  {
    "label": "SetLowerBoundValue()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetLowerBoundValue(Result.GetLowerBoundValue() * RHS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Result.GetUpperBound().IsOpen())"
  },
  {
    "label": "SetUpperBoundValue()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetUpperBoundValue(Result.GetUpperBoundValue() * RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TRange<FFrameNumber>)",
    "insertText": "operator(const TRange<FFrameNumber>& LHS, const FMovieSceneTimeTransform& RHS)"
  },
  {
    "label": "SetLowerBoundValue()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetLowerBoundValue((Result.GetLowerBoundValue() * RHS).FloorToFrame())"
  },
  {
    "label": "SetUpperBoundValue()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetUpperBoundValue((Result.GetUpperBoundValue() * RHS).FloorToFrame())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Result ; } template<T> TRange<T>&)",
    "insertText": "operator(TRange<T>& LHS, const FMovieSceneTimeTransform& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LHS = LHS* RHS ; return LHS ; } FMovieSceneTimeTransform)",
    "insertText": "operator(const FMovieSceneTimeTransform& LHS, const FMovieSceneTimeTransform& RHS)"
  },
  {
    "label": "ScaledOffsetRHS()",
    "kind": "Method",
    "detail": "Function (const FFrameTime)",
    "insertText": "ScaledOffsetRHS(LHS.TimeScale == 1.f || !FMath::IsFinite(LHS.TimeScale))"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const FMovieSceneTimeTransform& InTransform)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { return*)",
    "insertText": "Printf(TEXT(\"[ %+i+%.3f ]\"), InTransform.Offset.FrameNumber.Value, InTransform.Offset.GetSubFrame())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(InTransform.Offset.GetSubFrame() == 0.f)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { return*)",
    "insertText": "Printf(TEXT(\"[ %+i+%.3f x%.3f ]\"), InTransform.Offset.FrameNumber.Value, InTransform.Offset.GetSubFrame(), InTransform.TimeScale)"
  }
]