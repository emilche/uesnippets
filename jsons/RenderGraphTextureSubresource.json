[
  {
    "label": "FRDGTextureSubresource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureSubresource"
  },
  {
    "label": "FRDGTextureSubresourceLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureSubresourceLayout"
  },
  {
    "label": "FRDGTextureSubresourceRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureSubresourceRange"
  },
  {
    "label": "FRDGTextureSubresource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHI . h \" template<InElementType,InAllocatorType = FDefaultAllocator> using TRDGTextureSubresourceArray = TArray<InElementType,InAllocatorType> ; struct FRDGTextureSubresource {)",
    "insertText": "FRDGTextureSubresource() : MipIndex(0) , PlaneSlice(0) , ArraySlice(0)"
  },
  {
    "label": "FRDGTextureSubresource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGTextureSubresource(uint32 InMipIndex, uint32 InArraySlice, uint32 InPlaneSlice) : MipIndex(InMipIndex) , PlaneSlice(InPlaneSlice) , ArraySlice(InArraySlice)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRDGTextureSubresource& RHS)"
  },
  {
    "label": "FRDGTextureSubresourceLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGTextureSubresourceLayout(uint32 InNumMips, uint32 InNumArraySlices, uint32 InNumPlaneSlices) : NumMips(InNumMips) , NumPlaneSlices(InNumPlaneSlices) , NumArraySlices(InNumArraySlices)"
  },
  {
    "label": "FRDGTextureSubresourceLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGTextureSubresourceLayout(const FRHITextureDesc& Desc) : FRDGTextureSubresourceLayout(Desc.NumMips, Desc.ArraySize * (Desc.IsTextureCube() ? 6 : 1), IsStencilFormat(Desc.Format) ? 2 : 1)"
  },
  {
    "label": "GetSubresourceCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSubresourceCount()"
  },
  {
    "label": "GetSubresource()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureSubresource)",
    "insertText": "GetSubresource(uint32 Index)"
  },
  {
    "label": "ArraySlice()",
    "kind": "Method",
    "detail": "Function (FRDGTextureSubresource Subresource ; Subresource . MipIndex = Index % NumMips ; Subresource .)",
    "insertText": "ArraySlice(Index / NumMips)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Subresource . PlaneSlice =)",
    "insertText": "Index(NumMips * NumArraySlices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FRDGTextureSubresourceLayout const& RHS)"
  },
  {
    "label": "FRDGTextureSubresourceRange()",
    "kind": "Method",
    "detail": "Function (} uint32 NumMips : 8 ; uint32 NumPlaneSlices : 8 ; uint32 NumArraySlices : 1 6 ; } ; struct FRDGTextureSubresourceRange {)",
    "insertText": "FRDGTextureSubresourceRange() : MipIndex(0) , PlaneSlice(0) , ArraySlice(0) , NumMips(0) , NumPlaneSlices(0) , NumArraySlices(0)"
  },
  {
    "label": "FRDGTextureSubresourceRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGTextureSubresourceRange(FRDGTextureSubresourceLayout Layout) : MipIndex(0) , PlaneSlice(0) , ArraySlice(0) , NumMips(Layout.NumMips) , NumPlaneSlices(Layout.NumPlaneSlices) , NumArraySlices(Layout.NumArraySlices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FRDGTextureSubresourceRange const& RHS)"
  },
  {
    "label": "GetMaxSubresource()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureSubresource)",
    "insertText": "GetMaxSubresource()"
  },
  {
    "label": "EnumerateSubresources()",
    "kind": "Method",
    "detail": "Function (} template<TFunction> void)",
    "insertText": "EnumerateSubresources(TFunction Function)"
  },
  {
    "label": "GetMinSubresource()",
    "kind": "Method",
    "detail": "Function (const FRDGTextureSubresource MinSubresource =)",
    "insertText": "GetMinSubresource()"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(FRDGTextureSubresource(LocalMipIndex, LocalArraySlice, LocalPlaneSlice))"
  },
  {
    "label": "IsWholeResource()",
    "kind": "Method",
    "detail": "Function (} } } } bool)",
    "insertText": "IsWholeResource(const FRDGTextureSubresourceLayout& Layout)"
  },
  {
    "label": "InitTextureSubresources()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,AllocatorType> void)",
    "insertText": "InitTextureSubresources(TRDGTextureSubresourceArray<ElementType, AllocatorType>& SubresourceArray, const FRDGTextureSubresourceLayout& Layout, const ElementType& Element = {})"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SubresourceArray .)",
    "insertText": "Reserve(SubresourceCount)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (SubresourceArray .)",
    "insertText": "SetNum(SubresourceCount)"
  },
  {
    "label": "GetSubresource()",
    "kind": "Method",
    "detail": "Function (SubresourceArray [ SubresourceIndex ] = Element ; } } template<ElementType,AllocatorType> const ElementType&)",
    "insertText": "GetSubresource(const TRDGTextureSubresourceArray<ElementType, AllocatorType>& SubresourceArray, const FRDGTextureSubresourceLayout& Layout, FRDGTextureSubresource Subresource)"
  },
  {
    "label": "GetSubresource()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,AllocatorType> ElementType&)",
    "insertText": "GetSubresource(TRDGTextureSubresourceArray<ElementType, AllocatorType>& SubresourceArray, const FRDGTextureSubresourceLayout& Layout, FRDGTextureSubresource Subresource)"
  },
  {
    "label": "EnumerateSubresourceRange()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,AllocatorType,FunctionType> void)",
    "insertText": "EnumerateSubresourceRange(TRDGTextureSubresourceArray<ElementType, AllocatorType>& SubresourceArray, const FRDGTextureSubresourceLayout& Layout, const FRDGTextureSubresourceRange& Range, FunctionType Function)"
  },
  {
    "label": "EnumerateSubresources()",
    "kind": "Method",
    "detail": "Function (Range .)",
    "insertText": "EnumerateSubresources([&](FRDGTextureSubresource Subresource) { Function(GetSubresource(SubresourceArray, Layout, Subresource)); })"
  },
  {
    "label": "EnumerateSubresourceRange()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,AllocatorType,FunctionType> void)",
    "insertText": "EnumerateSubresourceRange(const TRDGTextureSubresourceArray<ElementType, AllocatorType>& SubresourceArray, const FRDGTextureSubresourceLayout& Layout, const FRDGTextureSubresourceRange& Range, FunctionType Function)"
  }
]