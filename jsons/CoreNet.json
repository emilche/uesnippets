[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FNetTraceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTraceCollector"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "INetDeltaBaseState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetDeltaBaseState"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UField"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtr"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FSoftObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPtr"
  },
  {
    "label": "FNetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetResult"
  },
  {
    "label": "FReplicationFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationFragment"
  },
  {
    "label": "FReplicationStateDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationStateDescriptor"
  },
  {
    "label": "FNetTokenExportContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenExportContext"
  },
  {
    "label": "FNetTokenResolveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenResolveContext"
  },
  {
    "label": "FNetPropertyConditionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPropertyConditionManager"
  },
  {
    "label": "FFieldNetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldNetCache"
  },
  {
    "label": "FClassNetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassNetCache"
  },
  {
    "label": "FClassNetCacheMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassNetCacheMgr"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FPacketIdRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketIdRange"
  },
  {
    "label": "FPropertyRetirement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyRetirement"
  },
  {
    "label": "FLifetimeProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLifetimeProperty"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TNetDoNotCopyPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNetDoNotCopyPtr"
  },
  {
    "label": "FNetBitWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitWriter"
  },
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "FNetBitReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitReader"
  },
  {
    "label": "FNetDeltaSerializeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDeltaSerializeInfo"
  },
  {
    "label": "INetSerializeCB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INetSerializeCB"
  },
  {
    "label": "FGuidReferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGuidReferences"
  },
  {
    "label": "FFastArrayDeltaSerializeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastArrayDeltaSerializeParams"
  },
  {
    "label": "IRepChangedPropertyTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRepChangedPropertyTracker"
  },
  {
    "label": "FCustomPropertyConditionState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomPropertyConditionState"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FEncryptionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptionData"
  },
  {
    "label": "FReplicationFragment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / NetworkGuid . h \" # include \" Serialization / BitReader . h \" # include \" Serialization / BitWriter . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Trace / Config . h \" # include \" UObject / Class . h \" # include \" UObject / CoreNetTypes . h \" # include \" UObject / Field . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FArchive ; class FName ; class FNetTraceCollector ; class FOutBunch ; class FOutputDevice ; class FProperty ; class INetDeltaBaseState ; class UClass ; class UField ; class UFunction ; class UPackageMap ; class UStruct ; struct FObjectPtr ; struct FSoftObjectPath ; struct FSoftObjectPtr ; namespace UE::Net { struct FNetResult ; # if UE_WITH_IRIS class FReplicationFragment ; struct FReplicationStateDescriptor ; typedef)",
    "insertText": "FReplicationFragment(*CreateAndRegisterReplicationFragmentFunc)(UObject* Owner, const FReplicationStateDescriptor* Descriptor, FFragmentRegistrationContext& Context)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# endif class FNetTokenExportContext ; class FNetTokenResolveContext ; namespace Private { class FNetPropertyConditionManager ; } ; })",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FNetObjectIsDynamic, const UObject*)"
  },
  {
    "label": "FFieldNetCache()",
    "kind": "Method",
    "detail": "Function (class FFieldNetCache { public : FFieldVariant Field ; int32 FieldNetIndex ; uint32 FieldChecksum ; bool bIncompatible ;)",
    "insertText": "FFieldNetCache()"
  },
  {
    "label": "FFieldNetCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFieldNetCache(FFieldVariant InField, int32 InFieldNetIndex, uint32 InFieldChecksum ) : Field(InField), FieldNetIndex(InFieldNetIndex), FieldChecksum(InFieldChecksum), bIncompatible(false)"
  },
  {
    "label": "FClassNetCache()",
    "kind": "Method",
    "detail": "Function (} } ; class FClassNetCache { class FClassNetCacheMgr ; public :)",
    "insertText": "FClassNetCache()"
  },
  {
    "label": "FClassNetCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClassNetCache(const UClass* Class)"
  },
  {
    "label": "GetMaxIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxIndex()"
  },
  {
    "label": "GetFromField()",
    "kind": "Method",
    "detail": "Function (} const FFieldNetCache*)",
    "insertText": "GetFromField(FFieldVariant Field)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FFieldNetCache* Result = NULL ;)",
    "insertText": "for(const FClassNetCache* C= this; C; C = C->Super)"
  },
  {
    "label": "GetFromChecksum()",
    "kind": "Method",
    "detail": "Function (break ; } } return Result ; } const FFieldNetCache*)",
    "insertText": "GetFromChecksum(const uint32 Checksum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FFieldNetCache* Result = NULL ;)",
    "insertText": "for(const FClassNetCache* C = this; C; C = C->Super)"
  },
  {
    "label": "GetFromIndex()",
    "kind": "Method",
    "detail": "Function (break ; } } return Result ; } const FFieldNetCache*)",
    "insertText": "GetFromIndex(const int32 Index)"
  },
  {
    "label": "FClassNetCacheMgr()",
    "kind": "Method",
    "detail": "Function (private : int32 FieldsBase ; const FClassNetCache* Super ; TWeakObjectPtr<const UClass> Class ; uint32 ClassChecksum ; TArray<FFieldNetCache> Fields ; TMap<void*,FFieldNetCache*> FieldMap ; TMap<uint32,FFieldNetCache*> FieldChecksumMap ; } ; class FClassNetCacheMgr { public :)",
    "insertText": "FClassNetCacheMgr() : bDebugChecksum( false ), DebugChecksumIndent( 0)"
  },
  {
    "label": "FClassNetCacheMgr()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FClassNetCacheMgr()"
  },
  {
    "label": "ClearClassNetCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearClassNetCache()"
  },
  {
    "label": "GetClassNetCache()",
    "kind": "Method",
    "detail": "Function (} const FClassNetCache*)",
    "insertText": "GetClassNetCache(UClass* Class)"
  },
  {
    "label": "SortProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortProperties(TArray< FProperty* >& Properties)"
  },
  {
    "label": "SortedStructFieldsChecksum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SortedStructFieldsChecksum(const UStruct* Struct, uint32 Checksum)"
  },
  {
    "label": "GetPropertyChecksum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPropertyChecksum(const FProperty* Property, uint32 Checksum, const bool bIncludeChildren)"
  },
  {
    "label": "GetFunctionChecksum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFunctionChecksum(const UFunction* Function, uint32 Checksum)"
  },
  {
    "label": "GetFieldChecksum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFieldChecksum(const UField* Field, uint32 Checksum)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (bool bDebugChecksum ; int DebugChecksumIndent ; void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (private : TMap<TWeakObjectPtr<const UClass>,FClassNetCache*> ClassFieldIndices ; } ; class UPackageMap : public UObject {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(UPackageMap, UObject, CLASS_Transient | CLASS_Abstract | 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_None, COREUOBJECT_API)"
  },
  {
    "label": "WriteObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteObject(FArchive & Ar, UObject* InOuter, FNetworkGUID NetGUID, FString ObjName)"
  },
  {
    "label": "StaticSerializeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticSerializeName(FArchive& Ar, FName& InName)"
  },
  {
    "label": "ResolvePathAndAssignNetGUID()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolvePathAndAssignNetGUID(const FNetworkGUID& NetGUID, const FString& PathName)"
  },
  {
    "label": "ReceivedAck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReceivedAck(const int32 AckPacketId)"
  },
  {
    "label": "NotifyBunchCommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyBunchCommit(const int32 OutPacketId, const FOutBunch* OutBunch)"
  },
  {
    "label": "GetNetGUIDStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNetGUIDStats(int32& AckCount, int32& UnAckCount, int32& PendingCount)"
  },
  {
    "label": "NotifyStreamingLevelUnload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyStreamingLevelUnload(UObject* UnloadedLevel)"
  },
  {
    "label": "PrintExportBatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PrintExportBatch()"
  },
  {
    "label": "ClearDebugContextString()",
    "kind": "Method",
    "detail": "Function (DebugContextString = Str ; } void)",
    "insertText": "ClearDebugContextString()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (DebugContextString .)",
    "insertText": "Empty()"
  },
  {
    "label": "ResetTrackedGuids()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetTrackedGuids(bool bShouldTrack)"
  },
  {
    "label": "GetTrackedUnmappedGuids()",
    "kind": "Method",
    "detail": "Function (bShouldTrackUnmappedGuids = bShouldTrack ; } const TSet<FNetworkGUID>&)",
    "insertText": "GetTrackedUnmappedGuids()"
  },
  {
    "label": "RemoveUnmappedNetGUIDReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveUnmappedNetGUIDReference(FNetworkGUID UnmappedGUID)"
  },
  {
    "label": "ResetTrackedSyncLoadedGuids()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetTrackedSyncLoadedGuids()"
  },
  {
    "label": "ReportSyncLoadsForProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportSyncLoadsForProperty(const FProperty* Property, const UObject* Object)"
  },
  {
    "label": "LogDebugInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogDebugInfo(FOutputDevice & Ar)"
  },
  {
    "label": "GetObjectFromNetGUID()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetObjectFromNetGUID(const FNetworkGUID& NetGUID, const bool bIgnoreMustBeMapped)"
  },
  {
    "label": "IsGUIDBroken()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGUIDBroken(const FNetworkGUID& NetGUID, const bool bMustBeRegistered)"
  },
  {
    "label": "GetNetTokenResolveContext()",
    "kind": "Method",
    "detail": "Function (const UE::Net::FNetTokenResolveContext*)",
    "insertText": "GetNetTokenResolveContext()"
  },
  {
    "label": "UPackageMap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UPackageMap()"
  },
  {
    "label": "FPacketIdRange()",
    "kind": "Method",
    "detail": "Function (protected : bool bShouldTrackUnmappedGuids ; TSet<FNetworkGUID> TrackedUnmappedNetGuids ; TSet<FNetworkGUID> TrackedMappedDynamicNetGuids ; FString DebugContextString ; } ; struct FPacketIdRange {)",
    "insertText": "FPacketIdRange(int32 _First, int32 _Last) : First(_First), Last(_Last)"
  },
  {
    "label": "FPacketIdRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPacketIdRange(int32 PacketId) : First(PacketId), Last(PacketId)"
  },
  {
    "label": "FPacketIdRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPacketIdRange() : First(INDEX_NONE), Last(INDEX_NONE)"
  },
  {
    "label": "InRange()",
    "kind": "Method",
    "detail": "Function (} int32 First ; int32 Last ; bool)",
    "insertText": "InRange(int32 PacketId)"
  },
  {
    "label": "FPropertyRetirement()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPropertyRetirement { FPropertyRetirement* Next ; TSharedPtr<class INetDeltaBaseState> DynamicState ; FPacketIdRange OutPacketIdRange ; uint32 FastArrayChangelistHistory ;)",
    "insertText": "FPropertyRetirement() : Next(nullptr) , DynamicState(nullptr) , FastArrayChangelistHistory(0)"
  },
  {
    "label": "FLifetimeProperty()",
    "kind": "Method",
    "detail": "Function (} ; class FLifetimeProperty { public : uint16 RepIndex ; ELifetimeCondition Condition ; ELifetimeRepNotifyCondition RepNotifyCondition ; bool bIsPushBased ; # if UE_WITH_IRIS UE::Net::CreateAndRegisterReplicationFragmentFunc CreateAndRegisterReplicationFragmentFunction = nullptr ; # endif)",
    "insertText": "FLifetimeProperty() : RepIndex(0) , Condition(COND_None) , RepNotifyCondition(REPNOTIFY_OnChanged) , bIsPushBased(false)"
  },
  {
    "label": "FLifetimeProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLifetimeProperty(int32 InRepIndex) : RepIndex((uint16)InRepIndex) , Condition(COND_None) , RepNotifyCondition(REPNOTIFY_OnChanged) , bIsPushBased(false)"
  },
  {
    "label": "FLifetimeProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLifetimeProperty(int32 InRepIndex, ELifetimeCondition InCondition, ELifetimeRepNotifyCondition InRepNotifyCondition=REPNOTIFY_OnChanged, bool bInIsPushBased=false) : RepIndex((uint16)InRepIndex) , Condition(InCondition) , RepNotifyCondition(InRepNotifyCondition) , bIsPushBased(bInIsPushBased)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLifetimeProperty& Other)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS)",
    "insertText": "check(CreateAndRegisterReplicationFragmentFunction == Other.CreateAndRegisterReplicationFragmentFunction)"
  },
  {
    "label": "GENERATE_MEMBER_FUNCTION_CHECK()",
    "kind": "Method",
    "detail": "Function (# endif return true ; } return false ; } } ; template<> struct TIsZeroConstructType<FLifetimeProperty> { enum { Value = true } ; } ;)",
    "insertText": "GENERATE_MEMBER_FUNCTION_CHECK(GetLifetimeReplicatedProps, void, const, TArray<FLifetimeProperty>&)"
  },
  {
    "label": "TNetDoNotCopyPtr()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TNetDoNotCopyPtr() : Ptr(nullptr)"
  },
  {
    "label": "TNetDoNotCopyPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TNetDoNotCopyPtr(const TNetDoNotCopyPtr&) : Ptr(nullptr)"
  },
  {
    "label": "TNetDoNotCopyPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TNetDoNotCopyPtr(TNetDoNotCopyPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ptr = nullptr ; } TNetDoNotCopyPtr&)",
    "insertText": "operator(const TNetDoNotCopyPtr& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ptr = nullptr ; return* this ; } TNetDoNotCopyPtr&)",
    "insertText": "operator(TNetDoNotCopyPtr&&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Ptr = nullptr ; return* this ; } void)",
    "insertText": "Set(T* InPtr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Ptr = InPtr ; } T*)",
    "insertText": "Get()"
  },
  {
    "label": "FNetBitWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetBitWriter(int64 InMaxBits)"
  },
  {
    "label": "FNetBitWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetBitWriter()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class UPackageMap* PackageMap ; # if UE_TRACE_ENABLED FNetTraceCollectorDoNotCopyWrapper TraceCollector ; # endif FArchive&)",
    "insertText": "operator(FName& Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(UObject*& Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FSoftObjectPath& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FSoftObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FObjectPtr& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(struct FWeakObjectPtr& Value)"
  },
  {
    "label": "CountMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountMemory(FArchive& Ar)"
  },
  {
    "label": "FNetBitReader()",
    "kind": "Method",
    "detail": "Function (TNetDoNotCopyPtr<UE::Net::FNetTokenExportContext> NetTokenExportContext ; } ; class FNetBitReader : public FBitReader { public : UPackageMap* PackageMap = nullptr ; TPimplPtr<UE::Net::FNetResult,EPimplPtrMode::DeepCopy> ExtendedError ; public :)",
    "insertText": "FNetBitReader(UPackageMap* InPackageMap=nullptr, const uint8* Src=nullptr, int64 CountBits=0)"
  },
  {
    "label": "FNetBitReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetBitReader(const FNetBitReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetBitReader&)",
    "insertText": "operator(const FNetBitReader&)"
  },
  {
    "label": "FNetBitReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetBitReader(FNetBitReader&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetBitReader&)",
    "insertText": "operator(FNetBitReader&&)"
  },
  {
    "label": "FNetBitReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetBitReader()"
  },
  {
    "label": "GetBitStreamPositionForNetTrace()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetBitStreamPositionForNetTrace(const FBitWriter& Stream)"
  },
  {
    "label": "GetBitStreamPositionForNetTrace()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetBitStreamPositionForNetTrace(const FBitReader& Stream)"
  },
  {
    "label": "GetTraceCollector()",
    "kind": "Method",
    "detail": "Function (} # if UE_TRACE_ENABLED FNetTraceCollector*)",
    "insertText": "GetTraceCollector(const FNetBitWriter& BitWriter)"
  },
  {
    "label": "SetTraceCollector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTraceCollector(FNetBitWriter& BitWriter, FNetTraceCollector* Collector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (BitWriter . TraceCollector .)",
    "insertText": "Set(Collector)"
  },
  {
    "label": "NetworkGuidSetsAreSame()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "NetworkGuidSetsAreSame(const TSet< FNetworkGUID >& A, const TSet< FNetworkGUID >& B)"
  },
  {
    "label": "INetDeltaBaseState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "INetDeltaBaseState()"
  },
  {
    "label": "IsStateEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStateEqual(INetDeltaBaseState* Otherstate)"
  },
  {
    "label": "GetLastAckedHistory()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLastAckedHistory()"
  },
  {
    "label": "GetChangelistHistory()",
    "kind": "Method",
    "detail": "Function (LastAckedHistory = InAckedHistory ; } uint32)",
    "insertText": "GetChangelistHistory()"
  },
  {
    "label": "INetSerializeCB()",
    "kind": "Method",
    "detail": "Function (ChangelistHistory = InChangelistHistory ; } private : uint32 LastAckedHistory ; uint32 ChangelistHistory ; } ; struct FNetDeltaSerializeInfo ; class INetSerializeCB { protected : using FGuidReferencesMap = TMap<int32,class FGuidReferences> ; public :)",
    "insertText": "INetSerializeCB()"
  },
  {
    "label": "NetSerializeStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NetSerializeStruct(FNetDeltaSerializeInfo& Params)"
  },
  {
    "label": "GatherGuidReferencesForFastArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherGuidReferencesForFastArray(struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "MoveGuidToUnmappedForFastArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveGuidToUnmappedForFastArray(struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "UpdateUnmappedGuidsForFastArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUnmappedGuidsForFastArray(struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "NetDeltaSerializeForFastArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetDeltaSerializeForFastArray(struct FFastArrayDeltaSerializeParams& Params)"
  },
  {
    "label": "IRepChangedPropertyTracker()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IRepChangedPropertyTracker()"
  },
  {
    "label": "FCustomPropertyConditionState()",
    "kind": "Method",
    "detail": "Function (} } ; class FCustomPropertyConditionState { public :)",
    "insertText": "FCustomPropertyConditionState()"
  },
  {
    "label": "FCustomPropertyConditionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCustomPropertyConditionState(int32 NumProperties) : CurrentState(true , NumProperties) , DynamicConditionChangeCounter(0)"
  },
  {
    "label": "SetActiveState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetActiveState(const uint16 RepIndex, const bool bIsActive)"
  },
  {
    "label": "GetActiveState()",
    "kind": "Method",
    "detail": "Function (CurrentState [ RepIndex ] = bIsActive ; } bool)",
    "insertText": "GetActiveState(const uint16 RepIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (+ + DynamicConditionChangeCounter ; DynamicConditions .)",
    "insertText": "Emplace(RepIndex, static_cast<int16>(Condition))"
  },
  {
    "label": "GetDynamicCondition()",
    "kind": "Method",
    "detail": "Function (} ELifetimeCondition)",
    "insertText": "GetDynamicCondition(const uint16 RepIndex)"
  },
  {
    "label": "GetNumProperties()",
    "kind": "Method",
    "detail": "Function (} return COND_Dynamic ; } int32)",
    "insertText": "GetNumProperties()"
  },
  {
    "label": "GetDynamicConditionChangeCounter()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetDynamicConditionChangeCounter()"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (CurrentState .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "SerializeChecksum()",
    "kind": "Method",
    "detail": "Function (} private : TBitArray<> CurrentState ; TMap<uint16,int16> DynamicConditions ; uint32 DynamicConditionChangeCounter ; } ; struct FNetDeltaSerializeInfo { FBitWriter* Writer = nullptr ; FBitReader* Reader = nullptr ; TSharedPtr<INetDeltaBaseState>* NewState = nullptr ; INetDeltaBaseState* OldState = nullptr ; class UPackageMap* Map = nullptr ; class UNetConnection* Connection = nullptr ; void* Data = nullptr ; class UStruct* Struct = nullptr ; INetSerializeCB* NetSerializeCB = nullptr ; bool bUpdateUnmappedObjects = false ; bool bOutSomeObjectsWereMapped = false ; bool bCalledPreNetReceive = false ; bool bOutHasMoreUnmapped = false ; bool bGuidListsChanged = false ; bool bIsWritingOnClient = false ; bool bIsInitializingBaseFromDefault = false ; bool bSupportsFastArrayDeltaStructSerialization = false ; bool bInternalAck = false ; UObject* Object = nullptr ; UObject* CustomDeltaObject = nullptr ; TSet<FNetworkGUID>* GatherGuidReferences = nullptr ; int32* TrackedGuidMemoryBytes = nullptr ; const FNetworkGUID* MoveGuidToUnmapped = nullptr ; uint16 CustomDeltaIndex = INDEX_NONE ; FString DebugName ; } ; struct FEncryptionData { TArray<uint8> Key ; TArray<uint8> Fingerprint ; FString Identifier ; } ; void)",
    "insertText": "SerializeChecksum(FArchive &Ar, uint32 x, bool ErrorOK)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# define NET_ENABLE_CHECKSUMS 0 #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && NET_ENABLE_CHECKSUMS #define NET_CHECKSUM_OR_END(Ser)"
  },
  {
    "label": "SerializeChecksum()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SerializeChecksum(Ser,0xE282FA84, true)"
  },
  {
    "label": "NET_CHECKSUM()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "NET_CHECKSUM(Ser)"
  },
  {
    "label": "SerializeChecksum()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SerializeChecksum(Ser,0xE282FA84, false)"
  },
  {
    "label": "NET_CHECKSUM_CUSTOM()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "NET_CHECKSUM_CUSTOM(Ser, x)"
  },
  {
    "label": "SerializeChecksum()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SerializeChecksum(Ser,x, false)"
  },
  {
    "label": "NET_CHECKSUM_IGNORE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "NET_CHECKSUM_IGNORE(Ser)"
  },
  {
    "label": "NET_CHECKSUM()",
    "kind": "Method",
    "detail": "Function (\\ uint32 Magic = 0 ; \\ Ser<<Magic ; \\ } # else # define)",
    "insertText": "NET_CHECKSUM(Ser) #define NET_CHECKSUM_IGNORE(Ser) #define NET_CHECKSUM_CUSTOM(Ser, x) #define NET_CHECKSUM_OR_END(ser)"
  },
  {
    "label": "RPC_ResetLastFailedReason()",
    "kind": "Method",
    "detail": "Function (MAX_PACKET_SIZE = 1 0 2 4 } ; enum { LAN_BEACON_MAX_PACKET_SIZE = 1 0 2 4 } ; void)",
    "insertText": "RPC_ResetLastFailedReason()"
  },
  {
    "label": "RPC_ValidateFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RPC_ValidateFailed(const TCHAR* Reason)"
  },
  {
    "label": "RPC_GetLastFailedReason()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "RPC_GetLastFailedReason()"
  }
]