[
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FStaticPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticPrimitiveDrawInterface"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FColorVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorVertexBuffer"
  },
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "IHeterogeneousVolumeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHeterogeneousVolumeInterface"
  },
  {
    "label": "FPrimitiveUniformShaderParametersBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveUniformShaderParametersBuilder"
  },
  {
    "label": "FPrimitiveSceneProxyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneProxyDesc"
  },
  {
    "label": "IPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPrimitiveComponent"
  },
  {
    "label": "FRenderTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderTransform"
  },
  {
    "label": "FRenderBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderBounds"
  },
  {
    "label": "FDesiredLODLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDesiredLODLevel"
  },
  {
    "label": "FSimpleLightEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleLightEntry"
  },
  {
    "label": "FSimpleLightPerViewEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleLightPerViewEntry"
  },
  {
    "label": "FSimpleLightInstacePerViewIndexData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleLightInstacePerViewIndexData"
  },
  {
    "label": "FSimpleLightArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleLightArray"
  },
  {
    "label": "FHeightfieldComponentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeightfieldComponentDescription"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FRayTracingInstanceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingInstanceCollector"
  },
  {
    "label": "FRayTracingMaterialGatheringContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingMaterialGatheringContext"
  },
  {
    "label": "FRayTracingInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingInstance"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FCardRepresentationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardRepresentationData"
  },
  {
    "label": "FDistanceFieldVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldVolumeData"
  },
  {
    "label": "FDebugMassData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugMassData"
  },
  {
    "label": "FLightCacheInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightCacheInterface"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FLightPrimitiveInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightPrimitiveInteraction"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "CreateFixed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Misc / MemStack . h \" # include \" PrimitiveViewRelevance . h \" # include \" SceneTypes . h \" # include \" Engine / Scene . h \" # include \" UniformBuffer . h \" # include \" SceneView . h \" # include \" PrimitiveUniformShaderParameters . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" InstanceUniformShaderParameters . h \" # endif # include \" DrawDebugHelpers . h \" # include \" Math / CapsuleShape . h \" # include \" SceneDefinitions . h \" # include \" MeshDrawCommandStatsDefines . h \" # include \" InstanceDataTypes . h \" # include \" PSOPrecacheFwd . h \" class FLightSceneInfo ; class FLightSceneProxy ; class FPrimitiveDrawInterface ; class FPrimitiveSceneInfo ; class FStaticPrimitiveDrawInterface ; class HHitProxy ; class UPrimitiveComponent ; class URuntimeVirtualTexture ; class UTexture2D ; enum class ERuntimeVirtualTextureMaterialType : uint8 ; struct FMeshBatch ; class FColorVertexBuffer ; class FRayTracingGeometry ; class FVertexFactory ; class IHeterogeneousVolumeInterface ; struct FPrimitiveUniformShaderParametersBuilder ; struct FPrimitiveSceneProxyDesc ; class IPrimitiveComponent ; struct FRenderTransform ; struct FRenderBounds ; namespace Nanite { using CoarseMeshStreamingHandle = int16 ; } # if RHI_RAYTRACING namespace RayTracing { using GeometryGroupHandle = int32 ; } # endif struct FDesiredLODLevel { enum class EType : uint8 { First,Fixed } ; FDesiredLODLevel)",
    "insertText": "CreateFixed(uint8 LOD)"
  },
  {
    "label": "CreateFirst()",
    "kind": "Method",
    "detail": "Function (} FDesiredLODLevel)",
    "insertText": "CreateFirst(uint8 LOD)"
  },
  {
    "label": "FDesiredLODLevel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDesiredLODLevel(uint8 InLOD, EType InType) : LOD(InLOD) , Type(InType)"
  },
  {
    "label": "IsFixed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFixed()"
  },
  {
    "label": "PerViewIndex()",
    "kind": "Method",
    "detail": "Function (FSimpleLightInstacePerViewIndexData PerViewIndex = InstancePerViewDataIndices [ LightIndex ] ; const int32 PerViewDataIndex = PerViewIndex .)",
    "insertText": "PerViewIndex(PerViewIndex.bHasPerViewData ? ViewIndex : 0)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f MinMaxUV =)",
    "insertText": "FVector4f(ForceInit)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (FMatrix LocalToWorld = FMatrix::Identity ; FVector2D LightingAtlasLocation =)",
    "insertText": "FVector2D(ForceInit)"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (FIntRect HeightfieldRect ; uint32 GPUSceneInstanceIndex = 0 ; int32 NumSubsections = 0 ; FVector4 SubsectionScaleAndBias =)",
    "insertText": "FVector4(ForceInit)"
  },
  {
    "label": "FHeightfieldComponentDescription()",
    "kind": "Method",
    "detail": "Function (int32 VisibilityChannel ;)",
    "insertText": "FHeightfieldComponentDescription(const FMatrix& InLocalToWorld, uint32 InGPUSceneInstanceIndex) : LocalToWorld(InLocalToWorld), GPUSceneInstanceIndex(InGPUSceneInstanceIndex), VisibilityChannel(-1)"
  },
  {
    "label": "ShouldOptimizedWPOAffectNonNaniteShaderSelection()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "ShouldOptimizedWPOAffectNonNaniteShaderSelection()"
  },
  {
    "label": "IsAllowingApproximateOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowingApproximateOcclusionQueries()"
  },
  {
    "label": "CacheShadowDepthsFromPrimitivesUsingWPO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheShadowDepthsFromPrimitivesUsingWPO()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ERayTracingPrimitiveFlags : uint8 { None = 0,UnsupportedProxyType = 1<<0,Exclude = 1<<1,Skip = 1<<2,Dynamic = 1<<3,CacheInstances = 1<<4,ComputeLOD = 1<<5,FarField = 1<<6,Streaming = 1<<7,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERayTracingPrimitiveFlags)"
  },
  {
    "label": "FPrimitiveSceneProxy()",
    "kind": "Method",
    "detail": "Function (class FPrimitiveSceneProxy { public :)",
    "insertText": "FPrimitiveSceneProxy(const UPrimitiveComponent* InComponent, FName ResourceName = NAME_None)"
  },
  {
    "label": "FPrimitiveSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimitiveSceneProxy(const FPrimitiveSceneProxyDesc& InDesc, FName ResourceName = NAME_None)"
  },
  {
    "label": "FPrimitiveSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimitiveSceneProxy(FPrimitiveSceneProxy const&)"
  },
  {
    "label": "FPrimitiveSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPrimitiveSceneProxy()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "SetSelection_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelection_GameThread(const bool bInParentSelected, const bool bInIndividuallySelected=false)"
  },
  {
    "label": "SetLevelInstanceEditingState_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelInstanceEditingState_GameThread(const bool bInEditingState)"
  },
  {
    "label": "SetHovered_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHovered_GameThread(const bool bInHovered)"
  },
  {
    "label": "SetLightingChannels_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightingChannels_GameThread(FLightingChannels LightingChannels)"
  },
  {
    "label": "SetHiddenEdViews_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHiddenEdViews_GameThread(uint64 InHiddenEditorViews)"
  },
  {
    "label": "SetIsBeingMovedByEditor_GameThread()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetIsBeingMovedByEditor_GameThread(bool bIsBeingMoved)"
  },
  {
    "label": "SetSelectionOverride_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionOverride_GameThread(bool bForceSelection)"
  },
  {
    "label": "SetSelectionOutlineColorIndex_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionOutlineColorIndex_GameThread(uint8 ColorIndex)"
  },
  {
    "label": "SetOverlayColor_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlayColor_GameThread(FColor OverlayColor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) void SetPrimitiveColor_GameThread(const FLinearColor& InPrimitiveColor)"
  },
  {
    "label": "ResetSceneVelocity_GameThread()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ResetSceneVelocity_GameThread()"
  },
  {
    "label": "SetEvaluateWorldPositionOffset_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvaluateWorldPositionOffset_GameThread(bool bEvaluate)"
  },
  {
    "label": "SetWorldPositionOffsetDisableDistance_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldPositionOffsetDisableDistance_GameThread(int32 NewValue)"
  },
  {
    "label": "SetInstanceCullDistance_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInstanceCullDistance_RenderThread(float StartCullDistance, float EndCullDistance)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShown(const FSceneView* View)"
  },
  {
    "label": "IsShadowCast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShadowCast(const FSceneView* View)"
  },
  {
    "label": "RenderBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderBounds(FPrimitiveDrawInterface* PDI, const FEngineShowFlags& EngineShowFlags, const FBoxSphereBounds& Bounds, bool bRenderInEditor)"
  },
  {
    "label": "VerifyUsedMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyUsedMaterial(const class FMaterialRenderProxy* MaterialRenderProxy)"
  },
  {
    "label": "GetLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLOD(const FSceneView* View)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (HHitProxy*)",
    "insertText": "CreateHitProxies(IPrimitiveComponent* ComponentInterface,TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "GetCustomHitProxyIdBuffer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FColorVertexBuffer*)",
    "insertText": "GetCustomHitProxyIdBuffer()"
  },
  {
    "label": "GetMeshDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMeshDescription(int32 LODIndex, TArray<FMeshBatch>& OutMeshElements)"
  },
  {
    "label": "GetShadowShapes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShadowShapes(FVector PreViewTranslation, TArray<FCapsuleShape3f>& OutCapsuleShapes)"
  },
  {
    "label": "IsCullingReversedByComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCullingReversedByComponent()"
  },
  {
    "label": "GetStaticRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (} TArray<FRayTracingGeometry*>)",
    "insertText": "GetStaticRayTracingGeometries()"
  },
  {
    "label": "GetCoarseMeshStreamingHandle()",
    "kind": "Method",
    "detail": "Function (Nanite::CoarseMeshStreamingHandle)",
    "insertText": "GetCoarseMeshStreamingHandle()"
  },
  {
    "label": "GetMeshCardRepresentation()",
    "kind": "Method",
    "detail": "Function (} const class FCardRepresentationData*)",
    "insertText": "GetMeshCardRepresentation()"
  },
  {
    "label": "GetOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (} ; const TArray<FBoxSphereBounds>*)",
    "insertText": "GetOcclusionQueries(const FSceneView* View)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "GatherSimpleLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherSimpleLights(const FSceneViewFamily& ViewFamily, FSimpleLightArray& OutParticleLights)"
  },
  {
    "label": "GetLightRelevance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLightRelevance(const FLightSceneProxy* LightSceneProxy, bool& bDynamic, bool& bRelevant, bool& bLightMapped, bool& bShadowMapped)"
  },
  {
    "label": "GetDistanceFieldAtlasData()",
    "kind": "Method",
    "detail": "Function (bDynamic = true ; bRelevant = true ; bLightMapped = false ; bShadowMapped = false ; } void)",
    "insertText": "GetDistanceFieldAtlasData(const class FDistanceFieldVolumeData*& OutDistanceFieldData, float& SelfShadowBias)"
  },
  {
    "label": "HeightfieldHasPendingStreaming()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HeightfieldHasPendingStreaming()"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (OutHeightmapTexture = nullptr ; OutVisibilityTexture = nullptr ; } void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "DestroyRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyRenderThreadResources()"
  },
  {
    "label": "OnDetachLight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDetachLight(const FLightSceneInfo* Light)"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTransformChanged(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformChanged(FRHICommandListImmediate::Get())"
  },
  {
    "label": "OnLevelAddedToWorld_RenderThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnLevelAddedToWorld_RenderThread()"
  },
  {
    "label": "OnLevelRemovedFromWorld_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld_RenderThread()"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "GetDepthPriorityGroup()",
    "kind": "Method",
    "detail": "Function (} ESceneDepthPriorityGroup)",
    "insertText": "GetDepthPriorityGroup(const FSceneView* View)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "SetCollisionEnabled_GameThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionEnabled_GameThread(const bool bNewEnabled)"
  },
  {
    "label": "SetCollisionEnabled_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionEnabled_RenderThread(const bool bNewEnabled)"
  },
  {
    "label": "SetCustomDepthEnabled_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDepthEnabled_GameThread(const bool bInRenderCustomDepth)"
  },
  {
    "label": "SetCustomDepthEnabled_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDepthEnabled_RenderThread(const bool bInRenderCustomDepth)"
  },
  {
    "label": "SetCustomDepthStencilValue_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDepthStencilValue_GameThread(const int32 InCustomDepthStencilValue)"
  },
  {
    "label": "SetCustomDepthStencilValue_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDepthStencilValue_RenderThread(const int32 InCustomDepthStencilValue)"
  },
  {
    "label": "SetDistanceFieldSelfShadowBias_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDistanceFieldSelfShadowBias_RenderThread(float NewBias)"
  },
  {
    "label": "SetDrawDistance_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawDistance_RenderThread(float MinDrawDistance, float MaxDrawDistance, float VirtualTextureMaxDrawDistance)"
  },
  {
    "label": "GetScene()",
    "kind": "Method",
    "detail": "Function (FSceneInterface&)",
    "insertText": "GetScene()"
  },
  {
    "label": "GetOwnerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetOwnerName()"
  },
  {
    "label": "WantsEditorEffects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WantsEditorEffects()"
  },
  {
    "label": "IsVisibleInSceneCaptureOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibleInSceneCaptureOnly()"
  },
  {
    "label": "IsVisibleInReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisibleInReflectionCaptures()"
  },
  {
    "label": "HasViewDependentDPG()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasViewDependentDPG()"
  },
  {
    "label": "WritesVirtualTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WritesVirtualTexture(URuntimeVirtualTexture* VirtualTexture)"
  },
  {
    "label": "AffectsDynamicIndirectLighting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AffectsDynamicIndirectLighting()"
  },
  {
    "label": "StaticElementsAlwaysUseProxyPrimitiveUniformBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticElementsAlwaysUseProxyPrimitiveUniformBuffer()"
  },
  {
    "label": "DoesMeshBatchesUseSceneInstanceCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMeshBatchesUseSceneInstanceCount()"
  },
  {
    "label": "HasPerInstanceHitProxies()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPerInstanceHitProxies()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const float AbsMaxMaterialDisplacement =)",
    "insertText": "Max(-GetMinMaxMaterialDisplacement().X, GetMinMaxMaterialDisplacement().Y)"
  },
  {
    "label": "HasDynamicTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDynamicTransform()"
  },
  {
    "label": "DrawsVelocity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DrawsVelocity()"
  },
  {
    "label": "AlwaysHasVelocity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AlwaysHasVelocity()"
  },
  {
    "label": "GetNumUncachedStaticLightingInteractions()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR int32)",
    "insertText": "GetNumUncachedStaticLightingInteractions()"
  },
  {
    "label": "GetWireframeColor()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UE_BUILD_TEST FLinearColor)",
    "insertText": "GetWireframeColor()"
  },
  {
    "label": "SetPrimitiveColor()",
    "kind": "Method",
    "detail": "Function (WireframeColor = InWireframeColor ; } void)",
    "insertText": "SetPrimitiveColor(const FLinearColor& InPrimitiveColor)"
  },
  {
    "label": "IsDetailMesh()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsDetailMesh()"
  },
  {
    "label": "HasDistanceFieldRepresentation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDistanceFieldRepresentation()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (OutDistanceMinMax =)",
    "insertText": "FVector2f(0.0f)"
  },
  {
    "label": "GetNaniteResourceInfo()",
    "kind": "Method",
    "detail": "Function (OutWPODisableDistance = 0 . 0 f ; return false ; } void)",
    "insertText": "GetNaniteResourceInfo(uint32& ResourceID, uint32& HierarchyOffset, uint32& ImposterIndex)"
  },
  {
    "label": "DrawArc()",
    "kind": "Method",
    "detail": "Function (ResourceID = INDEX_NONE ; HierarchyOffset = INDEX_NONE ; ImposterIndex = INDEX_NONE ; } void)",
    "insertText": "DrawArc(FPrimitiveDrawInterface* PDI, const FVector& Start, const FVector& End, const float Height, const uint32 Segments, const FLinearColor& Color , uint8 DepthPriorityGroup, const float Thickness = 0.0f, const bool bScreenSpace = false)"
  },
  {
    "label": "DrawArrowHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawArrowHead(FPrimitiveDrawInterface* PDI, const FVector& Tip, const FVector& Origin, const float Size, const FLinearColor& Color , uint8 DepthPriorityGroup, const float Thickness = 0.0f, const bool bScreenSpace = false)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(FRHICommandListBase& RHICmdList, FVector InOffset)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(FRHICommandListImmediate::Get(), InOffset)"
  },
  {
    "label": "ApplyLateUpdateTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyLateUpdateTransform(FRHICommandListBase& RHICmdList, const FMatrix& LateUpdateTransform)"
  },
  {
    "label": "ApplyLateUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLateUpdateTransform(FRHICommandListImmediate::Get(), LateUpdateTransform)"
  },
  {
    "label": "UpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateUniformBuffer(FRHICommandList& RHICmdList)"
  },
  {
    "label": "UpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUniformBuffer(FRHICommandListImmediate::Get())"
  },
  {
    "label": "BuildUniformShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildUniformShaderParameters(FPrimitiveUniformShaderParametersBuilder &Builder)"
  },
  {
    "label": "DrawDebugMass()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_DRAW_DEBUG struct FDebugMassData { FQuat LocalTensorOrientation ; FVector LocalCenterOfMass ; FVector MassSpaceInertiaTensor ; int32 BoneIndex ; void)",
    "insertText": "DrawDebugMass(class FPrimitiveDrawInterface* PDI, const FTransform& ElemTM)"
  },
  {
    "label": "SetDebugMassData()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FDebugMassData> DebugMassData ; void)",
    "insertText": "SetDebugMassData(const TArray<FDebugMassData>& InDebugMassData)"
  },
  {
    "label": "GetMeshDrawCommandStatsCategory()",
    "kind": "Method",
    "detail": "Function (# endif # if MESH_DRAW_COMMAND_STATS FName)",
    "insertText": "GetMeshDrawCommandStatsCategory()"
  },
  {
    "label": "GetPrimitiveDistance()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA bool)",
    "insertText": "GetPrimitiveDistance(int32 LODIndex, int32 SectionIndex, const FVector& ViewOrigin, float& PrimitiveDistance)"
  },
  {
    "label": "GetMeshUVDensities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshUVDensities(int32 LODIndex, int32 SectionIndex, FVector4& WorldUVDensities)"
  },
  {
    "label": "GetMaterialTextureScales()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialTextureScales(int32 LODIndex, int32 SectionIndex, const class FMaterialRenderProxy* MaterialRenderProxy, FVector4f* OneOverScales, FIntVector4* UVChannelIndices)"
  },
  {
    "label": "GetLightMapResolution()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetLightMapResolution()"
  },
  {
    "label": "GetLodScreenSizeScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLodScreenSizeScale()"
  },
  {
    "label": "GetCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (} const FCustomPrimitiveData*)",
    "insertText": "GetCustomPrimitiveData()"
  },
  {
    "label": "GetInstanceDataUpdateTaskInfo()",
    "kind": "Method",
    "detail": "Function (FInstanceDataUpdateTaskInfo*)",
    "insertText": "GetInstanceDataUpdateTaskInfo()"
  },
  {
    "label": "BoostPrecachedPSORequestsOnDraw()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_PSO_PRECACHING void)",
    "insertText": "BoostPrecachedPSORequestsOnDraw()"
  },
  {
    "label": "SetPSORequestsToBoostOnDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPSORequestsToBoostOnDraw(const TArray<FMaterialPSOPrecacheRequestID>& PSORequestsToBoostOnDrawIN)"
  },
  {
    "label": "SetupInstanceSceneDataBuffers()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "SetupInstanceSceneDataBuffers(const FInstanceSceneDataBuffers* InInstanceSceneDataBuffers)"
  },
  {
    "label": "UpdateVisibleInLumenScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisibleInLumenScene()"
  },
  {
    "label": "IsVirtualTextureOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVirtualTextureOnly()"
  },
  {
    "label": "OverrideOwnerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideOwnerName(FName InOwnerName)"
  },
  {
    "label": "SetForceHidden()",
    "kind": "Method",
    "detail": "Function (OwnerName = InOwnerName ; } void)",
    "insertText": "SetForceHidden(bool bForceHiddenIn)"
  },
  {
    "label": "EnableGPUSceneSupportFlags()",
    "kind": "Method",
    "detail": "Function (bForceHidden = bForceHiddenIn ; } void)",
    "insertText": "EnableGPUSceneSupportFlags()"
  },
  {
    "label": "FBoxSphereBounds()",
    "kind": "Method",
    "detail": "Function (private : # if ! UE_BUILD_TEST FLinearColor WireframeColor ; FLinearColor PrimitiveColor ; # endif class FScene ; FCustomPrimitiveData CustomPrimitiveData ; int16 TranslucencySortPriority ; float TranslucencySortDistanceOffset ; TEnumAsByte<EComponentMobility::Type> Mobility ; ELightmapType LightmapType ; TStatId StatId ; uint8 bIsLocalToWorldDeterminantNegative : 1 ; uint8 DrawInGame : 1 ; uint8 DrawInEditor : 1 ; uint8 bReceivesDecals : 1 ; uint8 bVirtualTextureMainPassDrawAlways : 1 ; uint8 bVirtualTextureMainPassDrawNever : 1 ; uint8 bOnlyOwnerSee : 1 ; uint8 bOwnerNoSee : 1 ; uint8 bOftenMoving : 1 ; uint8 bParentSelected : 1 ; uint8 bIndividuallySelected : 1 ; uint8 bLevelInstanceEditingState : 1 ; uint8 bHovered : 1 ; uint8 bUseViewOwnerDepthPriorityGroup : 1 ; uint8 StaticDepthPriorityGroup : SDPG_NumBits ; uint8 ViewOwnerDepthPriorityGroup : SDPG_NumBits ; uint8 bStaticLighting : 1 ; uint8 bVisibleInReflectionCaptures : 1 ; uint8 bVisibleInRealTimeSkyCaptures : 1 ; uint8 bVisibleInRayTracing : 1 ; uint8 bRenderInDepthPass : 1 ; uint8 bRenderInMainPass : 1 ; uint8 bForceHidden : 1 ; uint8 bCollisionEnabled : 1 ; uint8 bTreatAsBackgroundForOcclusion : 1 ; class FLightPrimitiveInteraction ; protected : uint8 bSupportsParallelGDME : 1 ; uint8 bSinglePassGDME : 1 ; uint8 bVisibleInLumenScene : 1 ; uint8 bOpaqueOrMasked : 1 ; uint8 bCanSkipRedundantTransformUpdates : 1 ; uint8 bGoodCandidateForCachedShadowmap : 1 ; uint8 bNeedsUnbuiltPreviewLighting : 1 ; uint8 bHasValidSettingsForStaticLighting : 1 ; uint8 bWillEverBeLit : 1 ; uint8 bCastDynamicShadow : 1 ; uint8 bEmissiveLightSource : 1 ; uint8 bAffectDynamicIndirectLighting : 1 ; uint8 bAffectIndirectLightingWhileHidden : 1 ; uint8 bAffectDistanceFieldLighting : 1 ; uint8 bCastStaticShadow : 1 ; EShadowCacheInvalidationBehavior ShadowCacheInvalidationBehavior ; uint8 bCastVolumetricTranslucentShadow : 1 ; uint8 bCastContactShadow : 1 ; uint8 bCastDeepShadow : 1 ; uint8 bCastCapsuleDirectShadow : 1 ; uint8 bCastsDynamicIndirectShadow : 1 ; uint8 bCastHiddenShadow : 1 ; uint8 bCastShadowAsTwoSided : 1 ; uint8 bSelfShadowOnly : 1 ; uint8 bCastInsetShadow : 1 ; uint8 bCastCinematicShadow : 1 ; uint8 bCastFarShadow : 1 ; uint8 bLightAttachmentsAsGroup : 1 ; uint8 bSingleSampleShadowFromStationaryLights : 1 ; uint8 bStaticElementsAlwaysUseProxyPrimitiveUniformBuffer : 1 ; uint8 bVFRequiresPrimitiveUniformBuffer : 1 ; uint8 bDoesMeshBatchesUseSceneInstanceCount : 1 ; uint8 bIsStaticMesh : 1 ; uint8 bIsNaniteMesh : 1 ; uint8 bIsAlwaysVisible : 1 ; uint8 bIsHeterogeneousVolume : 1 ; uint8 bIsHierarchicalInstancedStaticMesh : 1 ; uint8 bIsLandscapeGrass : 1 ; uint8 bSupportsGPUScene : 1 ; uint8 bHasDeformableMesh : 1 ; uint8 bEvaluateWorldPositionOffset : 1 ; uint8 bHasWorldPositionOffsetVelocity : 1 ; uint8 bAnyMaterialHasWorldPositionOffset : 1 ; uint8 bAnyMaterialAlwaysEvaluatesWorldPositionOffset : 1 ; uint8 bAnyMaterialHasPixelAnimation : 1 ; uint8 bAlwaysHasVelocity : 1 ; uint8 bSupportsDistanceFieldRepresentation : 1 ; uint8 bSupportsHeightfieldRepresentation : 1 ; uint8 bSupportsSortedTriangles : 1 ; uint8 bShouldNotifyOnWorldAddRemove : 1 ; uint8 bWantsSelectionOutline : 1 ; uint8 bVerifyUsedMaterials : 1 ; uint8 bWantsEditorEffects : 1 ; uint8 bAllowApproximateOcclusion : 1 ; uint8 bHoldout : 1 ; uint8 bSplineMesh : 1 ; uint8 bSkinnedMesh : 1 ; uint8 bIsFirstPerson : 1 ; private : uint8 bUseAsOccluder : 1 ; uint8 bSelectable : 1 ; uint8 bHasPerInstanceHitProxies : 1 ; uint8 bUseEditorCompositing : 1 ; uint8 bIsBeingMovedByEditor : 1 ; uint8 bReceiveMobileCSMShadows : 1 ; uint8 bRenderCustomDepth : 1 ; uint8 bVisibleInSceneCaptureOnly : 1 ; uint8 bHiddenInSceneCapture : 1 ; bool bRayTracingFarField : 1 ; uint8 CustomDepthStencilValue ; TEnumAsByte<EStencilMask> CustomDepthStencilWriteMask ; uint8 LightingChannelMask ; int32 RayTracingGroupId ; uint8 RayTracingGroupCullingPriority ; private : const FInstanceSceneDataBuffers* InstanceSceneDataBuffersInternal = nullptr ; protected : FMaterialRelevance CombinedMaterialRelevance ; TEnumAsByte<EIndirectLightingCacheQuality> IndirectLightingCacheQuality ; int8 VirtualTextureLodBias ; int8 VirtualTextureCullMips ; int8 VirtualTextureMinCoverage ; float DynamicIndirectShadowMinVisibility ; float DistanceFieldSelfShadowBias ; float MaxWPOExtent ; FVector2f MinMaxMaterialDisplacement ; TArray<URuntimeVirtualTexture*> RuntimeVirtualTextures ; TArray<ERuntimeVirtualTextureMaterialType> RuntimeVirtualTextureMaterialTypes ; private : TArray<const AActor*> Owners ; FMatrix LocalToWorld ; FBoxSphereBounds Bounds ; FBoxSphereBounds LocalBounds =)",
    "insertText": "FBoxSphereBounds(ForceInit)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (FVector ActorPosition ; FPrimitiveComponentId PrimitiveComponentId ; FSceneInterface* Scene ; FPrimitiveSceneInfo* PrimitiveSceneInfo ; FName OwnerName ; FName ResourceName ; FName LevelName ; # if MESH_DRAW_COMMAND_STATS FName MeshDrawCommandStatsCategory ; # endif # if WITH_EDITOR uint64 HiddenEditorViews ; FColor OverlayColor =)",
    "insertText": "FColor(EForceInit::ForceInitToZero)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (uint32 SelectionOutlineColorIndex : 8 ; uint32 DrawInAnyEditMode : 1 ; uint32 bIsFoliage : 1 ; # endif int32 VisibilityId ; TUniformBufferRef<FPrimitiveUniformShaderParameters> UniformBuffer ; const UPrimitiveComponent* ComponentForDebuggingOnly ; # if WITH_EDITOR int32 NumUncachedStaticLightingInteractions ; TArray<UMaterialInterface*> UsedMaterialsForVerification ; # endif # if UE_WITH_PSO_PRECACHING TArray<FMaterialPSOPrecacheRequestID> PSOPrecacheRequestsToBoostOnDraw ; # endif void)",
    "insertText": "SetTransform(FRHICommandListBase& RHICmdList, const FMatrix& InLocalToWorld, const FBoxSphereBounds& InBounds, const FBoxSphereBounds& InLocalBounds, FVector InActorPosition)"
  },
  {
    "label": "WouldSetTransformBeRedundant_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WouldSetTransformBeRedundant_AnyThread(const FMatrix& InLocalToWorld, const FBoxSphereBounds& InBounds, const FBoxSphereBounds& InLocalBounds, const FVector& InActorPosition)"
  },
  {
    "label": "CreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUniformBuffer()"
  },
  {
    "label": "SetHiddenEdViews_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHiddenEdViews_RenderThread(uint64 InHiddenEditorViews)"
  },
  {
    "label": "UpdateInstances_RenderThread()",
    "kind": "Method",
    "detail": "Function (protected : float MaxDrawDistance ; float MinDrawDistance ; void)",
    "insertText": "UpdateInstances_RenderThread(FRHICommandListBase& RHICmdList, const FBoxSphereBounds& InBounds, const FBoxSphereBounds& InLocalBounds, const FBoxSphereBounds& InStaticMeshBounds)"
  },
  {
    "label": "SetSelection_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelection_RenderThread(const bool bInParentSelected, const bool bInIndividuallySelected)"
  },
  {
    "label": "SetLevelInstanceEditingState_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelInstanceEditingState_RenderThread(const bool bInLevelInstanceEditingState)"
  },
  {
    "label": "SetHovered_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHovered_RenderThread(const bool bInHovered)"
  },
  {
    "label": "OnEvaluateWorldPositionOffsetChanged_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEvaluateWorldPositionOffsetChanged_RenderThread()"
  },
  {
    "label": "PadInstanceLocalBounds()",
    "kind": "Method",
    "detail": "Function (} FRenderBounds)",
    "insertText": "PadInstanceLocalBounds(const FRenderBounds& InBounds)"
  },
  {
    "label": "SupportsCachingMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SupportsCachingMeshDrawCommands(const FMeshBatch& MeshBatch)"
  },
  {
    "label": "SupportsCachingMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsCachingMeshDrawCommands(const FMeshBatch& MeshBatch, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "SupportsNaniteRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsNaniteRendering(const FVertexFactory* RESTRICT VertexFactory, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy)"
  },
  {
    "label": "SupportsNaniteRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsNaniteRendering(const FVertexFactory* RESTRICT VertexFactory, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const class FMaterialRenderProxy* MaterialRenderProxy, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "SupportsNaniteRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsNaniteRendering(const class FVertexFactoryType* RESTRICT VertexFactoryType, const class FMaterial& Material, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "IsParallelGatherDynamicMeshElementsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParallelGatherDynamicMeshElementsEnabled()"
  }
]