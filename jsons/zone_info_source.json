[
  {
    "label": "ZoneInfoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZoneInfoSource"
  },
  {
    "label": "ZoneInfoSource()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_ZONE_INFO_SOURCE_H_ # define ABSL_TIME_INTERNAL_CCTZ_ZONE_INFO_SOURCE_H_ # include<cstddef> # include<functional> # include<memory> # include<string> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { class ZoneInfoSource { public : ~)",
    "insertText": "ZoneInfoSource()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "Read(void* ptr, std::size_t size)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Skip(std::size_t offset)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Version()"
  },
  {
    "label": "ZoneInfoSource()",
    "kind": "Method",
    "detail": "Function (} ; } } ABSL_NAMESPACE_END } namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz_extension { using ZoneInfoSourceFactory = std::unique_ptr<absl::time_internal::)",
    "insertText": "ZoneInfoSource(*)( const std::string&, const std::function<std::unique_ptr< absl::time_internal::cctz::ZoneInfoSource>(const std::string&)>&)"
  }
]