[
  {
    "label": "BDCSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BDCSVD"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "BDCSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BDCSVD"
  },
  {
    "label": "Bidiagonal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Bidiagonal"
  },
  {
    "label": "first",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "first"
  },
  {
    "label": "UpperBidiagonalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UpperBidiagonalization"
  },
  {
    "label": "JacobiSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiSVD"
  },
  {
    "label": "JacobiSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiSVD"
  },
  {
    "label": "BDCSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BDCSVD"
  },
  {
    "label": "BDCSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BDCSVD"
  },
  {
    "label": "BDCSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BDCSVD"
  },
  {
    "label": "bdcsvdfmt()",
    "kind": "Method",
    "detail": "Function (IOFormat)",
    "insertText": "bdcsvdfmt(8, 0, \", \", \"\\n\", \"  [\", \"]\")"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "compute(matrix, this->m_computationOptions)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate(Index rows, Index cols, unsigned int computationOptions)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "divide(Index firstCol, Index lastCol, Index firstRowW, Index firstColW, Index shift)"
  },
  {
    "label": "computeSVDofM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSVDofM(Index firstCol, Index n, MatrixXr& U, VectorType& singVals, MatrixXr& V)"
  },
  {
    "label": "computeSingVals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSingVals(const ArrayRef& col0, const ArrayRef& diag, const IndicesRef& perm, VectorType& singVals, ArrayRef shifts, ArrayRef mus)"
  },
  {
    "label": "perturbCol0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "perturbCol0(const ArrayRef& col0, const ArrayRef& diag, const IndicesRef& perm, const VectorType& singVals, const ArrayRef& shifts, const ArrayRef& mus, ArrayRef zhat)"
  },
  {
    "label": "computeSingVecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSingVecs(const ArrayRef& zhat, const ArrayRef& diag, const IndicesRef& perm, const VectorType& singVals, const ArrayRef& shifts, const ArrayRef& mus, MatrixXr& U, MatrixXr& V)"
  },
  {
    "label": "deflation43()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deflation43(Index firstCol, Index shift, Index i, Index size)"
  },
  {
    "label": "deflation44()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deflation44(Index firstColu , Index firstColm, Index firstRowW, Index firstColW, Index i, Index j, Index size)"
  },
  {
    "label": "deflation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deflation(Index firstCol, Index lastCol, Index k, Index firstRowW, Index firstColW, Index shift)"
  },
  {
    "label": "copyUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyUV(const HouseholderU &householderU, const HouseholderV &householderV, const NaiveU &naiveU, const NaiveV &naivev)"
  },
  {
    "label": "structured_update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "structured_update(Block<MatrixXr,Dynamic,Dynamic> A, const MatrixXr &B, Index n1)"
  },
  {
    "label": "secularEq()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "secularEq(RealScalar x, const ArrayRef& col0, const ArrayRef& diag, const IndicesRef &perm, const ArrayRef& diagShifted, RealScalar shift)"
  },
  {
    "label": "jsvd()",
    "kind": "Method",
    "detail": "Function (JacobiSVD<MatrixType>)",
    "insertText": "jsvd(matrix,computationOptions)"
  },
  {
    "label": "bid()",
    "kind": "Method",
    "detail": "Function (internal::UpperBidiagonalization<MatrixX>)",
    "insertText": "bid(copy)"
  },
  {
    "label": "deflation()",
    "kind": "Method",
    "detail": "Function (matrix)",
    "insertText": "deflation(firstCol, lastCol, k, firstRowW, firstColW, shift)"
  },
  {
    "label": "computeSingVals()",
    "kind": "Method",
    "detail": "Function (mus)",
    "insertText": "computeSingVals(col0, diag, perm, singVals, shifts, mus)"
  },
  {
    "label": "perturbCol0()",
    "kind": "Method",
    "detail": "Function (zhat)",
    "insertText": "perturbCol0(col0, diag, perm, singVals, shifts, mus, zhat)"
  },
  {
    "label": "computeSingVecs()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "computeSingVecs(zhat, diag, perm, singVals, shifts, mus, U, V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (EIGEN_BDCSVD_SANITY_CHECKS)",
    "insertText": "assert(k==0 || singVals[k]>=singVals[k-1])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (EIGEN_BDCSVD_SANITY_CHECKS)",
    "insertText": "assert(prod>=0)"
  },
  {
    "label": "J()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<RealScalar>)",
    "insertText": "J(c/r,-s/r)"
  },
  {
    "label": "J()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<RealScalar>)",
    "insertText": "J(c,-s)"
  },
  {
    "label": "fulldiag()",
    "kind": "Method",
    "detail": "Function (Diagonal<MatrixXr>)",
    "insertText": "fulldiag(m_computed)"
  },
  {
    "label": "diag()",
    "kind": "Method",
    "detail": "Function (Dynamic>)",
    "insertText": "diag(fulldiag, firstCol+shift, length)"
  },
  {
    "label": "deflation43()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "deflation43(firstCol, shift, i, length)"
  }
]