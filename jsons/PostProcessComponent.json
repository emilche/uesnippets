[
  {
    "label": "UPostProcessComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPostProcessComponent"
  },
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptInterface . h \" # include \" Components / SceneComponent . h \" # include \" Engine / BlendableInterface . h \" # include \" Engine / Scene . h \" # include \" Components / ShapeComponent . h \" # include \" Interfaces / Interface_PostProcessVolume . h \" # include \" PostProcessComponent . generated . h \")",
    "insertText": "UCLASS(ClassGroup = Rendering, collapsecategories, hidecategories = (Object), editinlinenew, meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(interp, Category = PostProcessVolume, meta = (ShowOnlyInnerProperties))"
  },
  {
    "label": "EncompassesPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncompassesPoint(FVector Point, float SphereRadius , float* OutDistanceToPoint)"
  },
  {
    "label": "GetProperties()",
    "kind": "Method",
    "detail": "Function (FPostProcessVolumeProperties)",
    "insertText": "GetProperties()"
  },
  {
    "label": "ShouldRender()",
    "kind": "Method",
    "detail": "Function (FPostProcessVolumeProperties Ret ; Ret . bIsEnabled = bEnabled ! = 0&&)",
    "insertText": "ShouldRender()"
  },
  {
    "label": "UShapeComponent()",
    "kind": "Method",
    "detail": "Function (Ret . bIsUnbound = bUnbound ! = 0 | | Cast<)",
    "insertText": "UShapeComponent(GetAttachParent())"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (Ret . BlendRadius = BlendRadius ; Ret . BlendWeight = BlendWeight ; Ret . Priority = Priority ; Ret . Settings =& Settings ; return Ret ; } # if DEBUG_POST_PROCESS_VOLUME_ENABLE FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "AddBlendable()",
    "kind": "Method",
    "detail": "Function (Settings .)",
    "insertText": "AddBlendable(InBlendableObject, InWeight)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]