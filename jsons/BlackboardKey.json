[
  {
    "label": "FKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKey"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / NameTypes . h \" namespace FBlackboard { const FName KeySelf =)",
    "insertText": "TEXT(\"SelfActor\")"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (# ifdef AI_BLACKBOARD_KEY_SIZE_8 using FKey = uint8 ; FKey InvalidKey =)",
    "insertText": "FKey(-1)"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (# else struct FKey {)",
    "insertText": "FKey()"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKey(int32 InKey)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (Key = IntCastChecked<)",
    "insertText": "uint16(InKey)"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKey(uint16 InKey) : Key(InKey)"
  },
  {
    "label": "FKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKey(uint8 InKey)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "int32()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FKey& Other)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 Key = static_cast<)",
    "insertText": "uint16(-1)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FKey& Key)"
  }
]