[
  {
    "label": "GlslShaderGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlslShaderGenerator"
  },
  {
    "label": "MX_GENGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENGLSL_API"
  },
  {
    "label": "LightCompoundNodeGlsl()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_LIGHTCOMPOUNDNODEGLSL_H # define MATERIALX_LIGHTCOMPOUNDNODEGLSL_H # include<MaterialXGenGlsl / Export . h> # include<MaterialXGenShader / Nodes / CompoundNode . h> # include<MaterialXGenShader / Shader . h> # include<MaterialXGenShader / GenContext . h> MATERIALX_NAMESPACE_BEGIN class GlslShaderGenerator ; class LightCompoundNodeGlsl : public CompoundNode { public :)",
    "insertText": "LightCompoundNodeGlsl()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderNodeImplPtr)",
    "insertText": "create()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const InterfaceElement& element, GenContext& context)"
  },
  {
    "label": "createVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createVariables(const ShaderNode& node, GenContext& context, Shader& shader)"
  },
  {
    "label": "emitFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionDefinition(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitFunctionCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionCall(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "emitFunctionDefinition(ClosureContext* cct, GenContext& context, ShaderStage& stage)"
  }
]