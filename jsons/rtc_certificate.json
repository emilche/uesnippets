[
  {
    "label": "SSLCertChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertChain"
  },
  {
    "label": "SSLCertificate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertificate"
  },
  {
    "label": "SSLIdentity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLIdentity"
  },
  {
    "label": "RTCCertificatePEM",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCCertificatePEM"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RefCountedNonVirtual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedNonVirtual"
  },
  {
    "label": "RTCCertificatePEM()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_RTC_CERTIFICATE_H_ # define RTC_BASE_RTC_CERTIFICATE_H_ # include<stdint . h> # include<memory> # include<string> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { class SSLCertChain ; class SSLCertificate ; class SSLIdentity ; class RTCCertificatePEM { public :)",
    "insertText": "RTCCertificatePEM(absl::string_view private_key, absl::string_view certificate) : private_key_(private_key), certificate_(certificate)"
  },
  {
    "label": "private_key()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "private_key()"
  },
  {
    "label": "Expires()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Expires()"
  },
  {
    "label": "HasExpired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExpired(uint64_t now)"
  },
  {
    "label": "GetSSLCertificate()",
    "kind": "Method",
    "detail": "Function (const SSLCertificate&)",
    "insertText": "GetSSLCertificate()"
  },
  {
    "label": "GetSSLCertificateChain()",
    "kind": "Method",
    "detail": "Function (const SSLCertChain&)",
    "insertText": "GetSSLCertificateChain()"
  },
  {
    "label": "identity()",
    "kind": "Method",
    "detail": "Function (SSLIdentity*)",
    "insertText": "identity()"
  },
  {
    "label": "ToPEM()",
    "kind": "Method",
    "detail": "Function (} RTCCertificatePEM)",
    "insertText": "ToPEM()"
  },
  {
    "label": "FromPEM()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RTCCertificate>)",
    "insertText": "FromPEM(const RTCCertificatePEM& pem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RTCCertificate& certificate)"
  },
  {
    "label": "RTCCertificate()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "RTCCertificate(SSLIdentity* identity)"
  },
  {
    "label": "RTCCertificate()",
    "kind": "Method",
    "detail": "Function (class RefCountedNonVirtual<RTCCertificate> ; ~)",
    "insertText": "RTCCertificate()"
  }
]