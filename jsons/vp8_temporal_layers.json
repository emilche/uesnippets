[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Vp8TemporalLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vp8TemporalLayers"
  },
  {
    "label": "Vp8TemporalLayers()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VP8_TEMPORAL_LAYERS_H_ # define API_VIDEO_CODECS_VP8_TEMPORAL_LAYERS_H_ # include<memory> # include<vector> # include \" api / fec_controller_override . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / vp8_frame_buffer_controller . h \" # include \" api / video_codecs / vp8_frame_config . h \" namespace webrtc { enum class Vp8TemporalLayersType { kFixedPattern,kBitrateDynamic } ; class Vp8TemporalLayers final : public Vp8FrameBufferController { public :)",
    "insertText": "Vp8TemporalLayers(std::vector<std::unique_ptr<Vp8FrameBufferController>>&& controllers, FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "Vp8TemporalLayers()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Vp8TemporalLayers()"
  },
  {
    "label": "SetQpLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQpLimits(size_t stream_index, int min_qp, int max_qp)"
  },
  {
    "label": "StreamCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "StreamCount()"
  },
  {
    "label": "SupportsEncoderFrameDropping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEncoderFrameDropping(size_t stream_index)"
  },
  {
    "label": "OnRatesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRatesUpdated(size_t stream_index, const std::vector<uint32_t>& bitrates_bps, int framerate_fps)"
  },
  {
    "label": "UpdateConfiguration()",
    "kind": "Method",
    "detail": "Function (Vp8EncoderConfig)",
    "insertText": "UpdateConfiguration(size_t stream_index)"
  },
  {
    "label": "NextFrameConfig()",
    "kind": "Method",
    "detail": "Function (Vp8FrameConfig)",
    "insertText": "NextFrameConfig(size_t stream_index, uint32_t rtp_timestamp)"
  },
  {
    "label": "OnEncodeDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeDone(size_t stream_index, uint32_t rtp_timestamp, size_t size_bytes, bool is_keyframe, int qp, CodecSpecificInfo* info)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(size_t stream_index, uint32_t rtp_timestamp)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const VideoEncoder::LossNotification& loss_notification)"
  }
]