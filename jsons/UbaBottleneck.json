[
  {
    "label": "Bottleneck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Bottleneck"
  },
  {
    "label": "BottleneckScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BottleneckScope"
  },
  {
    "label": "Bottleneck()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaEvent . h \" # include \" UbaSynchronization . h \" namespace uba { struct Bottleneck {)",
    "insertText": "Bottleneck(u32 mc) : m_underMax(true), m_activeCount(0), m_maxCount(mc)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Enter()"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(m_lock, lock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + m_activeCount ;)",
    "insertText": "if(m_activeCount == m_maxCount) m_underMax.Reset()"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (break ; } lock .)",
    "insertText": "Leave()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (m_underMax .)",
    "insertText": "IsSet()"
  },
  {
    "label": "BottleneckScope()",
    "kind": "Method",
    "detail": "Function (- - m_activeCount ; } private : ReaderWriterLock m_lock ; Event m_underMax ; u32 m_activeCount ; u32 m_maxCount ; } ; struct BottleneckScope {)",
    "insertText": "BottleneckScope(Bottleneck& b) : bottleneck(b)"
  },
  {
    "label": "BottleneckScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BottleneckScope()"
  }
]