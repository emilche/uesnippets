[
  {
    "label": "MCAsmBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackend"
  },
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCCodeEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeEmitter"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCELFStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCELFStreamer"
  },
  {
    "label": "LocalCommon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalCommon"
  },
  {
    "label": "MCELFStreamer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCELFSTREAMER_H # define LLVM_MC_MCELFSTREAMER_H # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / MC / MCDirectives . h \" # include \" llvm / MC / MCObjectStreamer . h \" # include \" llvm / MC / SectionKind . h \" # include \" llvm / Support / DataTypes . h \" # include<vector> namespace llvm { class MCAsmBackend ; class MCAssembler ; class MCCodeEmitter ; class MCExpr ; class MCInst ; class raw_ostream ; class MCELFStreamer : public MCObjectStreamer { public :)",
    "insertText": "MCELFStreamer(MCContext &Context, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter) : MCObjectStreamer(Context, TAB, OS, Emitter), SeenIdent(false)"
  },
  {
    "label": "MCELFStreamer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCELFStreamer()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (SeenIdent = false ; LocalCommons .)",
    "insertText": "clear()"
  },
  {
    "label": "InitSections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitSections(bool NoExecStack)"
  },
  {
    "label": "ChangeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSection(MCSection *Section, const MCExpr *Subsection)"
  },
  {
    "label": "EmitLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLabel(MCSymbol *Symbol)"
  },
  {
    "label": "EmitAssemblerFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAssemblerFlag(MCAssemblerFlag Flag)"
  },
  {
    "label": "EmitThumbFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitThumbFunc(MCSymbol *Func)"
  },
  {
    "label": "EmitWeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWeakReference(MCSymbol *Alias, const MCSymbol *Symbol)"
  },
  {
    "label": "EmitSymbolAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitSymbolAttribute(MCSymbol *Symbol, MCSymbolAttr Attribute)"
  },
  {
    "label": "EmitSymbolDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSymbolDesc(MCSymbol *Symbol, unsigned DescValue)"
  },
  {
    "label": "EmitCommonSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCommonSymbol(MCSymbol *Symbol, uint64_t Size, unsigned ByteAlignment)"
  },
  {
    "label": "BeginCOFFSymbolDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCOFFSymbolDef(const MCSymbol *Symbol)"
  },
  {
    "label": "EmitCOFFSymbolStorageClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSymbolStorageClass(int StorageClass)"
  },
  {
    "label": "EmitCOFFSymbolType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCOFFSymbolType(int Type)"
  },
  {
    "label": "EndCOFFSymbolDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCOFFSymbolDef()"
  },
  {
    "label": "emitELFSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitELFSize(MCSymbolELF *Symbol, const MCExpr *Value)"
  },
  {
    "label": "EmitLocalCommonSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLocalCommonSymbol(MCSymbol *Symbol, uint64_t Size, unsigned ByteAlignment)"
  },
  {
    "label": "EmitZerofill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitZerofill(MCSection *Section, MCSymbol *Symbol = nullptr, uint64_t Size = 0, unsigned ByteAlignment = 0)"
  },
  {
    "label": "EmitTBSSSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitTBSSSymbol(MCSection *Section, MCSymbol *Symbol, uint64_t Size, unsigned ByteAlignment = 0)"
  },
  {
    "label": "EmitValueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueImpl(const MCExpr *Value, unsigned Size, const SMLoc &Loc = SMLoc())"
  },
  {
    "label": "EmitFileDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitFileDirective(StringRef Filename)"
  },
  {
    "label": "EmitIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitIdent(StringRef IdentString)"
  },
  {
    "label": "EmitValueToAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueToAlignment(unsigned, int64_t, unsigned, unsigned)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "FinishImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishImpl()"
  },
  {
    "label": "EmitBundleAlignMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleAlignMode(unsigned AlignPow2)"
  },
  {
    "label": "EmitBundleLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleLock(bool AlignToEnd)"
  },
  {
    "label": "EmitBundleUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleUnlock()"
  },
  {
    "label": "isBundleLocked()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "isBundleLocked()"
  },
  {
    "label": "EmitInstToFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInstToFragment(const MCInst &Inst, const MCSubtargetInfo &)"
  },
  {
    "label": "EmitInstToData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInstToData(const MCInst &Inst, const MCSubtargetInfo &)"
  },
  {
    "label": "fixSymbolsInTLSFixups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fixSymbolsInTLSFixups(const MCExpr *expr)"
  },
  {
    "label": "mergeFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mergeFragment(MCDataFragment *, MCDataFragment *)"
  },
  {
    "label": "createARMELFStreamer()",
    "kind": "Method",
    "detail": "Function (bool SeenIdent ; struct LocalCommon { const MCSymbol* Symbol ; uint64_t Size ; unsigned ByteAlignment ; } ; std::vector<LocalCommon> LocalCommons ; llvm::SmallVector<MCDataFragment*,4> BundleGroups ; } ; MCELFStreamer*)",
    "insertText": "createARMELFStreamer(MCContext &Context, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter, bool RelaxAll, bool IsThumb)"
  }
]