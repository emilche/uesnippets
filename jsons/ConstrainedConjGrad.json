[
  {
    "label": "pseudo_inverse()",
    "kind": "Method",
    "detail": "Function (# include \" . . / . . / . . / . . / Eigen / src / Core / util / NonMPL2 . h \" # ifndef EIGEN_CONSTRAINEDCG_H # define EIGEN_CONSTRAINEDCG_H # include \" . . / . . / . . / . . / Eigen / Core \" namespace Eigen { namespace internal { template<CMatrix,CINVMatrix> void)",
    "insertText": "pseudo_inverse(const CMatrix &C, CINVMatrix &CINV)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (typedef CMatrix::Scalar Scalar ; typedef CMatrix::Index Index ; typedef Matrix<Scalar,Dynamic,1> TmpVec ; Index rows = C .)",
    "insertText": "rows(), cols = C.cols()"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (TmpVec)",
    "insertText": "d(rows), e(rows), l(cols), p(rows), q(rows), r(rows)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (Scalar rho,rho_1,alpha ; d .)",
    "insertText": "setZero()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef Triplet<double> T ; std::vector<T> tripletList ;)",
    "insertText": "for(Index i = 0; i < rows; ++i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (r = d ; p = d ;)",
    "insertText": "while(rho >= 1e-38)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (l = C .)",
    "insertText": "transpose()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (q = C* l ; alpha = rho / p .)",
    "insertText": "dot(q)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (e + = alpha* p ; r + = - alpha* q ; rho_1 = rho ; rho = r .)",
    "insertText": "dot(r)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(rho/rho_1)"
  },
  {
    "label": "setFromTriplets()",
    "kind": "Method",
    "detail": "Function (d [ i ] = 0 . 0 ; } CINV .)",
    "insertText": "setFromTriplets(tripletList.begin(), tripletList.end())"
  },
  {
    "label": "constrained_cg()",
    "kind": "Method",
    "detail": "Function (} template<TMatrix,CMatrix,VectorX,VectorB,VectorF> void)",
    "insertText": "constrained_cg(const TMatrix& A, const CMatrix& C, VectorX& x, const VectorB& b, const VectorF& f, IterationController &iter)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; typedef TMatrix::Scalar Scalar ; typedef TMatrix::Index Index ; typedef Matrix<Scalar,Dynamic,1> TmpVec ; Scalar rho = 1 . 0,rho_1,lambda,gamma ; Index xSize = x .)",
    "insertText": "size()"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (TmpVec)",
    "insertText": "p(xSize), q(xSize), q2(xSize), r(xSize), old_z(xSize), z(xSize), memox(xSize)"
  },
  {
    "label": "satured()",
    "kind": "Method",
    "detail": "Function (std::vector<bool>)",
    "insertText": "satured(C.rows())"
  },
  {
    "label": "setRhsNorm()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setRhsNorm(sqrt(b.dot(b)))"
  },
  {
    "label": "CINV()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<Scalar,RowMajor>)",
    "insertText": "CINV(C.rows(), C.cols())"
  },
  {
    "label": "pseudo_inverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pseudo_inverse(C, CINV)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (old_z = z ; memox = x ; r = b ; r + = A* - x ; z = r ; bool transition = false ;)",
    "insertText": "for(Index i = 0; i < C.rows(); ++i)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Scalar al = C .)",
    "insertText": "row(i).dot(x) - f.coeff(i)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (satured [ i ] = true ; transition = true ; } Scalar bb = CINV .)",
    "insertText": "row(i).dot(z)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (} else satured [ i ] = false ; } rho_1 = rho ; rho = r .)",
    "insertText": "dot(z)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (p = z + gamma* p ; + + iter ; q = A* p ; lambda = rho / q .)",
    "insertText": "dot(p)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Scalar bb = C .)",
    "insertText": "row(i).dot(p)"
  }
]