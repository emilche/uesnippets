[
  {
    "label": "FMacNativeFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacNativeFeedbackContext"
  },
  {
    "label": "ProgressIndicator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Mac / MacSystemIncludes . h \" # include \" Misc / FeedbackContext . h \" @ interface FMacNativeFeedbackContextWindowController : NSObject { @ public NSTextView* TextView ; @ private NSScrollView* LogView ; NSWindow* Window ; NSTextField* StatusLabel ; NSButton* CancelButton ; NSButton* ShowLogButton ; NSProgressIndicator*)",
    "insertText": "ProgressIndicator(id)"
  },
  {
    "label": "FMacNativeFeedbackContext()",
    "kind": "Method",
    "detail": "Function (@ end class FMacNativeFeedbackContext : public FFeedbackContext { public :)",
    "insertText": "FMacNativeFeedbackContext()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "YesNof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "YesNof(const FText& Text)"
  },
  {
    "label": "ReceivedUserCancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedUserCancel()"
  },
  {
    "label": "StartSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSlowTask(const FText& Task, bool bShowCancelButton=false)"
  },
  {
    "label": "FinalizeSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSlowTask()"
  },
  {
    "label": "ProgressReported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgressReported(const float TotalProgressInterp, FText DisplayMessage)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (FContextSupplier*)",
    "insertText": "GetContext()"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContext(FContextSupplier* InContext)"
  },
  {
    "label": "SerializeToWindow()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SerializeToWindow(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "SetDefaultTextColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTextColor()"
  }
]