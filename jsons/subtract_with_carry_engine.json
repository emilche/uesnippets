[
  {
    "label": "_UIntType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UIntType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_UInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UInt"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_Sseq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sseq"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_SUBTRACT_WITH_CARRY_ENGINE_H # define _LIBCPP___RANDOM_SUBTRACT_WITH_CARRY_ENGINE_H # include<__algorithm / equal . h> # include<__algorithm / min . h> # include<__config> # include<__random / is_seed_sequence . h> # include<__random / linear_congruential_engine . h> # include<cstddef> # include<cstdint> # include<iosfwd> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _UInt,size_t _Wp,size_t _Sp,size_t _Rp> bool)",
    "insertText": "operator(const subtract_with_carry_engine<_UInt, _Wp, _Sp, _Rp>& __x, const subtract_with_carry_engine<_UInt, _Wp, _Sp, _Rp>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _UInt,size_t _Wp,size_t _Sp,size_t _Rp> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const subtract_with_carry_engine<_UInt, _Wp, _Sp, _Rp>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _UInt,size_t _Wp,size_t _Sp,size_t _Rp> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, subtract_with_carry_engine<_UInt, _Wp, _Sp, _Rp>& __x)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<class _UIntType,size_t __w,size_t __s,size_t __r> class _LIBCPP_TEMPLATE_VIS subtract_with_carry_engine { public : typedef _UIntType result_type ; private : result_type __x_ [ __r ] ; result_type __c_ ; size_t __i_ ; _LIBCPP_CONSTEXPR const result_type _Dt = numeric_limits<result_type>::digits ;)",
    "insertText": "static_assert(0 < __w, \"subtract_with_carry_engine invalid parameters\")"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_CONSTEXPR const result_type _Min = 0 ; _LIBCPP_CONSTEXPR const result_type _Max = __w = = _Dt ?)",
    "insertText": "result_type(~0) : (result_type(1) << __w) - result_type(1)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const size_t word_size = __w ; _LIBCPP_CONSTEXPR const size_t short_lag = __s ; _LIBCPP_CONSTEXPR const size_t long_lag = __r ; _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR result_type)",
    "insertText": "min()"
  },
  {
    "label": "subtract_with_carry_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "subtract_with_carry_engine(result_type __sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__sd)"
  },
  {
    "label": "subtract_with_carry_engine()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "subtract_with_carry_engine(result_type __sd = default_seed)"
  },
  {
    "label": "subtract_with_carry_engine()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Sseq> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "subtract_with_carry_engine(_Sseq& __q, typename enable_if<__is_seed_sequence<_Sseq, subtract_with_carry_engine>::value>::type* = 0)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(result_type __sd = default_seed)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__sd, integral_constant<unsigned, 1 + (__w - 1) / 32>())"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY enable_if<__is_seed_sequence<_Sseq,subtract_with_carry_engine>::value,void>::type)",
    "insertText": "seed(_Sseq& __q)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__seed(__q, integral_constant<unsigned, 1 + (__w - 1) / 32>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "discard(unsigned long long __z)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "seed(result_type __sd, integral_constant<unsigned, 1>)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(result_type __sd, integral_constant<unsigned, 2>)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (template<class _Sseq> void)",
    "insertText": "__seed(_Sseq& __q, integral_constant<unsigned, 1>)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (template<class _Sseq> void)",
    "insertText": "__seed(_Sseq& __q, integral_constant<unsigned, 2>)"
  },
  {
    "label": "__e()",
    "kind": "Method",
    "detail": "Function (linear_congruential_engine<result_type,4 0 0 1 4 u,0 u,2 1 4 7 4 8 3 5 6 3 u>)",
    "insertText": "__e(__sd == 0u ? default_seed : __sd)"
  },
  {
    "label": "__e()",
    "kind": "Method",
    "detail": "Function (result_type __e0 =)",
    "insertText": "__e()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (__x_ [ __i ] = static_cast<)",
    "insertText": "result_type((__e0 + ((uint64_t)__e() << 32)) & _Max)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (const unsigned __k = 1 ; uint32_t __ar [ __r* __k ] ; __q .)",
    "insertText": "generate(__ar, __ar + __r * __k)"
  },
  {
    "label": "__x_()",
    "kind": "Method",
    "detail": "Function (const result_type& __xs =)",
    "insertText": "__x_(__i_ + (__r - __s))"
  },
  {
    "label": "__xr()",
    "kind": "Method",
    "detail": "Function (result_type& __xr = __x_ [ __i_ ] ; result_type __new_c = __c_ = = 0 ? __xs<__xr : __xs ! = 0 ? __xs<= __xr : 1 ;)",
    "insertText": "__xr(__xs - __xr - __c_)"
  },
  {
    "label": "__i_()",
    "kind": "Method",
    "detail": "Function (__c_ = __new_c ;)",
    "insertText": "__i_(__i_ + 1)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t __j =)",
    "insertText": "min(_Rp - __x.__i_, _Rp - __y.__i_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__x.__i_ < __y.__i_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t __j = _Rp - __y . __i_ ;)",
    "insertText": "if(!_VSTD::equal(__x.__x_ + __x.__i_, __x.__x_ + (__x.__i_ + __j), __y.__x_ + __y.__i_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} size_t __j = _Rp - __x . __i_ ;)",
    "insertText": "if(!_VSTD::equal(__y.__x_ + __y.__i_, __y.__x_ + (__y.__i_ + __j), __x.__x_ + __x.__i_))"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _Ostream ; __os .)",
    "insertText": "flags(_Ostream::dec | _Ostream::left)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__os<<__x . __x_ [ __x . __i_ ] ;)",
    "insertText": "for(size_t __j = __x.__i_ + 1; __j < _Rp; ++__j)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_UInt __t [ _Rp + 1 ] ;)",
    "insertText": "for(size_t __i = 0; __i < _Rp+1; ++__i)"
  }
]