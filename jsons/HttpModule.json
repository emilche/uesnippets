[
  {
    "label": "FHttpManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpManager"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpRequest"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FHttpModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpModule"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformMath . h \" # include \" Interfaces / IHttpRequest . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CoreMisc . h \" # include \" Modules / ModuleInterface . h \" # include \" Templates / SharedPointer . h \" class FHttpManager ; class FOutputDevice ; class IHttpRequest ; class UWorld ; class FHttpModule : public IModuleInterface,public FSelfRegisteringExec { protected : bool)",
    "insertText": "Exec_Runtime(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleHTTPCommand()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HandleHTTPCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FHttpModule&)",
    "insertText": "Get()"
  },
  {
    "label": "UpdateConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfigs()"
  },
  {
    "label": "CreateRequest()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IHttpRequest,ESPMode::ThreadSafe>)",
    "insertText": "CreateRequest()"
  },
  {
    "label": "GetHttpManager()",
    "kind": "Method",
    "detail": "Function (FHttpManager&)",
    "insertText": "GetHttpManager()"
  },
  {
    "label": "GetHttpConnectionTimeout()",
    "kind": "Method",
    "detail": "Function (HttpTotalTimeout = TimeOutInSec ; } float)",
    "insertText": "GetHttpConnectionTimeout()"
  },
  {
    "label": "IsHttpEnabled()",
    "kind": "Method",
    "detail": "Function (MaxReadBufferSize = SizeInBytes ; } bool)",
    "insertText": "IsHttpEnabled()"
  },
  {
    "label": "IsNullHttpEnabled()",
    "kind": "Method",
    "detail": "Function (bUseNullHttp = bEnabled ; } bool)",
    "insertText": "IsNullHttpEnabled()"
  },
  {
    "label": "GetHttpThreadActiveFrameTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (HttpDelayTime = InHttpDelayTime ; } float)",
    "insertText": "GetHttpThreadActiveFrameTimeInSeconds()"
  },
  {
    "label": "GetHttpThreadActiveMinimumSleepTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (HttpThreadActiveFrameTimeInSeconds = InHttpThreadActiveFrameTimeInSeconds ; } float)",
    "insertText": "GetHttpThreadActiveMinimumSleepTimeInSeconds()"
  },
  {
    "label": "GetHttpThreadIdleFrameTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (HttpThreadActiveMinimumSleepTimeInSeconds = InHttpThreadActiveMinimumSleepTimeInSeconds ; } float)",
    "insertText": "GetHttpThreadIdleFrameTimeInSeconds()"
  },
  {
    "label": "GetHttpThreadIdleMinimumSleepTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (HttpThreadIdleFrameTimeInSeconds = InHttpThreadIdleFrameTimeInSeconds ; } float)",
    "insertText": "GetHttpThreadIdleMinimumSleepTimeInSeconds()"
  },
  {
    "label": "GetHttpEventLoopThreadTickIntervalInSeconds()",
    "kind": "Method",
    "detail": "Function (HttpThreadIdleMinimumSleepTimeInSeconds = InHttpThreadIdleMinimumSleepTimeInSeconds ; } float)",
    "insertText": "GetHttpEventLoopThreadTickIntervalInSeconds()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (DefaultHeaders .)",
    "insertText": "Emplace(HeaderName, HeaderValue)"
  },
  {
    "label": "GetProxyAddress()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetProxyAddress()"
  },
  {
    "label": "GetHttpNoProxy()",
    "kind": "Method",
    "detail": "Function (ProxyAddress = InProxyAddress ; } const FString&)",
    "insertText": "GetHttpNoProxy()"
  },
  {
    "label": "PostLoadCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadCallback()"
  },
  {
    "label": "PreUnloadCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUnloadCallback()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "OnConfigSectionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigSectionsChanged(const FString& IniFilename, const TSet<FString>& SectionNames)"
  }
]