[
  {
    "label": "FStructuredArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchive"
  },
  {
    "label": "VCppClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCppClassInfo"
  },
  {
    "label": "FVCellSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVCellSerializeContext"
  },
  {
    "label": "FBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatch"
  },
  {
    "label": "FStructuredArchiveVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructuredArchiveVisitor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEncodedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncodedType"
  },
  {
    "label": "NestingEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NestingEntry"
  },
  {
    "label": "ScopedRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedRecord"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "BuildBatch()",
    "kind": "Method",
    "detail": "Function (namespace Verse { struct VCppClassInfo ; struct FVCellSerializeContext { TMap<VCell*,FPackageIndex> CellToPackageIndex ; TArray<VCell*> ExportMap ; struct FBatch { # if ! UE_BUILD_SHIPPING int Iterations ; # endif FPackageIndex RootCell ; TArray<FPackageIndex> Exports ; TArray<FPackageIndex> Precreate ; } ; FBatch)",
    "insertText": "BuildBatch(VCell* Root)"
  },
  {
    "label": "FStructuredArchiveVisitor()",
    "kind": "Method",
    "detail": "Function (} ; struct FStructuredArchiveVisitor : FAbstractVisitor {)",
    "insertText": "FStructuredArchiveVisitor(FAllocationContext InContext, FVCellSerializeContext* InSerializeContext = nullptr) : Context(InContext) , SerializeContext(InSerializeContext)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FStructuredArchiveSlot InSlot, TWriteBarrier<VValue>& InOutValue, FVCellSerializeContext* InSerializeContext = nullptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FAllocationContext InContext, FStructuredArchiveSlot InSlot, TWriteBarrier<VValue>& InOutValue, FVCellSerializeContext* InSerializeContext = nullptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchiveSlot InSlot, VRestValue& InOutValue, FVCellSerializeContext* InSerializeContext = nullptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(InSlot, reinterpret_cast<TWriteBarrier<VValue>&>(InOutValue), InSerializeContext)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FAllocationContext InContext, FStructuredArchiveSlot InSlot, VRestValue& InOutValue, FVCellSerializeContext* InSerializeContext = nullptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(InContext, InSlot, reinterpret_cast<TWriteBarrier<VValue>&>(InOutValue), InSerializeContext)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FStructuredArchiveSlot InSlot, VCell*& InOutCell)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchiveSlot InSlot, VValue& InOutValue)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginArray(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndArray()"
  },
  {
    "label": "BeginSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSet(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSet()"
  },
  {
    "label": "BeginMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginMap(const TCHAR* ElementName, uint64& NumElements)"
  },
  {
    "label": "EndMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndMap()"
  },
  {
    "label": "VisitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitObject(const TCHAR* ElementName, FUtf8StringView TypeName, TFunctionRef<void()>)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNonNull(VCell*& InCell, const TCHAR* ElementName)"
  },
  {
    "label": "VisitEmergentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitEmergentType(const VEmergentType* InEmergentType)"
  },
  {
    "label": "VisitNonNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitNonNull(UObject*& InObject, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VCell*& InCell, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(UObject*& InObject, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VValue& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(VRestValue& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(bool& bValue, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(FString& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint64& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int64& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint32& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int32& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint16& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int16& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(uint8& Value, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(int8& Value, const TCHAR* ElementName)"
  },
  {
    "label": "VisitBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitBulkData(void* Data, uint64 DataSize, const TCHAR* ElementName)"
  },
  {
    "label": "GetUnderlyingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetUnderlyingArchive()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "IsTextFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextFormat()"
  },
  {
    "label": "GetLoadingContext()",
    "kind": "Method",
    "detail": "Function (FAccessContext)",
    "insertText": "GetLoadingContext()"
  },
  {
    "label": "FEncodedType()",
    "kind": "Method",
    "detail": "Function (private : enum class ENestingType : uint8 { None,Object,Array,Set,Map,} ; enum class EEncodedType : uint8 { None,Null,True,False,Int,Float,Char,Char32,Cell,Batch,CellIndex,} ; struct FEncodedType {)",
    "insertText": "FEncodedType(EEncodedType InEncodedType, const VCppClassInfo* InCppClassInfo = nullptr) : EncodedType(InEncodedType) , CppClassInfo(InCppClassInfo)"
  },
  {
    "label": "WriteElementType()",
    "kind": "Method",
    "detail": "Function (} EEncodedType EncodedType ; const VCppClassInfo* CppClassInfo ; } ; void)",
    "insertText": "WriteElementType(FStructuredArchiveRecord Record, FEncodedType EncodedType)"
  },
  {
    "label": "ReadElementType()",
    "kind": "Method",
    "detail": "Function (FEncodedType)",
    "insertText": "ReadElementType(FStructuredArchiveRecord Record)"
  },
  {
    "label": "EnterArray()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveArray)",
    "insertText": "EnterArray(const TCHAR* ElementName, int32& Num, ENestingType Type)"
  },
  {
    "label": "LeaveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveArray(ENestingType Type)"
  },
  {
    "label": "EnterObject()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveRecord)",
    "insertText": "EnterObject(const TCHAR* ElementName)"
  },
  {
    "label": "LeaveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveObject()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveSlot)",
    "insertText": "Slot(const TCHAR* ElementName)"
  },
  {
    "label": "WriteCellBodyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCellBodyInternal(FStructuredArchiveRecord Record, VCell* InCell)"
  },
  {
    "label": "WriteCellBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCellBody(FStructuredArchiveRecord Record, VCell* InCell)"
  },
  {
    "label": "ReadCellBodyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadCellBodyInternal(FStructuredArchiveRecord Record, FEncodedType EncodedType, VCell*& InOutCell)"
  },
  {
    "label": "ReadCellBody()",
    "kind": "Method",
    "detail": "Function (VCell*)",
    "insertText": "ReadCellBody(FStructuredArchiveRecord Record, FEncodedType EncodedType)"
  },
  {
    "label": "VisitCellBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitCellBody(FStructuredArchiveRecord Record, VCell*& InOutCell)"
  },
  {
    "label": "FollowPlaceholder()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "FollowPlaceholder(VValue InValue)"
  },
  {
    "label": "WriteValueBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueBody(FStructuredArchiveRecord Record, VValue InValue)"
  },
  {
    "label": "ReadValueBody()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "ReadValueBody(FStructuredArchiveRecord Record, FEncodedType EncodedType)"
  },
  {
    "label": "VisitValueBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitValueBody(FStructuredArchiveRecord Record, VValue& InOutValue)"
  },
  {
    "label": "ScopedRecord()",
    "kind": "Method",
    "detail": "Function (struct NestingEntry { UE::StructuredArchive::Private::FSlotBase Slot ; ENestingType Type ; } ; TArray<NestingEntry> NestingInfo ; FAllocationContext Context ; FVCellSerializeContext* SerializeContext = nullptr ; bool bIsInBatch = false ; struct ScopedRecord {)",
    "insertText": "ScopedRecord(FStructuredArchiveVisitor& InVisitor, const TCHAR* InName)"
  },
  {
    "label": "ScopedRecord()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedRecord()"
  }
]