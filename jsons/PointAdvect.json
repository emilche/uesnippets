[
  {
    "label": "ClosestPointProjector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClosestPointProjector"
  },
  {
    "label": "PointAdvect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointAdvect"
  },
  {
    "label": "ConstrainedPointAdvect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstrainedPointAdvect"
  },
  {
    "label": "ClosestPointProjector()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_POINT_ADVECT_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_POINT_ADVECT_HAS_BEEN_INCLUDED # include<openvdb / openvdb . h> # include<openvdb / math / Math . h> # include<openvdb / Types . h> # include<openvdb / Grid . h> # include<openvdb / util / NullInterrupter . h> # include \" Interpolation . h \" # include \" VelocityFields . h \" # include<tbb / blocked_range . h> # include<tbb / parallel_for . h> # include<tbb / task . h> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<CptGridT = Vec3fGrid> class ClosestPointProjector { public : using CptGridType = CptGridT ; using CptAccessor = CptGridType::ConstAccessor ; using CptValueType = CptGridType::ValueType ;)",
    "insertText": "ClosestPointProjector(): mCptIterations(0)"
  },
  {
    "label": "ClosestPointProjector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClosestPointProjector(const CptGridType& cptGrid, int n): mCptGrid(&cptGrid), mCptAccessor(cptGrid.getAccessor()), mCptIterations(n)"
  },
  {
    "label": "ClosestPointProjector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClosestPointProjector(const ClosestPointProjector &other): mCptGrid(other.mCptGrid), mCptAccessor(mCptGrid->getAccessor()), mCptIterations(other.mCptIterations)"
  },
  {
    "label": "setConstraintIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setConstraintIterations(unsigned int cptIterations)"
  },
  {
    "label": "numIterations()",
    "kind": "Method",
    "detail": "Function (mCptIterations = cptIterations ; } unsigned int)",
    "insertText": "numIterations()"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (CptValueType)",
    "insertText": "result(W[0], W[1],W[2])"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (const Vec3R location = mCptGrid ->)",
    "insertText": "worldToIndex(Vec3R(result[0], result[1], result[2]))"
  },
  {
    "label": "CptAccessor()",
    "kind": "Method",
    "detail": "Function (BoxSampler::sample<)",
    "insertText": "CptAccessor(mCptAccessor, location, result)"
  },
  {
    "label": "PointAdvect()",
    "kind": "Method",
    "detail": "Function (} W [ 0 ] = result [ 0 ] ; W [ 1 ] = result [ 1 ] ; W [ 2 ] = result [ 2 ] ; } private : const CptGridType* mCptGrid ; CptAccessor mCptAccessor ; unsigned int mCptIterations ; } ; template<GridT = Vec3fGrid,PointListT = std::vector<GridT::ValueType>,bool StaggeredVelocity = false,InterrupterType = util::NullInterrupter> class PointAdvect { public : using GridType = GridT ; using PointListType = PointListT ; using LocationType = PointListT::value_type ; using VelocityFieldIntegrator = VelocityIntegrator<GridT,StaggeredVelocity> ;)",
    "insertText": "PointAdvect(const GridT& velGrid, InterrupterType* interrupter = nullptr): mVelGrid(&velGrid), mPoints(nullptr), mIntegrationOrder(1), mThreaded(true), mInterrupter(interrupter)"
  },
  {
    "label": "PointAdvect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointAdvect(const PointAdvect &other) : mVelGrid(other.mVelGrid), mPoints(other.mPoints), mDt(other.mDt), mAdvIterations(other.mAdvIterations), mIntegrationOrder(other.mIntegrationOrder), mThreaded(other.mThreaded), mInterrupter(other.mInterrupter)"
  },
  {
    "label": "PointAdvect()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PointAdvect()"
  },
  {
    "label": "earlyOut()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "earlyOut()"
  },
  {
    "label": "setThreaded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setThreaded(bool threaded)"
  },
  {
    "label": "getThreaded()",
    "kind": "Method",
    "detail": "Function (mThreaded = threaded ; } bool)",
    "insertText": "getThreaded()"
  },
  {
    "label": "advect()",
    "kind": "Method",
    "detail": "Function (mIntegrationOrder = order ; } void)",
    "insertText": "advect(PointListT& points, float dt, unsigned int advIterations = 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mPoints =& points ; mDt = dt ; mAdvIterations = advIterations ;)",
    "insertText": "if(mInterrupter) mInterrupter->start(\"Advecting points by OpenVDB velocity field: \")"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, mPoints->size()), *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(tbb::blocked_range<size_t>(0, mPoints->size()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mInterrupter) mInterrupter->end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator() (const tbb::blocked_range<size_t> &range)"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "velField()",
    "kind": "Method",
    "detail": "Function (} VelocityFieldIntegrator)",
    "insertText": "velField(*mVelGrid)"
  },
  {
    "label": "X0()",
    "kind": "Method",
    "detail": "Function (LocationType&)",
    "insertText": "X0(*mPoints)"
  },
  {
    "label": "rungeKutta()",
    "kind": "Method",
    "detail": "Function (velField . template)",
    "insertText": "rungeKutta(mDt, X0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } break ; case 2 : {)",
    "insertText": "for(size_t n = range.begin(); n != range.end(); ++n)"
  },
  {
    "label": "ConstrainedPointAdvect()",
    "kind": "Method",
    "detail": "Function (} } } break ; } } private : const GridType* mVelGrid ; PointListT* mPoints ; float mDt ; unsigned int mAdvIterations ; unsigned int mIntegrationOrder ; bool mThreaded ; InterrupterType* mInterrupter ; } ; template<GridT = Vec3fGrid,PointListT = std::vector<GridT::ValueType>,bool StaggeredVelocity = false,CptGridType = GridT,InterrupterType = util::NullInterrupter> class ConstrainedPointAdvect { public : using GridType = GridT ; using LocationType = PointListT::value_type ; using VelocityIntegratorType = VelocityIntegrator<GridT,StaggeredVelocity> ; using ClosestPointProjectorType = ClosestPointProjector<CptGridType> ; using PointListType = PointListT ;)",
    "insertText": "ConstrainedPointAdvect(const GridType& velGrid, const GridType& cptGrid, int cptn, InterrupterType* interrupter = nullptr): mVelGrid(&velGrid), mCptGrid(&cptGrid), mCptIter(cptn), mInterrupter(interrupter)"
  },
  {
    "label": "ConstrainedPointAdvect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConstrainedPointAdvect(const ConstrainedPointAdvect& other): mVelGrid(other.mVelGrid), mCptGrid(other.mCptGrid), mCptIter(other.mCptIter), mPoints(other.mPoints), mDt(other.mDt), mAdvIterations(other.mAdvIterations), mIntegrationOrder(other.mIntegrationOrder), mThreaded(other.mThreaded), mInterrupter(other.mInterrupter)"
  },
  {
    "label": "ConstrainedPointAdvect()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ConstrainedPointAdvect()"
  },
  {
    "label": "setConstraintIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setConstraintIterations(unsigned int cptIter)"
  },
  {
    "label": "setIntegrationOrder()",
    "kind": "Method",
    "detail": "Function (mCptIter = cptIter ; } void)",
    "insertText": "setIntegrationOrder(unsigned int order)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mPoints =& points ; mDt = dt ;)",
    "insertText": "if(mIntegrationOrder==0 && mCptIter == 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t N = mPoints ->)",
    "insertText": "size()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, N), *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(tbb::blocked_range<size_t>(0, N))"
  },
  {
    "label": "cptField()",
    "kind": "Method",
    "detail": "Function (ClosestPointProjectorType)",
    "insertText": "cptField(*mCptGrid, mCptIter)"
  },
  {
    "label": "projectToConstraintSurface()",
    "kind": "Method",
    "detail": "Function (cptField .)",
    "insertText": "projectToConstraintSurface(X0)"
  }
]