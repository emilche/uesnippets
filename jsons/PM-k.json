[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" struct)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "FPredictMatch8()",
    "kind": "Method",
    "detail": "Function (uint16 TABLE_SIZE = 2 5 6 ; uint16 ALPHABET_SIZE = 2 5 6 ;)",
    "insertText": "FPredictMatch8()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetMinimumWordLength()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetMinimumWordLength()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint8 Bytes [ 8 ] = { } ;)",
    "insertText": "check(DataLen)"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (default : Bytes [ 7 ] = Data [ 7 ] ; case 7 : Bytes [ 6 ] = Data [ 6 ] ; case 6 : Bytes [ 5 ] = Data [ 5 ] ; case 5 : Bytes [ 4 ] = Data [ 4 ] ; case 4 : Bytes [ 3 ] = Data [ 3 ] ; case 3 : Bytes [ 2 ] = Data [ 2 ] ; case 2 : Bytes [ 1 ] = Data [ 1 ] ; case 1 : Bytes [ 0 ] = Data [ 0 ] ; } const uint16 Hash1 =)",
    "insertText": "HashFn(Bytes[0], Bytes[1])"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash2 =)",
    "insertText": "HashFn(Hash1, Bytes[2])"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash3 =)",
    "insertText": "HashFn(Hash2, Bytes[3])"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash4 =)",
    "insertText": "HashFn(Hash3, Bytes[4])"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash5 =)",
    "insertText": "HashFn(Hash4, Bytes[5])"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash6 =)",
    "insertText": "HashFn(Hash5, Bytes[6])"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (const uint16 Hash7 =)",
    "insertText": "HashFn(Hash6, Bytes[7])"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Bytes(0x3FFF | ((DataLen > 1) << 15))"
  },
  {
    "label": "Hash1()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash1(DataLen > 1 ? (0xCFFF | ((DataLen > 2) << 13)) : 0xFFFF)"
  },
  {
    "label": "Hash2()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash2(DataLen > 2 ? (0xF3FF | ((DataLen > 3) << 11)) : 0xFFFF)"
  },
  {
    "label": "Hash3()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash3(DataLen > 3 ? (0xFCFF | ((DataLen > 4) << 9)) : 0xFFFF)"
  },
  {
    "label": "Hash4()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash4(DataLen > 4 ? (0xFF3F | ((DataLen > 5) << 7)) : 0xFFFF)"
  },
  {
    "label": "Hash5()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash5(DataLen > 5 ? (0xFFCF | ((DataLen > 6) << 5)) : 0xFFFF)"
  },
  {
    "label": "Hash6()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash6(DataLen > 6 ? (0xFFF3 | ((DataLen > 7) << 3)) : 0xFFFF)"
  },
  {
    "label": "Hash7()",
    "kind": "Method",
    "detail": "Function (PredictMatchTable [)",
    "insertText": "Hash7(DataLen > 7 ? (0xFFFC) : 0xFFFF)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MinimumWordLength = MinimumWordLength<DataLen ? MinimumWordLength : DataLen ;)",
    "insertText": "for(int i = 0; i < MinimumWordLength; ++i)"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (const uint8 Byte = Data [ i ] ; BitApproxTable [)",
    "insertText": "Byte(1 << i)"
  },
  {
    "label": "MatchApproximate()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "MatchApproximate(const uint8* Data, const uint32 DataLen)"
  },
  {
    "label": "BitApproxMask()",
    "kind": "Method",
    "detail": "Function (const uint16)",
    "insertText": "BitApproxMask(uint16) (1 << (MinimumWordLength - 1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint8* const DataEnd = Data + DataLen ; uint16 Bits = ~ 0 ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Data + + ; })",
    "insertText": "if(Data >= DataEnd)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (MinimumWordLength =)",
    "insertText": "sizeof(BitApproxTable[0])"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(BitApproxTable, 0xFF, sizeof(BitApproxTable))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(PredictMatchTable, 0xFF, sizeof(PredictMatchTable))"
  },
  {
    "label": "HashFn()",
    "kind": "Method",
    "detail": "Function (} private : uint16)",
    "insertText": "HashFn(const uint16 A, const uint8 B)"
  },
  {
    "label": "PredictMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PredictMatch(const uint16* RESTRICT PredictMatchTable, const uint8* RESTRICT Data, const uint32 DataLen)"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (const uint16 AcceptBit0 = PredictMatchTable [ Bytes [ 0 ] ] ; const uint16 AcceptBit1 = PredictMatchTable [ Hash1 ] ; const uint16 AcceptBit2 = PredictMatchTable [ Hash2 ] ; const uint16 AcceptBit3 = PredictMatchTable [ Hash3 ] ; const uint16 AcceptBit4 = PredictMatchTable [ Hash4 ] ; const uint16 AcceptBit5 = PredictMatchTable [ Hash5 ] ; const uint16 AcceptBit6 = PredictMatchTable [ Hash6 ] ; const uint16 AcceptBit7 = PredictMatchTable [ Hash7 ] ; const uint16)",
    "insertText": "Bits(AcceptBit0 & 0xC000) | (AcceptBit1 & 0x3000) | (AcceptBit2 & 0x0C00) | (AcceptBit3 & 0x0300) | (AcceptBit4 & 0x00C0) | (AcceptBit5 & 0x0030) | (AcceptBit6 & 0x000C) | (AcceptBit7 & 0x0003)"
  },
  {
    "label": "MatchBits()",
    "kind": "Method",
    "detail": "Function (const uint16)",
    "insertText": "MatchBits((((((((((((((Bits >> 2) | Bits) >> 2) | Bits) >> 2) | Bits) >> 2) | Bits) >> 2) | Bits) >> 2) | Bits) >> 1) | Bits)"
  }
]