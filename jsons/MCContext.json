[
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCSymbolELF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolELF"
  },
  {
    "label": "MCLabel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCLabel"
  },
  {
    "label": "MCDwarfFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCDwarfFile"
  },
  {
    "label": "MCDwarfLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDwarfLoc"
  },
  {
    "label": "MCObjectFileInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCObjectFileInfo"
  },
  {
    "label": "MCRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterInfo"
  },
  {
    "label": "MCLineSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCLineSection"
  },
  {
    "label": "SMLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMLoc"
  },
  {
    "label": "MCSectionMachO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSectionMachO"
  },
  {
    "label": "MCSectionELF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSectionELF"
  },
  {
    "label": "MCSectionCOFF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSectionCOFF"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "ELFSectionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELFSectionKey"
  },
  {
    "label": "COFFSectionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COFFSectionKey"
  },
  {
    "label": "MCContext()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCCONTEXT_H # define LLVM_MC_MCCONTEXT_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SetVector . h \" # include \" llvm / ADT / SmallString . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / MC / MCDwarf . h \" # include \" llvm / MC / SectionKind . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / raw_ostream . h \" # include<map> # include<tuple> # include<vector> namespace llvm { class MCAsmInfo ; class MCExpr ; class MCSection ; class MCSymbol ; class MCSymbolELF ; class MCLabel ; struct MCDwarfFile ; class MCDwarfLoc ; class MCObjectFileInfo ; class MCRegisterInfo ; class MCLineSection ; class SMLoc ; class MCSectionMachO ; class MCSectionELF ; class MCSectionCOFF ; class MCContext {)",
    "insertText": "MCContext(const MCContext &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MCContext&)",
    "insertText": "operator(const MCContext &)"
  },
  {
    "label": "NextInstance()",
    "kind": "Method",
    "detail": "Function (public : typedef StringMap<MCSymbol*,BumpPtrAllocator&> SymbolTable ; private : const SourceMgr* SrcMgr ; const MCAsmInfo* MAI ; const MCRegisterInfo* MRI ; const MCObjectFileInfo* MOFI ; BumpPtrAllocator Allocator ; SymbolTable Symbols ; DenseMap<const MCSectionELF*,MCSymbolELF*> SectionSymbols ; DenseMap<std::pair<unsigned,unsigned>,MCSymbol*> LocalSymbols ; StringMap<bool,BumpPtrAllocator&> UsedNames ; StringMap<unsigned> NextID ; DenseMap<unsigned,MCLabel*> Instances ; unsigned)",
    "insertText": "NextInstance(unsigned LocalLabelVal)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetInstance(unsigned LocalLabelVal)"
  },
  {
    "label": "ELFSectionKey()",
    "kind": "Method",
    "detail": "Function (char* SecureLogFile ; raw_ostream* SecureLog ; bool SecureLogUsed ; SmallString<1 2 8> CompilationDir ; std::string MainFileName ; std::map<unsigned,MCDwarfLineTable> MCDwarfLineTablesCUMap ; MCDwarfLoc CurrentDwarfLoc ; bool DwarfLocSeen ; bool GenDwarfForAssembly ; unsigned GenDwarfFileNumber ; SetVector<MCSection*> SectionsForRanges ; std::vector<MCGenDwarfLabelEntry> MCGenDwarfLabelEntries ; StringRef DwarfDebugFlags ; StringRef DwarfDebugProducer ; uint16_t DwarfVersion ; bool AllowTemporaryLabels ; bool UseNamesOnTempLabels = true ; unsigned DwarfCompileUnitID ; struct ELFSectionKey { std::string SectionName ; StringRef GroupName ; unsigned UniqueID ;)",
    "insertText": "ELFSectionKey(StringRef SectionName, StringRef GroupName, unsigned UniqueID) : SectionName(SectionName), GroupName(GroupName), UniqueID(UniqueID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ELFSectionKey &Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const COFFSectionKey &Other)"
  },
  {
    "label": "createSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "createSymbol(StringRef Name, bool AlwaysAddSuffix, bool IsTemporary)"
  },
  {
    "label": "getOrCreateDirectionalLocalSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getOrCreateDirectionalLocalSymbol(unsigned LocalLabelVal, unsigned Instance)"
  },
  {
    "label": "MCContext()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MCContext(const MCAsmInfo *MAI, const MCRegisterInfo *MRI, const MCObjectFileInfo *MOFI, const SourceMgr *Mgr = nullptr, bool DoAutoReset = true)"
  },
  {
    "label": "MCContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MCContext()"
  },
  {
    "label": "getSourceManager()",
    "kind": "Method",
    "detail": "Function (const SourceMgr*)",
    "insertText": "getSourceManager()"
  },
  {
    "label": "setUseNamesOnTempLabels()",
    "kind": "Method",
    "detail": "Function (AllowTemporaryLabels = Value ; } void)",
    "insertText": "setUseNamesOnTempLabels(bool Value)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (UseNamesOnTempLabels = Value ; } void)",
    "insertText": "reset()"
  },
  {
    "label": "createLinkerPrivateTempSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "createLinkerPrivateTempSymbol()"
  },
  {
    "label": "createTempSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "createTempSymbol(bool CanBeUnnamed = true)"
  },
  {
    "label": "createTempSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "createTempSymbol(const Twine &Name, bool AlwaysAddSuffix, bool CanBeUnnamed = true)"
  },
  {
    "label": "createDirectionalLocalSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "createDirectionalLocalSymbol(unsigned LocalLabelVal)"
  },
  {
    "label": "getDirectionalLocalSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getDirectionalLocalSymbol(unsigned LocalLabelVal, bool Before)"
  },
  {
    "label": "getOrCreateSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getOrCreateSymbol(const Twine &Name)"
  },
  {
    "label": "getOrCreateSectionSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbolELF*)",
    "insertText": "getOrCreateSectionSymbol(const MCSectionELF &Section)"
  },
  {
    "label": "getOrCreateFrameAllocSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getOrCreateFrameAllocSymbol(StringRef FuncName, unsigned Idx)"
  },
  {
    "label": "getOrCreateParentFrameOffsetSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getOrCreateParentFrameOffsetSymbol(StringRef FuncName)"
  },
  {
    "label": "getOrCreateLSDASymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getOrCreateLSDASymbol(StringRef FuncName)"
  },
  {
    "label": "lookupSymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "lookupSymbol(const Twine &Name)"
  },
  {
    "label": "getSymbols()",
    "kind": "Method",
    "detail": "Function (const SymbolTable&)",
    "insertText": "getSymbols()"
  },
  {
    "label": "getMachOSection()",
    "kind": "Method",
    "detail": "Function (MCSectionMachO*)",
    "insertText": "getMachOSection(StringRef Segment, StringRef Section, unsigned TypeAndAttributes, SectionKind K, const char *BeginSymName = nullptr)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags, const char *BeginSymName)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags, unsigned EntrySize, StringRef Group)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags, unsigned EntrySize, StringRef Group, const char *BeginSymName)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags, unsigned EntrySize, StringRef Group, unsigned UniqueID)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (} MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags, unsigned EntrySize, StringRef Group, unsigned UniqueID, const char *BeginSymName)"
  },
  {
    "label": "getELFSection()",
    "kind": "Method",
    "detail": "Function (MCSectionELF*)",
    "insertText": "getELFSection(StringRef Section, unsigned Type, unsigned Flags, unsigned EntrySize, const MCSymbolELF *Group, unsigned UniqueID, const char *BeginSymName, const MCSectionELF *Associated)"
  },
  {
    "label": "createELFRelSection()",
    "kind": "Method",
    "detail": "Function (MCSectionELF*)",
    "insertText": "createELFRelSection(StringRef Name, unsigned Type, unsigned Flags, unsigned EntrySize, const MCSymbolELF *Group, const MCSectionELF *Associated)"
  },
  {
    "label": "renameELFSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renameELFSection(MCSectionELF *Section, StringRef Name)"
  },
  {
    "label": "createELFGroupSection()",
    "kind": "Method",
    "detail": "Function (MCSectionELF*)",
    "insertText": "createELFGroupSection(const MCSymbolELF *Group)"
  },
  {
    "label": "getCOFFSection()",
    "kind": "Method",
    "detail": "Function (MCSectionCOFF*)",
    "insertText": "getCOFFSection(StringRef Section, unsigned Characteristics, SectionKind Kind, StringRef COMDATSymName, int Selection, const char *BeginSymName = nullptr)"
  },
  {
    "label": "getCOFFSection()",
    "kind": "Method",
    "detail": "Function (MCSectionCOFF*)",
    "insertText": "getCOFFSection(StringRef Section, unsigned Characteristics, SectionKind Kind, const char *BeginSymName = nullptr)"
  },
  {
    "label": "getCOFFSection()",
    "kind": "Method",
    "detail": "Function (MCSectionCOFF*)",
    "insertText": "getCOFFSection(StringRef Section)"
  },
  {
    "label": "getAssociativeCOFFSection()",
    "kind": "Method",
    "detail": "Function (MCSectionCOFF*)",
    "insertText": "getAssociativeCOFFSection(MCSectionCOFF *Sec, const MCSymbol *KeySym)"
  },
  {
    "label": "getCompilationDir()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getCompilationDir()"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (CompilationDir = S .)",
    "insertText": "str()"
  },
  {
    "label": "getMainFileName()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "getMainFileName()"
  },
  {
    "label": "getDwarfFile()",
    "kind": "Method",
    "detail": "Function (MainFileName = S ; } unsigned)",
    "insertText": "getDwarfFile(StringRef Directory, StringRef FileName, unsigned FileNumber, unsigned CUID)"
  },
  {
    "label": "isValidDwarfFileNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidDwarfFileNumber(unsigned FileNumber, unsigned CUID = 0)"
  },
  {
    "label": "getMCDwarfLineTables()",
    "kind": "Method",
    "detail": "Function (const std::map<unsigned,MCDwarfLineTable>&)",
    "insertText": "getMCDwarfLineTables()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto I = MCDwarfLineTablesCUMap .)",
    "insertText": "find(CUID)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != MCDwarfLineTablesCUMap.end())"
  },
  {
    "label": "getMCDwarfDirs()",
    "kind": "Method",
    "detail": "Function (} const SmallVectorImpl<std::string>&)",
    "insertText": "getMCDwarfDirs(unsigned CUID = 0)"
  },
  {
    "label": "hasMCLineSections()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasMCLineSections()"
  },
  {
    "label": "setMCLineTableCompilationDir()",
    "kind": "Method",
    "detail": "Function (DwarfCompileUnitID = CUIndex ; } void)",
    "insertText": "setMCLineTableCompilationDir(unsigned CUID, StringRef CompilationDir)"
  },
  {
    "label": "getMCDwarfLineTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMCDwarfLineTable(CUID).setCompilationDir(CompilationDir)"
  },
  {
    "label": "setCurrentDwarfLoc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCurrentDwarfLoc(unsigned FileNum, unsigned Line, unsigned Column, unsigned Flags, unsigned Isa, unsigned Discriminator)"
  },
  {
    "label": "setFileNum()",
    "kind": "Method",
    "detail": "Function (CurrentDwarfLoc .)",
    "insertText": "setFileNum(FileNum)"
  },
  {
    "label": "setLine()",
    "kind": "Method",
    "detail": "Function (CurrentDwarfLoc .)",
    "insertText": "setLine(Line)"
  },
  {
    "label": "setColumn()",
    "kind": "Method",
    "detail": "Function (CurrentDwarfLoc .)",
    "insertText": "setColumn(Column)"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (CurrentDwarfLoc .)",
    "insertText": "setFlags(Flags)"
  },
  {
    "label": "setIsa()",
    "kind": "Method",
    "detail": "Function (CurrentDwarfLoc .)",
    "insertText": "setIsa(Isa)"
  },
  {
    "label": "setDiscriminator()",
    "kind": "Method",
    "detail": "Function (CurrentDwarfLoc .)",
    "insertText": "setDiscriminator(Discriminator)"
  },
  {
    "label": "clearDwarfLocSeen()",
    "kind": "Method",
    "detail": "Function (DwarfLocSeen = true ; } void)",
    "insertText": "clearDwarfLocSeen()"
  },
  {
    "label": "getDwarfLocSeen()",
    "kind": "Method",
    "detail": "Function (DwarfLocSeen = false ; } bool)",
    "insertText": "getDwarfLocSeen()"
  },
  {
    "label": "getGenDwarfFileNumber()",
    "kind": "Method",
    "detail": "Function (GenDwarfForAssembly = Value ; } unsigned)",
    "insertText": "getGenDwarfFileNumber()"
  },
  {
    "label": "getGenDwarfSectionSyms()",
    "kind": "Method",
    "detail": "Function (GenDwarfFileNumber = FileNumber ; } const SetVector<MCSection*>&)",
    "insertText": "getGenDwarfSectionSyms()"
  },
  {
    "label": "finalizeDwarfSections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "finalizeDwarfSections(MCStreamer &MCOS)"
  },
  {
    "label": "getMCGenDwarfLabelEntries()",
    "kind": "Method",
    "detail": "Function (const std::vector<MCGenDwarfLabelEntry>&)",
    "insertText": "getMCGenDwarfLabelEntries()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (MCGenDwarfLabelEntries .)",
    "insertText": "push_back(E)"
  },
  {
    "label": "setDwarfDebugFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDwarfDebugFlags(StringRef S)"
  },
  {
    "label": "getDwarfDebugFlags()",
    "kind": "Method",
    "detail": "Function (DwarfDebugFlags = S ; } StringRef)",
    "insertText": "getDwarfDebugFlags()"
  },
  {
    "label": "getDwarfDebugProducer()",
    "kind": "Method",
    "detail": "Function (DwarfDebugProducer = S ; } StringRef)",
    "insertText": "getDwarfDebugProducer()"
  },
  {
    "label": "getDwarfVersion()",
    "kind": "Method",
    "detail": "Function (DwarfVersion = v ; } uint16_t)",
    "insertText": "getDwarfVersion()"
  },
  {
    "label": "setSecureLogUsed()",
    "kind": "Method",
    "detail": "Function (SecureLog = Value ; } void)",
    "insertText": "setSecureLogUsed(bool Value)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (SecureLogUsed = Value ; } void*)",
    "insertText": "allocate(unsigned Size, unsigned Align = 8)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(void *Ptr)"
  },
  {
    "label": "reportFatalError()",
    "kind": "Method",
    "detail": "Function (} LLVM_ATTRIBUTE_NORETURN void)",
    "insertText": "reportFatalError(SMLoc L, const Twine &Msg)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} ; } void* operator)",
    "insertText": "new(size_t Bytes, llvm::MCContext &C, size_t Alignment = 8) throw()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void *Ptr, llvm::MCContext &C, size_t) throw ()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (C .)",
    "insertText": "deallocate(Ptr)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Bytes, llvm::MCContext& C, size_t Alignment = 8) throw()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void *Ptr, llvm::MCContext &C) throw ()"
  }
]