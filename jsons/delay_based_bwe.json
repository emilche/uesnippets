[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "BweSeparateAudioPacketsSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BweSeparateAudioPacketsSettings"
  },
  {
    "label": "DelayBasedBwe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayBasedBwe"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "BweSeparateAudioPacketsSettings()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_DELAY_BASED_BWE_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_DELAY_BASED_BWE_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / network_state_predictor . h \" # include \" api / transport / network_types . h \" # include \" modules / congestion_controller / goog_cc / delay_increase_detector_interface . h \" # include \" modules / congestion_controller / goog_cc / inter_arrival_delta . h \" # include \" modules / congestion_controller / goog_cc / probe_bitrate_estimator . h \" # include \" modules / remote_bitrate_estimator / aimd_rate_control . h \" # include \" modules / remote_bitrate_estimator / inter_arrival . h \" # include \" rtc_base / experiments / struct_parameters_parser . h \" # include \" rtc_base / race_checker . h \" namespace webrtc { class RtcEventLog ; struct BweSeparateAudioPacketsSettings { char kKey [ ] = \" WebRTC - Bwe - SeparateAudioPackets \" ;)",
    "insertText": "BweSeparateAudioPacketsSettings()"
  },
  {
    "label": "BweSeparateAudioPacketsSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BweSeparateAudioPacketsSettings(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (bool enabled = false ; int packet_threshold = 1 0 ; TimeDelta time_threshold =)",
    "insertText": "Seconds(1)"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} ; class DelayBasedBwe { public : struct Result {)",
    "insertText": "Result()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (bool updated ; bool probe ; DataRate target_bitrate =)",
    "insertText": "Zero()"
  },
  {
    "label": "DelayBasedBwe()",
    "kind": "Method",
    "detail": "Function (bool recovered_from_overuse ; BandwidthUsage delay_detector_state ; } ;)",
    "insertText": "DelayBasedBwe(const FieldTrialsView* key_value_config, RtcEventLog* event_log, NetworkStatePredictor* network_state_predictor)"
  },
  {
    "label": "DelayBasedBwe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayBasedBwe()"
  },
  {
    "label": "DelayBasedBwe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayBasedBwe(const DelayBasedBwe&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayBasedBwe&)",
    "insertText": "operator(const DelayBasedBwe&)"
  },
  {
    "label": "IncomingPacketFeedbackVector()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "IncomingPacketFeedbackVector(const TransportPacketsFeedback& msg, absl::optional<DataRate> acked_bitrate, absl::optional<DataRate> probe_bitrate, absl::optional<NetworkStateEstimate> network_estimate, bool in_alr)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(TimeDelta avg_rtt)"
  },
  {
    "label": "LatestEstimate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LatestEstimate(std::vector<uint32_t>* ssrcs, DataRate* bitrate)"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(DataRate start_bitrate)"
  },
  {
    "label": "SetMinBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinBitrate(DataRate min_bitrate)"
  },
  {
    "label": "GetExpectedBwePeriod()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetExpectedBwePeriod()"
  },
  {
    "label": "TriggerOveruse()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "TriggerOveruse(Timestamp at_time, absl::optional<DataRate> link_capacity)"
  },
  {
    "label": "last_estimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "last_estimate()"
  },
  {
    "label": "MaybeUpdateEstimate()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "MaybeUpdateEstimate(absl::optional<DataRate> acked_bitrate, absl::optional<DataRate> probe_bitrate, absl::optional<NetworkStateEstimate> state_estimate, bool recovered_from_overuse, bool in_alr, Timestamp at_time)"
  },
  {
    "label": "UpdateEstimate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateEstimate(Timestamp at_time, absl::optional<DataRate> acked_bitrate, DataRate* target_rate)"
  }
]