[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "BweSeparateAudioPacketsSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BweSeparateAudioPacketsSettings"
  },
  {
    "label": "DelayBasedBwe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayBasedBwe"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "BweSeparateAudioPacketsSettings()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "BweSeparateAudioPacketsSettings(\n      const FieldTrialsView* key_value_config)"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "DelayBasedBwe()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "DelayBasedBwe(const FieldTrialsView* key_value_config,\n                         RtcEventLog* event_log,\n                         NetworkStatePredictor* network_state_predictor)"
  },
  {
    "label": "IncomingPacketFeedbackVector()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "IncomingPacketFeedbackVector(\n      const TransportPacketsFeedback& msg,\n      absl::optional<DataRate> acked_bitrate,\n      absl::optional<DataRate> probe_bitrate,\n      absl::optional<NetworkStateEstimate> network_estimate,\n      bool in_alr)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(TimeDelta avg_rtt)"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(DataRate start_bitrate)"
  },
  {
    "label": "SetMinBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinBitrate(DataRate min_bitrate)"
  },
  {
    "label": "TriggerOveruse()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "TriggerOveruse(Timestamp at_time,\n                          absl::optional<DataRate> link_capacity)"
  },
  {
    "label": "IncomingPacketFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacketFeedback(const PacketResult& packet_feedback,\n                              Timestamp at_time)"
  },
  {
    "label": "MaybeUpdateEstimate()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "MaybeUpdateEstimate(\n      absl::optional<DataRate> acked_bitrate,\n      absl::optional<DataRate> probe_bitrate,\n      absl::optional<NetworkStateEstimate> state_estimate,\n      bool recovered_from_overuse,\n      bool in_alr,\n      Timestamp at_time)"
  },
  {
    "label": "UpdateEstimate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateEstimate(Timestamp at_time,\n                      absl::optional<DataRate> acked_bitrate,\n                      DataRate* target_rate)"
  }
]