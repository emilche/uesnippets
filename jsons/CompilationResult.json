[
  {
    "label": "TrivialDxcUnsavedFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrivialDxcUnsavedFile"
  },
  {
    "label": "HlslIntellisenseSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HlslIntellisenseSupport"
  },
  {
    "label": "CompilationResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompilationResult"
  },
  {
    "label": "CursorStringData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CursorStringData"
  },
  {
    "label": "decl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "decl"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (# include<algorithm> # include<atomic> # include<cassert> # include<iostream> # include<memory> # include<sstream> # include<string> # include<vector> # include \" dxc / Support / WinIncludes . h \" # include \" dxc / Support / microcom . h \" # include \" dxc / Support / dxcapi . use . h \" # include \" dxc / dxcapi . h \" # include \" dxc / dxcisense . h \" # include \" llvm / Support / Atomic . h \" HRESULT)",
    "insertText": "IFE(HRESULT hr)"
  },
  {
    "label": "runtime_error()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "runtime_error(\"COM call failed\")"
  },
  {
    "label": "GetFirstChildFromCursor()",
    "kind": "Method",
    "detail": "Function (} return hr ; } HRESULT)",
    "insertText": "GetFirstChildFromCursor(IDxcCursor *cursor, IDxcCursor **pResult)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (HRESULT hr ; IDxcCursor** children = nullptr ; unsigned childrenCount ; hr = cursor ->)",
    "insertText": "GetChildren(0, 1, &childrenCount, &children)"
  },
  {
    "label": "CoTaskMemFree()",
    "kind": "Method",
    "detail": "Function (* pResult = children [ 0 ] ; } else {* pResult = nullptr ; hr = E_FAIL ; })",
    "insertText": "CoTaskMemFree(children)"
  },
  {
    "label": "DXC_MICROCOM_ADDREF_RELEASE_IMPL()",
    "kind": "Method",
    "detail": "Function (LPCSTR m_contents ; unsigned m_length ; public :)",
    "insertText": "DXC_MICROCOM_ADDREF_RELEASE_IMPL(m_dwRef) TrivialDxcUnsavedFile(LPCSTR fileName, LPCSTR contents) : m_dwRef(0), m_fileName(fileName), m_contents(contents)"
  },
  {
    "label": "m_length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_length(unsigned)strlen(m_contents)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "Create(LPCSTR fileName, LPCSTR contents, IDxcUnsavedFile **pResult)"
  },
  {
    "label": "TrivialDxcUnsavedFile()",
    "kind": "Method",
    "detail": "Function (CComPtr<TrivialDxcUnsavedFile> pNewValue = new)",
    "insertText": "TrivialDxcUnsavedFile(fileName, contents)"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (} HRESULT STDMETHODCALLTYPE)",
    "insertText": "QueryInterface(REFIID iid, void **ppvObject)"
  },
  {
    "label": "IDxcUnsavedFile()",
    "kind": "Method",
    "detail": "Function (* ppvObject = reinterpret_cast<)",
    "insertText": "IDxcUnsavedFile(this)"
  },
  {
    "label": "IDxcUnsavedFile()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<)",
    "insertText": "IDxcUnsavedFile(this)->AddRef()"
  },
  {
    "label": "pFileName()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "pFileName(LPSTR)CoTaskMemAlloc(1 + strlen(m_fileName))"
  },
  {
    "label": "strcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strcpy(*pFileName, m_fileName)"
  },
  {
    "label": "pContents()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "pContents(LPSTR)CoTaskMemAlloc(m_length + 1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(*pContents, m_contents, m_length + 1)"
  },
  {
    "label": "HlslIntellisenseSupport()",
    "kind": "Method",
    "detail": "Function (* pLength = m_length ; return S_OK ; } } ; class HlslIntellisenseSupport : public dxc::DxcDllSupport { public :)",
    "insertText": "HlslIntellisenseSupport()"
  },
  {
    "label": "HlslIntellisenseSupport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HlslIntellisenseSupport(HlslIntellisenseSupport &&other) : dxc::DxcDllSupport(std::move(other))"
  },
  {
    "label": "CreateIntellisense()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "CreateIntellisense(IDxcIntelliSense **pResult)"
  },
  {
    "label": "CompilationResult()",
    "kind": "Method",
    "detail": "Function (} } ; class CompilationResult { private : std::shared_ptr<HlslIntellisenseSupport> IsenseSupport ; CComPtr<IDxcIntelliSense> Intellisense ; CComPtr<IDxcIndex> Index ; unsigned NumDiagnostics ; unsigned NumErrorDiagnostics ; std::vector<std::string> DiagnosticMessages ; std::vector<DxcDiagnosticSeverity> DiagnosticSeverities ;)",
    "insertText": "CompilationResult(const CompilationResult &)"
  },
  {
    "label": "CompilationResult()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CompilationResult(std::shared_ptr<HlslIntellisenseSupport> support, IDxcIntelliSense *isense, IDxcIndex *index, IDxcTranslationUnit *tu) : IsenseSupport(support), Intellisense(isense), Index(index), NumErrorDiagnostics(0), TU(tu)"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (} else { NumDiagnostics = 0 ; } DxcDiagnosticDisplayOptions diagnosticOptions ;)",
    "insertText": "IFE(isense->GetDefaultDiagnosticDisplayOptions(&diagnosticOptions))"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcDiagnostic> diagnostic ;)",
    "insertText": "IFE(tu->GetDiagnostic(i, &diagnostic))"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (LPSTR format ;)",
    "insertText": "IFE(diagnostic->FormatDiagnostic(diagnosticOptions, &format))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (DiagnosticMessages .)",
    "insertText": "push_back(std::string(format))"
  },
  {
    "label": "CoTaskMemFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CoTaskMemFree(format)"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (DxcDiagnosticSeverity severity ;)",
    "insertText": "IFE(diagnostic->GetSeverity(&severity))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (DiagnosticSeverities .)",
    "insertText": "push_back(severity)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (NumErrorDiagnostics + + ; } })",
    "insertText": "assert(NumErrorDiagnostics <= NumDiagnostics && \"else counting code in loop is incorrect\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DiagnosticMessages.size() == NumDiagnostics && \"else some diagnostics have no message\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DiagnosticSeverities.size() == NumDiagnostics && \"else some diagnostics have no severity\")"
  },
  {
    "label": "CompilationResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CompilationResult(CompilationResult &&other) : IsenseSupport(std::move(other.IsenseSupport))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Intellisense = other . Intellisense ; other . Intellisense = nullptr ; Index = other . Index ; other . Index = nullptr ; TU = other . TU ; other . TU = nullptr ; NumDiagnostics = other . NumDiagnostics ; NumErrorDiagnostics = other . NumErrorDiagnostics ; DiagnosticMessages =)",
    "insertText": "move(other.DiagnosticMessages)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (DiagnosticSeverities =)",
    "insertText": "move(other.DiagnosticSeverities)"
  },
  {
    "label": "CompilationResult()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CompilationResult()"
  },
  {
    "label": "Dispose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispose()"
  },
  {
    "label": "getDefaultFileName()",
    "kind": "Method",
    "detail": "Function (} CComPtr<IDxcTranslationUnit> TU ; const char*)",
    "insertText": "getDefaultFileName()"
  },
  {
    "label": "support()",
    "kind": "Method",
    "detail": "Function (std::shared_ptr<HlslIntellisenseSupport>)",
    "insertText": "support(GetHlslSupport())"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcIntelliSense> isense ;)",
    "insertText": "IFE(support->CreateIntellisense(&isense))"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcUnsavedFile> unsavedFile ;)",
    "insertText": "IFE(TrivialDxcUnsavedFile::Create(fileName, text, &unsavedFile))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DxcTranslationUnitFlags localOptions ;)",
    "insertText": "if(options == nullptr)"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (} else { localOptions =* options ; })",
    "insertText": "IFE(tuIndex->ParseTranslationUnit(fileName, commandLineArgs, commandLineArgsCount, &(unsavedFile.p), 1, localOptions, &tu))"
  },
  {
    "label": "CreateForProgram()",
    "kind": "Method",
    "detail": "Function (} CompilationResult)",
    "insertText": "CreateForProgram(const char *text, size_t textLen, DxcTranslationUnitFlags *options = nullptr)"
  },
  {
    "label": "_countof()",
    "kind": "Method",
    "detail": "Function (const char* commandLineArgs [ ] = { \" - c \",\" - ferror - limit = 2 0 0 \" } ; unsigned commandLineArgsCount =)",
    "insertText": "_countof(commandLineArgs)"
  },
  {
    "label": "CreateForCommandLine()",
    "kind": "Method",
    "detail": "Function (} CompilationResult)",
    "insertText": "CreateForCommandLine(char *arguments, const char *fileName)"
  },
  {
    "label": "CreateForCommandLine()",
    "kind": "Method",
    "detail": "Function (} CompilationResult)",
    "insertText": "CreateForCommandLine(char *arguments, const char *fileName, std::shared_ptr<HlslIntellisenseSupport> support)"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (CComPtr<IDxcIndex> tuIndex ; CComPtr<IDxcTranslationUnit> tu ; const char* commandLineArgs [ 3 2 ] ; unsigned commandLineArgsCount = 0 ; char* nextArg = arguments ; commandLineArgs [ commandLineArgsCount + + ] = \" - ferror - limit = 2 0 0 0 \" ; commandLineArgs [ commandLineArgsCount + + ] = \" - fspell - checking \" ; commandLineArgs [ commandLineArgsCount + + ] = \" - fno - color - diagnostics \" ;)",
    "insertText": "IFE(isense->CreateIndex(&tuIndex))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (commandLineArgs [ commandLineArgsCount + + ] = nextArg ;)",
    "insertText": "while((*nextArg != '\\0'))"
  },
  {
    "label": "IFE()",
    "kind": "Method",
    "detail": "Function (* nextArg = 0 ; commandLineArgs [ commandLineArgsCount + + ] = nextArg + 1 ; } nextArg + + ; } } DxcTranslationUnitFlags options ;)",
    "insertText": "IFE(isense->GetDefaultEditingTUOptions(&options))"
  },
  {
    "label": "IsTUAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTUAvailable()"
  },
  {
    "label": "GetTextForErrors()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "GetTextForErrors()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DiagnosticMessages.size() == NumDiagnostics && \"otherwise some diagnostics have no message\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DiagnosticSeverities.size() == NumDiagnostics && \"otherwise some diagnostics have no severity\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::stringstream ostr ;)",
    "insertText": "for(size_t i = 0; i < DiagnosticMessages.size(); i++)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (ostr<<DiagnosticMessages [ i ]<<' \\ n ' ; } } return ostr .)",
    "insertText": "str()"
  },
  {
    "label": "CursorStringData()",
    "kind": "Method",
    "detail": "Function (TU = nullptr ; Index = nullptr ; Intellisense = nullptr ; IsenseSupport = nullptr ; } private : # if SUPPORTS_CURSOR_WALK struct CursorStringData { std::stringstream& ostr ; std::vector<CXCursor> cursors ;)",
    "insertText": "CursorStringData(std::stringstream &the_ostr) : ostr(the_ostr)"
  },
  {
    "label": "AppendCursorStringCallback()",
    "kind": "Method",
    "detail": "Function (} } ; CXChildVisitResult)",
    "insertText": "AppendCursorStringCallback(CXCursor cursor, CXCursor parent, CXClientData client_data)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (CursorStringData*)",
    "insertText": "d(CursorStringData *)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto cursorsStart =)",
    "insertText": "begin(d->cursors)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (auto cursorsEnd =)",
    "insertText": "end(d->cursors)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto parentLocation =)",
    "insertText": "find(cursorsStart, cursorsEnd, parent)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(parentLocation != cursorsEnd && \"otherwise the parent was not visited previously\")"
  },
  {
    "label": "AppendCursorString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCursorString(cursor, parentLocation - cursorsStart, d->ostr)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (d -> cursors .)",
    "insertText": "resize(1 + (parentLocation - cursorsStart))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (d -> cursors .)",
    "insertText": "push_back(cursor)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (std::streamsize prior = ostr .)",
    "insertText": "width()"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (ostr .)",
    "insertText": "width(indent)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (ostr<<' ' ; ostr .)",
    "insertText": "width(prior)"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (} CComPtr<IDxcType> type ; DxcCursorKind kind ; cursor ->)",
    "insertText": "GetKind(&kind)"
  },
  {
    "label": "GetCursorType()",
    "kind": "Method",
    "detail": "Function (cursor ->)",
    "insertText": "GetCursorType(&type)"
  },
  {
    "label": "GetSpelling()",
    "kind": "Method",
    "detail": "Function (LPSTR name ; type ->)",
    "insertText": "GetSpelling(&name)"
  },
  {
    "label": "CoTaskMemFree()",
    "kind": "Method",
    "detail": "Function (ostr<<\" [ type \"<<name<<\" ] \" ;)",
    "insertText": "CoTaskMemFree(name)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} ostr<<' \\ n ' ; IDxcCursor** children = nullptr ; unsigned childrenCount ; cursor ->)",
    "insertText": "GetChildren(0, 64, &childrenCount, &children)"
  },
  {
    "label": "AppendCursorString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCursorString(children[i], indent + 1, ostr)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (children [ i ] ->)",
    "insertText": "Release()"
  },
  {
    "label": "BuildASTString()",
    "kind": "Method",
    "detail": "Function (} public : std::string)",
    "insertText": "BuildASTString()"
  },
  {
    "label": "AppendCursorString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCursorString(cursor, 0, ostr)"
  }
]