[
  {
    "label": "Config",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Config"
  },
  {
    "label": "BinaryReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryReader"
  },
  {
    "label": "BinaryWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryWriter"
  },
  {
    "label": "ConnectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConnectionInfo"
  },
  {
    "label": "NetworkServerCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkServerCreateInfo"
  },
  {
    "label": "MessageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MessageInfo"
  },
  {
    "label": "NetworkServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkServer"
  },
  {
    "label": "ClientStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClientStats"
  },
  {
    "label": "Worker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Worker"
  },
  {
    "label": "WorkerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkerContext"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "CryptoEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CryptoEntry"
  },
  {
    "label": "WorkerRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WorkerRec"
  },
  {
    "label": "OnDisconnectEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OnDisconnectEntry"
  },
  {
    "label": "AdditionalWork",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdditionalWork"
  },
  {
    "label": "Client",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Client"
  },
  {
    "label": "GetUid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCrypto . h \" # include \" UbaEvent . h \" # include \" UbaTimer . h \" # include \" UbaNetwork . h \" # include \" UbaNetworkBackend . h \" # include \" UbaLogger . h \" # include \" UbaThread . h \" # include \" UbaWorkManager . h \" namespace uba { class Config ; struct BinaryReader ; struct BinaryWriter ; struct ConnectionInfo { const Guid&)",
    "insertText": "GetUid()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetId()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetName(StringBufferBase& out)"
  },
  {
    "label": "ShouldDisconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisconnect()"
  },
  {
    "label": "NetworkServerCreateInfo()",
    "kind": "Method",
    "detail": "Function (void* internalData = nullptr ; } ; struct NetworkServerCreateInfo {)",
    "insertText": "NetworkServerCreateInfo(LogWriter& w = g_consoleLogWriter) : logWriter(w)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(Config& config)"
  },
  {
    "label": "NetworkServer()",
    "kind": "Method",
    "detail": "Function (LogWriter& logWriter ; u32 workerCount = 0 ; u32 sendSize = SendDefaultSize ; u32 receiveTimeoutSeconds = 0 ; } ; struct MessageInfo { u32 connectionId ; u16 messageId ; u8 type ; } ; class NetworkServer : public WorkManager { public :)",
    "insertText": "NetworkServer(bool& outCtorSuccess, const NetworkServerCreateInfo& info = {}, const tchar* name = TC(\"UbaServer\"))"
  },
  {
    "label": "NetworkServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkServer()"
  },
  {
    "label": "StartListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListen(NetworkBackend& backend, u16 port = DefaultPort, const tchar* ip = TC(\"0.0.0.0\"), bool requiresCrypto = false)"
  },
  {
    "label": "DisallowNewClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowNewClients()"
  },
  {
    "label": "DisconnectClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectClients()"
  },
  {
    "label": "RegisterCryptoKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterCryptoKey(const u8* cryptoKey128, u64 expirationTime = ~u64(0))"
  },
  {
    "label": "AddClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddClient(NetworkBackend& backend, const tchar* ip, u16 port = DefaultPort, const u8* cryptoKey128 = nullptr)"
  },
  {
    "label": "PrintSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummary(Logger& logger)"
  },
  {
    "label": "tchar()",
    "kind": "Method",
    "detail": "Function (using TypeToNameFunction = const)",
    "insertText": "tchar(u8 type)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using WorkerFunction = Function<)",
    "insertText": "bool(const ConnectionInfo& connectionInfo, MessageInfo& messageInfo, BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "RegisterService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterService(u8 serviceId, const WorkerFunction& function, TypeToNameFunction* typeToNameFunc = nullptr)"
  },
  {
    "label": "UnregisterService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterService(u8 serviceId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnConnectionFunction = Function<)",
    "insertText": "void(const Guid& clientUid, u32 clientId)"
  },
  {
    "label": "RegisterOnClientConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnClientConnected(u8 id, const OnConnectionFunction& func)"
  },
  {
    "label": "UnregisterOnClientConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnClientConnected(u8 id)"
  },
  {
    "label": "RegisterOnClientDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnClientDisconnected(u8 id, const OnDisconnectFunction& func)"
  },
  {
    "label": "UnregisterOnClientDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnClientDisconnected(u8 id)"
  },
  {
    "label": "AddWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWork(const Function<void()>& work, u32 count, const tchar* desc, bool highPriority = false)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork(u32 count = 1)"
  },
  {
    "label": "GetWorkerCount()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetWorkerCount()"
  },
  {
    "label": "GetLogger()",
    "kind": "Method",
    "detail": "Function (struct ClientStats { u64 send = 0 ; u64 recv = 0 ; u32 connectionCount = 0 ; } ; MutableLogger&)",
    "insertText": "GetLogger()"
  },
  {
    "label": "GetTotalSentBytes()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalSentBytes()"
  },
  {
    "label": "GetTotalRecvBytes()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalRecvBytes()"
  },
  {
    "label": "GetConnectionCount()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetConnectionCount()"
  },
  {
    "label": "GetClientStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClientStats(ClientStats& out, u32 clientId)"
  },
  {
    "label": "DoAdditionalWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoAdditionalWork()"
  },
  {
    "label": "SendResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendResponse(const MessageInfo& info, const u8* body, u32 bodySize)"
  },
  {
    "label": "PopWorker()",
    "kind": "Method",
    "detail": "Function (class Worker ; private : struct WorkerContext ; class Connection ; ConnectionInfo ; Worker*)",
    "insertText": "PopWorker()"
  },
  {
    "label": "PopWorkerNoLock()",
    "kind": "Method",
    "detail": "Function (Worker*)",
    "insertText": "PopWorkerNoLock()"
  },
  {
    "label": "PushWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushWorker(Worker* worker)"
  },
  {
    "label": "PushWorkerNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushWorkerNoLock(Worker* worker)"
  },
  {
    "label": "FlushWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushWorkers()"
  },
  {
    "label": "HandleSystemMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSystemMessage(const ConnectionInfo& connectionInfo, u8 messageType, BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddConnection(NetworkBackend& backend, void* backendConnection, const sockaddr& remoteSocketAddr, bool requiresCrypto, CryptoKey cryptoKey)"
  },
  {
    "label": "RemoveDisconnectedConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDisconnectedConnections()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (MutableLogger m_logger ; struct CryptoEntry { CryptoKey key ; u64 expirationTime ; } ; ReaderWriterLock m_cryptoKeysLock ; List<CryptoEntry> m_cryptoKeys ; Guid m_uid ; bool m_allowNewClients = true ; struct WorkerRec { WorkerFunction func ; TypeToNameFunction* toString = nullptr ; } ; WorkerRec m_workerFunctions [ 4 ] ; OnConnectionFunction m_onConnectionFunction ; struct OnDisconnectEntry { u8 id ; OnDisconnectFunction function ; } ; ReaderWriterLock m_onDisconnectFunctionsLock ; List<OnDisconnectEntry> m_onDisconnectFunctions ; u32 m_maxWorkerCount = 0 ; ReaderWriterLock m_additionalWorkLock ; struct AdditionalWork { Function<)",
    "insertText": "void()"
  },
  {
    "label": "Client()",
    "kind": "Method",
    "detail": "Function (TString desc ; } ; List<AdditionalWork> m_additionalWork ; ReaderWriterLock m_availableWorkersLock ; Worker* m_firstAvailableWorker = nullptr ; Worker* m_firstActiveWorker = nullptr ; Event m_workerAvailable ; u32 m_sendSize = 0 ; u32 m_receiveTimeoutMs = 0 ; u32 m_createdWorkerCount = 0 ; u32 m_maxCreatedWorkerCount = 0 ; bool m_workersEnabled = true ; ReaderWriterLock m_addConnectionsLock ; List<Thread> m_addConnections ; ReaderWriterLock m_connectionsLock ; List<Connection> m_connections ; u32 m_connectionIdCounter = 1 ; u32 m_maxActiveConnections = 0 ; struct Client { public :)",
    "insertText": "Client(const Guid& uid_, u32 id_) : uid(uid_), id(id_)"
  },
  {
    "label": "NetworkServer()",
    "kind": "Method",
    "detail": "Function (} Guid uid ; u32 id ; Atomic<u32> connectionCount ; Atomic<u64> sendBytes ; Atomic<u64> recvBytes ; } ; ReaderWriterLock m_clientsLock ; UnorderedMap<u32,Client> m_clients ; Timer m_sendTimer ; Timer m_sendRawTimer ; Timer m_encryptTimer ; Timer m_decryptTimer ; Atomic<u64> m_sendBytes ; Atomic<u64> m_recvBytes ; Atomic<u32> m_recvCount ;)",
    "insertText": "NetworkServer(const NetworkServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const NetworkServer&)"
  }
]