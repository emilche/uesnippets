[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TConsumeAllMpmcQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConsumeAllMpmcQueue"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UnrealTemplate . h \" # include<atomic> # include<type_traits> namespace UE { enum class EConsumeAllMpmcQueueResult { HadItems,WasEmpty,} ; template<T,AllocatorType = FMemory> class TConsumeAllMpmcQueue final { private : struct FNode { std::atomic<FNode*> Next { nullptr } ; TTypeCompatibleBytes<T> Item ; } ; std::atomic<FNode*> Head { nullptr } ; public :)",
    "insertText": "UE_NONCOPYABLE(TConsumeAllMpmcQueue)"
  },
  {
    "label": "TConsumeAllMpmcQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TConsumeAllMpmcQueue()"
  },
  {
    "label": "ConsumeAllLifo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeAllLifo([](T&&){})"
  },
  {
    "label": "ProduceItem()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes> EConsumeAllMpmcQueueResult)",
    "insertText": "ProduceItem(ArgTypes&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FNode* New)",
    "insertText": "new(AllocatorType::Malloc(sizeof(FNode), alignof(FNode)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&New->Item) T(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* Prev = Head .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!Head.compare_exchange_weak(Prev, New, std::memory_order_acq_rel, std::memory_order_relaxed))"
  },
  {
    "label": "ConsumeAllFifo()",
    "kind": "Method",
    "detail": "Function (} template<F> EConsumeAllMpmcQueueResult)",
    "insertText": "ConsumeAllFifo(const F& Consumer)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ConsumeAll()",
    "kind": "Method",
    "detail": "Function (} private : template<bool bReverse,F> EConsumeAllMpmcQueueResult)",
    "insertText": "ConsumeAll(const F& Consumer)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* Node = Head .)",
    "insertText": "exchange(nullptr, std::memory_order_acq_rel)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FNode* Prev = nullptr ;)",
    "insertText": "while(Node)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* Tmp = Node ; Node = Node -> Next .)",
    "insertText": "exchange(Prev, std::memory_order_relaxed)"
  },
  {
    "label": "GetTypedPtr()",
    "kind": "Method",
    "detail": "Function (T* ValuePtr = Node -> Item .)",
    "insertText": "GetTypedPtr()"
  },
  {
    "label": "Consumer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consumer(MoveTemp(*ValuePtr))"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(ValuePtr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Node)"
  }
]