[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FPreloadableArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreloadableArchive"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "IPackageResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageResourceManager"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FFileStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileStatData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FOpenPackageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenPackageResult"
  },
  {
    "label": "FOpenAsyncPackageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenAsyncPackageResult"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Delegates / Delegate . h \" # include \" Features / IModularFeature . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformFile . h \" # include \" Logging / LogMacros . h \" # include \" Misc / PackageName . h \" # include \" Misc / PackagePath . h \" # include \" Misc / PackageSegment . h \" # include \" Modules / ModuleInterface . h \" # include \" Serialization / Archive . h \" # include \" Serialization / BulkDataCookedIndex . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" class FArchive ; class FName ; class FPreloadableArchive ; class IAsyncReadFileHandle ; class IAsyncReadRequest ; class IMappedFileHandle ; class IPackageResourceManager ; class UPackage ; struct FFileStatData ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPackageResourceManager, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(IPackageResourceManager*, FSetPackageResourceManager)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnClearPackageResourceManager)"
  },
  {
    "label": "ExtensionToPackageFormat()",
    "kind": "Method",
    "detail": "Function (enum class EPackageFormat : uint8 { Binary,Text,} ; EPackageFormat)",
    "insertText": "ExtensionToPackageFormat(EPackageExtension Extension)"
  },
  {
    "label": "CopyMetaData()",
    "kind": "Method",
    "detail": "Function (struct FOpenPackageResult { TUniquePtr<FArchive> Archive ; EPackageFormat Format = EPackageFormat::Binary ; bool bNeedsEngineVersionChecks = true ; void)",
    "insertText": "CopyMetaData(const FOpenPackageResult& Other)"
  },
  {
    "label": "FOpenAsyncPackageResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenAsyncPackageResult(const FOpenAsyncPackageResult&)"
  },
  {
    "label": "FOpenAsyncPackageResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenAsyncPackageResult(FOpenAsyncPackageResult&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult&)",
    "insertText": "operator(const FOpenAsyncPackageResult&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult&)",
    "insertText": "operator(FOpenAsyncPackageResult&&)"
  },
  {
    "label": "FOpenAsyncPackageResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenAsyncPackageResult(TUniquePtr<IAsyncReadFileHandle>&& InHandle, EPackageFormat InFormat, bool bInNeedsEngineVersionChecks = true)"
  },
  {
    "label": "FOpenAsyncPackageResult()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenAsyncPackageResult()"
  },
  {
    "label": "IPackageResourceManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IPackageResourceManager()"
  },
  {
    "label": "SupportsLocalOnlyPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsLocalOnlyPaths()"
  },
  {
    "label": "SupportsPackageOnlyPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPackageOnlyPaths()"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(const FPackagePath& PackagePath, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const FPackagePath& PackagePath, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenReadPackage()",
    "kind": "Method",
    "detail": "Function (FOpenPackageResult)",
    "insertText": "OpenReadPackage(const FPackagePath& PackagePath, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenAsyncReadPackage()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult)",
    "insertText": "OpenAsyncReadPackage(const FPackagePath& PackagePath)"
  },
  {
    "label": "OpenMappedHandleToPackage()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "OpenMappedHandleToPackage(const FPackagePath& PackagePath, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "TryMatchCaseOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMatchCaseOnDisk(const FPackagePath& PackagePath, FPackagePath* OutNormalizedPath = nullptr)"
  },
  {
    "label": "OpenReadExternalResource()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive>)",
    "insertText": "OpenReadExternalResource(EPackageExternalResource ResourceType, FStringView Identifier)"
  },
  {
    "label": "OpenAsyncReadExternalResource()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult)",
    "insertText": "OpenAsyncReadExternalResource(EPackageExternalResource ResourceType, FStringView Identifier)"
  },
  {
    "label": "DoesExternalResourceExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesExternalResourceExist(EPackageExternalResource ResourceType, FStringView Identifier)"
  },
  {
    "label": "FindPackagesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPackagesRecursive(TArray<FPackagePath>& OutPackages, FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FStringView BasenameWildcard)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(const FPackagePath& PackagePath)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(const FPackagePath& PackagePath, const FFileStatData& StatData)"
  },
  {
    "label": "IteratePackagesInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FPackagePathVisitor Callback)"
  },
  {
    "label": "IteratePackagesInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInLocalOnlyDirectory(FStringView RootDir, FPackagePathVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FPackagePathStatVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInLocalOnlyDirectory(FStringView RootDir, FPackagePathStatVisitor Callback)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetSetPackageResourceManagerDelegate()",
    "kind": "Method",
    "detail": "Function (FSetPackageResourceManager&)",
    "insertText": "GetSetPackageResourceManagerDelegate()"
  },
  {
    "label": "GetOnClearPackageResourceManagerDelegate()",
    "kind": "Method",
    "detail": "Function (FOnClearPackageResourceManager&)",
    "insertText": "GetOnClearPackageResourceManagerDelegate()"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesPackageExist(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FileSize(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenReadPackage()",
    "kind": "Method",
    "detail": "Function (} FOpenPackageResult)",
    "insertText": "OpenReadPackage(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenAsyncReadPackage()",
    "kind": "Method",
    "detail": "Function (} FOpenAsyncPackageResult)",
    "insertText": "OpenAsyncReadPackage(const FPackagePath& PackagePath, FBulkDataCookedIndex CookedIndex, EPackageSegment PackageSegment)"
  },
  {
    "label": "OpenMappedHandleToPackage()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "OpenMappedHandleToPackage(const FPackagePath& PackagePath, EPackageSegment PackageSegment, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "FindPackagesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPackagesRecursive(TArray<TPair<FPackagePath, EPackageSegment>>& OutPackages, FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FStringView BasenameWildcard)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(const FPackagePath& PackagePath, EPackageSegment PackageSegment)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(const FPackagePath& PackagePath, EPackageSegment PackageSegment, const FFileStatData& StatData)"
  },
  {
    "label": "IteratePackagesInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FPackageSegmentVisitor Callback)"
  },
  {
    "label": "IteratePackagesInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInLocalOnlyDirectory(FStringView RootDir, FPackageSegmentVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath, FPackageSegmentStatVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInLocalOnlyDirectory(FStringView RootDir, FPackageSegmentStatVisitor Callback)"
  },
  {
    "label": "TryRegisterPreloadableArchive()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "TryRegisterPreloadableArchive(const FPackagePath& PackagePath, const TSharedPtr<FPreloadableArchive>& PreloadableArchive, const FOpenPackageResult& PackageFormat)"
  },
  {
    "label": "TryTakePreloadableArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryTakePreloadableArchive(const FPackagePath& PackagePath, FOpenPackageResult& OutResult)"
  },
  {
    "label": "UnRegisterPreloadableArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnRegisterPreloadableArchive(const FPackagePath& PackagePath)"
  },
  {
    "label": "IsEditorDomainEnabled()",
    "kind": "Method",
    "detail": "Function (private : TMap<FName,TPair<TSharedPtr<FPreloadableArchive>,FOpenPackageResult>> PreloadedPaths ; FCriticalSection PreloadedPathsLock ; # endif } ; # if WITH_EDITOR enum class EEditorDomainEnabled : uint8 { Disabled,Utilities,PackageResourceManager,} ; EEditorDomainEnabled)",
    "insertText": "IsEditorDomainEnabled()"
  }
]