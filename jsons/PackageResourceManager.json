[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FPreloadableArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreloadableArchive"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IAsyncReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadRequest"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "IPackageResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageResourceManager"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FFileStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileStatData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FOpenPackageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenPackageResult"
  },
  {
    "label": "FOpenAsyncPackageResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenAsyncPackageResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPackageResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageResourceManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ExtensionToPackageFormat()",
    "kind": "Method",
    "detail": "Function (EPackageFormat)",
    "insertText": "ExtensionToPackageFormat(EPackageExtension Extension)"
  },
  {
    "label": "FOpenAsyncPackageResult()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FOpenAsyncPackageResult(TUniquePtr<IAsyncReadFileHandle>&& InHandle, EPackageFormat InFormat, bool bInNeedsEngineVersionChecks = true)"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(const FPackagePath& PackagePath, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const FPackagePath& PackagePath,\tFPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenReadPackage()",
    "kind": "Method",
    "detail": "Function (FOpenPackageResult)",
    "insertText": "OpenReadPackage(const FPackagePath& PackagePath, FPackagePath* OutUpdatedPath = nullptr)"
  },
  {
    "label": "OpenAsyncReadPackage()",
    "kind": "Method",
    "detail": "Function (FOpenAsyncPackageResult)",
    "insertText": "OpenAsyncReadPackage(const FPackagePath& PackagePath)"
  },
  {
    "label": "FindPackagesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPackagesRecursive(TArray<FPackagePath>& OutPackages, FStringView PackageMount,\n\t\tFStringView FileMount, FStringView RootRelPath, FStringView BasenameWildcard)"
  },
  {
    "label": "IteratePackagesInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath,\n\t\tFPackagePathVisitor Callback)"
  },
  {
    "label": "IteratePackagesInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInLocalOnlyDirectory(FStringView RootDir, FPackagePathVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInPath(FStringView PackageMount, FStringView FileMount, FStringView RootRelPath,\n\t\tFPackagePathStatVisitor Callback)"
  },
  {
    "label": "IteratePackagesStatInLocalOnlyDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesStatInLocalOnlyDirectory(FStringView RootDir, FPackagePathStatVisitor Callback)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DoesPackageExist(PackagePath, FBulkDataCookedIndex::Default, PackageSegment, OutUpdatedPath)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FileSize(PackagePath, FBulkDataCookedIndex::Default, PackageSegment, OutUpdatedPath)"
  },
  {
    "label": "OpenReadPackage()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OpenReadPackage(PackagePath, FBulkDataCookedIndex::Default, PackageSegment, OutUpdatedPath)"
  },
  {
    "label": "OpenAsyncReadPackage()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OpenAsyncReadPackage(PackagePath, FBulkDataCookedIndex::Default, PackageSegment)"
  },
  {
    "label": "TryRegisterPreloadableArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRegisterPreloadableArchive(const FPackagePath& PackagePath,\n\t\tconst TSharedPtr<FPreloadableArchive>& PreloadableArchive, const FOpenPackageResult& PackageFormat)"
  },
  {
    "label": "TryTakePreloadableArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryTakePreloadableArchive(const FPackagePath& PackagePath, FOpenPackageResult& OutResult)"
  },
  {
    "label": "UnRegisterPreloadableArchive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnRegisterPreloadableArchive(const FPackagePath& PackagePath)"
  },
  {
    "label": "IsEditorDomainEnabled()",
    "kind": "Method",
    "detail": "Function (EEditorDomainEnabled)",
    "insertText": "IsEditorDomainEnabled()"
  }
]