[
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "ECopyOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECopyOptions"
  },
  {
    "label": "FCopyOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopyOptions"
  },
  {
    "label": "GetComponentForAttachedObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / SlateDelegates . h \" # include \" ClassViewerModule . h \" class UAnimInstance ; class USceneComponent ; class UAnimBlueprint ; class SWidget ; class UAnimSequenceBase ; namespace PersonaUtils { USceneComponent*)",
    "insertText": "GetComponentForAttachedObject(USceneComponent* PreviewComponent, class UObject* Object, const FName& AttachedTo)"
  },
  {
    "label": "FCopyOptions()",
    "kind": "Method",
    "detail": "Function (enum ECopyOptions : int32 { Default = 0,PreviewOnly = 1<<0,CallPostEditChangeProperty = 1<<1,OnlyCopyEditOrInterpProperties = 1<<2,FilterBlueprintReadOnly = 1<<3,} ; struct FCopyOptions {)",
    "insertText": "FCopyOptions(const ECopyOptions InFlags) : Flags(InFlags)"
  },
  {
    "label": "CanCopyProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCopyProperty(FProperty& Property, UObject& Object)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ECopyOptions Flags ; TFunction<)",
    "insertText": "bool(FProperty&, UObject&)"
  },
  {
    "label": "CopyPropertiesToCDO()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "CopyPropertiesToCDO(UAnimInstance* InAnimInstance, const FCopyOptions& Options = FCopyOptions(ECopyOptions::Default))"
  },
  {
    "label": "SetObjectBeingDebugged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectBeingDebugged(UAnimBlueprint* InAnimBlueprint, UAnimInstance* InAnimInstance)"
  },
  {
    "label": "MakeTrackButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTrackButton(FText HoverText, FOnGetContent MenuContent, const TAttribute<bool>& HoverState)"
  },
  {
    "label": "MakeAnimNotifyPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAnimNotifyPicker(UAnimSequenceBase* Sequence, const FOnClassPicked& OnClassPicked)"
  },
  {
    "label": "MakeAnimNotifyStatePicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAnimNotifyStatePicker(UAnimSequenceBase* Sequence, const FOnClassPicked& OnClassPicked)"
  }
]