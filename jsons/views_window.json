[
  {
    "label": "ViewsWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ViewsWindow"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "ExtensionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtensionInfo"
  },
  {
    "label": "WithControls()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_VIEWS_WINDOW_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_VIEWS_WINDOW_H_ # pragma once # include<set> # include<string> # include<vector> # include \" include / base / cef_callback_forward . h \" # include \" include / cef_menu_model_delegate . h \" # include \" include / views / cef_browser_view . h \" # include \" include / views / cef_browser_view_delegate . h \" # include \" include / views / cef_button_delegate . h \" # include \" include / views / cef_label_button . h \" # include \" include / views / cef_menu_button . h \" # include \" include / views / cef_menu_button_delegate . h \" # include \" include / views / cef_textfield . h \" # include \" include / views / cef_textfield_delegate . h \" # include \" include / views / cef_window . h \" # include \" include / views / cef_window_delegate . h \" # include \" tests / cefclient / browser / image_cache . h \" # include \" tests / cefclient / browser / views_menu_bar . h \" namespace client { typedef std::set<CefRefPtr<CefExtension>> ExtensionSet ; class ViewsWindow : public CefBrowserViewDelegate,public CefMenuButtonDelegate,public CefMenuModelDelegate,public CefTextfieldDelegate,public CefWindowDelegate,public ViewsMenuBar::Delegate { public : class Delegate { public : bool)",
    "insertText": "WithControls()"
  },
  {
    "label": "WithExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WithExtension()"
  },
  {
    "label": "InitiallyHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitiallyHidden()"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "GetWindowBounds()",
    "kind": "Method",
    "detail": "Function (CefRect)",
    "insertText": "GetWindowBounds()"
  },
  {
    "label": "GetImageCache()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<ImageCache>)",
    "insertText": "GetImageCache()"
  },
  {
    "label": "OnViewsWindowCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewsWindowCreated(CefRefPtr<ViewsWindow> window)"
  },
  {
    "label": "OnViewsWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewsWindowDestroyed(CefRefPtr<ViewsWindow> window)"
  },
  {
    "label": "OnViewsWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewsWindowActivated(CefRefPtr<ViewsWindow> window)"
  },
  {
    "label": "GetDelegateForPopup()",
    "kind": "Method",
    "detail": "Function (Delegate*)",
    "insertText": "GetDelegateForPopup(CefRefPtr<CefClient> client)"
  },
  {
    "label": "CreateExtensionWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExtensionWindow(CefRefPtr<CefExtension> extension, const CefRect& source_bounds, CefRefPtr<CefWindow> parent_window, const base::Closure& close_callback)"
  },
  {
    "label": "OnTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTest(int test_id)"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExit()"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; CefRefPtr<ViewsWindow>)",
    "insertText": "Create(Delegate* delegate, CefRefPtr<CefClient> client, const CefString& url, const CefBrowserSettings& settings, CefRefPtr<CefRequestContext> request_context)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(const CefRect& bounds)"
  },
  {
    "label": "SetBrowserSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBrowserSize(const CefSize& size, bool has_position, const CefPoint& position)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(bool force)"
  },
  {
    "label": "SetAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAddress(const std::string& url)"
  },
  {
    "label": "SetTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitle(const std::string& title)"
  },
  {
    "label": "SetFavicon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFavicon(CefRefPtr<CefImage> image)"
  },
  {
    "label": "SetFullscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFullscreen(bool fullscreen)"
  },
  {
    "label": "SetAlwaysOnTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlwaysOnTop(bool on_top)"
  },
  {
    "label": "SetLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadingState(bool isLoading, bool canGoBack, bool canGoForward)"
  },
  {
    "label": "SetDraggableRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggableRegions(const std::vector<CefDraggableRegion>& regions)"
  },
  {
    "label": "TakeFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeFocus(bool next)"
  },
  {
    "label": "OnBeforeContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeContextMenu(CefRefPtr<CefMenuModel> model)"
  },
  {
    "label": "OnExtensionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionsChanged(const ExtensionSet& extensions)"
  },
  {
    "label": "GetDelegateForPopupBrowserView()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowserViewDelegate>)",
    "insertText": "GetDelegateForPopupBrowserView(CefRefPtr<CefBrowserView> browser_view, const CefBrowserSettings& settings, CefRefPtr<CefClient> client, bool is_devtools)"
  },
  {
    "label": "OnPopupBrowserViewCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPopupBrowserViewCreated(CefRefPtr<CefBrowserView> browser_view, CefRefPtr<CefBrowserView> popup_browser_view, bool is_devtools)"
  },
  {
    "label": "GetChromeToolbarType()",
    "kind": "Method",
    "detail": "Function (ChromeToolbarType)",
    "insertText": "GetChromeToolbarType()"
  },
  {
    "label": "OnButtonPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnButtonPressed(CefRefPtr<CefButton> button)"
  },
  {
    "label": "OnMenuButtonPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuButtonPressed(CefRefPtr<CefMenuButton> menu_button, const CefPoint& screen_point, CefRefPtr<CefMenuButtonPressedLock> button_pressed_lock)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommand(CefRefPtr<CefMenuModel> menu_model, int command_id, cef_event_flags_t event_flags)"
  },
  {
    "label": "OnKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyEvent(CefRefPtr<CefTextfield> textfield, const CefKeyEvent& event)"
  },
  {
    "label": "OnWindowCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowCreated(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDestroyed(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefWindow>)",
    "insertText": "GetParentWindow(CefRefPtr<CefWindow> window, bool* is_menu, bool* can_activate_menu)"
  },
  {
    "label": "IsFrameless()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrameless(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "CanResize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResize(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "CanClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClose(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "OnAccelerator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAccelerator(CefRefPtr<CefWindow> window, int command_id)"
  },
  {
    "label": "OnKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyEvent(CefRefPtr<CefWindow> window, const CefKeyEvent& event)"
  },
  {
    "label": "GetMinimumSize()",
    "kind": "Method",
    "detail": "Function (CefSize)",
    "insertText": "GetMinimumSize(CefRefPtr<CefView> view)"
  },
  {
    "label": "OnFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocus(CefRefPtr<CefView> view)"
  },
  {
    "label": "OnBlur()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlur(CefRefPtr<CefView> view)"
  },
  {
    "label": "OnWindowChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowChanged(CefRefPtr<CefView> view, bool added)"
  },
  {
    "label": "MenuBarExecuteCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuBarExecuteCommand(CefRefPtr<CefMenuModel> menu_model, int command_id, cef_event_flags_t event_flags)"
  },
  {
    "label": "ViewsWindow()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ViewsWindow(Delegate* delegate, CefRefPtr<CefBrowserView> browser_view)"
  },
  {
    "label": "SetBrowserView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBrowserView(CefRefPtr<CefBrowserView> browser_view)"
  },
  {
    "label": "CreateMenuModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMenuModel()"
  },
  {
    "label": "CreateBrowseButton()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefLabelButton>)",
    "insertText": "CreateBrowseButton(const std::string& label, int id)"
  },
  {
    "label": "AddControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddControls()"
  },
  {
    "label": "AddAccelerators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAccelerators()"
  },
  {
    "label": "SetMenuFocusable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuFocusable(bool focusable)"
  },
  {
    "label": "EnableView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableView(int id, bool enable)"
  },
  {
    "label": "ShowTopControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTopControls(bool show)"
  },
  {
    "label": "UpdateExtensionControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExtensionControls()"
  },
  {
    "label": "OnExtensionIconsLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionIconsLoaded(const ExtensionSet& extensions, const ImageCache::ImageSet& images)"
  },
  {
    "label": "OnExtensionWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionWindowClosed()"
  },
  {
    "label": "ExtensionInfo()",
    "kind": "Method",
    "detail": "Function (Delegate* delegate_ ; CefRefPtr<CefBrowserView> browser_view_ ; bool frameless_ ; bool with_controls_ ; ChromeToolbarType chrome_toolbar_type_ ; CefRefPtr<CefWindow> window_ ; CefRefPtr<CefMenuModel> button_menu_model_ ; CefRefPtr<ViewsMenuBar> top_menu_bar_ ; CefRefPtr<CefView> top_toolbar_ ; CefRefPtr<CefView> location_ ; bool menu_has_focus_ ; int last_focused_view_ ; CefSize minimum_window_size_ ; struct ExtensionInfo {)",
    "insertText": "ExtensionInfo(CefRefPtr<CefExtension> extension, CefRefPtr<CefImage> image) : extension_(extension), image_(image)"
  },
  {
    "label": "IMPLEMENT_REFCOUNTING()",
    "kind": "Method",
    "detail": "Function (} CefRefPtr<CefExtension> extension_ ; CefRefPtr<CefImage> image_ ; } ; typedef std::vector<ExtensionInfo> ExtensionInfoSet ; ExtensionInfoSet extensions_ ; CefRefPtr<CefPanel> extensions_panel_ ; CefRefPtr<CefMenuButtonPressedLock> extension_button_pressed_lock_ ;)",
    "insertText": "IMPLEMENT_REFCOUNTING(ViewsWindow)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(ViewsWindow)"
  }
]