[
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_CYCLECLOCK_CONFIG_H_ # define ABSL_BASE_INTERNAL_CYCLECLOCK_CONFIG_H_ # include<cstdint> # include \" absl / base / config . h \" # include \" absl / base / internal / inline_variable . h \" # include \" absl / base / internal / unscaledcycleclock_config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace base_internal { # if ABSL_USE_UNSCALED_CYCLECLOCK # ifdef NDEBUG # ifdef ABSL_INTERNAL_UNSCALED_CYCLECLOCK_FREQUENCY_IS_CPU_FREQUENCY)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(int32_t, kCycleClockShift, 1)"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(int32_t, kCycleClockShift, 0)"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# endif # else)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(int32_t, kCycleClockShift, 2)"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(double, kCycleClockFrequencyScale, 1.0 / (1 << kCycleClockShift))"
  }
]