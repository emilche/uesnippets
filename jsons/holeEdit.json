[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrHoleEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrHoleEdit"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_HBRHOLEEDIT_H # define OPENSUBDIV3_HBRHOLEEDIT_H # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> class HbrHoleEdit ; template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& out, const HbrHoleEdit<T>& path)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (out<<\" edge)",
    "insertText": "path(\" << path.faceid << ' '; for (int i = 0; i < path.nsubfaces; ++i) { out << static_cast<int>(path.subfaces[i]) << ' '; } return out << \")"
  },
  {
    "label": "HbrHoleEdit()",
    "kind": "Method",
    "detail": "Function (} template<class T> class HbrHoleEdit : public HbrHierarchicalEdit<T> { public :)",
    "insertText": "HbrHoleEdit(int _faceid, int _nsubfaces, unsigned char *_subfaces) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces)"
  },
  {
    "label": "HbrHoleEdit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HbrHoleEdit(int _faceid, int _nsubfaces, int *_subfaces) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces)"
  },
  {
    "label": "HbrHoleEdit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "HbrHoleEdit()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} std::ostream& operator<<<)",
    "insertText": "T(std::ostream& out, const HbrHoleEdit<T>& path)"
  },
  {
    "label": "ApplyEditToFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEditToFace(HbrFace<T>* face)"
  },
  {
    "label": "SetHole()",
    "kind": "Method",
    "detail": "Function (face ->)",
    "insertText": "SetHole()"
  }
]