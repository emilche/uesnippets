[
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "IMediaModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaModule"
  },
  {
    "label": "IMediaMetadataItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaMetadataItem"
  },
  {
    "label": "UMediaPlaylist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlaylist"
  },
  {
    "label": "UMediaSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaSource"
  },
  {
    "label": "UMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "of",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "of"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMediaTimeStampInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaTimeStampInfo"
  },
  {
    "label": "FMediaMetadataItemBPT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaMetadataItemBPT"
  },
  {
    "label": "FMediaMetadataItemsBPT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaMetadataItemsBPT"
  },
  {
    "label": "FMediaPlayerProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerProxy"
  },
  {
    "label": "UMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlayer"
  },
  {
    "label": "FLatentActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionInfo"
  },
  {
    "label": "IMPL_AUDIOPROXY_CLASS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "IMPL_AUDIOPROXY_CLASS(FMediaPlayerProxy)"
  },
  {
    "label": "FMediaPlayerProxy()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FMediaPlayerProxy(UMediaPlayer* Player)"
  },
  {
    "label": "FMediaPlayerProxy()",
    "kind": "Method",
    "detail": "Function (MEDIAASSETS_API)",
    "insertText": "FMediaPlayerProxy(const FMediaPlayerProxy& Other)"
  },
  {
    "label": "CanPlaySource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlaySource(UMediaSource* MediaSource)"
  },
  {
    "label": "CanPlayUrl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlayUrl(const FString& Url)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Next()"
  },
  {
    "label": "OpenFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFile(const FString& FilePath)"
  },
  {
    "label": "OpenPlaylistIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "OpenPlaylistIndex(InPlaylist, 0)"
  },
  {
    "label": "OpenPlaylistIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPlaylistIndex(UMediaPlaylist* InPlaylist, int32 Index)"
  },
  {
    "label": "OpenSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenSource(UMediaSource* MediaSource)"
  },
  {
    "label": "OpenSourceWithOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenSourceWithOptions(UMediaSource* MediaSource, const FMediaPlayerOptions& Options)"
  },
  {
    "label": "OpenSourceLatent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSourceLatent(const UObject* WorldContextObject, struct FLatentActionInfo LatentInfo, UMediaSource* MediaSource, const FMediaPlayerOptions& Options, bool& bSuccess)"
  },
  {
    "label": "OpenUrl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenUrl(const FString& Url)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Pause()"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Play()"
  },
  {
    "label": "PlayAndSeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayAndSeek()"
  },
  {
    "label": "Previous()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Previous()"
  },
  {
    "label": "Reopen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Reopen()"
  },
  {
    "label": "Rewind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rewind()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seek(const FTimespan& Time)"
  },
  {
    "label": "SelectTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectTrack(EMediaPlayerTrack TrackType, int32 TrackIndex)"
  },
  {
    "label": "SetBlockOnTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTime(const FTimespan& Time)"
  },
  {
    "label": "SetBlockOnTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTimeRange(const TRange<FTimespan>& TimeRange)"
  },
  {
    "label": "SetDesiredPlayerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredPlayerName(FName PlayerName)"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLooping(bool Looping)"
  },
  {
    "label": "SetMediaOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMediaOptions(const UMediaSource* Options)"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRate(float Rate)"
  },
  {
    "label": "SetNativeVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNativeVolume(float Volume)"
  },
  {
    "label": "SetTrackFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTrackFormat(EMediaPlayerTrack TrackType, int32 TrackIndex, int32 FormatIndex)"
  },
  {
    "label": "SetVideoTrackFrameRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoTrackFrameRate(int32 TrackIndex, int32 FormatIndex, float FrameRate)"
  },
  {
    "label": "SetViewField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetViewField(float Horizontal, float Vertical, bool Absolute)"
  },
  {
    "label": "SetViewRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetViewRotation(const FRotator& Rotation, bool Absolute)"
  },
  {
    "label": "SetTimeDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeDelay(FTimespan TimeDelay)"
  },
  {
    "label": "GetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (TRange<FTimespan>)",
    "insertText": "GetPlaybackTimeRange(EMediaTimeRangeType InRangeToGet)"
  },
  {
    "label": "GetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (FFloatInterval)",
    "insertText": "GetPlaybackTimeRange(EMediaTimeRangeBPType InRangeToGet)"
  },
  {
    "label": "SetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaybackTimeRange(const TRange<FTimespan>& InTimeRange)"
  },
  {
    "label": "SetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaybackTimeRange(FFloatInterval InTimeRange)"
  },
  {
    "label": "CleanUpBeforeDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpBeforeDestroy()"
  },
  {
    "label": "RegisterWithMediaModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWithMediaModule()"
  },
  {
    "label": "UnregisterWithMediaModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterWithMediaModule()"
  },
  {
    "label": "PausePIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PausePIE()"
  },
  {
    "label": "ResumePIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumePIE()"
  },
  {
    "label": "HandlePlayerMediaEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePlayerMediaEvent(EMediaEvent Event)"
  },
  {
    "label": "OpenSourceInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenSourceInternal(UMediaSource* MediaSource, const FMediaPlayerOptions* Options)"
  }
]