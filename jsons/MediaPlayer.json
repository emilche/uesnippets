[
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "IMediaModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaModule"
  },
  {
    "label": "IMediaMetadataItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaMetadataItem"
  },
  {
    "label": "UMediaPlaylist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlaylist"
  },
  {
    "label": "UMediaSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaSource"
  },
  {
    "label": "UMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMediaTimeStampInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaTimeStampInfo"
  },
  {
    "label": "FMediaMetadataItemBPT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaMetadataItemBPT"
  },
  {
    "label": "FMediaMetadataItemsBPT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaMetadataItemsBPT"
  },
  {
    "label": "FMediaPlayerProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerProxy"
  },
  {
    "label": "FLatentActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionInfo"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" IMediaOptions . h \" # include \" IMediaMetadataItem . h \" # include \" IMediaControls . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / ScriptMacros . h \" # include \" Misc / Guid . h \" # include \" Misc / Variant . h \" # include \" Misc / Timecode . h \" # include \" Engine / LatentActionManager . h \" # include \" MediaPlayerOptions . h \" # include \" IMediaTimeSource . h \" # include \" IAudioProxyInitializer . h \" # include \" MediaPlayer . generated . h \" class FMediaPlayerFacade ; class IMediaPlayer ; class IMediaModule ; class IMediaMetadataItem ; class UMediaPlaylist ; class UMediaSource ; class UMediaPlayer ; enum class EMediaEvent ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnMediaPlayerMediaEvent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMediaPlayerMediaOpened, FString, OpenedUrl)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMediaPlayerMediaOpenFailed, FString, FailedUrl)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "Absolute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Absolute(uint8)EMediaTimeRangeType::Absolute, Current = (uint8)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(BlueprintType, hidecategories = (Object), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMediaTimeStampInfo() : Time(FTimespan::Zero()), SequenceIndex(0)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(BlueprintReadOnly, Category = \"Media|Metadata\")"
  },
  {
    "label": "IMPL_AUDIOPROXY_CLASS()",
    "kind": "Method",
    "detail": "Function (} ; class FMediaPlayerProxy : public Audio::TProxyData<FMediaPlayerProxy> { public :)",
    "insertText": "IMPL_AUDIOPROXY_CLASS(FMediaPlayerProxy)"
  },
  {
    "label": "FMediaPlayerProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMediaPlayerProxy(UMediaPlayer* Player)"
  },
  {
    "label": "FMediaPlayerProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMediaPlayerProxy(const FMediaPlayerProxy& Other)"
  },
  {
    "label": "FMediaPlayerProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMediaPlayerProxy()"
  },
  {
    "label": "GetPlayerFacade()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMediaPlayerFacade,ESPMode::ThreadSafe>)",
    "insertText": "GetPlayerFacade()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FMediaPlayerProxy& InProxy)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UFUNCTION(BlueprintCallable, Category=\"Media|MediaPlayer\") MEDIAASSETS_API bool CanPause()"
  },
  {
    "label": "GetVideoTimecode()",
    "kind": "Method",
    "detail": "Function (TOptional<FTimecode>)",
    "insertText": "GetVideoTimecode()"
  },
  {
    "label": "SetBlockOnTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockOnTimeRange(const TRange<FTimespan>& TimeRange)"
  },
  {
    "label": "GetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (TRange<FTimespan>)",
    "insertText": "GetPlaybackTimeRange(EMediaTimeRangeType InRangeToGet)"
  },
  {
    "label": "SetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaybackTimeRange(const TRange<FTimespan>& InTimeRange)"
  },
  {
    "label": "CleanUpBeforeDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpBeforeDestroy()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "GetMediaInfo()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "GetMediaInfo(T& Result, FName InfoName)"
  },
  {
    "label": "GetMediaInfo()",
    "kind": "Method",
    "detail": "Function (FVariant Variant =)",
    "insertText": "GetMediaInfo(InfoName)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Result = Variant . GetValue<)",
    "insertText": "T()"
  },
  {
    "label": "RegisterWithMediaModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWithMediaModule()"
  },
  {
    "label": "UnregisterWithMediaModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterWithMediaModule()"
  },
  {
    "label": "GetPlaylistRef()",
    "kind": "Method",
    "detail": "Function (UMediaPlaylist&)",
    "insertText": "GetPlaylistRef()"
  },
  {
    "label": "ResumePIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumePIE()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDesc()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "CreateProxyData()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<Audio::IProxyData>)",
    "insertText": "CreateProxyData(const Audio::FProxyDataInitParams& InitParams)"
  },
  {
    "label": "CanBeInCluster()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanBeInCluster()"
  },
  {
    "label": "SetPlaylistInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaylistInternal(UMediaPlaylist* InPlaylist)"
  },
  {
    "label": "OpenSourceInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenSourceInternal(UMediaSource* MediaSource, const FMediaPlayerOptions* Options)"
  },
  {
    "label": "EnsurePlaylist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsurePlaylist()"
  }
]