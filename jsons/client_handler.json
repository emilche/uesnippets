[
  {
    "label": "ClientDownloadImageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientDownloadImageCallback"
  },
  {
    "label": "ClientHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientHandler"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "TestMenuState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestMenuState"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_CLIENT_HANDLER_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_CLIENT_HANDLER_H_ # pragma once # include<set> # include<string> # include \" include / cef_client . h \" # include \" include / wrapper / cef_helpers . h \" # include \" include / wrapper / cef_message_router . h \" # include \" include / wrapper / cef_resource_manager . h \" # include \" tests / cefclient / browser / client_types . h \" # include \" tests / cefclient / browser / test_runner . h \" # if)",
    "insertText": "defined(OS_LINUX)"
  },
  {
    "label": "OnBrowserCreated()",
    "kind": "Method",
    "detail": "Function (class ClientDownloadImageCallback ; class ClientHandler : public CefClient,public CefContextMenuHandler,public CefDisplayHandler,public CefDownloadHandler,public CefDragHandler,public CefFocusHandler,public CefKeyboardHandler,public CefLifeSpanHandler,public CefLoadHandler,public CefRequestHandler,public CefResourceRequestHandler { public : class Delegate { public : void)",
    "insertText": "OnBrowserCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBrowserClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserClosing(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBrowserClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserClosed(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnSetAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetAddress(const std::string& url)"
  },
  {
    "label": "OnSetTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetTitle(const std::string& title)"
  },
  {
    "label": "OnSetFavicon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetFavicon(CefRefPtr<CefImage> image)"
  },
  {
    "label": "OnSetFullscreen()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSetFullscreen(bool fullscreen)"
  },
  {
    "label": "OnAutoResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAutoResize(const CefSize& new_size)"
  },
  {
    "label": "OnSetLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetLoadingState(bool isLoading, bool canGoBack, bool canGoForward)"
  },
  {
    "label": "OnSetDraggableRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetDraggableRegions(const std::vector<CefDraggableRegion>& regions)"
  },
  {
    "label": "OnTakeFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTakeFocus(bool next)"
  },
  {
    "label": "OnBeforeContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBeforeContextMenu(CefRefPtr<CefMenuModel> model)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "ClientHandler()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::set<CefMessageRouterBrowserSide::Handler*> MessageHandlerSet ;)",
    "insertText": "ClientHandler(Delegate* delegate, bool is_osr, const std::string& startup_url)"
  },
  {
    "label": "DetachDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachDelegate()"
  },
  {
    "label": "GetContextMenuHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefContextMenuHandler>)",
    "insertText": "GetContextMenuHandler()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OS_LINUX) CefRefPtr<CefDialogHandler> GetDialogHandler()"
  },
  {
    "label": "OnContextMenuCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnContextMenuCommand(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefContextMenuParams> params, int command_id, EventFlags event_flags)"
  },
  {
    "label": "OnAddressChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddressChange(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& url)"
  },
  {
    "label": "OnTitleChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTitleChange(CefRefPtr<CefBrowser> browser, const CefString& title)"
  },
  {
    "label": "OnFaviconURLChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFaviconURLChange(CefRefPtr<CefBrowser> browser, const std::vector<CefString>& icon_urls)"
  },
  {
    "label": "OnFullscreenModeChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFullscreenModeChange(CefRefPtr<CefBrowser> browser, bool fullscreen)"
  },
  {
    "label": "OnConsoleMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnConsoleMessage(CefRefPtr<CefBrowser> browser, cef_log_severity_t level, const CefString& message, const CefString& source, int line)"
  },
  {
    "label": "OnAutoResize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAutoResize(CefRefPtr<CefBrowser> browser, const CefSize& new_size)"
  },
  {
    "label": "OnCursorChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnCursorChange(CefRefPtr<CefBrowser> browser, CefCursorHandle cursor, cef_cursor_type_t type, const CefCursorInfo& custom_cursor_info)"
  },
  {
    "label": "OnBeforeDownload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeDownload(CefRefPtr<CefBrowser> browser, CefRefPtr<CefDownloadItem> download_item, const CefString& suggested_name, CefRefPtr<CefBeforeDownloadCallback> callback)"
  },
  {
    "label": "OnDownloadUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDownloadUpdated(CefRefPtr<CefBrowser> browser, CefRefPtr<CefDownloadItem> download_item, CefRefPtr<CefDownloadItemCallback> callback)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnDragEnter(CefRefPtr<CefBrowser> browser, CefRefPtr<CefDragData> dragData, CefDragHandler::DragOperationsMask mask)"
  },
  {
    "label": "OnDraggableRegionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDraggableRegionsChanged(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const std::vector<CefDraggableRegion>& regions)"
  },
  {
    "label": "OnTakeFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTakeFocus(CefRefPtr<CefBrowser> browser, bool next)"
  },
  {
    "label": "OnSetFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSetFocus(CefRefPtr<CefBrowser> browser, FocusSource source)"
  },
  {
    "label": "OnPreKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPreKeyEvent(CefRefPtr<CefBrowser> browser, const CefKeyEvent& event, CefEventHandle os_event, bool* is_keyboard_shortcut)"
  },
  {
    "label": "OnBeforePopup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnBeforePopup(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& target_url, const CefString& target_frame_name, CefLifeSpanHandler::WindowOpenDisposition target_disposition, bool user_gesture, const CefPopupFeatures& popupFeatures, CefWindowInfo& windowInfo, CefRefPtr<CefClient>& client, CefBrowserSettings& settings, CefRefPtr<CefDictionaryValue>& extra_info, bool* no_javascript_access)"
  },
  {
    "label": "OnAfterCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "DoClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoClose(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBeforeClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeClose(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnLoadingStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadingStateChange(CefRefPtr<CefBrowser> browser, bool isLoading, bool canGoBack, bool canGoForward)"
  },
  {
    "label": "OnLoadError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadError(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, ErrorCode errorCode, const CefString& errorText, const CefString& failedUrl)"
  },
  {
    "label": "OnBeforeBrowse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnBeforeBrowse(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, bool user_gesture, bool is_redirect)"
  },
  {
    "label": "OnOpenURLFromTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnOpenURLFromTab(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& target_url, CefRequestHandler::WindowOpenDisposition target_disposition, bool user_gesture)"
  },
  {
    "label": "GetResourceRequestHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResourceRequestHandler>)",
    "insertText": "GetResourceRequestHandler(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, bool is_navigation, bool is_download, const CefString& request_initiator, bool& disable_default_handling)"
  },
  {
    "label": "GetAuthCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAuthCredentials(CefRefPtr<CefBrowser> browser, const CefString& origin_url, bool isProxy, const CefString& host, int port, const CefString& realm, const CefString& scheme, CefRefPtr<CefAuthCallback> callback)"
  },
  {
    "label": "OnQuotaRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnQuotaRequest(CefRefPtr<CefBrowser> browser, const CefString& origin_url, int64 new_size, CefRefPtr<CefRequestCallback> callback)"
  },
  {
    "label": "OnCertificateError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnCertificateError(CefRefPtr<CefBrowser> browser, ErrorCode cert_error, const CefString& request_url, CefRefPtr<CefSSLInfo> ssl_info, CefRefPtr<CefRequestCallback> callback)"
  },
  {
    "label": "OnSelectClientCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSelectClientCertificate(CefRefPtr<CefBrowser> browser, bool isProxy, const CefString& host, int port, const X509CertificateList& certificates, CefRefPtr<CefSelectClientCertificateCallback> callback)"
  },
  {
    "label": "OnRenderProcessTerminated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenderProcessTerminated(CefRefPtr<CefBrowser> browser, TerminationStatus status)"
  },
  {
    "label": "OnDocumentAvailableInMainFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDocumentAvailableInMainFrame(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBeforeResourceLoad()",
    "kind": "Method",
    "detail": "Function (cef_return_value_t)",
    "insertText": "OnBeforeResourceLoad(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, CefRefPtr<CefRequestCallback> callback)"
  },
  {
    "label": "GetResourceHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResourceHandler>)",
    "insertText": "GetResourceHandler(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request)"
  },
  {
    "label": "GetResourceResponseFilter()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResponseFilter>)",
    "insertText": "GetResourceResponseFilter(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, CefRefPtr<CefResponse> response)"
  },
  {
    "label": "OnProtocolExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProtocolExecution(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, bool& allow_os_execution)"
  },
  {
    "label": "GetBrowserCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBrowserCount()"
  },
  {
    "label": "ShowDevTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDevTools(CefRefPtr<CefBrowser> browser, const CefPoint& inspect_element_at)"
  },
  {
    "label": "CloseDevTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDevTools(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "HasSSLInformation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSSLInformation(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "ShowSSLInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSSLInformation(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "SetStringResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringResource(const std::string& page, const std::string& data)"
  },
  {
    "label": "delegate()",
    "kind": "Method",
    "detail": "Function (Delegate*)",
    "insertText": "delegate()"
  },
  {
    "label": "NotifyBrowserCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBrowserCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "NotifyBrowserClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBrowserClosing(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "NotifyBrowserClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBrowserClosed(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "NotifyAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAddress(const CefString& url)"
  },
  {
    "label": "NotifyTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTitle(const CefString& title)"
  },
  {
    "label": "NotifyFavicon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFavicon(CefRefPtr<CefImage> image)"
  },
  {
    "label": "NotifyFullscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFullscreen(bool fullscreen)"
  },
  {
    "label": "NotifyAutoResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAutoResize(const CefSize& new_size)"
  },
  {
    "label": "NotifyLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoadingState(bool isLoading, bool canGoBack, bool canGoForward)"
  },
  {
    "label": "NotifyDraggableRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDraggableRegions(const std::vector<CefDraggableRegion>& regions)"
  },
  {
    "label": "NotifyTakeFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTakeFocus(bool next)"
  },
  {
    "label": "BuildTestMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTestMenu(CefRefPtr<CefMenuModel> model)"
  },
  {
    "label": "ExecuteTestMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteTestMenu(int command_id)"
  },
  {
    "label": "SetOfflineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOfflineState(CefRefPtr<CefBrowser> browser, bool offline)"
  },
  {
    "label": "TestMenuState()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<ClientPrintHandlerGtk> print_handler_ ; # endif CefRefPtr<CefMessageRouterBrowserSide> message_router_ ; CefRefPtr<CefResourceManager> resource_manager_ ; test_runner::StringResourceMap string_resource_map_ ; Delegate* delegate_ ; struct TestMenuState {)",
    "insertText": "TestMenuState() : check_item(true), radio_item(0)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (} bool check_item ; int radio_item ; } test_menu_state_ ; int browser_count_ ; const std::string console_log_file_ ; bool first_console_message_ ; bool focus_on_editable_field_ ; bool initial_navigation_ ; MessageHandlerSet message_handler_set_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(ClientHandler)"
  }
]