[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Sequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sequence"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "PriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PriorityQueue"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "PriorityQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_PRIORITYQUEUE_H # define LLVM_ADT_PRIORITYQUEUE_H # include<algorithm> # include<queue> namespace llvm { template<class T,class Sequence = std::vector<T>,class Compare = std::less<Sequence::value_type>> class PriorityQueue : public std::priority_queue<T,Sequence,Compare> { public :)",
    "insertText": "PriorityQueue(const Compare &compare = Compare(), const Sequence &sequence = Sequence()) : std::priority_queue<T, Sequence, Compare>(compare, sequence)"
  },
  {
    "label": "PriorityQueue()",
    "kind": "Method",
    "detail": "Function (} template<class Iterator>)",
    "insertText": "PriorityQueue(Iterator begin, Iterator end, const Compare &compare = Compare(), const Sequence &sequence = Sequence()) : std::priority_queue<T, Sequence, Compare>(begin, end, compare, sequence)"
  },
  {
    "label": "erase_one()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase_one(const T &t)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (Sequence::size_type i =)",
    "insertText": "find(this->c.begin(), this->c.end(), t) - this->c.begin()"
  },
  {
    "label": "parent()",
    "kind": "Method",
    "detail": "Function (Sequence::size_type)",
    "insertText": "parent(i - 1)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (this -> c [ i ] = this -> c [ parent ] ; i = parent ; } this ->)",
    "insertText": "pop()"
  },
  {
    "label": "reheapify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reheapify()"
  },
  {
    "label": "make_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_heap(this->c.begin(), this->c.end(), this->comp)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  }
]