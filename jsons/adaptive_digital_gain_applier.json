[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "AdaptiveDigitalGainApplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdaptiveDigitalGainApplier"
  },
  {
    "label": "FrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameInfo"
  },
  {
    "label": "AdaptiveDigitalGainApplier()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_APPLIER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_APPLIER_H_ # include<vector> # include \" modules / audio_processing / agc2 / gain_applier . h \" # include \" modules / audio_processing / include / audio_frame_view . h \" # include \" modules / audio_processing / include / audio_processing . h \" namespace webrtc { class ApmDataDumper ; class AdaptiveDigitalGainApplier { public : struct FrameInfo { float speech_probability ; float speech_level_dbfs ; bool speech_level_reliable ; float noise_rms_dbfs ; float headroom_db ; float limiter_envelope_dbfs ; } ;)",
    "insertText": "AdaptiveDigitalGainApplier(ApmDataDumper* apm_data_dumper, const AudioProcessing::Config::GainController2::AdaptiveDigital& config, int sample_rate_hz, int num_channels)"
  },
  {
    "label": "AdaptiveDigitalGainApplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptiveDigitalGainApplier(const AdaptiveDigitalGainApplier&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AdaptiveDigitalGainApplier&)",
    "insertText": "operator(const AdaptiveDigitalGainApplier&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int sample_rate_hz, int num_channels)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const FrameInfo& info, AudioFrameView<float> frame)"
  }
]