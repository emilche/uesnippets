[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "TOneColorVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOneColorVS"
  },
  {
    "label": "FOneColorPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOneColorPS"
  },
  {
    "label": "TOneColorPixelShaderMRT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOneColorPixelShaderMRT"
  },
  {
    "label": "TOneColorPixelShader128bitRT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOneColorPixelShader128bitRT"
  },
  {
    "label": "TOneColorPixelShaderNumOutputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOneColorPixelShaderNumOutputs"
  },
  {
    "label": "TOneColorPixelNumUintOutputs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOneColorPixelNumUintOutputs"
  },
  {
    "label": "FFillTextureCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFillTextureCS"
  },
  {
    "label": "FLongGPUTaskPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLongGPUTaskPS"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GlobalShader . h \" # include \" HAL / Platform . h \" # include \" Math / Color . h \" # include \" Misc / AssertionMacros . h \" # include \" PixelFormat . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderCore . h \" # include \" ShaderParameterMacros . h \" # include \" ShaderParameterStruct . h \" # include \" ShaderParameterUtils . h \" # include \" ShaderParameters . h \" # include \" ShaderPermutation . h \" class FPointerTableBase ; template<bool bUsingNDCPositions = true,bool bUsingVertexLayers = false> class TOneColorVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(TOneColorVS, Global, RENDERCORE_API)"
  },
  {
    "label": "TOneColorVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TOneColorVS()"
  },
  {
    "label": "TOneColorVS()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TOneColorVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (DepthParameter .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InputDepth\"), SPF_Mandatory)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USING_NDC_POSITIONS\"), (uint32)(bUsingNDCPositions ? 1 : 0))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USING_LAYERS\"), (uint32)(bUsingVertexLayers ? 1 : 0))"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, float Depth)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, DepthParameter, Depth)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, DepthParameter)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FOneColorPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FOneColorPS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FOneColorPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, RENDERCORE_API) SHADER_PARAMETER_ARRAY(FLinearColor, DrawColorMRT, [MaxSimultaneousRenderTargets]) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT() RENDERCORE_API void FillParameters(FParameters& Parameters, const FLinearColor* Colors, int32 NumColors)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class TOneColorPixelShaderMRT : public FOneColorPS {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(TOneColorPixelShaderMRT, RENDERCORE_API)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (public : class TOneColorPixelShader128bitRT :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"b128BITRENDERTARGET\")"
  },
  {
    "label": "SHADER_PERMUTATION_RANGE_INT()",
    "kind": "Method",
    "detail": "Function (class TOneColorPixelShaderNumOutputs :)",
    "insertText": "SHADER_PERMUTATION_RANGE_INT(\"NUM_OUTPUTS\", 1, 8)"
  },
  {
    "label": "SHADER_PERMUTATION_RANGE_INT()",
    "kind": "Method",
    "detail": "Function (class TOneColorPixelNumUintOutputs :)",
    "insertText": "SHADER_PERMUTATION_RANGE_INT(\"NUM_UINT_OUTPUTS\", 0, 8)"
  },
  {
    "label": "TOneColorPixelShaderMRT()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<TOneColorPixelShaderNumOutputs,TOneColorPixelShader128bitRT,TOneColorPixelNumUintOutputs> ;)",
    "insertText": "TOneColorPixelShaderMRT()"
  },
  {
    "label": "TOneColorPixelShaderMRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TOneColorPixelShaderMRT(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FFillTextureCS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FFillTextureCS, RENDERCORE_API)"
  },
  {
    "label": "FFillTextureCS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FFillTextureCS()"
  },
  {
    "label": "FFillTextureCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFillTextureCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, FillValue)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Params0)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Params1)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Params2)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, FillTexture)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FLongGPUTaskPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FLongGPUTaskPS, RENDERCORE_API)"
  },
  {
    "label": "FLongGPUTaskPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLongGPUTaskPS()"
  },
  {
    "label": "FLongGPUTaskPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLongGPUTaskPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  }
]