[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "UAnimGraphNode_Slot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Slot"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FDisplayedMontageReferenceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedMontageReferenceInfo"
  },
  {
    "label": "FDisplayedBlueprintReferenceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedBlueprintReferenceInfo"
  },
  {
    "label": "SMontageReferenceListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMontageReferenceListRow"
  },
  {
    "label": "SBlueprintReferenceListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlueprintReferenceListRow"
  },
  {
    "label": "FReferenceWindowInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceWindowInfo"
  },
  {
    "label": "SSlotNameReferenceWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSlotNameReferenceWindow"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" AssetRegistry / AssetData . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # define LOCTEXT_NAMESPACE \" SlotRefWindow \" class SWindow ; class UAnimBlueprint ; class UAnimGraphNode_Base ; class UAnimGraphNode_Slot ; class UEdGraph ; typedef TMultiMap<UAnimBlueprint*,UAnimGraphNode_Slot*>* NodeMapPtr ; class FDisplayedMontageReferenceInfo { public : FAssetData AssetData ; TSharedRef<FDisplayedMontageReferenceInfo>)",
    "insertText": "Make(const FAssetData& AssetData)"
  },
  {
    "label": "FDisplayedMontageReferenceInfo()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDisplayedMontageReferenceInfo(const FAssetData& InData) : AssetData(InData)"
  },
  {
    "label": "FDisplayedMontageReferenceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplayedMontageReferenceInfo()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} } ; class FDisplayedBlueprintReferenceInfo { public : FString BlueprintName ; FString GraphName ; FString NodeName ; UAnimBlueprint* AnimBlueprint ; UEdGraph* NodeGraph ; UAnimGraphNode_Base* Node ; TSharedRef<FDisplayedBlueprintReferenceInfo>)",
    "insertText": "Make(UAnimBlueprint* Blueprint, UAnimGraphNode_Slot* SlotNode)"
  },
  {
    "label": "FDisplayedBlueprintReferenceInfo()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDisplayedBlueprintReferenceInfo(UAnimBlueprint* Blueprint, UAnimGraphNode_Slot* SlotNode)"
  },
  {
    "label": "FDisplayedBlueprintReferenceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDisplayedBlueprintReferenceInfo()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SListView<TSharedPtr<FDisplayedMontageReferenceInfo>> SMontageReferenceList ; typedef SListView<TSharedPtr<FDisplayedBlueprintReferenceInfo>> SBlueprintReferenceList ; class SMontageReferenceListRow : public SMultiColumnTableRow<TSharedPtr<FDisplayedMontageReferenceInfo>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMontageReferenceListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FDisplayedMontageReferenceInfo>, ReferenceInfo) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "OnViewInContentBrowserClicked()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnViewInContentBrowserClicked()"
  },
  {
    "label": "OnOpenAssetClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnOpenAssetClicked()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDisplayedMontageReferenceInfo> ReferenceInfo ; } ; class SBlueprintReferenceListRow : public SMultiColumnTableRow<TSharedPtr<FDisplayedBlueprintReferenceInfo>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBlueprintReferenceListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FDisplayedBlueprintReferenceInfo>, ReferenceInfo) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "FReferenceWindowInfo()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDisplayedBlueprintReferenceInfo> ReferenceInfo ; } ; struct FReferenceWindowInfo {)",
    "insertText": "FReferenceWindowInfo() : ReferencingMontages(nullptr) , ReferencingNodes(nullptr) , bRefresh(true)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} TArray<FAssetData>* ReferencingMontages ; NodeMapPtr ReferencingNodes ; FText OperationText ; FText ItemText ; FSimpleDelegate RetryDelegate ; bool bRefresh ; } ; class SSlotNameReferenceWindow : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSlotNameReferenceWindow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TArray<FAssetData>*, ReferencingMontages) SLATE_ARGUMENT(NodeMapPtr, ReferencingNodes) SLATE_ARGUMENT(FString, SlotName) SLATE_ARGUMENT(TSharedPtr<SWindow>, WidgetWindow) SLATE_ARGUMENT(FText, OperationText) SLATE_EVENT(FSimpleDelegate, OnRetry) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "RefreshContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshContent()"
  },
  {
    "label": "UpdateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInfo(FReferenceWindowInfo& UpdatedInfo)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (FString SlotName ; protected : TSharedRef<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "HandleGenerateMontageReferenceRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateMontageReferenceRow(TSharedPtr<FDisplayedMontageReferenceInfo> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleGenerateBlueprintReferenceRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateBlueprintReferenceRow(TSharedPtr<FDisplayedBlueprintReferenceInfo> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnRetryClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRetryClicked()"
  },
  {
    "label": "OnCloseClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCloseClicked()"
  }
]