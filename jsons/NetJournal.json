[
  {
    "label": "UReplicationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationSystem"
  },
  {
    "label": "FNetJournal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetJournal"
  },
  {
    "label": "FJournalEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJournalEntry"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Iris / ReplicationSystem / NetRefHandle . h \" # include \" Net / Core / Trace / NetDebugName . h \" class UReplicationSystem ; # ifndef UE_NET_ENABLE_READ_JOURNAL #)",
    "insertText": "if(UE_BUILD_SHIPPING) # define UE_NET_ENABLE_READ_JOURNAL 1 #else # define UE_NET_ENABLE_READ_JOURNAL 1 #endif #endif #if UE_NET_ENABLE_READ_JOURNAL #define UE_ADD_READ_JOURNAL_ENTRY(SerializationContext, X) SerializationContext.AddReadJournalEntry(X)"
  },
  {
    "label": "UE_ADD_READ_JOURNAL_ENTRY()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "UE_ADD_READ_JOURNAL_ENTRY(...)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (class FNetJournal { uint32 JournalSize = 8 U ; uint32 JournalMask = JournalSize - 1 U ; public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (NumEntries = 0 U ; } void)",
    "insertText": "AddEntry(const TCHAR* Name, uint32 BitOffset, FNetRefHandle NetRefHandle)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Print(const UReplicationSystem* ReplicationSystem)"
  },
  {
    "label": "FJournalEntry()",
    "kind": "Method",
    "detail": "Function (Entries [ NumEntries& JournalMask ] =)",
    "insertText": "FJournalEntry({Name, NetRefHandle, BitOffset})"
  }
]