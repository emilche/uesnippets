[
  {
    "label": "TCircularQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCircularQueue"
  },
  {
    "label": "TCircularQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / CircularBuffer . h \" # include \" Templates / Atomic . h \" template<T> class TCircularQueue { public : using FElementType = T ;)",
    "insertText": "TCircularQueue(uint32 CapacityPlusOne) : Buffer(CapacityPlusOne) , Head(0) , Tail(0)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} public : uint32)",
    "insertText": "Count()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (int32 Count = Tail .)",
    "insertText": "Load() - Head.Load()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (Count + = Buffer .)",
    "insertText": "Capacity()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(uint32)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Dequeue(FElementType& OutElement)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (const uint32 CurrentHead = Head .)",
    "insertText": "Load()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutElement =)",
    "insertText": "MoveTemp(Buffer[CurrentHead])"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (Head .)",
    "insertText": "Store(Buffer.GetNextIndex(CurrentHead))"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (Head .)",
    "insertText": "Store(Tail.Load())"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Enqueue(const FElementType& Element)"
  },
  {
    "label": "GetNextIndex()",
    "kind": "Method",
    "detail": "Function (uint32 NewTail = Buffer .)",
    "insertText": "GetNextIndex(CurrentTail)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (Buffer [ CurrentTail ] = Element ; Tail .)",
    "insertText": "Store(NewTail)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Buffer [ CurrentTail ] =)",
    "insertText": "MoveTemp(Element)"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Peek(FElementType& OutItem)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (OutItem = Buffer [ CurrentHead ] ; return true ; } return false ; } const FElementType*)",
    "insertText": "Peek()"
  }
]