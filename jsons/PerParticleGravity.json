[
  {
    "label": "FPerParticleGravity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleGravity"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticleGravity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / DynamicParticles . h \" # include \" Chaos / PerParticleRule . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { class FPerParticleGravity : public FPerParticleRule { public : uint32 MaxGravityGroups = 8 ;)",
    "insertText": "FPerParticleGravity()"
  },
  {
    "label": "SetAllGravities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllGravities(FVec3(0, 0, (FReal)-980.665))"
  },
  {
    "label": "FPerParticleGravity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerParticleGravity(const FVec3& G)"
  },
  {
    "label": "SetAllGravities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllGravities(G)"
  },
  {
    "label": "FPerParticleGravity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerParticleGravity(const FVec3& Direction, const FReal Magnitude)"
  },
  {
    "label": "SetAllGravities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllGravities(Direction * Magnitude)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "Acceleration() += MAccelerations[Particle.GravityGroupIndex()"
  },
  {
    "label": "SetAcceleration()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetAcceleration(const FVec3& Acceleration, int32 GroupIndex)"
  },
  {
    "label": "GetAcceleration()",
    "kind": "Method",
    "detail": "Function (MAccelerations [ GroupIndex ] = Acceleration ; } const FVec3&)",
    "insertText": "GetAcceleration(int32 GroupIndex)"
  }
]