[
  {
    "label": "copy_using_evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "copy_using_evaluator_traits"
  },
  {
    "label": "copy_using_evaluator_DefaultTraversal_CompleteUnrolling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "copy_using_evaluator_DefaultTraversal_CompleteUnrolling"
  },
  {
    "label": "copy_using_evaluator_DefaultTraversal_InnerUnrolling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "copy_using_evaluator_DefaultTraversal_InnerUnrolling"
  },
  {
    "label": "copy_using_evaluator_LinearTraversal_CompleteUnrolling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "copy_using_evaluator_LinearTraversal_CompleteUnrolling"
  },
  {
    "label": "copy_using_evaluator_innervec_CompleteUnrolling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "copy_using_evaluator_innervec_CompleteUnrolling"
  },
  {
    "label": "copy_using_evaluator_innervec_InnerUnrolling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "copy_using_evaluator_innervec_InnerUnrolling"
  },
  {
    "label": "dense_assignment_loop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dense_assignment_loop"
  },
  {
    "label": "unaligned_dense_assignment_loop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unaligned_dense_assignment_loop"
  },
  {
    "label": "generic_dense_assignment_kernel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_dense_assignment_kernel"
  },
  {
    "label": "restricted_packet_dense_assignment_kernel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "restricted_packet_dense_assignment_kernel"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "Dense2Dense",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dense2Dense"
  },
  {
    "label": "EigenBase2EigenBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EigenBase2EigenBase"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "StorageBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StorageBase"
  },
  {
    "label": "DstHasDirectAccess()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ASSIGN_EVALUATOR_H # define EIGEN_ASSIGN_EVALUATOR_H namespace Eigen { namespace internal { template<DstEvaluator,SrcEvaluator,AssignFunc,int MaxPacketSize = - 1> struct copy_using_evaluator_traits { typedef DstEvaluator::XprType Dst ; typedef Dst::Scalar DstScalar ; enum { DstFlags = DstEvaluator::Flags,SrcFlags = SrcEvaluator::Flags } ; public : enum { DstAlignment = DstEvaluator::Alignment,SrcAlignment = SrcEvaluator::Alignment,)",
    "insertText": "DstHasDirectAccess(DstFlags & DirectAccessBit) == DirectAccessBit, JointAlignment = EIGEN_PLAIN_ENUM_MIN(DstAlignment,SrcAlignment)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (private : enum { InnerSize =)",
    "insertText": "int(Dst::IsVectorAtCompileTime) ? int(Dst::SizeAtCompileTime) : int(DstFlags)&RowMajorBit ? int(Dst::ColsAtCompileTime) : int(Dst::RowsAtCompileTime), InnerMaxSize = int(Dst::IsVectorAtCompileTime) ? int(Dst::MaxSizeAtCompileTime) : int(DstFlags)&RowMajorBit ? int(Dst::MaxColsAtCompileTime) : int(Dst::MaxRowsAtCompileTime), RestrictedInnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(InnerSize,MaxPacketSize), RestrictedLinearSize = EIGEN_SIZE_MIN_PREFER_FIXED(Dst::SizeAtCompileTime,MaxPacketSize), OuterStride = int(outer_stride_at_compile_time<Dst>::ret)"
  },
  {
    "label": "StorageOrdersAgree()",
    "kind": "Method",
    "detail": "Function (typedef find_best_packet<DstScalar,RestrictedLinearSize>::type LinearPacketType ; typedef find_best_packet<DstScalar,RestrictedInnerSize>::type InnerPacketType ; enum { LinearPacketSize = unpacket_traits<LinearPacketType>::size,InnerPacketSize = unpacket_traits<InnerPacketType>::size } ; public : enum { LinearRequiredAlignment = unpacket_traits<LinearPacketType>::alignment,InnerRequiredAlignment = unpacket_traits<InnerPacketType>::alignment } ; private : enum { DstIsRowMajor = DstFlags& RowMajorBit,SrcIsRowMajor = SrcFlags& RowMajorBit,)",
    "insertText": "StorageOrdersAgree(int(DstIsRowMajor) == int(SrcIsRowMajor)), MightVectorize = bool(StorageOrdersAgree) && (int(DstFlags) & int(SrcFlags) & ActualPacketAccessBit) && bool(functor_traits<AssignFunc>::PacketAccess), MayInnerVectorize = MightVectorize && int(InnerSize)!=Dynamic && int(InnerSize)%int(InnerPacketSize)==0 && int(OuterStride)!=Dynamic && int(OuterStride)%int(InnerPacketSize)==0 && (EIGEN_UNALIGNED_VECTORIZE || int(JointAlignment)>=int(InnerRequiredAlignment)), MayLinearize = bool(StorageOrdersAgree) && (int(DstFlags) & int(SrcFlags) & LinearAccessBit), MayLinearVectorize = bool(MightVectorize) && bool(MayLinearize) && bool(DstHasDirectAccess) && (EIGEN_UNALIGNED_VECTORIZE || (int(DstAlignment)>=int(LinearRequiredAlignment)) || MaxSizeAtCompileTime == Dynamic), MaySliceVectorize = bool(MightVectorize) && bool(DstHasDirectAccess) && (int(InnerMaxSize)==Dynamic || int(InnerMaxSize)>=(EIGEN_UNALIGNED_VECTORIZE?InnerPacketSize:(3*InnerPacketSize)))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (public : enum { Traversal =)",
    "insertText": "int(Dst::SizeAtCompileTime) == 0 ? int(AllAtOnceTraversal) : (int(MayLinearVectorize) && (LinearPacketSize>InnerPacketSize)) ? int(LinearVectorizedTraversal) : int(MayInnerVectorize) ? int(InnerVectorizedTraversal) : int(MayLinearVectorize) ? int(LinearVectorizedTraversal) : int(MaySliceVectorize) ? int(SliceVectorizedTraversal) : int(MayLinearize) ? int(LinearTraversal) : int(DefaultTraversal), Vectorized = int(Traversal) == InnerVectorizedTraversal || int(Traversal) == LinearVectorizedTraversal || int(Traversal)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef conditional<)",
    "insertText": "int(Traversal)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (private : enum { ActualPacketSize =)",
    "insertText": "int(Traversal)==LinearVectorizedTraversal ? LinearPacketSize : Vectorized ? InnerPacketSize : 1, UnrollingLimit = EIGEN_UNROLLING_LIMIT * ActualPacketSize, MayUnrollCompletely = int(Dst::SizeAtCompileTime) != Dynamic && int(Dst::SizeAtCompileTime) * (int(DstEvaluator::CoeffReadCost)+int(SrcEvaluator::CoeffReadCost)) <= int(UnrollingLimit), MayUnrollInner = int(InnerSize) != Dynamic && int(InnerSize) * (int(DstEvaluator::CoeffReadCost)+int(SrcEvaluator::CoeffReadCost)) <= int(UnrollingLimit)"
  },
  {
    "label": "Unrolling()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "Unrolling(int(Traversal) == int(InnerVectorizedTraversal) || int(Traversal) == int(DefaultTraversal)) ? ( int(MayUnrollCompletely) ? int(CompleteUnrolling) : int(MayUnrollInner) ? int(InnerUnrolling) : int(NoUnrolling) ) : int(Traversal) == int(LinearVectorizedTraversal) ? ( bool(MayUnrollCompletely) && ( EIGEN_UNALIGNED_VECTORIZE || (int(DstAlignment)>=int(LinearRequiredAlignment))) ? int(CompleteUnrolling) : int(NoUnrolling) ) : int(Traversal) == int(LinearTraversal) ? ( bool(MayUnrollCompletely) ? int(CompleteUnrolling) : int(NoUnrolling) ) #if EIGEN_UNALIGNED_VECTORIZE : int(Traversal) == int(SliceVectorizedTraversal) ? ( bool(MayUnrollInner) ? int(InnerUnrolling) : int(NoUnrolling) ) #endif : int(NoUnrolling)"
  },
  {
    "label": "debug()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_DEBUG_ASSIGN void)",
    "insertText": "debug()"
  },
  {
    "label": "typeid()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" DstXpr : \"<<)",
    "insertText": "typeid(typename DstEvaluator::XprType).name()"
  },
  {
    "label": "typeid()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" SrcXpr : \"<<)",
    "insertText": "typeid(typename SrcEvaluator::XprType).name()"
  },
  {
    "label": "setf()",
    "kind": "Method",
    "detail": "Function (std::cerr .)",
    "insertText": "setf(std::ios::hex, std::ios::basefield)"
  },
  {
    "label": "DstFlags()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" DstFlags \"<<\" = \"<<)",
    "insertText": "DstFlags(\" << demangle_flags(DstFlags) << \")"
  },
  {
    "label": "SrcFlags()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" SrcFlags \"<<\" = \"<<)",
    "insertText": "SrcFlags(\" << demangle_flags(SrcFlags) << \")"
  },
  {
    "label": "unsetf()",
    "kind": "Method",
    "detail": "Function (std::cerr .)",
    "insertText": "unsetf(std::ios::hex)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(DstAlignment) EIGEN_DEBUG_VAR(SrcAlignment) EIGEN_DEBUG_VAR(LinearRequiredAlignment) EIGEN_DEBUG_VAR(InnerRequiredAlignment) EIGEN_DEBUG_VAR(JointAlignment) EIGEN_DEBUG_VAR(InnerSize) EIGEN_DEBUG_VAR(InnerMaxSize) EIGEN_DEBUG_VAR(LinearPacketSize) EIGEN_DEBUG_VAR(InnerPacketSize) EIGEN_DEBUG_VAR(ActualPacketSize) EIGEN_DEBUG_VAR(StorageOrdersAgree) EIGEN_DEBUG_VAR(MightVectorize) EIGEN_DEBUG_VAR(MayLinearize) EIGEN_DEBUG_VAR(MayInnerVectorize) EIGEN_DEBUG_VAR(MayLinearVectorize) EIGEN_DEBUG_VAR(MaySliceVectorize) std::cerr << \"Traversal\" << \" = \" << Traversal << \" (\" << demangle_traversal(Traversal) << \")"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(SrcEvaluator::CoeffReadCost) EIGEN_DEBUG_VAR(DstEvaluator::CoeffReadCost) EIGEN_DEBUG_VAR(Dst::SizeAtCompileTime) EIGEN_DEBUG_VAR(UnrollingLimit) EIGEN_DEBUG_VAR(MayUnrollCompletely) EIGEN_DEBUG_VAR(MayUnrollInner) std::cerr << \"Unrolling\" << \" = \" << Unrolling << \" (\" << demangle_unrolling(Unrolling) << \")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (std::cerr<<std::endl ; } # endif } ; template<Kernel,int Index,int Stop> struct copy_using_evaluator_DefaultTraversal_CompleteUnrolling { typedef Kernel::DstEvaluatorType DstEvaluatorType ; typedef DstEvaluatorType::XprType DstXprType ; enum { outer = Index / DstXprType::InnerSizeAtCompileTime,inner = Index % DstXprType::InnerSizeAtCompileTime } ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel &kernel)"
  },
  {
    "label": "assignCoeffByOuterInner()",
    "kind": "Method",
    "detail": "Function (kernel .)",
    "insertText": "assignCoeffByOuterInner(outer, inner)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel,Index + 1,Stop)",
    "insertText": "run(kernel)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,int Stop> struct copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel,Stop,Stop> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,int Index_,int Stop> struct copy_using_evaluator_DefaultTraversal_InnerUnrolling { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel &kernel, Index outer)"
  },
  {
    "label": "assignCoeffByOuterInner()",
    "kind": "Method",
    "detail": "Function (kernel .)",
    "insertText": "assignCoeffByOuterInner(outer, Index_)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (copy_using_evaluator_DefaultTraversal_InnerUnrolling<Kernel,Index_ + 1,Stop)",
    "insertText": "run(kernel, outer)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,int Stop> struct copy_using_evaluator_DefaultTraversal_InnerUnrolling<Kernel,Stop,Stop> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel&, Index)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,int Index,int Stop> struct copy_using_evaluator_LinearTraversal_CompleteUnrolling { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel& kernel)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (kernel .)",
    "insertText": "assignCoeff(Index)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (kernel . template assignPacketByOuterInner<DstAlignment,SrcAlignment,)",
    "insertText": "PacketType(outer, inner)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (kernel . template assignPacketByOuterInner<DstAlignment,SrcAlignment,)",
    "insertText": "PacketType(outer, Index_)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,int Stop,int SrcAlignment,int DstAlignment> struct copy_using_evaluator_innervec_InnerUnrolling<Kernel,Stop,Stop,SrcAlignment,DstAlignment> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel &, Index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::DstEvaluatorType::XprType DstXprType ;)",
    "insertText": "EIGEN_STATIC_ASSERT(int(DstXprType::SizeAtCompileTime) == 0, EIGEN_INTERNAL_ERROR_PLEASE_FILE_A_BUG_REPORT)"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::DstEvaluatorType::XprType DstXprType ; const Index outerSize = kernel .)",
    "insertText": "outerSize()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool IsAligned = false> struct unaligned_dense_assignment_loop { template<Kernel> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(Kernel&, Index, Index)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct unaligned_dense_assignment_loop<false> { # if EIGEN_COMP_MSVC template<Kernel> EIGEN_DONT_INLINE void)",
    "insertText": "run(Kernel &kernel, Index start, Index end) #else template <typename Kernel> EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel, Index start, Index end)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index size = kernel .)",
    "insertText": "size()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::Scalar Scalar ; typedef Kernel::PacketType PacketType ; enum { requestedAlignment = Kernel::AssignmentTraits::LinearRequiredAlignment,packetSize = unpacket_traits<PacketType>::size,dstIsAligned =)",
    "insertText": "int(Kernel::AssignmentTraits::DstAlignment)>=int(requestedAlignment), dstAlignment = packet_traits<Scalar>::AlignedOnScalar ? int(requestedAlignment) : int(Kernel::AssignmentTraits::DstAlignment)"
  },
  {
    "label": "requestedAlignment()",
    "kind": "Method",
    "detail": "Function (const Index alignedStart = dstIsAligned ? 0 : internal::first_aligned<)",
    "insertText": "requestedAlignment(kernel.dstDataPtr(), size)"
  },
  {
    "label": "alignedStart()",
    "kind": "Method",
    "detail": "Function (const Index alignedEnd =)",
    "insertText": "alignedStart((size-alignedStart)/packetSize)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (unaligned_dense_assignment_loop<dstIsAligned ! = 0)",
    "insertText": "run(kernel, 0, alignedStart)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (unaligned_dense_assignment_loop<)",
    "insertText": "run(kernel, alignedEnd, size)"
  },
  {
    "label": "alignedSize()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::DstEvaluatorType::XprType DstXprType ; typedef Kernel::PacketType PacketType ; enum { size = DstXprType::SizeAtCompileTime,packetSize = unpacket_traits<PacketType>::size,)",
    "insertText": "alignedSize(int(size)/packetSize)"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (const Index innerSize = kernel .)",
    "insertText": "innerSize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index packetSize = unpacket_traits<PacketType>::size ;)",
    "insertText": "for(Index outer = 0; outer < outerSize; ++outer) for(Index inner = 0; inner < innerSize; inner+=packetSize) kernel.template assignPacketByOuterInner<DstAlignment, SrcAlignment, PacketType>(outer, inner)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::Scalar Scalar ; typedef Kernel::PacketType PacketType ; enum { packetSize = unpacket_traits<PacketType>::size,requestedAlignment =)",
    "insertText": "int(Kernel::AssignmentTraits::InnerRequiredAlignment), alignable = packet_traits<Scalar>::AlignedOnScalar || int(Kernel::AssignmentTraits::DstAlignment)>=sizeof(Scalar), dstIsAligned = int(Kernel::AssignmentTraits::DstAlignment)>=int(requestedAlignment), dstAlignment = alignable ? int(requestedAlignment) : int(Kernel::AssignmentTraits::DstAlignment)"
  },
  {
    "label": "dstDataPtr()",
    "kind": "Method",
    "detail": "Function (const Scalar* dst_ptr = kernel .)",
    "insertText": "dstDataPtr()"
  },
  {
    "label": "alignable()",
    "kind": "Method",
    "detail": "Function (const Index alignedStep =)",
    "insertText": "alignable(packetSize - kernel.outerStride() % packetSize)"
  },
  {
    "label": "alignedStart()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "alignedStart((!alignable) || bool(dstIsAligned)) ? 0 : internal::first_aligned<requestedAlignment>(dst_ptr, innerSize)"
  },
  {
    "label": "alignedStart()",
    "kind": "Method",
    "detail": "Function (const Index alignedEnd =)",
    "insertText": "alignedStart((innerSize-alignedStart) & ~packetAlignedMask)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (alignedStart =)",
    "insertText": "mini((alignedStart+alignedStep)%packetSize, innerSize)"
  },
  {
    "label": "vectorizableSize()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::DstEvaluatorType::XprType DstXprType ; typedef Kernel::PacketType PacketType ; enum { innerSize = DstXprType::InnerSizeAtCompileTime,packetSize = unpacket_traits<PacketType>::size,)",
    "insertText": "vectorizableSize(int(innerSize) / int(packetSize)) * int(packetSize)"
  },
  {
    "label": "generic_dense_assignment_kernel()",
    "kind": "Method",
    "detail": "Function (} } } ; # endif template<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,int Version = Specialized> class generic_dense_assignment_kernel { protected : typedef DstEvaluatorTypeT::XprType DstXprType ; typedef SrcEvaluatorTypeT::XprType SrcXprType ; public : typedef DstEvaluatorTypeT DstEvaluatorType ; typedef SrcEvaluatorTypeT SrcEvaluatorType ; typedef DstEvaluatorType::Scalar Scalar ; typedef copy_using_evaluator_traits<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor> AssignmentTraits ; typedef AssignmentTraits::PacketType PacketType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr) : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "dstEvaluator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC DstEvaluatorType&)",
    "insertText": "dstEvaluator()"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (m_functor .)",
    "insertText": "assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col))"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "assignCoeff(Index index)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (m_functor .)",
    "insertText": "assignCoeff(m_dst.coeffRef(index), m_src.coeff(index))"
  },
  {
    "label": "assignCoeffByOuterInner()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "assignCoeffByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "rowIndexByOuterInner()",
    "kind": "Method",
    "detail": "Function (Index row =)",
    "insertText": "rowIndexByOuterInner(outer, inner)"
  },
  {
    "label": "colIndexByOuterInner()",
    "kind": "Method",
    "detail": "Function (Index col =)",
    "insertText": "colIndexByOuterInner(outer, inner)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCoeff(row, col)"
  },
  {
    "label": "assignPacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode,int LoadMode,PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "assignPacket(Index row, Index col)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (m_functor . template assignPacket<)",
    "insertText": "StoreMode(&m_dst.coeffRef(row,col), m_src.template packet<LoadMode,PacketType>(row,col))"
  },
  {
    "label": "assignPacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode,int LoadMode,PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "assignPacket(Index index)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (m_functor . template assignPacket<)",
    "insertText": "StoreMode(&m_dst.coeffRef(index), m_src.template packet<LoadMode,PacketType>(index))"
  },
  {
    "label": "assignPacketByOuterInner()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode,int LoadMode,PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "assignPacketByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (assignPacket<StoreMode,LoadMode,)",
    "insertText": "PacketType(row, col)"
  },
  {
    "label": "rowIndexByOuterInner()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rowIndexByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef DstEvaluatorType::ExpressionTraits Traits ; return)",
    "insertText": "int(Traits::RowsAtCompileTime) == 1 ? 0 : int(Traits::ColsAtCompileTime) == 1 ? inner : int(DstEvaluatorType::Flags)"
  },
  {
    "label": "colIndexByOuterInner()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "colIndexByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef DstEvaluatorType::ExpressionTraits Traits ; return)",
    "insertText": "int(Traits::ColsAtCompileTime) == 1 ? 0 : int(Traits::RowsAtCompileTime) == 1 ? inner : int(DstEvaluatorType::Flags)"
  },
  {
    "label": "restricted_packet_dense_assignment_kernel()",
    "kind": "Method",
    "detail": "Function (} protected : DstEvaluatorType& m_dst ; const SrcEvaluatorType& m_src ; const Functor& m_functor ; DstXprType& m_dstExpr ; } ; template<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor> class restricted_packet_dense_assignment_kernel : public generic_dense_assignment_kernel<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,BuiltIn> { protected : typedef generic_dense_assignment_kernel<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,BuiltIn> Base ; public : typedef Base::Scalar Scalar ; typedef Base::DstXprType DstXprType ; typedef copy_using_evaluator_traits<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,4> AssignmentTraits ; typedef AssignmentTraits::PacketType PacketType ; EIGEN_DEVICE_FUNC)",
    "insertText": "restricted_packet_dense_assignment_kernel(DstEvaluatorTypeT &dst, const SrcEvaluatorTypeT &src, const Functor &func, DstXprType& dstExpr) : Base(dst, src, func, dstExpr)"
  },
  {
    "label": "resize_if_allowed()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,SrcXprType,Functor> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(dst)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(src)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols())"
  },
  {
    "label": "resize_if_allowed()",
    "kind": "Method",
    "detail": "Function (} template<DstXprType,SrcXprType,T1,T2> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols)"
  },
  {
    "label": "call_dense_assignment_loop()",
    "kind": "Method",
    "detail": "Function (} template<DstXprType,SrcXprType,Functor> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)"
  },
  {
    "label": "srcEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef evaluator<DstXprType> DstEvaluatorType ; typedef evaluator<SrcXprType> SrcEvaluatorType ; SrcEvaluatorType)",
    "insertText": "srcEvaluator(src)"
  },
  {
    "label": "resize_if_allowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize_if_allowed(dst, src, func)"
  },
  {
    "label": "dstEvaluator()",
    "kind": "Method",
    "detail": "Function (DstEvaluatorType)",
    "insertText": "dstEvaluator(dst)"
  },
  {
    "label": "kernel()",
    "kind": "Method",
    "detail": "Function (typedef generic_dense_assignment_kernel<DstEvaluatorType,SrcEvaluatorType,Functor> Kernel ; Kernel)",
    "insertText": "kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived())"
  },
  {
    "label": "call_dense_assignment_loop()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_GPU_COMPILE_PHASE template<DstXprType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_dense_assignment_loop(DstXprType& dst, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<typename DstXprType::Scalar>, DstXprType>& src, const internal::assign_op<typename DstXprType::Scalar,typename DstXprType::Scalar>& func)"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill_n(dst.data(), dst.size(), src.functor()())"
  },
  {
    "label": "call_dense_assignment_loop()",
    "kind": "Method",
    "detail": "Function (} # endif template<DstXprType,SrcXprType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src)"
  },
  {
    "label": "call_dense_assignment_loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_dense_assignment_loop(dst, src, internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (} template<DstShape,SrcShape> struct AssignmentKind ; struct Dense2Dense { } ; struct EigenBase2EigenBase { } ; template<,> struct AssignmentKind { typedef EigenBase2EigenBase Kind ; } ; template<> struct AssignmentKind<DenseShape,DenseShape> { typedef Dense2Dense Kind ; } ; template<DstXprType,SrcXprType,Functor,Kind = AssignmentKind<evaluator_traits<DstXprType>::Shape,evaluator_traits<SrcXprType>::Shape>::Kind,EnableIf = void> struct Assignment ; template<Dst,Src> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment(Dst& dst, const Src& src)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment(const Dst& dst, const Src& src)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src,Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (plain_matrix_type<Src>::type)",
    "insertText": "tmp(src)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst, tmp, func)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src,Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst, src, func)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (} template<Dst,template<> class StorageBase,Src,Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment(NoAlias<Dst,StorageBase>& dst, const Src& src, const Func& func)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst.expression(), src, func)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src,Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)"
  },
  {
    "label": "NeedToTranspose()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "NeedToTranspose((int(Dst::RowsAtCompileTime) == 1 && int(Src::ColsAtCompileTime) == 1) || (int(Dst::ColsAtCompileTime) == 1 && int(Src::RowsAtCompileTime) == 1) ) && int(Dst::SizeAtCompileTime)"
  },
  {
    "label": "actualDst()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<NeedToTranspose,Transpose<Dst>,Dst>::type ActualDstTypeCleaned ; typedef internal::conditional<NeedToTranspose,Transpose<Dst>,Dst&>::type ActualDstType ; ActualDstType)",
    "insertText": "actualDst(dst)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(Dst) EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src) EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Assignment<ActualDstTypeCleaned,Src,Func)",
    "insertText": "run(actualDst, src, func)"
  },
  {
    "label": "call_restricted_packet_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src,Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_restricted_packet_assignment_no_alias(Dst& dst, const Src& src, const Func& func)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (typedef evaluator<Dst> DstEvaluatorType ; typedef evaluator<Src> SrcEvaluatorType ; typedef restricted_packet_dense_assignment_kernel<DstEvaluatorType,SrcEvaluatorType,Func> Kernel ;)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(Dst) EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename Dst::Scalar,typename Src::Scalar)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment_no_alias(Dst& dst, const Src& src)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>())"
  },
  {
    "label": "call_assignment_no_alias_no_transpose()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src,Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment_no_alias_no_transpose(Dst& dst, const Src& src, const Func& func)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(Dst) EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Dst,Src) EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename Dst::Scalar,typename Src::Scalar)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Assignment<Dst,Src,Func)",
    "insertText": "run(dst, src, func)"
  },
  {
    "label": "call_assignment_no_alias_no_transpose()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_assignment_no_alias_no_transpose(Dst& dst, const Src& src)"
  },
  {
    "label": "call_assignment_no_alias_no_transpose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias_no_transpose(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>())"
  },
  {
    "label": "check_for_aliasing()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src> void)",
    "insertText": "check_for_aliasing(const Dst &dst, const Src &src)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<DstXprType,SrcXprType,Functor,Weak> struct Assignment<DstXprType,SrcXprType,Functor,Dense2Dense,Weak> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const Functor &func)"
  },
  {
    "label": "check_for_aliasing()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NO_DEBUG)",
    "insertText": "check_for_aliasing(dst, src)"
  },
  {
    "label": "call_dense_assignment_loop()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "call_dense_assignment_loop(dst, src, func)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,SrcXprType,Functor,Weak> struct Assignment<DstXprType,SrcXprType,Functor,EigenBase2EigenBase,Weak> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "evalTo(dst)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<SrcScalarType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<typename DstXprType::Scalar,SrcScalarType> &)"
  },
  {
    "label": "addTo()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "addTo(dst)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<SrcScalarType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<typename DstXprType::Scalar,SrcScalarType> &)"
  },
  {
    "label": "subTo()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "subTo(dst)"
  }
]