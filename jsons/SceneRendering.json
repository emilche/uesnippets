[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewState"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FILCUpdatePrimTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FILCUpdatePrimTaskData"
  },
  {
    "label": "FPostprocessContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPostprocessContext"
  },
  {
    "label": "FRayTracingLightGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingLightGrid"
  },
  {
    "label": "FRayTracingDecals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingDecals"
  },
  {
    "label": "FRayTracingLocalShaderBindingWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingLocalShaderBindingWriter"
  },
  {
    "label": "FVirtualShadowMapClipmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapClipmap"
  },
  {
    "label": "FShadowProjectionPassParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowProjectionPassParameters"
  },
  {
    "label": "FSceneTextureShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureShaderParameters"
  },
  {
    "label": "FLumenSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSceneData"
  },
  {
    "label": "FShadowSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowSceneRenderer"
  },
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "FVirtualTextureUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureUpdater"
  },
  {
    "label": "FExponentialHeightFogSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExponentialHeightFogSceneInfo"
  },
  {
    "label": "FCloudRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCloudRenderContext"
  },
  {
    "label": "FSceneWithoutWaterTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneWithoutWaterTextures"
  },
  {
    "label": "FHairStrandsVisibilityViews",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsVisibilityViews"
  },
  {
    "label": "FSortedLightSetSceneInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedLightSetSceneInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTransientLightFunctionTextureAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransientLightFunctionTextureAtlas"
  },
  {
    "label": "FSceneTexturesConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTexturesConfig"
  },
  {
    "label": "FMinimalSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalSceneTextures"
  },
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FCustomDepthTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomDepthTextures"
  },
  {
    "label": "FDynamicShadowsTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicShadowsTaskData"
  },
  {
    "label": "FAtmosphereUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAtmosphereUniformShaderParameters"
  },
  {
    "label": "FSkyAtmosphereRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyAtmosphereRenderContext"
  },
  {
    "label": "FTexture2DResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture2DResource"
  },
  {
    "label": "FSimpleLightArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleLightArray"
  },
  {
    "label": "FScreenMessageWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenMessageWriter"
  },
  {
    "label": "FVolumetricFogIntegrationParameterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricFogIntegrationParameterData"
  },
  {
    "label": "FLumenHardwareRayTracingUniformBufferParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenHardwareRayTracingUniformBufferParameters"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "FInstanceDraw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceDraw"
  },
  {
    "label": "FMobileCSMVisibilityInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileCSMVisibilityInfo"
  },
  {
    "label": "FMobileCSMSubjectPrimitives",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileCSMSubjectPrimitives"
  },
  {
    "label": "FVisibleLightViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightViewInfo"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "FTranslucenyPrimCount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucenyPrimCount"
  },
  {
    "label": "FOcclusionPrimitive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionPrimitive"
  },
  {
    "label": "FFrameBasedOcclusionQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameBasedOcclusionQueryPool"
  },
  {
    "label": "FFrameOcclusionQueries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameOcclusionQueries"
  },
  {
    "label": "FOcclusionQueryBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOcclusionQueryBatcher"
  },
  {
    "label": "FOcclusionBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionBatch"
  },
  {
    "label": "FHZBOcclusionTester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHZBOcclusionTester"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "EVolumeUpdateType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVolumeUpdateType"
  },
  {
    "label": "FVolumeUpdateRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeUpdateRegion"
  },
  {
    "label": "FClipmapUpdateBounds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClipmapUpdateBounds"
  },
  {
    "label": "FGlobalDistanceFieldClipmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDistanceFieldClipmap"
  },
  {
    "label": "FGlobalDistanceFieldInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDistanceFieldInfo"
  },
  {
    "label": "FForwardLightingViewResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FForwardLightingViewResources"
  },
  {
    "label": "FTransientLightFunctionTextureAtlasTile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransientLightFunctionTextureAtlasTile"
  },
  {
    "label": "FVolumetricFogLocalLightFunctionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricFogLocalLightFunctionInfo"
  },
  {
    "label": "FVolumetricFogViewResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricFogViewResources"
  },
  {
    "label": "FVolumetricMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricMeshBatch"
  },
  {
    "label": "FSkyMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyMeshBatch"
  },
  {
    "label": "FSortedTrianglesMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedTrianglesMeshBatch"
  },
  {
    "label": "FTemporalAAHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemporalAAHistory"
  },
  {
    "label": "FTSRHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTSRHistory"
  },
  {
    "label": "FScreenSpaceDenoiserHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenSpaceDenoiserHistory"
  },
  {
    "label": "FGTAOTAAHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGTAOTAAHistory"
  },
  {
    "label": "FPreviousViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreviousViewInfo"
  },
  {
    "label": "FRayTracingCullingParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingCullingParameters"
  },
  {
    "label": "FPrimitiveInstanceRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveInstanceRange"
  },
  {
    "label": "FShadowMapRenderTargetsRefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapRenderTargetsRefCounted"
  },
  {
    "label": "FSortedShadowMapAtlas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedShadowMapAtlas"
  },
  {
    "label": "FSortedShadowMaps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedShadowMaps"
  },
  {
    "label": "FOcclusionSubmittedFenceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionSubmittedFenceState"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FComputeLightGridOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputeLightGridOutput"
  },
  {
    "label": "FSceneRendererBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRendererBase"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FCustomRenderPassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomRenderPassInfo"
  },
  {
    "label": "FCrossGPUTransfersDeferred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrossGPUTransfersDeferred"
  },
  {
    "label": "FFXSystemInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFXSystemInterface"
  },
  {
    "label": "FGatherShadowPrimitivesPrepareTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatherShadowPrimitivesPrepareTask"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FSkyAtmospherePendingRDGResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmospherePendingRDGResources"
  },
  {
    "label": "FVisibilityTaskData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityTaskData"
  },
  {
    "label": "FRendererModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRendererModule"
  },
  {
    "label": "FForwardScreenSpaceShadowMaskTextureMobileOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForwardScreenSpaceShadowMaskTextureMobileOutputs"
  },
  {
    "label": "FMobileSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileSceneRenderer"
  },
  {
    "label": "FInitViewTaskDatas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitViewTaskDatas"
  },
  {
    "label": "FMobileRenderPassParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileRenderPassParameters"
  },
  {
    "label": "FRenderViewContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderViewContext"
  },
  {
    "label": "FFastVramConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastVramConfig"
  },
  {
    "label": "ShouldUseStereoLumenOptimizations()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SceneRendererInterface . h \" # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" Containers / ArrayView . h \" # include \" Stats / Stats . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" UniformBuffer . h \" # include \" GlobalDistanceField . h \" # include \" GlobalDistanceFieldParameters . h \" # include \" SceneView . h \" # include \" RendererInterface . h \" # include \" BatchedElements . h \" # include \" MeshBatch . h \" # include \" ScenePrivateBase . h \" # include \" SceneVisibility . h \" # include \" PrimitiveSceneInfo . h \" # include \" PrimitiveViewRelevance . h \" # include \" LightShaftRendering . h \" # include \" StaticBoundShaderState . h \" # include \" Templates / UniquePtr . h \" # include \" MeshDrawCommands . h \" # include \" MeshPassProcessor . h \" # include \" RayTracingMeshDrawCommands . h \" # include \" ShaderPrintParameters . h \" # include \" PostProcess / PostProcessAmbientOcclusionMobile . h \" # include \" VirtualShadowMaps / VirtualShadowMapArray . h \" # include \" VirtualShadowMaps / VirtualShadowMapProjection . h \" # include \" Lumen / LumenTranslucencyVolumeLighting . h \" # include \" MegaLights / MegaLights . h \" # include \" HairStrands / HairStrandsData . h \" # include \" Substrate / Substrate . h \" # include \" TemporalUpscaler . h \" # include \" GPUScene . h \" # include \" RenderCore . h \" # include \" SceneTextures . h \" # include \" TranslucencyPass . h \" # include \" SceneTexturesConfig . h \" # include \" SceneUniformBuffer . h \" # include \" TextureFallbacks . h \" # include \" SceneInterface . h \" # include \" Async / Mutex . h \" # include \" LocalFogVolumeRendering . h \" # include \" Nanite / NaniteShared . h \" # include \" LightFunctionAtlas . h \" # include \" SceneExtensions . h \" # include \" PostProcess / LensDistortion . h \" # if RHI_RAYTRACING # include \" RayTracingInstanceBufferUtil . h \" # endif class FScene ; class FSceneViewState ; class FViewInfo ; struct FILCUpdatePrimTaskData ; class FPostprocessContext ; class FRayTracingLightGrid ; class FRayTracingDecals ; class FRayTracingLocalShaderBindingWriter ; class FVirtualShadowMapClipmap ; class FShadowProjectionPassParameters ; class FSceneTextureShaderParameters ; class FLumenSceneData ; class FShadowSceneRenderer ; class FGlobalShaderMap ; class FVirtualTextureUpdater ; class FExponentialHeightFogSceneInfo ; struct FCloudRenderContext ; struct FSceneWithoutWaterTextures ; struct FHairStrandsVisibilityViews ; struct FSortedLightSetSceneInfo ; enum class EVelocityPass : uint32 ; enum class ERayTracingSceneLayer : uint8 ; class FTransientLightFunctionTextureAtlas ; struct FSceneTexturesConfig ; struct FMinimalSceneTextures ; struct FSceneTextures ; struct FCustomDepthTextures ; struct FDynamicShadowsTaskData ; class FAtmosphereUniformShaderParameters ; struct FSkyAtmosphereRenderContext ; class FTexture2DResource ; class FSimpleLightArray ; struct FScreenMessageWriter ; struct FVolumetricFogIntegrationParameterData ; class FLumenHardwareRayTracingUniformBufferParameters ; struct FDBufferTextures ; namespace Nanite { struct FInstanceDraw ; } bool)",
    "insertText": "ShouldUseStereoLumenOptimizations()"
  },
  {
    "label": "DECLARE_GPU_DRAWCALL_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_GPU_DRAWCALL_STAT_EXTERN(VirtualTextureUpdate)"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(Postprocessing, TEXT(\"Postprocessing\")) DECLARE_GPU_STAT_NAMED_EXTERN(CustomRenderPasses, TEXT(\"CustomRenderPasses\"))"
  },
  {
    "label": "FMobileCSMVisibilityInfo()",
    "kind": "Method",
    "detail": "Function (public : uint32 bMobileDynamicCSMInUse : 1 ; uint32 bAlwaysUseCSM : 1 ; FSceneBitArray MobilePrimitiveCSMReceiverVisibilityMap ; FSceneBitArray MobileCSMStaticMeshVisibilityMap ; FSceneBitArray MobileNonCSMStaticMeshVisibilityMap ;)",
    "insertText": "FMobileCSMVisibilityInfo() : bMobileDynamicCSMInUse(false), bAlwaysUseCSM(false)"
  },
  {
    "label": "AddSubjectPrimitive()",
    "kind": "Method",
    "detail": "Function (} } ; class FMobileCSMSubjectPrimitives { public : void)",
    "insertText": "AddSubjectPrimitive(const FPrimitiveSceneInfo* PrimitiveSceneInfo, int32 PrimitiveId)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 PrimitiveIndex = PrimitiveSceneInfo ->)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShadowSubjectPrimitives .)",
    "insertText": "Add(PrimitiveSceneInfo)"
  },
  {
    "label": "GetShadowSubjectPrimitives()",
    "kind": "Method",
    "detail": "Function (ShadowSubjectPrimitivesEncountered [ PrimitiveId ] = true ; } } const TArray<const FPrimitiveSceneInfo*,SceneRenderingAllocator>&)",
    "insertText": "GetShadowSubjectPrimitives()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ShadowSubjectPrimitivesEncountered .)",
    "insertText": "Init(false, PrimitiveCount)"
  },
  {
    "label": "FVisibleLightViewInfo()",
    "kind": "Method",
    "detail": "Function (} protected : FSceneBitArray ShadowSubjectPrimitivesEncountered ; TArray<const FPrimitiveSceneInfo*,SceneRenderingAllocator> ShadowSubjectPrimitives ; } ; class FVisibleLightViewInfo { public : TArray<FPrimitiveSceneInfo*,SceneRenderingAllocator> VisibleDynamicLitPrimitives ; FSceneBitArray ProjectedShadowVisibilityMap ; TArray<FPrimitiveViewRelevance,SceneRenderingAllocator> ProjectedShadowViewRelevanceMap ; uint32 bInViewFrustum : 1 ; uint32 bInDrawRange : 1 ; FMobileCSMSubjectPrimitives MobileCSMSubjectPrimitives ;)",
    "insertText": "FVisibleLightViewInfo() : bInViewFrustum(false) , bInDrawRange(false)"
  },
  {
    "label": "FindShadowClipmapForView()",
    "kind": "Method",
    "detail": "Function (} } ; class FVisibleLightInfo { public : TArray<FProjectedShadowInfo*,SceneRenderingAllocator> AllProjectedShadows ; TArray<FProjectedShadowInfo*,SceneRenderingAllocator> ShadowsToProject ; TArray<FProjectedShadowInfo*,SceneRenderingAllocator> CapsuleShadowsToProject ; TArray<TRefCountPtr<FProjectedShadowInfo>,SceneRenderingAllocator> ProjectedPreShadows ; TArray<FProjectedShadowInfo*,SceneRenderingAllocator> OccludedPerObjectShadows ; TArray<TSharedPtr<FVirtualShadowMapClipmap>,SceneRenderingAllocator> VirtualShadowMapClipmaps ; TSharedPtr<FVirtualShadowMapClipmap>)",
    "insertText": "FindShadowClipmapForView(const FViewInfo* View)"
  },
  {
    "label": "ContainsOnlyVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsOnlyVirtualShadowMaps()"
  },
  {
    "label": "HasVirtualShadowMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVirtualShadowMap()"
  },
  {
    "label": "FTranslucenyPrimCount()",
    "kind": "Method",
    "detail": "Function (int32 VirtualShadowMapId = INDEX_NONE ; } ; struct FTranslucenyPrimCount { private : uint32 Count [ ETranslucencyPass::TPT_MAX ] ; bool UseSceneColorCopyPerPass [ ETranslucencyPass::TPT_MAX ] ; public :)",
    "insertText": "FTranslucenyPrimCount()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Count [ i ] = 0 ; UseSceneColorCopyPerPass [ i ] = false ; } } void)",
    "insertText": "Append(const FTranslucenyPrimCount& InSrc)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Count [ i ] + = InSrc . Count [ i ] ; UseSceneColorCopyPerPass [ i ] | = InSrc . UseSceneColorCopyPerPass [ i ] ; } } void)",
    "insertText": "Add(ETranslucencyPass::Type InPass, bool bUseSceneColorCopy)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (+ + Count [ InPass ] ; UseSceneColorCopyPerPass [ InPass ] | = bUseSceneColorCopy ; } int32)",
    "insertText": "Num(ETranslucencyPass::Type InPass)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumTotal = 0 ;)",
    "insertText": "for(uint32 PassIndex = 0; PassIndex < ETranslucencyPass::TPT_MAX; ++PassIndex)"
  },
  {
    "label": "UseSceneColorCopy()",
    "kind": "Method",
    "detail": "Function (NumTotal + = Count [ PassIndex ] ; } return NumTotal ; } bool)",
    "insertText": "UseSceneColorCopy(ETranslucencyPass::Type InPass)"
  },
  {
    "label": "AllocateQuery()",
    "kind": "Method",
    "detail": "Function (FRHIRenderQuery*)",
    "insertText": "AllocateQuery()"
  },
  {
    "label": "AdvanceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceFrame(uint32 InOcclusionFrameCounter, uint32 InNumBufferedFrames, bool bStereoRoundRobin)"
  },
  {
    "label": "FFrameOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (private : struct FFrameOcclusionQueries { TArray<FRenderQueryRHIRef> Queries ; int32 FirstFreeIndex ; uint32 OcclusionFrameCounter ;)",
    "insertText": "FFrameOcclusionQueries() : FirstFreeIndex(0) , OcclusionFrameCounter(0)"
  },
  {
    "label": "FOcclusionQueryBatcher()",
    "kind": "Method",
    "detail": "Function (} } ; FFrameOcclusionQueries FrameQueries [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames* 2 ] ; uint32 CurrentFrameIndex = 0 ; uint32 OcclusionFrameCounter = - 1 ; uint32 NumBufferedFrames = 0 ; } ; class FOcclusionQueryBatcher { public : enum { OccludedPrimitiveQueryBatchSize = 1 6 } ;)",
    "insertText": "FOcclusionQueryBatcher(class FSceneViewState* ViewState, uint32 InMaxBatchedPrimitives)"
  },
  {
    "label": "FOcclusionQueryBatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOcclusionQueryBatcher()"
  },
  {
    "label": "HasBatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBatches(void)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush(FRHICommandList& RHICmdList)"
  },
  {
    "label": "BatchPrimitive()",
    "kind": "Method",
    "detail": "Function (FRHIRenderQuery*)",
    "insertText": "BatchPrimitive(const FVector& BoundsOrigin, const FVector& BoundsBoxExtent, FGlobalDynamicVertexBuffer& DynamicVertexBuffer)"
  },
  {
    "label": "GetNumBatchOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBatchOcclusionQueries()"
  },
  {
    "label": "FHZBOcclusionTester()",
    "kind": "Method",
    "detail": "Function (} private : struct FOcclusionBatch { FRHIRenderQuery* Query ; FGlobalDynamicVertexBuffer::FAllocation VertexAllocation ; } ; TArray<FOcclusionBatch,SceneRenderingAllocator> BatchOcclusionQueries ; FOcclusionBatch* CurrentBatchOcclusionQuery ; const uint32 MaxBatchedPrimitives ; uint32 NumBatchedPrimitives ; FFrameBasedOcclusionQueryPool* OcclusionQueryPool ; } ; class FHZBOcclusionTester : public FRenderResource { public :)",
    "insertText": "FHZBOcclusionTester()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNum()"
  },
  {
    "label": "AddBounds()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AddBounds(const FVector& BoundsOrigin, const FVector& BoundsExtent)"
  },
  {
    "label": "Submit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Submit(FRDGBuilder& GraphBuilder, const FViewInfo& View)"
  },
  {
    "label": "MapResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapResults(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "UnmapResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapResults(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible(uint32 Index)"
  },
  {
    "label": "IsValidFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFrame(uint32 FrameNumber)"
  },
  {
    "label": "SetValidFrameNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidFrameNumber(uint32 FrameNumber)"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes(bool bLogSizes)"
  },
  {
    "label": "IsInvalidFrame()",
    "kind": "Method",
    "detail": "Function (private : enum { SizeX = 2 5 6 } ; enum { SizeY = 2 5 6 } ; enum { FrameNumberMask = 0 x7fffffff } ; enum { InvalidFrameNumber = 0 xffffffff } ; TArray<FOcclusionPrimitive,SceneRenderingAllocator> Primitives ; const uint8* ResultsBuffer ; int32 ResultsBufferRowPitch ; TUniquePtr<FRHIGPUTextureReadback> ResultsReadback ; bool)",
    "insertText": "IsInvalidFrame()"
  },
  {
    "label": "SetInvalidFrameNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInvalidFrameNumber()"
  },
  {
    "label": "FParallelCommandListBindings()",
    "kind": "Method",
    "detail": "Function (public : template<ParameterStructType>)",
    "insertText": "FParallelCommandListBindings(ParameterStructType* ParameterStruct) : StaticUniformBuffers(GetStaticUniformBuffers(ParameterStruct)) , bHasRenderPassInfo(HasRenderPassInfo(ParameterStruct))"
  },
  {
    "label": "GetRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (RenderPassInfo =)",
    "insertText": "GetRenderPassInfo(ParameterStruct)"
  },
  {
    "label": "SetOnCommandList()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetOnCommandList(FRHICommandList& RHICmdList)"
  },
  {
    "label": "BeginRenderPass()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "BeginRenderPass(RenderPassInfo, TEXT(\"Parallel\"))"
  },
  {
    "label": "SetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} RHICmdList .)",
    "insertText": "SetStaticUniformBuffers(StaticUniformBuffers)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (public : const FRDGPass* Pass ; const FViewInfo& View ; FRHICommandListImmediate& ParentCmdList ; int32 Width ; int32 NumAlloc ; int32 MinDrawsPerCommandList ; private : TArray<FRHICommandListImmediate::FQueuedCommandList,SceneRenderingAllocator> QueuedCommandLists ; protected : void)",
    "insertText": "Dispatch(bool bHighPriority = false)"
  },
  {
    "label": "AllocCommandList()",
    "kind": "Method",
    "detail": "Function (FRHICommandList*)",
    "insertText": "AllocCommandList()"
  },
  {
    "label": "FParallelCommandListSet()",
    "kind": "Method",
    "detail": "Function (bool bHasRenderPasses ; public :)",
    "insertText": "FParallelCommandListSet(const FRDGPass* InPass, const FViewInfo& InView, FRHICommandListImmediate& InParentCmdList, bool bHasRenderPasses = true)"
  },
  {
    "label": "FParallelCommandListSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParallelCommandListSet(const FRDGPass* InPass, TStatId InExecuteStat, const FViewInfo& InView, FRHICommandListImmediate& InParentCmdList, bool bHasRenderPasses = true) : FParallelCommandListSet(InPass, InView, InParentCmdList, bHasRenderPasses)"
  },
  {
    "label": "FParallelCommandListSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FParallelCommandListSet()"
  },
  {
    "label": "NumParallelCommandLists()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumParallelCommandLists()"
  },
  {
    "label": "NewParallelCommandList()",
    "kind": "Method",
    "detail": "Function (} FRHICommandList*)",
    "insertText": "NewParallelCommandList()"
  },
  {
    "label": "SetStateOnCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateOnCommandList(FRHICommandList& CmdList)"
  },
  {
    "label": "FRDGParallelCommandListSet()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRDGParallelCommandListSet(const FRDGPass* InPass, FRHICommandListImmediate& InParentCmdList, const FViewInfo& InView, const FParallelCommandListBindings& InBindings, float InViewportScale = 1.0f) : FParallelCommandListSet(InPass, InView, InParentCmdList, InBindings.bHasRenderPassInfo) , Bindings(InBindings) , ViewportScale(InViewportScale)"
  },
  {
    "label": "FRDGParallelCommandListSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGParallelCommandListSet(const FRDGPass* InPass, FRHICommandListImmediate& InParentCmdList, TStatId InStatId, const FViewInfo& InView, const FParallelCommandListBindings& InBindings, float InViewportScale = 1.0f) : FRDGParallelCommandListSet(InPass, InParentCmdList, InView, InBindings, InViewportScale)"
  },
  {
    "label": "FRDGParallelCommandListSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRDGParallelCommandListSet()"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatch(bHighPriority)"
  },
  {
    "label": "SetStateOnCommandList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStateOnCommandList(FRHICommandList& RHICmdList)"
  },
  {
    "label": "SetHighPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPriority()"
  },
  {
    "label": "FVolumeUpdateRegion()",
    "kind": "Method",
    "detail": "Function (bHighPriority = true ; } private : FParallelCommandListBindings Bindings ; float ViewportScale ; bool bHighPriority = false ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS enum EVolumeUpdateType { VUT_MeshDistanceFields = 1,VUT_Heightfields = 2,VUT_All = VUT_MeshDistanceFields | VUT_Heightfields } ; class FVolumeUpdateRegion { public :)",
    "insertText": "FVolumeUpdateRegion() : UpdateType(VUT_All)"
  },
  {
    "label": "FClipmapUpdateBounds()",
    "kind": "Method",
    "detail": "Function (} FBox Bounds ; FIntVector CellsSize ; EVolumeUpdateType UpdateType ; } ; class FClipmapUpdateBounds { public :)",
    "insertText": "FClipmapUpdateBounds() : Center(0.0f, 0.0f, 0.0f) , bExpandByInfluenceRadius(false) , Extent(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FClipmapUpdateBounds()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FClipmapUpdateBounds(const FVector& InCenter, const FVector& InExtent, bool bInExpandByInfluenceRadius) : Center(InCenter) , bExpandByInfluenceRadius(bInExpandByInfluenceRadius) , Extent(InExtent)"
  },
  {
    "label": "UpdateParameterData()",
    "kind": "Method",
    "detail": "Function (} FVector Center ; bool bExpandByInfluenceRadius ; FVector Extent ; } ; enum class EGlobalSDFFullRecaptureReason { None,TooManyUpdateBounds,HeightfieldStreaming,MeshSDFStreaming,NoViewState } ; class FGlobalDistanceFieldClipmap { public : FBox Bounds ; FVector ScrollOffset ; EGlobalSDFFullRecaptureReason FullRecaptureReason = EGlobalSDFFullRecaptureReason::None ; TArray<FClipmapUpdateBounds,TInlineAllocator<6 4>> UpdateBounds ; } ; class FGlobalDistanceFieldInfo { public : bool bInitialized = false ; TArray<FGlobalDistanceFieldClipmap> MostlyStaticClipmaps ; TArray<FGlobalDistanceFieldClipmap> Clipmaps ; FGlobalDistanceFieldParameterData ParameterData ; TRefCountPtr<FRDGPooledBuffer> PageFreeListAllocatorBuffer ; TRefCountPtr<FRDGPooledBuffer> PageFreeListBuffer ; TRefCountPtr<IPooledRenderTarget> PageAtlasTexture ; TRefCountPtr<IPooledRenderTarget> CoverageAtlasTexture ; TRefCountPtr<FRDGPooledBuffer> PageObjectGridBuffer ; TRefCountPtr<IPooledRenderTarget> PageTableCombinedTexture ; TRefCountPtr<IPooledRenderTarget> PageTableLayerTextures [ GDF_Num ] ; TRefCountPtr<IPooledRenderTarget> MipTexture ; void)",
    "insertText": "UpdateParameterData(float MaxOcclusionDistance, bool bLumenEnabled, float LumenSceneViewDistance, FVector PreViewTranslation)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} ; const int32 GMaxForwardShadowCascades = 4 ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR(FForwardLightData, ) SHADER_PARAMETER(uint32,NumLocalLights) SHADER_PARAMETER(uint32, NumReflectionCaptures) SHADER_PARAMETER(uint32, HasDirectionalLight) SHADER_PARAMETER(uint32, NumGridCells) SHADER_PARAMETER(FIntVector, CulledGridSize) SHADER_PARAMETER(uint32, MaxCulledLightsPerCell) SHADER_PARAMETER(uint32, LightGridPixelSizeShift) SHADER_PARAMETER(FVector3f, LightGridZParams) SHADER_PARAMETER(FVector3f, DirectionalLightDirection) SHADER_PARAMETER(float, DirectionalLightSourceRadius) SHADER_PARAMETER(float, DirectionalLightSoftSourceRadius) SHADER_PARAMETER(FVector3f, DirectionalLightColor) SHADER_PARAMETER(float, DirectionalLightVolumetricScatteringIntensity) SHADER_PARAMETER(float, DirectionalLightSpecularScale) SHADER_PARAMETER(float, DirectionalLightDiffuseScale) SHADER_PARAMETER(uint32, DirectionalLightShadowMapChannelMask) SHADER_PARAMETER(FVector2f, DirectionalLightDistanceFadeMAD) SHADER_PARAMETER(uint32, NumDirectionalLightCascades) SHADER_PARAMETER(int32, DirectionalLightVSM) SHADER_PARAMETER(FVector4f, CascadeEndDepths) SHADER_PARAMETER_ARRAY(FMatrix44f, DirectionalLightTranslatedWorldToShadowMatrix, [GMaxForwardShadowCascades]) SHADER_PARAMETER_ARRAY(FVector4f, DirectionalLightShadowmapMinMax, [GMaxForwardShadowCascades]) SHADER_PARAMETER(FVector4f, DirectionalLightShadowmapAtlasBufferSize) SHADER_PARAMETER(float, DirectionalLightDepthBias) SHADER_PARAMETER(uint32, DirectionalLightUseStaticShadowing) SHADER_PARAMETER(uint32, SimpleLightsEndIndex) SHADER_PARAMETER(uint32, ClusteredDeferredSupportedEndIndex) SHADER_PARAMETER(uint32, MegaLightsSupportedStartIndex) SHADER_PARAMETER(FVector4f, DirectionalLightStaticShadowBufferSize) SHADER_PARAMETER(FMatrix44f, DirectionalLightTranslatedWorldToStaticShadow) SHADER_PARAMETER(uint32, DirectLightingShowFlag) SHADER_PARAMETER(uint32, LightFunctionAtlasLightIndex) SHADER_PARAMETER(uint32, bAffectsTranslucentLighting) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, DirectionalLightShadowmapAtlas) SHADER_PARAMETER_SAMPLER(SamplerState, ShadowmapSampler) SHADER_PARAMETER_TEXTURE(Texture2D, DirectionalLightStaticShadowmap) SHADER_PARAMETER_SAMPLER(SamplerState, StaticShadowmapSampler) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, ForwardLocalLightBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, NumCulledLightsGrid) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, CulledLightDataGrid32Bit) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, CulledLightDataGrid16Bit) END_GLOBAL_SHADER_PARAMETER_STRUCT() extern TRDGUniformBufferRef<FForwardLightData> CreateDummyForwardLightUniformBuffer(FRDGBuilder& GraphBuilder, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "SetDummyForwardLightUniformBufferOnViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDummyForwardLightUniformBufferOnViews(FRDGBuilder& GraphBuilder, EShaderPlatform ShaderPlatform, TArray<FViewInfo>& Views)"
  },
  {
    "label": "SetUniformBuffer()",
    "kind": "Method",
    "detail": "Function (class FForwardLightingViewResources { public : void)",
    "insertText": "SetUniformBuffer(TRDGUniformBufferRef<FForwardLightData> UniformBuffer)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} const FForwardLightData* ForwardLightData = nullptr ; TRDGUniformBufferRef<FForwardLightData> ForwardLightUniformBuffer = nullptr ; const FLightSceneProxy* SelectedForwardDirectionalLightProxy = nullptr ; TArray<int32> LocalLightVisibleLightInfosIndex ; } ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR(FVolumetricFogGlobalData,) SHADER_PARAMETER(FIntVector,ViewGridSizeInt) SHADER_PARAMETER(FVector3f, ViewGridSize) SHADER_PARAMETER(FIntVector,ResourceGridSizeInt) SHADER_PARAMETER(FVector3f, ResourceGridSize) SHADER_PARAMETER(FVector3f, GridZParams) SHADER_PARAMETER(FVector2f, SVPosToVolumeUV) SHADER_PARAMETER(float, MaxDistance) SHADER_PARAMETER(float, LightSoftFading) SHADER_PARAMETER(FVector3f, HeightFogInscatteringColor) SHADER_PARAMETER(FVector3f, HeightFogDirectionalLightInscatteringColor) SHADER_PARAMETER(FIntPoint, FogGridToPixelXY) END_GLOBAL_SHADER_PARAMETER_STRUCT() extern void SetupVolumetricFogGlobalData(const FViewInfo& View, FVolumetricFogGlobalData& Parameters)"
  },
  {
    "label": "FVolumetricFogViewResources()",
    "kind": "Method",
    "detail": "Function (struct FTransientLightFunctionTextureAtlasTile { bool bIsDefault ; FRDGTextureRef Texture ; FIntRect RectBound ; FVector4f MinMaxUvBound ; } ; struct FVolumetricFogLocalLightFunctionInfo { FTransientLightFunctionTextureAtlasTile AtlasTile ; FMatrix44f LightFunctionTranslatedWorldToLightMatrix ; } ; class FVolumetricFogViewResources { public : TUniformBufferRef<FVolumetricFogGlobalData> VolumetricFogGlobalData ; FRDGTextureRef IntegratedLightScatteringTexture = nullptr ;)",
    "insertText": "FVolumetricFogViewResources()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "FVolumetricMeshBatch()",
    "kind": "Method",
    "detail": "Function (IntegratedLightScatteringTexture = nullptr ; } } ; struct FVolumetricMeshBatch { const FMeshBatch* Mesh ; const FPrimitiveSceneProxy* Proxy ;)",
    "insertText": "FVolumetricMeshBatch(const FMeshBatch* M, const FPrimitiveSceneProxy* P) : Mesh(M) , Proxy(P)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVolumetricMeshBatch& rhs)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FReflectionCaptureShaderData,) SHADER_PARAMETER_ARRAY(FVector4f,PositionHighAndRadius,[GMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,PositionLow,[GMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,CaptureProperties,[GMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,CaptureOffsetAndAverageBrightness,[GMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FMatrix44f,BoxTransform,[GMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,BoxScales,[GMaxNumReflectionCaptures]) END_GLOBAL_SHADER_PARAMETER_STRUCT() PRAGMA_ENABLE_DEPRECATION_WARNINGS UE_DEPRECATED(5.4, \"Using GMobileMaxNumReflectionCaptures directly is deprecated. Please use GetMaxNumReflectionCaptures(EShaderPlatform) instead\")"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FMobileReflectionCaptureShaderData, ) SHADER_PARAMETER_ARRAY(FVector4f,PositionHighAndRadius,[GMobileMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,PositionLow,[GMobileMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,CaptureProperties,[GMobileMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,CaptureOffsetAndAverageBrightness,[GMobileMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FMatrix44f,BoxTransform,[GMobileMaxNumReflectionCaptures]) SHADER_PARAMETER_ARRAY(FVector4f,BoxScales,[GMobileMaxNumReflectionCaptures]) END_GLOBAL_SHADER_PARAMETER_STRUCT() PRAGMA_ENABLE_DEPRECATION_WARNINGS extern int32 GetMaxNumReflectionCaptures(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (struct FTemporalAAHistory { int32 kRenderTargetCount = 2 ; TStaticArray<TRefCountPtr<IPooledRenderTarget>,kRenderTargetCount> RT ; FIntPoint ReferenceBufferSize ; FIntRect ViewportRect ; int32 OutputSliceIndex = 0 ; void)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "FTemporalAAHistory()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FTemporalAAHistory()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FTSRHistory()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FTSRHistory()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; # if RHI_RAYTRACING namespace RayTracing { enum class ECullingMode : uint8 ; } ; struct FRayTracingCullingParameters { RayTracing::ECullingMode CullingMode ; float CullingRadius ; float FarFieldCullingRadius ; float CullAngleThreshold ; float AngleThresholdRatio ; float AngleThresholdRatioSq ; FVector ViewOrigin ; FVector ViewDirection ; FVector3f TranslatedViewOrigin ; bool bCullAllObjects ; bool bCullByRadiusOrDistance ; bool bIsRayTracingFarField ; bool bCullUsingGroupIds ; bool bCullMinDrawDistance ; bool bUseInstanceCulling ; void)",
    "insertText": "Init(FViewInfo& View)"
  },
  {
    "label": "GetLumenTranslucencyGIVolume()",
    "kind": "Method",
    "detail": "Function (} ; # endif struct FPrimitiveInstanceRange { int32 PrimitiveIndex ; int32 InstanceSceneDataOffset ; int32 NumInstances ; } ; class FViewInfo : public FSceneView { public : FSceneRenderingBulkObjectAllocator Allocator ; FIntRect ViewRect ; FSceneViewState* ViewState ; TUniquePtr<FViewUniformShaderParameters> CachedViewUniformShaderParameters ; FSceneBitArray PrimitiveVisibilityMap ; FSceneBitArray PrimitiveRayTracingVisibilityMap ; FSceneBitArray PrimitiveDefinitelyUnoccludedMap ; FSceneBitArray PotentiallyFadingPrimitiveMap ; TArray<FRHIUniformBuffer*,SceneRenderingAllocator> PrimitiveFadeUniformBuffers ; FSceneBitArray PrimitiveFadeUniformBufferMap ; FUniformBufferRHIRef DitherFadeInUniformBuffer ; FUniformBufferRHIRef DitherFadeOutUniformBuffer ; TArray<FPrimitiveViewRelevance,SceneRenderingAllocator> PrimitiveViewRelevanceMap ; FSceneBitArray StaticMeshVisibilityMap ; FSceneBitArray StaticMeshFadeOutDitheredLODMap ; FSceneBitArray StaticMeshFadeInDitheredLODMap ; TArray<FLODMask,SceneRenderingAllocator> PrimitivesLODMask ; TArray<FPrimitiveSceneInfo*,SceneRenderingAllocator> VisibleDynamicPrimitivesWithSimpleLights ; int32 NumVisibleDynamicPrimitives ; int32 NumVisibleDynamicEditorPrimitives ; int32 NumVisibleDynamicMeshElements [ EMeshPass::Num ] ; TArray<FPrimitiveSceneInfo*,SceneRenderingAllocator> DirtyIndirectLightingCacheBufferPrimitives ; UE::FMutex DirtyIndirectLightingCacheBufferPrimitivesMutex ; FTranslucentSelfShadowUniformBufferMap TranslucentSelfShadowUniformBufferMap ; FGlobalDistanceFieldInfo GlobalDistanceFieldInfo ; FTranslucenyPrimCount TranslucentPrimCount ; bool bHasDistortionPrimitives ; bool bHasCustomDepthPrimitives ; TSet<uint32,DefaultKeyFuncs<uint32>,SceneRenderingSetAllocator> CustomDepthStencilValues ; TArray<FPrimitiveInstanceRange,SceneRenderingAllocator> NaniteCustomDepthInstances ; TArray<FVolumetricMeshBatch,SceneRenderingAllocator> VolumetricMeshBatches ; TArray<FVolumetricMeshBatch,SceneRenderingAllocator> HeterogeneousVolumesMeshBatches ; TArray<FSkyMeshBatch,SceneRenderingAllocator> SkyMeshBatches ; TArray<FSortedTrianglesMeshBatch,SceneRenderingAllocator> SortedTrianglesMeshBatches ; TArray<FVisibleLightViewInfo,SceneRenderingAllocator> VisibleLightInfos ; TArray<const FLightSceneProxy*,SceneRenderingAllocator> VisibleReflectionCaptureLights ; FBatchedElements BatchedViewElements ; FBatchedElements TopBatchedViewElements ; TIndirectArray<FMeshBatch,SceneRenderingAllocator> ViewMeshElements ; TIndirectArray<FMeshBatch,SceneRenderingAllocator> TopViewMeshElements ; TArray<FDynamicPrimitiveResource*,SceneRenderingAllocator> DynamicResources ; TArray<FMeshBatchAndRelevance,SceneRenderingAllocator> DynamicMeshElements ; TArray<FInt32Vector2,SceneRenderingAllocator> DynamicMeshElementRanges ; TArray<FMeshBatchAndRelevance,SceneRenderingAllocator> HairStrandsMeshElements ; TArray<FMeshBatchAndRelevance,SceneRenderingAllocator> HairCardsMeshElements ; TArray<FMeshPassMask,SceneRenderingAllocator> DynamicMeshElementsPassRelevance ; TArray<FMeshBatchAndRelevance,SceneRenderingAllocator> RayTracedDynamicMeshElements ; TArray<FMeshBatchAndRelevance,SceneRenderingAllocator> DynamicEditorMeshElements ; FSimpleElementCollector SimpleElementCollector ; FSimpleElementCollector EditorSimpleElementCollector ; # if UE_ENABLE_DEBUG_DRAWING FSimpleElementCollector DebugSimpleElementCollector ; # endif TStaticArray<FParallelMeshDrawCommandPass,EMeshPass::Num> ParallelMeshDrawCommandPasses ; # if RHI_RAYTRACING FRayTracingShaderBindingDataOneFrameArray DirtyRayTracingShaderBindings ; FDynamicRayTracingMeshCommandStorage DynamicRayTracingMeshCommandStorage ; FRayTracingCullingParameters RayTracingCullingParameters ; UE::Tasks::FTask RayTracingSceneInitTask ; TArray<UE::Tasks::FTask> AddRayTracingMeshBatchTaskList ; TArray<FRayTracingShaderBindingDataOneFrameArray*,SceneRenderingAllocator> DirtyRayTracingShaderBindingsPerTask ; TArray<FDynamicRayTracingMeshCommandStorage*,SceneRenderingAllocator> DynamicRayTracingMeshCommandStoragePerTask ; # endif FMobileCSMVisibilityInfo MobileCSMVisibilityInfo ; FSubstrateViewData SubstrateViewData ; FLocalFogVolumeViewData LocalFogVolumeViewData ; FHairStrandsViewData HairStrandsViewData ; LightFunctionAtlas::FLightFunctionAtlasViewData LightFunctionAtlasViewData ; FVector4f ExponentialFogParameters ; FVector4f ExponentialFogParameters2 ; FVector3f ExponentialFogColor ; float FogMaxOpacity ; FVector4f ExponentialFogParameters3 ; FVector4f SkyAtmosphereAmbientContributionColorScale ; float FogEndDistance ; bool bEnableVolumetricFog ; float VolumetricFogStartDistance ; float VolumetricFogNearFadeInDistanceInv ; FVector3f VolumetricFogAlbedo ; float VolumetricFogPhaseG ; FVector2f SinCosInscatteringColorCubemapRotation ; UTexture* FogInscatteringColorCubemap ; FVector FogInscatteringTextureParameters ; bool bUseDirectionalInscattering ; float DirectionalInscatteringExponent ; float DirectionalInscatteringStartDistance ; FVector InscatteringLightDirection ; FLinearColor DirectionalInscatteringColor ; FVector TranslucencyLightingVolumeMin [ TVC_MAX ] ; float TranslucencyVolumeVoxelSize [ TVC_MAX ] ; FVector TranslucencyLightingVolumeSize [ TVC_MAX ] ; FViewInfo* TemporalSourceView ; int32 TemporalJitterSequenceLength ; int32 TemporalJitterIndex ; FVector2D TemporalJitterPixels ; uint32 bStatePrevViewInfoIsReadOnly : 1 ; uint32 bHasNoVisiblePrimitive : 1 ; uint32 bHasTranslucentViewMeshElements : 1 ; uint32 bPrevTransformsReset : 1 ; uint32 bIgnoreExistingQueries : 1 ; uint32 bDisableQuerySubmissions : 1 ; uint32 bUsesGlobalDistanceField : 1 ; uint32 bUsesLightingChannels : 1 ; uint32 bTranslucentSurfaceLighting : 1 ; uint32 bCustomDepthStencilValid : 1 ; uint32 bUsesCustomDepth : 1 ; uint32 bUsesCustomStencil : 1 ; uint32 bFogOnlyOnRenderedOpaque : 1 ; uint32 bSceneHasSkyMaterial : 1 ; uint32 bHasSingleLayerWaterMaterial : 1 ; uint32 bUsesSecondStageDepthPass : 1 ; uint32 bSceneCaptureMainViewJitter : 1 ; float AutoBeforeDOFTranslucencyBoundary ; uint16 ShadingModelMaskInView ; FPreviousViewInfo PrevViewInfo ; int32 NumVisibleStaticMeshElements ; float PreExposure ; const uint8* PrecomputedVisibilityData ; FOcclusionQueryBatcher IndividualOcclusionQueries ; FOcclusionQueryBatcher GroupedOcclusionQueries ; FRDGTextureRef HZB = nullptr ; FRDGTextureRef ClosestHZB = nullptr ; int32 NumBoxReflectionCaptures ; int32 NumSphereReflectionCaptures ; float FurthestReflectionCaptureDistance ; TUniformBufferRef<FReflectionCaptureShaderData> ReflectionCaptureUniformBuffer ; TUniformBufferRef<FMobileReflectionCaptureShaderData> MobileReflectionCaptureUniformBuffer ; TRefCountPtr<IPooledRenderTarget> SkyAtmosphereCameraAerialPerspectiveVolume ; TRefCountPtr<IPooledRenderTarget> SkyAtmosphereCameraAerialPerspectiveVolumeMieOnly ; TRefCountPtr<IPooledRenderTarget> SkyAtmosphereCameraAerialPerspectiveVolumeRayOnly ; TRefCountPtr<IPooledRenderTarget> SkyAtmosphereViewLutTexture ; const FAtmosphereUniformShaderParameters* SkyAtmosphereUniformShaderParameters ; FRDGTextureRef VolumetricCloudSkyAO = nullptr ; TUniformBufferRef<FViewUniformShaderParameters> VolumetricRenderTargetViewUniformBuffer ; FRDGTextureRef VolumetricCloudShadowRenderTarget [ NUM_ATMOSPHERE_LIGHTS ] = { } ; TRefCountPtr<IPooledRenderTarget> VolumetricCloudShadowExtractedRenderTarget [ NUM_ATMOSPHERE_LIGHTS ] = { } ; FForwardLightingViewResources ForwardLightingResources ; FVolumetricFogViewResources VolumetricFogResources ; bool bLightGridHasRectLights = false ; bool bLightGridHasTexturedLights = false ; FRDGTextureRef HeterogeneousVolumeRadiance = nullptr ; FRDGTextureRef HeterogeneousVolumeHoldout = nullptr ; FIntPoint HZBMipmap0Size ; float OneOverNumPossiblePixels ; TOptional<FMobileLightShaftInfo> MobileLightShaft ; FGlobalShaderMap* ShaderMap ; bool bUseComputePasses = false ; bool bAllowStencilDither ; float MaterialMaxEmissiveValue ; ICustomVisibilityQuery* CustomVisibilityQuery ; const FTexture2DResource* FFTBloomKernelTexture = nullptr ; const FTexture2DResource* FilmGrainTexture = nullptr ; TArray<FPrimitiveSceneInfo*,SceneRenderingAllocator> IndirectShadowPrimitives ; FTextureRHIRef PrimitiveSceneDataTextureOverrideRHI ; FLensDistortionLUT LensDistortionLUT ; FShaderPrintData ShaderPrintData ; private : FLumenTranslucencyGIVolume LumenTranslucencyGIVolume ; FMegaLightsVolume MegaLightsVolume ; public : FLumenFrontLayerTranslucency LumenFrontLayerTranslucency ; const FLumenTranslucencyGIVolume&)",
    "insertText": "GetLumenTranslucencyGIVolume()"
  },
  {
    "label": "GetOwnLumenTranslucencyGIVolume()",
    "kind": "Method",
    "detail": "Function (} return LumenTranslucencyGIVolume ; } FLumenTranslucencyGIVolume&)",
    "insertText": "GetOwnLumenTranslucencyGIVolume()"
  },
  {
    "label": "GetRayTracingSceneChecked()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingScene*)",
    "insertText": "GetRayTracingSceneChecked(ERayTracingSceneLayer Layer)"
  },
  {
    "label": "GetRayTracingSceneLayerViewChecked()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRVRef)",
    "insertText": "GetRayTracingSceneLayerViewChecked(ERayTracingSceneLayer Layer)"
  },
  {
    "label": "FViewInfo()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineState* RayTracingMaterialPipeline = nullptr ; FShaderBindingTableRHIRef RayTracingSBT = nullptr ; FRayTracingPipelineState* LumenHardwareRayTracingMaterialPipeline = nullptr ; FShaderBindingTableRHIRef LumenHardwareRayTracingSBT = nullptr ; FRDGBufferRef LumenHardwareRayTracingHitDataBuffer = nullptr ; TUniformBufferRef<FLumenHardwareRayTracingUniformBufferParameters> LumenHardwareRayTracingUniformBuffer ; TArray<FRayTracingLocalShaderBindingWriter*,SceneRenderingAllocator> RayTracingMaterialBindings ; TArray<FRayTracingLocalShaderBindingWriter*,SceneRenderingAllocator> RayTracingCallableBindings ; TArray<FRayTracingLocalShaderBindingWriter*,SceneRenderingAllocator> LumenRayTracingMaterialBindings ; FMemStackBase LumenRayTracingMaterialBindingsMemory ; TRDGUniformBufferRef<FRayTracingLightGrid> RayTracingLightGridUniformBuffer ; TRDGUniformBufferRef<FRayTracingDecals> RayTracingDecalUniformBuffer ; bool bHasRayTracingDecals = false ; int32 PathTracingVolumetricCloudCallableShaderIndex = - 1 ; bool bHasAnyRayTracingPass = false ; # endif int32 GPUSceneViewId ; FIntRect ViewRectWithSecondaryViews ; # if WITH_EDITOR TArray<Nanite::FInstanceDraw,SceneRenderingAllocator> EditorVisualizeLevelInstancesNanite ; TArray<Nanite::FInstanceDraw,SceneRenderingAllocator> EditorSelectedInstancesNanite ; TArray<uint32,SceneRenderingAllocator> EditorSelectedNaniteHitProxyIds ; # endif)",
    "insertText": "FViewInfo(const FSceneViewInitOptions& InitOptions)"
  },
  {
    "label": "FViewInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewInfo(const FSceneView* InView)"
  },
  {
    "label": "FViewInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewInfo()"
  },
  {
    "label": "VerifyMembersChecks()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK | | USING_CODE_ANALYSIS bool)",
    "insertText": "VerifyMembersChecks()"
  },
  {
    "label": "GetSecondaryViewRectSize()",
    "kind": "Method",
    "detail": "Function (# endif FIntPoint)",
    "insertText": "GetSecondaryViewRectSize()"
  },
  {
    "label": "GetSecondaryViewCropRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetSecondaryViewCropRect()"
  },
  {
    "label": "RequiresSecondaryUpscale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresSecondaryUpscale()"
  },
  {
    "label": "UpdatePreExposure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePreExposure()"
  },
  {
    "label": "SetupUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUniformBufferParameters(const FViewMatrices& InViewMatrices, const FViewMatrices& InPrevViewMatrices, FBox* OutTranslucentCascadeBoundsArray, int32 NumTranslucentCascades, FViewUniformShaderParameters& ViewUniformShaderParameters)"
  },
  {
    "label": "SetupUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUniformBufferParameters(FBox* OutTranslucentCascadeBoundsArray, int32 NumTranslucentCascades, FViewUniformShaderParameters& ViewUniformShaderParameters)"
  },
  {
    "label": "SetupUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUniformBufferParameters(ViewMatrices, PrevViewInfo.ViewMatrices, OutTranslucentCascadeBoundsArray, NumTranslucentCascades, ViewUniformShaderParameters)"
  },
  {
    "label": "SetupDefaultGlobalDistanceFieldUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupDefaultGlobalDistanceFieldUniformBufferParameters(FViewUniformShaderParameters& ViewUniformShaderParameters)"
  },
  {
    "label": "SetupGlobalDistanceFieldUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupGlobalDistanceFieldUniformBufferParameters(FViewUniformShaderParameters& ViewUniformShaderParameters)"
  },
  {
    "label": "SetupVolumetricFogUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupVolumetricFogUniformBufferParameters(FViewUniformShaderParameters& ViewUniformShaderParameters)"
  },
  {
    "label": "InitRHIResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHIResources(uint32 OverrideNumMSAASamples = 0)"
  },
  {
    "label": "CreateViewUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewUniformBuffers(const FViewUniformShaderParameters& Params)"
  },
  {
    "label": "IsDistanceCulled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDistanceCulled(float DistanceSquared, float MinDrawDistance, float InMaxDrawDistance, const FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "IsDistanceCulled_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDistanceCulled_AnyThread(float DistanceSquared, float MinDrawDistance, float InMaxDrawDistance, const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool& bOutMayBeFading, bool& bOutFadingIn)"
  },
  {
    "label": "UpdatePrimitiveFadingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePrimitiveFadingState(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bFadingIn)"
  },
  {
    "label": "GetEyeAdaptationTexture()",
    "kind": "Method",
    "detail": "Function (using FSceneView::GetEyeAdaptationTexture ; IPooledRenderTarget*)",
    "insertText": "GetEyeAdaptationTexture(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (using FSceneView::GetEyeAdaptationBuffer ; FRDGPooledBuffer*)",
    "insertText": "GetEyeAdaptationBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetLastEyeAdaptationExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastEyeAdaptationExposure()"
  },
  {
    "label": "GetLastAverageLocalExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastAverageLocalExposure()"
  },
  {
    "label": "GetLastAverageSceneLuminance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastAverageSceneLuminance()"
  },
  {
    "label": "SwapEyeAdaptationBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEyeAdaptationBuffers()"
  },
  {
    "label": "UpdateEyeAdaptationLastExposureFromBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEyeAdaptationLastExposureFromBuffer()"
  },
  {
    "label": "EnqueueEyeAdaptationExposureBufferReadback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueEyeAdaptationExposureBufferReadback(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "ShouldUpdateEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateEyeAdaptationBuffer()"
  },
  {
    "label": "SetValidTonemappingLUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidTonemappingLUT()"
  },
  {
    "label": "GetTonemappingLUT()",
    "kind": "Method",
    "detail": "Function (IPooledRenderTarget*)",
    "insertText": "GetTonemappingLUT()"
  },
  {
    "label": "GetTonemappingLUT()",
    "kind": "Method",
    "detail": "Function (IPooledRenderTarget*)",
    "insertText": "GetTonemappingLUT(FRHICommandList& RHICmdList, const int32 LUTSize, const bool bUseVolumeLUT, const bool bNeedUAV, const bool bNeedFloatOutput)"
  },
  {
    "label": "IsFirstInFamily()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFirstInFamily()"
  },
  {
    "label": "DecayLoadAction()",
    "kind": "Method",
    "detail": "Function (} ERenderTargetLoadAction)",
    "insertText": "DecayLoadAction(ERenderTargetLoadAction RequestedLoadAction)"
  },
  {
    "label": "ShouldRenderView()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRenderView()"
  },
  {
    "label": "GetUnscaledFamilyViewRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetUnscaledFamilyViewRect()"
  },
  {
    "label": "BeginRenderView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRenderView()"
  },
  {
    "label": "GetShaderParameters()",
    "kind": "Method",
    "detail": "Function (FViewShaderParameters)",
    "insertText": "GetShaderParameters()"
  },
  {
    "label": "GetPrimaryView()",
    "kind": "Method",
    "detail": "Function (const FViewInfo*)",
    "insertText": "GetPrimaryView()"
  },
  {
    "label": "GetInstancedView()",
    "kind": "Method",
    "detail": "Function (const FViewInfo*)",
    "insertText": "GetInstancedView()"
  },
  {
    "label": "CreateSnapshot()",
    "kind": "Method",
    "detail": "Function (} FViewInfo*)",
    "insertText": "CreateSnapshot()"
  },
  {
    "label": "DestroyAllSnapshots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllSnapshots()"
  },
  {
    "label": "WaitForTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTasks()"
  },
  {
    "label": "GetDynamicMeshElementRange()",
    "kind": "Method",
    "detail": "Function (FInt32Range)",
    "insertText": "GetDynamicMeshElementRange(uint32 PrimitiveIndex)"
  },
  {
    "label": "GetSceneTexturesConfig()",
    "kind": "Method",
    "detail": "Function (const FSceneTexturesConfig&)",
    "insertText": "GetSceneTexturesConfig()"
  },
  {
    "label": "GetSceneTextures()",
    "kind": "Method",
    "detail": "Function (const FSceneTextures&)",
    "insertText": "GetSceneTextures()"
  },
  {
    "label": "GetSceneTexturesChecked()",
    "kind": "Method",
    "detail": "Function (const FSceneTextures*)",
    "insertText": "GetSceneTexturesChecked()"
  },
  {
    "label": "GetSceneUniforms()",
    "kind": "Method",
    "detail": "Function (FSceneUniformBuffer&)",
    "insertText": "GetSceneUniforms()"
  },
  {
    "label": "GetVolumetricCloudTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetVolumetricCloudTexture(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetEyeAdaptationViewState()",
    "kind": "Method",
    "detail": "Function (FGPUScenePrimitiveCollector DynamicPrimitiveCollector ; FGPUScenePrimitiveCollector RayTracingDynamicPrimitiveCollector ; private : ESamplerFilter WorldTextureGroupSamplerFilter ; ESamplerFilter TerrainWeightmapTextureGroupSamplerFilter ; int32 WorldTextureGroupMaxAnisotropy ; bool bIsValidTextureGroupSamplerFilters ; FSceneViewState*)",
    "insertText": "GetEyeAdaptationViewState()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "CalcTranslucencyLightingVolumeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTranslucencyLightingVolumeBounds(FBox* InOutCascadeBoundsArray, int32 NumCascades)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} } FIntPoint)",
    "insertText": "GetSize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FPooledRenderTargetDesc* Desc = NULL ;)",
    "insertText": "if(DepthTarget)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (Desc =& DepthTarget ->)",
    "insertText": "GetDesc()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ColorTargets.Num() > 0)"
  },
  {
    "label": "ComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (} return Desc -> Extent ; } int64)",
    "insertText": "ComputeMemorySize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 MemorySize = 0 ;)",
    "insertText": "for(int32 i = 0; i < ColorTargets.Num(); i++)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ColorTargets [ i ] = NULL ; } ColorTargets .)",
    "insertText": "Empty()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 MemorySize = 0 ;)",
    "insertText": "for(int i = 0; i < ShadowMapAtlases.Num(); i++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < ShadowMapCubemaps.Num(); i++)"
  },
  {
    "label": "FViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (} return MemorySize ; } } ; struct FOcclusionSubmittedFenceState { FGraphEventRef Fence ; uint32 ViewStateUniqueID ; } ; class FViewFamilyInfo : public FSceneViewFamily { public :)",
    "insertText": "FViewFamilyInfo(const FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "FViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewFamilyInfo(const FSceneViewFamily::ConstructionValues& CVS, const FViewFamilyInfo& MainViewFamily)"
  },
  {
    "label": "FViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewFamilyInfo()"
  },
  {
    "label": "FSceneRendererBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneRendererBase(FScene& InScene) : Scene(&InScene)"
  },
  {
    "label": "InitSceneExtensionsRenderers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitSceneExtensionsRenderers()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (SceneExtensionsRenderers .)",
    "insertText": "Begin(*this)"
  },
  {
    "label": "GetSceneExtensionsRenderers()",
    "kind": "Method",
    "detail": "Function (} FSceneExtensionsRenderers&)",
    "insertText": "GetSceneExtensionsRenderers()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCustomRenderPassBase* CustomRenderPass ; FViewFamilyInfo ViewFamily ; TArray<FViewInfo> Views ; FNaniteShadingCommands NaniteBasePassShadingCommands ; } ; TArray<FCustomRenderPassInfo> CustomRenderPassInfos ; TArray<FViewInfo*> AllViews ; TArray<const FSceneView*> AllFamilyViews ; TArray<const FSceneViewFamily*> AllFamilies ; DynamicRenderScaling::TMap<float> DynamicResolutionFractions ; DynamicRenderScaling::TMap<float> DynamicResolutionUpperBounds ; TArray<FVisibleLightInfo,SceneRenderingAllocator> VisibleLightInfos ; UE::FMutex DispatchedShadowDepthPassesMutex ; TArray<FParallelMeshDrawCommandPass*,SceneRenderingAllocator> DispatchedShadowDepthPasses ; FSortedShadowMaps SortedShadowsForShadowDepthPass ; FVirtualShadowMapArray VirtualShadowMapArray ; TUniquePtr<FShadowSceneRenderer> ShadowSceneRenderer ; LightFunctionAtlas::FLightFunctionAtlas LightFunctionAtlas ; bool bHasRequestedToggleFreeze ; bool bUsedPrecomputedVisibility ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FSceneRenderer()",
    "kind": "Method",
    "detail": "Function (# endif ERHIFeatureLevel::Type FeatureLevel ; EShaderPlatform ShaderPlatform ; bool bGPUMasksComputed ; FRHIGPUMask RenderTargetGPUMask ; bool bIsFirstSceneRenderer ; bool bIsLastSceneRenderer ; # if RHI_RAYTRACING bool bAnyRayTracingPassEnabled = false ; # endif public :)",
    "insertText": "FSceneRenderer(const FSceneViewFamily* InViewFamily, FHitProxyConsumer* HitProxyConsumer)"
  },
  {
    "label": "FSceneRenderer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSceneRenderer()"
  },
  {
    "label": "RenderThreadBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThreadBegin(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "RenderThreadEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThreadEnd(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "RenderThreadBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThreadBegin(FRHICommandListImmediate& RHICmdList, const TArray<FSceneRenderer*>& SceneRenderers)"
  },
  {
    "label": "RenderThreadEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThreadEnd(FRHICommandListImmediate& RHICmdList, const TArray<FSceneRenderer*>& SceneRenderers)"
  },
  {
    "label": "GetShadowInvalidatingInstancesInterface()",
    "kind": "Method",
    "detail": "Function (UE::Renderer::Private::IShadowInvalidatingInstances*)",
    "insertText": "GetShadowInvalidatingInstancesInterface(const FSceneView *SceneView)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "RenderHitProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHitProxies(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "ShouldRenderVelocities()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRenderVelocities()"
  },
  {
    "label": "CreateSceneRenderer()",
    "kind": "Method",
    "detail": "Function (FSceneRenderer*)",
    "insertText": "CreateSceneRenderer(const FSceneViewFamily* InViewFamily, FHitProxyConsumer* HitProxyConsumer)"
  },
  {
    "label": "CreateSceneRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSceneRenderers(TArrayView<const FSceneViewFamily*> InViewFamilies, FHitProxyConsumer* HitProxyConsumer, TArray<FSceneRenderer*>& OutSceneRenderers)"
  },
  {
    "label": "PrepareViewRectsForRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareViewRectsForRendering(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "ComputeGPUMasks()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU void)",
    "insertText": "ComputeGPUMasks(FRHICommandListImmediate* RHICmdList)"
  },
  {
    "label": "PreallocateCrossGPUFences()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PreallocateCrossGPUFences(const TArray<FSceneRenderer*>& SceneRenderers)"
  },
  {
    "label": "DoCrossGPUTransfers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoCrossGPUTransfers(FRDGBuilder& GraphBuilder, FRDGTextureRef ViewFamilyTexture, TArrayView<FViewInfo> InViews, bool bCrossGPUTransferFencesDefer, FRHIGPUMask RenderTargetGPUMask, class FCrossGPUTransfersDeferred* TransfersDeferred)"
  },
  {
    "label": "FlushCrossGPUTransfers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCrossGPUTransfers(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "FlushCrossGPUFences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCrossGPUFences(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "DoOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoOcclusionQueries()"
  },
  {
    "label": "FenceOcclusionTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FenceOcclusionTests(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "WaitOcclusionTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitOcclusionTests(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "ShouldDumpMeshDrawCommandInstancingStats()",
    "kind": "Method",
    "detail": "Function (FOcclusionSubmittedFenceState OcclusionSubmittedFence [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames ] ; bool)",
    "insertText": "ShouldDumpMeshDrawCommandInstancingStats()"
  },
  {
    "label": "ShouldCompositeDebugPrimitivesInPostProcess()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING bool)",
    "insertText": "ShouldCompositeDebugPrimitivesInPostProcess(const FViewInfo& View)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CleanUp(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "WaitForCleanUpTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCleanUpTasks(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "ApplyResolutionFraction()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "ApplyResolutionFraction(const FSceneViewFamily& ViewFamily, const FIntPoint& UnscaledViewSize, float ResolutionFraction)"
  },
  {
    "label": "QuantizeViewRectMin()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "QuantizeViewRectMin(const FIntPoint& ViewRectMin)"
  },
  {
    "label": "GetDesiredInternalBufferSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetDesiredInternalBufferSize(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ForkScreenPercentageInterface()",
    "kind": "Method",
    "detail": "Function (ISceneViewFamilyScreenPercentage*)",
    "insertText": "ForkScreenPercentageInterface(const ISceneViewFamilyScreenPercentage* ScreenPercentageInterface, FSceneViewFamily& ForkedViewFamily)"
  },
  {
    "label": "GetRefractionQuality()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetRefractionQuality(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "RenderSkyAtmosphereInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSkyAtmosphereInternal(FRDGBuilder& GraphBuilder, const FSceneTextureShaderParameters& SceneTextures, FSkyAtmosphereRenderContext& SkyRenderContext)"
  },
  {
    "label": "RenderVolumetricCloudsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderVolumetricCloudsInternal(FRDGBuilder& GraphBuilder, FCloudRenderContext& CloudRC, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "SetStereoViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStereoViewport(FRHICommandList& RHICmdList, const FViewInfo& View, float ViewportScale = 1.0f)"
  },
  {
    "label": "ShouldPrepareForDistanceFieldShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPrepareForDistanceFieldShadows()"
  },
  {
    "label": "ShouldPrepareForDistanceFieldAO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPrepareForDistanceFieldAO()"
  },
  {
    "label": "ShouldPrepareForDFInsetIndirectShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPrepareForDFInsetIndirectShadow()"
  },
  {
    "label": "GetGPUSceneDynamicContext()",
    "kind": "Method",
    "detail": "Function (FGPUSceneDynamicContext&)",
    "insertText": "GetGPUSceneDynamicContext()"
  },
  {
    "label": "ShouldPrepareGlobalDistanceField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPrepareGlobalDistanceField()"
  },
  {
    "label": "ShouldPrepareHeightFieldScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPrepareHeightFieldScene()"
  },
  {
    "label": "ShouldRenderDistanceFieldAO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderDistanceFieldAO()"
  },
  {
    "label": "UpdateGlobalDistanceFieldObjectBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalDistanceFieldObjectBuffers(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "UpdateGlobalHeightFieldObjectBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalHeightFieldObjectBuffers(FRDGBuilder& GraphBuilder, const TArray<uint32>& IndicesToUpdateInHeightFieldObjectBuffers)"
  },
  {
    "label": "ProcessPendingHeightFieldPrimitiveAddAndRemoveOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingHeightFieldPrimitiveAddAndRemoveOps(TArray<uint32>& IndicesToUpdateInHeightFieldObjectBuffers)"
  },
  {
    "label": "PrepareDistanceFieldScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDistanceFieldScene(FRDGBuilder& GraphBuilder, FRDGExternalAccessQueue& ExternalAccessQueue)"
  },
  {
    "label": "VoxelizeFogVolumePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VoxelizeFogVolumePrimitives(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FVolumetricFogIntegrationParameterData& IntegrationData, FIntVector VolumetricFogGridSize, FVector GridZParams, float VolumetricFogDistance, bool bVoxelizeEmissive)"
  },
  {
    "label": "RenderLightFunctionForVolumetricFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLightFunctionForVolumetricFog(FRDGBuilder& GraphBuilder, FViewInfo& View, const FSceneTextures& SceneTextures, FIntVector VolumetricFogGridSize, float VolumetricFogMaxDistance, FLightSceneInfo* DirectionalLightSceneInfo, FMatrix44f& OutLightFunctionTranslatedWorldToShadow, FRDGTexture*& OutLightFunctionTexture)"
  },
  {
    "label": "RenderLocalLightsForVolumetricFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLocalLightsForVolumetricFog(FRDGBuilder& GraphBuilder, FViewInfo& View, int32 ViewIndex, bool bUseTemporalReprojection, const struct FVolumetricFogIntegrationParameterData& IntegrationData, const FExponentialHeightFogSceneInfo& FogInfo, FIntVector VolumetricFogGridSize, FVector GridZParams, const FRDGTextureDesc& VolumeDesc, FRDGTextureRef ConservativeDepthTexture, TConstArrayView<const FLightSceneInfo*> LightsToInject, TConstArrayView<const FLightSceneInfo*> RayTracedLightsToInject, FRDGTexture*& OutLocalShadowedLightScattering)"
  },
  {
    "label": "SetupVolumetricFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupVolumetricFog()"
  },
  {
    "label": "ShouldRenderVolumetricFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderVolumetricFog()"
  },
  {
    "label": "ComputeVolumetricFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeVolumetricFog(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "DrawGPUSkinCacheVisualizationInfoText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawGPUSkinCacheVisualizationInfoText()"
  },
  {
    "label": "IsLumenEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLumenEnabled(const FViewInfo& View)"
  },
  {
    "label": "GetActiveSceneTexturesConfig()",
    "kind": "Method",
    "detail": "Function (} FSceneTexturesConfig&)",
    "insertText": "GetActiveSceneTexturesConfig()"
  },
  {
    "label": "GetSceneViews()",
    "kind": "Method",
    "detail": "Function (FSceneOnScreenMessagesDelegate OnGetOnScreenMessages ; TConstStridedView<FSceneView>)",
    "insertText": "GetSceneViews()"
  },
  {
    "label": "IsShadowCached()",
    "kind": "Method",
    "detail": "Function (} TGlobalResource<FGlobalDynamicReadBuffer> DynamicReadBufferForInitViews ; TGlobalResource<FGlobalDynamicReadBuffer> DynamicReadBufferForRayTracing ; TGlobalResource<FGlobalDynamicReadBuffer> DynamicReadBufferForShadows ; protected : FIntPoint FamilySize ; # if WITH_MGPU TArray<FCrossGPUTransferFence*> CrossGPUTransferFencesDefer ; TArray<FCrossGPUTransferFence*> CrossGPUTransferFencesWait ; TRefCountPtr<class FCrossGPUTransfersDeferred> CrossGPUTransferDeferred ; FRHIGPUMask AllViewsGPUMask ; bool)",
    "insertText": "IsShadowCached(FProjectedShadowInfo* ProjectedShadowInfo)"
  },
  {
    "label": "GetGPUMaskForShadow()",
    "kind": "Method",
    "detail": "Function (FRHIGPUMask)",
    "insertText": "GetGPUMaskForShadow(FProjectedShadowInfo* ProjectedShadowInfo)"
  },
  {
    "label": "GetRendererOutput()",
    "kind": "Method",
    "detail": "Function (# endif class FFXSystemInterface* FXSystem = nullptr ; bool bDumpMeshDrawCommandInstancingStats ; enum class ERendererOutput { DepthPrepassOnly,BasePass,FinalSceneColor } ; ERendererOutput)",
    "insertText": "GetRendererOutput()"
  },
  {
    "label": "BeginInitDynamicShadows()",
    "kind": "Method",
    "detail": "Function (FDynamicShadowsTaskData*)",
    "insertText": "BeginInitDynamicShadows(FRDGBuilder& GraphBuilder, bool bRunningEarly, IVisibilityTaskData* VisibilityTaskData, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "FinishInitDynamicShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishInitDynamicShadows(FRDGBuilder& GraphBuilder, FDynamicShadowsTaskData* TaskData)"
  },
  {
    "label": "FinishDynamicShadowMeshPassSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDynamicShadowMeshPassSetup(FRDGBuilder& GraphBuilder, FDynamicShadowsTaskData* TaskData)"
  },
  {
    "label": "InitDynamicShadows()",
    "kind": "Method",
    "detail": "Function (FDynamicShadowsTaskData*)",
    "insertText": "InitDynamicShadows(FRDGBuilder& GraphBuilder, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "CreateDynamicShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDynamicShadows(FDynamicShadowsTaskData& TaskData)"
  },
  {
    "label": "FilterDynamicShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterDynamicShadows(FDynamicShadowsTaskData& TaskData)"
  },
  {
    "label": "SetupMeshPass()",
    "kind": "Method",
    "detail": "Function (struct FGatherShadowPrimitivesPrepareTask ; void)",
    "insertText": "SetupMeshPass(FViewInfo& View, FExclusiveDepthStencil::Type BasePassDepthStencilAccess, FViewCommands& ViewCommands, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "RenderShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderShadowProjections(FRDGBuilder& GraphBuilder, FRDGTextureRef OutputTexture, const FMinimalSceneTextures& SceneTextures, const FLightSceneProxy* LightSceneProxy, TArrayView<const FProjectedShadowInfo* const> Shadows, bool bSubPixelShadow, bool bProjectingForForwardShading)"
  },
  {
    "label": "RenderShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderShadowProjections(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef ScreenShadowMaskTexture, FRDGTextureRef ScreenShadowMaskSubPixelTexture, const FLightSceneInfo* LightSceneInfo, bool bProjectingForForwardShading)"
  },
  {
    "label": "BeginAsyncDistanceFieldShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAsyncDistanceFieldShadowProjections(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FDynamicShadowsTaskData* TaskData)"
  },
  {
    "label": "GetCachedPreshadow()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FProjectedShadowInfo>)",
    "insertText": "GetCachedPreshadow(const FLightPrimitiveInteraction* InParentInteraction, const FProjectedShadowInitializer& Initializer, const FBoxSphereBounds& Bounds, uint32 InResolutionX)"
  },
  {
    "label": "CreatePerObjectProjectedShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePerObjectProjectedShadow(FDynamicShadowsTaskData& TaskData, FLightPrimitiveInteraction* Interaction, bool bCreateTranslucentObjectShadow, bool bCreateInsetObjectShadow, const TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& ViewDependentWholeSceneShadows, TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& OutPreShadows)"
  },
  {
    "label": "SetupInteractionShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupInteractionShadows(FDynamicShadowsTaskData& TaskData, FLightPrimitiveInteraction* Interaction, FVisibleLightInfo& VisibleLightInfo, bool bStaticSceneOnly, const TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& ViewDependentWholeSceneShadows, TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& PreShadows)"
  },
  {
    "label": "AddViewDependentWholeSceneShadowsForView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewDependentWholeSceneShadowsForView(TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& ShadowInfos, TArray<FProjectedShadowInfo*, SceneRenderingAllocator>& ShadowInfosThatNeedCulling, FVisibleLightInfo& VisibleLightInfo, FLightSceneInfo& LightSceneInfo, int64 CachedShadowMapsSize, uint32& NumCSMCachesUpdatedThisFrame)"
  },
  {
    "label": "AllocateShadowDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateShadowDepthTargets(FDynamicShadowsTaskData& TaskData)"
  },
  {
    "label": "AllocateAtlasedShadowDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateAtlasedShadowDepthTargets(FRHICommandListBase& RHICmdList, TConstArrayView<FProjectedShadowInfo*> Shadows, TArray<FSortedShadowMapAtlas,SceneRenderingAllocator>& OutAtlases)"
  },
  {
    "label": "AllocateCachedShadowDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateCachedShadowDepthTargets(FRHICommandListBase& RHICmdList, TConstArrayView<FProjectedShadowInfo*> CachedShadows)"
  },
  {
    "label": "AllocateCSMDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateCSMDepthTargets(FRHICommandListBase& RHICmdList, TConstArrayView<FProjectedShadowInfo*> WholeSceneDirectionalShadows, TArray<FSortedShadowMapAtlas, SceneRenderingAllocator>& OutAtlases)"
  },
  {
    "label": "AllocateOnePassPointLightDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateOnePassPointLightDepthTargets(FRHICommandListBase& RHICmdList, TConstArrayView<FProjectedShadowInfo*> WholeScenePointShadows)"
  },
  {
    "label": "AllocateTranslucentShadowDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateTranslucentShadowDepthTargets(FRHICommandListBase& RHICmdList, TConstArrayView<FProjectedShadowInfo*> TranslucentShadows)"
  },
  {
    "label": "AllocateMobileCSMAndSpotLightShadowDepthTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateMobileCSMAndSpotLightShadowDepthTargets(FRHICommandListBase& RHICmdList, TConstArrayView<FProjectedShadowInfo*> MobileCSMAndSpotLightShadows)"
  },
  {
    "label": "CheckForProjectedShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForProjectedShadows(const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "BeginGatherShadowPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGatherShadowPrimitives(FDynamicShadowsTaskData* TaskData, IVisibilityTaskData* VisibilityTaskData)"
  },
  {
    "label": "FinishGatherShadowPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishGatherShadowPrimitives(FDynamicShadowsTaskData* TaskData)"
  },
  {
    "label": "RenderShadowDepthMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderShadowDepthMaps(FRDGBuilder& GraphBuilder, FDynamicShadowsTaskData* DynamicShadowsTaskData, FInstanceCullingManager& InstanceCullingManager, FRDGExternalAccessQueue& ExternalAccessQueue)"
  },
  {
    "label": "RenderVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderVirtualShadowMaps(FRDGBuilder& GraphBuilder, bool bNaniteEnabled)"
  },
  {
    "label": "RenderShadowDepthMapAtlases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderShadowDepthMapAtlases(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "CreateWholeSceneProjectedShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWholeSceneProjectedShadow(FDynamicShadowsTaskData& TaskData, FLightSceneInfo* LightSceneInfo, int64 CachedShadowMapsSize, uint32& NumPointShadowCachesUpdatedThisFrame, uint32& NumSpotShadowCachesUpdatedThisFrame)"
  },
  {
    "label": "UpdatePreshadowCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreshadowCache()"
  },
  {
    "label": "GatherSimpleLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherSimpleLights(const FSceneViewFamily& ViewFamily, const TArray<FViewInfo>& Views, FSimpleLightArray& SimpleLights)"
  },
  {
    "label": "InitProjectedShadowVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitProjectedShadowVisibility(FDynamicShadowsTaskData& TaskData)"
  },
  {
    "label": "DrawDebugShadowFrustum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugShadowFrustum(FViewInfo& View, FProjectedShadowInfo& ProjectedShadowInfo)"
  },
  {
    "label": "GatherShadowDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherShadowDynamicMeshElements(FDynamicShadowsTaskData& TaskData)"
  },
  {
    "label": "RenderCapsuleDirectShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderCapsuleDirectShadows(FRDGBuilder& GraphBuilder, const FLightSceneInfo& LightSceneInfo, FRDGTextureRef ScreenShadowMaskTexture, TArrayView<const FProjectedShadowInfo* const> CapsuleShadows, bool bProjectingForForwardShading)"
  },
  {
    "label": "PreVisibilityFrameSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreVisibilityFrameSetup(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GatherReflectionCaptureLightMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherReflectionCaptureLightMeshElements()"
  },
  {
    "label": "PostVisibilityFrameSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostVisibilityFrameSetup(FILCUpdatePrimTaskData*& OutILCTaskData)"
  },
  {
    "label": "InitFogConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFogConstants()"
  },
  {
    "label": "ShouldRenderTranslucency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderTranslucency()"
  },
  {
    "label": "ShouldRenderTranslucency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderTranslucency(ETranslucencyPass::Type TranslucencyPass)"
  },
  {
    "label": "OnRenderBegin()",
    "kind": "Method",
    "detail": "Function (IVisibilityTaskData*)",
    "insertText": "OnRenderBegin(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "OnRenderFinish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenderFinish(FRDGBuilder& GraphBuilder, FRDGTextureRef ViewFamilyTexture)"
  },
  {
    "label": "RenderCustomDepthPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderCustomDepthPass(FRDGBuilder& GraphBuilder, FCustomDepthTextures& CustomDepthTextures, const FSceneTextureShaderParameters& SceneTextures, TConstArrayView<Nanite::FRasterResults> PrimaryNaniteRasterResults, TConstArrayView<Nanite::FPackedView> PrimaryNaniteViews)"
  },
  {
    "label": "UpdatePrimitiveIndirectLightingCacheBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveIndirectLightingCacheBuffers(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "RenderPlanarReflection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPlanarReflection(class FPlanarReflectionSceneProxy* ReflectionSceneProxy)"
  },
  {
    "label": "InitSkyAtmosphereForViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkyAtmosphereForViews(FRHICommandListImmediate& RHICmdList, FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "RenderSkyAtmosphereLookUpTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSkyAtmosphereLookUpTables(FRDGBuilder& GraphBuilder, class FSkyAtmospherePendingRDGResources& PendingRDGResources)"
  },
  {
    "label": "RenderSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSkyAtmosphere(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "InitVolumetricCloudsForViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitVolumetricCloudsForViews(FRDGBuilder& GraphBuilder, bool bShouldRenderVolumetricCloud, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "RenderVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderVolumetricCloud(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, bool bSkipVolumetricRenderTarget, bool bSkipPerPixelTracing, bool bAccumulateAlphaHoldOut, FRDGTextureRef HalfResolutionDepthCheckerboardMinMaxTexture, FRDGTextureRef QuarterResolutionDepthMinMaxTexture, bool bAsyncCompute, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "RenderSkyAtmosphereEditorNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSkyAtmosphereEditorNotifications(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FRDGTextureRef SceneColorTexture)"
  },
  {
    "label": "ShouldRenderSkyAtmosphereEditorNotifications()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSkyAtmosphereEditorNotifications(TArrayView<FViewInfo> Views)"
  },
  {
    "label": "GatherAndSortLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAndSortLights(FSortedLightSetSceneInfo& OutSortedLights, bool bShadowedLightsInClustered = false)"
  },
  {
    "label": "UpdateLightFunctionAtlasTaskFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightFunctionAtlasTaskFunction()"
  },
  {
    "label": "ComputeLightGrid()",
    "kind": "Method",
    "detail": "Function (FComputeLightGridOutput)",
    "insertText": "ComputeLightGrid(FRDGBuilder& GraphBuilder, bool bCullLightsToGrid, const FSortedLightSetSceneInfo& SortedLightSet)"
  },
  {
    "label": "CheckForLightFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForLightFunction(const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "SetupSceneReflectionCaptureBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSceneReflectionCaptureBuffer(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "RenderVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderVelocities(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, const FSceneTextures& SceneTextures, EVelocityPass VelocityPass, bool bForceVelocity)"
  },
  {
    "label": "RenderMeshDistanceFieldVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMeshDistanceFieldVisualization(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "CreateSplitScreenDebugViewFamily()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING FSceneViewFamily*)",
    "insertText": "CreateSplitScreenDebugViewFamily(const FSceneViewFamily& InFamily)"
  },
  {
    "label": "DestroySplitScreenDebugViewFamily()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySplitScreenDebugViewFamily(FSceneViewFamily* Family)"
  },
  {
    "label": "CheckShadowDepthRenderCompleted()",
    "kind": "Method",
    "detail": "Function (# endif protected : FGPUSceneDynamicContext GPUSceneDynamicContext ; void)",
    "insertText": "CheckShadowDepthRenderCompleted()"
  },
  {
    "label": "ComputeLightVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeLightVisibility()"
  },
  {
    "label": "ComputeFamilySize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ComputeFamilySize()"
  },
  {
    "label": "SetupMeshPasses()",
    "kind": "Method",
    "detail": "Function (class FVisibilityTaskData ; void)",
    "insertText": "SetupMeshPasses(IVisibilityTaskData& TaskData, FExclusiveDepthStencil::Type BasePassDepthStencilAccess, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "PrepareViewStateForVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareViewStateForVisibility(const FSceneTexturesConfig& SceneTexturesConfig)"
  },
  {
    "label": "LaunchSceneRenderTask()",
    "kind": "Method",
    "detail": "Function (bool bShadowDepthRenderCompleted ; class FRendererModule ; } ; template<LambdaType,PrerequisiteTaskCollectionType> UE::Tasks::FTask)",
    "insertText": "LaunchSceneRenderTask(const TCHAR* DebugName, LambdaType&& Lambda, PrerequisiteTaskCollectionType&& Prerequisites, bool bExecuteInParallelCondition = true, UE::Tasks::ETaskPriority TaskPriority = UE::Tasks::ETaskPriority::High)"
  },
  {
    "label": "ShouldUseThreadingForPerformance()",
    "kind": "Method",
    "detail": "Function (const bool bExecuteInParallel = bExecuteInParallelCondition&&)",
    "insertText": "ShouldUseThreadingForPerformance()"
  },
  {
    "label": "LaunchSceneRenderTask()",
    "kind": "Method",
    "detail": "Function (} template<LambdaType> UE::Tasks::FTask)",
    "insertText": "LaunchSceneRenderTask(const TCHAR* DebugName, LambdaType&& Lambda, bool bExecuteInParallelCondition = true, UE::Tasks::ETaskPriority TaskPriority = UE::Tasks::ETaskPriority::High)"
  },
  {
    "label": "CreateCompatibilityGraphEvent()",
    "kind": "Method",
    "detail": "Function (} template<PrerequisiteTaskCollectionType> FGraphEventRef)",
    "insertText": "CreateCompatibilityGraphEvent(PrerequisiteTaskCollectionType&& Prerequisites)"
  },
  {
    "label": "CreateGraphEvent()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef GraphEvent =)",
    "insertText": "CreateGraphEvent()"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Launch(UE_SOURCE_LOCATION, [GraphEvent] { GraphEvent->DispatchSubsequents(); }, Prerequisites, UE::Tasks::ETaskPriority::High)"
  },
  {
    "label": "FMobileSceneRenderer()",
    "kind": "Method",
    "detail": "Function (} } ; FForwardScreenSpaceShadowMaskTextureMobileOutputs GScreenSpaceShadowMaskTextureMobileOutputs ; typedef TArray<FRDGTextureRef,TInlineAllocator<6>> FColorTargets ; class FMobileSceneRenderer : public FSceneRenderer { public :)",
    "insertText": "FMobileSceneRenderer(const FSceneViewFamily* InViewFamily, FHitProxyConsumer* HitProxyConsumer)"
  },
  {
    "label": "ShouldRenderPrePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderPrePass()"
  },
  {
    "label": "AllowSimpleLights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowSimpleLights()"
  },
  {
    "label": "RequiresMultiPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresMultiPass(int32 NumMSAASamples, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "InitDynamicShadows()",
    "kind": "Method",
    "detail": "Function (protected : FDynamicShadowsTaskData*)",
    "insertText": "InitDynamicShadows(FRDGBuilder& GraphBuilder, FInstanceCullingManager& FInstanceCullingManager)"
  },
  {
    "label": "PrepareViewVisibilityLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareViewVisibilityLists()"
  },
  {
    "label": "BuildCSMVisibilityState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCSMVisibilityState(FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "FInitViewTaskDatas()",
    "kind": "Method",
    "detail": "Function (struct FInitViewTaskDatas {)",
    "insertText": "FInitViewTaskDatas(IVisibilityTaskData* InVisibilityTaskData) : VisibilityTaskData(InVisibilityTaskData)"
  },
  {
    "label": "InitViews()",
    "kind": "Method",
    "detail": "Function (} IVisibilityTaskData* VisibilityTaskData ; FDynamicShadowsTaskData* DynamicShadows = nullptr ; } ; void)",
    "insertText": "InitViews(FRDGBuilder& GraphBuilder, FSceneTexturesConfig& SceneTexturesConfig, FInstanceCullingManager& InstanceCullingManager, FVirtualTextureUpdater* VirtualTextureUpdater, FInitViewTaskDatas& TaskDatas)"
  },
  {
    "label": "RenderPrePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPrePass(FRHICommandList& RHICmdList, const FViewInfo& View, const FInstanceCullingDrawParams* InstanceCullingDrawParams)"
  },
  {
    "label": "RenderMaskedPrePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMaskedPrePass(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "RenderFullDepthPrepass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderFullDepthPrepass(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FSceneTextures& SceneTextures, bool bIsSceneCaptureRenderPass=false)"
  },
  {
    "label": "RenderMobileLocalLightsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMobileLocalLightsBuffer(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, const FSortedLightSetSceneInfo& SortedLights)"
  },
  {
    "label": "RenderCustomRenderPassBasePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderCustomRenderPassBasePass(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> InViews, FRDGTextureRef ViewFamilyTexture, FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderMobileBasePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMobileBasePass(FRHICommandList& RHICmdList, const FViewInfo& View, const FInstanceCullingDrawParams* InstanceCullingDrawParams)"
  },
  {
    "label": "PostRenderBasePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRenderBasePass(FRHICommandList& RHICmdList, FViewInfo& View)"
  },
  {
    "label": "RenderMobileEditorPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMobileEditorPrimitives(FRHICommandList& RHICmdList, const FViewInfo& View, const FMeshPassProcessorRenderState& DrawRenderState, const FInstanceCullingDrawParams* InstanceCullingDrawParams)"
  },
  {
    "label": "RenderMobileDebugPrimitives()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING void)",
    "insertText": "RenderMobileDebugPrimitives(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "RenderMobileDebugView()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RenderMobileDebugView(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "RenderModulatedShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderModulatedShadowProjections(FRHICommandList& RHICmdList, int32 ViewIndex, const FViewInfo& View)"
  },
  {
    "label": "RenderOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderOcclusion(FRHICommandList& RHICmdList)"
  },
  {
    "label": "ShouldRenderHZB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHZB(TArrayView<FViewInfo> InViews)"
  },
  {
    "label": "RenderHZB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHZB(FRHICommandListImmediate& RHICmdList, const TRefCountPtr<IPooledRenderTarget>& SceneDepthZ)"
  },
  {
    "label": "RenderHZB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderHZB(FRDGBuilder& GraphBuilder, FRDGTextureRef SceneDepthTexture)"
  },
  {
    "label": "ComputeNumOcclusionQueriesToBatch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeNumOcclusionQueriesToBatch()"
  },
  {
    "label": "RenderDecals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDecals(FRHICommandList& RHICmdList, FViewInfo& View)"
  },
  {
    "label": "RenderDBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDBuffer(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, FDBufferTextures& DBufferTextures, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "RenderFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderFog(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "RenderTranslucency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTranslucency(FRHICommandList& RHICmdList, const FViewInfo& View)"
  },
  {
    "label": "PreTonemapMSAA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreTonemapMSAA(FRHICommandList& RHICmdList, const FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "SetupMobileBasePassAfterShadowInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMobileBasePassAfterShadowInit(FExclusiveDepthStencil::Type BasePassDepthStencilAccess, TArrayView<FViewCommands> ViewCommandsPerView, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "UpdateDirectionalLightUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDirectionalLightUniformBuffers(FRDGBuilder& GraphBuilder, const FViewInfo& View)"
  },
  {
    "label": "UpdateSkyReflectionUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkyReflectionUniformBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "BuildInstanceCullingDrawParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInstanceCullingDrawParams(FRDGBuilder& GraphBuilder, FViewInfo& View, class FMobileRenderPassParameters* PassParameters)"
  },
  {
    "label": "RenderForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderForward(FRDGBuilder& GraphBuilder, FRDGTextureRef ViewFamilyTexture, FSceneTextures& SceneTextures, FDBufferTextures& DBufferTextures)"
  },
  {
    "label": "RenderForwardSinglePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderForwardSinglePass(FRDGBuilder& GraphBuilder, class FMobileRenderPassParameters* PassParameters, struct FRenderViewContext& ViewContext, FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderForwardMultiPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderForwardMultiPass(FRDGBuilder& GraphBuilder, class FMobileRenderPassParameters* PassParameters, struct FRenderViewContext& ViewContext, FSceneTextures& SceneTextures)"
  },
  {
    "label": "RenderDeferredSinglePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDeferredSinglePass(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, const FSortedLightSetSceneInfo& SortedLightSet)"
  },
  {
    "label": "RenderDeferredMultiPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDeferredMultiPass(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, const FSortedLightSetSceneInfo& SortedLightSet)"
  },
  {
    "label": "RenderAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAmbientOcclusion(FRDGBuilder& GraphBuilder, FRDGTextureRef SceneDepthTexture, FRDGTextureRef AmbientOcclusionTexture)"
  },
  {
    "label": "RenderPixelProjectedReflection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderPixelProjectedReflection(FRDGBuilder& GraphBuilder, FRDGTextureRef SceneColorTexture, FRDGTextureRef SceneDepthTexture, FRDGTextureRef PixelProjectedReflectionTexture, const FPlanarReflectionSceneProxy* PlanarReflectionSceneProxy)"
  },
  {
    "label": "RenderMobileShadowProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMobileShadowProjections(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "InitRenderTargetBindings_Deferred()",
    "kind": "Method",
    "detail": "Function (FRenderTargetBindingSlots)",
    "insertText": "InitRenderTargetBindings_Deferred(FSceneTextures& SceneTextures, FColorTargets& ColorTargets)"
  },
  {
    "label": "InitRenderTargetBindings_Forward()",
    "kind": "Method",
    "detail": "Function (FRenderTargetBindingSlots)",
    "insertText": "InitRenderTargetBindings_Forward(FRDGTextureRef ViewFamilyTexture, FSceneTextures& SceneTextures)"
  },
  {
    "label": "GetColorTargets_Deferred()",
    "kind": "Method",
    "detail": "Function (FColorTargets)",
    "insertText": "GetColorTargets_Deferred(FSceneTextures& SceneTextures)"
  },
  {
    "label": "UpdateNoiseTextureParameters()",
    "kind": "Method",
    "detail": "Function (private : const bool bGammaSpace ; const bool bDeferredShading ; const bool bRequiresDBufferDecals ; const bool bUseVirtualTexturing ; const bool bSupportsSimpleLights ; bool bTonemapSubpass ; bool bTonemapSubpassInline ; int32 NumMSAASamples ; bool bRenderToSceneColor ; bool bRequiresMultiPass ; bool bKeepDepthContent ; bool bModulatedShadowsInUse ; bool bShouldRenderCustomDepth ; bool bRequiresPixelProjectedPlanarRelfectionPass ; bool bRequiresAmbientOcclusionPass ; bool bShouldRenderVelocities ; bool bShouldRenderHZB ; bool bRequiresScreenSpaceReflections ; bool bIsFullDepthPrepassEnabled ; bool bIsMaskedOnlyDepthPrepassEnabled ; bool bRequiresSceneDepthAux ; bool bEnableClusteredLocalLights ; bool bEnableClusteredReflections ; bool bRequiresShadowProjections ; ETranslucencyPass::Type StandardTranslucencyPass ; EMeshPass::Type StandardTranslucencyMeshPass ; FInstanceCullingDrawParams DepthPassInstanceCullingDrawParams ; FInstanceCullingDrawParams SkyPassInstanceCullingDrawParams ; FInstanceCullingDrawParams DebugViewModeInstanceCullingDrawParams ; FInstanceCullingDrawParams TranslucencyInstanceCullingDrawParams ; FInstanceCullingDrawParams MeshDecalSceneColorInstanceCullingDrawParams ; FInstanceCullingDrawParams MeshDecalSceneColorAndGBufferInstanceCullingDrawParams ; const FViewInfo* CachedView = nullptr ; } ; void)",
    "insertText": "UpdateNoiseTextureParameters(FViewUniformShaderParameters& ViewUniformShaderParameters)"
  },
  {
    "label": "FFastVramConfig()",
    "kind": "Method",
    "detail": "Function (struct FFastVramConfig {)",
    "insertText": "FFastVramConfig()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "OnCVarUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCVarUpdated()"
  },
  {
    "label": "OnSceneRenderTargetsAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSceneRenderTargetsAllocated()"
  },
  {
    "label": "UpdateTextureFlagFromCVar()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags GBufferA ; ETextureCreateFlags GBufferB ; ETextureCreateFlags GBufferC ; ETextureCreateFlags GBufferD ; ETextureCreateFlags GBufferE ; ETextureCreateFlags GBufferF ; ETextureCreateFlags GBufferVelocity ; ETextureCreateFlags HZB ; ETextureCreateFlags SceneDepth ; ETextureCreateFlags SceneColor ; ETextureCreateFlags Bloom ; ETextureCreateFlags BokehDOF ; ETextureCreateFlags CircleDOF ; ETextureCreateFlags CombineLUTs ; ETextureCreateFlags Downsample ; ETextureCreateFlags EyeAdaptation ; ETextureCreateFlags Histogram ; ETextureCreateFlags HistogramReduce ; ETextureCreateFlags VelocityFlat ; ETextureCreateFlags VelocityMax ; ETextureCreateFlags MotionBlur ; ETextureCreateFlags Tonemap ; ETextureCreateFlags Upscale ; ETextureCreateFlags DistanceFieldNormal ; ETextureCreateFlags DistanceFieldAOHistory ; ETextureCreateFlags DistanceFieldAOBentNormal ; ETextureCreateFlags DistanceFieldAODownsampledBentNormal ; ETextureCreateFlags DistanceFieldShadows ; ETextureCreateFlags DistanceFieldIrradiance ; ETextureCreateFlags DistanceFieldAOConfidence ; ETextureCreateFlags Distortion ; ETextureCreateFlags ScreenSpaceShadowMask ; ETextureCreateFlags VolumetricFog ; ETextureCreateFlags SeparateTranslucency ; ETextureCreateFlags SeparateTranslucencyModulate ; ETextureCreateFlags ScreenSpaceAO ; ETextureCreateFlags SSR ; ETextureCreateFlags DBufferA ; ETextureCreateFlags DBufferB ; ETextureCreateFlags DBufferC ; ETextureCreateFlags DBufferMask ; ETextureCreateFlags DOFSetup ; ETextureCreateFlags DOFReduce ; ETextureCreateFlags DOFPostfilter ; ETextureCreateFlags PostProcessMaterial ; ETextureCreateFlags CustomDepth ; ETextureCreateFlags ShadowPointLight ; ETextureCreateFlags ShadowPerObject ; ETextureCreateFlags ShadowCSM ; EBufferUsageFlags DistanceFieldCulledObjectBuffers ; EBufferUsageFlags DistanceFieldTileIntersectionResources ; EBufferUsageFlags DistanceFieldAOScreenGridResources ; EBufferUsageFlags ForwardLightingCullingResources ; EBufferUsageFlags GlobalDistanceFieldCullGridBuffers ; bool bDirty ; private : bool)",
    "insertText": "UpdateTextureFlagFromCVar(TAutoConsoleVariable<int32>& CVar, ETextureCreateFlags& InOutValue)"
  },
  {
    "label": "UpdateBufferFlagFromCVar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateBufferFlagFromCVar(TAutoConsoleVariable<int32>& CVar, EBufferUsageFlags& InOutValue)"
  },
  {
    "label": "GetProjectedDistanceFieldShadows()",
    "kind": "Method",
    "detail": "Function (} ; FFastVramConfig GFastVRamConfig ; TConstArrayView<FProjectedShadowInfo*>)",
    "insertText": "GetProjectedDistanceFieldShadows(const FDynamicShadowsTaskData* TaskData)"
  },
  {
    "label": "BeginShadowGatherDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginShadowGatherDynamicMeshElements(FDynamicShadowsTaskData* TaskData)"
  },
  {
    "label": "UseCachedMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCachedMeshDrawCommands()"
  },
  {
    "label": "UseCachedMeshDrawCommands_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCachedMeshDrawCommands_AnyThread()"
  },
  {
    "label": "IsDynamicInstancingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicInstancingEnabled(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "AddResolveSceneColorPass()",
    "kind": "Method",
    "detail": "Function (enum class EGPUSkinCacheTransition { FrameSetup,Renderer,} ; void)",
    "insertText": "AddResolveSceneColorPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureMSAA SceneColor)"
  },
  {
    "label": "AddResolveSceneDepthPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResolveSceneDepthPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureMSAA SceneDepth)"
  },
  {
    "label": "AddResolveSceneColorPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResolveSceneColorPass(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, FRDGTextureMSAA SceneColor)"
  },
  {
    "label": "AddResolveSceneDepthPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResolveSceneDepthPass(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, FRDGTextureMSAA SceneDepth)"
  },
  {
    "label": "VirtualTextureFeedbackBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualTextureFeedbackBegin(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, FIntPoint SceneTextureExtent)"
  },
  {
    "label": "VirtualTextureFeedbackEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualTextureFeedbackEnd(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "CreateHalfResolutionDepthCheckerboardMinMax()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "CreateHalfResolutionDepthCheckerboardMinMax(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, FRDGTextureRef SceneDepth)"
  },
  {
    "label": "CreateQuarterResolutionDepthMinAndMax()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "CreateQuarterResolutionDepthMinAndMax(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, FRDGTextureRef DepthTexture)"
  },
  {
    "label": "GetViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (} FViewFamilyInfo&)",
    "insertText": "GetViewFamilyInfo(const TArray<FViewInfo>& Views)"
  },
  {
    "label": "GetViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (} const FViewFamilyInfo&)",
    "insertText": "GetViewFamilyInfo(const TArray<const FViewInfo>& Views)"
  },
  {
    "label": "GetViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (} FViewFamilyInfo&)",
    "insertText": "GetViewFamilyInfo(const TArrayView<FViewInfo>& Views)"
  },
  {
    "label": "GetViewFamilyInfo()",
    "kind": "Method",
    "detail": "Function (} const FViewFamilyInfo&)",
    "insertText": "GetViewFamilyInfo(const TArrayView<const FViewInfo>& Views)"
  },
  {
    "label": "IsPrimitiveAlphaHoldoutEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPrimitiveAlphaHoldoutEnabled(EShadingPath ShadingPath)"
  },
  {
    "label": "IsPrimitiveAlphaHoldoutEnabledForAnyView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrimitiveAlphaHoldoutEnabledForAnyView(TArrayView<FViewInfo> Views)"
  },
  {
    "label": "SceneCaptureRequiresAlphaChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SceneCaptureRequiresAlphaChannel(const FSceneView& View)"
  },
  {
    "label": "DoMaterialAndPrimitiveModifyMeshPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoMaterialAndPrimitiveModifyMeshPosition(const FMaterial& Material, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  }
]