[
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "FAutomationEditorCommonUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationEditorCommonUtils"
  },
  {
    "label": "based",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "based"
  },
  {
    "label": "NullReferencesToObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NullReferencesToObject(UObject* InObject)"
  },
  {
    "label": "ApplyCustomFactorySetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomFactorySetting(UObject* InObject, TArray<FString>& PropertyChain, const FString& Value)"
  },
  {
    "label": "ApplyCustomFactorySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomFactorySettings(UFactory* InFactory, const TArray<FImportFactorySettingValues>& FactorySettings)"
  },
  {
    "label": "WriteToTextFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToTextFile(const FString& InTestName, const FString& InTestItem, const FString& InFileName, const double& InEntry, const FString& Delimiter)"
  },
  {
    "label": "TotalFromFloatArray()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "TotalFromFloatArray(const TArray<float>& InFloatArray, bool bisAveragedInstead)"
  },
  {
    "label": "LargestValueInFloatArray()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LargestValueInFloatArray(const TArray<float>& InFloatArray)"
  },
  {
    "label": "CreateArrayFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateArrayFromFile(const FString& InFileLocation, TArray<FString>& OutArray)"
  },
  {
    "label": "IsArchiveWriteable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArchiveWriteable(const FString& InFilePath, const FArchive* InArchiveName)"
  },
  {
    "label": "GetLaunchOnDeviceID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLaunchOnDeviceID(FString& OutDeviceID, const FString& InMapName)"
  },
  {
    "label": "GetLaunchOnDeviceID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLaunchOnDeviceID(FString& OutDeviceID, const FString& InMapName, const FString& InDeviceName)"
  },
  {
    "label": "SetOrthoViewportView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOrthoViewportView(const FVector& ViewLocation, const FRotator& ViewRotation)"
  },
  {
    "label": "SetPlaySessionStartToActiveViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlaySessionStartToActiveViewport(FRequestPlaySessionParams& OutParams)"
  },
  {
    "label": "ConvertPackagePathToAssetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertPackagePathToAssetPath(const FString& PackagePath)"
  },
  {
    "label": "GetAssetDataFromPackagePath()",
    "kind": "Method",
    "detail": "Function (FAssetData)",
    "insertText": "GetAssetDataFromPackagePath(const FString& PackagePath)"
  },
  {
    "label": "LoadMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadMap(const FString& MapName)"
  },
  {
    "label": "RunPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPIE(float PIEDuration = 3.f)"
  },
  {
    "label": "CollectTestsByClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectTestsByClass(UClass * Class, TArray<FString>& OutBeautifiedNames, TArray <FString>& OutTestCommands)"
  },
  {
    "label": "CollectGameContentTestsByClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectGameContentTestsByClass(UClass * Class, bool bRecursiveClass, TArray<FString>& OutBeautifiedNames, TArray <FString>& OutTestCommands)"
  },
  {
    "label": "CollectGameContentTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectGameContentTests(TArray<FString>& OutBeautifiedNames, TArray <FString>& OutTestCommands)"
  }
]