[
  {
    "label": "FEntityAllocationProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationProxy"
  },
  {
    "label": "FPreAnimatedTrackerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedTrackerParams"
  },
  {
    "label": "FCachePreAnimatedValueParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachePreAnimatedValueParams"
  },
  {
    "label": "EPreAnimatedStorageRequirement",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPreAnimatedStorageRequirement"
  },
  {
    "label": "FPreAnimatedStorageIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStorageIndex"
  },
  {
    "label": "FPreAnimatedStorageGroupHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStorageGroupHandle"
  },
  {
    "label": "FPreAnimatedStateCachedValueHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStateCachedValueHandle"
  },
  {
    "label": "FPreAnimatedStateEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStateEntry"
  },
  {
    "label": "FPreAnimatedStateMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStateMetaData"
  },
  {
    "label": "FPreAnimatedTrackerParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Templates / TypeHash . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStorageID . h \" namespace UE { namespace MovieScene { struct FEntityAllocationProxy ; struct FPreAnimatedTrackerParams {)",
    "insertText": "FPreAnimatedTrackerParams(FEntityAllocationProxy Item)"
  },
  {
    "label": "FPreAnimatedStorageIndex()",
    "kind": "Method",
    "detail": "Function (int32 Num ; bool bWantsRestoreState ; } ; struct FCachePreAnimatedValueParams { bool bForcePersist = false ; } ; enum EPreAnimatedStorageRequirement : uint8 { None,Persistent,Transient,NoChange,} ; struct FPreAnimatedStorageIndex {)",
    "insertText": "FPreAnimatedStorageIndex() : Value(INDEX_NONE)"
  },
  {
    "label": "FPreAnimatedStorageIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPreAnimatedStorageIndex(int32 InNewValue) : Value(InNewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPreAnimatedStorageIndex&)",
    "insertText": "operator(int32 InNewValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Value = InNewValue ; return* this ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPreAnimatedStorageIndex& A, const FPreAnimatedStorageIndex& B)"
  },
  {
    "label": "FPreAnimatedStorageGroupHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPreAnimatedStorageGroupHandle(int32 InNewValue) : Value(InNewValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPreAnimatedStorageGroupHandle& A, const FPreAnimatedStorageGroupHandle& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPreAnimatedStateCachedValueHandle& A, const FPreAnimatedStateCachedValueHandle& B)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPreAnimatedStateEntry& InEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPreAnimatedStateEntry& A, const FPreAnimatedStateEntry& B)"
  }
]