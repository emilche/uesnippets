[
  {
    "label": "FTestLogger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestLogger"
  },
  {
    "label": "FTestLogger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Misc / AutomationTest . h \" template<ValueType> struct FTestLogger { TArray<ValueType> ExpectedValues ; TArray<ValueType> LoggedValues ; FAutomationTestBase* TestRunner ;)",
    "insertText": "FTestLogger(FAutomationTestBase* InTestRunner = nullptr) : TestRunner(InTestRunner)"
  },
  {
    "label": "FTestLogger()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTestLogger()"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (TestRunner ->)",
    "insertText": "TestTrue(\"Not all values expected values have been logged!\", ExpectedValues.Num() == 0 || LoggedValues.Num() == ExpectedValues.Num())"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Log(const ValueType& Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LoggedValues .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "TestEqual()",
    "kind": "Method",
    "detail": "Function (TestRunner ->)",
    "insertText": "TestEqual(\"Logged value different then expected!\", LoggedValues.Top(), ExpectedValues[LoggedValues.Num() - 1])"
  },
  {
    "label": "TestTrue()",
    "kind": "Method",
    "detail": "Function (} else { TestRunner ->)",
    "insertText": "TestTrue(\"Logged more values than expected!\", false)"
  }
]