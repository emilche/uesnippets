[
  {
    "label": "TestResultPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestResultPart"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "TestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestResult"
  },
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "TestResultPart()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_LAUNCHER_TEST_RESULT_H_ # define BASE_TEST_LAUNCHER_TEST_RESULT_H_ # include<map> # include<string> # include<vector> # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { struct TestResultPart { enum Type { kSuccess,kNonFatalFailure,kFatalFailure,kSkip,} ; Type type ;)",
    "insertText": "TestResultPart()"
  },
  {
    "label": "TestResultPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestResultPart(const TestResultPart& other)"
  },
  {
    "label": "TestResultPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestResultPart(TestResultPart&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestResultPart&)",
    "insertText": "operator(const TestResultPart& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestResultPart&)",
    "insertText": "operator(TestResultPart&& other)"
  },
  {
    "label": "TypeFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TypeFromString(const std::string& str, Type* type)"
  },
  {
    "label": "TypeAsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "TypeAsString()"
  },
  {
    "label": "TestResult()",
    "kind": "Method",
    "detail": "Function (std::string file_name ; int line_number ; std::string summary ; std::string message ; } ; struct TestResult { enum Status { TEST_UNKNOWN,TEST_SUCCESS,TEST_FAILURE,TEST_FAILURE_ON_EXIT,TEST_TIMEOUT,TEST_CRASH,TEST_SKIPPED,TEST_EXCESSIVE_OUTPUT,TEST_NOT_RUN,} ;)",
    "insertText": "TestResult()"
  },
  {
    "label": "TestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestResult(const TestResult& other)"
  },
  {
    "label": "TestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestResult(TestResult&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestResult&)",
    "insertText": "operator(const TestResult& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestResult&)",
    "insertText": "operator(TestResult&& other)"
  },
  {
    "label": "StatusAsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "StatusAsString()"
  },
  {
    "label": "GetTestName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestName()"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestCaseName()"
  },
  {
    "label": "AddLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLink(const std::string& name, const std::string& url)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProperty(const std::string& name, const std::string& value)"
  },
  {
    "label": "completed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "completed()"
  }
]