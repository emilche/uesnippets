[
  {
    "label": "scale_factors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scale_factors"
  },
  {
    "label": "REF_NO_SCALE()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_SCALE_H_ # define VPX_VP9_COMMON_VP9_SCALE_H_ # include \" vp9 / common / vp9_mv . h \" # include \" vpx_dsp / vpx_convolve . h \" # ifdef __cplusplus \" C \" { # endif # define REF_SCALE_SHIFT 1 4 # define)",
    "insertText": "REF_NO_SCALE(1 << REF_SCALE_SHIFT) #define REF_INVALID_SCALE (-1)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int x_scale_fp ; int y_scale_fp ; int x_step_q4 ; int y_step_q4 ;)",
    "insertText": "int(*scale_value_x)(int val, const struct scale_factors *sf)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*scale_value_y)(int val, const struct scale_factors *sf)"
  },
  {
    "label": "vp9_scale_mv()",
    "kind": "Method",
    "detail": "Function (convolve_fn_t predict [ 2 ] [ 2 ] [ 2 ] ; # if CONFIG_VP9_HIGHBITDEPTH highbd_convolve_fn_t highbd_predict [ 2 ] [ 2 ] [ 2 ] ; # endif } ; MV32)",
    "insertText": "vp9_scale_mv(const MV *mv, int x, int y, const struct scale_factors *sf)"
  },
  {
    "label": "vp9_setup_scale_factors_for_frame()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH void)",
    "insertText": "vp9_setup_scale_factors_for_frame(struct scale_factors *sf, int other_w, int other_h, int this_w, int this_h, int use_highbd)"
  },
  {
    "label": "vp9_setup_scale_factors_for_frame()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "vp9_setup_scale_factors_for_frame(struct scale_factors *sf, int other_w, int other_h, int this_w, int this_h)"
  },
  {
    "label": "vp9_is_valid_scale()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "vp9_is_valid_scale(const struct scale_factors *sf)"
  },
  {
    "label": "valid_ref_frame_size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "valid_ref_frame_size(int ref_width, int ref_height, int this_width, int this_height)"
  }
]