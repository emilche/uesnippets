[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FSelectedSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedSocketInfo"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UDebugSkelMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDebugSkelMeshComponent"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "FDebugSkelMeshDynamicData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSkelMeshDynamicData"
  },
  {
    "label": "FDebugSkelMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSkelMeshSceneProxy"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UAnimPreviewInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimPreviewInstance"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "FAnimNotifyErrors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyErrors"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FScopedSuspendAlternateSkinWeightPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSuspendAlternateSkinWeightPreview"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / SkeletalMesh . h \" # include \" EngineDefines . h \" # include \" Components / SkeletalMeshComponent . h \" # include \" Delegates / DelegateCombinations . h \" # include \" SkeletalMeshSceneProxy . h \" # include \" DebugSkelMeshComponent . generated . h \" class Error ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(FText, FGetExtendedViewportText)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnDebugForceLODChanged)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSelectedSocketInfo() : Socket(nullptr) , bSocketIsOnSkeleton( false)"
  },
  {
    "label": "FSelectedSocketInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSelectedSocketInfo(class USkeletalMeshSocket* InSocket, bool bInSocketIsOnSkeleton ) : Socket( InSocket ) , bSocketIsOnSkeleton( bInSocketIsOnSkeleton)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Socket = nullptr ; } class USkeletalMeshSocket* Socket ; bool bSocketIsOnSkeleton ; } ; namespace EPersonaTurnTableMode { enum Type { Stopped,Playing,Paused } ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FDebugSkelMeshDynamicData()",
    "kind": "Method",
    "detail": "Function (None,Trajectory,TrajectoryAndOrientation } ; class UDebugSkelMeshComponent ; class FSkeletalMeshRenderData ; class FDebugSkelMeshDynamicData { public :)",
    "insertText": "FDebugSkelMeshDynamicData(UDebugSkelMeshComponent* InComponent)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (bool bDrawMesh ; bool bDrawNormals ; bool bDrawTangents ; bool bDrawBinormals ; bool bDrawClothPaintPreview ; bool bFlipNormal ; int32 ClothingSimDataIndexWhenPainting ; TArray<uint32> ClothingSimIndices ; TArray<float> ClothingVisiblePropertyValues ; float PropertyViewMin ; float PropertyViewMax ; TArray<FVector3f> SkinnedPositions ; TArray<FVector3f> SkinnedNormals ; } ; class FDebugSkelMeshSceneProxy : public FSkeletalMeshSceneProxy { public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FDebugSkelMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugSkelMeshSceneProxy(const UDebugSkelMeshComponent* InComponent, FSkeletalMeshRenderData* InSkelMeshRenderData, FLinearColor InWireframeOverlayColor = FLinearColor::White)"
  },
  {
    "label": "FDebugSkelMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDebugSkelMeshSceneProxy()"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (FDebugSkelMeshDynamicData* DynamicData ; SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Default,Hidden,GreyedOut } ;)",
    "insertText": "UCLASS(transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "GetBoneColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBoneColor(int32 BoneIndex)"
  },
  {
    "label": "SetDebugForcedLOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugForcedLOD(int32 InNewForcedLOD)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "ShouldRenderSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSelected()"
  },
  {
    "label": "ShouldCPUSkin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCPUSkin()"
  },
  {
    "label": "ShouldNaniteSkin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldNaniteSkin()"
  },
  {
    "label": "PostInitMeshObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitMeshObject(class FSkeletalMeshObject* MeshObject)"
  },
  {
    "label": "RefreshBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneTransforms(FActorComponentTickFunction* TickFunction = NULL)"
  },
  {
    "label": "GetLODBias()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODBias()"
  },
  {
    "label": "IsWindEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindEnabled()"
  },
  {
    "label": "SetSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeletalMesh(USkeletalMesh* InSkelMesh, bool bReinitPose = true)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "IsPreviewOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreviewOn()"
  },
  {
    "label": "GetPreviewText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPreviewText()"
  },
  {
    "label": "EnablePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePreview(bool bEnable, class UAnimationAsset * PreviewAsset)"
  },
  {
    "label": "CreatePreviewInstance()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UAnimPreviewInstance>)",
    "insertText": "CreatePreviewInstance()"
  },
  {
    "label": "ShowReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowReferencePose(bool bRefPose)"
  },
  {
    "label": "IsReferencePoseShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReferencePoseShown()"
  },
  {
    "label": "OnMirrorDataTableChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMirrorDataTableChanged()"
  },
  {
    "label": "SetShowBoneWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowBoneWeight(bool bNewShowBoneWeight)"
  },
  {
    "label": "SetShowMorphTargetVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowMorphTargetVerts(bool bNewShowMorphTargetVerts)"
  },
  {
    "label": "IsUsingInGameBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingInGameBounds()"
  },
  {
    "label": "UseInGameBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseInGameBounds(bool bUseInGameBounds)"
  },
  {
    "label": "IsUsingPreSkinnedBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingPreSkinnedBounds()"
  },
  {
    "label": "UsePreSkinnedBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsePreSkinnedBounds(bool bUsePreSkinnedBounds)"
  },
  {
    "label": "CheckIfBoundsAreCorrrect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfBoundsAreCorrrect()"
  },
  {
    "label": "CalcGameBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcGameBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "ConsumeRootMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeRootMotion(const FVector& FloorMin, const FVector& FloorMax)"
  },
  {
    "label": "SetShowClothProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowClothProperty(bool bState)"
  },
  {
    "label": "SetProcessRootMotionMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessRootMotionMode(bInPreviewRootMotion ? EProcessRootMotionMode::Loop : EProcessRootMotionMode::Ignore)"
  },
  {
    "label": "IsProcessingRootMotion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProcessingRootMotion()"
  },
  {
    "label": "GetRequestedProcessRootMotionMode()",
    "kind": "Method",
    "detail": "Function (EProcessRootMotionMode)",
    "insertText": "GetRequestedProcessRootMotionMode()"
  },
  {
    "label": "GetProcessRootMotionMode()",
    "kind": "Method",
    "detail": "Function (EProcessRootMotionMode)",
    "insertText": "GetProcessRootMotionMode()"
  },
  {
    "label": "SetProcessRootMotionMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessRootMotionMode(EProcessRootMotionMode Mode)"
  },
  {
    "label": "SetVisualizeRootMotionMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisualizeRootMotionMode(EVisualizeRootMotionMode Mode)"
  },
  {
    "label": "IsVisualizeRootMotionMode()",
    "kind": "Method",
    "detail": "Function (VisualizeRootMotionMode = Mode ; } ; bool)",
    "insertText": "IsVisualizeRootMotionMode(EVisualizeRootMotionMode Mode)"
  },
  {
    "label": "DoesCurrentAssetHaveRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesCurrentAssetHaveRootMotion()"
  },
  {
    "label": "SetShowNotificationVisualizations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowNotificationVisualizations(const bool bShow)"
  },
  {
    "label": "IsNotificationVisualizationsEnabled()",
    "kind": "Method",
    "detail": "Function (bShowNotificationVisualizations = bShow ; } bool)",
    "insertText": "IsNotificationVisualizationsEnabled()"
  },
  {
    "label": "IsRootMotionVisualizationsEnabled()",
    "kind": "Method",
    "detail": "Function (VisualizeRootMotionMode = bShow ? EVisualizeRootMotionMode::Trajectory : EVisualizeRootMotionMode::None ; } bool)",
    "insertText": "IsRootMotionVisualizationsEnabled()"
  },
  {
    "label": "IsAssetUserDataVisualizationsEnabled()",
    "kind": "Method",
    "detail": "Function (bShowAssetUserDataVisualizations = bShow ; } bool)",
    "insertText": "IsAssetUserDataVisualizationsEnabled()"
  },
  {
    "label": "SetWireframeMeshOverlayColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWireframeMeshOverlayColor(FLinearColor Color)"
  },
  {
    "label": "GetWireframeMeshOverlayColor()",
    "kind": "Method",
    "detail": "Function (WireframeMeshOverlayColor = Color ; } FLinearColor)",
    "insertText": "GetWireframeMeshOverlayColor()"
  },
  {
    "label": "ReportAnimNotifyError()",
    "kind": "Method",
    "detail": "Function (} UObject* SourceNotify ; TArray<FString> Errors ; } ; TArray<FAnimNotifyErrors> AnimNotifyErrors ; void)",
    "insertText": "ReportAnimNotifyError(const FText& Error, UObject* InSourceNotify)"
  },
  {
    "label": "ClearAnimNotifyErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAnimNotifyErrors(UObject* InSourceNotify)"
  },
  {
    "label": "RegisterExtendedViewportTextDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterExtendedViewportTextDelegate(const FGetExtendedViewportText& InDelegate)"
  },
  {
    "label": "UnregisterExtendedViewportTextDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExtendedViewportTextDelegate(const FDelegateHandle& InDelegateHandle)"
  },
  {
    "label": "GetExtendedViewportTextDelegates()",
    "kind": "Method",
    "detail": "Function (const TArray<FGetExtendedViewportText>&)",
    "insertText": "GetExtendedViewportTextDelegates()"
  },
  {
    "label": "UnregisterOnDebugForceLODChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnDebugForceLODChangedDelegate()"
  },
  {
    "label": "DisableAllBodiesSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (private : TArray<FGetExtendedViewportText> ExtendedViewportTextDelegates ; FOnDebugForceLODChanged OnDebugForceLODChangedDelegate ; public : # endif void)",
    "insertText": "DisableAllBodiesSimulatePhysics()"
  },
  {
    "label": "SetInstanceSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (BodyInst ->)",
    "insertText": "SetInstanceSimulatePhysics(false)"
  },
  {
    "label": "ToggleClothSectionsVisibility()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ToggleClothSectionsVisibility(bool bShowOnlyClothSections)"
  },
  {
    "label": "RestoreClothSectionsVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreClothSectionsVisibility()"
  },
  {
    "label": "GetMutableClothingSimulation()",
    "kind": "Method",
    "detail": "Function (IClothingSimulation*)",
    "insertText": "GetMutableClothingSimulation()"
  },
  {
    "label": "CheckClothTeleport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckClothTeleport()"
  },
  {
    "label": "SetMeshSectionVisibilityForCloth()",
    "kind": "Method",
    "detail": "Function (FGuid SelectedClothingGuidForPainting ; int32 SelectedClothingLodForPainting ; int32 SelectedClothingLodMaskForPainting ; void)",
    "insertText": "SetMeshSectionVisibilityForCloth(FGuid InClothGuid, bool bVisibility)"
  },
  {
    "label": "ResetMeshSectionVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMeshSectionVisibility()"
  },
  {
    "label": "GenSpaceBases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenSpaceBases(TArray<FTransform>& OutSpaceBases)"
  },
  {
    "label": "EnableOverlayMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableOverlayMaterial(bool bEnable)"
  },
  {
    "label": "RebuildCachedClothBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildCachedClothBounds()"
  },
  {
    "label": "SetProcessRootMotionModeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessRootMotionModeInternal(EProcessRootMotionMode Mode)"
  },
  {
    "label": "ShouldRunClothTick()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldRunClothTick()"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "SetTurnTableMode()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetTurnTableMode(EPersonaTurnTableMode::Type NewMode)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (EPersonaTurnTableMode::Type TurnTableMode ; float TurnTableSpeedScaling ; void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "RefreshSelectedClothingSkinnedPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelectedClothingSkinnedPositions()"
  },
  {
    "label": "CanOverrideCollisionProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOverrideCollisionProfile()"
  },
  {
    "label": "SetCustomDefaultPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDefaultPose()"
  },
  {
    "label": "GetReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (} ; const FReferenceSkeleton&)",
    "insertText": "GetReferenceSkeleton()"
  },
  {
    "label": "GetDrawBoneIndices()",
    "kind": "Method",
    "detail": "Function (} FReferenceSkeleton EmptySkeleton ; return EmptySkeleton ; } const TArray<FBoneIndexType>&)",
    "insertText": "GetDrawBoneIndices()"
  },
  {
    "label": "GetDrawTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "GetDrawTransform(int32 BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform>& SpaceTransforms =)",
    "insertText": "GetComponentSpaceTransforms()"
  },
  {
    "label": "FScopedSuspendAlternateSkinWeightPreview()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedSuspendAlternateSkinWeightPreview()"
  }
]