[
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "saves",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "saves"
  },
  {
    "label": "GTestFlagSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestFlagSaver"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "TestPropertyKeyIs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPropertyKeyIs"
  },
  {
    "label": "contains",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "contains"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "OsStackTraceGetterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsStackTraceGetterInterface"
  },
  {
    "label": "OsStackTraceGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsStackTraceGetter"
  },
  {
    "label": "TraceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceInfo"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultGlobalTestPartResultReporter"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "DefaultPerThreadTestPartResultReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultPerThreadTestPartResultReporter"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "ReactionToSharding",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReactionToSharding"
  },
  {
    "label": "ReplaceDeathTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReplaceDeathTestFactory"
  },
  {
    "label": "UnitTestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestImpl"
  },
  {
    "label": "allow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allow"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "TestResultAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestResultAccessor"
  },
  {
    "label": "StreamingListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamingListener"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "AbstractSocketWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbstractSocketWriter"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SocketWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketWriter"
  },
  {
    "label": "SocketWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketWriter"
  },
  {
    "label": "StreamingListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamingListener"
  },
  {
    "label": "GetTimeInMillis()",
    "kind": "Method",
    "detail": "Function (TimeInMillis)",
    "insertText": "GetTimeInMillis()"
  },
  {
    "label": "ShouldUseColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseColor(bool stdout_is_tty)"
  },
  {
    "label": "FormatTimeInMillisAsSeconds()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatTimeInMillisAsSeconds(TimeInMillis ms)"
  },
  {
    "label": "FormatEpochTimeInMillisAsIso8601()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatEpochTimeInMillisAsIso8601(TimeInMillis ms)"
  },
  {
    "label": "ParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFlag(const char* str, const char* flag, int32_t* value)"
  },
  {
    "label": "CodePointToUtf8()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CodePointToUtf8(uint32_t code_point)"
  },
  {
    "label": "WideStringToUtf8()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "WideStringToUtf8(const wchar_t* str, int num_chars)"
  },
  {
    "label": "WriteToShardStatusFileIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToShardStatusFileIfNeeded()"
  },
  {
    "label": "ShouldShard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShard(const char* total_shards_str,\n                            const char* shard_index_str,\n                            bool in_subprocess_for_death_test)"
  },
  {
    "label": "Int32FromEnvOrDie()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Int32FromEnvOrDie(const char* env_var, int32_t default_val)"
  },
  {
    "label": "ShouldRunTestOnShard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunTestOnShard(int total_shards, int shard_index,\n                                     int test_id)"
  },
  {
    "label": "GetOutputFormat()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetOutputFormat()"
  },
  {
    "label": "GetAbsolutePathToOutputFile()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAbsolutePathToOutputFile()"
  },
  {
    "label": "FilterMatchesTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterMatchesTest(const std::string& test_suite_name,\n                                const std::string& test_name)"
  },
  {
    "label": "GTestShouldProcessSEH()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GTestShouldProcessSEH(DWORD exception_code)"
  },
  {
    "label": "MatchesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesFilter(const std::string& name, const char* filter)"
  },
  {
    "label": "GetCurrentExecutableName()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "GetCurrentExecutableName()"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "DefaultGlobalTestPartResultReporter(UnitTestImpl* unit_test)"
  },
  {
    "label": "DefaultPerThreadTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "DefaultPerThreadTestPartResultReporter(UnitTestImpl* unit_test)"
  },
  {
    "label": "UnitTestImpl()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "UnitTestImpl(UnitTest* parent)"
  },
  {
    "label": "SetGlobalTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTestPartResultReporter(\n      TestPartResultReporterInterface* reporter)"
  },
  {
    "label": "SetTestPartResultReporterForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestPartResultReporterForCurrentThread(\n      TestPartResultReporterInterface* reporter)"
  },
  {
    "label": "GetTestSuite()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTestSuite(i)"
  },
  {
    "label": "set_os_stack_trace_getter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_os_stack_trace_getter(OsStackTraceGetterInterface* getter)"
  },
  {
    "label": "GetTestSuite()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTestSuite(test_case_name, type_param, set_up_tc, tear_down_tc)"
  },
  {
    "label": "RegisterParameterizedTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParameterizedTests()"
  },
  {
    "label": "RunAllTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunAllTests()"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProperty(const TestProperty& test_property)"
  },
  {
    "label": "FilterTests()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FilterTests(ReactionToSharding shard_tests)"
  },
  {
    "label": "ListTestsMatchingFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListTestsMatchingFilter()"
  },
  {
    "label": "SuppressTestEventsIfInSubprocess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressTestEventsIfInSubprocess()"
  },
  {
    "label": "ConfigureXmlOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureXmlOutput()"
  },
  {
    "label": "ConfigureStreamingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureStreamingOutput()"
  },
  {
    "label": "PostFlagParsingInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFlagParsingInit()"
  },
  {
    "label": "ShuffleTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuffleTests()"
  },
  {
    "label": "UnshuffleTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnshuffleTests()"
  },
  {
    "label": "IsInSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSet(char ch, const char* str)"
  },
  {
    "label": "IsAsciiDigit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsciiDigit(char ch)"
  },
  {
    "label": "IsAsciiPunct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsciiPunct(char ch)"
  },
  {
    "label": "IsRepeat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRepeat(char ch)"
  },
  {
    "label": "IsAsciiWhiteSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsciiWhiteSpace(char ch)"
  },
  {
    "label": "IsAsciiWordChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsciiWordChar(char ch)"
  },
  {
    "label": "IsValidEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidEscape(char ch)"
  },
  {
    "label": "AtomMatchesChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AtomMatchesChar(bool escaped, char pattern, char ch)"
  },
  {
    "label": "ValidateRegex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateRegex(const char* regex)"
  },
  {
    "label": "MatchRegexAtHead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchRegexAtHead(const char* regex, const char* str)"
  },
  {
    "label": "MatchRepetitionAndRegexAtHead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchRepetitionAndRegexAtHead(bool escaped, char ch,\n                                              char repeat, const char* regex,\n                                              const char* str)"
  },
  {
    "label": "MatchRegexAnywhere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchRegexAnywhere(const char* regex, const char* str)"
  },
  {
    "label": "ParseGoogleTestFlagsOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseGoogleTestFlagsOnly(int* argc, char** argv)"
  },
  {
    "label": "ParseGoogleTestFlagsOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv)"
  },
  {
    "label": "GetLastErrnoDescription()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetLastErrnoDescription()"
  },
  {
    "label": "MakeConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeConnection()"
  },
  {
    "label": "UrlEncode()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "UrlEncode(const char* str)"
  }
]