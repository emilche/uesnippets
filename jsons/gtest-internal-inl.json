[
  {
    "label": "GTestFlagSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestFlagSaver"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "TestPropertyKeyIs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestPropertyKeyIs"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "OsStackTraceGetterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsStackTraceGetterInterface"
  },
  {
    "label": "OsStackTraceGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsStackTraceGetter"
  },
  {
    "label": "TraceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceInfo"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultGlobalTestPartResultReporter"
  },
  {
    "label": "DefaultPerThreadTestPartResultReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultPerThreadTestPartResultReporter"
  },
  {
    "label": "ReactionToSharding",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReactionToSharding"
  },
  {
    "label": "ReplaceDeathTestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReplaceDeathTestFactory"
  },
  {
    "label": "TestResultAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestResultAccessor"
  },
  {
    "label": "StreamingListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamingListener"
  },
  {
    "label": "AbstractSocketWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbstractSocketWriter"
  },
  {
    "label": "SocketWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketWriter"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_ # define GOOGLETEST_SRC_GTEST_INTERNAL_INL_H_ # ifndef _WIN32_WCE # include<errno . h> # endif # include<stddef . h> # include<stdlib . h> # include<string . h> # include<algorithm> # include<cstdint> # include<memory> # include<string> # include<vector> # include \" gtest / internal / gtest - port . h \" # if GTEST_CAN_STREAM_RESULTS_ # include<arpa / inet . h> # include<netdb . h> # endif # if GTEST_OS_WINDOWS # include<windows . h> # endif # include \" gtest / gtest - spi . h \" # include \" gtest / gtest . h \")",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\ ) GTEST_DECLARE_bool_(death_test_use_fork)"
  },
  {
    "label": "GetTimeInMillis()",
    "kind": "Method",
    "detail": "Function (namespace testing { namespace internal { GTEST_API_ const TypeId kTestTypeIdInGoogleTest ; const int kMaxRandomSeed = 9 9 9 9 9 ; GTEST_API_ bool g_help_flag ; GTEST_API_ TimeInMillis)",
    "insertText": "GetTimeInMillis()"
  },
  {
    "label": "ShouldUseColor()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "ShouldUseColor(bool stdout_is_tty)"
  },
  {
    "label": "FormatTimeInMillisAsSeconds()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ std::string)",
    "insertText": "FormatTimeInMillisAsSeconds(TimeInMillis ms)"
  },
  {
    "label": "FormatEpochTimeInMillisAsIso8601()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ std::string)",
    "insertText": "FormatEpochTimeInMillisAsIso8601(TimeInMillis ms)"
  },
  {
    "label": "ParseFlag()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "ParseFlag(const char* str, const char* flag, int32_t* value)"
  },
  {
    "label": "GetRandomSeedFromFlag()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRandomSeedFromFlag(int32_t random_seed_flag)"
  },
  {
    "label": "raw_seed()",
    "kind": "Method",
    "detail": "Function (const unsigned int)",
    "insertText": "raw_seed(random_seed_flag == 0) ? static_cast<unsigned int>(GetTimeInMillis()) : static_cast<unsigned int>(random_seed_flag)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int normalized_seed = static_cast<)",
    "insertText": "int((raw_seed - 1U) % static_cast<unsigned int>(kMaxRandomSeed))"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(1 <= seed && seed <= kMaxRandomSeed)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const int next_seed = seed + 1 ;)",
    "insertText": "return(next_seed > kMaxRandomSeed)"
  },
  {
    "label": "GTestFlagSaver()",
    "kind": "Method",
    "detail": "Function (} class GTestFlagSaver { public :)",
    "insertText": "GTestFlagSaver()"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (also_run_disabled_tests_ =)",
    "insertText": "GTEST_FLAG_GET(also_run_disabled_tests)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (break_on_failure_ =)",
    "insertText": "GTEST_FLAG_GET(break_on_failure)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (catch_exceptions_ =)",
    "insertText": "GTEST_FLAG_GET(catch_exceptions)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (color_ =)",
    "insertText": "GTEST_FLAG_GET(color)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (death_test_style_ =)",
    "insertText": "GTEST_FLAG_GET(death_test_style)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (death_test_use_fork_ =)",
    "insertText": "GTEST_FLAG_GET(death_test_use_fork)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (fail_fast_ =)",
    "insertText": "GTEST_FLAG_GET(fail_fast)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (filter_ =)",
    "insertText": "GTEST_FLAG_GET(filter)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (internal_run_death_test_ =)",
    "insertText": "GTEST_FLAG_GET(internal_run_death_test)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (list_tests_ =)",
    "insertText": "GTEST_FLAG_GET(list_tests)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (output_ =)",
    "insertText": "GTEST_FLAG_GET(output)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (brief_ =)",
    "insertText": "GTEST_FLAG_GET(brief)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (print_time_ =)",
    "insertText": "GTEST_FLAG_GET(print_time)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (print_utf8_ =)",
    "insertText": "GTEST_FLAG_GET(print_utf8)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (random_seed_ =)",
    "insertText": "GTEST_FLAG_GET(random_seed)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (repeat_ =)",
    "insertText": "GTEST_FLAG_GET(repeat)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (recreate_environments_when_repeating_ =)",
    "insertText": "GTEST_FLAG_GET(recreate_environments_when_repeating)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (shuffle_ =)",
    "insertText": "GTEST_FLAG_GET(shuffle)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (stack_trace_depth_ =)",
    "insertText": "GTEST_FLAG_GET(stack_trace_depth)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (stream_result_to_ =)",
    "insertText": "GTEST_FLAG_GET(stream_result_to)"
  },
  {
    "label": "GTEST_FLAG_GET()",
    "kind": "Method",
    "detail": "Function (throw_on_failure_ =)",
    "insertText": "GTEST_FLAG_GET(throw_on_failure)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(also_run_disabled_tests, also_run_disabled_tests_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(break_on_failure, break_on_failure_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(catch_exceptions, catch_exceptions_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(color, color_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(death_test_style, death_test_style_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(death_test_use_fork, death_test_use_fork_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(filter, filter_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(fail_fast, fail_fast_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(internal_run_death_test, internal_run_death_test_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(list_tests, list_tests_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(output, output_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(brief, brief_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(print_time, print_time_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(print_utf8, print_utf8_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(random_seed, random_seed_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(repeat, repeat_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(recreate_environments_when_repeating, recreate_environments_when_repeating_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(shuffle, shuffle_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(stack_trace_depth, stack_trace_depth_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(stream_result_to, stream_result_to_)"
  },
  {
    "label": "GTEST_FLAG_SET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_FLAG_SET(throw_on_failure, throw_on_failure_)"
  },
  {
    "label": "CodePointToUtf8()",
    "kind": "Method",
    "detail": "Function (} private : bool also_run_disabled_tests_ ; bool break_on_failure_ ; bool catch_exceptions_ ; std::string color_ ; std::string death_test_style_ ; bool death_test_use_fork_ ; bool fail_fast_ ; std::string filter_ ; std::string internal_run_death_test_ ; bool list_tests_ ; std::string output_ ; bool brief_ ; bool print_time_ ; bool print_utf8_ ; int32_t random_seed_ ; int32_t repeat_ ; bool recreate_environments_when_repeating_ ; bool shuffle_ ; int32_t stack_trace_depth_ ; std::string stream_result_to_ ; bool throw_on_failure_ ; } GTEST_ATTRIBUTE_UNUSED_ ; GTEST_API_ std::string)",
    "insertText": "CodePointToUtf8(uint32_t code_point)"
  },
  {
    "label": "WideStringToUtf8()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ std::string)",
    "insertText": "WideStringToUtf8(const wchar_t* str, int num_chars)"
  },
  {
    "label": "WriteToShardStatusFileIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToShardStatusFileIfNeeded()"
  },
  {
    "label": "ShouldShard()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "ShouldShard(const char* total_shards_str, const char* shard_index_str, bool in_subprocess_for_death_test)"
  },
  {
    "label": "Int32FromEnvOrDie()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ int32_t)",
    "insertText": "Int32FromEnvOrDie(const char* env_var, int32_t default_val)"
  },
  {
    "label": "ShouldRunTestOnShard()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "ShouldRunTestOnShard(int total_shards, int shard_index, int test_id)"
  },
  {
    "label": "CountIf()",
    "kind": "Method",
    "detail": "Function (template<class Container,Predicate> int)",
    "insertText": "CountIf(const Container& c, Predicate predicate)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int count = 0 ;)",
    "insertText": "for(auto it = c.begin(); it != c.end(); ++it)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (} return count ; } template<class Container,Functor> void)",
    "insertText": "ForEach(const Container& c, Functor functor)"
  },
  {
    "label": "for_each()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "for_each(c.begin(), c.end(), functor)"
  },
  {
    "label": "GetElementOr()",
    "kind": "Method",
    "detail": "Function (} template<E> E)",
    "insertText": "GetElementOr(const std::vector<E>& v, int i, E default_value)"
  },
  {
    "label": "ShuffleRange()",
    "kind": "Method",
    "detail": "Function (} template<E> void)",
    "insertText": "ShuffleRange(internal::Random* random, int begin, int end, std::vector<E>* v)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int size = static_cast<)",
    "insertText": "int(v->size())"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(0 <= begin && begin <= size)"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(begin <= end && end <= size)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int last_in_range = begin + range_width - 1 ; const int selected = begin + static_cast<)",
    "insertText": "int(random->Generate(static_cast<uint32_t>(range_width)))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap((*v)[static_cast<size_t>(selected)], (*v)[static_cast<size_t>(last_in_range)])"
  },
  {
    "label": "Shuffle()",
    "kind": "Method",
    "detail": "Function (} } template<E> void)",
    "insertText": "Shuffle(internal::Random* random, std::vector<E>* v)"
  },
  {
    "label": "ShuffleRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuffleRange(random, 0, static_cast<int>(v->size()), v)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Delete(T* x)"
  },
  {
    "label": "TestPropertyKeyIs()",
    "kind": "Method",
    "detail": "Function (delete x ; } class TestPropertyKeyIs { public :)",
    "insertText": "TestPropertyKeyIs(const std::string& key) : key_(key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const TestProperty& test_property)"
  },
  {
    "label": "GetOutputFormat()",
    "kind": "Method",
    "detail": "Function (} private : std::string key_ ; } ; class GTEST_API_ UnitTestOptions { public : std::string)",
    "insertText": "GetOutputFormat()"
  },
  {
    "label": "GetAbsolutePathToOutputFile()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAbsolutePathToOutputFile()"
  },
  {
    "label": "FilterMatchesTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterMatchesTest(const std::string& test_suite_name, const std::string& test_name)"
  },
  {
    "label": "GTestShouldProcessSEH()",
    "kind": "Method",
    "detail": "Function (# if GTEST_OS_WINDOWS int)",
    "insertText": "GTestShouldProcessSEH(DWORD exception_code)"
  },
  {
    "label": "MatchesFilter()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "MatchesFilter(const std::string& name, const char* filter)"
  },
  {
    "label": "GetCurrentExecutableName()",
    "kind": "Method",
    "detail": "Function (} ; GTEST_API_ FilePath)",
    "insertText": "GetCurrentExecutableName()"
  },
  {
    "label": "OsStackTraceGetterInterface()",
    "kind": "Method",
    "detail": "Function (class OsStackTraceGetterInterface { public :)",
    "insertText": "OsStackTraceGetterInterface()"
  },
  {
    "label": "CurrentStackTrace()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "CurrentStackTrace(int max_depth, int skip_count)"
  },
  {
    "label": "UponLeavingGTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UponLeavingGTest()"
  },
  {
    "label": "OsStackTraceGetterInterface()",
    "kind": "Method",
    "detail": "Function (const char* const kElidedFramesMarker ; private :)",
    "insertText": "OsStackTraceGetterInterface(const OsStackTraceGetterInterface&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OsStackTraceGetterInterface&)",
    "insertText": "operator(const OsStackTraceGetterInterface&)"
  },
  {
    "label": "OsStackTraceGetter()",
    "kind": "Method",
    "detail": "Function (} ; class OsStackTraceGetter : public OsStackTraceGetterInterface { public :)",
    "insertText": "OsStackTraceGetter()"
  },
  {
    "label": "OsStackTraceGetter()",
    "kind": "Method",
    "detail": "Function (private : # if GTEST_HAS_ABSL Mutex mutex_ ; void* caller_frame_ = nullptr ; # endif)",
    "insertText": "OsStackTraceGetter(const OsStackTraceGetter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OsStackTraceGetter&)",
    "insertText": "operator(const OsStackTraceGetter&)"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (} ; struct TraceInfo { const char* file ; int line ; std::string message ; } ; class DefaultGlobalTestPartResultReporter : public TestPartResultReporterInterface { public :)",
    "insertText": "DefaultGlobalTestPartResultReporter(UnitTestImpl* unit_test)"
  },
  {
    "label": "ReportTestPartResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTestPartResult(const TestPartResult& result)"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (private : UnitTestImpl* const unit_test_ ;)",
    "insertText": "DefaultGlobalTestPartResultReporter(const DefaultGlobalTestPartResultReporter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DefaultGlobalTestPartResultReporter&)",
    "insertText": "operator(const DefaultGlobalTestPartResultReporter&)"
  },
  {
    "label": "DefaultPerThreadTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (} ; class DefaultPerThreadTestPartResultReporter : public TestPartResultReporterInterface { public :)",
    "insertText": "DefaultPerThreadTestPartResultReporter(UnitTestImpl* unit_test)"
  },
  {
    "label": "DefaultPerThreadTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (private : UnitTestImpl* const unit_test_ ;)",
    "insertText": "DefaultPerThreadTestPartResultReporter(const DefaultPerThreadTestPartResultReporter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DefaultPerThreadTestPartResultReporter&)",
    "insertText": "operator(const DefaultPerThreadTestPartResultReporter&)"
  },
  {
    "label": "UnitTestImpl()",
    "kind": "Method",
    "detail": "Function (} ; class GTEST_API_ UnitTestImpl { public :)",
    "insertText": "UnitTestImpl(UnitTest* parent)"
  },
  {
    "label": "UnitTestImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UnitTestImpl()"
  },
  {
    "label": "GetGlobalTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (TestPartResultReporterInterface*)",
    "insertText": "GetGlobalTestPartResultReporter()"
  },
  {
    "label": "SetGlobalTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTestPartResultReporter(TestPartResultReporterInterface* reporter)"
  },
  {
    "label": "GetTestPartResultReporterForCurrentThread()",
    "kind": "Method",
    "detail": "Function (TestPartResultReporterInterface*)",
    "insertText": "GetTestPartResultReporterForCurrentThread()"
  },
  {
    "label": "SetTestPartResultReporterForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestPartResultReporterForCurrentThread(TestPartResultReporterInterface* reporter)"
  },
  {
    "label": "successful_test_suite_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "successful_test_suite_count()"
  },
  {
    "label": "failed_test_suite_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "failed_test_suite_count()"
  },
  {
    "label": "total_test_suite_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total_test_suite_count()"
  },
  {
    "label": "test_suite_to_run_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test_suite_to_run_count()"
  },
  {
    "label": "successful_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "successful_test_count()"
  },
  {
    "label": "skipped_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "skipped_test_count()"
  },
  {
    "label": "failed_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "failed_test_count()"
  },
  {
    "label": "reportable_disabled_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "reportable_disabled_test_count()"
  },
  {
    "label": "disabled_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "disabled_test_count()"
  },
  {
    "label": "reportable_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "reportable_test_count()"
  },
  {
    "label": "total_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total_test_count()"
  },
  {
    "label": "test_to_run_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test_to_run_count()"
  },
  {
    "label": "start_timestamp()",
    "kind": "Method",
    "detail": "Function (TimeInMillis)",
    "insertText": "start_timestamp()"
  },
  {
    "label": "Failed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Failed()"
  },
  {
    "label": "GetTestSuite()",
    "kind": "Method",
    "detail": "Function (} const TestSuite*)",
    "insertText": "GetTestSuite(int i)"
  },
  {
    "label": "GetElementOr()",
    "kind": "Method",
    "detail": "Function (const int index =)",
    "insertText": "GetElementOr(test_suite_indices_, i, -1)"
  },
  {
    "label": "GetTestCase()",
    "kind": "Method",
    "detail": "Function (} # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ const TestCase*)",
    "insertText": "GetTestCase(int i)"
  },
  {
    "label": "GetMutableSuiteCase()",
    "kind": "Method",
    "detail": "Function (} # endif TestSuite*)",
    "insertText": "GetMutableSuiteCase(int i)"
  },
  {
    "label": "listeners()",
    "kind": "Method",
    "detail": "Function (} TestEventListeners*)",
    "insertText": "listeners()"
  },
  {
    "label": "ad_hoc_test_result()",
    "kind": "Method",
    "detail": "Function (const TestResult*)",
    "insertText": "ad_hoc_test_result()"
  },
  {
    "label": "os_stack_trace_getter()",
    "kind": "Method",
    "detail": "Function (OsStackTraceGetterInterface*)",
    "insertText": "os_stack_trace_getter()"
  },
  {
    "label": "CurrentOsStackTraceExceptTop()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CurrentOsStackTraceExceptTop(int skip_count)"
  },
  {
    "label": "GetTestSuite()",
    "kind": "Method",
    "detail": "Function (TestSuite*)",
    "insertText": "GetTestSuite(const char* test_suite_name, const char* type_param, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc)"
  },
  {
    "label": "GetTestCase()",
    "kind": "Method",
    "detail": "Function (# ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ TestCase*)",
    "insertText": "GetTestCase(const char* test_case_name, const char* type_param, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc)"
  },
  {
    "label": "AddTestInfo()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "AddTestInfo(internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc, TestInfo* test_info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_DEATH_TEST)",
    "insertText": "if(original_working_dir_.IsEmpty())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (original_working_dir_ .)",
    "insertText": "Set(FilePath::GetCurrentDir())"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(!original_working_dir_.IsEmpty())"
  },
  {
    "label": "GetTestSuite()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "GetTestSuite(test_info->test_suite_name(), test_info->type_param(), set_up_tc, tear_down_tc) ->AddTestInfo(test_info)"
  },
  {
    "label": "parameterized_test_registry()",
    "kind": "Method",
    "detail": "Function (} internal::ParameterizedTestSuiteRegistry&)",
    "insertText": "parameterized_test_registry()"
  },
  {
    "label": "set_current_test_info()",
    "kind": "Method",
    "detail": "Function (current_test_suite_ = a_current_test_suite ; } void)",
    "insertText": "set_current_test_info(TestInfo* a_current_test_info)"
  },
  {
    "label": "RegisterParameterizedTests()",
    "kind": "Method",
    "detail": "Function (current_test_info_ = a_current_test_info ; } void)",
    "insertText": "RegisterParameterizedTests()"
  },
  {
    "label": "RunAllTests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunAllTests()"
  },
  {
    "label": "ClearNonAdHocTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNonAdHocTestResult()"
  },
  {
    "label": "ClearAdHocTestResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAdHocTestResult()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (ad_hoc_test_result_ .)",
    "insertText": "Clear()"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordProperty(const TestProperty& test_property)"
  },
  {
    "label": "FilterTests()",
    "kind": "Method",
    "detail": "Function (enum ReactionToSharding { HONOR_SHARDING_PROTOCOL,IGNORE_SHARDING_PROTOCOL } ; int)",
    "insertText": "FilterTests(ReactionToSharding shard_tests)"
  },
  {
    "label": "ListTestsMatchingFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListTestsMatchingFilter()"
  },
  {
    "label": "current_test_suite()",
    "kind": "Method",
    "detail": "Function (const TestSuite*)",
    "insertText": "current_test_suite()"
  },
  {
    "label": "gtest_trace_stack()",
    "kind": "Method",
    "detail": "Function (} const std::vector<TraceInfo>&)",
    "insertText": "gtest_trace_stack()"
  },
  {
    "label": "InitDeathTestSubprocessControlInfo()",
    "kind": "Method",
    "detail": "Function (} # if GTEST_HAS_DEATH_TEST void)",
    "insertText": "InitDeathTestSubprocessControlInfo()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (internal_run_death_test_flag_ .)",
    "insertText": "reset(ParseInternalRunDeathTestFlag())"
  },
  {
    "label": "internal_run_death_test_flag()",
    "kind": "Method",
    "detail": "Function (} const InternalRunDeathTestFlag*)",
    "insertText": "internal_run_death_test_flag()"
  },
  {
    "label": "death_test_factory()",
    "kind": "Method",
    "detail": "Function (} internal::DeathTestFactory*)",
    "insertText": "death_test_factory()"
  },
  {
    "label": "SuppressTestEventsIfInSubprocess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuppressTestEventsIfInSubprocess()"
  },
  {
    "label": "ConfigureXmlOutput()",
    "kind": "Method",
    "detail": "Function (class ReplaceDeathTestFactory ; # endif void)",
    "insertText": "ConfigureXmlOutput()"
  },
  {
    "label": "ConfigureStreamingOutput()",
    "kind": "Method",
    "detail": "Function (# if GTEST_CAN_STREAM_RESULTS_ void)",
    "insertText": "ConfigureStreamingOutput()"
  },
  {
    "label": "PostFlagParsingInit()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostFlagParsingInit()"
  },
  {
    "label": "random_seed()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "random_seed()"
  },
  {
    "label": "UnshuffleTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnshuffleTests()"
  },
  {
    "label": "catch_exceptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "catch_exceptions()"
  },
  {
    "label": "UnitTestImpl()",
    "kind": "Method",
    "detail": "Function (catch_exceptions_ = value ; } UnitTest* const parent_ ; internal::FilePath original_working_dir_ ; DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_ ; DefaultPerThreadTestPartResultReporter default_per_thread_test_part_result_reporter_ ; TestPartResultReporterInterface* global_test_part_result_repoter_ ; internal::Mutex global_test_part_result_reporter_mutex_ ; internal::ThreadLocal<TestPartResultReporterInterface*> per_thread_test_part_result_reporter_ ; std::vector<Environment*> environments_ ; std::vector<TestSuite*> test_suites_ ; std::vector<int> test_suite_indices_ ; internal::ParameterizedTestSuiteRegistry parameterized_test_registry_ ; internal::TypeParameterizedTestSuiteRegistry type_parameterized_test_registry_ ; std::set<std::string> ignored_parameterized_test_suites_ ; bool parameterized_tests_registered_ ; int last_death_test_suite_ ; TestSuite* current_test_suite_ ; TestInfo* current_test_info_ ; TestResult ad_hoc_test_result_ ; TestEventListeners listeners_ ; OsStackTraceGetterInterface* os_stack_trace_getter_ ; bool post_flag_parse_init_performed_ ; int random_seed_ ; internal::Random random_ ; TimeInMillis start_timestamp_ ; TimeInMillis elapsed_time_ ; # if GTEST_HAS_DEATH_TEST std::unique_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_ ; std::unique_ptr<internal::DeathTestFactory> death_test_factory_ ; # endif internal::ThreadLocal<std::vector<TraceInfo>> gtest_trace_stack_ ; bool catch_exceptions_ ;)",
    "insertText": "UnitTestImpl(const UnitTestImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnitTestImpl&)",
    "insertText": "operator(const UnitTestImpl&)"
  },
  {
    "label": "GetUnitTestImpl()",
    "kind": "Method",
    "detail": "Function (} ; UnitTestImpl*)",
    "insertText": "GetUnitTestImpl()"
  },
  {
    "label": "IsInSet()",
    "kind": "Method",
    "detail": "Function (} # if GTEST_USES_SIMPLE_RE GTEST_API_ bool)",
    "insertText": "IsInSet(char ch, const char* str)"
  },
  {
    "label": "IsAsciiDigit()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "IsAsciiDigit(char ch)"
  },
  {
    "label": "IsAsciiPunct()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "IsAsciiPunct(char ch)"
  },
  {
    "label": "IsRepeat()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "IsRepeat(char ch)"
  },
  {
    "label": "IsAsciiWhiteSpace()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "IsAsciiWhiteSpace(char ch)"
  },
  {
    "label": "IsAsciiWordChar()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "IsAsciiWordChar(char ch)"
  },
  {
    "label": "IsValidEscape()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "IsValidEscape(char ch)"
  },
  {
    "label": "AtomMatchesChar()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "AtomMatchesChar(bool escaped, char pattern, char ch)"
  },
  {
    "label": "ValidateRegex()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "ValidateRegex(const char* regex)"
  },
  {
    "label": "MatchRegexAtHead()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "MatchRegexAtHead(const char* regex, const char* str)"
  },
  {
    "label": "MatchRepetitionAndRegexAtHead()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "MatchRepetitionAndRegexAtHead(bool escaped, char ch, char repeat, const char* regex, const char* str)"
  },
  {
    "label": "MatchRegexAnywhere()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ bool)",
    "insertText": "MatchRegexAnywhere(const char* regex, const char* str)"
  },
  {
    "label": "ParseGoogleTestFlagsOnly()",
    "kind": "Method",
    "detail": "Function (# endif GTEST_API_ void)",
    "insertText": "ParseGoogleTestFlagsOnly(int* argc, char** argv)"
  },
  {
    "label": "ParseGoogleTestFlagsOnly()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv)"
  },
  {
    "label": "GetLastErrnoDescription()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_DEATH_TEST GTEST_API_ std::string)",
    "insertText": "GetLastErrnoDescription()"
  },
  {
    "label": "ParseNaturalNumber()",
    "kind": "Method",
    "detail": "Function (template<Integer> bool)",
    "insertText": "ParseNaturalNumber(const ::std::string& str, Integer* number)"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (const bool parse_success =* end = = ' \\ 0 '&& errno = = 0 ;)",
    "insertText": "GTEST_CHECK_(sizeof(Integer) <= sizeof(parsed))"
  },
  {
    "label": "Integer()",
    "kind": "Method",
    "detail": "Function (const Integer result = static_cast<)",
    "insertText": "Integer(parsed)"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (* number = result ; return true ; } return false ; } # endif class TestResultAccessor { public : void)",
    "insertText": "RecordProperty(TestResult* test_result, const std::string& xml_element, const TestProperty& property)"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (test_result ->)",
    "insertText": "RecordProperty(xml_element, property)"
  },
  {
    "label": "ClearTestPartResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearTestPartResults(TestResult* test_result)"
  },
  {
    "label": "ClearTestPartResults()",
    "kind": "Method",
    "detail": "Function (test_result ->)",
    "insertText": "ClearTestPartResults()"
  },
  {
    "label": "test_part_results()",
    "kind": "Method",
    "detail": "Function (} const std::vector<testing::TestPartResult>&)",
    "insertText": "test_part_results(const TestResult& test_result)"
  },
  {
    "label": "AbstractSocketWriter()",
    "kind": "Method",
    "detail": "Function (} } ; # if GTEST_CAN_STREAM_RESULTS_ class StreamingListener : public EmptyTestEventListener { public : class AbstractSocketWriter { public : ~)",
    "insertText": "AbstractSocketWriter()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Send(const std::string& message)"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseConnection()"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendLn(const std::string& message)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(message + \"\\n\")"
  },
  {
    "label": "SocketWriter()",
    "kind": "Method",
    "detail": "Function (} } ; class SocketWriter : public AbstractSocketWriter { public :)",
    "insertText": "SocketWriter(const std::string& host, const std::string& port) : sockfd_(-1), host_name_(host), port_num_(port)"
  },
  {
    "label": "MakeConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeConnection()"
  },
  {
    "label": "SocketWriter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SocketWriter()"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(sockfd_ != -1) << \"Send()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const auto len = static_cast<)",
    "insertText": "size_t(message.length())"
  },
  {
    "label": "GTEST_LOG_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_LOG_(WARNING)"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(sockfd_ != -1) << \"CloseConnection()"
  },
  {
    "label": "close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "close(sockfd_)"
  },
  {
    "label": "SocketWriter()",
    "kind": "Method",
    "detail": "Function (sockfd_ = - 1 ; } int sockfd_ ; const std::string host_name_ ; const std::string port_num_ ;)",
    "insertText": "SocketWriter(const SocketWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SocketWriter&)",
    "insertText": "operator(const SocketWriter&)"
  },
  {
    "label": "UrlEncode()",
    "kind": "Method",
    "detail": "Function (} ; std::string)",
    "insertText": "UrlEncode(const char* str)"
  },
  {
    "label": "StreamingListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamingListener(const std::string& host, const std::string& port) : socket_writer_(new SocketWriter(host, port))"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "StreamingListener()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StreamingListener(AbstractSocketWriter* socket_writer) : socket_writer_(socket_writer)"
  },
  {
    "label": "OnTestProgramStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestProgramStart(const UnitTest&)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestProgramStart\")"
  },
  {
    "label": "OnTestProgramEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestProgramEnd(const UnitTest& unit_test)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestProgramEnd&passed=\" + FormatBool(unit_test.Passed()))"
  },
  {
    "label": "OnTestIterationStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestIterationStart(const UnitTest& , int iteration)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestIterationStart&iteration=\" + StreamableToString(iteration))"
  },
  {
    "label": "OnTestIterationEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestIterationEnd(const UnitTest& unit_test, int)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestIterationEnd&passed=\" + FormatBool(unit_test.Passed()) + \"&elapsed_time=\" + StreamableToString(unit_test.elapsed_time()) + \"ms\")"
  },
  {
    "label": "OnTestSuiteStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestSuiteStart(const TestSuite& test_suite)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(std::string(\"event=TestCaseStart&name=\") + test_suite.name())"
  },
  {
    "label": "OnTestSuiteEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestSuiteEnd(const TestSuite& test_suite)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestCaseEnd&passed=\" + FormatBool(test_suite.Passed()) + \"&elapsed_time=\" + StreamableToString(test_suite.elapsed_time()) + \"ms\")"
  },
  {
    "label": "OnTestStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestStart(const TestInfo& test_info)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(std::string(\"event=TestStart&name=\") + test_info.name())"
  },
  {
    "label": "OnTestEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestEnd(const TestInfo& test_info)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestEnd&passed=\" + FormatBool((test_info.result())->Passed()) + \"&elapsed_time=\" + StreamableToString((test_info.result())->elapsed_time()) + \"ms\")"
  },
  {
    "label": "OnTestPartResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestPartResult(const TestPartResult& test_part_result)"
  },
  {
    "label": "file_name()",
    "kind": "Method",
    "detail": "Function (const char* file_name = test_part_result .)",
    "insertText": "file_name()"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"event=TestPartResult&file=\" + UrlEncode(file_name) + \"&line=\" + StreamableToString(test_part_result.line_number()) + \"&message=\" + UrlEncode(test_part_result.message()))"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (socket_writer_ ->)",
    "insertText": "SendLn(message)"
  },
  {
    "label": "SendLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLn(\"gtest_streaming_protocol_version=1.0\")"
  },
  {
    "label": "FormatBool()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "FormatBool(bool value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamingListener&)",
    "insertText": "operator(const StreamingListener&)"
  }
]