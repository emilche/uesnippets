[
  {
    "label": "FileLogWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileLogWriter"
  },
  {
    "label": "FileLogWriterFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileLogWriterFactory"
  },
  {
    "label": "FileLogWriter()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_LOGGING_FILE_LOG_WRITER_H_ # define TEST_LOGGING_FILE_LOG_WRITER_H_ # include<cstdio> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" test / logging / log_writer . h \" namespace webrtc { namespace webrtc_impl { class FileLogWriter final : public RtcEventLogOutput { public :)",
    "insertText": "FileLogWriter(absl::string_view file_path)"
  },
  {
    "label": "FileLogWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileLogWriter()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(absl::string_view value)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "FileLogWriterFactory()",
    "kind": "Method",
    "detail": "Function (private : std::FILE* const out_ ; } ; } class FileLogWriterFactory final : public LogWriterFactoryInterface { public :)",
    "insertText": "FileLogWriterFactory(absl::string_view base_path)"
  },
  {
    "label": "FileLogWriterFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileLogWriterFactory()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtcEventLogOutput>)",
    "insertText": "Create(absl::string_view filename)"
  }
]