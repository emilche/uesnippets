[
  {
    "label": "FClothPhysicalMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothPhysicalMeshData"
  },
  {
    "label": "FPointWeightMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointWeightMap"
  },
  {
    "label": "FMeshToMeshFilterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshToMeshFilterSet"
  },
  {
    "label": "ClothMeshDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClothMeshDesc"
  },
  {
    "label": "FClothBvEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothBvEntry"
  },
  {
    "label": "FVertexParameterMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexParameterMapper"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SkeletalMeshTypes . h \" # include \" Chaos / AABBTree . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogClothingMeshUtils, Log, All)"
  },
  {
    "label": "ClothMeshDesc()",
    "kind": "Method",
    "detail": "Function (struct FClothPhysicalMeshData ; struct FPointWeightMap ; namespace ClothingMeshUtils { struct FMeshToMeshFilterSet { TSet<int32> SourceTriangles ; TSet<int32> TargetVertices ; } ; class ClothMeshDesc { public :)",
    "insertText": "ClothMeshDesc(TConstArrayView<FVector3f> InPositions, TConstArrayView<FVector3f> InNormals, TConstArrayView<uint32> InIndices) : Positions(InPositions) , Normals(InNormals) , Indices(InIndices) , bHasValidBVH(false)"
  },
  {
    "label": "ClothMeshDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClothMeshDesc(TConstArrayView<FVector3f> InPositions, TConstArrayView<FVector3f> InNormals, TConstArrayView<FVector3f> InTangents, TConstArrayView<uint32> InIndices) : Positions(InPositions) , Normals(InNormals) , Tangents(InTangents) , Indices(InIndices) , bHasValidBVH(false)"
  },
  {
    "label": "ClothMeshDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClothMeshDesc(TConstArrayView<FVector3f> InPositions, TConstArrayView<uint32> InIndices) : Positions(InPositions) , Indices(InIndices) , bHasValidBVH(false)"
  },
  {
    "label": "ComputeAveragedNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAveragedNormals()"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Normals = TConstArrayView<)",
    "insertText": "FVector3f(AveragedNormals)"
  },
  {
    "label": "GetPositions()",
    "kind": "Method",
    "detail": "Function (} const TConstArrayView<FVector3f>&)",
    "insertText": "GetPositions()"
  },
  {
    "label": "HasTangents()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTangents()"
  },
  {
    "label": "HasAveragedNormals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAveragedNormals()"
  },
  {
    "label": "DistanceToTriangle()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DistanceToTriangle(const FVector& Position, int32 TriangleBaseIndex)"
  },
  {
    "label": "GetFilteredTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<int32>&)",
    "insertText": "GetFilteredTriangles()"
  },
  {
    "label": "FindCandidateTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "FindCandidateTriangles(const FVector& InPoint, float InTolerance = KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GetMaxEdgeLengths()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<float>)",
    "insertText": "GetMaxEdgeLengths()"
  },
  {
    "label": "SkinPhysicsMesh()",
    "kind": "Method",
    "detail": "Function (struct FClothBvEntry ; TConstArrayView<FVector3f> Positions ; TConstArrayView<FVector3f> Normals ; TConstArrayView<FVector3f> Tangents ; TConstArrayView<uint32> Indices ; TArray<FVector3f> AveragedNormals ; bool bHasValidBVH ; Chaos::TAABBTree<int32,Chaos::TAABBTreeLeafArray<int32,false>,false> BVH ; TArray<float> MaxEdgeLengths ; TArray<int32> FilteredTriangles ; } ; void)",
    "insertText": "SkinPhysicsMesh(const TArray<int32>& BoneMap, const FClothPhysicalMeshData& InMesh, const FTransform& PostTransform, const FMatrix44f* InBoneMatrices, const int32 InNumBoneMatrices, TArray<FVector3f>& OutPositions, TArray<FVector3f>& OutNormals)"
  },
  {
    "label": "GenerateMeshToMeshVertData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateMeshToMeshVertData(TArray<FMeshToMeshVertData>& OutMeshToMeshVertData, const ClothMeshDesc& TargetMesh, const ClothMeshDesc& SourceMesh, const FPointWeightMap* MaxDistances, bool bUseSmoothTransitions, bool bUseMultipleInfluences, float KernelMaxDistance, const TArray<FMeshToMeshFilterSet>& FilterSets = TArray<FMeshToMeshFilterSet>())"
  },
  {
    "label": "ComputeVertexContributions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeVertexContributions(TArray<FMeshToMeshVertData> &InOutSkinningData, const FPointWeightMap* const InMaxDistances, const bool bInSmoothTransition, const bool bInUseMultipleInfluences = false)"
  },
  {
    "label": "GetPointBaryAndDist()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "GetPointBaryAndDist(const FVector3f& A, const FVector3f& B, const FVector3f& C, const FVector3f& Point)"
  },
  {
    "label": "GetPointBaryAndDistWithNormals()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "GetPointBaryAndDistWithNormals(const FVector3f& A, const FVector3f& B, const FVector3f& C, const FVector3f& NA, const FVector3f& NB, const FVector3f& NC, const FVector3f& Point)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (class FVertexParameterMapper { public :)",
    "insertText": "UE_NONCOPYABLE(FVertexParameterMapper) FVertexParameterMapper(TConstArrayView<FVector3f> InMesh0Positions, TConstArrayView<FVector3f> InMesh0Normals, TConstArrayView<FVector3f> InMesh1Positions, TConstArrayView<FVector3f> InMesh1Normals, TConstArrayView<uint32> InMesh1Indices) : Mesh0Positions(InMesh0Positions) , Mesh0Normals(InMesh0Normals) , Mesh1Positions(InMesh1Positions) , Mesh1Normals(InMesh1Normals) , Mesh1Indices(InMesh1Indices)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (} template<T,Lambda> void)",
    "insertText": "Map(TConstArrayView<T>& SourceData, TArray<T>& DestData, const Lambda& Func)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumMesh0Positions = Mesh0Positions .)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (DestData .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (DestData .)",
    "insertText": "AddUninitialized(NumMesh0Positions)"
  },
  {
    "label": "GenerateEmbeddedPositions()",
    "kind": "Method",
    "detail": "Function (} TArray<FVector4> EmbeddedPositions ; TArray<int32> SourceIndices ;)",
    "insertText": "GenerateEmbeddedPositions(EmbeddedPositions, SourceIndices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector Bary = EmbeddedPositions [ DestVertIndex ] ; const int32 SourceTriBaseIdx = DestVertIndex* 3 ; T A = SourceData [ SourceIndices [ SourceTriBaseIdx + 0 ] ] ; T B = SourceData [ SourceIndices [ SourceTriBaseIdx + 1 ] ] ; T C = SourceData [ SourceIndices [ SourceTriBaseIdx + 2 ] ] ; T& DestVal = DestData [ DestVertIndex ] ; FVector DiffVec = FVector::OneVector - Bary ;)",
    "insertText": "if(FMath::Abs(DiffVec.X) <= SMALL_NUMBER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DestVal = A ; } else)",
    "insertText": "if(FMath::Abs(DiffVec.Y) <= SMALL_NUMBER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DestVal = B ; } else)",
    "insertText": "if(FMath::Abs(DiffVec.Z) <= SMALL_NUMBER)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (DestVal = C ; } else { DestVal =)",
    "insertText": "Func((FVector3f)Bary, A, B, C)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Map(TConstArrayView<float> Source, TArray<float>& Dest)"
  },
  {
    "label": "GenerateEmbeddedPositions()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GenerateEmbeddedPositions(TArray<FVector4>& OutEmbeddedPositions, TArray<int32>& OutSourceIndices)"
  }
]