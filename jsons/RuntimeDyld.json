[
  {
    "label": "ObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectFile"
  },
  {
    "label": "OwningBinary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OwningBinary"
  },
  {
    "label": "RuntimeDyldImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuntimeDyldImpl"
  },
  {
    "label": "RuntimeDyldCheckerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuntimeDyldCheckerImpl"
  },
  {
    "label": "RuntimeDyld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuntimeDyld"
  },
  {
    "label": "SymbolInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolInfo"
  },
  {
    "label": "LoadedObjectInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadedObjectInfo"
  },
  {
    "label": "LoadedObjectInfoHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoadedObjectInfoHelper"
  },
  {
    "label": "MemoryManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryManager"
  },
  {
    "label": "SymbolResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolResolver"
  },
  {
    "label": "RuntimeDyld()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_RUNTIMEDYLD_H # define LLVM_EXECUTIONENGINE_RUNTIMEDYLD_H # include \" JITSymbolFlags . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / Memory . h \" # include \" llvm / DebugInfo / DIContext . h \" # include<memory> namespace llvm { namespace object { class ObjectFile ; template<T> class OwningBinary ; } class RuntimeDyldImpl ; class RuntimeDyldCheckerImpl ; class RuntimeDyld { class RuntimeDyldCheckerImpl ;)",
    "insertText": "RuntimeDyld(const RuntimeDyld &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const RuntimeDyld &)"
  },
  {
    "label": "reassignSectionAddress()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "reassignSectionAddress(unsigned SectionID, uint64_t Addr)"
  },
  {
    "label": "SymbolInfo()",
    "kind": "Method",
    "detail": "Function (public : class SymbolInfo : public JITSymbolBase { public :)",
    "insertText": "SymbolInfo(std::nullptr_t) : JITSymbolBase(JITSymbolFlags::None), Address(0)"
  },
  {
    "label": "SymbolInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SymbolInfo(uint64_t Address, JITSymbolFlags Flags) : JITSymbolBase(Flags), Address(Address)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "getObjectForDebug()",
    "kind": "Method",
    "detail": "Function (} object::OwningBinary<object::ObjectFile>)",
    "insertText": "getObjectForDebug(const object::ObjectFile &Obj)"
  },
  {
    "label": "getSectionLoadAddress()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionLoadAddress(StringRef Name)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "anchor()"
  },
  {
    "label": "LoadedObjectInfoHelper()",
    "kind": "Method",
    "detail": "Function (RuntimeDyldImpl& RTDyld ; unsigned BeginIdx,EndIdx ; } ; template<Derived> struct LoadedObjectInfoHelper : LoadedObjectInfo {)",
    "insertText": "LoadedObjectInfoHelper(RuntimeDyldImpl &RTDyld, unsigned BeginIdx, unsigned EndIdx) : LoadedObjectInfo(RTDyld, BeginIdx, EndIdx)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<llvm::LoadedObjectInfo>)",
    "insertText": "clone()"
  },
  {
    "label": "MemoryManager()",
    "kind": "Method",
    "detail": "Function (} } ; class MemoryManager { public : ~)",
    "insertText": "MemoryManager()"
  },
  {
    "label": "allocateCodeSection()",
    "kind": "Method",
    "detail": "Function (} ; uint8_t*)",
    "insertText": "allocateCodeSection(uintptr_t Size, unsigned Alignment, unsigned SectionID, StringRef SectionName)"
  },
  {
    "label": "allocateDataSection()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "allocateDataSection(uintptr_t Size, unsigned Alignment, unsigned SectionID, StringRef SectionName, bool IsReadOnly)"
  },
  {
    "label": "reserveAllocationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserveAllocationSpace(uintptr_t CodeSize, uintptr_t DataSizeRO, uintptr_t DataSizeRW)"
  },
  {
    "label": "needsToReserveAllocationSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "needsToReserveAllocationSpace()"
  },
  {
    "label": "deregisterEHFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deregisterEHFrames(uint8_t *addr, uint64_t LoadAddr, size_t Size)"
  },
  {
    "label": "finalizeMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "finalizeMemory(std::string *ErrMsg = nullptr)"
  },
  {
    "label": "SymbolResolver()",
    "kind": "Method",
    "detail": "Function (} ; class SymbolResolver { public : ~)",
    "insertText": "SymbolResolver()"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} ; SymbolInfo)",
    "insertText": "findSymbol(const std::string &Name)"
  },
  {
    "label": "findSymbolInLogicalDylib()",
    "kind": "Method",
    "detail": "Function (SymbolInfo)",
    "insertText": "findSymbolInLogicalDylib(const std::string &Name)"
  },
  {
    "label": "RuntimeDyld()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "RuntimeDyld(MemoryManager &MemMgr, SymbolResolver &Resolver)"
  },
  {
    "label": "RuntimeDyld()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RuntimeDyld()"
  },
  {
    "label": "loadObject()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<LoadedObjectInfo>)",
    "insertText": "loadObject(const object::ObjectFile &O)"
  },
  {
    "label": "getSymbolLocalAddress()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "getSymbolLocalAddress(StringRef Name)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (SymbolInfo)",
    "insertText": "getSymbol(StringRef Name)"
  },
  {
    "label": "resolveRelocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resolveRelocations()"
  },
  {
    "label": "mapSectionAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSectionAddress(const void *LocalAddress, uint64_t TargetAddress)"
  },
  {
    "label": "registerEHFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerEHFrames()"
  },
  {
    "label": "deregisterEHFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deregisterEHFrames()"
  },
  {
    "label": "hasError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasError()"
  },
  {
    "label": "getErrorString()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getErrorString()"
  },
  {
    "label": "setProcessAllSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setProcessAllSections(bool ProcessAllSections)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Dyld && \"setProcessAllSections must be called before loadObject.\")"
  }
]