[
  {
    "label": "FTensor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTensor"
  },
  {
    "label": "FTensor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Containers / UnrealString . h \" # include \" NNETypes . h \" namespace UE::NNE::Internal { class FTensor { protected : FString Name ; ENNETensorDataType DataType ; FTensorShape Shape ; TArray<uint8> PreparedData ; uint64 DataSize = 0 ; uint32 Volume = 0 ;)",
    "insertText": "FTensor()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (public : const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetShape()",
    "kind": "Method",
    "detail": "Function (} const FTensorShape&)",
    "insertText": "GetShape()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T* DataPtr = reinterpret_cast<const)",
    "insertText": "T(PreparedData.GetData())"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const int32 ElemSize =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "SetShape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShape(const FTensorShape& InShape)"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (Shape = InShape ; Volume = InShape .)",
    "insertText": "Volume()"
  },
  {
    "label": "DataSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DataSize(uint64)GetTensorDataTypeSizeInBytes(DataType)"
  },
  {
    "label": "SetPreparedData()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SetPreparedData(TConstArrayView<T> Data)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (const uint8* DataPtr = reinterpret_cast<const)",
    "insertText": "uint8(Data.GetData())"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<uint8> DataAsByte =)",
    "insertText": "MakeArrayView(DataPtr, Data.Num() * sizeof(T))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PreparedData .)",
    "insertText": "Reset()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PreparedData .)",
    "insertText": "Append(DataAsByte)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetDataType()",
    "kind": "Method",
    "detail": "Function (bool IsEmpty =)",
    "insertText": "GetDataType()"
  },
  {
    "label": "IsConstant()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConstant()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetVolume()"
  },
  {
    "label": "SetShape()",
    "kind": "Method",
    "detail": "Function (FTensor Tensor ; Tensor . Name = Name ; Tensor . DataType = DataType ; Tensor .)",
    "insertText": "SetShape(Shape)"
  },
  {
    "label": "MakeFromSymbolicDesc()",
    "kind": "Method",
    "detail": "Function (} FTensor)",
    "insertText": "MakeFromSymbolicDesc(const FTensorDesc& TensorDesc)"
  }
]