[
  {
    "label": "FMallocLeakDetectionProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocLeakDetectionProxy"
  },
  {
    "label": "FMallocLeakDetectionProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / Array . h \" # include \" Misc / Crc . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Set . h \" # include \" Containers / Map . h \" # include \" Misc / ScopeLock . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / MallocLeakDetection . h \" # if MALLOC_LEAKDETECTION class FMallocLeakDetectionProxy : public FMalloc { private : FMalloc* UsedMalloc ; FMallocLeakDetection& Verify ; public :)",
    "insertText": "FMallocLeakDetectionProxy(FMalloc* InMalloc)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FMallocLeakDetectionProxy&)",
    "insertText": "Get()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Result = UsedMalloc ->)",
    "insertText": "Malloc(Size, Alignment)"
  },
  {
    "label": "OldSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "OldSize(0)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocationSize(OldPtr, OldSize)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void* NewPtr = UsedMalloc ->)",
    "insertText": "Realloc(OldPtr, NewSize, Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "InitializeStatsMetadata()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitializeStatsMetadata()"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& OutStats)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "GetAllocatorStats(OutStats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpAllocatorStats(FOutputDevice& Ar)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "DumpAllocatorStats(Ar)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAllocationSize(void* Original, SIZE_T& OutSize)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUsedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUsedOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUnusedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUnusedOnCurrentThread()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "OnMallocInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMallocInitialized()"
  }
]