[
  {
    "label": "FMeshSelfCut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshSelfCut"
  },
  {
    "label": "FMeshMeshCut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMeshCut"
  },
  {
    "label": "FMeshSelfCut()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" GeometryTypes . h \" # include \" Spatial / PointHashGrid3 . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" DynamicMesh / DynamicMesh3 . h \" namespace UE { namespace Geometry { class FMeshSelfCut { public : FDynamicMesh3* Mesh ; double SnapTolerance = FMathf::ZeroTolerance* 1 0 0 . 0 ; bool bCutCoplanar = false ; bool bTrackInsertedVertices = false ; TArray<int> VertexChains ;)",
    "insertText": "FMeshSelfCut(FDynamicMesh3* Mesh) : Mesh(Mesh)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} EOperationValidationResult)",
    "insertText": "Validate()"
  },
  {
    "label": "ResetOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetOutputs()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (VertexChains .)",
    "insertText": "Reset()"
  },
  {
    "label": "FMeshMeshCut()",
    "kind": "Method",
    "detail": "Function (} } ; class FMeshMeshCut { public : FDynamicMesh3* Mesh [ 2 ] ; double SnapTolerance = FMathf::ZeroTolerance* 1 0 0 . 0 ; bool bMutuallyCut = true ; bool bCutCoplanar = false ; bool bTrackInsertedVertices = false ; TArray<int> VertexChains [ 2 ] ; TArray<int> SegmentToChain [ 2 ] ;)",
    "insertText": "FMeshMeshCut(FDynamicMesh3* MeshA, FDynamicMesh3* MeshB)"
  }
]