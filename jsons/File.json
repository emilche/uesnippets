[
  {
    "label": "stat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat"
  },
  {
    "label": "stat64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat64"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "Error",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Error"
  },
  {
    "label": "Whence",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Whence"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FileTracing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileTracing"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_H_ # define BASE_FILES_FILE_H_ # include<stdint . h> # include<string> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / files / file_path . h \" # include \" base / files / file_tracing . h \" # include \" base / files / platform_file . h \" # include \" base / time / time . h \" # include \" base / trace_event / base_tracing_forward . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_BSD) || BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_NACL) || \\ BUILDFLAG(IS_FUCHSIA) || (BUILDFLAG(IS_ANDROID) && __ANDROID_API__ < 21)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (namespace base { typedef struct stat stat_wrapper_t ; } # elif)",
    "insertText": "BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (namespace base { typedef struct stat64 stat_wrapper_t ; } # endif namespace base { class BASE_EXPORT File { public : enum Flags { FLAG_OPEN = 1<<0,FLAG_CREATE = 1<<1,FLAG_OPEN_ALWAYS = 1<<2,FLAG_CREATE_ALWAYS = 1<<3,FLAG_OPEN_TRUNCATED = 1<<4,FLAG_READ = 1<<5,FLAG_WRITE = 1<<6,FLAG_APPEND = 1<<7,FLAG_WIN_EXCLUSIVE_READ = 1<<8,FLAG_WIN_EXCLUSIVE_WRITE = 1<<9,FLAG_ASYNC = 1<<1 0,FLAG_WIN_TEMPORARY = 1<<1 1,FLAG_WIN_HIDDEN = 1<<1 2,FLAG_DELETE_ON_CLOSE = 1<<1 3,FLAG_WRITE_ATTRIBUTES = 1<<1 4,FLAG_WIN_SHARE_DELETE = 1<<1 5,FLAG_TERMINAL_DEVICE = 1<<1 6,FLAG_WIN_BACKUP_SEMANTICS = 1<<1 7,FLAG_WIN_EXECUTE = 1<<1 8,FLAG_WIN_SEQUENTIAL_SCAN = 1<<1 9,FLAG_CAN_DELETE_ON_CLOSE = 1<<2 0,} ; enum Error { FILE_OK = 0,FILE_ERROR_FAILED = - 1,FILE_ERROR_IN_USE = - 2,FILE_ERROR_EXISTS = - 3,FILE_ERROR_NOT_FOUND = - 4,FILE_ERROR_ACCESS_DENIED = - 5,FILE_ERROR_TOO_MANY_OPENED = - 6,FILE_ERROR_NO_MEMORY = - 7,FILE_ERROR_NO_SPACE = - 8,FILE_ERROR_NOT_A_DIRECTORY = - 9,FILE_ERROR_INVALID_OPERATION = - 1 0,FILE_ERROR_SECURITY = - 1 1,FILE_ERROR_ABORT = - 1 2,FILE_ERROR_NOT_A_FILE = - 1 3,FILE_ERROR_NOT_EMPTY = - 1 4,FILE_ERROR_INVALID_URL = - 1 5,FILE_ERROR_IO = - 1 6,FILE_ERROR_MAX = - 1 7 } ; enum Whence { FROM_BEGIN = 0,FROM_CURRENT = 1,FROM_END = 2 } ; struct BASE_EXPORT Info {)",
    "insertText": "Info()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) void FromStat(const stat_wrapper_t& stat_info)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (# endif int64_t size = 0 ; bool is_directory = false ; bool is_symbolic_link = false ; Time last_modified ; Time last_accessed ; Time creation_time ; } ;)",
    "insertText": "File()"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(const FilePath& path, uint32_t flags)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(ScopedPlatformFile platform_file)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(PlatformFile platform_file)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(ScopedPlatformFile platform_file, bool async)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(PlatformFile platform_file, bool async)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(Error error_details)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(File&& other)"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "File(const File&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (File&)",
    "insertText": "operator(const File&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (File&)",
    "insertText": "operator(File&& other)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FilePath& path, uint32_t flags)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "created()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "created()"
  },
  {
    "label": "TakePlatformFile()",
    "kind": "Method",
    "detail": "Function (PlatformFile)",
    "insertText": "TakePlatformFile()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "Seek(Whence whence, int64_t offset)"
  },
  {
    "label": "ReadAndCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAndCheck(int64_t offset, span<uint8_t> data)"
  },
  {
    "label": "ReadAtCurrentPosAndCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAtCurrentPosAndCheck(span<uint8_t> data)"
  },
  {
    "label": "WriteAndCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteAndCheck(int64_t offset, span<const uint8_t> data)"
  },
  {
    "label": "WriteAtCurrentPosAndCheck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteAtCurrentPosAndCheck(span<const uint8_t> data)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Read(int64_t offset, char* data, int size)"
  },
  {
    "label": "ReadAtCurrentPos()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadAtCurrentPos(char* data, int size)"
  },
  {
    "label": "ReadNoBestEffort()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadNoBestEffort(int64_t offset, char* data, int size)"
  },
  {
    "label": "ReadAtCurrentPosNoBestEffort()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadAtCurrentPosNoBestEffort(char* data, int size)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Write(int64_t offset, const char* data, int size)"
  },
  {
    "label": "WriteAtCurrentPos()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WriteAtCurrentPos(const char* data, int size)"
  },
  {
    "label": "WriteAtCurrentPosNoBestEffort()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WriteAtCurrentPosNoBestEffort(const char* data, int size)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetLength()"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLength(int64_t length)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Flush()"
  },
  {
    "label": "SetTimes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTimes(Time last_access_time, Time last_modified_time)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInfo(Info* info)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(\\ IS_FUCHSIA)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (kShared,kExclusive,} ; Error)",
    "insertText": "Lock(LockMode mode)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (Error)",
    "insertText": "Unlock()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (# endif File)",
    "insertText": "Duplicate()"
  },
  {
    "label": "async()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "async()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) bool DeleteOnClose(bool delete_on_close)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) static Error OSErrorToFileError(DWORD last_error)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) static Error OSErrorToFileError(int saved_errno)"
  },
  {
    "label": "GetLastFileError()",
    "kind": "Method",
    "detail": "Function (# endif Error)",
    "insertText": "GetLastFileError()"
  },
  {
    "label": "ErrorToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ErrorToString(Error error)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) static int Stat(const char* path, stat_wrapper_t* sb)"
  },
  {
    "label": "Fstat()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Fstat(int fd, stat_wrapper_t* sb)"
  },
  {
    "label": "Lstat()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Lstat(const char* path, stat_wrapper_t* sb)"
  },
  {
    "label": "DoInitialize()",
    "kind": "Method",
    "detail": "Function (# endif private : class FileTracing::ScopedTrace ; void)",
    "insertText": "DoInitialize(const FilePath& path, uint32_t flags)"
  },
  {
    "label": "SetPlatformFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformFile(PlatformFile file)"
  }
]