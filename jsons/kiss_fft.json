[
  {
    "label": "arch_fft_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "arch_fft_state"
  },
  {
    "label": "kiss_fft_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kiss_fft_state"
  },
  {
    "label": "KISS_FFT_MALLOC()",
    "kind": "Method",
    "detail": "Function (# ifndef KISS_FFT_H # define KISS_FFT_H # include<stdlib . h> # include<math . h> # include \" arch . h \" # include \" cpu_support . h \" # ifdef __cplusplus \" C \" { # endif # ifdef USE_SIMD # include<xmmintrin . h> # define kiss_fft_scalar __m128 # define)",
    "insertText": "KISS_FFT_MALLOC(nbytes) memalign(16,nbytes)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (kiss_fft_scalar r ; kiss_fft_scalar i ; } kiss_fft_cpx ; typedef struct { kiss_twiddle_scalar r ; kiss_twiddle_scalar i ; } kiss_twiddle_cpx ; # define MAXFACTORS 8 typedef struct arch_fft_state { int is_supported ; void* priv ; } arch_fft_state ; typedef struct kiss_fft_state { int nfft ; opus_val16 scale ; # ifdef FIXED_POINT int scale_shift ; # endif int shift ; opus_int16 factors [ 2* MAXFACTORS ] ; const opus_int16* bitrev ; const kiss_twiddle_cpx* twiddles ; arch_fft_state* arch_fft ; } kiss_fft_state ; # if)",
    "insertText": "defined(HAVE_ARM_NE10) #include \"arm/fft_arm.h\" #endif kiss_fft_state *opus_fft_alloc_twiddles(int nfft,void * mem,size_t * lenmem, const kiss_fft_state *base, int arch)"
  },
  {
    "label": "opus_fft_alloc()",
    "kind": "Method",
    "detail": "Function (kiss_fft_state*)",
    "insertText": "opus_fft_alloc(int nfft,void * mem,size_t * lenmem, int arch)"
  },
  {
    "label": "opus_fft_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "opus_fft_c(const kiss_fft_state *cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)"
  },
  {
    "label": "opus_ifft_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "opus_ifft_c(const kiss_fft_state *cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)"
  },
  {
    "label": "opus_fft_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "opus_fft_impl(const kiss_fft_state *st,kiss_fft_cpx *fout)"
  },
  {
    "label": "opus_ifft_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "opus_ifft_impl(const kiss_fft_state *st,kiss_fft_cpx *fout)"
  },
  {
    "label": "opus_fft_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "opus_fft_free(const kiss_fft_state *cfg, int arch)"
  },
  {
    "label": "opus_fft_free_arch_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "opus_fft_free_arch_c(kiss_fft_state *st)"
  },
  {
    "label": "opus_fft_alloc_arch_c()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "opus_fft_alloc_arch_c(kiss_fft_state *st)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OVERRIDE_OPUS_FFT) #if defined(OPUS_HAVE_RTCD) && (defined(HAVE_ARM_NE10)) extern int (*const OPUS_FFT_ALLOC_ARCH_IMPL[OPUS_ARCHMASK+1])( kiss_fft_state *st)"
  },
  {
    "label": "opus_fft_alloc_arch()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "opus_fft_alloc_arch(_st, arch) \\ ((*OPUS_FFT_ALLOC_ARCH_IMPL[(arch)&OPUS_ARCHMASK])(_st)) extern void (*const OPUS_FFT_FREE_ARCH_IMPL[OPUS_ARCHMASK+1])( kiss_fft_state *st)"
  },
  {
    "label": "opus_fft_free_arch()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "opus_fft_free_arch(_st, arch) \\ ((*OPUS_FFT_FREE_ARCH_IMPL[(arch)&OPUS_ARCHMASK])(_st)) extern void (*const OPUS_FFT[OPUS_ARCHMASK+1])(const kiss_fft_state *cfg, const kiss_fft_cpx *fin, kiss_fft_cpx *fout)"
  },
  {
    "label": "opus_fft()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "opus_fft(_cfg, _fin, _fout, arch) \\ ((*OPUS_FFT[(arch)&OPUS_ARCHMASK])(_cfg, _fin, _fout)) extern void (*const OPUS_IFFT[OPUS_ARCHMASK+1])(const kiss_fft_state *cfg, const kiss_fft_cpx *fin, kiss_fft_cpx *fout)"
  }
]