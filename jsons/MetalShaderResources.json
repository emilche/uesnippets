[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMetalShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalShaderBindings"
  },
  {
    "label": "FMetalRayTracingHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalRayTracingHeader"
  },
  {
    "label": "FMetalAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalAttribute"
  },
  {
    "label": "FMetalCodeHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalCodeHeader"
  },
  {
    "label": "FMetalShaderLibraryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalShaderLibraryHeader"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CrossCompilerCommon . h \" enum { METAL_MAX_UNIFORM_BUFFER_BINDINGS = 1 2,METAL_FIRST_UNIFORM_BUFFER = 0,METAL_MAX_COMPUTE_STAGE_UAV_UNITS = 8,METAL_UAV_NOT_SUPPORTED_FOR_GRAPHICS_UNIT = - 1,METAL_MAX_BUFFERS = 3 1,} ; enum class EMetalBufferFormat : uint8 { Unknown = 0,R8Sint = 1,R8Uint = 2,R8Snorm = 3,R8Unorm = 4,R16Sint = 5,R16Uint = 6,R16Snorm = 7,R16Unorm = 8,R16Half = 9,R32Sint = 1 0,R32Uint = 1 1,R32Float = 1 2,RG8Sint = 1 3,RG8Uint = 1 4,RG8Snorm = 1 5,RG8Unorm = 1 6,RG16Sint = 1 7,RG16Uint = 1 8,RG16Snorm = 1 9,RG16Unorm = 2 0,RG16Half = 2 1,RG32Sint = 2 2,RG32Uint = 2 3,RG32Float = 2 4,RGB8Sint = 2 5,RGB8Uint = 2 6,RGB8Snorm = 2 7,RGB8Unorm = 2 8,RGB16Sint = 2 9,RGB16Uint = 3 0,RGB16Snorm = 3 1,RGB16Unorm = 3 2,RGB16Half = 3 3,RGB32Sint = 3 4,RGB32Uint = 3 5,RGB32Float = 3 6,RGBA8Sint = 3 7,RGBA8Uint = 3 8,RGBA8Snorm = 3 9,RGBA8Unorm = 4 0,BGRA8Unorm = 4 1,RGBA16Sint = 4 2,RGBA16Uint = 4 3,RGBA16Snorm = 4 4,RGBA16Unorm = 4 5,RGBA16Half = 4 6,RGBA32Sint = 4 7,RGBA32Uint = 4 8,RGBA32Float = 4 9,RGB10A2Unorm = 5 0,RG11B10Half = 5 1,R5G6B5Unorm = 5 2,B5G5R5A1Unorm = 5 3,Max = 5 4 } ; enum class EMetalBindingsFlags : uint8 { PixelDiscard = 1<<0,UseMetalShaderConverter = 1<<1,} ; struct FMetalShaderBindings { TArray<CrossCompiler::FPackedArrayInfo> PackedGlobalArrays ; TMap<uint8,TArray<uint8>> ArgumentBufferMasks ; CrossCompiler::FShaderBindingInOutMask InOutMask ; FString IRConverterReflectionJSON ; uint32 RSNumCBVs = 0 ; uint32 OutputSizeVS = 0 ; uint32 MaxInputPrimitivesPerMeshThreadgroupGS = 0 ; uint32 ConstantBuffers = 0 ; uint32 ArgumentBuffers = 0 ; uint8 NumSamplers = 0 ; uint8 NumUniformBuffers = 0 ; uint8 NumUAVs = 0 ; EMetalBindingsFlags Flags { } ; FArchive&)",
    "insertText": "Serialize(FArchive& Ar, FShaderResourceTable& SRT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<PackedGlobalArrays ; Ar<<SRT ; Ar<<ConstantBuffers ; Ar<<InOutMask ; Ar<<ArgumentBuffers ;)",
    "insertText": "if(ArgumentBuffers)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<ArgumentBufferMasks ; } Ar<<NumSamplers ; Ar<<NumUniformBuffers ; Ar<<NumUAVs ; Ar<<Flags ;)",
    "insertText": "if(EnumHasAnyFlags(Flags, EMetalBindingsFlags::UseMetalShaderConverter))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Ar<<IRConverterReflectionJSON ; Ar<<RSNumCBVs ; Ar<<OutputSizeVS ; Ar<<MaxInputPrimitivesPerMeshThreadgroupGS ; } return Ar ; } enum class EMetalOutputWindingMode : uint8 { Clockwise = 0,CounterClockwise = 1,} ; enum class EMetalPartitionMode : uint8 { Pow2 = 0,Integer = 1,FractionalOdd = 2,FractionalEven = 3,} ; enum class EMetalComponentType : uint8 { Uint = 0,Int,Half,Float,Bool,Max } ; struct FMetalRayTracingHeader { uint32 InstanceIndexBuffer ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMetalRayTracingHeader& Header)"
  },
  {
    "label": "FMetalAttribute()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . InstanceIndexBuffer ; return Ar ; } } ; struct FMetalAttribute { uint32 Index ; uint32 Components ; uint32 Offset ; EMetalComponentType Type ; uint32 Semantic ;)",
    "insertText": "FMetalAttribute() : Index(0) , Components(0) , Offset(0) , Type(EMetalComponentType::Uint) , Semantic(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMetalAttribute& Attr)"
  },
  {
    "label": "FMetalCodeHeader()",
    "kind": "Method",
    "detail": "Function (Ar<<Attr . Index ; Ar<<Attr . Type ; Ar<<Attr . Components ; Ar<<Attr . Offset ; Ar<<Attr . Semantic ; return Ar ; } } ; struct FMetalCodeHeader { FMetalShaderBindings Bindings ; uint32 SourceLen ; uint32 SourceCRC ; uint32 Version ; uint32 NumThreadsX ; uint32 NumThreadsY ; uint32 NumThreadsZ ; uint32 CompileFlags ; FMetalRayTracingHeader RayTracing ; uint8 Frequency ; int8 SideTable ; uint8 bDeviceFunctionConstants ;)",
    "insertText": "FMetalCodeHeader() : SourceLen(0) , SourceCRC(0) , Version(0) , NumThreadsX(0) , NumThreadsY(0) , NumThreadsZ(0) , CompileFlags(0) , Frequency(0) , SideTable(-1) , bDeviceFunctionConstants(0)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Bindings .)",
    "insertText": "Serialize(Ar, SRT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<SourceLen ; Ar<<SourceCRC ; Ar<<Version ; Ar<<Frequency ;)",
    "insertText": "if(Frequency == SF_Compute || IsRayTracingShaderFrequency((EShaderFrequency)Frequency))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<NumThreadsX ; Ar<<NumThreadsY ; Ar<<NumThreadsZ ; Ar<<RayTracing ; } Ar<<CompileFlags ; Ar<<SideTable ; Ar<<bDeviceFunctionConstants ; return Ar ; } struct FMetalShaderLibraryHeader { FString Format ; uint32 NumLibraries ; uint32 NumShadersPerLibrary ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMetalShaderLibraryHeader& Header)"
  }
]