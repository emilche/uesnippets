[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_COMPILER_SPECIFIC_H_ # define CEF_INCLUDE_BASE_CEF_COMPILER_SPECIFIC_H_ # pragma once # if)",
    "insertText": "defined(BASE_COMPILER_SPECIFIC_H_) #elif defined(USING_CHROMIUM_INCLUDES) #include \"base/compiler_specific.h\" #else #include \"include/base/cef_build.h\" #if defined(__has_cpp_attribute) #define HAS_CPP_ATTRIBUTE(x) __has_cpp_attribute(x) #else #define HAS_CPP_ATTRIBUTE(x) 0 #endif #if defined(__has_builtin) #define HAS_BUILTIN(x) __has_builtin(x) #else #define HAS_BUILTIN(x) 0 #endif #if !defined(__has_feature) #define __has_feature(x) 0 #endif #if !defined(__has_attribute) #define __has_attribute(x) 0 #endif #define ALLOW_UNUSED_LOCAL(x) (void)x #if defined(COMPILER_GCC) || defined(__clang__) #define ALLOW_UNUSED_TYPE __attribute__((unused)) #else #define ALLOW_UNUSED_TYPE #endif #if defined(COMPILER_GCC) #define NOINLINE __attribute__((noinline)) #elif defined(COMPILER_MSVC) #define NOINLINE __declspec(noinline) #else #define NOINLINE #endif #if defined(COMPILER_GCC) && defined(NDEBUG) #define ALWAYS_INLINE inline __attribute__((__always_inline__)) #elif defined(COMPILER_MSVC) && defined(NDEBUG) #define ALWAYS_INLINE __forceinline #else #define ALWAYS_INLINE inline #endif #if defined(__clang__) && __has_attribute(not_tail_called) #define NOT_TAIL_CALLED __attribute__((not_tail_called)) #else #define NOT_TAIL_CALLED #endif #if defined(COMPILER_MSVC) #define ALIGNAS(byte_alignment) __declspec(align(byte_alignment)) #elif defined(COMPILER_GCC) #define ALIGNAS(byte_alignment) __attribute__((aligned(byte_alignment))) #endif #undef WARN_UNUSED_RESULT #if defined(COMPILER_GCC) || defined(__clang__) #define WARN_UNUSED_RESULT __attribute__((warn_unused_result)) #else #define WARN_UNUSED_RESULT #endif #if HAS_CPP_ATTRIBUTE(no_unique_address) #define NO_UNIQUE_ADDRESS [[no_unique_address]] #else #define NO_UNIQUE_ADDRESS #endif #if defined(COMPILER_GCC) || defined(__clang__) #define PRINTF_FORMAT(format_param, dots_param) \\ __attribute__((format(printf, format_param, dots_param))) #else #define PRINTF_FORMAT(format_param, dots_param) #endif #define WPRINTF_FORMAT(format_param, dots_param) #if defined(__has_attribute) #if __has_attribute(no_sanitize) #define NO_SANITIZE(what) __attribute__((no_sanitize(what))) #endif #endif #if !defined(NO_SANITIZE) #define NO_SANITIZE(what) #endif #if defined(MEMORY_SANITIZER) && !defined(OS_NACL) #include <sanitizer/msan_interface.h> #define MSAN_UNPOISON(p, size) __msan_unpoison(p, size) #define MSAN_CHECK_MEM_IS_INITIALIZED(p, size) \\ __msan_check_mem_is_initialized(p, size) #else #define MSAN_UNPOISON(p, size) #define MSAN_CHECK_MEM_IS_INITIALIZED(p, size) #endif #if !defined(DISABLE_CFI_PERF) #if defined(__clang__) && defined(OFFICIAL_BUILD) #define DISABLE_CFI_PERF __attribute__((no_sanitize(\"cfi\"))) #else #define DISABLE_CFI_PERF #endif #endif #if !defined(DISABLE_CFI_ICALL) #if defined(OS_WIN) #define DISABLE_CFI_ICALL NO_SANITIZE(\"cfi-icall\") __declspec(guard(nocf)) #else #define DISABLE_CFI_ICALL NO_SANITIZE(\"cfi-icall\") #endif #endif #if !defined(DISABLE_CFI_ICALL) #define DISABLE_CFI_ICALL #endif #if !defined(CDECL) #if defined(OS_WIN) #define CDECL __cdecl #else #define CDECL #endif #endif #if !defined(UNLIKELY) #if defined(COMPILER_GCC) || defined(__clang__) #define UNLIKELY(x) __builtin_expect(!!(x), 0) #else #define UNLIKELY(x) (x) #endif #endif #if !defined(LIKELY) #if defined(COMPILER_GCC) || defined(__clang__) #define LIKELY(x) __builtin_expect(!!(x), 1) #else #define LIKELY(x) (x) #endif #endif #if defined(__has_feature) #define HAS_FEATURE(FEATURE) __has_feature(FEATURE) #else #define HAS_FEATURE(FEATURE) 0 #endif #if defined(__clang__) #define FALLTHROUGH [[clang::fallthrough]] #else #define FALLTHROUGH #endif #if defined(COMPILER_GCC) #define PRETTY_FUNCTION __PRETTY_FUNCTION__ #elif defined(COMPILER_MSVC) #define PRETTY_FUNCTION __FUNCSIG__ #else #define PRETTY_FUNCTION __func__ #endif #if !defined(CPU_ARM_NEON) #if defined(__arm__) #if !defined(__ARMEB__) && !defined(__ARM_EABI__) && !defined(__EABI__) && \\ !defined(__VFP_FP__) && !defined(_WIN32_WCE) && !defined(ANDROID) #error Chromium does not support middle endian architecture #endif #if defined(__ARM_NEON__) #define CPU_ARM_NEON 1 #endif #endif #endif #if !defined(HAVE_MIPS_MSA_INTRINSICS) #if defined(__mips_msa) && defined(__mips_isa_rev) && (__mips_isa_rev >= 5) #define HAVE_MIPS_MSA_INTRINSICS 1 #endif #endif #if defined(__clang__) && __has_attribute(uninitialized) #define STACK_UNINITIALIZED __attribute__((uninitialized)) #else #define STACK_UNINITIALIZED #endif #if defined(__clang_analyzer__) inline constexpr bool AnalyzerNoReturn() __attribute__((analyzer_noreturn))"
  },
  {
    "label": "ANALYZER_ASSUME_TRUE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ANALYZER_ASSUME_TRUE(arg) ::AnalyzerAssumeTrue(!!(arg)) #define ANALYZER_SKIP_THIS_PATH() static_cast<void>(::AnalyzerNoReturn()) #define ANALYZER_ALLOW_UNUSED(var) static_cast<void>(var)"
  },
  {
    "label": "ANALYZER_ASSUME_TRUE()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "ANALYZER_ASSUME_TRUE(arg) (arg) #define ANALYZER_SKIP_THIS_PATH() #define ANALYZER_ALLOW_UNUSED(var) static_cast<void>(var)"
  }
]