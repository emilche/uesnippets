[
  {
    "label": "BD_VALUE_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_BITREADER_H_ # define VPX_VPX_DSP_BITREADER_H_ # include<stddef . h> # include<stdio . h> # include<limits . h> # include \" . / vpx_config . h \" # include \" vpx_ports / mem . h \" # include \" vpx / vp8dx . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_dsp / prob . h \" # if CONFIG_BITSTREAM_DEBUG # include \" vpx_util / vpx_debug_util . h \" # endif # ifdef __cplusplus \" C \" { # endif typedef size_t BD_VALUE ; # define)",
    "insertText": "BD_VALUE_SIZE((int)sizeof(BD_VALUE) * CHAR_BIT)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (BD_VALUE value ; unsigned int range ; int count ; const uint8_t* buffer_end ; const uint8_t* buffer ; vpx_decrypt_cb decrypt_cb ; void* decrypt_state ; uint8_t clear_buffer [)",
    "insertText": "sizeof(BD_VALUE)"
  },
  {
    "label": "vpx_reader_init()",
    "kind": "Method",
    "detail": "Function (} vpx_reader ; int)",
    "insertText": "vpx_reader_init(vpx_reader *r, const uint8_t *buffer, size_t size, vpx_decrypt_cb decrypt_cb, void *decrypt_state)"
  },
  {
    "label": "vpx_reader_fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_reader_fill(vpx_reader *r)"
  },
  {
    "label": "vpx_reader_find_end()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "vpx_reader_find_end(vpx_reader *r)"
  },
  {
    "label": "vpx_reader_has_error()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vpx_reader_has_error(vpx_reader *r)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (unsigned int bit = 0 ; BD_VALUE value ; BD_VALUE bigsplit ; int count ; unsigned int range ; unsigned int)",
    "insertText": "split(r->range * prob + (256 - prob))"
  },
  {
    "label": "bigsplit()",
    "kind": "Method",
    "detail": "Function (value = r -> value ; count = r -> count ;)",
    "insertText": "bigsplit(BD_VALUE)split << (BD_VALUE_SIZE - CHAR_BIT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (range = split ;)",
    "insertText": "if(value >= bigsplit)"
  },
  {
    "label": "vpx_norm()",
    "kind": "Method",
    "detail": "Function (range = r -> range - split ; value = value - bigsplit ; bit = 1 ; } { const unsigned char shift =)",
    "insertText": "vpx_norm(unsigned char)"
  },
  {
    "label": "bitstream_queue_get_read()",
    "kind": "Method",
    "detail": "Function (range<<= shift ; value<<= shift ; count - = shift ; } r -> value = value ; r -> count = count ; r -> range = range ; # if CONFIG_BITSTREAM_DEBUG { const int queue_r =)",
    "insertText": "bitstream_queue_get_read()"
  },
  {
    "label": "bitstream_queue_get_frame_read()",
    "kind": "Method",
    "detail": "Function (const int frame_idx =)",
    "insertText": "bitstream_queue_get_frame_read()"
  },
  {
    "label": "bitstream_queue_pop()",
    "kind": "Method",
    "detail": "Function (int ref_result,ref_prob ;)",
    "insertText": "bitstream_queue_pop(&ref_result, &ref_prob)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"\\n *** [bit] result error, frame_idx_r %d bit %d ref_result %d \" \"queue_r %d\\n\", frame_idx, bit, ref_result, queue_r)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(prob != ref_prob)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"\\n *** [bit] prob error, frame_idx_r %d prob %d ref_prob %d \" \"queue_r %d\\n\", frame_idx, prob, ref_prob, queue_r)"
  },
  {
    "label": "vpx_read_bit()",
    "kind": "Method",
    "detail": "Function (} } # endif return bit ; } int)",
    "insertText": "vpx_read_bit(vpx_reader *r)"
  },
  {
    "label": "vpx_read_literal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vpx_read_literal(vpx_reader *r, int bits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int literal = 0,bit ;)",
    "insertText": "for(bit = bits - 1; bit >= 0; bit--) literal |= vpx_read_bit(r)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (vpx_tree_index i = 0 ;)",
    "insertText": "while((i = tree[i + vpx_read(r, probs[i >> 1])]) > 0)"
  }
]