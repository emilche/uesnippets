[
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" eos_p2p_types . h \")",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_SendPacket(EOS_HP2P Handle, const EOS_P2P_SendPacketOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_GetNextReceivedPacketSize(EOS_HP2P Handle, const EOS_P2P_GetNextReceivedPacketSizeOptions* Options, uint32_t* OutPacketSizeBytes)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_ReceivePacket(EOS_HP2P Handle, const EOS_P2P_ReceivePacketOptions* Options, EOS_ProductUserId* OutPeerId, EOS_P2P_SocketId* OutSocketId, uint8_t* OutChannel, void* OutData, uint32_t* OutBytesWritten)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_NotificationId) EOS_P2P_AddNotifyPeerConnectionRequest(EOS_HP2P Handle, const EOS_P2P_AddNotifyPeerConnectionRequestOptions* Options, void* ClientData, EOS_P2P_OnIncomingConnectionRequestCallback ConnectionRequestHandler)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(void) EOS_P2P_RemoveNotifyPeerConnectionRequest(EOS_HP2P Handle, EOS_NotificationId NotificationId)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_NotificationId) EOS_P2P_AddNotifyPeerConnectionEstablished(EOS_HP2P Handle, const EOS_P2P_AddNotifyPeerConnectionEstablishedOptions* Options, void* ClientData, EOS_P2P_OnPeerConnectionEstablishedCallback ConnectionEstablishedHandler)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(void) EOS_P2P_RemoveNotifyPeerConnectionEstablished(EOS_HP2P Handle, EOS_NotificationId NotificationId)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_NotificationId) EOS_P2P_AddNotifyPeerConnectionInterrupted(EOS_HP2P Handle, const EOS_P2P_AddNotifyPeerConnectionInterruptedOptions* Options, void* ClientData, EOS_P2P_OnPeerConnectionInterruptedCallback ConnectionInterruptedHandler)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(void) EOS_P2P_RemoveNotifyPeerConnectionInterrupted(EOS_HP2P Handle, EOS_NotificationId NotificationId)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_NotificationId) EOS_P2P_AddNotifyPeerConnectionClosed(EOS_HP2P Handle, const EOS_P2P_AddNotifyPeerConnectionClosedOptions* Options, void* ClientData, EOS_P2P_OnRemoteConnectionClosedCallback ConnectionClosedHandler)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(void) EOS_P2P_RemoveNotifyPeerConnectionClosed(EOS_HP2P Handle, EOS_NotificationId NotificationId)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_AcceptConnection(EOS_HP2P Handle, const EOS_P2P_AcceptConnectionOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_CloseConnection(EOS_HP2P Handle, const EOS_P2P_CloseConnectionOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_CloseConnections(EOS_HP2P Handle, const EOS_P2P_CloseConnectionsOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(void) EOS_P2P_QueryNATType(EOS_HP2P Handle, const EOS_P2P_QueryNATTypeOptions* Options, void* ClientData, const EOS_P2P_OnQueryNATTypeCompleteCallback CompletionDelegate)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_GetNATType(EOS_HP2P Handle, const EOS_P2P_GetNATTypeOptions* Options, EOS_ENATType* OutNATType)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_SetRelayControl(EOS_HP2P Handle, const EOS_P2P_SetRelayControlOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_GetRelayControl(EOS_HP2P Handle, const EOS_P2P_GetRelayControlOptions* Options, EOS_ERelayControl* OutRelayControl)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_SetPortRange(EOS_HP2P Handle, const EOS_P2P_SetPortRangeOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_GetPortRange(EOS_HP2P Handle, const EOS_P2P_GetPortRangeOptions* Options, uint16_t* OutPort, uint16_t* OutNumAdditionalPortsToTry)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_SetPacketQueueSize(EOS_HP2P Handle, const EOS_P2P_SetPacketQueueSizeOptions* Options)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_GetPacketQueueInfo(EOS_HP2P Handle, const EOS_P2P_GetPacketQueueInfoOptions* Options, EOS_P2P_PacketQueueInfo* OutPacketQueueInfo)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_NotificationId) EOS_P2P_AddNotifyIncomingPacketQueueFull(EOS_HP2P Handle, const EOS_P2P_AddNotifyIncomingPacketQueueFullOptions* Options, void* ClientData, EOS_P2P_OnIncomingPacketQueueFullCallback IncomingPacketQueueFullHandler)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(void) EOS_P2P_RemoveNotifyIncomingPacketQueueFull(EOS_HP2P Handle, EOS_NotificationId NotificationId)"
  },
  {
    "label": "EOS_DECLARE_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EOS_DECLARE_FUNC(EOS_EResult) EOS_P2P_ClearPacketQueue(EOS_HP2P Handle, const EOS_P2P_ClearPacketQueueOptions* Options)"
  }
]