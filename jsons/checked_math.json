[
  {
    "label": "CheckedNumeric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckedNumeric"
  },
  {
    "label": "CheckHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckHandler"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "Wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Wrapper"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_NUMERICS_CHECKED_MATH_H_ # define BASE_NUMERICS_CHECKED_MATH_H_ # include<stddef . h> # include<limits> # include<type_traits> # include \" base / numerics / checked_math_impl . h \" namespace base { namespace internal { template<T> class CheckedNumeric {)",
    "insertText": "static_assert(std::is_arithmetic<T>::value, \"CheckedNumeric<T>: T must be a numeric type.\")"
  },
  {
    "label": "CheckedNumeric()",
    "kind": "Method",
    "detail": "Function (public : template<Src> class CheckedNumeric ; using type = T ;)",
    "insertText": "CheckedNumeric()"
  },
  {
    "label": "CheckedNumeric()",
    "kind": "Method",
    "detail": "Function (template<Src>)",
    "insertText": "CheckedNumeric(const CheckedNumeric<Src>& rhs) : state_(rhs.state_.value(), rhs.IsValid())"
  },
  {
    "label": "CheckedNumeric()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckedNumeric(T value) : state_(value)"
  },
  {
    "label": "CheckedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src>)",
    "insertText": "CheckedNumeric(Src value) : state_(value)"
  },
  {
    "label": "CheckedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src>)",
    "insertText": "CheckedNumeric(StrictNumeric<Src> value) : state_(static_cast<Src>(value))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} template<Dst = T> bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<Dst> # if)",
    "insertText": "defined(__clang__) || defined(__GNUC__) __attribute__((warn_unused_result)) #elif defined(_MSC_VER) _Check_return_ #endif constexpr bool AssignIfValid(Dst* result)"
  },
  {
    "label": "ValueOrDie()",
    "kind": "Method",
    "detail": "Function (} template<Dst = T,class CheckHandler = CheckOnFailure> StrictNumeric<Dst>)",
    "insertText": "ValueOrDie()"
  },
  {
    "label": "ValueOrDefault()",
    "kind": "Method",
    "detail": "Function (} template<Dst = T,Src> StrictNumeric<Dst>)",
    "insertText": "ValueOrDefault(const Src default_value)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} template<Dst> CheckedNumeric<UnderlyingType<Dst>::type>)",
    "insertText": "Cast()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Src> CheckedNumeric&)",
    "insertText": "operator(const Src rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CheckedNumeric)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} const bool is_valid =)",
    "insertText": "IsValid() && (!std::is_signed<T>::value || std::is_floating_point<T>::value || NegateWrapper(state_.value()) != std::numeric_limits<T>::lowest())"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} CheckedNumeric)",
    "insertText": "Abs()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} template<U> CheckedNumeric<MathWrapper<CheckedMaxOp,T,U>::type>)",
    "insertText": "Max(const U rhs)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} template<U> CheckedNumeric<MathWrapper<CheckedMinOp,T,U>::type>)",
    "insertText": "Min(const U rhs)"
  },
  {
    "label": "UnsignedAbs()",
    "kind": "Method",
    "detail": "Function (} CheckedNumeric<UnsignedOrFloatForSize<T>::type>)",
    "insertText": "UnsignedAbs()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this + = 1 ; return* this ; } CheckedNumeric)",
    "insertText": "operator(int)"
  },
  {
    "label": "MathOp()",
    "kind": "Method",
    "detail": "Function (const CheckedNumeric value =* this ;* this - = 1 ; return value ; } template<template<,,> class M,L,R> CheckedNumeric)",
    "insertText": "MathOp(const L lhs, const R rhs)"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (using Math = MathWrapper<M,L,R>::math ; T result = 0 ; const bool is_valid = Wrapper<L)",
    "insertText": "is_valid(lhs) && Wrapper<R>::is_valid(rhs) && Math::Do(Wrapper<L>::value(lhs), Wrapper<R>::value(rhs), &result)"
  },
  {
    "label": "MathOp()",
    "kind": "Method",
    "detail": "Function (} template<template<,,> class M,R> CheckedNumeric&)",
    "insertText": "MathOp(const R rhs)"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (using Math = MathWrapper<M,T,R>::math ; T result = 0 ; const bool is_valid = state_ .)",
    "insertText": "is_valid() && Wrapper<R>::is_valid(rhs) && Math::Do(state_.value(), Wrapper<R>::value(rhs), &result)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* this = CheckedNumeric<)",
    "insertText": "T(result, is_valid)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (T result ; const bool success = CheckedSubOp<T,T)",
    "insertText": "Do(T(0), state_.value(), &result)"
  },
  {
    "label": "CheckedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src>)",
    "insertText": "CheckedNumeric(Src value, bool is_valid) : state_(value, is_valid)"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (} template<Src> struct Wrapper { bool)",
    "insertText": "is_valid(Src)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} Src)",
    "insertText": "value(const CheckedNumeric<Src> v)"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (} } ; template<Src> struct Wrapper<StrictNumeric<Src>> { bool)",
    "insertText": "is_valid(const StrictNumeric<Src>)"
  },
  {
    "label": "IsValidForType()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<Dst,Src> bool)",
    "insertText": "IsValidForType(const CheckedNumeric<Src> value)"
  },
  {
    "label": "ValueOrDieForType()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src> StrictNumeric<Dst>)",
    "insertText": "ValueOrDieForType(const CheckedNumeric<Src> value)"
  },
  {
    "label": "ValueOrDefaultForType()",
    "kind": "Method",
    "detail": "Function (} template<Dst,Src,Default> StrictNumeric<Dst>)",
    "insertText": "ValueOrDefaultForType(const CheckedNumeric<Src> value, const Default default_value)"
  },
  {
    "label": "MakeCheckedNum()",
    "kind": "Method",
    "detail": "Function (} template<T> CheckedNumeric<UnderlyingType<T>::type>)",
    "insertText": "MakeCheckedNum(const T value)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (using Math = MathWrapper<M,L,R>::math ; return CheckedNumeric<Math::result_type>::template MathOp<)",
    "insertText": "M(lhs, rhs)"
  },
  {
    "label": "CheckMathOp()",
    "kind": "Method",
    "detail": "Function (} template<template<,,> class M,L,R,. . . Args> auto)",
    "insertText": "CheckMathOp(const L lhs, const R rhs, const Args... args)"
  },
  {
    "label": "BASE_NUMERIC_ARITHMETIC_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Add, +, +=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Sub, -, -=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Mul, *, *=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Div, /, /=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Mod, %, %=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Lsh, <<, <<=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Rsh, >>, >>=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, And, &, &=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Or, |, |=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Checked, Check, Xor, ^, ^=) BASE_NUMERIC_ARITHMETIC_VARIADIC(Checked, Check, Max) BASE_NUMERIC_ARITHMETIC_VARIADIC(Checked, Check, Min) template <typename L, typename R> L* operator+(L* lhs, const StrictNumeric<R> rhs)"
  },
  {
    "label": "CheckAdd()",
    "kind": "Method",
    "detail": "Function (const uintptr_t result =)",
    "insertText": "CheckAdd(reinterpret_cast<uintptr_t>(lhs), CheckMul(sizeof(L), static_cast<R>(rhs))) .template ValueOrDie<uintptr_t>()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<L,R> L*)",
    "insertText": "operator(L* lhs, const StrictNumeric<R> rhs)"
  },
  {
    "label": "CheckSub()",
    "kind": "Method",
    "detail": "Function (const uintptr_t result =)",
    "insertText": "CheckSub(reinterpret_cast<uintptr_t>(lhs), CheckMul(sizeof(L), static_cast<R>(rhs))) .template ValueOrDie<uintptr_t>()"
  }
]