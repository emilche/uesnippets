[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedMachVM()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_SCOPED_MACH_VM_H_ # define BASE_MAC_SCOPED_MACH_VM_H_ # include<mach / mach . h> # include<stddef . h> # include<algorithm> # include<utility> # include \" base / base_export . h \" # include \" base / check_op . h \" namespace base::mac { class BASE_EXPORT ScopedMachVM { public :)",
    "insertText": "ScopedMachVM(vm_address_t address = 0, vm_size_t size = 0) : address_(address), size_(size)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(address % PAGE_SIZE, 0u)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(size % PAGE_SIZE, 0u)"
  },
  {
    "label": "ScopedMachVM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedMachVM(const ScopedMachVM&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMachVM&)",
    "insertText": "operator(const ScopedMachVM&)"
  },
  {
    "label": "ScopedMachVM()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedMachVM()"
  },
  {
    "label": "vm_deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_deallocate(mach_task_self(), address_, size_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "reset(vm_address_t address = 0, vm_size_t size = 0)"
  },
  {
    "label": "reset_unaligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset_unaligned(vm_address_t address, vm_size_t size)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (vm_address_t)",
    "insertText": "address()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(address_, that.address_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(size_, that.size_)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "release()"
  }
]