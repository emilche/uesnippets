[
  {
    "label": "RttFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RttFilter"
  },
  {
    "label": "RttFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_TIMING_RTT_FILTER_H_ # define MODULES_VIDEO_CODING_TIMING_RTT_FILTER_H_ # include<stdint . h> # include \" absl / container / inlined_vector . h \" # include \" api / units / time_delta . h \" namespace webrtc { class RttFilter { public :)",
    "insertText": "RttFilter()"
  },
  {
    "label": "RttFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RttFilter(const RttFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RttFilter&)",
    "insertText": "operator(const RttFilter&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TimeDelta rtt)"
  },
  {
    "label": "Rtt()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "Rtt()"
  },
  {
    "label": "JumpDetection()",
    "kind": "Method",
    "detail": "Function (private : int kMaxDriftJumpCount = 5 ; using BufferList = absl::InlinedVector<TimeDelta,kMaxDriftJumpCount> ; bool)",
    "insertText": "JumpDetection(TimeDelta rtt)"
  },
  {
    "label": "DriftDetection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DriftDetection(TimeDelta rtt)"
  },
  {
    "label": "ShortRttFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShortRttFilter(const BufferList& buf)"
  }
]