[
  {
    "label": "TriangleToVertexIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleToVertexIDs(const FDynamicMesh3* Mesh, const TArray<int>& TriangleIDs, TArray<int>& VertexIDsOut)"
  },
  {
    "label": "VertexToTriangleOneRing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VertexToTriangleOneRing(const FDynamicMesh3* Mesh, const TArray<int>& VertexIDs, TSet<int>& TriangleIDsOut)"
  },
  {
    "label": "TrianglesToOverlayElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrianglesToOverlayElements(const OverlayType* Overlay, EnumeratorType TriangleEnumeration, OutputSetType& ElementsOut)"
  },
  {
    "label": "FindVertexEdgesInTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex2i)",
    "insertText": "FindVertexEdgesInTriangle(const FDynamicMesh3& Mesh, int32 TriangleID, int32 VertexID)"
  },
  {
    "label": "FindSharedEdgeInTriangles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindSharedEdgeInTriangles(const FDynamicMesh3& Mesh, int32 Triangle0, int32 Triangle1)"
  },
  {
    "label": "CollectVertexPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectVertexPositions(const FDynamicMesh3& Mesh, EnumeratorType Enumeration, SetType& Output)"
  },
  {
    "label": "FindNextAdjacentTriangleAroundVtx()",
    "kind": "Method",
    "detail": "Function (FIndex3i)",
    "insertText": "FindNextAdjacentTriangleAroundVtx(const FDynamicMesh3* Mesh,\n\t\tint32 VertexID, int32 FromTriangleID, int32 PrevTriangleID,\n\t\tTrisConnectedPredicate TrisConnectedTest)"
  },
  {
    "label": "SplitBoundaryVertexTrianglesIntoSubsets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitBoundaryVertexTrianglesIntoSubsets(\n\t\tconst FDynamicMesh3* Mesh,\n\t\tint32 VertexID,\n\t\tint32 SplitEdgeID,\n\t\tTArray<int32>& TriangleSet0, TArray<int32>& TriangleSet1)"
  },
  {
    "label": "SplitInteriorVertexTrianglesIntoSubsets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitInteriorVertexTrianglesIntoSubsets(\n\t\tconst FDynamicMesh3* Mesh,\n\t\tint32 VertexID,\n\t\tint32 SplitEdgeID0, int32 SplitEdgeID1,\n\t\tTArray<int32>& TriangleSet0, TArray<int32>& TriangleSet1)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FIndex3i(TriNbrTris[j], TriEdges[j], j)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FIndex3i(IndexConstants::InvalidID, IndexConstants::InvalidID, IndexConstants::InvalidID)"
  }
]