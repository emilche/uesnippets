[
  {
    "label": "TriangleToVertexIDs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicMeshOverlay . h \" # include \" HAL / Platform . h \" # include \" IndexTypes . h \" # include \" Misc / AssertionMacros . h \" namespace UE { namespace Geometry { void)",
    "insertText": "TriangleToVertexIDs(const FDynamicMesh3* Mesh, const TArray<int>& TriangleIDs, TArray<int>& VertexIDsOut)"
  },
  {
    "label": "VertexToTriangleOneRing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VertexToTriangleOneRing(const FDynamicMesh3* Mesh, const TArray<int>& VertexIDs, TSet<int>& TriangleIDsOut)"
  },
  {
    "label": "TrianglesToOverlayElements()",
    "kind": "Method",
    "detail": "Function (template<OverlayType,EnumeratorType,OutputSetType> void)",
    "insertText": "TrianglesToOverlayElements(const OverlayType* Overlay, EnumeratorType TriangleEnumeration, OutputSetType& ElementsOut)"
  },
  {
    "label": "FindVertexEdgesInTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex2i)",
    "insertText": "FindVertexEdgesInTriangle(const FDynamicMesh3& Mesh, int32 TriangleID, int32 VertexID)"
  },
  {
    "label": "FindSharedEdgeInTriangles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindSharedEdgeInTriangles(const FDynamicMesh3& Mesh, int32 Triangle0, int32 Triangle1)"
  },
  {
    "label": "CollectVertexPositions()",
    "kind": "Method",
    "detail": "Function (template<EnumeratorType,SetType> void)",
    "insertText": "CollectVertexPositions(const FDynamicMesh3& Mesh, EnumeratorType Enumeration, SetType& Output)"
  },
  {
    "label": "FindNextAdjacentTriangleAroundVtx()",
    "kind": "Method",
    "detail": "Function (template<TrisConnectedPredicate> FIndex3i)",
    "insertText": "FindNextAdjacentTriangleAroundVtx(const FDynamicMesh3* Mesh, int32 VertexID, int32 FromTriangleID, int32 PrevTriangleID, TrisConnectedPredicate TrisConnectedTest)"
  },
  {
    "label": "SplitBoundaryVertexTrianglesIntoSubsets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitBoundaryVertexTrianglesIntoSubsets(const FDynamicMesh3* Mesh, int32 VertexID, int32 SplitEdgeID, TArray<int32>& TriangleSet0, TArray<int32>& TriangleSet1)"
  },
  {
    "label": "SplitInteriorVertexTrianglesIntoSubsets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitInteriorVertexTrianglesIntoSubsets(const FDynamicMesh3* Mesh, int32 VertexID, int32 SplitEdgeID0, int32 SplitEdgeID1, TArray<int32>& TriangleSet0, TArray<int32>& TriangleSet1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "Add(Mesh.GetVertex(vid))"
  },
  {
    "label": "GetTriEdges()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriEdges = Mesh ->)",
    "insertText": "GetTriEdges(FromTriangleID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriNbrTris ;)",
    "insertText": "for(int32 j = 0; j < 3; ++j)"
  },
  {
    "label": "GetEdgeT()",
    "kind": "Method",
    "detail": "Function (FIndex2i EdgeT = Mesh ->)",
    "insertText": "GetEdgeT(TriEdges[j])"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (TriNbrTris [)",
    "insertText": "j(EdgeT.A == FromTriangleID)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriVerts = Mesh ->)",
    "insertText": "GetTriangle(TriNbrTris[j])"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (break ; } return)",
    "insertText": "FIndex3i(TriNbrTris[j], TriEdges[j], j)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "FIndex3i(IndexConstants::InvalidID, IndexConstants::InvalidID, IndexConstants::InvalidID)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriElements = Overlay ->)",
    "insertText": "GetTriangle(TriangleID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementsOut .)",
    "insertText": "Add(TriElements.A)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementsOut .)",
    "insertText": "Add(TriElements.B)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementsOut .)",
    "insertText": "Add(TriElements.C)"
  }
]