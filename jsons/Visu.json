[
  {
    "label": "EVisuProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVisuProperty"
  },
  {
    "label": "FMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMesh"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FVisuParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef CADKERNEL_DEV # include \" Core / Parameter . h \" # include \" Core / Parameters . h \" # endif # include \" Core / Types . h \" # include \" Math / Point . h \" namespace UE::CADKernel { enum EVisuProperty { BBox = 0,Point,Element,Curve,Iso,ControlLine,EdgeMesh,NodeMesh,BorderEdge,NonManifoldEdge,BorderTopo,ControlPoint,YellowPoint,YellowCurve,BluePoint,BlueCurve,RedPoint,RedCurve,PurplePoint,PurpleCurve,GreenPoint,GreenCurve,PinkPoint,PinkCurve,OrangePoint,OrangeCurve,Last,} ; const TCHAR* VisuPropertyNames [ ] ; class FMesh ; # ifdef CADKERNEL_DEV class FVisuParameters : public FParameters { public : FParameter ChordError ; FParameter IsoUNumber ; FParameter IsoVNumber ; FParameter bDisplayCADOrient ; FParameter bDisplayMeshOrient ; FParameter bDisplayAxis ; FParameter bDisplayNormals ; FParameter NormalLength ;)",
    "insertText": "FVisuParameters() : FParameters(10) , ChordError(TEXT(\"DiscretizationError\"), 0.02, *this) , IsoUNumber(TEXT(\"IsoUNumber\"), 3, *this) , IsoVNumber(TEXT(\"IsoVNumber\"), 3, *this) , bDisplayCADOrient(TEXT(\"DisplayCadOrient\"), false, *this) , bDisplayMeshOrient(TEXT(\"DisplayMeshOrient\"), true, *this) , bDisplayAxis(TEXT(\"DisplayAxis\"), false, *this) , bDisplayNormals(TEXT(\"DisplayNormals\"), false, *this) , NormalLength(TEXT(\"NormalLength\"), 10., *this)"
  },
  {
    "label": "NewSession()",
    "kind": "Method",
    "detail": "Function (} } ; # endif class FVisu { protected : # ifdef CADKERNEL_DEV FVisuParameters Parameters ; # endif int32 SessionNum ; void)",
    "insertText": "NewSession()"
  },
  {
    "label": "EndSession()",
    "kind": "Method",
    "detail": "Function (+ + SessionNum ; } void)",
    "insertText": "EndSession()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - SessionNum ;)",
    "insertText": "if(SessionNum < 0)"
  },
  {
    "label": "FVisu()",
    "kind": "Method",
    "detail": "Function (SessionNum = 0 ; } } public :)",
    "insertText": "FVisu()"
  },
  {
    "label": "GetPropertyCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPropertyCount()"
  },
  {
    "label": "Open3DDebugSession()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Open3DDebugSession(const TCHAR* SessionName, const TArray<FIdent>& Ids)"
  },
  {
    "label": "Close3DDebugSession()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close3DDebugSession()"
  },
  {
    "label": "Open3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Open3DDebugSegment(FIdent Ident)"
  },
  {
    "label": "Close3DDebugSegment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close3DDebugSegment()"
  },
  {
    "label": "UpdateViewer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateViewer()"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawPoint(const FPoint& Point, EVisuProperty InProperty = EVisuProperty::BluePoint)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawPoint(const FPoint2D& Point, EVisuProperty InProperty = EVisuProperty::BluePoint)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawPoint(const FPointH& Point, EVisuProperty InProperty = EVisuProperty::BluePoint)"
  },
  {
    "label": "DrawElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawElement(int32 Dimension, TArray<FPoint>& Points, EVisuProperty InProperty = EVisuProperty::Element)"
  },
  {
    "label": "DrawPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawPolyline(const TArray<FPoint>& Points, EVisuProperty InProperty = EVisuProperty::BlueCurve)"
  },
  {
    "label": "DrawPolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawPolyline(const TArray<FPoint2D>& Points, EVisuProperty InProperty = EVisuProperty::BlueCurve)"
  },
  {
    "label": "DrawMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawMesh(FIdent MeshId)"
  }
]