[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "QueryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QueryNode"
  },
  {
    "label": "TraceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceEvent"
  },
  {
    "label": "ProcessThreadID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessThreadID"
  },
  {
    "label": "Query",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Query"
  },
  {
    "label": "TraceEventMember",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TraceEventMember"
  },
  {
    "label": "Operator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Operator"
  },
  {
    "label": "QueryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QueryType"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "TraceAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceAnalyzer"
  },
  {
    "label": "RateStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RateStats"
  },
  {
    "label": "RateStatsOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RateStatsOptions"
  },
  {
    "label": "ProcessThreadID()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TRACE_EVENT_ANALYZER_H_ # define BASE_TEST_TRACE_EVENT_ANALYZER_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include<string> # include<vector> # include \" base / memory / raw_ptr . h \" # include \" base / memory / ref_counted . h \" # include \" base / trace_event / base_tracing . h \" namespace base { class Value ; } namespace trace_analyzer { class QueryNode ; struct TraceEvent { struct ProcessThreadID {)",
    "insertText": "ProcessThreadID() : process_id(0), thread_id(0)"
  },
  {
    "label": "ProcessThreadID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ProcessThreadID(int process_id, int thread_id) : process_id(process_id), thread_id(thread_id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ProcessThreadID& rhs)"
  },
  {
    "label": "TraceEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceEvent(TraceEvent&& other)"
  },
  {
    "label": "TraceEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TraceEvent()"
  },
  {
    "label": "SetFromJSON()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "SetFromJSON(const base::Value* event_value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TraceEvent& rhs)"
  },
  {
    "label": "has_other_event()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_other_event()"
  },
  {
    "label": "GetArgAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetArgAsString(const std::string& arg_name, std::string* arg)"
  },
  {
    "label": "GetArgAsNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetArgAsNumber(const std::string& arg_name, double* arg)"
  },
  {
    "label": "GetArgAsDict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetArgAsDict(const std::string& arg_name, base::Value::Dict* arg)"
  },
  {
    "label": "HasStringArg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStringArg(const std::string& arg_name)"
  },
  {
    "label": "HasNumberArg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNumberArg(const std::string& arg_name)"
  },
  {
    "label": "HasDictArg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDictArg(const std::string& arg_name)"
  },
  {
    "label": "GetKnownArgAsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetKnownArgAsString(const std::string& arg_name)"
  },
  {
    "label": "GetKnownArgAsInt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetKnownArgAsInt(const std::string& arg_name)"
  },
  {
    "label": "GetKnownArgAsBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKnownArgAsBool(const std::string& arg_name)"
  },
  {
    "label": "GetKnownArgAsDict()",
    "kind": "Method",
    "detail": "Function (base::Value::Dict)",
    "insertText": "GetKnownArgAsDict(const std::string& arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (ProcessThreadID thread ; double timestamp = 0 . 0 ; double duration = 0 . 0 ; char phase = TRACE_EVENT_PHASE_BEGIN ; std::string category ; std::string name ; std::string id ; double thread_duration = 0 . 0 ; double thread_timestamp = 0 . 0 ; std::string scope ; std::string bind_id ; bool flow_out = false ; bool flow_in = false ; std::string global_id2 ; std::string local_id2 ; std::map<std::string,double> arg_numbers ; std::map<std::string,std::string> arg_strings ; std::map<std::string,base::Value::Dict> arg_dicts ; raw_ptr<const TraceEvent> other_event = nullptr ; raw_ptr<const TraceEvent> prev_event ; } ; typedef std::vector<const TraceEvent*> TraceEventVector ; class Query { public :)",
    "insertText": "Query(const Query& query)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Query()"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "String(const std::string& str)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Double(double num)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Int(int32_t num)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Uint(uint32_t num)"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Bool(bool boolean)"
  },
  {
    "label": "Phase()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Phase(char phase)"
  },
  {
    "label": "Pattern()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Pattern(const std::string& pattern)"
  },
  {
    "label": "EventPid()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "EventPid()"
  },
  {
    "label": "EventTid()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventTid()"
  },
  {
    "label": "EventTime()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventTime()"
  },
  {
    "label": "EventDuration()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventDuration()"
  },
  {
    "label": "EventCompleteDuration()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventCompleteDuration()"
  },
  {
    "label": "EventPhase()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventPhase()"
  },
  {
    "label": "EventCategory()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventCategory()"
  },
  {
    "label": "EventName()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventName()"
  },
  {
    "label": "EventId()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventId()"
  },
  {
    "label": "EventPidIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventPidIs(int process_id)"
  },
  {
    "label": "EventTidIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventTidIs(int thread_id)"
  },
  {
    "label": "EventThreadIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventThreadIs(const TraceEvent::ProcessThreadID& thread)"
  },
  {
    "label": "EventTimeIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventTimeIs(double timestamp)"
  },
  {
    "label": "EventDurationIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventDurationIs(double duration)"
  },
  {
    "label": "EventPhaseIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventPhaseIs(char phase)"
  },
  {
    "label": "EventCategoryIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventCategoryIs(const std::string& category)"
  },
  {
    "label": "EventNameIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventNameIs(const std::string& name)"
  },
  {
    "label": "EventIdIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventIdIs(const std::string& id)"
  },
  {
    "label": "EventHasStringArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventHasStringArg(const std::string& arg_name)"
  },
  {
    "label": "EventHasNumberArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventHasNumberArg(const std::string& arg_name)"
  },
  {
    "label": "EventArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventArg(const std::string& arg_name)"
  },
  {
    "label": "EventHasOther()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "EventHasOther()"
  },
  {
    "label": "OtherPid()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherPid()"
  },
  {
    "label": "OtherTid()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherTid()"
  },
  {
    "label": "OtherTime()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherTime()"
  },
  {
    "label": "OtherPhase()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherPhase()"
  },
  {
    "label": "OtherCategory()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherCategory()"
  },
  {
    "label": "OtherName()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherName()"
  },
  {
    "label": "OtherId()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherId()"
  },
  {
    "label": "OtherPidIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherPidIs(int process_id)"
  },
  {
    "label": "OtherTidIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherTidIs(int thread_id)"
  },
  {
    "label": "OtherThreadIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherThreadIs(const TraceEvent::ProcessThreadID& thread)"
  },
  {
    "label": "OtherTimeIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherTimeIs(double timestamp)"
  },
  {
    "label": "OtherPhaseIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherPhaseIs(char phase)"
  },
  {
    "label": "OtherCategoryIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherCategoryIs(const std::string& category)"
  },
  {
    "label": "OtherNameIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherNameIs(const std::string& name)"
  },
  {
    "label": "OtherIdIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherIdIs(const std::string& id)"
  },
  {
    "label": "OtherHasStringArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherHasStringArg(const std::string& arg_name)"
  },
  {
    "label": "OtherHasNumberArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherHasNumberArg(const std::string& arg_name)"
  },
  {
    "label": "OtherArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "OtherArg(const std::string& arg_name)"
  },
  {
    "label": "PrevPid()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevPid()"
  },
  {
    "label": "PrevTid()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevTid()"
  },
  {
    "label": "PrevTime()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevTime()"
  },
  {
    "label": "PrevPhase()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevPhase()"
  },
  {
    "label": "PrevCategory()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevCategory()"
  },
  {
    "label": "PrevName()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevName()"
  },
  {
    "label": "PrevId()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevId()"
  },
  {
    "label": "PrevPidIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevPidIs(int process_id)"
  },
  {
    "label": "PrevTidIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevTidIs(int thread_id)"
  },
  {
    "label": "PrevThreadIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevThreadIs(const TraceEvent::ProcessThreadID& thread)"
  },
  {
    "label": "PrevTimeIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevTimeIs(double timestamp)"
  },
  {
    "label": "PrevPhaseIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevPhaseIs(char phase)"
  },
  {
    "label": "PrevCategoryIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevCategoryIs(const std::string& category)"
  },
  {
    "label": "PrevNameIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevNameIs(const std::string& name)"
  },
  {
    "label": "PrevIdIs()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevIdIs(const std::string& id)"
  },
  {
    "label": "PrevHasStringArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevHasStringArg(const std::string& arg_name)"
  },
  {
    "label": "PrevHasNumberArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevHasNumberArg(const std::string& arg_name)"
  },
  {
    "label": "PrevArg()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "PrevArg(const std::string& arg_name)"
  },
  {
    "label": "MatchBeginWithEnd()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchBeginWithEnd()"
  },
  {
    "label": "MatchComplete()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchComplete()"
  },
  {
    "label": "MatchAsyncBeginWithNext()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchAsyncBeginWithNext()"
  },
  {
    "label": "MatchBeginName()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchBeginName(const std::string& name)"
  },
  {
    "label": "MatchCompleteName()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchCompleteName(const std::string& name)"
  },
  {
    "label": "MatchThread()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchThread(const TraceEvent::ProcessThreadID& thread)"
  },
  {
    "label": "MatchCrossThread()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "MatchCrossThread()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Query)",
    "insertText": "operator(const Query& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "operator()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(const TraceEvent& event)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (enum TraceEventMember { EVENT_INVALID,EVENT_PID,EVENT_TID,EVENT_TIME,EVENT_DURATION,EVENT_COMPLETE_DURATION,EVENT_PHASE,EVENT_CATEGORY,EVENT_NAME,EVENT_ID,EVENT_HAS_STRING_ARG,EVENT_HAS_NUMBER_ARG,EVENT_ARG,EVENT_HAS_OTHER,EVENT_HAS_PREV,OTHER_PID,OTHER_TID,OTHER_TIME,OTHER_PHASE,OTHER_CATEGORY,OTHER_NAME,OTHER_ID,OTHER_HAS_STRING_ARG,OTHER_HAS_NUMBER_ARG,OTHER_ARG,PREV_PID,PREV_TID,PREV_TIME,PREV_PHASE,PREV_CATEGORY,PREV_NAME,PREV_ID,PREV_HAS_STRING_ARG,PREV_HAS_NUMBER_ARG,PREV_ARG,OTHER_FIRST_MEMBER = OTHER_PID,OTHER_LAST_MEMBER = OTHER_ARG,PREV_FIRST_MEMBER = PREV_PID,PREV_LAST_MEMBER = PREV_ARG,} ; enum Operator { OP_INVALID,OP_EQ,OP_NE,OP_LT,OP_LE,OP_GT,OP_GE,OP_AND,OP_OR,OP_NOT,OP_ADD,OP_SUB,OP_MUL,OP_DIV,OP_MOD,OP_NEGATE } ; enum QueryType { QUERY_BOOLEAN_OPERATOR,QUERY_ARITHMETIC_OPERATOR,QUERY_EVENT_MEMBER,QUERY_NUMBER,QUERY_STRING } ;)",
    "insertText": "Query(TraceEventMember member)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Query(TraceEventMember member, const std::string& arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Query(const std::string& str)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Query(double num)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Query(const Query& left, const Query& right, Operator binary_op)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Query(const Query& left, Operator unary_op)"
  },
  {
    "label": "CompareAsDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareAsDouble(const TraceEvent& event, bool* result)"
  },
  {
    "label": "CompareAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareAsString(const TraceEvent& event, bool* result)"
  },
  {
    "label": "GetAsDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAsDouble(const TraceEvent& event, double* num)"
  },
  {
    "label": "GetAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAsString(const TraceEvent& event, std::string* str)"
  },
  {
    "label": "EvaluateArithmeticOperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateArithmeticOperator(const TraceEvent& event, double* num)"
  },
  {
    "label": "GetMemberValueAsDouble()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMemberValueAsDouble(const TraceEvent& event, double* num)"
  },
  {
    "label": "GetMemberValueAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMemberValueAsString(const TraceEvent& event, std::string* num)"
  },
  {
    "label": "is_value()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_value()"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (const Query&)",
    "insertText": "left()"
  },
  {
    "label": "right()",
    "kind": "Method",
    "detail": "Function (const Query&)",
    "insertText": "right()"
  },
  {
    "label": "QueryNode()",
    "kind": "Method",
    "detail": "Function (private : QueryType type_ ; Operator operator_ ; scoped_refptr<QueryNode> left_ ; scoped_refptr<QueryNode> right_ ; TraceEventMember member_ ; double number_ ; std::string string_ ; bool is_pattern_ ; } ; class QueryNode : public base::RefCounted<QueryNode> { public :)",
    "insertText": "QueryNode(const Query& query)"
  },
  {
    "label": "query()",
    "kind": "Method",
    "detail": "Function (const Query&)",
    "insertText": "query()"
  },
  {
    "label": "TraceAnalyzer()",
    "kind": "Method",
    "detail": "Function (Query query_ ; } ; class TraceAnalyzer { public :)",
    "insertText": "TraceAnalyzer(const TraceAnalyzer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TraceAnalyzer&)",
    "insertText": "operator(const TraceAnalyzer&)"
  },
  {
    "label": "TraceAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TraceAnalyzer()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] std::unique_ptr<TraceAnalyzer>)",
    "insertText": "Create(const std::string& json_events)"
  },
  {
    "label": "SetIgnoreMetadataEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreMetadataEvents(bool ignore)"
  },
  {
    "label": "AssociateBeginEndEvents()",
    "kind": "Method",
    "detail": "Function (ignore_metadata_events_ = ignore ; } void)",
    "insertText": "AssociateBeginEndEvents()"
  },
  {
    "label": "AssociateAsyncBeginEndEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateAsyncBeginEndEvents(bool match_pid = true)"
  },
  {
    "label": "AssociateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateEvents(const Query& first, const Query& second, const Query& match)"
  },
  {
    "label": "MergeAssociatedEventArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeAssociatedEventArgs()"
  },
  {
    "label": "FindEvents()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FindEvents(const Query& query, TraceEventVector* output)"
  },
  {
    "label": "FindFirstOf()",
    "kind": "Method",
    "detail": "Function (const TraceEvent*)",
    "insertText": "FindFirstOf(const Query& query)"
  },
  {
    "label": "FindLastOf()",
    "kind": "Method",
    "detail": "Function (const TraceEvent*)",
    "insertText": "FindLastOf(const Query& query)"
  },
  {
    "label": "GetThreadName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "GetThreadName(const TraceEvent::ProcessThreadID& thread)"
  },
  {
    "label": "SetEvents()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "SetEvents(const std::string& json_events)"
  },
  {
    "label": "ParseMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseMetadata()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (std::map<TraceEvent::ProcessThreadID,std::string> thread_names_ ; std::vector<TraceEvent> raw_events_ ; bool ignore_metadata_events_ ; bool allow_association_changes_ ; } ; void)",
    "insertText": "Start(const std::string& category_filter_string)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TraceAnalyzer>)",
    "insertText": "Stop()"
  },
  {
    "label": "RateStatsOptions()",
    "kind": "Method",
    "detail": "Function (struct RateStats { double min_us ; double max_us ; double mean_us ; double standard_deviation_us ; } ; struct RateStatsOptions {)",
    "insertText": "RateStatsOptions() : trim_min(0u), trim_max(0u)"
  },
  {
    "label": "GetRateStats()",
    "kind": "Method",
    "detail": "Function (} size_t trim_min ; size_t trim_max ; } ; bool)",
    "insertText": "GetRateStats(const TraceEventVector& events, RateStats* stats, const RateStatsOptions* options)"
  },
  {
    "label": "FindFirstOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFirstOf(const TraceEventVector& events, const Query& query, size_t position, size_t* return_index)"
  },
  {
    "label": "FindLastOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindLastOf(const TraceEventVector& events, const Query& query, size_t position, size_t* return_index)"
  },
  {
    "label": "FindClosest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindClosest(const TraceEventVector& events, const Query& query, size_t position, size_t* return_closest, size_t* return_second_closest)"
  },
  {
    "label": "CountMatches()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CountMatches(const TraceEventVector& events, const Query& query, size_t begin_position, size_t end_position)"
  },
  {
    "label": "CountMatches()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CountMatches(const TraceEventVector& events, const Query& query)"
  }
]