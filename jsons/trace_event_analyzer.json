[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "QueryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QueryNode"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "TraceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceEvent"
  },
  {
    "label": "ProcessThreadID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessThreadID"
  },
  {
    "label": "Query",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Query"
  },
  {
    "label": "TraceEventMember",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TraceEventMember"
  },
  {
    "label": "Operator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Operator"
  },
  {
    "label": "QueryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QueryType"
  },
  {
    "label": "QueryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QueryNode"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "TraceAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceAnalyzer"
  },
  {
    "label": "RateStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RateStats"
  },
  {
    "label": "RateStatsOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RateStatsOptions"
  },
  {
    "label": "analyzer()",
    "kind": "Method",
    "detail": "Function (TraceAnalyzer)",
    "insertText": "analyzer(json_events)"
  },
  {
    "label": "SetFromJSON()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFromJSON(const base::Value* event_value)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Query(const Query& query)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "String(const std::string& str)"
  },
  {
    "label": "Double()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Double(double num)"
  },
  {
    "label": "Int()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Int(int32_t num)"
  },
  {
    "label": "Uint()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Uint(uint32_t num)"
  },
  {
    "label": "Bool()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Bool(bool boolean)"
  },
  {
    "label": "Phase()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Phase(char phase)"
  },
  {
    "label": "Pattern()",
    "kind": "Method",
    "detail": "Function (Query)",
    "insertText": "Pattern(const std::string& pattern)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_PID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_TID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_TIME)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_DURATION)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_COMPLETE_DURATION)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_PHASE)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_CATEGORY)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_NAME)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_ID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_HAS_STRING_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_HAS_NUMBER_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(EVENT_HAS_OTHER)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_PID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_TID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_TIME)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_PHASE)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_CATEGORY)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_NAME)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_ID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_HAS_STRING_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_HAS_NUMBER_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(OTHER_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_PID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_TID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_TIME)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_PHASE)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_CATEGORY)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_NAME)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_ID)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_HAS_STRING_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_HAS_NUMBER_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Query(PREV_ARG, arg_name)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Query(TraceEventMember member)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Query(const std::string& str)"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Query(double num)"
  },
  {
    "label": "QueryNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "QueryNode(const Query& query)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TraceAnalyzer>)",
    "insertText": "Create(\n      const std::string& json_events)"
  },
  {
    "label": "AssociateBeginEndEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateBeginEndEvents()"
  },
  {
    "label": "AssociateAsyncBeginEndEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateAsyncBeginEndEvents(bool match_pid = true)"
  },
  {
    "label": "AssociateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateEvents(const Query& first,\n                       const Query& second,\n                       const Query& match)"
  },
  {
    "label": "MergeAssociatedEventArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeAssociatedEventArgs()"
  },
  {
    "label": "FindEvents()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FindEvents(const Query& query, TraceEventVector* output)"
  },
  {
    "label": "TraceAnalyzer()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "TraceAnalyzer()"
  },
  {
    "label": "SetEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEvents(const std::string& json_events)"
  },
  {
    "label": "ParseMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseMetadata()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const std::string& category_filter_string)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TraceAnalyzer>)",
    "insertText": "Stop()"
  },
  {
    "label": "GetRateStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRateStats(const TraceEventVector& events,\n                  RateStats* stats,\n                  const RateStatsOptions* options)"
  },
  {
    "label": "FindFirstOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFirstOf(const TraceEventVector& events,\n                 const Query& query,\n                 size_t position,\n                 size_t* return_index)"
  },
  {
    "label": "FindLastOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindLastOf(const TraceEventVector& events,\n                const Query& query,\n                size_t position,\n                size_t* return_index)"
  },
  {
    "label": "FindClosest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindClosest(const TraceEventVector& events,\n                 const Query& query,\n                 size_t position,\n                 size_t* return_closest,\n                 size_t* return_second_closest)"
  },
  {
    "label": "CountMatches()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CountMatches(const TraceEventVector& events,\n                    const Query& query,\n                    size_t begin_position,\n                    size_t end_position)"
  }
]