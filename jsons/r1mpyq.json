[
  {
    "label": "r1mpyq()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<Scalar> void)",
    "insertText": "r1mpyq(DenseIndex m, DenseIndex n, Scalar *a, const std::vector<JacobiRotation<Scalar> > &v_givens, const std::vector<JacobiRotation<Scalar> > &w_givens)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef DenseIndex Index ;)",
    "insertText": "for(Index j = n-2; j>=0; --j) for (Index i = 0; i<m; ++i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (Scalar temp = v_givens [ j ] .)",
    "insertText": "c() * a[i+m*j] - v_givens[j].s() * a[i+m*(n-1)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (a [ i +)",
    "insertText": "m(n-1)] = v_givens[j].s() * a[i+m*j] + v_givens[j].c() * a[i+m*(n-1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (a [ i + m* j ] = temp ; })",
    "insertText": "for(Index j = 0; j<n-1; ++j) for (Index i = 0; i<m; ++i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (Scalar temp = w_givens [ j ] .)",
    "insertText": "c() * a[i+m*j] + w_givens[j].s() * a[i+m*(n-1)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (a [ i +)",
    "insertText": "m(n-1)] = -w_givens[j].s() * a[i+m*j] + w_givens[j].c() * a[i+m*(n-1)"
  }
]