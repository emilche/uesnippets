[
  {
    "label": "ByString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByString"
  },
  {
    "label": "ByChar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByChar"
  },
  {
    "label": "ByAnyChar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByAnyChar"
  },
  {
    "label": "ByLength",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByLength"
  },
  {
    "label": "SelectDelimiter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelectDelimiter"
  },
  {
    "label": "MaxSplitsImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaxSplitsImpl"
  },
  {
    "label": "AllowEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllowEmpty"
  },
  {
    "label": "SkipEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkipEmpty"
  },
  {
    "label": "SkipWhitespace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkipWhitespace"
  },
  {
    "label": "ByString()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_STR_SPLIT_H_ # define ABSL_STRINGS_STR_SPLIT_H_ # include<algorithm> # include<cstddef> # include<map> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / macros . h \" # include \" absl / strings / internal / str_split_internal . h \" # include \" absl / strings / string_view . h \" # include \" absl / strings / strip . h \" namespace absl { ABSL_NAMESPACE_BEGIN class ByString { public :)",
    "insertText": "ByString(absl::string_view sp)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Find(absl::string_view text, size_t pos)"
  },
  {
    "label": "ByChar()",
    "kind": "Method",
    "detail": "Function (private : const std::string delimiter_ ; } ; class ByChar { public :)",
    "insertText": "ByChar(char c) : c_(c)"
  },
  {
    "label": "ByAnyChar()",
    "kind": "Method",
    "detail": "Function (private : char c_ ; } ; class ByAnyChar { public :)",
    "insertText": "ByAnyChar(absl::string_view sp)"
  },
  {
    "label": "ByLength()",
    "kind": "Method",
    "detail": "Function (private : const std::string delimiters_ ; } ; class ByLength { public :)",
    "insertText": "ByLength(ptrdiff_t length)"
  },
  {
    "label": "MaxSplitsImpl()",
    "kind": "Method",
    "detail": "Function (private : const ptrdiff_t length_ ; } ; namespace strings_internal { template<Delimiter> struct SelectDelimiter { using type = Delimiter ; } ; template<> struct SelectDelimiter<char> { using type = ByChar ; } ; template<> struct SelectDelimiter<char*> { using type = ByString ; } ; template<> struct SelectDelimiter<const char*> { using type = ByString ; } ; template<> struct SelectDelimiter<absl::string_view> { using type = ByString ; } ; template<> struct SelectDelimiter<std::string> { using type = ByString ; } ; template<Delimiter> class MaxSplitsImpl { public :)",
    "insertText": "MaxSplitsImpl(Delimiter delimiter, int limit) : delimiter_(delimiter), limit_(limit), count_(0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} return delimiter_ .)",
    "insertText": "Find(text, pos)"
  },
  {
    "label": "MaxSplits()",
    "kind": "Method",
    "detail": "Function (} private : Delimiter delimiter_ ; const int limit_ ; int count_ ; } ; } template<Delimiter> strings_internal::MaxSplitsImpl<strings_internal::SelectDelimiter<Delimiter>::type>)",
    "insertText": "MaxSplits(Delimiter delimiter, int limit)"
  },
  {
    "label": "DelimiterType()",
    "kind": "Method",
    "detail": "Function (typedef strings_internal::SelectDelimiter<Delimiter>::type DelimiterType ; return strings_internal::MaxSplitsImpl<)",
    "insertText": "DelimiterType(DelimiterType(delimiter), limit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct AllowEmpty { bool)",
    "insertText": "operator()(absl::string_view)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct SkipWhitespace { bool)",
    "insertText": "operator()(absl::string_view sp)"
  },
  {
    "label": "StripAsciiWhitespace()",
    "kind": "Method",
    "detail": "Function (sp =)",
    "insertText": "StripAsciiWhitespace(sp)"
  },
  {
    "label": "StrSplit()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> using EnableSplitIfString = std::enable_if<std::is_same<T,std::string>::value | | std::is_same<T,const std::string>::value,int>::type ; template<Delimiter> strings_internal::Splitter<strings_internal::SelectDelimiter<Delimiter>::type,AllowEmpty,absl::string_view>)",
    "insertText": "StrSplit(strings_internal::ConvertibleToStringView text, Delimiter d)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (using DelimiterType = strings_internal::SelectDelimiter<Delimiter>::type ; return strings_internal::Splitter<DelimiterType,AllowEmpty,)",
    "insertText": "string_view(text.value(), DelimiterType(d), AllowEmpty())"
  },
  {
    "label": "StrSplit()",
    "kind": "Method",
    "detail": "Function (} template<Delimiter,StringType,EnableSplitIfString<StringType> = 0> strings_internal::Splitter<strings_internal::SelectDelimiter<Delimiter>::type,AllowEmpty,std::string>)",
    "insertText": "StrSplit(StringType&& text, Delimiter d)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (using DelimiterType = strings_internal::SelectDelimiter<Delimiter>::type ; return strings_internal::Splitter<DelimiterType,AllowEmpty,)",
    "insertText": "string(std::move(text), DelimiterType(d), AllowEmpty())"
  },
  {
    "label": "StrSplit()",
    "kind": "Method",
    "detail": "Function (} template<Delimiter,Predicate> strings_internal::Splitter<strings_internal::SelectDelimiter<Delimiter>::type,Predicate,absl::string_view>)",
    "insertText": "StrSplit(strings_internal::ConvertibleToStringView text, Delimiter d, Predicate p)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (using DelimiterType = strings_internal::SelectDelimiter<Delimiter>::type ; return strings_internal::Splitter<DelimiterType,Predicate,)",
    "insertText": "string_view(text.value(), DelimiterType(d), std::move(p))"
  },
  {
    "label": "StrSplit()",
    "kind": "Method",
    "detail": "Function (} template<Delimiter,Predicate,StringType,EnableSplitIfString<StringType> = 0> strings_internal::Splitter<strings_internal::SelectDelimiter<Delimiter>::type,Predicate,std::string>)",
    "insertText": "StrSplit(StringType&& text, Delimiter d, Predicate p)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (using DelimiterType = strings_internal::SelectDelimiter<Delimiter>::type ; return strings_internal::Splitter<DelimiterType,Predicate,)",
    "insertText": "string(std::move(text), DelimiterType(d), std::move(p))"
  }
]