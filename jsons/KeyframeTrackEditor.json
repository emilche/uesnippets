[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IImpl"
  },
  {
    "label": "TAddKeyImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAddKeyImpl"
  },
  {
    "label": "FMovieSceneChannelValueSetter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelValueSetter"
  },
  {
    "label": "FKeyframeTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKeyframeTrackEditor"
  },
  {
    "label": "IImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" KeyParams . h \" # include \" ISequencer . h \" # include \" MovieSceneTrack . h \" # include \" Framework / Commands / UIAction . h \" # include \" Textures / SlateIcon . h \" # include \" ScopedTransaction . h \" # include \" MovieSceneTrackEditor . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" MovieSceneCommonHelpers . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" Channels / MovieSceneChannel . h \" # include \" Channels / MovieSceneChannelProxy . h \" # include \" Evaluation / MovieSceneEvalTemplate . h \" # include \" Evaluation / MovieSceneEvaluation . h \" # include \" Channels / MovieSceneDoubleChannel . h \" # include \" Channels / MovieSceneFloatChannel . h \" # include \" Channels / MovieSceneIntegerChannel . h \" # include \" Channels / MovieSceneBoolChannel . h \" enum class EKeyFrameTrackEditorSetDefault { DoNotSetDefault,SetDefaultOnAddKeys,SetDefault,} ; struct IImpl { ~)",
    "insertText": "IImpl()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(UMovieSceneSection* Section, FMovieSceneChannelProxy& Proxy, FFrameNumber InTime, EMovieSceneKeyInterpolation InterpolationMode, bool bKeyEvenIfUnchanged, bool bKeyEvenIfEmpty)"
  },
  {
    "label": "ModifyByCurrentAndWeight()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ModifyByCurrentAndWeight(FMovieSceneChannelProxy& Proxy, FFrameNumber InTime, void* VCurrentValue, float Weight)"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (bool bKeyCreated = false ; using namespace UE::MovieScene ; ChannelType* Channel = Proxy . GetChannel<)",
    "insertText": "ChannelType(ChannelIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bShouldKeyChannel = bKeyEvenIfUnchanged ;)",
    "insertText": "if(!bShouldKeyChannel)"
  },
  {
    "label": "ValueExistsAtTime()",
    "kind": "Method",
    "detail": "Function (bShouldKeyChannel = !)",
    "insertText": "ValueExistsAtTime(Channel, InTime, ValueToSet)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bShouldKeyChannel)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (InterpolationMode =)",
    "insertText": "GetInterpolationMode(Channel, InTime, InterpolationMode)"
  },
  {
    "label": "AddKeyToChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyToChannel(Channel, InTime, ValueToSet, InterpolationMode)"
  },
  {
    "label": "ApplyDefault()",
    "kind": "Method",
    "detail": "Function (bKeyCreated = true ; } } } } return bKeyCreated ; } void)",
    "insertText": "ApplyDefault(UMovieSceneSection* Section, FMovieSceneChannelProxy& Proxy, EKeyFrameTrackEditorSetDefault SetDefault)"
  },
  {
    "label": "SetChannelDefault()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ;)",
    "insertText": "SetChannelDefault(Channel, ValueToSet)"
  },
  {
    "label": "FMovieSceneBoolChannel()",
    "kind": "Method",
    "detail": "Function (bool bKeyCreated = false ; using namespace UE::MovieScene ; FMovieSceneBoolChannel* Channel = Proxy . GetChannel<)",
    "insertText": "FMovieSceneBoolChannel(ChannelIndex)"
  },
  {
    "label": "FMovieSceneDoubleChannel()",
    "kind": "Method",
    "detail": "Function (bool bKeyCreated = false ; using namespace UE::MovieScene ; FMovieSceneDoubleChannel* Channel = Proxy . GetChannel<)",
    "insertText": "FMovieSceneDoubleChannel(ChannelIndex)"
  },
  {
    "label": "CurrentValue()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; double)",
    "insertText": "CurrentValue(double*)(VCurrentValue)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (TOptional<double> OptDouble = Channel ->)",
    "insertText": "GetDefault()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (LocalValue = OptDouble .)",
    "insertText": "IsSet() ? OptDouble.GetValue()"
  },
  {
    "label": "ValueToSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueToSet(ValueToSet - CurrentValue)"
  },
  {
    "label": "FMovieSceneFloatChannel()",
    "kind": "Method",
    "detail": "Function (bool bKeyCreated = false ; using namespace UE::MovieScene ; FMovieSceneFloatChannel* Channel = Proxy . GetChannel<)",
    "insertText": "FMovieSceneFloatChannel(ChannelIndex)"
  },
  {
    "label": "CurrentValue()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; float)",
    "insertText": "CurrentValue(float*)(VCurrentValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float LocalValue ; using namespace UE::MovieScene ;)",
    "insertText": "if(!EvaluateChannel(Channel, InTime, LocalValue))"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (LocalValue = OptFloat .)",
    "insertText": "IsSet() ? OptFloat.GetValue()"
  },
  {
    "label": "FMovieSceneIntegerChannel()",
    "kind": "Method",
    "detail": "Function (bool bKeyCreated = false ; using namespace UE::MovieScene ; FMovieSceneIntegerChannel* Channel = Proxy . GetChannel<)",
    "insertText": "FMovieSceneIntegerChannel(ChannelIndex)"
  },
  {
    "label": "CurrentValue()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; int32)",
    "insertText": "CurrentValue(int32*)(VCurrentValue)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (LocalValue = OptInt .)",
    "insertText": "IsSet() ? OptInt.GetValue()"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} ValueToSet =)",
    "insertText": "TruncToInt32((float)((ValueToSet - CurrentValue)) * Weight + LocalValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelValueSetter&)",
    "insertText": "operator(const FMovieSceneChannelValueSetter&)"
  },
  {
    "label": "FMovieSceneChannelValueSetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneChannelValueSetter(FMovieSceneChannelValueSetter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelValueSetter&)",
    "insertText": "operator(FMovieSceneChannelValueSetter&&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (template<ChannelType,ValueType> FMovieSceneChannelValueSetter)",
    "insertText": "Create(int32 ChannelIndex, ValueType InNewValue, bool bAddKey)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelValueSetter NewValue ; NewValue . Impl = TAddKeyImpl<ChannelType,TDecay<ValueType)",
    "insertText": "Type(ChannelIndex, bAddKey, Forward<ValueType>(InNewValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} IImpl*)",
    "insertText": "operator()"
  },
  {
    "label": "FMovieSceneChannelValueSetter()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FMovieSceneChannelValueSetter()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} TInlineValue<IImpl> Impl ; } ; typedef TArray<FMovieSceneChannelValueSetter,TInlineAllocator<1>> FGeneratedTrackKeys ; template<TrackType> class FKeyframeTrackEditor : public FMovieSceneTrackEditor { public : using GenerateKeysCallback = TFunction<)",
    "insertText": "void(UMovieSceneSection*, FGeneratedTrackKeys&)"
  },
  {
    "label": "FKeyframeTrackEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyframeTrackEditor(TSharedRef<ISequencer> InSequencer ) : FMovieSceneTrackEditor( InSequencer)"
  },
  {
    "label": "FKeyframeTrackEditor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FKeyframeTrackEditor()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "BuildTrackContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildTrackContextMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddSubMenu(NSLOCTEXT(\"KeyframeTrackEditor\", \"TrackDefaults\", \"Track Defaults\"), NSLOCTEXT(\"KeyframeTrackEditor\", \"TrackDefaultsTooltip\", \"Track default value operations.\"), FNewMenuDelegate::CreateSP(this, &FKeyframeTrackEditor::AddTrackDefaultsItems, Track))"
  },
  {
    "label": "AddKeysToObjects()",
    "kind": "Method",
    "detail": "Function (} protected : FKeyPropertyResult)",
    "insertText": "AddKeysToObjects(TArrayView<UObject* const> ObjectsToKey, FFrameNumber KeyTime, ESequencerKeyMode KeyMode, TSubclassOf<UMovieSceneTrack> TrackClass, FName PropertyName, TFunction<void(TrackType*)> OnInitializeNewTrack, const GenerateKeysCallback& OnGenerateKeys)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (FKeyPropertyResult KeyPropertyResult ; EAutoChangeMode AutoChangeMode =)",
    "insertText": "GetSequencer()->GetAutoChangeMode()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (EAllowEditsMode AllowEditsMode =)",
    "insertText": "GetSequencer()->GetAllowEditsMode()"
  },
  {
    "label": "bCreateHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bCreateHandle(KeyMode == ESequencerKeyMode::AutoKey && (AutoChangeMode == EAutoChangeMode::AutoTrack || AutoChangeMode == EAutoChangeMode::All))"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (bool bShouldPlaceInChildFolder = KeyMode = = ESequencerKeyMode::AutoKey ; const FName CreatedFolderName = bShouldPlaceInChildFolder ?)",
    "insertText": "FName(TEXT(\"Autotracked Changes\"))"
  },
  {
    "label": "FindOrCreateHandleToObject()",
    "kind": "Method",
    "detail": "Function (FFindOrCreateHandleResult HandleResult =)",
    "insertText": "FindOrCreateHandleToObject(Object, bCreateHandle, CreatedFolderName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FGuid ObjectHandle = HandleResult . Handle ; KeyPropertyResult . bHandleCreated = HandleResult . bWasCreated ;)",
    "insertText": "if(ObjectHandle.IsValid())"
  },
  {
    "label": "AddKeysToHandle()",
    "kind": "Method",
    "detail": "Function (KeyPropertyResult | =)",
    "insertText": "AddKeysToHandle(Object, ObjectHandle, KeyTime, KeyMode, TrackClass, PropertyName, OnInitializeNewTrack, OnGenerateKeys)"
  },
  {
    "label": "ClearDefaults()",
    "kind": "Method",
    "detail": "Function (} } return KeyPropertyResult ; } private : void)",
    "insertText": "ClearDefaults(UMovieSceneTrack* Track)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (const FScopedTransaction)",
    "insertText": "Transaction(NSLOCTEXT(\"KeyframeTrackEditor\", \"ClearTrackDefaultsTransaction\", \"Clear track defaults\"))"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Section ->)",
    "insertText": "Modify()"
  },
  {
    "label": "ClearDefault()",
    "kind": "Method",
    "detail": "Function (Channel ->)",
    "insertText": "ClearDefault()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "GetSequencer()->NotifyMovieSceneDataChanged(EMovieSceneDataChangeType::TrackValueChanged)"
  },
  {
    "label": "AddTrackDefaultsItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTrackDefaultsItems(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(NSLOCTEXT( \"KeyframeTrackEditor\", \"ClearDefaults\", \"Clear Defaults\" ), NSLOCTEXT( \"KeyframeTrackEditor\", \"ClearDefaultsToolTip\", \"Clear the current default values for this track.\" ), FSlateIcon(), FUIAction( FExecuteAction::CreateSP( this, &FKeyframeTrackEditor::ClearDefaults, Track ) ), NAME_None, EUserInterfaceActionType::Button)"
  },
  {
    "label": "AddKeysToHandle()",
    "kind": "Method",
    "detail": "Function (} FKeyPropertyResult)",
    "insertText": "AddKeysToHandle(UObject *Object, FGuid ObjectHandle, FFrameNumber KeyTime, ESequencerKeyMode KeyMode, TSubclassOf<UMovieSceneTrack> TrackClass, FName PropertyName, TFunction<void(TrackType*)> OnInitializeNewTrack, const GenerateKeysCallback& OnGenerateKeys)"
  },
  {
    "label": "bCreateTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bCreateTrack(KeyMode == ESequencerKeyMode::AutoKey && (AutoChangeMode == EAutoChangeMode::AutoTrack || AutoChangeMode == EAutoChangeMode::All))"
  },
  {
    "label": "bCreateTrack()",
    "kind": "Method",
    "detail": "Function (bool bCreateSection =)",
    "insertText": "bCreateTrack(KeyMode == ESequencerKeyMode::AutoKey && (AutoChangeMode != EAutoChangeMode::None))"
  },
  {
    "label": "FindOrCreateTrackForObject()",
    "kind": "Method",
    "detail": "Function (FFindOrCreateTrackResult TrackResult =)",
    "insertText": "FindOrCreateTrackForObject(ObjectHandle, TrackClass, PropertyName, bCreateTrack)"
  },
  {
    "label": "TrackType()",
    "kind": "Method",
    "detail": "Function (TrackType* Track = CastChecked<)",
    "insertText": "TrackType(TrackResult.Track, ECastCheckedType::NullAllowed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bTrackCreated = TrackResult . bWasCreated ;)",
    "insertText": "if(bTrackCreated)"
  },
  {
    "label": "OnInitializeNewTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitializeNewTrack(Track)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } bool bSectionCreated = false ; FKeyPropertyResult KeyPropertyResult ;)",
    "insertText": "if(Track)"
  },
  {
    "label": "FindOrExtendSection()",
    "kind": "Method",
    "detail": "Function (float Weight = 1 . 0 f ; UMovieSceneSection* SectionToKey = bCreateSection ? Track ->)",
    "insertText": "FindOrExtendSection(KeyTime, Weight) : Track->FindSection(KeyTime)"
  },
  {
    "label": "FindOrAddSection()",
    "kind": "Method",
    "detail": "Function (SectionToKey = Track ->)",
    "insertText": "FindOrAddSection(KeyTime, bSectionCreated)"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (SectionToKey ->)",
    "insertText": "SetRange(TRange<FFrameNumber>::All())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyPropertyResult . SectionsCreated .)",
    "insertText": "Add(SectionToKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SectionToKey && CanAutoKeySection(SectionToKey, KeyTime) && OnGenerateKeys)"
  },
  {
    "label": "OnGenerateKeys()",
    "kind": "Method",
    "detail": "Function (FGeneratedTrackKeys GeneratedKeys ;)",
    "insertText": "OnGenerateKeys(SectionToKey, GeneratedKeys)"
  },
  {
    "label": "ModifyGeneratedKeysByCurrentAndWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyGeneratedKeysByCurrentAndWeight(Object, Track, SectionToKey, KeyTime, GeneratedKeys, Weight)"
  },
  {
    "label": "AddKeysToSection()",
    "kind": "Method",
    "detail": "Function (} KeyPropertyResult | =)",
    "insertText": "AddKeysToSection(SectionToKey, KeyTime, GeneratedKeys, KeyMode)"
  },
  {
    "label": "AddKeysToSection()",
    "kind": "Method",
    "detail": "Function (} } KeyPropertyResult . bTrackCreated | = bTrackCreated | | bSectionCreated ; return KeyPropertyResult ; } protected : FKeyPropertyResult)",
    "insertText": "AddKeysToSection(UMovieSceneSection* Section, FFrameNumber KeyTime, const FGeneratedTrackKeys& Keys, ESequencerKeyMode KeyMode, EKeyFrameTrackEditorSetDefault SetDefault = EKeyFrameTrackEditorSetDefault::SetDefault)"
  },
  {
    "label": "GetChannelProxy()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy& Proxy = Section ->)",
    "insertText": "GetChannelProxy()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (const bool bSetDefaults =)",
    "insertText": "GetSequencer()->GetAutoSetTrackDefaults() && (SetDefault != EKeyFrameTrackEditorSetDefault::DoNotSetDefault)"
  },
  {
    "label": "ApplyDefault()",
    "kind": "Method",
    "detail": "Function (GeneratedKey ->)",
    "insertText": "ApplyDefault(Section, Proxy, SetDefault)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(KeyMode != ESequencerKeyMode::AutoKey || AutoChangeMode == EAutoChangeMode::AutoKey || AutoChangeMode == EAutoChangeMode::All)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation InterpolationMode =)",
    "insertText": "GetSequencer()->GetKeyInterpolation()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (const bool bKeyEvenIfUnchanged = KeyMode = = ESequencerKeyMode::ManualKeyForced | |)",
    "insertText": "GetSequencer()->GetKeyGroupMode() == EKeyGroupMode::KeyAll || GetSequencer()->GetKeyGroupMode()"
  },
  {
    "label": "bKeyEvenIfEmpty()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bKeyEvenIfEmpty(KeyMode == ESequencerKeyMode::AutoKey && AutoChangeMode == EAutoChangeMode::All)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (KeyPropertyResult . bKeyCreated | = GeneratedKey ->)",
    "insertText": "Apply(Section, Proxy, KeyTime, InterpolationMode, bKeyEvenIfUnchanged, bKeyEvenIfEmpty)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyPropertyResult . SectionsKeyed .)",
    "insertText": "Add(Section)"
  },
  {
    "label": "ModifyGeneratedKeysByCurrentAndWeight()",
    "kind": "Method",
    "detail": "Function (} } } return KeyPropertyResult ; } bool)",
    "insertText": "ModifyGeneratedKeysByCurrentAndWeight(UObject *Object, UMovieSceneTrack *Track, UMovieSceneSection* SectionToKey, FFrameNumber Time, FGeneratedTrackKeys& GeneratedTotalKeys, float Weight)"
  }
]