[
  {
    "label": "MatrixPower",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixPower"
  },
  {
    "label": "MatrixPowerParenthesesReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixPowerParenthesesReturnValue"
  },
  {
    "label": "MatrixPowerAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixPowerAtomic"
  },
  {
    "label": "MatrixPowerReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixPowerReturnValue"
  },
  {
    "label": "MatrixComplexPowerReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixComplexPowerReturnValue"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "MatrixPowerParenthesesReturnValue()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIX_POWER # define EIGEN_MATRIX_POWER namespace Eigen { template<MatrixType> class MatrixPower ; template<MatrixType> class MatrixPowerParenthesesReturnValue : public ReturnByValue<MatrixPowerParenthesesReturnValue<MatrixType>> { public : typedef MatrixType::RealScalar RealScalar ;)",
    "insertText": "MatrixPowerParenthesesReturnValue(MatrixPower<MatrixType>& pow, RealScalar p) : m_pow(pow), m_p(p)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_pow .)",
    "insertText": "compute(result, m_p)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "computePade()",
    "kind": "Method",
    "detail": "Function (} private : MatrixPower<MatrixType>& m_pow ; const RealScalar m_p ; } ; template<MatrixType> class MatrixPowerAtomic : internal::noncopyable { private : enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef std::complex<RealScalar> ComplexScalar ; typedef Block<MatrixType,Dynamic,Dynamic> ResultType ; const MatrixType& m_A ; RealScalar m_p ; void)",
    "insertText": "computePade(int degree, const MatrixType& IminusT, ResultType& res)"
  },
  {
    "label": "compute2x2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute2x2(ResultType& res, RealScalar p)"
  },
  {
    "label": "computeBig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeBig(ResultType& res)"
  },
  {
    "label": "getPadeDegree()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getPadeDegree(float normIminusT)"
  },
  {
    "label": "getPadeDegree()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getPadeDegree(double normIminusT)"
  },
  {
    "label": "getPadeDegree()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getPadeDegree(long double normIminusT)"
  },
  {
    "label": "computeSuperDiag()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "computeSuperDiag(const ComplexScalar&, const ComplexScalar&, RealScalar p)"
  },
  {
    "label": "computeSuperDiag()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "computeSuperDiag(RealScalar, RealScalar, RealScalar p)"
  },
  {
    "label": "MatrixPowerAtomic()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MatrixPowerAtomic(const MatrixType& T, RealScalar p)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(ResultType& res)"
  },
  {
    "label": "MatrixPowerAtomic()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> MatrixPowerAtomic<MatrixType)",
    "insertText": "MatrixPowerAtomic(const MatrixType& T, RealScalar p) : m_A(T), m_p(p)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(T.rows() == T.cols())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(p > -1 && p < 1)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (using std::pow ;)",
    "insertText": "switch(m_A.rows())"
  },
  {
    "label": "compute2x2()",
    "kind": "Method",
    "detail": "Function (break ; case 2 :)",
    "insertText": "compute2x2(res, m_p)"
  },
  {
    "label": "computeBig()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "computeBig(res)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (int i = 2* degree ;)",
    "insertText": "res(m_p-RealScalar(degree)) / RealScalar(2*i-2)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(MatrixType::Identity(IminusT.rows(), IminusT.cols()) + res).template triangularView<Upper>() .solve((i==1 ? -m_p : i&1 ? (-m_p-RealScalar(i/2))/RealScalar(2*i) : (m_p-RealScalar(i/2))/RealScalar(2*i-2)) * IminusT).eval()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (} res + =)",
    "insertText": "Identity(IminusT.rows(), IminusT.cols())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (using std::abs ; using std::pow ; res .)",
    "insertText": "coeffRef(0,0) = pow(m_A.coeff(0,0), p)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "coeffRef(i,i) = pow(m_A.coeff(i,i), p)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "coeffRef(i-1,i) *= m_A.coeff(i-1,i)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (using std::ldexp ; const int digits = std::numeric_limits<RealScalar>::digits ; const RealScalar maxNormForPade =)",
    "insertText": "RealScalar(digits <= 24? 4.3386528e-1L : digits <= 53? 2.789358995219730e-1L : digits <= 64? 2.4471944416607995472e-1L : digits <= 106? 1.1016843812851143391275867258512e-1L : 9.134603732914548552537150753385375e-2L)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (MatrixType IminusT,sqrtT,T = m_A . template triangularView<)",
    "insertText": "Upper()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar normIminusT ; int degree,degree2,numberOfSquareRoots = 0 ; bool hasExtraSquareRoot = false ;)",
    "insertText": "for(Index i=0; i < m_A.cols(); ++i) eigen_assert(m_A(i,i) != RealScalar(0))"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (IminusT =)",
    "insertText": "Identity(m_A.rows(), m_A.cols())"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (normIminusT = IminusT .)",
    "insertText": "cwiseAbs().colwise().sum().maxCoeff()"
  },
  {
    "label": "getPadeDegree()",
    "kind": "Method",
    "detail": "Function (degree =)",
    "insertText": "getPadeDegree(normIminusT)"
  },
  {
    "label": "getPadeDegree()",
    "kind": "Method",
    "detail": "Function (degree2 =)",
    "insertText": "getPadeDegree(normIminusT/2)"
  },
  {
    "label": "matrix_sqrt_triangular()",
    "kind": "Method",
    "detail": "Function (hasExtraSquareRoot = true ; })",
    "insertText": "matrix_sqrt_triangular(T, sqrtT)"
  },
  {
    "label": "computePade()",
    "kind": "Method",
    "detail": "Function (+ + numberOfSquareRoots ; })",
    "insertText": "computePade(degree, IminusT, res)"
  },
  {
    "label": "compute2x2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute2x2(res, ldexp(m_p, -numberOfSquareRoots))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const float maxNormForPade [ ] = { 2 . 8 0 6 4 0 0 4 e - 1 f,4 . 3 3 8 6 5 2 8 e - 1 f } ; int degree = 3 ;)",
    "insertText": "for(; degree <= 4; ++degree) if (normIminusT <= maxNormForPade[degree - 3])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const double maxNormForPade [ ] = { 1 . 8 8 4 1 6 0 5 9 2 6 5 8 2 1 8 e - 2,6 . 0 3 8 8 8 1 9 0 4 0 5 9 5 7 3 e - 2,1 . 2 3 9 9 1 7 5 1 6 3 0 8 1 7 2 e - 1,1 . 9 9 9 0 4 5 5 6 7 1 8 1 7 4 4 e - 1,2 . 7 8 9 3 5 8 9 9 5 2 1 9 7 3 0 e - 1 } ; int degree = 3 ;)",
    "insertText": "for(; degree <= 7; ++degree) if (normIminusT <= maxNormForPade[degree - 3])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if LDBL_MANT_DIG = = 5 3 const int maxPadeDegree = 7 ; const double maxNormForPade [ ] = { 1 . 8 8 4 1 6 0 5 9 2 6 5 8 2 1 8 e - 2 L,6 . 0 3 8 8 8 1 9 0 4 0 5 9 5 7 3 e - 2 L,1 . 2 3 9 9 1 7 5 1 6 3 0 8 1 7 2 e - 1 L,1 . 9 9 9 0 4 5 5 6 7 1 8 1 7 4 4 e - 1 L,2 . 7 8 9 3 5 8 9 9 5 2 1 9 7 3 0 e - 1 L } ; # elif LDBL_MANT_DIG<= 6 4 const int maxPadeDegree = 8 ; const long double maxNormForPade [ ] = { 6 . 3 8 5 4 6 9 3 1 1 7 4 9 1 7 9 9 4 6 0 e - 3 L,2 . 6 3 9 4 8 9 3 4 3 5 4 5 6 9 7 3 6 7 6 e - 2 L,6 . 4 2 1 6 0 4 3 0 3 0 4 0 4 0 6 3 7 2 9 e - 2 L,1 . 1 7 0 1 1 6 5 5 0 2 9 2 6 6 9 4 3 0 7 e - 1 L,1 . 7 9 0 4 2 8 4 2 3 1 2 6 8 6 7 0 2 8 4 e - 1 L,2 . 4 4 7 1 9 4 4 4 1 6 6 0 7 9 9 5 4 7 2 e - 1 L } ; # elif LDBL_MANT_DIG<= 1 0 6 const int maxPadeDegree = 1 0 ; const double maxNormForPade [ ] = { 1 . 0 0 0 7 1 6 1 6 0 1 7 8 7 4 9 3 2 3 6 7 4 1 4 0 9 6 8 7 1 8 6 e - 4 L,1 . 0 0 0 7 1 6 1 6 0 1 7 8 7 4 9 3 2 3 6 7 4 1 4 0 9 6 8 7 1 8 6 e - 3 L,4 . 7 0 6 9 7 6 9 3 6 0 8 8 7 5 7 2 9 3 9 8 8 2 5 7 4 7 4 6 2 6 4 e - 3 L,1 . 3 2 2 0 3 8 6 6 2 4 1 6 9 1 5 9 6 8 9 4 0 6 6 5 3 1 0 1 6 9 5 e - 2 L,2 . 8 0 6 3 4 8 2 3 8 1 6 3 1 7 3 7 9 2 0 6 1 2 9 4 4 0 5 4 9 0 6 e - 2 L,4 . 9 6 2 5 9 9 3 9 5 1 9 5 3 4 7 3 0 5 2 3 8 5 3 6 1 0 8 5 0 5 8 e - 2 L,7 . 7 3 6 7 0 4 0 7 0 6 0 2 7 8 8 6 2 2 4 5 5 7 5 3 8 3 2 8 1 7 1 e - 2 L,1 . 1 0 1 6 8 4 3 8 1 2 8 5 1 1 4 3 3 9 1 2 7 5 8 6 7 2 5 8 5 1 2 e - 1 L } ; # else const int maxPadeDegree = 1 0 ; const double maxNormForPade [ ] = { 5 . 5 2 4 5 0 6 1 4 7 0 3 6 6 2 4 3 7 7 3 7 8 7 1 3 5 5 5 1 1 6 3 7 8 e - 5 L,6 . 6 4 0 6 0 0 5 6 8 1 5 7 4 7 9 6 7 9 8 2 3 6 0 2 1 9 3 3 4 5 9 9 5 e - 4 L,3 . 2 2 7 7 1 6 5 2 0 1 0 6 8 9 4 2 7 9 2 4 9 7 0 9 7 2 8 0 8 4 6 2 6 e - 3 L,9 . 6 1 9 5 9 3 9 4 4 6 8 3 4 3 2 9 6 0 5 4 6 9 7 8 7 3 4 6 4 6 2 8 4 e - 3 L,2 . 1 3 4 5 9 5 3 8 2 4 3 3 7 4 2 4 0 3 9 1 1 1 2 4 4 5 8 1 6 1 1 4 7 e - 2 L,3 . 9 0 8 1 6 6 5 1 3 9 0 0 4 8 9 4 2 8 4 4 2 9 9 3 7 9 4 7 6 1 1 8 5 e - 2 L,6 . 2 6 6 7 8 0 8 1 4 6 3 9 4 4 2 8 6 5 8 3 2 5 3 5 4 6 0 5 5 0 1 3 8 e - 2 L,9 . 1 3 4 6 0 3 7 3 2 9 1 4 5 4 8 5 5 2 5 3 7 1 5 0 7 5 3 3 8 5 3 7 5 e - 2 L } ; # endif int degree = 3 ;)",
    "insertText": "for(; degree <= maxPadeDegree; ++degree) if (normIminusT <= maxNormForPade[degree - 3])"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (using std::ceil ; using std::exp ; using std::log ; using std::sinh ; ComplexScalar logCurr =)",
    "insertText": "log(curr)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (ComplexScalar logPrev =)",
    "insertText": "log(prev)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (RealScalar unwindingNumber =)",
    "insertText": "ceil((numext::imag(logCurr - logPrev) - RealScalar(EIGEN_PI)) / RealScalar(2*EIGEN_PI))"
  },
  {
    "label": "log1p()",
    "kind": "Method",
    "detail": "Function (ComplexScalar w =)",
    "insertText": "log1p((curr-prev)/prev)/RealScalar(2) + ComplexScalar(0, RealScalar(EIGEN_PI)*unwindingNumber)"
  },
  {
    "label": "computeSuperDiag()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> MatrixPowerAtomic<MatrixType>::RealScalar MatrixPowerAtomic<MatrixType)",
    "insertText": "computeSuperDiag(RealScalar curr, RealScalar prev, RealScalar p)"
  },
  {
    "label": "log1p()",
    "kind": "Method",
    "detail": "Function (using std::exp ; using std::log ; using std::sinh ; RealScalar w =)",
    "insertText": "log1p((curr-prev)/prev)/RealScalar(2)"
  },
  {
    "label": "MatrixPower()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> class MatrixPower : internal::noncopyable { private : typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; public :)",
    "insertText": "MatrixPower(const MatrixType& A) : m_A(A), m_conditionNumber(0), m_rank(A.cols()), m_nulls(0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(A.rows() == A.cols())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const MatrixPowerParenthesesReturnValue<MatrixType>)",
    "insertText": "operator()(RealScalar p)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "compute(ResultType& res, RealScalar p)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (} private : typedef std::complex<RealScalar> ComplexScalar ; typedef Matrix<ComplexScalar,Dynamic,Dynamic,0,MatrixType::RowsAtCompileTime,MatrixType::ColsAtCompileTime> ComplexMatrix ; MatrixType::Nested m_A ; MatrixType m_tmp ; ComplexMatrix m_T,m_U ; ComplexMatrix m_fT ; RealScalar m_conditionNumber ; Index m_rank ; Index m_nulls ; void)",
    "insertText": "split(RealScalar& p, RealScalar& intpart)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize()"
  },
  {
    "label": "computeIntPower()",
    "kind": "Method",
    "detail": "Function (template<ResultType> void)",
    "insertText": "computeIntPower(ResultType& res, RealScalar p)"
  },
  {
    "label": "computeFracPower()",
    "kind": "Method",
    "detail": "Function (template<ResultType> void)",
    "insertText": "computeFracPower(ResultType& res, RealScalar p)"
  },
  {
    "label": "revertSchur()",
    "kind": "Method",
    "detail": "Function (template<int Rows,int Cols,int Options,int MaxRows,int MaxCols> void)",
    "insertText": "revertSchur(Matrix<ComplexScalar, Rows, Cols, Options, MaxRows, MaxCols>& res, const ComplexMatrix& T, const ComplexMatrix& U)"
  },
  {
    "label": "revertSchur()",
    "kind": "Method",
    "detail": "Function (template<int Rows,int Cols,int Options,int MaxRows,int MaxCols> void)",
    "insertText": "revertSchur(Matrix<RealScalar, Rows, Cols, Options, MaxRows, MaxCols>& res, const ComplexMatrix& T, const ComplexMatrix& U)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (using std::pow ;)",
    "insertText": "switch(cols())"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (break ; default : RealScalar intpart ;)",
    "insertText": "split(p, intpart)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "Identity(rows(), cols())"
  },
  {
    "label": "computeIntPower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeIntPower(res, intpart)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (using std::floor ; using std::pow ; intpart =)",
    "insertText": "floor(p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p - = intpart ;)",
    "insertText": "if(!m_conditionNumber && p) initialize()"
  },
  {
    "label": "schurOfA()",
    "kind": "Method",
    "detail": "Function (const ComplexSchur<MatrixType>)",
    "insertText": "schurOfA(m_A)"
  },
  {
    "label": "resizeLike()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<ComplexScalar> rot ; ComplexScalar eigenvalue ; m_fT .)",
    "insertText": "resizeLike(m_A)"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (m_T = schurOfA .)",
    "insertText": "matrixT()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (m_U = schurOfA .)",
    "insertText": "matrixU()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (m_conditionNumber = m_T .)",
    "insertText": "diagonal().array().abs().maxCoeff() / m_T.diagonal().array().abs().minCoeff()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (eigenvalue = m_T .)",
    "insertText": "coeff(j,j)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (rot .)",
    "insertText": "makeGivens(m_T.coeff(j-1,j), eigenvalue)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "applyOnTheRight(j-1, j, rot)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "applyOnTheLeft(j-1, j, rot.adjoint())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "coeffRef(j-1,j-1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "coeffRef(j,j) = RealScalar(0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_T.bottomRightCorner(m_nulls, m_nulls).isZero() && \"Base of matrix power should be invertible or with a semisimple zero eigenvalue.\")"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (m_fT .)",
    "insertText": "bottomRows(m_nulls).fill(RealScalar(0))"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (using std::abs ; using std::fmod ; RealScalar pp =)",
    "insertText": "abs(p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pp / = 2 ;)",
    "insertText": "if(pp < 1)"
  },
  {
    "label": "blockTp()",
    "kind": "Method",
    "detail": "Function (Block<ComplexMatrix,Dynamic,Dynamic>)",
    "insertText": "blockTp(m_fT, 0, 0, m_rank, m_rank)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_conditionNumber)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_rank + m_nulls == rows())"
  },
  {
    "label": "ComplexMatrix()",
    "kind": "Method",
    "detail": "Function (MatrixPowerAtomic<)",
    "insertText": "ComplexMatrix(m_T.topLeftCorner(m_rank, m_rank), p).compute(blockTp)"
  },
  {
    "label": "topRightCorner()",
    "kind": "Method",
    "detail": "Function (m_fT .)",
    "insertText": "topRightCorner(m_rank, m_nulls) = m_T.topLeftCorner(m_rank, m_rank).template triangularView<Upper>() .solve(blockTp * m_T.topRightCorner(m_rank, m_nulls))"
  },
  {
    "label": "revertSchur()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "revertSchur(m_tmp, m_fT, m_U)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "noalias() = U * (T.template triangularView<Upper>() * U.adjoint())"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "noalias() = (U * (T.template triangularView<Upper>() * U.adjoint())).real()"
  },
  {
    "label": "MatrixPowerReturnValue()",
    "kind": "Method",
    "detail": "Function (} template<Derived> class MatrixPowerReturnValue : public ReturnByValue<MatrixPowerReturnValue<Derived>> { public : typedef Derived::PlainObject PlainObject ; typedef Derived::RealScalar RealScalar ;)",
    "insertText": "MatrixPowerReturnValue(const Derived& A, RealScalar p) : m_A(A), m_p(p)"
  },
  {
    "label": "PlainObject()",
    "kind": "Method",
    "detail": "Function (MatrixPower<)",
    "insertText": "PlainObject(m_A.eval()).compute(result, m_p)"
  },
  {
    "label": "MatrixComplexPowerReturnValue()",
    "kind": "Method",
    "detail": "Function (} private : const Derived& m_A ; const RealScalar m_p ; } ; template<Derived> class MatrixComplexPowerReturnValue : public ReturnByValue<MatrixComplexPowerReturnValue<Derived>> { public : typedef Derived::PlainObject PlainObject ; typedef std::complex<Derived::RealScalar> ComplexScalar ;)",
    "insertText": "MatrixComplexPowerReturnValue(const Derived& A, const ComplexScalar& p) : m_A(A), m_p(p)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(m_p * m_A.log()).exp()"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (} private : const Derived& m_A ; const ComplexScalar m_p ; } ; namespace internal { template<MatrixPowerType> struct traits<MatrixPowerParenthesesReturnValue<MatrixPowerType>> { typedef MatrixPowerType::PlainObject ReturnType ; } ; template<Derived> struct traits<MatrixPowerReturnValue<Derived>> { typedef Derived::PlainObject ReturnType ; } ; template<Derived> struct traits<MatrixComplexPowerReturnValue<Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<Derived> const MatrixPowerReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "pow(const RealScalar& p)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const MatrixComplexPowerReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "pow(const std::complex<RealScalar>& p)"
  }
]