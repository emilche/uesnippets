[
  {
    "label": "ObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "TSPtrG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSPtrG"
  },
  {
    "label": "TSPtrArrayG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSPtrArrayG"
  },
  {
    "label": "KeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyType"
  },
  {
    "label": "TSPtrSetG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSPtrSetG"
  },
  {
    "label": "ULANGCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULANGCORE_API"
  },
  {
    "label": "OtherObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherObjectType"
  },
  {
    "label": "OtherAllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherAllocatorType"
  },
  {
    "label": "OtherKeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherKeyType"
  },
  {
    "label": "CSharedMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSharedMix"
  },
  {
    "label": "CSharedMix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Memory / Allocator . h \" # include \" uLang / Common / Templates / Conditionals . h \" # include \" uLang / Common / Templates / References . h \" namespace uLang { template<class ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TSPtrG ; template<class ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TSPtrArrayG ; template<class ObjectType,bool AllowNull,class KeyType,class AllocatorType,. . . AllocatorArgsType> class TSPtrSetG ; class CSharedMix { public :)",
    "insertText": "CSharedMix() : _RefCount(0)"
  },
  {
    "label": "CSharedMix()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CSharedMix()"
  },
  {
    "label": "CSharedMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSharedMix(const CSharedMix & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CSharedMix&)",
    "insertText": "operator(const CSharedMix & Other)"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "SharedThis()",
    "kind": "Method",
    "detail": "Function (} template<class ObjectType> TSPtrG<const ObjectType,false,CHeapRawAllocator>)",
    "insertText": "SharedThis(const ObjectType* This)"
  },
  {
    "label": "Reference()",
    "kind": "Method",
    "detail": "Function (} private : template<class ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TSPtrG ; template<class ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TSPtrArrayG ; template<class ObjectType,bool AllowNull,class KeyType,class AllocatorType,. . . AllocatorArgsType> class TSPtrSetG ; void)",
    "insertText": "Reference()"
  },
  {
    "label": "Dereference()",
    "kind": "Method",
    "detail": "Function (+ + _RefCount ; } bool)",
    "insertText": "Dereference()"
  },
  {
    "label": "TSPtrG()",
    "kind": "Method",
    "detail": "Function (uint32_t _RefCount ; } ; template<class ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TSPtrG { public : ULANG_FORCEINLINE)",
    "insertText": "TSPtrG(NullPtrType NullPtr = nullptr) : _Object(nullptr), _Allocator(DefaultInit), _ReleaseFunc(nullptr)"
  },
  {
    "label": "TSPtrG()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TSPtrG(const TSPtrG & Other) : _Object(Other._Object), _Allocator(Other._Allocator)"
  },
  {
    "label": "EnableRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRelease()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} } template<class OtherObjectType,bool OtherAllowNull,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType)",
    "insertText": "Value(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrG(const TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & Other) : _Object(Other._Object), _Allocator(Other._Allocator)"
  },
  {
    "label": "TSPtrG()",
    "kind": "Method",
    "detail": "Function (} } ULANG_FORCEINLINE)",
    "insertText": "TSPtrG(TSPtrG && Other) : _Object(Other._Object), _Allocator(Other._Allocator)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Other . _Object = nullptr ; } template<class OtherObjectType,bool OtherAllowNull,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType)",
    "insertText": "Value(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrG(TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> && Other) : _Object(Other._Object), _Allocator(Other._Allocator)"
  },
  {
    "label": "TSPtrG()",
    "kind": "Method",
    "detail": "Function (Other . _Object = nullptr ; } ULANG_FORCEINLINE ~)",
    "insertText": "TSPtrG()"
  },
  {
    "label": "SetNew()",
    "kind": "Method",
    "detail": "Function (} template<. . . CtorArgsType> ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "SetNew(CtorArgsType&&... CtorArgs)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} ObjectType* Object =)",
    "insertText": "new(_Allocator) ObjectType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(Object)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (_Object = Object ; return* this ; } template<. . . CtorArgsType> ULANG_FORCEINLINE TSPtrG)",
    "insertText": "New(AllocatorArgsType&&... AllocatorArgs, CtorArgsType&&... CtorArgs)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (AllocatorType)",
    "insertText": "Allocator(AllocatorArgs...)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ObjectType* Object =)",
    "insertText": "new(Allocator) ObjectType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "operator(NullPtrType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _Object = nullptr ; return* this ; } ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "operator(const TSPtrG & Other)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType)",
    "insertText": "Value(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrG & operator=(const TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "operator(TSPtrG && Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "operator(TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> && Other)"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE operator)",
    "insertText": "ObjectType()"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(_Object)"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(AllowNull || _Object)"
  },
  {
    "label": "AsRef()",
    "kind": "Method",
    "detail": "Function (_Object = nullptr ; } } ULANG_FORCEINLINE TSPtrG<ObjectType,false,AllocatorType,AllocatorArgsType . . .>&)",
    "insertText": "AsRef()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_Object, \"Converting null pointer to reference!\")"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,= TEnableIf<TPointerIsStaticCastableFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE TSPtrG<OtherObjectType,AllowNull,AllocatorType,AllocatorArgsType . . .>&)",
    "insertText": "As()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "Swap(TSPtrG& A, TSPtrG& B)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(A, B)"
  },
  {
    "label": "TSPtrG()",
    "kind": "Method",
    "detail": "Function (} protected : template<class OtherObjectType,bool OtherAllowNull,class OtherAllocatorType,. . . OtherAllocatorArgsType> class TSPtrG ; template<class OtherObjectType,bool OtherAllowNull,class OtherAllocatorType,. . . OtherAllocatorArgsType> class TSPtrArrayG ; template<class OtherObjectType,bool OtherAllowNull,class OtherKeyType,class OtherAllocatorType,. . . OtherAllocatorArgsType> class TSPtrSetG ; class CSharedMix ; ULANG_FORCEINLINE)",
    "insertText": "TSPtrG(ObjectType * Object, const AllocatorType & Allocator) : _Object(Object) , _Allocator(Allocator) , _ReleaseFunc(nullptr)"
  },
  {
    "label": "AssignCopy()",
    "kind": "Method",
    "detail": "Function (} } template<class OtherObjectType,bool OtherAllowNull> ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "AssignCopy(const TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(_Object)"
  },
  {
    "label": "AssignMove()",
    "kind": "Method",
    "detail": "Function (} _Object = Other . _Object ; _Allocator = Other . _Allocator ; } return* this ; } template<class OtherObjectType,bool OtherAllowNull> ULANG_FORCEINLINE TSPtrG&)",
    "insertText": "AssignMove(TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> && Other)"
  },
  {
    "label": "_ReleaseFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_ReleaseFunc(ObjectType * Object, const AllocatorType & Allocator)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Deallocate(Object)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ObjectType* _Object ; AllocatorType _Allocator ; using ReleaseFuncType =)",
    "insertText": "void(*)(ObjectType *, const AllocatorType &)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_RefCount > 0, \"Tried to dereference an object that has no references!\")"
  }
]