[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FQualifiedFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualifiedFrameTime"
  },
  {
    "label": "UTimeManagementBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTimeManagementBlueprintLibrary"
  },
  {
    "label": "Conv_FrameRateToSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_FrameRateToSeconds(const FFrameRate& InFrameRate)"
  },
  {
    "label": "Conv_FrameRateToInterval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_FrameRateToInterval(const FFrameRate InFrameRate)"
  },
  {
    "label": "Conv_QualifiedFrameTimeToSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_QualifiedFrameTimeToSeconds(const FQualifiedFrameTime& InFrameTime)"
  },
  {
    "label": "Multiply_SecondsFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "Multiply_SecondsFrameRate(float TimeInSeconds, const FFrameRate& FrameRate)"
  },
  {
    "label": "Conv_TimecodeToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_TimecodeToString(const FTimecode& InTimecode, bool bForceSignDisplay = false)"
  },
  {
    "label": "IsValid_Framerate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid_Framerate(const FFrameRate& InFrameRate)"
  },
  {
    "label": "IsValid_MultipleOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid_MultipleOf(const FFrameRate& InFrameRate, const FFrameRate& OtherFramerate)"
  },
  {
    "label": "TransformTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "TransformTime(const FFrameTime& SourceTime, const FFrameRate& SourceRate, const FFrameRate& DestinationRate)"
  },
  {
    "label": "SnapFrameTimeToRate()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "SnapFrameTimeToRate(const FFrameTime& SourceTime, const FFrameRate& SourceRate, const FFrameRate& SnapToRate)"
  },
  {
    "label": "Add_FrameNumberFrameNumber()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Add_FrameNumberFrameNumber(FFrameNumber A, FFrameNumber B)"
  },
  {
    "label": "Subtract_FrameNumberFrameNumber()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Subtract_FrameNumberFrameNumber(FFrameNumber A, FFrameNumber B)"
  },
  {
    "label": "Add_FrameNumberInteger()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Add_FrameNumberInteger(FFrameNumber A, int32 B)"
  },
  {
    "label": "Subtract_FrameNumberInteger()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Subtract_FrameNumberInteger(FFrameNumber A, int32 B)"
  },
  {
    "label": "Multiply_FrameNumberInteger()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Multiply_FrameNumberInteger(FFrameNumber A, int32 B)"
  },
  {
    "label": "Divide_FrameNumberInteger()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Divide_FrameNumberInteger(FFrameNumber A, int32 B)"
  },
  {
    "label": "Conv_FrameNumberToInteger()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Conv_FrameNumberToInteger(const FFrameNumber& InFrameNumber)"
  },
  {
    "label": "GetTimecode()",
    "kind": "Method",
    "detail": "Function (FTimecode)",
    "insertText": "GetTimecode()"
  },
  {
    "label": "GetTimecodeFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetTimecodeFrameRate()"
  }
]