[
  {
    "label": "FPropertyPathNameSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyPathNameSegment"
  },
  {
    "label": "FPropertyPathName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPathName"
  },
  {
    "label": "FSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegment"
  },
  {
    "label": "PackNameWithIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / StringFwd . h \" # include \" UObject / NameTypes . h \" # include \" UObject / PropertyTypeName . h \" # define namespace UE { struct FPropertyPathNameSegment { FName Name ; FPropertyTypeName Type ; int32 Index = INDEX_NONE ; [ [ nodiscard ] ] FName)",
    "insertText": "PackNameWithIndex()"
  },
  {
    "label": "SetNameWithIndex()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FPropertyPathNameSegment)",
    "insertText": "SetNameWithIndex(FName NameWithIndex)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FPropertyPathNameSegment)",
    "insertText": "SetType(FPropertyTypeName NewType)"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (struct FSegment { FName NameWithIndex ; FPropertyTypeName Type ; FPropertyPathNameSegment)",
    "insertText": "Unpack()"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (} FSegment)",
    "insertText": "Pack(const FPropertyPathNameSegment& Segment)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSegment& Segment)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Compare(const FSegment& Segment)"
  },
  {
    "label": "GetSegmentCount()",
    "kind": "Method",
    "detail": "Function (} ; public : int32)",
    "insertText": "GetSegmentCount()"
  },
  {
    "label": "GetSegment()",
    "kind": "Method",
    "detail": "Function (} FPropertyPathNameSegment)",
    "insertText": "GetSegment(int32 Index)"
  },
  {
    "label": "SetSegment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSegment(int32 Index, const FPropertyPathNameSegment& Segment)"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (Segments [ Index ] =)",
    "insertText": "Pack(Segment)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(const FPropertyPathNameSegment& Segment)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Emplace(FSegment::Pack(Segment))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Pop()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndex(int32 Index)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (Segments .)",
    "insertText": "Last().NameWithIndex.SetNumber(NAME_EXTERNAL_TO_INTERNAL(Index))"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPropertyPathName& Path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const FPropertyPathName& Path)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Path .)",
    "insertText": "ToString(Builder)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPropertyPathName& Path)"
  }
]