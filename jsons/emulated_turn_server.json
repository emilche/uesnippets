[
  {
    "label": "EmulatedTURNServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedTURNServer"
  },
  {
    "label": "EmulatedTURNServer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_EMULATED_TURN_SERVER_H_ # define TEST_NETWORK_EMULATED_TURN_SERVER_H_ # include<map> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / transport / stun . h \" # include \" p2p / base / turn_server . h \" # include \" rtc_base / async_packet_socket . h \" namespace webrtc { namespace test { class EmulatedTURNServer : public EmulatedTURNServerInterface,public cricket::TurnAuthInterface,public webrtc::EmulatedNetworkReceiverInterface { public :)",
    "insertText": "EmulatedTURNServer(std::unique_ptr<rtc::Thread> thread, EmulatedEndpoint* client, EmulatedEndpoint* peer)"
  },
  {
    "label": "EmulatedTURNServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EmulatedTURNServer()"
  },
  {
    "label": "GetIceServerConfig()",
    "kind": "Method",
    "detail": "Function (IceServerConfig)",
    "insertText": "GetIceServerConfig()"
  },
  {
    "label": "CreatePeerSocket()",
    "kind": "Method",
    "detail": "Function (} rtc::AsyncPacketSocket*)",
    "insertText": "CreatePeerSocket()"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPacketReceived(webrtc::EmulatedIpPacket packet)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unbind(rtc::SocketAddress address)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<rtc::Thread> thread_ ; rtc::SocketAddress client_address_ ; IceServerConfig ice_config_ ; EmulatedEndpoint* const client_ ; EmulatedEndpoint* const peer_ ; std::unique_ptr<cricket::TurnServer> turn_server_)",
    "insertText": "RTC_GUARDED_BY(&thread_)"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (rtc::AsyncPacketSocket*)",
    "insertText": "Wrap(EmulatedEndpoint* endpoint)"
  }
]