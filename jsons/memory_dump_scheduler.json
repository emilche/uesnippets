[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Trigger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Trigger"
  },
  {
    "label": "MemoryDumpSchedulerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDumpSchedulerTest"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_MEMORY_DUMP_SCHEDULER_H_ # define BASE_TRACE_EVENT_MEMORY_DUMP_SCHEDULER_H_ # include<stdint . h> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / trace_event / memory_dump_request_args . h \" namespace base { class SequencedTaskRunner ; namespace trace_event { class BASE_EXPORT MemoryDumpScheduler { public : using PeriodicCallback = RepeatingCallback<)",
    "insertText": "void(MemoryDumpLevelOfDetail)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT Config { struct Trigger { MemoryDumpLevelOfDetail level_of_detail ; uint32_t period_ms ; } ;)",
    "insertText": "Config()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(const Config&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (std::vector<Trigger> triggers ; PeriodicCallback callback ; } ; MemoryDumpScheduler*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "MemoryDumpScheduler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryDumpScheduler(const MemoryDumpScheduler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MemoryDumpScheduler&)",
    "insertText": "operator(const MemoryDumpScheduler&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(Config, scoped_refptr<SequencedTaskRunner> task_runner)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "is_enabled_for_testing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_enabled_for_testing()"
  },
  {
    "label": "MemoryDumpScheduler()",
    "kind": "Method",
    "detail": "Function (} private : class MemoryDumpSchedulerTest ;)",
    "insertText": "MemoryDumpScheduler()"
  },
  {
    "label": "StartInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartInternal(Config)"
  },
  {
    "label": "StopInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopInternal()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(uint32_t expected_generation)"
  }
]