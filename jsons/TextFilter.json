[
  {
    "label": "TTextFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTextFilter"
  },
  {
    "label": "FTextFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionContext"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / RemoveReference . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Templates / SharedPointer . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" # include \" Misc / IFilter . h \" template<ItemType> class TTextFilter : public IFilter<ItemType>,public TSharedFromThis<TTextFilter<ItemType>> { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FItemToStringArray, ItemType, OUT TArray< FString >&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_FiveParams(bool, FItemTestComplexExpression, ItemType, const FName& , const FTextFilterString& , ETextFilterComparisonOperation , ETextFilterTextComparisonMode)"
  },
  {
    "label": "TTextFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TTextFilter(FItemToStringArray InTransformDelegate ) : TextFilterExpressionContext( InTransformDelegate, FItemTestComplexExpression() ) , TextFilterExpressionEvaluator( ETextFilterExpressionEvaluatorMode::BasicString)"
  },
  {
    "label": "TTextFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTextFilter(FItemToStringArray InTransformDelegate, FItemTestComplexExpression InTestComplexExpressionDelegate ) : TextFilterExpressionContext( InTransformDelegate, InTestComplexExpressionDelegate ) , TextFilterExpressionEvaluator( ETextFilterExpressionEvaluatorMode::Complex)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DERIVED_EVENT(TTextFilter, IFilter<ItemType>::FChangedEvent, FChangedEvent)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FChangedEvent&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "TestTextFilter()",
    "kind": "Method",
    "detail": "Function (const bool bResult = TextFilterExpressionEvaluator .)",
    "insertText": "TestTextFilter(TextFilterExpressionContext)"
  },
  {
    "label": "ClearItem()",
    "kind": "Method",
    "detail": "Function (TextFilterExpressionContext .)",
    "insertText": "ClearItem()"
  },
  {
    "label": "SetRawFilterText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRawFilterText(const FText& InFilterText)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "GetFilterErrorText()",
    "kind": "Method",
    "detail": "Function (} } FText)",
    "insertText": "GetFilterErrorText()"
  },
  {
    "label": "FTextFilterExpressionContext()",
    "kind": "Method",
    "detail": "Function (} private : class FTextFilterExpressionContext : public ITextFilterExpressionContext { public : typedef TRemoveReference<ItemType>::Type* ItemTypePtr ;)",
    "insertText": "FTextFilterExpressionContext(const FItemToStringArray& InTransformArrayDelegate, const FItemTestComplexExpression& InTestComplexExpressionDelegate) : TransformArrayDelegate(InTransformArrayDelegate) , TestComplexExpressionDelegate(InTestComplexExpressionDelegate) , ItemPtr(nullptr)"
  },
  {
    "label": "SetItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetItem(ItemTypePtr InItem)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (ItemPtr = InItem ; TransformArrayDelegate .)",
    "insertText": "Execute(*ItemPtr, ItemBasicStrings)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ItemPtr = nullptr ; ItemBasicStrings .)",
    "insertText": "Reset()"
  },
  {
    "label": "TestBasicStringExpression()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestBasicStringExpression(const FTextFilterString& InValue, const ETextFilterTextComparisonMode InTextComparisonMode)"
  }
]