[
  {
    "label": "FEditorViewportLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportLayout"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IEditorViewportLayoutEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorViewportLayoutEntity"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "EDITORFRAMEWORK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORFRAMEWORK_API"
  },
  {
    "label": "FViewportTabContent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" EditorViewportLayout . h \" # include \" Misc / Optional . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FEditorViewportLayout ; class FUICommandList ; class IEditorViewportLayoutEntity ; class SDockTab ; class FViewportTabContent { public : ~)",
    "insertText": "FViewportTabContent()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "BelongsToTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BelongsToTab(TSharedRef<SDockTab> InParentTab)"
  },
  {
    "label": "IsViewportConfigurationSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportConfigurationSet(const FName& ConfigurationName)"
  },
  {
    "label": "SetViewportConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportConfiguration(const FName& ConfigurationName)"
  },
  {
    "label": "BindViewportLayoutCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindViewportLayoutCommands(FUICommandList& InOutCommandList, FName ViewportConfigKey)"
  },
  {
    "label": "GetViewports()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,TSharedPtr<IEditorViewportLayoutEntity>>*)",
    "insertText": "GetViewports()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ViewportActionFunction = TFunction<)",
    "insertText": "void(FName Name, TSharedPtr<IEditorViewportLayoutEntity>)"
  },
  {
    "label": "PerformActionOnViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformActionOnViewports(ViewportActionFunction& TFuncPtr)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FViewportTabContent, FViewportTabContentLayoutChangedEvent)"
  },
  {
    "label": "OnViewportTabContentLayoutChanged()",
    "kind": "Method",
    "detail": "Function (FViewportTabContentLayoutChangedEvent&)",
    "insertText": "OnViewportTabContentLayoutChanged()"
  },
  {
    "label": "OnViewportTabContentLayoutStartChange()",
    "kind": "Method",
    "detail": "Function (FViewportTabContentLayoutStartChangeEvent&)",
    "insertText": "OnViewportTabContentLayoutStartChange()"
  }
]