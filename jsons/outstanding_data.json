[
  {
    "label": "OutstandingData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutstandingData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AckInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AckInfo"
  },
  {
    "label": "Item",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Item"
  },
  {
    "label": "AckInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TX_OUTSTANDING_DATA_H_ # define NET_DCSCTP_TX_OUTSTANDING_DATA_H_ # include<map> # include<set> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" net / dcsctp / common / sequence_numbers . h \" # include \" net / dcsctp / packet / chunk / forward_tsn_chunk . h \" # include \" net / dcsctp / packet / chunk / iforward_tsn_chunk . h \" # include \" net / dcsctp / packet / chunk / sack_chunk . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / public / types . h \" namespace dcsctp { class OutstandingData { public : enum class State { kInFlight,kNacked,kToBeRetransmitted,kAcked,kAbandoned,} ; struct AckInfo {)",
    "insertText": "AckInfo(UnwrappedTSN cumulative_tsn_ack) : highest_tsn_acked(cumulative_tsn_ack)"
  },
  {
    "label": "OutstandingData()",
    "kind": "Method",
    "detail": "Function (} size_t bytes_acked = 0 ; bool has_packet_loss = false ; UnwrappedTSN highest_tsn_acked ; std::vector<LifecycleId> acked_lifecycle_ids ; std::vector<LifecycleId> abandoned_lifecycle_ids ; } ;)",
    "insertText": "OutstandingData(size_t data_chunk_header_size, UnwrappedTSN next_tsn, UnwrappedTSN last_cumulative_tsn_ack, std::function<bool(IsUnordered, StreamID, MID)> discard_from_send_queue) : data_chunk_header_size_(data_chunk_header_size), next_tsn_(next_tsn), last_cumulative_tsn_ack_(last_cumulative_tsn_ack), discard_from_send_queue_(std::move(discard_from_send_queue))"
  },
  {
    "label": "HandleSack()",
    "kind": "Method",
    "detail": "Function (} AckInfo)",
    "insertText": "HandleSack(UnwrappedTSN cumulative_tsn_ack, rtc::ArrayView<const SackChunk::GapAckBlock> gap_ack_blocks, bool is_in_fast_recovery)"
  },
  {
    "label": "GetChunksToBeFastRetransmitted()",
    "kind": "Method",
    "detail": "Function (std::vector<std::pair<TSN,Data>>)",
    "insertText": "GetChunksToBeFastRetransmitted(size_t max_size)"
  },
  {
    "label": "GetChunksToBeRetransmitted()",
    "kind": "Method",
    "detail": "Function (std::vector<std::pair<TSN,Data>>)",
    "insertText": "GetChunksToBeRetransmitted(size_t max_size)"
  },
  {
    "label": "outstanding_bytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "outstanding_bytes()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "has_data_to_be_fast_retransmitted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_data_to_be_fast_retransmitted()"
  },
  {
    "label": "has_data_to_be_retransmitted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_data_to_be_retransmitted()"
  },
  {
    "label": "last_cumulative_tsn_ack()",
    "kind": "Method",
    "detail": "Function (} UnwrappedTSN)",
    "insertText": "last_cumulative_tsn_ack()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (absl::optional<UnwrappedTSN>)",
    "insertText": "Insert(const Data& data, TimeMs time_sent, MaxRetransmits max_retransmissions = MaxRetransmits::NoLimit(), TimeMs expires_at = TimeMs::InfiniteFuture(), LifecycleId lifecycle_id = LifecycleId::NotSet())"
  },
  {
    "label": "NackAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NackAll()"
  },
  {
    "label": "MeasureRTT()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "MeasureRTT(TimeMs now, UnwrappedTSN tsn)"
  },
  {
    "label": "GetChunkStatesForTesting()",
    "kind": "Method",
    "detail": "Function (std::vector<std::pair<TSN,State>>)",
    "insertText": "GetChunkStatesForTesting()"
  },
  {
    "label": "ShouldSendForwardTsn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSendForwardTsn()"
  },
  {
    "label": "ResetSequenceNumbers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSequenceNumbers(UnwrappedTSN next_tsn, UnwrappedTSN last_cumulative_tsn)"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (private : class Item { public : enum class NackAction { kNothing,kRetransmit,kAbandon,} ;)",
    "insertText": "Item(Data data, TimeMs time_sent, MaxRetransmits max_retransmissions, TimeMs expires_at, LifecycleId lifecycle_id) : time_sent_(time_sent), max_retransmissions_(max_retransmissions), expires_at_(expires_at), lifecycle_id_(lifecycle_id), data_(std::move(data))"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Item(const Item&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Item&)",
    "insertText": "operator(const Item&)"
  },
  {
    "label": "time_sent()",
    "kind": "Method",
    "detail": "Function (TimeMs)",
    "insertText": "time_sent()"
  },
  {
    "label": "Nack()",
    "kind": "Method",
    "detail": "Function (NackAction)",
    "insertText": "Nack(bool retransmit_now)"
  },
  {
    "label": "MarkAsRetransmitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsRetransmitted()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "is_outstanding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_outstanding()"
  },
  {
    "label": "lifecycle_id()",
    "kind": "Method",
    "detail": "Function (LifecycleId)",
    "insertText": "lifecycle_id()"
  },
  {
    "label": "RemoveAcked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAcked(UnwrappedTSN cumulative_tsn_ack, AckInfo& ack_info)"
  },
  {
    "label": "AckGapBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckGapBlocks(UnwrappedTSN cumulative_tsn_ack, rtc::ArrayView<const SackChunk::GapAckBlock> gap_ack_blocks, AckInfo& ack_info)"
  },
  {
    "label": "NackBetweenAckBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NackBetweenAckBlocks(UnwrappedTSN cumulative_tsn_ack, rtc::ArrayView<const SackChunk::GapAckBlock> gap_ack_blocks, bool is_in_fast_recovery, OutstandingData::AckInfo& ack_info)"
  },
  {
    "label": "AckChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckChunk(AckInfo& ack_info, std::map<UnwrappedTSN, Item>::iterator iter)"
  },
  {
    "label": "NackItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NackItem(UnwrappedTSN tsn, Item& item, bool retransmit_now, bool do_fast_retransmit)"
  },
  {
    "label": "AbandonAllFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbandonAllFor(const OutstandingData::Item& item)"
  },
  {
    "label": "ExtractChunksThatCanFit()",
    "kind": "Method",
    "detail": "Function (std::vector<std::pair<TSN,Data>>)",
    "insertText": "ExtractChunksThatCanFit(std::set<UnwrappedTSN>& chunks, size_t max_size)"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConsistent()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const size_t data_chunk_header_size_ ; UnwrappedTSN next_tsn_ ; UnwrappedTSN last_cumulative_tsn_ack_ ; std::function<)",
    "insertText": "bool(IsUnordered, StreamID, MID)"
  }
]