[
  {
    "label": "keeps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "keeps"
  },
  {
    "label": "OutstandingData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutstandingData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AckInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AckInfo"
  },
  {
    "label": "Item",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Item"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "HandleSack()",
    "kind": "Method",
    "detail": "Function (AckInfo)",
    "insertText": "HandleSack(\n      UnwrappedTSN cumulative_tsn_ack,\n      rtc::ArrayView<const SackChunk::GapAckBlock> gap_ack_blocks,\n      bool is_in_fast_recovery)"
  },
  {
    "label": "GetChunksToBeFastRetransmitted()",
    "kind": "Method",
    "detail": "Function (Data>>)",
    "insertText": "GetChunksToBeFastRetransmitted(\n      size_t max_size)"
  },
  {
    "label": "GetChunksToBeRetransmitted()",
    "kind": "Method",
    "detail": "Function (Data>>)",
    "insertText": "GetChunksToBeRetransmitted(size_t max_size)"
  },
  {
    "label": "ExpireOutstandingChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpireOutstandingChunks(TimeMs now)"
  },
  {
    "label": "NackAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NackAll()"
  },
  {
    "label": "ResetSequenceNumbers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSequenceNumbers(UnwrappedTSN next_tsn,\n                            UnwrappedTSN last_cumulative_tsn)"
  },
  {
    "label": "Ack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ack()"
  },
  {
    "label": "Nack()",
    "kind": "Method",
    "detail": "Function (NackAction)",
    "insertText": "Nack(bool retransmit_now)"
  },
  {
    "label": "MarkAsRetransmitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAsRetransmitted()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "RemoveAcked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAcked(UnwrappedTSN cumulative_tsn_ack, AckInfo& ack_info)"
  },
  {
    "label": "AckGapBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckGapBlocks(UnwrappedTSN cumulative_tsn_ack,\n                    rtc::ArrayView<const SackChunk::GapAckBlock> gap_ack_blocks,\n                    AckInfo& ack_info)"
  },
  {
    "label": "NackBetweenAckBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NackBetweenAckBlocks(\n      UnwrappedTSN cumulative_tsn_ack,\n      rtc::ArrayView<const SackChunk::GapAckBlock> gap_ack_blocks,\n      bool is_in_fast_recovery,\n      OutstandingData::AckInfo& ack_info)"
  },
  {
    "label": "AckChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckChunk(AckInfo& ack_info, std::map<UnwrappedTSN, Item>::iterator iter)"
  },
  {
    "label": "NackItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NackItem(UnwrappedTSN tsn,\n                Item& item,\n                bool retransmit_now,\n                bool do_fast_retransmit)"
  },
  {
    "label": "AbandonAllFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbandonAllFor(const OutstandingData::Item& item)"
  },
  {
    "label": "ExtractChunksThatCanFit()",
    "kind": "Method",
    "detail": "Function (Data>>)",
    "insertText": "ExtractChunksThatCanFit(\n      std::set<UnwrappedTSN>& chunks,\n      size_t max_size)"
  }
]