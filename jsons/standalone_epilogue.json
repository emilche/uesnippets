[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CpuScopeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CpuScopeFlags"
  },
  {
    "label": "TraceCpuScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceCpuScope"
  },
  {
    "label": "Lane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lane"
  },
  {
    "label": "ScopeBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopeBuffer"
  },
  {
    "label": "ThreadBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadBuffer"
  },
  {
    "label": "Lane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lane"
  },
  {
    "label": "Lane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lane"
  },
  {
    "label": "ArgPacker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArgPacker"
  },
  {
    "label": "TypeId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeId"
  },
  {
    "label": "TypeId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeId"
  },
  {
    "label": "TypeId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeId"
  },
  {
    "label": "DescribeSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeSession(\n\tconst std::string_view& AppName,\n\tBuild Variant=Build::Unknown,\n\tconst std::string_view& CommandLine=\"\",\n\tconst std::string_view& BuildVersion=\"unknown_ver\")"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter(int32 ScopeId, int32 Flags=0)"
  },
  {
    "label": "ScopeNew()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ScopeNew(const std::string_view& Name)"
  },
  {
    "label": "LaneIsTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaneIsTracing()"
  },
  {
    "label": "LaneDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaneDelete(Lane* Handle)"
  },
  {
    "label": "LaneEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaneEnter(Lane* Handle, int32 ScopeId)"
  },
  {
    "label": "LaneLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaneLeave()"
  },
  {
    "label": "TRACE_PRIVATE_UNIQUE_VAR()",
    "kind": "Method",
    "detail": "Function (trace::TraceCpuScope)",
    "insertText": "TRACE_PRIVATE_UNIQUE_VAR(cpu_scope)"
  },
  {
    "label": "TRACE_PRIVATE_UNIQUE_VAR()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TRACE_PRIVATE_UNIQUE_VAR(scope_id)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(bool Force)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter(uint64 Timestamp, uint32 ScopeId, int32 Flag=0)"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Leave(uint64 Timestamp)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter(uint64 Timestamp, uint32 ScopeId, int32 Flags)"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Leave(uint64 Timestamp)"
  },
  {
    "label": "Lane()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Lane(const std::string_view& Name)"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter(int32 ScopeId)"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Leave()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "bool(CpuChannel)"
  },
  {
    "label": "Lane()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "Lane(Name)"
  },
  {
    "label": "ArgPacker()",
    "kind": "Method",
    "detail": "Function (Types>)",
    "insertText": "ArgPacker(Types... Args)"
  },
  {
    "label": "PackValue()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackValue(Type&& Value)"
  },
  {
    "label": "Pack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pack(Type&& Value, U... Next)"
  },
  {
    "label": "LogMessageImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogMessageImpl(int32 Id, const uint8* ParamBuffer, int32 ParamSize)"
  },
  {
    "label": "LogMessageNew()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LogMessageNew(const std::string_view& Format, const std::string_view& File, int32 Line)"
  },
  {
    "label": "BookmarkImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BookmarkImpl(uint32 Id, const uint8* ParamBuffer, uint32 ParamSize)"
  },
  {
    "label": "BookmarkNew()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "BookmarkNew(const std::string_view& Format, const std::string_view& File, uint32 Line)"
  }
]