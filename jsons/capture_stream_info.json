[
  {
    "label": "CaptureStreamInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaptureStreamInfo"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC_DUMP_CAPTURE_STREAM_INFO_H_ # define MODULES_AUDIO_PROCESSING_AEC_DUMP_CAPTURE_STREAM_INFO_H_ # include<memory> # include<utility> # include \" modules / audio_processing / include / aec_dump . h \" # include \" rtc_base / ignore_wundef . h \")",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #ifdef WEBRTC_ANDROID_PLATFORM_BUILD #include \"external/webrtc/webrtc/modules/audio_processing/debug.pb.h\" #else #include \"modules/audio_processing/debug.pb.h\" #endif RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "CaptureStreamInfo()",
    "kind": "Method",
    "detail": "Function (class CaptureStreamInfo { public :)",
    "insertText": "CaptureStreamInfo()"
  },
  {
    "label": "CreateNewEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewEvent()"
  },
  {
    "label": "CaptureStreamInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CaptureStreamInfo(const CaptureStreamInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CaptureStreamInfo&)",
    "insertText": "operator(const CaptureStreamInfo&)"
  },
  {
    "label": "AddInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInput(const AudioFrameView<const float>& src)"
  },
  {
    "label": "AddOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOutput(const AudioFrameView<const float>& src)"
  },
  {
    "label": "AddInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInput(const int16_t* const data, int num_channels, int samples_per_channel)"
  },
  {
    "label": "AddOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOutput(const int16_t* const data, int num_channels, int samples_per_channel)"
  },
  {
    "label": "AddAudioProcessingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioProcessingState(const AecDump::AudioProcessingState& state)"
  },
  {
    "label": "FetchEvent()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<audioproc::Event>)",
    "insertText": "FetchEvent()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<audioproc::Event> result =)",
    "insertText": "move(event_)"
  },
  {
    "label": "Event()",
    "kind": "Method",
    "detail": "Function (event_ = std::make_unique<)",
    "insertText": "Event()"
  },
  {
    "label": "set_type()",
    "kind": "Method",
    "detail": "Function (event_ ->)",
    "insertText": "set_type(audioproc::Event::STREAM)"
  }
]