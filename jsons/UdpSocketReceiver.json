[
  {
    "label": "FUdpSocketReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUdpSocketReceiver"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Serialization / ArrayReader . h \" # include \" Sockets . h \" # include \" SocketSubsystem . h \" # include \" Interfaces / IPv4 / IPv4Endpoint . h \" # include \" IPAddress . h \" typedef TSharedPtr<FArrayReader,ESPMode::ThreadSafe> FArrayReaderPtr ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSocketDataReceived, const FArrayReaderPtr&, const FIPv4Endpoint&)"
  },
  {
    "label": "FUdpSocketReceiver()",
    "kind": "Method",
    "detail": "Function (class FUdpSocketReceiver : public FRunnable,private FSingleThreadRunnable { public :)",
    "insertText": "FUdpSocketReceiver(FSocket* InSocket, const FTimespan& InWaitTime, const TCHAR* InThreadName) : Socket(InSocket) , Stopping(false) , Thread(nullptr) , ThreadName(InThreadName) , WaitTime(InWaitTime)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SocketSubsystem =)",
    "insertText": "Get(PLATFORM_SOCKETSUBSYSTEM)"
  },
  {
    "label": "FUdpSocketReceiver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUdpSocketReceiver()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (Thread ->)",
    "insertText": "Kill(true)"
  },
  {
    "label": "SetMaxReadBufferSize()",
    "kind": "Method",
    "detail": "Function (delete Thread ; } } public : void)",
    "insertText": "SetMaxReadBufferSize(uint32 InMaxReadBufferSize)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (MaxReadBufferSize = InMaxReadBufferSize ; } void)",
    "insertText": "Start()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Thread =)",
    "insertText": "Create(this, *ThreadName, 128 * 1024, TPri_AboveNormal, FPlatformAffinity::GetPoolThreadMask())"
  },
  {
    "label": "OnDataReceived()",
    "kind": "Method",
    "detail": "Function (} FOnSocketDataReceived&)",
    "insertText": "OnDataReceived()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(WaitTime)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (Stopping = true ; } void)",
    "insertText": "Exit()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Update(const FTimespan& SocketWaitTime)"
  },
  {
    "label": "CreateInternetAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr> Sender = SocketSubsystem ->)",
    "insertText": "CreateInternetAddr()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 Size ;)",
    "insertText": "while(Socket->HasPendingData(Size))"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (FArrayReaderPtr Reader = MakeShared<FArrayReader,)",
    "insertText": "ThreadSafe(true)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Reader ->)",
    "insertText": "SetNumUninitialized(FMath::Min(Size, MaxReadBufferSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Read = 0 ;)",
    "insertText": "if(Socket->RecvFrom(Reader->GetData(), Reader->Num(), Read, *Sender))"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Reader ->)",
    "insertText": "RemoveAt(Read, Reader->Num() - Read, EAllowShrinking::No)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (DataReceivedDelegate .)",
    "insertText": "ExecuteIfBound(Reader, FIPv4Endpoint(Sender))"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "Tick()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FTimespan::Zero())"
  }
]