[
  {
    "label": "AGeometryCollectionActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGeometryCollectionActor"
  },
  {
    "label": "UChaosDestructionListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChaosDestructionListener"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Chaos / Declares . h \" # include \" Chaos / ChaosSolver . h \" # include \" Chaos / ChaosSolverActor . h \" # include \" EventManager . h \" # include \" EventsData . h \" # include \" HAL / ThreadSafeBool . h \" # include \" ChaosCollisionEventFilter . h \" # include \" ChaosBreakingEventFilter . h \" # include \" ChaosTrailingEventFilter . h \" # include \" ChaosRemovalEventFilter . h \" # include \" ChaosBlueprint . generated . h \" class AGeometryCollectionActor ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosCollisionEvents, const TArray<FChaosCollisionEventData>&, CollisionEvents)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosBreakingEvents, const TArray<FChaosBreakingEventData>&, BreakingEvents)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosTrailingEvents, const TArray<FChaosTrailingEventData>&, TrailingEvents)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosRemovalEvents, const TArray<FChaosRemovalEventData>&, RemovalEvents)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup = (Chaos), hidecategories = (Object, ActorComponent, Physics, Rendering, Mobility, LOD), ShowCategories = Trigger, meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: #if WITH_EDITOR GEOMETRYCOLLECTIONENGINE_API virtual void PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "UpdateTransformSettings()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateTransformSettings()"
  },
  {
    "label": "GetDataFromSolvers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDataFromSolvers()"
  },
  {
    "label": "ClearEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearEvents()"
  },
  {
    "label": "UpdateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEvents()"
  },
  {
    "label": "SetCollisionFilter()",
    "kind": "Method",
    "detail": "Function (protected : enum class ETaskState { NoTask = 0,Processing,Finished } ; FThreadSafeCounter TaskState ; Chaos::FCollisionDataArray RawCollisionDataArray ; Chaos::FBreakingDataArray RawBreakingDataArray ; Chaos::FTrailingDataArray RawTrailingDataArray ; Chaos::FRemovalDataArray RawRemovalDataArray ; FTransform ChaosComponentTransform ; FThreadSafeBool bChanged ; float LastCollisionDataTimeStamp ; float LastBreakingDataTimeStamp ; float LastTrailingDataTimeStamp ; float LastRemovalDataTimeStamp ; TSet<Chaos::FPhysicsSolver*> Solvers ; TArray<const FGeometryCollectionPhysicsProxy*> GeometryCollectionPhysicsProxies ; TSharedPtr<FChaosCollisionEventFilter> ChaosCollisionFilter ; TSharedPtr<FChaosBreakingEventFilter> ChaosBreakingFilter ; TSharedPtr<FChaosTrailingEventFilter> ChaosTrailingFilter ; TSharedPtr<FChaosRemovalEventFilter> ChaosRemovalFilter ; public : void)",
    "insertText": "SetCollisionFilter(TSharedPtr<FChaosCollisionEventFilter> InCollisionFilter)"
  },
  {
    "label": "SetBreakingFilter()",
    "kind": "Method",
    "detail": "Function (ChaosCollisionFilter = InCollisionFilter ; } void)",
    "insertText": "SetBreakingFilter(TSharedPtr<FChaosBreakingEventFilter> InBreakingFilter)"
  },
  {
    "label": "SetTrailingFilter()",
    "kind": "Method",
    "detail": "Function (ChaosBreakingFilter = InBreakingFilter ; } void)",
    "insertText": "SetTrailingFilter(TSharedPtr<FChaosTrailingEventFilter> InTrailingFilter)"
  },
  {
    "label": "SetRemovalFilter()",
    "kind": "Method",
    "detail": "Function (ChaosTrailingFilter = InTrailingFilter ; } void)",
    "insertText": "SetRemovalFilter(TSharedPtr<FChaosRemovalEventFilter> InRemovalFilter)"
  },
  {
    "label": "RegisterChaosEvents()",
    "kind": "Method",
    "detail": "Function (ChaosRemovalFilter = InRemovalFilter ; } void)",
    "insertText": "RegisterChaosEvents(FPhysScene* Scene)"
  },
  {
    "label": "UnregisterChaosEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterChaosEvents(FPhysScene* Scene)"
  },
  {
    "label": "RegisterChaosEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterChaosEvents(TSharedPtr<FPhysScene_Chaos> Scene)"
  },
  {
    "label": "UnregisterChaosEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterChaosEvents(TSharedPtr<FPhysScene_Chaos> Scene)"
  },
  {
    "label": "HandleCollisionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollisionEvents(const Chaos::FCollisionEventData& CollisionData)"
  },
  {
    "label": "HandleBreakingEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBreakingEvents(const Chaos::FBreakingEventData& BreakingData)"
  },
  {
    "label": "HandleTrailingEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTrailingEvents(const Chaos::FTrailingEventData& TrailingData)"
  },
  {
    "label": "HandleRemovalEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemovalEvents(const Chaos::FRemovalEventData& RemovalData)"
  }
]