[
  {
    "label": "EIGEN_LAPACKE_EIG_SELFADJ_2()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SAEIGENSOLVER_LAPACKE_H # define EIGEN_SAEIGENSOLVER_LAPACKE_H namespace Eigen { # define)",
    "insertText": "EIGEN_LAPACKE_EIG_SELFADJ_2(EIGTYPE, LAPACKE_TYPE, LAPACKE_RTYPE, LAPACKE_NAME, EIGCOLROW ) \\ template<> template<typename InputType> inline \\ SelfAdjointEigenSolver<Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW> >& \\ SelfAdjointEigenSolver<Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW> >::compute(const EigenBase<InputType>& matrix, int options)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert(matrix.cols() == matrix.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert((options&~(EigVecMask|GenEigMask))==0 \\ && (options&EigVecMask)!=EigVecMask \\ && \"invalid option parameter\")"
  },
  {
    "label": "computeEigenvectors()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "computeEigenvectors(options&ComputeEigenvectors)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ lapack_int n = internal::convert_index<)",
    "insertText": "lapack_int(matrix.cols())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (\\ m_eivalues .)",
    "insertText": "resize(n,1)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (\\ m_subdiag .)",
    "insertText": "resize(n-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ m_eivec = matrix ; \\ \\)",
    "insertText": "if(n==1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (\\ m_eivalues .)",
    "insertText": "coeffRef(0,0) = numext::real(m_eivec.coeff(0,0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(computeEigenvectors) m_eivec.setOnes(n,n)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ m_info = Success ; \\ m_isInitialized = true ; \\ m_eigenvectorsOk = computeEigenvectors ; \\ return* this ; \\ } \\ \\ lda = internal::convert_index<)",
    "insertText": "lapack_int(m_eivec.outerStride())"
  },
  {
    "label": "LAPACKE_NAME()",
    "kind": "Method",
    "detail": "Function (\\ char jobz,uplo = ' L ' ; \\ jobz = computeEigenvectors ? ' V ' : ' N ' ; \\ \\ info = LAPACKE_ # #)",
    "insertText": "LAPACKE_NAME(LAPACK_COL_MAJOR, jobz, uplo, n, (LAPACKE_TYPE*)m_eivec.data(), lda, (LAPACKE_RTYPE*)m_eivalues.data())"
  },
  {
    "label": "m_info()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "m_info(info==0)"
  }
]