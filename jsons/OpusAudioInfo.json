[
  {
    "label": "FOpusDecoderWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpusDecoderWrapper"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FOpusAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpusAudioInfo"
  },
  {
    "label": "OPUSAUDIODECODER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OPUSAUDIODECODER_API"
  },
  {
    "label": "FOpusAudioInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDecompress . h \" struct FOpusDecoderWrapper ; struct FSoundQualityInfo ; class FOpusAudioInfo : public IStreamedCompressedInfo { public :)",
    "insertText": "FOpusAudioInfo()"
  },
  {
    "label": "ParseHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseHeader(const uint8* InSrcBufferData, uint32 InSrcBufferDataSize, FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "GetFrameSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFrameSize()"
  },
  {
    "label": "GetMaxFrameSizeSamples()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxFrameSizeSamples()"
  },
  {
    "label": "CreateDecoder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDecoder()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (FDecodeResult)",
    "insertText": "Decode(const uint8* CompressedData, const int32 CompressedDataSize, uint8* OutPCMData, const int32 OutputPCMDataSize)"
  },
  {
    "label": "PrepareToLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToLoop()"
  },
  {
    "label": "SeekToTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToTime(const float SeekTime)"
  },
  {
    "label": "SeekToFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToFrame(const uint32 SeekFrame)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (struct FHeader { char Identifier [ 8 ] ; uint8 Version = 0 ; uint8 NumChannels = 0 ; uint32 SampleRate = 0 ; uint32 EncodedSampleRate = 0 ; uint64 ActiveSampleCount = 0 ; uint32 NumEncodedFrames = 0 ; int32 NumPreSkipSamples = 0 ; int32 NumSilentSamplesAtBeginning = 0 ; int32 NumSilentSamplesAtEnd = 0 ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Identifier)"
  },
  {
    "label": "HeaderSize()",
    "kind": "Method",
    "detail": "Function (Version = 0 ; NumChannels = 0 ; SampleRate = 0 ; EncodedSampleRate = 0 ; ActiveSampleCount = 0 ; NumEncodedFrames = 0 ; NumPreSkipSamples = 0 ; NumSilentSamplesAtBeginning = 0 ; NumSilentSamplesAtEnd = 0 ; } const char OPUS_ID [ 8 ] { ' U ',' E ',' O ',' P ',' U ',' S ',' \\ 0 ',' \\ 0 ' } ; int32)",
    "insertText": "HeaderSize()"
  },
  {
    "label": "ParseHeader()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "ParseHeader(FHeader& OutHeader, uint32& OutNumRead, const uint8* InSrcBufferData, uint32 InSrcBufferDataSize)"
  }
]