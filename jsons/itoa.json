[
  {
    "label": "GetDigitsLut()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_ITOA_ # define RAPIDJSON_ITOA_ # include \" . . / rapidjson . h \" RAPIDJSON_NAMESPACE_BEGIN namespace internal { const char*)",
    "insertText": "GetDigitsLut()"
  },
  {
    "label": "u32toa()",
    "kind": "Method",
    "detail": "Function (const char cDigitsLut [ 2 0 0 ] = { ' 0 ',' 0 ',' 0 ',' 1 ',' 0 ',' 2 ',' 0 ',' 3 ',' 0 ',' 4 ',' 0 ',' 5 ',' 0 ',' 6 ',' 0 ',' 7 ',' 0 ',' 8 ',' 0 ',' 9 ',' 1 ',' 0 ',' 1 ',' 1 ',' 1 ',' 2 ',' 1 ',' 3 ',' 1 ',' 4 ',' 1 ',' 5 ',' 1 ',' 6 ',' 1 ',' 7 ',' 1 ',' 8 ',' 1 ',' 9 ',' 2 ',' 0 ',' 2 ',' 1 ',' 2 ',' 2 ',' 2 ',' 3 ',' 2 ',' 4 ',' 2 ',' 5 ',' 2 ',' 6 ',' 2 ',' 7 ',' 2 ',' 8 ',' 2 ',' 9 ',' 3 ',' 0 ',' 3 ',' 1 ',' 3 ',' 2 ',' 3 ',' 3 ',' 3 ',' 4 ',' 3 ',' 5 ',' 3 ',' 6 ',' 3 ',' 7 ',' 3 ',' 8 ',' 3 ',' 9 ',' 4 ',' 0 ',' 4 ',' 1 ',' 4 ',' 2 ',' 4 ',' 3 ',' 4 ',' 4 ',' 4 ',' 5 ',' 4 ',' 6 ',' 4 ',' 7 ',' 4 ',' 8 ',' 4 ',' 9 ',' 5 ',' 0 ',' 5 ',' 1 ',' 5 ',' 2 ',' 5 ',' 3 ',' 5 ',' 4 ',' 5 ',' 5 ',' 5 ',' 6 ',' 5 ',' 7 ',' 5 ',' 8 ',' 5 ',' 9 ',' 6 ',' 0 ',' 6 ',' 1 ',' 6 ',' 2 ',' 6 ',' 3 ',' 6 ',' 4 ',' 6 ',' 5 ',' 6 ',' 6 ',' 6 ',' 7 ',' 6 ',' 8 ',' 6 ',' 9 ',' 7 ',' 0 ',' 7 ',' 1 ',' 7 ',' 2 ',' 7 ',' 3 ',' 7 ',' 4 ',' 7 ',' 5 ',' 7 ',' 6 ',' 7 ',' 7 ',' 7 ',' 8 ',' 7 ',' 9 ',' 8 ',' 0 ',' 8 ',' 1 ',' 8 ',' 2 ',' 8 ',' 3 ',' 8 ',' 4 ',' 8 ',' 5 ',' 8 ',' 6 ',' 8 ',' 7 ',' 8 ',' 8 ',' 8 ',' 9 ',' 9 ',' 0 ',' 9 ',' 1 ',' 9 ',' 2 ',' 9 ',' 3 ',' 9 ',' 4 ',' 9 ',' 5 ',' 9 ',' 6 ',' 9 ',' 7 ',' 9 ',' 8 ',' 9 ',' 9 ' } ; return cDigitsLut ; } char*)",
    "insertText": "u32toa(uint32_t value, char* buffer)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(buffer != 0)"
  },
  {
    "label": "d1()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d1(value / 100)"
  },
  {
    "label": "d2()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d2(value % 100)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ d2 + 1 ] ; } else)",
    "insertText": "if(value < 100000000)"
  },
  {
    "label": "d1()",
    "kind": "Method",
    "detail": "Function (const uint32_t b = value / 1 0 0 0 0 ; const uint32_t c = value % 1 0 0 0 0 ; const uint32_t)",
    "insertText": "d1(b / 100)"
  },
  {
    "label": "d2()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d2(b % 100)"
  },
  {
    "label": "d3()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d3(c / 100)"
  },
  {
    "label": "d4()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d4(c % 100)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ d2 + 1 ] ;* buffer + + = cDigitsLut [ d3 ] ;* buffer + + = cDigitsLut [ d3 + 1 ] ;* buffer + + = cDigitsLut [ d4 ] ;* buffer + + = cDigitsLut [ d4 + 1 ] ; } else { const uint32_t a = value / 1 0 0 0 0 0 0 0 0 ; value % = 1 0 0 0 0 0 0 0 0 ;)",
    "insertText": "if(a >= 10)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const unsigned i = a<<1 ;* buffer + + = cDigitsLut [ i ] ;* buffer + + = cDigitsLut [ i + 1 ] ; } else* buffer + + = static_cast<)",
    "insertText": "char('0' + static_cast<char>(a))"
  },
  {
    "label": "i32toa()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ d1 ] ;* buffer + + = cDigitsLut [ d1 + 1 ] ;* buffer + + = cDigitsLut [ d2 ] ;* buffer + + = cDigitsLut [ d2 + 1 ] ;* buffer + + = cDigitsLut [ d3 ] ;* buffer + + = cDigitsLut [ d3 + 1 ] ;* buffer + + = cDigitsLut [ d4 ] ;* buffer + + = cDigitsLut [ d4 + 1 ] ; } return buffer ; } char*)",
    "insertText": "i32toa(int32_t value, char* buffer)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (uint32_t u = static_cast<)",
    "insertText": "uint32_t(value)"
  },
  {
    "label": "u32toa()",
    "kind": "Method",
    "detail": "Function (* buffer + + = ' - ' ; u = ~ u + 1 ; } return)",
    "insertText": "u32toa(u, buffer)"
  },
  {
    "label": "u64toa()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "u64toa(uint64_t value, char* buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint64_t kTen8 = 1 0 0 0 0 0 0 0 0 ; const uint64_t kTen9 = kTen8* 1 0 ; const uint64_t kTen10 = kTen8* 1 0 0 ; const uint64_t kTen11 = kTen8* 1 0 0 0 ; const uint64_t kTen12 = kTen8* 1 0 0 0 0 ; const uint64_t kTen13 = kTen8* 1 0 0 0 0 0 ; const uint64_t kTen14 = kTen8* 1 0 0 0 0 0 0 ; const uint64_t kTen15 = kTen8* 1 0 0 0 0 0 0 0 ; const uint64_t kTen16 = kTen8* kTen8 ;)",
    "insertText": "if(value < kTen8)"
  },
  {
    "label": "d1()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d1(v / 100)"
  },
  {
    "label": "d2()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d2(v % 100)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ d2 + 1 ] ;* buffer + + = cDigitsLut [ d3 ] ;* buffer + + = cDigitsLut [ d3 + 1 ] ;* buffer + + = cDigitsLut [ d4 ] ;* buffer + + = cDigitsLut [ d4 + 1 ] ; } } else)",
    "insertText": "if(value < kTen16)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t v0 = static_cast<)",
    "insertText": "uint32_t(value / kTen8)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t v1 = static_cast<)",
    "insertText": "uint32_t(value % kTen8)"
  },
  {
    "label": "d1()",
    "kind": "Method",
    "detail": "Function (const uint32_t b0 = v0 / 1 0 0 0 0 ; const uint32_t c0 = v0 % 1 0 0 0 0 ; const uint32_t)",
    "insertText": "d1(b0 / 100)"
  },
  {
    "label": "d2()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d2(b0 % 100)"
  },
  {
    "label": "d3()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d3(c0 / 100)"
  },
  {
    "label": "d4()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d4(c0 % 100)"
  },
  {
    "label": "d5()",
    "kind": "Method",
    "detail": "Function (const uint32_t b1 = v1 / 1 0 0 0 0 ; const uint32_t c1 = v1 % 1 0 0 0 0 ; const uint32_t)",
    "insertText": "d5(b1 / 100)"
  },
  {
    "label": "d6()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d6(b1 % 100)"
  },
  {
    "label": "d7()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d7(c1 / 100)"
  },
  {
    "label": "d8()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "d8(c1 % 100)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ d4 + 1 ] ;* buffer + + = cDigitsLut [ d5 ] ;* buffer + + = cDigitsLut [ d5 + 1 ] ;* buffer + + = cDigitsLut [ d6 ] ;* buffer + + = cDigitsLut [ d6 + 1 ] ;* buffer + + = cDigitsLut [ d7 ] ;* buffer + + = cDigitsLut [ d7 + 1 ] ;* buffer + + = cDigitsLut [ d8 ] ;* buffer + + = cDigitsLut [ d8 + 1 ] ; } else { const uint32_t a = static_cast<)",
    "insertText": "uint32_t(value / kTen16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (value % = kTen16 ;)",
    "insertText": "if(a < 10) *buffer++ = static_cast<char>('0' + static_cast<char>(a))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32_t i = a<<1 ;* buffer + + = cDigitsLut [ i ] ;* buffer + + = cDigitsLut [ i + 1 ] ; } else)",
    "insertText": "if(a < 1000)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (* buffer + + = static_cast<)",
    "insertText": "char('0' + static_cast<char>(a / 100))"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "i(a % 100)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ i ] ;* buffer + + = cDigitsLut [ i + 1 ] ; } else { const uint32_t)",
    "insertText": "i(a / 100)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "j(a % 100)"
  },
  {
    "label": "i64toa()",
    "kind": "Method",
    "detail": "Function (* buffer + + = cDigitsLut [ d1 ] ;* buffer + + = cDigitsLut [ d1 + 1 ] ;* buffer + + = cDigitsLut [ d2 ] ;* buffer + + = cDigitsLut [ d2 + 1 ] ;* buffer + + = cDigitsLut [ d3 ] ;* buffer + + = cDigitsLut [ d3 + 1 ] ;* buffer + + = cDigitsLut [ d4 ] ;* buffer + + = cDigitsLut [ d4 + 1 ] ;* buffer + + = cDigitsLut [ d5 ] ;* buffer + + = cDigitsLut [ d5 + 1 ] ;* buffer + + = cDigitsLut [ d6 ] ;* buffer + + = cDigitsLut [ d6 + 1 ] ;* buffer + + = cDigitsLut [ d7 ] ;* buffer + + = cDigitsLut [ d7 + 1 ] ;* buffer + + = cDigitsLut [ d8 ] ;* buffer + + = cDigitsLut [ d8 + 1 ] ; } return buffer ; } char*)",
    "insertText": "i64toa(int64_t value, char* buffer)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t u = static_cast<)",
    "insertText": "uint64_t(value)"
  },
  {
    "label": "u64toa()",
    "kind": "Method",
    "detail": "Function (* buffer + + = ' - ' ; u = ~ u + 1 ; } return)",
    "insertText": "u64toa(u, buffer)"
  }
]