[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FMovieSceneSequenceInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceInstanceData"
  },
  {
    "label": "FMovieSceneSequenceInstanceDataPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceInstanceDataPtr"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / InlineValue . h \" # include \" Templates / Decay . h \" # include \" Templates / EnableIf . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneSequenceInstanceData . generated . h \" class FArchive ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() virtual ~FMovieSceneSequenceInstanceData()"
  },
  {
    "label": "GetScriptStruct()",
    "kind": "Method",
    "detail": "Function (} UScriptStruct&)",
    "insertText": "GetScriptStruct()"
  },
  {
    "label": "GetScriptStructImpl()",
    "kind": "Method",
    "detail": "Function (} private : UScriptStruct&)",
    "insertText": "GetScriptStructImpl()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequenceInstanceDataPtr()"
  },
  {
    "label": "FMovieSceneSequenceInstanceDataPtr()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TPointerIsConvertibleFromTo<TDecay<T>::Type,FMovieSceneSequenceInstanceData>::Value>::Type>)",
    "insertText": "FMovieSceneSequenceInstanceDataPtr(T&& In) : TInlineValue(Forward<T>(In))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (typedef TDecay<T>::Type ClientType ;)",
    "insertText": "static_assert(!std::is_same_v<ClientType, FMovieSceneSequenceInstanceData>, \"Direct usage of FMovieSceneSequenceInstanceData is prohibited.\")"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR&& DO_CHECK const UStruct* ClientStruct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "FMovieSceneSequenceInstanceDataPtr()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FMovieSceneSequenceInstanceDataPtr(const FMovieSceneSequenceInstanceDataPtr& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceInstanceDataPtr&)",
    "insertText": "operator(const FMovieSceneSequenceInstanceDataPtr& RHS)"
  },
  {
    "label": "FMovieSceneSequenceInstanceDataPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSequenceInstanceDataPtr(FMovieSceneSequenceInstanceDataPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceInstanceDataPtr&)",
    "insertText": "operator(FMovieSceneSequenceInstanceDataPtr&&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]