[
  {
    "label": "SurfaceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceData"
  },
  {
    "label": "SurfaceData()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_BFR_SURFACE_DATA_H # define OPENSUBDIV3_BFR_SURFACE_DATA_H # include \" . . / version . h \" # include \" . . / bfr / parameterization . h \" # include \" . . / bfr / irregularPatchType . h \" # include \" . . / vtr / stackBuffer . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Bfr { namespace internal { class SurfaceData { public :)",
    "insertText": "SurfaceData()"
  },
  {
    "label": "SurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SurfaceData(SurfaceData const & src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = src ; } SurfaceData&)",
    "insertText": "operator(SurfaceData const & src)"
  },
  {
    "label": "invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidate()"
  },
  {
    "label": "getNumCVs()",
    "kind": "Method",
    "detail": "Function (} public : typedef int Index ; int)",
    "insertText": "getNumCVs()"
  },
  {
    "label": "getCVIndices()",
    "kind": "Method",
    "detail": "Function (} Index const*)",
    "insertText": "getCVIndices()"
  },
  {
    "label": "reinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reinitialize()"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (_cvIndices .)",
    "insertText": "SetSize(size)"
  },
  {
    "label": "setValid()",
    "kind": "Method",
    "detail": "Function (_param = p ; } void)",
    "insertText": "setValid(bool on)"
  },
  {
    "label": "setDouble()",
    "kind": "Method",
    "detail": "Function (_isValid = on ; } void)",
    "insertText": "setDouble(bool on)"
  },
  {
    "label": "setRegular()",
    "kind": "Method",
    "detail": "Function (_isDouble = on ; } void)",
    "insertText": "setRegular(bool on)"
  },
  {
    "label": "setLinear()",
    "kind": "Method",
    "detail": "Function (_isRegular = on ; } void)",
    "insertText": "setLinear(bool on)"
  },
  {
    "label": "setRegPatchType()",
    "kind": "Method",
    "detail": "Function (_isLinear = on ; } void)",
    "insertText": "setRegPatchType(int t)"
  },
  {
    "label": "_regPatchType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_regPatchType(unsigned char)"
  },
  {
    "label": "setRegPatchMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRegPatchMask(int m)"
  },
  {
    "label": "_regPatchMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_regPatchMask(unsigned char)"
  },
  {
    "label": "setIrregPatchPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIrregPatchPtr(IrregPatchPtr const & ptr)"
  }
]