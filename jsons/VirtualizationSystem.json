[
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FPayloadActivityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPayloadActivityInfo"
  },
  {
    "label": "FActivity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivity"
  },
  {
    "label": "FBackendStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBackendStats"
  },
  {
    "label": "FRehydrationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRehydrationInfo"
  },
  {
    "label": "IPayloadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPayloadProvider"
  },
  {
    "label": "FPushResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPushResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPushRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPushRequest"
  },
  {
    "label": "FPullRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPullRequest"
  },
  {
    "label": "FVirtualizationResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualizationResult"
  },
  {
    "label": "FRehydrationResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRehydrationResult"
  },
  {
    "label": "FInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitParams"
  },
  {
    "label": "IVirtualizationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualizationSystem"
  },
  {
    "label": "IVirtualizationSystemFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualizationSystemFactory"
  },
  {
    "label": "FVirtualizationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualizationSystem"
  },
  {
    "label": "IVirtualizationSourceControlUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualizationSourceControlUtilities"
  },
  {
    "label": "IPayloadProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Features / IModularFeature . h \" # include \" Features / IModularFeatures . h \" # include \" IO / IoHash . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" Virtualization / VirtualizationTypes . h \" class FPackagePath ; class FText ; class UObject ; struct FAnalyticsEventAttribute ; namespace UE::Virtualization { struct FPayloadActivityInfo { struct FActivity { int64 PayloadCount = 0 ; int64 TotalBytes = 0 ; int64 CyclesSpent = 0 ; } ; FActivity Pull ; FActivity Push ; FActivity Cache ; } ; struct FBackendStats { FString ConfigName ; FString DebugName ; EStorageType Type ; FPayloadActivityInfo PayloadActivity ; } ; struct FRehydrationInfo { uint64 OriginalSize = 0 ; uint64 RehydratedSize = 0 ; int32 NumPayloadsRehydrated = 0 ; } ; class IPayloadProvider { public :)",
    "insertText": "IPayloadProvider()"
  },
  {
    "label": "RequestPayload()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "RequestPayload(const FIoHash& Identifier)"
  },
  {
    "label": "GetPayloadSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetPayloadSize(const FIoHash& Identifier)"
  },
  {
    "label": "FPushResult()",
    "kind": "Method",
    "detail": "Function (} ; struct FPushResult { enum class EStatus : int8 { Error = - 5,ProcessDisabled = - 4,NoBackend = - 3,Invalid = - 2,Filtered = - 1,Pending = 0,AlreadyExisted = 1,Pushed = 2 } ;)",
    "insertText": "FPushResult()"
  },
  {
    "label": "GetAsError()",
    "kind": "Method",
    "detail": "Function (FPushResult)",
    "insertText": "GetAsError()"
  },
  {
    "label": "GetAsProcessDisabled()",
    "kind": "Method",
    "detail": "Function (} FPushResult)",
    "insertText": "GetAsProcessDisabled()"
  },
  {
    "label": "GetAsNoBackend()",
    "kind": "Method",
    "detail": "Function (} FPushResult)",
    "insertText": "GetAsNoBackend()"
  },
  {
    "label": "GetAsInvalid()",
    "kind": "Method",
    "detail": "Function (} FPushResult)",
    "insertText": "GetAsInvalid()"
  },
  {
    "label": "GetAsFiltered()",
    "kind": "Method",
    "detail": "Function (} FPushResult)",
    "insertText": "GetAsFiltered(EPayloadFilterReason Reason)"
  },
  {
    "label": "GetAsAlreadyExists()",
    "kind": "Method",
    "detail": "Function (} FPushResult)",
    "insertText": "GetAsAlreadyExists()"
  },
  {
    "label": "GetAsPushed()",
    "kind": "Method",
    "detail": "Function (} FPushResult)",
    "insertText": "GetAsPushed()"
  },
  {
    "label": "WasPushed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WasPushed()"
  },
  {
    "label": "FPushResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPushResult(EStatus InStatus, EPayloadFilterReason InReason) : Status(InStatus) , FilterReason(InReason)"
  },
  {
    "label": "FPushRequest()",
    "kind": "Method",
    "detail": "Function (} EStatus Status = EStatus::Pending ; EPayloadFilterReason FilterReason = EPayloadFilterReason::None ; } ; struct FPushRequest {)",
    "insertText": "FPushRequest()"
  },
  {
    "label": "FPushRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPushRequest(const FIoHash& InIdentifier, const FCompressedBuffer& InPayload, const FString& InContext) : Identifier(InIdentifier) , Payload(InPayload) , Context(InContext)"
  },
  {
    "label": "FPushRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPushRequest(const FIoHash& InIdentifier, FCompressedBuffer&& InPayload, FString&& InContext) : Identifier(InIdentifier) , Payload(InPayload) , Context(InContext)"
  },
  {
    "label": "FPushRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPushRequest(const FIoHash& InIdentifier, IPayloadProvider& InProvider, FString&& InContext) : Identifier(InIdentifier) , Provider(&InProvider) , Context(InContext)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (} const FIoHash&)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "GetCompressedSize()",
    "kind": "Method",
    "detail": "Function (} else { return Payload .)",
    "insertText": "GetCompressedSize()"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (} } FCompressedBuffer)",
    "insertText": "GetPayload()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (} else { return Payload ; } } const FString&)",
    "insertText": "GetContext()"
  },
  {
    "label": "SetResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResult(FPushResult InResult)"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (Result = InResult ; } const FPushResult&)",
    "insertText": "GetResult()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Status = EStatus::Error ; Payload .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetPayload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPayload(const FCompressedBuffer& InPayload)"
  },
  {
    "label": "SetPayload()",
    "kind": "Method",
    "detail": "Function (Payload = InPayload ; Status = Payload ? EStatus::Success : EStatus::Error ; } void)",
    "insertText": "SetPayload(FCompressedBuffer&& InPayload)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Payload =)",
    "insertText": "MoveTemp(InPayload)"
  },
  {
    "label": "WasSuccessful()",
    "kind": "Method",
    "detail": "Function (Status = Payload ? EStatus::Success : EStatus::Error ; } private : FIoHash Identifier ; FCompressedBuffer Payload ; EStatus Status = EStatus::Pending ; } ; struct FVirtualizationResult { TArray<FText> Errors ; TArray<FText> DescriptionTags ; TArray<FString> VirtualizedPackages ; TArray<FString> CheckedOutPackages ; double TimeTaken = 0 . 0 ; bool)",
    "insertText": "WasSuccessful()"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddError(const FText& ErrorMsg)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Errors .)",
    "insertText": "Add(ErrorMsg)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddError(FText&& ErrorMsg)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Errors .)",
    "insertText": "Add(MoveTemp(ErrorMsg))"
  },
  {
    "label": "GetNumErrors()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumErrors()"
  },
  {
    "label": "FInitParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInitParams {)",
    "insertText": "FInitParams(FStringView InProjectName, const FConfigFile& InConfigFile) : ProjectName(InProjectName) , ConfigFile(InConfigFile)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} FStringView ProjectName ; const FConfigFile& ConfigFile ; } ; void)",
    "insertText": "Initialize(EInitializationFlags Flags)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FInitParams& InitParams, EInitializationFlags Flags)"
  },
  {
    "label": "ShouldInitializePreSlate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldInitializePreSlate()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (enum class EAnalyticsFlags : uint32 { None = 0,Flush = 1<<0 } ; using FAnalyticsRecordEvent = TTSMulticastDelegate<)",
    "insertText": "void(const FString&, const TArray<FAnalyticsEventAttribute>&, EAnalyticsFlags)"
  },
  {
    "label": "GetAnalyticsRecordEvent()",
    "kind": "Method",
    "detail": "Function (FAnalyticsRecordEvent&)",
    "insertText": "GetAnalyticsRecordEvent()"
  },
  {
    "label": "IVirtualizationSystem()",
    "kind": "Method",
    "detail": "Function (class IVirtualizationSystem { public :)",
    "insertText": "IVirtualizationSystem()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const FInitParams& InitParams)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetSystemName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSystemName()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IVirtualizationSystem&)",
    "insertText": "Get()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsPushingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPushingEnabled(EStorageType StorageType)"
  },
  {
    "label": "FilterPayload()",
    "kind": "Method",
    "detail": "Function (EPayloadFilterReason)",
    "insertText": "FilterPayload(const UObject* Owner)"
  },
  {
    "label": "AllowSubmitIfVirtualizationFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowSubmitIfVirtualizationFailed()"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushData(TArrayView<FPushRequest> Requests, EStorageType StorageType)"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushData(FPushRequest Request, EStorageType StorageType)"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PushData(const FIoHash& Id, const FCompressedBuffer& Payload, const FString& Context, EStorageType StorageType)"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (FPushRequest)",
    "insertText": "Request(Id, Payload, Context)"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PullData(TArrayView<FPullRequest> Requests)"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "PullData(const FIoHash& Id)"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (FPullRequest)",
    "insertText": "Request(Id)"
  },
  {
    "label": "FCompressedBuffer()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FCompressedBuffer()"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "PullData(FPullRequest Request)"
  },
  {
    "label": "QueryPayloadStatuses()",
    "kind": "Method",
    "detail": "Function (} EQueryResult)",
    "insertText": "QueryPayloadStatuses(TArrayView<const FIoHash> Ids, EStorageType StorageType, TArray<EPayloadStatus>& OutStatuses)"
  },
  {
    "label": "TryVirtualizePackages()",
    "kind": "Method",
    "detail": "Function (FVirtualizationResult Result =)",
    "insertText": "TryVirtualizePackages(PackagePaths, EVirtualizationOptions::None)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutDescriptionTags =)",
    "insertText": "MoveTemp(Result.DescriptionTags)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutErrors =)",
    "insertText": "MoveTemp(Result.Errors)"
  },
  {
    "label": "TryVirtualizePackages()",
    "kind": "Method",
    "detail": "Function (} FVirtualizationResult)",
    "insertText": "TryVirtualizePackages(TConstArrayView<FString> PackagePaths, EVirtualizationOptions Options)"
  },
  {
    "label": "TryRehydratePackages()",
    "kind": "Method",
    "detail": "Function (FRehydrationResult Result =)",
    "insertText": "TryRehydratePackages(PackagePaths, ERehydrationOptions::None)"
  },
  {
    "label": "TryRehydratePackages()",
    "kind": "Method",
    "detail": "Function (} FRehydrationResult)",
    "insertText": "TryRehydratePackages(TConstArrayView<FString> PackagePaths, ERehydrationOptions Options)"
  },
  {
    "label": "TryRehydratePackages()",
    "kind": "Method",
    "detail": "Function (ERehydrationResult)",
    "insertText": "TryRehydratePackages(TConstArrayView<FString> PackagePaths, uint64 PaddingAlignment, TArray<FText>& OutErrors, TArray<FSharedBuffer>& OutPackages, TArray<FRehydrationInfo>* OutInfo)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using GetPayloadActivityInfoFuncRef = TFunctionRef<)",
    "insertText": "void(const FString& DebugName, const FString& ConfigName, const FPayloadActivityInfo& PayloadInfo)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Stats.DebugName, Stats.ConfigName, Stats.PayloadActivity)"
  },
  {
    "label": "GetBackendStatistics()",
    "kind": "Method",
    "detail": "Function (} TArray<FBackendStats>)",
    "insertText": "GetBackendStatistics()"
  },
  {
    "label": "GetSystemStatistics()",
    "kind": "Method",
    "detail": "Function (FPayloadActivityInfo)",
    "insertText": "GetSystemStatistics()"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAnalytics(TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (/ using FOnNotification = TTSMulticastDelegate<)",
    "insertText": "void(ENotification, const FIoHash&)"
  },
  {
    "label": "GetNotificationEvent()",
    "kind": "Method",
    "detail": "Function (FOnNotification&)",
    "insertText": "GetNotificationEvent()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; namespace Private { class IVirtualizationSystemFactory : public IModularFeature { public : TUniquePtr<IVirtualizationSystem>)",
    "insertText": "Create()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "UE_REGISTER_VIRTUALIZATION_SYSTEM()",
    "kind": "Method",
    "detail": "Function (} ; } # define)",
    "insertText": "UE_REGISTER_VIRTUALIZATION_SYSTEM(SystemClass, SystemName)"
  },
  {
    "label": "Factory()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ FVirtualizationSystem # #)",
    "insertText": "Factory()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RegisterModularFeature(FName(\"VirtualizationSystem\"), this)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnregisterModularFeature(FName(\"VirtualizationSystem\"), this)"
  },
  {
    "label": "SyncPayloadSidecarFile()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ FVirtualizationSystem # # Factory FVirtualizationSystem # # Factory # # Instance ; namespace Experimental { class IVirtualizationSourceControlUtilities : public IModularFeature { public : bool)",
    "insertText": "SyncPayloadSidecarFile(const FPackagePath& PackagePath)"
  }
]