[
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "DxilResourceProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilResourceProperties"
  },
  {
    "label": "TypedProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypedProps"
  },
  {
    "label": "BasicProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BasicProps"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "DxilResourceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilResourceBase"
  },
  {
    "label": "DxilInst_AnnotateHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilInst_AnnotateHandle"
  },
  {
    "label": "DxilResourceProperties()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilConstants . h \" namespace llvm { class Constant ; class Type ; } namespace hlsl { struct DxilResourceProperties { struct TypedProps { uint8_t CompType ; uint8_t CompCount ; uint8_t SampleCount ; uint8_t Reserved3 ; } ; struct BasicProps { uint8_t ResourceKind ; uint8_t BaseAlignLog2 : 4 ; uint8_t IsUAV : 1 ; uint8_t IsROV : 1 ; uint8_t IsGloballyCoherent : 1 ; uint8_t SamplerCmpOrHasCounter : 1 ; uint8_t Reserved2 ; uint8_t Reserved3 ; } ; union { BasicProps Basic ; uint32_t RawDword0 ; } ; union { TypedProps Typed ; uint32_t StructStrideInBytes ; DXIL::SamplerFeedbackType SamplerFeedbackType ; uint32_t CBufferSizeInBytes ; uint32_t RawDword1 ; } ;)",
    "insertText": "DxilResourceProperties()"
  },
  {
    "label": "getResourceClass()",
    "kind": "Method",
    "detail": "Function (DXIL::ResourceClass)",
    "insertText": "getResourceClass()"
  },
  {
    "label": "getResourceKind()",
    "kind": "Method",
    "detail": "Function (DXIL::ResourceKind)",
    "insertText": "getResourceKind()"
  },
  {
    "label": "getCompType()",
    "kind": "Method",
    "detail": "Function (DXIL::ComponentType)",
    "insertText": "getCompType()"
  },
  {
    "label": "getElementStride()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getElementStride()"
  },
  {
    "label": "setResourceKind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setResourceKind(DXIL::ResourceKind RK)"
  },
  {
    "label": "isUAV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUAV()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const DxilResourceProperties &)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValid()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(DxilResourceProperties) == 2 * sizeof(uint32_t), \"update shader model and functions read/write \" \"DxilResourceProperties when size is changed\")"
  },
  {
    "label": "getAsConstant()",
    "kind": "Method",
    "detail": "Function (class ShaderModel ; class DxilResourceBase ; struct DxilInst_AnnotateHandle ; namespace resource_helper { llvm::Constant*)",
    "insertText": "getAsConstant(const DxilResourceProperties &, llvm::Type *Ty, const ShaderModel &)"
  },
  {
    "label": "loadPropsFromConstant()",
    "kind": "Method",
    "detail": "Function (DxilResourceProperties)",
    "insertText": "loadPropsFromConstant(const llvm::Constant &C)"
  },
  {
    "label": "loadPropsFromAnnotateHandle()",
    "kind": "Method",
    "detail": "Function (DxilResourceProperties)",
    "insertText": "loadPropsFromAnnotateHandle(DxilInst_AnnotateHandle &annotateHandle, const ShaderModel &)"
  },
  {
    "label": "loadPropsFromResourceBase()",
    "kind": "Method",
    "detail": "Function (DxilResourceProperties)",
    "insertText": "loadPropsFromResourceBase(const DxilResourceBase *)"
  },
  {
    "label": "tryMergeProps()",
    "kind": "Method",
    "detail": "Function (DxilResourceProperties)",
    "insertText": "tryMergeProps(DxilResourceProperties, DxilResourceProperties)"
  },
  {
    "label": "tryMergeProps()",
    "kind": "Method",
    "detail": "Function (llvm::Constant*)",
    "insertText": "tryMergeProps(const llvm::Constant *, const llvm::Constant *, llvm::Type *Ty, const ShaderModel &)"
  }
]