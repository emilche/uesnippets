[
  {
    "label": "TDynamicMeshTriangleAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicMeshTriangleAttribute"
  },
  {
    "label": "FDynamicMeshTriangleAttributeChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshTriangleAttributeChange"
  },
  {
    "label": "FChangeTriangleAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeTriangleAttribute"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "TDynamicMeshScalarTriangleAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicMeshScalarTriangleAttribute"
  },
  {
    "label": "FDynamicMeshTriangleAttributeChange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicAttribute . h \" namespace UE { namespace Geometry { template<AttribValueType,int AttribDimension> class TDynamicMeshTriangleAttribute ; template<AttribValueType,int AttribDimension> class FDynamicMeshTriangleAttributeChange : public FDynamicMeshAttributeChangeBase { private : struct FChangeTriangleAttribute { AttribValueType Data [ AttribDimension ] ; int TriangleID ; } ; TArray<FChangeTriangleAttribute> OldTriangleAttributes,NewTriangleAttributes ; public :)",
    "insertText": "FDynamicMeshTriangleAttributeChange()"
  },
  {
    "label": "SaveInitialTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveInitialTriangle(const FDynamicMeshAttributeBase* Attribute, int TriangleID)"
  },
  {
    "label": "StoreAllFinalTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreAllFinalTriangles(const FDynamicMeshAttributeBase* Attribute, const TArray<int>& TriangleIDs)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(FDynamicMeshAttributeBase* Attribute, bool bRevert)"
  },
  {
    "label": "TDynamicMeshTriangleAttribute()",
    "kind": "Method",
    "detail": "Function (} ; template<AttribValueType,int AttribDimension> class TDynamicMeshTriangleAttribute : public FDynamicMeshAttributeBase { protected : FDynamicMesh3* ParentMesh ; TDynamicVector<AttribValueType> AttribValues ; using Super = FDynamicMeshAttributeBase ; class FDynamicMesh3 ; class FDynamicMeshAttributeSet ; public :)",
    "insertText": "TDynamicMeshTriangleAttribute()"
  },
  {
    "label": "TDynamicMeshTriangleAttribute()",
    "kind": "Method",
    "detail": "Function (ParentMesh = nullptr ; })",
    "insertText": "TDynamicMeshTriangleAttribute(FDynamicMesh3* ParentMeshIn, bool bAutoInit = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParentMesh = ParentMeshIn ;)",
    "insertText": "if(bAutoInit)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "Reparent(FDynamicMesh3* ParentMeshIn)"
  },
  {
    "label": "GetParentMesh()",
    "kind": "Method",
    "detail": "Function (ParentMesh = ParentMeshIn ; } public : const FDynamicMesh3*)",
    "insertText": "GetParentMesh()"
  },
  {
    "label": "AttribDimension()",
    "kind": "Method",
    "detail": "Function (TDynamicMeshTriangleAttribute<AttribValueType,AttribDimension>* Matching = new TDynamicMeshTriangleAttribute<AttribValueType,)",
    "insertText": "AttribDimension(ParentMeshIn)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (ToFill ->)",
    "insertText": "Copy(*this)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyParentClassData(Copy)"
  },
  {
    "label": "MakeCompactCopy()",
    "kind": "Method",
    "detail": "Function (AttribValues = Copy . AttribValues ; } FDynamicMeshAttributeBase*)",
    "insertText": "MakeCompactCopy(const FCompactMaps& CompactMaps, FDynamicMesh3* ParentMeshIn)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (ToFill ->)",
    "insertText": "CompactCopy(CompactMaps, *this)"
  },
  {
    "label": "GetTriangleMapping()",
    "kind": "Method",
    "detail": "Function (const int ToTID = CompactMaps .)",
    "insertText": "GetTriangleMapping(TID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(ensure(ToTID <= TID))"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(TID, ToTID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} } AttribValues .)",
    "insertText": "Resize(ParentMesh->MaxTriangleID() * AttribDimension)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompactCopy(const FCompactMaps& CompactMaps, const TDynamicMeshTriangleAttribute<AttribValueType, AttribDimension>& ToCopy)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyParentClassData(ToCopy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (AttribValueType Data [ AttribDimension ] ;)",
    "insertText": "for(int TID = 0, NumTID = CompactMaps.NumTriangleMappings(); TID < NumTID; TID++)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (continue ; } ToCopy .)",
    "insertText": "GetValue(TID, Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(ToTID, Data)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Initialize(AttribValueType InitialValue = (AttribValueType)0)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "Fill(InitialValue)"
  },
  {
    "label": "SetNewValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewValue(int NewTriangleID, const AttribValueType* Data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int k = NewTriangleID* AttribDimension ;)",
    "insertText": "for(int i = 0; i < AttribDimension; ++i)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "InsertAt(Data[i], k + i)"
  },
  {
    "label": "CopyThroughMapping()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CopyThroughMapping(const TDynamicAttributeBase<FDynamicMesh3>* Source, const FMeshIndexMappings& Mapping)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (AttribValueType BufferData [ AttribDimension ] ; int BufferSize =)",
    "insertText": "sizeof(BufferData)"
  },
  {
    "label": "CopyOut()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CopyOut(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "CopyIn()",
    "kind": "Method",
    "detail": "Function (BufferData [ i ] = AttribValues [ k + i ] ; } return true ; } bool)",
    "insertText": "CopyIn(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ k + i ] = BufferData [ i ] ; } return true ; } void)",
    "insertText": "GetValue(int TriangleID, AttribValueType* Data)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Data [ i ] = AttribValues [ k + i ] ; } } template<AsType> void)",
    "insertText": "GetValue(int TriangleID, AsType& Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Data [ i ] = AttribValues [ k + i ] ; } } void)",
    "insertText": "SetValue(int TriangleID, const AttribValueType* Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ k + i ] = Data [ i ] ; } } template<AsType> void)",
    "insertText": "SetValue(int TriangleID, const AsType& Data)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ k + i ] = Data [ i ] ; } } void)",
    "insertText": "CopyValue(int FromTriangleID, int ToTriangleID)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "InsertAt(AttribValues[kA+i], kB+i)"
  },
  {
    "label": "IsBorderEdge()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsBorderEdge(int EdgeID, bool bMeshBoundaryIsBorder = true)"
  },
  {
    "label": "GetEdgeT()",
    "kind": "Method",
    "detail": "Function (FIndex2i EdgeTris = ParentMesh ->)",
    "insertText": "GetEdgeT(EdgeID)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "OnSplitEdge(const DynamicMeshInfo::FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(SplitInfo.OriginalTriangles.A, SplitInfo.NewTriangles.A)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(SplitInfo.OriginalTriangles.B, SplitInfo.NewTriangles.B)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnFlipEdge(const DynamicMeshInfo::FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCollapseEdge(const DynamicMeshInfo::FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPokeTriangle(const DynamicMeshInfo::FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(PokeInfo.OriginalTriangle, PokeInfo.NewTriangles.A)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(PokeInfo.OriginalTriangle, PokeInfo.NewTriangles.B)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMergeEdges(const DynamicMeshInfo::FMergeEdgesInfo& MergeInfo)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMergeVertices(const DynamicMeshInfo::FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSplitVertex(const DynamicMeshInfo::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "GetDefaultAttributeValue()",
    "kind": "Method",
    "detail": "Function (} AttribValueType)",
    "insertText": "GetDefaultAttributeValue()"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeAttribStoreIfNeeded(int TriangleID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "Resize(NeededSize, GetDefaultAttributeValue())"
  },
  {
    "label": "OnNewTriangle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnNewTriangle(int TriangleID, bool bInserted)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAttribStoreIfNeeded(TriangleID)"
  },
  {
    "label": "IsSameAs()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsSameAs(const TDynamicMeshTriangleAttribute<AttribValueType, AttribDimension>& Other, bool bIgnoreDataLayout)"
  },
  {
    "label": "GetTrianglesRefCounts()",
    "kind": "Method",
    "detail": "Function (const FRefCountVector::IndexIterator ItTidEnd = ParentMesh ->)",
    "insertText": "GetTrianglesRefCounts().EndIndices()"
  },
  {
    "label": "GetTrianglesRefCounts()",
    "kind": "Method",
    "detail": "Function (FRefCountVector::IndexIterator ItTidOther = Other . ParentMesh ->)",
    "insertText": "GetTrianglesRefCounts().BeginIndices()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const AttribValueType AttribValue = AttribValues [* ItTid* AttribDimension + i ] ; const AttribValueType AttribValueOther = Other . AttribValues [* ItTidOther* AttribDimension + i ] ;)",
    "insertText": "if(AttribValue != AttribValueOther)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Attr .)",
    "insertText": "Serialize(Ar, nullptr, false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FUE5MainStreamObjectVersion::GUID)"
  },
  {
    "label": "SerializeVector()",
    "kind": "Method",
    "detail": "Function (Ar<<AttribValues ; } else { auto)",
    "insertText": "SerializeVector(FArchive& Ar, auto& Vector, bool bUseCompression)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (Vector . template Serialize<true,)",
    "insertText": "true(Ar)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { Vector . template Serialize<true,)",
    "insertText": "false(Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ; Ar<<bUseCompression ;)",
    "insertText": "if(CompactMaps == nullptr || !CompactMaps->TriangleMapIsSet())"
  },
  {
    "label": "SerializeVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeVector(Ar, AttribValues, bUseCompression)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} else { TDynamicVector<AttribValueType> AttribValuesCompact ; AttribValuesCompact .)",
    "insertText": "SetNum(ParentMesh->TriangleCount() * AttribDimension)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TidCompact = 0 ;)",
    "insertText": "for(int32 Tid = 0, Num = AttribValues.Num() / AttribDimension; Tid < Num; ++Tid)"
  },
  {
    "label": "GetTriangleMapping()",
    "kind": "Method",
    "detail": "Function (const int32 TidMapping = CompactMaps ->)",
    "insertText": "GetTriangleMapping(Tid)"
  },
  {
    "label": "SerializeVector()",
    "kind": "Method",
    "detail": "Function (AttribValuesCompact [ TidCompact + + ] = AttribValues [ Tid* AttribDimension + i ] ; } } })",
    "insertText": "SerializeVector(Ar, AttribValuesCompact, bUseCompression)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (FChangeTriangleAttribute& Change = OldTriangleAttributes .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "AttribDimension()",
    "kind": "Method",
    "detail": "Function (Change . TriangleID = TriangleID ; const TDynamicMeshTriangleAttribute<AttribValueType,AttribDimension>* AttribCast = static_cast<const TDynamicMeshTriangleAttribute<AttribValueType,)",
    "insertText": "AttribDimension(Attribute)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (AttribCast ->)",
    "insertText": "GetValue(TriangleID, Change.Data)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (NewTriangleAttributes .)",
    "insertText": "Reserve(NewTriangleAttributes.Num() + TriangleIDs.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TArray<FChangeTriangleAttribute>* Changes = bRevert ?& OldTriangleAttributes :& NewTriangleAttributes ;)",
    "insertText": "for(const FChangeTriangleAttribute& Change : *Changes)"
  },
  {
    "label": "GetParentMesh()",
    "kind": "Method",
    "detail": "Function (bool bIsTriangle = AttribCast ->)",
    "insertText": "GetParentMesh()->IsTriangle(Change.TriangleID)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (AttribCast ->)",
    "insertText": "SetValue(Change.TriangleID, Change.Data)"
  },
  {
    "label": "TDynamicMeshScalarTriangleAttribute()",
    "kind": "Method",
    "detail": "Function (} } return true ; } template<RealType> class TDynamicMeshScalarTriangleAttribute : public TDynamicMeshTriangleAttribute<RealType,1> { public : using BaseType = TDynamicMeshTriangleAttribute<RealType,1> ; using BaseType::SetNewValue ; using BaseType::GetValue ; using BaseType::SetValue ;)",
    "insertText": "TDynamicMeshScalarTriangleAttribute() : BaseType()"
  },
  {
    "label": "TDynamicMeshScalarTriangleAttribute()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDynamicMeshScalarTriangleAttribute(FDynamicMesh3* ParentMeshIn) : BaseType(ParentMeshIn)"
  },
  {
    "label": "SetNewValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewValue(int NewTriangleID, RealType Value)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (this -> AttribValues .)",
    "insertText": "InsertAt(Value, NewTriangleID)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "GetValue(int TriangleID)"
  }
]