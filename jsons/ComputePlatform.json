[
  {
    "label": "FComputeEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeEvent"
  },
  {
    "label": "FComputeMemoryMappedFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeMemoryMappedFile"
  },
  {
    "label": "FComputeEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include<stdio . h> # include<stddef . h> # include<stdint . h> class FComputeEvent { public :)",
    "insertText": "FComputeEvent()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(const char* Name)"
  },
  {
    "label": "OpenExisting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenExisting(const char* Name)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Signal()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(int timeoutMs)"
  },
  {
    "label": "FComputeMemoryMappedFile()",
    "kind": "Method",
    "detail": "Function (private : void* Handle ; } ; class FComputeMemoryMappedFile { public :)",
    "insertText": "FComputeMemoryMappedFile()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(const char* Name, long long Capacity)"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetPointer()"
  }
]