[
  {
    "label": "TouchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TouchType"
  },
  {
    "label": "MappingState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MappingState"
  },
  {
    "label": "ControllerClassType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ControllerClassType"
  },
  {
    "label": "ButtonRemapType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ButtonRemapType"
  },
  {
    "label": "FAndroidInputDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidInputDeviceInfo"
  },
  {
    "label": "FAndroidGamepadDeviceMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidGamepadDeviceMapping"
  },
  {
    "label": "TouchInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TouchInput"
  },
  {
    "label": "FAndroidControllerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidControllerData"
  },
  {
    "label": "FAndroidControllerVibeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidControllerVibeState"
  },
  {
    "label": "FAndroidMessageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FAndroidMessageType"
  },
  {
    "label": "FDeferredAndroidMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredAndroidMessage"
  },
  {
    "label": "FAndroidInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroidInputInterface"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "MotionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MotionData"
  },
  {
    "label": "MouseEventType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MouseEventType"
  },
  {
    "label": "MouseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MouseData"
  },
  {
    "label": "FDeferredAndroidMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include<android / input . h> # include<android / keycodes . h> # include<android / api - level . h> # include \" GenericPlatform / ICursor . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Color . h \" # if __ANDROID_API__<1 3 enum { AMOTION_EVENT_AXIS_X = 0,AMOTION_EVENT_AXIS_Y = 1,AMOTION_EVENT_AXIS_PRESSURE = 2,AMOTION_EVENT_AXIS_SIZE = 3,AMOTION_EVENT_AXIS_TOUCH_MAJOR = 4,AMOTION_EVENT_AXIS_TOUCH_MINOR = 5,AMOTION_EVENT_AXIS_TOOL_MAJOR = 6,AMOTION_EVENT_AXIS_TOOL_MINOR = 7,AMOTION_EVENT_AXIS_ORIENTATION = 8,AMOTION_EVENT_AXIS_VSCROLL = 9,AMOTION_EVENT_AXIS_HSCROLL = 1 0,AMOTION_EVENT_AXIS_Z = 1 1,AMOTION_EVENT_AXIS_RX = 1 2,AMOTION_EVENT_AXIS_RY = 1 3,AMOTION_EVENT_AXIS_RZ = 1 4,AMOTION_EVENT_AXIS_HAT_X = 1 5,AMOTION_EVENT_AXIS_HAT_Y = 1 6,AMOTION_EVENT_AXIS_LTRIGGER = 1 7,AMOTION_EVENT_AXIS_RTRIGGER = 1 8,AMOTION_EVENT_AXIS_THROTTLE = 1 9,AMOTION_EVENT_AXIS_RUDDER = 2 0,AMOTION_EVENT_AXIS_WHEEL = 2 1,AMOTION_EVENT_AXIS_GAS = 2 2,AMOTION_EVENT_AXIS_BRAKE = 2 3,AMOTION_EVENT_AXIS_DISTANCE = 2 4,AMOTION_EVENT_AXIS_TILT = 2 5,AMOTION_EVENT_AXIS_GENERIC_1 = 3 2,AMOTION_EVENT_AXIS_GENERIC_2 = 3 3,AMOTION_EVENT_AXIS_GENERIC_3 = 3 4,AMOTION_EVENT_AXIS_GENERIC_4 = 3 5,AMOTION_EVENT_AXIS_GENERIC_5 = 3 6,AMOTION_EVENT_AXIS_GENERIC_6 = 3 7,AMOTION_EVENT_AXIS_GENERIC_7 = 3 8,AMOTION_EVENT_AXIS_GENERIC_8 = 3 9,AMOTION_EVENT_AXIS_GENERIC_9 = 4 0,AMOTION_EVENT_AXIS_GENERIC_10 = 4 1,AMOTION_EVENT_AXIS_GENERIC_11 = 4 2,AMOTION_EVENT_AXIS_GENERIC_12 = 4 3,AMOTION_EVENT_AXIS_GENERIC_13 = 4 4,AMOTION_EVENT_AXIS_GENERIC_14 = 4 5,AMOTION_EVENT_AXIS_GENERIC_15 = 4 6,AMOTION_EVENT_AXIS_GENERIC_16 = 4 7,} ; enum { AINPUT_SOURCE_CLASS_JOYSTICK = 0 x00000010,} ; enum { AINPUT_SOURCE_GAMEPAD = 0 x00000400 | AINPUT_SOURCE_CLASS_BUTTON,AINPUT_SOURCE_JOYSTICK = 0 x01000000 | AINPUT_SOURCE_CLASS_JOYSTICK,} ; # endif enum TouchType { TouchBegan,TouchMoved,TouchEnded,} ; enum MappingState { Unassigned = 0,ToValidate,Valid } ; enum ControllerClassType { Generic,XBoxWired,XBoxWireless,PlaystationWireless } ; enum ButtonRemapType { Normal,XBox,PS4,PS5,PS5New } ; struct FAndroidInputDeviceInfo { int32 DeviceId ; int32 VendorId ; int32 ProductId ; int32 ControllerId ; FString Name ; FString Descriptor ; int32 FeedbackMotorCount ; } ; struct FAndroidGamepadDeviceMapping { FAndroidInputDeviceInfo DeviceInfo ; MappingState DeviceState ; ControllerClassType ControllerClass ; ButtonRemapType ButtonRemapping ; float LTAnalogRangeMinimum ; float RTAnalogRangeMinimum ; bool bSupportsHat ; bool bTriggersUseThresholdForClick ; bool bMapL1R1ToTriggers ; bool bMapZRZToTriggers ; bool bRightStickZRZ ; bool bRightStickRXRY ; bool bMapRXRYToTriggers ; } ; struct TouchInput { int32 DeviceId ; int32 Handle ; TouchType Type ; FVector2D LastPosition ; FVector2D Position ; } ; # define MAX_NUM_CONTROLLERS 8 # define MAX_NUM_PHYSICAL_CONTROLLER_BUTTONS 1 8 # define MAX_NUM_VIRTUAL_CONTROLLER_BUTTONS 8 # define MAX_NUM_CONTROLLER_BUTTONS MAX_NUM_PHYSICAL_CONTROLLER_BUTTONS + MAX_NUM_VIRTUAL_CONTROLLER_BUTTONS # define MAX_DEFERRED_MESSAGE_QUEUE_SIZE 1 2 8 struct FAndroidControllerData { int32 DeviceId ; bool ButtonStates [ MAX_NUM_CONTROLLER_BUTTONS ] ; double NextRepeatTime [ MAX_NUM_CONTROLLER_BUTTONS ] ; float LXAnalog ; float LYAnalog ; float RXAnalog ; float RYAnalog ; float LTAnalog ; float RTAnalog ; } ; struct FAndroidControllerVibeState { FForceFeedbackValues VibeValues ; int32 LeftIntensity ; int32 RightIntensity ; double LastVibeUpdateTime ; } ; enum FAndroidMessageType { MessageType_KeyDown,MessageType_KeyUp,} ; struct FDeferredAndroidMessage {)",
    "insertText": "FDeferredAndroidMessage()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FAndroidMessageType messageType ; union { struct { int32 keyId ; int32 unichar ; uint32 modifier ; bool isRepeat ; } KeyEventData ; } ; } ; class FAndroidInputInterface : public IInputInterface { public : TSharedRef<FAndroidInputInterface>)",
    "insertText": "Create(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler, const TSharedPtr< ICursor >& InCursor)"
  },
  {
    "label": "FAndroidInputInterface()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FAndroidInputInterface()"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageHandler(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "QueueTouchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTouchInput(const TArray<TouchInput>& InTouchEvents)"
  },
  {
    "label": "ResetGamepadAssignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGamepadAssignments()"
  },
  {
    "label": "ResetGamepadAssignmentToController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGamepadAssignmentToController(int32 ControllerId)"
  },
  {
    "label": "IsControllerAssignedToGamepad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControllerAssignedToGamepad(int32 ControllerId)"
  },
  {
    "label": "GetGamepadControllerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGamepadControllerName(int32 ControllerId)"
  },
  {
    "label": "JoystickAxisEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoystickAxisEvent(int32 deviceId, int32 axisId, float axisValue)"
  },
  {
    "label": "JoystickButtonEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoystickButtonEvent(int32 deviceId, int32 buttonId, bool buttonDown)"
  },
  {
    "label": "GetAlternateKeyEventForMouse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAlternateKeyEventForMouse(int32 deviceID, int32 buttonID)"
  },
  {
    "label": "MouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMoveEvent(int32 deviceId, float absoluteX, float absoluteY, float deltaX, float deltaY)"
  },
  {
    "label": "MouseWheelEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseWheelEvent(int32 deviceId, float wheelDelta)"
  },
  {
    "label": "MouseButtonEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseButtonEvent(int32 deviceId, int32 buttonId, bool buttonDown)"
  },
  {
    "label": "DeferMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferMessage(const FDeferredAndroidMessage& DeferredMessage)"
  },
  {
    "label": "QueueMotionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMotionData(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration)"
  },
  {
    "label": "SetForceFeedbackChannelValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value)"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &values)"
  },
  {
    "label": "SetHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticFeedbackValues(int32 ControllerId, int32 Hand, const FHapticFeedbackValues& Values)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  },
  {
    "label": "SetGamepadsAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGamepadsAllowed(bool bAllowed)"
  },
  {
    "label": "SetGamepadsBlockDeviceFeedback()",
    "kind": "Method",
    "detail": "Function (bAllowControllers = bAllowed ; } void)",
    "insertText": "SetGamepadsBlockDeviceFeedback(bool bBlock)"
  },
  {
    "label": "IsGamepadAttached()",
    "kind": "Method",
    "detail": "Function (bControllersBlockDeviceFeedback = bBlock ; } bool)",
    "insertText": "IsGamepadAttached()"
  },
  {
    "label": "AddExternalInputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalInputDevice(TSharedPtr<class IInputDevice> InputDevice)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<ICursor>)",
    "insertText": "GetCursor()"
  },
  {
    "label": "GetDeviceMapping()",
    "kind": "Method",
    "detail": "Function (public : FAndroidGamepadDeviceMapping*)",
    "insertText": "GetDeviceMapping(int32 ControllerId)"
  },
  {
    "label": "GetControllerIndex()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetControllerIndex(int32 deviceId)"
  },
  {
    "label": "FindExistingDevice()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindExistingDevice(int32 deviceId)"
  },
  {
    "label": "UpdateVibeMotors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVibeMotors()"
  },
  {
    "label": "UpdateControllerVibeMotors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateControllerVibeMotors(int32 ControllerId)"
  }
]