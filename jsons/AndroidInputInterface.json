[
  {
    "label": "TouchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TouchType"
  },
  {
    "label": "MappingState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MappingState"
  },
  {
    "label": "ControllerClassType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ControllerClassType"
  },
  {
    "label": "ButtonRemapType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ButtonRemapType"
  },
  {
    "label": "FAndroidInputDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidInputDeviceInfo"
  },
  {
    "label": "FAndroidGamepadDeviceMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidGamepadDeviceMapping"
  },
  {
    "label": "TouchInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TouchInput"
  },
  {
    "label": "FAndroidControllerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidControllerData"
  },
  {
    "label": "FAndroidControllerVibeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidControllerVibeState"
  },
  {
    "label": "FAndroidMessageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FAndroidMessageType"
  },
  {
    "label": "FDeferredAndroidMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredAndroidMessage"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAndroidInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroidInputInterface"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "MotionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MotionData"
  },
  {
    "label": "MouseEventType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MouseEventType"
  },
  {
    "label": "MouseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MouseData"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageHandler( const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler )"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick( float DeltaTime )"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "QueueTouchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTouchInput(const TArray<TouchInput>& InTouchEvents)"
  },
  {
    "label": "ResetGamepadAssignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGamepadAssignments()"
  },
  {
    "label": "ResetGamepadAssignmentToController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGamepadAssignmentToController(int32 ControllerId)"
  },
  {
    "label": "IsControllerAssignedToGamepad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControllerAssignedToGamepad(int32 ControllerId)"
  },
  {
    "label": "GetGamepadControllerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGamepadControllerName(int32 ControllerId)"
  },
  {
    "label": "JoystickAxisEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoystickAxisEvent(int32 deviceId, int32 axisId, float axisValue)"
  },
  {
    "label": "JoystickButtonEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoystickButtonEvent(int32 deviceId, int32 buttonId, bool buttonDown)"
  },
  {
    "label": "GetAlternateKeyEventForMouse()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAlternateKeyEventForMouse(int32 deviceID, int32 buttonID)"
  },
  {
    "label": "MouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMoveEvent(int32 deviceId, float absoluteX, float absoluteY, float deltaX, float deltaY)"
  },
  {
    "label": "MouseWheelEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseWheelEvent(int32 deviceId, float wheelDelta)"
  },
  {
    "label": "MouseButtonEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseButtonEvent(int32 deviceId, int32 buttonId, bool buttonDown)"
  },
  {
    "label": "DeferMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferMessage(const FDeferredAndroidMessage& DeferredMessage)"
  },
  {
    "label": "QueueMotionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMotionData(const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration)"
  },
  {
    "label": "AddExternalInputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalInputDevice(TSharedPtr<class IInputDevice> InputDevice)"
  },
  {
    "label": "FAndroidInputInterface()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FAndroidInputInterface( const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler, const TSharedPtr< ICursor >& InCursor)"
  },
  {
    "label": "GetControllerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetControllerIndex(int32 deviceId)"
  },
  {
    "label": "FindExistingDevice()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindExistingDevice(int32 deviceId)"
  },
  {
    "label": "UpdateVibeMotors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVibeMotors()"
  },
  {
    "label": "UpdateControllerVibeMotors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateControllerVibeMotors(int32 ControllerId)"
  }
]