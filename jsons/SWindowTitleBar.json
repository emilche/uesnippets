[
  {
    "label": "SAppIconWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAppIconWidget"
  },
  {
    "label": "SWindowTitleBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindowTitleBar"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Animation / CurveSequence . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SOverlay . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / SWindow . h \" # include \" Application / SlateApplicationBase . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SSpacer . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SButton . h \" # include \" Framework / MetaData / DriverMetaData . h \" namespace SWindowTitleBarDefs { const float WindowFlashFrequency = 5 . 5 f ; const float WindowFlashDuration = 1 . 0 f ; } class SAppIconWidget : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SAppIconWidget ) : _IconColorAndOpacity( FLinearColor::White)"
  },
  {
    "label": "NSLOCTEXT()",
    "kind": "Method",
    "detail": "Function (_AccessibleText =)",
    "insertText": "NSLOCTEXT(\"AppIconWidget\", \"System\", \"System Menu\")"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FSlateColor, IconColorAndOpacity ) SLATE_END_ARGS( ) void Construct( const FArguments& Args)"
  },
  {
    "label": "SetCanTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanTick(false)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IconImage =)",
    "insertText": "Get().MakeImage( FSlateApplicationBase::Get().GetAppIcon(), Args._IconColorAndOpacity, EVisibility::HitTestInvisible)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot .)",
    "insertText": "Padding(FAppStyle::Get().GetMargin(\"AppIconPadding\")) [ IconImage.ToSharedRef()"
  },
  {
    "label": "SetIcon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIcon(const FSlateBrush* InIcon, const FMargin& InIconPadding)"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (ChildSlot .)",
    "insertText": "Padding(InIconPadding)"
  },
  {
    "label": "SetImage()",
    "kind": "Method",
    "detail": "Function (IconImage ->)",
    "insertText": "SetImage(InIcon)"
  },
  {
    "label": "GetWindowZoneOverride()",
    "kind": "Method",
    "detail": "Function (} EWindowZone::Type)",
    "insertText": "GetWindowZoneOverride()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FWindowStyle, Style) SLATE_ARGUMENT(bool, ShowAppIcon) SLATE_ATTRIBUTE(FText, Title) SLATE_ATTRIBUTE(FText, CloseButtonToolTipText) SLATE_END_ARGS() public: SLATE_API void Construct( const FArguments& InArgs, const TSharedRef<SWindow>& InWindow, const TSharedPtr<SWidget>& InCenterContent, EHorizontalAlignment InCenterContentAlignment)"
  },
  {
    "label": "UpdateWindowMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowMenu(TSharedPtr<SWidget> MenuContent)"
  },
  {
    "label": "UpdateBackgroundContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBackgroundContent(TSharedPtr<SWidget> BackgroundContent)"
  },
  {
    "label": "SetAllowMenuBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowMenuBar(bool bInAllowMenuBar)"
  },
  {
    "label": "GetFlashValue()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "GetFlashValue()"
  },
  {
    "label": "GetLerp()",
    "kind": "Method",
    "detail": "Function (float Lerp = TitleFlashSequence .)",
    "insertText": "GetLerp()"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (const float SinRateMultiplier = 2 . 0 f* PI* SWindowTitleBarDefs::WindowFlashDuration* SWindowTitleBarDefs::WindowFlashFrequency ; float SinTerm = 0 . 5)",
    "insertText": "f(FMath::Sin( Lerp * SinRateMultiplier ) + 1.0f)"
  },
  {
    "label": "MakeTitleBarContentWidgets()",
    "kind": "Method",
    "detail": "Function (float FadeTerm = 1 . 0 f - Lerp ; return SinTerm* FadeTerm ; } return 0 . 0 f ; } void)",
    "insertText": "MakeTitleBarContentWidgets(TSharedPtr< SWidget >& OutLeftContent, TSharedPtr< SWidget >& OutRightContent)"
  },
  {
    "label": "MakeTitleBarContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTitleBarContent(TSharedPtr<SWidget> CenterContent, EHorizontalAlignment CenterContentAlignment)"
  },
  {
    "label": "GetWindowTitleContentColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetWindowTitleContentColor()"
  },
  {
    "label": "CloseButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (} private : FReply)",
    "insertText": "CloseButton_OnClicked()"
  },
  {
    "label": "GetCloseImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCloseImage()"
  },
  {
    "label": "MaximizeRestoreButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MaximizeRestoreButton_OnClicked()"
  },
  {
    "label": "GetMaximizeRestoreImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetMaximizeRestoreImage()"
  },
  {
    "label": "MinimizeButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MinimizeButton_OnClicked()"
  },
  {
    "label": "GetMinimizeImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetMinimizeImage()"
  },
  {
    "label": "GetWindowTitlebackgroundImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetWindowTitlebackgroundImage()"
  },
  {
    "label": "GetWindowFlashVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetWindowFlashVisibility()"
  },
  {
    "label": "GetWindowTitleAreaColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetWindowTitleAreaColor()"
  },
  {
    "label": "HandleWindowTitleText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleWindowTitleText()"
  },
  {
    "label": "GetMaximizeButtonToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMaximizeButtonToolTip()"
  }
]