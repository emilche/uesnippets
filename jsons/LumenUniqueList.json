[
  {
    "label": "TSparseUniqueList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSparseUniqueList"
  },
  {
    "label": "FUniqueIndexList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueIndexList"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Experimental / Containers / SherwoodHashTable . h \" template<ElementType,Allocator> struct TSparseUniqueList { void)",
    "insertText": "Add(ElementType Element)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bIsAlreadyInSet = false ; Set .)",
    "insertText": "Add(Element, &bIsAlreadyInSet)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Add(Element)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } TArray<ElementType,Allocator> Array ; Experimental::TSherwoodSet<ElementType> Set ; } ; struct FUniqueIndexList { public : void)",
    "insertText": "Add(int32 Index)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const int32 NewSize =)",
    "insertText": "Align(Index + 1, 64)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IndicesMarkedToUpdate .)",
    "insertText": "Add(0, NewSize - IndicesMarkedToUpdate.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!IndicesMarkedToUpdate[Index])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Add(Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (IndicesMarkedToUpdate [ Index ] = true ; } } int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 Slack)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "end()"
  }
]