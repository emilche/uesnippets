[
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FOrientedBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOrientedBox"
  },
  {
    "label": "TEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnum"
  },
  {
    "label": "TEnumAsByte",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnumAsByte"
  },
  {
    "label": "TUnderlyingType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUnderlyingType"
  },
  {
    "label": "FAttributeKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeKey"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TAttributeTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAttributeTypeTraits"
  },
  {
    "label": "TSpecializeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpecializeType"
  },
  {
    "label": "FAttributeStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributeStorage"
  },
  {
    "label": "TAttributeHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttributeHandle"
  },
  {
    "label": "FAttributeAllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeAllocationInfo"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / UnrealMemory . h \" # include \" Internationalization / Text . h \" # include \" Math / Box . h \" # include \" Math / Box2D . h \" # include \" Math / BoxSphereBounds . h \" # include \" Math / Color . h \" # include \" Math / Float16 . h \" # include \" Math / IntPoint . h \" # include \" Math / IntRect . h \" # include \" Math / IntVector . h \" # include \" Math / Matrix . h \" # include \" Math / Plane . h \" # include \" Math / Quat . h \" # include \" Math / RandomStream . h \" # include \" Math / Rotator . h \" # include \" Math / Sphere . h \" # include \" Math / Transform . h \" # include \" Math / TwoVectors . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector2DHalf . h \" # include \" Math / Vector4 . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Guid . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / StringFormatArg . h \" # include \" Misc / Timespan . h \" # include \" Serialization / Archive . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / SoftObjectPath . h \" # include<type_traits> struct FFrameTime ; struct FOrientedBox ; template<class TEnum> class TEnumAsByte ; namespace UE { namespace Interchange { namespace Private { template<T,Enable = void> struct TUnderlyingType { } ; template<T> struct TUnderlyingType<T,std::enable_if<std::is_enum<T>::value>::type> { using type = std::underlying_type<T>::type ; } ; } struct FAttributeKey { FString Key ;)",
    "insertText": "FAttributeKey()"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeKey(const FAttributeKey& Other)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeKey(FAttributeKey&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAttributeKey&)",
    "insertText": "operator(const FAttributeKey&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAttributeKey&)",
    "insertText": "operator(FAttributeKey&&)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeKey(const FName& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Key = Other .)",
    "insertText": "ToString()"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributeKey(const FStringView& Other)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (Key = Other ; })",
    "insertText": "FAttributeKey(const FString& Other)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (Key = Other ; })",
    "insertText": "FAttributeKey(FString&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Key =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributeKey(const FText& Other)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributeKey(const TCHAR* Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Key = Other ; } FAttributeKey&)",
    "insertText": "operator(const FName& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Key = Other ; return* this ; } FAttributeKey&)",
    "insertText": "operator(FString&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Key = Other ; return* this ; } bool)",
    "insertText": "operator(const FAttributeKey& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FAttributeKey& AttributeKey)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; using::GetTypeHash ; uint32)",
    "insertText": "GetTypeHash(const FAttributeKey& AttributeKey)"
  },
  {
    "label": "AttributeTypeToString()",
    "kind": "Method",
    "detail": "Function (} enum class EAttributeTypes : int32 { None = 0,Bool = 1,ByteArray = 2,ByteArray64 = 3,Color = 4,DateTime = 5,Double = 6,Enum = 7,Float = 8,Guid = 9,Int8 = 1 0,Int16 = 1 1,Int32 = 1 2,Int64 = 1 3,IntRect = 1 4,LinearColor = 1 5,Name = 1 6,RandomStream = 1 7,String = 1 8,Timespan = 1 9,TwoVectors = 2 0,UInt8 = 2 1,UInt16 = 2 2,UInt32 = 2 3,UInt64 = 2 4,Vector2d = 2 5,IntPoint = 2 6,IntVector = 2 7,Vector2DHalf = 2 8,Float16 = 2 9,OrientedBox = 3 0,FrameNumber = 3 1,FrameRate = 3 2,FrameTime = 3 3,SoftObjectPath = 3 4,Matrix44f = 3 5,Matrix44d = 3 6,Plane4f = 3 7,Plane4d = 3 8,Quat4f = 3 9,Quat4d = 4 0,Rotator3f = 4 1,Rotator3d = 4 2,Transform3f = 4 3,Transform3d = 4 4,Vector3f = 4 5,Vector3d = 4 6,Vector2f = 4 7,Vector4f = 4 8,Vector4d = 4 9,Box2f = 5 0,Box2D = 5 1,Box3f = 5 2,Box3d = 5 3,BoxSphereBounds3f = 5 4,BoxSphereBounds3d = 5 5,Sphere3f = 5 6,Sphere3d = 5 7,Max = 5 8 } ; FString)",
    "insertText": "AttributeTypeToString(EAttributeTypes AttributeType)"
  },
  {
    "label": "StringToAttributeType()",
    "kind": "Method",
    "detail": "Function (EAttributeTypes)",
    "insertText": "StringToAttributeType(const FString& AttributeTypeString)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (template<T,Enable = void> struct TAttributeTypeTraits { EAttributeTypes)",
    "insertText": "GetType()"
  },
  {
    "label": "AttributeValueToString()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> FString)",
    "insertText": "AttributeValueToString(const ValueType& Value)"
  },
  {
    "label": "Operation_Error_WrongType()",
    "kind": "Method",
    "detail": "Function (} enum class EAttributeStorageResult : uint64 { None = 0 x0,Operation_Success = 0 x1,)",
    "insertText": "Operation_Error_WrongType(0x1 << 20), Operation_Error_WrongSize = (0x1 << 21), Operation_Error_AttributeAllocationCorrupted = (0x1 << 22), Operation_Error_CannotFoundKey = (0x1 << 23), Operation_Error_CannotRemoveAttribute = (0x1 << 24), Operation_Error_CannotOverrideAttribute = (0x1 << 25), Operation_Error_InvalidStorage = (0x1 << 26), Operation_Error_InvalidMultiSizeValueData = (0x1 << 27)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EAttributeStorageResult) FORCEINLINE bool HasAttributeStorageResult(const EAttributeStorageResult Result, const EAttributeStorageResult RefResult)"
  },
  {
    "label": "IsAttributeStorageResultSuccess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAttributeStorageResultSuccess(const EAttributeStorageResult Result)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogAttributeStorageErrors(const EAttributeStorageResult Result, const FString OperationName, const FAttributeKey AttributeKey)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EAttributeStorageAddOptions : uint32 { None = 0 x0,Option_Override = 0 x1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAttributeStorageAddOptions) FORCEINLINE bool HasAttributeStorageAddOption(const EAttributeStorageAddOptions Options, const EAttributeStorageAddOptions RefOptions)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} enum class EAttributeProperty : uint32 { None = 0 x0,NoHash = 0 x1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAttributeProperty) FORCEINLINE bool HasAttributeProperty(const EAttributeProperty PropertyA, const EAttributeProperty PropertyB)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<T> struct TSpecializeType { typedef T Type ; } ; class FAttributeStorage { public : template<T> class TAttributeHandle {)",
    "insertText": "static_assert(TAttributeTypeTraits<T>::GetType() != EAttributeTypes::None, \"Unsupported attribute type\")"
  },
  {
    "label": "TAttributeHandle()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TAttributeHandle() : AttributeStorage(nullptr) , Key()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} EAttributeStorageResult)",
    "insertText": "Get(T& Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} return EAttributeStorageResult::Operation_Error_InvalidStorage ; } EAttributeStorageResult)",
    "insertText": "Set(const T& Value)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} return EAttributeStorageResult::Operation_Error_InvalidStorage ; } const FAttributeKey&)",
    "insertText": "GetKey()"
  },
  {
    "label": "FAttributeStorage()",
    "kind": "Method",
    "detail": "Function (AttributeStorage = const_cast<)",
    "insertText": "FAttributeStorage(InAttributeStorage)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Key = InKey ;)",
    "insertText": "if(AttributeStorage == nullptr)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAttributeStorageErrors(EAttributeStorageResult::Operation_Error_InvalidStorage, TEXT(\"GetAttributeHandle\"), Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!AttributeStorage->ContainAttribute(Key))"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAttributeStorageErrors(EAttributeStorageResult::Operation_Error_CannotFoundKey, TEXT(\"GetAttributeHandle\"), Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AttributeStorage->GetAttributeType(Key) != TAttributeTypeTraits<T>::GetType())"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAttributeStorageErrors(EAttributeStorageResult::Operation_Error_WrongType, TEXT(\"GetAttributeHandle\"), Key)"
  },
  {
    "label": "FAttributeStorage()",
    "kind": "Method",
    "detail": "Function (} } } FAttributeStorage ; } ;)",
    "insertText": "FAttributeStorage()"
  },
  {
    "label": "FAttributeStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeStorage(const FAttributeStorage& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAttributeStorage&)",
    "insertText": "operator(const FAttributeStorage& Other)"
  },
  {
    "label": "RegisterAttribute()",
    "kind": "Method",
    "detail": "Function (template<T> EAttributeStorageResult)",
    "insertText": "RegisterAttribute(const FAttributeKey& ElementAttributeKey, const T& DefaultValue, EAttributeProperty AttributeProperty = EAttributeProperty::None)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&StorageMutex)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (const uint64 ValueSize =)",
    "insertText": "GetValueSize(DefaultValue)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FAttributeAllocationInfo* AttributeAllocationInfo = AttributeAllocationTable .)",
    "insertText": "Find(ElementAttributeKey)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (AttributeAllocationInfo -> Type = ValueType ; AttributeAllocationInfo -> Size = ValueSize ; AttributeAllocationInfo -> Offset = AttributeStorage .)",
    "insertText": "AddZeroed(ValueSize)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} AttributeAllocationInfo -> Property = AttributeProperty ; const EAttributeStorageResult Result =)",
    "insertText": "SetAttribute(AttributeAllocationInfo, DefaultValue)"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAttribute(ElementAttributeKey)"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (} return Result ; } EAttributeStorageResult)",
    "insertText": "UnregisterAttribute(const FAttributeKey& ElementAttributeKey)"
  },
  {
    "label": "GetAttributeHandle()",
    "kind": "Method",
    "detail": "Function (template<T> TAttributeHandle<T>)",
    "insertText": "GetAttributeHandle(const FAttributeKey& ElementAttributeKey)"
  },
  {
    "label": "AttributeHandle()",
    "kind": "Method",
    "detail": "Function (TAttributeHandle<T>)",
    "insertText": "AttributeHandle(ElementAttributeKey, this)"
  },
  {
    "label": "ContainAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainAttribute(const FAttributeKey& ElementAttributeKey)"
  },
  {
    "label": "GetAttributeKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAttributeKeys(TArray<FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "GetAttributeHash()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetAttributeHash(const FAttributeKey& ElementAttributeKey)"
  },
  {
    "label": "GetAttributeHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAttributeHash(const FAttributeKey& ElementAttributeKey, FGuid& OutGuid)"
  },
  {
    "label": "GetStorageHash()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetStorageHash()"
  },
  {
    "label": "CompareStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareStorage(const FAttributeStorage& BaseStorage, const FAttributeStorage& VersionStorage, TArray<FAttributeKey>& RemovedAttributes, TArray<FAttributeKey>& AddedAttributes, TArray<FAttributeKey>& ModifiedAttributes)"
  },
  {
    "label": "CopyStorageAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorageAttributes(const FAttributeStorage& SourceStorage, FAttributeStorage& DestinationStorage, const TArray<FAttributeKey>& AttributeKeys)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FAttributeStorage& Storage)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Ar<<Storage . FragmentedMemoryCost ; Ar<<Storage . DefragRatio ; Ar<<Storage . AttributeAllocationTable ; Ar<<Storage . AttributeStorage ; return Ar ; } void)",
    "insertText": "Reserve(int64 NewAttributeCount, int64 NewStorageSize)"
  },
  {
    "label": "FAttributeAllocationInfo()",
    "kind": "Method",
    "detail": "Function (protected : struct FAttributeAllocationInfo {)",
    "insertText": "FAttributeAllocationInfo()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} uint64 Offset = 0 ; uint64 Size = 0 ; EAttributeTypes Type = EAttributeTypes::None ; EAttributeProperty Property = EAttributeProperty::None ; FGuid Hash =)",
    "insertText": "FGuid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FAttributeAllocationInfo& Other)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (Ar<<AttributeAllocationInfo . Offset ; Ar<<AttributeAllocationInfo . Size ; Ar<<AttributeAllocationInfo . Type ; Ar<<AttributeAllocationInfo . Property ; Ar<<AttributeAllocationInfo . Hash ; return Ar ; } } ; template<T> EAttributeStorageResult)",
    "insertText": "SetAttribute(const FAttributeKey& ElementAttributeKey, const T& Value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> EAttributeStorageResult)",
    "insertText": "SetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const T& Value)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> EAttributeStorageResult)",
    "insertText": "GetAttribute(const FAttributeKey& ElementAttributeKey, T& OutValue)"
  },
  {
    "label": "DefragInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DefragInternal()"
  },
  {
    "label": "GetValueHash()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetValueHash(const uint8* Value, uint64 ValueSize)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (template<T> uint64)",
    "insertText": "GetValueSize(const T& Value)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> EAttributeStorageResult)",
    "insertText": "SetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const T& Value, TSpecializeType<T>)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (const uint64 ValueSize =)",
    "insertText": "GetValueSize(Value)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint8* StorageData = AttributeStorage .)",
    "insertText": "GetData()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&StorageData[AttributeAllocationInfo->Offset], &Value, ValueSize)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} EAttributeStorageResult)",
    "insertText": "SetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const TArray64<uint8>& Value, TSpecializeType<TArray64<uint8> >)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} EAttributeStorageResult)",
    "insertText": "SetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const FString& Value, TSpecializeType<FString >)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} EAttributeStorageResult)",
    "insertText": "SetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const FName& Value, TSpecializeType<FName >)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} EAttributeStorageResult)",
    "insertText": "SetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const FSoftObjectPath& Value, TSpecializeType<FSoftObjectPath >)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> EAttributeStorageResult)",
    "insertText": "GetAttribute(const FAttributeKey& ElementAttributeKey, T& OutValue, TSpecializeType<T>)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (const uint64 ValueSize =)",
    "insertText": "GetValueSize(OutValue)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&OutValue, &StorageData[AttributeAllocationInfo->Offset], AttributeAllocationInfo->Size)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (} EAttributeStorageResult)",
    "insertText": "GetAttribute(const FAttributeKey& ElementAttributeKey, TArray64<uint8>& OutValue, TSpecializeType<TArray64<uint8> >)"
  },
  {
    "label": "ExtractFStringAttributeFromStorage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtractFStringAttributeFromStorage(const uint8* StorageData, const FAttributeAllocationInfo* AttributeAllocationInfo, FString& OutValue)"
  },
  {
    "label": "GetFStringViewAttributeFromStorage()",
    "kind": "Method",
    "detail": "Function (const FStringView)",
    "insertText": "GetFStringViewAttributeFromStorage(const uint8* StorageData, const FAttributeAllocationInfo* AttributeAllocationInfo)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (EAttributeStorageResult)",
    "insertText": "GetAttribute(const FAttributeKey& ElementAttributeKey, FString& OutValue, TSpecializeType<FString >)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (EAttributeStorageResult)",
    "insertText": "GetAttribute(const FAttributeKey& ElementAttributeKey, FName& OutValue, TSpecializeType<FName >)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (EAttributeStorageResult)",
    "insertText": "GetAttribute(const FAttributeKey& ElementAttributeKey, FSoftObjectPath& OutValue, TSpecializeType<FSoftObjectPath >)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (template<T> uint64)",
    "insertText": "GetValueSize(const T& Value, TSpecializeType<T>)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetValueSize(const FString& Value, TSpecializeType<FString >)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetValueSize(const FName& Value, TSpecializeType<FName>)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetValueSize(const FSoftObjectPath& Value, TSpecializeType<FSoftObjectPath>)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetValueSize(const TArray<uint8>& Value, TSpecializeType<TArray<uint8> >)"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetValueSize(const TArray64<uint8>& Value, TSpecializeType<TArray64<uint8> >)"
  },
  {
    "label": "MultiSizeSetAttribute()",
    "kind": "Method",
    "detail": "Function (template<MultiSizeType> EAttributeStorageResult)",
    "insertText": "MultiSizeSetAttribute(FAttributeAllocationInfo* AttributeAllocationInfo, const MultiSizeType& Value, TFunctionRef<uint8* ()> GetValuePointer)"
  },
  {
    "label": "GetValuePointer()",
    "kind": "Method",
    "detail": "Function (uint8* DataPtr =)",
    "insertText": "GetValuePointer()"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey* ElementAttributeKeyPtr = AttributeAllocationTable .)",
    "insertText": "FindKey(*AttributeAllocationInfo)"
  },
  {
    "label": "GetValueHash()",
    "kind": "Method",
    "detail": "Function (AttributeAllocationInfo -> Property = AttributePropertyBackup ; } else { FragmentedMemoryCost + = AttributeAllocationInfo -> Size - ValueSize ; } AttributeAllocationInfo -> Size = ValueSize ; AttributeAllocationInfo -> Hash =)",
    "insertText": "GetValueHash(DataPtr, ValueSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&StorageData[AttributeAllocationInfo->Offset], DataPtr, ValueSize)"
  },
  {
    "label": "GenericArrayGetAttribute()",
    "kind": "Method",
    "detail": "Function (} return EAttributeStorageResult::Operation_Success ; } template<ArrayType> EAttributeStorageResult)",
    "insertText": "GenericArrayGetAttribute(const FAttributeKey& ElementAttributeKey, ArrayType& OutValue)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutValue .)",
    "insertText": "Empty()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(OutValue.GetData(), &StorageData[AttributeAllocationInfo->Offset], AttributeAllocationInfo->Size)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FStringFormatOrderedArguments OrderedArguments ; OrderedArguments .)",
    "insertText": "Add(FStringFormatArg(Value))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 ValueConv = static_cast<)",
    "insertText": "uint32(static_cast<uint8>(Value))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FStringFormatOrderedArguments OrderedArguments ; OrderedArguments .)",
    "insertText": "Add(FStringFormatArg(ValueConv))"
  },
  {
    "label": "ValueConv()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ValueConv(uint8)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float ValueConvert = Value .)",
    "insertText": "GetFloat()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FStringFormatOrderedArguments OrderedArguments ; OrderedArguments .)",
    "insertText": "Add(FStringFormatArg(ValueConvert))"
  }
]