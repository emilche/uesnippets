[
  {
    "label": "NodeHashSetPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeHashSetPolicy"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "node_hash_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "node_hash_set"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "KeyEqual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyEqual"
  },
  {
    "label": "IsUnorderedContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsUnorderedContainer"
  },
  {
    "label": "node_hash_set()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_NODE_HASH_SET_H_ # define ABSL_CONTAINER_NODE_HASH_SET_H_ # include<type_traits> # include \" absl / algorithm / container . h \" # include \" absl / base / macros . h \" # include \" absl / container / internal / hash_function_defaults . h \" # include \" absl / container / internal / node_slot_policy . h \" # include \" absl / container / internal / raw_hash_set . h \" # include \" absl / memory / memory . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<T> struct NodeHashSetPolicy ; } template<class T,class Hash = absl::container_internal::hash_default_hash<T>,class Eq = absl::container_internal::hash_default_eq<T>,class Alloc = std::allocator<T>> class node_hash_set : public absl::container_internal::raw_hash_set<absl::container_internal::NodeHashSetPolicy<T>,Hash,Eq,Alloc> { using Base = node_hash_set::raw_hash_set ; public :)",
    "insertText": "node_hash_set()"
  },
  {
    "label": "erase_if()",
    "kind": "Method",
    "detail": "Function (} using Base::Base ; using Base::begin ; using Base::cbegin ; using Base::cend ; using Base::end ; using Base::capacity ; using Base::empty ; using Base::max_size ; using Base::size ; using Base::clear ; using Base::erase ; using Base::insert ; using Base::emplace ; using Base::emplace_hint ; using Base::extract ; using Base::merge ; using Base::swap ; using Base::rehash ; using Base::reserve ; using Base::contains ; using Base::count ; using Base::equal_range ; using Base::find ; using Base::bucket_count ; using Base::load_factor ; using Base::max_load_factor ; using Base::get_allocator ; using Base::hash_function ; using Base::key_eq ; } ; template<T,H,E,A,Predicate> node_hash_set<T,H,E,A>::size_type)",
    "insertText": "erase_if(node_hash_set<T, H, E, A>& c, Predicate pred)"
  },
  {
    "label": "new_element()",
    "kind": "Method",
    "detail": "Function (} namespace container_internal { template<class T> struct NodeHashSetPolicy : absl::container_internal::node_slot_policy<T&,NodeHashSetPolicy<T>> { using key_type = T ; using init_type = T ; using constant_iterators = std::true_type ; template<class Allocator,class . . . Args> T*)",
    "insertText": "new_element(Allocator* alloc, Args&&... args)"
  },
  {
    "label": "value_alloc()",
    "kind": "Method",
    "detail": "Function (using ValueAlloc = absl::allocator_traits<Allocator>::template rebind_alloc<T> ; ValueAlloc)",
    "insertText": "value_alloc(*alloc)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (T* res = absl::allocator_traits<ValueAlloc)",
    "insertText": "allocate(value_alloc, 1)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<ValueAlloc)",
    "insertText": "construct(value_alloc, res, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<ValueAlloc)",
    "insertText": "destroy(value_alloc, elem)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<ValueAlloc)",
    "insertText": "deallocate(value_alloc, elem, 1)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class F,class . . . Args>)",
    "insertText": "decltype(absl::container_internal::DecomposeValue( std::declval<F>(), std::declval<Args>()...)) apply(F&& f, Args&&... args)"
  },
  {
    "label": "element_space_used()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "element_space_used(const T*)"
  }
]