[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerTrackFilterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilterCollection"
  },
  {
    "label": "FSequencerTrackFilterCollection()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Filters / SequencerTrackFilterBase . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / IFilter . h \" class FSequencer ; class FSequencerTrackFilterCollection : public TFilterCollection<FSequencerTrackFilterType> { public :)",
    "insertText": "FSequencerTrackFilterCollection(ISequencerTrackFilters& InFilterInterface)"
  },
  {
    "label": "FSequencerTrackFilterCollection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequencerTrackFilterCollection()"
  },
  {
    "label": "ContainsFilter()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ContainsFilter(const TSharedRef<FSequencerTrackFilter>& InItem)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Add(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Remove(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "GetFilterAtIndex()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSequencerTrackFilter>)",
    "insertText": "GetFilterAtIndex(const int32 InIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort()"
  },
  {
    "label": "GetFilterDisplayNames()",
    "kind": "Method",
    "detail": "Function (TArray<FText>)",
    "insertText": "GetFilterDisplayNames()"
  },
  {
    "label": "GetAllFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter>>)",
    "insertText": "GetAllFilters(const TArray<TSharedRef<FFilterCategory>>& InCategories = {})"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (TSet<TSharedRef<FFilterCategory>>)",
    "insertText": "GetCategories(const TSet<TSharedRef<FSequencerTrackFilter>>* InFilters = nullptr)"
  },
  {
    "label": "GetCategoryFilters()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FSequencerTrackFilter>>)",
    "insertText": "GetCategoryFilters(const TSharedRef<FFilterCategory>& InCategory)"
  },
  {
    "label": "ForEachFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachFilter(const TFunctionRef<bool(const TSharedRef<FSequencerTrackFilter>&)>& InFunction , const bool bInCheckSupportsSequence , const TArray<TSharedRef<FFilterCategory>>& InCategories = {})"
  },
  {
    "label": "OnChildFilterChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnChildFilterChanged()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (ISequencerTrackFilters& FilterInterface ; public : TArray<TSharedPtr<IFilter<FSequencerTrackFilterType>>>::RangedForIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TArray<TSharedPtr<IFilter<FSequencerTrackFilterType>>>::RangedForIteratorType)",
    "insertText": "end()"
  }
]