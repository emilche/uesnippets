[
  {
    "label": "FGaussSeidelLinearCodimensionalConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGaussSeidelLinearCodimensionalConstraints"
  },
  {
    "label": "FGaussSeidelLinearCodimensionalConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Deformable / ChaosDeformableSolverTypes . h \" # include \" Chaos / Vector . h \" namespace Chaos::Softs { template<T,ParticleType> class FGaussSeidelLinearCodimensionalConstraints { public :)",
    "insertText": "FGaussSeidelLinearCodimensionalConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 3>>& InMesh, const T& EMesh = (T)10.0, const T& NuMesh = (T).3 ) : MeshConstraints(InMesh)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Measure .)",
    "insertText": "Init((T)0., MeshConstraints.Num())"
  },
  {
    "label": "NuMesh()",
    "kind": "Method",
    "detail": "Function (Lambda = EMesh*)",
    "insertText": "NuMesh(((T)1. + NuMesh) * ((T)1. - (T)2. * NuMesh))"
  },
  {
    "label": "EMesh()",
    "kind": "Method",
    "detail": "Function (Mu =)",
    "insertText": "EMesh((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (MuElementArray .)",
    "insertText": "Init(Mu, MeshConstraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaElementArray .)",
    "insertText": "Init(Lambda, MeshConstraints.Num())"
  },
  {
    "label": "InitializeCodimensionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCodimensionData(InParticles)"
  },
  {
    "label": "FGaussSeidelLinearCodimensionalConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGaussSeidelLinearCodimensionalConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 3>>& InMesh, const TArray<T>& EMeshArray, const T& NuMesh = (T).3 ) : MeshConstraints(InMesh)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (MuElementArray [ e ] = EMeshArray [)",
    "insertText": "e((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "FGaussSeidelLinearCodimensionalConstraints()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FGaussSeidelLinearCodimensionalConstraints()"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,3>)",
    "insertText": "DsInit(const int32 E, const ParticleType& InParticles)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Result((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles.X(MeshConstraints[E][i + 1])[c] - InParticles.X(MeshConstraints[E][0])[c])"
  },
  {
    "label": "Ds()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,2>)",
    "insertText": "Ds(const int32 E, const ParticleType& InParticles)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> P1P0 = InParticles .)",
    "insertText": "P(MeshConstraints[E][1]) - InParticles.P(MeshConstraints[E][0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> P2P0 = InParticles .)",
    "insertText": "P(MeshConstraints[E][2]) - InParticles.P(MeshConstraints[E][0])"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return PMatrix<)",
    "insertText": "T((T)0., (T)0, (T)0, (T)0, (T)0, (T)0)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} } PMatrix<T,3,2>)",
    "insertText": "F(const int32 E, const ParticleType& InParticles)"
  },
  {
    "label": "GetConstraintsArray()",
    "kind": "Method",
    "detail": "Function (} } TArray<TArray<int32>>)",
    "insertText": "GetConstraintsArray()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> Constraints ; Constraints .)",
    "insertText": "SetNum(MeshConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Constraints [ i ] .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "InitializeCodimensionData()",
    "kind": "Method",
    "detail": "Function (Constraints [ i ] [ j ] = MeshConstraints [ i ] [ j ] ; } } return Constraints ; } protected : void)",
    "insertText": "InitializeCodimensionData(const ParticleType& Particles)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DmInverse .)",
    "insertText": "Init(PMatrix<FSolverReal, 2, 2>(0.f, 0.f, 0.f), MeshConstraints.Num())"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> X1X0 = Particles .)",
    "insertText": "GetX(MeshConstraints[e][1]) - Particles.GetX(MeshConstraints[e][0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> X2X0 = Particles .)",
    "insertText": "GetX(MeshConstraints[e][2]) - Particles.GetX(MeshConstraints[e][0])"
  },
  {
    "label": "Dm()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2>)",
    "insertText": "Dm((T)0., (T)0., (T)0.)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (Dm . M [ 0 ] = X1X0 .)",
    "insertText": "Size()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Dm . M [ 2 ] = X1X0 .)",
    "insertText": "Dot(X2X0)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Dm . M [ 3 ] = Chaos::TVector<T,3)",
    "insertText": "CrossProduct(X1X0, X2X0).Size()"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = Chaos::TVector<T,3)",
    "insertText": "CrossProduct(X1X0, X2X0).Size() / (T)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,2,2> DmInv = Dm .)",
    "insertText": "Inverse()"
  },
  {
    "label": "SafeRecip()",
    "kind": "Method",
    "detail": "Function (DmInverse [ e ] = DmInv ; } } } T)",
    "insertText": "SafeRecip(const T Len, const T Fallback)"
  },
  {
    "label": "AddHyperelasticResidualAndHessian()",
    "kind": "Method",
    "detail": "Function (} return Fallback ; } public : void)",
    "insertText": "AddHyperelasticResidualAndHessian(const ParticleType& Particles, const int32 ElementIndex, const int32 ElementIndexLocal, const T Dt, TVec3<T>& ParticleResidual, Chaos::PMatrix<T, 3, 3>& ParticleHessian)"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (const Chaos::PMatrix<T,2,2> DmInvT = DmInverse [ ElementIndex ] .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (const Chaos::PMatrix<T,3,2> Fe =)",
    "insertText": "F(ElementIndex, Particles)"
  },
  {
    "label": "Pe()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,2>)",
    "insertText": "Pe(TVec3<T>((T)0.), TVec3<T>((T)0.)), ForceTerm(TVec3<T>((T)0.), TVec3<T>((T)0.))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Pe =)",
    "insertText": "T(2)"
  },
  {
    "label": "Dx()",
    "kind": "Method",
    "detail": "Function (Chaos::TVector<T,3>)",
    "insertText": "Dx((T)0.)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Dx [ c ] + = ForceTerm . M [ ElementIndexLocal* 3 - 3 + c ] ; } } else {)",
    "insertText": "for(int32 c = 0; c < 3; c++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Dx [ c ] - = ForceTerm . M [ h* 3 + c ] ; } } } Dx* = Dt* Dt ; ParticleResidual - = Dx ; T Coeff = Dt* Dt* Measure [ ElementIndex ] ;)",
    "insertText": "if(ElementIndexLocal == 0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T DmInvsum =)",
    "insertText": "T(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (localDmsum + = DmInv . M [ nu* 2 + k ] ; } DmInvsum + = localDmsum* localDmsum ; })",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetAt(alpha, alpha, ParticleHessian.GetAt(alpha, alpha) + Coeff * T(2) * MuElementArray[ElementIndex] * DmInvsum)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (DmInvsum + = DmInv .)",
    "insertText": "GetAt(ElementIndexLocal - 1, nu) * DmInv.GetAt(ElementIndexLocal - 1, nu)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (ParticleHessian .)",
    "insertText": "SetAt(alpha, alpha, ParticleHessian.GetAt(alpha, alpha) + Dt * Dt * Measure[ElementIndex] * T(2) * MuElementArray[ElementIndex] * DmInvsum)"
  }
]