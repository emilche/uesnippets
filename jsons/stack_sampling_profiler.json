[
  {
    "label": "Unwinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unwinder"
  },
  {
    "label": "StackSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackSampler"
  },
  {
    "label": "StackSamplerTestDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackSamplerTestDelegate"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SamplingThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplingThread"
  },
  {
    "label": "Unwinder()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_STACK_SAMPLING_PROFILER_H_ # define BASE_PROFILER_STACK_SAMPLING_PROFILER_H_ # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / profiler / profile_builder . h \" # include \" base / profiler / sampling_profiler_thread_token . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class Unwinder ; class StackSampler ; class StackSamplerTestDelegate ; class BASE_EXPORT StackSamplingProfiler { public : using UnwindersFactory = OnceCallback<std::vector<std::unique_ptr<)",
    "insertText": "Unwinder()"
  },
  {
    "label": "Milliseconds()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT SamplingParams { TimeDelta initial_delay =)",
    "insertText": "Milliseconds(0)"
  },
  {
    "label": "Milliseconds()",
    "kind": "Method",
    "detail": "Function (int samples_per_profile = 3 0 0 ; TimeDelta sampling_interval =)",
    "insertText": "Milliseconds(100)"
  },
  {
    "label": "IsSupportedForCurrentPlatform()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsSupportedForCurrentPlatform()"
  },
  {
    "label": "StackSamplingProfiler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackSamplingProfiler(SamplingProfilerThreadToken thread_token, const SamplingParams& params, std::unique_ptr<ProfileBuilder> profile_builder, UnwindersFactory core_unwinders_factory = UnwindersFactory(), RepeatingClosure record_sample_callback = RepeatingClosure(), StackSamplerTestDelegate* test_delegate = nullptr)"
  },
  {
    "label": "StackSamplingProfiler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackSamplingProfiler(const StackSamplingProfiler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StackSamplingProfiler&)",
    "insertText": "operator(const StackSamplingProfiler&)"
  },
  {
    "label": "StackSamplingProfiler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StackSamplingProfiler()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "AddAuxUnwinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAuxUnwinder(std::unique_ptr<Unwinder> unwinder)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT TestPeer { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsSamplingThreadRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSamplingThreadRunning()"
  },
  {
    "label": "DisableIdleShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableIdleShutdown()"
  },
  {
    "label": "PerformSamplingThreadIdleShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformSamplingThreadIdleShutdown(bool simulate_intervening_start)"
  },
  {
    "label": "GetNextSampleTime()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "GetNextSampleTime(TimeTicks scheduled_current_sample_time, TimeDelta sampling_interval, TimeTicks now)"
  },
  {
    "label": "ApplyMetadataToPastSamplesImpl()",
    "kind": "Method",
    "detail": "Function (} ; private : class SamplingThread ; void)",
    "insertText": "ApplyMetadataToPastSamplesImpl(TimeTicks period_start, TimeTicks period_end, uint64_t name_hash, absl::optional<int64_t> key, int64_t value, absl::optional<PlatformThreadId> thread_id)"
  },
  {
    "label": "ApplyMetadataToPastSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMetadataToPastSamples(TimeTicks period_start, TimeTicks period_end, uint64_t name_hash, absl::optional<int64_t> key, int64_t value, absl::optional<PlatformThreadId> thread_id)"
  }
]