[
  {
    "label": "FLocalExposureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalExposureParameters"
  },
  {
    "label": "FUsePrecalculatedLuminanceDim",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUsePrecalculatedLuminanceDim"
  },
  {
    "label": "FUseApproxIlluminanceDim",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUseApproxIlluminanceDim"
  },
  {
    "label": "FUseDebugOutputDim",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUseDebugOutputDim"
  },
  {
    "label": "FTranslucencyLightingVolumeTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyLightingVolumeTextures"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" class FLocalExposureParameters ; namespace AutoExposurePermutation { class FUsePrecalculatedLuminanceDim :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"USE_PRECALCULATED_LUMINANCE\")"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FUseApproxIlluminanceDim :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"USE_APPROX_ILLUMINANCE\")"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FUseDebugOutputDim :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"USE_DEBUG_OUTPUT\")"
  },
  {
    "label": "ShouldCompileCommonPermutation()",
    "kind": "Method",
    "detail": "Function (using FCommonDomain = TShaderPermutationDomain<FUsePrecalculatedLuminanceDim,FUseApproxIlluminanceDim,FUseDebugOutputDim> ; bool)",
    "insertText": "ShouldCompileCommonPermutation(const FCommonDomain& PermutationVector)"
  },
  {
    "label": "BuildCommonPermutationDomain()",
    "kind": "Method",
    "detail": "Function (FCommonDomain)",
    "insertText": "BuildCommonPermutationDomain()"
  },
  {
    "label": "CalculateEyeAdaptationParameterExposureConversion()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "CalculateEyeAdaptationParameterExposureConversion(const FPostProcessSettings& Settings, const bool bExtendedLuminanceRange)"
  },
  {
    "label": "LuminanceMaxFromLensAttenuation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LuminanceMaxFromLensAttenuation()"
  },
  {
    "label": "IsAutoExposureMethodSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoExposureMethodSupported(ERHIFeatureLevel::Type FeatureLevel, EAutoExposureMethod AutoExposureMethodId)"
  },
  {
    "label": "IsAutoExposureDebugMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoExposureDebugMode(const FViewInfo& View)"
  },
  {
    "label": "CalculateFixedAutoExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateFixedAutoExposure(const FViewInfo& View)"
  },
  {
    "label": "CalculateManualAutoExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateManualAutoExposure(const FViewInfo& View, bool bForceDisablePhysicalCamera)"
  },
  {
    "label": "GetAutoExposureCompensationFromSettings()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAutoExposureCompensationFromSettings(const FViewInfo& View)"
  },
  {
    "label": "IsExtendLuminanceRangeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExtendLuminanceRangeEnabled()"
  },
  {
    "label": "IsAutoExposureUsingIlluminanceEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoExposureUsingIlluminanceEnabled(const FViewInfo& View)"
  },
  {
    "label": "GetAutoExposureIlluminanceDownscaleFactor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAutoExposureIlluminanceDownscaleFactor()"
  },
  {
    "label": "GetAutoExposureMethod()",
    "kind": "Method",
    "detail": "Function (EAutoExposureMethod)",
    "insertText": "GetAutoExposureMethod(const FViewInfo& View)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FEyeAdaptationParameters, ) SHADER_PARAMETER(float, ExposureLowPercent) SHADER_PARAMETER(float, ExposureHighPercent) SHADER_PARAMETER(float, MinAverageLuminance) SHADER_PARAMETER(float, MaxAverageLuminance) SHADER_PARAMETER(float, ExposureCompensationSettings) SHADER_PARAMETER(float, ExposureCompensationCurve) SHADER_PARAMETER(float, DeltaWorldTime) SHADER_PARAMETER(float, ExposureSpeedUp) SHADER_PARAMETER(float, ExposureSpeedDown) SHADER_PARAMETER(float, HistogramScale) SHADER_PARAMETER(float, HistogramBias) SHADER_PARAMETER(float, LuminanceMin) SHADER_PARAMETER(float, BlackHistogramBucketInfluence) SHADER_PARAMETER(float, GreyMult) SHADER_PARAMETER(FVector3f, LuminanceWeights) SHADER_PARAMETER(float, ExponentialUpM) SHADER_PARAMETER(float, ExponentialDownM) SHADER_PARAMETER(float, StartDistance) SHADER_PARAMETER(float, LuminanceMax) SHADER_PARAMETER(float, IgnoreMaterialsEvaluationPositionBias) SHADER_PARAMETER(float, IgnoreMaterialsLuminanceScale) SHADER_PARAMETER(float, IgnoreMaterialsMinBaseColorLuminance) SHADER_PARAMETER(uint32, IgnoreMaterialsReconstructFromSceneColor) SHADER_PARAMETER(float, ForceTarget) SHADER_PARAMETER(int, VisualizeDebugType) SHADER_PARAMETER_TEXTURE(Texture2D, MeterMaskTexture) SHADER_PARAMETER_SAMPLER(SamplerState, MeterMaskSampler) END_SHADER_PARAMETER_STRUCT() FEyeAdaptationParameters GetEyeAdaptationParameters(const FViewInfo& ViewInfo)"
  },
  {
    "label": "GetEyeAdaptationFixedExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEyeAdaptationFixedExposure(const FViewInfo& View)"
  },
  {
    "label": "AddSetupExposureIlluminancePass()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "AddSetupExposureIlluminancePass(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, const FSceneTextures& SceneTextures)"
  },
  {
    "label": "AddCalculateExposureIlluminancePass()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "AddCalculateExposureIlluminancePass(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, const FSceneTextures& SceneTextures, const struct FTranslucencyLightingVolumeTextures& TranslucencyLightingVolumeTextures, FRDGTextureRef ExposureIlluminanceSetup)"
  },
  {
    "label": "AddHistogramEyeAdaptationPass()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "AddHistogramEyeAdaptationPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FEyeAdaptationParameters& EyeAdaptationParameters, const FLocalExposureParameters& LocalExposureParameters, FRDGTextureRef HistogramTexture, bool bComputeAverageLocalExposure)"
  },
  {
    "label": "AddBasicEyeAdaptationSetupPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddBasicEyeAdaptationSetupPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FEyeAdaptationParameters& EyeAdaptationParameters, FScreenPassTexture SceneColor)"
  },
  {
    "label": "AddBasicEyeAdaptationPass()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "AddBasicEyeAdaptationPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FEyeAdaptationParameters& EyeAdaptationParameters, const FLocalExposureParameters& LocalExposureParameters, FScreenPassTextureSlice SceneColor, FRDGBufferRef EyeAdaptationBuffer, bool bComputeAverageLocalExposure)"
  },
  {
    "label": "AddCopyEyeAdaptationDataToTexturePass()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "AddCopyEyeAdaptationDataToTexturePass(FRDGBuilder& GraphBuilder, const FViewInfo& View)"
  }
]