[
  {
    "label": "FilterEnums",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FilterEnums"
  },
  {
    "label": "WrapFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WrapFlags"
  },
  {
    "label": "tagFilterWeights",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagFilterWeights"
  },
  {
    "label": "tagRGBCOLOR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagRGBCOLOR"
  },
  {
    "label": "FilterBox()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<stdint . h> # include<algorithm> namespace Etc { enum FilterEnums { MaxFilterSize = 3 2 } ; enum WrapFlags { FILTER_WRAP_NONE = 0,FILTER_WRAP_X = 0 x1,FILTER_WRAP_Y = 0 x2 } ; typedef struct tagFilterWeights { int first ; int numWeights ; double weight [ MaxFilterSize* 2 + 1 ] ; } FilterWeights ; typedef struct tagRGBCOLOR { union { uint32_t ulColor ; uint8_t rgba [ 4 ] ; } ; } RGBCOLOR ; double)",
    "insertText": "FilterBox(double t)"
  },
  {
    "label": "FilterTwoPass()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FilterTwoPass(RGBCOLOR *pSrcImage, int srcWidth, int srcHeight, RGBCOLOR *pDestImage, int destWidth, int destHeight, unsigned int wrapFlags, double (*FilterProc)(double))"
  },
  {
    "label": "FilterResample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterResample(RGBCOLOR *pSrcImage, int srcWidth, int srcHeight, RGBCOLOR *pDstImage, int dstWidth, int dstHeight)"
  },
  {
    "label": "CalcContributions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcContributions(int srcSize, int destSize, double filterSize, bool wrap, double(*FilterProc)(double), FilterWeights contrib[])"
  },
  {
    "label": "FilterResample()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "FilterResample(T *pSrcImage, int srcWidth, int srcHeight, T *pDstImage, int dstWidth, int dstHeight)"
  },
  {
    "label": "xScale()",
    "kind": "Method",
    "detail": "Function (float xScale ; float yScale ; T* pSrcPixel ; T* pDstPixel ;)",
    "insertText": "xScale(float)"
  },
  {
    "label": "yScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "yScale(float)"
  },
  {
    "label": "iFirstSampleRow()",
    "kind": "Method",
    "detail": "Function (int samples ; int iFirstSampleRow ; int iFirstSampleCol ; int iLastSampleRow ; int iLastSampleCol ; float red ; float green ; float blue ; float alpha ;)",
    "insertText": "iFirstSampleRow(int)(iRow * yScale)"
  },
  {
    "label": "iLastSampleRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iLastSampleRow(int)ceil(iFirstSampleRow + yScale - 1)"
  },
  {
    "label": "iFirstSampleCol()",
    "kind": "Method",
    "detail": "Function (iLastSampleRow = srcHeight - 1 ; })",
    "insertText": "iFirstSampleCol(int)(iCol * xScale)"
  },
  {
    "label": "iLastSampleCol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iLastSampleCol(int)ceil(iFirstSampleCol + xScale - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (iLastSampleCol = srcWidth - 1 ; } samples = 0 ; red = 0 . f ; green = 0 . f ; blue = 0 . f ; alpha = 0 . f ;)",
    "insertText": "for(int iSampleRow = iFirstSampleRow; iSampleRow <= iLastSampleRow; iSampleRow++)"
  },
  {
    "label": "pSrcImage()",
    "kind": "Method",
    "detail": "Function (pSrcPixel =)",
    "insertText": "pSrcImage(iSampleRow * srcWidth + iSampleCol)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (red + = static_cast<)",
    "insertText": "float(pSrcPixel[0])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (green + = static_cast<)",
    "insertText": "float(pSrcPixel[1])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (blue + = static_cast<)",
    "insertText": "float(pSrcPixel[2])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (alpha + = static_cast<)",
    "insertText": "float(pSrcPixel[3])"
  },
  {
    "label": "pDstImage()",
    "kind": "Method",
    "detail": "Function (samples + + ; } } pDstPixel =)",
    "insertText": "pDstImage(iRow * dstWidth + iCol)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 0 ] = static_cast<)",
    "insertText": "T(red / samples)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 1 ] = static_cast<)",
    "insertText": "T(green / samples)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 2 ] = static_cast<)",
    "insertText": "T(blue / samples)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 3 ] = static_cast<)",
    "insertText": "T(alpha / samples)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { pDstPixel [ 0 ] = static_cast<)",
    "insertText": "T(red)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 1 ] = static_cast<)",
    "insertText": "T(green)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 2 ] = static_cast<)",
    "insertText": "T(blue)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pDstPixel [ 3 ] = static_cast<)",
    "insertText": "T(alpha)"
  },
  {
    "label": "FilterTwoPass()",
    "kind": "Method",
    "detail": "Function (} } } } template<T> int)",
    "insertText": "FilterTwoPass(T *pSrcImage, int srcWidth, int srcHeight, T *pDestImage, int destWidth, int destHeight, unsigned int wrapFlags, double(*FilterProc)(double))"
  },
  {
    "label": "maxDim()",
    "kind": "Method",
    "detail": "Function (const int numComponents = 4 ; FilterWeights* contrib ; T* pPixel ; T* pTempImage ; double dRed ; double dGreen ; double dBlue ; double dAlpha ; double filterSize = 3 . 0 ; int)",
    "insertText": "maxDim(srcWidth>srcHeight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (contrib = new FilterWeights [ maxDim ] ; pTempImage = new T [ destWidth* srcHeight* numComponents ] ;)",
    "insertText": "if(pTempImage == NULL)"
  },
  {
    "label": "CalcContributions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcContributions(srcWidth, destWidth, filterSize, bWrapHorizontal, FilterProc, contrib)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (dRed = 0 ; dGreen = 0 ; dBlue = 0 ; dAlpha = 0 ;)",
    "insertText": "for(int iWeight = 0; iWeight < contrib[iCol].numWeights; iWeight++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int iSrcCol = iWeight + contrib [ iCol ] . first ;)",
    "insertText": "if(bWrapHorizontal)"
  },
  {
    "label": "iSrcCol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iSrcCol(iSrcCol < 0)?(srcWidth+iSrcCol):(iSrcCol >= srcWidth)?(iSrcCol-srcWidth)"
  },
  {
    "label": "pSrcImage()",
    "kind": "Method",
    "detail": "Function (} T* pSrcPixel =)",
    "insertText": "pSrcImage((iRow * srcWidth) + iSrcCol)"
  },
  {
    "label": "pTempImage()",
    "kind": "Method",
    "detail": "Function (dRed + = contrib [ iCol ] . weight [ iWeight ]* pSrcPixel [ 0 ] ; dGreen + = contrib [ iCol ] . weight [ iWeight ]* pSrcPixel [ 1 ] ; dBlue + = contrib [ iCol ] . weight [ iWeight ]* pSrcPixel [ 2 ] ; dAlpha + = contrib [ iCol ] . weight [ iWeight ]* pSrcPixel [ 3 ] ; } pPixel =)",
    "insertText": "pTempImage((iRow * destWidth) + iCol)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pPixel [ 0 ] = static_cast<)",
    "insertText": "T(std::max(0.0, std::min(255.0, dRed)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pPixel [ 1 ] = static_cast<)",
    "insertText": "T(std::max(0.0, std::min(255.0, dGreen)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pPixel [ 2 ] = static_cast<)",
    "insertText": "T(std::max(0.0, std::min(255.0, dBlue)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (pPixel [ 3 ] = static_cast<)",
    "insertText": "T(std::max(0.0, std::min(255.0, dAlpha)))"
  },
  {
    "label": "bWrapVertical()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "bWrapVertical(wrapFlags&FILTER_WRAP_Y)"
  },
  {
    "label": "CalcContributions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcContributions(srcHeight, destHeight, filterSize, bWrapVertical, FilterProc, contrib)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (dRed = 0 ; dGreen = 0 ; dBlue = 0 ; dAlpha = 0 ;)",
    "insertText": "for(int iWeight = 0; iWeight < contrib[iRow].numWeights; iWeight++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int iSrcRow = iWeight + contrib [ iRow ] . first ;)",
    "insertText": "if(bWrapVertical)"
  },
  {
    "label": "iSrcRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iSrcRow(iSrcRow < 0) ? (srcHeight + iSrcRow) : (iSrcRow >= srcHeight) ? (iSrcRow - srcHeight)"
  },
  {
    "label": "pTempImage()",
    "kind": "Method",
    "detail": "Function (} T* pSrcPixel =)",
    "insertText": "pTempImage((iSrcRow * destWidth) + iCol)"
  },
  {
    "label": "pDestImage()",
    "kind": "Method",
    "detail": "Function (dRed + = contrib [ iRow ] . weight [ iWeight ]* pSrcPixel [ 0 ] ; dGreen + = contrib [ iRow ] . weight [ iWeight ]* pSrcPixel [ 1 ] ; dBlue + = contrib [ iRow ] . weight [ iWeight ]* pSrcPixel [ 2 ] ; dAlpha + = contrib [ iRow ] . weight [ iWeight ]* pSrcPixel [ 3 ] ; } pPixel =)",
    "insertText": "pDestImage((iRow * destWidth) + iCol)"
  }
]