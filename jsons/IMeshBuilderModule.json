[
  {
    "label": "FStaticMeshSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSection"
  },
  {
    "label": "FStaticMeshSectionArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshSectionArray"
  },
  {
    "label": "IMeshBuilderModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMeshBuilderModule"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FStaticMeshBuildParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshBuildParameters"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FStaticMeshLODGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODGroup"
  },
  {
    "label": "FSkeletalMeshBuildParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshBuildParameters"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "GetForPlatform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Interfaces / ITargetPlatformManagerModule . h \" struct FStaticMeshSection ; class FStaticMeshSectionArray ; class IMeshBuilderModule : public IModuleInterface { public : IMeshBuilderModule&)",
    "insertText": "GetForPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetForRunningPlatform()",
    "kind": "Method",
    "detail": "Function (} IMeshBuilderModule&)",
    "insertText": "GetForRunningPlatform()"
  },
  {
    "label": "GetTargetPlatformManagerRef()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform* TargetPlatform =)",
    "insertText": "GetTargetPlatformManagerRef().GetRunningTargetPlatform()"
  },
  {
    "label": "AppendToDDCKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendToDDCKey(FString& DDCKey, bool bSkeletal)"
  },
  {
    "label": "BuildMesh()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BuildMesh(class FStaticMeshRenderData& OutRenderData, const struct FStaticMeshBuildParameters& BuildParameters)"
  },
  {
    "label": "BuildMeshVertexPositions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildMeshVertexPositions(class UObject* StaticMesh, TArray<uint32>& Indices, TArray<FVector3f>& Vertices, FStaticMeshSectionArray& Sections)"
  },
  {
    "label": "BuildSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildSkeletalMesh(const struct FSkeletalMeshBuildParameters& SkeletalMeshBuildParameters)"
  },
  {
    "label": "PostBuildSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostBuildSkeletalMesh(class FSkeletalMeshRenderData* SkeletalMeshRenderData, class USkinnedAsset* SkinnedAsset)"
  }
]