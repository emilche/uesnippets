[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IEditableTimingProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableTimingProfilerProvider"
  },
  {
    "label": "IEditableThreadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableThreadProvider"
  },
  {
    "label": "FCpuProfilerAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCpuProfilerAnalyzer"
  },
  {
    "label": "FEventScopeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventScopeState"
  },
  {
    "label": "FPendingEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingEvent"
  },
  {
    "label": "FThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadState"
  },
  {
    "label": "FTimerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerInfo"
  },
  {
    "label": "FCpuProfilerAnalyzer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FCpuProfilerAnalyzer(IAnalysisSession& Session, IEditableTimingProfilerProvider& InEditableTimingProfilerProvider, IEditableThreadProvider& InEditableThreadProvider)"
  },
  {
    "label": "ProcessBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessBuffer(const FEventTime& EventTime, FThreadState& ThreadState, const uint8* BufferPtr, uint32 BufferSize)"
  },
  {
    "label": "ProcessBufferV2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessBufferV2(const FEventTime& EventTime, FThreadState& ThreadState, const uint8* BufferPtr, uint32 BufferSize)"
  },
  {
    "label": "DispatchPendingEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPendingEvents(uint64& LastCycle, uint64 CurrentCycle, FThreadState& ThreadState, const FPendingEvent*& PendingCursor, int32& RemainingPending, bool bIsBeginEvent)"
  },
  {
    "label": "DispatchRemainingPendingEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchRemainingPendingEvents(FThreadState& ThreadState)"
  },
  {
    "label": "EndOpenEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOpenEvents(FThreadState& ThreadState, double Timestamp)"
  },
  {
    "label": "OnCpuScopeEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCpuScopeEnter(const FOnEventContext& Context)"
  },
  {
    "label": "OnCpuScopeLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCpuScopeLeave(const FOnEventContext& Context)"
  },
  {
    "label": "DefineTimer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DefineTimer(uint32 SpecId, const TCHAR* TimerName, const TCHAR* File, uint32 Line)"
  },
  {
    "label": "DefineNewTimerChecked()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DefineNewTimerChecked(uint32 SpecId, const TCHAR* TimerName, const TCHAR* File = nullptr, uint32 Line = 0)"
  },
  {
    "label": "GetTimerId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTimerId(uint32 SpecId)"
  }
]