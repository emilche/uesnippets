[
  {
    "label": "FImageTile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageTile"
  },
  {
    "label": "FImageTiling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageTiling"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IntVectorTypes . h \" # include \" Image / ImageDimensions . h \" namespace UE { namespace Geometry { class FImageTile { private : FVector2i Start =)",
    "insertText": "Zero()"
  },
  {
    "label": "FImageTile()",
    "kind": "Method",
    "detail": "Function (int Width = 0 ; int Height = 0 ; public :)",
    "insertText": "FImageTile()"
  },
  {
    "label": "FImageTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FImageTile(const FVector2i& InStart, const FVector2i& InEnd) : Start(InStart) , End(InEnd) , Width(InEnd.X - InStart.X) , Height(InEnd.Y - InStart.Y)"
  },
  {
    "label": "GetStart()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetStart()"
  },
  {
    "label": "GetCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetCoords(const int64 LinearIdx)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const int32 X, const int32 Y)"
  },
  {
    "label": "GetIndexFromSourceCoords()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetIndexFromSourceCoords(const int32 X, const int32 Y)"
  },
  {
    "label": "GetIndexFromSourceCoords()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetIndexFromSourceCoords(const FVector2i& SourceCoords)"
  },
  {
    "label": "GetSourceCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetSourceCoords(const int64 LinearIdx)"
  },
  {
    "label": "GetSourceCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetSourceCoords(const int32 X, const int32 Y)"
  },
  {
    "label": "GetSourceCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetSourceCoords(const FVector2i& LocalCoords)"
  },
  {
    "label": "FImageTiling()",
    "kind": "Method",
    "detail": "Function (} } ; class FImageTiling { private : FImageDimensions Dimensions ; int32 TileWidth = 3 2 ; int32 TileHeight = 3 2 ; public :)",
    "insertText": "FImageTiling(const FImageDimensions DimensionsIn, const int32 TileWidthIn, const int32 TileHeightIn)"
  },
  {
    "label": "SetTiling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTiling(DimensionsIn, TileWidthIn, TileHeightIn)"
  },
  {
    "label": "SetTiling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTiling(const FImageDimensions DimensionsIn, const int32 TileWidthIn, const int32 TileHeightIn)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Dimensions = DimensionsIn ; TileWidth =)",
    "insertText": "Clamp(TileWidthIn, 1, FMath::Max(1, Dimensions.GetWidth()))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (TileHeight =)",
    "insertText": "Clamp(TileHeightIn, 1, FMath::Max(1, Dimensions.GetHeight()))"
  },
  {
    "label": "NumTilesX()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumTilesX()"
  },
  {
    "label": "NumTilesY()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumTilesY()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetTile()",
    "kind": "Method",
    "detail": "Function (} FImageTile)",
    "insertText": "GetTile(const int32 LinearTileIndex, const int32 Padding = 0)"
  },
  {
    "label": "TileIndex()",
    "kind": "Method",
    "detail": "Function (const int32 TilePadding = Padding<0 ? 0 : Padding ; const FVector2i)",
    "insertText": "TileIndex(LinearTileIndex % NumTilesX(), LinearTileIndex / NumTilesX())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FVector2i TileStart,TileEnd ; TileStart . X =)",
    "insertText": "Clamp(TileIndex.X * TileWidth - TilePadding, 0, Dimensions.GetWidth())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (TileStart . Y =)",
    "insertText": "Clamp(TileIndex.Y * TileHeight - TilePadding, 0, Dimensions.GetHeight())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (TileEnd . X =)",
    "insertText": "Clamp((TileIndex.X + 1) * TileWidth + TilePadding, 0, Dimensions.GetWidth())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (TileEnd . Y =)",
    "insertText": "Clamp((TileIndex.Y + 1) * TileHeight + TilePadding, 0, Dimensions.GetHeight())"
  }
]