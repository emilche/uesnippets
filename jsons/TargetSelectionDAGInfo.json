[
  {
    "label": "TargetSelectionDAGInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSelectionDAGInfo"
  },
  {
    "label": "TargetSelectionDAGInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TARGET_TARGETSELECTIONDAGINFO_H # define LLVM_TARGET_TARGETSELECTIONDAGINFO_H # include \" llvm / CodeGen / SelectionDAGNodes . h \" namespace llvm { class TargetSelectionDAGInfo {)",
    "insertText": "TargetSelectionDAGInfo(const TargetSelectionDAGInfo &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TargetSelectionDAGInfo &)"
  },
  {
    "label": "TargetSelectionDAGInfo()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TargetSelectionDAGInfo()"
  },
  {
    "label": "EmitTargetCodeForMemcpy()",
    "kind": "Method",
    "detail": "Function (SDValue)",
    "insertText": "EmitTargetCodeForMemcpy(SelectionDAG &DAG, SDLoc dl, SDValue Chain, SDValue Op1, SDValue Op2, SDValue Op3, unsigned Align, bool isVolatile, bool AlwaysInline, MachinePointerInfo DstPtrInfo, MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "EmitTargetCodeForMemmove()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "EmitTargetCodeForMemmove(SelectionDAG &DAG, SDLoc dl, SDValue Chain, SDValue Op1, SDValue Op2, SDValue Op3, unsigned Align, bool isVolatile, MachinePointerInfo DstPtrInfo, MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "EmitTargetCodeForMemset()",
    "kind": "Method",
    "detail": "Function (} SDValue)",
    "insertText": "EmitTargetCodeForMemset(SelectionDAG &DAG, SDLoc dl, SDValue Chain, SDValue Op1, SDValue Op2, SDValue Op3, unsigned Align, bool isVolatile, MachinePointerInfo DstPtrInfo)"
  },
  {
    "label": "EmitTargetCodeForMemcmp()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "EmitTargetCodeForMemcmp(SelectionDAG &DAG, SDLoc dl, SDValue Chain, SDValue Op1, SDValue Op2, SDValue Op3, MachinePointerInfo Op1PtrInfo, MachinePointerInfo Op2PtrInfo)"
  },
  {
    "label": "EmitTargetCodeForMemchr()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "EmitTargetCodeForMemchr(SelectionDAG &DAG, SDLoc dl, SDValue Chain, SDValue Src, SDValue Char, SDValue Length, MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "EmitTargetCodeForStrcpy()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "EmitTargetCodeForStrcpy(SelectionDAG &DAG, SDLoc DL, SDValue Chain, SDValue Dest, SDValue Src, MachinePointerInfo DestPtrInfo, MachinePointerInfo SrcPtrInfo, bool isStpcpy)"
  },
  {
    "label": "EmitTargetCodeForStrcmp()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "EmitTargetCodeForStrcmp(SelectionDAG &DAG, SDLoc dl, SDValue Chain, SDValue Op1, SDValue Op2, MachinePointerInfo Op1PtrInfo, MachinePointerInfo Op2PtrInfo)"
  },
  {
    "label": "EmitTargetCodeForStrlen()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "EmitTargetCodeForStrlen(SelectionDAG &DAG, SDLoc DL, SDValue Chain, SDValue Src, MachinePointerInfo SrcPtrInfo)"
  },
  {
    "label": "EmitTargetCodeForStrnlen()",
    "kind": "Method",
    "detail": "Function (} std::pair<SDValue,SDValue>)",
    "insertText": "EmitTargetCodeForStrnlen(SelectionDAG &DAG, SDLoc DL, SDValue Chain, SDValue Src, SDValue MaxLength, MachinePointerInfo SrcPtrInfo)"
  }
]