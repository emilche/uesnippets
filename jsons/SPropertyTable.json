[
  {
    "label": "SPropertyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyTable"
  },
  {
    "label": "IPropertyTableCustomColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCustomColumn"
  },
  {
    "label": "IPropertyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTable"
  },
  {
    "label": "SBreadcrumbTrail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBreadcrumbTrail"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SBoxPanel . h \" # include \" Textures / SlateIcon . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Layout / SBorder . h \" # include \" PropertyPath . h \" # include \" PropertyPermissionList . h \" # include \" Framework / Commands / UIAction . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" IPropertyTableWidgetHandle . h \" # include \" IPropertyTable . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Editor / EditorEngine . h \" # include \" Widgets / Navigation / SBreadcrumbTrail . h \" # include \" UserInterface / PropertyTable / SPropertyTableHeaderRow . h \" # include \" IPropertyTableCell . h \" # include \" IPropertyTableRow . h \" # include \" UserInterface / PropertyTable / SPropertyTableRow . h \" # include \" HAL / PlatformApplicationMisc . h \" # define LOCTEXT_NAMESPACE \" PropertyTable \" class SPropertyTable : public STreeView<TSharedRef<IPropertyTableRow>>,public IPropertyTableWidgetHandle { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyTable ) : _Style( \"PropertyTable\" ) , _ColumnCustomizations()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, Style ) SLATE_ARGUMENT( TArray< TSharedRef< class IPropertyTableCustomColumn > >, ColumnCustomizations ) SLATE_END_ARGS() SPropertyTable() : bUpdatingSelection( false)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef< class IPropertyTable >& InPropertyTable)"
  },
  {
    "label": "SelectionMode()",
    "kind": "Method",
    "detail": "Function (Table = InPropertyTable ; Style = InArgs . _Style ; STreeView<TSharedRef<IPropertyTableRow>>::FArguments TreeViewArgs ; TreeViewArgs .)",
    "insertText": "SelectionMode(Table.ToSharedRef(), &IPropertyTable::GetSelectionMode ) .OnSelectionChanged( this, &SPropertyTable::OnSelectionChanged ) .TreeItemsSource( &Table->GetRows() ) .OnGenerateRow( this, &SPropertyTable::GenerateRow ) .OnGetChildren( this, &SPropertyTable::OnGetChildren ) .HeaderRow( SAssignNew( HeaderRow, SPropertyTableHeaderRow, InPropertyTable ).Style( Style ).Customizations( InArgs._ColumnCustomizations ) ) .ItemHeight_Raw( Table.Get(), &IPropertyTable::GetItemHeight ) .ClearSelectionOnClick( false)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (STreeView<TSharedRef<IPropertyTableRow>)",
    "insertText": "Construct(TreeViewArgs)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "OnSelectionChanged()->AddSP( this, &SPropertyTable::UpdateSelection)"
  },
  {
    "label": "OnRowsChanged()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "OnRowsChanged()->AddSP( this, &STreeView< TSharedRef< IPropertyTableRow > >::RequestTreeRefresh)"
  },
  {
    "label": "OnRootPathChanged()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "OnRootPathChanged()->AddSP( this, &SPropertyTable::SyncBreadcrumbTrail)"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget> TreeContent = ChildSlot .)",
    "insertText": "GetWidget()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SVerticalBox ) +SVerticalBox::Slot() .Padding(0.0f, 0.0f, 0.0f, 1.0f) .AutoHeight() [ SNew(SBorder) .BorderImage( FAppStyle::GetBrush( \"Brushes.Header\" ) ) [ SAssignNew( BreadcrumbTrail, SBreadcrumbTrail< int32 > ) .PersistentBreadcrumbs( true ) .DelimiterImage(FAppStyle::Get().GetBrush(\"Icons.ChevronRight\")) .OnCrumbClicked( this, &SPropertyTable::OnCrumbClicked ) .GetCrumbMenuContent( this, &SPropertyTable::GetCrumbMenuContent ) ] ] +SVerticalBox::Slot() .FillHeight( 1.0f ) [ SNew(SBorder) .BorderImage( FAppStyle::GetBrush( \"ToolPanel.GroupBorder\" ))"
  },
  {
    "label": "SyncBreadcrumbTrail()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SyncBreadcrumbTrail()"
  },
  {
    "label": "GetSelectedRows()",
    "kind": "Method",
    "detail": "Function (const TSet<TSharedRef<IPropertyTableRow>> SelectedRows = Table ->)",
    "insertText": "GetSelectedRows()"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemSelection(*RowIter, true)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::Direct)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "Tick()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (STreeView<TSharedRef<IPropertyTableRow>)",
    "insertText": "Tick(AllottedGeometry, InCurrentTime, InDeltaTime)"
  },
  {
    "label": "RequestRefresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRefresh()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (WidgetGenerator .)",
    "insertText": "Clear()"
  },
  {
    "label": "RequestTreeRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestTreeRefresh()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Unhandled()"
  },
  {
    "label": "GetSelectionUnit()",
    "kind": "Method",
    "detail": "Function (const EPropertyTableSelectionUnit::Type SelectionUnit = Table ->)",
    "insertText": "GetSelectionUnit()"
  },
  {
    "label": "GetCurrentCell()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableCell> CurrentCell = Table ->)",
    "insertText": "GetCurrentCell()"
  },
  {
    "label": "GetCurrentColumn()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableColumn> CurrentColumn = Table ->)",
    "insertText": "GetCurrentColumn()"
  },
  {
    "label": "GetCurrentRow()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableRow> CurrentRow = Table ->)",
    "insertText": "GetCurrentRow()"
  },
  {
    "label": "GetFirstCellInSelection()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableCell> FirstCellInSelection = Table ->)",
    "insertText": "GetFirstCellInSelection()"
  },
  {
    "label": "GetLastCellInSelection()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableCell> LastCellInSelection = Table ->)",
    "insertText": "GetLastCellInSelection()"
  },
  {
    "label": "ExitEditMode()",
    "kind": "Method",
    "detail": "Function (CurrentCell ->)",
    "insertText": "ExitEditMode()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (Reply =)",
    "insertText": "Handled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::C && InKeyEvent.IsControlDown())"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (const int32 StartingCellRowIndex = Table ->)",
    "insertText": "GetRows().Find( FirstCellInSelection->GetRow())"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (const int32 EndingCellRowIndex = Table ->)",
    "insertText": "GetRows().Find( LastCellInSelection->GetRow())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 TopMostRowIndex = StartingCellRowIndex<EndingCellRowIndex ? StartingCellRowIndex : EndingCellRowIndex ; const int32 BottomMostRowIndex = StartingCellRowIndex> EndingCellRowIndex ? StartingCellRowIndex : EndingCellRowIndex ; const int32 StartingCellColumnIndex = Table ->)",
    "insertText": "GetColumns().Find( FirstCellInSelection->GetColumn())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 EndingCellColumnIndex = Table ->)",
    "insertText": "GetColumns().Find( LastCellInSelection->GetColumn())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 LeftMostColumnIndex = StartingCellColumnIndex<EndingCellColumnIndex ? StartingCellColumnIndex : EndingCellColumnIndex ; const int32 RightMostColumnIndex = StartingCellColumnIndex> EndingCellColumnIndex ? StartingCellColumnIndex : EndingCellColumnIndex ; const TSharedRef<IPropertyTableCell> ActualStartingCell = Table ->)",
    "insertText": "GetColumns()[ LeftMostColumnIndex ]->GetCell( Table->GetRows()[ TopMostRowIndex ])"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyTableCell> ActualEndingCell = Table ->)",
    "insertText": "GetColumns()[ RightMostColumnIndex ]->GetCell( Table->GetRows()[ BottomMostRowIndex ])"
  },
  {
    "label": "Tab()",
    "kind": "Method",
    "detail": "Function (FString CopiedText ; FString)",
    "insertText": "Tab(TEXT(\"\\t\"))"
  },
  {
    "label": "NewLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NewLine(LINE_TERMINATOR)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool IsFirstRow = true ; TSharedPtr<IPropertyTableCell> RowCell = ActualStartingCell ;)",
    "insertText": "while(RowCell.IsValid())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CopiedText + = NewLine ; } bool IsFirstColumn = true ; TSharedPtr<IPropertyTableCell> Cell = RowCell ;)",
    "insertText": "while(Cell.IsValid())"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (CopiedText + = Cell ->)",
    "insertText": "GetValueAsString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Cell->GetColumn() == ActualEndingCell->GetColumn())"
  },
  {
    "label": "GetNextCellInRow()",
    "kind": "Method",
    "detail": "Function (break ; } Cell = Table ->)",
    "insertText": "GetNextCellInRow(Cell.ToSharedRef())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IsFirstColumn = false ; })",
    "insertText": "if(RowCell->GetRow() == ActualEndingCell->GetRow())"
  },
  {
    "label": "GetNextCellInColumn()",
    "kind": "Method",
    "detail": "Function (break ; } RowCell = Table ->)",
    "insertText": "GetNextCellInColumn(RowCell.ToSharedRef())"
  },
  {
    "label": "ClipboardCopy()",
    "kind": "Method",
    "detail": "Function (IsFirstRow = false ; })",
    "insertText": "ClipboardCopy(*CopiedText)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::V && InKeyEvent.IsControlDown())"
  },
  {
    "label": "ClipboardPaste()",
    "kind": "Method",
    "detail": "Function (FString Result ;)",
    "insertText": "ClipboardPaste(Result)"
  },
  {
    "label": "PasteTextAtCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "PasteTextAtCell(Result, CurrentCell.ToSharedRef())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::A && InKeyEvent.IsControlDown())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Key == EKeys::Home)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InKeyEvent.IsControlDown())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CurrentRow.IsValid() && CurrentCell.IsValid() && InKeyEvent.IsShiftDown())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CurrentRow.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::End)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::Left)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InKeyEvent.IsControlDown() && CurrentRow.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CurrentCell.IsValid() && InKeyEvent.IsShiftDown())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LastCellInSelection == CurrentCell || CurrentCell->GetColumn() == LastCellInSelection->GetColumn())"
  },
  {
    "label": "MoveToCell()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "MoveToCell(Table->GetPreviousCellInRow( CurrentCell.ToSharedRef() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(CurrentCell.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::Right)"
  },
  {
    "label": "MoveToCell()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "MoveToCell(Table->GetNextCellInRow( CurrentCell.ToSharedRef() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::Up)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InKeyEvent.IsControlDown() && CurrentColumn.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LastCellInSelection == CurrentCell || CurrentCell->GetRow() == LastCellInSelection->GetRow())"
  },
  {
    "label": "MoveToCell()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "MoveToCell(Table->GetPreviousCellInColumn( CurrentCell.ToSharedRef() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::Down)"
  },
  {
    "label": "MoveToCell()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "MoveToCell(Table->GetNextCellInColumn( CurrentCell.ToSharedRef() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::Tab)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Key == EKeys::SpaceBar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Key == EKeys::Enter)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} } return STreeView<TSharedRef<IPropertyTableRow>)",
    "insertText": "OnKeyDown(MyGeometry, InKeyEvent)"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FKey Key = InKeyEvent .)",
    "insertText": "GetKey()"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (} } return STreeView<TSharedRef<IPropertyTableRow>)",
    "insertText": "OnPreviewKeyDown(MyGeometry, InKeyEvent)"
  },
  {
    "label": "SelectRange()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "SelectRange(const TSharedPtr< IPropertyTableCell >& StartingCell, const TSharedPtr< IPropertyTableCell >& EndingCell, const TSharedPtr< IPropertyTableCell >& CellToFocus)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} const bool InEditMode = CurrentCell .)",
    "insertText": "IsValid() ? CurrentCell->InEditMode()"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (const int32 StartingCellRowIndex = Table ->)",
    "insertText": "GetRows().Find( StartingCell->GetRow())"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (const int32 EndingCellRowIndex = Table ->)",
    "insertText": "GetRows().Find( EndingCell->GetRow())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 TopMostRowIndex = StartingCellRowIndex<EndingCellRowIndex ? StartingCellRowIndex : EndingCellRowIndex ; const int32 BottomMostRowIndex = StartingCellRowIndex> EndingCellRowIndex ? StartingCellRowIndex : EndingCellRowIndex ; const int32 StartingCellColumnIndex = Table ->)",
    "insertText": "GetColumns().Find( StartingCell->GetColumn())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 EndingCellColumnIndex = Table ->)",
    "insertText": "GetColumns().Find( EndingCell->GetColumn())"
  },
  {
    "label": "SelectCellRange()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SelectCellRange(ActualStartingCell, ActualEndingCell)"
  },
  {
    "label": "SetCurrentCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetCurrentCell(CellToFocus)"
  },
  {
    "label": "EnterEditMode()",
    "kind": "Method",
    "detail": "Function (CellToFocus ->)",
    "insertText": "EnterEditMode()"
  },
  {
    "label": "MoveToCell()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "MoveToCell(const TSharedPtr< IPropertyTableCell >& CellToFocus)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TSet<TSharedRef<IPropertyTableCell>> CellsToSelect ; CellsToSelect .)",
    "insertText": "Add(CellToFocus.ToSharedRef())"
  },
  {
    "label": "SetSelectedCells()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetSelectedCells(CellsToSelect)"
  },
  {
    "label": "GetWidgetForItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITableRow> WidgetForItem = WidgetGenerator .)",
    "insertText": "GetWidgetForItem(CellToFocus->GetRow())"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestScrollIntoView(CellToFocus->GetRow())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InEditMode)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GenerateRow()",
    "kind": "Method",
    "detail": "Function (} } return Reply ; } protected : TSharedRef<ITableRow>)",
    "insertText": "GenerateRow(const TSharedRef< IPropertyTableRow > PropertyTableRow, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSelectionChanged(const TSharedPtr< IPropertyTableRow > Row, const ESelectInfo::Type SelectionInfo)"
  },
  {
    "label": "SetSelectedRows()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetSelectedRows(SelectedRows)"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RequestScrollIntoView(CurrentRow.ToSharedRef())"
  },
  {
    "label": "UpdateSelection()",
    "kind": "Method",
    "detail": "Function (} } bUpdatingSelection = false ; } void)",
    "insertText": "UpdateSelection()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemSelection(*RowIter, true)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (} } bUpdatingSelection = false ; } void)",
    "insertText": "OnGetChildren(const TSharedRef< IPropertyTableRow > ParentPropertyTableRow, TArray< TSharedRef< IPropertyTableRow > >& OutChildren)"
  },
  {
    "label": "GetChildRows()",
    "kind": "Method",
    "detail": "Function (ParentPropertyTableRow ->)",
    "insertText": "GetChildRows(OutChildren)"
  },
  {
    "label": "ClearCrumbs()",
    "kind": "Method",
    "detail": "Function (BreadcrumbTrail ->)",
    "insertText": "ClearCrumbs(false)"
  },
  {
    "label": "PushCrumb()",
    "kind": "Method",
    "detail": "Function (BreadcrumbTrail ->)",
    "insertText": "PushCrumb(LOCTEXT(\"BreadcrumbRootDisplayName\", \"Root\"), -1)"
  },
  {
    "label": "GetRootPath()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FPropertyPath> RootPath = Table ->)",
    "insertText": "GetRootPath()"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo& PropInfo = RootPath ->)",
    "insertText": "GetPropertyInfo(Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FFormatNamedArguments Args ; Args .)",
    "insertText": "Add(TEXT(\"ArrayIndex\"), PropInfo.ArrayIndex)"
  },
  {
    "label": "PushCrumb()",
    "kind": "Method",
    "detail": "Function (BreadcrumbTrail ->)",
    "insertText": "PushCrumb(FText::Format(LOCTEXT(\"ArrayIndexWrapper\", \"[{ArrayIndex}]\"), Args), Index)"
  },
  {
    "label": "PushCrumb()",
    "kind": "Method",
    "detail": "Function (} else { BreadcrumbTrail ->)",
    "insertText": "PushCrumb(FText::FromName(PropInfo.Property->GetFName()), Index)"
  },
  {
    "label": "OnCrumbClicked()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "OnCrumbClicked(const int32& Item)"
  },
  {
    "label": "AmountToTrimRoot()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "AmountToTrimRoot(RootPath->GetNumProperties() - 1)"
  },
  {
    "label": "SetRootPath()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetRootPath(RootPath->TrimPath( RootPath->GetNumProperties() ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(AmountToTrimRoot > 0)"
  },
  {
    "label": "SetRootPath()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetRootPath(RootPath->TrimPath( AmountToTrimRoot ))"
  },
  {
    "label": "GetCrumbMenuContent()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SWidget>)",
    "insertText": "GetCrumbMenuContent(const int32& Item)"
  },
  {
    "label": "TrimPath()",
    "kind": "Method",
    "detail": "Function (RootPath = RootPath ->)",
    "insertText": "TrimPath(RootPath->GetNumProperties())"
  },
  {
    "label": "TrimPath()",
    "kind": "Method",
    "detail": "Function (} else { RootPath = RootPath ->)",
    "insertText": "TrimPath(( RootPath->GetNumProperties() - 1 ) - Item)"
  },
  {
    "label": "GetPossibleExtensionsForPath()",
    "kind": "Method",
    "detail": "Function (} TArray<FPropertyInfo> PathExtensions = Table ->)",
    "insertText": "GetPossibleExtensionsForPath(RootPath)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMultiMap<UStruct*,FPropertyInfo> TypeToProperties ;)",
    "insertText": "for(auto ExtensionIter = PathExtensions.CreateIterator(); ExtensionIter; ++ExtensionIter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo& Extension =* ExtensionIter ;)",
    "insertText": "if(FPropertyEditorPermissionList::Get().DoesPropertyPassFilter(Extension.Property->GetOwnerStruct(), Extension.Property->GetFName()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TypeToProperties .)",
    "insertText": "Add(Extension.Property->GetOwnerStruct(), Extension)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (} } FMenuBuilder)",
    "insertText": "MenuBuilder(true, NULL)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function ({ TArray<UStruct*> Types ; TypeToProperties .)",
    "insertText": "GetKeys(Types)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"PropertyTableCrumb\", FText::FromName( (*TypeIter)->GetFName() ))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "for(auto ExtensionIter = TypeToProperties.CreateConstKeyIterator( *TypeIter ); ExtensionIter; ++ExtensionIter)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo& PropInfo = ExtensionIter .)",
    "insertText": "Value()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (const TWeakFieldPtr<const FProperty> Property = PropInfo . Property ; const FText PropName =)",
    "insertText": "FromString(UEditorEngine::GetFriendlyName(Property.Get()))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(PropName, PropName, FSlateIcon(), FUIAction( FExecuteAction::CreateSP( this, &SPropertyTable::SetRootPath, RootPath->ExtendPath( PropInfo ) ) ))"
  },
  {
    "label": "EndSection()",
    "kind": "Method",
    "detail": "Function (} } MenuBuilder .)",
    "insertText": "EndSection()"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (} } return MenuBuilder .)",
    "insertText": "MakeWidget()"
  },
  {
    "label": "SetRootPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRootPath(const TSharedRef< FPropertyPath > Path)"
  },
  {
    "label": "SetRootPath()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetRootPath(Path)"
  },
  {
    "label": "Private_UsesSelectorFocus()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Private_UsesSelectorFocus()"
  }
]