[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELocalizedTextSourcePriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELocalizedTextSourcePriority"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "FRefCountedDisplayString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefCountedDisplayString"
  },
  {
    "label": "TDisplayStringPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDisplayStringPtrBase"
  },
  {
    "label": "TDisplayStringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDisplayStringRef"
  },
  {
    "label": "TDisplayStringPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDisplayStringPtr"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / RefCounting . h \" # include \" Templates / Requires . h \" # include \" Templates / SharedPointer . h \" # include<type_traits> enum class ELocalizedTextSourceCategory : uint8 { Game,Engine,Editor,} ; enum class EQueryLocalizedResourceResult : uint8 { Found,NotFound,NotImplemented,} ; enum class ELocalizationLoadFlags : uint8 { None = 0,Native = 1<<0,Editor = 1<<1,Game = 1<<2,Engine = 1<<3,Additional = 1<<4,ForceLocalizedGame = 1<<5,SkipExisting = 1<<6,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELocalizationLoadFlags)"
  },
  {
    "label": "UE_TEXT_DISPLAYSTRING_USE_REFCOUNTPTR()",
    "kind": "Method",
    "detail": "Function (struct ELocalizedTextSourcePriority { enum Enum { Lowest = - 1 0 0 0,Low = - 1 0 0,Normal = 0,High = 1 0 0,Highest = 1 0 0 0,} ; } ; # ifndef UE_TEXT_DISPLAYSTRING_USE_REFCOUNTPTR # define)",
    "insertText": "UE_TEXT_DISPLAYSTRING_USE_REFCOUNTPTR(1)"
  },
  {
    "label": "FRefCountedDisplayString()",
    "kind": "Method",
    "detail": "Function (class FRefCountedDisplayString : public TRefCountingMixin<FRefCountedDisplayString> { public :)",
    "insertText": "FRefCountedDisplayString(FString&& InDisplayString) : DisplayString(MoveTemp(InDisplayString))"
  },
  {
    "label": "Private_GetDisplayString()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FString&)",
    "insertText": "Private_GetDisplayString()"
  },
  {
    "label": "TDisplayStringPtrBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TDisplayStringPtrBase()"
  },
  {
    "label": "TDisplayStringPtrBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDisplayStringPtrBase(const TRefCountPtr<FRefCountedDisplayString>& InDisplayStringPtr) : DisplayStringPtr(InDisplayStringPtr)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] ObjectType&)",
    "insertText": "operator()"
  },
  {
    "label": "Private_GetDisplayStringPtr()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const TRefCountPtr<FRefCountedDisplayString>&)",
    "insertText": "Private_GetDisplayStringPtr()"
  },
  {
    "label": "TDisplayStringRef()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<FRefCountedDisplayString> DisplayStringPtr ; } ; template<ObjectType> class TDisplayStringRef : public TDisplayStringPtrBase<ObjectType> { public :)",
    "insertText": "TDisplayStringRef()"
  },
  {
    "label": "TDisplayStringRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDisplayStringRef(const TRefCountPtr<FRefCountedDisplayString>& InDisplayStringPtr) : TDisplayStringPtrBase<ObjectType>(InDisplayStringPtr)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherType*, ObjectType*>) > TDisplayStringRef(const TDisplayStringRef<OtherType>& InOther) : TDisplayStringPtrBase<ObjectType>(InOther.Private_GetDisplayStringPtr())"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherType*, ObjectType*>) > TDisplayStringRef& operator=(const TDisplayStringRef<OtherType>& InOther)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return* this ; } [ [ nodiscard ] ] ObjectType&)",
    "insertText": "Get()"
  },
  {
    "label": "TDisplayStringPtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<ObjectType> class TDisplayStringPtr : public TDisplayStringPtrBase<ObjectType> { public :)",
    "insertText": "TDisplayStringPtr()"
  },
  {
    "label": "TDisplayStringPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDisplayStringPtr(TYPE_OF_NULLPTR) : TDisplayStringPtr()"
  },
  {
    "label": "TDisplayStringPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDisplayStringPtr(const TRefCountPtr<FRefCountedDisplayString>& InDisplayStringPtr) : TDisplayStringPtrBase<ObjectType>(InDisplayStringPtr)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherType*, ObjectType*>) > TDisplayStringPtr(const TDisplayStringPtr<OtherType>& InOther) : TDisplayStringPtrBase<ObjectType>(InOther.Private_GetDisplayStringPtr())"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherType*, ObjectType*>) > TDisplayStringPtr(const TDisplayStringRef<OtherType>& InOther) : TDisplayStringPtrBase<ObjectType>(InOther.Private_GetDisplayStringPtr())"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherType*, ObjectType*>) > TDisplayStringPtr& operator=(const TDisplayStringPtr<OtherType>& InOther)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<OtherType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherType*, ObjectType*>) > TDisplayStringPtr& operator=(const TDisplayStringRef<OtherType>& InOther)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FRefCountedDisplayString()",
    "kind": "Method",
    "detail": "Function (this -> DisplayStringPtr = TRefCountPtr<)",
    "insertText": "FRefCountedDisplayString()"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TDisplayStringRef<ObjectType>)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } template<ObjectTypeA,ObjectTypeB> [ [ nodiscard ] ] bool)",
    "insertText": "operator(const UE::Text::Private::TDisplayStringRef<ObjectTypeA>& A, const UE::Text::Private::TDisplayStringRef<ObjectTypeB>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ObjectTypeA,ObjectTypeB> [ [ nodiscard ] ] bool)",
    "insertText": "operator(const UE::Text::Private::TDisplayStringRef<ObjectTypeA>& A, const UE::Text::Private::TDisplayStringPtr<ObjectTypeB>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ObjectTypeA,ObjectTypeB> [ [ nodiscard ] ] bool)",
    "insertText": "operator(const UE::Text::Private::TDisplayStringPtr<ObjectTypeA>& A, const UE::Text::Private::TDisplayStringRef<ObjectTypeB>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ObjectTypeA,ObjectTypeB> [ [ nodiscard ] ] bool)",
    "insertText": "operator(const UE::Text::Private::TDisplayStringPtr<ObjectTypeA>& A, const UE::Text::Private::TDisplayStringPtr<ObjectTypeB>& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(const UE::Text::Private::TDisplayStringRef<ObjectType>& A)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(const UE::Text::Private::TDisplayStringPtr<ObjectType>& A)"
  },
  {
    "label": "MakeTextDisplayString()",
    "kind": "Method",
    "detail": "Function (} using FTextDisplayStringRef = UE::Text::Private::TDisplayStringRef<FString> ; using FTextDisplayStringPtr = UE::Text::Private::TDisplayStringPtr<FString> ; using FTextConstDisplayStringRef = UE::Text::Private::TDisplayStringRef<const FString> ; using FTextConstDisplayStringPtr = UE::Text::Private::TDisplayStringPtr<const FString> ; [ [ nodiscard ] ] FTextDisplayStringRef)",
    "insertText": "MakeTextDisplayString(FString&& InDisplayString)"
  }
]