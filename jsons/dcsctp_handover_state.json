[
  {
    "label": "DcSctpSocketHandoverState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DcSctpSocketHandoverState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Capabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Capabilities"
  },
  {
    "label": "OutgoingStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OutgoingStream"
  },
  {
    "label": "Transmission",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Transmission"
  },
  {
    "label": "OrderedStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrderedStream"
  },
  {
    "label": "UnorderedStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnorderedStream"
  },
  {
    "label": "Receive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Receive"
  },
  {
    "label": "HandoverReadinessStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandoverReadinessStatus"
  },
  {
    "label": "HandoverReadinessStatusTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandoverReadinessStatusTag"
  },
  {
    "label": "HandoverReadinessStatus()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PUBLIC_DCSCTP_HANDOVER_STATE_H_ # define NET_DCSCTP_PUBLIC_DCSCTP_HANDOVER_STATE_H_ # include<cstdint> # include<string> # include<vector> # include \" rtc_base / strong_alias . h \" namespace dcsctp { struct DcSctpSocketHandoverState { enum class SocketState { kClosed,kConnected,} ; SocketState socket_state = SocketState::kClosed ; uint32_t my_verification_tag = 0 ; uint32_t my_initial_tsn = 0 ; uint32_t peer_verification_tag = 0 ; uint32_t peer_initial_tsn = 0 ; uint64_t tie_tag = 0 ; struct Capabilities { bool partial_reliability = false ; bool message_interleaving = false ; bool reconfig = false ; uint16_t negotiated_maximum_incoming_streams = 0 ; uint16_t negotiated_maximum_outgoing_streams = 0 ; } ; Capabilities capabilities ; struct OutgoingStream { uint32_t id = 0 ; uint32_t next_ssn = 0 ; uint32_t next_unordered_mid = 0 ; uint32_t next_ordered_mid = 0 ; uint16_t priority = 0 ; } ; struct Transmission { uint32_t next_tsn = 0 ; uint32_t next_reset_req_sn = 0 ; uint32_t cwnd = 0 ; uint32_t rwnd = 0 ; uint32_t ssthresh = 0 ; uint32_t partial_bytes_acked = 0 ; std::vector<OutgoingStream> streams ; } ; Transmission tx ; struct OrderedStream { uint32_t id = 0 ; uint32_t next_ssn = 0 ; } ; struct UnorderedStream { uint32_t id = 0 ; } ; struct Receive { bool seen_packet = false ; uint32_t last_cumulative_acked_tsn = 0 ; uint32_t last_assembled_tsn = 0 ; uint32_t last_completed_deferred_reset_req_sn = 0 ; uint32_t last_completed_reset_req_sn = 0 ; std::vector<OrderedStream> ordered_streams ; std::vector<UnorderedStream> unordered_streams ; } ; Receive rx ; } ; enum class HandoverUnreadinessReason : uint32_t { kWrongConnectionState = 1,kSendQueueNotEmpty = 2,kPendingStreamResetRequest = 4,kDataTrackerTsnBlocksPending = 8,kPendingStreamReset = 1 6,kReassemblyQueueDeliveredTSNsGap = 3 2,kStreamResetDeferred = 6 4,kOrderedStreamHasUnassembledChunks = 1 2 8,kUnorderedStreamHasUnassembledChunks = 2 5 6,kRetransmissionQueueOutstandingData = 5 1 2,kRetransmissionQueueFastRecovery = 1 0 2 4,kRetransmissionQueueNotEmpty = 2 0 4 8,kMax = kRetransmissionQueueNotEmpty,} ; class HandoverReadinessStatus : public webrtc::StrongAlias<class HandoverReadinessStatusTag,uint32_t> { public :)",
    "insertText": "HandoverReadinessStatus() : webrtc::StrongAlias<class HandoverReadinessStatusTag, uint32_t>(0)"
  },
  {
    "label": "HandoverReadinessStatus()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HandoverReadinessStatus(HandoverUnreadinessReason reason) : webrtc::StrongAlias<class HandoverReadinessStatusTag, uint32_t>( static_cast<uint32_t>(reason))"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(HandoverUnreadinessReason reason)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} HandoverReadinessStatus&)",
    "insertText": "Add(HandoverUnreadinessReason reason)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} HandoverReadinessStatus&)",
    "insertText": "Add(HandoverReadinessStatus status)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "value() |= status.value()"
  }
]