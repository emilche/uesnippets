[
  {
    "label": "MockAsyncResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAsyncResolver"
  },
  {
    "label": "MockAsyncResolverFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAsyncResolverFactory"
  },
  {
    "label": "MockAsyncResolver()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_MOCK_ASYNC_RESOLVER_H_ # define P2P_BASE_MOCK_ASYNC_RESOLVER_H_ # include \" api / async_resolver_factory . h \" # include \" rtc_base / async_resolver_interface . h \" # include \" test / gmock . h \" namespace rtc { using::testing::_ ; using::testing::InvokeWithoutArgs ; class MockAsyncResolver : public AsyncResolverInterface { public :)",
    "insertText": "MockAsyncResolver()"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, Start(_)).WillByDefault(InvokeWithoutArgs([this] { SignalDone(this); }))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Start, (const rtc::SocketAddress&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Start, (const rtc::SocketAddress&, int family), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, GetResolvedAddress, (int family, SocketAddress* addr), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, GetError, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Destroy, (bool), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (} ; } namespace webrtc { class MockAsyncResolverFactory : public AsyncResolverFactory { public :)",
    "insertText": "MOCK_METHOD(rtc::AsyncResolverInterface*, Create, (), (override))"
  }
]