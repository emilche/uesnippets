[
  {
    "label": "FAllocatedVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocatedVirtualTexture"
  },
  {
    "label": "FVirtualTextureAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureAllocator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTestRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestRegion"
  },
  {
    "label": "FAddressBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddressBlock"
  },
  {
    "label": "FPartiallyFreeMip",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPartiallyFreeMip"
  },
  {
    "label": "FVirtualTextureAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / HashTable . h \" # include \" VirtualTextureShared . h \" class FAllocatedVirtualTexture ; class FVirtualTextureAllocator { public :)",
    "insertText": "FVirtualTextureAllocator(uint32 Dimensions)"
  },
  {
    "label": "FVirtualTextureAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVirtualTextureAllocator()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(uint32 MaxSize)"
  },
  {
    "label": "GetAllocatedWidth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedWidth()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FAllocatedVirtualTexture*)",
    "insertText": "Find(uint32 vAddress)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (uint32 UnusedLocal_vAddress = 0 u ; return)",
    "insertText": "Find(vAddress, UnusedLocal_vAddress)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Alloc(FAllocatedVirtualTexture* VT)"
  },
  {
    "label": "TryAlloc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAlloc(uint32 InSize)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(FAllocatedVirtualTexture* VT)"
  },
  {
    "label": "GetNumAllocations()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumAllocations()"
  },
  {
    "label": "SaveDebugImage()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SaveDebugImage(const TCHAR* ImageName)"
  },
  {
    "label": "LinkFreeList()",
    "kind": "Method",
    "detail": "Function (# endif private : enum class EBlockState : uint8 { None,GlobalFreeList,FreeList,PartiallyFreeList,AllocatedTexture,} ; struct FTestRegion { uint32 BaseIndex ; uint32 vTileX0 ; uint32 vTileY0 ; uint32 vTileX1 ; uint32 vTileY1 ; } ; void)",
    "insertText": "LinkFreeList(uint16& InOutListHead, EBlockState State, uint16 Index)"
  },
  {
    "label": "UnlinkFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkFreeList(uint16& InOutListHead, EBlockState State, uint16 Index)"
  },
  {
    "label": "AcquireBlock()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AcquireBlock()"
  },
  {
    "label": "FreeAddressBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeAddressBlock(uint32 Index, bool bTopLevelBlock)"
  },
  {
    "label": "FindAddressBlock()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindAddressBlock(uint32 vAddress)"
  },
  {
    "label": "SubdivideBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubdivideBlock(uint32 ParentIndex)"
  },
  {
    "label": "MarkBlockAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBlockAllocated(uint32 Index, uint32 vAllocatedTileX, uint32 vAllocatedTileY, FAllocatedVirtualTexture* VT)"
  },
  {
    "label": "TestAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestAllocation(uint32 Index, uint32 vTileX0, uint32 vTileY0, uint32 vTileX1, uint32 vTileY1)"
  },
  {
    "label": "RecurseComputeFreeMip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecurseComputeFreeMip(uint16 BlockIndex, uint32 Depth, uint64& IoBlockMap)"
  },
  {
    "label": "ComputeFreeMip()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeFreeMip(uint16 BlockIndex)"
  },
  {
    "label": "FreeMipUpdateParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMipUpdateParents(uint16 ParentIndex)"
  },
  {
    "label": "FillDebugImage()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "FillDebugImage(uint32 Index, uint32* ImageData, TMap<FAllocatedVirtualTexture*, uint32>& ColorMap)"
  },
  {
    "label": "FAddressBlock()",
    "kind": "Method",
    "detail": "Function (# endif struct FAddressBlock { FAllocatedVirtualTexture* VT ; uint32 vAddress : 2 4 ; uint32 vLogSize : 4 ; uint32 MipBias : 4 ; uint16 Parent ; uint16 FirstChild ; uint16 FirstSibling ; uint16 NextSibling ; uint16 NextFree ; uint16 PrevFree ; EBlockState State ; uint8 FreeMip ;)",
    "insertText": "FAddressBlock()"
  },
  {
    "label": "FAddressBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAddressBlock(uint8 LogSize) : VT(nullptr) , vAddress(0) , vLogSize(LogSize) , MipBias(0) , Parent(0xffff) , FirstChild(0xffff) , FirstSibling(0xffff) , NextSibling(0xffff) , NextFree(0xffff) , PrevFree(0xffff) , State(EBlockState::None) , FreeMip(0)"
  },
  {
    "label": "FAddressBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAddressBlock(const FAddressBlock& Block, uint32 Offset, uint32 Dimensions) : VT(nullptr) , vAddress(Block.vAddress + (Offset << (Dimensions * Block.vLogSize))) , vLogSize(Block.vLogSize) , MipBias(0) , Parent(Block.Parent) , FirstChild(0xffff) , FirstSibling(Block.FirstSibling) , NextSibling(0xffff) , NextFree(0xffff) , PrevFree(0xffff) , State(EBlockState::None) , FreeMip(0)"
  }
]