[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FEdGraphEditAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphEditAction"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FGraphReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphReference"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FGraphNodeCreator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNodeCreator"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "MinRequiredType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MinRequiredType"
  },
  {
    "label": "ArrayElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayElementType"
  },
  {
    "label": "MinRequiredType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MinRequiredType"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FGraphNodeCreator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNodeCreator"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "SetGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraph(UEdGraph* InGraph)"
  },
  {
    "label": "AddOnGraphChangedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnGraphChangedHandler( const FOnGraphChanged::FDelegate& InHandler )"
  },
  {
    "label": "RemoveOnGraphChangedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnGraphChangedHandler( FDelegateHandle Handle )"
  },
  {
    "label": "SetAsIntermediate()",
    "kind": "Method",
    "detail": "Function (FSetAsIntermediateNode)",
    "insertText": "SetAsIntermediate(Node)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNode( UEdGraphNode* NodeToAdd, bool bUserAction = false, bool bSelectNewNode = true )"
  },
  {
    "label": "SelectNodeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodeSet(TSet<const UEdGraphNode*> NodeSelection, bool bFromUI = false)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNode( UEdGraphNode* NodeToRemove, bool bBreakAllLinks = true, bool bAlwaysMarkDirty = true )"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGraphChanged()"
  },
  {
    "label": "NotifyNodeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNodeChanged(const UEdGraphNode* Node)"
  },
  {
    "label": "MoveNodesToAnotherGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodesToAnotherGraph(UEdGraph* DestinationGraph, bool bIsLoading, bool bInIsCompiling)"
  },
  {
    "label": "GetGoodPlaceForNewNode()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetGoodPlaceForNewNode()"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChange( const FString& PropertyName )"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange( const FPropertyChangedEvent& PropertyChangedEvent, const FString& PropertyName )"
  },
  {
    "label": "AddPropertyChangedNotifier()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddPropertyChangedNotifier(const FOnPropertyChanged::FDelegate& InDelegate )"
  },
  {
    "label": "RemovePropertyChangedNotifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePropertyChangedNotifier(FDelegateHandle InHandle )"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGraphChanged( const FEdGraphEditAction& Action )"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateNode( NewNodeClass, false, bSelectNewNode )"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateNode(NewNodeClass, true, bSelectNewNode)"
  },
  {
    "label": "NodeCreator()",
    "kind": "Method",
    "detail": "Function (FGraphNodeCreator<NodeType>)",
    "insertText": "NodeCreator(Graph)"
  },
  {
    "label": "FGraphNodeCreator()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FGraphNodeCreator(const FGraphNodeCreator& rhs)"
  }
]