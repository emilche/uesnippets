[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "FEdGraphEditAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphEditAction"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FGraphReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphReference"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "FGraphNodeCreator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNodeCreator"
  },
  {
    "label": "MinRequiredType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MinRequiredType"
  },
  {
    "label": "ArrayElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayElementType"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" UObject / Class . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / Casts . h \" # include \" EdGraph / EdGraphNode . h \" # include \" BlueprintUtilities . h \" # include \" EdGraph . generated . h \" class UEdGraph ; struct FEdGraphEditAction ; struct FPropertyChangedEvent ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() protected: UPROPERTY()"
  },
  {
    "label": "FGraphReference()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGraphReference() : MacroGraph(NULL) , GraphBlueprint(NULL)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "GetBlueprint()",
    "kind": "Method",
    "detail": "Function (class UBlueprint*)",
    "insertText": "GetBlueprint()"
  },
  {
    "label": "GetGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "GetGraph()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<> struct TStructOpsTypeTraits<FGraphReference> : public TStructOpsTypeTraitsBase2<FGraphReference> { enum { WithPostSerialize = true,} ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY()"
  },
  {
    "label": "GetSchema()",
    "kind": "Method",
    "detail": "Function (# endif public : template<NodeType> struct FGraphNodeCreator ; const class UEdGraphSchema*)",
    "insertText": "GetSchema()"
  },
  {
    "label": "AddOnGraphChangedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnGraphChangedHandler(const FOnGraphChanged::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnGraphChangedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnGraphChangedHandler(FDelegateHandle Handle)"
  },
  {
    "label": "BuildSubobjectMapping()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "BuildSubobjectMapping(UObject* OtherObject, TMap<UObject*, UObject*>& ObjectMapping)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchiveRecord Record)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "CreateIntermediateNode()",
    "kind": "Method",
    "detail": "Function (# endif public : template<NodeClass> NodeClass*)",
    "insertText": "CreateIntermediateNode()"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (NodeClass*)",
    "insertText": "Node(NodeClass*)CreateNode(NodeClass::StaticClass())"
  },
  {
    "label": "SetAsIntermediate()",
    "kind": "Method",
    "detail": "Function (FSetAsIntermediateNode)",
    "insertText": "SetAsIntermediate(Node)"
  },
  {
    "label": "SelectNodeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNodeSet(TSet<const UEdGraphNode*> NodeSelection, bool bFromUI = false)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNode(UEdGraphNode* NodeToRemove, bool bBreakAllLinks = true, bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGraphChanged()"
  },
  {
    "label": "NotifyNodeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNodeChanged(const UEdGraphNode* Node)"
  },
  {
    "label": "MoveNodesToAnotherGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodesToAnotherGraph(UEdGraph* DestinationGraph, bool bIsLoading, bool bInIsCompiling)"
  },
  {
    "label": "GetNodesOfClassEx()",
    "kind": "Method",
    "detail": "Function (template<class MinRequiredType,class ArrayElementType> void)",
    "insertText": "GetNodesOfClassEx(TArray<ArrayElementType*>& OutNodes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode* Node = Nodes [ i ] ;)",
    "insertText": "if(MinRequiredType* TypedNode = Cast<MinRequiredType>(Node))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutNodes .)",
    "insertText": "Add(TypedNode)"
  },
  {
    "label": "GetNodesOfClass()",
    "kind": "Method",
    "detail": "Function (} } } template<class MinRequiredType> void)",
    "insertText": "GetNodesOfClass(TArray<MinRequiredType*>& OutNodes)"
  },
  {
    "label": "MinRequiredType()",
    "kind": "Method",
    "detail": "Function (GetNodesOfClassEx<MinRequiredType,)",
    "insertText": "MinRequiredType(OutNodes)"
  },
  {
    "label": "GetAllChildrenGraphs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllChildrenGraphs(TArray<UEdGraph*>& Graphs)"
  },
  {
    "label": "GetOuterGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "GetOuterGraph(UObject* Obj)"
  },
  {
    "label": "GetGoodPlaceForNewNode()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetGoodPlaceForNewNode()"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "NotifyPreChange(const FString& PropertyName)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, const FString& PropertyName)"
  },
  {
    "label": "AddPropertyChangedNotifier()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddPropertyChangedNotifier(const FOnPropertyChanged::FDelegate& InDelegate)"
  },
  {
    "label": "RemovePropertyChangedNotifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePropertyChangedNotifier(FDelegateHandle InHandle)"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "NotifyGraphChanged(const FEdGraphEditAction& Action)"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "CreateNode(TSubclassOf<UEdGraphNode> NewNodeClass, bool bFromUI, bool bSelectNewNode)"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "CreateNode(TSubclassOf<UEdGraphNode> NewNodeClass, bool bSelectNewNode = true)"
  },
  {
    "label": "CreateUserInvokedNode()",
    "kind": "Method",
    "detail": "Function (} UEdGraphNode*)",
    "insertText": "CreateUserInvokedNode(TSubclassOf<UEdGraphNode> NewNodeClass, bool bSelectNewNode = true)"
  },
  {
    "label": "FGraphNodeCreator()",
    "kind": "Method",
    "detail": "Function (} private : FOnGraphChanged OnGraphChanged ; # if WITH_EDITORONLY_DATA FOnPropertyChanged PropertyChangedNotifiers ; # endif } ; template<NodeType> struct FGraphNodeCreator { public :)",
    "insertText": "FGraphNodeCreator(UEdGraph& InGraph) : Node(NULL), Graph(InGraph), bPlaced(false)"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (} NodeType*)",
    "insertText": "CreateNode(bool bSelectNewNode = true, TSubclassOf<NodeType> NodeClass = NodeType::StaticClass())"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Node(NodeType*)Graph.CreateNode(NodeClass, bSelectNewNode)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Node(NodeType*)Graph.CreateUserInvokedNode(NodeClass, bSelectNewNode)"
  },
  {
    "label": "CreateNewGuid()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "CreateNewGuid()"
  },
  {
    "label": "PostPlacedNewNode()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "PostPlacedNewNode()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPlaced = true ;)",
    "insertText": "if(Node->Pins.Num() == 0)"
  },
  {
    "label": "AllocateDefaultPins()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "AllocateDefaultPins()"
  },
  {
    "label": "FGraphNodeCreator()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FGraphNodeCreator()"
  },
  {
    "label": "FGraphNodeCreator()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FGraphNodeCreator(const FGraphNodeCreator& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraphNodeCreator*)",
    "insertText": "operator(const FGraphNodeCreator& rhs)"
  }
]