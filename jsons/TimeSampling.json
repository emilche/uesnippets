[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "TimeSampling()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_TimeSampling_h # define Alembic_AbcCoreAbstract_TimeSampling_h # include<Alembic / Util / Export . h> # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / TimeSamplingType . h> # include<Alembic / AbcCoreAbstract / ArraySample . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT TimeSampling { public :)",
    "insertText": "TimeSampling(const TimeSamplingType & iTimeSamplingType, const std::vector < chrono_t > & iSampleTimes)"
  },
  {
    "label": "TimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeSampling(chrono_t iTimePerCycle, chrono_t iStartTime)"
  },
  {
    "label": "TimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeSampling()"
  },
  {
    "label": "TimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeSampling(const TimeSampling &copy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeSampling&)",
    "insertText": "operator(const TimeSampling &copy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TimeSampling & iRhs)"
  },
  {
    "label": "getNumStoredTimes()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumStoredTimes()"
  },
  {
    "label": "getStoredTimes()",
    "kind": "Method",
    "detail": "Function (} const std::vector<chrono_t>&)",
    "insertText": "getStoredTimes()"
  },
  {
    "label": "getFloorIndex()",
    "kind": "Method",
    "detail": "Function (std::pair<index_t,chrono_t>)",
    "insertText": "getFloorIndex(chrono_t iTime, index_t iNumSamples)"
  },
  {
    "label": "getCeilIndex()",
    "kind": "Method",
    "detail": "Function (std::pair<index_t,chrono_t>)",
    "insertText": "getCeilIndex(chrono_t iTime, index_t iNumSamples)"
  },
  {
    "label": "getNearIndex()",
    "kind": "Method",
    "detail": "Function (std::pair<index_t,chrono_t>)",
    "insertText": "getNearIndex(chrono_t iTime, index_t iNumSamples)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : TimeSamplingType m_timeSamplingType ; std::vector<chrono_t> m_sampleTimes ; private : void)",
    "insertText": "init()"
  }
]