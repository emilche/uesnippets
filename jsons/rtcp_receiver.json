[
  {
    "label": "ModuleRtpRtcpImpl2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleRtpRtcpImpl2"
  },
  {
    "label": "VideoBitrateAllocationObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocationObserver"
  },
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "ReportBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReportBlock"
  },
  {
    "label": "Rrtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rrtr"
  },
  {
    "label": "TargetBitrate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetBitrate"
  },
  {
    "label": "TmmbItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TmmbItem"
  },
  {
    "label": "RTCPReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCPReceiver"
  },
  {
    "label": "ModuleRtpRtcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleRtpRtcp"
  },
  {
    "label": "NonSenderRttStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonSenderRttStats"
  },
  {
    "label": "CustomSequenceChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CustomSequenceChecker"
  },
  {
    "label": "RegisteredSsrcs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisteredSsrcs"
  },
  {
    "label": "PacketInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketInformation"
  },
  {
    "label": "TmmbrInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TmmbrInformation"
  },
  {
    "label": "TimedTmmbrItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimedTmmbrItem"
  },
  {
    "label": "RrtrInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RrtrInformation"
  },
  {
    "label": "LastFirStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LastFirStatus"
  },
  {
    "label": "RttStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RttStats"
  },
  {
    "label": "SetTmmbn()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_RECEIVER_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_RECEIVER_H_ # include<list> # include<map> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / sequence_checker . h \" # include \" api / units / time_delta . h \" # include \" modules / rtp_rtcp / include / report_block_data . h \" # include \" modules / rtp_rtcp / include / rtcp_statistics . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtcp_nack_stats . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / dlrr . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / tmmb_item . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_interface . h \" # include \" rtc_base / containers / flat_map . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / ntp_time . h \" namespace webrtc { class ModuleRtpRtcpImpl2 ; class VideoBitrateAllocationObserver ; namespace rtcp { class CommonHeader ; class ReportBlock ; class Rrtr ; class TargetBitrate ; class TmmbItem ; } class RTCPReceiver final { public : class ModuleRtpRtcp { public : void)",
    "insertText": "SetTmmbn(std::vector<rtcp::TmmbItem> bounding_set)"
  },
  {
    "label": "OnRequestSendReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestSendReport()"
  },
  {
    "label": "OnReceivedNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedNack(const std::vector<uint16_t>& nack_sequence_numbers)"
  },
  {
    "label": "OnReceivedRtcpReportBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedRtcpReportBlocks(const ReportBlockList& report_blocks)"
  },
  {
    "label": "ModuleRtpRtcp()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ModuleRtpRtcp()"
  },
  {
    "label": "NonSenderRttStats()",
    "kind": "Method",
    "detail": "Function (} ; class NonSenderRttStats { public :)",
    "insertText": "NonSenderRttStats()"
  },
  {
    "label": "NonSenderRttStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NonSenderRttStats(const NonSenderRttStats&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NonSenderRttStats&)",
    "insertText": "operator(const NonSenderRttStats&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(TimeDelta non_sender_rtt_seconds)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (round_trip_time_ = non_sender_rtt_seconds ; total_round_trip_time_ + = non_sender_rtt_seconds ; round_trip_time_measurements_ + + ; } void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (round_trip_time_ .)",
    "insertText": "reset()"
  },
  {
    "label": "round_trip_time()",
    "kind": "Method",
    "detail": "Function (} absl::optional<TimeDelta>)",
    "insertText": "round_trip_time()"
  },
  {
    "label": "RTCPReceiver()",
    "kind": "Method",
    "detail": "Function (int round_trip_time_measurements_ = 0 ; } ;)",
    "insertText": "RTCPReceiver(const RtpRtcpInterface::Configuration& config, ModuleRtpRtcp* owner)"
  },
  {
    "label": "RTCPReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCPReceiver(const RtpRtcpInterface::Configuration& config, ModuleRtpRtcpImpl2* owner)"
  },
  {
    "label": "RTCPReceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RTCPReceiver()"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacket(const uint8_t* packet, size_t packet_size)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacket(rtc::MakeArrayView(packet, packet_size))"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncomingPacket(rtc::ArrayView<const uint8_t> packet)"
  },
  {
    "label": "LastReceivedReportBlockMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "LastReceivedReportBlockMs()"
  },
  {
    "label": "set_local_media_ssrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_local_media_ssrc(uint32_t ssrc)"
  },
  {
    "label": "local_media_ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "local_media_ssrc()"
  },
  {
    "label": "SetRemoteSSRC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteSSRC(uint32_t ssrc)"
  },
  {
    "label": "RemoteSSRC()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "RemoteSSRC()"
  },
  {
    "label": "receiver_only()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "receiver_only()"
  },
  {
    "label": "ConsumeReceivedXrReferenceTimeInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::ReceiveTimeInfo>)",
    "insertText": "ConsumeReceivedXrReferenceTimeInfo()"
  },
  {
    "label": "RTT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RTT(uint32_t remote_ssrc, int64_t* last_rtt_ms, int64_t* avg_rtt_ms, int64_t* min_rtt_ms, int64_t* max_rtt_ms)"
  },
  {
    "label": "GetNonSenderRTT()",
    "kind": "Method",
    "detail": "Function (NonSenderRttStats)",
    "insertText": "GetNonSenderRTT()"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "GetAndResetXrRrRtt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAndResetXrRrRtt(int64_t* rtt_ms)"
  },
  {
    "label": "OnPeriodicRttUpdate()",
    "kind": "Method",
    "detail": "Function (absl::optional<TimeDelta>)",
    "insertText": "OnPeriodicRttUpdate(Timestamp newer_than, bool sending)"
  },
  {
    "label": "GetLatestReportBlockData()",
    "kind": "Method",
    "detail": "Function (std::vector<ReportBlockData>)",
    "insertText": "GetLatestReportBlockData()"
  },
  {
    "label": "RtcpRrTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RtcpRrTimeout()"
  },
  {
    "label": "RtcpRrSequenceNumberTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RtcpRrSequenceNumberTimeout()"
  },
  {
    "label": "TmmbrReceived()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::TmmbItem>)",
    "insertText": "TmmbrReceived()"
  },
  {
    "label": "UpdateTmmbrTimers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTmmbrTimers()"
  },
  {
    "label": "BoundingSet()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::TmmbItem>)",
    "insertText": "BoundingSet(bool* tmmbr_owner)"
  },
  {
    "label": "NotifyTmmbrUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTmmbrUpdated()"
  },
  {
    "label": "CustomSequenceChecker()",
    "kind": "Method",
    "detail": "Function (private : # if RTC_DCHECK_IS_ON class CustomSequenceChecker : public SequenceChecker { public :)",
    "insertText": "CustomSequenceChecker(bool disable_checks) : disable_checks_(disable_checks)"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "CustomSequenceChecker()",
    "kind": "Method",
    "detail": "Function (} private : const bool disable_checks_ ; } ; # else class CustomSequenceChecker : public SequenceChecker { public :)",
    "insertText": "CustomSequenceChecker(bool)"
  },
  {
    "label": "RegisteredSsrcs()",
    "kind": "Method",
    "detail": "Function (} } ; # endif class RegisteredSsrcs { public : size_t kMediaSsrcIndex = 0 ; size_t kMaxSsrcs = 3 ;)",
    "insertText": "RegisteredSsrcs(bool disable_sequence_checker, const RtpRtcpInterface::Configuration& config)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "contains(uint32_t ssrc)"
  },
  {
    "label": "media_ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "media_ssrc()"
  },
  {
    "label": "set_media_ssrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_media_ssrc(uint32_t ssrc)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : RTC_NO_UNIQUE_ADDRESS CustomSequenceChecker packet_sequence_checker_ ; absl::InlinedVector<uint32_t,kMaxSsrcs> ssrcs_)",
    "insertText": "RTC_GUARDED_BY(packet_sequence_checker_)"
  },
  {
    "label": "RrtrInformation()",
    "kind": "Method",
    "detail": "Function (} ; struct PacketInformation ; struct TmmbrInformation { struct TimedTmmbrItem { rtcp::TmmbItem tmmbr_item ; int64_t last_updated_ms ; } ; int64_t last_time_received_ms = 0 ; bool ready_for_delete = false ; std::vector<rtcp::TmmbItem> tmmbn ; std::map<uint32_t,TimedTmmbrItem> tmmbr ; } ; struct RrtrInformation {)",
    "insertText": "RrtrInformation(uint32_t ssrc, uint32_t received_remote_mid_ntp_time, uint32_t local_receive_mid_ntp_time) : ssrc(ssrc), received_remote_mid_ntp_time(received_remote_mid_ntp_time), local_receive_mid_ntp_time(local_receive_mid_ntp_time)"
  },
  {
    "label": "LastFirStatus()",
    "kind": "Method",
    "detail": "Function (} uint32_t ssrc ; uint32_t received_remote_mid_ntp_time ; uint32_t local_receive_mid_ntp_time ; } ; struct LastFirStatus {)",
    "insertText": "LastFirStatus(int64_t now_ms, uint8_t sequence_number) : request_ms(now_ms), sequence_number(sequence_number)"
  },
  {
    "label": "RttStats()",
    "kind": "Method",
    "detail": "Function (} int64_t request_ms ; uint8_t sequence_number ; } ; class RttStats { public :)",
    "insertText": "RttStats()"
  },
  {
    "label": "RttStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RttStats(const RttStats&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RttStats&)",
    "insertText": "operator(const RttStats&)"
  },
  {
    "label": "AddRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRtt(TimeDelta rtt)"
  },
  {
    "label": "last_rtt()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "last_rtt()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (TimeDelta min_rtt_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (TimeDelta max_rtt_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (TimeDelta sum_rtt_ =)",
    "insertText": "Zero()"
  },
  {
    "label": "ParseCompoundPacket()",
    "kind": "Method",
    "detail": "Function (size_t num_rtts_ = 0 ; } ; bool)",
    "insertText": "ParseCompoundPacket(rtc::ArrayView<const uint8_t> packet, PacketInformation* packet_information)"
  },
  {
    "label": "TriggerCallbacksFromRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerCallbacksFromRtcpPacket(const PacketInformation& packet_information)"
  },
  {
    "label": "FindOrCreateTmmbrInfo()",
    "kind": "Method",
    "detail": "Function (TmmbrInformation*)",
    "insertText": "FindOrCreateTmmbrInfo(uint32_t remote_ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "UpdateTmmbrRemoteIsAlive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTmmbrRemoteIsAlive(uint32_t remote_ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "GetTmmbrInformation()",
    "kind": "Method",
    "detail": "Function (TmmbrInformation*)",
    "insertText": "GetTmmbrInformation(uint32_t remote_ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleSenderReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSenderReport(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleReceiverReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReceiverReport(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleReportBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReportBlock(const rtcp::ReportBlock& report_block, PacketInformation* packet_information, uint32_t remote_ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleSdes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSdes(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleXr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleXr(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information, bool& contains_dlrr, uint32_t& ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleXrReceiveReferenceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleXrReceiveReferenceTime(uint32_t sender_ssrc, const rtcp::Rrtr& rrtr) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleXrDlrrReportBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleXrDlrrReportBlock(uint32_t ssrc, const rtcp::ReceiveTimeInfo& rti) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleXrTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleXrTargetBitrate(uint32_t ssrc, const rtcp::TargetBitrate& target_bitrate, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNack(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleApp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleApp(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleBye()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBye(const rtcp::CommonHeader& rtcp_block) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandlePli()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePli(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandlePsfbApp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePsfbApp(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleTmmbr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTmmbr(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleTmmbn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTmmbn(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleSrReq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSrReq(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleFir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFir(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "HandleTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTransportFeedback(const rtcp::CommonHeader& rtcp_block, PacketInformation* packet_information) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "RtcpRrTimeoutLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RtcpRrTimeoutLocked(Timestamp now) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "RtcpRrSequenceNumberTimeoutLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RtcpRrSequenceNumberTimeoutLocked(Timestamp now) RTC_EXCLUSIVE_LOCKS_REQUIRED(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const bool receiver_only_ ; ModuleRtpRtcp* const rtp_rtcp_ ; RegisteredSsrcs registered_ssrcs_ ; RtcpBandwidthObserver* const rtcp_bandwidth_observer_ ; RtcpIntraFrameObserver* const rtcp_intra_frame_observer_ ; RtcpLossNotificationObserver* const rtcp_loss_notification_observer_ ; NetworkStateEstimateObserver* const network_state_estimate_observer_ ; TransportFeedbackObserver* const transport_feedback_observer_ ; VideoBitrateAllocationObserver* const bitrate_allocation_observer_ ; const TimeDelta report_interval_ ; Mutex rtcp_receiver_lock_ ; uint32_t remote_ssrc_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Timestamp last_received_rb_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_) = Timestamp::PlusInfinity()"
  }
]