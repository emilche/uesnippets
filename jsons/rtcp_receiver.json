[
  {
    "label": "ModuleRtpRtcpImpl2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleRtpRtcpImpl2"
  },
  {
    "label": "VideoBitrateAllocationObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocationObserver"
  },
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "ReportBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReportBlock"
  },
  {
    "label": "Rrtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rrtr"
  },
  {
    "label": "TargetBitrate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetBitrate"
  },
  {
    "label": "TmmbItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TmmbItem"
  },
  {
    "label": "RTCPReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCPReceiver"
  },
  {
    "label": "ModuleRtpRtcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleRtpRtcp"
  },
  {
    "label": "NonSenderRttStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonSenderRttStats"
  },
  {
    "label": "CustomSequenceChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CustomSequenceChecker"
  },
  {
    "label": "CustomSequenceChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CustomSequenceChecker"
  },
  {
    "label": "RegisteredSsrcs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisteredSsrcs"
  },
  {
    "label": "PacketInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketInformation"
  },
  {
    "label": "TmmbrInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TmmbrInformation"
  },
  {
    "label": "TimedTmmbrItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimedTmmbrItem"
  },
  {
    "label": "RrtrInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RrtrInformation"
  },
  {
    "label": "LastFirStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LastFirStatus"
  },
  {
    "label": "RttStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RttStats"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacket(rtc::ArrayView<const uint8_t> packet)"
  },
  {
    "label": "set_local_media_ssrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_local_media_ssrc(uint32_t ssrc)"
  },
  {
    "label": "SetRemoteSSRC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteSSRC(uint32_t ssrc)"
  },
  {
    "label": "ConsumeReceivedXrReferenceTimeInfo()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::ReceiveTimeInfo>)",
    "insertText": "ConsumeReceivedXrReferenceTimeInfo()"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "GetAndResetXrRrRtt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAndResetXrRrRtt(int64_t* rtt_ms)"
  },
  {
    "label": "OnPeriodicRttUpdate()",
    "kind": "Method",
    "detail": "Function (absl::optional<TimeDelta>)",
    "insertText": "OnPeriodicRttUpdate(Timestamp newer_than,\n                                                bool sending)"
  },
  {
    "label": "RtcpRrTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RtcpRrTimeout()"
  },
  {
    "label": "RtcpRrSequenceNumberTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RtcpRrSequenceNumberTimeout()"
  },
  {
    "label": "TmmbrReceived()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::TmmbItem>)",
    "insertText": "TmmbrReceived()"
  },
  {
    "label": "UpdateTmmbrTimers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTmmbrTimers()"
  },
  {
    "label": "BoundingSet()",
    "kind": "Method",
    "detail": "Function (std::vector<rtcp::TmmbItem>)",
    "insertText": "BoundingSet(bool* tmmbr_owner)"
  },
  {
    "label": "NotifyTmmbrUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTmmbrUpdated()"
  },
  {
    "label": "set_media_ssrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_media_ssrc(uint32_t ssrc)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ssrcs_)",
    "insertText": "RTC_GUARDED_BY(packet_sequence_checker_)"
  },
  {
    "label": "AddRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRtt(TimeDelta rtt)"
  },
  {
    "label": "ParseCompoundPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCompoundPacket(rtc::ArrayView<const uint8_t> packet,\n                           PacketInformation* packet_information)"
  },
  {
    "label": "TriggerCallbacksFromRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerCallbacksFromRtcpPacket(\n      const PacketInformation& packet_information)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_ssrc_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_sender_ntp_time_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_sender_rtp_time_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_received_sr_ntp_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_sender_packet_count_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_sender_octet_count_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (remote_sender_reports_count_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (received_rrtrs_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (received_rrtrs_ssrc_it_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (xr_rrtr_status_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (oldest_tmmbr_info_ms_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (tmmbr_infos_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtts_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (non_sender_rtts_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (received_report_blocks_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_fir_)",
    "insertText": "RTC_GUARDED_BY(rtcp_receiver_lock_)"
  }
]