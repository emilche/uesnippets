[
  {
    "label": "AudioEncoderPcm16B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderPcm16B"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_PCM16B_AUDIO_ENCODER_PCM16B_H_ # define MODULES_AUDIO_CODING_CODECS_PCM16B_AUDIO_ENCODER_PCM16B_H_ # include \" modules / audio_coding / codecs / g711 / audio_encoder_pcm . h \" namespace webrtc { class AudioEncoderPcm16B final : public AudioEncoderPcm { public : struct Config : public AudioEncoderPcm::Config { public :)",
    "insertText": "Config() : AudioEncoderPcm::Config(107), sample_rate_hz(8000)"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "AudioEncoderPcm16B()",
    "kind": "Method",
    "detail": "Function (int sample_rate_hz ; } ;)",
    "insertText": "AudioEncoderPcm16B(const Config& config) : AudioEncoderPcm(config, config.sample_rate_hz)"
  },
  {
    "label": "AudioEncoderPcm16B()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioEncoderPcm16B(const AudioEncoderPcm16B&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderPcm16B&)",
    "insertText": "operator(const AudioEncoderPcm16B&)"
  },
  {
    "label": "EncodeCall()",
    "kind": "Method",
    "detail": "Function (protected : size_t)",
    "insertText": "EncodeCall(const int16_t* audio, size_t input_len, uint8_t* encoded)"
  },
  {
    "label": "BytesPerSample()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "BytesPerSample()"
  },
  {
    "label": "GetCodecType()",
    "kind": "Method",
    "detail": "Function (AudioEncoder::CodecType)",
    "insertText": "GetCodecType()"
  }
]