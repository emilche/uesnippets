[
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "FParticleCollisions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleCollisions"
  },
  {
    "label": "FParticleCollisions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / Collision / CollisionVisitor . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { class FParticlePairMidPhase ; class FParticleCollisions { public : using FContainerType = TArray<TPair<uint64,FParticlePairMidPhase*>> ;)",
    "insertText": "FParticleCollisions()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddMidPhase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMidPhase(FGeometryParticleHandle* InParticle, FParticlePairMidPhase* InMidPhase)"
  },
  {
    "label": "RemoveMidPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMidPhase(FGeometryParticleHandle* InParticle, FParticlePairMidPhase* InMidPhase)"
  },
  {
    "label": "GetMidPhase()",
    "kind": "Method",
    "detail": "Function (FParticlePairMidPhase*)",
    "insertText": "GetMidPhase(const int32 InIndex)"
  },
  {
    "label": "VisitConstMidPhases()",
    "kind": "Method",
    "detail": "Function (template<TLambda> ECollisionVisitorResult)",
    "insertText": "VisitConstMidPhases(const TLambda& Lambda)"
  },
  {
    "label": "VisitCollisions()",
    "kind": "Method",
    "detail": "Function (template<TLambda> ECollisionVisitorResult)",
    "insertText": "VisitCollisions(const TLambda& Visitor, const ECollisionVisitorFlags VisitFlags = ECollisionVisitorFlags::VisitDefault)"
  },
  {
    "label": "VisitConstCollisions()",
    "kind": "Method",
    "detail": "Function (template<TLambda> ECollisionVisitorResult)",
    "insertText": "VisitConstCollisions(const TLambda& Visitor, const ECollisionVisitorFlags VisitFlags = ECollisionVisitorFlags::VisitDefault)"
  }
]