[
  {
    "label": "MachObjectWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachObjectWriter"
  },
  {
    "label": "MCMachObjectTargetWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCMachObjectTargetWriter"
  },
  {
    "label": "MachSymbolData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachSymbolData"
  },
  {
    "label": "RelAndSymbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelAndSymbol"
  },
  {
    "label": "MCMachObjectTargetWriter()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCMACHOBJECTWRITER_H # define LLVM_MC_MCMACHOBJECTWRITER_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallString . h \" # include \" llvm / MC / MCExpr . h \" # include \" llvm / MC / MCObjectWriter . h \" # include \" llvm / MC / StringTableBuilder . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / MachO . h \" # include<vector> namespace llvm { class MachObjectWriter ; class MCMachObjectTargetWriter { const unsigned Is64Bit : 1 ; const uint32_t CPUType ; const uint32_t CPUSubtype ; unsigned LocalDifference_RIT ; protected :)",
    "insertText": "MCMachObjectTargetWriter(bool Is64Bit_, uint32_t CPUType_, uint32_t CPUSubtype_)"
  },
  {
    "label": "setLocalDifferenceRelocationType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocalDifferenceRelocationType(unsigned Type)"
  },
  {
    "label": "MCMachObjectTargetWriter()",
    "kind": "Method",
    "detail": "Function (LocalDifference_RIT = Type ; } public : ~)",
    "insertText": "MCMachObjectTargetWriter()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "is64Bit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is64Bit()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; class MachObjectWriter : public MCObjectWriter { struct MachSymbolData { const MCSymbol* Symbol ; uint64_t StringIndex ; uint8_t SectionIndex ; bool)",
    "insertText": "operator(const MachSymbolData &RHS)"
  },
  {
    "label": "RelAndSymbol()",
    "kind": "Method",
    "detail": "Function (} ; std::unique_ptr<MCMachObjectTargetWriter> TargetObjectWriter ; struct RelAndSymbol { const MCSymbol* Sym ; MachO::any_relocation_info MRE ;)",
    "insertText": "RelAndSymbol(const MCSymbol *Sym, const MachO::any_relocation_info &MRE) : Sym(Sym), MRE(MRE)"
  },
  {
    "label": "findSymbolData()",
    "kind": "Method",
    "detail": "Function (} } ; llvm::DenseMap<const MCSection*,std::vector<RelAndSymbol>> Relocations ; llvm::DenseMap<const MCSection*,unsigned> IndirectSymBase ; SectionAddrMap SectionAddress ; StringTableBuilder StringTable ; std::vector<MachSymbolData> LocalSymbolData ; std::vector<MachSymbolData> ExternalSymbolData ; std::vector<MachSymbolData> UndefinedSymbolData ; MachSymbolData*)",
    "insertText": "findSymbolData(const MCSymbol &Sym)"
  },
  {
    "label": "MachObjectWriter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MachObjectWriter(MCMachObjectTargetWriter *MOTW, raw_pwrite_stream &OS, bool IsLittleEndian) : MCObjectWriter(OS, IsLittleEndian), TargetObjectWriter(MOTW)"
  },
  {
    "label": "findAliasedSymbol()",
    "kind": "Method",
    "detail": "Function (} const MCSymbol&)",
    "insertText": "findAliasedSymbol(const MCSymbol &Sym)"
  },
  {
    "label": "isFixupKindPCRel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFixupKindPCRel(const MCAssembler &Asm, unsigned Kind)"
  },
  {
    "label": "getSectionAddressMap()",
    "kind": "Method",
    "detail": "Function (SectionAddrMap&)",
    "insertText": "getSectionAddressMap()"
  },
  {
    "label": "getSymbolAddress()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getSymbolAddress(const MCSymbol &S, const MCAsmLayout &Layout)"
  },
  {
    "label": "getFragmentAddress()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getFragmentAddress(const MCFragment *Fragment, const MCAsmLayout &Layout)"
  },
  {
    "label": "getPaddingSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getPaddingSize(const MCSection *SD, const MCAsmLayout &Layout)"
  },
  {
    "label": "doesSymbolRequireExternRelocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesSymbolRequireExternRelocation(const MCSymbol &S)"
  },
  {
    "label": "isX86_64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isX86_64()"
  },
  {
    "label": "getCPUType()",
    "kind": "Method",
    "detail": "Function (uint32_t CPUType = TargetObjectWriter ->)",
    "insertText": "getCPUType()"
  },
  {
    "label": "writeSegmentLoadCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeSegmentLoadCommand(unsigned NumSections, uint64_t VMSize, uint64_t SectionDataStartOffset, uint64_t SectionDataSize)"
  },
  {
    "label": "writeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeSection(const MCAssembler &Asm, const MCAsmLayout &Layout, const MCSection &Sec, uint64_t FileOffset, uint64_t RelocationsStart, unsigned NumRelocations)"
  },
  {
    "label": "writeSymtabLoadCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeSymtabLoadCommand(uint32_t SymbolOffset, uint32_t NumSymbols, uint32_t StringTableOffset, uint32_t StringTableSize)"
  },
  {
    "label": "writeDysymtabLoadCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeDysymtabLoadCommand(uint32_t FirstLocalSymbol, uint32_t NumLocalSymbols, uint32_t FirstExternalSymbol, uint32_t NumExternalSymbols, uint32_t FirstUndefinedSymbol, uint32_t NumUndefinedSymbols, uint32_t IndirectSymbolOffset, uint32_t NumIndirectSymbols)"
  },
  {
    "label": "writeNlist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeNlist(MachSymbolData &MSD, const MCAsmLayout &Layout)"
  },
  {
    "label": "writeLinkeditLoadCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeLinkeditLoadCommand(uint32_t Type, uint32_t DataOffset, uint32_t DataSize)"
  },
  {
    "label": "writeLinkerOptionsLoadCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeLinkerOptionsLoadCommand(const std::vector<std::string> &Options)"
  },
  {
    "label": "addRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRelocation(const MCSymbol *RelSymbol, const MCSection *Sec, MachO::any_relocation_info &MRE)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (RelAndSymbol)",
    "insertText": "P(RelSymbol, MRE)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Relocations [ Sec ] .)",
    "insertText": "push_back(P)"
  },
  {
    "label": "recordScatteredRelocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "recordScatteredRelocation(const MCAssembler &Asm, const MCAsmLayout &Layout, const MCFragment *Fragment, const MCFixup &Fixup, MCValue Target, unsigned Log2Size, uint64_t &FixedValue)"
  },
  {
    "label": "recordTLVPRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordTLVPRelocation(const MCAssembler &Asm, const MCAsmLayout &Layout, const MCFragment *Fragment, const MCFixup &Fixup, MCValue Target, uint64_t &FixedValue)"
  },
  {
    "label": "recordRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordRelocation(MCAssembler &Asm, const MCAsmLayout &Layout, const MCFragment *Fragment, const MCFixup &Fixup, MCValue Target, bool &IsPCRel, uint64_t &FixedValue)"
  },
  {
    "label": "bindIndirectSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindIndirectSymbols(MCAssembler &Asm)"
  },
  {
    "label": "computeSymbolTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSymbolTable(MCAssembler &Asm, std::vector<MachSymbolData> &LocalSymbolData, std::vector<MachSymbolData> &ExternalSymbolData, std::vector<MachSymbolData> &UndefinedSymbolData)"
  },
  {
    "label": "computeSectionAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSectionAddresses(const MCAssembler &Asm, const MCAsmLayout &Layout)"
  },
  {
    "label": "executePostLayoutBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "executePostLayoutBinding(MCAssembler &Asm, const MCAsmLayout &Layout)"
  },
  {
    "label": "isSymbolRefDifferenceFullyResolvedImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSymbolRefDifferenceFullyResolvedImpl(const MCAssembler &Asm, const MCSymbol &SymA, const MCFragment &FB, bool InSet, bool IsPCRel)"
  },
  {
    "label": "writeObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeObject(MCAssembler &Asm, const MCAsmLayout &Layout)"
  },
  {
    "label": "createMachObjectWriter()",
    "kind": "Method",
    "detail": "Function (} ; MCObjectWriter*)",
    "insertText": "createMachObjectWriter(MCMachObjectTargetWriter *MOTW, raw_pwrite_stream &OS, bool IsLittleEndian)"
  }
]