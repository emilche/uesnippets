[
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SCulturePicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCulturePicker"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SErrorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SErrorText"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLocalizationTargetDetailCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalizationTargetDetailCustomization"
  },
  {
    "label": "FLocalizationTargetDetailCustomization()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IDetailCustomization . h \" # include \" Internationalization / CulturePointer . h \" # include \" Internationalization / Text . h \" # include \" LocalizationTargetTypes . h \" # include \" Misc / Optional . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / Views / SListView . h \" class IDetailLayoutBuilder ; class IPropertyHandle ; class ITableRow ; class SComboButton ; class SCulturePicker ; class SEditableTextBox ; class SErrorText ; class SHorizontalBox ; class STableViewBase ; class SWidget ; enum class ELocalizationTargetLoadingPolicy : uint8 ; class FLocalizationTargetDetailCustomization : public IDetailCustomization { public :)",
    "insertText": "FLocalizationTargetDetailCustomization()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "GetTargetSettings()",
    "kind": "Method",
    "detail": "Function (FLocalizationTargetSettings*)",
    "insertText": "GetTargetSettings()"
  },
  {
    "label": "GetTargetSettingsPropertyHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle>)",
    "insertText": "GetTargetSettingsPropertyHandle()"
  },
  {
    "label": "GetTargetName()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetTargetName()"
  },
  {
    "label": "IsTargetNameUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTargetNameUnique(const FString& Name)"
  },
  {
    "label": "OnTargetNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetNameChanged(const FText& NewText)"
  },
  {
    "label": "OnTargetNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetNameCommitted(const FText& NewText, ETextCommit::Type Type)"
  },
  {
    "label": "GetLoadingPolicy()",
    "kind": "Method",
    "detail": "Function (ELocalizationTargetLoadingPolicy)",
    "insertText": "GetLoadingPolicy()"
  },
  {
    "label": "SetLoadingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadingPolicy(const ELocalizationTargetLoadingPolicy LoadingPolicy)"
  },
  {
    "label": "OnLoadingPolicySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadingPolicySelectionChanged(TSharedPtr<ELocalizationTargetLoadingPolicy> LoadingPolicy, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GenerateWidgetForLoadingPolicy()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForLoadingPolicy(TSharedPtr<ELocalizationTargetLoadingPolicy> LoadingPolicy)"
  },
  {
    "label": "RebuildTargetDependenciesBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTargetDependenciesBox()"
  },
  {
    "label": "RebuildTargetsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTargetsList()"
  },
  {
    "label": "OnGenerateTargetRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateTargetRow(ULocalizationTarget* OtherLocalizationTarget, const TSharedRef<STableViewBase>& Table)"
  },
  {
    "label": "OnTargetDependencyCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetDependencyCheckStateChanged(ULocalizationTarget* const OtherLocalizationTarget, const ECheckBoxState State)"
  },
  {
    "label": "IsTargetDependencyChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsTargetDependencyChecked(ULocalizationTarget* const OtherLocalizationTarget)"
  },
  {
    "label": "CanGatherText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGatherText()"
  },
  {
    "label": "GatherText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherText()"
  },
  {
    "label": "CanImportTextAllCultures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImportTextAllCultures()"
  },
  {
    "label": "ImportTextAllCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportTextAllCultures()"
  },
  {
    "label": "CanExportTextAllCultures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExportTextAllCultures()"
  },
  {
    "label": "ExportTextAllCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportTextAllCultures()"
  },
  {
    "label": "CanImportDialogueScriptAllCultures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImportDialogueScriptAllCultures()"
  },
  {
    "label": "ImportDialogueScriptAllCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportDialogueScriptAllCultures()"
  },
  {
    "label": "CanExportDialogueScriptAllCultures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExportDialogueScriptAllCultures()"
  },
  {
    "label": "ExportDialogueScriptAllCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportDialogueScriptAllCultures()"
  },
  {
    "label": "CanImportDialogueAllCultures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImportDialogueAllCultures()"
  },
  {
    "label": "ImportDialogueAllCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportDialogueAllCultures()"
  },
  {
    "label": "CanCountWords()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCountWords()"
  },
  {
    "label": "CountWords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountWords()"
  },
  {
    "label": "CanCompileTextAllCultures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCompileTextAllCultures()"
  },
  {
    "label": "CompileTextAllCultures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileTextAllCultures()"
  },
  {
    "label": "UpdateTargetFromReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetFromReports()"
  },
  {
    "label": "BuildListedCulturesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildListedCulturesList()"
  },
  {
    "label": "RebuildListedCulturesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildListedCulturesList()"
  },
  {
    "label": "OnGenerateCultureRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateCultureRow(TSharedPtr<IPropertyHandle> CulturePropertyHandle, const TSharedRef<STableViewBase>& Table)"
  },
  {
    "label": "IsCultureSelectableAsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCultureSelectableAsSupported(FCulturePtr Culture)"
  },
  {
    "label": "OnNewSupportedCultureSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewSupportedCultureSelected(FCulturePtr SelectedCulture, ESelectInfo::Type SelectInfo)"
  }
]