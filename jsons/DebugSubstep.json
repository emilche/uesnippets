[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "FDebugSubstep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSubstep"
  },
  {
    "label": "FDebugSolverTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSolverTask"
  },
  {
    "label": "FDebugSolverTasks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSolverTasks"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDebugSubstep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugSubstep"
  },
  {
    "label": "FDebugSubstep()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FDebugSubstep()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(bool bEnable)"
  },
  {
    "label": "ProgressToSubstep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgressToSubstep()"
  },
  {
    "label": "ProgressToStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgressToStep()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "AssumeThisThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssumeThisThread()"
  },
  {
    "label": "SyncAdvance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SyncAdvance(bool bIsSolverEnabled)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Substep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Substep(bool bShouldStep)"
  }
]