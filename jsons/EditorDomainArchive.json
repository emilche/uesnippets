[
  {
    "label": "TUniqueFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueFunction"
  },
  {
    "label": "FCacheGetResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheGetResponse"
  },
  {
    "label": "FEditorDomainPackageSegments",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainPackageSegments"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegment"
  },
  {
    "label": "FEditorDomainReadArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainReadArchive"
  },
  {
    "label": "FEditorDomainAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorDomainAsyncReadFileHandle"
  },
  {
    "label": "FEditorDomainPackageSegments()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" DerivedDataRequestTypes . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" IO / IoHash . h \" # include \" Misc / Optional . h \" # include \" atomic \" # include \" Async / AsyncFileHandle . h \" # include \" Containers / Array . h \" # include \" DerivedDataRequestOwner . h \" # include \" DerivedDataValueId . h \" # include \" EditorDomain / EditorDomain . h \" # include \" HAL / Platform . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / PackagePath . h \" # include \" Serialization / Archive . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / PackageResourceManager . h \" template<FuncType> class TUniqueFunction ; namespace UE { namespace DerivedData { struct FCacheGetResponse ; } } class FEditorDomainPackageSegments { public : enum class ESource : uint8 { Uninitialized,Segments,Fallback,Closed } ;)",
    "insertText": "FEditorDomainPackageSegments(const TRefCountPtr<FEditorDomain::FLocks>& InLocks, const FPackagePath& InPackagePath, const TRefCountPtr<FEditorDomain::FPackageSource>& InPackageSource, UE::DerivedData::EPriority Priority)"
  },
  {
    "label": "FEditorDomainPackageSegments()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEditorDomainPackageSegments()"
  },
  {
    "label": "GetRequestOwner()",
    "kind": "Method",
    "detail": "Function (UE::DerivedData::IRequestOwner&)",
    "insertText": "GetRequestOwner()"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (ESource)",
    "insertText": "GetSource()"
  },
  {
    "label": "GetAsyncSource()",
    "kind": "Method",
    "detail": "Function (std::atomic<ESource>&)",
    "insertText": "GetAsyncSource()"
  },
  {
    "label": "WaitForReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForReady()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "GetPackagePath()",
    "kind": "Method",
    "detail": "Function (const FPackagePath&)",
    "insertText": "GetPackagePath()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(void* V, int64 Length, bool bIsError)"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Precache(int64 InStart, int64 InSize, bool* bOutIsReady = nullptr)"
  },
  {
    "label": "FSegment()",
    "kind": "Method",
    "detail": "Function (private : struct FSegment {)",
    "insertText": "FSegment(const UE::DerivedData::FValueId& InValueId, uint64 InStart) : ValueId(InValueId) , Start(InStart)"
  },
  {
    "label": "GetSegmentContainingOffset()",
    "kind": "Method",
    "detail": "Function (} UE::DerivedData::FValueId ValueId ; TOptional<UE::DerivedData::FRequestOwner> RequestOwner ; uint64 Start ; FSharedBuffer Data ; bool bComplete = false ; std::atomic<bool> bAsyncComplete { false } ; } ; int32)",
    "insertText": "GetSegmentContainingOffset(uint64 Start)"
  },
  {
    "label": "EnsureSegmentRange()",
    "kind": "Method",
    "detail": "Function (FSegment*)",
    "insertText": "EnsureSegmentRange(uint64 Start, uint64 End, bool bWait, bool& bOutIsReady)"
  },
  {
    "label": "SendSegmentRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSegmentRequest(FSegment& Segment)"
  },
  {
    "label": "FEditorDomainReadArchive()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FEditorDomain::FLocks> EditorDomainLocks ; UE::DerivedData::FRequestOwner RequestOwner ; FPackagePath PackagePath ; FSegment* MRUSegment = nullptr ; int64 Pos = 0 ; ESource Source = ESource::Uninitialized ; TRefCountPtr<FEditorDomain::FPackageSource> PackageSource ; FIoHash EditorDomainHash ; TArray<FSegment> Segments ; int64 Size = 0 ; std::atomic<ESource> AsyncSource { ESource::Uninitialized } ; std::atomic<int64> InitialRequestOffset { - 1 } ; } ; class FEditorDomainReadArchive : public FArchive { public :)",
    "insertText": "FEditorDomainReadArchive(const TRefCountPtr<FEditorDomain::FLocks>& InLocks, const FPackagePath& InPackagePath, const TRefCountPtr<FEditorDomain::FPackageSource>& InPackageSource, UE::DerivedData::EPriority Priority)"
  },
  {
    "label": "OnRecordRequestComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRecordRequestComplete(UE::DerivedData::FCacheGetResponse&& Response)"
  },
  {
    "label": "GetPackageFormat()",
    "kind": "Method",
    "detail": "Function (EPackageFormat)",
    "insertText": "GetPackageFormat()"
  },
  {
    "label": "GetPackageSource()",
    "kind": "Method",
    "detail": "Function (FEditorDomain::EPackageSource)",
    "insertText": "GetPackageSource()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCache()"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Precache(int64 PrecacheOffset, int64 PrecacheSize)"
  },
  {
    "label": "CreateSegmentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSegmentData(bool bValid)"
  },
  {
    "label": "TryCreateFallbackData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateFallbackData(FEditorDomain& EditorDomain)"
  },
  {
    "label": "FEditorDomainAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (FEditorDomainPackageSegments Segments ; TUniquePtr<FArchive> InnerArchive ; EPackageFormat PackageFormat = EPackageFormat::Binary ; } ; class FEditorDomainAsyncReadFileHandle : public IAsyncReadFileHandle { public :)",
    "insertText": "FEditorDomainAsyncReadFileHandle(const TRefCountPtr<FEditorDomain::FLocks>& InLocks, const FPackagePath& InPackagePath, const TRefCountPtr<FEditorDomain::FPackageSource>& InPackageSource, UE::DerivedData::EPriority Priority)"
  },
  {
    "label": "SizeRequest()",
    "kind": "Method",
    "detail": "Function (IAsyncReadRequest*)",
    "insertText": "SizeRequest(FAsyncFileCallBack* CompleteCallback = nullptr)"
  },
  {
    "label": "ReadRequest()",
    "kind": "Method",
    "detail": "Function (IAsyncReadRequest*)",
    "insertText": "ReadRequest(int64 Offset, int64 BytesToRead, EAsyncIOPriorityAndFlags PriorityAndFlags = AIOP_Normal, FAsyncFileCallBack* CompleteCallback = nullptr, uint8* UserSuppliedMemory = nullptr)"
  },
  {
    "label": "UsesCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesCache()"
  }
]