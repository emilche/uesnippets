[
  {
    "label": "Scheme",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scheme"
  },
  {
    "label": "LocalMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalMask"
  },
  {
    "label": "Scheme()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_SDC_SCHEME_H # define OPENSUBDIV3_SDC_SCHEME_H # include \" . . / version . h \" # include \" . . / sdc / types . h \" # include \" . . / sdc / options . h \" # include \" . . / sdc / crease . h \" # include<cassert> # include<cstdlib> # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Sdc { template<SchemeType SCHEME_TYPE> class Scheme { public :)",
    "insertText": "Scheme() : _options()"
  },
  {
    "label": "Scheme()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Scheme(Options const& options) : _options(options)"
  },
  {
    "label": "GetOptions()",
    "kind": "Method",
    "detail": "Function (} Options)",
    "insertText": "GetOptions()"
  },
  {
    "label": "ComputeFaceVertexMask()",
    "kind": "Method",
    "detail": "Function (_options = newOptions ; } template<FACE,MASK> void)",
    "insertText": "ComputeFaceVertexMask(FACE const& faceNeighborhood, MASK& faceVertexMask)"
  },
  {
    "label": "ComputeEdgeVertexMask()",
    "kind": "Method",
    "detail": "Function (template<EDGE,MASK> void)",
    "insertText": "ComputeEdgeVertexMask(EDGE const& edgeNeighborhood, MASK& edgeVertexMask, Crease::Rule parentRule = Crease::RULE_UNKNOWN, Crease::Rule childRule = Crease::RULE_UNKNOWN)"
  },
  {
    "label": "ComputeVertexVertexMask()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "ComputeVertexVertexMask(VERTEX const& vertexNeighborhood, MASK& vertexVertexMask, Crease::Rule parentRule = Crease::RULE_UNKNOWN, Crease::Rule childRule = Crease::RULE_UNKNOWN)"
  },
  {
    "label": "ComputeVertexLimitMask()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "ComputeVertexLimitMask(VERTEX const& vertexNeighborhood, MASK& positionMask, Crease::Rule vertexRule)"
  },
  {
    "label": "ComputeVertexLimitMask()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "ComputeVertexLimitMask(VERTEX const& vertexNeighborhood, MASK& positionMask, MASK& tangent1Mask, MASK& tangent2Mask, Crease::Rule vertexRule)"
  },
  {
    "label": "GetTopologicalSplitType()",
    "kind": "Method",
    "detail": "Function (Split)",
    "insertText": "GetTopologicalSplitType()"
  },
  {
    "label": "GetRegularFaceSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRegularFaceSize()"
  },
  {
    "label": "GetRegularVertexValence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRegularVertexValence()"
  },
  {
    "label": "GetLocalNeighborhoodSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLocalNeighborhoodSize()"
  },
  {
    "label": "assignCreaseMaskForEdge()",
    "kind": "Method",
    "detail": "Function (protected : template<EDGE,MASK> void)",
    "insertText": "assignCreaseMaskForEdge(EDGE const& edge, MASK& mask)"
  },
  {
    "label": "assignSmoothMaskForEdge()",
    "kind": "Method",
    "detail": "Function (template<EDGE,MASK> void)",
    "insertText": "assignSmoothMaskForEdge(EDGE const& edge, MASK& mask)"
  },
  {
    "label": "assignCornerMaskForVertex()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignCornerMaskForVertex(VERTEX const& edge, MASK& mask)"
  },
  {
    "label": "assignCreaseMaskForVertex()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignCreaseMaskForVertex(VERTEX const& edge, MASK& mask, int const creaseEnds[2])"
  },
  {
    "label": "assignSmoothMaskForVertex()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignSmoothMaskForVertex(VERTEX const& edge, MASK& mask)"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignCornerLimitMask(VERTEX const& vertex, MASK& pos)"
  },
  {
    "label": "assignCreaseLimitMask()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignCreaseLimitMask(VERTEX const& vertex, MASK& pos, int const creaseEnds[2])"
  },
  {
    "label": "assignSmoothLimitMask()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignSmoothLimitMask(VERTEX const& vertex, MASK& pos)"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignCornerLimitTangentMasks(VERTEX const& vertex, MASK& tan1, MASK& tan2)"
  },
  {
    "label": "assignCreaseLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignCreaseLimitTangentMasks(VERTEX const& vertex, MASK& tan1, MASK& tan2, int const creaseEnds[2])"
  },
  {
    "label": "assignSmoothLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (template<VERTEX,MASK> void)",
    "insertText": "assignSmoothLimitTangentMasks(VERTEX const& vertex, MASK& tan1, MASK& tan2)"
  },
  {
    "label": "LocalMask()",
    "kind": "Method",
    "detail": "Function (private : Options _options ; protected : template<WEIGHT> class LocalMask { public : typedef WEIGHT Weight ; public :)",
    "insertText": "LocalMask(Weight* v, Weight* e, Weight* f) : _vWeights(v), _eWeights(e), _fWeights(f)"
  },
  {
    "label": "LocalMask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LocalMask()"
  },
  {
    "label": "GetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (} public : int)",
    "insertText": "GetNumVertexWeights()"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (_vCount = count ; } void)",
    "insertText": "SetNumEdgeWeights(int count)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (_eCount = count ; } void)",
    "insertText": "SetNumFaceWeights(int count)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (_fCount = count ; } Weight const&)",
    "insertText": "VertexWeight(int index)"
  },
  {
    "label": "CombineVertexVertexMasks()",
    "kind": "Method",
    "detail": "Function (_fWeightsForCenters = on ; } public : template<USER_MASK> void)",
    "insertText": "CombineVertexVertexMasks(Weight thisCoeff, Weight dstCoeff, USER_MASK& dst)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "VertexWeight(0) = dstCoeff * dst.VertexWeight(0) + thisCoeff * this->VertexWeight(0)"
  },
  {
    "label": "GetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (int edgeWeightCount = this ->)",
    "insertText": "GetNumEdgeWeights()"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "SetNumEdgeWeights(edgeWeightCount)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "EdgeWeight(i) = thisCoeff * this->EdgeWeight(i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int i = 0; i < edgeWeightCount; ++i)"
  },
  {
    "label": "EdgeWeight()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "EdgeWeight(i) = dstCoeff * dst.EdgeWeight(i) + thisCoeff * this->EdgeWeight(i)"
  },
  {
    "label": "GetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (} } } int faceWeightCount = this ->)",
    "insertText": "GetNumFaceWeights()"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "SetNumFaceWeights(faceWeightCount)"
  },
  {
    "label": "SetFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "SetFaceWeightsForFaceCenters(this->AreFaceWeightsForFaceCenters())"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "FaceWeight(i) = thisCoeff * this->FaceWeight(i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "assert(this->AreFaceWeightsForFaceCenters() == dst.AreFaceWeightsForFaceCenters())"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "FaceWeight(i) = dstCoeff * dst.FaceWeight(i) + thisCoeff * this->FaceWeight(i)"
  },
  {
    "label": "assignCreaseMaskForEdge()",
    "kind": "Method",
    "detail": "Function (} } } } private : Weight* _vWeights ; Weight* _eWeights ; Weight* _fWeights ; int _vCount ; int _eCount ; int _fCount ; bool _fWeightsForCenters ; } ; } ; template<SchemeType SCHEME> template<EDGE,MASK> void Scheme<SCHEME)",
    "insertText": "assignCreaseMaskForEdge(EDGE const&, MASK& mask)"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(2)"
  },
  {
    "label": "SetNumEdgeWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumEdgeWeights(0)"
  },
  {
    "label": "SetNumFaceWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumFaceWeights(0)"
  },
  {
    "label": "SetFaceWeightsForFaceCenters()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetFaceWeightsForFaceCenters(false)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(0)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(1)"
  },
  {
    "label": "assignCornerMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} template<SchemeType SCHEME> template<VERTEX,MASK> void Scheme<SCHEME)",
    "insertText": "assignCornerMaskForVertex(VERTEX const&, MASK& mask)"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(1)"
  },
  {
    "label": "ComputeFaceVertexMask()",
    "kind": "Method",
    "detail": "Function (} template<SchemeType SCHEME> template<FACE,MASK> void Scheme<SCHEME)",
    "insertText": "ComputeFaceVertexMask(FACE const& face, MASK& mask)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (int vertCount = face .)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "SetNumVertexWeights()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "SetNumVertexWeights(vertCount)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (MASK::Weight vWeight = 1 . 0)",
    "insertText": "f(typename MASK::Weight)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(i)"
  },
  {
    "label": "ComputeEdgeVertexMask()",
    "kind": "Method",
    "detail": "Function (} } template<SchemeType SCHEME> template<EDGE,MASK> void Scheme<SCHEME)",
    "insertText": "ComputeEdgeVertexMask(EDGE const& edge, MASK& mask, Crease::Rule parentRule, Crease::Rule childRule)"
  },
  {
    "label": "assignSmoothMaskForEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignSmoothMaskForEdge(edge, mask)"
  },
  {
    "label": "assignCreaseMaskForEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseMaskForEdge(edge, mask)"
  },
  {
    "label": "crease()",
    "kind": "Method",
    "detail": "Function (Crease)",
    "insertText": "crease(_options)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool childIsCrease = false ;)",
    "insertText": "if(parentRule == Crease::RULE_CREASE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (childIsCrease = true ; } else)",
    "insertText": "if(edge.GetSharpness() >= 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (childIsCrease = true ; } else)",
    "insertText": "if(crease.IsUniform())"
  },
  {
    "label": "GetChildSharpnesses()",
    "kind": "Method",
    "detail": "Function (childIsCrease = false ; } else { float cEdgeSharpness [ 2 ] ; edge .)",
    "insertText": "GetChildSharpnesses(crease, cEdgeSharpness)"
  },
  {
    "label": "childIsCrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "childIsCrease(cEdgeSharpness[0] > 0.0f) && (cEdgeSharpness[1] > 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(childIsCrease)"
  },
  {
    "label": "GetSharpness()",
    "kind": "Method",
    "detail": "Function (typedef MASK::Weight Weight ; Weight pWeight = edge .)",
    "insertText": "GetSharpness()"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (Weight cWeight = 1 . 0 f - pWeight ; mask .)",
    "insertText": "VertexWeight(0) = pWeight * 0.5f + cWeight * mask.VertexWeight(0)"
  },
  {
    "label": "VertexWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "VertexWeight(1) = pWeight * 0.5f + cWeight * mask.VertexWeight(1)"
  },
  {
    "label": "FaceWeight()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "FaceWeight(i)"
  },
  {
    "label": "ComputeVertexVertexMask()",
    "kind": "Method",
    "detail": "Function (} } template<SchemeType SCHEME> template<VERTEX,MASK> void Scheme<SCHEME)",
    "insertText": "ComputeVertexVertexMask(VERTEX const& vertex, MASK& mask, Crease::Rule pRule, Crease::Rule cRule)"
  },
  {
    "label": "assignSmoothMaskForVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignSmoothMaskForVertex(vertex, mask)"
  },
  {
    "label": "GetNumEdges()",
    "kind": "Method",
    "detail": "Function (cRule = pRule ; } int valence = vertex .)",
    "insertText": "GetNumEdges()"
  },
  {
    "label": "pEdgeSharpnessBuffer()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "pEdgeSharpnessBuffer(float *)alloca(valence*sizeof(float))"
  },
  {
    "label": "requireParentSharpness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requireParentSharpness(pRule == Crease::RULE_UNKNOWN) || (pRule == Crease::RULE_CREASE) || (pRule != cRule)"
  },
  {
    "label": "GetSharpnessPerEdge()",
    "kind": "Method",
    "detail": "Function (pEdgeSharpness = vertex .)",
    "insertText": "GetSharpnessPerEdge(pEdgeSharpnessBuffer)"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (pRule =)",
    "insertText": "Crease(_options).DetermineVertexVertexRule(pVertexSharpness, valence, pEdgeSharpness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if((pRule == Crease::RULE_SMOOTH) || (pRule == Crease::RULE_DART))"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (int creaseEnds [ 2 ] ;)",
    "insertText": "Crease(_options).GetSharpEdgePairOfCrease(pEdgeSharpness, valence, creaseEnds)"
  },
  {
    "label": "assignCreaseMaskForVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseMaskForVertex(vertex, mask, creaseEnds)"
  },
  {
    "label": "assignCornerMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assignCornerMaskForVertex(vertex, mask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(cRule == pRule)"
  },
  {
    "label": "cEdgeSharpnessBuffer()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "cEdgeSharpnessBuffer(float *)alloca(valence*sizeof(float)), * cEdgeSharpness = vertex.GetChildSharpnessPerEdge(crease, cEdgeSharpnessBuffer), cVertexSharpness = vertex.GetChildSharpness(crease)"
  },
  {
    "label": "DetermineVertexVertexRule()",
    "kind": "Method",
    "detail": "Function (cRule = crease .)",
    "insertText": "DetermineVertexVertexRule(cVertexSharpness, valence, cEdgeSharpness)"
  },
  {
    "label": "cMaskWeights()",
    "kind": "Method",
    "detail": "Function (} typedef MASK::Weight Weight ; Weight*)",
    "insertText": "cMaskWeights(Weight *)alloca((1 + 2 * valence)*sizeof(Weight))"
  },
  {
    "label": "cMask()",
    "kind": "Method",
    "detail": "Function (LocalMask<Weight>)",
    "insertText": "cMask(cMaskWeights, cMaskWeights + 1, cMaskWeights + 1 + valence)"
  },
  {
    "label": "assignSmoothMaskForVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignSmoothMaskForVertex(vertex, cMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(cRule == Crease::RULE_CREASE)"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (int creaseEnds [ 2 ] ;)",
    "insertText": "Crease(_options).GetSharpEdgePairOfCrease(cEdgeSharpness, valence, creaseEnds)"
  },
  {
    "label": "assignCreaseMaskForVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseMaskForVertex(vertex, cMask, creaseEnds)"
  },
  {
    "label": "assignCornerMaskForVertex()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assignCornerMaskForVertex(vertex, cMask)"
  },
  {
    "label": "ComputeFractionalWeightAtVertex()",
    "kind": "Method",
    "detail": "Function (} Weight pWeight = crease .)",
    "insertText": "ComputeFractionalWeightAtVertex(pVertexSharpness, cVertexSharpness, valence, pEdgeSharpness, cEdgeSharpness)"
  },
  {
    "label": "CombineVertexVertexMasks()",
    "kind": "Method",
    "detail": "Function (Weight cWeight = 1 . 0 f - pWeight ; cMask .)",
    "insertText": "CombineVertexVertexMasks(cWeight, pWeight, mask)"
  },
  {
    "label": "ComputeVertexLimitMask()",
    "kind": "Method",
    "detail": "Function (} template<SchemeType SCHEME> template<VERTEX,MASK> void Scheme<SCHEME)",
    "insertText": "ComputeVertexLimitMask(VERTEX const& vertex, MASK& mask, Crease::Rule rule)"
  },
  {
    "label": "assignSmoothLimitMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignSmoothLimitMask(vertex, mask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(rule == Crease::RULE_CREASE)"
  },
  {
    "label": "edgeSharpness()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "edgeSharpness(float *)alloca(vertex.GetNumEdges() * sizeof(float))"
  },
  {
    "label": "GetSharpnessPerEdge()",
    "kind": "Method",
    "detail": "Function (vertex .)",
    "insertText": "GetSharpnessPerEdge(edgeSharpness)"
  },
  {
    "label": "Crease()",
    "kind": "Method",
    "detail": "Function (int creaseEnds [ 2 ] ;)",
    "insertText": "Crease(_options).GetSharpEdgePairOfCrease(edgeSharpness, vertex.GetNumEdges(), creaseEnds)"
  },
  {
    "label": "assignCreaseLimitMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseLimitMask(vertex, mask, creaseEnds)"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assignCornerLimitMask(vertex, mask)"
  },
  {
    "label": "ComputeVertexLimitMask()",
    "kind": "Method",
    "detail": "Function (} } template<SchemeType SCHEME> template<VERTEX,MASK> void Scheme<SCHEME)",
    "insertText": "ComputeVertexLimitMask(VERTEX const& vertex, MASK& posMask, MASK& tan1Mask, MASK& tan2Mask, Crease::Rule rule)"
  },
  {
    "label": "assignSmoothLimitMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignSmoothLimitMask(vertex, posMask)"
  },
  {
    "label": "assignSmoothLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignSmoothLimitTangentMasks(vertex, tan1Mask, tan2Mask)"
  },
  {
    "label": "assignCreaseLimitMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseLimitMask(vertex, posMask, creaseEnds)"
  },
  {
    "label": "assignCreaseLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCreaseLimitTangentMasks(vertex, tan1Mask, tan2Mask, creaseEnds)"
  },
  {
    "label": "assignCornerLimitMask()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assignCornerLimitMask(vertex, posMask)"
  },
  {
    "label": "assignCornerLimitTangentMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCornerLimitTangentMasks(vertex, tan1Mask, tan2Mask)"
  }
]