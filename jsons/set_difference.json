[
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "_InIter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_InIter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "_InputIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator1"
  },
  {
    "label": "_InputIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator2"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SET_DIFFERENCE_H # define _LIBCPP___ALGORITHM_SET_DIFFERENCE_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / copy . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template < class _Comp, class _InIter1, class _Sent1, class _InIter2, class _Sent2, class _OutIter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<__uncvref_t<_InIter1>, __uncvref_t<_OutIter> > __set_difference( _InIter1&& __first1, _Sent1&& __last1, _InIter2&& __first2, _Sent2&& __last2, _OutIter&& __result, _Comp&& __comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* __result =* __first1 ; + + __first1 ; + + __result ; } else)",
    "insertText": "if(__comp(*__first2, *__first1))"
  },
  {
    "label": "__copy()",
    "kind": "Method",
    "detail": "Function (+ + __first2 ; } else { + + __first1 ; + + __first2 ; } } return)",
    "insertText": "__copy(std::move(__first1), std::move(__last1), std::move(__result))"
  },
  {
    "label": "set_difference()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator1,class _InputIterator2,class _OutputIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)"
  },
  {
    "label": "_Comp_ref()",
    "kind": "Method",
    "detail": "Function (typedef __comp_ref_type<_Compare>::type _Comp_ref ; return std::__set_difference<)",
    "insertText": "_Comp_ref(__first1, __last1, __first2, __last2, __result, __comp)"
  },
  {
    "label": "set_difference()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator1,class _InputIterator2,class _OutputIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)"
  }
]