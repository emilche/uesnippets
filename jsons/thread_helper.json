[
  {
    "label": "SignalEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFTESTS_THREAD_HELPER_H_ # define CEF_TESTS_CEFTESTS_THREAD_HELPER_H_ # pragma once # include \" include / base / cef_callback . h \" # include \" include / cef_task . h \" # include \" include / cef_waitable_event . h \" void)",
    "insertText": "SignalEvent(CefRefPtr<CefWaitableEvent> event)"
  },
  {
    "label": "WaitForThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForThread(CefThreadId thread_id, int64 delay_ms = 0)"
  },
  {
    "label": "WaitForThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForThread(CefRefPtr<CefTaskRunner> task_runner, int64 delay_ms = 0)"
  },
  {
    "label": "WaitForIOThread()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "WaitForIOThread() WaitForThread(TID_IO) #define WaitForUIThread() WaitForThread(TID_UI) #define WaitForFILEThread() WaitForThread(TID_FILE_USER_VISIBLE) #define WaitForIOThreadWithDelay(delay_ms) WaitForThread(TID_IO, delay_ms) #define WaitForUIThreadWithDelay(delay_ms) WaitForThread(TID_UI, delay_ms) #define WaitForFILEThreadWithDelay(delay_ms) \\ WaitForThread(TID_FILE_USER_VISIBLE, delay_ms) #define EXPECT_UI_THREAD() EXPECT_TRUE(CefCurrentlyOn(TID_UI))"
  },
  {
    "label": "EXPECT_IO_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EXPECT_IO_THREAD() EXPECT_TRUE(CefCurrentlyOn(TID_IO))"
  },
  {
    "label": "EXPECT_FILE_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EXPECT_FILE_THREAD() EXPECT_TRUE(CefCurrentlyOn(TID_FILE_USER_VISIBLE))"
  },
  {
    "label": "EXPECT_RENDERER_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EXPECT_RENDERER_THREAD() EXPECT_TRUE(CefCurrentlyOn(TID_RENDERER))"
  },
  {
    "label": "RunOnThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunOnThread(CefThreadId thread_id, base::OnceClosure test_impl, CefRefPtr<CefWaitableEvent> event)"
  },
  {
    "label": "NAMED_THREAD_TEST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "NAMED_THREAD_TEST(thread_id, test_case_name, test_name) \\ TEST(test_case_name, test_name)"
  },
  {
    "label": "CreateWaitableEvent()",
    "kind": "Method",
    "detail": "Function (\\ CefRefPtr<CefWaitableEvent> event = \\)",
    "insertText": "CreateWaitableEvent(true, false)"
  },
  {
    "label": "RunOnThread()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RunOnThread(thread_id, base::BindOnce(test_name##Impl), event)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (\\ event ->)",
    "insertText": "Wait()"
  },
  {
    "label": "UI_THREAD_TEST()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UI_THREAD_TEST(test_case_name, test_name) \\ NAMED_THREAD_TEST(TID_UI, test_case_name, test_name) void RunOnThreadAsync( CefThreadId thread_id, base::OnceCallback<void(CefRefPtr<CefWaitableEvent>)> test_impl, CefRefPtr<CefWaitableEvent>)"
  },
  {
    "label": "NAMED_THREAD_TEST_ASYNC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "NAMED_THREAD_TEST_ASYNC(thread_id, test_case_name, test_name) \\ TEST(test_case_name, test_name)"
  },
  {
    "label": "RunOnThreadAsync()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RunOnThreadAsync(thread_id, base::BindOnce(test_name##Impl), event)"
  }
]