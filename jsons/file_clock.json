[
  {
    "label": "_FilesystemClock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_FilesystemClock"
  },
  {
    "label": "_Duration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Duration"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHRONO_FILE_CLOCK_H # define _LIBCPP___CHRONO_FILE_CLOCK_H # include<__availability> # include<__chrono / duration . h> # include<__chrono / system_clock . h> # include<__chrono / time_point . h> # include<__config> # include<ratio> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_END_NAMESPACE_FILESYSTEM # endif # if _LIBCPP_STD_VER> 1 7 _LIBCPP_BEGIN_NAMESPACE_STD namespace chrono { using file_clock = _VSTD_FS::_FilesystemClock ; template<class _Duration> using file_time = time_point<file_clock,_Duration> ; } _LIBCPP_END_NAMESPACE_STD # endif # ifndef _LIBCPP_CXX03_LANG _LIBCPP_BEGIN_NAMESPACE_FILESYSTEM struct _FilesystemClock { # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_INT128)"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (typedef nano period ; # else typedef long long rep ; typedef nano period ; # endif typedef chrono::duration<rep,period> duration ; typedef chrono::time_point<_FilesystemClock> time_point ; _LIBCPP_EXPORTED_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 const bool is_steady = false ; _LIBCPP_AVAILABILITY_FILESYSTEM _LIBCPP_FUNC_VIS time_point)",
    "insertText": "now()"
  },
  {
    "label": "to_sys()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7 template<class _Duration> _LIBCPP_HIDE_FROM_ABI chrono::sys_time<_Duration>)",
    "insertText": "to_sys(const chrono::file_time<_Duration>& __t)"
  },
  {
    "label": "from_sys()",
    "kind": "Method",
    "detail": "Function (} template<class _Duration> _LIBCPP_HIDE_FROM_ABI chrono::file_time<_Duration>)",
    "insertText": "from_sys(const chrono::sys_time<_Duration>& __t)"
  }
]