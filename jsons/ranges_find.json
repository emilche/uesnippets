[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_FIND_H # define _LIBCPP___ALGORITHM_RANGES_FIND_H # include<__algorithm / ranges_find_if . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / forward . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __find { struct __fn { template<input_iterator _Ip,sentinel_for<_Ip> _Sp,class _Tp,class _Proj = identity> requires indirect_binary_predicate<ranges::equal_to,projected<_Ip,_Proj>,const _Tp*> _LIBCPP_HIDE_FROM_ABI _Ip)",
    "insertText": "operator()(_Ip __first, _Sp __last, const _Tp& __value, _Proj __proj = {})"
  },
  {
    "label": "__pred()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__pred(auto&& __e)"
  },
  {
    "label": "__find_if_impl()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "__find_if_impl(std::move(__first), std::move(__last), __pred, __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Rp,class _Tp,class _Proj = identity> requires indirect_binary_predicate<ranges::equal_to,projected<iterator_t<_Rp>,_Proj>,const _Tp*> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Rp>)",
    "insertText": "operator()(_Rp&& __r, const _Tp& __value, _Proj __proj = {})"
  },
  {
    "label": "__find_if_impl()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "__find_if_impl(ranges::begin(__r), ranges::end(__r), __pred, __proj)"
  }
]