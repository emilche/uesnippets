[
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FMovieSceneTimeWarpLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpLoop"
  },
  {
    "label": "FMovieSceneTimeWarpClamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpClamp"
  },
  {
    "label": "FMovieSceneTimeWarpLoopFloat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpLoopFloat"
  },
  {
    "label": "FMovieSceneTimeWarpFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpFrameRate"
  },
  {
    "label": "FMovieSceneTimeWarpFixedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpFixedFrame"
  },
  {
    "label": "FMovieSceneTimeWarpClampFloat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpClampFloat"
  },
  {
    "label": "UMovieSceneTimeWarpGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTimeWarpGetter"
  },
  {
    "label": "FInverseTransformTimeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInverseTransformTimeParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneTimeWarpVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpVariant"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MovieSceneNumericVariant . h \" # include \" MovieSceneTimeWarpVariant . generated . h \" struct FFrameRate ; struct FMovieSceneTimeWarpLoop ; struct FMovieSceneTimeWarpClamp ; struct FMovieSceneTimeWarpLoopFloat ; struct FMovieSceneTimeWarpFrameRate ; struct FMovieSceneTimeWarpFixedFrame ; struct FMovieSceneTimeWarpClampFloat ; class UMovieSceneTimeWarpGetter ; namespace UE::MovieScene { struct FInverseTransformTimeParams ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (FixedPlayRate = 0 x0,Custom = 0 x1,FixedTime = 0 x2,FrameRate = 0 x3,Loop = 0 x4,Clamp = 0 x5,LoopFloat = 0 x6,ClampFloat = 0 x7,} ;)",
    "insertText": "USTRUCT(BlueprintType, meta=(HasNativeBreak=\"/Script/SequencerScripting.MovieSceneTimeWarpExtensions.BreakTimeWarp\", HasNativeMake=\"/Script/SequencerScripting.MovieSceneTimeWarpExtensions.MakeTimeWarp\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTimeWarpVariant() : Variant(1.0)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarpVariant(double InLiteralPlayRate)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InLiteralPlayRate)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarpVariant(const FMovieSceneTimeWarpFixedFrame& In) : Variant(NoInit)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(In)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarpVariant(const FMovieSceneTimeWarpLoop& In) : Variant(NoInit)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarpVariant(const FMovieSceneTimeWarpClamp& In) : Variant(NoInit)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarpVariant(UMovieSceneTimeWarpGetter* In) : Variant(NoInit)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTimeWarpVariant(const FMovieSceneTimeWarpVariant& Other) : Variant(Other.Variant.ShallowCopy())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneTimeWarpVariant&)",
    "insertText": "operator(const FMovieSceneTimeWarpVariant& Other)"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (Variant = Other . Variant .)",
    "insertText": "ShallowCopy()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpVariant&)",
    "insertText": "operator(FMovieSceneTimeWarpVariant&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpVariant&)",
    "insertText": "operator(double InLiteralPlayRate)"
  },
  {
    "label": "DeepCopy()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneTimeWarpVariant)",
    "insertText": "DeepCopy(UObject* NewOuter)"
  },
  {
    "label": "RemapTime()",
    "kind": "Method",
    "detail": "Function (} public : FFrameTime)",
    "insertText": "RemapTime(FFrameTime InTime)"
  },
  {
    "label": "ComputeTraversedHull()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameTime>)",
    "insertText": "ComputeTraversedHull(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "InverseRemapTimeCycled()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "InverseRemapTimeCycled(FFrameTime WarpedTime, FFrameTime UnwarpedTimeHint, const UE::MovieScene::FInverseTransformTimeParams& Params)"
  },
  {
    "label": "InverseRemapTimeWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InverseRemapTimeWithinRange(FFrameTime InTime, FFrameTime UnwarpedRangeStart, FFrameTime UnwarpedRangeEnd, const TFunctionRef<bool(FFrameTime)>& VisitorCallback)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (public : EMovieSceneTimeWarpType)",
    "insertText": "GetType()"
  },
  {
    "label": "AsFixedPlayRate()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "AsFixedPlayRate()"
  },
  {
    "label": "AsFixedPlayRateFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AsFixedPlayRateFloat()"
  },
  {
    "label": "AsFixedTime()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpFixedFrame)",
    "insertText": "AsFixedTime()"
  },
  {
    "label": "AsFrameRate()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpFrameRate)",
    "insertText": "AsFrameRate()"
  },
  {
    "label": "AsLoop()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpLoop)",
    "insertText": "AsLoop()"
  },
  {
    "label": "AsClamp()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpClamp)",
    "insertText": "AsClamp()"
  },
  {
    "label": "AsLoopFloat()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpLoopFloat)",
    "insertText": "AsLoopFloat()"
  },
  {
    "label": "AsClampFloat()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimeWarpClampFloat)",
    "insertText": "AsClampFloat()"
  },
  {
    "label": "AsCustom()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTimeWarpGetter*)",
    "insertText": "AsCustom()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Set(double InLiteralPlayRate)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMovieSceneTimeWarpFixedFrame& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMovieSceneTimeWarpFrameRate& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMovieSceneTimeWarpLoop& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMovieSceneTimeWarpClamp& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMovieSceneTimeWarpLoopFloat& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMovieSceneTimeWarpClampFloat& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(UMovieSceneTimeWarpGetter* InDynamicValue)"
  },
  {
    "label": "ScaleBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleBy(double ScaleFactor)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportTextItem(FString& ValueStr, const FMovieSceneTimeWarpVariant& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "FMovieSceneTimeWarpVariant()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMovieSceneTimeWarpVariant(FMovieSceneNumericVariant&& Other) : Variant(MoveTemp(Other))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} UScriptStruct::TCppStructOps<FMovieSceneTimeWarpVariant> ;)",
    "insertText": "static_assert(PLATFORM_LITTLE_ENDIAN, \"This class has not been written with big-endian support.\")"
  }
]