[
  {
    "label": "FCBufferDeclaration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCBufferDeclaration"
  },
  {
    "label": "FDeclaratorList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeclaratorList"
  },
  {
    "label": "FDeclaration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeclaration"
  },
  {
    "label": "FFunctionDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionDefinition"
  },
  {
    "label": "FParameterDeclarator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterDeclarator"
  },
  {
    "label": "FUnaryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnaryExpression"
  },
  {
    "label": "FAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttribute"
  },
  {
    "label": "FJumpStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJumpStatement"
  },
  {
    "label": "FSelectionStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionStatement"
  },
  {
    "label": "FSwitchStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwitchStatement"
  },
  {
    "label": "FIterationStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterationStatement"
  },
  {
    "label": "FCompoundStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompoundStatement"
  },
  {
    "label": "FExpressionStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionStatement"
  },
  {
    "label": "FSemanticSpecifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSemanticSpecifier"
  },
  {
    "label": "FASTWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FASTWriter"
  },
  {
    "label": "FASTWriterIncrementScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FASTWriterIncrementScope"
  },
  {
    "label": "FASTWriterSkipExpressionScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FASTWriterSkipExpressionScope"
  },
  {
    "label": "FASTWriterClearIndentScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FASTWriterClearIndentScope"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPragma",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPragma"
  },
  {
    "label": "FExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpression"
  },
  {
    "label": "FTypeSpecifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeSpecifier"
  },
  {
    "label": "FBinaryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBinaryExpression"
  },
  {
    "label": "FFunctionExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionExpression"
  },
  {
    "label": "FExpressionList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionList"
  },
  {
    "label": "FStaticAssertStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticAssertStatement"
  },
  {
    "label": "FC99PragmaStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FC99PragmaStatement"
  },
  {
    "label": "FTypeQualifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeQualifier"
  },
  {
    "label": "FStructSpecifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructSpecifier"
  },
  {
    "label": "FFullySpecifiedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFullySpecifiedType"
  },
  {
    "label": "FFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunction"
  },
  {
    "label": "FCaseLabel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaseLabel"
  },
  {
    "label": "FCaseLabelList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaseLabelList"
  },
  {
    "label": "FCaseStatement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaseStatement"
  },
  {
    "label": "FCaseStatementList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaseStatementList"
  },
  {
    "label": "FSwitchBody",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwitchBody"
  },
  {
    "label": "FAttributeArgument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeArgument"
  },
  {
    "label": "FASTWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HlslUtils . h \" # include \" HlslLexer . h \" namespace CrossCompiler { namespace AST { struct FCBufferDeclaration ; struct FDeclaratorList ; struct FDeclaration ; struct FFunctionDefinition ; struct FParameterDeclarator ; struct FUnaryExpression ; struct FAttribute ; struct FJumpStatement ; struct FSelectionStatement ; struct FSwitchStatement ; struct FIterationStatement ; struct FCompoundStatement ; struct FExpressionStatement ; struct FSemanticSpecifier ; struct FASTWriter { FString& Output ; int32 Indent ; int32 ExpressionScope ;)",
    "insertText": "FASTWriter(FString& FinalOutput) : Output(FinalOutput), Indent(0), ExpressionScope(0)"
  },
  {
    "label": "FASTWriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FASTWriter(FASTWriter& IndentedWriter) : Output(IndentedWriter.Output), Indent(0)"
  },
  {
    "label": "DoIndent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoIndent()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FASTWriter&)",
    "insertText": "operator(const TCHAR* String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Output + = String ; } return* this ; } FASTWriter&)",
    "insertText": "operator(const TCHAR Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Output + = Char ; } return* this ; } FASTWriter&)",
    "insertText": "operator(uint32 N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (union { uint32 U ; int32 I ; } Alias ; Alias . U = N ;)",
    "insertText": "if(Alias.I < 0)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this) << *FString::Printf(TEXT(\"%u\"), N)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FASTWriter&)",
    "insertText": "operator(float F)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} else { float Abs =)",
    "insertText": "Abs(F)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this) << *FString::Printf(TEXT(\"%f\"), F)"
  },
  {
    "label": "FASTWriterIncrementScope()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } } ; struct FASTWriterIncrementScope { FASTWriter& Writer ;)",
    "insertText": "FASTWriterIncrementScope(FASTWriter& InWriter) : Writer(InWriter)"
  },
  {
    "label": "FASTWriterIncrementScope()",
    "kind": "Method",
    "detail": "Function (+ + Writer . Indent ; } ~)",
    "insertText": "FASTWriterIncrementScope()"
  },
  {
    "label": "FASTWriterSkipExpressionScope()",
    "kind": "Method",
    "detail": "Function (- - Writer . Indent ; } } ; struct FASTWriterSkipExpressionScope { FASTWriter& Writer ; int32 OriginalScope ;)",
    "insertText": "FASTWriterSkipExpressionScope(FASTWriter& InWriter) : Writer(InWriter)"
  },
  {
    "label": "FASTWriterSkipExpressionScope()",
    "kind": "Method",
    "detail": "Function (OriginalScope = Writer . ExpressionScope ; Writer . ExpressionScope = 0 ; } ~)",
    "insertText": "FASTWriterSkipExpressionScope()"
  },
  {
    "label": "FASTWriterClearIndentScope()",
    "kind": "Method",
    "detail": "Function (Writer . ExpressionScope = OriginalScope ; } } ; struct FASTWriterClearIndentScope { FASTWriter& Writer ; int32 OriginalIndent ;)",
    "insertText": "FASTWriterClearIndentScope(FASTWriter& InWriter) : Writer(InWriter)"
  },
  {
    "label": "FASTWriterClearIndentScope()",
    "kind": "Method",
    "detail": "Function (OriginalIndent = Writer . Indent ; Writer . Indent = 0 ; } ~)",
    "insertText": "FASTWriterClearIndentScope()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (Writer . Indent = OriginalIndent ; } } ; class FNode { public : FSourceInfo SourceInfo ; TLinearArray<FAttribute*> Attributes ; void)",
    "insertText": "Write(FASTWriter& Writer)"
  },
  {
    "label": "AsCBufferDeclaration()",
    "kind": "Method",
    "detail": "Function (FCBufferDeclaration*)",
    "insertText": "AsCBufferDeclaration()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (# if USE_UNREAL_ALLOCATOR return)",
    "insertText": "Malloc(Size)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (# else auto* Ptr = Allocator ->)",
    "insertText": "Alloc(Size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (# if USE_UNREAL_ALLOCATOR)",
    "insertText": "Free(Pointer)"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (# else # endif } ~)",
    "insertText": "FNode()"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FNode(FLinearAllocator* Allocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "WriteAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAttributes(FASTWriter& Writer)"
  },
  {
    "label": "TokenToASTOperator()",
    "kind": "Method",
    "detail": "Function (} ; enum class EOperators { Assign,Plus,Minus,Add,Sub,Mul,Div,Mod,LShift,RShift,Less,Greater,LEqual,GEqual,Equal,NEqual,BitAnd,BitXor,BitOr,BitNeg,LogicAnd,LogicXor,LogicOr,LogicNot,MulAssign,DivAssign,ModAssign,AddAssign,SubAssign,LSAssign,RSAssign,AndAssign,XorAssign,OrAssign,Conditional,PreInc,PreDec,PostInc,PostDec,FieldSelection,ArrayIndex,FunctionCall,ExpressionList,Identifier,Literal,TypeCast,} ; EOperators)",
    "insertText": "TokenToASTOperator(EHlslToken Token)"
  },
  {
    "label": "FPragma()",
    "kind": "Method",
    "detail": "Function (break ; } return AST::EOperators::Plus ; } struct FPragma : public FNode {)",
    "insertText": "FPragma(FLinearAllocator* InAllocator, const TCHAR* InPragma, const FSourceInfo& InInfo)"
  },
  {
    "label": "FExpression()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Pragma ; } ; struct FExpression : public FNode {)",
    "insertText": "FExpression(FLinearAllocator* InAllocator, EOperators InOperator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExpression(FLinearAllocator* InAllocator, EOperators InOperator, FExpression* E0, const FSourceInfo& InInfo)"
  },
  {
    "label": "FExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExpression(FLinearAllocator* InAllocator, EOperators InOperator, FExpression* E0, FExpression* E1, const FSourceInfo& InInfo)"
  },
  {
    "label": "FExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExpression(FLinearAllocator* InAllocator, EOperators InOperator, FExpression* E0, FExpression* E1, FExpression* E2, const FSourceInfo& InInfo)"
  },
  {
    "label": "FExpression()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FExpression()"
  },
  {
    "label": "WriteOperator()",
    "kind": "Method",
    "detail": "Function (EOperators Operator ; union { ELiteralType LiteralType ; struct FTypeSpecifier* TypeSpecifier ; } ; const TCHAR* Identifier ; TLinearArray<FExpression*> Expressions ; void)",
    "insertText": "WriteOperator(FASTWriter& Writer)"
  },
  {
    "label": "GetConstantIntValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConstantIntValue(int32& OutValue)"
  },
  {
    "label": "IsConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstant()"
  },
  {
    "label": "AsUnaryExpression()",
    "kind": "Method",
    "detail": "Function (FUnaryExpression*)",
    "insertText": "AsUnaryExpression()"
  },
  {
    "label": "FFunctionExpression()",
    "kind": "Method",
    "detail": "Function (} ; struct FFunctionExpression : public FExpression {)",
    "insertText": "FFunctionExpression(FLinearAllocator* InAllocator, const FSourceInfo& InInfo, FExpression* InCallee)"
  },
  {
    "label": "FExpressionList()",
    "kind": "Method",
    "detail": "Function (FExpression* Callee ; } ; struct FExpressionList : public FExpression { enum class EType { FreeForm,Parenthesized,Braced,} ;)",
    "insertText": "FExpressionList(FLinearAllocator* InAllocator, EType InType, const FSourceInfo& InInfo)"
  },
  {
    "label": "FCompoundStatement()",
    "kind": "Method",
    "detail": "Function (} ; struct FCompoundStatement : public FNode {)",
    "insertText": "FCompoundStatement(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FCompoundStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCompoundStatement()"
  },
  {
    "label": "AsCompoundStatement()",
    "kind": "Method",
    "detail": "Function (FCompoundStatement*)",
    "insertText": "AsCompoundStatement()"
  },
  {
    "label": "FStaticAssertStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticAssertStatement()"
  },
  {
    "label": "FC99PragmaStatement()",
    "kind": "Method",
    "detail": "Function (const FString Keyword ; FExpression* Condition ; FString Message ; } ; struct FC99PragmaStatement : public FNode {)",
    "insertText": "FC99PragmaStatement(FLinearAllocator* InAllocator, const FSourceInfo& InInfo, const FString& InArgument)"
  },
  {
    "label": "FC99PragmaStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FC99PragmaStatement()"
  },
  {
    "label": "FSemanticSpecifier()",
    "kind": "Method",
    "detail": "Function (FString Argument ; } ; struct FSemanticSpecifier : public FNode { enum class ESpecType { Semantic,Register,PackOffset,} ;)",
    "insertText": "FSemanticSpecifier(FLinearAllocator* InAllocator, ESpecType InType, const FSourceInfo& InInfo)"
  },
  {
    "label": "FSemanticSpecifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSemanticSpecifier(FLinearAllocator* InAllocator, const TCHAR* InSemantic, const FSourceInfo& InInfo)"
  },
  {
    "label": "FSemanticSpecifier()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSemanticSpecifier()"
  },
  {
    "label": "FDeclaration()",
    "kind": "Method",
    "detail": "Function (TLinearArray<FExpression*> Arguments ; ESpecType Type ; const TCHAR* Semantic ; } ; struct FDeclaration : public FNode {)",
    "insertText": "FDeclaration(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FDeclaration()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDeclaration()"
  },
  {
    "label": "AsDeclaration()",
    "kind": "Method",
    "detail": "Function (FDeclaration*)",
    "insertText": "AsDeclaration()"
  },
  {
    "label": "FStructSpecifier()",
    "kind": "Method",
    "detail": "Function (} ; struct FStructSpecifier : public FNode {)",
    "insertText": "FStructSpecifier(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FStructSpecifier()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStructSpecifier()"
  },
  {
    "label": "FCBufferDeclaration()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Name ; const TCHAR* ParentName ; TLinearArray<FNode*> Members ; bool bForwardDeclaration ; } ; struct FCBufferDeclaration : public FNode {)",
    "insertText": "FCBufferDeclaration(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FCBufferDeclaration()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCBufferDeclaration()"
  },
  {
    "label": "FTypeSpecifier()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTypeSpecifier()"
  },
  {
    "label": "FFullySpecifiedType()",
    "kind": "Method",
    "detail": "Function (const TCHAR* ; const TCHAR* InnerType ; FStructSpecifier* Structure ; int32 TextureMSNumSamples ; int32 PatchSize ; bool bPrecise = false ; bool bIsArray ; FExpression* ArraySize ; } ; struct FFullySpecifiedType : public FNode {)",
    "insertText": "FFullySpecifiedType(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FFullySpecifiedType()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFullySpecifiedType()"
  },
  {
    "label": "FDeclaratorList()",
    "kind": "Method",
    "detail": "Function (FTypeQualifier Qualifier ; FTypeSpecifier* Specifier ; } ; struct FDeclaratorList : public FNode {)",
    "insertText": "FDeclaratorList(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FDeclaratorList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDeclaratorList()"
  },
  {
    "label": "WriteNoEOL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNoEOL(FASTWriter& Writer)"
  },
  {
    "label": "AsDeclaratorList()",
    "kind": "Method",
    "detail": "Function (FDeclaratorList*)",
    "insertText": "AsDeclaratorList()"
  },
  {
    "label": "FParameterDeclarator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FParameterDeclarator()"
  },
  {
    "label": "CreateFromDeclaratorList()",
    "kind": "Method",
    "detail": "Function (FParameterDeclarator*)",
    "insertText": "CreateFromDeclaratorList(FDeclaratorList* List, FLinearAllocator* Allocator)"
  },
  {
    "label": "AsParameterDeclarator()",
    "kind": "Method",
    "detail": "Function (FParameterDeclarator*)",
    "insertText": "AsParameterDeclarator()"
  },
  {
    "label": "FFunction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFunction()"
  },
  {
    "label": "FExpressionStatement()",
    "kind": "Method",
    "detail": "Function (FFullySpecifiedType* ReturnType ; const TCHAR* ScopeIdentifier ; const TCHAR* Identifier ; FSemanticSpecifier* ReturnSemantic ; TLinearArray<FNode*> Parameters ; bool bIsDefinition ; bool bIsOperator ; bool bIsStatic ; } ; struct FExpressionStatement : public FNode {)",
    "insertText": "FExpressionStatement(FLinearAllocator* InAllocator, FExpression* InExpr, const FSourceInfo& InInfo)"
  },
  {
    "label": "FExpressionStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FExpressionStatement()"
  },
  {
    "label": "AsExpressionStatement()",
    "kind": "Method",
    "detail": "Function (FExpression* Expression ; FExpressionStatement*)",
    "insertText": "AsExpressionStatement()"
  },
  {
    "label": "FCaseLabel()",
    "kind": "Method",
    "detail": "Function (} ; struct FCaseLabel : public FNode {)",
    "insertText": "FCaseLabel(FLinearAllocator* InAllocator, const FSourceInfo& InInfo, AST::FExpression* InExpression)"
  },
  {
    "label": "FCaseLabel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCaseLabel()"
  },
  {
    "label": "FCaseLabelList()",
    "kind": "Method",
    "detail": "Function (FExpression* TestExpression ; } ; struct FCaseLabelList : public FNode {)",
    "insertText": "FCaseLabelList(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FCaseLabelList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCaseLabelList()"
  },
  {
    "label": "FCaseStatement()",
    "kind": "Method",
    "detail": "Function (TLinearArray<FCaseLabel*> Labels ; } ; struct FCaseStatement : public FNode {)",
    "insertText": "FCaseStatement(FLinearAllocator* InAllocator, const FSourceInfo& InInfo, FCaseLabelList* InLabels)"
  },
  {
    "label": "FCaseStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCaseStatement()"
  },
  {
    "label": "FCaseStatementList()",
    "kind": "Method",
    "detail": "Function (FCaseLabelList* Labels ; TLinearArray<FNode*> Statements ; } ; struct FCaseStatementList : public FNode {)",
    "insertText": "FCaseStatementList(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FCaseStatementList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCaseStatementList()"
  },
  {
    "label": "FSwitchBody()",
    "kind": "Method",
    "detail": "Function (TLinearArray<FCaseStatement*> Cases ; } ; struct FSwitchBody : public FNode {)",
    "insertText": "FSwitchBody(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FSwitchBody()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSwitchBody()"
  },
  {
    "label": "FSelectionStatement()",
    "kind": "Method",
    "detail": "Function (FCaseStatementList* CaseList ; } ; struct FSelectionStatement : public FNode {)",
    "insertText": "FSelectionStatement(FLinearAllocator* InAllocator, const FSourceInfo& InInfo)"
  },
  {
    "label": "FSelectionStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSelectionStatement()"
  },
  {
    "label": "AsSelectionStatement()",
    "kind": "Method",
    "detail": "Function (FSelectionStatement*)",
    "insertText": "AsSelectionStatement()"
  },
  {
    "label": "FSwitchStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSwitchStatement()"
  },
  {
    "label": "AsSwitchStatement()",
    "kind": "Method",
    "detail": "Function (FSwitchStatement*)",
    "insertText": "AsSwitchStatement()"
  },
  {
    "label": "FIterationStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIterationStatement()"
  },
  {
    "label": "AsIterationStatement()",
    "kind": "Method",
    "detail": "Function (FIterationStatement*)",
    "insertText": "AsIterationStatement()"
  },
  {
    "label": "FJumpStatement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FJumpStatement()"
  },
  {
    "label": "AsJumpStatement()",
    "kind": "Method",
    "detail": "Function (FJumpStatement*)",
    "insertText": "AsJumpStatement()"
  },
  {
    "label": "FFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFunctionDefinition()"
  },
  {
    "label": "AsFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (FFunctionDefinition*)",
    "insertText": "AsFunctionDefinition()"
  },
  {
    "label": "FAttributeArgument()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAttributeArgument()"
  },
  {
    "label": "FAttribute()",
    "kind": "Method",
    "detail": "Function (const TCHAR* StringArgument ; FExpression* ExpressionArgument ; } ; struct FAttribute : public FNode {)",
    "insertText": "FAttribute(FLinearAllocator* Allocator, const FSourceInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "FAttribute()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAttribute()"
  },
  {
    "label": "IsAssignmentOperator()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Name ; TLinearArray<FAttributeArgument*> Arguments ; } ; bool)",
    "insertText": "IsAssignmentOperator(EOperators Operator)"
  }
]