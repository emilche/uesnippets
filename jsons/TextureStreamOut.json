[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FTextureStreamOut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureStreamOut"
  },
  {
    "label": "FTextureStreamOut()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderAssetUpdate . h \" # include \" TextureMipAllocator . h \" class UTexture ; class FTextureStreamOut : public TRenderAssetUpdate<FTextureUpdateContext> { public :)",
    "insertText": "FTextureStreamOut(const UTexture* InTexture, FTextureMipAllocator* InMipAllocator)"
  },
  {
    "label": "FTextureStreamOut()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextureStreamOut()"
  },
  {
    "label": "AllocateNewMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateNewMips(const FContext& Context)"
  },
  {
    "label": "FinalizeNewMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeNewMips(const FContext& Context)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(const FContext& Context)"
  },
  {
    "label": "DoAllocateNewMips()",
    "kind": "Method",
    "detail": "Function (protected : TUniquePtr<FTextureMipAllocator> MipAllocator ; FTextureUpdateSyncOptions SyncOptions ; bool)",
    "insertText": "DoAllocateNewMips(const FContext& Context)"
  },
  {
    "label": "DoFinalizeNewMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoFinalizeNewMips(const FContext& Context)"
  },
  {
    "label": "GetMipAllocatorThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetMipAllocatorThread(FTextureMipAllocator::ETickState TickState)"
  },
  {
    "label": "GetCancelThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetCancelThread()"
  },
  {
    "label": "IsSameThread()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsSameThread(FTextureMipAllocator::ETickThread TickThread, int32 TaskThread)"
  }
]