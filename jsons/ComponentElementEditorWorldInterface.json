[
  {
    "label": "UComponentElementEditorWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UComponentElementEditorWorldInterface"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Component / ComponentElementWorldInterface . h \" # include \" ComponentElementEditorWorldInterface . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNREALED_API virtual void NotifyMovementStarted(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "NotifyMovementOngoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMovementOngoing(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "NotifyMovementEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMovementEnded(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "CanDeleteElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "DeleteElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteElements(TArrayView<const FTypedElementHandle> InElementHandles, UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, const FTypedElementDeletionOptions& InDeletionOptions)"
  },
  {
    "label": "CanDuplicateElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "DuplicateElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateElements(TArrayView<const FTypedElementHandle> InElementHandles, UWorld* InWorld, const FVector& InLocationOffset, TArray<FTypedElementHandle>& OutNewElements)"
  },
  {
    "label": "CanCopyElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyElements(TArrayView<const FTypedElementHandle> InElementHandles, FOutputDevice& Out)"
  },
  {
    "label": "GetPasteImporter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FWorldElementPasteImporter>)",
    "insertText": "GetPasteImporter()"
  },
  {
    "label": "IsElementInConvexVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementInConvexVolume(const FTypedElementHandle& Handle, const FConvexVolume& InVolume, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "IsElementInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementInBox(const FTypedElementHandle& Handle, const FBox& InBox, bool bMustEncompassEntireElement = false)"
  },
  {
    "label": "GetSelectionElementsFromSelectionFunction()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "GetSelectionElementsFromSelectionFunction(const FTypedElementHandle& InElementHandle, const FWorldSelectionElementArgs& SelectionArgs, const TFunction<bool(const FTypedElementHandle&, const FWorldSelectionElementArgs&)>& SelectionFunction)"
  }
]