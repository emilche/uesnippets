[
  {
    "label": "FRHILockTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHILockTracker"
  },
  {
    "label": "FLockParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockParams"
  },
  {
    "label": "FUnlockFenceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnlockFenceParams"
  },
  {
    "label": "TIndexOrVertexBufferPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIndexOrVertexBufferPointer"
  },
  {
    "label": "FLockParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHICommandList . h \" struct FRHILockTracker { struct FLockParams { void* RHIBuffer ; void* Buffer ; uint32 BufferSize ; uint32 Offset ; EResourceLockMode LockMode ; bool bDirectLock ; bool bCreateLock ;)",
    "insertText": "FLockParams(void* InRHIBuffer, void* InBuffer, uint32 InOffset, uint32 InBufferSize, EResourceLockMode InLockMode, bool bInbDirectLock, bool bInCreateLock) : RHIBuffer(InRHIBuffer) , Buffer(InBuffer) , BufferSize(InBufferSize) , Offset(InOffset) , LockMode(InLockMode) , bDirectLock(bInbDirectLock) , bCreateLock(bInCreateLock)"
  },
  {
    "label": "FUnlockFenceParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FUnlockFenceParams {)",
    "insertText": "FUnlockFenceParams(void* InRHIBuffer, FGraphEventRef InUnlockEvent) : RHIBuffer(InRHIBuffer) , UnlockEvent(InUnlockEvent)"
  },
  {
    "label": "FRHILockTracker()",
    "kind": "Method",
    "detail": "Function (} void* RHIBuffer ; FGraphEventRef UnlockEvent ; } ; TArray<FLockParams,TInlineAllocator<1 6>> OutstandingLocks ; uint32 TotalMemoryOutstanding ; TArray<FUnlockFenceParams,TInlineAllocator<1 6>> OutstandingUnlocks ;)",
    "insertText": "FRHILockTracker()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding = 0 ; } void)",
    "insertText": "Lock(void* RHIBuffer, void* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode, bool bInDirectBufferWrite = false, bool bInCreateLock = false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "for(auto& Parms : OutstandingLocks)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} # endif OutstandingLocks .)",
    "insertText": "Add(FLockParams(RHIBuffer, Buffer, Offset, SizeRHI, LockMode, bInDirectBufferWrite, bInCreateLock))"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding + = SizeRHI ; } FLockParams)",
    "insertText": "Unlock(void* RHIBuffer, uint32 Offset = 0)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (FLockParams Result = OutstandingLocks [ Index ] ; OutstandingLocks .)",
    "insertText": "RemoveAtSwap(Index, EAllowShrinking::No)"
  },
  {
    "label": "AddUnlockFence()",
    "kind": "Method",
    "detail": "Function (} template<class TIndexOrVertexBufferPointer> void)",
    "insertText": "AddUnlockFence(TIndexOrVertexBufferPointer* Buffer, FRHICommandListImmediate& RHICmdList, const FLockParams& LockParms)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutstandingUnlocks .)",
    "insertText": "Emplace(Buffer, RHICmdList.RHIThreadFence(true))"
  },
  {
    "label": "WaitForUnlock()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "WaitForUnlock(void* RHIBuffer)"
  },
  {
    "label": "WaitOnRHIThreadFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitOnRHIThreadFence(OutstandingUnlocks[Index].UnlockEvent)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 Count = OutstandingUnlocks .)",
    "insertText": "Num()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (OutstandingUnlocks .)",
    "insertText": "RemoveAt(Index, 1)"
  },
  {
    "label": "RaiseMismatchError()",
    "kind": "Method",
    "detail": "Function (- - Count ; - - Index ; } } } void)",
    "insertText": "RaiseMismatchError()"
  }
]