[
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FPackageFileSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageFileSummary"
  },
  {
    "label": "UGatherTextFromAssetsCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGatherTextFromAssetsCommandlet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackagePendingGather",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackagePendingGather"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Internationalization / GatherableTextData . h \" # include \" Commandlets / GatherTextCommandletBase . h \" # include \" AssetRegistry / AssetData . h \" # include \" GatherTextFromAssetsCommandlet . generated . h \" struct FARFilter ; struct FPackageFileSummary ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() void ProcessGatherableTextDataArray(const TArray<FGatherableTextData>& GatherableTextDataArray)"
  },
  {
    "label": "CalculateDependenciesForPackagesPendingGather()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateDependenciesForPackagesPendingGather()"
  },
  {
    "label": "HasExceededMemoryLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExceededMemoryLimit(const bool bLog)"
  },
  {
    "label": "PurgeGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeGarbage(const bool bPurgeReferencedPackages)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "Main(const FString& Params)"
  },
  {
    "label": "GetConfigurationScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConfigurationScript(const TMap<FString, FString>& InCommandLineParameters, FString& OutFilePath, FString& OutStepSectionName)"
  },
  {
    "label": "ConfigureFromScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureFromScript(const FString& GatherTextConfigPath, const FString& SectionName)"
  },
  {
    "label": "ShouldRunInPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunInPreview(const TArray<FString>& Switches, const TMap<FString, FString>& ParamVals)"
  },
  {
    "label": "ParseCommandLineHelper()",
    "kind": "Method",
    "detail": "Function (enum class EPackageLocCacheState : uint8 { Uncached_TooOld = 0,Uncached_NoCache,Cached,} ; private : bool)",
    "insertText": "ParseCommandLineHelper(const FString& InCommandLine)"
  },
  {
    "label": "PerformFirstPassFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformFirstPassFilter(TArray<FAssetData>& OutAssetDataArray)"
  },
  {
    "label": "ApplyFirstPassFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFirstPassFilter(const FARFilter& InFilter, TArray<FAssetData>& InOutAssetDataArray)"
  },
  {
    "label": "BuildFirstPassFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildFirstPassFilter(FARFilter& InOutFilter)"
  },
  {
    "label": "BuildCollectionFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildCollectionFilter(FARFilter& InOutFilter)"
  },
  {
    "label": "BuildExcludeDerivedClassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildExcludeDerivedClassesFilter(FARFilter& InOutFilter)"
  },
  {
    "label": "PerformExcludeExactClassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformExcludeExactClassesFilter(TArray<FAssetData>& InOutAssetDataArray)"
  },
  {
    "label": "BuildExcludeExactClassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildExcludeExactClassesFilter(FARFilter& InOutFilter)"
  },
  {
    "label": "ApplyExcludeExactClassesFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyExcludeExactClassesFilter(const FARFilter& InFilter, TArray<FAssetData>& InOutAssetDataArray)"
  },
  {
    "label": "FilterAssetsBasedOnIncludeExcludePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterAssetsBasedOnIncludeExcludePaths(TArray<FAssetData>& InOutAssetDataArray)"
  },
  {
    "label": "DiscoverExternalActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscoverExternalActors(TArray<FAssetData>& InOutAssetDataArray)"
  },
  {
    "label": "RemoveExistingExternalActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExistingExternalActors(TArray<FAssetData>& InOutAssetDataArray, TArray<FName>& OutPartitionedWorldPackageNames)"
  },
  {
    "label": "GetPackageNamesToGather()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetPackageNamesToGather(const TArray<FAssetData>& InAssetDataArray)"
  },
  {
    "label": "PopulatePackagesPendingGather()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulatePackagesPendingGather(TSet<FName> PackageNamesToGather)"
  },
  {
    "label": "ProcessAndRemoveCachedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndRemoveCachedPackages(TMap<FName, TSet<FGuid>>& OutExternalActorsWithStaleOrMissingCaches)"
  },
  {
    "label": "MergeInExternalActorsWithStaleOrMissingCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeInExternalActorsWithStaleOrMissingCaches(TMap<FName, TSet<FGuid>>& ExternalActorsWithStaleOrMissingCaches)"
  },
  {
    "label": "LoadAndProcessUncachedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAndProcessUncachedPackages(TArray<FName>& OutPackagesWithStaleGatherCache)"
  },
  {
    "label": "ReportStaleGatherCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportStaleGatherCache(TArray<FName>& InPackagesWithStaleGatherCache)"
  },
  {
    "label": "CalculatePackageLocCacheState()",
    "kind": "Method",
    "detail": "Function (EPackageLocCacheState)",
    "insertText": "CalculatePackageLocCacheState(const FPackageFileSummary& PackageFileSummary, const FName PackageName, bool bIsExternalActorPackage)"
  },
  {
    "label": "AppendPackagePendingGather()",
    "kind": "Method",
    "detail": "Function (struct FPackagePendingGather { FName PackageName ; FString PackageFilename ; TSet<FName> Dependencies ; TSet<FGuid> ExternalActors ; EPackageLocCacheState PackageLocCacheState ; TArray<FGatherableTextData> GatherableTextDataArray ; } ; FPackagePendingGather*)",
    "insertText": "AppendPackagePendingGather(const FName PackageNameToGather)"
  }
]