[
  {
    "label": "FD3D12SyncPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SyncPoint"
  },
  {
    "label": "FD3D12QueryLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12QueryLocation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12QueryHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12QueryHeap"
  },
  {
    "label": "FD3D12QueryRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12QueryRange"
  },
  {
    "label": "FD3D12QueryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12QueryAllocator"
  },
  {
    "label": "FD3D12RenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RenderQuery"
  },
  {
    "label": "TD3D12ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ResourceTraits"
  },
  {
    "label": "FD3D12QueryHeap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHICommon . h \" # include \" D3D12Residency . h \" # include \" D3D12Resources . h \" # include \" RHIResources . h \" class FD3D12SyncPoint ; using FD3D12SyncPointRef = TRefCountPtr<FD3D12SyncPoint> ; struct FD3D12QueryLocation ; enum class ED3D12QueryType { None,PipelineStats,TimestampMicroseconds,TimestampRaw,# if RHI_NEW_GPU_PROFILER ProfilerTimestampTOP,ProfilerTimestampBOP,# else CommandListBegin,CommandListEnd,IdleBegin,IdleEnd,# endif Occlusion } ; enum class ED3D12QueryPosition { TopOfPipe,BottomOfPipe } ; class FD3D12QueryHeap final : public FD3D12SingleNodeGPUObject { uint32 MaxHeapSize = 6 5 5 3 6 ; private : FD3D12Device ; FD3D12QueryLocation ;)",
    "insertText": "FD3D12QueryHeap(FD3D12QueryHeap const&)"
  },
  {
    "label": "FD3D12QueryHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12QueryHeap(FD3D12QueryHeap&&)"
  },
  {
    "label": "FD3D12QueryHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12QueryHeap(FD3D12Device* Device, D3D12_QUERY_TYPE QueryType, D3D12_QUERY_HEAP_TYPE HeapType)"
  },
  {
    "label": "FD3D12QueryHeap()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FD3D12QueryHeap()"
  },
  {
    "label": "GetResultSize()",
    "kind": "Method",
    "detail": "Function (FD3D12Device* const Device ; D3D12_QUERY_TYPE const QueryType ; D3D12_QUERY_HEAP_TYPE const HeapType ; uint32 const NumQueries ; uint32)",
    "insertText": "GetResultSize()"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case D3D12_QUERY_TYPE_TIMESTAMP : case D3D12_QUERY_TYPE_OCCLUSION : return)",
    "insertText": "sizeof(uint64)"
  },
  {
    "label": "GetD3DQueryHeap()",
    "kind": "Method",
    "detail": "Function (} } ID3D12QueryHeap*)",
    "insertText": "GetD3DQueryHeap()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "FD3D12QueryRange()",
    "kind": "Method",
    "detail": "Function (private : TRefCountPtr<FD3D12Resource> ResultBuffer ; uint8 const* ResultPtr = nullptr ; TRefCountPtr<ID3D12QueryHeap> D3DQueryHeap ; FD3D12ResidencyHandle ResidencyHandle ; FThreadSafeCounter NumRefs ; } ; struct FD3D12QueryRange { uint32 Start = 0,End = 0 ;)",
    "insertText": "FD3D12QueryRange()"
  },
  {
    "label": "FD3D12QueryRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12QueryRange(uint32 Start, uint32 End) : Start(Start) , End(End)"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFull(FD3D12QueryHeap* Heap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FD3D12QueryRange const& RHS)"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (template<TValueType> TValueType)",
    "insertText": "GetResult()"
  },
  {
    "label": "FD3D12QueryLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12QueryLocation()"
  },
  {
    "label": "FD3D12QueryLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12QueryLocation(FD3D12QueryHeap* Heap, uint32 Index, ED3D12QueryType Type, void* Target) : Heap (Heap ) , Index (Index ) , Type (Type ) , Target(Target)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Dst, Src, Heap->GetResultSize())"
  },
  {
    "label": "CopyResultTo()",
    "kind": "Method",
    "detail": "Function (TValueType Value ;)",
    "insertText": "CopyResultTo(&Value)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} FD3D12Device* const Device ; ED3D12QueueType const QueueType ; D3D12_QUERY_TYPE const QueryType ; FD3D12QueryLocation)",
    "insertText": "Allocate(ED3D12QueryType Type, void* Target)"
  },
  {
    "label": "CloseAndReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAndReset(TMap<TRefCountPtr<FD3D12QueryHeap>, TArray<FD3D12QueryRange>>& OutRanges)"
  },
  {
    "label": "HasQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasQueries()"
  },
  {
    "label": "FD3D12RenderQuery()",
    "kind": "Method",
    "detail": "Function (} private : TMap<TRefCountPtr<FD3D12QueryHeap>,FD3D12QueryRange> Heaps ; FD3D12QueryHeap* CurrentHeap = nullptr ; FD3D12QueryRange* CurrentRange = nullptr ; } ; class FD3D12RenderQuery : public FRHIRenderQuery,public FD3D12DeviceChild,public FD3D12LinkedAdapterObject<FD3D12RenderQuery> { public :)",
    "insertText": "FD3D12RenderQuery(FD3D12Device* Parent, ERenderQueryType InQueryType)"
  },
  {
    "label": "FD3D12RenderQuery()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12RenderQuery()"
  }
]