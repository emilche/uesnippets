[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is_non_const_reference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_non_const_reference"
  },
  {
    "label": "make_void",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_void"
  },
  {
    "label": "SupportsOstreamOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SupportsOstreamOperator"
  },
  {
    "label": "SupportsToString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SupportsToString"
  },
  {
    "label": "is_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_iterator"
  },
  {
    "label": "priority_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "priority_tag"
  },
  {
    "label": "is_trivially_copyable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_copyable"
  },
  {
    "label": "is_trivially_copy_constructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_trivially_copy_constructible"
  },
  {
    "label": "in_place_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in_place_t"
  },
  {
    "label": "in_place_type_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in_place_type_t"
  },
  {
    "label": "is_in_place_type_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_in_place_type_t"
  },
  {
    "label": "conjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conjunction"
  },
  {
    "label": "disjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "disjunction"
  },
  {
    "label": "negation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "negation"
  },
  {
    "label": "IsInvocableImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInvocableImpl"
  },
  {
    "label": "is_invocable_r",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_invocable_r"
  },
  {
    "label": "is_invocable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_invocable"
  },
  {
    "label": "IsScopedEnumImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsScopedEnumImpl"
  },
  {
    "label": "is_scoped_enum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_scoped_enum"
  },
  {
    "label": "remove_cvref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "remove_cvref"
  },
  {
    "label": "projected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "projected"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_TEMPLATE_UTIL_H_ # define CEF_INCLUDE_BASE_CEF_TEMPLATE_UTIL_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES) #include \"base/template_util.h\" #else #include <stddef.h> #include <iosfwd> #include <iterator> #include <type_traits> #include <utility> #include <vector> #include \"include/base/cef_build.h\" #define CR_GLIBCXX_5_0_0 20150123 #if (defined(__GNUC__) && __GNUC__ < 5) || \\ (defined(__GLIBCXX__) && __GLIBCXX__ == CR_GLIBCXX_5_0_0) #define CR_USE_FALLBACKS_FOR_OLD_EXPERIMENTAL_GLIBCXX #endif #if !defined(__clang__) && defined(_LIBCPP_VERSION)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class T> struct is_non_const_reference : std::false_type { } ; template<class T> struct is_non_const_reference<T&> : std::true_type { } ; template<class T> struct is_non_const_reference<const T&> : std::false_type { } ; namespace internal { template<. . .> struct make_void { using type = void ; } ; } template<. . . Ts> using void_t =::base::internal::make_void<Ts . . .>::type ; namespace internal { template<T,= void> struct SupportsOstreamOperator : std::false_type { } ; template<T> struct SupportsOstreamOperator<T,)",
    "insertText": "decltype(void(std::declval<std::ostream&>() << std::declval<T>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T,= void> struct SupportsToString : std::false_type { } ; template<T> struct SupportsToString<T,)",
    "insertText": "decltype(void(std::declval<T>().ToString()))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; template<T,= void> struct is_iterator : std::false_type { } ; template<T> struct is_iterator<T,void_t<std::iterator_traits<T>::iterator_category>> : std::true_type { } ; template<size_t I> struct priority_tag : priority_tag<I - 1> { } ; template<> struct priority_tag<0> { } ; } # if)",
    "insertText": "defined(CR_USE_FALLBACKS_FOR_OLD_EXPERIMENTAL_GLIBCXX) || \\ defined(CR_USE_FALLBACKS_FOR_GCC_WITH_LIBCXX)"
  },
  {
    "label": "__is_trivially_copyable()",
    "kind": "Method",
    "detail": "Function (# if _GNUC_VER> = 5 0 1 bool value =)",
    "insertText": "__is_trivially_copyable(T)"
  },
  {
    "label": "__has_trivial_copy()",
    "kind": "Method",
    "detail": "Function (# else bool value =)",
    "insertText": "__has_trivial_copy(T) && __has_trivial_destructor(T)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } ; # else template<class T> using is_trivially_copyable = std::is_trivially_copyable<T> ; # endif # if)",
    "insertText": "defined(__GNUC__) && !defined(__clang__)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; template<. . . T> struct is_trivially_copy_constructible<std::vector<T . . .>> : std::false_type { } ; # else template<T> using is_trivially_copy_constructible = std::is_trivially_copy_constructible<T> ; # endif struct in_place_t { } ; in_place_t in_place = { } ; template<T> struct in_place_type_t { } ; template<T> struct is_in_place_type_t { bool value = false ; } ; template<. . . Ts> struct is_in_place_type_t<in_place_type_t<Ts . . .>> { bool value = true ; } ; template<bool B> using bool_constant = std::integral_constant<bool,B> ; template<. . .> struct conjunction : std::true_type { } ; template<B1> struct conjunction<B1> : B1 { } ; template<B1,. . . Bn> struct conjunction<B1,Bn . . .> : std::conditional_t<static_cast<)",
    "insertText": "bool(B1::value)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; template<B> struct negation : bool_constant<! static_cast<)",
    "insertText": "bool(B::value)"
  },
  {
    "label": "Functor()",
    "kind": "Method",
    "detail": "Function (} ; template<Functor,. . . Args> using invoke_result = std::invoke_result<)",
    "insertText": "Functor(Args && ...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<Functor,. . . Args> using invoke_result_t = invoke_result<Functor,Args . . .>::type ; namespace internal { template<InvokeResult,R,= void> struct IsInvocableImpl : std::false_type { } ; template<InvokeResult,R> struct IsInvocableImpl<InvokeResult,R,void_t<InvokeResult::type>> : disjunction<std::is_void<R>,std::is_convertible<InvokeResult::type,R>> { } ; } template<R,F,. . . Args> struct is_invocable_r : internal::IsInvocableImpl<invoke_result<F,Args . . .>,R> { } ; template<F,. . . Args> struct is_invocable : is_invocable_r<void,F,Args . . .> { } ; namespace internal { template<T,bool = std::is_enum<T>::value> struct IsScopedEnumImpl : std::false_type { } ; template<T> struct IsScopedEnumImpl<T,true> : negation<std::is_convertible<T,std::underlying_type_t<T>>> { } ; } template<T> struct is_scoped_enum : internal::IsScopedEnumImpl<T> { } ; template<T> struct remove_cvref { using type = std::remove_cv_t<std::remove_reference_t<T>> ; } ; template<T> using remove_cvref_t = remove_cvref<T>::type ; template<Iter> using iter_value_t = std::iterator_traits<remove_cvref_t<Iter>>::value_type ; template<Iter> using iter_reference_t =)",
    "insertText": "decltype(*std::declval<Iter&>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Func,. . . Iters> using indirect_result_t = invoke_result_t<Func,iter_reference_t<Iters> . . .> ; template<Iter,Proj,IndirectResultT = indirect_result_t<Proj,Iter>> struct projected { using value_type = remove_cvref_t<IndirectResultT> ; IndirectResultT)",
    "insertText": "operator()"
  }
]