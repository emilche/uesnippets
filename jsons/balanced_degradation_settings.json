[
  {
    "label": "BalancedDegradationSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BalancedDegradationSettings"
  },
  {
    "label": "CodecTypeSpecific",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecTypeSpecific"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "BalancedDegradationSettings()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_BALANCED_DEGRADATION_SETTINGS_H_ # define RTC_BASE_EXPERIMENTS_BALANCED_DEGRADATION_SETTINGS_H_ # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / video_codecs / video_encoder . h \" namespace webrtc { class BalancedDegradationSettings { public : int kNoFpsDiff = - 1 0 0 ;)",
    "insertText": "BalancedDegradationSettings(const FieldTrialsView& field_trials)"
  },
  {
    "label": "BalancedDegradationSettings()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BalancedDegradationSettings()"
  },
  {
    "label": "CodecTypeSpecific()",
    "kind": "Method",
    "detail": "Function (struct CodecTypeSpecific {)",
    "insertText": "CodecTypeSpecific()"
  },
  {
    "label": "CodecTypeSpecific()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CodecTypeSpecific(int qp_low, int qp_high, int fps, int kbps, int kbps_res) : qp_low(qp_low), qp_high(qp_high), fps(fps), kbps(kbps), kbps_res(kbps_res)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const CodecTypeSpecific& o)"
  },
  {
    "label": "GetQpHigh()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetQpHigh()"
  },
  {
    "label": "GetFps()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetFps()"
  },
  {
    "label": "GetKbps()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetKbps()"
  },
  {
    "label": "GetKbpsRes()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetKbpsRes()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (int qp_low = 0 ; int qp_high = 0 ; int fps = 0 ; int kbps = 0 ; int kbps_res = 0 ; } ; struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(int pixels, int fps, int kbps, int kbps_res, int fps_diff, CodecTypeSpecific vp8, CodecTypeSpecific vp9, CodecTypeSpecific h264, CodecTypeSpecific av1, CodecTypeSpecific generic)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Config& o)"
  },
  {
    "label": "MinFps()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MinFps(VideoCodecType type, int pixels)"
  },
  {
    "label": "MaxFps()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MaxFps(VideoCodecType type, int pixels)"
  },
  {
    "label": "CanAdaptUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAdaptUp(VideoCodecType type, int pixels, uint32_t bitrate_bps)"
  },
  {
    "label": "CanAdaptUpResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAdaptUpResolution(VideoCodecType type, int pixels, uint32_t bitrate_bps)"
  },
  {
    "label": "MinFpsDiff()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "MinFpsDiff(int pixels)"
  },
  {
    "label": "GetQpThresholds()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoEncoder::QpThresholds>)",
    "insertText": "GetQpThresholds(VideoCodecType type, int pixels)"
  },
  {
    "label": "GetMinFpsConfig()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<Config>)",
    "insertText": "GetMinFpsConfig(int pixels)"
  },
  {
    "label": "GetMaxFpsConfig()",
    "kind": "Method",
    "detail": "Function (absl::optional<Config>)",
    "insertText": "GetMaxFpsConfig(int pixels)"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (Config)",
    "insertText": "GetConfig(int pixels)"
  }
]