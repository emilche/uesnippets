[
  {
    "label": "load_tran_low()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_PPC_BITDEPTH_CONVERSION_VSX_H_ # define VPX_VPX_DSP_PPC_BITDEPTH_CONVERSION_VSX_H_ # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_dsp / vpx_dsp_common . h \" # include \" vpx_dsp / ppc / types_vsx . h \" int16x8_t)",
    "insertText": "load_tran_low(int32_t c, const tran_low_t *s)"
  },
  {
    "label": "vec_vsx_ld()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH int32x4_t u =)",
    "insertText": "vec_vsx_ld(c, s)"
  },
  {
    "label": "vec_vsx_ld()",
    "kind": "Method",
    "detail": "Function (int32x4_t v =)",
    "insertText": "vec_vsx_ld(c, s + 4)"
  },
  {
    "label": "store_tran_low()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "store_tran_low(int16x8_t v, int32_t c, tran_low_t *s)"
  },
  {
    "label": "vec_splat_s16()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH const int16x8_t one =)",
    "insertText": "vec_splat_s16(1)"
  },
  {
    "label": "vec_mule()",
    "kind": "Method",
    "detail": "Function (const int32x4_t even =)",
    "insertText": "vec_mule(v, one)"
  },
  {
    "label": "vec_mulo()",
    "kind": "Method",
    "detail": "Function (const int32x4_t odd =)",
    "insertText": "vec_mulo(v, one)"
  },
  {
    "label": "vec_mergeh()",
    "kind": "Method",
    "detail": "Function (const int32x4_t high =)",
    "insertText": "vec_mergeh(even, odd)"
  },
  {
    "label": "vec_mergel()",
    "kind": "Method",
    "detail": "Function (const int32x4_t low =)",
    "insertText": "vec_mergel(even, odd)"
  },
  {
    "label": "vec_vsx_st()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vec_vsx_st(high, c, s)"
  },
  {
    "label": "vec_vsx_st()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vec_vsx_st(low, c, s + 4)"
  },
  {
    "label": "vec_vsx_st()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "vec_vsx_st(v, c, s)"
  }
]