[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTextBlockStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextBlockStyle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCursorInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCursorInfo"
  },
  {
    "label": "FUndoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUndoState"
  },
  {
    "label": "FScrollInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrollInfo"
  },
  {
    "label": "FCursorLineHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCursorLineHighlighter"
  },
  {
    "label": "FTextCompositionHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextCompositionHighlighter"
  },
  {
    "label": "FTextSelectionHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSelectionHighlighter"
  },
  {
    "label": "FTextSearchHighlighter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextSearchHighlighter"
  },
  {
    "label": "FCursorInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Framework / Text / TextLayout . h \" # include \" Framework / Text / ISlateLineHighlighter . h \" class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; struct FGeometry ; struct FSlateBrush ; struct FTextBlockStyle ; namespace SlateEditableTextTypes { enum class ECursorAlignment : uint8 { Left,Right,} ; class FCursorInfo { public :)",
    "insertText": "FCursorInfo() : CursorPosition() , CursorAlignment(ECursorAlignment::Left) , CursorTextDirection(TextBiDi::ETextDirection::LeftToRight) , LastCursorInteractionTime(0)"
  },
  {
    "label": "GetCursorLocation()",
    "kind": "Method",
    "detail": "Function (} FTextLocation)",
    "insertText": "GetCursorLocation()"
  },
  {
    "label": "GetLastCursorInteractionTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetLastCursorInteractionTime()"
  },
  {
    "label": "SetCursorLocationAndCalculateAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorLocationAndCalculateAlignment(const FTextLayout& InTextLayout, const FTextLocation& InCursorPosition)"
  },
  {
    "label": "SetCursorLocationAndAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorLocationAndAlignment(const FTextLayout& InTextLayout, const FTextLocation& InCursorPosition, const ECursorAlignment InCursorAlignment)"
  },
  {
    "label": "CreateUndo()",
    "kind": "Method",
    "detail": "Function (FCursorInfo)",
    "insertText": "CreateUndo()"
  },
  {
    "label": "RestoreFromUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromUndo(const FCursorInfo& UndoData)"
  },
  {
    "label": "FScrollInfo()",
    "kind": "Method",
    "detail": "Function (private : FTextLocation CursorPosition ; ECursorAlignment CursorAlignment ; TextBiDi::ETextDirection CursorTextDirection ; double LastCursorInteractionTime ; } ; struct FUndoState { FText Text ; TOptional<FTextLocation> SelectionStart ; FCursorInfo CursorInfo ; } ; struct FScrollInfo {)",
    "insertText": "FScrollInfo() : Position() , Alignment(ECursorAlignment::Left)"
  },
  {
    "label": "FScrollInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScrollInfo(const FTextLocation InPosition, const ECursorAlignment InAlignment) : Position(InPosition) , Alignment(InAlignment)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FTextLocation Position ; ECursorAlignment Alignment ; } ; class FCursorLineHighlighter : public ISlateLineHighlighter { public : TSharedRef<FCursorLineHighlighter>)",
    "insertText": "Create(const FCursorInfo* InCursorInfo)"
  },
  {
    "label": "SetCursorBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorBrush(const TAttribute<const FSlateBrush*>& InCursorBrush)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FTextLayout::FLineView& Line, const float OffsetX, const float Width, const FTextBlockStyle& DefaultStyle, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "FCursorLineHighlighter()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FCursorLineHighlighter(const FCursorInfo* InCursorInfo)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (const FCursorInfo* CursorInfo ; TAttribute<const FSlateBrush*> CursorBrush ; } ; class FTextCompositionHighlighter : public ISlateLineHighlighter { public : TSharedRef<FTextCompositionHighlighter>)",
    "insertText": "Create()"
  },
  {
    "label": "SetCompositionBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositionBrush(const TAttribute<const FSlateBrush*>& InCompositionBrush)"
  },
  {
    "label": "FTextCompositionHighlighter()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FTextCompositionHighlighter()"
  },
  {
    "label": "SetHasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasKeyboardFocus(const bool bInHasKeyboardFocus)"
  },
  {
    "label": "FTextSelectionHighlighter()",
    "kind": "Method",
    "detail": "Function (bHasKeyboardFocus = bInHasKeyboardFocus ; } protected :)",
    "insertText": "FTextSelectionHighlighter()"
  },
  {
    "label": "FTextSearchHighlighter()",
    "kind": "Method",
    "detail": "Function (bHasKeyboardFocus = bInHasKeyboardFocus ; } protected :)",
    "insertText": "FTextSearchHighlighter()"
  }
]