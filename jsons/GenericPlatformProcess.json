[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FURLRequestFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FURLRequestFilter"
  },
  {
    "label": "TProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TProcHandle"
  },
  {
    "label": "FPlatformProcessMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformProcessMemoryStats"
  },
  {
    "label": "FGenericPlatformProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformProcess"
  },
  {
    "label": "FSemaphore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSemaphore"
  },
  {
    "label": "Limits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Limits"
  },
  {
    "label": "ApplicationSettingsContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ApplicationSettingsContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformAffinity . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMisc . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" class FEvent ; # if PLATFORM_CPU_X86_FAMILY # include<immintrin . h> # endif # if PLATFORM_APPLE # include<mach / mach_time . h> # endif # if !)",
    "insertText": "defined(__clang__) # include <intrin.h> # if defined(_M_ARM) # include <armintr.h> # elif defined(_M_ARM64) || defined(_M_ARM64EC)"
  },
  {
    "label": "TProcHandle()",
    "kind": "Method",
    "detail": "Function (struct FProcHandle ; template<FuncType> class TFunctionRef ; namespace EProcessResource { enum Type { VirtualMemory } ; } namespace ELaunchVerb { enum Type { Open,Edit,} ; } namespace ENamedThreads { enum Type : int32 ; } namespace UE::Core { class FURLRequestFilter ; } template<T,T InvalidHandleValue> struct TProcHandle { typedef T HandleType ; public :)",
    "insertText": "TProcHandle() : Handle( InvalidHandleValue)"
  },
  {
    "label": "TProcHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TProcHandle(T Other ) : Handle( Other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Get()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Handle = InvalidHandleValue ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLock(uint64 NanosecondsToWait)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "FSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSemaphore(const FString& InName)"
  },
  {
    "label": "FSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSemaphore(const TCHAR* InName)"
  },
  {
    "label": "FSemaphore()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSemaphore()"
  },
  {
    "label": "GetDllHandle()",
    "kind": "Method",
    "detail": "Function (} ; protected : enum Limits { MaxSemaphoreName = 1 2 8 } ; TCHAR Name [ MaxSemaphoreName ] ; } ; void*)",
    "insertText": "GetDllHandle(const TCHAR* Filename)"
  },
  {
    "label": "FreeDllHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDllHandle(void* DllHandle)"
  },
  {
    "label": "GetDllExport()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetDllExport(void* DllHandle, const TCHAR* ProcName)"
  },
  {
    "label": "PushDllDirectory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushDllDirectory(const TCHAR* Directory)"
  },
  {
    "label": "PopDllDirectory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopDllDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetDllDirectories()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDllDirectories(TArray<FString>& OutDllDirectories)"
  },
  {
    "label": "GetCurrentProcessId()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCurrentProcessId()"
  },
  {
    "label": "GetCurrentCoreNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentCoreNumber()"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask(uint64 AffinityMask)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadPriority(EThreadPriority NewPriority)"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadName(const TCHAR* ThreadName)"
  },
  {
    "label": "GetStackSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetStackSize()"
  },
  {
    "label": "DumpThreadInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpThreadInfo(const TCHAR* MarkerName)"
  },
  {
    "label": "SetupGameThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupGameThread()"
  },
  {
    "label": "SetupRenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupRenderThread()"
  },
  {
    "label": "SetupAudioThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupAudioThread()"
  },
  {
    "label": "TeardownAudioThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TeardownAudioThread()"
  },
  {
    "label": "ShouldSaveToUserDir()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSaveToUserDir()"
  },
  {
    "label": "BaseDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "BaseDir()"
  },
  {
    "label": "UserDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserDir()"
  },
  {
    "label": "UserSettingsDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserSettingsDir()"
  },
  {
    "label": "UserTempDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserTempDir()"
  },
  {
    "label": "UserHomeDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserHomeDir()"
  },
  {
    "label": "ApplicationSettingsDir()",
    "kind": "Method",
    "detail": "Function (struct ApplicationSettingsContext { enum class Context : int8_t { LocalUser,RoamingUser,ApplicationSpecific } ; Context Location ; bool bIsEpic ; } ; const TCHAR*)",
    "insertText": "ApplicationSettingsDir()"
  },
  {
    "label": "GetApplicationSettingsDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationSettingsDir(const ApplicationSettingsContext& Settings)"
  },
  {
    "label": "ComputerName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ComputerName()"
  },
  {
    "label": "UserName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserName(bool bOnlyAlphaNumeric = true)"
  },
  {
    "label": "ShaderDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ShaderDir()"
  },
  {
    "label": "SetShaderDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderDir(const TCHAR*Where)"
  },
  {
    "label": "SetCurrentWorkingDirectoryToBaseDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWorkingDirectoryToBaseDir()"
  },
  {
    "label": "GetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentWorkingDirectory()"
  },
  {
    "label": "SetProcessLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProcessLimits(EProcessResource::Type Resource, uint64 Limit)"
  },
  {
    "label": "CleanShaderWorkingDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanShaderWorkingDir()"
  },
  {
    "label": "ExecutablePath()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutablePath()"
  },
  {
    "label": "ExecutableName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutableName(bool bRemoveExtension = true)"
  },
  {
    "label": "GenerateApplicationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateApplicationPath(const FString& AppName, EBuildConfiguration BuildConfiguration)"
  },
  {
    "label": "GetModulePrefix()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetModulePrefix()"
  },
  {
    "label": "GetModuleExtension()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetModuleExtension()"
  },
  {
    "label": "GetBinariesSubdirectory()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetBinariesSubdirectory()"
  },
  {
    "label": "GetModulesDirectory()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetModulesDirectory()"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(const TCHAR* URL, const TCHAR* Parms, FString* Error)"
  },
  {
    "label": "LaunchURLFiltered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchURLFiltered(const TCHAR* URL, const TCHAR* Parms, FString* Error, const UE::Core::FURLRequestFilter& Filter)"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const TCHAR* URL)"
  },
  {
    "label": "GetGameBundleId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameBundleId()"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild = nullptr)"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild, void* PipeStdErrChild)"
  },
  {
    "label": "OpenProcess()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "OpenProcess(uint32 ProcessID)"
  },
  {
    "label": "IsProcRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcRunning(FProcHandle & ProcessHandle)"
  },
  {
    "label": "WaitForProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForProc(FProcHandle & ProcessHandle)"
  },
  {
    "label": "CloseProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseProc(FProcHandle & ProcessHandle)"
  },
  {
    "label": "TerminateProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProc(FProcHandle & ProcessHandle, bool KillTree = false)"
  },
  {
    "label": "TerminateProcTreeWithPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProcTreeWithPredicate(FProcHandle& ProcessHandle, TFunctionRef<bool(uint32 ProcessId, const TCHAR* ApplicationName)> Predicate)"
  },
  {
    "label": "WaitAndFork()",
    "kind": "Method",
    "detail": "Function (enum class EWaitAndForkResult : uint8 { Error,Parent,Child } ; EWaitAndForkResult)",
    "insertText": "WaitAndFork()"
  },
  {
    "label": "GetProcReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProcReturnCode(FProcHandle & ProcHandle, int32* ReturnCode)"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning(uint32 ProcessId)"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning(const TCHAR* ProcName)"
  },
  {
    "label": "GetApplicationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationName(uint32 ProcessId)"
  },
  {
    "label": "GetApplicationMemoryUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplicationMemoryUsage(uint32 ProcessId, SIZE_T* OutMemoryUsage)"
  },
  {
    "label": "ExecProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode, FString* OutStdOut, FString* OutStdErr, const TCHAR* OptionalWorkingDirectory = NULL, bool bShouldEndWithParentProcess = false)"
  },
  {
    "label": "ExecElevatedProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecElevatedProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode)"
  },
  {
    "label": "LaunchFileInDefaultExternalApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchFileInDefaultExternalApplication(const TCHAR* FileName, const TCHAR* Parms = NULL, ELaunchVerb::Type Verb = ELaunchVerb::Open, bool bPromptToOpenOnFailure = true)"
  },
  {
    "label": "ExploreFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExploreFolder(const TCHAR* FilePath)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_HAS_BSD_TIME void)",
    "insertText": "Sleep(float Seconds)"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepNoStats(float Seconds)"
  },
  {
    "label": "SleepInfinite()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "SleepInfinite()"
  },
  {
    "label": "YieldThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YieldThread()"
  },
  {
    "label": "ConditionalSleep()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ConditionalSleep(TFunctionRef<bool()> Condition, float SleepTime = 0.0f)"
  },
  {
    "label": "GetSynchEventFromPool()",
    "kind": "Method",
    "detail": "Function (class FEvent*)",
    "insertText": "GetSynchEventFromPool(bool bIsManualReset = false)"
  },
  {
    "label": "FlushPoolSyncEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPoolSyncEvents()"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnSynchEventToPool(FEvent* Event)"
  },
  {
    "label": "CreateRunnableThread()",
    "kind": "Method",
    "detail": "Function (class FRunnableThread*)",
    "insertText": "CreateRunnableThread()"
  },
  {
    "label": "ClosePipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosePipe(void* ReadPipe, void* WritePipe)"
  },
  {
    "label": "CreatePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePipe(void*& ReadPipe, void*& WritePipe, bool bWritePipeLocal = false)"
  },
  {
    "label": "ReadPipe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ReadPipe(void* ReadPipe)"
  },
  {
    "label": "ReadPipeToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPipeToArray(void* ReadPipe, TArray<uint8> & Output)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const FString& Message, FString* OutWritten = nullptr)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const uint8* Data, const int32 DataLength, int32* OutDataLength = nullptr)"
  },
  {
    "label": "SupportsMultithreading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultithreading()"
  },
  {
    "label": "NewInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (FSemaphore*)",
    "insertText": "NewInterprocessSynchObject(const FString& Name, bool bCreate, uint32 MaxLocks = 1)"
  },
  {
    "label": "NewInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (FSemaphore*)",
    "insertText": "NewInterprocessSynchObject(const TCHAR* Name, bool bCreate, uint32 MaxLocks = 1)"
  },
  {
    "label": "DeleteInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInterprocessSynchObject(FSemaphore * Object)"
  },
  {
    "label": "Daemonize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Daemonize()"
  },
  {
    "label": "IsFirstInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFirstInstance()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "SkipWaitForStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SkipWaitForStats()"
  },
  {
    "label": "ModifyThreadAssignmentForUObjectReferenceCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyThreadAssignmentForUObjectReferenceCollector(int32& NumThreads, int32& NumBackgroundThreads, ENamedThreads::Type& NormalThreadName, ENamedThreads::Type& BackgroundThreadName)"
  },
  {
    "label": "Yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Yield()"
  },
  {
    "label": "_mm_pause()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_USE_SSE2_FOR_THREAD_YIELD)",
    "insertText": "_mm_pause()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_CPU_ARM_FAMILY # if !)",
    "insertText": "defined(__clang__) __yield()"
  },
  {
    "label": "__builtin_arm_yield()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__builtin_arm_yield()"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (# endif # else)",
    "insertText": "unimplemented()"
  },
  {
    "label": "YieldCycles()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "YieldCycles(uint64 Cycles)"
  },
  {
    "label": "ReadCycleCounter()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_CPU_X86_FAMILY auto)",
    "insertText": "ReadCycleCounter()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) return __rdtsc()"
  },
  {
    "label": "mach_absolute_time()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_APPLE return)",
    "insertText": "mach_absolute_time()"
  },
  {
    "label": "__has_builtin()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "__has_builtin(__builtin_readcyclecounter) return __builtin_readcyclecounter()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Cycles = start ! = 0 ? Cycles : 0 ; # if PLATFORM_WINDOWS)",
    "insertText": "if(FPlatformMisc::HasTimedPauseCPUFeature())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) _tpause(0, PauseCycles)"
  },
  {
    "label": "__has_builtin()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "__has_builtin(__builtin_ia32_tpause) __builtin_ia32_tpause(0, (uint32)(PauseCycles >> 32), (uint32)PauseCycles)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while((ReadCycleCounter() - start) < Cycles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "for(uint64 i = 0; i < Cycles; i++)"
  }
]