[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FURLRequestFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FURLRequestFilter"
  },
  {
    "label": "TProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TProcHandle"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "FPlatformProcessMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformProcessMemoryStats"
  },
  {
    "label": "FGenericPlatformProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformProcess"
  },
  {
    "label": "FSemaphore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSemaphore"
  },
  {
    "label": "Limits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Limits"
  },
  {
    "label": "ApplicationSettingsContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ApplicationSettingsContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FreeDllHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDllHandle( void* DllHandle )"
  },
  {
    "label": "GetCurrentProcessId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentProcessId()"
  },
  {
    "label": "GetCurrentCoreNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentCoreNumber()"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask( uint64 AffinityMask )"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadPriority( EThreadPriority NewPriority )"
  },
  {
    "label": "GetStackSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStackSize()"
  },
  {
    "label": "ShouldSaveToUserDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSaveToUserDir()"
  },
  {
    "label": "GetApplicationSettingsDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationSettingsDir(const ApplicationSettingsContext& Settings)"
  },
  {
    "label": "SetShaderDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderDir(const TCHAR*Where)"
  },
  {
    "label": "SetCurrentWorkingDirectoryToBaseDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWorkingDirectoryToBaseDir()"
  },
  {
    "label": "GetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentWorkingDirectory()"
  },
  {
    "label": "ShaderWorkingDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ShaderWorkingDir()"
  },
  {
    "label": "CleanShaderWorkingDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanShaderWorkingDir()"
  },
  {
    "label": "GenerateApplicationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateApplicationPath( const FString& AppName, EBuildConfiguration BuildConfiguration)"
  },
  {
    "label": "GetModulesDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetModulesDirectory()"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL( const TCHAR* URL, const TCHAR* Parms, FString* Error )"
  },
  {
    "label": "LaunchURLFiltered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchURLFiltered(const TCHAR* URL, const TCHAR* Parms, FString* Error, const UE::Core::FURLRequestFilter& Filter)"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const TCHAR* URL)"
  },
  {
    "label": "GetGameBundleId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameBundleId()"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc( const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild = nullptr)"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc( const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild, void* PipeStdErrChild)"
  },
  {
    "label": "OpenProcess()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "OpenProcess(uint32 ProcessID)"
  },
  {
    "label": "IsProcRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcRunning( FProcHandle & ProcessHandle )"
  },
  {
    "label": "WaitForProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForProc( FProcHandle & ProcessHandle )"
  },
  {
    "label": "CloseProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseProc( FProcHandle & ProcessHandle )"
  },
  {
    "label": "TerminateProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProc( FProcHandle & ProcessHandle, bool KillTree = false )"
  },
  {
    "label": "WaitAndFork()",
    "kind": "Method",
    "detail": "Function (EWaitAndForkResult)",
    "insertText": "WaitAndFork()"
  },
  {
    "label": "GetProcReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProcReturnCode( FProcHandle & ProcHandle, int32* ReturnCode )"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning( uint32 ProcessId )"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning( const TCHAR* ProcName )"
  },
  {
    "label": "GetApplicationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationName( uint32 ProcessId )"
  },
  {
    "label": "GetApplicationMemoryUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplicationMemoryUsage(uint32 ProcessId, SIZE_T* OutMemoryUsage)"
  },
  {
    "label": "ExecProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode, FString* OutStdOut, FString* OutStdErr, const TCHAR* OptionalWorkingDirectory = NULL, bool bShouldEndWithParentProcess = false)"
  },
  {
    "label": "ExecElevatedProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecElevatedProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode)"
  },
  {
    "label": "LaunchFileInDefaultExternalApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchFileInDefaultExternalApplication( const TCHAR* FileName, const TCHAR* Parms = NULL, ELaunchVerb::Type Verb = ELaunchVerb::Open, bool bPromptToOpenOnFailure = true )"
  },
  {
    "label": "ExploreFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExploreFolder( const TCHAR* FilePath )"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep( float Seconds )"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepNoStats( float Seconds )"
  },
  {
    "label": "SleepInfinite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepInfinite()"
  },
  {
    "label": "YieldThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YieldThread()"
  },
  {
    "label": "FlushPoolSyncEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPoolSyncEvents()"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnSynchEventToPool(FEvent* Event)"
  },
  {
    "label": "ClosePipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosePipe( void* ReadPipe, void* WritePipe )"
  },
  {
    "label": "CreatePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePipe(void*& ReadPipe, void*& WritePipe, bool bWritePipeLocal = false)"
  },
  {
    "label": "ReadPipe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ReadPipe( void* ReadPipe )"
  },
  {
    "label": "ReadPipeToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPipeToArray(void* ReadPipe, TArray<uint8> & Output)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const FString& Message, FString* OutWritten = nullptr)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const uint8* Data, const int32 DataLength, int32* OutDataLength = nullptr)"
  },
  {
    "label": "SupportsMultithreading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultithreading()"
  },
  {
    "label": "DeleteInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInterprocessSynchObject(FSemaphore * Object)"
  },
  {
    "label": "Daemonize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Daemonize()"
  },
  {
    "label": "IsFirstInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFirstInstance()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "GetDesiredThreadForUObjectReferenceCollector()",
    "kind": "Method",
    "detail": "Function (ENamedThreads::Type)",
    "insertText": "GetDesiredThreadForUObjectReferenceCollector()"
  },
  {
    "label": "ModifyThreadAssignmentForUObjectReferenceCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyThreadAssignmentForUObjectReferenceCollector( int32& NumThreads, int32& NumBackgroundThreads, ENamedThreads::Type& NormalThreadName, ENamedThreads::Type& BackgroundThreadName )"
  },
  {
    "label": "_mm_pause()",
    "kind": "Method",
    "detail": "Function (PLATFORM_USE_SSE2_FOR_THREAD_YIELD)",
    "insertText": "_mm_pause()"
  },
  {
    "label": "__builtin_arm_yield()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "__builtin_arm_yield()"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (called)",
    "insertText": "unimplemented()"
  },
  {
    "label": "__rdtsc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__rdtsc()"
  },
  {
    "label": "mach_absolute_time()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mach_absolute_time()"
  },
  {
    "label": "__builtin_readcyclecounter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_readcyclecounter()"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (called)",
    "insertText": "unimplemented()"
  }
]