[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAnimNode_LookAt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LookAt"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneIndices . h \" # include \" BoneContainer . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" CommonAnimTypes . h \" # include \" EngineDefines . h \" # include \" AnimNode_LookAt . generated . h \" class FPrimitiveDrawInterface ; class USkeletalMeshComponent ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Linear,Cubic,Sinusoidal,EaseInOutExponent2,EaseInOutExponent3,EaseInOutExponent4,EaseInOutExponent5,MAX } ; })",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=SkeletalControl)"
  },
  {
    "label": "FAnimNode_LookAt()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FAnimNode_LookAt()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternal(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "EvaluateComponentSpaceInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentSpaceInternal(FComponentSpacePoseContext& Context)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetCachedTargetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCachedTargetLocation()"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "AlphaToBlendType()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AlphaToBlendType(float InAlpha, EInterpolationBlend::Type BlendType)"
  },
  {
    "label": "ModifyPoseFromDeltaRotation()",
    "kind": "Method",
    "detail": "Function (FVector CurrentLookAtLocation ; FVector CurrentTargetLocation ; FVector PreviousTargetLocation ; float AccumulatedInterpoolationTime ; # if UE_ENABLE_DEBUG_DRAWING FTransform CachedOriginalTransform ; FTransform CachedLookAtTransform ; FTransform CachedTargetCoordinate ; FVector CachedPreviousTargetLocation ; FVector CachedCurrentLookAtLocation ; # endif FVector CachedCurrentTargetLocation ; protected : void)",
    "insertText": "ModifyPoseFromDeltaRotation(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms, FTransform& InOutBoneToModifyTransform, const FQuat& DeltaRotation)"
  }
]