[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FMobileLightShaftInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileLightShaftInfo"
  },
  {
    "label": "GetMobileLightShaftInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Color . h \" # include \" Math / Vector2D . h \" class FViewInfo ; class FLightSceneInfo ; class FLightSceneProxy ; class FSceneViewFamily ; struct FMobileLightShaftInfo { FVector2D Center = FVector2D::ZeroVector ; FLinearColor ColorMask = FLinearColor::Transparent ; FLinearColor ColorApply = FLinearColor::Transparent ; float BloomMaxBrightness = 1 0 0 . 0 f ; } ; FMobileLightShaftInfo)",
    "insertText": "GetMobileLightShaftInfo(const FViewInfo& View, const FLightSceneInfo& LightSceneInfo)"
  },
  {
    "label": "ShouldRenderLightShafts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLightShafts(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ShouldRenderLightShaftsForLight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLightShaftsForLight(const FViewInfo& View, const FLightSceneProxy& LightSceneProxy)"
  },
  {
    "label": "GetLightShaftDownsampleFactor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLightShaftDownsampleFactor()"
  }
]