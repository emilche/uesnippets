[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SScaleBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScaleBox"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" SScaleBox . generated . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (enum Type : int { None,Fill,ScaleToFit,ScaleToFitX,ScaleToFitY,ScaleToFill,ScaleBySafeZone,UserSpecified,UserSpecifiedWithClipping } ; } class SScaleBox : public SCompoundWidget {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SScaleBox, SCompoundWidget, SLATE_API) public: SLATE_BEGIN_ARGS(SScaleBox) : _Content() , _HAlign(HAlign_Center) , _VAlign(VAlign_Center) , _StretchDirection(EStretchDirection::Both) , _Stretch(EStretch::None) , _UserSpecifiedScale(1.0f) , _IgnoreInheritedScale(false)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ARGUMENT(EHorizontalAlignment, HAlign) SLATE_ARGUMENT(EVerticalAlignment, VAlign) SLATE_ATTRIBUTE(EStretchDirection::Type, StretchDirection) SLATE_ATTRIBUTE(EStretch::Type, Stretch) SLATE_ATTRIBUTE(float, UserSpecifiedScale) SLATE_ATTRIBUTE(bool, IgnoreInheritedScale) #if WITH_EDITOR SLATE_ARGUMENT(TOptional<FVector2D>, OverrideScreenSize) #endif SLATE_END_ARGS() protected: SLATE_API SScaleBox()"
  },
  {
    "label": "SScaleBox()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "SScaleBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetHAlign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHAlign(EHorizontalAlignment HAlign)"
  },
  {
    "label": "SetVAlign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVAlign(EVerticalAlignment VAlign)"
  },
  {
    "label": "SetStretchDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStretchDirection(EStretchDirection::Type InStretchDirection)"
  },
  {
    "label": "SetStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStretch(EStretch::Type InStretch)"
  },
  {
    "label": "SetUserSpecifiedScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserSpecifiedScale(float InUserSpecifiedScale)"
  },
  {
    "label": "SetIgnoreInheritedScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreInheritedScale(bool InIgnoreInheritedScale)"
  },
  {
    "label": "SetOverrideScreenInformation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetOverrideScreenInformation(TOptional<FVector2D> InScreenSize)"
  },
  {
    "label": "CustomPrepass()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "CustomPrepass(float LayoutScaleMultiplier)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float InScale)"
  },
  {
    "label": "GetRelativeLayoutScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelativeLayoutScale(int32 ChildIndex, float LayoutScaleMultiplier)"
  },
  {
    "label": "DoesScaleRequireNormalizingPrepassOrLocalGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesScaleRequireNormalizingPrepassOrLocalGeometry()"
  },
  {
    "label": "IsDesiredSizeDependentOnAreaAndScale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDesiredSizeDependentOnAreaAndScale()"
  },
  {
    "label": "ComputeContentScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeContentScale(const FGeometry& PaintGeometry)"
  },
  {
    "label": "RefreshSafeZoneScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSafeZoneScale()"
  },
  {
    "label": "HandleSafeFrameChangedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSafeFrameChangedEvent()"
  },
  {
    "label": "DebugSafeAreaUpdated()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "DebugSafeAreaUpdated(const FMargin& NewSafeZone, bool bShouldRecacheMetrics)"
  }
]