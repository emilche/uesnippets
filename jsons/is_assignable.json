[
  {
    "label": "__select_2nd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__select_2nd"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Arg"
  },
  {
    "label": "__is_assignable_imp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_assignable_imp"
  },
  {
    "label": "is_assignable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_assignable"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_ASSIGNABLE_H # define _LIBCPP___TYPE_TRAITS_IS_ASSIGNABLE_H # include<__config> # include<__type_traits / integral_constant . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__has_builtin()",
    "kind": "Method",
    "detail": "Function (typedef _LIBCPP_NODEBUG _Tp type ; } ; # if)",
    "insertText": "__has_builtin(__is_assignable) template<class _Tp, class _Up> struct _LIBCPP_TEMPLATE_VIS is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)"
  },
  {
    "label": "__is_assignable()",
    "kind": "Method",
    "detail": "Function (} ; # if _LIBCPP_STD_VER> 1 4 template<class _Tp,class _Arg> bool is_assignable_v =)",
    "insertText": "__is_assignable(_Tp, _Arg)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# endif # else template<class _Tp,class _Arg> __select_2nd<)",
    "insertText": "decltype((declval<_Tp>() = declval<_Arg>())), true_type>::type __is_assignable_test(int)"
  },
  {
    "label": "__is_assignable_test()",
    "kind": "Method",
    "detail": "Function (template<class,class> false_type)",
    "insertText": "__is_assignable_test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,class _Arg,bool = is_void<_Tp>::value | | is_void<_Arg>::value> struct __is_assignable_imp : public)",
    "insertText": "decltype((_VSTD::__is_assignable_test<_Tp, _Arg>(0)))"
  }
]