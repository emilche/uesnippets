[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FAbstractVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAbstractVisitor"
  },
  {
    "label": "FAllocationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationContext"
  },
  {
    "label": "FCellFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellFormatter"
  },
  {
    "label": "FMarkStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStack"
  },
  {
    "label": "FMarkStackVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStackVisitor"
  },
  {
    "label": "FRunningContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRunningContext"
  },
  {
    "label": "VCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCell"
  },
  {
    "label": "VValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VValue"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "declared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "declared"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "VCppClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCppClassInfo"
  },
  {
    "label": "VCppClassInfoRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCppClassInfoRegister"
  },
  {
    "label": "VCppClassInfoRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCppClassInfoRegistry"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (namespace Verse { struct FAbstractVisitor ; struct FAllocationContext ; struct FCellFormatter ; struct FMarkStack ; struct FMarkStackVisitor ; struct FRunningContext ; struct VCell ; struct VValue ; # if)",
    "insertText": "defined(_MSC_VER) #define VCPPCLASSINFO_PORTABLE_MSC_SUPER \\ \\ __pragma(warning(push)) __pragma(warning(disable : 4495)) __super __pragma(warning(pop)) #else #define VCPPCLASSINFO_PORTABLE_MSC_SUPER Super #endif #define DECLARE_BASE_VCPPCLASSINFO(API) \\ protected: \\ auto CheckSuperClass()"
  },
  {
    "label": "VisitInheritedAndNonInheritedReferences()",
    "kind": "Method",
    "detail": "Function (\\ return this ; \\ } \\ \\ API void)",
    "insertText": "VisitInheritedAndNonInheritedReferences(::Verse::FAbstractVisitor& Visitor)"
  },
  {
    "label": "VisitInheritedAndNonInheritedReferences()",
    "kind": "Method",
    "detail": "Function (\\ API void)",
    "insertText": "VisitInheritedAndNonInheritedReferences(::Verse::FMarkStackVisitor& Visitor)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (\\ \\ public : \\ API::Verse::VCppClassInfo StaticCppClassInfo ; # define)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(API, SuperClass) \\ private: \\ template <typename TVisitor> \\ void VisitReferencesImpl(TVisitor&)"
  },
  {
    "label": "CheckSuperClass()",
    "kind": "Method",
    "detail": "Function (\\ \\ protected : \\ auto)",
    "insertText": "CheckSuperClass()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::is_same_v<decltype(SuperThis), SuperClass*>, \\ \"Declared super-class \" #SuperClass \" does not match actual super-class.\")"
  },
  {
    "label": "DEFINE_BASE_OR_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (\\ \\ public : \\ using Super = SuperClass ; \\ API::Verse::VCppClassInfo StaticCppClassInfo ; # define)",
    "insertText": "DEFINE_BASE_OR_DERIVED_VCPPCLASSINFO(CellType, SuperClassInfoPtr)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEXT(#CellType), \\ (SuperClassInfoPtr), \\ sizeof(CellType), \\ [](::Verse::VCell* This, ::Verse::FMarkStackVisitor& Visitor)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ This -> StaticCast<)",
    "insertText": "CellType().VisitInheritedAndNonInheritedReferences(Visitor)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (\\::Verse::FAbstractVisitor::FReferrerContext)",
    "insertText": "Context(Visitor, This)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ This -> StaticCast<)",
    "insertText": "CellType().ConductCensusImpl()"
  },
  {
    "label": "nullptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nullptr(::Verse::VCell* This)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ This -> StaticCast<)",
    "insertText": "CellType().~CellType()"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ return This -> StaticCast<)",
    "insertText": "CellType().EqualImpl(Context, Other, HandlePlaceholder)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ return This -> StaticCast<)",
    "insertText": "CellType().GetTypeHashImpl()"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ return This -> StaticCast<)",
    "insertText": "CellType().MeltImpl(Context)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ return This -> StaticCast<)",
    "insertText": "CellType().FreezeImpl(Context)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ return This -> StaticCast<)",
    "insertText": "CellType().SubsumesImpl(Context, InputValue)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (\\ },\\::Verse::Details::GetToStringMethod<)",
    "insertText": "CellType(), \\ ::Verse::Details::GetSerializeMethod<CellType>(), \\ ::Verse::Details::GetSerializeNewMethod<CellType>()"
  },
  {
    "label": "_Register()",
    "kind": "Method",
    "detail": "Function (\\::Verse::VCppClassInfoRegister CellType # #)",
    "insertText": "_Register(&CellType::StaticCppClassInfo)"
  },
  {
    "label": "DEFINE_BASE_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DEFINE_BASE_VCPPCLASSINFO(CellType) \\ DEFINE_BASE_OR_DERIVED_VCPPCLASSINFO(CellType, nullptr) \\ void CellType::VisitInheritedAndNonInheritedReferences(::Verse::FAbstractVisitor& Visitor)"
  },
  {
    "label": "VisitReferencesImpl()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VisitReferencesImpl(Visitor)"
  },
  {
    "label": "DEFINE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_DERIVED_VCPPCLASSINFO(CellType) \\ static_assert(!std::is_same_v<CellType::Super, CellType>, #CellType \" declares itself as its super-class in DECLARE_DERIVED_VCPPCLASSINFO.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::is_base_of_v<CellType::Super, CellType>, #CellType \" doesn't derive from the super-class declared by DECLARE_DERIVED_VCPPCLASSINFO.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::is_base_of_v<::Verse::VCell, CellType::Super>, #CellType \"'s super-class as declared by DECLARE_DERIVED_VCPPCLASSINFO does not derive from VCell.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!std::is_polymorphic_v<CellType>, \"VCell-derived C++ classes must not have virtual methods.\")"
  },
  {
    "label": "DEFINE_BASE_OR_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_BASE_OR_DERIVED_VCPPCLASSINFO(CellType, &CellType::Super::StaticCppClassInfo) \\ void CellType::VisitInheritedAndNonInheritedReferences(::Verse::FAbstractVisitor& Visitor)"
  },
  {
    "label": "VisitInheritedAndNonInheritedReferences()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VisitInheritedAndNonInheritedReferences(Visitor)"
  },
  {
    "label": "DEFINE_TRIVIAL_VISIT_REFERENCES()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_TRIVIAL_VISIT_REFERENCES(CellType) \\ template <typename TVisitor> \\ void CellType::VisitReferencesImpl(TVisitor&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (\\ } struct VCppClassInfo { const TCHAR* Name ; VCppClassInfo* SuperClass ; size_t SizeWithoutFields ;)",
    "insertText": "void(*MarkReferencesImpl)(VCell* This, FMarkStackVisitor&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*VisitReferencesImpl)(VCell* This, FAbstractVisitor&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ConductCensus)(VCell* This)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*RunDestructor)(VCell* This)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(*Equal)(FAllocationContext Context, VCell* This, VCell* Other, const TFunction<void(::Verse::VValue, ::Verse::VValue)>& HandlePlaceholder)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uint32(*GetTypeHash)(VCell* This)"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VValue(*Melt)(FAllocationContext Context, VCell* This)"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VValue(*Freeze)(FAllocationContext Context, VCell* This)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(*Subsumes)(FAllocationContext Context, VCell* This, VValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ToString)(VCell* This, FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*Serialize)(VCell*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "VCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VCell(*SerializeNew)(FAllocationContext Context)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsA(const VCppClassInfo* Other)"
  },
  {
    "label": "MarkReferencesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkReferencesImpl(This, Visitor)"
  },
  {
    "label": "VisitReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitReferences(VCell* This, FAbstractVisitor& Visitor)"
  },
  {
    "label": "VisitReferencesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitReferencesImpl(This, Visitor)"
  },
  {
    "label": "DebugName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "DebugName()"
  },
  {
    "label": "VCppClassInfoRegister()",
    "kind": "Method",
    "detail": "Function (} ; struct VCppClassInfoRegister { VCppClassInfo* CppClassInfo ; VCppClassInfoRegister* Next ;)",
    "insertText": "VCppClassInfoRegister(VCppClassInfo* InCppClassInfo)"
  },
  {
    "label": "VCppClassInfoRegister()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCppClassInfoRegister()"
  },
  {
    "label": "GetCppClassInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct VCppClassInfoRegistry { VCppClassInfo*)",
    "insertText": "GetCppClassInfo(FStringView Name)"
  }
]