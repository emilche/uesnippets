[
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FDeferredShadingSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredShadingSceneRenderer"
  },
  {
    "label": "FWholeSceneProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWholeSceneProjectedShadowInitializer"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FVirtualShadowMapPerLightCacheEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapPerLightCacheEntry"
  },
  {
    "label": "FNaniteVisibilityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteVisibilityQuery"
  },
  {
    "label": "FShadowScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowScene"
  },
  {
    "label": "IShadowInvalidatingInstances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IShadowInvalidatingInstances"
  },
  {
    "label": "FShadowSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowSceneRenderer"
  },
  {
    "label": "FViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewData"
  },
  {
    "label": "FLocalLightShadowFrameSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalLightShadowFrameSetup"
  },
  {
    "label": "FDirectionalLightShadowFrameSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectionalLightShadowFrameSetup"
  },
  {
    "label": "FShadowSceneRenderer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / SparseArray . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Array . h \" # include \" Tasks / Task . h \" # include \" VirtualShadowMaps / VirtualShadowMapArray . h \" class FProjectedShadowInfo ; class FDeferredShadingSceneRenderer ; class FWholeSceneProjectedShadowInitializer ; class FRDGBuilder ; class FVirtualShadowMapPerLightCacheEntry ; struct FNaniteVisibilityQuery ; class FShadowScene ; namespace UE::Renderer::Private { class IShadowInvalidatingInstances ; } class FShadowSceneRenderer { public :)",
    "insertText": "FShadowSceneRenderer(FDeferredShadingSceneRenderer& InSceneRenderer)"
  },
  {
    "label": "ComputeNaniteShadowsLODScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeNaniteShadowsLODScaleFactor()"
  },
  {
    "label": "BeginRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "AddLocalLightShadow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FVirtualShadowMapPerLightCacheEntry>)",
    "insertText": "AddLocalLightShadow(const FWholeSceneProjectedShadowInitializer& Initializer, FProjectedShadowInfo* ProjectedShadowInfo, FLightSceneInfo* LightSceneInfo, float MaxScreenRadius)"
  },
  {
    "label": "AddDirectionalLightShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectionalLightShadow(FProjectedShadowInfo* ProjectedShadowInfo)"
  },
  {
    "label": "PostInitDynamicShadowsSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitDynamicShadowsSetup()"
  },
  {
    "label": "DispatchVirtualShadowMapViewAndCullingSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchVirtualShadowMapViewAndCullingSetup(FRDGBuilder& GraphBuilder, TConstArrayView<FProjectedShadowInfo*> VirtualShadowMapShadows)"
  },
  {
    "label": "PostSetupDebugRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSetupDebugRender()"
  },
  {
    "label": "RenderVirtualShadowMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderVirtualShadowMaps(FRDGBuilder& GraphBuilder, bool bNaniteEnabled, bool bUpdateNaniteStreaming)"
  },
  {
    "label": "RenderVirtualShadowMapProjectionMaskBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderVirtualShadowMapProjectionMaskBits(FRDGBuilder& GraphBuilder, FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "ApplyVirtualShadowMapProjectionForLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVirtualShadowMapProjectionForLight(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FLightSceneInfo* LightSceneInfo, FRDGTextureRef OutputScreenShadowMaskTexture, FRDGTextureRef OutputScreenShadowMaskSubPixelTexture)"
  },
  {
    "label": "UsePackedShadowMaskBits()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef VirtualShadowMapMaskBits = nullptr ; FRDGTextureRef VirtualShadowMapMaskBitsHairStrands = nullptr ; FRDGBufferRef HairTransmittanceMaskBits = nullptr ; bool)",
    "insertText": "UsePackedShadowMaskBits()"
  },
  {
    "label": "GetInvalidatingInstancesInterface()",
    "kind": "Method",
    "detail": "Function (} UE::Renderer::Private::IShadowInvalidatingInstances*)",
    "insertText": "GetInvalidatingInstancesInterface(const FSceneView *SceneView)"
  },
  {
    "label": "GetLocalLightProjectionShaderData()",
    "kind": "Method",
    "detail": "Function (private : struct FViewData { float ClipToViewSizeScale = 0 . 0 f ; float ClipToViewSizeBias = 0 . 0 f ; } ; UE::Tasks::FTask RendererSetupTask ; FVirtualShadowMapProjectionShaderData)",
    "insertText": "GetLocalLightProjectionShaderData(float ResolutionLODBiasLocal, const FProjectedShadowInfo* ProjectedShadowInfo, int32 MapIndex)"
  }
]