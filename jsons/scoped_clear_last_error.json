[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_SCOPED_CLEAR_LAST_ERROR_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_SCOPED_CLEAR_LAST_ERROR_H_ # include<errno . h> # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / migration_adapter . h \" # include \" build / build_config . h \" namespace partition_alloc::internal::base { class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "ScopedClearLastErrorBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedClearLastErrorBase() : last_errno_(errno)"
  },
  {
    "label": "ScopedClearLastErrorBase()",
    "kind": "Method",
    "detail": "Function (errno = 0 ; })",
    "insertText": "ScopedClearLastErrorBase(const ScopedClearLastErrorBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedClearLastErrorBase&)",
    "insertText": "operator(const ScopedClearLastErrorBase&)"
  },
  {
    "label": "ScopedClearLastErrorBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedClearLastErrorBase()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (errno = last_errno_ ; } private : const int last_errno_ ; } ; # if)",
    "insertText": "BUILDFLAG(IS_WIN) class PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "ScopedClearLastError()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedClearLastError()"
  },
  {
    "label": "ScopedClearLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedClearLastError(const ScopedClearLastError&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedClearLastError&)",
    "insertText": "operator(const ScopedClearLastError&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : const unsigned long last_system_error_ ; } ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  }
]