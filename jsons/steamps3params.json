[
  {
    "label": "SteamPS3Params_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamPS3Params_t"
  },
  {
    "label": "Ps3netInit_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Ps3netInit_t"
  },
  {
    "label": "Ps3jpgInit_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Ps3jpgInit_t"
  },
  {
    "label": "Ps3pngInit_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Ps3pngInit_t"
  },
  {
    "label": "Ps3sysutilUserInfo_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Ps3sysutilUserInfo_t"
  },
  {
    "label": "SteamPS3Memory_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamPS3Memory_t"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAMPS3PARAMS_H # define STEAMPS3PARAMS_H # ifdef _WIN32 # pragma once # endif # define STEAM_PS3_PATH_MAX 1 0 5 5 # define STEAM_PS3_SERVICE_ID_MAX 3 2 # define STEAM_PS3_COMMUNICATION_ID_MAX 1 0 # define STEAM_PS3_COMMUNICATION_SIG_MAX 1 6 0 # define STEAM_PS3_LANGUAGE_MAX 6 4 # define STEAM_PS3_REGION_CODE_MAX 1 6 # define STEAM_PS3_CURRENT_PARAMS_VER 2 struct SteamPS3Params_t { uint32 m_unVersion ; void* pReserved ; uint32 m_nAppId ; char m_rgchInstallationPath [ STEAM_PS3_PATH_MAX ] ; char m_rgchSystemCache [ STEAM_PS3_PATH_MAX ] ; char m_rgchGameData [ STEAM_PS3_PATH_MAX ] ; char m_rgchNpServiceID [ STEAM_PS3_SERVICE_ID_MAX ] ; char m_rgchNpCommunicationID [ STEAM_PS3_COMMUNICATION_ID_MAX ] ; char m_rgchNpCommunicationSig [ STEAM_PS3_COMMUNICATION_SIG_MAX ] ; char m_rgchSteamLanguage [ STEAM_PS3_LANGUAGE_MAX ] ; char m_rgchRegionCode [ STEAM_PS3_REGION_CODE_MAX ] ; unsigned int m_cSteamInputTTY ; struct Ps3netInit_t { bool m_bNeedInit ; void* m_pMemory ; int m_nMemorySize ; int m_flags ; } m_sysNetInitInfo ; struct Ps3jpgInit_t { bool m_bNeedInit ; } m_sysJpgInitInfo ; struct Ps3pngInit_t { bool m_bNeedInit ; } m_sysPngInitInfo ; struct Ps3sysutilUserInfo_t { bool m_bNeedInit ; } m_sysSysUtilUserInfo ; bool m_bIncludeNewsPage ; } ; # define STEAMPS3_MALLOC_INUSE 0 x53D04A51 # define STEAMPS3_MALLOC_SYSTEM 0 x0D102C48 # define STEAMPS3_MALLOC_OK 0 xFFD04A51 struct SteamPS3Memory_t { bool m_bSingleAllocation ;)",
    "insertText": "void(*m_pfMalloc)(size_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*m_pfRealloc)(void *, size_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*m_pfFree)(void *)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size_t(*m_pUsable_size)(void*)"
  }
]