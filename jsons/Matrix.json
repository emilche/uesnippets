[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include \" Core / Vector . h \" # if)",
    "insertText": "defined(__GNUC__) || defined(__psp2__) #include <string.h> #else #include <cstring> #endif #ifdef ST_SETS_PACKING_INTERNALLY #pragma pack(push, 4)"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (class ST_DLL_LINK Mat3x3 { public :)",
    "insertText": "Mat3x3(bool bSetToIdentity = true)"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mat3x3(const st_float32 afInit[9])"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mat3x3(const Vec3& vRight, const Vec3& vOut, const Vec3& vUp)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "st_float32(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Mat3x3)",
    "insertText": "operator(const Mat3x3& vIn)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "operator(const Vec3& vIn)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(void)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const st_float32 afValue[9])"
  },
  {
    "label": "RotateX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateX(st_float32 fRadians)"
  },
  {
    "label": "RotateY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateY(st_float32 fRadians)"
  },
  {
    "label": "RotateZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateZ(st_float32 fRadians)"
  },
  {
    "label": "RotateArbitrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateArbitrary(const Vec3& vAxis, st_float32 fRadius)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(const Vec3& vScalar)"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (union { st_float32 m_afSingle [ 9 ] ; st_float32 m_afRowCol [ 3 ] [ 3 ] ; } ; } ; class ST_DLL_LINK Mat4x4 { public :)",
    "insertText": "Mat4x4(bool bSetToIdentity = true)"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mat4x4(const st_float32 afInit[16])"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mat4x4(st_float32 m00, st_float32 m01, st_float32 m02, st_float32 m03, st_float32 m10, st_float32 m11, st_float32 m12, st_float32 m13, st_float32 m20, st_float32 m21, st_float32 m22, st_float32 m23, st_float32 m30, st_float32 m31, st_float32 m32, st_float32 m33)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Mat4x4)",
    "insertText": "operator(const Mat4x4& mIn)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Vec4)",
    "insertText": "operator(const Vec4& vIn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const st_float32 afValue[16])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(st_float32 m00, st_float32 m01, st_float32 m02, st_float32 m03, st_float32 m10, st_float32 m11, st_float32 m12, st_float32 m13, st_float32 m20, st_float32 m21, st_float32 m22, st_float32 m23, st_float32 m30, st_float32 m31, st_float32 m32, st_float32 m33)"
  },
  {
    "label": "GetVectorComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVectorComponents(Vec3& vUp, Vec3& vOut, Vec3& vRight)"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Invert(Mat4x4& mResult)"
  },
  {
    "label": "Multiply4f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Multiply4f(const st_float32 afIn[4], st_float32 afResult[4])"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(const Vec3& vTranslate)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (Mat4x4)",
    "insertText": "Transpose(void)"
  },
  {
    "label": "LookAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LookAt(const Vec3& vEye, const Vec3& vCenter, const Vec3& vUp)"
  },
  {
    "label": "Ortho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ortho(st_float32 fLeft, st_float32 fRight, st_float32 fBottom, st_float32 fTop, st_float32 fNear, st_float32 fFar, bool bOpenGL = false)"
  },
  {
    "label": "Frustum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Frustum(st_float32 fLeft, st_float32 fRight, st_float32 fBottom, st_float32 fTop, st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "Perspective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Perspective(st_float32 fFieldOfView, st_float32 fAspectRatio, st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "AdjustPerspectiveNearAndFar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPerspectiveNearAndFar(st_float32 fNear, st_float32 fFar)"
  }
]