[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Mat3x3(bool bSetToIdentity = true)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(void)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const st_float32 afValue[9])"
  },
  {
    "label": "RotateX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateX(st_float32 fRadians)"
  },
  {
    "label": "RotateY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateY(st_float32 fRadians)"
  },
  {
    "label": "RotateZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateZ(st_float32 fRadians)"
  },
  {
    "label": "RotateArbitrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateArbitrary(const Vec3& vAxis, st_float32 fRadius)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(const Vec3& vScalar)"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Mat4x4(bool bSetToIdentity = true)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(void)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const st_float32 afValue[16])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(st_float32 m00, st_float32 m01, st_float32 m02, st_float32 m03,\n\t\t\t\t\t\t\t\tst_float32 m10, st_float32 m11, st_float32 m12, st_float32 m13,\n\t\t\t\t\t\t\t\tst_float32 m20, st_float32 m21, st_float32 m22, st_float32 m23,\n\t\t\t\t\t\t\t\tst_float32 m30, st_float32 m31, st_float32 m32, st_float32 m33)"
  },
  {
    "label": "GetVectorComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVectorComponents(Vec3& vUp, Vec3& vOut, Vec3& vRight)"
  },
  {
    "label": "RotateX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateX(st_float32 fRadians)"
  },
  {
    "label": "RotateY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateY(st_float32 fRadians)"
  },
  {
    "label": "RotateZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateZ(st_float32 fRadians)"
  },
  {
    "label": "RotateArbitrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateArbitrary(const Vec3& vAxis, st_float32 fRadius)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(const Vec3& vScalar)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(const Vec3& vTranslate)"
  },
  {
    "label": "LookAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LookAt(const Vec3& vEye, const Vec3& vCenter, const Vec3& vUp)"
  },
  {
    "label": "Ortho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ortho(st_float32 fLeft, st_float32 fRight, st_float32 fBottom, st_float32 fTop, st_float32 fNear, st_float32 fFar, bool bOpenGL = false)"
  },
  {
    "label": "Frustum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Frustum(st_float32 fLeft, st_float32 fRight, st_float32 fBottom, st_float32 fTop, st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "Perspective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Perspective(st_float32 fFieldOfView, st_float32 fAspectRatio, st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "AdjustPerspectiveNearAndFar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustPerspectiveNearAndFar(st_float32 fNear, st_float32 fFar)"
  }
]