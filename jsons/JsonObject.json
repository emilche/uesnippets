[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "GetField()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Dom / JsonValue . h \" # include \" HAL / Platform . h \" # include \" JsonGlobals . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Serialization / JsonTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Trace / Detail / Channel . h \" class FJsonObject { public : TMap<FString,TSharedPtr<FJsonValue>> Values ; template<EJson JsonType> TSharedPtr<FJsonValue>)",
    "insertText": "GetField(FStringView FieldName)"
  },
  {
    "label": "GetField()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FJsonValue>)",
    "insertText": "GetField(FStringView FieldName, EJson JsonType)"
  },
  {
    "label": "FindByHash()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FJsonValue>* Field = Values .)",
    "insertText": "FindByHash(GetTypeHash(FieldName), FieldName)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogJson, Warning, TEXT(\"Field %.*s is of the wrong type.\"), FieldName.Len(), FieldName.GetData())"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogJson, Warning, TEXT(\"Field %.*s was not found.\"), FieldName.Len(), FieldName.GetData())"
  },
  {
    "label": "FJsonValueNull()",
    "kind": "Method",
    "detail": "Function (} return MakeShared<)",
    "insertText": "FJsonValueNull()"
  },
  {
    "label": "TryGetField()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FJsonValue>)",
    "insertText": "TryGetField(FStringView FieldName)"
  },
  {
    "label": "HasField()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasField(FStringView FieldName)"
  },
  {
    "label": "HasTypedField()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTypedField(FStringView FieldName, EJson JsonType)"
  },
  {
    "label": "SetField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetField(const FString& FieldName, const TSharedPtr<FJsonValue>& Value)"
  },
  {
    "label": "RemoveField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveField(FStringView FieldName)"
  },
  {
    "label": "GetNumberField()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetNumberField(FStringView FieldName)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, float& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, double& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, int8& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, int16& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, int32& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, int64& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, uint8& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, uint16& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, uint32& OutNumber)"
  },
  {
    "label": "TryGetNumberField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumberField(FStringView FieldName, uint64& OutNumber)"
  },
  {
    "label": "SetNumberField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumberField(FString&& FieldName, double Number)"
  },
  {
    "label": "SetNumberField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumberField(const FString& FieldName, double Number)"
  },
  {
    "label": "GetStringField()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStringField(FStringView FieldName)"
  },
  {
    "label": "TryGetStringField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetStringField(FStringView FieldName, FString& OutString)"
  },
  {
    "label": "TryGetStringArrayField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetStringArrayField(FStringView FieldName, TArray<FString>& OutArray)"
  },
  {
    "label": "TryGetEnumArrayField()",
    "kind": "Method",
    "detail": "Function (template<TEnum> bool)",
    "insertText": "TryGetEnumArrayField(FStringView FieldName, TArray<TEnum>& OutArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Strings ;)",
    "insertText": "if(!TryGetStringArrayField(FieldName, Strings))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TEnum Value ;)",
    "insertText": "if(LexTryParseString(Value, *String))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "SetStringField()",
    "kind": "Method",
    "detail": "Function (} } return true ; } void)",
    "insertText": "SetStringField(FString&& FieldName, FString&& StringValue)"
  },
  {
    "label": "SetStringField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringField(FString&& FieldName, const FString& StringValue)"
  },
  {
    "label": "SetStringField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringField(const FString& FieldName, FString&& StringValue)"
  },
  {
    "label": "SetStringField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringField(const FString& FieldName, const FString& StringValue)"
  },
  {
    "label": "GetBoolField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoolField(FStringView FieldName)"
  },
  {
    "label": "TryGetBoolField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetBoolField(FStringView FieldName, bool& OutBool)"
  },
  {
    "label": "SetBoolField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolField(FString&& FieldName, bool InValue)"
  },
  {
    "label": "SetBoolField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolField(const FString& FieldName, bool InValue)"
  },
  {
    "label": "GetArrayField()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FJsonValue>>&)",
    "insertText": "GetArrayField(FStringView FieldName)"
  },
  {
    "label": "TryGetArrayField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetArrayField(FStringView FieldName, const TArray<TSharedPtr<FJsonValue>>*& OutArray)"
  },
  {
    "label": "SetArrayField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayField(FString&& FieldName, TArray<TSharedPtr<FJsonValue>>&& Array)"
  },
  {
    "label": "SetArrayField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayField(FString&& FieldName, const TArray<TSharedPtr<FJsonValue>>& Array)"
  },
  {
    "label": "SetArrayField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayField(const FString& FieldName, TArray<TSharedPtr<FJsonValue>>&& Array)"
  },
  {
    "label": "SetArrayField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayField(const FString& FieldName, const TArray<TSharedPtr<FJsonValue>>& Array)"
  },
  {
    "label": "GetObjectField()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FJsonObject>&)",
    "insertText": "GetObjectField(FStringView FieldName)"
  },
  {
    "label": "TryGetObjectField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetObjectField(FStringView FieldName, const TSharedPtr<FJsonObject>*& OutObject)"
  },
  {
    "label": "SetObjectField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectField(FString&& FieldName, const TSharedPtr<FJsonObject>& JsonObject)"
  },
  {
    "label": "SetObjectField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectField(const FString& FieldName, const TSharedPtr<FJsonObject>& JsonObject)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} private : SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Duplicate(const TSharedPtr<const FJsonObject>& Source, const TSharedPtr<FJsonObject>& Dest)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Duplicate(const TSharedPtr<FJsonObject>& Source, TSharedPtr<FJsonObject>& Dest)"
  }
]