[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FMaterialParameterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterInfo"
  },
  {
    "label": "UMaterialExpressionTextureSampleParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionTextureSampleParameter"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" MaterialTypes . h \" # include \" Materials / MaterialExpressionTextureSample . h \" # include \" MaterialExpressionTextureSampleParameter . generated . h \" class UTexture ; struct FMaterialParameterInfo ;)",
    "insertText": "UCLASS(collapsecategories, abstract, hidecategories=Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=MaterialExpressionTextureSampleParameter)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "MatchesSearchQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesSearchQuery(const TCHAR* SearchQuery)"
  },
  {
    "label": "CanRenameNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameNode()"
  },
  {
    "label": "SetEditableName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditableName(const FString& NewName)"
  },
  {
    "label": "HasAParameterName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAParameterName()"
  },
  {
    "label": "ValidateParameterName()",
    "kind": "Method",
    "detail": "Function (ParameterName = Name ; } void)",
    "insertText": "ValidateParameterName(const bool bAllowDuplicateName)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParameterValue(FMaterialParameterMetadata& OutMeta)"
  },
  {
    "label": "GetAssetPathName()",
    "kind": "Method",
    "detail": "Function (OutMeta . Value = Texture ; OutMeta . Description = Desc ; OutMeta . ExpressionGuid = ExpressionGUID ; OutMeta . Group = Group ; OutMeta . SortPriority = SortPriority ; OutMeta . AssetPath =)",
    "insertText": "GetAssetPathName()"
  },
  {
    "label": "SetParameterValue()",
    "kind": "Method",
    "detail": "Function (OutMeta . ChannelNames = ChannelNames ; return true ; } bool)",
    "insertText": "SetParameterValue(const FName& Name, const FMaterialParameterMetadata& Meta, EMaterialExpressionSetParameterValueFlags Flags)"
  },
  {
    "label": "SetParameterValue()",
    "kind": "Method",
    "detail": "Function (Group = Meta . Group ; SortPriority = Meta . SortPriority ; } return true ; } } return false ; } # endif # if WITH_EDITOR bool)",
    "insertText": "SetParameterValue(FName InParameterName, UTexture* InValue, EMaterialExpressionSetParameterValueFlags Flags = EMaterialExpressionSetParameterValueFlags::None)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "ApplyChannelNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyChannelNames()"
  },
  {
    "label": "TextureIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TextureIsValid(UTexture* InTexture, FString& OutMessage)"
  },
  {
    "label": "SetDefaultTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTexture()"
  },
  {
    "label": "GetParameterExpressionId()",
    "kind": "Method",
    "detail": "Function (# endif FGuid&)",
    "insertText": "GetParameterExpressionId()"
  }
]