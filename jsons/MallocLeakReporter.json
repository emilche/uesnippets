[
  {
    "label": "FMallocLeakReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocLeakReporter"
  },
  {
    "label": "EReportOption",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EReportOption"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / Engine . h \" # include \" HAL / MallocLeakDetection . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Containers / Ticker . h \" class FMallocLeakReporter {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMallocLeakReportDelegate, const int32, const int32)"
  },
  {
    "label": "ReportLeaks()",
    "kind": "Method",
    "detail": "Function (public : struct EReportOption { enum {)",
    "insertText": "ReportLeaks(1 << 0), ReportAllocs = (1 << 1), ReportMemReport = (1 << 2)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; FMallocLeakReporter&)",
    "insertText": "Get()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(int32 FilterSize = 0, float ReportOnTime = 0.0f)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "WriteReport()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteReport(const TCHAR* ReportName, const FMallocLeakReportOptions& Options)"
  },
  {
    "label": "SetDefaultLeakReportOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultLeakReportOptions(const FMallocLeakReportOptions& Options)"
  },
  {
    "label": "SetDefaultAllocReportOptions()",
    "kind": "Method",
    "detail": "Function (DefaultLeakReportOptions = Options ; } void)",
    "insertText": "SetDefaultAllocReportOptions(const FMallocLeakReportOptions& Options)"
  },
  {
    "label": "FMallocLeakReporter()",
    "kind": "Method",
    "detail": "Function (DefaultAllocReportOptions = Options ; } protected :)",
    "insertText": "FMallocLeakReporter()"
  },
  {
    "label": "Checkpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Checkpoint()"
  }
]