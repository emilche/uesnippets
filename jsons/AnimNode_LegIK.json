[
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimLegIKData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimLegIKData"
  },
  {
    "label": "FIKChainLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIKChainLink"
  },
  {
    "label": "FIKChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIKChain"
  },
  {
    "label": "FAnimLegIKDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimLegIKDefinition"
  },
  {
    "label": "FAnimLegIKData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimLegIKData"
  },
  {
    "label": "FAnimNode_LegIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LegIK"
  },
  {
    "label": "InitializeFromLegData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromLegData(FAnimLegIKData& InLegData, FAnimInstanceProxy* InAnimInstanceProxy)"
  },
  {
    "label": "ReachTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReachTarget(\n\t\tconst FVector& InTargetLocation,\n\t\tdouble InReachPrecision,\n\t\tint32 InMaxIterations,\n\t\tfloat SoftPercentLength,\n\t\tfloat SoftAlpha)"
  },
  {
    "label": "ApplyTwistOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTwistOffset(const float InTwistOffsetDegrees)"
  },
  {
    "label": "OrientAllLinksToDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OrientAllLinksToDirection(const FVector& InDirection)"
  },
  {
    "label": "SolveTwoBoneIK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveTwoBoneIK(const FVector& InTargetLocation)"
  },
  {
    "label": "SolveFABRIK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveFABRIK(const FVector& InTargetLocation, double InReachPrecision, int32 InMaxIterations)"
  },
  {
    "label": "FABRIK_ForwardReach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_ForwardReach(const FVector& InTargetLocation, FIKChain& IKChain)"
  },
  {
    "label": "FABRIK_BackwardReach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_BackwardReach(const FVector& InRootTargetLocation, FIKChain& IKChain)"
  },
  {
    "label": "FABRIK_ApplyLinkConstraints_Forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_ApplyLinkConstraints_Forward(FIKChain& IKChain, int32 LinkIndex)"
  },
  {
    "label": "FABRIK_ApplyLinkConstraints_Backward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_ApplyLinkConstraints_Backward(FIKChain& IKChain, int32 LinkIndex)"
  },
  {
    "label": "DrawDebugIKChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugIKChain(const FIKChain& IKChain, const FColor& InColor)"
  },
  {
    "label": "InitializeTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTransforms(FAnimInstanceProxy* MyAnimInstanceProxy, FCSPose<FCompactPose>& MeshBases)"
  },
  {
    "label": "FAnimNode_LegIK()",
    "kind": "Method",
    "detail": "Function (ANIMGRAPHRUNTIME_API)",
    "insertText": "FAnimNode_LegIK()"
  },
  {
    "label": "OrientLegTowardsIK()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OrientLegTowardsIK(FAnimLegIKData& InLegData)"
  },
  {
    "label": "DoLegReachIK()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoLegReachIK(FAnimLegIKData& InLegData)"
  },
  {
    "label": "AdjustKneeTwist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdjustKneeTwist(FAnimLegIKData& InLegData)"
  }
]