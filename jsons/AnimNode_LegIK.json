[
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAnimLegIKData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimLegIKData"
  },
  {
    "label": "FIKChainLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIKChainLink"
  },
  {
    "label": "FIKChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIKChain"
  },
  {
    "label": "FAnimLegIKDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimLegIKDefinition"
  },
  {
    "label": "FAnimNode_LegIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LegIK"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneIndices . h \" # include \" BoneContainer . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" AnimNode_LegIK . generated . h \" class USkeletalMeshComponent ; struct FAnimLegIKData ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FIKChainLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIKChainLink(FVector InLocation, double InLength) : Location(InLocation) , Length(InLength) , LinkAxisZ(FVector::ZeroVector) , RealBendDir(FVector::ZeroVector) , BaseBendDir(FVector::ZeroVector) , BoneName(NAME_None)"
  },
  {
    "label": "FIKChain()",
    "kind": "Method",
    "detail": "Function (float MinRotationAngleRadians ; private : FAnimInstanceProxy* MyAnimInstanceProxy ; double TotalChainLength ; int32 NumLinks ; FVector HingeRotationAxis ; bool bEnableRotationLimit ; bool bInitialized ; public :)",
    "insertText": "FIKChain() : MyAnimInstanceProxy(nullptr) , TotalChainLength(0.0) , NumLinks(INDEX_NONE) , HingeRotationAxis(FVector::ZeroVector) , bEnableRotationLimit(false) , bInitialized(false)"
  },
  {
    "label": "InitializeFromLegData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeFromLegData(FAnimLegIKData& InLegData, FAnimInstanceProxy* InAnimInstanceProxy)"
  },
  {
    "label": "ReachTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReachTarget(const FVector& InTargetLocation, double InReachPrecision, int32 InMaxIterations, float SoftPercentLength, float SoftAlpha)"
  },
  {
    "label": "ApplyTwistOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTwistOffset(const float InTwistOffsetDegrees)"
  },
  {
    "label": "SolveTwoBoneIK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveTwoBoneIK(const FVector& InTargetLocation)"
  },
  {
    "label": "SolveFABRIK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveFABRIK(const FVector& InTargetLocation, double InReachPrecision, int32 InMaxIterations)"
  },
  {
    "label": "FABRIK_ForwardReach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_ForwardReach(const FVector& InTargetLocation, FIKChain& IKChain)"
  },
  {
    "label": "FABRIK_BackwardReach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_BackwardReach(const FVector& InRootTargetLocation, FIKChain& IKChain)"
  },
  {
    "label": "FABRIK_ApplyLinkConstraints_Forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_ApplyLinkConstraints_Forward(FIKChain& IKChain, int32 LinkIndex)"
  },
  {
    "label": "FABRIK_ApplyLinkConstraints_Backward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FABRIK_ApplyLinkConstraints_Backward(FIKChain& IKChain, int32 LinkIndex)"
  },
  {
    "label": "DrawDebugIKChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugIKChain(const FIKChain& IKChain, const FColor& InColor)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = \"Settings\")"
  },
  {
    "label": "FAnimLegIKDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimLegIKDefinition() : NumBonesInLimb(2) , MinRotationAngle(15.f) , FootBoneForwardAxis(EAxis::Y) , HingeRotationAxis(EAxis::None) , bEnableRotationLimit(false) , bEnableKneeTwistCorrection(true) , TwistOffsetCurveName(NAME_None)"
  },
  {
    "label": "InitializeTransforms()",
    "kind": "Method",
    "detail": "Function (FAnimLegIKDefinition* LegDefPtr ; FCompactPoseBoneIndex IKFootBoneIndex ; float TwistOffsetDegrees ; int32 NumBones ; TArray<FCompactPoseBoneIndex> FKLegBoneIndices ; TArray<FTransform> FKLegBoneTransforms ; FIKChain IKChain ; public : void)",
    "insertText": "InitializeTransforms(FAnimInstanceProxy* MyAnimInstanceProxy, FCSPose<FCompactPose>& MeshBases)"
  },
  {
    "label": "FAnimLegIKData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimLegIKData() : IKFootTransform(FTransform::Identity) , LegDefPtr(nullptr) , IKFootBoneIndex(INDEX_NONE) , TwistOffsetDegrees(0.0f) , NumBones(INDEX_NONE)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() ANIMGRAPHRUNTIME_API FAnimNode_LegIK()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimLegIKData> LegsData ; FAnimInstanceProxy* MyAnimInstanceProxy ; public : void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "OrientLegTowardsIK()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OrientLegTowardsIK(FAnimLegIKData& InLegData)"
  },
  {
    "label": "DoLegReachIK()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoLegReachIK(FAnimLegIKData& InLegData)"
  },
  {
    "label": "AdjustKneeTwist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdjustKneeTwist(FAnimLegIKData& InLegData)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  }
]