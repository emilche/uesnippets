[
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHITransientHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientHeap"
  },
  {
    "label": "FRHITransientPagePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientPagePool"
  },
  {
    "label": "FRHITransientPageSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientPageSpan"
  },
  {
    "label": "FRHITransientPagePoolAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientPagePoolAllocation"
  },
  {
    "label": "FRHITransientPageAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientPageAllocation"
  },
  {
    "label": "FRHITransientHeapAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientHeapAllocation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHITransientResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientResource"
  },
  {
    "label": "FResourceTaskResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceTaskResult"
  },
  {
    "label": "FRHITransientTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientTexture"
  },
  {
    "label": "FRHITransientBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientBuffer"
  },
  {
    "label": "FRHITransientAllocationStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientAllocationStats"
  },
  {
    "label": "FAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocation"
  },
  {
    "label": "FMemoryRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryRange"
  },
  {
    "label": "FRHITransientAllocationFences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITransientAllocationFences"
  },
  {
    "label": "IRHITransientResourceAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHITransientResourceAllocator"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHI . h \" # include \" RHIResources . h \" # include \" Tasks / Task . h \" class FRHICommandListBase ; class FRHICommandListImmediate ; class FRHITransientHeap ; class FRHITransientPagePool ; struct FRHITransientPageSpan { uint16 Offset = 0 ; uint16 Count = 0 ; } ; struct FRHITransientPagePoolAllocation { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FRHITransientResource()",
    "kind": "Method",
    "detail": "Function (struct FResourceTaskResult { TRefCountPtr<FRHIResource> Resource ; uint64 GpuVirtualAddress ; } ; using FResourceTask = UE::Tasks::TTask<FResourceTaskResult> ;)",
    "insertText": "FRHITransientResource(FRHIResource* InResource, uint64 InGpuVirtualAddress, uint64 InHash, uint64 InSize, ERHITransientAllocationType InAllocationType, ERHITransientResourceType InResourceType)"
  },
  {
    "label": "FRHITransientResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransientResource(const FResourceTask& InResourceTask, uint64 InHash, uint64 InSize, ERHITransientAllocationType InAllocationType, ERHITransientResourceType InResourceType)"
  },
  {
    "label": "FRHITransientResource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHITransientResource()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Acquire(const TCHAR* InName, uint32 InAcquirePassIndex, uint64 InAllocatorCycle)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Name = InName ; AcquirePasses = TInterval<)",
    "insertText": "uint32(0, InAcquirePassIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (DiscardPass = kInvalidPassIndex ; bAcquired = true ; AcquireCycle = InAllocatorCycle ; AcquireCount + + ; AliasingOverlaps .)",
    "insertText": "Reset()"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Discard()"
  },
  {
    "label": "AddAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (bAcquired = false ; } void)",
    "insertText": "AddAliasingOverlap(FRHITransientResource* InBeforeResource, uint32 InAcquirePassIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (AliasingOverlaps .)",
    "insertText": "Emplace(InBeforeResource->GetRHI(), InBeforeResource->IsTexture() ? FRHITransientAliasingOverlap::EType::Texture : FRHITransientAliasingOverlap::EType::Buffer)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} InBeforeResource -> DiscardPass =)",
    "insertText": "Min(InBeforeResource->DiscardPass, AcquirePasses.Max)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AcquirePasses . Min =)",
    "insertText": "Max(AcquirePasses.Min, InAcquirePassIndex)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finish(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FResourceTaskResult Result =)",
    "insertText": "MoveTemp(ResourceTask.GetResult())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Resource =)",
    "insertText": "MoveTemp(Result.Resource)"
  },
  {
    "label": "BindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (GpuVirtualAddress = Result . GpuVirtualAddress ; ResourceTask = { } ; })",
    "insertText": "BindDebugLabelName(RHICmdList)"
  },
  {
    "label": "GetHeapAllocation()",
    "kind": "Method",
    "detail": "Function (} FRHITransientHeapAllocation&)",
    "insertText": "GetHeapAllocation()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRHIResource> Resource ; FResourceTask ResourceTask ; uint64 GpuVirtualAddress = 0 ; uint64 Hash ; uint64 Size ; uint32 Alignment ; uint32 AcquireCount = 0 ; uint64 AcquireCycle = 0 ; const TCHAR* Name = nullptr ; FRHITransientHeapAllocation HeapAllocation ; FRHITransientPageAllocation PageAllocation ; TArray<FRHITransientAliasingOverlap> AliasingOverlaps ; TInterval<uint32> AcquirePasses = TInterval<)",
    "insertText": "uint32(0, 0)"
  },
  {
    "label": "FRHITransientTexture()",
    "kind": "Method",
    "detail": "Function (uint32 DiscardPass = 0 ; bool bAcquired = false ; ERHITransientAllocationType AllocationType ; ERHITransientResourceType ResourceType ; } ; class FRHITransientTexture final : public FRHITransientResource { public :)",
    "insertText": "FRHITransientTexture(const FResourceTask& InResourceTask, uint64 InHash, uint64 InSize, ERHITransientAllocationType InAllocationType, const FRHITextureCreateInfo& InCreateInfo)"
  },
  {
    "label": "FRHITransientTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransientTexture(FRHIResource* InTexture, uint64 InGpuVirtualAddress, uint64 InHash, uint64 InSize, ERHITransientAllocationType InAllocationType, const FRHITextureCreateInfo& InCreateInfo)"
  },
  {
    "label": "FRHITransientTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHITransientTexture()"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (FRHITexture*)",
    "insertText": "GetRHI()"
  },
  {
    "label": "GetCreateInfo()",
    "kind": "Method",
    "detail": "Function (} const FRHITextureCreateInfo&)",
    "insertText": "GetCreateInfo()"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetOrCreateSRV(FRHICommandListBase& RHICmdList, const FRHITextureSRVCreateInfo& InCreateInfo)"
  },
  {
    "label": "BindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} const FRHITextureCreateInfo CreateInfo ; FRHITextureViewCache ViewCache ; private : void)",
    "insertText": "BindDebugLabelName(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FRHITransientBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FRHITransientBuffer final : public FRHITransientResource { public :)",
    "insertText": "FRHITransientBuffer(const FResourceTask& InResourceTask, uint64 InHash, uint64 InSize, ERHITransientAllocationType InAllocationType, const FRHIBufferCreateInfo& InCreateInfo) : FRHITransientResource(InResourceTask, InHash, InSize, InAllocationType, ERHITransientResourceType::Buffer) , CreateInfo(InCreateInfo)"
  },
  {
    "label": "FRHITransientBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransientBuffer(FRHIResource* InBuffer, uint64 InGpuVirtualAddress, uint64 InHash, uint64 InSize, ERHITransientAllocationType InAllocationType, const FRHIBufferCreateInfo& InCreateInfo) : FRHITransientResource(InBuffer, InGpuVirtualAddress, InHash, InSize, InAllocationType, ERHITransientResourceType::Buffer) , CreateInfo(InCreateInfo)"
  },
  {
    "label": "FRHITransientBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHITransientBuffer()"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetOrCreateSRV(FRHICommandListBase& RHICmdList, const FRHIBufferSRVCreateInfo& InCreateInfo)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; class FRHITransientAllocationStats { public : struct FAllocation { uint64 OffsetMin = 0 ; uint64 OffsetMax = 0 ; uint32 MemoryRangeIndex = 0 ; } ; using FAllocationArray = TArray<FAllocation,TInlineAllocator<2>> ; enum class EMemoryRangeFlags { None = 0,FastVRAM = 1<<0 } ; struct FMemoryRange { uint64 Capacity = 0 ; uint64 CommitSize = 0 ; EMemoryRangeFlags Flags = EMemoryRangeFlags::None ; } ; TArray<FMemoryRange> MemoryRanges ; TMap<const FRHITransientResource*,FAllocationArray> Resources ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FRHITransientAllocationStats::EMemoryRangeFlags)"
  },
  {
    "label": "GetAcquireFence()",
    "kind": "Method",
    "detail": "Function (class FRHITransientAllocationFences { public : uint32)",
    "insertText": "GetAcquireFence(const FRHITransientAllocationFences& Discard, const FRHITransientAllocationFences& Acquire)"
  },
  {
    "label": "FRHITransientAllocationFences()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransientAllocationFences()"
  },
  {
    "label": "SetGraphics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphics(uint32 InGraphics)"
  },
  {
    "label": "SetAsyncCompute()",
    "kind": "Method",
    "detail": "Function (Graphics = InGraphics ; } void)",
    "insertText": "SetAsyncCompute(uint32 InAsyncCompute, TInterval<uint32> InGraphicsForkJoin)"
  },
  {
    "label": "GetSinglePipeline()",
    "kind": "Method",
    "detail": "Function (AsyncCompute = InAsyncCompute ; GraphicsForkJoin = InGraphicsForkJoin ; } uint32)",
    "insertText": "GetSinglePipeline()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "Contains(TInterval<uint32> Interval, uint32 Element)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} const uint32 Invalid = std::numeric_limits<uint32)",
    "insertText": "max()"
  },
  {
    "label": "IRHITransientResourceAllocator()",
    "kind": "Method",
    "detail": "Function (uint32 Graphics = Invalid ; uint32 AsyncCompute = Invalid ; TInterval<uint32> GraphicsForkJoin ; } ; enum class ERHITransientResourceCreateMode {,Task } ; class IRHITransientResourceAllocator { public : ~)",
    "insertText": "IRHITransientResourceAllocator()"
  },
  {
    "label": "SupportsResourceType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsResourceType(ERHITransientResourceType Type)"
  },
  {
    "label": "SetCreateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreateMode(ERHITransientResourceCreateMode CreateMode)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (} ; FRHITransientTexture*)",
    "insertText": "CreateTexture(const FRHITextureCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRHITransientBuffer*)",
    "insertText": "CreateBuffer(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* DebugName, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "DeallocateMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateMemory(FRHITransientTexture* Texture, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "DeallocateMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateMemory(FRHITransientBuffer* Buffer, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(FRHICommandListImmediate& RHICmdList, FRHITransientAllocationStats* OutStats = nullptr)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(FRHICommandListImmediate& RHICmdList)"
  }
]