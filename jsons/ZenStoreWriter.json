[
  {
    "label": "FAssetRegistryState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryState"
  },
  {
    "label": "FCompressedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressedBuffer"
  },
  {
    "label": "FIoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBuffer"
  },
  {
    "label": "FLargeMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLargeMemoryWriter"
  },
  {
    "label": "FSharedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedBuffer"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FFileRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileRegion"
  },
  {
    "label": "TFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunction"
  },
  {
    "label": "FZenStoreHttpClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenStoreHttpClient"
  },
  {
    "label": "FCbAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbAttachment"
  },
  {
    "label": "FCbPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbPackage"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FPackageStoreOptimizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStoreOptimizer"
  },
  {
    "label": "FPackageStorePackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStorePackage"
  },
  {
    "label": "FZenCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenCookArtifactReader"
  },
  {
    "label": "FZenFileSystemManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenFileSystemManifest"
  },
  {
    "label": "FZenStoreWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenStoreWriter"
  },
  {
    "label": "ZenHostInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ZenHostInfo"
  },
  {
    "label": "FBulkDataEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkDataEntry"
  },
  {
    "label": "FPackageDataEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDataEntry"
  },
  {
    "label": "FFileDataEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileDataEntry"
  },
  {
    "label": "FPendingPackageState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingPackageState"
  },
  {
    "label": "FZenCommitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZenCommitInfo"
  },
  {
    "label": "FCommitQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommitQueue"
  },
  {
    "label": "FZenStoreWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Async . h \" # include \" Async / Future . h \" # include \" Compression / CompressedBuffer . h \" # include \" Compression / OodleDataCompression . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" IO / IoDispatcher . h \" # include \" IO / PackageStore . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / ScopeRWLock . h \" # include \" PackageStoreWriter . h \" # include \" Serialization / AsyncLoading2 . h \" # include \" Serialization / CompactBinary . h \" # include \" Serialization / PackageWriter . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class FAssetRegistryState ; class FCompressedBuffer ; class FIoBuffer ; class FLargeMemoryWriter ; class FSharedBuffer ; class ITargetPlatform ; struct FFileRegion ; template<FuncType> class TFunction ; namespace UE { class FZenStoreHttpClient ; } class FCbAttachment ; class FCbPackage ; class FCbWriter ; class FPackageStoreOptimizer ; class FPackageStorePackage ; class FZenCookArtifactReader ; class FZenFileSystemManifest ; class FZenStoreWriter : public IPackageStoreWriter { public :)",
    "insertText": "FZenStoreWriter(const FString& OutputPath, const FString& MetadataDirectoryPath, const ITargetPlatform* TargetPlatform, TSharedRef<FZenCookArtifactReader> CookArtifactReader)"
  },
  {
    "label": "FZenStoreWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FZenStoreWriter()"
  },
  {
    "label": "AsZenStoreWriter()",
    "kind": "Method",
    "detail": "Function (FZenStoreWriter*)",
    "insertText": "AsZenStoreWriter()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BeginCacheCallback =)",
    "insertText": "MoveTemp(InBeginCacheCallback)"
  },
  {
    "label": "SetRegisterDeterminismHelperCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRegisterDeterminismHelperCallback(FRegisterDeterminismHelperCallback&& InRegisterDeterminismHelperCallback)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RegisterDeterminismHelperCallback =)",
    "insertText": "MoveTemp(InRegisterDeterminismHelperCallback)"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (} struct ZenHostInfo { FString ProjectId ; FString OplogId ; FString HostName ; uint16 HostPort ; } ; FCapabilities)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "bDeterminismDebug()",
    "kind": "Method",
    "detail": "Function (FCapabilities Result ; Result .)",
    "insertText": "bDeterminismDebug(bool)"
  },
  {
    "label": "GetHostInfo()",
    "kind": "Method",
    "detail": "Function (FCookCapabilities Result ; Result . bDiffModeSupported = true ; Result . bOplogAttachments = true ; Result . HeaderFormat = EPackageHeaderFormat::ZenPackageSummary ; return Result ; } ZenHostInfo)",
    "insertText": "GetHostInfo()"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPackage(const FBeginPackageInfo& Info)"
  },
  {
    "label": "CommitPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackage(FCommitPackageInfo&& Info)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(const FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAdditionalFile(const FAdditionalFileInfo& Info, const FIoBuffer& FileData)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLinkerAdditionalData(const FLinkerAdditionalDataInfo& Info, const FIoBuffer& Data, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WritePackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageTrailer(const FPackageTrailerInfo& Info, const FIoBuffer& Data)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBulkData(const FBulkDataInfo& Info, const FIoBuffer& BulkData, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "RegisterDeterminismHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDeterminismHelper(UObject* SourceObject, const TRefCountPtr<UE::Cook::IDeterminismHelper>& DeterminismHelper)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FCookInfo& Info)"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCook(const FCookInfo& Info)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCook(const FCookInfo& Info)"
  },
  {
    "label": "GetEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEntries(TFunction<void(TArrayView<const FPackageStoreEntryResource>, TArrayView<const FOplogCookInfo>)>&& Callback)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FZenStoreWriter, IPackageStoreWriter::FEntryCreatedEvent, FEntryCreatedEvent)"
  },
  {
    "label": "OnEntryCreated()",
    "kind": "Method",
    "detail": "Function (FEntryCreatedEvent&)",
    "insertText": "OnEntryCreated()"
  },
  {
    "label": "OnCommit()",
    "kind": "Method",
    "detail": "Function (FCommitEvent&)",
    "insertText": "OnCommit()"
  },
  {
    "label": "OnMarkUpToDate()",
    "kind": "Method",
    "detail": "Function (FMarkUpToDateEvent&)",
    "insertText": "OnMarkUpToDate()"
  },
  {
    "label": "LoadPreviousAssetRegistry()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FAssetRegistryState>)",
    "insertText": "LoadPreviousAssetRegistry()"
  },
  {
    "label": "GetOplogAttachment()",
    "kind": "Method",
    "detail": "Function (FCbObject)",
    "insertText": "GetOplogAttachment(FName PackageName, FUtf8StringView AttachmentKey)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackages(TArrayView<const FName> PackageNamesToRemove)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackages()"
  },
  {
    "label": "UpdatePackageModificationStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePackageModificationStatus(FName PackageName, bool bIterativelyUnmodified, bool& bInOutShouldIterativelySkip)"
  },
  {
    "label": "GetPreviousCookedBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreviousCookedBytes(const FPackageInfo& Info, FPreviousCookedBytesData& OutData)"
  },
  {
    "label": "CompleteExportsArchiveForDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteExportsArchiveForDiff(FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (EPackageWriterResult)",
    "insertText": "BeginCacheForCookedPlatformData(FBeginCacheForCookedPlatformDataInfo& Info)"
  },
  {
    "label": "WriteMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (TFuture<FCbObject>)",
    "insertText": "WriteMPCookMessageForPackage(FName PackageName)"
  },
  {
    "label": "TryReadMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReadMPCookMessageForPackage(FName PackageName, FCbObjectView Message)"
  },
  {
    "label": "GetPackageHashes()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TRefCountPtr<FPackageHashes>>&)",
    "insertText": "GetPackageHashes()"
  },
  {
    "label": "FPendingPackageState()",
    "kind": "Method",
    "detail": "Function (TFuture<FCompressedBuffer> CompressedPayload ; FPackageInfo Info ; FCbObjectId ChunkId ; TUniquePtr<FPackageStorePackage> OptimizedPackage ; TArray<FFileRegion> FileRegions ; bool IsValid = false ; } ; struct FFileDataEntry { TFuture<FCompressedBuffer> CompressedPayload ; FAdditionalFileInfo Info ; FString ZenManifestServerPath ; FString ZenManifestClientPath ; } ; struct FPendingPackageState { ~)",
    "insertText": "FPendingPackageState()"
  },
  {
    "label": "GetPendingPackage()",
    "kind": "Method",
    "detail": "Function (FName PackageName ; TArray<FPackageDataEntry> PackageData ; TArray<FBulkDataEntry> BulkData ; TArray<FFileDataEntry> FileData ; TRefCountPtr<FPackageHashes> PackageHashes ; TUniquePtr<TPromise<int>> PackageHashesCompletionPromise ; uint64 OriginalHeaderSize = 0 ; TUniquePtr<FPackageStorePackage> PreOptimizedPackage ; } ; FPendingPackageState&)",
    "insertText": "GetPendingPackage(const FName& PackageName)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "_(&PackagesCriticalSection)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FPendingPackageState>& Package = PendingPackages .)",
    "insertText": "FindChecked(PackageName)"
  },
  {
    "label": "RemovePendingPackage()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FPendingPackageState>)",
    "insertText": "RemovePendingPackage(const FName& PackageName)"
  },
  {
    "label": "CreateProjectMetaData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateProjectMetaData(FCbPackage& Pkg, FCbWriter& PackageObj)"
  },
  {
    "label": "BroadcastCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCommit(IPackageStoreWriter::FCommitEventArgs& EventArgs)"
  },
  {
    "label": "BroadcastMarkUpToDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMarkUpToDate(IPackageStoreWriter::FMarkUpToDateEventArgs& EventArgs)"
  },
  {
    "label": "CommitPackageInternal()",
    "kind": "Method",
    "detail": "Function (struct FZenCommitInfo ; void)",
    "insertText": "CommitPackageInternal(FZenCommitInfo&& CommitInfo)"
  },
  {
    "label": "CreateAttachment()",
    "kind": "Method",
    "detail": "Function (FCbAttachment)",
    "insertText": "CreateAttachment(FSharedBuffer Buffer)"
  },
  {
    "label": "CreateAttachment()",
    "kind": "Method",
    "detail": "Function (FCbAttachment)",
    "insertText": "CreateAttachment(FIoBuffer Buffer)"
  },
  {
    "label": "StaticInit()",
    "kind": "Method",
    "detail": "Function (FCriticalSection PackagesCriticalSection ; TMap<FName,TUniquePtr<FPendingPackageState>> PendingPackages ; TUniquePtr<UE::FZenStoreHttpClient> HttpClient ; bool IsLocalConnection = true ; TSharedRef<FZenCookArtifactReader> CookArtifactReader ; const ITargetPlatform& TargetPlatform ; const FName TargetPlatformFName ; FString ProjectId ; FString OplogId ; FString OutputPath ; FString MetadataDirectoryPath ; TMap<FName,TRefCountPtr<FPackageHashes>> AllPackageHashes ; TUniquePtr<FPackageStoreOptimizer> PackageStoreOptimizer ; FRWLock EntriesLock ; TArray<FPackageStoreEntryResource> PackageStoreEntries ; TArray<FOplogCookInfo> CookedPackagesInfo ; TMap<FName,int32> PackageNameToIndex ; TUniquePtr<FZenFileSystemManifest> ZenFileSystemManifest ; TMap<FName,TArray<FString>> PackageAdditionalFiles ; FBeginCacheCallback BeginCacheCallback ; FRegisterDeterminismHelperCallback RegisterDeterminismHelperCallback ; FEntryCreatedEvent EntryCreatedEvent ; FCriticalSection CommitEventCriticalSection ; FCommitEvent CommitEvent ; FMarkUpToDateEvent MarkUpToDateEvent ; ICookedPackageWriter::FCookInfo::ECookMode CookMode ; FOodleDataCompression::ECompressor Compressor ; FOodleDataCompression::ECompressionLevel CompressionLevel ; class FCommitQueue ; TUniquePtr<FCommitQueue> CommitQueue ; TFuture<void> CommitThread ; bool bInitialized ; bool bProvidePerPackageResults ; void)",
    "insertText": "StaticInit()"
  },
  {
    "label": "IsReservedOplogKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReservedOplogKey(FUtf8StringView Key)"
  }
]