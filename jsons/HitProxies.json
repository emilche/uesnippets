[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EHitProxyPriority",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHitProxyPriority"
  },
  {
    "label": "HHitProxyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxyType"
  },
  {
    "label": "FHitProxyId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyId"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "HObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HObject"
  },
  {
    "label": "FHitProxyConsumer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyConsumer"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" Templates / RefCounting . h \" # include \" HitProxies . generated . h \" class FReferenceCollector ; struct FTypedElementHandle ; namespace EMouseCursor { enum Type : int ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "HHitProxyType()",
    "kind": "Method",
    "detail": "Function (HPP_World = 0,HPP_Wireframe = 1,HPP_Foreground = 2,HPP_UI = 3 } ; class HHitProxyType { public :)",
    "insertText": "HHitProxyType(HHitProxyType* InParent,const TCHAR* InName): Parent(InParent), Name(InName)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} HHitProxyType*)",
    "insertText": "GetParent()"
  },
  {
    "label": "DECLARE_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_HIT_PROXY(... ) \\ DECLARE_HIT_PROXY_STATIC( __VA_ARGS__ ) \\ virtual HHitProxyType* GetType()"
  },
  {
    "label": "StaticGetType()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "StaticGetType()"
  },
  {
    "label": "IMPLEMENT_HIT_PROXY_BASE()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # define)",
    "insertText": "IMPLEMENT_HIT_PROXY_BASE(TypeName,ParentType) \\ HHitProxyType* TypeName::StaticGetType()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (\\ HHitProxyType)",
    "insertText": "StaticType(ParentType,TEXT(#TypeName))"
  },
  {
    "label": "IMPLEMENT_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (\\ return& StaticType ; \\ } # define)",
    "insertText": "IMPLEMENT_HIT_PROXY(TypeName,ParentTypeName) \\ IMPLEMENT_HIT_PROXY_BASE(TypeName,ParentTypeName::StaticGetType())"
  },
  {
    "label": "FHitProxyId()",
    "kind": "Method",
    "detail": "Function (class HHitProxy ; public : const FHitProxyId InvisibleHitProxyId ;)",
    "insertText": "FHitProxyId(): Index(INDEX_NONE)"
  },
  {
    "label": "FHitProxyId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHitProxyId(FColor Color)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "GetHitProxyById()",
    "kind": "Method",
    "detail": "Function (class HHitProxy*)",
    "insertText": "GetHitProxyById(FHitProxyId Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FHitProxyId X, FHitProxyId Y)"
  },
  {
    "label": "DECLARE_HIT_PROXY_STATIC()",
    "kind": "Method",
    "detail": "Function (} int32 Index ; } ; class HHitProxy : public FRefCountedObject {)",
    "insertText": "DECLARE_HIT_PROXY_STATIC(ENGINE_API ) virtual HHitProxyType* GetType()"
  },
  {
    "label": "HHitProxy()",
    "kind": "Method",
    "detail": "Function (} public : const EHitProxyPriority Priority ; const EHitProxyPriority OrthoPriority ; FHitProxyId Id ;)",
    "insertText": "HHitProxy(EHitProxyPriority InPriority = HPP_World)"
  },
  {
    "label": "HHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HHitProxy(EHitProxyPriority InPriority, EHitProxyPriority InOrthoPriority)"
  },
  {
    "label": "HHitProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HHitProxy()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(HHitProxyType* TestType)"
  },
  {
    "label": "GetMouseCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetMouseCursor()"
  },
  {
    "label": "AlwaysAllowsTranslucentPrimitives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AlwaysAllowsTranslucentPrimitives()"
  },
  {
    "label": "InitHitProxy()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitHitProxy()"
  },
  {
    "label": "HitProxyCast()",
    "kind": "Method",
    "detail": "Function (} ; template<DesiredType> DesiredType*)",
    "insertText": "HitProxyCast(HHitProxy* Src)"
  },
  {
    "label": "DECLARE_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (} struct HObject : HHitProxy {)",
    "insertText": "DECLARE_HIT_PROXY(ENGINE_API)"
  },
  {
    "label": "HObject()",
    "kind": "Method",
    "detail": "Function (UObject* Object ;)",
    "insertText": "HObject(UObject* InObject): HHitProxy(HPP_UI), Object(InObject)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddHitProxy()",
    "kind": "Method",
    "detail": "Function (Ar<<Object ; } } ; class FHitProxyConsumer { public : void)",
    "insertText": "AddHitProxy(HHitProxy* HitProxy)"
  }
]