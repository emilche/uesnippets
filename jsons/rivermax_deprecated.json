[
  {
    "label": "rmax_clock_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_clock_t"
  },
  {
    "label": "user_clock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "user_clock"
  },
  {
    "label": "ptp_clock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ptp_clock"
  },
  {
    "label": "in_addr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in_addr"
  },
  {
    "label": "rmax_cpu_set_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_cpu_set_t"
  },
  {
    "label": "rmax_init_config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_init_config"
  },
  {
    "label": "rmax_dev_config_flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_dev_config_flags"
  },
  {
    "label": "rmax_device_caps_mask",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_device_caps_mask"
  },
  {
    "label": "rmax_device_caps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_device_caps"
  },
  {
    "label": "rmax_device_config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_device_config"
  },
  {
    "label": "rmax_out_gen_stream_init_attr",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_out_gen_stream_init_attr"
  },
  {
    "label": "rmax_mem_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_mem_block"
  },
  {
    "label": "rmax_out_buffer_attr_flags_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_out_buffer_attr_flags_t"
  },
  {
    "label": "rmax_out_ip_header_ecn_value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_out_ip_header_ecn_value"
  },
  {
    "label": "rmax_buffer_attr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_buffer_attr"
  },
  {
    "label": "rmax_qos_attr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_qos_attr"
  },
  {
    "label": "rmax_out_comp_prop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_out_comp_prop"
  },
  {
    "label": "rmax_out_rate_attr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_out_rate_attr"
  },
  {
    "label": "rmax_out_stream_params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_out_stream_params"
  },
  {
    "label": "rmax_out_gen_stream_params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_out_gen_stream_params"
  },
  {
    "label": "sockaddr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr"
  },
  {
    "label": "rmax_iov",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_iov"
  },
  {
    "label": "rmax_packet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_packet"
  },
  {
    "label": "rmax_chunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_chunk"
  },
  {
    "label": "rmax_in_stream_type_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_in_stream_type_t"
  },
  {
    "label": "rmax_in_timestamp_format_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_in_timestamp_format_t"
  },
  {
    "label": "rmax_in_flags_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_in_flags_t"
  },
  {
    "label": "rmax_in_comp_flags_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_in_comp_flags_t"
  },
  {
    "label": "rmax_in_memblock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_in_memblock"
  },
  {
    "label": "rmax_in_buffer_attr_flags_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_in_buffer_attr_flags_t"
  },
  {
    "label": "rmax_in_buffer_attr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_in_buffer_attr"
  },
  {
    "label": "rmax_in_flow_attr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_in_flow_attr"
  },
  {
    "label": "sockaddr_in",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr_in"
  },
  {
    "label": "rmax_in_packet_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_in_packet_info"
  },
  {
    "label": "rmax_in_completion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_in_completion"
  },
  {
    "label": "rmax_memory_key_flags_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_memory_key_flags_t"
  },
  {
    "label": "rmax_time_type_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rmax_time_type_t"
  },
  {
    "label": "rmax_ip_addr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_ip_addr"
  },
  {
    "label": "rmax_device",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rmax_device"
  },
  {
    "label": "RMAX_NCPUBITS()",
    "kind": "Method",
    "detail": "Function (# ifndef SRC_RIVERMAX_DEPRECATED_H_ # define SRC_RIVERMAX_DEPRECATED_H_ # ifndef SRC_RIVERMAX_API_H_ # include \" rivermax_defs . h \" # endif # define RMAX_MAJOR_VERSION RMX_VERSION_MAJOR # define RMAX_MINOR_VERSION RMX_VERSION_MINOR # define RMAX_PATCH_VERSION RMX_VERSION_PATCH typedef uint64_t rmax_cpu_mask_t ; # define RMAX_CPU_SETSIZE 1 0 2 4 # define)",
    "insertText": "RMAX_NCPUBITS(8 * sizeof(rmax_cpu_mask_t))"
  },
  {
    "label": "RIVERMAX_HANDLE_SIGNAL()",
    "kind": "Method",
    "detail": "Function (RIVERMAX_INIT_CONFIG_NONE = 0,)",
    "insertText": "RIVERMAX_HANDLE_SIGNAL(1ul << 0), RIVERMAX_CPU_MASK = (1ul << 1)"
  },
  {
    "label": "RIVERMAX_SYSTEM_CLOCK()",
    "kind": "Method",
    "detail": "Function (typedef enum {)",
    "insertText": "RIVERMAX_SYSTEM_CLOCK(1ul << 0), RIVERMAX_USER_CLOCK_HANDLER = (1ul << 1), RIVERMAX_PTP_CLOCK = (1ul << 2)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (struct rmax_clock_t { rmax_clock_types clock_type ; union types { struct user_clock {)",
    "insertText": "uint64_t(*clock_handler)(void *ctx)"
  },
  {
    "label": "RMAX_DEV_CONFIG_RTP_SMPTE_2110_20_DYNAMIC_HDS_CONFIG()",
    "kind": "Method",
    "detail": "Function (void* ctx ; } rmax_user_clock_handler ; struct ptp_clock { struct in_addr device_ip_addr ; uint8_t domain ; } rmax_ptp_clock ; } clock_u ; } ; struct rmax_cpu_set_t { rmax_cpu_mask_t rmax_bits [ RMAX_CPU_SETSIZE / RMAX_NCPUBITS ] ; } ; struct rmax_init_config { uint64_t flags ; struct rmax_cpu_set_t cpu_mask ; } ; typedef int rmax_stream_id ; typedef int rmax_out_comp_id ; typedef uint32_t rmax_mkey_id ; typedef enum { RMAX_OK = RMX_OK,RMAX_ERR_UNKNOWN_ISSUE = RMX_UNKNOWN_ISSUE,RMAX_ERR_NO_HW_RESOURCES = RMX_NO_HW_RESOURCES,RMAX_ERR_NO_FREE_CHUNK = RMX_NO_FREE_CHUNK,RMAX_ERR_NO_CHUNK_TO_SEND = RMX_NO_CHUNK_TO_SEND,RMAX_ERR_HW_SEND_QUEUE_FULL = RMX_HW_SEND_QUEUE_IS_FULL,RMAX_ERR_NO_MEMORY = RMX_NO_MEMORY,RMAX_ERR_NOT_INITIALAZED = RMX_NOT_INITIALIZED,RMAX_ERR_NO_DEVICE = RMX_NO_DEVICE,RMAX_ERR_BUSY = RMX_BUSY,RMAX_ERR_CANCELLED = RMX_CANCELLED,RMAX_ERR_HW_COMPLETION_ISSUE = RMX_HW_COMPLETION_ISSUE,RMAX_ERR_LICENSE_ISSUE = RMX_LICENSE_ISSUE,RMAX_ERR_NO_ATTACH = RMX_NO_ATTACH,RMAX_ERR_STEERING_ISSUE = RMX_STEERING_ISSUE,RMAX_ERR_CHECKSUM_ISSUE = RMX_CHECKSUM_ISSUE,RMAX_ERR_DESTINATION_UNREACHABLE = RMX_DESTINATION_UNREACHABLE,RMAX_ERR_MEMORY_REGISTRATION = RMX_MEMORY_REGISTRATION,RMAX_ERR_NO_DEPENDENCY = RMX_NO_DEPENDENCY,RMAX_ERR_EXCEEDS_LIMIT = RMX_EXCEEDS_LIMIT,RMAX_ERR_UNSUPPORTED = RMX_UNSUPPORTED,RMAX_ERR_CLOCK_TYPE_NOT_SUPPORTED = RMX_CLOCK_TYPE_NOT_SUPPORTED,RMAX_ERR_UNSUPPORTED_PTP_RT_CLOCK_DEVICE = RMX_UNSUPPORTED_PTP_RT_CLOCK_DEVICE,RMAX_ERR_NOT_IMPLEMENTED = RMX_NOT_IMPLEMENTED,RMAX_ERR_METHOD_NOT_SUPPORTED_BY_STREAM = RMX_METHOD_NOT_SUPPORTED,RMAX_INVALID_PARAMETER_MIX = RMX_INVALID_PARAM_MIX,RMAX_ERR_INVALID_PARAM_1 = RMX_INVALID_PARAM_1,RMAX_ERR_INVALID_PARAM_2 = RMX_INVALID_PARAM_2,RMAX_ERR_INVALID_PARAM_3 = RMX_INVALID_PARAM_3,RMAX_ERR_INVALID_PARAM_4 = RMX_INVALID_PARAM_4,RMAX_ERR_INVALID_PARAM_5 = RMX_INVALID_PARAM_5,RMAX_ERR_INVALID_PARAM_6 = RMX_INVALID_PARAM_6,RMAX_ERR_INVALID_PARAM_7 = RMX_INVALID_PARAM_7,RMAX_ERR_INVALID_PARAM_8 = RMX_INVALID_PARAM_8,RMAX_ERR_INVALID_PARAM_9 = RMX_INVALID_PARAM_9,RMAX_ERR_INVALID_PARAM_10 = RMX_INVALID_PARAM_10,RMAX_SIGNAL = RMX_SIGNAL,RMAX_ERR_LAST = 6 0 0 } rmax_status_t ; typedef enum rmax_dev_config_flags { RMAX_DEV_CONFIG_NONE = 0 ULL,)",
    "insertText": "RMAX_DEV_CONFIG_RTP_SMPTE_2110_20_DYNAMIC_HDS_CONFIG(1ULL << RMX_DEVICE_CONFIG_RTP_SMPTE_2110_20_DYNAMIC_HDS), RMAX_DEV_CONFIG_RTP_CSRC_FIELDS_DYNAMIC_HDS_CONFIG = (1ULL << RMX_DEVICE_CONFIG_RTP_CSRC_FIELDS_DYNAMIC_HDS)"
  },
  {
    "label": "RMAX_DEV_CAP_PTP_CLOCK()",
    "kind": "Method",
    "detail": "Function (typedef enum rmax_device_caps_mask { RMAX_DEV_CAP_NONE = 0 x00ULL,)",
    "insertText": "RMAX_DEV_CAP_PTP_CLOCK(1ULL << RMX_DEVICE_CAP_PTP_CLOCK), RMAX_DEV_CAP_STREAM_RTP_SEQN_PLACEMENT_ORDER = (1ULL << RMX_DEVICE_CAP_RTP_SEQN_PLACEMENT_ORDER), RMAX_DEV_CAP_STREAM_RTP_EXT_SEQN_PLACEMENT_ORDER = (1ULL << RMX_DEVICE_CAP_RTP_EXTEND_SEQN_PLACEMENT_ORDER), RMAX_DEV_CAP_RTP_DYNAMIC_HDS = (1ULL << RMX_DEVICE_CAP_RTP_DYNAMIC_HDS)"
  },
  {
    "label": "RMAX_OUT_STREAM_REM_ADDR()",
    "kind": "Method",
    "detail": "Function (typedef struct rmax_device_caps { uint64_t supported_caps ; } rmax_device_caps_t ; typedef struct rmax_device_config { uint64_t config_flags ; struct in_addr ip_address ; } rmax_device_config_t ; typedef enum { RMAX_DELTA_TIME = 1<<0,RMAX_PAUSE_AFTER_COMMIT = 1<<1,RMAX_OUT_COMMIT_SIGNAL = 1<<2,} rmax_commit_flags_t ; typedef enum rmax_out_gen_stream_init_attr {)",
    "insertText": "RMAX_OUT_STREAM_REM_ADDR(1ul << 0), RMAX_OUT_STREAM_RATE = (1ul << 1), RMAX_OUT_STREAM_QOS = (1ul << 2), RMAX_OUT_STREAM_MAX_IOV = (1ul << 3), RMAX_OUT_STREAM_SIZE = (1ul << 4), RMAX_OUT_STREAM_ECN = (1ul << 5)"
  },
  {
    "label": "RMAX_IN_CREATE_STREAM_INFO_PER_PACKET()",
    "kind": "Method",
    "detail": "Function (struct rmax_mem_block { void* data_ptr ; void* app_hdr_ptr ; uint16_t* data_size_arr ; uint16_t* app_hdr_size_arr ; size_t chunks_num ; rmax_mkey_id data_mkey [ RMAX_MAX_DUP_STREAMS ] ; rmax_mkey_id app_hdr_mkey [ RMAX_MAX_DUP_STREAMS ] ; } ; typedef enum rmax_out_buffer_attr_flags_t { RMAX_OUT_BUFFER_ATTR_FLAG_NONE = 0 x00,RMAX_OUT_BUFFER_ATTR_DATA_MKEY_IS_SET = 0 x01,RMAX_OUT_BUFFER_ATTR_APP_HDR_MKEY_IS_SET = 0 x02,} rmax_out_buffer_attr_flags ; typedef enum rmax_out_ip_header_ecn_value { RMAX_OUT_IP_HDR_ECN_NON_CAPABLE = 0,RMAX_OUT_IP_HDR_ECN_CAPABLE_ECT0 = 1,RMAX_OUT_IP_HDR_ECN_CAPABLE_ECT1 = 2,RMAX_OUT_IP_HDR_ECN_CONGESTION = 3,} rmax_out_ip_header_ecn_value_t ; struct rmax_buffer_attr { size_t chunk_size_in_strides ; struct rmax_mem_block* mem_block_array ; size_t mem_block_array_len ; uint16_t data_stride_size ; uint16_t app_hdr_stride_size ; rmax_out_buffer_attr_flags attr_flags ; } ; struct rmax_qos_attr { uint8_t dscp ; uint8_t pcp ; } ; struct rmax_out_comp_prop { rmax_out_comp_id comp_q_id ; void* out_stream_ctx ; } ; struct rmax_out_rate_attr { uint64_t rate_bps ; uint32_t max_burst_in_pkt_num ; uint16_t typical_packet_sz ; uint16_t min_packet_sz ; uint16_t max_packet_sz ; } ; struct rmax_out_stream_params { const char* sdp_chr ; struct rmax_buffer_attr* buffer_attr ; struct rmax_qos_attr* qos ; uint8_t ecn ; uint32_t num_packets_per_frame ; uint32_t media_block_index ; uint16_t* source_port_arr ; size_t source_port_arr_sz ; uint64_t flags ; } ; struct rmax_out_gen_stream_params { struct sockaddr* local_addr ; size_t max_chunk_size ; uint64_t opt_field_mask ; struct sockaddr* remote_addr ; struct rmax_out_rate_attr rate ; struct rmax_qos_attr qos ; uint8_t ecn ; size_t max_iovec_num ; size_t size_in_chunks ; struct rmax_out_rate_attr comp_q_prop ; uint64_t flags ; } ; struct rmax_iov { uint64_t addr ; uint32_t length ; rmax_mkey_id mid ; } ; struct rmax_packet { struct rmax_iov* iovec ; size_t count ; } ; struct rmax_chunk { struct rmax_packet* packets ; size_t size ; void* chunk_ctx ; } ; typedef enum rmax_in_stream_type_t { RMAX_RAW_PACKET = RMX_INPUT_RAW_PACKET,RMAX_APP_PROTOCOL_PACKET = RMX_INPUT_APP_PROTOCOL_PACKET,RMAX_APP_PROTOCOL_PAYLOAD = RMX_INPUT_APP_PROTOCOL_PAYLOAD,} rmax_in_stream_type ; typedef enum rmax_in_timestamp_format_t { RMAX_PACKET_TIMESTAMP_RAW_COUNTER = RMX_INPUT_TIMESTAMP_RAW_COUNTER,RMAX_PACKET_TIMESTAMP_RAW_NANO = RMX_INPUT_TIMESTAMP_RAW_NANO,RMAX_PACKET_TIMESTAMP_SYNCED = RMX_INPUT_TIMESTAMP_SYNCED,} rmax_in_timestamp_format ; typedef enum rmax_in_flags_t { RMAX_IN_FLAG_NONE = 0 x00UL,)",
    "insertText": "RMAX_IN_CREATE_STREAM_INFO_PER_PACKET(1UL << (RMX_INPUT_STREAM_CREATE_INFO_PER_PACKET - 1))"
  },
  {
    "label": "RMAX_IN_COMP_FLAG_MORE()",
    "kind": "Method",
    "detail": "Function (typedef enum rmax_in_comp_flags_t { RMAX_IN_COMP_FLAG_NONE,)",
    "insertText": "RMAX_IN_COMP_FLAG_MORE(1UL << RMX_INPUT_COMPLETION_FLAG_MORE)"
  },
  {
    "label": "RMAX_IN_BUFFER_ATTER_STREAM_RTP_SEQN_PLACEMENT_ORDER()",
    "kind": "Method",
    "detail": "Function (struct rmax_in_memblock { void* ptr ; uint16_t min_size ; uint16_t max_size ; uint16_t stride_size ; rmax_mkey_id mkey ; } ; typedef enum rmax_in_buffer_attr_flags_t { RMAX_IN_BUFFER_ATTER_FLAG_NONE = 0 x00ULL,)",
    "insertText": "RMAX_IN_BUFFER_ATTER_STREAM_RTP_SEQN_PLACEMENT_ORDER(1UL << RMX_INPUT_STREAM_RTP_SEQN_PLACEMENT_ORDER), RMAX_IN_BUFFER_ATTER_STREAM_RTP_EXT_SEQN_PLACEMENT_ORDER= (1UL << RMX_INPUT_STREAM_RTP_EXT_SEQN_PLACEMENT_ORDER), RMAX_IN_BUFFER_ATTR_BUFFER_DATA_MKEY_IS_SET = 0x04ULL, RMAX_IN_BUFFER_ATTR_BUFFER_APP_HDR_MKEY_IS_SET = 0x08ULL, RMAX_IN_BUFFER_ATTR_BUFFER_RTP_SMPTE_2110_20_DYNAMIC_HDS= (1UL << RMX_INPUT_STREAM_RTP_SMPTE_2110_20_DYNAMIC_HDS), RMAX_IN_BUFFER_ATTR_BUFFER_RTP_CSRC_FIELDS_DYNAMIC_HDS = (1UL << RMX_INPUT_STREAM_RTP_CSRC_FIELDS_DYNAMIC_HDS)"
  },
  {
    "label": "RMAX_MKEY_FLAG_ZERO_BASED()",
    "kind": "Method",
    "detail": "Function (struct rmax_in_buffer_attr { uint32_t num_of_elements ; struct rmax_in_memblock* data ; struct rmax_in_memblock* hdr ; uint64_t attr_flags ; } ; struct rmax_in_flow_attr { struct sockaddr_in local_addr ; struct sockaddr_in remote_addr ; uint32_t flow_id ; } ; struct rmax_in_packet_info { uint16_t data_size ; uint16_t hdr_size ; uint32_t flow_id ; uint64_t timestamp ; } ; struct rmax_in_completion { uint32_t chunk_size ; uint32_t seqn_first ; uint32_t flags ; uint8_t reserved [ 4 ] ; uint64_t timestamp_first ; uint64_t timestamp_last ; void* data_ptr ; void* hdr_ptr ; struct rmax_in_packet_info* packet_info_arr ; } ; typedef enum rmax_memory_key_flags_t { RMAX_MKEY_FLAG_NONE = 0 x00,)",
    "insertText": "RMAX_MKEY_FLAG_ZERO_BASED(1UL << RMX_MEM_REGISTRY_ZERO_BASED)"
  },
  {
    "label": "rmax_get_version()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus \" C \" { # endif __export rmax_status_t)",
    "insertText": "rmax_get_version(unsigned int *major_version, unsigned int *minor_version, unsigned int *patch_version)"
  },
  {
    "label": "rmax_get_version_string()",
    "kind": "Method",
    "detail": "Function (__export const char*)",
    "insertText": "rmax_get_version_string(void)"
  },
  {
    "label": "rmax_init()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_init(const struct rmax_init_config *init_config)"
  },
  {
    "label": "rmax_cleanup()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_cleanup(void)"
  },
  {
    "label": "rmax_device_get_caps()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_device_get_caps(const struct in_addr ip, uint64_t caps_mask, rmax_device_caps_t *caps)"
  },
  {
    "label": "rmax_set_device_config()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_set_device_config(const rmax_device_config_t *device_config)"
  },
  {
    "label": "rmax_unset_device_config()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_unset_device_config(const rmax_device_config_t *device_config)"
  },
  {
    "label": "rmax_request_notification()",
    "kind": "Method",
    "detail": "Function (# ifdef __linux__ __export rmax_status_t)",
    "insertText": "rmax_request_notification(rmax_stream_id id)"
  },
  {
    "label": "rmax_request_notification()",
    "kind": "Method",
    "detail": "Function (# else __export rmax_status_t)",
    "insertText": "rmax_request_notification(rmax_stream_id id, OVERLAPPED *overlapped)"
  },
  {
    "label": "rmax_get_event_channel()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef __linux__ typedef int rmax_event_channel_t ; # else typedef HANDLE rmax_event_channel_t ; # endif __export rmax_status_t)",
    "insertText": "rmax_get_event_channel(rmax_stream_id id, rmax_event_channel_t *event_channel)"
  },
  {
    "label": "rmax_register_memory()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_register_memory(void *addr, size_t length, struct in_addr dev_addr, rmax_mkey_id *id)"
  },
  {
    "label": "rmax_register_memory_ex()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_register_memory_ex(void *addr, size_t length, struct in_addr dev_addr, rmax_memory_key_flags flags, rmax_mkey_id *id)"
  },
  {
    "label": "rmax_deregister_memory()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_deregister_memory(rmax_mkey_id id, struct in_addr dev_addr)"
  },
  {
    "label": "rmax_out_create_stream()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_create_stream(char *sdp_chr, struct rmax_buffer_attr *buffer_attr, struct rmax_qos_attr *qos, uint32_t num_packets_per_frame, uint32_t media_block_index, rmax_stream_id *stream_id)"
  },
  {
    "label": "rmax_out_create_stream_ex()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_create_stream_ex(struct rmax_out_stream_params *params, rmax_stream_id *id)"
  },
  {
    "label": "rmax_out_query_address()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_query_address(rmax_stream_id id, uint32_t media_block_index, struct sockaddr_in *source_address, struct sockaddr_in *destination_address)"
  },
  {
    "label": "rmax_out_create_gen_stream()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_create_gen_stream(struct rmax_out_gen_stream_params *params, rmax_stream_id *stream_id)"
  },
  {
    "label": "rmax_out_modify_gen_stream_rate()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_modify_gen_stream_rate(rmax_stream_id stream_id, struct rmax_out_rate_attr *new_rate)"
  },
  {
    "label": "rmax_out_modify_common_stream_qos_dscp()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_modify_common_stream_qos_dscp(rmax_stream_id stream_id, uint8_t dscp)"
  },
  {
    "label": "rmax_out_modify_common_stream_ecn()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_modify_common_stream_ecn(rmax_stream_id stream_id, uint8_t ecn)"
  },
  {
    "label": "rmax_out_query_chunk_num()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_query_chunk_num(rmax_stream_id stream_id, size_t *result)"
  },
  {
    "label": "rmax_out_destroy_stream()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_destroy_stream(rmax_stream_id id)"
  },
  {
    "label": "rmax_out_commit()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_commit(rmax_stream_id id, uint64_t time, rmax_commit_flags_t flags)"
  },
  {
    "label": "rmax_out_commit_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_commit_chunk(rmax_stream_id id, uint64_t time, struct rmax_chunk *chunk, rmax_commit_flags_t flags)"
  },
  {
    "label": "rmax_out_commit_chunk_to()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_commit_chunk_to(rmax_stream_id id, uint64_t time, struct rmax_chunk *chunk, rmax_commit_flags_t flags, struct sockaddr *to_addr)"
  },
  {
    "label": "rmax_out_get_next_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_get_next_chunk(rmax_stream_id id, void **data_ptr, void **app_hdr_ptr)"
  },
  {
    "label": "rmax_out_get_next_chunk_dynamic()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_get_next_chunk_dynamic(rmax_stream_id id, void **data_ptr, void **app_hdr_ptr, size_t chunk_size_in_strides, uint16_t **data_size_arr, uint16_t **app_hdr_size_arr)"
  },
  {
    "label": "rmax_out_cancel_unsent_chunks()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_cancel_unsent_chunks(rmax_stream_id id)"
  },
  {
    "label": "rmax_out_skip_chunks()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_out_skip_chunks(rmax_stream_id id, uint64_t num_chunks)"
  },
  {
    "label": "rmax_in_query_buffer_size()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_in_query_buffer_size(rmax_in_stream_type rx_type, struct sockaddr_in *local_nic_addr, struct rmax_in_buffer_attr *buffer_attr, size_t *payload_size, size_t *header_size)"
  },
  {
    "label": "rmax_in_create_stream()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_in_create_stream(rmax_in_stream_type rx_type, struct sockaddr_in *local_nic_addr, struct rmax_in_buffer_attr *buffer_attr, rmax_in_timestamp_format timestamp_format, rmax_in_flags flags, rmax_stream_id *stream_id)"
  },
  {
    "label": "rmax_in_attach_flow()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_in_attach_flow(rmax_stream_id id, const struct rmax_in_flow_attr *flow_attr)"
  },
  {
    "label": "rmax_in_detach_flow()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_in_detach_flow(rmax_stream_id id, const struct rmax_in_flow_attr *flow_attr)"
  },
  {
    "label": "rmax_in_get_next_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_in_get_next_chunk(rmax_stream_id id, size_t min_chunk_size_in_strides, size_t max_chunk_size_in_strides, int timeout, int flags, struct rmax_in_completion *rx_completion)"
  },
  {
    "label": "rmax_in_destroy_stream()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_in_destroy_stream(rmax_stream_id id)"
  },
  {
    "label": "rmax_set_clock()",
    "kind": "Method",
    "detail": "Function (typedef enum rmax_time_type_t { RMAX_CLOCK_PTP = RMX_TIME_PTP,RMAX_CLOCK_RAW_NANO = RMX_TIME_RAW_NANO,RMAX_CLOCK_RAW_CYCLES = RMX_TIME_RAW_CYCLES,} rmax_time_type ; __export rmax_status_t)",
    "insertText": "rmax_set_clock(struct rmax_clock_t *clock)"
  },
  {
    "label": "rmax_get_time()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_get_time(rmax_time_type time_type, uint64_t *p_time)"
  },
  {
    "label": "rmax_get_supported_devices_list()",
    "kind": "Method",
    "detail": "Function (typedef struct rmax_ip_addr { uint16_t family ; union { struct in_addr ipv4_addr ; uint8_t reserved [ 1 6 ] ; } addr ; } rmax_ip_addr_t ; typedef struct rmax_device { const char* ifa_name ; const rmax_ip_addr_t* ip_addrs ; size_t ip_addrs_count ; const uint8_t* mac_addr ; uint32_t device_id ; const char* serial_number ; } rmax_device_t ; __export rmax_status_t)",
    "insertText": "rmax_get_supported_devices_list(rmax_device_t **supported_devices, size_t *num_devices)"
  },
  {
    "label": "rmax_free_supported_devices_list()",
    "kind": "Method",
    "detail": "Function (__export rmax_status_t)",
    "insertText": "rmax_free_supported_devices_list(rmax_device_t *supported_devices)"
  }
]