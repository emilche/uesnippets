[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SResponsiveGridPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SResponsiveGridPanel"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "FColumnLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColumnLayout"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; namespace SResponsiveGridSize { enum Type { Mobile = 0,Tablet = 7 6 8,MediumDevice = 9 9 2,LargeDevice = 1 2 0 0,} ; } class SResponsiveGridPanel : public SPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SResponsiveGridPanel, SPanel, SLATE_API)"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (private : SResponsiveGridPanel ; struct FColumnLayout { float LayoutSize ; int32 Span ; int32 Offset ; } ; public :)",
    "insertText": "FSlot(int32 Row) : TBasicLayoutWidgetSlot<FSlot>(HAlign_Fill, VAlign_Fill) , RowParam(FMath::Max(0, Row)) , ColumnLayouts()"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TBasicLayoutWidgetSlot<FSlot>) FSlot::FSlotArguments& ColumnSpan(float LayoutSize, int32 ColumnSpan, int32 ColumnOffset = 0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FColumnLayout ColumnLayout ; ColumnLayout . LayoutSize = LayoutSize ; ColumnLayout . Span =)",
    "insertText": "Max(0, ColumnSpan)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ColumnLayout . Offset = ColumnOffset ; bool Inserted = false ;)",
    "insertText": "for(int32 Index = 0; Index < ColumnLayouts.Num(); Index++)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (ColumnLayouts .)",
    "insertText": "Insert(ColumnLayout, Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Inserted = true ; break ; } })",
    "insertText": "if(!Inserted)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ColumnLayouts .)",
    "insertText": "Add(ColumnLayout)"
  },
  {
    "label": "SLATE_SLOT_END_ARGS()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TArray<FColumnLayout> ColumnLayouts ;)",
    "insertText": "SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TBasicLayoutWidgetSlot<FSlot)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ColumnLayouts =)",
    "insertText": "MoveTemp(InArgs.ColumnLayouts)"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (} private : TWeakPtr<SResponsiveGridPanel> Panel ; int32 RowParam ; TArray<FColumnLayout> ColumnLayouts ; } ; FSlot::FSlotArguments)",
    "insertText": "Slot(int32 Row)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_BEGIN_ARGS(SResponsiveGridPanel) : _ColumnGutter(0) , _RowGutter(0)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_ARGUMENT(float, ColumnGutter) SLATE_ARGUMENT(float, RowGutter) SLATE_SLOT_ARGUMENT(FSlot, Slots) FArguments& FillRow(int32 RowId, float Coefficient)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (RowFillCoefficients .)",
    "insertText": "AddZeroed(RowId - RowFillCoefficients.Num() + 1)"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (} RowFillCoefficients [ RowId ] = Coefficient ; return)",
    "insertText": "Me()"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (} TArray<float> RowFillCoefficients ;)",
    "insertText": "SLATE_END_ARGS() SLATE_API SResponsiveGridPanel()"
  },
  {
    "label": "SResponsiveGridPanel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SResponsiveGridPanel()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, int32 TotalColumns)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot(int32 Row)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "SetRowFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRowFill(int32 RowId, float Coefficient)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "CacheDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputePartialSums()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ComputePartialSums(TArray<float>& TurnMeIntoPartialSums)"
  },
  {
    "label": "DistributeSizeContributions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DistributeSizeContributions(float SizeContribution, TArray<float>& DistributeOverMe, int32 StartIndex, int32 UpperBound)"
  },
  {
    "label": "FindInsertSlotLocation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindInsertSlotLocation(SResponsiveGridPanel::FSlot* InSlot)"
  },
  {
    "label": "ComputeDesiredCellSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDesiredCellSizes(float AvailableWidth, TArray<float>& OutColumns, TArray<float>& OutRows, TArray<float>& OutRowToSlot)"
  },
  {
    "label": "LayoutDebugPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LayoutDebugPaint(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  }
]