[
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "KISMETCOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMETCOMPILER_API"
  },
  {
    "label": "ValidateLink()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" class FCompilerResultsLog ; class UEdGraph ; class FGraphCompilerContext { public : FCompilerResultsLog& MessageLog ; protected : void)",
    "insertText": "ValidateLink(const UEdGraphPin* PinA, const UEdGraphPin* PinB)"
  },
  {
    "label": "ValidatePin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidatePin(const UEdGraphPin* Pin)"
  },
  {
    "label": "ValidateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateNode(const UEdGraphNode* Node)"
  },
  {
    "label": "CanIgnoreNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanIgnoreNode(const UEdGraphNode* Node)"
  },
  {
    "label": "ValidateGraphIsWellFormed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateGraphIsWellFormed(UEdGraph* Graph)"
  },
  {
    "label": "FindNodeByClass()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "FindNodeByClass(const UEdGraph* Graph, TSubclassOf<UEdGraphNode> NodeClass, bool bExpectedUnique)"
  },
  {
    "label": "PruneIsolatedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneIsolatedNodes(const TArray<UEdGraphNode*>& RootSet, TArray<UEdGraphNode*>& GraphNodes)"
  },
  {
    "label": "CreateExecutionSchedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExecutionSchedule(const TArray<UEdGraphNode*>& GraphNodes, TArray<UEdGraphNode*>& LinearExecutionSchedule)"
  },
  {
    "label": "CountIncomingEdges()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountIncomingEdges(const UEdGraphNode* Node)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumEdges = 0 ;)",
    "insertText": "for(int32 PinIndex = 0; PinIndex < Node->Pins.Num(); ++PinIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const UEdGraphPin* Pin = Node -> Pins [ PinIndex ] ;)",
    "insertText": "if((Pin->Direction == EGPD_Input) && PinIsImportantForDependancies(Pin))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumEdges + = Pin -> LinkedTo .)",
    "insertText": "Num()"
  }
]