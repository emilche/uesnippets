[
  {
    "label": "ECacheFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECacheFlags"
  },
  {
    "label": "IAnalysisCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisCache"
  },
  {
    "label": "IAnalysisCache()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreTypes . h \" # include \" Memory / MemoryView . h \" namespace TraceServices { typedef TArrayView<FMemoryView> FSegmentIterator ; enum ECacheFlags : uint16 { ECacheFlags_NoGlobalCaching = 1<<1,} ; typedef uint32 FCacheId ; class IAnalysisCache { public : ~)",
    "insertText": "IAnalysisCache()"
  },
  {
    "label": "GetCacheId()",
    "kind": "Method",
    "detail": "Function (uint64 BlockSizeBytes = 8* 1 0 2 4 ; FCacheId)",
    "insertText": "GetCacheId(const TCHAR* Name, uint16 Flags = 0)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (FMutableMemoryView)",
    "insertText": "GetUserData(FCacheId CacheId)"
  },
  {
    "label": "CreateBlocks()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSharedBuffer)",
    "insertText": "CreateBlocks(FCacheId CacheId, uint32 Count)"
  },
  {
    "label": "GetBlocks()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSharedBuffer)",
    "insertText": "GetBlocks(FCacheId CacheId, uint32 BlockIndexStart, uint32 BlockCount = 1)"
  }
]