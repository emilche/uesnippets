[
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "UAnalysisProperties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnalysisProperties"
  },
  {
    "label": "IBlendSpaceAnalysisFeature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBlendSpaceAnalysisFeature"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PERSONA_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PERSONA_API"
  },
  {
    "label": "GetModuleFeatureName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / BoneSocketReference . h \" # include \" Features / IModularFeature . h \" # include \" Animation / BlendSpace . h \" # include \" Animation / AnimSequence . h \" # include \" BlendSpaceAnalysis . generated . h \" # define LOCTEXT_NAMESPACE \" BlendSpaceAnalysis \" class UBlendSpace ; class UAnalysisProperties ; class IBlendSpaceAnalysisFeature : public IModularFeature { public : FName)",
    "insertText": "GetModuleFeatureName()"
  },
  {
    "label": "MakeAnalysisProperties()",
    "kind": "Method",
    "detail": "Function (UAnalysisProperties*)",
    "insertText": "MakeAnalysisProperties(UObject* Outer, const FString& FunctionName)"
  },
  {
    "label": "GetAnalysisFunctions()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAnalysisFunctions()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (World)",
    "insertText": "UMETA(ToolTip = \"Analysis is done in world space (relative to the root of the character)\"), Fixed UMETA(ToolTip = \"Analysis is done in the space of the specified bone or socket based on the first frame of the animation used\"), Changing UMETA(ToolTip = \"Analysis is done in the space of the specified bone or socket based, but velocities are calculated as if this space is not moving\"), Moving UMETA(ToolTip = \"Analysis is done in the space of the specified bone or socket\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PlusX)",
    "insertText": "UMETA(DisplayName = \"+X\", ToolTip = \"The axis points in the positive X direction\"), PlusY UMETA(DisplayName = \"+Y\", ToolTip = \"The axis points in the positive Y direction\"), PlusZ UMETA(DisplayName = \"+Z\", ToolTip = \"The axis points in the positive Z direction\"), MinusX UMETA(DisplayName = \"-X\", ToolTip = \"The axis points in the negative X direction\"), MinusY UMETA(DisplayName = \"-Y\", ToolTip = \"The axis points in the negative Y direction\"), MinusZ UMETA(DisplayName = \"-Z\", ToolTip = \"The axis points in the negative Z direction\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (AimDirection)",
    "insertText": "UMETA(ToolTip = \"Calculates the yaw by looking at the BoneRightAxis. This can provide better yaw values, especially when aiming (e.g. with a weapon that has minimal rotation around its pointing axis) and covering extreme angles up and down, but only if this rightwards facing axis is reliable. It won't work well if the bone is also rolling around its axis.\"), PointDirection UMETA(ToolTip = \"Calculates the yaw based only on the BoneFacingAxis. This will work when you're most interested in the yaw and pitch from a pointing direction, but can produce undesirable results when pointing almost directly up or down.\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Roll,Pitch,Yaw,} ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void CopyFrom(const UCachedAnalysisProperties& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void InitializeFromCache(TObjectPtr<UCachedAnalysisProperties> Cache)"
  },
  {
    "label": "MakeCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCache(TObjectPtr<UCachedAnalysisProperties>& Cache, UBlendSpace* BlendSpace)"
  },
  {
    "label": "GetBoneInfo()",
    "kind": "Method",
    "detail": "Function (} ; namespace BlendSpaceAnalysis { bool)",
    "insertText": "GetBoneInfo(const UAnimSequence& Animation, const FBoneSocketTarget& BoneSocket, FTransform& BoneOffset, FName& BoneName)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetBoneTransform(const UAnimSequence& Animation, int32 Key, const FName& BoneName)"
  },
  {
    "label": "CalculateFrameTM()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "CalculateFrameTM(bool& bNeedToUpdateFrameTM, FTransform& FrameTM, const int32 SampleKey, const T& AnalysisProperties, const UAnimSequence& Animation)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (FrameTM .)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTransform SpaceBoneOffset ; FName SpaceBoneName ;)",
    "insertText": "if(GetBoneInfo(Animation, AnalysisProperties->SpaceBoneSocket, SpaceBoneOffset, SpaceBoneName))"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform SpaceBoneTM =)",
    "insertText": "GetBoneTransform(Animation, SampleKey, SpaceBoneName)"
  },
  {
    "label": "bNeedToUpdateFrameTM()",
    "kind": "Method",
    "detail": "Function (FrameTM = SpaceBoneOffset* SpaceBoneTM ; } })",
    "insertText": "bNeedToUpdateFrameTM(AnalysisProperties->Space == EAnalysisSpace::Changing || AnalysisProperties->Space == EAnalysisSpace::Moving)"
  },
  {
    "label": "GetAxisFromTM()",
    "kind": "Method",
    "detail": "Function (} } FVector)",
    "insertText": "GetAxisFromTM(const FTransform& TM, EAnalysisLinearAxis Axis)"
  },
  {
    "label": "GetFrameDirs()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "GetFrameDirs(FVector& FrameFacingDir, FVector& FrameUpDir, FVector& FrameRightDir, const FTransform& FrameTM, const T& AnalysisProperties)"
  },
  {
    "label": "GetAxisFromTM()",
    "kind": "Method",
    "detail": "Function (FrameFacingDir =)",
    "insertText": "GetAxisFromTM(FrameTM, AnalysisProperties->CharacterFacingAxis)"
  },
  {
    "label": "GetAxisFromTM()",
    "kind": "Method",
    "detail": "Function (FrameUpDir =)",
    "insertText": "GetAxisFromTM(FrameTM, AnalysisProperties->CharacterUpAxis)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (FrameRightDir =)",
    "insertText": "CrossProduct(FrameUpDir, FrameFacingDir)"
  },
  {
    "label": "CalculateComponentSampleValue()",
    "kind": "Method",
    "detail": "Function (} template<FunctionType,T> bool)",
    "insertText": "CalculateComponentSampleValue(double& Result, const FunctionType& Fn, const UBlendSpace& BlendSpace, const T* AnalysisProperties, const UAnimSequence& Animation, const float RateScale)"
  },
  {
    "label": "ComponentIndex()",
    "kind": "Method",
    "detail": "Function (FunctionAxis)",
    "insertText": "ComponentIndex(int32)"
  },
  {
    "label": "CalculateComponentSampleValue()",
    "kind": "Method",
    "detail": "Function (Result = Value [ ComponentIndex ] ; return true ; } return false ; } template<FunctionType,T> bool)",
    "insertText": "CalculateComponentSampleValue(float& Result, const FunctionType& Fn, const UBlendSpace& BlendSpace, const T* AnalysisProperties, const UAnimSequence& Animation, const float RateScale)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "float(DoubleResult)"
  },
  {
    "label": "GetNumberOfSampledKeys()",
    "kind": "Method",
    "detail": "Function (const int32 NumSampledKeys = Animation .)",
    "insertText": "GetNumberOfSampledKeys()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 LastKey =)",
    "insertText": "Clamp((int32) (float(NumSampledKeys) * AnalysisProperties->EndTimeFraction), FirstKey, NumSampledKeys)"
  },
  {
    "label": "CalculateFrameTM()",
    "kind": "Method",
    "detail": "Function (FTransform FrameTM ; bool bNeedToUpdateFrameTM = true ;)",
    "insertText": "CalculateFrameTM(bNeedToUpdateFrameTM, FrameTM, FirstKey, AnalysisProperties, Animation)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Set(0, 0, 0)"
  },
  {
    "label": "CalculateFrameTM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFrameTM(bNeedToUpdateFrameTM, FrameTM, Key, AnalysisProperties, Animation)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform BoneTM =)",
    "insertText": "GetBoneTransform(Animation, Key, BoneName)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (FTransform TM = BoneOffset* BoneTM ; FVector RelativePos = FrameTM .)",
    "insertText": "InverseTransformPosition(TM.GetTranslation())"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Result + = RelativePos ; })",
    "insertText": "Result(1 + LastKey - FirstKey)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform BoneTM1 =)",
    "insertText": "GetBoneTransform(Animation, FirstKey, BoneName)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (FTransform TM1 = BoneOffset* BoneTM1 ; FVector RelativePos1 = FrameTM .)",
    "insertText": "InverseTransformPosition(TM1.GetTranslation())"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (FTransform BoneTM2 =)",
    "insertText": "GetBoneTransform(Animation, LastKey, BoneName)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (FTransform TM2 = BoneOffset* BoneTM2 ; FVector RelativePos2 = FrameTM .)",
    "insertText": "InverseTransformPosition(TM2.GetTranslation())"
  },
  {
    "label": "CalculateVelocity()",
    "kind": "Method",
    "detail": "Function (Result = RelativePos2 - RelativePos1 ; return true ; } template<T> bool)",
    "insertText": "CalculateVelocity(FVector& Result, const UBlendSpace& BlendSpace, const T* AnalysisProperties, const UAnimSequence& Animation, const float RateScale)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 FirstKey =)",
    "insertText": "Clamp((int32) (float(NumSampledKeys) * AnalysisProperties->StartTimeFraction), 0, NumSampledKeys)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 LastKey =)",
    "insertText": "Clamp((int32) (float(NumSampledKeys) * AnalysisProperties->EndTimeFraction), FirstKey, NumSampledKeys-1)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 NumKeys =)",
    "insertText": "Max(1 + LastKey - FirstKey, 1)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Key(FirstKey + iKey) % (NumSampledKeys + 1)"
  },
  {
    "label": "NextKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NextKey(Key + 1) % (NumSampledKeys + 1)"
  },
  {
    "label": "CalculateFrameTM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFrameTM(bNeedToUpdateFrameTM, FrameTM, NextKey, AnalysisProperties, Animation)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform BoneTM2 =)",
    "insertText": "GetBoneTransform(Animation, NextKey, BoneName)"
  },
  {
    "label": "Velocity()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Velocity(RelativePos2 - RelativePos1)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# ifdef ANALYSIS_VERBOSE_LOG)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"%d Velocity = %f %f %f Height = %f\"), Key, Velocity.X, Velocity.Y, Velocity.Z, 0.5f * (RelativePos1 + RelativePos2).Z)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Result* = Animation . RateScale* RateScale ;)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"%s vel = %f %f %f\"), *BoneName.ToString(), Result.X, Result.Y, Result.Z)"
  },
  {
    "label": "GetAxisFromTM()",
    "kind": "Method",
    "detail": "Function (const FTransform TM = BoneOffset* BoneTM ; const FVector AimForwardDir =)",
    "insertText": "GetAxisFromTM(TM, AnalysisProperties->BoneFacingAxis)"
  },
  {
    "label": "GetAxisFromTM()",
    "kind": "Method",
    "detail": "Function (const FVector AimRightDir =)",
    "insertText": "GetAxisFromTM(TM, AnalysisProperties->BoneRightAxis)"
  },
  {
    "label": "RadiansToDegrees()",
    "kind": "Method",
    "detail": "Function (Yaw =)",
    "insertText": "RadiansToDegrees(FMath::Atan2( FVector::DotProduct(AimRightDir, -FrameFacingDir), FVector::DotProduct(AimRightDir, FrameRightDir)))"
  },
  {
    "label": "RadiansToDegrees()",
    "kind": "Method",
    "detail": "Function (} else { Yaw =)",
    "insertText": "RadiansToDegrees(FMath::Atan2( FVector::DotProduct(AimForwardDir, FrameRightDir), FVector::DotProduct(AimForwardDir, FrameFacingDir)))"
  },
  {
    "label": "YawQuat()",
    "kind": "Method",
    "detail": "Function (} const FQuat)",
    "insertText": "YawQuat(FrameUpDir, FMath::DegreesToRadians(Yaw))"
  },
  {
    "label": "UnrotateVector()",
    "kind": "Method",
    "detail": "Function (const FVector UnYawedAimForwardDir = YawQuat .)",
    "insertText": "UnrotateVector(AimForwardDir)"
  },
  {
    "label": "RadiansToDegrees()",
    "kind": "Method",
    "detail": "Function (const double Up = UnYawedAimForwardDir | FrameUpDir ; const double Forward = UnYawedAimForwardDir | FrameFacingDir ; const double Pitch =)",
    "insertText": "RadiansToDegrees(FMath::Atan2(Up, Forward))"
  },
  {
    "label": "UnrotateVector()",
    "kind": "Method",
    "detail": "Function (const FVector UnYawedAimRightDir = YawQuat .)",
    "insertText": "UnrotateVector(AimRightDir)"
  },
  {
    "label": "PitchQuat()",
    "kind": "Method",
    "detail": "Function (const FQuat)",
    "insertText": "PitchQuat(FrameRightDir, -FMath::DegreesToRadians(Pitch))"
  },
  {
    "label": "UnrotateVector()",
    "kind": "Method",
    "detail": "Function (const FVector UnYawedUnPitchedAimRightDir = PitchQuat .)",
    "insertText": "UnrotateVector(UnYawedAimRightDir)"
  },
  {
    "label": "RadiansToDegrees()",
    "kind": "Method",
    "detail": "Function (const double Roll =)",
    "insertText": "RadiansToDegrees(FMath::Atan2( FVector::DotProduct(UnYawedUnPitchedAimRightDir, -FrameUpDir), FVector::DotProduct(UnYawedUnPitchedAimRightDir, FrameRightDir)))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (RollPitchYaw .)",
    "insertText": "Set(Roll, Pitch, Yaw)"
  },
  {
    "label": "CalculateOrientation()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "CalculateOrientation(FVector& Result, const UBlendSpace& BlendSpace, const T* AnalysisProperties, const UAnimSequence& Animation, const float RateScale)"
  },
  {
    "label": "GetFrameDirs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFrameDirs(FrameFacingDir, FrameUpDir, FrameRightDir, FrameTM, AnalysisProperties)"
  },
  {
    "label": "CalculateBoneOrientation()",
    "kind": "Method",
    "detail": "Function (FVector RollPitchYaw ;)",
    "insertText": "CalculateBoneOrientation(RollPitchYaw, Animation, Key, BoneName, BoneOffset, AnalysisProperties, FrameFacingDir, FrameRightDir, FrameUpDir)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# ifdef ANALYSIS_VERBOSE_LOG)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"Roll/pitch/yaw = %f %f %f\"), RollPitchYaw.X, RollPitchYaw.Y, RollPitchYaw.Z)"
  },
  {
    "label": "CalculateBoneOrientation()",
    "kind": "Method",
    "detail": "Function (FVector RollPitchYaw1 ;)",
    "insertText": "CalculateBoneOrientation(RollPitchYaw1, Animation, FirstKey, BoneName, BoneOffset, AnalysisProperties, FrameFacingDir, FrameRightDir, FrameUpDir)"
  },
  {
    "label": "CalculateFrameTM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFrameTM(bNeedToUpdateFrameTM, FrameTM, LastKey, AnalysisProperties, Animation)"
  },
  {
    "label": "CalculateBoneOrientation()",
    "kind": "Method",
    "detail": "Function (FVector RollPitchYaw2 ;)",
    "insertText": "CalculateBoneOrientation(RollPitchYaw2, Animation, LastKey, BoneName, BoneOffset, AnalysisProperties, FrameFacingDir, FrameRightDir, FrameUpDir)"
  },
  {
    "label": "CalculateAngularVelocity()",
    "kind": "Method",
    "detail": "Function (Result = RollPitchYaw2 - RollPitchYaw1 ; return true ; } template<T> bool)",
    "insertText": "CalculateAngularVelocity(FVector& Result, const UBlendSpace& BlendSpace, const T* AnalysisProperties, const UAnimSequence& Animation, const float RateScale)"
  },
  {
    "label": "InverseTransformRotation()",
    "kind": "Method",
    "detail": "Function (FTransform TM1 = BoneOffset* BoneTM1 ; FQuat RelativeQuat1 = FrameTM .)",
    "insertText": "InverseTransformRotation(TM1.GetRotation())"
  },
  {
    "label": "InverseTransformRotation()",
    "kind": "Method",
    "detail": "Function (FTransform TM2 = BoneOffset* BoneTM2 ; FQuat RelativeQuat2 = FrameTM .)",
    "insertText": "InverseTransformRotation(TM2.GetRotation())"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (FQuat Rotation = RelativeQuat2* RelativeQuat1 .)",
    "insertText": "Inverse()"
  },
  {
    "label": "ToAxisAndAngle()",
    "kind": "Method",
    "detail": "Function (FVector Axis ; double Angle ; Rotation .)",
    "insertText": "ToAxisAndAngle(Axis, Angle)"
  },
  {
    "label": "RadiansToDegrees()",
    "kind": "Method",
    "detail": "Function (FVector AngularVelocity =)",
    "insertText": "RadiansToDegrees(Axis * (Angle / DeltaTime))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# ifdef ANALYSIS_VERBOSE_LOG)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"Angular Velocity = %f %f %f\"), AngularVelocity.X, AngularVelocity.Y, AngularVelocity.Z)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Result* = Animation . RateScale* RateScale ;)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"%s angular velocity = %f %f %f\"), *BoneName.ToString(), Result.X, Result.Y, Result.Z)"
  },
  {
    "label": "CalculateBoneOrientation()",
    "kind": "Method",
    "detail": "Function (FVector RollPitchYaw1 ;)",
    "insertText": "CalculateBoneOrientation(RollPitchYaw1, Animation, Key, BoneName, BoneOffset, AnalysisProperties, FrameFacingDir, FrameRightDir, FrameUpDir)"
  },
  {
    "label": "CalculateBoneOrientation()",
    "kind": "Method",
    "detail": "Function (} FVector RollPitchYaw2 ;)",
    "insertText": "CalculateBoneOrientation(RollPitchYaw2, Animation, NextKey, BoneName, BoneOffset, AnalysisProperties, FrameFacingDir, FrameRightDir, FrameUpDir)"
  },
  {
    "label": "OrientationRate()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "OrientationRate(RollPitchYaw2 - RollPitchYaw1)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# ifdef ANALYSIS_VERBOSE_LOG)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"Orientation rate = %f %f %f\"), OrientationRate.X, OrientationRate.Y, OrientationRate.Z)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Result* = Animation . RateScale* RateScale ;)",
    "insertText": "UE_LOG(LogAnimation, Log, TEXT(\"%s Orientation rate = %f %f %f\"), *BoneName.ToString(), Result.X, Result.Y, Result.Z)"
  }
]