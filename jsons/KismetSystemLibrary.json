[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericStruct"
  },
  {
    "label": "UKismetSystemLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UKismetSystemLibrary"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "UFUNCTION",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFUNCTION"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "as"
  },
  {
    "label": "as",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "as"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "from"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "from"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "from"
  },
  {
    "label": "path",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "path"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FLatentActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionInfo"
  },
  {
    "label": "FLatentActionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionInfo"
  },
  {
    "label": "property",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "property"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "into"
  },
  {
    "label": "StackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackTrace()"
  },
  {
    "label": "StackTraceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackTraceImpl(const FFrame& StackFrame)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const UObject* Object)"
  },
  {
    "label": "IsValidClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidClass(UClass* Class)"
  },
  {
    "label": "GetObjectName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetObjectName(const UObject* Object)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPathName(const UObject* Object)"
  },
  {
    "label": "GetSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetSoftObjectPath(const UObject* Object)"
  },
  {
    "label": "GetSystemPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSystemPath(const UObject* Object)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName(const UObject* Object)"
  },
  {
    "label": "GetClassDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClassDisplayName(const UClass* Class)"
  },
  {
    "label": "GetSoftClassPath()",
    "kind": "Method",
    "detail": "Function (FSoftClassPath)",
    "insertText": "GetSoftClassPath(const UClass* Class)"
  },
  {
    "label": "GetClassTopLevelAssetPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassTopLevelAssetPath(const UClass* Class)"
  },
  {
    "label": "GetStructTopLevelAssetPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetStructTopLevelAssetPath(const UScriptStruct* Struct)"
  },
  {
    "label": "GetEnumTopLevelAssetPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetEnumTopLevelAssetPath(const UEnum* Enum)"
  },
  {
    "label": "GetEngineVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEngineVersion()"
  },
  {
    "label": "GetBuildVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBuildVersion()"
  },
  {
    "label": "GetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBuildConfiguration()"
  },
  {
    "label": "GetGameName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameName()"
  },
  {
    "label": "GetProjectDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectDirectory()"
  },
  {
    "label": "GetProjectContentDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectContentDirectory()"
  },
  {
    "label": "GetProjectSavedDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectSavedDirectory()"
  },
  {
    "label": "ConvertToRelativePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToRelativePath(const FString& Filename)"
  },
  {
    "label": "ConvertToAbsolutePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePath(const FString& Filename)"
  },
  {
    "label": "NormalizeFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NormalizeFilename(const FString& InFilename)"
  },
  {
    "label": "GetGameBundleId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameBundleId()"
  },
  {
    "label": "GetPlatformUserName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformUserName()"
  },
  {
    "label": "GetPlatformUserDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformUserDir()"
  },
  {
    "label": "DoesImplementInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesImplementInterface(const UObject* TestObject, TSubclassOf<UInterface> Interface)"
  },
  {
    "label": "DoesClassImplementInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesClassImplementInterface(const UClass* TestClass, TSubclassOf<UInterface> Interface)"
  },
  {
    "label": "GetGameTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetGameTimeInSeconds(const UObject* WorldContextObject)"
  },
  {
    "label": "GetFrameCount()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetFrameCount()"
  },
  {
    "label": "GetPlatformTime_Seconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetPlatformTime_Seconds()"
  },
  {
    "label": "IsServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServer(const UObject* WorldContextObject)"
  },
  {
    "label": "IsDedicatedServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDedicatedServer(const UObject* WorldContextObject)"
  },
  {
    "label": "IsStandalone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStandalone(const UObject* WorldContextObject)"
  },
  {
    "label": "IsSplitScreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplitScreen(const UObject* WorldContextObject)"
  },
  {
    "label": "HasMultipleLocalPlayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMultipleLocalPlayers(const UObject* WorldContextObject)"
  },
  {
    "label": "IsPackagedForDistribution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackagedForDistribution()"
  },
  {
    "label": "GetUniqueDeviceId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUniqueDeviceId()"
  },
  {
    "label": "GetDeviceId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceId()"
  },
  {
    "label": "IsValidInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidInterface(const FScriptInterface& Interface)"
  },
  {
    "label": "MakeSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "MakeSoftObjectPath(const FString& PathString)"
  },
  {
    "label": "BreakSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString)"
  },
  {
    "label": "Conv_SoftObjPathToSoftObjRef()",
    "kind": "Method",
    "detail": "Function (TSoftObjectPtr<UObject>)",
    "insertText": "Conv_SoftObjPathToSoftObjRef(const FSoftObjectPath& SoftObjectPath)"
  },
  {
    "label": "Conv_SoftObjRefToSoftObjPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "Conv_SoftObjRefToSoftObjPath(TSoftObjectPtr<UObject> SoftObjectReference)"
  },
  {
    "label": "BreakTopLevelAssetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakTopLevelAssetPath(const FTopLevelAssetPath& TopLevelAssetPath, FString& PathString)"
  },
  {
    "label": "MakeSoftClassPath()",
    "kind": "Method",
    "detail": "Function (FSoftClassPath)",
    "insertText": "MakeSoftClassPath(const FString& PathString)"
  },
  {
    "label": "BreakSoftClassPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString)"
  },
  {
    "label": "Conv_SoftClassPathToSoftClassRef()",
    "kind": "Method",
    "detail": "Function (TSoftClassPtr<UObject>)",
    "insertText": "Conv_SoftClassPathToSoftClassRef(const FSoftClassPath& SoftClassPath)"
  },
  {
    "label": "Conv_SoftObjRefToSoftClassPath()",
    "kind": "Method",
    "detail": "Function (FSoftClassPath)",
    "insertText": "Conv_SoftObjRefToSoftClassPath(TSoftClassPtr<UObject> SoftClassReference)"
  },
  {
    "label": "IsValidSoftObjectReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSoftObjectReference(const TSoftObjectPtr<UObject>& SoftObjectReference)"
  },
  {
    "label": "Conv_SoftObjectReferenceToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_SoftObjectReferenceToString(const TSoftObjectPtr<UObject>& SoftObjectReference)"
  },
  {
    "label": "EqualEqual_SoftObjectReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_SoftObjectReference(const TSoftObjectPtr<UObject>& A, const TSoftObjectPtr<UObject>& B)"
  },
  {
    "label": "NotEqual_SoftObjectReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_SoftObjectReference(const TSoftObjectPtr<UObject>& A, const TSoftObjectPtr<UObject>& B)"
  },
  {
    "label": "IsValidSoftClassReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSoftClassReference(const TSoftClassPtr<UObject>& SoftClassReference)"
  },
  {
    "label": "GetSoftClassTopLevelAssetPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetSoftClassTopLevelAssetPath(TSoftClassPtr<UObject> SoftClassReference)"
  },
  {
    "label": "Conv_SoftClassReferenceToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_SoftClassReferenceToString(const TSoftClassPtr<UObject>& SoftClassReference)"
  },
  {
    "label": "EqualEqual_SoftClassReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_SoftClassReference(const TSoftClassPtr<UObject>& A, const TSoftClassPtr<UObject>& B)"
  },
  {
    "label": "NotEqual_SoftClassReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_SoftClassReference(const TSoftClassPtr<UObject>& A, const TSoftClassPtr<UObject>& B)"
  },
  {
    "label": "IsObjectOfSoftClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectOfSoftClass(const UObject* Object, TSoftClassPtr<UObject> SoftClass)"
  },
  {
    "label": "Conv_SoftClassReferenceToClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UObject>)",
    "insertText": "Conv_SoftClassReferenceToClass(const TSoftClassPtr<UObject>& SoftClass)"
  },
  {
    "label": "Conv_ObjectToSoftObjectReference()",
    "kind": "Method",
    "detail": "Function (TSoftObjectPtr<UObject>)",
    "insertText": "Conv_ObjectToSoftObjectReference(UObject* Object)"
  },
  {
    "label": "Conv_ClassToSoftClassReference()",
    "kind": "Method",
    "detail": "Function (TSoftClassPtr<UObject>)",
    "insertText": "Conv_ClassToSoftClassReference(const TSubclassOf<UObject>& Class)"
  },
  {
    "label": "Conv_ComponentReferenceToSoftComponentReference()",
    "kind": "Method",
    "detail": "Function (FSoftComponentReference)",
    "insertText": "Conv_ComponentReferenceToSoftComponentReference(const FComponentReference& ComponentReference)"
  },
  {
    "label": "LoadAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAsset(const UObject* WorldContextObject, TSoftObjectPtr<UObject> Asset, FOnAssetLoaded OnLoaded, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "LoadAssetClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAssetClass(const UObject* WorldContextObject, TSoftClassPtr<UObject> AssetClass, FOnAssetClassLoaded OnLoaded, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "MakeLiteralInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MakeLiteralInt(int32 Value)"
  },
  {
    "label": "MakeLiteralInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MakeLiteralInt64(int64 Value)"
  },
  {
    "label": "MakeLiteralFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MakeLiteralFloat(float Value)"
  },
  {
    "label": "MakeLiteralDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "MakeLiteralDouble(double Value)"
  },
  {
    "label": "MakeLiteralBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeLiteralBool(bool Value)"
  },
  {
    "label": "MakeLiteralName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "MakeLiteralName(FName Value)"
  },
  {
    "label": "MakeLiteralByte()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MakeLiteralByte(uint8 Value)"
  },
  {
    "label": "MakeLiteralString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeLiteralString(FString Value)"
  },
  {
    "label": "MakeLiteralText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "MakeLiteralText(FText Value)"
  },
  {
    "label": "PrintWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintWarning(const FString& InString)"
  },
  {
    "label": "SetWindowTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowTitle(const FText& Title)"
  },
  {
    "label": "ExecuteConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteConsoleCommand(const UObject* WorldContextObject, const FString& Command, class APlayerController* SpecificPlayer = NULL )"
  },
  {
    "label": "GetConsoleVariableStringValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConsoleVariableStringValue(const FString& VariableName)"
  },
  {
    "label": "GetConsoleVariableFloatValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetConsoleVariableFloatValue(const FString& VariableName)"
  },
  {
    "label": "GetConsoleVariableIntValue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConsoleVariableIntValue(const FString& VariableName)"
  },
  {
    "label": "GetConsoleVariableBoolValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConsoleVariableBoolValue(const FString& VariableName)"
  },
  {
    "label": "QuitGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuitGame(const UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference::Type> QuitPreference, bool bIgnorePlatformRestrictions)"
  },
  {
    "label": "QuitEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuitEditor()"
  },
  {
    "label": "Delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delay(const UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo )"
  },
  {
    "label": "DelayUntilNextTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayUntilNextTick(const UObject* WorldContextObject, struct FLatentActionInfo LatentInfo)"
  },
  {
    "label": "RetriggerableDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetriggerableDelay(const UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "MoveComponentTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveComponentTo(USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction::Type> MoveAction, FLatentActionInfo LatentInfo)"
  },
  {
    "label": "K2_IsValidTimerHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_IsValidTimerHandle(FTimerHandle Handle)"
  },
  {
    "label": "K2_ClearTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_ClearTimerHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_PauseTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_PauseTimerHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_UnPauseTimerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_UnPauseTimerHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_IsTimerActiveHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_IsTimerActiveHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_IsTimerPausedHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_IsTimerPausedHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_TimerExistsHandle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_TimerExistsHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_GetTimerElapsedTimeHandle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "K2_GetTimerElapsedTimeHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_GetTimerRemainingTimeHandle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "K2_GetTimerRemainingTimeHandle(const UObject* WorldContextObject, FTimerHandle Handle)"
  },
  {
    "label": "K2_SetTimer()",
    "kind": "Method",
    "detail": "Function (FTimerHandle)",
    "insertText": "K2_SetTimer(UObject* Object, FString FunctionName, float Time, bool bLooping, bool bMaxOncePerFrame = false, float InitialStartDelay = 0.f, float InitialStartDelayVariance = 0.f)"
  },
  {
    "label": "K2_SetTimerForNextTick()",
    "kind": "Method",
    "detail": "Function (FTimerHandle)",
    "insertText": "K2_SetTimerForNextTick(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_ClearTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_ClearTimer(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_PauseTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_PauseTimer(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_UnPauseTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_UnPauseTimer(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_IsTimerActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_IsTimerActive(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_IsTimerPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_IsTimerPaused(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_TimerExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_TimerExists(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_GetTimerElapsedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "K2_GetTimerElapsedTime(UObject* Object, FString FunctionName)"
  },
  {
    "label": "K2_GetTimerRemainingTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "K2_GetTimerRemainingTime(UObject* Object, FString FunctionName)"
  },
  {
    "label": "SetIntPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntPropertyByName(UObject* Object, FName PropertyName, int32 Value)"
  },
  {
    "label": "SetInt64PropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInt64PropertyByName(UObject* Object, FName PropertyName, int64 Value)"
  },
  {
    "label": "SetBytePropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBytePropertyByName(UObject* Object, FName PropertyName, uint8 Value)"
  },
  {
    "label": "SetFloatPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloatPropertyByName(UObject* Object, FName PropertyName, float Value)"
  },
  {
    "label": "SetDoublePropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoublePropertyByName(UObject* Object, FName PropertyName, double Value)"
  },
  {
    "label": "SetBoolPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolPropertyByName(UObject* Object, FName PropertyName, bool Value)"
  },
  {
    "label": "SetObjectPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value)"
  },
  {
    "label": "SetClassPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClassPropertyByName(UObject* Object, FName PropertyName, TSubclassOf<UObject> Value)"
  },
  {
    "label": "SetInterfacePropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterfacePropertyByName(UObject* Object, FName PropertyName, const FScriptInterface& Value)"
  },
  {
    "label": "SetNamePropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNamePropertyByName(UObject* Object, FName PropertyName, const FName& Value)"
  },
  {
    "label": "SetSoftObjectPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftObjectPropertyByName(UObject* Object, FName PropertyName, const TSoftObjectPtr<UObject>& Value)"
  },
  {
    "label": "SetSoftClassPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftClassPropertyByName(UObject* Object, FName PropertyName, const TSoftClassPtr<UObject>& Value)"
  },
  {
    "label": "SetStringPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringPropertyByName(UObject* Object, FName PropertyName, const FString& Value)"
  },
  {
    "label": "SetTextPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextPropertyByName(UObject* Object, FName PropertyName, const FText& Value)"
  },
  {
    "label": "SetVectorPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVectorPropertyByName(UObject* Object, FName PropertyName, const FVector& Value)"
  },
  {
    "label": "SetVector3fPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVector3fPropertyByName(UObject* Object, FName PropertyName, const FVector3f& Value)"
  },
  {
    "label": "SetRotatorPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotatorPropertyByName(UObject* Object, FName PropertyName, const FRotator& Value)"
  },
  {
    "label": "SetLinearColorPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearColorPropertyByName(UObject* Object, FName PropertyName, const FLinearColor& Value)"
  },
  {
    "label": "SetColorPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorPropertyByName(UObject* Object, FName PropertyName, const FColor& Value)"
  },
  {
    "label": "SetTransformPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformPropertyByName(UObject* Object, FName PropertyName, const FTransform& Value)"
  },
  {
    "label": "SetCollisionProfileNameProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionProfileNameProperty(UObject* Object, FName PropertyName, const FCollisionProfileName& Value)"
  },
  {
    "label": "SetFieldPathPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFieldPathPropertyByName(UObject* Object, FName PropertyName, const TFieldPath<FField>& Value)"
  },
  {
    "label": "SetStructurePropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStructurePropertyByName(UObject* Object, FName PropertyName, const FGenericStruct& Value)"
  },
  {
    "label": "SphereOverlapActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereOverlapActors(const UObject* WorldContextObject, const FVector SpherePos, float SphereRadius, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ActorClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class AActor*>& OutActors)"
  },
  {
    "label": "SphereOverlapComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereOverlapComponents(const UObject* WorldContextObject, const FVector SpherePos, float SphereRadius, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ComponentClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>& OutComponents)"
  },
  {
    "label": "BoxOverlapActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxOverlapActors(const UObject* WorldContextObject, const FVector BoxPos, FVector BoxExtent, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ActorClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class AActor*>& OutActors)"
  },
  {
    "label": "BoxOverlapComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxOverlapComponents(const UObject* WorldContextObject, const FVector BoxPos, FVector Extent, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ComponentClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>& OutComponents)"
  },
  {
    "label": "CapsuleOverlapActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapsuleOverlapActors(const UObject* WorldContextObject, const FVector CapsulePos, float Radius, float HalfHeight, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ActorClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class AActor*>& OutActors)"
  },
  {
    "label": "CapsuleOverlapComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapsuleOverlapComponents(const UObject* WorldContextObject, const FVector CapsulePos, float Radius, float HalfHeight, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ComponentClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>& OutComponents)"
  },
  {
    "label": "ComponentOverlapActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapActors(UPrimitiveComponent* Component, const FTransform& ComponentTransform, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ActorClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class AActor*>& OutActors)"
  },
  {
    "label": "ComponentOverlapComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponents(UPrimitiveComponent* Component, const FTransform& ComponentTransform, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, UClass* ComponentClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>& OutComponents)"
  },
  {
    "label": "LineTraceSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceSingle(const UObject* WorldContextObject, const FVector Start, const FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "LineTraceMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceMulti(const UObject* WorldContextObject, const FVector Start, const FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "SphereTraceSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereTraceSingle(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "SphereTraceMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereTraceMulti(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "BoxTraceSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxTraceSingle(const UObject* WorldContextObject, const FVector Start, const FVector End, const FVector HalfSize, const FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "BoxTraceMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxTraceMulti(const UObject* WorldContextObject, const FVector Start, const FVector End, FVector HalfSize, const FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "CapsuleTraceSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapsuleTraceSingle(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "CapsuleTraceMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapsuleTraceMulti(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "LineTraceSingleForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceSingleForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f )"
  },
  {
    "label": "LineTraceMultiForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceMultiForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "SphereTraceSingleForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereTraceSingleForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "SphereTraceMultiForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SphereTraceMultiForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "BoxTraceSingleForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxTraceSingleForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, const FVector HalfSize, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "BoxTraceMultiForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxTraceMultiForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, const FVector HalfSize, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "CapsuleTraceSingleForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapsuleTraceSingleForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, float HalfHeight, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "CapsuleTraceMultiForObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CapsuleTraceMultiForObjects(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius, float HalfHeight, const TArray<TEnumAsByte<EObjectTypeQuery> > & ObjectTypes, bool bTraceComplex, const TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor = FLinearColor::Red, FLinearColor TraceHitColor = FLinearColor::Green, float DrawTime = 5.0f)"
  },
  {
    "label": "GetCollisionProfileNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetCollisionProfileNames()"
  },
  {
    "label": "GetActorListFromComponentList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorListFromComponentList(const TArray<class UPrimitiveComponent*>& ComponentList, UClass* ActorClassFilter, TArray<class AActor*>& OutActorList)"
  },
  {
    "label": "DrawDebugLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugLine(const UObject* WorldContextObject, const FVector LineStart, const FVector LineEnd, FLinearColor LineColor, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPoint(const UObject* WorldContextObject, const FVector Position, float Size, FLinearColor PointColor, float Duration=0.f)"
  },
  {
    "label": "DrawDebugArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugArrow(const UObject* WorldContextObject, const FVector LineStart, const FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugBox(const UObject* WorldContextObject, const FVector Center, FVector Extent, FLinearColor LineColor, const FRotator Rotation=FRotator::ZeroRotator, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCoordinateSystem(const UObject* WorldContextObject, const FVector AxisLoc, const FRotator AxisRot, float Scale=1.f, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugSphere(const UObject* WorldContextObject, const FVector Center, float Radius=100.f, int32 Segments=12, FLinearColor LineColor = FLinearColor::White, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCylinder(const UObject* WorldContextObject, const FVector Start, const FVector End, float Radius=100.f, int32 Segments=12, FLinearColor LineColor = FLinearColor::White, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCone(const UObject* WorldContextObject, const FVector Origin, const FVector Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, FLinearColor LineColor, float Duration = 0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugConeInDegrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugConeInDegrees(const UObject* WorldContextObject, const FVector Origin, const FVector Direction, float Length=100.f, float AngleWidth=45.f, float AngleHeight=45.f, int32 NumSides = 12, FLinearColor LineColor = FLinearColor::White, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCapsule(const UObject* WorldContextObject, const FVector Center, float HalfHeight, float Radius, const FRotator Rotation, FLinearColor LineColor = FLinearColor::White, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugString(const UObject* WorldContextObject, const FVector TextLocation, const FString& Text, class AActor* TestBaseActor = NULL, FLinearColor TextColor = FLinearColor::White, float Duration=0.f)"
  },
  {
    "label": "FlushDebugStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDebugStrings(const UObject* WorldContextObject)"
  },
  {
    "label": "DrawDebugPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPlane(const UObject* WorldContextObject, const FPlane& PlaneCoordinates, const FVector Location, float Size, FLinearColor PlaneColor = FLinearColor::White, float Duration=0.f)"
  },
  {
    "label": "FlushPersistentDebugLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPersistentDebugLines(const UObject* WorldContextObject)"
  },
  {
    "label": "DrawDebugFrustum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugFrustum(const UObject* WorldContextObject, const FTransform& FrustumTransform, FLinearColor FrustumColor = FLinearColor::White, float Duration=0.f, float Thickness = 0.f)"
  },
  {
    "label": "DrawDebugCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugCamera(const ACameraActor* CameraActor, FLinearColor CameraColor = FLinearColor::White, float Duration=0.f)"
  },
  {
    "label": "DrawDebugFloatHistoryTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugFloatHistoryTransform(const UObject* WorldContextObject, const FDebugFloatHistory& FloatHistory, const FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor = FLinearColor::White, float Duration = 0.f)"
  },
  {
    "label": "DrawDebugFloatHistoryLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugFloatHistoryLocation(const UObject* WorldContextObject, const FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor = FLinearColor::White, float Duration = 0.f)"
  },
  {
    "label": "AddFloatHistorySample()",
    "kind": "Method",
    "detail": "Function (FDebugFloatHistory)",
    "insertText": "AddFloatHistorySample(float Value, const FDebugFloatHistory& FloatHistory)"
  },
  {
    "label": "CreateCopyForUndoBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCopyForUndoBuffer(UObject* ObjectToModify)"
  },
  {
    "label": "GetComponentBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComponentBounds(const USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius)"
  },
  {
    "label": "GetActorBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorBounds(const AActor* Actor, FVector& Origin, FVector& BoxExtent)"
  },
  {
    "label": "GetRenderingDetailMode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRenderingDetailMode()"
  },
  {
    "label": "GetRenderingMaterialQualityLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRenderingMaterialQualityLevel()"
  },
  {
    "label": "GetSupportedFullscreenResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions)"
  },
  {
    "label": "GetConvenientWindowedResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions)"
  },
  {
    "label": "GetMinYResolutionForUI()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinYResolutionForUI()"
  },
  {
    "label": "GetMinYResolutionFor3DView()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinYResolutionFor3DView()"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(const FString& URL)"
  },
  {
    "label": "LaunchExternalUrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchExternalUrl(const TArray<FString>& InDomainStrings, const FString& URL)"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const FString& URL)"
  },
  {
    "label": "CollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectGarbage()"
  },
  {
    "label": "ShowAdBanner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen)"
  },
  {
    "label": "GetAdIDCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAdIDCount()"
  },
  {
    "label": "HideAdBanner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAdBanner()"
  },
  {
    "label": "ForceCloseAdBanner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceCloseAdBanner()"
  },
  {
    "label": "LoadInterstitialAd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInterstitialAd(int32 AdIdIndex)"
  },
  {
    "label": "IsInterstitialAdAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterstitialAdAvailable()"
  },
  {
    "label": "IsInterstitialAdRequested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterstitialAdRequested()"
  },
  {
    "label": "ShowInterstitialAd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowInterstitialAd()"
  },
  {
    "label": "ShowPlatformSpecificLeaderboardScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPlatformSpecificLeaderboardScreen(const FString& CategoryName)"
  },
  {
    "label": "ShowPlatformSpecificAchievementsScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPlatformSpecificAchievementsScreen(const class APlayerController* SpecificPlayer)"
  },
  {
    "label": "IsLoggedIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoggedIn(const APlayerController* SpecificPlayer)"
  },
  {
    "label": "IsScreensaverEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScreensaverEnabled()"
  },
  {
    "label": "ControlScreensaver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ControlScreensaver(bool bAllowScreenSaver)"
  },
  {
    "label": "SetVolumeButtonsHandledBySystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolumeButtonsHandledBySystem(bool bEnabled)"
  },
  {
    "label": "GetVolumeButtonsHandledBySystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVolumeButtonsHandledBySystem()"
  },
  {
    "label": "SetGamepadsBlockDeviceFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGamepadsBlockDeviceFeedback(bool bBlock)"
  },
  {
    "label": "ResetGamepadAssignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGamepadAssignments()"
  },
  {
    "label": "ResetGamepadAssignmentToController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGamepadAssignmentToController(int32 ControllerId)"
  },
  {
    "label": "IsControllerAssignedToGamepad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsControllerAssignedToGamepad(int32 ControllerId)"
  },
  {
    "label": "GetGamepadControllerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGamepadControllerName(int32 ControllerId)"
  },
  {
    "label": "SetSuppressViewportTransitionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressViewportTransitionMessage(const UObject* WorldContextObject, bool bState)"
  },
  {
    "label": "GetPreferredLanguages()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPreferredLanguages()"
  },
  {
    "label": "GetDefaultLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultLanguage()"
  },
  {
    "label": "GetDefaultLocale()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultLocale()"
  },
  {
    "label": "GetLocalCurrencyCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalCurrencyCode()"
  },
  {
    "label": "GetLocalCurrencySymbol()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalCurrencySymbol()"
  },
  {
    "label": "RegisterForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForRemoteNotifications()"
  },
  {
    "label": "UnregisterForRemoteNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForRemoteNotifications()"
  },
  {
    "label": "SetUserActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserActivity(const FUserActivity& UserActivity)"
  },
  {
    "label": "GetCommandLine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCommandLine()"
  },
  {
    "label": "ParseCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCommandLine(const FString& InCmdLine, TArray<FString>& OutTokens, TArray<FString>& OutSwitches, TMap<FString, FString>& OutParams)"
  },
  {
    "label": "ParseParam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseParam(const FString& InString, const FString& InParam)"
  },
  {
    "label": "ParseParamValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseParamValue(const FString& InString, const FString& InParam, FString& OutValue)"
  },
  {
    "label": "IsUnattended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnattended()"
  },
  {
    "label": "GetEditorProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEditorProperty(UObject* Object, const FName PropertyName, int32& PropertyValue)"
  },
  {
    "label": "Generic_GetEditorProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Generic_GetEditorProperty(const UObject* Object, const FName PropertyName, void* ValuePtr, const FProperty* ValueProp)"
  },
  {
    "label": "SetEditorProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEditorProperty(UObject* Object, const FName PropertyName, const int32& PropertyValue, const EPropertyAccessChangeNotifyMode ChangeNotifyMode)"
  },
  {
    "label": "Generic_SetEditorProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Generic_SetEditorProperty(UObject* Object, const FName PropertyName, const void* ValuePtr, const FProperty* ValueProp, const EPropertyAccessChangeNotifyMode ChangeNotifyMode)"
  },
  {
    "label": "ResetEditorProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetEditorProperty(UObject* Object, const FName PropertyName, const EPropertyAccessChangeNotifyMode ChangeNotifyMode = EPropertyAccessChangeNotifyMode::Default)"
  },
  {
    "label": "IsEditorPropertyOverridden()",
    "kind": "Method",
    "detail": "Function (EEditorPropertyValueState)",
    "insertText": "IsEditorPropertyOverridden(UObject* Object, const FName PropertyName)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BeginTransaction(const FString& Context, FText Description, UObject* PrimaryObject)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "CancelTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelTransaction(const int32 Index)"
  },
  {
    "label": "TransactObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransactObject(UObject* Object)"
  },
  {
    "label": "SnapshotObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapshotObject(UObject* Object)"
  },
  {
    "label": "GetClassFromPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UObject>)",
    "insertText": "GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "GetSoftObjectReferenceFromPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (TSoftObjectPtr<UObject>)",
    "insertText": "GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "GetSoftClassReferenceFromPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (TSoftClassPtr<UObject>)",
    "insertText": "GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "GetPrimaryAssetIdFromObject()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdFromObject(UObject* Object)"
  },
  {
    "label": "GetPrimaryAssetIdFromClass()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdFromClass(TSubclassOf<UObject> Class)"
  },
  {
    "label": "GetPrimaryAssetIdFromSoftObjectReference()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<UObject> SoftObjectReference)"
  },
  {
    "label": "GetPrimaryAssetIdFromSoftClassReference()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetIdFromSoftClassReference(TSoftClassPtr<UObject> SoftClassReference)"
  },
  {
    "label": "GetPrimaryAssetIdList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList)"
  },
  {
    "label": "IsValidPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "Conv_PrimaryAssetIdToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "EqualEqual_PrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B)"
  },
  {
    "label": "NotEqual_PrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B)"
  },
  {
    "label": "IsValidPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType)"
  },
  {
    "label": "Conv_PrimaryAssetTypeToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType)"
  },
  {
    "label": "EqualEqual_PrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B)"
  },
  {
    "label": "NotEqual_PrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B)"
  },
  {
    "label": "UnloadPrimaryAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "UnloadPrimaryAssetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadPrimaryAssetList(const TArray<FPrimaryAssetId>& PrimaryAssetIdList)"
  },
  {
    "label": "GetCurrentBundleState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles)"
  },
  {
    "label": "GetPrimaryAssetsWithBundleState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrimaryAssetsWithBundleState(const TArray<FName>& RequiredBundles, const TArray<FName>& ExcludedBundles, const TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList)"
  },
  {
    "label": "MakeARFilter()",
    "kind": "Method",
    "detail": "Function (FARFilter)",
    "insertText": "MakeARFilter(\n\t\tconst TArray<FName>& PackageNames, \n\t\tconst TArray<FName>& PackagePaths, \n\t\tconst TArray<FSoftObjectPath>& SoftObjectPaths, \n\t\tconst TArray<FTopLevelAssetPath>& ClassPaths,\n\t\tconst TSet<FTopLevelAssetPath>& RecursiveClassPathsExclusionSet, \n\t\tconst TArray<FName>& ClassNames, \n\t\tconst TSet<FName>& RecursiveClassesExclusionSet, \n\t\tconst bool bRecursivePaths = false, \n\t\tconst bool bRecursiveClasses = false, \n\t\tconst bool bIncludeOnlyOnDiskAssets = false\n\t\t)"
  },
  {
    "label": "BreakARFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakARFilter(\n\t\tFARFilter InARFilter,\n\t\tTArray<FName>& PackageNames,\n\t\tTArray<FName>& PackagePaths,\n\t\tTArray<FSoftObjectPath>& SoftObjectPaths,\n\t\tTArray<FTopLevelAssetPath>& ClassPaths,\n\t\tTSet<FTopLevelAssetPath>& RecursiveClassPathsExclusionSet,\n\t\tTArray<FName>& ClassNames,\n\t\tTSet<FName>& RecursiveClassesExclusionSet,\n\t\tbool& bRecursivePaths,\n\t\tbool& bRecursiveClasses,\n\t\tbool& bIncludeOnlyOnDiskAssets\n\t\t)"
  }
]