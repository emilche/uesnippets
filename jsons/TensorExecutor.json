[
  {
    "label": "ExpressionHasTensorBroadcastingOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpressionHasTensorBroadcastingOp"
  },
  {
    "label": "TensorExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorExecutor"
  },
  {
    "label": "TensorAsyncExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorAsyncExecutor"
  },
  {
    "label": "TensorExecutorTilingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorExecutorTilingContext"
  },
  {
    "label": "EvalRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EvalRange"
  },
  {
    "label": "TensorAsyncExecutorContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorAsyncExecutorContext"
  },
  {
    "label": "EigenMetaKernelEval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EigenMetaKernelEval"
  },
  {
    "label": "ExecExprFunctorKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExecExprFunctorKernel"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_EXECUTOR_H # define EIGEN_CXX11_TENSOR_TENSOR_EXECUTOR_H namespace Eigen { namespace internal { template<Expression> struct ExpressionHasTensorBroadcastingOp { enum { value = false } ; } ; template<LhsXprType,RhsXprType> struct ExpressionHasTensorBroadcastingOp<const TensorAssignOp<LhsXprType,RhsXprType>> { enum { value = ExpressionHasTensorBroadcastingOp<RhsXprType>::value } ; } ; template<UnaryOp,XprType> struct ExpressionHasTensorBroadcastingOp<const TensorCwiseUnaryOp<UnaryOp,XprType>> { enum { value = ExpressionHasTensorBroadcastingOp<XprType>::value } ; } ; template<BinaryOp,LhsXprType,RhsXprType> struct ExpressionHasTensorBroadcastingOp<const TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType>> { enum { value = ExpressionHasTensorBroadcastingOp<LhsXprType>::value | | ExpressionHasTensorBroadcastingOp<RhsXprType>::value } ; } ; template<Broadcast,XprType> struct ExpressionHasTensorBroadcastingOp<const TensorBroadcastingOp<Broadcast,XprType>> { enum { value = true } ; } ; template<Expression,Device,bool Vectorizable,TiledEvaluation Tiling> class TensorExecutor { public : typedef Expression::Index StorageIndex ;)",
    "insertText": "static_assert(std::is_same<Device, DefaultDevice>::value, \"Default executor instantiated with non-default device. \" \"You must #define EIGEN_USE_THREADS, EIGEN_USE_GPU or \" \"EIGEN_USE_SYCL before including Eigen headers.\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(const Expression& expr, const Device& device = Device())"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (TensorEvaluator<Expression,Device>)",
    "insertText": "evaluator(expr, device)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (const bool needs_assign = evaluator .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (const StorageIndex size =)",
    "insertText": "array_prod(evaluator.dimensions())"
  },
  {
    "label": "evalScalar()",
    "kind": "Method",
    "detail": "Function (evaluator .)",
    "insertText": "evalScalar(i)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} } evaluator .)",
    "insertText": "cleanup()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Expression,Device,DoneCallback,bool Vectorizable,TiledEvaluation Tiling> class TensorAsyncExecutor { } ; template<Expression> class TensorExecutor<Expression,DefaultDevice,true,TiledEvaluation::Off> { public : typedef Expression::Index StorageIndex ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "run(const Expression& expr, const DefaultDevice& device = DefaultDevice())"
  },
  {
    "label": "UnrolledSize()",
    "kind": "Method",
    "detail": "Function (const int PacketSize = unpacket_traits<TensorEvaluator<Expression,DefaultDevice>::PacketReturnType>::size ; const StorageIndex)",
    "insertText": "UnrolledSize(size / (4 * PacketSize))"
  },
  {
    "label": "evalPacket()",
    "kind": "Method",
    "detail": "Function (evaluator .)",
    "insertText": "evalPacket(i + j * PacketSize)"
  },
  {
    "label": "VectorizedSize()",
    "kind": "Method",
    "detail": "Function (} } const StorageIndex)",
    "insertText": "VectorizedSize(size / PacketSize)"
  },
  {
    "label": "evalPacket()",
    "kind": "Method",
    "detail": "Function (evaluator .)",
    "insertText": "evalPacket(i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(StorageIndex i = VectorizedSize; i < size; ++i)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (const TensorBlockResourceRequirements requirements = evaluator .)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "block_mapper()",
    "kind": "Method",
    "detail": "Function (const TensorBlockMapper)",
    "insertText": "block_mapper(typename TensorBlockDesc::Dimensions(evaluator.dimensions()), requirements)"
  },
  {
    "label": "scratch()",
    "kind": "Method",
    "detail": "Function (TensorBlockScratch)",
    "insertText": "scratch(device)"
  },
  {
    "label": "blockCount()",
    "kind": "Method",
    "detail": "Function (const StorageIndex total_block_count = block_mapper .)",
    "insertText": "blockCount()"
  },
  {
    "label": "blockDescriptor()",
    "kind": "Method",
    "detail": "Function (TensorBlockDesc desc = block_mapper .)",
    "insertText": "blockDescriptor(i)"
  },
  {
    "label": "evalBlock()",
    "kind": "Method",
    "detail": "Function (evaluator .)",
    "insertText": "evalBlock(desc, scratch)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (scratch .)",
    "insertText": "reset()"
  },
  {
    "label": "TensorExecutorTilingContext()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef EIGEN_USE_THREADS template<TensorBlockMapper> struct TensorExecutorTilingContext {)",
    "insertText": "TensorExecutorTilingContext()"
  },
  {
    "label": "TensorExecutorTilingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TensorExecutorTilingContext(const TensorBlockMapper& b_mapper, const TensorOpCost& b_cost, size_t b_aligned_size) : block_mapper(b_mapper), cost(b_cost), aligned_blocksize(b_aligned_size)"
  },
  {
    "label": "GetTensorExecutorTilingContext()",
    "kind": "Method",
    "detail": "Function (} TensorBlockMapper block_mapper ; TensorOpCost cost ; size_t aligned_blocksize ; } ; template<Evaluator,TensorBlockMapper,bool Vectorizable> TensorExecutorTilingContext<TensorBlockMapper>)",
    "insertText": "GetTensorExecutorTilingContext(const Evaluator& evaluator)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (requirements . size = static_cast<)",
    "insertText": "size_t(1.0 / taskSize)"
  },
  {
    "label": "block_mapper()",
    "kind": "Method",
    "detail": "Function (TensorBlockMapper)",
    "insertText": "block_mapper(typename TensorBlockMapper::Dimensions(evaluator.dimensions()), requirements)"
  },
  {
    "label": "blockTotalSize()",
    "kind": "Method",
    "detail": "Function (size_t block_size = block_mapper .)",
    "insertText": "blockTotalSize()"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (const size_t align =)",
    "insertText": "maxi(EIGEN_MAX_ALIGN_BYTES, 1)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t aligned_blocksize = align* divup<)",
    "insertText": "size_t(block_size * sizeof(typename Evaluator::Scalar), align)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (Evaluator evaluator =* evaluator_in ;)",
    "insertText": "eigen_assert(lastIdx >= firstIdx)"
  },
  {
    "label": "alignBlockSize()",
    "kind": "Method",
    "detail": "Function (} } StorageIndex)",
    "insertText": "alignBlockSize(StorageIndex size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StorageIndex i = firstIdx ;)",
    "insertText": "if(lastIdx - firstIdx >= PacketSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(firstIdx % PacketSize == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (StorageIndex last_chunk_offset = lastIdx - 4* PacketSize ;)",
    "insertText": "for(; i <= last_chunk_offset; i += 4 * PacketSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } last_chunk_offset = lastIdx - PacketSize ;)",
    "insertText": "for(; i <= last_chunk_offset; i += PacketSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(; i < lastIdx; ++i)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(size + PacketSize - 1) & ~(PacketSize - 1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Expression,bool Vectorizable,TiledEvaluation Tiling> class TensorExecutor<Expression,ThreadPoolDevice,Vectorizable,Tiling> { public : typedef Expression::Index StorageIndex ; EIGEN_STRONG_INLINE void)",
    "insertText": "run(const Expression& expr, const ThreadPoolDevice& device)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (const bool needs_assign = evaluator .)",
    "insertText": "evalSubExprsIfNeeded(nullptr)"
  },
  {
    "label": "parallelFor()",
    "kind": "Method",
    "detail": "Function (device .)",
    "insertText": "parallelFor(size, evaluator.costPerCoeff(Vectorizable), EvalRange::alignBlockSize, [&evaluator](StorageIndex firstIdx, StorageIndex lastIdx) { EvalRange::run(&evaluator, firstIdx, lastIdx); })"
  },
  {
    "label": "Vectorizable()",
    "kind": "Method",
    "detail": "Function (const TilingContext tiling = internal::GetTensorExecutorTilingContext<Evaluator,BlockMapper,)",
    "insertText": "Vectorizable(evaluator)"
  },
  {
    "label": "tiling()",
    "kind": "Method",
    "detail": "Function (auto eval_block = [& device,& evaluator,&)",
    "insertText": "tiling(IndexType firstBlockIdx, IndexType lastBlockIdx)"
  },
  {
    "label": "blockDescriptor()",
    "kind": "Method",
    "detail": "Function (TensorBlockDesc desc = tiling . block_mapper .)",
    "insertText": "blockDescriptor(block_idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "if(tiling.block_mapper.blockCount() == 1)"
  },
  {
    "label": "desc()",
    "kind": "Method",
    "detail": "Function (TensorBlockDesc)",
    "insertText": "desc(0, tiling.block_mapper.blockDimensions())"
  },
  {
    "label": "parallelFor()",
    "kind": "Method",
    "detail": "Function (} else { device .)",
    "insertText": "parallelFor(tiling.block_mapper.blockCount(), tiling.cost, eval_block)"
  },
  {
    "label": "runAsync()",
    "kind": "Method",
    "detail": "Function (} } ; template<Expression,DoneCallback,bool Vectorizable,TiledEvaluation Tiling> class TensorAsyncExecutor<Expression,ThreadPoolDevice,DoneCallback,Vectorizable,Tiling> { public : typedef Expression::Index StorageIndex ; typedef TensorEvaluator<Expression,ThreadPoolDevice> Evaluator ; EIGEN_STRONG_INLINE void)",
    "insertText": "runAsync(const Expression& expr, const ThreadPoolDevice& device, DoneCallback done)"
  },
  {
    "label": "TensorAsyncExecutorContext()",
    "kind": "Method",
    "detail": "Function (TensorAsyncExecutorContext* const ctx = new)",
    "insertText": "TensorAsyncExecutorContext(expr, device, std::move(done))"
  },
  {
    "label": "device()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "device(bool need_assign)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (delete ctx ; return ; } typedef EvalRange<Evaluator,StorageIndex,Vectorizable> EvalRange ; const StorageIndex size =)",
    "insertText": "array_prod(ctx->evaluator.dimensions())"
  },
  {
    "label": "parallelForAsync()",
    "kind": "Method",
    "detail": "Function (device .)",
    "insertText": "parallelForAsync(size, ctx->evaluator.costPerCoeff(Vectorizable), EvalRange::alignBlockSize, [ctx](StorageIndex firstIdx, StorageIndex lastIdx) { EvalRange::run(&ctx->evaluator, firstIdx, lastIdx); }, [ctx]() { delete ctx; })"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (} ; ctx -> evaluator .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, on_eval_subexprs)"
  },
  {
    "label": "TensorAsyncExecutorContext()",
    "kind": "Method",
    "detail": "Function (} private : struct TensorAsyncExecutorContext {)",
    "insertText": "TensorAsyncExecutorContext(const Expression& expr, const ThreadPoolDevice& thread_pool, DoneCallback done) : evaluator(expr, thread_pool), on_done(std::move(done))"
  },
  {
    "label": "TensorAsyncExecutorContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TensorAsyncExecutorContext()"
  },
  {
    "label": "on_done()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "on_done()"
  },
  {
    "label": "ctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ctx(bool need_assign)"
  },
  {
    "label": "Vectorizable()",
    "kind": "Method",
    "detail": "Function (delete ctx ; return ; } ctx -> tiling = internal::GetTensorExecutorTilingContext<Evaluator,BlockMapper,)",
    "insertText": "Vectorizable(ctx->evaluator)"
  },
  {
    "label": "ctx()",
    "kind": "Method",
    "detail": "Function (auto eval_block = [)",
    "insertText": "ctx(IndexType firstBlockIdx, IndexType lastBlockIdx)"
  },
  {
    "label": "scratch()",
    "kind": "Method",
    "detail": "Function (TensorBlockScratch)",
    "insertText": "scratch(ctx->device)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "if(ctx->tiling.block_mapper.blockCount() == 1)"
  },
  {
    "label": "desc()",
    "kind": "Method",
    "detail": "Function (TensorBlockDesc)",
    "insertText": "desc(0, ctx->tiling.block_mapper.blockDimensions())"
  },
  {
    "label": "parallelForAsync()",
    "kind": "Method",
    "detail": "Function (delete ctx ; } else { ctx -> device .)",
    "insertText": "parallelForAsync(ctx->tiling.block_mapper.blockCount(), ctx->tiling.cost, eval_block, [ctx]() { delete ctx; })"
  },
  {
    "label": "TensorAsyncExecutorContext()",
    "kind": "Method",
    "detail": "Function (} private : struct TensorAsyncExecutorContext {)",
    "insertText": "TensorAsyncExecutorContext(const Expression& expr, const ThreadPoolDevice& thread_pool, DoneCallback done) : device(thread_pool), evaluator(expr, thread_pool), on_done(std::move(done))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} const ThreadPoolDevice& device ; Evaluator evaluator ; TilingContext tiling ; private : DoneCallback on_done ; } ; } ; # endif # if)",
    "insertText": "defined(EIGEN_USE_GPU)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (public : typedef Expression::Index StorageIndex ; void)",
    "insertText": "run(const Expression& expr, const GpuDevice& device)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "defined(EIGEN_GPUCC)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "run(Evaluator& eval, StorageIndex firstIdx, StorageIndex lastIdx, StorageIndex step_size)"
  },
  {
    "label": "vectorized_size()",
    "kind": "Method",
    "detail": "Function (const StorageIndex PacketSize = unpacket_traits<Evaluator::PacketReturnType>::size ; const StorageIndex)",
    "insertText": "vectorized_size(lastIdx / PacketSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const StorageIndex vectorized_step_size = step_size* PacketSize ;)",
    "insertText": "for(StorageIndex i = firstIdx * PacketSize; i < vectorized_size; i += vectorized_step_size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(StorageIndex i = vectorized_size + firstIdx; i < lastIdx; i += step_size)"
  },
  {
    "label": "__launch_bounds__()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Evaluator,StorageIndex> __global__ void)",
    "insertText": "__launch_bounds__(1024) EigenMetaKernel(Evaluator eval, StorageIndex size)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (const StorageIndex first_index = blockIdx . x* blockDim . x + threadIdx . x ; const StorageIndex step_size = blockDim . x* gridDim . x ; const bool vectorizable = Evaluator::PacketAccess& Evaluator::IsAligned ; EigenMetaKernelEval<Evaluator,StorageIndex,vectorizable)",
    "insertText": "run(eval, first_index, size, step_size)"
  },
  {
    "label": "maxGpuThreadsPerBlock()",
    "kind": "Method",
    "detail": "Function (const int block_size = device .)",
    "insertText": "maxGpuThreadsPerBlock()"
  },
  {
    "label": "getNumGpuMultiProcessors()",
    "kind": "Method",
    "detail": "Function (const int max_blocks = device .)",
    "insertText": "getNumGpuMultiProcessors() * device.maxGpuThreadsPerMultiProcessor()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int num_blocks = numext::maxi<)",
    "insertText": "int(numext::mini<int>(max_blocks, divup<int>(size, block_size)), 1)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenMetaKernel<TensorEvaluator<Expression, GpuDevice>, StorageIndex>), num_blocks, block_size, 0, device, evaluator, size)"
  },
  {
    "label": "ExecExprFunctorKernel()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # ifdef EIGEN_USE_SYCL template<Evaluator> struct ExecExprFunctorKernel { typedef Evaluator::Index Index ; Evaluator evaluator ; const Index range ; template<Scratch> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "ExecExprFunctorKernel(const Scratch, Evaluator evaluator_, const Index range_) : evaluator(evaluator_), range(range_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void)",
    "insertText": "operator()( cl::sycl::nd_item<1> itemID)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(itemID)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<bool is_vec = Evaluator::PacketAccess> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE std::enable_if<! is_vec>::type)",
    "insertText": "compute(const cl::sycl::nd_item<1>& itemID)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index gId = static_cast<)",
    "insertText": "Index(itemID.get_global_linear_id())"
  },
  {
    "label": "get_global_range()",
    "kind": "Method",
    "detail": "Function (Index total_threads = itemID .)",
    "insertText": "get_global_range(0)"
  },
  {
    "label": "vectorizedRange()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "vectorizedRange(range / Evaluator::PacketSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index start = Evaluator::PacketSize* gId ;)",
    "insertText": "for(Index i = start; i < vectorizedRange; i += step)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} gId + = vectorizedRange ;)",
    "insertText": "for(Index i = gId; i < range; i += itemID.get_global_range(0))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Expression,bool Vectorizable,TiledEvaluation Tiling> class TensorExecutor<Expression,Eigen::SyclDevice,Vectorizable,Tiling> { public : typedef Expression::Index Index ; EIGEN_STRONG_INLINE void)",
    "insertText": "run(const Expression& expr, const Eigen::SyclDevice& dev)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (typedef Eigen::TensorEvaluator<Expression,Eigen::SyclDevice> Evaluator ; Evaluator)",
    "insertText": "evaluator(expr, dev)"
  },
  {
    "label": "total_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "total_size(total_size == 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const int PacketSize = Eigen::PacketType<Evaluator::CoeffReturnType,Eigen::SyclDevice>::size ; Index vectorizable_threads = static_cast<)",
    "insertText": "Index(total_size / PacketSize)"
  },
  {
    "label": "parallel_for_setup()",
    "kind": "Method",
    "detail": "Function (dev .)",
    "insertText": "parallel_for_setup(vectorizable_threads, tileSize, range, GRange)"
  },
  {
    "label": "Evaluator()",
    "kind": "Method",
    "detail": "Function (range = total_size ; dev . template nullary_kernel_launcher<Evaluator::CoeffReturnType,ExecExprFunctorKernel<)",
    "insertText": "Evaluator(evaluator, cl::sycl::nd_range<1>(cl::sycl::range<1>(GRange), cl::sycl::range<1>(tileSize)), Index(1), range)"
  }
]