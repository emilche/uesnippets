[
  {
    "label": "FFloat16Color",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloat16Color"
  },
  {
    "label": "TImagePixelDataTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImagePixelDataTraits"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IImagePixelDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IImagePixelDataPayload"
  },
  {
    "label": "FImagePixelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImagePixelData"
  },
  {
    "label": "TImagePixelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImagePixelData"
  },
  {
    "label": "IImagePixelDataPayload()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / CoreDefines . h \" # include \" Math / IntPoint . h \" # include \" IImageWrapper . h \" # include \" Templates / UniquePtr . h \" # include \" ImageCore . h \" class FFloat16Color ; template<PixelType> struct TImagePixelDataTraits ; enum class EImagePixelType { Color,Float16,Float32,} ; struct IImagePixelDataPayload { ~)",
    "insertText": "IImagePixelDataPayload()"
  },
  {
    "label": "FImagePixelData()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSharedPtr<IImagePixelDataPayload,ESPMode::ThreadSafe> FImagePixelPayloadPtr ; struct FImagePixelData { ~)",
    "insertText": "FImagePixelData()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} EImagePixelType)",
    "insertText": "GetType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const void* RawPtr = nullptr ; int64 SizeBytes = 0 ; FImageView Ret ;)",
    "insertText": "if(! GetRawData(RawPtr, SizeBytes))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(NumChannels == 4)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (Ret =)",
    "insertText": "FImageView((const FColor *)RawPtr, Size.X, Size.Y, bSRGB ? EGammaSpace::sRGB : EGammaSpace::Linear)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (break ; case EImagePixelType::Float16 :)",
    "insertText": "check(PixelLayout == ERGBFormat::RGBAF)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (Ret =)",
    "insertText": "FImageView((const FFloat16Color *)RawPtr, Size.X, Size.Y)"
  },
  {
    "label": "FImageView()",
    "kind": "Method",
    "detail": "Function (Ret =)",
    "insertText": "FImageView((const FLinearColor *)RawPtr, Size.X, Size.Y)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "check(0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Ret.GetImageSizeBytes() == SizeBytes)"
  },
  {
    "label": "SetAlphaOpaque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlphaOpaque(GetImageView())"
  },
  {
    "label": "IsDataWellFormed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDataWellFormed()"
  },
  {
    "label": "GetRawData()",
    "kind": "Method",
    "detail": "Function (const void* RawPtr = nullptr ; int64 SizeBytes = 0 ; return)",
    "insertText": "GetRawData(RawPtr, SizeBytes)"
  },
  {
    "label": "GetRawData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRawData(const void*& OutRawData, int64& OutSizeBytes)"
  },
  {
    "label": "RetrieveData()",
    "kind": "Method",
    "detail": "Function (const void* RawPtr = nullptr ; int64 SizeBytes = 0 ;)",
    "insertText": "RetrieveData(RawPtr, SizeBytes)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (int64 FoundTotalSize =)",
    "insertText": "int64(Size.X)*int64(Size.Y)*int64(BitDepth / 8)*int64(NumChannels)"
  },
  {
    "label": "GetRawDataSizeInBytes()",
    "kind": "Method",
    "detail": "Function (OutRawData = RawPtr ; OutSizeBytes = SizeBytes ; return true ; } return false ; } int64)",
    "insertText": "GetRawDataSizeInBytes()"
  },
  {
    "label": "MoveImageDataToNew()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FImagePixelData>)",
    "insertText": "MoveImageDataToNew()"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetPayload()"
  },
  {
    "label": "SetPayload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPayload(FImagePixelPayloadPtr NewPayload)"
  },
  {
    "label": "GetSRGB()",
    "kind": "Method",
    "detail": "Function (Payload = NewPayload ; } bool)",
    "insertText": "GetSRGB()"
  },
  {
    "label": "FImagePixelData()",
    "kind": "Method",
    "detail": "Function (bSRGB = InSRGB ; } protected :)",
    "insertText": "FImagePixelData(const FIntPoint& InSize, EImagePixelType InPixelType, ERGBFormat InPixelLayout, uint8 InBitDepth, uint8 InNumChannels, FImagePixelPayloadPtr InPayload) : Size(InSize) , Type(InPixelType) , PixelLayout(InPixelLayout) , BitDepth(InBitDepth) , NumChannels(InNumChannels) , Payload(InPayload)"
  },
  {
    "label": "bSRGB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bSRGB(InPixelType == EImagePixelType::Color)"
  },
  {
    "label": "RetrieveData()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RetrieveData(const void*& OutDataPtr, int64& OutSizeBytes)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FImagePixelData>)",
    "insertText": "Copy()"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FImagePixelData>)",
    "insertText": "Move()"
  },
  {
    "label": "TImagePixelData()",
    "kind": "Method",
    "detail": "Function (FIntPoint Size ; EImagePixelType Type ; ERGBFormat PixelLayout ; uint8 BitDepth ; uint8 NumChannels ; bool bSRGB ; FImagePixelPayloadPtr Payload ; } ; template<PixelType> struct TImagePixelData : FImagePixelData { TArray64<PixelType> Pixels ;)",
    "insertText": "TImagePixelData(const FIntPoint& InSize) : FImagePixelData(InSize, TImagePixelDataTraits<PixelType>::PixelType, TImagePixelDataTraits<PixelType>::PixelLayout, TImagePixelDataTraits<PixelType>::BitDepth, TImagePixelDataTraits<PixelType>::NumChannels, nullptr)"
  },
  {
    "label": "TImagePixelData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImagePixelData(const FIntPoint& InSize, TArray64<PixelType>&& InPixels) : FImagePixelData(InSize, TImagePixelDataTraits<PixelType>::PixelType, TImagePixelDataTraits<PixelType>::PixelLayout, TImagePixelDataTraits<PixelType>::BitDepth, TImagePixelDataTraits<PixelType>::NumChannels, nullptr) , Pixels(MoveTemp(InPixels))"
  },
  {
    "label": "TImagePixelData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImagePixelData(const FIntPoint& InSize, FImagePixelPayloadPtr InPayload) : FImagePixelData(InSize, TImagePixelDataTraits<PixelType>::PixelType, TImagePixelDataTraits<PixelType>::PixelLayout, TImagePixelDataTraits<PixelType>::BitDepth, TImagePixelDataTraits<PixelType>::NumChannels, InPayload)"
  },
  {
    "label": "TImagePixelData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImagePixelData(const FIntPoint& InSize, TArray64<PixelType>&& InPixels, FImagePixelPayloadPtr InPayload) : FImagePixelData(InSize, TImagePixelDataTraits<PixelType>::PixelType, TImagePixelDataTraits<PixelType>::PixelLayout, TImagePixelDataTraits<PixelType>::BitDepth, TImagePixelDataTraits<PixelType>::NumChannels, InPayload) , Pixels(MoveTemp(InPixels))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (OutDataPtr = static_cast<const)",
    "insertText": "void(&Pixels[0])"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (OutSizeBytes = Pixels .)",
    "insertText": "Num() * sizeof(PixelType)"
  }
]