[
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "Duration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Duration"
  },
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "TimeZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZone"
  },
  {
    "label": "Breakdown",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Breakdown"
  },
  {
    "label": "CivilInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CivilInfo"
  },
  {
    "label": "TimeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeInfo"
  },
  {
    "label": "CivilKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CivilKind"
  },
  {
    "label": "CivilTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CivilTransition"
  },
  {
    "label": "TimeConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeConversion"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_TIME_H_ # define ABSL_TIME_TIME_H_ # if !)",
    "insertText": "defined(_MSC_VER)"
  },
  {
    "label": "IDivDuration()",
    "kind": "Method",
    "detail": "Function (# endif # include<chrono> # include<cmath> # include<cstdint> # include<ctime> # include<ostream> # include<string> # include<type_traits> # include<utility> # include \" absl / base / macros . h \" # include \" absl / strings / string_view . h \" # include \" absl / time / civil_time . h \" # include \" absl / time / internal / cctz / include / cctz / time_zone . h \" namespace absl { ABSL_NAMESPACE_BEGIN class Duration ; class Time ; class TimeZone ; namespace time_internal { int64_t)",
    "insertText": "IDivDuration(bool satq, Duration num, Duration den, Duration* rem)"
  },
  {
    "label": "FromUnixDuration()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixDuration(Duration d)"
  },
  {
    "label": "ToUnixDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "ToUnixDuration(Time t)"
  },
  {
    "label": "GetRepHi()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetRepHi(Duration d)"
  },
  {
    "label": "GetRepLo()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRepLo(Duration d)"
  },
  {
    "label": "MakeDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "MakeDuration(int64_t hi, uint32_t lo)"
  },
  {
    "label": "MakeDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "MakeDuration(int64_t hi, int64_t lo)"
  },
  {
    "label": "MakePosDoubleDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "MakePosDoubleDuration(double n)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (int64_t kTicksPerNanosecond = 4 ; int64_t kTicksPerSecond = 1 0 0 0* 1 0 0 0* 1 0 0 0* kTicksPerNanosecond ; template<std::intmax_t N> Duration)",
    "insertText": "FromInt64(int64_t v, std::ratio<1, N>)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromInt64(int64_t v, std::ratio<60>)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromInt64(int64_t v, std::ratio<3600>)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (template<T> using EnableIfIntegral = std::enable_if<std::is_integral<T>::value | | std::is_enum<T>::value,int>::type ; template<T> using EnableIfFloat = std::enable_if<std::is_floating_point<T>::value,int>::type ; } class Duration { public :)",
    "insertText": "Duration() : rep_hi_(0), rep_lo_(0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(__clang__) && defined(_MSC_VER) && _MSC_VER < 1930 constexpr Duration(const Duration& d) : rep_hi_(d.rep_hi_), rep_lo_(d.rep_lo_)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "Duration(const Duration& d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif Duration&)",
    "insertText": "operator(const Duration& d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Duration&)",
    "insertText": "operator(Duration d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Duration&)",
    "insertText": "operator(int64_t r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Duration&)",
    "insertText": "operator(double r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Duration&)",
    "insertText": "operator(Duration rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T,time_internal::EnableIfIntegral<T> = 0> Duration&)",
    "insertText": "operator(T r)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Duration(int64_t hi, uint32_t lo) : rep_hi_(hi), rep_lo_(lo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int64_t rep_hi_ ; uint32_t rep_lo_ ; } ; bool)",
    "insertText": "operator(Duration lhs, Duration rhs)"
  },
  {
    "label": "FDivDuration()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FDivDuration(Duration num, Duration den)"
  },
  {
    "label": "ZeroDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "ZeroDuration()"
  },
  {
    "label": "AbsDuration()",
    "kind": "Method",
    "detail": "Function (} Duration)",
    "insertText": "AbsDuration(Duration d)"
  },
  {
    "label": "Trunc()",
    "kind": "Method",
    "detail": "Function (} Duration)",
    "insertText": "Trunc(Duration d, Duration unit)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "Floor(Duration d, Duration unit)"
  },
  {
    "label": "Ceil()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "Ceil(Duration d, Duration unit)"
  },
  {
    "label": "InfiniteDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "InfiniteDuration()"
  },
  {
    "label": "Nanoseconds()",
    "kind": "Method",
    "detail": "Function (template<T,time_internal::EnableIfIntegral<T> = 0> Duration)",
    "insertText": "Nanoseconds(T n)"
  },
  {
    "label": "Microseconds()",
    "kind": "Method",
    "detail": "Function (} template<T,time_internal::EnableIfIntegral<T> = 0> Duration)",
    "insertText": "Microseconds(T n)"
  },
  {
    "label": "Milliseconds()",
    "kind": "Method",
    "detail": "Function (} template<T,time_internal::EnableIfIntegral<T> = 0> Duration)",
    "insertText": "Milliseconds(T n)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (} template<T,time_internal::EnableIfIntegral<T> = 0> Duration)",
    "insertText": "Seconds(T n)"
  },
  {
    "label": "Minutes()",
    "kind": "Method",
    "detail": "Function (} template<T,time_internal::EnableIfIntegral<T> = 0> Duration)",
    "insertText": "Minutes(T n)"
  },
  {
    "label": "Hours()",
    "kind": "Method",
    "detail": "Function (} template<T,time_internal::EnableIfIntegral<T> = 0> Duration)",
    "insertText": "Hours(T n)"
  },
  {
    "label": "MakePosDoubleDuration()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MakePosDoubleDuration(n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(std::isnan(n)) return std::signbit(n) ? -InfiniteDuration() : InfiniteDuration()"
  },
  {
    "label": "ToInt64Nanoseconds()",
    "kind": "Method",
    "detail": "Function (} ABSL_ATTRIBUTE_PURE_FUNCTION int64_t)",
    "insertText": "ToInt64Nanoseconds(Duration d)"
  },
  {
    "label": "ToInt64Microseconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION int64_t)",
    "insertText": "ToInt64Microseconds(Duration d)"
  },
  {
    "label": "ToInt64Milliseconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION int64_t)",
    "insertText": "ToInt64Milliseconds(Duration d)"
  },
  {
    "label": "ToInt64Seconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION int64_t)",
    "insertText": "ToInt64Seconds(Duration d)"
  },
  {
    "label": "ToInt64Minutes()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION int64_t)",
    "insertText": "ToInt64Minutes(Duration d)"
  },
  {
    "label": "ToInt64Hours()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION int64_t)",
    "insertText": "ToInt64Hours(Duration d)"
  },
  {
    "label": "ToDoubleNanoseconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION double)",
    "insertText": "ToDoubleNanoseconds(Duration d)"
  },
  {
    "label": "ToDoubleMicroseconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION double)",
    "insertText": "ToDoubleMicroseconds(Duration d)"
  },
  {
    "label": "ToDoubleMilliseconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION double)",
    "insertText": "ToDoubleMilliseconds(Duration d)"
  },
  {
    "label": "ToDoubleSeconds()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION double)",
    "insertText": "ToDoubleSeconds(Duration d)"
  },
  {
    "label": "ToDoubleMinutes()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION double)",
    "insertText": "ToDoubleMinutes(Duration d)"
  },
  {
    "label": "ToDoubleHours()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_PURE_FUNCTION double)",
    "insertText": "ToDoubleHours(Duration d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::nanoseconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::microseconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::milliseconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::seconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::minutes& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::hours& d)"
  },
  {
    "label": "ToChronoNanoseconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "ToChronoNanoseconds(Duration d)"
  },
  {
    "label": "ToChronoMicroseconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::microseconds)",
    "insertText": "ToChronoMicroseconds(Duration d)"
  },
  {
    "label": "ToChronoMilliseconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::milliseconds)",
    "insertText": "ToChronoMilliseconds(Duration d)"
  },
  {
    "label": "ToChronoSeconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::seconds)",
    "insertText": "ToChronoSeconds(Duration d)"
  },
  {
    "label": "ToChronoMinutes()",
    "kind": "Method",
    "detail": "Function (std::chrono::minutes)",
    "insertText": "ToChronoMinutes(Duration d)"
  },
  {
    "label": "ToChronoHours()",
    "kind": "Method",
    "detail": "Function (std::chrono::hours)",
    "insertText": "ToChronoHours(Duration d)"
  },
  {
    "label": "FormatDuration()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatDuration(Duration d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, Duration d)"
  },
  {
    "label": "ParseDuration()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ParseDuration(absl::string_view dur_string, Duration* d)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view text, Duration* dst, std::string* error)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(Duration d)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use AbslParseFlag() instead.\") bool ParseFlag(const std::string& text, Duration* dst, std::string* error)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use AbslUnparseFlag() instead.\") std::string UnparseFlag(Duration d)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (class Time { public :)",
    "insertText": "Time()"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Time(const Time& t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Time&)",
    "insertText": "operator(const Time& t)"
  },
  {
    "label": "In()",
    "kind": "Method",
    "detail": "Function (rep_ - = d ; return* this ; } struct Breakdown { int64_t year ; int month ; int day ; int hour ; int minute ; int second ; Duration subsecond ; int weekday ; int yearday ; int offset ; bool is_dst ; const char* zone_abbr ; } ; Breakdown)",
    "insertText": "In(TimeZone tz)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (template<H> H)",
    "insertText": "AbslHashValue(H h, Time t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(Time lhs, Time rhs)"
  },
  {
    "label": "UniversalEpoch()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "UniversalEpoch()"
  },
  {
    "label": "InfiniteFuture()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "InfiniteFuture()"
  },
  {
    "label": "InfinitePast()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "InfinitePast()"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Time(Duration rep) : rep_(rep)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Time)",
    "insertText": "operator(Time lhs, Duration rhs)"
  },
  {
    "label": "FromUnixNanos()",
    "kind": "Method",
    "detail": "Function (} Time)",
    "insertText": "FromUnixNanos(int64_t ns)"
  },
  {
    "label": "FromUnixMicros()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixMicros(int64_t us)"
  },
  {
    "label": "FromUnixMillis()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixMillis(int64_t ms)"
  },
  {
    "label": "FromUnixSeconds()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixSeconds(int64_t s)"
  },
  {
    "label": "FromTimeT()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromTimeT(time_t t)"
  },
  {
    "label": "FromUDate()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUDate(double udate)"
  },
  {
    "label": "FromUniversal()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUniversal(int64_t universal)"
  },
  {
    "label": "ToUnixNanos()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixNanos(Time t)"
  },
  {
    "label": "ToUnixMicros()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixMicros(Time t)"
  },
  {
    "label": "ToUnixMillis()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixMillis(Time t)"
  },
  {
    "label": "ToUnixSeconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixSeconds(Time t)"
  },
  {
    "label": "ToTimeT()",
    "kind": "Method",
    "detail": "Function (time_t)",
    "insertText": "ToTimeT(Time t)"
  },
  {
    "label": "ToUniversal()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUniversal(Time t)"
  },
  {
    "label": "DurationFromTimespec()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "DurationFromTimespec(timespec ts)"
  },
  {
    "label": "DurationFromTimeval()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "DurationFromTimeval(timeval tv)"
  },
  {
    "label": "ToTimespec()",
    "kind": "Method",
    "detail": "Function (timespec)",
    "insertText": "ToTimespec(Duration d)"
  },
  {
    "label": "ToTimeval()",
    "kind": "Method",
    "detail": "Function (timeval)",
    "insertText": "ToTimeval(Duration d)"
  },
  {
    "label": "TimeFromTimespec()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "TimeFromTimespec(timespec ts)"
  },
  {
    "label": "TimeFromTimeval()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "TimeFromTimeval(timeval tv)"
  },
  {
    "label": "ToTimespec()",
    "kind": "Method",
    "detail": "Function (timespec)",
    "insertText": "ToTimespec(Time t)"
  },
  {
    "label": "ToTimeval()",
    "kind": "Method",
    "detail": "Function (timeval)",
    "insertText": "ToTimeval(Time t)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromChrono(const std::chrono::system_clock::time_point& tp)"
  },
  {
    "label": "ToChronoTime()",
    "kind": "Method",
    "detail": "Function (std::chrono::system_clock::time_point)",
    "insertText": "ToChronoTime(Time)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view text, Time* t, std::string* error)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(Time t)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use AbslParseFlag() instead.\") bool ParseFlag(const std::string& text, Time* t, std::string* error)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use AbslUnparseFlag() instead.\") std::string UnparseFlag(Time t)"
  },
  {
    "label": "TimeZone()",
    "kind": "Method",
    "detail": "Function (class TimeZone { public :)",
    "insertText": "TimeZone(time_internal::cctz::time_zone tz) : cz_(tz)"
  },
  {
    "label": "TimeZone()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeZone()"
  },
  {
    "label": "TimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeZone(const TimeZone&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeZone&)",
    "insertText": "operator(const TimeZone&)"
  },
  {
    "label": "time_zone()",
    "kind": "Method",
    "detail": "Function (operator time_internal::)",
    "insertText": "time_zone()"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} struct CivilInfo { CivilSecond cs ; Duration subsecond ; int offset ; bool is_dst ; const char* zone_abbr ; } ; CivilInfo)",
    "insertText": "At(Time t)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (struct TimeInfo { enum CivilKind { UNIQUE,SKIPPED,REPEATED,} kind ; Time pre ; Time trans ; Time post ; } ; TimeInfo)",
    "insertText": "At(CivilSecond ct)"
  },
  {
    "label": "NextTransition()",
    "kind": "Method",
    "detail": "Function (struct CivilTransition { CivilSecond from ; CivilSecond to ; } ; bool)",
    "insertText": "NextTransition(Time t, CivilTransition* trans)"
  },
  {
    "label": "PrevTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrevTransition(Time t, CivilTransition* trans)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (template<H> H)",
    "insertText": "AbslHashValue(H h, TimeZone tz)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "operator(TimeZone a, TimeZone b)"
  },
  {
    "label": "LoadTimeZone()",
    "kind": "Method",
    "detail": "Function (} time_internal::cctz::time_zone cz_ ; } ; bool)",
    "insertText": "LoadTimeZone(absl::string_view name, TimeZone* tz)"
  },
  {
    "label": "TimeZone()",
    "kind": "Method",
    "detail": "Function (* tz =)",
    "insertText": "TimeZone(time_internal::cctz::local_time_zone())"
  },
  {
    "label": "TimeZone()",
    "kind": "Method",
    "detail": "Function (* tz =)",
    "insertText": "TimeZone(cz)"
  },
  {
    "label": "UTCTimeZone()",
    "kind": "Method",
    "detail": "Function (} TimeZone)",
    "insertText": "UTCTimeZone()"
  },
  {
    "label": "LocalTimeZone()",
    "kind": "Method",
    "detail": "Function (} TimeZone)",
    "insertText": "LocalTimeZone()"
  },
  {
    "label": "ToCivilSecond()",
    "kind": "Method",
    "detail": "Function (} CivilSecond)",
    "insertText": "ToCivilSecond(Time t, TimeZone tz)"
  },
  {
    "label": "ToCivilMinute()",
    "kind": "Method",
    "detail": "Function (} CivilMinute)",
    "insertText": "ToCivilMinute(Time t, TimeZone tz)"
  },
  {
    "label": "ToCivilHour()",
    "kind": "Method",
    "detail": "Function (} CivilHour)",
    "insertText": "ToCivilHour(Time t, TimeZone tz)"
  },
  {
    "label": "ToCivilDay()",
    "kind": "Method",
    "detail": "Function (} CivilDay)",
    "insertText": "ToCivilDay(Time t, TimeZone tz)"
  },
  {
    "label": "ToCivilMonth()",
    "kind": "Method",
    "detail": "Function (} CivilMonth)",
    "insertText": "ToCivilMonth(Time t, TimeZone tz)"
  },
  {
    "label": "ToCivilYear()",
    "kind": "Method",
    "detail": "Function (} CivilYear)",
    "insertText": "ToCivilYear(Time t, TimeZone tz)"
  },
  {
    "label": "FromCivil()",
    "kind": "Method",
    "detail": "Function (} Time)",
    "insertText": "FromCivil(CivilSecond ct, TimeZone tz)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (const auto ti = tz .)",
    "insertText": "At(ct)"
  },
  {
    "label": "FromDateTime()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromDateTime(int64_t year, int mon, int day, int hour, int min, int sec, TimeZone tz)"
  },
  {
    "label": "FromTM()",
    "kind": "Method",
    "detail": "Function (} Time)",
    "insertText": "FromTM(const struct tm& tm, TimeZone tz)"
  },
  {
    "label": "ToTM()",
    "kind": "Method",
    "detail": "Function (struct tm)",
    "insertText": "ToTM(Time t, TimeZone tz)"
  },
  {
    "label": "FormatTime()",
    "kind": "Method",
    "detail": "Function (ABSL_DLL const char RFC3339_full [ ] ; ABSL_DLL const char RFC3339_sec [ ] ; ABSL_DLL const char RFC1123_full [ ] ; ABSL_DLL const char RFC1123_no_wday [ ] ; std::string)",
    "insertText": "FormatTime(absl::string_view format, Time t, TimeZone tz)"
  },
  {
    "label": "FormatTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatTime(Time t, TimeZone tz)"
  },
  {
    "label": "FormatTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatTime(Time t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, Time t)"
  },
  {
    "label": "ParseTime()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ParseTime(absl::string_view format, absl::string_view input, Time* time, std::string* err)"
  },
  {
    "label": "ParseTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseTime(absl::string_view format, absl::string_view input, TimeZone tz, Time* time, std::string* err)"
  },
  {
    "label": "MakeDuration()",
    "kind": "Method",
    "detail": "Function (namespace time_internal { Duration)",
    "insertText": "MakeDuration(int64_t hi, uint32_t lo = 0)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (const int64_t int_secs = static_cast<)",
    "insertText": "int64_t(n)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t ticks = static_cast<)",
    "insertText": "uint32_t(std::round((n - static_cast<double>(int_secs)) * kTicksPerSecond))"
  },
  {
    "label": "MakeNormalizedDuration()",
    "kind": "Method",
    "detail": "Function (} Duration)",
    "insertText": "MakeNormalizedDuration(int64_t sec, int64_t ticks)"
  },
  {
    "label": "OppositeInfinity()",
    "kind": "Method",
    "detail": "Function (0 } ; } Duration)",
    "insertText": "OppositeInfinity(Duration d)"
  },
  {
    "label": "NegateAndSubtractOne()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "NegateAndSubtractOne(int64_t n)"
  },
  {
    "label": "IsValidRep64()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "IsValidRep64(int) -> decltype(int64_t{std::declval<T>()} == 0)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} template<Ratio> int64_t)",
    "insertText": "ToInt64(Duration d, Ratio)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToInt64(Duration d, std::nano)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToInt64(Duration d, std::micro)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToInt64(Duration d, std::milli)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToInt64(Duration d, std::ratio<1>)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToInt64(Duration d, std::ratio<60>)"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "ToInt64(Duration d, std::ratio<3600>)"
  },
  {
    "label": "ToChronoDuration()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "ToChronoDuration(Duration d)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using Rep = T::rep ; using Period = T::period ;)",
    "insertText": "static_assert(IsValidRep64<Rep>(0), \"duration::rep is invalid\")"
  },
  {
    "label": "ToInt64()",
    "kind": "Method",
    "detail": "Function (const auto v =)",
    "insertText": "ToInt64(d, Period{})"
  }
]