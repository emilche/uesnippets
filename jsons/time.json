[
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "Duration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Duration"
  },
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "TimeZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZone"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "Duration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Duration"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "Breakdown",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Breakdown"
  },
  {
    "label": "representing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "representing"
  },
  {
    "label": "TimeZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZone"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "CivilInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CivilInfo"
  },
  {
    "label": "TimeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeInfo"
  },
  {
    "label": "CivilKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CivilKind"
  },
  {
    "label": "CivilTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CivilTransition"
  },
  {
    "label": "TimeConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeConversion"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "cs()",
    "kind": "Method",
    "detail": "Function (absl::CivilSecond)",
    "insertText": "cs(2017, 1, 2, 3, 4, 5)"
  },
  {
    "label": "IDivDuration()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "IDivDuration(bool satq, Duration num, Duration den, Duration* rem)"
  },
  {
    "label": "FromUnixDuration()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixDuration(Duration d)"
  },
  {
    "label": "ToUnixDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "ToUnixDuration(Time t)"
  },
  {
    "label": "GetRepHi()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetRepHi(Duration d)"
  },
  {
    "label": "GetRepLo()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRepLo(Duration d)"
  },
  {
    "label": "MakeDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "MakeDuration(int64_t hi, uint32_t lo)"
  },
  {
    "label": "MakeDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "MakeDuration(int64_t hi, int64_t lo)"
  },
  {
    "label": "MakePosDoubleDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "MakePosDoubleDuration(double n)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromInt64(int64_t v, std::ratio<1, N>)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromInt64(int64_t v, std::ratio<60>)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromInt64(int64_t v, std::ratio<3600>)"
  },
  {
    "label": "FDivDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FDivDuration(Duration num, Duration den)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Duration()"
  },
  {
    "label": "Trunc()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "Trunc(Duration d, Duration unit)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "Floor(Duration d, Duration unit)"
  },
  {
    "label": "Ceil()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "Ceil(Duration d, Duration unit)"
  },
  {
    "label": "InfiniteDuration()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "InfiniteDuration()"
  },
  {
    "label": "InfiniteDuration()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "InfiniteDuration()"
  },
  {
    "label": "ToInt64Nanoseconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToInt64Nanoseconds(Duration d)"
  },
  {
    "label": "ToInt64Microseconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToInt64Microseconds(Duration d)"
  },
  {
    "label": "ToInt64Milliseconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToInt64Milliseconds(Duration d)"
  },
  {
    "label": "ToInt64Seconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToInt64Seconds(Duration d)"
  },
  {
    "label": "ToInt64Minutes()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToInt64Minutes(Duration d)"
  },
  {
    "label": "ToInt64Hours()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToInt64Hours(Duration d)"
  },
  {
    "label": "ToDoubleNanoseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToDoubleNanoseconds(Duration d)"
  },
  {
    "label": "ToDoubleMicroseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToDoubleMicroseconds(Duration d)"
  },
  {
    "label": "ToDoubleMilliseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToDoubleMilliseconds(Duration d)"
  },
  {
    "label": "ToDoubleSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToDoubleSeconds(Duration d)"
  },
  {
    "label": "ToDoubleMinutes()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToDoubleMinutes(Duration d)"
  },
  {
    "label": "ToDoubleHours()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToDoubleHours(Duration d)"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (std::chrono::milliseconds)",
    "insertText": "ms(123)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::nanoseconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::microseconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::milliseconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::seconds& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::minutes& d)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "FromChrono(const std::chrono::hours& d)"
  },
  {
    "label": "ToChronoNanoseconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "ToChronoNanoseconds(Duration d)"
  },
  {
    "label": "ToChronoMicroseconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::microseconds)",
    "insertText": "ToChronoMicroseconds(Duration d)"
  },
  {
    "label": "ToChronoMilliseconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::milliseconds)",
    "insertText": "ToChronoMilliseconds(Duration d)"
  },
  {
    "label": "ToChronoSeconds()",
    "kind": "Method",
    "detail": "Function (std::chrono::seconds)",
    "insertText": "ToChronoSeconds(Duration d)"
  },
  {
    "label": "ToChronoMinutes()",
    "kind": "Method",
    "detail": "Function (std::chrono::minutes)",
    "insertText": "ToChronoMinutes(Duration d)"
  },
  {
    "label": "ToChronoHours()",
    "kind": "Method",
    "detail": "Function (std::chrono::hours)",
    "insertText": "ToChronoHours(Duration d)"
  },
  {
    "label": "FormatDuration()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatDuration(Duration d)"
  },
  {
    "label": "ParseDuration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDuration(absl::string_view dur_string, Duration* d)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view text, Duration* dst, std::string* error)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(Duration d)"
  },
  {
    "label": "ParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFlag(const std::string& text, Duration* dst, std::string* error)"
  },
  {
    "label": "UnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "UnparseFlag(Duration d)"
  },
  {
    "label": "UniversalEpoch()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "UniversalEpoch()"
  },
  {
    "label": "InfiniteFuture()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "InfiniteFuture()"
  },
  {
    "label": "InfinitePast()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "InfinitePast()"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Time()"
  },
  {
    "label": "FromUnixNanos()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixNanos(int64_t ns)"
  },
  {
    "label": "FromUnixMicros()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixMicros(int64_t us)"
  },
  {
    "label": "FromUnixMillis()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixMillis(int64_t ms)"
  },
  {
    "label": "FromUnixSeconds()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUnixSeconds(int64_t s)"
  },
  {
    "label": "FromTimeT()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromTimeT(time_t t)"
  },
  {
    "label": "FromUDate()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUDate(double udate)"
  },
  {
    "label": "FromUniversal()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromUniversal(int64_t universal)"
  },
  {
    "label": "ToUnixNanos()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixNanos(Time t)"
  },
  {
    "label": "ToUnixMicros()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixMicros(Time t)"
  },
  {
    "label": "ToUnixMillis()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixMillis(Time t)"
  },
  {
    "label": "ToUnixSeconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUnixSeconds(Time t)"
  },
  {
    "label": "ToTimeT()",
    "kind": "Method",
    "detail": "Function (time_t)",
    "insertText": "ToTimeT(Time t)"
  },
  {
    "label": "ToUDate()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToUDate(Time t)"
  },
  {
    "label": "ToUniversal()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ToUniversal(Time t)"
  },
  {
    "label": "DurationFromTimespec()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "DurationFromTimespec(timespec ts)"
  },
  {
    "label": "DurationFromTimeval()",
    "kind": "Method",
    "detail": "Function (Duration)",
    "insertText": "DurationFromTimeval(timeval tv)"
  },
  {
    "label": "ToTimespec()",
    "kind": "Method",
    "detail": "Function (timespec)",
    "insertText": "ToTimespec(Duration d)"
  },
  {
    "label": "ToTimeval()",
    "kind": "Method",
    "detail": "Function (timeval)",
    "insertText": "ToTimeval(Duration d)"
  },
  {
    "label": "TimeFromTimespec()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "TimeFromTimespec(timespec ts)"
  },
  {
    "label": "TimeFromTimeval()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "TimeFromTimeval(timeval tv)"
  },
  {
    "label": "ToTimespec()",
    "kind": "Method",
    "detail": "Function (timespec)",
    "insertText": "ToTimespec(Time t)"
  },
  {
    "label": "ToTimeval()",
    "kind": "Method",
    "detail": "Function (timeval)",
    "insertText": "ToTimeval(Time t)"
  },
  {
    "label": "FromChrono()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromChrono(const std::chrono::system_clock::time_point& tp)"
  },
  {
    "label": "ToChronoTime()",
    "kind": "Method",
    "detail": "Function (std::chrono::system_clock::time_point)",
    "insertText": "ToChronoTime(Time)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view text, Time* t, std::string* error)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(Time t)"
  },
  {
    "label": "ParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFlag(const std::string& text, Time* t, std::string* error)"
  },
  {
    "label": "UnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "UnparseFlag(Time t)"
  },
  {
    "label": "ConvertDateTime()",
    "kind": "Method",
    "detail": "Function (TimeConversion)",
    "insertText": "ConvertDateTime(int64_t year, int mon, int day, int hour,\n                               int min, int sec, TimeZone tz)"
  },
  {
    "label": "FromTM()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "FromTM(const struct tm& tm, TimeZone tz)"
  },
  {
    "label": "ToTM()",
    "kind": "Method",
    "detail": "Function (tm)",
    "insertText": "ToTM(Time t, TimeZone tz)"
  },
  {
    "label": "cs()",
    "kind": "Method",
    "detail": "Function (absl::CivilSecond)",
    "insertText": "cs(2013, 1, 2, 3, 4, 5)"
  },
  {
    "label": "FormatTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatTime(absl::string_view format, Time t, TimeZone tz)"
  },
  {
    "label": "FormatTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatTime(Time t, TimeZone tz)"
  },
  {
    "label": "FormatTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatTime(Time t)"
  },
  {
    "label": "ParseTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseTime(absl::string_view format, absl::string_view input, Time* time,\n               std::string* err)"
  },
  {
    "label": "ParseTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseTime(absl::string_view format, absl::string_view input, TimeZone tz,\n               Time* time, std::string* err)"
  },
  {
    "label": "Duration()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Duration(hi, lo)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Time(d)"
  },
  {
    "label": "MakeNormalizedDuration()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeNormalizedDuration(\n      v / N, v % N * kTicksPerNanosecond * 1000 * 1000 * 1000 / N)"
  },
  {
    "label": "ToInt64Seconds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Seconds(d * Ratio::den / Ratio::num)"
  },
  {
    "label": "ToInt64Nanoseconds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Nanoseconds(d)"
  },
  {
    "label": "ToInt64Microseconds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Microseconds(d)"
  },
  {
    "label": "ToInt64Milliseconds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Milliseconds(d)"
  },
  {
    "label": "ToInt64Seconds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Seconds(d)"
  },
  {
    "label": "ToInt64Minutes()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Minutes(d)"
  },
  {
    "label": "ToInt64Hours()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToInt64Hours(d)"
  }
]