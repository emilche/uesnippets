[
  {
    "label": "FArrangedWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedWidget"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewModel"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FTimeToPixel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeToPixel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "FTrackLaneScreenAlignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackLaneScreenAlignment"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ArrangeWithin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Math / Range . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" class FArrangedWidget ; class ISequencer ; class SWidget ; namespace UE::Sequencer { class FEditorViewModel ; } struct FGeometry ; struct FTimeToPixel ; namespace UE { namespace Sequencer { class FViewModel ; class STrackLane ; class FEditorViewModel ; struct FTrackLaneScreenAlignment ; struct FTrackLaneVerticalArrangement { float Offset = 0 ; float Height = 0 ; } ; struct FTrackLaneVerticalAlignment { enum class ESizeMode : uint8 { Proportional,Fixed } ; float VSizeParam = 1 . f ; float VPadding = 0 . f ; EVerticalAlignment VAlign = VAlign_Center ; ESizeMode Mode = ESizeMode::Proportional ; FTrackLaneVerticalArrangement)",
    "insertText": "ArrangeWithin(float LayoutHeight)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (} ; struct FTrackLaneVirtualAlignment { TRange<FFrameNumber> Range ; FTrackLaneVerticalAlignment VerticalAlignment ; bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "Fixed()",
    "kind": "Method",
    "detail": "Function (} FTrackLaneVirtualAlignment)",
    "insertText": "Fixed(const TRange<FFrameNumber>& InRange, float InFixedHeight, EVerticalAlignment InVAlign = VAlign_Center)"
  },
  {
    "label": "ToScreen()",
    "kind": "Method",
    "detail": "Function (FTrackLaneScreenAlignment)",
    "insertText": "ToScreen(const FTimeToPixel& TimeToPixel, const FGeometry& ParentGeometry)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (} ; struct FArrangedVirtualEntity { TRange<FFrameNumber> Range ; float VirtualTop,VirtualBottom ; } ; class ITrackLaneWidget { public : TSharedRef<const SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "ITrackLaneWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const SWidget> ConstWidget = const_cast<const)",
    "insertText": "ITrackLaneWidget(this)->AsWidget()"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (} FTrackLaneScreenAlignment)",
    "insertText": "GetAlignment(const FTimeToPixel& TimeToPixel, const FGeometry& InParentGeometry)"
  },
  {
    "label": "GetOverlapPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOverlapPriority()"
  },
  {
    "label": "AcceptsChildren()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AcceptsChildren()"
  },
  {
    "label": "FCreateTrackLaneViewParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCreateTrackLaneViewParams {)",
    "insertText": "FCreateTrackLaneViewParams(const TSharedPtr<FEditorViewModel> InEditor) : Editor(InEditor)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<FEditorViewModel> Editor ; TSharedPtr<FViewModel> ParentModel ; TSharedPtr<STrackLane> OwningTrackLane ; TSharedPtr<FTimeToPixel> TimeToPixel ; } ; class ITrackLaneExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ITrackLaneExtension) virtual ~ITrackLaneExtension()"
  },
  {
    "label": "CreateTrackLaneView()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ITrackLaneWidget>)",
    "insertText": "CreateTrackLaneView(const FCreateTrackLaneViewParams& InParams)"
  },
  {
    "label": "ArrangeVirtualTrackLaneView()",
    "kind": "Method",
    "detail": "Function (FTrackLaneVirtualAlignment)",
    "insertText": "ArrangeVirtualTrackLaneView()"
  }
]