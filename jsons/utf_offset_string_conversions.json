[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Adjustment()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_UTF_OFFSET_STRING_CONVERSIONS_H_ # define BASE_STRINGS_UTF_OFFSET_STRING_CONVERSIONS_H_ # include<stddef . h> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" namespace base { class BASE_EXPORT OffsetAdjuster { public : struct BASE_EXPORT Adjustment {)",
    "insertText": "Adjustment(size_t original_offset, size_t original_length, size_t output_length)"
  },
  {
    "label": "AdjustOffsets()",
    "kind": "Method",
    "detail": "Function (size_t original_offset ; size_t original_length ; size_t output_length ; } ; typedef std::vector<Adjustment> Adjustments ; void)",
    "insertText": "AdjustOffsets(const Adjustments& adjustments, std::vector<size_t>* offsets_for_adjustment, size_t limit = std::u16string::npos)"
  },
  {
    "label": "AdjustOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustOffset(const Adjustments& adjustments, size_t* offset, size_t limit = std::u16string::npos)"
  },
  {
    "label": "UnadjustOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnadjustOffsets(const Adjustments& adjustments, std::vector<size_t>* offsets_for_unadjustment)"
  },
  {
    "label": "UnadjustOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnadjustOffset(const Adjustments& adjustments, size_t* offset)"
  },
  {
    "label": "MergeSequentialAdjustments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeSequentialAdjustments(const Adjustments& first_adjustments, Adjustments* adjustments_on_adjusted_string)"
  },
  {
    "label": "UTF8ToUTF16WithAdjustments()",
    "kind": "Method",
    "detail": "Function (} ; BASE_EXPORT bool)",
    "insertText": "UTF8ToUTF16WithAdjustments(const char* src, size_t src_len, std::u16string* output, base::OffsetAdjuster::Adjustments* adjustments)"
  },
  {
    "label": "UTF8ToUTF16WithAdjustments()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::u16string)",
    "insertText": "UTF8ToUTF16WithAdjustments(const base::StringPiece& utf8, base::OffsetAdjuster::Adjustments* adjustments)"
  },
  {
    "label": "UTF8ToUTF16AndAdjustOffsets()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "UTF8ToUTF16AndAdjustOffsets(const base::StringPiece& utf8, std::vector<size_t>* offsets_for_adjustment)"
  },
  {
    "label": "UTF16ToUTF8AndAdjustOffsets()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "UTF16ToUTF8AndAdjustOffsets(const base::StringPiece16& utf16, std::vector<size_t>* offsets_for_adjustment)"
  }
]