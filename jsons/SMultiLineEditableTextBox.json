[
  {
    "label": "IErrorReportingWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IErrorReportingWidget"
  },
  {
    "label": "ITextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextLayoutMarshaller"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" SlateGlobals . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / Text / IRun . h \" # include \" Framework / Text / TextLayout . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SScrollBar . h \" # include \" Widgets / Text / SMultiLineEditableText . h \" class IErrorReportingWidget ; class ITextLayoutMarshaller ; class SBox ; class SHorizontalBox ; enum class ETextShapingMethod : uint8 ; # if WITH_FANCY_TEXT class SMultiLineEditableTextBox : public SBorder { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMultiLineEditableTextBox ) : _Style(&FCoreStyle::Get().GetWidgetStyle<FEditableTextBoxStyle>(\"NormalEditableTextBox\")) , _Marshaller() , _Text() , _HintText() , _SearchText() , _Font() , _ForegroundColor() , _ReadOnlyForegroundColor() , _FocusedForegroundColor() , _Justification(ETextJustify::Left) , _LineHeightPercentage(1.0f) , _IsReadOnly( false ) , _AllowMultiLine( true ) , _IsCaretMovedWhenGainFocus ( true ) , _SelectAllTextWhenFocused( false ) , _ClearTextSelectionOnFocusLoss( true ) , _RevertTextOnEscape( false ) , _ClearKeyboardFocusOnCommit( true ) , _AllowContextMenu(true) , _AlwaysShowScrollbars( false ) , _HScrollBar() , _VScrollBar() , _WrapTextAt(0.0f) , _AutoWrapText(false) , _WrappingPolicy(ETextWrappingPolicy::DefaultWrapping) , _SelectAllTextOnCommit( false ) , _SelectWordOnMouseDoubleClick( true ) , _BackgroundColor() , _Padding() , _Margin() , _ErrorReporting() , _ModiferKeyForNewLine(EModifierKey::None) , _VirtualKeyboardOptions(FVirtualKeyboardOptions()) , _VirtualKeyboardTrigger(EVirtualKeyboardTrigger::OnFocusByPointer) , _VirtualKeyboardDismissAction(EVirtualKeyboardDismissAction::TextChangeOnDismiss) , _TextShapingMethod() , _TextFlowDirection() , _OverflowPolicy()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FEditableTextBoxStyle, Style) SLATE_STYLE_ARGUMENT_DEPRECATED(FTextBlockStyle, TextStyle, 5.2, \"TextStyle is deprecated and will be ignored. Please use the TextStyle embedded in FEditableTextBoxStyle Style.\") SLATE_ARGUMENT(TSharedPtr< ITextLayoutMarshaller >, Marshaller) SLATE_ATTRIBUTE( FText, Text ) SLATE_ATTRIBUTE( FText, HintText ) SLATE_ATTRIBUTE( FText, SearchText ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( FSlateColor, ForegroundColor ) SLATE_ATTRIBUTE( FSlateColor, ReadOnlyForegroundColor ) SLATE_ATTRIBUTE(FSlateColor, FocusedForegroundColor) SLATE_ATTRIBUTE(ETextJustify::Type, Justification) SLATE_ATTRIBUTE(float, LineHeightPercentage) SLATE_ATTRIBUTE( bool, IsReadOnly ) SLATE_ATTRIBUTE(bool, AllowMultiLine) SLATE_ATTRIBUTE( bool, IsCaretMovedWhenGainFocus ) SLATE_ATTRIBUTE( bool, SelectAllTextWhenFocused ) SLATE_ATTRIBUTE( bool, ClearTextSelectionOnFocusLoss ) SLATE_ATTRIBUTE( bool, RevertTextOnEscape ) SLATE_ATTRIBUTE( bool, ClearKeyboardFocusOnCommit ) SLATE_ATTRIBUTE(bool, AllowContextMenu) SLATE_ARGUMENT(bool, AlwaysShowScrollbars) SLATE_ARGUMENT( TSharedPtr< SScrollBar >, HScrollBar ) SLATE_ARGUMENT( TSharedPtr< SScrollBar >, VScrollBar ) SLATE_ATTRIBUTE( FMargin, HScrollBarPadding ) SLATE_ATTRIBUTE( FMargin, VScrollBarPadding ) SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening) SLATE_EVENT( FOnIsTypedCharValid, OnIsTypedCharValid ) SLATE_EVENT( FOnTextChanged, OnTextChanged ) SLATE_EVENT( FOnTextCommitted, OnTextCommitted ) SLATE_EVENT( FOnVerifyTextChanged, OnVerifyTextChanged ) SLATE_EVENT( FOnUserScrolled, OnHScrollBarUserScrolled ) SLATE_EVENT( FOnUserScrolled, OnVScrollBarUserScrolled ) SLATE_EVENT( SMultiLineEditableText::FOnCursorMoved, OnCursorMoved ) SLATE_EVENT(FOnKeyChar, OnKeyCharHandler) SLATE_EVENT(FOnKeyDown, OnKeyDownHandler) SLATE_EVENT( FMenuExtensionDelegate, ContextMenuExtender ) SLATE_EVENT( FCreateSlateTextLayout, CreateSlateTextLayout ) SLATE_ATTRIBUTE( float, WrapTextAt ) SLATE_ATTRIBUTE( bool, AutoWrapText ) SLATE_ATTRIBUTE( ETextWrappingPolicy, WrappingPolicy ) SLATE_ATTRIBUTE( bool, SelectAllTextOnCommit ) SLATE_ATTRIBUTE(bool, SelectWordOnMouseDoubleClick) SLATE_ATTRIBUTE( FSlateColor, BackgroundColor ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_ATTRIBUTE( FMargin, Margin ) SLATE_ARGUMENT( TSharedPtr<class IErrorReportingWidget>, ErrorReporting ) SLATE_ARGUMENT( EModifierKey::Type, ModiferKeyForNewLine) SLATE_ARGUMENT( FVirtualKeyboardOptions, VirtualKeyboardOptions ) SLATE_ATTRIBUTE( EVirtualKeyboardTrigger, VirtualKeyboardTrigger ) SLATE_ATTRIBUTE( EVirtualKeyboardDismissAction, VirtualKeyboardDismissAction ) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "GetPlainText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetPlainText()"
  },
  {
    "label": "GetCurrentTextLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCurrentTextLine(FString& OutTextLine)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const FEditableTextBoxStyle* InStyle)"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHintText(const TAttribute< FText >& InHintText)"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "SetTextBoxForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBoxForegroundColor(const TAttribute<FSlateColor>& InForegroundColor)"
  },
  {
    "label": "SetTextBoxBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBoxBackgroundColor(const TAttribute<FSlateColor>& InBackgroundColor)"
  },
  {
    "label": "SetReadOnlyForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadOnlyForegroundColor(const TAttribute<FSlateColor>& InReadOnlyForegroundColor)"
  },
  {
    "label": "SetSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectWordOnMouseDoubleClick(const TAttribute<bool>& InSelectWordOnMouseDoubleClick)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(const TAttribute<float>& InWrapTextAt)"
  },
  {
    "label": "SetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoWrapText(const TAttribute<bool>& InAutoWrapText)"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage(const TAttribute<float>& InLineHeightPercentage)"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine(const TAttribute<bool>& InApplyLineHeightToBottomLine)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(const TAttribute<FMargin>& InMargin)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "SetAllowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowContextMenu(const TAttribute< bool >& InAllowContextMenu)"
  },
  {
    "label": "SetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualKeyboardDismissAction(TAttribute< EVirtualKeyboardDismissAction > InVirtualKeyboardDismissAction)"
  },
  {
    "label": "SetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsReadOnly(const TAttribute< bool >& InIsReadOnly)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FText& InError)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FString& InError)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "AnyTextSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyTextSelected()"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedText()"
  },
  {
    "label": "InsertTextAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursor(const FText& InText)"
  },
  {
    "label": "InsertTextAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursor(const FString& InString)"
  },
  {
    "label": "InsertRunAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertRunAtCursor(TSharedRef<IRun> InRun)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "GoTo(NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "ScrollTo(NewLocation)"
  },
  {
    "label": "ApplyToSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyToSelection(const FRunInfo& InRunInfo, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "GetRunUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IRun>)",
    "insertText": "GetRunUnderCursor()"
  },
  {
    "label": "GetSelectedRuns()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<const IRun>>)",
    "insertText": "GetSelectedRuns()"
  },
  {
    "label": "GetCursorLocation()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "GetCursorLocation()"
  },
  {
    "label": "GetHScrollBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const SScrollBar>)",
    "insertText": "GetHScrollBar()"
  },
  {
    "label": "GetVScrollBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const SScrollBar>)",
    "insertText": "GetVScrollBar()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "SetOnKeyCharHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnKeyCharHandler(FOnKeyChar InOnKeyCharHandler)"
  },
  {
    "label": "SetOnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnKeyDownHandler(FOnKeyDown InOnKeyDownHandler)"
  },
  {
    "label": "ForceScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceScroll(int32 UserIndex, float ScrollAxisMagnitude)"
  },
  {
    "label": "OnEditableTextChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnEditableTextChanged(const FText& InText)"
  },
  {
    "label": "OnEditableTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditableTextCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "DeterminePadding()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SMultiLineEditableText> EditableText ; TAttribute<FMargin> PaddingOverride ; TAttribute<FMargin> HScrollBarPaddingOverride ; TAttribute<FMargin> VScrollBarPaddingOverride ; TAttribute<FSlateFontInfo> FontOverride ; TAttribute<FSlateColor> ForegroundColorOverride ; TAttribute<FSlateColor> BackgroundColorOverride ; TAttribute<FSlateColor> ReadOnlyForegroundColorOverride ; TAttribute<FSlateColor> FocusedForegroundColorOverride ; TAttribute<bool> AllowContextMenu ; TAttribute<bool> bSelectWordOnMouseDoubleClick ; TSharedPtr<SHorizontalBox> Box ; bool bHasExternalHScrollBar ; TSharedPtr<SScrollBar> HScrollBar ; TSharedPtr<SBox> HScrollBarPaddingBox ; bool bHasExternalVScrollBar ; TSharedPtr<SScrollBar> VScrollBar ; TSharedPtr<SBox> VScrollBarPaddingBox ; TSharedPtr<class IErrorReportingWidget> ErrorReporting ; FOnTextChanged OnTextChanged ; FOnTextCommitted OnTextCommitted ; FOnVerifyTextChanged OnVerifyTextChanged ; const FEditableTextBoxStyle* Style ; private : FMargin)",
    "insertText": "DeterminePadding()"
  },
  {
    "label": "DetermineHScrollBarPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "DetermineHScrollBarPadding()"
  },
  {
    "label": "DetermineVScrollBarPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "DetermineVScrollBarPadding()"
  },
  {
    "label": "DetermineFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "DetermineFont()"
  },
  {
    "label": "DetermineBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "DetermineBackgroundColor()"
  },
  {
    "label": "DetermineForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "DetermineForegroundColor()"
  },
  {
    "label": "GetBorderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* BorderImageNormal ; const FSlateBrush* BorderImageHovered ; const FSlateBrush* BorderImageFocused ; const FSlateBrush* BorderImageReadOnly ; const FSlateBrush*)",
    "insertText": "GetBorderImage()"
  }
]