[
  {
    "label": "null_state_saver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "null_state_saver"
  },
  {
    "label": "ostream_state_saver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ostream_state_saver"
  },
  {
    "label": "stream_precision_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stream_precision_helper"
  },
  {
    "label": "istream_state_saver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "istream_state_saver"
  },
  {
    "label": "stream_format_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stream_format_type"
  },
  {
    "label": "stream_u128_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stream_u128_helper"
  },
  {
    "label": "null_state_saver()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_IOSTREAM_STATE_SAVER_H_ # define ABSL_RANDOM_INTERNAL_IOSTREAM_STATE_SAVER_H_ # include<cmath> # include<iostream> # include<limits> # include<type_traits> # include \" absl / meta / type_traits . h \" # include \" absl / numeric / int128 . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<T> class null_state_saver { public : using stream_type = T ; using flags_type = std::ios_base::fmtflags ;)",
    "insertText": "null_state_saver(T&, flags_type)"
  },
  {
    "label": "null_state_saver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "null_state_saver()"
  },
  {
    "label": "ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (} } ; template<OStream> class ostream_state_saver { public : using ostream_type = OStream ; using flags_type = std::ios_base::fmtflags ; using fill_type = ostream_type::char_type ; using precision_type = std::streamsize ;)",
    "insertText": "ostream_state_saver(ostream_type& os, flags_type flags, fill_type fill) : os_(os), flags_(os.flags(flags)), fill_(os.fill(fill)), precision_(os.precision())"
  },
  {
    "label": "ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ostream_state_saver()"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os_ .)",
    "insertText": "precision(precision_)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (os_ .)",
    "insertText": "fill(fill_)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (os_ .)",
    "insertText": "flags(flags_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} private : ostream_type& os_ ; const flags_type flags_ ; const fill_type fill_ ; const precision_type precision_ ; } ; # if)",
    "insertText": "defined(__NDK_MAJOR__) && __NDK_MAJOR__ < 16 #define ABSL_RANDOM_INTERNAL_IOSTREAM_HEXFLOAT 1 #else #define ABSL_RANDOM_INTERNAL_IOSTREAM_HEXFLOAT 0 #endif template <typename CharT, typename Traits> ostream_state_saver<std::basic_ostream<CharT, Traits>> make_ostream_state_saver( std::basic_ostream<CharT, Traits>& os, std::ios_base::fmtflags flags = std::ios_base::dec | std::ios_base::left | #if ABSL_RANDOM_INTERNAL_IOSTREAM_HEXFLOAT std::ios_base::fixed | #endif std::ios_base::scientific)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (using result_type = ostream_state_saver<std::basic_ostream<CharT,Traits>> ; return)",
    "insertText": "result_type(os, flags, os.widen(' '))"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (} template<T> absl::enable_if_t<! std::is_base_of<std::ios_base,T>::value,null_state_saver<T>>)",
    "insertText": "make_ostream_state_saver(T& is, std::ios_base::fmtflags flags = std::ios_base::dec)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" null_state_saver \" ; using result_type = null_state_saver<T> ; return)",
    "insertText": "result_type(is, flags)"
  },
  {
    "label": "kPrecision()",
    "kind": "Method",
    "detail": "Function (} template<T> struct stream_precision_helper { int)",
    "insertText": "kPrecision(std::numeric_limits<T>::max_digits10 > std::numeric_limits<T>::digits10) ? std::numeric_limits<T>::max_digits10 : (std::numeric_limits<T>::digits10 + 3)"
  },
  {
    "label": "istream_state_saver()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct stream_precision_helper<float> { int kPrecision = 9 ; } ; template<> struct stream_precision_helper<double> { int kPrecision = 1 7 ; } ; template<> struct stream_precision_helper<long double> { int kPrecision = 3 6 ; } ; template<IStream> class istream_state_saver { public : using istream_type = IStream ; using flags_type = std::ios_base::fmtflags ;)",
    "insertText": "istream_state_saver(istream_type& is, flags_type flags) : is_(is), flags_(is.flags(flags))"
  },
  {
    "label": "istream_state_saver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "istream_state_saver()"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (} private : istream_type& is_ ; flags_type flags_ ; } ; template<CharT,Traits> istream_state_saver<std::basic_istream<CharT,Traits>>)",
    "insertText": "make_istream_state_saver(std::basic_istream<CharT, Traits>& is, std::ios_base::fmtflags flags = std::ios_base::dec | std::ios_base::scientific | std::ios_base::skipws)"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (} template<T> absl::enable_if_t<! std::is_base_of<std::ios_base,T>::value,null_state_saver<T>>)",
    "insertText": "make_istream_state_saver(T& is, std::ios_base::fmtflags flags = std::ios_base::dec)"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (} template<T> struct stream_format_type : public)",
    "insertText": "conditional(sizeof(T) == sizeof(char))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct stream_u128_helper ; template<> struct stream_u128_helper<absl::uint128> { template<IStream> absl::uint128)",
    "insertText": "read(IStream& in)"
  },
  {
    "label": "MakeUint128()",
    "kind": "Method",
    "detail": "Function (uint64_t h = 0 ; uint64_t l = 0 ; in>> h>> l ; return)",
    "insertText": "MakeUint128(h, l)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (} template<OStream> void)",
    "insertText": "write(absl::uint128 val, OStream& out)"
  },
  {
    "label": "Uint128High64()",
    "kind": "Method",
    "detail": "Function (uint64_t h =)",
    "insertText": "Uint128High64(val)"
  },
  {
    "label": "Uint128Low64()",
    "kind": "Method",
    "detail": "Function (uint64_t l =)",
    "insertText": "Uint128Low64(val)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (out<<h<<out .)",
    "insertText": "fill()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (uint64_t h = 0 ; uint64_t l = 0 ; in>> h>> l ;)",
    "insertText": "return(static_cast<__uint128_t>(h) << 64)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (} template<OStream> void)",
    "insertText": "write(__uint128_t val, OStream& out)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t h = static_cast<)",
    "insertText": "uint64_t(val >> 64u)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t l = static_cast<)",
    "insertText": "uint64_t(val)"
  },
  {
    "label": "read_floating_point()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<FloatType,IStream> FloatType)",
    "insertText": "read_floating_point(IStream& is)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FloatType dest ; is>> dest ;)",
    "insertText": "if(is.fail() && (std::fabs(dest) == (std::numeric_limits<FloatType>::min)() || std::fpclassify(dest) == FP_SUBNORMAL))"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "clear(is.rdstate() & (~std::ios_base::failbit))"
  }
]