[
  {
    "label": "MultiReaderQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiReaderQueue"
  },
  {
    "label": "MultiReaderQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_MULTI_READER_QUEUE_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_MULTI_READER_QUEUE_H_ # include<deque> # include<memory> # include<set> # include<unordered_map> # include \" absl / types / optional . h \" # include \" rtc_base / checks . h \" namespace webrtc { template<T> class MultiReaderQueue { public :)",
    "insertText": "MultiReaderQueue(size_t readers_count)"
  },
  {
    "label": "MultiReaderQueue()",
    "kind": "Method",
    "detail": "Function (heads_ [ i ] = 0 ; } })",
    "insertText": "MultiReaderQueue(std::set<size_t> readers)"
  },
  {
    "label": "AddReader()",
    "kind": "Method",
    "detail": "Function (heads_ [ reader ] = 0 ; } } void)",
    "insertText": "AddReader(size_t reader, size_t reader_to_copy)"
  },
  {
    "label": "GetHeadPositionOrDie()",
    "kind": "Method",
    "detail": "Function (size_t pos =)",
    "insertText": "GetHeadPositionOrDie(reader_to_copy)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = heads_ .)",
    "insertText": "find(reader)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(it == heads_.end())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (heads_ [ reader ] = heads_ [ reader_to_copy ] ;)",
    "insertText": "for(size_t i = pos; i < queue_.size(); ++i)"
  },
  {
    "label": "AddReader()",
    "kind": "Method",
    "detail": "Function (in_queues_ [ i ] + + ; } } void)",
    "insertText": "AddReader(size_t reader)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (heads_ [ reader ] = removed_elements_count_ ;)",
    "insertText": "for(size_t i = 0; i < queue_.size(); ++i)"
  },
  {
    "label": "RemoveReader()",
    "kind": "Method",
    "detail": "Function (in_queues_ [ i ] + + ; } } void)",
    "insertText": "RemoveReader(size_t reader)"
  },
  {
    "label": "GetHeadPositionOrDie()",
    "kind": "Method",
    "detail": "Function (size_t pos =)",
    "insertText": "GetHeadPositionOrDie(reader)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (in_queues_ [ i ] - - ; })",
    "insertText": "while(!in_queues_.empty() && in_queues_[0] == 0)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} heads_ .)",
    "insertText": "erase(reader)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushBack(T value)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (queue_ .)",
    "insertText": "push_back(value)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (in_queues_ .)",
    "insertText": "push_back(heads_.size())"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (} absl::optional<T>)",
    "insertText": "PopFront(size_t reader)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(pos, 0)"
  },
  {
    "label": "Front()",
    "kind": "Method",
    "detail": "Function (} return out ; } absl::optional<T>)",
    "insertText": "Front(size_t reader)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size(size_t reader)"
  },
  {
    "label": "readers_count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "readers_count()"
  },
  {
    "label": "GetHeadPositionOrDie()",
    "kind": "Method",
    "detail": "Function (} private : size_t)",
    "insertText": "GetHeadPositionOrDie(size_t reader)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(it != heads_.end())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!queue_.empty())"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(in_queues_[0], 0)"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (queue_ .)",
    "insertText": "pop_front()"
  }
]