[
  {
    "label": "FifoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FifoBuffer"
  },
  {
    "label": "FifoBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_MEMORY_FIFO_BUFFER_H_ # define RTC_BASE_MEMORY_FIFO_BUFFER_H_ # include<memory> # include \" api / task_queue / pending_task_safety_flag . h \" # include \" rtc_base / stream . h \" # include \" rtc_base / synchronization / mutex . h \" namespace rtc { class FifoBuffer final : public StreamInterface { public :)",
    "insertText": "FifoBuffer(size_t length)"
  },
  {
    "label": "FifoBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FifoBuffer(size_t length, Thread* owner)"
  },
  {
    "label": "FifoBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FifoBuffer()"
  },
  {
    "label": "FifoBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FifoBuffer(const FifoBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FifoBuffer&)",
    "insertText": "operator(const FifoBuffer&)"
  },
  {
    "label": "GetBuffered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBuffered(size_t* data_len)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (StreamState)",
    "insertText": "GetState()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (StreamResult)",
    "insertText": "Read(void* buffer, size_t bytes, size_t* bytes_read, int* error)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (StreamResult)",
    "insertText": "Write(const void* buffer, size_t bytes, size_t* bytes_written, int* error)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPosition(size_t position)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPosition(size_t* position)"
  },
  {
    "label": "Rewind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rewind()"
  },
  {
    "label": "GetReadData()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetReadData(size_t* data_len)"
  },
  {
    "label": "ConsumeReadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeReadData(size_t used)"
  },
  {
    "label": "GetWriteBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetWriteBuffer(size_t* buf_len)"
  },
  {
    "label": "ConsumeWriteBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeWriteBuffer(size_t used)"
  },
  {
    "label": "PostEvent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PostEvent(int events, int err)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (owner_ ->)",
    "insertText": "PostTask(webrtc::SafeTask( task_safety_.flag(), [this, events, err]() { SignalEvent(this, events, err); }))"
  },
  {
    "label": "ReadLocked()",
    "kind": "Method",
    "detail": "Function (} StreamResult)",
    "insertText": "ReadLocked(void* buffer, size_t bytes, size_t* bytes_read) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "WriteLocked()",
    "kind": "Method",
    "detail": "Function (StreamResult)",
    "insertText": "WriteLocked(const void* buffer, size_t bytes, size_t* bytes_written) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::ScopedTaskSafety task_safety_ ; StreamState state_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]