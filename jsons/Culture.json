[
  {
    "label": "FDecimalNumberFormattingRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecimalNumberFormattingRules"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FICUCultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUCultureImplementation"
  },
  {
    "label": "FLegacyCultureImplementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyCultureImplementation"
  },
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FTextChronoFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextChronoFormatter"
  },
  {
    "label": "FTextComparison",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextComparison"
  },
  {
    "label": "FICUBreakIteratorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUBreakIteratorManager"
  },
  {
    "label": "FCulture()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Templates / UniquePtr . h \" # include \" Internationalization / CulturePointer . h \" struct FDecimalNumberFormattingRules ; enum class ETextPluralForm : uint8 ; enum class ETextPluralType : uint8 ; # if UE_ENABLE_ICU class FICUCultureImplementation ; typedef FICUCultureImplementation FCultureImplementation ; # else class FLegacyCultureImplementation ; typedef FLegacyCultureImplementation FCultureImplementation ; # endif class FCulture { # if UE_ENABLE_ICU class FText ; class FTextChronoFormatter ; class FTextComparison ; class FICUBreakIteratorManager ; # endif public : ~)",
    "insertText": "FCulture()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FCultureRef)",
    "insertText": "Create(TUniquePtr<FCultureImplementation>&& InImplementation)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetEnglishName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetEnglishName()"
  },
  {
    "label": "GetKeyboardLayoutId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetKeyboardLayoutId()"
  },
  {
    "label": "GetLCID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLCID()"
  },
  {
    "label": "GetPrioritizedParentCultureNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPrioritizedParentCultureNames()"
  },
  {
    "label": "GetPrioritizedParentCultureNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPrioritizedParentCultureNames(const FString& LanguageCode, const FString& ScriptCode, const FString& RegionCode)"
  },
  {
    "label": "CreateCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateCultureName(const FString& LanguageCode, const FString& ScriptCode, const FString& RegionCode)"
  },
  {
    "label": "GetCanonicalName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCanonicalName(const FString& Name)"
  },
  {
    "label": "CultureNameToVerseIdentifier()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CultureNameToVerseIdentifier(const FString& Name)"
  },
  {
    "label": "CultureNameFromVerseIdentifier()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CultureNameFromVerseIdentifier(const FString& VerseIdentifer)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetVerseIdentifier()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetVerseIdentifier()"
  },
  {
    "label": "GetNativeName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetNativeName()"
  },
  {
    "label": "GetUnrealLegacyThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetUnrealLegacyThreeLetterISOLanguageName()"
  },
  {
    "label": "GetThreeLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetThreeLetterISOLanguageName()"
  },
  {
    "label": "GetTwoLetterISOLanguageName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetTwoLetterISOLanguageName()"
  },
  {
    "label": "GetNativeLanguage()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetNativeLanguage()"
  },
  {
    "label": "GetRegion()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetRegion()"
  },
  {
    "label": "GetNativeRegion()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetNativeRegion()"
  },
  {
    "label": "GetScript()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetScript()"
  },
  {
    "label": "GetVariant()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetVariant()"
  },
  {
    "label": "IsRightToLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRightToLeft()"
  },
  {
    "label": "GetDecimalNumberFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetDecimalNumberFormattingRules()"
  },
  {
    "label": "GetPercentFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetPercentFormattingRules()"
  },
  {
    "label": "GetCurrencyFormattingRules()",
    "kind": "Method",
    "detail": "Function (const FDecimalNumberFormattingRules&)",
    "insertText": "GetCurrencyFormattingRules(const FString& InCurrencyCode)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(float Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(double Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int8 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int16 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int32 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(int64 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(uint8 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(uint16 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(uint32 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(uint64 Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetPluralForm()",
    "kind": "Method",
    "detail": "Function (ETextPluralForm)",
    "insertText": "GetPluralForm(long Val, const ETextPluralType PluralType)"
  },
  {
    "label": "GetValidPluralForms()",
    "kind": "Method",
    "detail": "Function (const TArray<ETextPluralForm>&)",
    "insertText": "GetValidPluralForms(const ETextPluralType PluralType)"
  },
  {
    "label": "RefreshCultureDisplayNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCultureDisplayNames(const TArray<FString>& InPrioritizedDisplayCultureNames, const bool bFullRefresh = true)"
  },
  {
    "label": "FCulture()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FCulture(TUniquePtr<FCultureImplementation>&& InImplementation)"
  }
]