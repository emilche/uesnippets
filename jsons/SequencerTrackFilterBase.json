[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FSequencerFilterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerFilterData"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "FSequencerTrackFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter"
  },
  {
    "label": "FSequencerTrackFilter_ModelType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_ModelType"
  },
  {
    "label": "FSequencerTrackFilter_ClassType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_ClassType"
  },
  {
    "label": "FSequencerTrackFilter_ComponentType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_ComponentType"
  },
  {
    "label": "Hierarchy()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" GameFramework / Actor . h \" # include \" Filters / FilterBase . h \" # include \" Filters / ISequencerTrackFilters . h \" # include \" Misc / IFilter . h \" # include \" MovieSceneTrack . h \" # include \" MovieSceneTrackEditor . h \" # include \" SequencerFilterData . h \" # include \" MVVM / ViewModelPtr . h \" # include \" Textures / SlateIcon . h \" class ISequencer ; class FMenuBuilder ; class UMovieScene ; class UMovieSceneSequence ; struct FSequencerFilterData ; namespace UE::Sequencer { class IOutlinerExtension ; namespace ExtensionHooks { FName)",
    "insertText": "Hierarchy(TEXT(\"Hierarchy\"))"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Show(TEXT(\"Show\"))"
  },
  {
    "label": "SupportsLevelSequence()",
    "kind": "Method",
    "detail": "Function (} } using FSequencerTrackFilterType = UE::Sequencer::FViewModelPtr ; class FSequencerTrackFilter : public FFilterBase<FSequencerTrackFilterType>,public TSharedFromThis<FSequencerTrackFilter> { public : bool)",
    "insertText": "SupportsLevelSequence(UMovieSceneSequence* const InSequence)"
  },
  {
    "label": "SupportsUMGSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsUMGSequence(UMovieSceneSequence* const InSequence)"
  },
  {
    "label": "IsSequenceTrackSupported()",
    "kind": "Method",
    "detail": "Function (template<InTrackClassType> bool)",
    "insertText": "IsSequenceTrackSupported(UMovieSceneSequence* const InSequence)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const ETrackSupport Support =)",
    "insertText": "IsValid(InSequence) ? InSequence->IsTrackSupported(InTrackClassType::StaticClass())"
  },
  {
    "label": "FSequencerTrackFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequencerTrackFilter(ISequencerTrackFilters& InOutFilterInterface, TSharedPtr<FFilterCategory>&& InCategory = nullptr)"
  },
  {
    "label": "PassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesFilter(FSequencerTrackFilterType InItem)"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "ModifyContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "GetDefaultToolTipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDefaultToolTipText()"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (} FSlateIcon)",
    "insertText": "GetIcon()"
  },
  {
    "label": "IsCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCustomTextFilter()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "GetToggleCommand()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandInfo>)",
    "insertText": "GetToggleCommand()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (ISequencer&)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "CanToggleFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleFilter()"
  },
  {
    "label": "ToggleFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilter()"
  },
  {
    "label": "MapToggleAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapToggleAction(const TSharedPtr<FUICommandInfo>& InCommand)"
  },
  {
    "label": "GetFocusedMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (protected : UMovieSceneSequence*)",
    "insertText": "GetFocusedMovieSceneSequence()"
  },
  {
    "label": "GetFocusedGetMovieScene()",
    "kind": "Method",
    "detail": "Function (UMovieScene*)",
    "insertText": "GetFocusedGetMovieScene()"
  },
  {
    "label": "GetIconName()",
    "kind": "Method",
    "detail": "Function (ISequencerTrackFilters& FilterInterface ; private : FName)",
    "insertText": "GetIconName()"
  },
  {
    "label": "FSequencerTrackFilter_ModelType()",
    "kind": "Method",
    "detail": "Function (} } ; template<InModelType> class FSequencerTrackFilter_ModelType : public FSequencerTrackFilter { public :)",
    "insertText": "FSequencerTrackFilter_ModelType(ISequencerTrackFilters& InOutFilterInterface, TSharedPtr<FFilterCategory> InCategory) : FSequencerTrackFilter(InOutFilterInterface, MoveTemp(InCategory))"
  },
  {
    "label": "InModelType()",
    "kind": "Method",
    "detail": "Function (const UE::Sequencer::TViewModelPtr<InModelType> Model = InItem -> FindAncestorOfType<)",
    "insertText": "InModelType()"
  },
  {
    "label": "FSequencerTrackFilter_ClassType()",
    "kind": "Method",
    "detail": "Function (} } ; template<InClassType> class FSequencerTrackFilter_ClassType : public FSequencerTrackFilter { public :)",
    "insertText": "FSequencerTrackFilter_ClassType(ISequencerTrackFilters& InOutFilterInterface, TSharedPtr<FFilterCategory> InCategory) : FSequencerTrackFilter(InOutFilterInterface, MoveTemp(InCategory))"
  },
  {
    "label": "GetFilterData()",
    "kind": "Method",
    "detail": "Function (FSequencerFilterData& FilterData = FilterInterface .)",
    "insertText": "GetFilterData()"
  },
  {
    "label": "ResolveMovieSceneTrackObject()",
    "kind": "Method",
    "detail": "Function (const UMovieSceneTrack* const TrackObject = FilterData .)",
    "insertText": "ResolveMovieSceneTrackObject(InItem)"
  },
  {
    "label": "GetTrackClass()",
    "kind": "Method",
    "detail": "Function (} TSubclassOf<UMovieSceneTrack>)",
    "insertText": "GetTrackClass()"
  },
  {
    "label": "FSequencerTrackFilter_ComponentType()",
    "kind": "Method",
    "detail": "Function (} } ; template<InComponentType> class FSequencerTrackFilter_ComponentType : public FSequencerTrackFilter { public :)",
    "insertText": "FSequencerTrackFilter_ComponentType(ISequencerTrackFilters& InOutFilterInterface, TSharedPtr<FFilterCategory> InCategory) : FSequencerTrackFilter(InOutFilterInterface, MoveTemp(InCategory))"
  }
]