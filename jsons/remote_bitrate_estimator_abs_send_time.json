[
  {
    "label": "RemoteBitrateEstimatorAbsSendTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteBitrateEstimatorAbsSendTime"
  },
  {
    "label": "Probe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Probe"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cluster"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RemoteBitrateEstimatorAbsSendTime()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_ABS_SEND_TIME_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_ABS_SEND_TIME_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<map> # include<memory> # include<vector> # include \" api / rtp_headers . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / remote_bitrate_estimator / aimd_rate_control . h \" # include \" modules / remote_bitrate_estimator / include / remote_bitrate_estimator . h \" # include \" modules / remote_bitrate_estimator / inter_arrival . h \" # include \" modules / remote_bitrate_estimator / overuse_detector . h \" # include \" modules / remote_bitrate_estimator / overuse_estimator . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class RemoteBitrateEstimatorAbsSendTime : public RemoteBitrateEstimator { public :)",
    "insertText": "RemoteBitrateEstimatorAbsSendTime(RemoteBitrateObserver* observer, Clock* clock)"
  },
  {
    "label": "RemoteBitrateEstimatorAbsSendTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteBitrateEstimatorAbsSendTime()"
  },
  {
    "label": "RemoteBitrateEstimatorAbsSendTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteBitrateEstimatorAbsSendTime(const RemoteBitrateEstimatorAbsSendTime&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RemoteBitrateEstimatorAbsSendTime&)",
    "insertText": "operator(const RemoteBitrateEstimatorAbsSendTime&)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacket(int64_t arrival_time_ms, size_t payload_size, const RTPHeader& header)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "Process()"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t avg_rtt_ms, int64_t max_rtt_ms)"
  },
  {
    "label": "RemoveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStream(uint32_t ssrc)"
  },
  {
    "label": "LatestEstimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "LatestEstimate()"
  },
  {
    "label": "Probe()",
    "kind": "Method",
    "detail": "Function (private : struct Probe {)",
    "insertText": "Probe(Timestamp send_time, Timestamp recv_time, DataSize payload_size) : send_time(send_time), recv_time(recv_time), payload_size(payload_size)"
  },
  {
    "label": "SendBitrate()",
    "kind": "Method",
    "detail": "Function (} Timestamp send_time ; Timestamp recv_time ; DataSize payload_size ; } ; struct Cluster { DataRate)",
    "insertText": "SendBitrate()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (TimeDelta recv_mean =)",
    "insertText": "Zero()"
  },
  {
    "label": "IsWithinClusterBounds()",
    "kind": "Method",
    "detail": "Function (int count = 0 ; int num_above_min_delta = 0 ; } ; enum class ProbeResult { kBitrateUpdated,kNoUpdate } ; bool)",
    "insertText": "IsWithinClusterBounds(TimeDelta send_delta, const Cluster& cluster_aggregate)"
  },
  {
    "label": "MaybeAddCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeAddCluster(const Cluster& cluster_aggregate, std::list<Cluster>& clusters)"
  },
  {
    "label": "IncomingPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacketInfo(Timestamp arrival_time, uint32_t send_time_24bits, DataSize payload_size, uint32_t ssrc)"
  },
  {
    "label": "ComputeClusters()",
    "kind": "Method",
    "detail": "Function (std::list<Cluster>)",
    "insertText": "ComputeClusters()"
  },
  {
    "label": "FindBestProbe()",
    "kind": "Method",
    "detail": "Function (const Cluster*)",
    "insertText": "FindBestProbe(const std::list<Cluster>& clusters)"
  },
  {
    "label": "ProcessClusters()",
    "kind": "Method",
    "detail": "Function (ProbeResult)",
    "insertText": "ProcessClusters(Timestamp now) RTC_EXCLUSIVE_LOCKS_REQUIRED(&mutex_)"
  },
  {
    "label": "IsBitrateImproving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBitrateImproving(DataRate probe_bitrate) const RTC_EXCLUSIVE_LOCKS_REQUIRED(&mutex_)"
  },
  {
    "label": "TimeoutStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeoutStreams(Timestamp now) RTC_EXCLUSIVE_LOCKS_REQUIRED(&mutex_)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (rtc::RaceChecker network_race_ ; Clock* const clock_ ; const FieldTrialBasedConfig field_trials_ ; RemoteBitrateObserver* const observer_ ; std::unique_ptr<InterArrival> inter_arrival_ ; std::unique_ptr<OveruseEstimator> estimator_ ; OveruseDetector detector_ ; RateStatistics incoming_bitrate_ { kBitrateWindowMs,8 0 0 0 } ; bool incoming_bitrate_initialized_ = false ; std::list<Probe> probes_ ; size_t total_probes_received_ = 0 ; Timestamp first_packet_time_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool uma_recorded_ = false ; Mutex mutex_ ; std::map<uint32_t,Timestamp> ssrcs_)",
    "insertText": "RTC_GUARDED_BY(&mutex_)"
  }
]