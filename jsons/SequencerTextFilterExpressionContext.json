[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FSequencerTextFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTextFilterExpressionContext"
  },
  {
    "label": "FSequencerTextFilterExpressionContext()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Filters / SequencerTrackFilterBase . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" class UMovieScene ; class UMovieSceneSequence ; class UMovieSceneTrack ; enum class ESequencerTextFilterValueType : uint8 { String,Boolean,Integer } ; struct FSequencerTextFilterKeyword { FString Keyword ; FText Description ; } ; class FSequencerTextFilterExpressionContext : public ITextFilterExpressionContext { public :)",
    "insertText": "FSequencerTextFilterExpressionContext(ISequencerTrackFilters& InFilterInterface)"
  },
  {
    "label": "SetFilterItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterItem(FSequencerTrackFilterType InFilterItem, UMovieSceneTrack* const InTrackObject)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetKeys()"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (ESequencerTextFilterValueType)",
    "insertText": "GetValueType()"
  },
  {
    "label": "GetValueKeywords()",
    "kind": "Method",
    "detail": "Function (TArray<FSequencerTextFilterKeyword>)",
    "insertText": "GetValueKeywords()"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCategory()"
  },
  {
    "label": "TestBasicStringExpression()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestBasicStringExpression(const FTextFilterString& InValue , const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "TestComplexExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestComplexExpression(const FName& InKey , const FTextFilterString& InValue , const ETextFilterComparisonOperation InComparisonOperation , const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "GetFocusedMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (protected : UMovieSceneSequence*)",
    "insertText": "GetFocusedMovieSceneSequence()"
  },
  {
    "label": "GetFocusedGetMovieScene()",
    "kind": "Method",
    "detail": "Function (UMovieScene*)",
    "insertText": "GetFocusedGetMovieScene()"
  },
  {
    "label": "CompareFStringForExactBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareFStringForExactBool(const FTextFilterString& InValue, const bool bInPassedFilter)"
  },
  {
    "label": "CompareFStringForExactBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareFStringForExactBool(const FTextFilterString& InValue , const ETextFilterComparisonOperation InComparisonOperation , const bool bInPassedFilter)"
  }
]