[
  {
    "label": "_VARBITS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_VARBITS"
  },
  {
    "label": "_VARBITSEND",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_VARBITSEND"
  },
  {
    "label": "_VARBITSB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_VARBITSB"
  },
  {
    "label": "rfmerge3()",
    "kind": "Method",
    "detail": "Function (# ifndef __VARBITSH__ # define __VARBITSH__ # ifndef __RADRR_CORE2H__ # include \" rrCore . h \" # endif # ifdef WRAP_PUBLICS # define)",
    "insertText": "rfmerge3(name,add) name##add #define rfmerge2(name,add) rfmerge3(name,add) #define rfmerge(name) rfmerge2(name,WRAP_PUBLICS) #define VarBitsCopy rfmerge(VarBitsCopy) #define VarBitsLens rfmerge(VarBitsLens) #endif RADDECLAREDATA const RAD_ALIGN(U32,VarBitsLens[33],32)"
  },
  {
    "label": "BITSTOPMASK()",
    "kind": "Method",
    "detail": "Function (# ifdef USE64BITVB # define BITSTYPE U64 # define BITSTYPELEN 6 4 # define BITSTYPEBYTES 8 # define)",
    "insertText": "BITSTOPMASK(1UL64<<(BITSTYPELEN-1)) #define VarBitsOpen(vb,pointer)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(vb)"
  },
  {
    "label": "VarBitsLocalOpen()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsLocalOpen(vb,pointer)"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (vb # #)",
    "insertText": "bits((U32 * RADRESTRICT)pointer)"
  },
  {
    "label": "cur()",
    "kind": "Method",
    "detail": "Function (vb # #)",
    "insertText": "cur((char*)pointer)"
  },
  {
    "label": "BITSTOPMASK()",
    "kind": "Method",
    "detail": "Function (vb # # bitlen = 3 2 ; } else { vb # # cur = pointer ; vb # # bits = vb # # bitlen = 0 ; } } # else # define BITSTYPE U32 # define BITSTYPELEN 3 2 # define BITSTYPEBYTES 4 # define)",
    "insertText": "BITSTOPMASK(1UL<<(BITSTYPELEN-1)) #define VarBitsOpen(vb,pointer)"
  },
  {
    "label": "VarBitsPut()",
    "kind": "Method",
    "detail": "Function (vb # # cur = pointer ; vb # # bits = vb # # bitlen = 0 ; } # endif # define VARBITSTEMP BITSTYPE typedef struct _VARBITS { BITSTYPE bits ; void* RADRESTRICT cur ; U32 bitlen ; void* RADRESTRICT init ; } VARBITS ; typedef struct _VARBITSEND { BITSTYPE bits ; void* RADRESTRICT cur ; U32 bitlen ; void* RADRESTRICT init ; void* RADRESTRICT end ; } VARBITSEND ; # define)",
    "insertText": "VarBitsPut(vb,val,size)"
  },
  {
    "label": "__v()",
    "kind": "Method",
    "detail": "Function (U32 __s = size ; U32)",
    "insertText": "__v(val)"
  },
  {
    "label": "VarBitsPut1()",
    "kind": "Method",
    "detail": "Function (} } } # define)",
    "insertText": "VarBitsPut1(vb,boolean)"
  },
  {
    "label": "VarBitsPuta1()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsPuta1(vb)"
  },
  {
    "label": "VarBitsPuta0()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsPuta0(vb)"
  },
  {
    "label": "VarBitsPutAlign()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsPutAlign(vb)"
  },
  {
    "label": "__s2()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "__s2(32-(vb).bitlen)"
  },
  {
    "label": "VarBitsPut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VarBitsPut((vb),0,__s2)"
  },
  {
    "label": "VarBitsFlushtoMemOnly()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsFlushtoMemOnly(vb)"
  },
  {
    "label": "VarBitsConvertPutToGet()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsConvertPutToGet(gvb,pvb)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(gvb)"
  },
  {
    "label": "VarBitsFlush()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VarBitsFlush(vb) VarBitsPutAlign(vb) #define VarBitsSize(vb) ((U32)( (((char*)(vb).cur)-((char*)(vb).init))*8 +(vb).bitlen )) RADDEFFUNC void VarBitsCopy(VARBITS* dest,VARBITS* src,U32 size)"
  },
  {
    "label": "getbitlevelconst()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "getbitlevelconst(level) \\ ( \\ (((level)< 1)?0: \\ (((level)< 2)?1: \\ (((level)< 4)?2: \\ (((level)< 8)?3: \\ (((level)< 16)?4: \\ (((level)< 32)?5: \\ (((level)< 64)?6: \\ (((level)< 128)?7: \\ (((level)< 256)?8: \\ (((level)< 512)?9: \\ (((level)< 1024)?10: \\ (((level)< 2048)?11: \\ (((level)< 4096)?12: \\ (((level)< 8192)?13: \\ (((level)<16384)?14: \\ (((level)<32768)?15: \\ (((level)<65536)?16:sizeof(char[65535-level]) \\ ))))))))))))))))) \\ ) #if defined(__RADPPC__) #if defined(__GNUC__) #if defined(__SNC__) #define count_leading_zeros(count, x) count = __cntlzw(x) #elif defined(__ghs__) RADDEFFUNC unsigned int __CLZ32(unsigned int a)"
  },
  {
    "label": "count_leading_zeros()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "count_leading_zeros(count, x) count = __CLZ32(x) #else #define count_leading_zeros(count, x) \\ __asm__ (\"{cntlz|cntlzw} %0,%1\" \\ : \"=r\" (count) \\ : \"r\" (x)) #endif static RADINLINE U32 getbitlevelvar( register U32 n)"
  },
  {
    "label": "count_leading_zeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "count_leading_zeros(n, n)"
  },
  {
    "label": "getbitlevelvar()",
    "kind": "Method",
    "detail": "Function (} # else # ifdef _MSC_VER # include<ppcintrinsics . h> # define __cntlzw _CountLeadingZeros # endif # define)",
    "insertText": "getbitlevelvar(n) (U32) (32 - __cntlzw(n)) #endif #elif defined(__RADSPU__) static RADINLINE U32 getbitlevelvar( register U32 n)"
  },
  {
    "label": "__builtin_spu_cntlz()",
    "kind": "Method",
    "detail": "Function (vector unsigned int v ; v [ 0 ] = n ; v =)",
    "insertText": "__builtin_spu_cntlz(v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(__RADARM__) #ifdef _MSC_VER #define getbitlevelvar(n) (U32) (32 - _arm_clz(n)) #else #define getbitlevelvar(n) (U32) (32 - __builtin_clz(n)) #endif #elif (_MSC_FULL_VER >= 13012035 ) RADDEFSTART unsigned char _BitScanReverse(unsigned long* Index, unsigned long Mask)"
  },
  {
    "label": "intrinsic()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "intrinsic(_BitScanReverse) RADDEFEND static RADINLINE U32 getbitlevelvar( register U32 val)"
  },
  {
    "label": "_BitScanReverse()",
    "kind": "Method",
    "detail": "Function (U32 b = 0 ;)",
    "insertText": "_BitScanReverse((unsigned long*)&b, val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char vs [ 1 6 ] = { 0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4 } ; int bits = 0 ;)",
    "insertText": "if(val & 0xffff0000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits = 1 6 ; val>> = 1 6 ; })",
    "insertText": "if(val & 0xff00)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits + = 8 ; val>> = 8 ; })",
    "insertText": "if(val & 0xf0)"
  },
  {
    "label": "VarBitsGetAlign()",
    "kind": "Method",
    "detail": "Function (bits + = 4 ; val>> = 4 ; } bits + = vs [ val ] ; return bits ; } # endif # define)",
    "insertText": "VarBitsGetAlign(vb)"
  },
  {
    "label": "VarBitsPos()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VarBitsPos(vb) ((U32)( (((U8*)(vb).cur)-((U8*)(vb).init))*8-(vb).bitlen )) #define GetBitsLen(val) (((U32)0xffffffff)>>(U32)(32-(val))) #define VarBitsGet1(vb,i) \\ ( \\ ((vb).bitlen==0)? \\ ( \\ i=*((BITSTYPE* RADRESTRICT)((vb).cur)), \\ ((vb).cur)=((char*)((vb).cur))+BITSTYPEBYTES, \\ ((vb).bits)=((BITSTYPE)i)>>1, \\ ((vb).bitlen)=(BITSTYPELEN-1) \\ ):( \\ i=((vb).bits), \\ ((vb).bits)>>=1, \\ --((vb).bitlen) \\ ),(i&1) \\ ) #define VarBitsGet1LE(vb,i) \\ ( \\ ((vb).bitlen==0)? \\ ( \\ i=radloadu32ptr((vb).cur), \\ ((vb).cur)=((char*)((vb).cur))+4, \\ ((vb).bits)=((U32)i)>>1, \\ ((vb).bitlen)=31 \\ ):( \\ i=((vb).bits), \\ ((vb).bits)>>=1, \\ --((vb).bitlen) \\ ),(i&1) \\ ) #define VarBitsGet(v,typ,vb,len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(((vb).bitlen)<(len))"
  },
  {
    "label": "nb()",
    "kind": "Method",
    "detail": "Function (\\ register BITSTYPE)",
    "insertText": "nb((BITSTYPE* RADRESTRICT)((vb).cur))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(typ)((((vb).bits)|(nb<<((vb).bitlen)))&GetBitsLen(len))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "v(typ)(((vb).bits)&GetBitsLen(len))"
  },
  {
    "label": "VarBitsGetWithCheck()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsGetWithCheck(v,typ,vb,len,endp,dowhat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ register BITSTYPE nb ; \\)",
    "insertText": "if(( (U8*)((vb).cur) ) >= ( (U8*) (endp) ) ) dowhat \\ nb=*((BITSTYPE* RADRESTRICT)((vb).cur))"
  },
  {
    "label": "VarBitsGetWithCheckBE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsGetWithCheckBE(v,typ,vb,len,endp,dowhat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ register BITSTYPE nb ; \\)",
    "insertText": "if(( (U8*)((vb).cur) ) >= ( (U8*) (endp) ) ) dowhat \\ nb=radloadu32ptrBE((vb).cur)"
  },
  {
    "label": "VarBitsGetWithCheckLE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsGetWithCheckLE(v,typ,vb,len,endp,dowhat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ register BITSTYPE nb ; \\)",
    "insertText": "if(( (U8*)((vb).cur) ) >= ( (U8*) (endp) ) ) dowhat \\ nb=radloadu32ptr((vb).cur)"
  },
  {
    "label": "VarBitsPeek()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsPeek(v,typ,vb,len)"
  },
  {
    "label": "VarBitsGetLE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsGetLE(v,typ,vb,len)"
  },
  {
    "label": "radloadu32ptr()",
    "kind": "Method",
    "detail": "Function (\\ register U32 nb =)",
    "insertText": "radloadu32ptr((vb).cur)"
  },
  {
    "label": "VarBitsUse()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsUse(vb,len)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else((vb).bits)>>=(len)"
  },
  {
    "label": "VARBITSLOCAL()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VARBITSLOCAL(name)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (BITSTYPE name # # bits ; U32 name # # bitlen # ifdef __RAD64REGS__ # ifdef INC_BINK2 # if)",
    "insertText": "defined(__RADX86__) #include <xmmintrin.h> #define VBPREFETCH( ptr ) _mm_prefetch(((char*)(ptr))+1024, _MM_HINT_T0 ) #elif defined(__RADARM64__) #define VBPREFETCH( ptr ) __builtin_prefetch(((char*)(ptr))+1024) #else #define VBPREFETCH( ptr ) #endif #else #define VBPREFETCH( ptr ) #endif #define VarBitsLocalGet(v,typ,vb,len)"
  },
  {
    "label": "_bits()",
    "kind": "Method",
    "detail": "Function (\\ register U64)",
    "insertText": "_bits(vb##bits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((vb##bitlen)<len)"
  },
  {
    "label": "_bits()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_bits(((U64)(*((U32* RADRESTRICT)(vb##cur))))<<(vb##bitlen))"
  },
  {
    "label": "VBPREFETCH()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VBPREFETCH((vb##cur))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(typ)(((U32)_bits)&GetBitsLen(len))"
  },
  {
    "label": "VarBitsLocalGetWithCheckBase()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VarBitsLocalGetWithCheckBase(v,typ,vb,len,mask,endp,dowhat,load)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(( (U8*)(vb##cur) ) >= ( (U8*) (endp) ) ) dowhat \\ _bits|=((U64) (load(vb##cur))) << (vb##bitlen)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "v(typ)(_bits & (mask))"
  },
  {
    "label": "VarBitsLocalGet()",
    "kind": "Method",
    "detail": "Function (\\ } # else # define)",
    "insertText": "VarBitsLocalGet(v,typ,vb,len)"
  },
  {
    "label": "nb()",
    "kind": "Method",
    "detail": "Function (\\ register BITSTYPE)",
    "insertText": "nb((BITSTYPE* RADRESTRICT)(vb##cur))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(typ)(((vb##bits)|(nb<<(vb##bitlen)))&GetBitsLen(len))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "v(typ)((vb##bits)&GetBitsLen(len))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ register BITSTYPE nb ; \\)",
    "insertText": "if(( (U8*)(vb##cur) ) >= ( (U8*) (endp) ) ) dowhat \\ nb=load(vb##cur)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(typ)(((vb##bits)|(nb<<(vb##bitlen)))&(mask))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "v(typ)((vb##bits)&(mask))"
  },
  {
    "label": "radloadbitsnative()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # endif # define)",
    "insertText": "radloadbitsnative(ptr) (*((BITSTYPE* RADRESTRICT)(ptr))) #define VarBitsLocalGetWithCheck(v,typ,vb,len,endp,dowhat) VarBitsLocalGetWithCheckBase(v,typ,vb,len,GetBitsLen(len),endp,dowhat,radloadbitsnative) #define VarBitsLocalGetWithCheckBE(v,typ,vb,len,endp,dowhat) VarBitsLocalGetWithCheckBase(v,typ,vb,len,GetBitsLen(len),endp,dowhat,radloadu32ptrBE) #define VarBitsLocalGetWithCheckLE(v,typ,vb,len,endp,dowhat) VarBitsLocalGetWithCheckBase(v,typ,vb,len,GetBitsLen(len),endp,dowhat,radloadu32ptr) #define VarBitsLocalGetWithCheckM(v,typ,vb,len,mask,endp,dowhat) VarBitsLocalGetWithCheckBase(v,typ,vb,len,mask,endp,dowhat,radloadbitsnative) #define VarBitsLocalGetWithCheckMBE(v,typ,vb,len,mask,endp,dowhat) VarBitsLocalGetWithCheckBase(v,typ,vb,len,mask,endp,dowhat,radloadu32ptrBE) #define VarBitsLocalGetWithCheckMLE(v,typ,vb,len,mask,endp,dowhat) VarBitsLocalGetWithCheckBase(v,typ,vb,len,mask,endp,dowhat,radloadu32ptr) #define VarBitsLocalFill1WithCheckBase(vb,endp,cond,dowhat,load)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((vb##bitlen)==0 && (cond))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(( (U8*)(vb##cur) ) >= ( (U8*) (endp) ) ) dowhat \\ (vb##bits)=load(vb##cur)"
  },
  {
    "label": "VarBitsLocalGet1WithCheckBase()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsLocalGet1WithCheckBase(v,vb,endp,dowhat,load)"
  },
  {
    "label": "VarBitsLocalFill1WithCheckBase()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VarBitsLocalFill1WithCheckBase(vb,endp,1,dowhat,load) \\ --(vb##bitlen)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(vb##bits)"
  },
  {
    "label": "VarBitsLocalFill1WithCheck()",
    "kind": "Method",
    "detail": "Function (\\ v& = 1 ; \\ } # define)",
    "insertText": "VarBitsLocalFill1WithCheck(vb,endp,cond,dowhat) VarBitsLocalFill1WithCheckBase(vb,endp,cond,dowhat,radloadbitsnative) #define VarBitsLocalFill1WithCheckBE(vb,endp,cond,dowhat) VarBitsLocalFill1WithCheckBase(vb,endp,cond,dowhat,radloadu32ptrBE) #define VarBitsLocalFill1WithCheckLE(vb,endp,cond,dowhat) VarBitsLocalFill1WithCheckBase(vb,endp,cond,dowhat,radloadu32ptr) #define VarBitsLocalGet1WithCheck(v,vb,endp,dowhat) VarBitsLocalGet1WithCheckBase(v,vb,endp,dowhat,radloadbitsnative) #define VarBitsLocalGet1WithCheckBE(v,vb,endp,dowhat) VarBitsLocalGet1WithCheckBase(v,vb,endp,dowhat,radloadu32ptrBE) #define VarBitsLocalGet1WithCheckLE(v,vb,endp,dowhat) VarBitsLocalGet1WithCheckBase(v,vb,endp,dowhat,radloadu32ptr) #define VarBitsLocalGetIfxSM(v,typ,vb,len,i,x,mask) \\ (vb##bitlen==0)? \\ ( \\ i=*((BITSTYPE* RADRESTRICT)(vb##cur)), \\ (vb##cur)=((char*)(vb##cur))+BITSTYPEBYTES, \\ ( ( i & 1 ) == x ) ? \\ ( \\ v = (typ)( ( i >> 1 ) mask ), \\ (vb##bits)=((BITSTYPE)i)>>(len+1), \\ (vb##bitlen)=(BITSTYPELEN - 1 - len), \\ x \\ ):( \\ (vb##bits)=(((BITSTYPE)i)>>1), \\ (vb##bitlen)=(BITSTYPELEN-1), \\ !x \\ ) \\ ):( \\ --(vb##bitlen), \\ ( ( (vb##bits) & 1 ) == x ) ? \\ ( \\ ( ( vb##bitlen ) < len )? \\ ( \\ i=*((BITSTYPE* RADRESTRICT)(vb##cur)), \\ (vb##cur)=(((char*)(vb##cur))+BITSTYPEBYTES ), \\ v=(typ)(((vb##bits>>1)|(i<<vb##bitlen)) mask ), \\ (vb##bits)=(i>>((len)-vb##bitlen)), \\ (vb##bitlen)=((vb##bitlen)+BITSTYPELEN-(len)), \\ x \\ ):( \\ v = (typ) ( ( (vb##bits) >> 1 ) mask ), \\ (vb##bits)>>=(len+1), \\ (vb##bitlen)-=len, \\ x \\ ) \\ ):( \\ (vb##bits)>>=1, \\ !x \\ ) \\ ) \\ #define VarBitsLocalGetIfx(v,typ,vb,len,i,x) \\ VarBitsLocalGetIfxSM(v,typ,vb,len,i,x,&GetBitLen(len)) #define VarBitsLocalGetIfxNM(v,typ,vb,len,i,x) \\ VarBitsLocalGetIfxSM(v,typ,vb,len,i,x, ) #define VarBitsLocalPeek(v,typ,vb,len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((vb##bitlen)<(len))"
  },
  {
    "label": "VarBitsLocalGet1BE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsLocalGet1BE(vb,i) \\ ( \\ (vb##bitlen==0)? \\ ( \\ i=radloadu32ptrBE(vb##cur), \\ (vb##cur)=((char*)(vb##cur))+BITSTYPEBYTES, \\ (vb##bits)=((BITSTYPE)i)>>1, \\ (vb##bitlen)=(BITSTYPELEN-1) \\ ):( \\ i=(vb##bits), \\ (vb##bits)>>=1, \\ --(vb##bitlen) \\ ),(i&1) \\ ) #define VarBitsLocalGet1LE(vb,i) \\ ( \\ (vb##bitlen==0)? \\ ( \\ i=radloadu32ptr(vb##cur), \\ (vb##cur)=((char*)(vb##cur))+BITSTYPEBYTES, \\ (vb##bits)=((BITSTYPE)i)>>1, \\ (vb##bitlen)=(BITSTYPELEN-1) \\ ):( \\ i=(vb##bits), \\ (vb##bits)>>=1, \\ --(vb##bitlen) \\ ),(i&1) \\ ) #define VarBitsLocalMaskFromMaskAndUse1(omask,vb,imask) \\ if (vb##bitlen==0)"
  },
  {
    "label": "omask()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "omask(((S32)(vb##bits)<<31)>>31)"
  },
  {
    "label": "VarBitsLocalGet1()",
    "kind": "Method",
    "detail": "Function (\\ # ifdef __RAD64REGS__ # define)",
    "insertText": "VarBitsLocalGet1(vb,i) \\ ( \\ ((vb##bitlen==0)? \\ ( \\ (vb##bits)=*((BITSTYPE* RADRESTRICT)(vb##cur)), \\ (vb##cur)=((char*)(vb##cur))+4, \\ (vb##bitlen)=32 \\ ):0), \\ ( \\ i=(vb##bits)&1, \\ (vb##bits)>>=1, \\ --(vb##bitlen) \\ ),(i) \\ ) #else #define VarBitsLocalGet1(vb,i) \\ ( \\ (vb##bitlen==0)? \\ ( \\ i=*((BITSTYPE* RADRESTRICT)(vb##cur)), \\ (vb##cur)=((char*)(vb##cur))+BITSTYPEBYTES, \\ (vb##bits)=((BITSTYPE)i)>>1, \\ (vb##bitlen)=(BITSTYPELEN-1) \\ ):( \\ i=(vb##bits), \\ (vb##bits)>>=1, \\ --(vb##bitlen) \\ ),(i&1) \\ ) #endif #define VarBitsLocalUse(vb,len)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(vb##bits)>>=(len)"
  },
  {
    "label": "VarBitsLocalPos()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsLocalPos(vb,origvb) ((U32)( (((char*)vb##cur)-((char*)(origvb)->init))*8 +(32-vb##bitlen) )) #define VarBitsCopyToLocal( local, vb ) local##cur = (vb)"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (local # #)",
    "insertText": "bits(vb)"
  },
  {
    "label": "bitlen()",
    "kind": "Method",
    "detail": "Function (local # #)",
    "insertText": "bitlen(vb)"
  },
  {
    "label": "VarBitsCopyFromLocal()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VarBitsCopyFromLocal(vb, local ) (vb)"
  },
  {
    "label": "CLASSIFY_SIGN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CLASSIFY_SIGN(val ) ( (((U32)((S32)(val))) >> 31 ) + ((((U32)(-(S32)(val))) >> 30 ) & 2 ))"
  },
  {
    "label": "VarBitsBPutOpen()",
    "kind": "Method",
    "detail": "Function (BITSTYPE bits ; void* RADRESTRICT cur ; U32 bitlen ; void* RADRESTRICT init ; int isPut ; } VARBITSB ; # define)",
    "insertText": "VarBitsBPutOpen(vb,ptr)"
  },
  {
    "label": "VarBitsBGetOpen()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VarBitsBGetOpen(vb,ptr)"
  },
  {
    "label": "VarBitsBPut()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VarBitsBPut(vb,val,size)"
  },
  {
    "label": "radassert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "radassert(__v < (1UL<<__s))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((vb).bitlen+__s >=BITSTYPELEN)"
  },
  {
    "label": "__s()",
    "kind": "Method",
    "detail": "Function (U32 __r =)",
    "insertText": "__s(vb)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "else(vb).bits = ((vb).bits<<__s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(0) #define VarBitsBPuta1(vb)"
  },
  {
    "label": "VarBitsBPuta0()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsBPuta0(vb)"
  },
  {
    "label": "VarBitsBPut1()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsBPut1(vb,bit)"
  },
  {
    "label": "VarBitsBPutAlign()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsBPutAlign(vb)"
  },
  {
    "label": "VarBitsBPut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VarBitsBPut((vb),0,__s2)"
  },
  {
    "label": "VarBitsBPutFlush()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VarBitsBPutFlush(vb) VarBitsBPutAlign(vb) #define VarBitsBGetAlign(vb)"
  },
  {
    "label": "VarBitsBPutSize()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VarBitsBPutSize(vb) ((U32)( (((char*)(vb).cur)-((char*)(vb).init))*8 +(vb).bitlen )) #define VarBitsBGetSize(vb) ((U32)( (((char*)(vb).cur)-((char*)(vb).init))*8 -(vb).bitlen )) #define VarBitsBGet(v,typ,vb,len)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(typ)((((vb).bits)|(nb>>((vb).bitlen)))>>(BITSTYPELEN-len))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "v(typ)(((vb).bits)>>(BITSTYPELEN-len))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "v(len)"
  },
  {
    "label": "VarBitsBPeek()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsBPeek(v,typ,vb,len)"
  },
  {
    "label": "VarBitsBUse()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VarBitsBUse(vb,len)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else((vb).bits)<<=(len)"
  }
]