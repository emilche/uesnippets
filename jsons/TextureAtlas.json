[
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ESlateTextureAtlasPaddingStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESlateTextureAtlasPaddingStyle"
  },
  {
    "label": "FAtlasedTextureSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAtlasedTextureSlot"
  },
  {
    "label": "FSlateTextureAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextureAtlas"
  },
  {
    "label": "FCopyRowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopyRowData"
  },
  {
    "label": "FAtlasSlotInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAtlasSlotInfo"
  },
  {
    "label": "ISlateTextureAtlasFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateTextureAtlasFactory"
  },
  {
    "label": "FAtlasFlushParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAtlasFlushParams"
  },
  {
    "label": "FSlateFlushableAtlasCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFlushableAtlasCache"
  },
  {
    "label": "ISlateAtlasProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateAtlasProvider"
  },
  {
    "label": "WITH_ATLAS_DEBUGGING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / List . h \" # include \" Layout / SlateRect . h \" # define)",
    "insertText": "WITH_ATLAS_DEBUGGING(WITH_EDITOR || IS_PROGRAM)"
  },
  {
    "label": "GetCurrentSlateTextureAtlasThreadId()",
    "kind": "Method",
    "detail": "Function (enum class ESlateFontAtlasContentType { Alpha,Color,Msdf } ; enum ESlateTextureAtlasPaddingStyle { NoPadding,DilateBorder,PadWithZero,} ; enum class ESlateTextureAtlasThreadId { Unknown = - 1,Game = 0,Render = 1,} ; ESlateTextureAtlasThreadId)",
    "insertText": "GetCurrentSlateTextureAtlasThreadId()"
  },
  {
    "label": "GetSlateFontAtlasContentBytesPerPixel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSlateFontAtlasContentBytesPerPixel(ESlateFontAtlasContentType InContentType)"
  },
  {
    "label": "FAtlasedTextureSlot()",
    "kind": "Method",
    "detail": "Function (struct FAtlasedTextureSlot : public TIntrusiveLinkedList<FAtlasedTextureSlot> { uint32 X ; uint32 Y ; uint32 Width ; uint32 Height ; uint8 Padding ;)",
    "insertText": "FAtlasedTextureSlot(uint32 InX, uint32 InY, uint32 InWidth, uint32 InHeight, uint8 InPadding ) : TIntrusiveLinkedList<FAtlasedTextureSlot>() , X(InX) , Y(InY) , Width(InWidth) , Height(InHeight) , Padding(InPadding)"
  },
  {
    "label": "FSlateTextureAtlas()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlateTextureAtlas { public :)",
    "insertText": "FSlateTextureAtlas(uint32 InWidth, uint32 InHeight, uint32 InBytesPerPixel, ESlateTextureAtlasPaddingStyle InPaddingStyle, bool bInUpdatesAfterInitialization)"
  },
  {
    "label": "FSlateTextureAtlas()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateTextureAtlas()"
  },
  {
    "label": "EmptyAtlasData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyAtlasData()"
  },
  {
    "label": "AddTexture()",
    "kind": "Method",
    "detail": "Function (const FAtlasedTextureSlot*)",
    "insertText": "AddTexture(uint32 TextureWidth, uint32 TextureHeight, const TArray<uint8>& Data)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "ConditionalUpdateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdateTexture()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "GetAtlasTexture()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResource*)",
    "insertText": "GetAtlasTexture()"
  },
  {
    "label": "GetSlotAtPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_ATLAS_DEBUGGING const FAtlasedTextureSlot*)",
    "insertText": "GetSlotAtPosition(FIntPoint InPosition)"
  },
  {
    "label": "FindSlotForTexture()",
    "kind": "Method",
    "detail": "Function (# endif protected : const FAtlasedTextureSlot*)",
    "insertText": "FindSlotForTexture(uint32 InWidth, uint32 InHeight)"
  },
  {
    "label": "GetFreeSlotSearchIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFreeSlotSearchIndex(uint32 InWidth, uint32 InHeight)"
  },
  {
    "label": "AddFreeSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFreeSlot(uint32 InX, uint32 InY, uint32 InWidth, uint32 InHeight)"
  },
  {
    "label": "InitAtlasData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAtlasData()"
  },
  {
    "label": "CopyRow()",
    "kind": "Method",
    "detail": "Function (struct FCopyRowData { const uint8* SrcData ; uint8* DestData ; uint32 SrcRow ; uint32 DestRow ; uint32 RowWidth ; uint32 SrcTextureWidth ; uint32 DestTextureWidth ; } ; void)",
    "insertText": "CopyRow(const FCopyRowData& CopyRowData)"
  },
  {
    "label": "ZeroRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroRow(const FCopyRowData& CopyRowData)"
  },
  {
    "label": "CopyDataIntoSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyDataIntoSlot(const FAtlasedTextureSlot* SlotToCopyTo, const TArray<uint8>& Data)"
  },
  {
    "label": "GetPaddingAmount()",
    "kind": "Method",
    "detail": "Function (private : uint8)",
    "insertText": "GetPaddingAmount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} protected : TArray<uint8> AtlasData ; FAtlasedTextureSlot* AtlasUsedSlots ; TArray<FAtlasedTextureSlot*> AtlasEmptySlotsMap ; uint32 AtlasWidth ; uint32 AtlasHeight ; uint32 BytesPerPixel ; ESlateTextureAtlasPaddingStyle PaddingStyle ; bool bNeedsUpdate ; bool bUpdatesAfterInitialization ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FAtlasSlotInfo()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FAtlasSlotInfo {)",
    "insertText": "FAtlasSlotInfo() : AtlasSlotRect() , TextureName(NAME_None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAtlasSlotInfo& Other)"
  },
  {
    "label": "CreateTextureAtlas()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FSlateTextureAtlas>)",
    "insertText": "CreateTextureAtlas(int32 AtlasSize, int32 AtlasStride, ESlateTextureAtlasPaddingStyle PaddingStyle, bool bUpdatesAfterInitialization)"
  },
  {
    "label": "CreateNonAtlasedTexture()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FSlateShaderResource>)",
    "insertText": "CreateNonAtlasedTexture(const uint32 InWidth, const uint32 InHeight, const TArray<uint8>& InRawData)"
  },
  {
    "label": "ReleaseTextureAtlases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTextureAtlases(const TArray<TUniquePtr<FSlateTextureAtlas>>& InTextureAtlases, const TArray<TUniquePtr<FSlateShaderResource>>& InNonAtlasedTextures, const bool bWaitForRelease)"
  },
  {
    "label": "FSlateFlushableAtlasCache()",
    "kind": "Method",
    "detail": "Function (} ; struct FAtlasFlushParams { int32 InitialMaxAtlasPagesBeforeFlushRequest = 1 ; int32 InitialMaxNonAtlasPagesBeforeFlushRequest = 1 ; int32 GrowAtlasFrameWindow = 1 ; int32 GrowNonAtlasFrameWindow = 1 ; } ; class FSlateFlushableAtlasCache { public :)",
    "insertText": "FSlateFlushableAtlasCache(const FAtlasFlushParams* InFlushParams)"
  },
  {
    "label": "FSlateFlushableAtlasCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateFlushableAtlasCache()"
  },
  {
    "label": "RequestFlushCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestFlushCache(const FString& Reason)"
  },
  {
    "label": "ResetFlushCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFlushCounters()"
  },
  {
    "label": "UpdateFlushCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFlushCounters(int32 NumGrayscale, int32 NumColor, int32 NumMsdf, int32 NumNonAtlased)"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "UpdateInternal(int32 CurrentNum, int32& MaxNum, int32 InitialMax, int32 FrameWindowNum)"
  },
  {
    "label": "ISlateAtlasProvider()",
    "kind": "Method",
    "detail": "Function (private : const FAtlasFlushParams* FlushParams ; int32 CurrentMaxGrayscaleAtlasPagesBeforeFlushRequest ; int32 CurrentMaxColorAtlasPagesBeforeFlushRequest ; int32 CurrentMaxMsdfAtlasPagesBeforeFlushRequest ; int32 CurrentMaxNonAtlasedTexturesBeforeFlushRequest ; uint64 FrameCounterLastFlushRequest ; } ; class ISlateAtlasProvider { public : ~)",
    "insertText": "ISlateAtlasProvider()"
  },
  {
    "label": "GetNumAtlasPages()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumAtlasPages()"
  },
  {
    "label": "GetAtlasPageResource()",
    "kind": "Method",
    "detail": "Function (class FSlateShaderResource*)",
    "insertText": "GetAtlasPageResource(const int32 InIndex)"
  },
  {
    "label": "IsAtlasPageResourceAlphaOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtlasPageResourceAlphaOnly(const int32 InIndex)"
  },
  {
    "label": "GetAtlasSlotInfoAtPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_ATLAS_DEBUGGING FAtlasSlotInfo)",
    "insertText": "GetAtlasSlotInfoAtPosition(FIntPoint InPosition, int32 AtlasIndex)"
  }
]