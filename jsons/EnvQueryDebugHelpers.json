[
  {
    "label": "FTestData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTestData"
  },
  {
    "label": "UEnvQueryDebugHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryDebugHelpers"
  },
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "FItemData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItemData"
  },
  {
    "label": "FDebugHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugHelper"
  },
  {
    "label": "FQueryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryData"
  },
  {
    "label": "FDebugHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" EngineDefines . h \" # include \" Engine / World . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" VisualLogger / VisualLogger . h \" # include \" DebugRenderSceneProxy . h \" # include \" EnvQueryDebugHelpers . generated . h \" class FTestData ; class UEnvQueryDebugHelpers ; # if USE_EQS_DEBUGGER | | ENABLE_VISUAL_LOG struct FLogCategoryBase ; namespace EQSDebug { struct FItemData { FString Desc ; int32 ItemIdx ; float TotalScore ; TArray<float> TestValues ; TArray<float> TestScores ; } ; struct FTestData { FString ShortName ; FString Detailed ; } ; struct FDebugHelper {)",
    "insertText": "FDebugHelper() : Location(FVector::ZeroVector), Radius(0), FailedTestIndex(INDEX_NONE)"
  },
  {
    "label": "FDebugHelper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugHelper(FVector Loc, float R) : Location(Loc), Radius(R), FailedTestIndex(INDEX_NONE)"
  },
  {
    "label": "FDebugHelper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugHelper(FVector Loc, float R, const FString& Desc) : Location(Loc), Radius(R), FailedTestIndex(INDEX_NONE), AdditionalInformation(Desc)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} FVector Location ; float Radius ; int32 FailedTestIndex ; float FailedScore ; FString AdditionalInformation ; } ; struct FQueryData { TArray<FItemData> Items ; TArray<FTestData> Tests ; TArray<FDebugRenderSceneProxy::FSphere> SolidSpheres ; TArray<FDebugRenderSceneProxy::FText3d> Texts ; TArray<FDebugHelper> RenderDebugHelpers ; TArray<FString> Options ; int32 UsedOption ; int32 NumValidItems ; int32 Id ; FString Name ; double Timestamp ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NumValidItems = 0 ; Id = INDEX_NONE ; Name .)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FDebugRenderSceneProxy::FSphere& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . Radius ; Ar<<Data . Location ; Ar<<Data . Color ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FDebugRenderSceneProxy::FText3d& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . Text ; Ar<<Data . Location ; Ar<<Data . Color ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, EQSDebug::FItemData& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . Desc ; Ar<<Data . ItemIdx ; Ar<<Data . TotalScore ; Ar<<Data . TestValues ; Ar<<Data . TestScores ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, EQSDebug::FTestData& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . ShortName ; Ar<<Data . Detailed ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, EQSDebug::FDebugHelper& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . Location ; Ar<<Data . Radius ; Ar<<Data . AdditionalInformation ; Ar<<Data . FailedTestIndex ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, EQSDebug::FQueryData& Data)"
  },
  {
    "label": "UE_VLOG_EQS()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . Items ; Ar<<Data . Tests ; Ar<<Data . SolidSpheres ; Ar<<Data . Texts ; Ar<<Data . NumValidItems ; Ar<<Data . Id ; Ar<<Data . Name ; Ar<<Data . Timestamp ; Ar<<Data . RenderDebugHelpers ; Ar<<Data . Options ; Ar<<Data . UsedOption ; return Ar ; } # endif # if ENABLE_VISUAL_LOG&& USE_EQS_DEBUGGER # define)",
    "insertText": "UE_VLOG_EQS(Query, Category, Verbosity) UEnvQueryDebugHelpers::LogQuery(Query, Category, ELogVerbosity::Verbosity)"
  },
  {
    "label": "UE_VLOG_EQS()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "UE_VLOG_EQS(Query, CategoryName, Verbosity) #endif UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: #if USE_EQS_DEBUGGER static AIMODULE_API void QueryToDebugData(FEnvQueryInstance& Query, EQSDebug::FQueryData& EQSLocalData, int32 MaxItemsToStore = 10)"
  },
  {
    "label": "QueryToBlobArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryToBlobArray(FEnvQueryInstance& Query, TArray<uint8>& BlobArray, bool bUseCompression = false)"
  },
  {
    "label": "DebugDataToBlobArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDataToBlobArray(EQSDebug::FQueryData& QueryData, TArray<uint8>& BlobArray, bool bUseCompression = false)"
  },
  {
    "label": "BlobArrayToDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlobArrayToDebugData(const TArray<uint8>& BlobArray, EQSDebug::FQueryData& EQSLocalData, bool bUseCompression = false)"
  },
  {
    "label": "LogQuery()",
    "kind": "Method",
    "detail": "Function (# endif # if ENABLE_VISUAL_LOG&& USE_EQS_DEBUGGER void)",
    "insertText": "LogQuery(FEnvQueryInstance& Query, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "LogQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogQuery(FEnvQueryInstance& Query, const FName& CategoryName, ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "LogQueryInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "LogQueryInternal(FEnvQueryInstance& Query, const FName& CategoryName, ELogVerbosity::Type Verbosity, double TimeSeconds, FVisualLogEntry *CurrentEntry)"
  },
  {
    "label": "GetCategoryName()",
    "kind": "Method",
    "detail": "Function (const FName CategoryName = Category .)",
    "insertText": "GetCategoryName()"
  },
  {
    "label": "LogQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogQuery(Query, CategoryName, Verbosity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UWorld* World = nullptr ; FVisualLogEntry* CurrentEntry = nullptr ;)",
    "insertText": "if(FVisualLogger::CheckVisualLogInputInternal(Query.Owner.Get(), CategoryName, Verbosity, &World, &CurrentEntry) == false)"
  }
]