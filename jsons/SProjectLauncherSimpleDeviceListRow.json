[
  {
    "label": "SProjectLauncherSimpleDeviceListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherSimpleDeviceListRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Styling / StyleDefaults . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" Models / ProjectLauncherModel . h \" # include \" Widgets / Shared / ProjectLauncherDelegates . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Layout / SUniformGridPanel . h \" # include \" Styling / AppStyle . h \" # include \" PlatformInfo . h \" # include \" Widgets / Shared / SProjectLauncherBuildConfigurationSelector . h \" # include \" Widgets / Shared / SProjectLauncherCookModeSelector . h \" # include \" Widgets / Shared / SProjectLauncherProfileLaunchButton . h \" # include \" Widgets / Shared / SProjectLauncherVariantSelector . h \" # include \" Widgets / Layout / SSeparator . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherSimpleDeviceListRow \" class SProjectLauncherSimpleDeviceListRow : public STableRow<TSharedPtr<ITargetDeviceProxy>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherSimpleDeviceListRow)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnProfileRun, OnProfileRun) SLATE_ARGUMENT(TSharedPtr<ITargetDeviceProxy>, DeviceProxy) SLATE_ATTRIBUTE(bool, IsAdvanced) SLATE_END_ARGS() public: ~SProjectLauncherSimpleDeviceListRow()"
  },
  {
    "label": "GetProfileManager()",
    "kind": "Method",
    "detail": "Function (Model ->)",
    "insertText": "GetProfileManager()->RemoveProfile(LaunchProfile.ToSharedRef())"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "ConstructInternal()",
    "kind": "Method",
    "detail": "Function (STableRow<TSharedPtr<ITargetDeviceProxy>)",
    "insertText": "ConstructInternal(STableRow::FArguments() .ShowSelection(false), InOwnerTableView)"
  },
  {
    "label": "GetProfileManager()",
    "kind": "Method",
    "detail": "Function (Model = InModel ; IsAdvanced = InArgs . _IsAdvanced ; OnProfileRun = InArgs . _OnProfileRun ; DeviceProxy = InArgs . _DeviceProxy ; SimpleProfile = Model ->)",
    "insertText": "GetProfileManager()->FindOrAddSimpleProfile(DeviceProxy->GetName())"
  },
  {
    "label": "GetProfileManager()",
    "kind": "Method",
    "detail": "Function (LaunchProfile = Model ->)",
    "insertText": "GetProfileManager()->CreateUnsavedProfile(DeviceProxy->GetName())"
  },
  {
    "label": "SetProjectSpecified()",
    "kind": "Method",
    "detail": "Function (LaunchProfile ->)",
    "insertText": "SetProjectSpecified(false)"
  },
  {
    "label": "SetBuildTargetSpecified()",
    "kind": "Method",
    "detail": "Function (LaunchProfile ->)",
    "insertText": "SetBuildTargetSpecified(false)"
  },
  {
    "label": "UpdateProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProfile()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SUniformGridPanel> NameGrid =)",
    "insertText": "SNew(SUniformGridPanel).SlotPadding(FMargin(0.0f, 1.0f))"
  },
  {
    "label": "MakeAdvancedSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeAdvancedSettings(NameGrid, ValueGrid)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) + SHorizontalBox::Slot() .FillWidth(1) .Padding(0,0,0,1) [ SNew(SBorder) .Padding(2) .BorderImage(FAppStyle::Get().GetBrush(\"Brushes.Panel\")) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) .Padding(14, 0, 12, 0) [ SNew(SBox) .WidthOverride(44.f) .HeightOverride(44.f) [ SNew(SImage) .Image(this, &SProjectLauncherSimpleDeviceListRow::HandleDeviceImage) ] ] + SHorizontalBox::Slot() .FillWidth(1) .VAlign(VAlign_Center) [ SNew(SVerticalBox) + SVerticalBox::Slot() .AutoHeight() .Padding(2,9,2,4) [ SNew(STextBlock) .Text(this, &SProjectLauncherSimpleDeviceListRow::HandleDeviceNameText) ] + SVerticalBox::Slot() .AutoHeight() .Padding(2, 4, 2, 9) [ SNew(STextBlock) .Text(this, &SProjectLauncherSimpleDeviceListRow::HandleHostPlatformText) ] ] + SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) [ SNew(SVerticalBox) + SVerticalBox::Slot() .AutoHeight() .Padding(0) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() .Padding(0, 0, 30, 0) [ NameGrid ] + SHorizontalBox::Slot() .AutoWidth() [ ValueGrid ] ] ] + SHorizontalBox::Slot() .AutoWidth() .Padding(12, 5, 0, 5) [ SNew(SSeparator) .Orientation(Orient_Vertical) .Thickness(1.f) ] + SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) .Padding(20, 0, 20, 0) [ SNew(SProjectLauncherProfileLaunchButton, true) .LaunchProfile(this, &SProjectLauncherSimpleDeviceListRow::GetLaunchProfile) .OnClicked(this, &SProjectLauncherSimpleDeviceListRow::OnLaunchClicked)"
  },
  {
    "label": "MakeSimpleSettings()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "MakeSimpleSettings(TSharedRef<SUniformGridPanel> InNameColumn, TSharedRef<SUniformGridPanel> InValueColumn)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Row = 0 ;)",
    "insertText": "if(DeviceProxy->CanSupportVariants())"
  },
  {
    "label": "MakeVariantRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeVariantRow(InNameColumn, InValueColumn, Row++)"
  },
  {
    "label": "MakeAdvancedSettings()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MakeAdvancedSettings(TSharedRef<SUniformGridPanel> InNameColumn, TSharedRef<SUniformGridPanel> InValueColumn)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Row = 0 ;)",
    "insertText": "if(DeviceProxy->GetNumVariants() > 1)"
  },
  {
    "label": "MakeBuildConfigurationRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MakeBuildConfigurationRow(InNameColumn, InValueColumn, Row++)"
  },
  {
    "label": "MakeCookModeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCookModeRow(InNameColumn, InValueColumn, Row++)"
  },
  {
    "label": "MakeVariantRow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeVariantRow(TSharedRef<SUniformGridPanel> InNameColumn, TSharedRef<SUniformGridPanel> InValueColumn, int InRowIndex)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (InNameColumn ->)",
    "insertText": "AddSlot(0, InRowIndex) .VAlign(VAlign_Center) .HAlign(HAlign_Right) [ SNew(STextBlock) .Text(LOCTEXT(\"LaunchVariantLabel\", \"Variant\"))"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (InValueColumn ->)",
    "insertText": "AddSlot(0, InRowIndex) .HAlign(HAlign_Fill) [ SNew(SProjectLauncherVariantSelector, DeviceProxy) .OnVariantSelected(this, &SProjectLauncherSimpleDeviceListRow::HandleVariantSelectorVariantSelected) .Text(this, &SProjectLauncherSimpleDeviceListRow::HandleVariantSelectorText)"
  },
  {
    "label": "HandleVariantSelectorText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleVariantSelectorText()"
  },
  {
    "label": "GetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (FName Variant = SimpleProfile ->)",
    "insertText": "GetDeviceVariant()"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromName(Variant)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HandleVariantSelectorVariantSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleVariantSelectorVariantSelected(FName InVariant)"
  },
  {
    "label": "SetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (SimpleProfile ->)",
    "insertText": "SetDeviceVariant(InVariant)"
  },
  {
    "label": "MakeBuildConfigurationRow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MakeBuildConfigurationRow(TSharedRef<SUniformGridPanel> InNameColumn, TSharedRef<SUniformGridPanel> InValueColumn, int InRowIndex)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (InNameColumn ->)",
    "insertText": "AddSlot(0, InRowIndex) .VAlign(VAlign_Center) .HAlign(HAlign_Right) [ SNew(STextBlock) .Text(LOCTEXT(\"LaunchConfigLabel\", \"Config\")) .Visibility(this, &SProjectLauncherSimpleDeviceListRow::IsAdvancedVisible)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (InValueColumn ->)",
    "insertText": "AddSlot(0, InRowIndex) .HAlign(HAlign_Fill) [ SNew(SProjectLauncherBuildConfigurationSelector) .OnConfigurationSelected(this, &SProjectLauncherSimpleDeviceListRow::HandleBuildConfigurationSelectorConfigurationSelected) .Text(this, &SProjectLauncherSimpleDeviceListRow::HandleBuildConfigurationSelectorText) .Visibility(this, &SProjectLauncherSimpleDeviceListRow::IsAdvancedVisible)"
  },
  {
    "label": "HandleBuildConfigurationSelectorText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleBuildConfigurationSelectorText()"
  },
  {
    "label": "HandleBuildConfigurationSelectorConfigurationSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleBuildConfigurationSelectorConfigurationSelected(EBuildConfiguration Configuration)"
  },
  {
    "label": "SetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (SimpleProfile ->)",
    "insertText": "SetBuildConfiguration(Configuration)"
  },
  {
    "label": "MakeCookModeRow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MakeCookModeRow(TSharedRef<SUniformGridPanel> InNameColumn, TSharedRef<SUniformGridPanel> InValueColumn, int InRowIndex)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (InNameColumn ->)",
    "insertText": "AddSlot(0, InRowIndex) .VAlign(VAlign_Center) .HAlign(HAlign_Right) [ SNew(STextBlock) .Text(LOCTEXT(\"CookLabel\", \"Data Build\")) .Visibility(this, &SProjectLauncherSimpleDeviceListRow::IsAdvancedVisible)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (InValueColumn ->)",
    "insertText": "AddSlot(0, InRowIndex) .HAlign(HAlign_Fill) [ SNew(SProjectLauncherCookModeSelector) .OnCookModeSelected(this, &SProjectLauncherSimpleDeviceListRow::HandleCookModeSelectorConfigurationSelected) .Text(this, &SProjectLauncherSimpleDeviceListRow::HandleCookModeSelectorText) .Visibility(this, &SProjectLauncherSimpleDeviceListRow::IsAdvancedVisible)"
  },
  {
    "label": "HandleCookModeSelectorText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleCookModeSelectorText()"
  },
  {
    "label": "HandleCookModeSelectorConfigurationSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleCookModeSelectorConfigurationSelected(ELauncherProfileCookModes::Type CookMode)"
  },
  {
    "label": "SetCookMode()",
    "kind": "Method",
    "detail": "Function (SimpleProfile ->)",
    "insertText": "SetCookMode(CookMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LaunchProfile = nullptr ; })",
    "insertText": "if(LaunchProfile.IsValid())"
  },
  {
    "label": "SetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (Variant = NAME_None ; SimpleProfile ->)",
    "insertText": "SetDeviceVariant(Variant)"
  },
  {
    "label": "SetDeploymentMode()",
    "kind": "Method",
    "detail": "Function (} LaunchProfile ->)",
    "insertText": "SetDeploymentMode(ELauncherProfileDeploymentModes::FileServer)"
  },
  {
    "label": "GetProfileManager()",
    "kind": "Method",
    "detail": "Function (ILauncherDeviceGroupRef NewGroup = Model ->)",
    "insertText": "GetProfileManager()->CreateUnmanagedDeviceGroup()"
  },
  {
    "label": "GetTargetDeviceIds()",
    "kind": "Method",
    "detail": "Function (const TSet<FString>& TargetDeviceIds = DeviceProxy ->)",
    "insertText": "GetTargetDeviceIds(NAME_None)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (NewGroup ->)",
    "insertText": "AddDevice(*ItDeviceID)"
  },
  {
    "label": "SetDeployedDeviceGroup()",
    "kind": "Method",
    "detail": "Function (} LaunchProfile ->)",
    "insertText": "SetDeployedDeviceGroup(NewGroup)"
  },
  {
    "label": "ClearCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (LaunchProfile ->)",
    "insertText": "ClearCookedPlatforms()"
  },
  {
    "label": "AddCookedPlatform()",
    "kind": "Method",
    "detail": "Function (LaunchProfile ->)",
    "insertText": "AddCookedPlatform(DeviceProxy->GetTargetPlatformName(Variant))"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bool Advanced = IsAdvanced .)",
    "insertText": "IsBound() && IsAdvanced.Get()"
  },
  {
    "label": "SetBuildConfiguration()",
    "kind": "Method",
    "detail": "Function (LaunchProfile ->)",
    "insertText": "SetBuildConfiguration(SimpleProfile->GetBuildConfiguration())"
  },
  {
    "label": "SetCookMode()",
    "kind": "Method",
    "detail": "Function (LaunchProfile ->)",
    "insertText": "SetCookMode(SimpleProfile->GetCookMode())"
  },
  {
    "label": "GetLaunchProfile()",
    "kind": "Method",
    "detail": "Function (} } } ILauncherProfilePtr)",
    "insertText": "GetLaunchProfile()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnProfileRun .)",
    "insertText": "Execute(LaunchProfile.ToSharedRef())"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "IsAdvancedVisible()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsAdvancedVisible()"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* const PlatformInfo =)",
    "insertText": "FindPlatformInfo(*DeviceProxy->GetTargetPlatformName(SimpleProfile->GetDeviceVariant()))"
  },
  {
    "label": "GetNoBrush()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "GetNoBrush()"
  },
  {
    "label": "HandleDeviceNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleDeviceNameText()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString& Name = DeviceProxy ->)",
    "insertText": "GetName()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromString(Name)"
  },
  {
    "label": "HandleHostNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostNameText()"
  },
  {
    "label": "HandleHostUserText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostUserText()"
  },
  {
    "label": "HandleHostPlatformText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostPlatformText()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"InvalidVariant\", \"Invalid Variant\")"
  }
]