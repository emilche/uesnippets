[
  {
    "label": "ECsvStatSeriesType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECsvStatSeriesType"
  },
  {
    "label": "FCsvProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvProfilerProvider"
  },
  {
    "label": "FStatSeriesValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatSeriesValue"
  },
  {
    "label": "FStatSeries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatSeries"
  },
  {
    "label": "FEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvents"
  },
  {
    "label": "FCapture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapture"
  },
  {
    "label": "FTableLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableLayout"
  },
  {
    "label": "FTableReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableReader"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FCsvProfilerProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / Model / CsvProfilerProvider . h \" # include \" TraceServices / Containers / Tables . h \" # include \" Containers / Map . h \" namespace TraceServices { enum ECsvStatSeriesType { CsvStatSeriesType_Timer,CsvStatSeriesType_CustomStatInt,CsvStatSeriesType_CustomStatFloat } ; class FCsvProfilerProvider : public ICsvProfilerProvider { public :)",
    "insertText": "FCsvProfilerProvider(IAnalysisSession& InSession)"
  },
  {
    "label": "FCsvProfilerProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCsvProfilerProvider()"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (const IUntypedTable&)",
    "insertText": "GetTable(uint32 CaptureIndex)"
  },
  {
    "label": "StartCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCapture(const TCHAR* Filename, uint32 FrameNumber)"
  },
  {
    "label": "EndCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCapture(uint32 FrameNumber)"
  },
  {
    "label": "AddSeries()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AddSeries(const TCHAR* Name, ECsvStatSeriesType Type)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(uint64 SeriesHandle, uint32 FrameNumber, double Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(uint64 SeriesHandle, uint32 FrameNumber, int64 Value)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(uint32 FrameNumber, const TCHAR* Text)"
  },
  {
    "label": "SetMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetadata(const TCHAR* Key, const TCHAR* Value)"
  },
  {
    "label": "FStatSeriesValue()",
    "kind": "Method",
    "detail": "Function (private : struct FStatSeriesValue {)",
    "insertText": "FStatSeriesValue()"
  },
  {
    "label": "FTableLayout()",
    "kind": "Method",
    "detail": "Function (Value . AsInt = 0 ; } union { int64 AsInt ; double AsDouble ; } Value ; } ; struct FStatSeries { TMap<uint32,FStatSeriesValue> Values ; TSet<uint32> Captures ; const TCHAR* Name = nullptr ; ECsvStatSeriesType Type ; } ; struct FEvents { TArray<const TCHAR*> Events ; const TCHAR* SemiColonSeparatedEvents = nullptr ; } ; struct FCapture ; class FTableLayout : public ITableLayout { public :)",
    "insertText": "FTableLayout(const TArray<FStatSeries*>& InStatSeries) : StatSeries(InStatSeries)"
  },
  {
    "label": "GetColumnCount()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetColumnCount()"
  },
  {
    "label": "GetColumnName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetColumnName(uint64 ColumnIndex)"
  },
  {
    "label": "GetColumnType()",
    "kind": "Method",
    "detail": "Function (ETableColumnType)",
    "insertText": "GetColumnType(uint64 ColumnIndex)"
  },
  {
    "label": "GetColumnDisplayHintFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetColumnDisplayHintFlags(uint64 ColumnIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "NextRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextRow()"
  },
  {
    "label": "SetRowIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRowIndex(uint64 RowIndex)"
  },
  {
    "label": "GetValueBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValueBool(uint64 ColumnIndex)"
  },
  {
    "label": "GetValueInt()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetValueInt(uint64 ColumnIndex)"
  },
  {
    "label": "GetValueFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValueFloat(uint64 ColumnIndex)"
  },
  {
    "label": "GetValueDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetValueDouble(uint64 ColumnIndex)"
  },
  {
    "label": "GetValueCString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetValueCString(uint64 ColumnIndex)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (private : const FStatSeriesValue*)",
    "insertText": "GetValue(uint64 ColumnIndex)"
  },
  {
    "label": "FTable()",
    "kind": "Method",
    "detail": "Function (const FCapture& Capture ; const TMap<uint32,FEvents*>& Events ; uint32 CurrentRowIndex ; } ; class FTable : public IUntypedTable { public :)",
    "insertText": "FTable(const FCapture& InCapture, const TMap<uint32, FEvents*>& InEvents) : Layout(InCapture.StatSeries) , Capture(InCapture) , Events(InEvents)"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (} const ITableLayout&)",
    "insertText": "GetLayout()"
  },
  {
    "label": "CreateReader()",
    "kind": "Method",
    "detail": "Function (IUntypedTableReader*)",
    "insertText": "CreateReader()"
  },
  {
    "label": "FCapture()",
    "kind": "Method",
    "detail": "Function (private : FTableLayout Layout ; const FCapture& Capture ; const TMap<uint32,FEvents*>& Events ; } ; struct FCapture {)",
    "insertText": "FCapture(const TMap<uint32, FEvents*>& Events) : Table(*this, Events)"
  },
  {
    "label": "GetValueRef()",
    "kind": "Method",
    "detail": "Function (} FTable Table ; const TCHAR* Filename ; uint32 StartFrame = 0 ; uint32 EndFrame = 0 ; TArray<FStatSeries*> StatSeries ; TMap<const TCHAR*,const TCHAR*,FDefaultSetAllocator,TStringPointerMapKeyFuncs_DEPRECATED<const TCHAR*,const TCHAR*>> Metadata ; } ; FStatSeriesValue&)",
    "insertText": "GetValueRef(uint64 SeriesHandle, uint32 FrameNumber)"
  }
]