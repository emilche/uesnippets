[
  {
    "label": "HINSTANCE__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HINSTANCE__"
  },
  {
    "label": "HWND__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HWND__"
  },
  {
    "label": "HKEY__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HKEY__"
  },
  {
    "label": "HDC__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HDC__"
  },
  {
    "label": "HICON__",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HICON__"
  },
  {
    "label": "_RTL_SRWLOCK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_RTL_SRWLOCK"
  },
  {
    "label": "tagPROCESSENTRY32W",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagPROCESSENTRY32W"
  },
  {
    "label": "_EXCEPTION_POINTERS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXCEPTION_POINTERS"
  },
  {
    "label": "_OVERLAPPED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_OVERLAPPED"
  },
  {
    "label": "_RTL_CRITICAL_SECTION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_RTL_CRITICAL_SECTION"
  },
  {
    "label": "SRWLOCK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SRWLOCK"
  },
  {
    "label": "CRITICAL_SECTION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CRITICAL_SECTION"
  },
  {
    "label": "OVERLAPPED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OVERLAPPED"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # ifdef __clang__ # define # else # define \" C \")",
    "insertText": "__declspec(dllimport) #endif PRAGMA_PUSH_PLATFORM_DEFAULT_PACKING #pragma push_macro(\"TRUE\") #pragma push_macro(\"FALSE\")"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct HWND__ ; struct HKEY__ ; struct HDC__ ; struct HICON__ ; struct _RTL_SRWLOCK ; struct tagPROCESSENTRY32W ; struct _EXCEPTION_POINTERS ; struct _OVERLAPPED ; struct _RTL_CRITICAL_SECTION ; union _LARGE_INTEGER ; # define WINDOWS_MAX_PATH 2 6 0 # define WINDOWS_PF_COMPARE_EXCHANGE128 1 4 # define WINAPI __stdcall namespace Windows { typedef int32 BOOL ; typedef unsigned char BYTE ; typedef BYTE BOOLEAN ; typedef unsigned long DWORD ; typedef DWORD* LPDWORD ; typedef long LONG ; typedef long* LPLONG ; typedef int64 LONGLONG ; typedef LONGLONG* LPLONGLONG ; typedef void* LPVOID ; typedef const void* LPCVOID ; typedef const wchar_t* LPCTSTR ; typedef void* HANDLE ; typedef HINSTANCE__* HINSTANCE ; typedef HINSTANCE HMODULE ; typedef HWND__* HWND ; typedef HKEY__* HKEY ; typedef HDC__* HDC ; typedef HICON__* HICON ; typedef HICON__* HCURSOR ; typedef tagPROCESSENTRY32W PROCESSENTRY32 ; typedef _EXCEPTION_POINTERS* LPEXCEPTION_POINTERS ; typedef _RTL_CRITICAL_SECTION* LPCRITICAL_SECTION ; typedef _OVERLAPPED* LPOVERLAPPED ; typedef _LARGE_INTEGER* LPLARGE_INTEGER ; typedef _RTL_SRWLOCK RTL_SRWLOCK,* PRTL_SRWLOCK ; typedef RTL_SRWLOCK* PSRWLOCK ; typedef)",
    "insertText": "void(*PFLS_CALLBACK_FUNCTION) (void* lpFlsData)"
  },
  {
    "label": "LoadLibraryW()",
    "kind": "Method",
    "detail": "Function (struct SRWLOCK { void* Ptr ; } ; BOOL TRUE = 1 ; BOOL FALSE = 0 ; HMODULE WINAPI)",
    "insertText": "LoadLibraryW(LPCTSTR lpFileName)"
  },
  {
    "label": "FreeLibrary()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "FreeLibrary(HMODULE hModule)"
  },
  {
    "label": "InitializeCriticalSection()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)"
  },
  {
    "label": "InitializeCriticalSectionAndSpinCount()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount)"
  },
  {
    "label": "SetCriticalSectionSpinCount()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount)"
  },
  {
    "label": "TryEnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)"
  },
  {
    "label": "EnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)"
  },
  {
    "label": "LeaveCriticalSection()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)"
  },
  {
    "label": "DeleteCriticalSection()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)"
  },
  {
    "label": "InitializeSRWLock()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "InitializeSRWLock(PSRWLOCK SRWLock)"
  },
  {
    "label": "AcquireSRWLockShared()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "AcquireSRWLockShared(PSRWLOCK SRWLock)"
  },
  {
    "label": "ReleaseSRWLockShared()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "ReleaseSRWLockShared(PSRWLOCK SRWLock)"
  },
  {
    "label": "AcquireSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "AcquireSRWLockExclusive(PSRWLOCK SRWLock)"
  },
  {
    "label": "ReleaseSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "ReleaseSRWLockExclusive(PSRWLOCK SRWLock)"
  },
  {
    "label": "TryAcquireSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (BOOLEAN WINAPI)",
    "insertText": "TryAcquireSRWLockExclusive(PSRWLOCK SRWLock)"
  },
  {
    "label": "TryAcquireSRWLockShared()",
    "kind": "Method",
    "detail": "Function (BOOLEAN WINAPI)",
    "insertText": "TryAcquireSRWLockShared(PSRWLOCK SRWLock)"
  },
  {
    "label": "InitializeSRWLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSRWLock((PSRWLOCK)SRWLock)"
  },
  {
    "label": "TryAcquireSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (} BOOLEAN WINAPI)",
    "insertText": "TryAcquireSRWLockExclusive(SRWLOCK* SRWLock)"
  },
  {
    "label": "TryAcquireSRWLockShared()",
    "kind": "Method",
    "detail": "Function (} BOOLEAN WINAPI)",
    "insertText": "TryAcquireSRWLockShared(SRWLOCK* SRWLock)"
  },
  {
    "label": "AcquireSRWLockShared()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "AcquireSRWLockShared(SRWLOCK* SRWLock)"
  },
  {
    "label": "AcquireSRWLockShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireSRWLockShared((PSRWLOCK)SRWLock)"
  },
  {
    "label": "ReleaseSRWLockShared()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "ReleaseSRWLockShared(SRWLOCK* SRWLock)"
  },
  {
    "label": "ReleaseSRWLockShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSRWLockShared((PSRWLOCK)SRWLock)"
  },
  {
    "label": "AcquireSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "AcquireSRWLockExclusive(SRWLOCK* SRWLock)"
  },
  {
    "label": "AcquireSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireSRWLockExclusive((PSRWLOCK)SRWLock)"
  },
  {
    "label": "ReleaseSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "ReleaseSRWLockExclusive(SRWLOCK* SRWLock)"
  },
  {
    "label": "ReleaseSRWLockExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSRWLockExclusive((PSRWLOCK)SRWLock)"
  },
  {
    "label": "ConnectNamedPipe()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped)"
  },
  {
    "label": "GetOverlappedResult()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait)"
  },
  {
    "label": "WriteFile()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)"
  },
  {
    "label": "ReadFile()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "QueryPerformanceCounter(LPLARGE_INTEGER Cycles)"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "TlsAlloc()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "TlsAlloc()"
  },
  {
    "label": "TlsGetValue()",
    "kind": "Method",
    "detail": "Function (LPVOID WINAPI)",
    "insertText": "TlsGetValue(DWORD dwTlsIndex)"
  },
  {
    "label": "TlsSetValue()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)"
  },
  {
    "label": "TlsFree()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "TlsFree(DWORD dwTlsIndex)"
  },
  {
    "label": "FlsAlloc()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback)"
  },
  {
    "label": "FlsGetValue()",
    "kind": "Method",
    "detail": "Function (LPVOID WINAPI)",
    "insertText": "FlsGetValue(DWORD dwFlsIndex)"
  },
  {
    "label": "FlsSetValue()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "FlsSetValue(DWORD dwFlsIndex, LPVOID lpFlsValue)"
  },
  {
    "label": "FlsFree()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "FlsFree(DWORD dwTlsIndex)"
  },
  {
    "label": "IsProcessorFeaturePresent()",
    "kind": "Method",
    "detail": "Function (BOOL WINAPI)",
    "insertText": "IsProcessorFeaturePresent(DWORD ProcessorFeature)"
  },
  {
    "label": "ConnectNamedPipe()",
    "kind": "Method",
    "detail": "Function (struct CRITICAL_SECTION { void* Opaque1 [ 1 ] ; long Opaque2 [ 2 ] ; void* Opaque3 [ 3 ] ; } ; struct OVERLAPPED { void* Opaque [ 3 ] ; unsigned long Opaque2 [ 2 ] ; } ; union LARGE_INTEGER { struct { DWORD LowPart ; LONG HighPart ; } ; LONGLONG QuadPart ; } ; BOOL WINAPI)",
    "insertText": "ConnectNamedPipe(HANDLE hNamedPipe, OVERLAPPED* lpOverlapped)"
  },
  {
    "label": "GetOverlappedResult()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "GetOverlappedResult(HANDLE hFile, OVERLAPPED* lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait)"
  },
  {
    "label": "WriteFile()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, OVERLAPPED* lpOverlapped)"
  },
  {
    "label": "ReadFile()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, OVERLAPPED* lpOverlapped)"
  },
  {
    "label": "InitializeCriticalSection()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "InitializeCriticalSection(CRITICAL_SECTION* lpCriticalSection)"
  },
  {
    "label": "InitializeCriticalSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCriticalSection((LPCRITICAL_SECTION)lpCriticalSection)"
  },
  {
    "label": "InitializeCriticalSectionAndSpinCount()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "InitializeCriticalSectionAndSpinCount(CRITICAL_SECTION* lpCriticalSection, DWORD dwSpinCount)"
  },
  {
    "label": "SetCriticalSectionSpinCount()",
    "kind": "Method",
    "detail": "Function (} DWORD WINAPI)",
    "insertText": "SetCriticalSectionSpinCount(CRITICAL_SECTION* lpCriticalSection, DWORD dwSpinCount)"
  },
  {
    "label": "TryEnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "TryEnterCriticalSection(CRITICAL_SECTION* lpCriticalSection)"
  },
  {
    "label": "EnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "EnterCriticalSection(CRITICAL_SECTION* lpCriticalSection)"
  },
  {
    "label": "EnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterCriticalSection((LPCRITICAL_SECTION)lpCriticalSection)"
  },
  {
    "label": "LeaveCriticalSection()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "LeaveCriticalSection(CRITICAL_SECTION* lpCriticalSection)"
  },
  {
    "label": "LeaveCriticalSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveCriticalSection((LPCRITICAL_SECTION)lpCriticalSection)"
  },
  {
    "label": "DeleteCriticalSection()",
    "kind": "Method",
    "detail": "Function (} void WINAPI)",
    "insertText": "DeleteCriticalSection(CRITICAL_SECTION* lpCriticalSection)"
  },
  {
    "label": "DeleteCriticalSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteCriticalSection((LPCRITICAL_SECTION)lpCriticalSection)"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (} BOOL WINAPI)",
    "insertText": "QueryPerformanceCounter(LARGE_INTEGER* Cycles)"
  }
]