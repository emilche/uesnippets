[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EMask",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMask"
  },
  {
    "label": "EInheritType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInheritType"
  },
  {
    "label": "RotationSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RotationSpace"
  },
  {
    "label": "FbxLimits()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_MATH_TRANSFORMS_H_ # define _FBXSDK_CORE_MATH_TRANSFORMS_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / math / fbxmath . h> # include<fbxsdk / core / math / fbxquaternion . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxLimits { public :)",
    "insertText": "FbxLimits()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "operator(const FbxLimits& pLimits)"
  },
  {
    "label": "GetActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActive()"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(const bool pActive)"
  },
  {
    "label": "GetMinXActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMinXActive()"
  },
  {
    "label": "GetMinYActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMinYActive()"
  },
  {
    "label": "GetMinZActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMinZActive()"
  },
  {
    "label": "GetMinActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinActive(bool& pXActive, bool& pYActive, bool& pZActive)"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (FbxDouble3)",
    "insertText": "GetMin()"
  },
  {
    "label": "SetMinXActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinXActive(bool pActive)"
  },
  {
    "label": "SetMinYActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinYActive(bool pActive)"
  },
  {
    "label": "SetMinZActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinZActive(bool pActive)"
  },
  {
    "label": "SetMinActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinActive(bool pXActive, bool pYActive, bool pZActive)"
  },
  {
    "label": "SetMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMin(const FbxDouble3& pMin)"
  },
  {
    "label": "GetMaxXActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaxXActive()"
  },
  {
    "label": "GetMaxYActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaxYActive()"
  },
  {
    "label": "GetMaxZActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaxZActive()"
  },
  {
    "label": "GetMaxActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaxActive(bool& pXActive, bool& pYActive, bool& pZActive)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (FbxDouble3)",
    "insertText": "GetMax()"
  },
  {
    "label": "SetMaxXActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxXActive(bool pActive)"
  },
  {
    "label": "SetMaxYActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxYActive(bool pActive)"
  },
  {
    "label": "SetMaxZActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxZActive(bool pActive)"
  },
  {
    "label": "SetMaxActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxActive(bool pXActive, bool pYActive, bool pZActive)"
  },
  {
    "label": "SetMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMax(const FbxDouble3& pMax)"
  },
  {
    "label": "GetAnyMinMaxActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnyMinMaxActive()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (FbxDouble3)",
    "insertText": "Apply(const FbxDouble3& pVector)"
  },
  {
    "label": "FbxRotationOrder()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS private : enum EMask { eActive = 1<<0,eMinX = 1<<1,eMinY = 1<<2,eMinZ = 1<<3,eMaxX = 1<<4,eMaxY = 1<<5,eMaxZ = 1<<6,eAll = eMinX | eMinY | eMinZ | eMaxX | eMaxY | eMaxZ } ; FbxUInt8 mMask ; FbxDouble3 mMin ; FbxDouble3 mMax ; # endif } ; class FBXSDK_DLL FbxRotationOrder { public :)",
    "insertText": "FbxRotationOrder(FbxEuler::EOrder pOrder=FbxEuler::eOrderXYZ)"
  },
  {
    "label": "GetOrder()",
    "kind": "Method",
    "detail": "Function (FbxEuler::EOrder)",
    "insertText": "GetOrder()"
  },
  {
    "label": "SetOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrder(FbxEuler::EOrder pOrder)"
  },
  {
    "label": "V2M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V2M(FbxAMatrix& pRM, const FbxVector4& pV)"
  },
  {
    "label": "M2V()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M2V(FbxVector4& pV, const FbxAMatrix& pRM)"
  },
  {
    "label": "V2VRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "V2VRef(FbxVector4& pVOut, const FbxVector4& pVIn, const FbxVector4& pVRef)"
  },
  {
    "label": "FbxTransform()",
    "kind": "Method",
    "detail": "Function (private : FbxEuler::EOrder mOrder ; } ; class FBXSDK_DLL FbxTransform { public : enum EInheritType { eInheritRrSs,eInheritRSrs,eInheritRrs } ;)",
    "insertText": "FbxTransform()"
  },
  {
    "label": "GetInheritType()",
    "kind": "Method",
    "detail": "Function (EInheritType)",
    "insertText": "GetInheritType()"
  },
  {
    "label": "SetInheritType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInheritType(EInheritType pType)"
  },
  {
    "label": "GetTranslationLimits()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "GetTranslationLimits()"
  },
  {
    "label": "GetRotationLimits()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "GetRotationLimits()"
  },
  {
    "label": "GetScalingLimits()",
    "kind": "Method",
    "detail": "Function (FbxLimits&)",
    "insertText": "GetScalingLimits()"
  },
  {
    "label": "GetRotationOrder()",
    "kind": "Method",
    "detail": "Function (FbxRotationOrder&)",
    "insertText": "GetRotationOrder()"
  },
  {
    "label": "HasROffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasROffset()"
  },
  {
    "label": "HasRPivot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRPivot()"
  },
  {
    "label": "HasSOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSOffset()"
  },
  {
    "label": "HasSPivot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSPivot()"
  },
  {
    "label": "HasPreRM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreRM()"
  },
  {
    "label": "HasPostRM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPostRM()"
  },
  {
    "label": "SetROffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetROffset(const FbxVector4& pROffset)"
  },
  {
    "label": "SetRPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRPivot(const FbxVector4& pRPivot)"
  },
  {
    "label": "SetSOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSOffset(const FbxVector4& pSOffset)"
  },
  {
    "label": "SetSPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSPivot(const FbxVector4& pSPivot)"
  },
  {
    "label": "SetPreRM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreRM(const FbxVector4& pPreR)"
  },
  {
    "label": "SetPostRM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostRM(const FbxVector4& pPostR)"
  },
  {
    "label": "GetRotationSpaceForLimitOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRotationSpaceForLimitOnly()"
  },
  {
    "label": "SetRotationSpaceForLimitOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotationSpaceForLimitOnly(bool pRotationSpaceForLimitOnly)"
  },
  {
    "label": "DoF2LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoF2LT(FbxVector4& pLT, const FbxVector4& pDoF, const FbxAMatrix& pLRM, const FbxAMatrix& pLSM)"
  },
  {
    "label": "LT2DoF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LT2DoF(FbxVector4& pDoF, const FbxVector4& pLT, const FbxAMatrix& pLRM, const FbxAMatrix& pLSM)"
  },
  {
    "label": "DoF2LRM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoF2LRM(FbxAMatrix& pLRM, const FbxVector4& pRDoF, bool pForLimit=false)"
  },
  {
    "label": "LRM2DoF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRM2DoF(FbxVector4& pRDoF, const FbxAMatrix& pLRM, bool pForLimit=false)"
  },
  {
    "label": "LSM2GSM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LSM2GSM(FbxAMatrix& pGSM, const FbxAMatrix& pPGSM, const FbxAMatrix& pLSM, const FbxAMatrix& pLRM, const FbxVector4& pPLS)"
  },
  {
    "label": "GTRSM2GX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTRSM2GX(FbxAMatrix& pGX, const FbxVector4& pGT, const FbxAMatrix& pGRM, const FbxAMatrix& pGSM)"
  },
  {
    "label": "SumPivots()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SumPivots(FbxVector4& pSum, const FbxAMatrix& pLRM, const FbxAMatrix& pLSM)"
  },
  {
    "label": "RotationSpace()",
    "kind": "Method",
    "detail": "Function (class RotationSpace { public : enum EMask { eHasNothing = 0,eHasPreRotM = 1<<0,eHasPostRotM = 1<<1 } ;)",
    "insertText": "RotationSpace()"
  },
  {
    "label": "GetPreRM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreRM(FbxAMatrix& pPreRM)"
  },
  {
    "label": "GetPostRM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPostRM(FbxAMatrix& pPostRM)"
  },
  {
    "label": "DoF2LRM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoF2LRM(FbxAMatrix& pLRM, const FbxVector4& pRDoF)"
  },
  {
    "label": "LRM2DoF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRM2DoF(FbxVector4& pRDoF, const FbxAMatrix& pLRM)"
  },
  {
    "label": "FbxGetContinuousRotation()",
    "kind": "Method",
    "detail": "Function (FbxUInt8 mMask ; FbxAMatrix mPreRM ; FbxAMatrix mPostRM ; FbxRotationOrder mRotationOrder ; } ; enum EMask { eHasNothing = 0,eHasRotOffset = 1<<0,eHasRotPivot = 1<<1,eHasScaleOffset = 1<<2,eHasScalePivot = 1<<3 } ; FbxUInt8 mMask ; EInheritType mInheritType ; FbxVector4 mROffset ; FbxVector4 mRPivot ; FbxVector4 mSOffset ; FbxVector4 mSPivot ; FbxLimits mTranslationLimits ; FbxLimits mRotationLimits ; FbxLimits mScalingLimits ; bool mRotationSpaceForLimitOnly ; RotationSpace mRotationSpace ; } ; FBXSDK_DLL bool)",
    "insertText": "FbxGetContinuousRotation(FbxVector4& pRes, const FbxVector4& pRot, const FbxVector4& pRef, const int* pOrder)"
  },
  {
    "label": "FbxGetContinuousRotation()",
    "kind": "Method",
    "detail": "Function (FBXSDK_DLL void)",
    "insertText": "FbxGetContinuousRotation(FbxVector4& pRes, const FbxVector4& pRot, const FbxVector4& pRef)"
  }
]