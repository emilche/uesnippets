[
  {
    "label": "_InputIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIt"
  },
  {
    "label": "_Source",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Source"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FILESYSTEM_U8PATH_H # define _LIBCPP___FILESYSTEM_U8PATH_H # include<__algorithm / unwrap_iter . h> # include<__availability> # include<__config> # include<__filesystem / path . h> # include<string> # include<type_traits> # if)",
    "insertText": "defined(_LIBCPP_WIN32API) # include <locale> #endif #if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #ifndef _LIBCPP_CXX03_LANG _LIBCPP_BEGIN_NAMESPACE_FILESYSTEM _LIBCPP_AVAILABILITY_FILESYSTEM_PUSH template <class _InputIt> _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_WITH_CHAR8_T typename enable_if<__is_pathable<_InputIt>::value, path>::type u8path(_InputIt __f, _InputIt __l)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_LIBCPP_WIN32API) string __tmp(__f, __l)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using _CVT = __widen_from_utf8<)",
    "insertText": "sizeof(wchar_t)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (_VSTD::wstring __w ; __w .)",
    "insertText": "reserve(__tmp.size())"
  },
  {
    "label": "_CVT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CVT()(back_inserter(__w), __tmp.data(), __tmp.data() + __tmp.size())"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "path(__f, __l)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } # if)",
    "insertText": "defined(_LIBCPP_WIN32API) template <class _InputIt> _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_WITH_CHAR8_T typename enable_if<__is_pathable<_InputIt>::value, path>::type u8path(_InputIt __f, _NullSentinel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (string __tmp ; const char __sentinel = char { } ;)",
    "insertText": "for(; *__f != __sentinel; ++__f) __tmp.push_back(*__f)"
  },
  {
    "label": "u8path()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Source> _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_WITH_CHAR8_T enable_if<__is_pathable<_Source>::value,path>::type)",
    "insertText": "u8path(const _Source& __s)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_LIBCPP_WIN32API)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "path(__s)"
  }
]