[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "pointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pointer"
  },
  {
    "label": "pointer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_VALUE_ITERATORS_H_ # define BASE_VALUE_ITERATORS_H_ # include<memory> # include<string> # include<utility> # include \" base / base_export . h \" # include \" base / containers / flat_map . h \" # include \" base / memory / raw_ptr . h \" namespace base { class Value ; namespace detail { using DictStorage = base::flat_map<std::string,std::unique_ptr<Value>> ; class BASE_EXPORT dict_iterator { public : using difference_type = DictStorage::iterator::difference_type ; using value_type = std::pair<const std::string,Value> ; using reference = std::pair<const std::string&,Value&> ; using iterator_category = std::bidirectional_iterator_tag ; class pointer { public :)",
    "insertText": "pointer(const reference& ref)"
  },
  {
    "label": "pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pointer(const pointer& ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (pointer&)",
    "insertText": "operator(const pointer& ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (reference*)",
    "insertText": "operator()"
  },
  {
    "label": "dict_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dict_iterator(const dict_iterator& dict_iter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (dict_iterator&)",
    "insertText": "operator(const dict_iterator& dict_iter)"
  },
  {
    "label": "dict_iterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "dict_iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (dict_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "operator(const dict_iterator& lhs, const dict_iterator& rhs)"
  },
  {
    "label": "GetUnderlyingIteratorDoNotUse()",
    "kind": "Method",
    "detail": "Function (const DictStorage::iterator&)",
    "insertText": "GetUnderlyingIteratorDoNotUse()"
  },
  {
    "label": "const_dict_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "const_dict_iterator(const const_dict_iterator& dict_iter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const_dict_iterator&)",
    "insertText": "operator(const const_dict_iterator& dict_iter)"
  },
  {
    "label": "const_dict_iterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "const_dict_iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "operator(const const_dict_iterator& lhs, const const_dict_iterator& rhs)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "size()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (const_dict_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (const_dict_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "const_dict_iterator_proxy()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<DictStorage> storage_ ; } ; class BASE_EXPORT const_dict_iterator_proxy { public : using key_type = const DictStorage::key_type ; using mapped_type = const DictStorage::mapped_type::element_type ; using value_type = std::pair<key_type,mapped_type> ; using key_compare = DictStorage::key_compare ; using size_type = DictStorage::size_type ; using difference_type = DictStorage::difference_type ; using iterator = const_dict_iterator ; using const_iterator = const_dict_iterator ; using reverse_iterator = std::reverse_iterator<iterator> ; using const_reverse_iterator = std::reverse_iterator<const_iterator> ;)",
    "insertText": "const_dict_iterator_proxy(const DictStorage* storage)"
  }
]