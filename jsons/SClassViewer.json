[
  {
    "label": "FClassViewerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerFilter"
  },
  {
    "label": "FClassViewerFilterOption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerFilterOption"
  },
  {
    "label": "FClassViewerNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassViewerNode"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FDirectoryPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectoryPath"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSoftClassPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftClassPath"
  },
  {
    "label": "SClassViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SClassViewer"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ClassViewerModule . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Engine / EngineTypes . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" # include \" Settings / ClassViewerSettings . h \" # include \" SlateFwd . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FClassViewerFilter ; class FClassViewerFilterOption ; class FClassViewerNode ; class FMenuBuilder ; class FString ; class FTextFilterExpressionEvaluator ; class ITableRow ; class SComboButton ; class SSearchBox ; class SWidget ; class UBlueprint ; class UClass ; struct FDirectoryPath ; struct FFocusEvent ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; struct FSoftClassPath ; class SClassViewer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SClassViewer)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FOnClassPicked, OnClassPickedDelegate ) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const FClassViewerInitializationOptions& InInitOptions)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetContent()"
  },
  {
    "label": "SClassViewer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SClassViewer()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassAllowed(const UClass* InClass)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "RequestPopulateClassHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestPopulateClassHierarchy()"
  },
  {
    "label": "DestroyClassHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyClassHierarchy()"
  },
  {
    "label": "OnGetChildrenForClassViewerTree()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnGetChildrenForClassViewerTree(TSharedPtr<FClassViewerNode> InParent, TArray< TSharedPtr< FClassViewerNode > >& OutChildren)"
  },
  {
    "label": "OnGenerateRowForClassViewer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowForClassViewer(TSharedPtr<FClassViewerNode> Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& Geometry, const FPointerEvent& PointerEvent)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnClassViewerSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassViewerSelectionChanged(TSharedPtr<FClassViewerNode> Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnClassViewerExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassViewerExpansionChanged(TSharedPtr<FClassViewerNode> Item, bool bExpanded)"
  },
  {
    "label": "Menu_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Menu_CanExecute()"
  },
  {
    "label": "MenuActorsOnly_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuActorsOnly_Execute()"
  },
  {
    "label": "MenuActorsOnly_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MenuActorsOnly_IsChecked()"
  },
  {
    "label": "MenuPlaceableOnly_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuPlaceableOnly_Execute()"
  },
  {
    "label": "MenuPlaceableOnly_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MenuPlaceableOnly_IsChecked()"
  },
  {
    "label": "MenuBlueprintBasesOnly_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuBlueprintBasesOnly_Execute()"
  },
  {
    "label": "MenuBlueprintBasesOnly_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MenuBlueprintBasesOnly_IsChecked()"
  },
  {
    "label": "FillFilterEntries()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "FillFilterEntries()"
  },
  {
    "label": "SetAllExpansionStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllExpansionStates(bool bInExpansionState)"
  },
  {
    "label": "SetAllExpansionStates_Helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllExpansionStates_Helper(TSharedPtr< FClassViewerNode > InNode, bool bInExpansionState)"
  },
  {
    "label": "ToggleExpansionState_Helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpansionState_Helper(TSharedPtr< FClassViewerNode > InNode)"
  },
  {
    "label": "BuildMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildMenuWidget()"
  },
  {
    "label": "OnOpenBlueprintTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenBlueprintTool()"
  },
  {
    "label": "FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInContentBrowser()"
  },
  {
    "label": "ExpandFilteredInNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandFilteredInNodes(TSharedPtr<FClassViewerNode> InNode)"
  },
  {
    "label": "MapExpansionStatesInTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapExpansionStatesInTree(TSharedPtr<FClassViewerNode> InItem)"
  },
  {
    "label": "SetExpansionStatesInTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansionStatesInTree(TSharedPtr<FClassViewerNode> InItem)"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Populate()"
  },
  {
    "label": "CreateNoneOption()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FClassViewerNode>)",
    "insertText": "CreateNoneOption()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FClassViewerNode>>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "ExpandRootNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandRootNodes()"
  },
  {
    "label": "GetViewButtonContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetViewButtonContent()"
  },
  {
    "label": "GetClassCountText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetClassCountText()"
  },
  {
    "label": "SetCurrentDeveloperViewType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentDeveloperViewType(EClassViewerDeveloperType NewType)"
  },
  {
    "label": "CreateCurrentDeveloperView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCurrentDeveloperView()"
  },
  {
    "label": "GetCurrentDeveloperViewType()",
    "kind": "Method",
    "detail": "Function (EClassViewerDeveloperType)",
    "insertText": "GetCurrentDeveloperViewType()"
  },
  {
    "label": "IsCurrentDeveloperViewType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentDeveloperViewType(EClassViewerDeveloperType ViewType)"
  },
  {
    "label": "ToggleShowInternalClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowInternalClasses()"
  },
  {
    "label": "IsShowingInternalClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingInternalClasses()"
  },
  {
    "label": "IsToggleShowInternalClassesAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleShowInternalClassesAllowed()"
  },
  {
    "label": "ToggleCustomFilterOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCustomFilterOption(TSharedRef<FClassViewerFilterOption> FilterOption)"
  },
  {
    "label": "IsCustomFilterOptionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomFilterOptionEnabled(TSharedRef<FClassViewerFilterOption> FilterOption)"
  },
  {
    "label": "GetNumItems()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "GetNumItems()"
  },
  {
    "label": "CountTreeItems()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CountTreeItems(FClassViewerNode* Node)"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName PropertyName)"
  },
  {
    "label": "GetInternalOnlyClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInternalOnlyClasses(TArray<FSoftClassPath>& Classes)"
  },
  {
    "label": "GetInternalOnlyPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInternalOnlyPaths(TArray<FDirectoryPath>& Paths)"
  }
]