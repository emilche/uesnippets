[
  {
    "label": "FParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParam"
  },
  {
    "label": "FParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { class FParam { public :)",
    "insertText": "FParam() : CurrentValue(0.0f) , StartingValue(0.0f) , TargetValue(0.0f) , DeltaValue(0.0f) , bIsInit(true)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const float InValue, const int32 InNumInterpFrames = 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TargetValue = InValue ;)",
    "insertText": "if(bIsInit || InNumInterpFrames == 0)"
  },
  {
    "label": "DeltaValue()",
    "kind": "Method",
    "detail": "Function (bIsInit = false ; StartingValue = TargetValue ; CurrentValue = TargetValue ; DeltaValue = 0 . 0 f ; } else {)",
    "insertText": "DeltaValue(InValue - CurrentValue) / (float)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (StartingValue = CurrentValue ; } } void)",
    "insertText": "Init()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bIsInit = true ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (DeltaValue = 0 . 0 f ; CurrentValue = TargetValue ; } float)",
    "insertText": "Update()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (CurrentValue + = DeltaValue ; return CurrentValue ; } float)",
    "insertText": "GetValue()"
  }
]