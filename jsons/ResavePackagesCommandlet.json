[
  {
    "label": "UResavePackagesCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UResavePackagesCommandlet"
  },
  {
    "label": "EBrevity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBrevity"
  },
  {
    "label": "FQueuedSourceControlOperations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedSourceControlOperations"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / PimplPtr . h \" # include \" UObject / ObjectMacros . h \" # include \" Commandlets / Commandlet . h \" # include \" Engine / EngineTypes . h \" # include \" ResavePackagesCommandlet . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogContentCommandlet, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "InitializeResaveParameters()",
    "kind": "Method",
    "detail": "Function (VERY_VERBOSE,INFORMATIVE,ONLY_ERRORS } ; EBrevity Verbosity ; int32 MinResaveUEVersion ; int32 MaxResaveUEVersion ; int32 MaxResaveLicenseeUEVersion ; int32 MaxPackagesToResave ; TArray<FString> ResaveClasses ; FString PackageSubstring ; bool bStripEditorOnlyContent ; bool bCanIgnoreFails ; bool bVerifyContent ; bool bOnlySaveDirtyPackages ; bool bAutoCheckOut ; bool bBatchSourceControl ; bool bSkipCheckedOutFiles ; bool bAutoCheckIn ; bool bSkipVirtualization ; bool bShouldBuildLighting ; bool bShouldBuildReflectionCaptures ; bool bShouldBuildTextureStreaming ; bool bShouldBuildTextureStreamingForAll ; bool bOnlyMaterials ; bool bOnlyUnversioned ; bool bOnlyLicenseed ; bool bOnlyVirtualized ; bool bSkipVirtualized ; bool bOnlyPayloadTrailers ; bool bSkipPayloadTrailers ; bool bShouldBuildNavigationData ; bool bIgnoreChangelist ; TSet<FName> CollectionFilter ; bool bShouldBuildHLOD ; bool bGenerateClusters ; bool bGenerateMeshProxies ; bool bForceClusterGeneration ; bool bForceProxyGeneration ; bool bForceSingleClusterForLevel ; bool bSkipSubLevels ; bool bHLODMapCleanup ; FString ForceHLODSetupAsset ; FString HLODSkipToMap ; bool bForceUATEnvironmentVariableSet ; bool bResaveOnDemand = false ; int32 PackagesConsideredForResave ; int32 PackagesResaved ; int32 PackagesDeleted ; int32 TotalPackagesForResave ; int32 GarbageCollectionFrequency ; ELightingBuildQuality LightingBuildQuality ; TArray<FString> FilesToSubmit ; TArray<FString> Switches ; TArray<FString> RedirectorsToFixup ; TPimplPtr<class FQueuedSourceControlOperations> SourceControlQueue ; TSet<FName> ResaveOnDemandPackages ; TSet<FName> ResaveOnDemandSystems ; FCriticalSection ResaveOnDemandPackagesLock ; int32)",
    "insertText": "InitializeResaveParameters(const TArray<FString>& Tokens, TArray<FString>& MapPathNames)"
  },
  {
    "label": "ParseSourceControlOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSourceControlOptions(const TArray<FString>& Tokens)"
  },
  {
    "label": "OnAddResaveOnDemandPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddResaveOnDemandPackage(FName SystemName, FName PackageName)"
  },
  {
    "label": "LoadAndSaveOnePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAndSaveOnePackage(const FString& Filename)"
  },
  {
    "label": "ShouldSkipPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipPackage(const FString& Filename)"
  },
  {
    "label": "DeleteOnePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteOnePackage(const FString& Filename)"
  },
  {
    "label": "PerformPreloadOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformPreloadOperations(FLinkerLoad* PackageLinker, bool& bSavePackage)"
  },
  {
    "label": "PerformAdditionalOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAdditionalOperations(class UObject* Object, bool& bSavePackage)"
  },
  {
    "label": "PerformAdditionalOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAdditionalOperations(class UPackage* Package, bool& bSavePackage)"
  },
  {
    "label": "PerformAdditionalOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAdditionalOperations(class UWorld* World, bool& bSavePackage)"
  },
  {
    "label": "CleanClassesFromContentPackages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanClassesFromContentPackages(class UPackage* Package)"
  },
  {
    "label": "GetChangelistDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetChangelistDescription()"
  },
  {
    "label": "CheckoutFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckoutFile(const FString& Filename, bool bAddFile = false, bool bIgnoreAlreadyCheckedOut = false)"
  },
  {
    "label": "RevertFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RevertFile(const FString& Filename)"
  },
  {
    "label": "CanCheckoutFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCheckoutFile(const FString& Filename, FString& CheckedOutUser)"
  },
  {
    "label": "CheckoutAndSavePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckoutAndSavePackage(UPackage* Package, TArray<FString>& SublevelFilenames, bool bIgnoreAlreadyCheckedOut = false)"
  },
  {
    "label": "CheckInFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInFiles(const TArray<FString>& InFilesToSubmit, const FText& InDescription)"
  },
  {
    "label": "TryVirtualization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryVirtualization(const TArray<FString>& FilesToSubmit, FText& InOutDescription)"
  },
  {
    "label": "CreateTempFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateTempFilename()"
  },
  {
    "label": "GetTempFilesDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTempFilesDirectory()"
  },
  {
    "label": "CleanTempFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanTempFiles()"
  },
  {
    "label": "VerboseMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerboseMessage(const FString& Message)"
  },
  {
    "label": "ParseResaveOnDemandSystems()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "ParseResaveOnDemandSystems()"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "Main(const FString& Params)"
  }
]