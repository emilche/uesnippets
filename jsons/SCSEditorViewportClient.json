[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportSelectability",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportSelectability"
  },
  {
    "label": "FPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewScene"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SSCSEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSCSEditorViewport"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "FInputKeyEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyEventArgs"
  },
  {
    "label": "FGizmoState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoState"
  },
  {
    "label": "FSCSEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSCSEditorViewportClient"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FSCSEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EditorViewportClient . h \" # include \" EditorViewportSelectability . h \" # include \" Engine / EngineBaseTypes . h \" # include \" InputCoreTypes . h \" # include \" Math / Axis . h \" # include \" Math / BoxSphereBounds . h \" # include \" Math / Matrix . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / SharedPointer . h \" # include \" UnrealWidgetFwd . h \" class AActor ; class FCanvas ; class FEditorViewportSelectability ; class FPreviewScene ; class FPrimitiveDrawInterface ; class FSceneView ; class FScopedTransaction ; class FText ; class FViewport ; class SSCSEditorViewport ; class UStaticMeshComponent ; struct FInputKeyEventArgs ; struct FGizmoState ; class FSCSEditorViewportClient : public FEditorViewportClient,public TSharedFromThis<FSCSEditorViewportClient> { public :)",
    "insertText": "FSCSEditorViewportClient(TWeakPtr<class FBlueprintEditor>& InBlueprintEditorPtr, FPreviewScene* InPreviewScene, const TSharedRef<SSCSEditorViewport>& InSCSEditorViewport)"
  },
  {
    "label": "FSCSEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSCSEditorViewportClient()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvas(FViewport& InViewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMove(FViewport* InViewport, int32 InX, int32 InY)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetCursor(FViewport* InViewport, int32 InX, int32 InY)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(class FSceneView& View, class HHitProxy* HitProxy, FKey Key, EInputEvent Event, uint32 HitX, uint32 HitY)"
  },
  {
    "label": "InputWidgetDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputWidgetDelta(FViewport* Viewport, EAxisList::Type CurrentAxis, FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStarted(const struct FInputEventState& InInputState, bool bIsDragging, bool bNudge)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped()"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "SetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetCoordSystemSpace(ECoordSystem NewCoordSystem)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetCoordSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWidgetCoordSystem()"
  },
  {
    "label": "GetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordSystemSpace()"
  },
  {
    "label": "SetCameraSpeedSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraSpeedSetting(int32 SpeedSetting)"
  },
  {
    "label": "InvalidatePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePreview(bool bResetCamera = true)"
  },
  {
    "label": "ResetCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCamera()"
  },
  {
    "label": "GetRealtimePreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRealtimePreview()"
  },
  {
    "label": "ToggleRealtimePreview()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleRealtimePreview()"
  },
  {
    "label": "FocusViewportToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViewportToSelection()"
  },
  {
    "label": "GetIsSimulateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsSimulateEnabled()"
  },
  {
    "label": "ToggleIsSimulateEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleIsSimulateEnabled()"
  },
  {
    "label": "GetShowFloor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowFloor()"
  },
  {
    "label": "ToggleShowFloor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowFloor()"
  },
  {
    "label": "GetShowGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowGrid()"
  },
  {
    "label": "ToggleShowGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowGrid()"
  },
  {
    "label": "GetPreviewActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetPreviewActor()"
  },
  {
    "label": "IsViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportSelectionLimited()"
  },
  {
    "label": "IsObjectSelectableInViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectSelectableInViewport(UObject* const InObject)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginTransaction(const FText& Description)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "RefreshPreviewBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPreviewBounds()"
  },
  {
    "label": "UpdateHoverFromHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverFromHitProxy(HHitProxy* const InHitProxy)"
  },
  {
    "label": "HandleBeginTransform()",
    "kind": "Method",
    "detail": "Function (private : UE::Widget::EWidgetMode WidgetMode ; ECoordSystem WidgetCoordSystem ; TWeakPtr<class FBlueprintEditor> BlueprintEditorPtr ; FBoxSphereBounds PreviewActorBounds ; bool bIsManipulating ; FScopedTransaction* ScopedTransaction ; UStaticMeshComponent* EditorFloorComp ; bool bIsSimulateEnabled ; bool)",
    "insertText": "HandleBeginTransform()"
  },
  {
    "label": "HandleEndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEndTransform()"
  }
]