[
  {
    "label": "FChunkHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkHeader"
  },
  {
    "label": "FRiffWaveHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRiffWaveHeader"
  },
  {
    "label": "FFormatChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormatChunk"
  },
  {
    "label": "FFactChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFactChunk"
  },
  {
    "label": "FSampleLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSampleLoop"
  },
  {
    "label": "FSampleChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSampleChunk"
  },
  {
    "label": "FWaveFormatInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveFormatInfo"
  },
  {
    "label": "FWaveFormatInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FChunkHeader ; struct FRiffWaveHeader { uint32 ChunkId ; uint32 ChunkDataSize ; uint32 TypeId ; } ; struct FChunkHeader { uint32 ChunkId ; uint32 ChunkDataSize ; } ; struct FFormatChunk { uint16 FormatTag ; uint16 NumChannels ; uint32 SamplesPerSec ; uint32 AverageBytesPerSec ; uint16 BlockAlign ; uint16 BitsPerSample ; uint16 cbSize ; uint16 SamplesPerBlock ; uint32 ChannelMask ; uint8 SubFormat [ 1 6 ] ; uint32 VersionInfo ; uint8 ConfigData [ 4 ] ; uint32 Reserved ; } ; struct FFactChunk { uint32 TotalSamples ; uint32 DelaySamplesInputOverlap ; uint32 DelaySamplesInputOverlapEncoder ; } ; struct FSampleLoop { uint32 Identifier ; uint32 Type ; uint32 Start ; uint32 End ; uint32 Fraction ; uint32 PlayCount ; } ; struct FSampleChunk { uint32 Manufacturer ; uint32 Product ; uint32 SamplePeriod ; uint32 MidiUnityNote ; uint32 MidiPitchFraction ; uint32 SmpteFormat ; uint32 SmpteOffset ; uint32 SampleLoops ; uint32 SamplerData ; FSampleLoop SampleLoop [ 2 ] ; } ; struct FWaveFormatInfo { FRiffWaveHeader RiffWaveHeader ; FChunkHeader FmtChunkHeader ; FFormatChunk FmtChunk ; FChunkHeader FactChunkHeader ; FFactChunk FactChunk ; FChunkHeader SampleChunkHeader ; FSampleChunk SampleChunk ; FChunkHeader DataChunkHeader ; uint32 DataStartOffset ;)",
    "insertText": "FWaveFormatInfo()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FWaveFormatInfo))"
  },
  {
    "label": "ParseWaveFormatHeader()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "ParseWaveFormatHeader(const uint8* InSrcBufferData, uint32 InSrcBufferDataSize, FWaveFormatInfo& OutHeader)"
  }
]