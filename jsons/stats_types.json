[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Direction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Direction"
  },
  {
    "label": "StatsType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StatsType"
  },
  {
    "label": "StatsValueName",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StatsValueName"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "StatsCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCollection"
  },
  {
    "label": "IdBase()",
    "kind": "Method",
    "detail": "Function (# ifndef API_STATS_TYPES_H_ # define API_STATS_TYPES_H_ # include<algorithm> # include<list> # include<map> # include<string> # include<vector> # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT StatsReport { public : enum Direction { kSend = 0,kReceive,} ; enum StatsType { kStatsReportTypeSession,kStatsReportTypeTransport,kStatsReportTypeComponent,kStatsReportTypeCandidatePair,kStatsReportTypeBwe,kStatsReportTypeSsrc,kStatsReportTypeRemoteSsrc,kStatsReportTypeTrack,kStatsReportTypeIceLocalCandidate,kStatsReportTypeIceRemoteCandidate,kStatsReportTypeCertificate,kStatsReportTypeDataChannel,} ; enum StatsValueName { kStatsValueNameActiveConnection,kStatsValueNameAecDivergentFilterFraction,kStatsValueNameAudioInputLevel,kStatsValueNameAudioOutputLevel,kStatsValueNameBytesReceived,kStatsValueNameBytesSent,kStatsValueNameCodecImplementationName,kStatsValueNameConcealedSamples,kStatsValueNameConcealmentEvents,kStatsValueNameDataChannelId,kStatsValueNameFramesDecoded,kStatsValueNameFramesEncoded,kStatsValueNameJitterBufferDelay,kStatsValueNameMediaType,kStatsValueNamePacketsLost,kStatsValueNamePacketsReceived,kStatsValueNamePacketsSent,kStatsValueNameProtocol,kStatsValueNameQpSum,kStatsValueNameReceiving,kStatsValueNameSelectedCandidatePairId,kStatsValueNameSsrc,kStatsValueNameState,kStatsValueNameTotalAudioEnergy,kStatsValueNameTotalSamplesDuration,kStatsValueNameTotalSamplesReceived,kStatsValueNameTransportId,kStatsValueNameSentPingRequestsTotal,kStatsValueNameSentPingRequestsBeforeFirstResponse,kStatsValueNameSentPingResponses,kStatsValueNameRecvPingRequests,kStatsValueNameRecvPingResponses,kStatsValueNameSentStunKeepaliveRequests,kStatsValueNameRecvStunKeepaliveResponses,kStatsValueNameStunKeepaliveRttTotal,kStatsValueNameStunKeepaliveRttSquaredTotal,kStatsValueNameAccelerateRate,kStatsValueNameActualEncBitrate,kStatsValueNameAdaptationChanges,kStatsValueNameAvailableReceiveBandwidth,kStatsValueNameAvailableSendBandwidth,kStatsValueNameAvgEncodeMs,kStatsValueNameBandwidthLimitedResolution,kStatsValueNameBucketDelay,kStatsValueNameCaptureStartNtpTimeMs,kStatsValueNameCandidateIPAddress,kStatsValueNameCandidateNetworkType,kStatsValueNameCandidatePortNumber,kStatsValueNameCandidatePriority,kStatsValueNameCandidateTransportType,kStatsValueNameCandidateType,kStatsValueNameChannelId,kStatsValueNameCodecName,kStatsValueNameComponent,kStatsValueNameContentName,kStatsValueNameContentType,kStatsValueNameCpuLimitedResolution,kStatsValueNameCurrentDelayMs,kStatsValueNameDecodeMs,kStatsValueNameDecodingCNG,kStatsValueNameDecodingCTN,kStatsValueNameDecodingCTSG,kStatsValueNameDecodingMutedOutput,kStatsValueNameDecodingNormal,kStatsValueNameDecodingPLC,kStatsValueNameDecodingCodecPLC,kStatsValueNameDecodingPLCCNG,kStatsValueNameDer,kStatsValueNameDtlsCipher,kStatsValueNameEchoDelayMedian,kStatsValueNameEchoDelayStdDev,kStatsValueNameEchoReturnLoss,kStatsValueNameEchoReturnLossEnhancement,kStatsValueNameEncodeUsagePercent,kStatsValueNameExpandRate,kStatsValueNameFingerprint,kStatsValueNameFingerprintAlgorithm,kStatsValueNameFirsReceived,kStatsValueNameFirsSent,kStatsValueNameFirstFrameReceivedToDecodedMs,kStatsValueNameFrameHeightInput,kStatsValueNameFrameHeightReceived,kStatsValueNameFrameHeightSent,kStatsValueNameFrameRateDecoded,kStatsValueNameFrameRateInput,kStatsValueNameFrameRateOutput,kStatsValueNameFrameRateReceived,kStatsValueNameFrameRateSent,kStatsValueNameFrameWidthInput,kStatsValueNameFrameWidthReceived,kStatsValueNameFrameWidthSent,kStatsValueNameHasEnteredLowResolution,kStatsValueNameHugeFramesSent,kStatsValueNameInitiator,kStatsValueNameInterframeDelayMaxMs,kStatsValueNameIssuerId,kStatsValueNameJitterBufferMs,kStatsValueNameJitterReceived,kStatsValueNameLabel,kStatsValueNameLocalAddress,kStatsValueNameLocalCandidateId,kStatsValueNameLocalCandidateType,kStatsValueNameLocalCertificateId,kStatsValueNameMaxDecodeMs,kStatsValueNameMinPlayoutDelayMs,kStatsValueNameNacksReceived,kStatsValueNameNacksSent,kStatsValueNamePlisReceived,kStatsValueNamePlisSent,kStatsValueNamePreemptiveExpandRate,kStatsValueNamePreferredJitterBufferMs,kStatsValueNameRemoteAddress,kStatsValueNameRemoteCandidateId,kStatsValueNameRemoteCandidateType,kStatsValueNameRemoteCertificateId,kStatsValueNameRenderDelayMs,kStatsValueNameResidualEchoLikelihood,kStatsValueNameResidualEchoLikelihoodRecentMax,kStatsValueNameAnaBitrateActionCounter,kStatsValueNameAnaChannelActionCounter,kStatsValueNameAnaDtxActionCounter,kStatsValueNameAnaFecActionCounter,kStatsValueNameAnaFrameLengthIncreaseCounter,kStatsValueNameAnaFrameLengthDecreaseCounter,kStatsValueNameAnaUplinkPacketLossFraction,kStatsValueNameRetransmitBitrate,kStatsValueNameRtt,kStatsValueNameSecondaryDecodedRate,kStatsValueNameSecondaryDiscardedRate,kStatsValueNameSendPacketsDiscarded,kStatsValueNameSpeechExpandRate,kStatsValueNameSrtpCipher,kStatsValueNameTargetDelayMs,kStatsValueNameTargetEncBitrate,kStatsValueNameTimingFrameInfo,kStatsValueNameTrackId,kStatsValueNameTransmitBitrate,kStatsValueNameTransportType,kStatsValueNameWritable,kStatsValueNameAudioDeviceUnderrunCounter,kStatsValueNameLocalCandidateRelayProtocol,} ; class RTC_EXPORT IdBase : public rtc::RefCountInterface { public : ~)",
    "insertText": "IdBase()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (StatsType)",
    "insertText": "type()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const rtc::scoped_refptr<IdBase>& other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Equals(const IdBase& other)"
  },
  {
    "label": "IdBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IdBase(StatsType type)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const StatsType type_ ; const char kSeparator = ' _ ' ; } ; typedef rtc::scoped_refptr<IdBase> Id ; struct RTC_EXPORT Value { enum Type { kInt,kInt64,kFloat,kString,kStaticString,kBool,kId,} ;)",
    "insertText": "Value(StatsValueName name, int64_t value, Type int_type)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StatsValueName name, float f)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StatsValueName name, const std::string& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StatsValueName name, const char* value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StatsValueName name, bool b)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(StatsValueName name, const Id& value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Value()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(const Value&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value&)",
    "insertText": "operator(const Value&)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddRef()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&thread_checker_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int count = - - ref_count_ ;)",
    "insertText": "if(!count)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const std::string& value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const char* value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(int64_t value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(bool value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(float value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Id& value)"
  },
  {
    "label": "int_val()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "int_val()"
  },
  {
    "label": "int64_val()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "int64_val()"
  },
  {
    "label": "float_val()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "float_val()"
  },
  {
    "label": "static_string_val()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "static_string_val()"
  },
  {
    "label": "string_val()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "string_val()"
  },
  {
    "label": "bool_val()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bool_val()"
  },
  {
    "label": "id_val()",
    "kind": "Method",
    "detail": "Function (const Id&)",
    "insertText": "id_val()"
  },
  {
    "label": "display_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "display_name()"
  },
  {
    "label": "StatsReport()",
    "kind": "Method",
    "detail": "Function (const Type type_ ; union InternalType { int int_ ; int64_t int64_ ; float float_ ; bool bool_ ; std::string* string_ ; const char* static_string_ ; Id* id_ ; } value_ ; } ; typedef rtc::scoped_refptr<Value> ValuePtr ; typedef std::map<StatsValueName,ValuePtr> Values ;)",
    "insertText": "StatsReport(const Id& id)"
  },
  {
    "label": "StatsReport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StatsReport()"
  },
  {
    "label": "StatsReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsReport(const StatsReport&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StatsReport&)",
    "insertText": "operator(const StatsReport&)"
  },
  {
    "label": "NewBandwidthEstimationId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewBandwidthEstimationId()"
  },
  {
    "label": "NewTypedId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewTypedId(StatsType type, const std::string& id)"
  },
  {
    "label": "NewTypedIntId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewTypedIntId(StatsType type, int id)"
  },
  {
    "label": "NewIdWithDirection()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewIdWithDirection(StatsType type, const std::string& id, Direction direction)"
  },
  {
    "label": "NewCandidateId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewCandidateId(bool local, const std::string& id)"
  },
  {
    "label": "NewComponentId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewComponentId(const std::string& content_name, int component)"
  },
  {
    "label": "NewCandidatePairId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewCandidatePairId(const std::string& content_name, int component, int index)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (const Id&)",
    "insertText": "id()"
  },
  {
    "label": "timestamp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "timestamp()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (timestamp_ = t ; } bool)",
    "insertText": "empty()"
  },
  {
    "label": "values()",
    "kind": "Method",
    "detail": "Function (} const Values&)",
    "insertText": "values()"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(StatsValueName name, const std::string& value)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(StatsValueName name, const char* value)"
  },
  {
    "label": "AddInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInt64(StatsValueName name, int64_t value)"
  },
  {
    "label": "AddInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInt(StatsValueName name, int value)"
  },
  {
    "label": "AddFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFloat(StatsValueName name, float value)"
  },
  {
    "label": "AddBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoolean(StatsValueName name, bool value)"
  },
  {
    "label": "AddId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddId(StatsValueName name, const Id& value)"
  },
  {
    "label": "FindValue()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "FindValue(StatsValueName name)"
  },
  {
    "label": "StatsCollection()",
    "kind": "Method",
    "detail": "Function (private : const Id id_ ; double timestamp_ ; Values values_ ; } ; typedef std::vector<const StatsReport*> StatsReports ; class StatsCollection { public :)",
    "insertText": "StatsCollection()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::list<StatsReport*> Container ; typedef Container::iterator iterator ; typedef Container::const_iterator const_iterator ; const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "InsertNew()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "InsertNew(const StatsReport::Id& id)"
  },
  {
    "label": "FindOrAddNew()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "FindOrAddNew(const StatsReport::Id& id)"
  },
  {
    "label": "ReplaceOrAddNew()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "ReplaceOrAddNew(const StatsReport::Id& id)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (StatsReport*)",
    "insertText": "Find(const StatsReport::Id& id)"
  }
]