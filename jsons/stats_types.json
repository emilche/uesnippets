[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Direction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Direction"
  },
  {
    "label": "StatsType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StatsType"
  },
  {
    "label": "StatsValueName",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StatsValueName"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "wraps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "wraps"
  },
  {
    "label": "StatsCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCollection"
  },
  {
    "label": "IdBase()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "IdBase(StatsType type)"
  },
  {
    "label": "StatsReport()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "StatsReport(const Id& id)"
  },
  {
    "label": "NewBandwidthEstimationId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewBandwidthEstimationId()"
  },
  {
    "label": "NewTypedId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewTypedId(StatsType type, const std::string& id)"
  },
  {
    "label": "NewTypedIntId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewTypedIntId(StatsType type, int id)"
  },
  {
    "label": "NewIdWithDirection()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewIdWithDirection(StatsType type,\n                               const std::string& id,\n                               Direction direction)"
  },
  {
    "label": "NewCandidateId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewCandidateId(bool local, const std::string& id)"
  },
  {
    "label": "NewComponentId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewComponentId(const std::string& content_name, int component)"
  },
  {
    "label": "NewCandidatePairId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "NewCandidatePairId(const std::string& content_name,\n                               int component,\n                               int index)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(StatsValueName name, const std::string& value)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(StatsValueName name, const char* value)"
  },
  {
    "label": "AddInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInt64(StatsValueName name, int64_t value)"
  },
  {
    "label": "AddInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInt(StatsValueName name, int value)"
  },
  {
    "label": "AddFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFloat(StatsValueName name, float value)"
  },
  {
    "label": "AddBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoolean(StatsValueName name, bool value)"
  },
  {
    "label": "AddId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddId(StatsValueName name, const Id& value)"
  },
  {
    "label": "StatsCollection()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "StatsCollection()"
  }
]