[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SDrawerOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDrawerOverlay"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WidgetDrawerConfig . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnStatusBarDrawerTargetHeightChanged, float)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (class SWindow ; class SDockTab ; class SWidget ; class SDrawerOverlay ; class SHorizontalBox ; struct FOpenDrawerData { FName DrawerId ; TSharedPtr<SDrawerOverlay> DrawerOverlay ; TWeakPtr<SWindow> WindowWithOverlayContent ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FName InDrawerId)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: ~SWidgetDrawer()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, FName InStatusBarName)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDrawer(FName DrawerId)"
  },
  {
    "label": "OpenDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenDrawer(const FName DrawerId)"
  },
  {
    "label": "DismissDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DismissDrawer(const TSharedPtr<SWidget>& NewlyFocusedWidget)"
  },
  {
    "label": "CloseDrawerImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDrawerImmediately(FName DrawerId = NAME_None)"
  },
  {
    "label": "IsDrawerOpened()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawerOpened(const FName DrawerId)"
  },
  {
    "label": "IsAnyOtherDrawerOpened()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyOtherDrawerOpened(const FName DrawerId)"
  },
  {
    "label": "GetDrawerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDrawerName()"
  },
  {
    "label": "OnGlobalFocusChanging()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnGlobalFocusChanging(const FFocusEvent& FocusEvent, const FWeakWidgetPath& OldFocusedWidgetPath, const TSharedPtr<SWidget>& OldFocusedWidget, const FWidgetPath& NewFocusedWidgetPath, const TSharedPtr<SWidget>& NewFocusedWidget)"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> PreviouslyActive, TSharedPtr<SDockTab> NewlyActivated)"
  },
  {
    "label": "OnDrawerHeightChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawerHeightChanged(float TargetHeight)"
  },
  {
    "label": "MakeStatusBarDrawerButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeStatusBarDrawerButton(const FWidgetDrawerConfig& Drawer)"
  },
  {
    "label": "OnDrawerButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrawerButtonClicked(const FName DrawerId)"
  },
  {
    "label": "CloseDrawerImmediatelyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDrawerImmediatelyInternal(const FOpenDrawerData& Data)"
  }
]