[
  {
    "label": "_OrImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_OrImpl"
  },
  {
    "label": "_Res",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Res"
  },
  {
    "label": "_First",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_First"
  },
  {
    "label": "disjunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "disjunction"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_DISJUNCTION_H # define _LIBCPP___TYPE_TRAITS_DISJUNCTION_H # include<__config> # include<__type_traits / conditional . h> # include<__type_traits / integral_constant . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<> struct _OrImpl<true> { template<class _Res,class _First,class . . . _Rest> using _Result _LIBCPP_NODEBUG = _OrImpl<!)",
    "insertText": "bool(_First::value) && sizeof...(_Rest)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct _OrImpl<false> { template<class _Res,class . . .> using _Result = _Res ; } ; template<class . . . _Args> using _Or _LIBCPP_NODEBUG = _OrImpl<)",
    "insertText": "sizeof(_Args)"
  }
]