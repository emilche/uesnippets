[
  {
    "label": "BasicPacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicPacketSocketFactory"
  },
  {
    "label": "UniqueRandomIdGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniqueRandomIdGenerator"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "ConnectionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConnectionContext"
  },
  {
    "label": "rtc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_CONNECTION_CONTEXT_H_ # define PC_CONNECTION_CONTEXT_H_ # include<memory> # include<string> # include \" api / call / call_factory_interface . h \" # include \" api / field_trials_view . h \" # include \" api / media_stream_interface . h \" # include \" api / peer_connection_interface . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / transport / sctp_transport_factory_interface . h \" # include \" media / base / media_engine . h \" # include \" p2p / base / basic_packet_socket_factory . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / network . h \" # include \" rtc_base / network_monitor_factory . h \" # include \" rtc_base / rtc_certificate_generator . h \" # include \" rtc_base / socket_factory . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class BasicPacketSocketFactory ; class UniqueRandomIdGenerator ; } namespace webrtc { class RtcEventLog ; class ConnectionContext final : public rtc::RefCountedNonVirtual<ConnectionContext> { public : rtc::scoped_refptr<ConnectionContext>)",
    "insertText": "Create(PeerConnectionFactoryDependencies* dependencies)"
  },
  {
    "label": "ConnectionContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectionContext(const ConnectionContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConnectionContext&)",
    "insertText": "operator(const ConnectionContext&)"
  },
  {
    "label": "sctp_transport_factory()",
    "kind": "Method",
    "detail": "Function (SctpTransportFactoryInterface*)",
    "insertText": "sctp_transport_factory()"
  },
  {
    "label": "media_engine()",
    "kind": "Method",
    "detail": "Function (} cricket::MediaEngineInterface*)",
    "insertText": "media_engine()"
  },
  {
    "label": "signaling_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "signaling_thread()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (} const rtc::Thread*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "default_network_manager()",
    "kind": "Method",
    "detail": "Function (} rtc::NetworkManager*)",
    "insertText": "default_network_manager()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread_)"
  },
  {
    "label": "default_socket_factory()",
    "kind": "Method",
    "detail": "Function (} rtc::PacketSocketFactory*)",
    "insertText": "default_socket_factory()"
  },
  {
    "label": "call_factory()",
    "kind": "Method",
    "detail": "Function (} CallFactoryInterface*)",
    "insertText": "call_factory()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(worker_thread())"
  },
  {
    "label": "ssrc_generator()",
    "kind": "Method",
    "detail": "Function (} rtc::UniqueRandomIdGenerator*)",
    "insertText": "ssrc_generator()"
  },
  {
    "label": "ConnectionContext()",
    "kind": "Method",
    "detail": "Function (class rtc::RefCountedNonVirtual<ConnectionContext> ; ~)",
    "insertText": "ConnectionContext()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : bool wraps_current_thread_ ; std::unique_ptr<rtc::SocketFactory> owned_socket_factory_ ; std::unique_ptr<rtc::Thread> owned_network_thread_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::CallFactoryInterface> const call_factory_)",
    "insertText": "RTC_GUARDED_BY(worker_thread())"
  }
]