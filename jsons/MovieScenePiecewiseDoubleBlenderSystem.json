[
  {
    "label": "FBlendResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendResult"
  },
  {
    "label": "FAdditveAndOverrideData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditveAndOverrideData"
  },
  {
    "label": "FAdditiveAndOverrides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditiveAndOverrides"
  },
  {
    "label": "FAccumulationResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulationResult"
  },
  {
    "label": "FAdditiveAndOverrideBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditiveAndOverrideBuffer"
  },
  {
    "label": "FAdditiveFromBaseBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditiveFromBaseBuffer"
  },
  {
    "label": "FAccumulationBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulationBuffers"
  },
  {
    "label": "UMovieScenePiecewiseDoubleBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScenePiecewiseDoubleBlenderSystem"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SortedMap . h \" # include \" EntitySystem / MovieSceneBlenderSystem . h \" # include \" EntitySystem / MovieSceneCachedEntityFilterResult . h \" # include \" EntitySystem / MovieSceneDecompositionQuery . h \" # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" MovieScenePiecewiseDoubleBlenderSystem . generated . h \" namespace UE { namespace MovieScene { struct FBlendResult { double Total = 0 . f ; float Weight = 0 . f ; } ; struct FAdditveAndOverrideData { bool bIsAdditive ; double Value ; float Weight ; int32 BlendingOrder ; bool)",
    "insertText": "operator(const FAdditveAndOverrideData& RHS)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FindResults()",
    "kind": "Method",
    "detail": "Function (FAccumulationResult)",
    "insertText": "FindResults(FComponentTypeID InComponentType)"
  }
]