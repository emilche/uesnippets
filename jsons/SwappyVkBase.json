[
  {
    "label": "SwappyVkBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwappyVkBase"
  },
  {
    "label": "VkSync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSync"
  },
  {
    "label": "ThreadContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadContext"
  },
  {
    "label": "AChoreographer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<dlfcn . h> # include<inttypes . h> # include<pthread . h> # include<swappy / swappyVk . h> # include<unistd . h> # include<condition_variable> # include<cstdlib> # include<cstring> # include<list> # include<map> # include<mutex> # include \" ChoreographerShim . h \" # include \" Settings . h \" # include \" SwappyCommon . h \" # include \" Trace . h \" namespace swappy { uint32_t kThousand = 1 0 0 0 ; uint32_t kMillion = 1 0 0 0 0 0 0 ; uint32_t kBillion = 1 0 0 0 0 0 0 0 0 0 ; uint32_t k16_6msec = 1 6 6 6 6 6 6 6 ; uint32_t kTooCloseToVsyncBoundary = 3 0 0 0 0 0 0 ; uint32_t kTooFarAwayFromVsyncBoundary = 7 0 0 0 0 0 0 ; uint32_t kNudgeWithinVsyncBoundaries = 2 0 0 0 0 0 0 ; using PFN_AChoreographer_getInstance =)",
    "insertText": "AChoreographer(*)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using PFN_AChoreographer_postFrameCallback =)",
    "insertText": "void(*)(AChoreographer* choreographer, AChoreographer_frameCallback callback, void* data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using PFN_AChoreographer_postFrameCallbackDelayed =)",
    "insertText": "void(*)( AChoreographer* choreographer, AChoreographer_frameCallback callback, void* data, long delayMillis)"
  },
  {
    "label": "LoadVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (PFN_vkCreateCommandPool vkCreateCommandPool ; PFN_vkDestroyCommandPool vkDestroyCommandPool ; PFN_vkCreateFence vkCreateFence ; PFN_vkDestroyFence vkDestroyFence ; PFN_vkWaitForFences vkWaitForFences ; PFN_vkResetFences vkResetFences ; PFN_vkCreateSemaphore vkCreateSemaphore ; PFN_vkDestroySemaphore vkDestroySemaphore ; PFN_vkCreateEvent vkCreateEvent ; PFN_vkDestroyEvent vkDestroyEvent ; PFN_vkCmdSetEvent vkCmdSetEvent ; PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers ; PFN_vkFreeCommandBuffers vkFreeCommandBuffers ; PFN_vkBeginCommandBuffer vkBeginCommandBuffer ; PFN_vkEndCommandBuffer vkEndCommandBuffer ; PFN_vkQueueSubmit vkQueueSubmit ; void)",
    "insertText": "LoadVulkanFunctions(const SwappyVkFunctionProvider* pFunctionProvider)"
  },
  {
    "label": "SwappyVkBase()",
    "kind": "Method",
    "detail": "Function (class SwappyVkBase { public :)",
    "insertText": "SwappyVkBase(JNIEnv* env, jobject jactivity, VkPhysicalDevice physicalDevice, VkDevice device, const SwappyVkFunctionProvider* pFunctionProvider)"
  },
  {
    "label": "SwappyVkBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SwappyVkBase()"
  },
  {
    "label": "doGetRefreshCycleDuration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doGetRefreshCycleDuration(VkSwapchainKHR swapchain, uint64_t* pRefreshDuration)"
  },
  {
    "label": "doQueuePresent()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "doQueuePresent(VkQueue queue, uint32_t queueFamilyIndex, const VkPresentInfoKHR* pPresentInfo)"
  },
  {
    "label": "doSetWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doSetWindow(ANativeWindow* window)"
  },
  {
    "label": "doSetSwapInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doSetSwapInterval(VkSwapchainKHR swapchain, uint64_t swapNs)"
  },
  {
    "label": "injectFence()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "injectFence(VkQueue queue, const VkPresentInfoKHR* pPresentInfo, VkSemaphore* pSemaphore)"
  },
  {
    "label": "isEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEnabled()"
  },
  {
    "label": "setAutoPipelineMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoPipelineMode(bool enabled)"
  },
  {
    "label": "setMaxAutoSwapDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxAutoSwapDuration(std::chrono::nanoseconds swapMaxNS)"
  },
  {
    "label": "setFenceTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFenceTimeout(std::chrono::nanoseconds duration)"
  },
  {
    "label": "getFenceTimeout()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getFenceTimeout()"
  },
  {
    "label": "getSwapInterval()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getSwapInterval()"
  },
  {
    "label": "addTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTracer(const SwappyTracer* tracer)"
  },
  {
    "label": "removeTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeTracer(const SwappyTracer* tracer)"
  },
  {
    "label": "getDevice()",
    "kind": "Method",
    "detail": "Function (VkDevice)",
    "insertText": "getDevice()"
  },
  {
    "label": "enableStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableStats(bool enabled)"
  },
  {
    "label": "getStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getStats(SwappyStats* swappyStats)"
  },
  {
    "label": "recordFrameStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordFrameStart(VkQueue queue, uint32_t image)"
  },
  {
    "label": "clearStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearStats()"
  },
  {
    "label": "resetFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetFramePacing()"
  },
  {
    "label": "enableFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableFramePacing(bool enable)"
  },
  {
    "label": "enableBlockingWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableBlockingWait(bool enable)"
  },
  {
    "label": "ThreadContext()",
    "kind": "Method",
    "detail": "Function (protected : struct VkSync { VkFence fence ; VkSemaphore semaphore ; VkCommandBuffer command ; VkEvent event ; } ; struct ThreadContext {)",
    "insertText": "ThreadContext(VkQueue queue) : queue(queue)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} Thread thread ; bool running)",
    "insertText": "GUARDED_BY(lock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; SwappyCommon mCommonBase ; VkPhysicalDevice mPhysicalDevice ; VkDevice mDevice ; const SwappyVkFunctionProvider* mpFunctionProvider ; bool mInitialized ; bool mEnabled ; uint32_t mNextPresentID = 0 ; uint32_t mNextPresentIDToCheck = 2 ; PFN_vkGetDeviceProcAddr mpfnGetDeviceProcAddr = nullptr ; PFN_vkQueuePresentKHR mpfnQueuePresentKHR = nullptr ; #)",
    "insertText": "if(not defined ANDROID_NDK_VERSION)"
  },
  {
    "label": "initGoogExtension()",
    "kind": "Method",
    "detail": "Function (PFN_vkGetPastPresentationTimingGOOGLE mpfnGetPastPresentationTimingGOOGLE = nullptr ; # endif std::map<VkQueue,std::list<VkSync>> mFreeSyncPool ; std::map<VkQueue,std::list<VkSync>> mWaitingSyncs ; std::map<VkQueue,std::list<VkSync>> mSignaledSyncs ; std::map<VkQueue,VkCommandPool> mCommandPool ; std::map<VkQueue,std::unique_ptr<ThreadContext>> mThreads ; int MAX_PENDING_FENCES = 2 ; std::atomic<std::chrono::nanoseconds> mLastFenceTime = { } ; void)",
    "insertText": "initGoogExtension()"
  },
  {
    "label": "initializeVkSyncObjects()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "initializeVkSyncObjects(VkQueue queue, uint32_t queueFamilyIndex)"
  },
  {
    "label": "destroyVkSyncObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroyVkSyncObjects()"
  },
  {
    "label": "reclaimSignaledFences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reclaimSignaledFences(VkQueue queue)"
  },
  {
    "label": "lastFrameIsCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lastFrameIsCompleted(VkQueue queue)"
  },
  {
    "label": "getLastFenceTime()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getLastFenceTime(VkQueue queue)"
  },
  {
    "label": "waitForFenceThreadMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitForFenceThreadMain(ThreadContext& thread)"
  }
]