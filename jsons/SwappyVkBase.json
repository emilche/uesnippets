[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "members",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "members"
  },
  {
    "label": "SwappyVkBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwappyVkBase"
  },
  {
    "label": "VkSync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VkSync"
  },
  {
    "label": "ThreadContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadContext"
  },
  {
    "label": "LoadVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadVulkanFunctions(const SwappyVkFunctionProvider* pFunctionProvider)"
  },
  {
    "label": "SwappyVkBase()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SwappyVkBase(JNIEnv* env, jobject jactivity,\n                 VkPhysicalDevice physicalDevice, VkDevice device,\n                 const SwappyVkFunctionProvider* pFunctionProvider)"
  },
  {
    "label": "doSetWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doSetWindow(ANativeWindow* window)"
  },
  {
    "label": "doSetSwapInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doSetSwapInterval(VkSwapchainKHR swapchain, uint64_t swapNs)"
  },
  {
    "label": "injectFence()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "injectFence(VkQueue queue, const VkPresentInfoKHR* pPresentInfo,\n                         VkSemaphore* pSemaphore)"
  },
  {
    "label": "setAutoSwapInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoSwapInterval(bool enabled)"
  },
  {
    "label": "setAutoPipelineMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAutoPipelineMode(bool enabled)"
  },
  {
    "label": "setMaxAutoSwapDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxAutoSwapDuration(std::chrono::nanoseconds swapMaxNS)"
  },
  {
    "label": "setFenceTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFenceTimeout(std::chrono::nanoseconds duration)"
  },
  {
    "label": "getSwapInterval()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getSwapInterval()"
  },
  {
    "label": "addTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTracer(const SwappyTracer* tracer)"
  },
  {
    "label": "removeTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeTracer(const SwappyTracer* tracer)"
  },
  {
    "label": "getSupportedRefreshPeriodsNS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getSupportedRefreshPeriodsNS(uint64_t* out_refreshrates,\n                                     int allocated_entries)"
  },
  {
    "label": "resetFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetFramePacing()"
  },
  {
    "label": "enableFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableFramePacing(bool enable)"
  },
  {
    "label": "enableBlockingWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableBlockingWait(bool enable)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (hasPendingWork)",
    "insertText": "GUARDED_BY(lock)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (queue)",
    "insertText": "GUARDED_BY(lock)"
  },
  {
    "label": "initGoogExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initGoogExtension()"
  },
  {
    "label": "initializeVkSyncObjects()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "initializeVkSyncObjects(VkQueue queue, uint32_t queueFamilyIndex)"
  },
  {
    "label": "destroyVkSyncObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroyVkSyncObjects()"
  },
  {
    "label": "reclaimSignaledFences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reclaimSignaledFences(VkQueue queue)"
  },
  {
    "label": "lastFrameIsCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lastFrameIsCompleted(VkQueue queue)"
  },
  {
    "label": "getLastFenceTime()",
    "kind": "Method",
    "detail": "Function (std::chrono::nanoseconds)",
    "insertText": "getLastFenceTime(VkQueue queue)"
  },
  {
    "label": "waitForFenceThreadMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "waitForFenceThreadMain(ThreadContext& thread)"
  }
]