[
  {
    "label": "strdup()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_UTIL_WIN_H_ # define BASE_STRINGS_STRING_UTIL_WIN_H_ # include<stdarg . h> # include<stddef . h> # include<stdio . h> # include<string . h> # include<wchar . h> # include<string> # include<vector> # include \" base / check . h \" # include \" base / containers / span . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / string_util . h \" namespace base { char*)",
    "insertText": "strdup(const char* str)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vsnprintf(char* buffer, size_t size, const char* format, va_list arguments)"
  },
  {
    "label": "vsnprintf_s()",
    "kind": "Method",
    "detail": "Function (int length =)",
    "insertText": "vsnprintf_s(buffer, size, size - 1, format, arguments)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsWprintfFormatPortable(format))"
  },
  {
    "label": "_vsnwprintf_s()",
    "kind": "Method",
    "detail": "Function (int length =)",
    "insertText": "_vsnwprintf_s(buffer, size, size - 1, format, arguments)"
  },
  {
    "label": "as_writable_wcstr()",
    "kind": "Method",
    "detail": "Function (} wchar_t*)",
    "insertText": "as_writable_wcstr(std::u16string& str)"
  },
  {
    "label": "as_wcstr()",
    "kind": "Method",
    "detail": "Function (} const wchar_t*)",
    "insertText": "as_wcstr(const char16_t* str)"
  },
  {
    "label": "as_wcstr()",
    "kind": "Method",
    "detail": "Function (} const wchar_t*)",
    "insertText": "as_wcstr(StringPiece16 str)"
  },
  {
    "label": "as_writable_u16cstr()",
    "kind": "Method",
    "detail": "Function (} char16_t*)",
    "insertText": "as_writable_u16cstr(wchar_t* str)"
  },
  {
    "label": "as_writable_u16cstr()",
    "kind": "Method",
    "detail": "Function (} char16_t*)",
    "insertText": "as_writable_u16cstr(std::wstring& str)"
  },
  {
    "label": "as_u16cstr()",
    "kind": "Method",
    "detail": "Function (} const char16_t*)",
    "insertText": "as_u16cstr(const wchar_t* str)"
  },
  {
    "label": "as_u16cstr()",
    "kind": "Method",
    "detail": "Function (} const char16_t*)",
    "insertText": "as_u16cstr(WStringPiece str)"
  },
  {
    "label": "AsWStringPiece()",
    "kind": "Method",
    "detail": "Function (} WStringPiece)",
    "insertText": "AsWStringPiece(StringPiece16 str)"
  },
  {
    "label": "AsStringPiece16()",
    "kind": "Method",
    "detail": "Function (} StringPiece16)",
    "insertText": "AsStringPiece16(WStringPiece str)"
  },
  {
    "label": "AsWString()",
    "kind": "Method",
    "detail": "Function (} std::wstring)",
    "insertText": "AsWString(StringPiece16 str)"
  },
  {
    "label": "AsString16()",
    "kind": "Method",
    "detail": "Function (} std::u16string)",
    "insertText": "AsString16(WStringPiece str)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "IsStringASCII(WStringPiece str)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "ToLowerASCII(WStringPiece str)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "ToUpperASCII(WStringPiece str)"
  },
  {
    "label": "CompareCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT int)",
    "insertText": "CompareCaseInsensitiveASCII(WStringPiece a, WStringPiece b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsCaseInsensitiveASCII(WStringPiece a, WStringPiece b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsCaseInsensitiveASCII(WStringPiece a, StringPiece b)"
  },
  {
    "label": "EqualsCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsCaseInsensitiveASCII(StringPiece a, WStringPiece b)"
  },
  {
    "label": "RemoveChars()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "RemoveChars(WStringPiece input, WStringPiece remove_chars, std::wstring* output)"
  },
  {
    "label": "ReplaceChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ReplaceChars(WStringPiece input, WStringPiece replace_chars, WStringPiece replace_with, std::wstring* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "TrimString(WStringPiece input, WStringPiece trim_chars, std::wstring* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT WStringPiece)",
    "insertText": "TrimString(WStringPiece input, WStringPiece trim_chars, TrimPositions positions)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT TrimPositions)",
    "insertText": "TrimWhitespace(WStringPiece input, TrimPositions positions, std::wstring* output)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT WStringPiece)",
    "insertText": "TrimWhitespace(WStringPiece input, TrimPositions positions)"
  },
  {
    "label": "CollapseWhitespace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "CollapseWhitespace(WStringPiece text, bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "ContainsOnlyChars()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ContainsOnlyChars(WStringPiece input, WStringPiece characters)"
  },
  {
    "label": "EqualsASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "EqualsASCII(StringPiece16 str, StringPiece ascii)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "StartsWith(WStringPiece str, WStringPiece search_for, CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "EndsWith(WStringPiece str, WStringPiece search_for, CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "ReplaceFirstSubstringAfterOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ReplaceFirstSubstringAfterOffset(std::wstring* str, size_t start_offset, WStringPiece find_this, WStringPiece replace_with)"
  },
  {
    "label": "ReplaceSubstringsAfterOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "ReplaceSubstringsAfterOffset(std::wstring* str, size_t start_offset, WStringPiece find_this, WStringPiece replace_with)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT wchar_t*)",
    "insertText": "WriteInto(std::wstring* str, size_t length_with_null)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "JoinString(span<const std::wstring> parts, WStringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "JoinString(span<const WStringPiece> parts, WStringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "JoinString(std::initializer_list<WStringPiece> parts, WStringPiece separator)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::wstring)",
    "insertText": "ReplaceStringPlaceholders(WStringPiece format_string, const std::vector<std::wstring>& subst, std::vector<size_t>* offsets)"
  }
]