[
  {
    "label": "_strdup()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_strdup(str)"
  },
  {
    "label": "_vscprintf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_vscprintf(format, arguments)"
  },
  {
    "label": "_vscwprintf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_vscwprintf(format, arguments)"
  },
  {
    "label": "IsStringASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStringASCII(WStringPiece str)"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToLowerASCII(WStringPiece str)"
  },
  {
    "label": "ToUpperASCII()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToUpperASCII(WStringPiece str)"
  },
  {
    "label": "CompareCaseInsensitiveASCII()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompareCaseInsensitiveASCII(WStringPiece a, WStringPiece b)"
  },
  {
    "label": "RemoveChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveChars(WStringPiece input,\n                             WStringPiece remove_chars,\n                             std::wstring* output)"
  },
  {
    "label": "ReplaceChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceChars(WStringPiece input,\n                              WStringPiece replace_chars,\n                              WStringPiece replace_with,\n                              std::wstring* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrimString(WStringPiece input,\n                            WStringPiece trim_chars,\n                            std::wstring* output)"
  },
  {
    "label": "TrimString()",
    "kind": "Method",
    "detail": "Function (WStringPiece)",
    "insertText": "TrimString(WStringPiece input,\n                                    WStringPiece trim_chars,\n                                    TrimPositions positions)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (TrimPositions)",
    "insertText": "TrimWhitespace(WStringPiece input,\n                                         TrimPositions positions,\n                                         std::wstring* output)"
  },
  {
    "label": "TrimWhitespace()",
    "kind": "Method",
    "detail": "Function (WStringPiece)",
    "insertText": "TrimWhitespace(WStringPiece input,\n                                        TrimPositions positions)"
  },
  {
    "label": "CollapseWhitespace()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "CollapseWhitespace(\n    WStringPiece text,\n    bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "ContainsOnlyChars()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsOnlyChars(WStringPiece input, WStringPiece characters)"
  },
  {
    "label": "EqualsASCII()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsASCII(StringPiece16 str, StringPiece ascii)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartsWith(\n    WStringPiece str,\n    WStringPiece search_for,\n    CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWith(\n    WStringPiece str,\n    WStringPiece search_for,\n    CompareCase case_sensitivity = CompareCase::SENSITIVE)"
  },
  {
    "label": "ReplaceFirstSubstringAfterOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceFirstSubstringAfterOffset(std::wstring* str,\n                                                  size_t start_offset,\n                                                  WStringPiece find_this,\n                                                  WStringPiece replace_with)"
  },
  {
    "label": "ReplaceSubstringsAfterOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSubstringsAfterOffset(std::wstring* str,\n                                              size_t start_offset,\n                                              WStringPiece find_this,\n                                              WStringPiece replace_with)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "JoinString(span<const std::wstring> parts,\n                                    WStringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "JoinString(span<const WStringPiece> parts,\n                                    WStringPiece separator)"
  },
  {
    "label": "JoinString()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "JoinString(std::initializer_list<WStringPiece> parts,\n                                    WStringPiece separator)"
  },
  {
    "label": "ReplaceStringPlaceholders()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ReplaceStringPlaceholders(\n    WStringPiece format_string,\n    const std::vector<std::wstring>& subst,\n    std::vector<size_t>* offsets)"
  }
]