[
  {
    "label": "__static_max",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__static_max"
  },
  {
    "label": "_Type0",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type0"
  },
  {
    "label": "aligned_union",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "aligned_union"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_ALIGNED_UNION_H # define _LIBCPP___TYPE_TRAITS_ALIGNED_UNION_H # include<__config> # include<__type_traits / aligned_storage . h> # include<__type_traits / integral_constant . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_LIBCPP_PREFERRED_ALIGNOF()",
    "kind": "Method",
    "detail": "Function (template<size_t _I0> struct __static_max<_I0> { const size_t value = _I0 ; } ; template<size_t _I0,size_t _I1,size_t . . . _In> struct __static_max<_I0,_I1,_In . . .> { const size_t value = _I0> = _I1 ? __static_max<_I0,_In . . .>::value : __static_max<_I1,_In . . .>::value ; } ; template<size_t _Len,class _Type0,class . . . _Types> struct aligned_union { const size_t alignment_value = __static_max<)",
    "insertText": "_LIBCPP_PREFERRED_ALIGNOF(_Type0), _LIBCPP_PREFERRED_ALIGNOF(_Types)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t __len = __static_max<_Len,)",
    "insertText": "sizeof(_Type0), sizeof(_Types)"
  }
]