[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FPerParticlePBDSpringConstraints()",
    "kind": "Method",
    "detail": "Function (typedef FPBDSpringConstraintsBase Base ; using Base::Constraints ; using Base::Stiffness ; public :)",
    "insertText": "FPerParticlePBDSpringConstraints(const FSolverParticles& InParticles, const TArray<TVec2<int32>>& InConstraints, const FSolverReal InStiffness = (FSolverReal)1.) : Base(InParticles, 0, 0, InConstraints, TConstArrayView<FRealSingle>(), FSolverVec2(InStiffness))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const auto& Constraint = Constraints [ i ] ; int32 i1 = Constraint [ 0 ] ; int32 i2 = Constraint [ 1 ] ;)",
    "insertText": "if(i1 >= ParticleToConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleToConstraints .)",
    "insertText": "SetNum(i1 + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(i2 >= ParticleToConstraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ParticleToConstraints .)",
    "insertText": "SetNum(i2 + 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ParticleToConstraints [ i1 ] .)",
    "insertText": "Add(i)"
  },
  {
    "label": "FPerParticlePBDSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPerParticlePBDSpringConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt, const int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 CIndex = ParticleToConstraints [ Index ] [ i ] ; const auto& Constraint = Constraints [ CIndex ] ; int32 i1 = Constraint [ 0 ] ; int32 i2 = Constraint [ 1 ] ;)",
    "insertText": "if(Index == i1 && InParticles.InvM(i1) > 0)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i1) -= InParticles.InvM(i1) * Base::GetDelta(InParticles, CIndex, (FSolverReal)Stiffness)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InParticles.InvM(i2) > 0)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i2) += InParticles.InvM(i2) * Base::GetDelta(InParticles, CIndex, (FSolverReal)Stiffness)"
  }
]