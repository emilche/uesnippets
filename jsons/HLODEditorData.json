[
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UActorDescContainerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainerInstance"
  },
  {
    "label": "FHLODSceneNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHLODSceneNode"
  },
  {
    "label": "FWorldPartitionHLODEditorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionHLODEditorData"
  },
  {
    "label": "FContainerInstanceHLODActorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContainerInstanceHLODActorData"
  },
  {
    "label": "FExternalDirtyActorTrackerGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalDirtyActorTrackerGuid"
  },
  {
    "label": "UpdateVisibility()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" WorldPartition / HLOD / HLODLoaderAdapter . h \" # include \" ExternalDirtyActorsTracker . h \" class UWorldPartition ; class UActorDescContainerInstance ; struct FHLODSceneNode { void)",
    "insertText": "UpdateVisibility(const FVector& InCameraLocation, double InMinDrawDistance, double InMaxDrawDistance, bool bInForceHidden, bool bInForceVisibilityUpdate, int32 InLastStateUpdate)"
  },
  {
    "label": "FWorldPartitionHLODEditorData()",
    "kind": "Method",
    "detail": "Function (FHLODSceneNode* ParentHLOD = nullptr ; TArray<FHLODSceneNode*> ChildrenHLODs ; FBoxSphereBounds Bounds ; bool bCachedIsVisible = true ; FWorldPartitionHandle HLODActorHandle ; int32 HasIntersectingLoadedRegion = INDEX_NONE ; } ; struct FWorldPartitionHLODEditorData { public :)",
    "insertText": "FWorldPartitionHLODEditorData(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "FWorldPartitionHLODEditorData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWorldPartitionHLODEditorData()"
  },
  {
    "label": "ClearLoadedActorsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLoadedActorsState()"
  },
  {
    "label": "UpdateLoadedActorsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLoadedActorsState()"
  },
  {
    "label": "UpdateVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisibility(const FVector& InCameraLocation, double InMinDrawDistance, double InMaxDrawDistance, bool bForceVisibilityUpdate)"
  },
  {
    "label": "SetHLODLoadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHLODLoadingState(bool bInShouldBeLoaded)"
  },
  {
    "label": "OnActorDescContainerInstanceRegistered()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnActorDescContainerInstanceRegistered(UActorDescContainerInstance* InContainerInstance)"
  },
  {
    "label": "OnActorDescContainerInstanceUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescContainerInstanceUnregistered(UActorDescContainerInstance* InContainerInstance)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (private : struct FContainerInstanceHLODActorData { TMap<FGuid,TUniquePtr<FHLODSceneNode>> HLODActorNodes ; TArray<FHLODSceneNode*> TopLevelHLODActorNodes ; } ; UWorldPartition* WorldPartition ; TMap<UActorDescContainerInstance*,FContainerInstanceHLODActorData> PerContainerInstanceHLODActorDataMap ; TUniquePtr<FLoaderAdapterHLOD> HLODActorsLoader ; int32 LastStateUpdate ; struct FExternalDirtyActorTrackerGuid { using Type = FGuid ; using OwnerType = FWorldPartitionHLODEditorData ; FGuid)",
    "insertText": "Store(FWorldPartitionHLODEditorData* InOwner, AActor* InActor)"
  }
]