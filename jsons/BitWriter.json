[
  {
    "label": "vpx_writer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_writer"
  },
  {
    "label": "vpx_start_encode()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_BITWRITER_H_ # define VPX_VPX_DSP_BITWRITER_H_ # include<stdio . h> # include \" vpx_ports / compiler_attributes . h \" # include \" vpx_ports / mem . h \" # include \" vpx_dsp / prob . h \" # if CONFIG_BITSTREAM_DEBUG # include \" vpx_util / vpx_debug_util . h \" # endif # ifdef __cplusplus \" C \" { # endif typedef struct vpx_writer { unsigned int lowvalue ; unsigned int range ; int count ; unsigned int pos ; uint8_t* buffer ; } vpx_writer ; void)",
    "insertText": "vpx_start_encode(vpx_writer *br, uint8_t *source)"
  },
  {
    "label": "vpx_stop_encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_stop_encode(vpx_writer *br)"
  },
  {
    "label": "vpx_write()",
    "kind": "Method",
    "detail": "Function (VPX_NO_UNSIGNED_SHIFT_CHECK void)",
    "insertText": "vpx_write(vpx_writer *br, int bit, int probability)"
  },
  {
    "label": "bitstream_queue_push()",
    "kind": "Method",
    "detail": "Function (unsigned int split ; int count = br -> count ; unsigned int range = br -> range ; unsigned int lowvalue = br -> lowvalue ; int shift ; # if CONFIG_BITSTREAM_DEBUG)",
    "insertText": "bitstream_queue_push(bit, probability)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "split(((range - 1) * probability) >> 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (range = split ;)",
    "insertText": "if(bit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lowvalue + = split ; range = br -> range - split ; } shift = vpx_norm [ range ] ; range<<= shift ; count + = shift ;)",
    "insertText": "if(count >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int offset = shift - count ;)",
    "insertText": "if((lowvalue << (offset - 1)) & 0x80000000)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int x = br -> pos - 1 ;)",
    "insertText": "while(x >= 0 && br->buffer[x] == 0xff)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (br -> buffer [ x ] = 0 ; x - - ; } br -> buffer [ x ] + = 1 ; } br -> buffer [ br ->)",
    "insertText": "pos(lowvalue >> (24 - offset))"
  },
  {
    "label": "vpx_write_bit()",
    "kind": "Method",
    "detail": "Function (lowvalue<<= offset ; shift = count ; lowvalue& = 0 xffffff ; count - = 8 ; } lowvalue<<= shift ; br -> count = count ; br -> lowvalue = lowvalue ; br -> range = range ; } void)",
    "insertText": "vpx_write_bit(vpx_writer *w, int bit)"
  },
  {
    "label": "vpx_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_write(w, bit, 128)"
  },
  {
    "label": "vpx_write_literal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vpx_write_literal(vpx_writer *w, int data, int bits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int bit ;)",
    "insertText": "for(bit = bits - 1; bit >= 0; bit--) vpx_write_bit(w, 1 & (data >> bit))"
  }
]