[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FComponentMaterialSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentMaterialSet"
  },
  {
    "label": "FMeshRenderDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshRenderDecomposition"
  },
  {
    "label": "FGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroup"
  },
  {
    "label": "PREDECLARE_USE_GEOMETRY_CLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" GeometryBase . h \" # include \" HAL / Platform . h \" # include \" Templates / UniquePtr . h \")",
    "insertText": "PREDECLARE_USE_GEOMETRY_CLASS(FDynamicMesh3)"
  },
  {
    "label": "FMeshRenderDecomposition()",
    "kind": "Method",
    "detail": "Function (class UMaterialInterface ; struct FComponentMaterialSet ; class FMeshRenderDecomposition { public :)",
    "insertText": "FMeshRenderDecomposition(FMeshRenderDecomposition&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshRenderDecomposition&)",
    "insertText": "operator(FMeshRenderDecomposition&&)"
  },
  {
    "label": "FMeshRenderDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshRenderDecomposition()"
  },
  {
    "label": "FMeshRenderDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshRenderDecomposition(const FMeshRenderDecomposition&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshRenderDecomposition&)",
    "insertText": "operator(const FMeshRenderDecomposition&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (struct FGroup { TArray<int32> Triangles ; UMaterialInterface* Material ; } ; TArray<TUniquePtr<FGroup>> Groups ; TArray<int32> TriangleToGroupMap ; void)",
    "insertText": "Initialize(int32 Count)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Groups .)",
    "insertText": "SetNum(Count)"
  },
  {
    "label": "FGroup()",
    "kind": "Method",
    "detail": "Function (Groups [ k ] = MakeUnique<)",
    "insertText": "FGroup()"
  },
  {
    "label": "AppendGroup()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "AppendGroup()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 N = Groups .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Groups .)",
    "insertText": "SetNum(N + 1)"
  },
  {
    "label": "IsGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGroup(int32 Index)"
  },
  {
    "label": "BuildMaterialDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMaterialDecomposition(const FDynamicMesh3* Mesh, const FComponentMaterialSet* MaterialSet, FMeshRenderDecomposition& Decomp)"
  },
  {
    "label": "BuildChunkedDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChunkedDecomposition(const FDynamicMesh3* Mesh, const FComponentMaterialSet* MaterialSet, FMeshRenderDecomposition& Decomp, int32 MaxChunkSize = 1 << 14)"
  }
]