[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BatteryState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BatteryState"
  },
  {
    "label": "BatteryDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BatteryDetails"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POWER_MONITOR_BATTERY_LEVEL_PROVIDER_H_ # define BASE_POWER_MONITOR_BATTERY_LEVEL_PROVIDER_H_ # include<stdint . h> # include<memory> # include<vector> # include \" base / callback . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT BatteryLevelProvider { public : enum class BatteryLevelUnit { kMWh,kMAh,kRelative,} ; struct BatteryState { int battery_count = 0 ; bool is_external_power_connected = false ; absl::optional<uint64_t> current_capacity ; absl::optional<uint64_t> full_charged_capacity ; absl::optional<BatteryLevelUnit> charge_unit ; base::TimeTicks capture_time ; } ; std::unique_ptr<BatteryLevelProvider>)",
    "insertText": "Create()"
  },
  {
    "label": "BatteryLevelProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BatteryLevelProvider()"
  },
  {
    "label": "BatteryLevelProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatteryLevelProvider(const BatteryLevelProvider& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BatteryLevelProvider&)",
    "insertText": "operator(const BatteryLevelProvider& other)"
  },
  {
    "label": "GetBatteryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBatteryState(base::OnceCallback<void(const absl::optional<BatteryState>&)> callback)"
  },
  {
    "label": "MakeBatteryState()",
    "kind": "Method",
    "detail": "Function (struct BatteryDetails { bool is_external_power_connected ; uint64_t current_capacity ; uint64_t full_charged_capacity ; BatteryLevelUnit charge_unit ; } ; BatteryState)",
    "insertText": "MakeBatteryState(const std::vector<BatteryDetails>& battery_details)"
  }
]