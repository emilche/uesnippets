[
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "UAITask_MoveTo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAITask_MoveTo"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" AITypes . h \" # include \" Navigation / PathFollowingComponent . h \" # include \" Tasks / AITask . h \" # include \" AITask_MoveTo . generated . h \" class AAIController ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FMoveTaskCompletedSignature, TEnumAsByte<EPathFollowingResult::Type>, Result, AAIController*, AIController)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AIMODULE_API UAITask_MoveTo(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "ConditionalPerformMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalPerformMove()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUp(AAIController* Controller, const FAIMoveRequest& InMoveRequest)"
  },
  {
    "label": "GetMoveResult()",
    "kind": "Method",
    "detail": "Function (EPathFollowingResult::Type)",
    "insertText": "GetMoveResult()"
  },
  {
    "label": "GetMoveRequestRef()",
    "kind": "Method",
    "detail": "Function (FAIMoveRequest&)",
    "insertText": "GetMoveRequestRef()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle PathFinishDelegateHandle ; FDelegateHandle PathUpdateDelegateHandle ; FTimerHandle MoveRetryTimerHandle ; FTimerHandle PathRetryTimerHandle ; FAIRequestID MoveRequestID ; FNavPathSharedPtr Path ; TEnumAsByte<EPathFollowingResult::Type> MoveResult ; uint8 bUseContinuousTracking : 1 ; void)",
    "insertText": "Activate()"
  },
  {
    "label": "OnDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroy(bool bOwnerFinished)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "FinishMoveTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishMoveTask(EPathFollowingResult::Type InResult)"
  },
  {
    "label": "SetObservedPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObservedPath(FNavPathSharedPtr InPath)"
  },
  {
    "label": "ResetObservers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetObservers()"
  },
  {
    "label": "ResetTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimers()"
  },
  {
    "label": "ConditionalUpdatePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdatePath()"
  },
  {
    "label": "PerformMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformMove()"
  },
  {
    "label": "OnPathEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathEvent(FNavigationPath* InPath, ENavPathEvent::Type Event)"
  },
  {
    "label": "OnRequestFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestFinished(FAIRequestID RequestID, const FPathFollowingResult& Result)"
  }
]