[
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "IStereoRenderTargetManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStereoRenderTargetManager"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "IPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPooledRenderTarget"
  },
  {
    "label": "ShouldUseSeparateRenderTarget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / GameViewportClient . h \" # include \" PixelFormat . h \" class FRHITexture ; enum class ETextureCreateFlags : uint64 ; enum EShaderPlatform : uint16 ; typedef TRefCountPtr<FRHITexture> FTextureRHIRef ; class IStereoRenderTargetManager { public : bool)",
    "insertText": "ShouldUseSeparateRenderTarget()"
  },
  {
    "label": "UpdateViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewport(bool bUseSeparateRenderTarget, const class FViewport& Viewport, class SViewport* ViewportWidget = nullptr)"
  },
  {
    "label": "CalculateRenderTargetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateRenderTargetSize(const class FViewport& Viewport, uint32& InOutSizeX, uint32& InOutSizeY)"
  },
  {
    "label": "NeedReAllocateViewportRenderTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedReAllocateViewportRenderTarget(const class FViewport& Viewport)"
  }
]