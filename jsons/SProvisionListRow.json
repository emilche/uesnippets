[
  {
    "label": "SProvisionListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProvisionListRow"
  },
  {
    "label": "IMAGE_BRUSH()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Misc / Paths . h \" # include \" Brushes / SlateNoResource . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" IOSTargetSettingsCustomization . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Views / SListView . h \" # include \" Brushes / SlateImageBrush . h \" # include \" SlateOptMacros . h \" # define)",
    "insertText": "IMAGE_BRUSH(RelativePath, ... ) FSlateImageBrush( FPaths::EngineContentDir() / TEXT(\"Editor/Slate\") / RelativePath + TEXT(\".png\"), __VA_ARGS__ ) DECLARE_DELEGATE_OneParam(FOnProvisionChanged, FString)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SProvisionListRow : public SMultiColumnTableRow<ProvisionPtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProvisionListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(ProvisionPtr, Provision) SLATE_ARGUMENT(ProvisionListPtr, ProvisionList) SLATE_EVENT(FOnProvisionChanged, OnProvisionChanged) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Provision = InArgs . _Provision ; ProvisionList = InArgs . _ProvisionList ; OnProvisionChanged_Handler = InArgs . _OnProvisionChanged ; SMultiColumnTableRow<ProvisionPtr)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "FCheckBoxStyle()",
    "kind": "Method",
    "detail": "Function (ProvisionCheckBoxStyle =)",
    "insertText": "FCheckBoxStyle() .SetCheckBoxType(ESlateCheckBoxType::CheckBox) .SetUncheckedImage( FSlateNoResource() ) .SetUncheckedHoveredImage( FSlateNoResource() ) .SetUncheckedPressedImage( FSlateNoResource() ) .SetCheckedImage( IMAGE_BRUSH( \"Automation/Success\", FVector2D(16.0f, 16.0f) ) ) .SetCheckedHoveredImage( IMAGE_BRUSH( \"Automation/Success\", FVector2D(16.0f, 16.0f), FLinearColor( 0.5f, 0.5f, 0.5f ) ) ) .SetCheckedPressedImage( IMAGE_BRUSH( \"Automation/Success\", FVector2D(16.0f, 16.0f) ) ) .SetUndeterminedImage(FSlateNoResource() ) .SetUndeterminedHoveredImage( FSlateNoResource() ) .SetUndeterminedPressedImage( FSlateNoResource())"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (bInitialized = true ; } } public : BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Name\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"File\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Status\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == TEXT(\"Distribution\"))"
  },
  {
    "label": "HandleNameText()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } END_SLATE_FUNCTION_BUILD_OPTIMIZATION private : FText)",
    "insertText": "HandleNameText()"
  },
  {
    "label": "HandleFileText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleFileText()"
  },
  {
    "label": "HandleStatusTextBlockText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleStatusTextBlockText()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Provision->Status == TEXT(\"NO_CERT\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Provision->Status == TEXT(\"EXPIRED\"))"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromString(TEXT(\"Valid\"))"
  },
  {
    "label": "HandleStatusTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleStatusTextColorAndOpacity()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Provision->Status == TEXT(\"NO_CERT\") || Provision->Status == TEXT(\"EXPIRED\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Provision->bSelected)"
  },
  {
    "label": "FSlateColor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FSlateColor(FLinearColor(1.0f, 1.0f, 1.0f))"
  },
  {
    "label": "HandleSelectedColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "HandleSelectedColorAndOpacity()"
  },
  {
    "label": "HandleDistribution()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "HandleDistribution()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Provision -> bManuallySelected = InState = = ECheckBoxState::Checked ;)",
    "insertText": "if(OnProvisionChanged_Handler.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnProvisionChanged_Handler .)",
    "insertText": "Execute(Provision->bManuallySelected ? Provision->FileName : \"\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Idx = 0; Idx < ProvisionList->Num(); ++Idx)"
  }
]