[
  {
    "label": "TaskGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskGroup"
  },
  {
    "label": "Task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Task"
  },
  {
    "label": "ILMTHREAD_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILMTHREAD_EXPORT_TYPE"
  },
  {
    "label": "ILMTHREAD_HIDDEN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ILMTHREAD_HIDDEN"
  },
  {
    "label": "ThreadPoolProvider()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_ILM_THREAD_POOL_H # define INCLUDED_ILM_THREAD_POOL_H # include \" IlmThreadConfig . h \" # include \" IlmThreadExport . h \" # include \" IlmThreadNamespace . h \" ILMTHREAD_INTERNAL_NAMESPACE_HEADER_ENTER class TaskGroup ; class Task ; class ILMTHREAD_EXPORT_TYPE ThreadPoolProvider { public : ILMTHREAD_EXPORT)",
    "insertText": "ThreadPoolProvider()"
  },
  {
    "label": "numThreads()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "numThreads()"
  },
  {
    "label": "setNumThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumThreads(int count)"
  },
  {
    "label": "addTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTask(Task* task)"
  },
  {
    "label": "finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finish()"
  },
  {
    "label": "ThreadPoolProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadPoolProvider(const ThreadPoolProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadPoolProvider&)",
    "insertText": "operator(const ThreadPoolProvider&)"
  },
  {
    "label": "ThreadPoolProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadPoolProvider(ThreadPoolProvider&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadPoolProvider&)",
    "insertText": "operator(ThreadPoolProvider&&)"
  },
  {
    "label": "estimateThreadCountForFileIO()",
    "kind": "Method",
    "detail": "Function (} ; class ILMTHREAD_EXPORT_TYPE ThreadPool { public : ILMTHREAD_EXPORT unsigned)",
    "insertText": "estimateThreadCountForFileIO()"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT)",
    "insertText": "ThreadPool(unsigned numThreads = 0)"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT ~)",
    "insertText": "ThreadPool()"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadPool(const ThreadPool&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadPool&)",
    "insertText": "operator(const ThreadPool&)"
  },
  {
    "label": "ThreadPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadPool(ThreadPool&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadPool&)",
    "insertText": "operator(ThreadPool&&)"
  },
  {
    "label": "setThreadProvider()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "setThreadProvider(ThreadPoolProvider* provider)"
  },
  {
    "label": "globalThreadPool()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT ThreadPool&)",
    "insertText": "globalThreadPool()"
  },
  {
    "label": "addGlobalTask()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "addGlobalTask(Task* task)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (struct ILMTHREAD_HIDDEN Data ; protected : Data* _data ; } ; class ILMTHREAD_EXPORT_TYPE Task { public : ILMTHREAD_EXPORT)",
    "insertText": "Task(TaskGroup* g)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT ~)",
    "insertText": "Task()"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(const Task&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Task&)",
    "insertText": "operator(const Task&)"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task(Task&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Task&)",
    "insertText": "operator(Task&&)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "execute()"
  },
  {
    "label": "group()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT TaskGroup*)",
    "insertText": "group()"
  },
  {
    "label": "TaskGroup()",
    "kind": "Method",
    "detail": "Function (protected : TaskGroup* _group ; } ; class ILMTHREAD_EXPORT_TYPE TaskGroup { public : ILMTHREAD_EXPORT)",
    "insertText": "TaskGroup()"
  },
  {
    "label": "TaskGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskGroup(const TaskGroup& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskGroup&)",
    "insertText": "operator(const TaskGroup& other)"
  },
  {
    "label": "TaskGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskGroup(TaskGroup&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskGroup&)",
    "insertText": "operator(TaskGroup&& other)"
  },
  {
    "label": "finishOneTask()",
    "kind": "Method",
    "detail": "Function (ILMTHREAD_EXPORT void)",
    "insertText": "finishOneTask()"
  }
]