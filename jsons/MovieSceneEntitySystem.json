[
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FSystemSubsequentTasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSystemSubsequentTasks"
  },
  {
    "label": "FSystemTaskPrerequisites",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSystemTaskPrerequisites"
  },
  {
    "label": "IEntitySystemScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEntitySystemScheduler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMovieSceneEntitySystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystem"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" HAL / Platform . h \" # include \" Misc / EnumClassFlags . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" MovieSceneEntitySystem . generated . h \" class UMovieSceneEntitySystemLinker ; namespace UE { namespace MovieScene { struct FSystemSubsequentTasks ; struct FSystemTaskPrerequisites ; class IEntitySystemScheduler ; enum class EEntitySystemCategory : uint32 { None = 0,Unspecified = 1 u<<0,Core = 1 u<<1,ChannelEvaluators = 1 u<<2,BlenderSystems = 1 u<<3,PropertySystems = 1 u<<4,Custom = 1 u<<5,Last = 1 u<<3 1,All = ~ 0 u } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EEntitySystemCategory) } } UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UMovieSceneEntitySystem()",
    "kind": "Method",
    "detail": "Function (using FComponentTypeID = UE::MovieScene::FComponentTypeID ; using FComponentMask = UE::MovieScene::FComponentMask ; using FSystemTaskPrerequisites = UE::MovieScene::FSystemTaskPrerequisites ; using FSystemSubsequentTasks = UE::MovieScene::FSystemSubsequentTasks ;)",
    "insertText": "UMovieSceneEntitySystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "UMovieSceneEntitySystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UMovieSceneEntitySystem()"
  },
  {
    "label": "DefineImplicitPrerequisite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineImplicitPrerequisite(TSubclassOf<UMovieSceneEntitySystem> UpstreamSystemType, TSubclassOf<UMovieSceneEntitySystem> DownstreamSystemType)"
  },
  {
    "label": "DefineComponentProducer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComponentProducer(TSubclassOf<UMovieSceneEntitySystem> ClassType, FComponentTypeID ComponentType)"
  },
  {
    "label": "DefineComponentConsumer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComponentConsumer(TSubclassOf<UMovieSceneEntitySystem> ClassType, FComponentTypeID ComponentType)"
  },
  {
    "label": "LinkRelevantSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkRelevantSystems(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "LinkCategorySystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkCategorySystems(UMovieSceneEntitySystemLinker* InLinker, UE::MovieScene::EEntitySystemCategory InCategory)"
  },
  {
    "label": "LinkAllSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAllSystems(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "RegisterCustomSystemCategory()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::EEntitySystemCategory)",
    "insertText": "RegisterCustomSystemCategory()"
  },
  {
    "label": "SortByFlowOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortByFlowOrder(TArray<uint16>& InOutGlobalNodeIDs)"
  },
  {
    "label": "GetSubsequentSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubsequentSystems(uint16 FromGlobalNodeID, TArray<uint16>& OutSubsequentGlobalNodeIDs)"
  },
  {
    "label": "PrintFilteredFlowGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFilteredFlowGraph(TArrayView<const TBitArray<>> GroupFilters, FStringBuilderBase& OutString)"
  },
  {
    "label": "DebugPrintGlobalDependencyGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugPrintGlobalDependencyGraph(bool bUpdateCache = true)"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (public : UE::MovieScene::EEntitySystemCategory)",
    "insertText": "GetCategories()"
  },
  {
    "label": "GetGlobalDependencyGraphID()",
    "kind": "Method",
    "detail": "Function (GraphID = InGraphID ; } uint16)",
    "insertText": "GetGlobalDependencyGraphID()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "SchedulePersistentTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SchedulePersistentTasks(UE::MovieScene::IEntitySystemScheduler* Scheduler)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "IsRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevant(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "ConditionalLinkSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalLinkSystem(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "TagGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TagGarbage()"
  },
  {
    "label": "CleanTaggedGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanTaggedGarbage()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "OnLink()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnLink()"
  },
  {
    "label": "OnSchedulePersistentTasks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSchedulePersistentTasks(UE::MovieScene::IEntitySystemScheduler* TaskScheduler)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "OnUnlink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnUnlink()"
  },
  {
    "label": "IsRelevantImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRelevantImpl(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "ConditionalLinkSystemImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalLinkSystemImpl(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "OnTagGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTagGarbage()"
  },
  {
    "label": "OnCleanTaggedGarbage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCleanTaggedGarbage()"
  }
]