[
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "LoopT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopT"
  },
  {
    "label": "PopulateLoopsDFS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PopulateLoopsDFS"
  },
  {
    "label": "getExitingBlocks()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_LOOPINFOIMPL_H # define LLVM_ANALYSIS_LOOPINFOIMPL_H # include \" llvm / ADT / DepthFirstIterator . h \" # include \" llvm / ADT / PostOrderIterator . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / Analysis / LoopInfo . h \" # include \" llvm / IR / Dominators . h \" namespace llvm { template<class BlockT,class LoopT> void LoopBase<BlockT,LoopT)",
    "insertText": "getExitingBlocks(SmallVectorImpl<BlockT *> &ExitingBlocks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<BlockT*> BlockTraits ;)",
    "insertText": "for(block_iterator BI = block_begin(), BE = block_end(); BI != BE; ++BI) for (typename BlockTraits::ChildIteratorType I = BlockTraits::child_begin(*BI), E = BlockTraits::child_end(*BI); I != E; ++I) if (!contains(*I))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ExitingBlocks .)",
    "insertText": "push_back(*BI)"
  },
  {
    "label": "getExitingBlock()",
    "kind": "Method",
    "detail": "Function (break ; } } template<class BlockT,class LoopT> BlockT* LoopBase<BlockT,LoopT)",
    "insertText": "getExitingBlock()"
  },
  {
    "label": "getExitingBlocks()",
    "kind": "Method",
    "detail": "Function (SmallVector<BlockT*,8> ExitingBlocks ;)",
    "insertText": "getExitingBlocks(ExitingBlocks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<BlockT*> BlockTraits ;)",
    "insertText": "for(block_iterator BI = block_begin(), BE = block_end(); BI != BE; ++BI) for (typename BlockTraits::ChildIteratorType I = BlockTraits::child_begin(*BI), E = BlockTraits::child_end(*BI); I != E; ++I) if (!contains(*I)) ExitBlocks.push_back(*I)"
  },
  {
    "label": "getExitBlock()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> BlockT* LoopBase<BlockT,LoopT)",
    "insertText": "getExitBlock()"
  },
  {
    "label": "getExitBlocks()",
    "kind": "Method",
    "detail": "Function (SmallVector<BlockT*,8> ExitBlocks ;)",
    "insertText": "getExitBlocks(ExitBlocks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<BlockT*> BlockTraits ;)",
    "insertText": "for(block_iterator BI = block_begin(), BE = block_end(); BI != BE; ++BI) for (typename BlockTraits::ChildIteratorType I = BlockTraits::child_begin(*BI), E = BlockTraits::child_end(*BI); I != E; ++I) if (!contains(*I)) ExitEdges.push_back(Edge(*BI, *I))"
  },
  {
    "label": "getLoopPreheader()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> BlockT* LoopBase<BlockT,LoopT)",
    "insertText": "getLoopPreheader()"
  },
  {
    "label": "getLoopPredecessor()",
    "kind": "Method",
    "detail": "Function (BlockT* Out =)",
    "insertText": "getLoopPredecessor()"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<BlockT*> BlockTraits ; BlockTraits::ChildIteratorType SI =)",
    "insertText": "child_begin(Out)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + SI ;)",
    "insertText": "if(SI != BlockTraits::child_end(Out))"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (BlockT* Out = nullptr ; BlockT* Header =)",
    "insertText": "getHeader()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<Inverse<BlockT*>> InvBlockTraits ;)",
    "insertText": "for(typename InvBlockTraits::ChildIteratorType PI = InvBlockTraits::child_begin(Header), PE = InvBlockTraits::child_end(Header); PI != PE; ++PI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InvBlockTraits::NodeType* N =* PI ;)",
    "insertText": "if(!contains(N))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Out = N ; } })",
    "insertText": "assert(Out && \"Header of loop has no predecessors from outside loop?\")"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<Inverse<BlockT*>> InvBlockTraits ; InvBlockTraits::ChildIteratorType PI =)",
    "insertText": "child_begin(Header)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (InvBlockTraits::ChildIteratorType PE =)",
    "insertText": "child_end(Header)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BlockT* Latch = nullptr ;)",
    "insertText": "for(; PI != PE; ++PI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InvBlockTraits::NodeType* N =* PI ;)",
    "insertText": "if(contains(N))"
  },
  {
    "label": "addBasicBlockToLoop()",
    "kind": "Method",
    "detail": "Function (Latch = N ; } } return Latch ; } template<class BlockT,class LoopT> void LoopBase<BlockT,LoopT)",
    "insertText": "addBasicBlockToLoop(BlockT *NewBB, LoopInfoBase<BlockT, LoopT> &LIB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Blocks.empty() || LIB[getHeader()] == this) && \"Incorrect LI specified for this loop!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NewBB && \"Cannot add a null basic block to the loop!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!LIB[NewBB] && \"BasicBlock already in the loop!\")"
  },
  {
    "label": "LoopT()",
    "kind": "Method",
    "detail": "Function (LoopT* L = static_cast<)",
    "insertText": "LoopT(this)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (LIB . BBMap [ NewBB ] = L ;)",
    "insertText": "while(L)"
  },
  {
    "label": "addBlockEntry()",
    "kind": "Method",
    "detail": "Function (L ->)",
    "insertText": "addBlockEntry(NewBB)"
  },
  {
    "label": "getParentLoop()",
    "kind": "Method",
    "detail": "Function (L = L ->)",
    "insertText": "getParentLoop()"
  },
  {
    "label": "replaceChildLoopWith()",
    "kind": "Method",
    "detail": "Function (} } template<class BlockT,class LoopT> void LoopBase<BlockT,LoopT)",
    "insertText": "replaceChildLoopWith(LoopT *OldChild, LoopT *NewChild)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(OldChild->ParentLoop == this && \"This loop is already broken!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!NewChild->ParentLoop && \"NewChild already has a parent!\")"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::vector<LoopT*>::iterator I =)",
    "insertText": "find(SubLoops.begin(), SubLoops.end(), OldChild)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != SubLoops.end() && \"OldChild not in loop!\")"
  },
  {
    "label": "verifyLoop()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> void LoopBase<BlockT,LoopT)",
    "insertText": "verifyLoop()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG)",
    "insertText": "assert(!Blocks.empty() && \"Loop header is missing\")"
  },
  {
    "label": "getExitBlocks()",
    "kind": "Method",
    "detail": "Function (SmallVector<BlockT*,8> ExitBBs ;)",
    "insertText": "getExitBlocks(ExitBBs)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (llvm::SmallPtrSet<BlockT*,8> VisitSet ; VisitSet .)",
    "insertText": "insert(ExitBBs.begin(), ExitBBs.end())"
  },
  {
    "label": "df_ext_begin()",
    "kind": "Method",
    "detail": "Function (df_ext_iterator<BlockT*,llvm::SmallPtrSet<BlockT*,8>> BI =)",
    "insertText": "df_ext_begin(getHeader(), VisitSet), BE = df_ext_end(getHeader(), VisitSet)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned NumVisited = 0 ;)",
    "insertText": "for(; BI != BE; ++BI)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BlockT* BB =* BI ; bool HasInsideLoopSuccs = false ; bool HasInsideLoopPreds = false ; SmallVector<BlockT*,2> OutsideLoopPreds ; typedef GraphTraits<BlockT*> BlockTraits ;)",
    "insertText": "for(typename BlockTraits::ChildIteratorType SI = BlockTraits::child_begin(BB), SE = BlockTraits::child_end(BB); SI != SE; ++SI) if (contains(*SI))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HasInsideLoopSuccs = true ; break ; } typedef GraphTraits<Inverse<BlockT*>> InvBlockTraits ;)",
    "insertText": "for(typename InvBlockTraits::ChildIteratorType PI = InvBlockTraits::child_begin(BB), PE = InvBlockTraits::child_end(BB); PI != PE; ++PI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(BB == getHeader())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!OutsideLoopPreds.empty() && \"Loop is unreachable!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!OutsideLoopPreds.empty())"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (BlockT* EntryBB = BB ->)",
    "insertText": "getParent()->begin()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert(HasInsideLoopPreds && \"Loop block has no in-loop predecessors!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(HasInsideLoopSuccs && \"Loop block has no in-loop successors!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BB != getHeader()->getParent()->begin() && \"Loop contains function entry block!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (NumVisited + + ; })",
    "insertText": "assert(NumVisited == getNumBlocks() && \"Unreachable block in loop\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(contains(*BI) && \"Loop does not contain all the blocks of a subloop!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ParentLoop)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(std::find(ParentLoop->begin(), ParentLoop->end(), this) != ParentLoop->end() && \"Loop is not a subloop of its parent!\")"
  },
  {
    "label": "verifyLoopNest()",
    "kind": "Method",
    "detail": "Function (} # endif } template<class BlockT,class LoopT> void LoopBase<BlockT,LoopT)",
    "insertText": "verifyLoopNest(DenseSet<const LoopT*> *Loops)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Loops ->)",
    "insertText": "insert(static_cast<const LoopT *>(this))"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> void LoopBase<BlockT,LoopT)",
    "insertText": "print(raw_ostream &OS, unsigned Depth)"
  },
  {
    "label": "indent()",
    "kind": "Method",
    "detail": "Function (OS .)",
    "insertText": "indent(Depth*2) << \"Loop at depth \" << getLoopDepth()"
  },
  {
    "label": "getBlocks()",
    "kind": "Method",
    "detail": "Function (BlockT* BB =)",
    "insertText": "getBlocks()"
  },
  {
    "label": "printAsOperand()",
    "kind": "Method",
    "detail": "Function (BB ->)",
    "insertText": "printAsOperand(OS, false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} OS<<\" \\ n \" ;)",
    "insertText": "for(iterator I = begin(), E = end(); I != E; ++I) (*I)->print(OS, Depth+2)"
  },
  {
    "label": "discoverAndMapSubloop()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> void)",
    "insertText": "discoverAndMapSubloop(LoopT *L, ArrayRef<BlockT*> Backedges, LoopInfoBase<BlockT, LoopT> *LI, DominatorTreeBase<BlockT> &DomTree)"
  },
  {
    "label": "ReverseCFGWorklist()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<Inverse<BlockT*>> InvBlockTraits ; unsigned NumBlocks = 0 ; unsigned NumSubloops = 0 ; std::vector<BlockT*>)",
    "insertText": "ReverseCFGWorklist(Backedges.begin(), Backedges.end())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (BlockT* PredBB = ReverseCFGWorklist .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (ReverseCFGWorklist .)",
    "insertText": "pop_back()"
  },
  {
    "label": "getLoopFor()",
    "kind": "Method",
    "detail": "Function (LoopT* Subloop = LI ->)",
    "insertText": "getLoopFor(PredBB)"
  },
  {
    "label": "changeLoopFor()",
    "kind": "Method",
    "detail": "Function (LI ->)",
    "insertText": "changeLoopFor(PredBB, L)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + NumBlocks ;)",
    "insertText": "if(PredBB == L->getHeader())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (ReverseCFGWorklist .)",
    "insertText": "insert(ReverseCFGWorklist.end(), InvBlockTraits::child_begin(PredBB), InvBlockTraits::child_end(PredBB))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "while(LoopT *Parent = Subloop->getParentLoop())"
  },
  {
    "label": "setParentLoop()",
    "kind": "Method",
    "detail": "Function (Subloop ->)",
    "insertText": "setParentLoop(L)"
  },
  {
    "label": "getBlocks()",
    "kind": "Method",
    "detail": "Function (+ + NumSubloops ; NumBlocks + = Subloop ->)",
    "insertText": "getBlocks().capacity()"
  },
  {
    "label": "getSubLoopsVector()",
    "kind": "Method",
    "detail": "Function (} } } L ->)",
    "insertText": "getSubLoopsVector().reserve(NumSubloops)"
  },
  {
    "label": "reserveBlocks()",
    "kind": "Method",
    "detail": "Function (L ->)",
    "insertText": "reserveBlocks(NumBlocks)"
  },
  {
    "label": "PopulateLoopsDFS()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> class PopulateLoopsDFS { typedef GraphTraits<BlockT*> BlockTraits ; typedef BlockTraits::ChildIteratorType SuccIterTy ; LoopInfoBase<BlockT,LoopT>* LI ; public :)",
    "insertText": "PopulateLoopsDFS(LoopInfoBase<BlockT, LoopT> *li): LI(li)"
  },
  {
    "label": "traverse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "traverse(BlockT *EntryBlock)"
  },
  {
    "label": "insertIntoLoop()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "insertIntoLoop(BlockT *Block)"
  },
  {
    "label": "getLoopFor()",
    "kind": "Method",
    "detail": "Function (LoopT* Subloop = LI ->)",
    "insertText": "getLoopFor(Block)"
  },
  {
    "label": "reverseBlock()",
    "kind": "Method",
    "detail": "Function (Subloop ->)",
    "insertText": "reverseBlock(1)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reverse(Subloop->getSubLoopsVector().begin(), Subloop->getSubLoopsVector().end())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; Subloop; Subloop = Subloop->getParentLoop()) Subloop->addBlockEntry(Block)"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> void LoopInfoBase<BlockT,LoopT)",
    "insertText": "Analyze(DominatorTreeBase<BlockT> &DomTree)"
  },
  {
    "label": "getBlock()",
    "kind": "Method",
    "detail": "Function (BlockT* Header = DomNode ->)",
    "insertText": "getBlock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BlockT* Backedge =* PI ;)",
    "insertText": "if(DomTree.dominates(Header, Backedge) && DomTree.isReachableFromEntry(Backedge))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Backedges .)",
    "insertText": "push_back(Backedge)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!Backedges.empty())"
  },
  {
    "label": "LoopT()",
    "kind": "Method",
    "detail": "Function (LoopT* L = new)",
    "insertText": "LoopT(Header)"
  },
  {
    "label": "discoverAndMapSubloop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "discoverAndMapSubloop(L, ArrayRef<BlockT*>(Backedges), this, DomTree)"
  },
  {
    "label": "DFS()",
    "kind": "Method",
    "detail": "Function (} } PopulateLoopsDFS<BlockT,LoopT>)",
    "insertText": "DFS(this)"
  },
  {
    "label": "traverse()",
    "kind": "Method",
    "detail": "Function (DFS .)",
    "insertText": "traverse(DomRoot->getBlock())"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT,class LoopT> void LoopInfoBase<BlockT,LoopT)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "for(DenseMap<BasicBlock*, LoopT*>::const_iterator I = BBMap.begin(), E = BBMap.end(); I != E; ++I) OS << \"BB '\" << I->first->getName() << \"' level = \" << I->second->getLoopDepth()"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (# endif } template<class BlockT,class LoopT> void LoopInfoBase<BlockT,LoopT)",
    "insertText": "verify()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DenseSet<const LoopT*> Loops ;)",
    "insertText": "for(iterator I = begin(), E = end(); I != E; ++I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!(*I)->getParentLoop() && \"Top-level loop has a parent!\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # ifndef NDEBUG)",
    "insertText": "for(auto &Entry : BBMap)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (const BlockT* BB = Entry . first ; LoopT* L = Entry . second ;)",
    "insertText": "assert(Loops.count(L) && \"orphaned loop\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(L->contains(BB) && \"orphaned block\")"
  }
]