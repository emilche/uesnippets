[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveEditorAxis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorAxis"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "IBufferedCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBufferedCurveModel"
  },
  {
    "label": "SCurveEditorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorView"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCurveAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveAttributes"
  },
  {
    "label": "FCurveDrawParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveDrawParams"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FCurveModelID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveModelID"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FKeyDrawInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawInfo"
  },
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FKeyPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPosition"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FCurveModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" Curves / RichCurve . h \" # include \" Delegates / Delegate . h \" # include \" IBufferedCurveModel . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Math / TransformCalculus2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / UnrealType . h \" class FCurveEditor ; class FCurveEditorAxis ; class FName ; class IBufferedCurveModel ; class SCurveEditorView ; class SWidget ; class UObject ; struct FCurveAttributes ; struct FCurveDrawParams ; struct FCurveEditorScreenSpace ; struct FCurveModelID ; struct FKeyAttributes ; struct FKeyDrawInfo ; struct FKeyHandle ; struct FKeyPosition ; enum class ECurveEditorAxisOrientation : uint8 ; enum class ECurvePointType : uint8 ; class FCurveModel { public :)",
    "insertText": "FCurveModel() : Color(0.2f,0.2f,0.2f) , bKeyDrawEnabled(true) , SupportedViews(ECurveEditorViewID::ANY_BUILT_IN)"
  },
  {
    "label": "FCurveModel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCurveModel()"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetCurve()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurve(const FCurveEditor& CurveEditor, const FCurveEditorScreenSpace& ScreenSpace, TArray<TTuple<double, double>>& InterpolatingPoints)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeys(MinTime, MaxTime, MinValue, MaxValue, OutKeyHandles)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKeys(double MinTime, double MaxTime, double MinValue, double MaxValue, TArray<FKeyHandle>& OutKeyHandles)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeys(TArrayView<const FKeyPosition> InPositions, TArrayView<const FKeyAttributes> InAttributes, TArrayView<TOptional<FKeyHandle>>* OutKeyHandles = nullptr)"
  },
  {
    "label": "RemoveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeys(TArrayView<const FKeyHandle> InKeys)"
  },
  {
    "label": "GetKeyPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyPosition> OutKeyPositions)"
  },
  {
    "label": "SetKeyPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyPosition> InKeyPositions, EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "GetKeyDrawInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyDrawInfo(ECurvePointType PointType, const FKeyHandle InKeyHandle, FKeyDrawInfo& OutDrawInfo)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeRange(double& MinTime, double& MaxTime)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double InMinTime, double InMaxTime, double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(MinValue, MaxValue)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "GetNeighboringKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNeighboringKeys(const FKeyHandle InKeyHandle, TOptional<FKeyHandle>& OutPreviousKeyHandle, TOptional<FKeyHandle>& OutNextKeyHandle)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (TPair<ERichCurveInterpMode,ERichCurveTangentMode>)",
    "insertText": "GetInterpolationMode(const double& InTime, ERichCurveInterpMode DefaultInterpolationMode, ERichCurveTangentMode DefaultTangentMode)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Evaluate(double InTime, double& OutValue)"
  },
  {
    "label": "GetKeyAttributes()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetKeyAttributes(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyAttributes> OutAttributes)"
  },
  {
    "label": "SetKeyAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyAttributes(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyAttributes> InAttributes, EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "GetCurveAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCurveAttributes(FCurveAttributes& OutAttributes)"
  },
  {
    "label": "SetCurveAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCurveAttributes(const FCurveAttributes& InAttributes)"
  },
  {
    "label": "GetInputDisplayOffset()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetInputDisplayOffset()"
  },
  {
    "label": "CreateKeyProxies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateKeyProxies(TArrayView<const FKeyHandle> InKeyHandles, TArrayView<UObject*> OutObjects)"
  },
  {
    "label": "MakeChildCurves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeChildCurves(TArray<TUniquePtr<FCurveModel>>& OutChildCurves)"
  },
  {
    "label": "CreateBufferedCurveCopy()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<IBufferedCurveModel>)",
    "insertText": "CreateBufferedCurveCopy()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetCurveColorObjectAndName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCurveColorObjectAndName(UObject** OutObject, FString& OutName)"
  },
  {
    "label": "GetOwningObject()",
    "kind": "Method",
    "detail": "Function (* OutObject =)",
    "insertText": "GetOwningObject()"
  },
  {
    "label": "GetIntentionName()",
    "kind": "Method",
    "detail": "Function (OutName =)",
    "insertText": "GetIntentionName()"
  },
  {
    "label": "SetKeyAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyAttributes(TArrayView<const FKeyHandle> InKeys, const FKeyAttributes& InAttributes, EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (TOptional<FKeyHandle>)",
    "insertText": "AddKey(const FKeyPosition& NewKeyPosition, const FKeyAttributes& InAttributes)"
  },
  {
    "label": "GetShortDisplayName()",
    "kind": "Method",
    "detail": "Function (} public : FText)",
    "insertText": "GetShortDisplayName()"
  },
  {
    "label": "GetLongDisplayName()",
    "kind": "Method",
    "detail": "Function (ShortDisplayName = InDisplayName ; } FText)",
    "insertText": "GetLongDisplayName()"
  },
  {
    "label": "SetLongDisplayName()",
    "kind": "Method",
    "detail": "Function (} return LongDisplayName ; } void)",
    "insertText": "SetLongDisplayName(const FText& InLongDisplayName)"
  },
  {
    "label": "SetLongIntentionName()",
    "kind": "Method",
    "detail": "Function (IntentionName = InIntentionName ; } void)",
    "insertText": "SetLongIntentionName(const FString& InIntentionName)"
  },
  {
    "label": "GetLongIntentionName()",
    "kind": "Method",
    "detail": "Function (LongIntentionName = InIntentionName ; } FString)",
    "insertText": "GetLongIntentionName()"
  },
  {
    "label": "GetChannelName()",
    "kind": "Method",
    "detail": "Function (ChannelName = InChannelName ; } FName)",
    "insertText": "GetChannelName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Color = InColor ;)",
    "insertText": "if(bInModify)"
  },
  {
    "label": "GetDashLength()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetDashLength()"
  },
  {
    "label": "GetThickness()",
    "kind": "Method",
    "detail": "Function (DashLengthPx = InDashLengthPx ; } float)",
    "insertText": "GetThickness()"
  },
  {
    "label": "IsKeyDrawEnabled()",
    "kind": "Method",
    "detail": "Function (Thickness = InThickness ; } bool)",
    "insertText": "IsKeyDrawEnabled()"
  },
  {
    "label": "SetIsKeyDrawEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsKeyDrawEnabled(TAttribute<bool> bInKeyDrawEnabled)"
  },
  {
    "label": "GetSupportedViews()",
    "kind": "Method",
    "detail": "Function (bKeyDrawEnabled = bInKeyDrawEnabled ; } ECurveEditorViewID)",
    "insertText": "GetSupportedViews()"
  }
]