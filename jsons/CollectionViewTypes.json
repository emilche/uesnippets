[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCollectionItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionItem"
  },
  {
    "label": "FCompareFCollectionItemByName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFCollectionItemByName"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" CollectionManagerTypes . h \" enum class ECollectionItemStatus : uint8 { IsUpToDateAndPopulated,IsUpToDateAndEmpty,IsOutOfDate,IsCheckedOutByAnotherUser,IsConflicted,IsMissingSCCProvider,HasLocalChanges,} ; struct FCollectionItem { struct FCompareFCollectionItemByName { bool)",
    "insertText": "operator()( const TSharedPtr<FCollectionItem>& A, const TSharedPtr<FCollectionItem>& B)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; FName CollectionName ; ECollectionShareType::Type CollectionType ; ECollectionStorageMode::Type StorageMode ; TWeakPtr<FCollectionItem> ParentCollection ; TArray<TWeakPtr<FCollectionItem>> ChildCollections ; bool bRenaming ; bool bNewCollection ; int32 NumObjects ; ECollectionItemStatus CurrentStatus ; FLinearColor CollectionColor ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FCollectionCreatedEvent, FCollectionNameType ) DECLARE_MULTICAST_DELEGATE( FRenamedRequestEvent)"
  },
  {
    "label": "FCollectionItem()",
    "kind": "Method",
    "detail": "Function (FRenamedRequestEvent OnRenamedRequestEvent ;)",
    "insertText": "FCollectionItem(const FName& InCollectionName, const ECollectionShareType::Type InCollectionType) : CollectionName(InCollectionName) , CollectionType(InCollectionType) , StorageMode(ECollectionStorageMode::Static) , ParentCollection() , ChildCollections() , bRenaming(false) , bNewCollection(false) , NumObjects(0) , CurrentStatus(ECollectionItemStatus::IsUpToDateAndEmpty) , CollectionColor(FLinearColor::White)"
  }
]