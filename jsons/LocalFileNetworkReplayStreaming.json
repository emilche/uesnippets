[
  {
    "label": "FNetworkReplayVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkReplayVersion"
  },
  {
    "label": "FLocalFileNetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalFileNetworkReplayStreamer"
  },
  {
    "label": "FLocalFileReplayCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalFileReplayCustomVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLocalFileChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalFileChunkInfo"
  },
  {
    "label": "FLocalFileReplayDataInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalFileReplayDataInfo"
  },
  {
    "label": "FLocalFileEventInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalFileEventInfo"
  },
  {
    "label": "FLocalFileReplayInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalFileReplayInfo"
  },
  {
    "label": "FLocalFileStreamFArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalFileStreamFArchive"
  },
  {
    "label": "FCachedFileRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedFileRequest"
  },
  {
    "label": "FQueuedLocalFileRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedLocalFileRequest"
  },
  {
    "label": "FGenericQueuedLocalFileRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericQueuedLocalFileRequest"
  },
  {
    "label": "TLocalFileAsyncGraphTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLocalFileAsyncGraphTask"
  },
  {
    "label": "TGenericQueuedLocalFileRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericQueuedLocalFileRequest"
  },
  {
    "label": "TLocalFileRequestCommonData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLocalFileRequestCommonData"
  },
  {
    "label": "TGenericCachedLocalFileRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericCachedLocalFileRequest"
  },
  {
    "label": "FLocalFileSerializationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocalFileSerializationInfo"
  },
  {
    "label": "FLocalFileNetworkReplayStreamingFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalFileNetworkReplayStreamingFactory"
  },
  {
    "label": "FLocalFileReplayCustomVersion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" NetworkReplayStreaming . h \" # include \" Stats / Stats . h \" # include \" Tickable . h \" # include \" Serialization / ArrayReader . h \" # include \" Serialization / ArrayWriter . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / MemoryReader . h \" # include \" Async / Async . h \" # include \" Templates / SharedPointer . h \" # include \" HAL / ThreadSafeBool . h \" # include \" LocalFileNetworkReplayStreaming . generated . h \" class FNetworkReplayVersion ; class FLocalFileNetworkReplayStreamer ; struct FLocalFileReplayCustomVersion { enum Type { BeforeCustomVersionWasAdded = 0,FixedSizeFriendlyName = 1,CompressionSupport = 2,RecordingTimestamp = 3,StreamChunkTimes = 4,FriendlyNameCharEncoding = 5,EncryptionSupport = 6,CustomVersions = 7,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; const FGuid Guid ;)",
    "insertText": "FLocalFileReplayCustomVersion()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ELocalFileChunkType : uint32 { Header,ReplayData,Checkpoint,Event,Unknown = 0 xFFFFFFFF } ; enum class EReadReplayInfoFlags : uint32 { None = 0,SkipHeaderChunkTest = 1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EReadReplayInfoFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EUpdateReplayInfoFlags : uint32 { None = 0,FullUpdate = 1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EUpdateReplayInfoFlags)"
  },
  {
    "label": "FLocalFileChunkInfo()",
    "kind": "Method",
    "detail": "Function (struct FLocalFileChunkInfo {)",
    "insertText": "FLocalFileChunkInfo() : ChunkType(ELocalFileChunkType::Unknown), SizeInBytes(0), TypeOffset(0), DataOffset(0)"
  },
  {
    "label": "FLocalFileReplayDataInfo()",
    "kind": "Method",
    "detail": "Function (} ELocalFileChunkType ChunkType ; int32 SizeInBytes ; int64 TypeOffset ; int64 DataOffset ; } ; struct FLocalFileReplayDataInfo {)",
    "insertText": "FLocalFileReplayDataInfo() : ChunkIndex(INDEX_NONE), Time1(0), Time2(0), SizeInBytes(0), MemorySizeInBytes(0), ReplayDataOffset(0), StreamOffset(0)"
  },
  {
    "label": "FLocalFileEventInfo()",
    "kind": "Method",
    "detail": "Function (} int32 ChunkIndex ; uint32 Time1 ; uint32 Time2 ; int32 SizeInBytes ; int32 MemorySizeInBytes ; int64 ReplayDataOffset ; int64 StreamOffset ; } ; struct FLocalFileEventInfo {)",
    "insertText": "FLocalFileEventInfo() : ChunkIndex(INDEX_NONE), Time1(0), Time2(0), SizeInBytes(0), EventDataOffset(0)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} int32 ChunkIndex ; FString Id ; FString Group ; FString Metadata ; uint32 Time1 ; uint32 Time2 ; int32 SizeInBytes ; int64 EventDataOffset ; void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "FLocalFileReplayInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FLocalFileReplayInfo {)",
    "insertText": "FLocalFileReplayInfo() : LengthInMS(0), NetworkVersion(0), Changelist(0), Timestamp(0), TotalDataSizeInBytes(0), bIsLive(false), bIsValid(false), bCompressed(false), bEncrypted(false), HeaderChunkIndex(INDEX_NONE)"
  },
  {
    "label": "FLocalFileStreamFArchive()",
    "kind": "Method",
    "detail": "Function (} ; class FLocalFileStreamFArchive : public FArchive { public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FLocalFileStreamFArchive() : Pos(0), bAtEndOfReplay(false)"
  },
  {
    "label": "FLocalFileStreamFArchive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLocalFileStreamFArchive(const FLocalFileStreamFArchive&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLocalFileStreamFArchive&)",
    "insertText": "operator(const FLocalFileStreamFArchive&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AtEnd()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (bool bAtEndOfReplay ; private : int64 ArchivePos = 0 ; } ; namespace EQueuedLocalFileRequestType { enum Type { StartRecording,WriteHeader,WritingHeader,WritingStream,StopRecording,StartPlayback,ReadingHeader,ReadingStream,EnumeratingStreams,WritingCheckpoint,ReadingCheckpoint,UpdatingEvent,EnumeratingEvents,RequestingEvent,StopStreaming,DeletingFinishedStream,RefreshingLiveStream,KeepReplay,RenameReplay,RenameReplayFriendlyName,} ; const TCHAR*)",
    "insertText": "ToString(EQueuedLocalFileRequestType::Type Type)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown EQueuedLocalFileRequestType type.\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_NETRESULT_ENUM()",
    "kind": "Method",
    "detail": "Function (Success,InvalidReplayInfo,StreamChunkIndexMismatch,DecompressBuffer,CompressionNotSupported,DecryptBuffer,EncryptionNotSupported,EncryptBuffer,CompressBuffer,InvalidName,FileWriter,Unknown,} ;)",
    "insertText": "DECLARE_NETRESULT_ENUM(ELocalFileReplayResult)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ELocalFileReplayResult Enum)"
  },
  {
    "label": "FCachedFileRequest()",
    "kind": "Method",
    "detail": "Function (class FCachedFileRequest { public :)",
    "insertText": "FCachedFileRequest(const TArray<uint8>& InRequestData, const double InLastAccessTime) : RequestData(InRequestData) , LastAccessTime(InLastAccessTime)"
  },
  {
    "label": "FCachedFileRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedFileRequest(TArray<uint8>&& InRequestData, const double InLastAccessTime) : RequestData(MoveTemp(InRequestData)) , LastAccessTime(InLastAccessTime)"
  },
  {
    "label": "FQueuedLocalFileRequest()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8> RequestData ; double LastAccessTime ; } ; class FQueuedLocalFileRequest { public :)",
    "insertText": "FQueuedLocalFileRequest(const TSharedPtr<FLocalFileNetworkReplayStreamer>& InStreamer, EQueuedLocalFileRequestType::Type InType) : Streamer(InStreamer) , RequestType(InType) , bCancelled(false)"
  },
  {
    "label": "FQueuedLocalFileRequest()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FQueuedLocalFileRequest()"
  },
  {
    "label": "GetRequestType()",
    "kind": "Method",
    "detail": "Function (} EQueuedLocalFileRequestType::Type)",
    "insertText": "GetRequestType()"
  },
  {
    "label": "FinishRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRequest()"
  },
  {
    "label": "CancelRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRequest()"
  },
  {
    "label": "FGenericQueuedLocalFileRequest()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<FLocalFileNetworkReplayStreamer> Streamer ; EQueuedLocalFileRequestType::Type RequestType ; FThreadSafeBool bCancelled ; } ; class FGenericQueuedLocalFileRequest : public FQueuedLocalFileRequest,public TSharedFromThis<FGenericQueuedLocalFileRequest,ESPMode::ThreadSafe> { public :)",
    "insertText": "FGenericQueuedLocalFileRequest(const TSharedPtr<FLocalFileNetworkReplayStreamer>& InStreamer, EQueuedLocalFileRequestType::Type InType, TFunction<void()>&& InFunction, TFunction<void()>&& InCompletionCallback) : FQueuedLocalFileRequest(InStreamer, InType) , RequestFunction(MoveTemp(InFunction)) , CompletionCallback(MoveTemp(InCompletionCallback))"
  },
  {
    "label": "IssueRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IssueRequest()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "TLocalFileAsyncGraphTask()",
    "kind": "Method",
    "detail": "Function (} ; template<ResultType> class TLocalFileAsyncGraphTask : public FAsyncGraphTaskBase { public :)",
    "insertText": "TLocalFileAsyncGraphTask(TFunction<ResultType()>&& InFunction, TPromise<ResultType>&& InPromise) : Function(MoveTemp(InFunction)) , Promise(MoveTemp(InPromise))"
  },
  {
    "label": "DoTask()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "DoTask(ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "SetPromise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPromise(Promise, Function)"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (} ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "GetFuture()",
    "kind": "Method",
    "detail": "Function (} TFuture<ResultType>)",
    "insertText": "GetFuture()"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (} private : TFunction<)",
    "insertText": "ResultType()"
  },
  {
    "label": "TGenericQueuedLocalFileRequest()",
    "kind": "Method",
    "detail": "Function (TPromise<ResultType> Promise ; } ; template<StorageType> class TGenericQueuedLocalFileRequest : public FQueuedLocalFileRequest,public TSharedFromThis<TGenericQueuedLocalFileRequest<StorageType>,ESPMode::ThreadSafe> { public :)",
    "insertText": "TGenericQueuedLocalFileRequest(const TSharedPtr<FLocalFileNetworkReplayStreamer>& InStreamer, EQueuedLocalFileRequestType::Type InType, TFunction<void(StorageType&)>&& InFunction, TFunction<void(StorageType&)>&& InCompletionCallback) : FQueuedLocalFileRequest(InStreamer, InType) , Storage() , RequestFunction(MoveTemp(InFunction)) , CompletionCallback(MoveTemp(InCompletionCallback))"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (auto SharedRef = this ->)",
    "insertText": "AsShared()"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (TGraphTask<TLocalFileAsyncGraphTask<void>)",
    "insertText": "CreateTask().ConstructAndDispatchWhenReady( [SharedRef]() { SharedRef->RequestFunction(SharedRef->Storage); }, TPromise<void>([SharedRef]() { if (!SharedRef->bCancelled) { AsyncTask(ENamedThreads::GameThread, [SharedRef]() { SharedRef->FinishRequest(); }); } }))"
  },
  {
    "label": "CompletionCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompletionCallback(Storage)"
  },
  {
    "label": "OnFileRequestComplete()",
    "kind": "Method",
    "detail": "Function (} this -> Streamer ->)",
    "insertText": "OnFileRequestComplete(this->AsShared())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } StorageType Storage ; protected : TFunction<)",
    "insertText": "void(StorageType&)"
  },
  {
    "label": "TGenericCachedLocalFileRequest()",
    "kind": "Method",
    "detail": "Function (ELocalFileReplayResult AsyncError = ELocalFileReplayResult::Success ; } ; template<DelegateResultType> class TGenericCachedLocalFileRequest : public TGenericQueuedLocalFileRequest<TLocalFileRequestCommonData<DelegateResultType>> { public :)",
    "insertText": "TGenericCachedLocalFileRequest(int32 InCacheKey, const TSharedPtr<FLocalFileNetworkReplayStreamer>& InStreamer, EQueuedLocalFileRequestType::Type InType, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InFunction, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InCompletionCallback) : TGenericQueuedLocalFileRequest<TLocalFileRequestCommonData<DelegateResultType>>(InStreamer, InType, MoveTemp(InFunction), MoveTemp(InCompletionCallback)) , CacheKey(InCacheKey)"
  },
  {
    "label": "GetCachedRequest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCachedRequest()"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCachedFileRequest> CachedRequest = this -> Streamer -> RequestCache .)",
    "insertText": "FindRef(CacheKey)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (CachedRequest -> LastAccessTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (this -> Storage . DataBuffer = CachedRequest -> RequestData ; return true ; } return false ; } protected : int32 CacheKey ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnLocalFileReplayFinishedWriting, const FString& , const FString&)"
  },
  {
    "label": "FLocalFileNetworkReplayStreamer()",
    "kind": "Method",
    "detail": "Function (class FLocalFileNetworkReplayStreamer : public INetworkReplayStreamer,public TSharedFromThis<FLocalFileNetworkReplayStreamer> { using FLocalFileReplayResult = UE::Net::TNetResult<ELocalFileReplayResult> ; public :)",
    "insertText": "FLocalFileNetworkReplayStreamer()"
  },
  {
    "label": "FLocalFileNetworkReplayStreamer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLocalFileNetworkReplayStreamer(const FString& InDemoSavePath)"
  },
  {
    "label": "StartStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartStreaming(const FStartStreamingParameters& Params, const FStartStreamingCallback& Delegate)"
  },
  {
    "label": "StopStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStreaming()"
  },
  {
    "label": "GetHeaderArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetHeaderArchive()"
  },
  {
    "label": "GetStreamingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetStreamingArchive()"
  },
  {
    "label": "GetCheckpointArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetCheckpointArchive()"
  },
  {
    "label": "FlushCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpoint(const uint32 TimeInMS)"
  },
  {
    "label": "GotoCheckpointIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndex(const int32 CheckpointIndex, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "GotoTimeInMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoTimeInMS(const uint32 TimeInMS, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "UpdateTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTotalDemoTime(uint32 TimeInMS)"
  },
  {
    "label": "UpdatePlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackTime(uint32 TimeInMS)"
  },
  {
    "label": "GetTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTotalDemoTime()"
  },
  {
    "label": "SetHighPriorityTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPriorityTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsDataAvailableForTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailableForTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsLoadingCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingCheckpoint()"
  },
  {
    "label": "IsLive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLive()"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const int32 UserIndex, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "EnumerateStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateStreams(const FNetworkReplayVersion& InReplayVersion, const int32 UserIndex, const FString& MetaString, const TArray< FString >& ExtraParms, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "EnumerateRecentStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateRecentStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& Name, const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventId, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "SearchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchEvents(const FString& EventGroup, const FSearchEventsCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const int32 UserIndex, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "GetReplayID()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplayID()"
  },
  {
    "label": "RefreshHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshHeader()"
  },
  {
    "label": "DownloadHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DownloadHeader(const FDownloadHeaderCallback& Delegate)"
  },
  {
    "label": "IsCheckpointTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckpointTypeSupported(EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "SupportsCompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsCompression()"
  },
  {
    "label": "EncryptBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EncryptBuffer(TArrayView<const uint8> Plaintext, TArray<uint8>& Ciphertext, TArrayView<const uint8> EncryptionKey)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "GetMaxFriendlyNameSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxFriendlyNameSize()"
  },
  {
    "label": "SetDemoPath()",
    "kind": "Method",
    "detail": "Function (EStreamingOperationResult)",
    "insertText": "SetDemoPath(const FString& DemoPath)"
  },
  {
    "label": "GetDemoPath()",
    "kind": "Method",
    "detail": "Function (DemoSavePath = DemoPath ; return EStreamingOperationResult::Success ; } else { return EStreamingOperationResult::Unspecified ; } } EStreamingOperationResult)",
    "insertText": "GetDemoPath(FString& DemoPath)"
  },
  {
    "label": "OnFileRequestComplete()",
    "kind": "Method",
    "detail": "Function (DemoPath = DemoSavePath ; return EStreamingOperationResult::Success ; } void)",
    "insertText": "OnFileRequestComplete(const TSharedPtr<FQueuedLocalFileRequest, ESPMode::ThreadSafe>& Request)"
  },
  {
    "label": "IsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreaming()"
  },
  {
    "label": "HasPendingFileRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingFileRequests()"
  },
  {
    "label": "AddSimpleRequestToQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleRequestToQueue(EQueuedLocalFileRequestType::Type RequestType, TFunction<void()>&& InFunction, TFunction<void()>&& InCompletionCallback)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (QueuedRequests .)",
    "insertText": "Add(MakeShared<FGenericQueuedLocalFileRequest, ESPMode::ThreadSafe>(AsShared(), RequestType, MoveTemp(InFunction), MoveTemp(InCompletionCallback)))"
  },
  {
    "label": "AddGenericRequestToQueue()",
    "kind": "Method",
    "detail": "Function (} template<StorageType> void)",
    "insertText": "AddGenericRequestToQueue(EQueuedLocalFileRequestType::Type RequestType, TFunction<void(StorageType&)>&& InFunction, TFunction<void(StorageType&)>&& InCompletionCallback)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (QueuedRequests .)",
    "insertText": "Add(MakeShared<TGenericQueuedLocalFileRequest<StorageType>, ESPMode::ThreadSafe>(AsShared(), RequestType, MoveTemp(InFunction), MoveTemp(InCompletionCallback)))"
  },
  {
    "label": "AddDelegateFileRequestToQueue()",
    "kind": "Method",
    "detail": "Function (} template<DelegateResultType> void)",
    "insertText": "AddDelegateFileRequestToQueue(EQueuedLocalFileRequestType::Type RequestType, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InFunction, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InCompletionCallback)"
  },
  {
    "label": "DelegateResultType()",
    "kind": "Method",
    "detail": "Function (AddGenericRequestToQueue<TLocalFileRequestCommonData<)",
    "insertText": "DelegateResultType(RequestType, MoveTemp(InFunction), MoveTemp(InCompletionCallback))"
  },
  {
    "label": "AddDelegateFileRequestToQueue()",
    "kind": "Method",
    "detail": "Function (} template<DelegateType,DelegateResultType> void)",
    "insertText": "AddDelegateFileRequestToQueue(EQueuedLocalFileRequestType::Type RequestType, const DelegateType& Delegate, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InFunction)"
  },
  {
    "label": "DelegateResultType()",
    "kind": "Method",
    "detail": "Function (AddGenericRequestToQueue<TLocalFileRequestCommonData<)",
    "insertText": "DelegateResultType(RequestType, MoveTemp(InFunction), [Delegate](TLocalFileRequestCommonData<DelegateResultType>& Storage) { Delegate.ExecuteIfBound(Storage.DelegateResult); })"
  },
  {
    "label": "AddCachedFileRequestToQueue()",
    "kind": "Method",
    "detail": "Function (} template<DelegateResultType> void)",
    "insertText": "AddCachedFileRequestToQueue(EQueuedLocalFileRequestType::Type RequestType, int32 InCacheKey, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InFunction, TFunction<void(TLocalFileRequestCommonData<DelegateResultType>&)>&& InCompletionCallback)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (QueuedRequests .)",
    "insertText": "Add(MakeShared<TGenericCachedLocalFileRequest<DelegateResultType>, ESPMode::ThreadSafe>(InCacheKey, AsShared(), RequestType, MoveTemp(InFunction), MoveTemp(InCompletionCallback)))"
  },
  {
    "label": "DeleteFinishedStream_Internal()",
    "kind": "Method",
    "detail": "Function (} TMap<int32,TSharedPtr<FCachedFileRequest>> RequestCache ; TMap<int32,TSharedPtr<FCachedFileRequest>> DeltaCheckpointCache ; FOnLocalFileReplayFinishedWriting OnReplayFinishedWriting ; protected : void)",
    "insertText": "DeleteFinishedStream_Internal(const FString& StreamName, const int32 UserIndex, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents_Internal(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData_Internal(const FString& ReplayName, const FString& EventId, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "KeepReplay_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay_Internal(const FString& ReplayName, const bool bKeep, const int32 UserIndex, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName_Internal(const FString& ReplayName, const FString& NewFriendlyName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay_Internal(const FString& ReplayName, const FString& NewName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "ProcessNextFileRequest()",
    "kind": "Method",
    "detail": "Function (FLocalFileReplayInfo CurrentReplayInfo ; TInterval<uint32> StreamTimeRange ; int64 StreamDataOffset ; int32 StreamChunkIndex ; double LastChunkTime ; double LastRefreshTime ; bool bStopStreamingCalled ; uint32 HighPriorityEndTime ; int64 LastGotoTimeInMS ; TArray<TSharedPtr<FQueuedLocalFileRequest,ESPMode::ThreadSafe>> QueuedRequests ; TSharedPtr<FQueuedLocalFileRequest,ESPMode::ThreadSafe> ActiveRequest ; bool)",
    "insertText": "ProcessNextFileRequest()"
  },
  {
    "label": "IsFileRequestInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileRequestInProgress()"
  },
  {
    "label": "IsFileRequestPendingOrInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFileRequestPendingOrInProgress(const EQueuedLocalFileRequestType::Type RequestType)"
  },
  {
    "label": "CancelStreamingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelStreamingRequests()"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastError(ELocalFileReplayResult::Unknown)"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "SetLastError(FLocalFileReplayResult&& Result)"
  },
  {
    "label": "ConditionallyFlushStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyFlushStream()"
  },
  {
    "label": "ConditionallyLoadNextChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyLoadNextChunk()"
  },
  {
    "label": "ConditionallyRefreshReplayInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyRefreshReplayInfo()"
  },
  {
    "label": "FlushCheckpointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpointInternal(const uint32 TimeInMS)"
  },
  {
    "label": "FLocalFileSerializationInfo()",
    "kind": "Method",
    "detail": "Function (struct FLocalFileSerializationInfo {)",
    "insertText": "FLocalFileSerializationInfo()"
  },
  {
    "label": "GetLocalFileReplayVersion()",
    "kind": "Method",
    "detail": "Function (FLocalFileReplayCustomVersion::Type)",
    "insertText": "GetLocalFileReplayVersion()"
  },
  {
    "label": "ReadReplayInfo()",
    "kind": "Method",
    "detail": "Function (FString FileFriendlyName ; FCustomVersionContainer FileCustomVersions ; } ; bool)",
    "insertText": "ReadReplayInfo(const FString& StreamName, FLocalFileReplayInfo& OutReplayInfo)"
  },
  {
    "label": "ReadReplayInfo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReadReplayInfo(const FString& StreamName, FLocalFileReplayInfo& OutReplayInfo, EReadReplayInfoFlags Flags)"
  },
  {
    "label": "ReadReplayInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadReplayInfo(FArchive& Archive, FLocalFileReplayInfo& OutReplayInfo, EReadReplayInfoFlags Flags)"
  },
  {
    "label": "ReadReplayInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadReplayInfo(FArchive& Archive, FLocalFileReplayInfo& OutReplayInfo, struct FLocalFileSerializationInfo& SerializationInfo, EReadReplayInfoFlags Flags)"
  },
  {
    "label": "WriteReplayInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteReplayInfo(const FString& StreamName, const FLocalFileReplayInfo& ReplayInfo)"
  },
  {
    "label": "WriteReplayInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteReplayInfo(FArchive& Archive, const FLocalFileReplayInfo& ReplayInfo)"
  },
  {
    "label": "WriteReplayInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteReplayInfo(FArchive& Archive, const FLocalFileReplayInfo& InReplayInfo, struct FLocalFileSerializationInfo& SerializationInfo)"
  },
  {
    "label": "FixupFriendlyNameLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupFriendlyNameLength(const FString& UnfixedName, FString& FixedName)"
  },
  {
    "label": "IsNamedStreamLive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNamedStreamLive(const FString& StreamName)"
  },
  {
    "label": "FlushStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushStream(const uint32 TimeInMS)"
  },
  {
    "label": "WriteHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteHeader()"
  },
  {
    "label": "CreateLocalFileReader()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArchive>)",
    "insertText": "CreateLocalFileReader(const FString& InFilename)"
  },
  {
    "label": "CreateLocalFileWriter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArchive>)",
    "insertText": "CreateLocalFileWriter(const FString& InFilename)"
  },
  {
    "label": "CreateLocalFileWriterForOverwrite()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArchive>)",
    "insertText": "CreateLocalFileWriterForOverwrite(const FString& InFilename)"
  },
  {
    "label": "GetDemoPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDemoPath()"
  },
  {
    "label": "GetAdditionalRelativeDemoPaths()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FString>)",
    "insertText": "GetAdditionalRelativeDemoPaths()"
  },
  {
    "label": "GetAutomaticDemoName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAutomaticDemoName()"
  },
  {
    "label": "AddRequestToCache()",
    "kind": "Method",
    "detail": "Function (FLocalFileStreamFArchive HeaderAr ; FLocalFileStreamFArchive StreamAr ; FLocalFileStreamFArchive CheckpointAr ; EReplayStreamerState StreamerState ; FString CurrentStreamName ; FString DemoSavePath ; void)",
    "insertText": "AddRequestToCache(int32 ChunkIndex, const TArray<uint8>& RequestData)"
  },
  {
    "label": "AddRequestToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestToCache(int32 ChunkIndex, TArray<uint8>&& RequestData)"
  },
  {
    "label": "CleanupRequestCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupRequestCache()"
  },
  {
    "label": "GetCachedFileContents()",
    "kind": "Method",
    "detail": "Function (bool bCacheFileReadsInMemory ; TMap<FString,TArray<uint8>> FileContentsCache ; const TArray<uint8>&)",
    "insertText": "GetCachedFileContents(const FString& Filename)"
  },
  {
    "label": "UpdateCurrentReplayInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentReplayInfo(FLocalFileReplayInfo& ReplayInfo, EUpdateReplayInfoFlags UpdateFlags = EUpdateReplayInfoFlags::None)"
  },
  {
    "label": "GetDecompressedSizeBackCompat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDecompressedSizeBackCompat(FArchive& InCompressed)"
  },
  {
    "label": "GetDefaultDemoSavePath()",
    "kind": "Method",
    "detail": "Function (public : const FString&)",
    "insertText": "GetDefaultDemoSavePath()"
  },
  {
    "label": "GetDemoFullFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDemoFullFilename(const FString& DemoPath, const FString& FileName)"
  },
  {
    "label": "CleanUpOldReplays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanUpOldReplays(const FString& DemoPath = GetDefaultDemoSavePath(), TArrayView<const FString> AdditionalRelativeDemoPaths = {})"
  },
  {
    "label": "GetDemoFreeStorageSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDemoFreeStorageSpace(uint64& DiskFreeSpace, const FString& DemoPath)"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (private : FLocalFileReplayInfo TaskReplayInfo ; } ; class FLocalFileNetworkReplayStreamingFactory : public INetworkReplayStreamingFactory,public FTickableGameObject { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "CreateReplayStreamer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<INetworkReplayStreamer>)",
    "insertText": "CreateReplayStreamer()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  }
]