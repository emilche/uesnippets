[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AudioFrameView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioFrameView"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "AudioFrameView()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_INCLUDE_AUDIO_FRAME_VIEW_H_ # define MODULES_AUDIO_PROCESSING_INCLUDE_AUDIO_FRAME_VIEW_H_ # include \" api / array_view . h \" namespace webrtc { template<class T> class AudioFrameView { public :)",
    "insertText": "AudioFrameView(T* const* audio_samples, int num_channels, int channel_size) : audio_samples_(audio_samples), num_channels_(num_channels), channel_size_(channel_size)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(num_channels_, 0)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(channel_size_, 0)"
  },
  {
    "label": "AudioFrameView()",
    "kind": "Method",
    "detail": "Function (} template<class U>)",
    "insertText": "AudioFrameView(AudioFrameView<U> other) : audio_samples_(other.data()), num_channels_(other.num_channels()), channel_size_(other.samples_per_channel())"
  },
  {
    "label": "AudioFrameView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioFrameView()"
  },
  {
    "label": "num_channels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_channels()"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(0, idx)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(idx, num_channels_)"
  },
  {
    "label": "channel()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const T>)",
    "insertText": "channel(int idx)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} T* const*)",
    "insertText": "data()"
  }
]