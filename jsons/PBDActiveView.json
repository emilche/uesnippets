[
  {
    "label": "TPBDActiveView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDActiveView"
  },
  {
    "label": "TItemsType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TItemsType"
  },
  {
    "label": "TPBDActiveView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Algo / BinarySearch . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Vector . h \" namespace Chaos { template<TItemsType> class TPBDActiveView { public :)",
    "insertText": "TPBDActiveView(TItemsType& InItems) : Items(InItems)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (} TItemsType&)",
    "insertText": "GetItems()"
  },
  {
    "label": "GetRangeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRangeSize(int32 Offset)"
  },
  {
    "label": "ActivateRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateRange(int32 Offset, bool bActivate)"
  },
  {
    "label": "SequentialFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequentialFor(TFunctionRef<void(TItemsType&, int32)> Function)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(TFunctionRef<void(TItemsType&, int32)> Function, int32 MinParallelSize = TNumericLimits<int32>::Max())"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(TFunctionRef<void(TItemsType&, int32)> Function, bool bForceSingleThreadedRange, int32 MinParallelSize = TNumericLimits<int32>::Max())"
  },
  {
    "label": "RangeFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeFor(TFunctionRef<void(TItemsType&, int32, int32)> Function)"
  },
  {
    "label": "RangeFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeFor(TFunctionRef<void(TItemsType&, int32, int32)> Function, bool bForceSingleThreadedRange)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 Offset = 0)"
  },
  {
    "label": "HasActiveRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveRange()"
  },
  {
    "label": "GetActiveSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActiveSize()"
  },
  {
    "label": "GetActiveRanges()",
    "kind": "Method",
    "detail": "Function (TArray<TVector<int32,2>,TInlineAllocator<8>>)",
    "insertText": "GetActiveRanges()"
  },
  {
    "label": "GetRanges()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<int32>)",
    "insertText": "GetRanges()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Ranges .)",
    "insertText": "Num() ? FMath::Abs(Ranges.Last())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (const int32 Size = Offset + NumItems ; Ranges .)",
    "insertText": "Emplace(bActivate ? Size : -Size)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "UpperBound(Ranges, Offset, [](const int32 A, const int32 B) { return FMath::Abs(A) < FMath::Abs(B); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Offset = 0 ;)",
    "insertText": "for(int32 Range : Ranges)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Items, Index)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} Offset = Range ; } else { Offset = - Range ; } } } template<class TItemsType> void TPBDActiveView<TItemsType)",
    "insertText": "ParallelFor(TFunctionRef<void(TItemsType&, int32)> Function, int32 MinParallelBatchSize)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (const int32 RangeSize = Range - Offset ;)",
    "insertText": "PhysicsParallelFor(RangeSize, [this, Offset, &Function](int32 Index) { Function(Items, Offset + Index); }, RangeSize < MinParallelBatchSize)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (Offset = Range ; } else { Offset = - Range ; } } } template<class TItemsType> void TPBDActiveView<TItemsType)",
    "insertText": "ParallelFor(TFunctionRef<void(TItemsType&, int32)> Function, bool bForceSingleThreadedRange, int32 MinParallelBatchSize)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ActiveRanges.Num(), [this, &Function, &ActiveRanges, &MinParallelBatchSize](int32 RangeIndex) { const int32 Offset = ActiveRanges[RangeIndex][0]; const int32 RangeSize = ActiveRanges[RangeIndex][1] - Offset; PhysicsParallelFor(RangeSize, [this, Offset, &Function](int32 Index) { Function(Items, Offset + Index); }, RangeSize < MinParallelBatchSize); }, bForceSingleThreadedRange)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(Items, Offset, Range)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ActiveRanges.Num(), [this, &Function, &ActiveRanges](int32 RangeIndex) { const TVector<int32, 2>& ActiveRange = ActiveRanges[RangeIndex]; const int32 Offset = ActiveRange[0]; const int32 Range = ActiveRange[1]; Function(Items, Offset, Range); }, bForceSingleThreadedRange)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} template<class TItemsType> void TPBDActiveView<TItemsType)",
    "insertText": "Reset(int32 Offset)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Ranges .)",
    "insertText": "SetNum(Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActiveRanges .)",
    "insertText": "Add(TVector<int32, 2>(Offset, Range))"
  }
]