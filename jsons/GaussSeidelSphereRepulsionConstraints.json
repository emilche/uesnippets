[
  {
    "label": "FGaussSeidelSphereRepulsionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGaussSeidelSphereRepulsionConstraints"
  },
  {
    "label": "FSphereSpatialEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSphereSpatialEntry"
  },
  {
    "label": "FGaussSeidelSphereRepulsionConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / BoundingVolumeHierarchy . h \" # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / NewtonCorotatedCache . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Utilities . h \" # include \" Chaos / DebugDrawQueue . h \" # include \" Chaos / XPBDWeakConstraints . h \" # include \" Chaos / Triangle . h \" # include \" Chaos / TriangleCollisionPoint . h \" # include \" Chaos / TriangleMesh . h \" # include<unordered_map> # include \" Chaos / HierarchicalSpatialHash . h \" # include \" Chaos / PBDSelfCollisionSphereConstraints . h \" namespace Chaos::Softs { using Chaos::TVec3 ; template<T,ParticleType> class FGaussSeidelSphereRepulsionConstraints { public :)",
    "insertText": "FGaussSeidelSphereRepulsionConstraints(FSolverReal InRadius, FSolverReal InStiffness, const ParticleType& InParticles, const FDeformableXPBDWeakConstraintParams& InParams): Radius(InRadius), Stiffness(InStiffness), DebugDrawParams(InParams)"
  },
  {
    "label": "GetPAndInvM()",
    "kind": "Method",
    "detail": "Function (const TArrayCollectionArray<FPAndInvM>& PAndInvM = InParticles .)",
    "insertText": "GetPAndInvM()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ReferencePositions .)",
    "insertText": "SetNum(PAndInvM.Num())"
  },
  {
    "label": "FGaussSeidelSphereRepulsionConstraints()",
    "kind": "Method",
    "detail": "Function (ReferencePositions [ i ] = PAndInvM [ i ] . P ; } } ~)",
    "insertText": "FGaussSeidelSphereRepulsionConstraints()"
  },
  {
    "label": "AddSphereRepulsionResidual()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSphereRepulsionResidual(const ParticleType& InParticles, const int32 p, const T Dt, TVec3<T>& res)"
  },
  {
    "label": "AddSphereRepulsionHessian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSphereRepulsionHessian(const int32 p, const T Dt, Chaos::PMatrix<T, 3, 3>& ParticleHessian)"
  },
  {
    "label": "AddSphereRepulsionResidualAndHessian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSphereRepulsionResidualAndHessian(const ParticleType& InParticles, const int32 ConstraintIndex, const int32 LocalIndex, const T Dt, TVec3<T>& ParticleResidual, Chaos::PMatrix<T, 3, 3>& ParticleHessian)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Chaos::TVec3<T> x0 = InParticles .)",
    "insertText": "P(Constraints[ConstraintIndex][0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Chaos::TVec3<T> x1 = InParticles .)",
    "insertText": "P(Constraints[ConstraintIndex][1])"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (Chaos::TVec3<T>)",
    "insertText": "normal(x1 - x0).GetSafeNormal()"
  },
  {
    "label": "normal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normal(LocalIndex ? normal : -normal)"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "dist(x1 - x0).Size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FSolverReal penetration = 2* Radius - dist ;)",
    "insertText": "if(penetration > T(0))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T dist_inv =)",
    "insertText": "T(1) / (dist+T(1e-12))"
  },
  {
    "label": "OuterProduct()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> outer = Chaos::PMatrix<T,3,3)",
    "insertText": "OuterProduct(normal, normal)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3>)",
    "insertText": "A(Chaos::PMatrix<T, 3, 3>::Identity - outer)"
  },
  {
    "label": "ConstraintIndex()",
    "kind": "Method",
    "detail": "Function (ParticleHessian + = Dt* Dt* ConstraintStiffness [)",
    "insertText": "ConstraintIndex(outer - penetration * A)"
  },
  {
    "label": "VisualizeAllBindings()",
    "kind": "Method",
    "detail": "Function (ParticleResidual + = - Dt* Dt* penetration* ConstraintStiffness [ ConstraintIndex ]* normal ; } } void)",
    "insertText": "VisualizeAllBindings(const FSolverParticles& InParticles, const T Dt)"
  },
  {
    "label": "DoubleVert()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR auto)",
    "insertText": "DoubleVert(Chaos::TVec3<T> V)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "for(int32 i = 0; i < Constraints.Num(); i++)"
  },
  {
    "label": "DoubleVert()",
    "kind": "Method",
    "detail": "Function (FVector3d SourcePos =)",
    "insertText": "DoubleVert(InParticles.P(Constraints[i][0]))"
  },
  {
    "label": "DoubleVert()",
    "kind": "Method",
    "detail": "Function (FVector3d TargetPos =)",
    "insertText": "DoubleVert(InParticles.P(Constraints[i][1]))"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (float ParticleThickness = DebugDrawParams . DebugParticleWidth ; float LineThickness = DebugDrawParams . DebugLineWidth ; Chaos::)",
    "insertText": "GetInstance().DrawDebugPoint(SourcePos, FColor::Red, false, Dt, 0, ParticleThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugPoint(TargetPos, FColor::Red, false, Dt, 0, ParticleThickness)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugLine(SourcePos, TargetPos, FColor::Green, false, Dt, 0, LineThickness)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "Init(const FSolverParticles& InParticles, const T Dt)"
  },
  {
    "label": "VisualizeAllBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisualizeAllBindings(InParticles, Dt)"
  },
  {
    "label": "UpdateSphereRepulsionConstraints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateSphereRepulsionConstraints(const FSolverParticles& Particles, const TArray<int32>& SurfaceVertices, const TArray<int32>& ComponentIndex)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_GaussSeidelSphereRepulsionConstraints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Constraints .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Reset(SurfaceVertices.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Add({ &Points, SurfaceVertices[Index]})"
  },
  {
    "label": "SpatialHash()",
    "kind": "Method",
    "detail": "Function (} TSpatialHashGridPoints<int32,FSolverReal>)",
    "insertText": "SpatialHash(Diameter)"
  },
  {
    "label": "InitializePoints()",
    "kind": "Method",
    "detail": "Function (SpatialHash .)",
    "insertText": "InitializePoints(Entries)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (const FSolverReal DiamSq =)",
    "insertText": "Square(Diameter)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 CellRadius = 1 ; int32 MaxNumExpectedConnectionsPerParticle = 3 ; const int32 MaxNumExpectedConnections = MaxNumExpectedConnectionsPerParticle* Entries .)",
    "insertText": "Num()"
  },
  {
    "label": "FindAllSelfProximities()",
    "kind": "Method",
    "detail": "Function (Constraints = SpatialHash .)",
    "insertText": "FindAllSelfProximities(CellRadius, MaxNumExpectedConnections, [this, &Particles, DiamSq, &ComponentIndex](const int32 i1, const int32 i2) { if (ComponentIndex[i1] == ComponentIndex[i2]) { return false; } const FSolverReal CombinedMass = Particles.InvM(i1) + Particles.InvM(i2); if (CombinedMass < (FSolverReal)1e-7) { return false; } if (FSolverVec3::DistSquared(this->ReferencePositions[i1], this->ReferencePositions[i2]) < DiamSq) { return false; } return true; })"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T TotalMass =)",
    "insertText": "T(0)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (TotalMass + = Particles .)",
    "insertText": "M(CollisionPair[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particles.InvM(CollisionPair[1]) > (FSolverReal)1e-7)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (TotalMass + = Particles .)",
    "insertText": "M(CollisionPair[1])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ConstraintStiffness .)",
    "insertText": "Add(Stiffness*TotalMass/T(2))"
  },
  {
    "label": "ReturnSphereRepulsionConstraints()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReturnSphereRepulsionConstraints(TArray<TArray<int32>>& ExtraConstraints, TArray<TArray<int32>>& ExtraIncidentElements, TArray<TArray<int32>>& ExtraIncidentElementsLocal)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ExtraConstraints .)",
    "insertText": "Init(TArray<int32>(), Constraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ExtraConstraints [ i ] .)",
    "insertText": "SetNum(2)"
  },
  {
    "label": "ComputeIncidentElements()",
    "kind": "Method",
    "detail": "Function (ExtraConstraints [ i ] [ 0 ] = Constraints [ i ] [ 0 ] ; ExtraConstraints [ i ] [ 1 ] = Constraints [ i ] [ 1 ] ; } ExtraIncidentElements = Chaos::)",
    "insertText": "ComputeIncidentElements(ExtraConstraints, &ExtraIncidentElementsLocal)"
  },
  {
    "label": "FSolverReal()",
    "kind": "Method",
    "detail": "Function (} protected : TArray<TVec2<int32>> Constraints ; FSolverReal Radius =)",
    "insertText": "FSolverReal(0)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (TArray<T> ConstraintStiffness ; private : struct FSphereSpatialEntry { const TConstArrayView<FSolverVec3>* Points ; int32 Index ; FSolverVec3)",
    "insertText": "X()"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (} template<TPayloadType> int32)",
    "insertText": "GetPayload(int32)"
  }
]