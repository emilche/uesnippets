[
  {
    "label": "UWorldSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldSubsystem"
  },
  {
    "label": "UTickableWorldSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableWorldSubsystem"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Subsystem . h \" # include \" Engine / EngineTypes . h \" # include \" Tickable . h \" # include \" WorldSubsystem . generated . h \")",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UWorldSubsystem()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetWorldRef()",
    "kind": "Method",
    "detail": "Function (UWorld&)",
    "insertText": "GetWorldRef()"
  },
  {
    "label": "ShouldCreateSubsystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateSubsystem(UObject* Outer)"
  },
  {
    "label": "PostInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitialize()"
  },
  {
    "label": "OnWorldBeginPlay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnWorldBeginPlay(UWorld& InWorld)"
  },
  {
    "label": "OnWorldComponentsUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnWorldComponentsUpdated(UWorld& World)"
  },
  {
    "label": "DoesSupportWorldType()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "DoesSupportWorldType(const EWorldType::Type WorldType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UTickableWorldSubsystem()"
  },
  {
    "label": "GetTickableGameObjectWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetTickableGameObjectWorld()"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "IsAllowedToTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedToTick()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId() const override PURE_VIRTUAL(UTickableWorldSubsystem::GetStatId, return TStatId();)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  }
]