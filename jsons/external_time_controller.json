[
  {
    "label": "ExternalTimeController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExternalTimeController"
  },
  {
    "label": "TaskQueueWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueueWrapper"
  },
  {
    "label": "ExternalTimeController()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TIME_CONTROLLER_EXTERNAL_TIME_CONTROLLER_H_ # define TEST_TIME_CONTROLLER_EXTERNAL_TIME_CONTROLLER_H_ # include<functional> # include<memory> # include \" absl / strings / string_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / time_controller . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" system_wrappers / include / clock . h \" # include \" test / time_controller / simulated_time_controller . h \" namespace webrtc { class ExternalTimeController : public TimeController,public TaskQueueFactory { public :)",
    "insertText": "ExternalTimeController(ControlledAlarmClock* alarm)"
  },
  {
    "label": "GetClock()",
    "kind": "Method",
    "detail": "Function (Clock*)",
    "insertText": "GetClock()"
  },
  {
    "label": "GetTaskQueueFactory()",
    "kind": "Method",
    "detail": "Function (TaskQueueFactory*)",
    "insertText": "GetTaskQueueFactory()"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTime(TimeDelta duration)"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::Thread>)",
    "insertText": "CreateThread(const std::string& name, std::unique_ptr<rtc::SocketServer> socket_server)"
  },
  {
    "label": "GetMainThread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "GetMainThread()"
  },
  {
    "label": "CreateTaskQueue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TaskQueueBase,TaskQueueDeleter>)",
    "insertText": "CreateTaskQueue(absl::string_view name, TaskQueueFactory::Priority priority)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (private : class TaskQueueWrapper ; void)",
    "insertText": "Run()"
  },
  {
    "label": "UpdateTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTime()"
  },
  {
    "label": "ScheduleNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNext()"
  }
]