[
  {
    "label": "FChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannel"
  },
  {
    "label": "FCoreRenderDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoreRenderDelegates"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "TRenderCommandTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRenderCommandTag"
  },
  {
    "label": "FStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatData"
  },
  {
    "label": "FThreadSafeStaticStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeStaticStat"
  },
  {
    "label": "PREPROCESSOR_JOIN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PREPROCESSOR_JOIN"
  },
  {
    "label": "FRenderCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderCommand"
  },
  {
    "label": "TEnqueueUniqueRenderCommandType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEnqueueUniqueRenderCommandType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRenderCommandPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderCommandPipe"
  },
  {
    "label": "RENDERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RENDERCORE_API"
  },
  {
    "label": "FRenderThreadCommandPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderThreadCommandPipe"
  },
  {
    "label": "FCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommand"
  },
  {
    "label": "FRenderCommandPipeRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderCommandPipeRegistry"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FRenderThreadScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderThreadScope"
  },
  {
    "label": "FRenderThreadStructBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderThreadStructBase"
  },
  {
    "label": "TRenderThreadStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRenderThreadStruct"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / List . h \" # include \" CoreGlobals . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / TVariant . h \" # include \" MultiGPU . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" Serialization / MemoryLayout . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Atomic . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Trace / Trace . h \" # include \" Async / Mutex . h \" # include \" Tasks / Pipe . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" RenderDeferredCleanup . h \" # endif namespace UE { namespace Trace { class FChannel ; } } bool GIsThreadedRendering ; bool GUseThreadedRendering ; TOptional<bool> GPendingUseThreadedRendering ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) static FORCEINLINE void CheckNotBlockedOnRenderThread()"
  },
  {
    "label": "CheckNotBlockedOnRenderThread()",
    "kind": "Method",
    "detail": "Function (} # else TAtomic<bool> GMainThreadBlockedOnRenderThread ; void)",
    "insertText": "CheckNotBlockedOnRenderThread()"
  },
  {
    "label": "InitRenderingThread()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "InitRenderingThread()"
  },
  {
    "label": "ShutdownRenderingThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownRenderingThread()"
  },
  {
    "label": "LatchRenderThreadConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LatchRenderThreadConfiguration()"
  },
  {
    "label": "CheckRenderingThreadHealth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckRenderingThreadHealth()"
  },
  {
    "label": "IsRenderingThreadHealthy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderingThreadHealthy()"
  },
  {
    "label": "AdvanceRenderingThreadStatsGT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceRenderingThreadStatsGT(bool bDiscardCallstack, int64 StatsFrame, int32 DisableChangeTagStartFrame)"
  },
  {
    "label": "FlushRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRenderingCommands()"
  },
  {
    "label": "FlushPendingDeleteRHIResources_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingDeleteRHIResources_GameThread()"
  },
  {
    "label": "FlushPendingDeleteRHIResources_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPendingDeleteRHIResources_RenderThread()"
  },
  {
    "label": "TickRenderingTickables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRenderingTickables()"
  },
  {
    "label": "StartRenderCommandFenceBundler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRenderCommandFenceBundler()"
  },
  {
    "label": "StopRenderCommandFenceBundler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRenderCommandFenceBundler()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (class FCoreRenderDelegates { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnFlushRenderingCommandsStart)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FOnFlushRenderingCommandsStart OnFlushRenderingCommandsStart ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnFlushRenderingCommandsEnd)"
  },
  {
    "label": "UE_TRACE_CHANNEL_EXTERN()",
    "kind": "Method",
    "detail": "Function (FOnFlushRenderingCommandsEnd OnFlushRenderingCommandsEnd ; } ;)",
    "insertText": "UE_TRACE_CHANNEL_EXTERN(RenderCommandsChannel, RENDERCORE_API)"
  },
  {
    "label": "GetImmediateCommandList_ForRenderCommand()",
    "kind": "Method",
    "detail": "Function (class FRHICommandListImmediate&)",
    "insertText": "GetImmediateCommandList_ForRenderCommand()"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Render Thread Commands\"), STATGROUP_RenderThreadCommands, STATCAT_Advanced)"
  },
  {
    "label": "LogRenderCommand()",
    "kind": "Method",
    "detail": "Function (# if 0 # define)",
    "insertText": "LogRenderCommand(TypeName) UE_LOG(LogRHI, Warning, TEXT(\"Render command '%s' is being executed on a dedicated server.\"), TEXT(#TypeName)) #else #define LogRenderCommand(TypeName) #endif #if UE_SERVER #define ShouldExecuteOnRenderThread() false #else #define ShouldExecuteOnRenderThread() (LIKELY(GIsThreadedRendering || !IsInGameThread()))"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetSpecId()",
    "kind": "Method",
    "detail": "Function (} uint32&)",
    "insertText": "GetSpecId()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (uint32 SpecId ; return SpecId ; } TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetStatName()",
    "kind": "Method",
    "detail": "Function (# if STATS struct FStatData { typedef FStatGroup_STATGROUP_RenderThreadCommands TGroup ; const char*)",
    "insertText": "GetStatName()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetStatType()",
    "kind": "Method",
    "detail": "Function (} EStatDataType::Type)",
    "insertText": "GetStatType()"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "TStatId()"
  },
  {
    "label": "DECLARE_RENDER_COMMAND_TAG()",
    "kind": "Method",
    "detail": "Function (# endif } } ; # define)",
    "insertText": "DECLARE_RENDER_COMMAND_TAG(Type, Name) \\ struct PREPROCESSOR_JOIN(TSTR_, PREPROCESSOR_JOIN(Name, __LINE__))"
  },
  {
    "label": "CStr()",
    "kind": "Method",
    "detail": "Function (\\ const char*)",
    "insertText": "CStr()"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ using Type = TRenderCommandTag<)",
    "insertText": "PREPROCESSOR_JOIN(TSTR_, PREPROCESSOR_JOIN(Name, __LINE__))"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (class FRenderCommand { public : ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "GetSubsequentsMode()",
    "kind": "Method",
    "detail": "Function (} ESubsequentsMode::Type)",
    "insertText": "GetSubsequentsMode()"
  },
  {
    "label": "DoTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoTask(ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR(TagType::GetName(), RenderCommandsChannel)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(RHICmdList)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} private : LambdaType Lambda ; } ; enum class ERenderCommandPipeMode { None,RenderThread,All } ; enum class ERenderCommandPipeFlags : uint8 { None = 0,Disabled = 1<<0 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERenderCommandPipeFlags)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (class FRenderCommandPipe ; using FRenderCommandPipeBitArrayAllocator = TInlineAllocator<1,FConcurrentLinearBitArrayAllocator> ; using FRenderCommandPipeBitArray = TBitArray<FRenderCommandPipeBitArrayAllocator> ; using FRenderCommandPipeSetBitIterator = TConstSetBitIterator<FRenderCommandPipeBitArrayAllocator> ; namespace UE::RenderCommandPipe { void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "IsReplaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplaying()"
  },
  {
    "label": "IsReplaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplaying(const FRenderCommandPipe& Pipe)"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording(const FRenderCommandPipeBitArray& PipeBits)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (FRenderCommandPipeBitArray)",
    "insertText": "StopRecording()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (FRenderCommandPipeBitArray)",
    "insertText": "StopRecording(TConstArrayView<FRenderCommandPipe*> Pipes)"
  },
  {
    "label": "GetPipes()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FRenderCommandPipe*>)",
    "insertText": "GetPipes()"
  },
  {
    "label": "FSyncScope()",
    "kind": "Method",
    "detail": "Function (class FSyncScope { public :)",
    "insertText": "FSyncScope()"
  },
  {
    "label": "FSyncScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSyncScope(TConstArrayView<FRenderCommandPipe*> Pipes)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (private : FRenderCommandPipeBitArray PipeBits ; } ; } ERenderCommandPipeMode GRenderCommandPipeMode ; class FRenderThreadCommandPipe { public : template<RenderCommandTag,LambdaType> void)",
    "insertText": "Enqueue(LambdaType&& Lambda)"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (Instance .)",
    "insertText": "EnqueueAndLaunch(RenderCommandTag::GetName(), RenderCommandTag::GetSpecId(), RenderCommandTag::GetStatId(), MoveTemp(Lambda))"
  },
  {
    "label": "CreateTask()",
    "kind": "Method",
    "detail": "Function (} else { TGraphTask<TEnqueueUniqueRenderCommandType<RenderCommandTag,LambdaType>)",
    "insertText": "CreateTask().ConstructAndDispatchWhenReady(MoveTemp(Lambda))"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (} } private : FRenderThreadCommandPipe Instance ; void)",
    "insertText": "EnqueueAndLaunch(const TCHAR* Name, uint32& SpecId, TStatId StatId, TUniqueFunction<void(FRHICommandListImmediate&)>&& Function)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (struct FCommand {)",
    "insertText": "FCommand(const TCHAR* InName, uint32& OutSpecId, TStatId InStatId, TUniqueFunction<void(FRHICommandListImmediate&)>&& InFunction) : Name(InName) , SpecId(&OutSpecId) , StatId(InStatId) , Function(MoveTemp(InFunction))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* Name ; uint32* SpecId ; TStatId StatId ; TUniqueFunction<)",
    "insertText": "void(FRHICommandListImmediate&)"
  },
  {
    "label": "EnqueueUniqueRenderCommand()",
    "kind": "Method",
    "detail": "Function (} ; int32 ProduceIndex = 0 ; TStaticArray<TArray<FCommand>,2> Queues ; UE::FMutex Mutex ; } ; template<RenderCommandTag,LambdaType> void)",
    "insertText": "EnqueueUniqueRenderCommand(LambdaType&& Lambda)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_USE_ON_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_USE_ON_CHANNEL(RenderCommandTag::GetSpecId(), RenderCommandTag::GetName(), EventScope, RenderCommandsChannel, true)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(GetImmediateCommandList_ForRenderCommand())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ShouldExecuteOnRenderThread())"
  },
  {
    "label": "LambdaType()",
    "kind": "Method",
    "detail": "Function (FRenderThreadCommandPipe::Enqueue<RenderCommandTag,)",
    "insertText": "LambdaType(MoveTemp(Lambda))"
  },
  {
    "label": "CycleScope()",
    "kind": "Method",
    "detail": "Function (} else { FScopeCycleCounter)",
    "insertText": "CycleScope(RenderCommandTag::GetStatId())"
  },
  {
    "label": "EnqueueUniqueRenderCommand()",
    "kind": "Method",
    "detail": "Function (} } template<RenderCommandTag,LambdaType> void)",
    "insertText": "EnqueueUniqueRenderCommand(LambdaType& Lambda)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} class FRenderCommandPipe { public : using FCommandListFunction = TUniqueFunction<)",
    "insertText": "void(FRHICommandList&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FEmptyFunction = TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FRenderCommandPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderCommandPipe(const TCHAR* Name, ERenderCommandPipeFlags Flags, const TCHAR* CVarName, const TCHAR* CVarDescription)"
  },
  {
    "label": "FRenderCommandPipe()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRenderCommandPipe()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool bInIsEnabled)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (bEnabled = bInIsEnabled ; } template<RenderCommandTag> void)",
    "insertText": "Enqueue(FRenderCommandPipe* Pipe, FCommandListFunction&& Function)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TScopeLock)",
    "insertText": "Lock(Pipe->Mutex)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (Pipe ->)",
    "insertText": "ExecuteCommand(MoveTemp(Function), RenderCommandTag::GetName(), RenderCommandTag::GetSpecId())"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (Pipe ->)",
    "insertText": "EnqueueAndLaunch(MoveTemp(Function), RenderCommandTag::GetName(), RenderCommandTag::GetSpecId())"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} template<RenderCommandTag> void)",
    "insertText": "Enqueue(FRenderCommandPipe& Pipe, FCommandListFunction&& Function)"
  },
  {
    "label": "RenderCommandTag()",
    "kind": "Method",
    "detail": "Function (Enqueue<)",
    "insertText": "RenderCommandTag(&Pipe, MoveTemp(Function))"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} template<RenderCommandTag> void)",
    "insertText": "Enqueue(FRenderCommandPipe* Pipe, FEmptyFunction&& Function)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} template<RenderCommandTag> void)",
    "insertText": "Enqueue(FRenderCommandPipe& Pipe, FEmptyFunction&& Function)"
  },
  {
    "label": "RenderCommandTag()",
    "kind": "Method",
    "detail": "Function (EnqueueUniqueRenderCommand<)",
    "insertText": "RenderCommandTag(MoveTemp(Lambda))"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (} private : class FRenderCommandPipeRegistry ; using FFunctionVariant = TVariant<FEmptyFunction,FCommandListFunction> ; void)",
    "insertText": "EnqueueAndLaunch(FFunctionVariant&& FunctionVariant, const TCHAR* Name, uint32& SpecId)"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueAndLaunch(FCommandListFunction&& Function, const TCHAR* CommandName, uint32& CommandSpecId)"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueAndLaunch(FFunctionVariant(TInPlaceType<FCommandListFunction>(), MoveTemp(Function)), CommandName, CommandSpecId)"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueAndLaunch(FEmptyFunction&& Function, const TCHAR* CommandName, uint32& CommandSpecId)"
  },
  {
    "label": "EnqueueAndLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueAndLaunch(FFunctionVariant(TInPlaceType<FEmptyFunction>(), MoveTemp(Function)), CommandName, CommandSpecId)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteCommand(FFunctionVariant&& FunctionVariant, const TCHAR* CommandName, uint32& CommandSpecId)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommand(FCommandListFunction&& Function, const TCHAR* CommandName, uint32& CommandSpecId)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommand(FFunctionVariant(TInPlaceType<FCommandListFunction>(), MoveTemp(Function)), CommandName, CommandSpecId)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteCommand(FEmptyFunction&& Function, const TCHAR* CommandName, uint32& CommandSpecId)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommand(FFunctionVariant(TInPlaceType<FEmptyFunction>(), MoveTemp(Function)), CommandName, CommandSpecId)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (} struct FCommand {)",
    "insertText": "FCommand(FFunctionVariant&& InFunction, const TCHAR* InName, uint32& InOutSpecId) : Function(MoveTemp(InFunction)) , Name(InName) , SpecId(&InOutSpecId)"
  },
  {
    "label": "FFrame()",
    "kind": "Method",
    "detail": "Function (} FFunctionVariant Function ; const TCHAR* Name ; uint32* SpecId ; } ; struct FFrame : public TConcurrentLinearObject<FFrame> {)",
    "insertText": "FFrame(const UE::Tasks::FTaskEvent& InTaskEvent) : LastTask(InTaskEvent)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} UE::Tasks::FTask LastTask ; TArray<FCommand> Queue ; FRHICommandList* RHICmdList = nullptr ; } ; const TCHAR* Name ; UE::FMutex Mutex ; FFrame* Frame_GameThread = nullptr ; FFrame* Frame_RenderThread = nullptr ; TLinkedList<FRenderCommandPipe*> GlobalListLink ; FAutoConsoleVariable ConsoleVariable ; std::atomic_int32_t NumInFlightCommands { 0 } ; uint16 Index =)",
    "insertText": "uint16(-1)"
  },
  {
    "label": "DECLARE_RENDER_COMMAND_PIPE()",
    "kind": "Method",
    "detail": "Function (bool bRecording = false ; bool bEnabled = true ; } ; # define)",
    "insertText": "DECLARE_RENDER_COMMAND_PIPE(Name, PrefixKeywords)"
  },
  {
    "label": "DEFINE_RENDER_COMMAND_PIPE()",
    "kind": "Method",
    "detail": "Function (PrefixKeywords FRenderCommandPipe Name ; } # define)",
    "insertText": "DEFINE_RENDER_COMMAND_PIPE(Name, Flags)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (\\ FRenderCommandPipe)",
    "insertText": "Name(\\ TEXT(#Name), \\ Flags, \\ TEXT(\"r.RenderCommandPipe.\" #Name), \\ TEXT(\"Whether to enable the \" #Name \" Render Command Pipe\") \\ TEXT(\" 0: off;\") \\ TEXT(\" 1: on (default)\") \\)"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "ENQUEUE_RENDER_COMMAND(Type) \\ DECLARE_RENDER_COMMAND_TAG(PREPROCESSOR_JOIN(FRenderCommandTag_, PREPROCESSOR_JOIN(Type, __LINE__)), Type) \\ FRenderCommandPipe::Enqueue<PREPROCESSOR_JOIN(FRenderCommandTag_, PREPROCESSOR_JOIN(Type, __LINE__))"
  },
  {
    "label": "FRenderThreadScope()",
    "kind": "Method",
    "detail": "Function (typedef TArray<RenderCommandFunction> RenderCommandFunctionArray ; public :)",
    "insertText": "FRenderThreadScope()"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (RenderCommandFunctionArray* RenderCommandArray = RenderCommands ;)",
    "insertText": "ENQUEUE_RENDER_COMMAND(DispatchScopeCommands)( [RenderCommandArray](FRHICommandListImmediate& RHICmdList) { for(int32 Index = 0; Index < RenderCommandArray->Num(); Index++) { (*RenderCommandArray)[Index](RHICmdList); } delete RenderCommandArray; })"
  },
  {
    "label": "EnqueueRenderCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueRenderCommand(RenderCommandFunction&& Lambda)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RenderCommands ->)",
    "insertText": "Add(MoveTemp(Lambda))"
  },
  {
    "label": "FRenderThreadStructBase()",
    "kind": "Method",
    "detail": "Function (} private : RenderCommandFunctionArray* RenderCommands ; } ; struct FRenderThreadStructBase {)",
    "insertText": "FRenderThreadStructBase()"
  },
  {
    "label": "FRenderThreadStructBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderThreadStructBase(const FRenderThreadStructBase&)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListImmediate&)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI(FRHICommandListImmediate&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<StructType> class TRenderThreadStruct { public :)",
    "insertText": "static_assert(TIsDerivedFrom<StructType, FRenderThreadStructBase>::IsDerived, \"StructType must be derived from FRenderThreadStructBase.\")"
  },
  {
    "label": "TRenderThreadStruct()",
    "kind": "Method",
    "detail": "Function (template<. . . TArgs>)",
    "insertText": "TRenderThreadStruct(TArgs&&... Args) : Struct(new StructType(Forward<TArgs&&>(Args)...))"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENQUEUE_RENDER_COMMAND(InitStruct)([Struct = Struct](FRHICommandListImmediate& RHICmdList) { Struct->InitRHI(RHICmdList); })"
  },
  {
    "label": "TRenderThreadStruct()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TRenderThreadStruct()"
  },
  {
    "label": "ENQUEUE_RENDER_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENQUEUE_RENDER_COMMAND(DeleteStruct)([Struct = Struct](FRHICommandListImmediate& RHICmdList) { Struct->ReleaseRHI(RHICmdList); delete Struct; })"
  },
  {
    "label": "TRenderThreadStruct()",
    "kind": "Method",
    "detail": "Function (Struct = nullptr ; })",
    "insertText": "TRenderThreadStruct(const TRenderThreadStruct&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const StructType*)",
    "insertText": "operator()"
  },
  {
    "label": "RegisterStopRenderingThreadDelegate()",
    "kind": "Method",
    "detail": "Function (using FStopRenderingThreadDelegate = FStopRenderingThread::FDelegate ; FDelegateHandle)",
    "insertText": "RegisterStopRenderingThreadDelegate(const FStopRenderingThreadDelegate& InDelegate)"
  },
  {
    "label": "UnregisterStopRenderingThreadDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterStopRenderingThreadDelegate(FDelegateHandle InDelegateHandle)"
  }
]