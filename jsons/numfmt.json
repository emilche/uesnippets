[
  {
    "label": "NumberFormatTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatTest"
  },
  {
    "label": "SharedNumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedNumberFormat"
  },
  {
    "label": "NumberFormatFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormatFactory"
  },
  {
    "label": "StringEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringEnumeration"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "ERoundingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERoundingMode"
  },
  {
    "label": "EAlignmentFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlignmentFields"
  },
  {
    "label": "ICUNumberFormatFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICUNumberFormatFactory"
  },
  {
    "label": "ICUNumberFormatService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICUNumberFormatService"
  },
  {
    "label": "NumberFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef NUMFMT_H # define NUMFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / unistr . h \" # include \" unicode / format . h \" # include \" unicode / unum . h \" # include \" unicode / locid . h \" # include \" unicode / stringpiece . h \" # include \" unicode / curramt . h \" # include \" unicode / udisplaycontext . h \" class NumberFormatTest ; U_NAMESPACE_BEGIN class SharedNumberFormat ; # if ! UCONFIG_NO_SERVICE class NumberFormatFactory ; class StringEnumeration ; # endif class U_I18N_API NumberFormat : public Format { public : enum ERoundingMode { kRoundCeiling,kRoundFloor,kRoundDown,kRoundUp,kRoundHalfEven,kRoundHalfDown,kRoundHalfUp,kRoundUnnecessary } ; enum EAlignmentFields { kIntegerField = UNUM_INTEGER_FIELD,kFractionField = UNUM_FRACTION_FIELD,kDecimalSeparatorField = UNUM_DECIMAL_SEPARATOR_FIELD,kExponentSymbolField = UNUM_EXPONENT_SYMBOL_FIELD,kExponentSignField = UNUM_EXPONENT_SIGN_FIELD,kExponentField = UNUM_EXPONENT_FIELD,kGroupingSeparatorField = UNUM_GROUPING_SEPARATOR_FIELD,kCurrencyField = UNUM_CURRENCY_FIELD,kPercentField = UNUM_PERCENT_FIELD,kPermillField = UNUM_PERMILL_FIELD,kSignField = UNUM_SIGN_FIELD,# ifndef kMeasureUnitField = UNUM_MEASURE_UNIT_FIELD,kCompactField = UNUM_COMPACT_FIELD,# endif INTEGER_FIELD = UNUM_INTEGER_FIELD,FRACTION_FIELD = UNUM_FRACTION_FIELD } ; ~)",
    "insertText": "NumberFormat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using Format::format ; UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& parse_pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode &status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode &status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int32_t number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(int64_t number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(StringPiece number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const number::impl::DecimalQuantity &number, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const number::impl::DecimalQuantity &number, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parse(const UnicodeString& text, Formattable& result, ParsePosition& parsePosition)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parse(const UnicodeString& text, Formattable& result, UErrorCode& status)"
  },
  {
    "label": "parseCurrency()",
    "kind": "Method",
    "detail": "Function (CurrencyAmount*)",
    "insertText": "parseCurrency(const UnicodeString& text, ParsePosition& pos)"
  },
  {
    "label": "isParseIntegerOnly()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isParseIntegerOnly(void)"
  },
  {
    "label": "setParseIntegerOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParseIntegerOnly(UBool value)"
  },
  {
    "label": "setLenient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLenient(UBool enable)"
  },
  {
    "label": "isLenient()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isLenient(void)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createInstance(UErrorCode&)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createInstance(const Locale& inLocale, UErrorCode&)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createInstance(const Locale& desiredLocale, UNumberFormatStyle style, UErrorCode& errorCode)"
  },
  {
    "label": "internalCreateInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef NumberFormat*)",
    "insertText": "internalCreateInstance(const Locale& desiredLocale, UNumberFormatStyle style, UErrorCode& errorCode)"
  },
  {
    "label": "createSharedInstance()",
    "kind": "Method",
    "detail": "Function (const SharedNumberFormat* U_EXPORT2)",
    "insertText": "createSharedInstance(const Locale& inLocale, UNumberFormatStyle style, UErrorCode& status)"
  },
  {
    "label": "createCurrencyInstance()",
    "kind": "Method",
    "detail": "Function (# endif NumberFormat* U_EXPORT2)",
    "insertText": "createCurrencyInstance(UErrorCode&)"
  },
  {
    "label": "createCurrencyInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createCurrencyInstance(const Locale& inLocale, UErrorCode&)"
  },
  {
    "label": "createPercentInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createPercentInstance(UErrorCode&)"
  },
  {
    "label": "createPercentInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createPercentInstance(const Locale& inLocale, UErrorCode&)"
  },
  {
    "label": "createScientificInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createScientificInstance(UErrorCode&)"
  },
  {
    "label": "createScientificInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat* U_EXPORT2)",
    "insertText": "createScientificInstance(const Locale& inLocale, UErrorCode&)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (const Locale* U_EXPORT2)",
    "insertText": "getAvailableLocales(int32_t& count)"
  },
  {
    "label": "registerFactory()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_SERVICE URegistryKey U_EXPORT2)",
    "insertText": "registerFactory(NumberFormatFactory* toAdopt, UErrorCode& status)"
  },
  {
    "label": "unregister()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "unregister(URegistryKey key, UErrorCode& status)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (StringEnumeration* U_EXPORT2)",
    "insertText": "getAvailableLocales(void)"
  },
  {
    "label": "isGroupingUsed()",
    "kind": "Method",
    "detail": "Function (# endif UBool)",
    "insertText": "isGroupingUsed(void)"
  },
  {
    "label": "setGroupingUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGroupingUsed(UBool newValue)"
  },
  {
    "label": "getMaximumIntegerDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMaximumIntegerDigits(void)"
  },
  {
    "label": "setMaximumIntegerDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaximumIntegerDigits(int32_t newValue)"
  },
  {
    "label": "getMinimumIntegerDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMinimumIntegerDigits(void)"
  },
  {
    "label": "setMinimumIntegerDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumIntegerDigits(int32_t newValue)"
  },
  {
    "label": "getMaximumFractionDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMaximumFractionDigits(void)"
  },
  {
    "label": "setMaximumFractionDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaximumFractionDigits(int32_t newValue)"
  },
  {
    "label": "getMinimumFractionDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMinimumFractionDigits(void)"
  },
  {
    "label": "setMinimumFractionDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinimumFractionDigits(int32_t newValue)"
  },
  {
    "label": "setCurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrency(const char16_t* theCurrency, UErrorCode& ec)"
  },
  {
    "label": "getCurrency()",
    "kind": "Method",
    "detail": "Function (const char16_t*)",
    "insertText": "getCurrency()"
  },
  {
    "label": "setContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContext(UDisplayContext value, UErrorCode& status)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (UDisplayContext)",
    "insertText": "getContext(UDisplayContextType type, UErrorCode& status)"
  },
  {
    "label": "getRoundingMode()",
    "kind": "Method",
    "detail": "Function (ERoundingMode)",
    "insertText": "getRoundingMode(void)"
  },
  {
    "label": "setRoundingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundingMode(ERoundingMode roundingMode)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (public : UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "NumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumberFormat(const NumberFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NumberFormat&)",
    "insertText": "operator(const NumberFormat&)"
  },
  {
    "label": "getEffectiveCurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getEffectiveCurrency(char16_t* result, UErrorCode& ec)"
  },
  {
    "label": "makeInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef NumberFormat*)",
    "insertText": "makeInstance(const Locale& desiredLocale, UNumberFormatStyle style, UBool mustBeDecimalFormat, UErrorCode& errorCode)"
  },
  {
    "label": "isStyleSupported()",
    "kind": "Method",
    "detail": "Function (# endif private : UBool)",
    "insertText": "isStyleSupported(UNumberFormatStyle style)"
  },
  {
    "label": "makeInstance()",
    "kind": "Method",
    "detail": "Function (NumberFormat*)",
    "insertText": "makeInstance(const Locale& desiredLocale, UNumberFormatStyle style, UErrorCode& errorCode)"
  },
  {
    "label": "NumberFormatFactory()",
    "kind": "Method",
    "detail": "Function (UBool fGroupingUsed ; int32_t fMaxIntegerDigits ; int32_t fMinIntegerDigits ; int32_t fMaxFractionDigits ; int32_t fMinFractionDigits ; protected : const int32_t gDefaultMaxIntegerDigits ; const int32_t gDefaultMinIntegerDigits ; private : UBool fParseIntegerOnly ; UBool fLenient ; char16_t fCurrency [ 4 ] ; UDisplayContext fCapitalizationContext ; class ICUNumberFormatFactory ; class ICUNumberFormatService ; class::NumberFormatTest ; } ; # if ! UCONFIG_NO_SERVICE class U_I18N_API NumberFormatFactory : public UObject { public : ~)",
    "insertText": "NumberFormatFactory()"
  },
  {
    "label": "visible()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "visible(void)"
  },
  {
    "label": "getSupportedIDs()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getSupportedIDs(int32_t &count, UErrorCode& status)"
  },
  {
    "label": "createFormat()",
    "kind": "Method",
    "detail": "Function (NumberFormat*)",
    "insertText": "createFormat(const Locale& loc, UNumberFormatStyle formatType)"
  },
  {
    "label": "SimpleNumberFormatFactory()",
    "kind": "Method",
    "detail": "Function (} ; class U_I18N_API SimpleNumberFormatFactory : public NumberFormatFactory { protected : const UBool _visible ; UnicodeString _id ; public :)",
    "insertText": "SimpleNumberFormatFactory(const Locale& locale, UBool visible = TRUE)"
  },
  {
    "label": "SimpleNumberFormatFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleNumberFormatFactory()"
  },
  {
    "label": "isParseIntegerOnly()",
    "kind": "Method",
    "detail": "Function (} ; # endif UBool)",
    "insertText": "isParseIntegerOnly()"
  }
]