[
  {
    "label": "FSimpleCurveKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleCurveKey"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FSimpleCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleCurve"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Curves / RealCurve . h \" # include \" SimpleCurve . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=\"Key\")"
  },
  {
    "label": "FSimpleCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSimpleCurveKey() : Time(0.f) , Value(0.f)"
  },
  {
    "label": "FSimpleCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSimpleCurveKey(float InTime, float InValue) : Time(InTime) , Value(InValue)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSimpleCurveKey& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSimpleCurveKey& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSimpleCurve() : FRealCurve() , InterpMode(RCIM_Linear)"
  },
  {
    "label": "GetCopyOfKeys()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FSimpleCurveKey>)",
    "insertText": "GetCopyOfKeys()"
  },
  {
    "label": "GetConstRefOfKeys()",
    "kind": "Method",
    "detail": "Function (const TArray<FSimpleCurveKey>&)",
    "insertText": "GetConstRefOfKeys()"
  },
  {
    "label": "GetKeyIterator()",
    "kind": "Method",
    "detail": "Function (TArray<FSimpleCurveKey>::TConstIterator)",
    "insertText": "GetKeyIterator()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FSimpleCurveKey&)",
    "insertText": "GetKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetFirstKey()",
    "kind": "Method",
    "detail": "Function (FSimpleCurveKey)",
    "insertText": "GetFirstKey()"
  },
  {
    "label": "GetLastKey()",
    "kind": "Method",
    "detail": "Function (FSimpleCurveKey)",
    "insertText": "GetLastKey()"
  },
  {
    "label": "GetFirstMatchingKey()",
    "kind": "Method",
    "detail": "Function (FSimpleCurveKey*)",
    "insertText": "GetFirstMatchingKey(const TArray<FKeyHandle>& KeyHandles)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AddKey(float InTime, float InValue, const bool bUnwindRotation = false, FKeyHandle KeyHandle = FKeyHandle())"
  },
  {
    "label": "SetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeys(const TArray<FSimpleCurveKey>& InKeys)"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "UpdateOrAddKey(float InTime, float InValue, const bool bUnwindRotation = false, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime(FKeyHandle KeyHandle, float NewTime)"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyTime(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(FKeyHandle KeyHandle, float NewValue, bool bAutoSetTangents = true)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyValue(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyTimeValuePair()",
    "kind": "Method",
    "detail": "Function (TPair<float,float>)",
    "insertText": "GetKeyTimeValuePair(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpMode(FKeyHandle, ERichCurveInterpMode NewInterpMode)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpMode(NewInterpMode)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyInterpMode(ERichCurveInterpMode NewInterpMode)"
  },
  {
    "label": "GetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (InterpMode = NewInterpMode ; } } ERichCurveInterpMode)",
    "insertText": "GetKeyInterpMode(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (} ERichCurveInterpMode)",
    "insertText": "GetKeyInterpMode()"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(float& MinValue, float& MaxValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RemapTimeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTimeValue(float& InTime, float& CycleValueOffset)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Eval(float InTime, float InDefaultValue = 0.0f)"
  },
  {
    "label": "ReadjustTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadjustTimeRange(float NewMinTimeRange, float NewMaxTimeRange, bool bInsert , float OldStartTime, float OldEndTime)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSimpleCurve& Curve)"
  },
  {
    "label": "BakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeCurve(float SampleRate)"
  },
  {
    "label": "BakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeCurve(float SampleRate, float FirstKeyTime, float LastKeyTime)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys(float Tolerance, FFrameRate SampleRate = FFrameRate(0,0))"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys(float Tolerance, float FirstKeyTime, float LastKeyTime, FFrameRate SampleRate = FFrameRate(0,0))"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (FIndexedCurve*)",
    "insertText": "Duplicate()"
  },
  {
    "label": "GetKeyIndex()",
    "kind": "Method",
    "detail": "Function (} protected : int32)",
    "insertText": "GetKeyIndex(float KeyTime, float KeyTimeTolerance)"
  },
  {
    "label": "RemoveRedundantKeysInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RemoveRedundantKeysInternal(float Tolerance, int32 InStartKeepKey, int32 InEndKeepKey)"
  },
  {
    "label": "EvalForTwoKeys()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvalForTwoKeys(const FSimpleCurveKey& Key1, const FSimpleCurveKey& Key2, const float InTime)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetNumKeys()"
  }
]