[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "DownsampledRenderBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DownsampledRenderBuffer"
  },
  {
    "label": "MatchedFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatchedFilter"
  },
  {
    "label": "LagEstimate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LagEstimate"
  },
  {
    "label": "PreEchoConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PreEchoConfiguration"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_MATCHED_FILTER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_MATCHED_FILTER_H_ # include<stddef . h> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" rtc_base / gtest_prod_util . h \" # include \" rtc_base / system / arch . h \" namespace webrtc { class ApmDataDumper ; struct DownsampledRenderBuffer ; namespace aec3 { # if)",
    "insertText": "defined(WEBRTC_HAS_NEON) void MatchedFilterCore_NEON(size_t x_start_index, float x2_sum_threshold, float smoothing, rtc::ArrayView<const float> x, rtc::ArrayView<const float> y, rtc::ArrayView<float> h, bool* filters_updated, float* error_sum, bool compute_accumulation_error, rtc::ArrayView<float> accumulated_error, rtc::ArrayView<float> scratch_memory)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) void MatchedFilterCore_SSE2(size_t x_start_index, float x2_sum_threshold, float smoothing, rtc::ArrayView<const float> x, rtc::ArrayView<const float> y, rtc::ArrayView<float> h, bool* filters_updated, float* error_sum, bool compute_accumulated_error, rtc::ArrayView<float> accumulated_error, rtc::ArrayView<float> scratch_memory)"
  },
  {
    "label": "MatchedFilterCore_AVX2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchedFilterCore_AVX2(size_t x_start_index, float x2_sum_threshold, float smoothing, rtc::ArrayView<const float> x, rtc::ArrayView<const float> y, rtc::ArrayView<float> h, bool* filters_updated, float* error_sum, bool compute_accumulated_error, rtc::ArrayView<float> accumulated_error, rtc::ArrayView<float> scratch_memory)"
  },
  {
    "label": "MatchedFilterCore()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MatchedFilterCore(size_t x_start_index, float x2_sum_threshold, float smoothing, rtc::ArrayView<const float> x, rtc::ArrayView<const float> y, rtc::ArrayView<float> h, bool* filters_updated, float* error_sum, bool compute_accumulation_error, rtc::ArrayView<float> accumulated_error)"
  },
  {
    "label": "MaxSquarePeakIndex()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxSquarePeakIndex(rtc::ArrayView<const float> h)"
  },
  {
    "label": "LagEstimate()",
    "kind": "Method",
    "detail": "Function (} class MatchedFilter { public : struct LagEstimate {)",
    "insertText": "LagEstimate()"
  },
  {
    "label": "LagEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LagEstimate(size_t lag, size_t pre_echo_lag) : lag(lag), pre_echo_lag(pre_echo_lag)"
  },
  {
    "label": "MatchedFilter()",
    "kind": "Method",
    "detail": "Function (} size_t lag = 0 ; size_t pre_echo_lag = 0 ; } ; struct PreEchoConfiguration { const float threshold ; const int mode ; } ;)",
    "insertText": "MatchedFilter(ApmDataDumper* data_dumper, Aec3Optimization optimization, size_t sub_block_size, size_t window_size_sub_blocks, int num_matched_filters, size_t alignment_shift_sub_blocks, float excitation_limit, float smoothing_fast, float smoothing_slow, float matching_filter_threshold, bool detect_pre_echo)"
  },
  {
    "label": "MatchedFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchedFilter()"
  },
  {
    "label": "MatchedFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatchedFilter(const MatchedFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MatchedFilter&)",
    "insertText": "operator(const MatchedFilter&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const DownsampledRenderBuffer& render_buffer, rtc::ArrayView<const float> capture, bool use_slow_smoothing)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetBestLagEstimate()",
    "kind": "Method",
    "detail": "Function (absl::optional<const MatchedFilter::LagEstimate>)",
    "insertText": "GetBestLagEstimate()"
  },
  {
    "label": "LogFilterProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogFilterProperties(int sample_rate_hz, size_t shift, size_t downsampling_factor)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(MatchedFilterFieldTrialTest, PreEchoConfigurationTest)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(MatchedFilterFieldTrialTest, WrongPreEchoConfigurationTest)"
  },
  {
    "label": "GetPreEchoConfiguration()",
    "kind": "Method",
    "detail": "Function (const PreEchoConfiguration&)",
    "insertText": "GetPreEchoConfiguration()"
  }
]