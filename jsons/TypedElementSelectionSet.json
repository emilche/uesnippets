[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterface"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FTypedElementSelectionNormalizationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementSelectionNormalizationOptions"
  },
  {
    "label": "FTypedElementSelectionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypedElementSelectionCustomization"
  },
  {
    "label": "FTypedElementSelectionSetElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementSelectionSetElement"
  },
  {
    "label": "FTypedElementSelectionSetState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementSelectionSetState"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Delegates / Delegate . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / TypedElementInterfaceCustomization . h \" # include \" Elements / Framework / TypedElementList . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" Elements / Framework / TypedElementListObjectUtil . h \" # include \" Elements / Interfaces / TypedElementSelectionInterface . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" TypedElementSelectionSet . generated . h \" class FArchive ; class UClass ; class UInterface ; class UTypedElementSelectionSet ; struct FFrame ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FTypedElementSelectionNormalizationOptions& SetExpandGroups(const bool InExpandGroups)"
  },
  {
    "label": "ExpandGroups()",
    "kind": "Method",
    "detail": "Function (bExpandGroups = InExpandGroups ; return* this ; } bool)",
    "insertText": "ExpandGroups()"
  },
  {
    "label": "FollowAttachment()",
    "kind": "Method",
    "detail": "Function (bFollowAttachment = InFollowAttachment ; return* this ; } bool)",
    "insertText": "FollowAttachment()"
  },
  {
    "label": "GetNameForTEDSIntegration()",
    "kind": "Method",
    "detail": "Function (TEDSIntegrationSelectionSetName = InTEDSIntegrationSelectionSetName ; return* this ; } FName)",
    "insertText": "GetNameForTEDSIntegration()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName TEDSIntegrationSelectionSetName =)",
    "insertText": "FName()"
  },
  {
    "label": "FTypedElementSelectionCustomization()",
    "kind": "Method",
    "detail": "Function (} ; class FTypedElementSelectionCustomization { public : ~)",
    "insertText": "FTypedElementSelectionCustomization()"
  },
  {
    "label": "IsElementSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementSelected(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListConstRef InSelectionSet, const FTypedElementIsSelectedOptions& InSelectionOptions)"
  },
  {
    "label": "CanSelectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "CanDeselectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeselectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "SelectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SelectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListRef InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "DeselectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeselectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListRef InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "AllowSelectionModifiers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowSelectionModifiers(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListConstRef InSelectionSet)"
  },
  {
    "label": "GetSelectionElement()",
    "kind": "Method",
    "detail": "Function (} FTypedElementHandle)",
    "insertText": "GetSelectionElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListConstRef InCurrentSelection, const ETypedElementSelectionMethod InSelectionMethod)"
  },
  {
    "label": "GetNormalizedElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNormalizedElements(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListConstRef InSelectionSet, const FTypedElementSelectionNormalizationOptions& InNormalizationOptions, FTypedElementListRef OutNormalizedElements)"
  },
  {
    "label": "FTypedElementSelectionSetElement()",
    "kind": "Method",
    "detail": "Function (} ; struct FTypedElementSelectionSetElement { public :)",
    "insertText": "FTypedElementSelectionSetElement()"
  },
  {
    "label": "FTypedElementSelectionSetElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementSelectionSetElement(TTypedElement<ITypedElementSelectionInterface> InElementSelectionHandle, FTypedElementListPtr InElementList, FTypedElementSelectionCustomization* InSelectionCustomization) : ElementSelectionHandle(MoveTemp(InElementSelectionHandle)) , ElementList(InElementList) , SelectionCustomization(InSelectionCustomization)"
  },
  {
    "label": "FTypedElementSelectionSetElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypedElementSelectionSetElement(const FTypedElementSelectionSetElement&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementSelectionSetElement&)",
    "insertText": "operator(const FTypedElementSelectionSetElement&)"
  },
  {
    "label": "FTypedElementSelectionSetElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementSelectionSetElement(FTypedElementSelectionSetElement&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementSelectionSetElement&)",
    "insertText": "operator(FTypedElementSelectionSetElement&&)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsElementSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsElementSelected(const FTypedElementIsSelectedOptions& InSelectionOptions)"
  },
  {
    "label": "CanSelectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectElement(const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "CanDeselectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeselectElement(const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "SelectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SelectElement(const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "DeselectElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeselectElement(const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "AllowSelectionModifiers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowSelectionModifiers()"
  },
  {
    "label": "GetSelectionElement()",
    "kind": "Method",
    "detail": "Function (} FTypedElementHandle)",
    "insertText": "GetSelectionElement(const ETypedElementSelectionMethod InSelectionMethod)"
  },
  {
    "label": "GetNormalizedElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNormalizedElements(const FTypedElementSelectionNormalizationOptions& InNormalizationOptions, FTypedElementListRef OutNormalizedElements)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FTypedElementSelectionSetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementSelectionSetState()"
  },
  {
    "label": "FTypedElementSelectionSetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementSelectionSetState(FTypedElementSelectionSetState&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementSelectionSetState&)",
    "insertText": "operator(FTypedElementSelectionSetState&&)"
  },
  {
    "label": "FTypedElementSelectionSetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementSelectionSetState(const FTypedElementSelectionSetState& InOther) : CreatedFromSelectionSet(InOther.CreatedFromSelectionSet)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TransactedElements .)",
    "insertText": "Reserve(InOther.TransactedElements.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TransactedElements .)",
    "insertText": "Emplace(OtherTransactedElement->Clone())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FTypedElementSelectionSetState&)",
    "insertText": "operator(const FTypedElementSelectionSetState& InOther)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CreatedFromSelectionSet = InOther . CreatedFromSelectionSet ; TransactedElements .)",
    "insertText": "Reset(InOther.TransactedElements.Num())"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TArray<TUniquePtr<ITypedElementTransactedElement>> TransactedElements ; } ;)",
    "insertText": "UCLASS(Transient, BlueprintType, meta=(DontUseGenericSpawnObject=\"True\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: TYPEDELEMENTRUNTIME_API UTypedElementSelectionSet()"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "IsElementSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElementSelected(const FTypedElementHandle& InElementHandle, const FTypedElementIsSelectedOptions InSelectionOptions)"
  },
  {
    "label": "CanSelectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectElement(const FTypedElementHandle& InElementHandle, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "CanDeselectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeselectElement(const FTypedElementHandle& InElementHandle, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SelectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectElement(const FTypedElementHandle& InElementHandle, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SelectElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectElements(const TArray<FTypedElementHandle>& InElementHandles, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SelectElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectElements(TArrayView<const FTypedElementHandle> InElementHandles, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SelectElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectElements(FTypedElementListConstRef InElementList, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "DeselectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeselectElement(const FTypedElementHandle& InElementHandle, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "DeselectElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeselectElements(const TArray<FTypedElementHandle>& InElementHandles, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "DeselectElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeselectElements(TArrayView<const FTypedElementHandle> InElementHandles, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "DeselectElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeselectElements(FTypedElementListConstRef InElementList, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSelection(const TArray<FTypedElementHandle>& InElementHandles, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSelection(TArrayView<const FTypedElementHandle> InElementHandles, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSelection(FTypedElementListConstRef InElementList, const FTypedElementSelectionOptions InSelectionOptions)"
  },
  {
    "label": "AllowSelectionModifiers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowSelectionModifiers(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "SetNameForTedsIntegration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNameForTedsIntegration(const FName InNameForIntegration)"
  },
  {
    "label": "GetSelectionElement()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle)",
    "insertText": "GetSelectionElement(const FTypedElementHandle& InElementHandle, const ETypedElementSelectionMethod InSelectionMethod)"
  },
  {
    "label": "GetNormalizedSelection()",
    "kind": "Method",
    "detail": "Function (FTypedElementListRef)",
    "insertText": "GetNormalizedSelection(const FTypedElementSelectionNormalizationOptions InNormalizationOptions)"
  },
  {
    "label": "GetNormalizedSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNormalizedSelection(const FTypedElementSelectionNormalizationOptions& InNormalizationOptions, FTypedElementListRef OutNormalizedElements)"
  },
  {
    "label": "GetNormalizedElementList()",
    "kind": "Method",
    "detail": "Function (FTypedElementListRef)",
    "insertText": "GetNormalizedElementList(FTypedElementListConstRef InElementList, const FTypedElementSelectionNormalizationOptions InNormalizationOptions)"
  },
  {
    "label": "GetNormalizedElementList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNormalizedElementList(FTypedElementListConstRef InElementList, const FTypedElementSelectionNormalizationOptions& InNormalizationOptions, FTypedElementListRef OutNormalizedElements)"
  },
  {
    "label": "GetSelectedElementHandles()",
    "kind": "Method",
    "detail": "Function (} TArray<FTypedElementHandle>)",
    "insertText": "GetSelectedElementHandles(const TSubclassOf<UInterface> InBaseInterfaceType = nullptr)"
  },
  {
    "label": "GetSelectedElementHandles()",
    "kind": "Method",
    "detail": "Function (} template<ArrayAllocator> void)",
    "insertText": "GetSelectedElementHandles(TArray<FTypedElementHandle, ArrayAllocator>& OutArray, const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "GetElementHandles()",
    "kind": "Method",
    "detail": "Function (ElementList ->)",
    "insertText": "GetElementHandles(OutArray, InBaseInterfaceType)"
  },
  {
    "label": "ForEachSelectedElementHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachSelectedElementHandle(TFunctionRef<bool(const FTypedElementHandle&)> InCallback, const TSubclassOf<UInterface>& InBaseInterfaceType = nullptr)"
  },
  {
    "label": "ForEachElementHandle()",
    "kind": "Method",
    "detail": "Function (ElementList ->)",
    "insertText": "ForEachElementHandle(InCallback, InBaseInterfaceType)"
  },
  {
    "label": "ForEachSelectedElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> void)",
    "insertText": "ForEachSelectedElement(TFunctionRef<bool(const TTypedElement<BaseInterfaceType>&)> InCallback)"
  },
  {
    "label": "BaseInterfaceType()",
    "kind": "Method",
    "detail": "Function (ElementList -> ForEachElement<)",
    "insertText": "BaseInterfaceType(InCallback)"
  },
  {
    "label": "GetTopSelectedElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetTopSelectedElement()"
  },
  {
    "label": "GetTopSelectedElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetTopSelectedElement(TFunctionRef<bool (const TTypedElement<BaseInterfaceType>&)> Predicate)"
  },
  {
    "label": "GetBottomSelectedElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetBottomSelectedElement()"
  },
  {
    "label": "GetBottomSelectedElement()",
    "kind": "Method",
    "detail": "Function (} template<BaseInterfaceType> TTypedElement<BaseInterfaceType>)",
    "insertText": "GetBottomSelectedElement(TFunctionRef<bool (const TTypedElement<BaseInterfaceType>&)> Predicate)"
  },
  {
    "label": "HasSelectedObjects()",
    "kind": "Method",
    "detail": "Function (} template<RequiredClassType> bool)",
    "insertText": "HasSelectedObjects()"
  },
  {
    "label": "CountSelectedObjects()",
    "kind": "Method",
    "detail": "Function (} template<RequiredClassType> int32)",
    "insertText": "CountSelectedObjects()"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (} template<RequiredClassType> TArray<RequiredClassType*>)",
    "insertText": "GetSelectedObjects()"
  },
  {
    "label": "ForEachSelectedObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachSelectedObject(TFunctionRef<bool(UObject*)> InCallback, const UClass* InRequiredClass = nullptr)"
  },
  {
    "label": "ForEachObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachObject(ElementList.ToSharedRef(), InCallback, InRequiredClass)"
  },
  {
    "label": "ForEachSelectedObject()",
    "kind": "Method",
    "detail": "Function (} template<RequiredClassType> void)",
    "insertText": "ForEachSelectedObject(TFunctionRef<bool(RequiredClassType*)> InCallback)"
  },
  {
    "label": "RequiredClassType()",
    "kind": "Method",
    "detail": "Function (TypedElementListObjectUtil::ForEachObject<)",
    "insertText": "RequiredClassType(ElementList.ToSharedRef(), InCallback)"
  },
  {
    "label": "GetTopSelectedObject()",
    "kind": "Method",
    "detail": "Function (} template<RequiredClassType> RequiredClassType*)",
    "insertText": "GetTopSelectedObject()"
  },
  {
    "label": "GetBottomSelectedObject()",
    "kind": "Method",
    "detail": "Function (} template<RequiredClassType> RequiredClassType*)",
    "insertText": "GetBottomSelectedObject()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(UTypedElementSelectionSet, FOnPreChange, const UTypedElementSelectionSet*)"
  },
  {
    "label": "OnPreChange()",
    "kind": "Method",
    "detail": "Function (FOnPreChange&)",
    "insertText": "OnPreChange()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FOnChanged&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "NotifyPendingChanges()",
    "kind": "Method",
    "detail": "Function (ElementList ->)",
    "insertText": "NotifyPendingChanges()"
  },
  {
    "label": "GetScopedClearNewPendingChange()",
    "kind": "Method",
    "detail": "Function (} FTypedElementList::FScopedClearNewPendingChange)",
    "insertText": "GetScopedClearNewPendingChange()"
  },
  {
    "label": "Legacy_GetElementListSync()",
    "kind": "Method",
    "detail": "Function (} FTypedElementList::FLegacySync&)",
    "insertText": "Legacy_GetElementListSync()"
  },
  {
    "label": "Legacy_GetElementListSyncPtr()",
    "kind": "Method",
    "detail": "Function (} FTypedElementList::FLegacySync*)",
    "insertText": "Legacy_GetElementListSyncPtr()"
  },
  {
    "label": "GetElementList()",
    "kind": "Method",
    "detail": "Function (} FTypedElementListConstRef)",
    "insertText": "GetElementList()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnPreChangeDynamic, const UTypedElementSelectionSet*, SelectionSet)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChangeDynamic, const UTypedElementSelectionSet*, SelectionSet)"
  },
  {
    "label": "ResolveSelectionSetElement()",
    "kind": "Method",
    "detail": "Function (private : FTypedElementSelectionSetElement)",
    "insertText": "ResolveSelectionSetElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "OnElementReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementReplaced(TArrayView<const TTuple<FTypedElementHandle, FTypedElementHandle>> InReplacedElements)"
  },
  {
    "label": "OnElementUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementUpdated(TArrayView<const FTypedElementHandle> InUpdatedElements)"
  },
  {
    "label": "OnElementListPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementListPreChange(const FTypedElementList& InElementList)"
  },
  {
    "label": "OnElementListChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementListChanged(const FTypedElementList& InElementList)"
  }
]