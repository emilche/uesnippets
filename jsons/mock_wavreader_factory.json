[
  {
    "label": "MockWavReaderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockWavReaderFactory"
  },
  {
    "label": "Params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Params"
  },
  {
    "label": "MockWavReaderFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_TEST_CONVERSATIONAL_SPEECH_MOCK_WAVREADER_FACTORY_H_ # define MODULES_AUDIO_PROCESSING_TEST_CONVERSATIONAL_SPEECH_MOCK_WAVREADER_FACTORY_H_ # include<map> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" modules / audio_processing / test / conversational_speech / wavreader_abstract_factory . h \" # include \" modules / audio_processing / test / conversational_speech / wavreader_interface . h \" # include \" test / gmock . h \" namespace webrtc { namespace test { namespace conversational_speech { class MockWavReaderFactory : public WavReaderAbstractFactory { public : struct Params { int sample_rate ; size_t num_channels ; size_t num_samples ; } ;)",
    "insertText": "MockWavReaderFactory(const Params& default_params, const std::map<std::string, const Params>& params)"
  },
  {
    "label": "MockWavReaderFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockWavReaderFactory(const Params& default_params)"
  },
  {
    "label": "MockWavReaderFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MockWavReaderFactory()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::unique_ptr<WavReaderInterface>, Create, (absl::string_view), (const, override))"
  },
  {
    "label": "CreateMock()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<WavReaderInterface>)",
    "insertText": "CreateMock(absl::string_view filepath)"
  }
]