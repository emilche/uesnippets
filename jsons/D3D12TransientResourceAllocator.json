[
  {
    "label": "FD3D12TransientHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12TransientHeap"
  },
  {
    "label": "FD3D12TransientHeapCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12TransientHeapCache"
  },
  {
    "label": "FD3D12TransientResourceHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12TransientResourceHeapAllocator"
  },
  {
    "label": "FResourceAllocatorAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceAllocatorAdapter"
  },
  {
    "label": "GetInitialResourceState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12Resources . h \" # include \" RHICoreTransientResourceAllocator . h \" D3D12_RESOURCE_STATES)",
    "insertText": "GetInitialResourceState(const D3D12_RESOURCE_DESC& InDesc, ED3D12QueueType QueueType)"
  },
  {
    "label": "FD3D12TransientHeap()",
    "kind": "Method",
    "detail": "Function (class FD3D12TransientHeap final : public FRHITransientHeap,public FRefCountBase,public FD3D12LinkedAdapterObject<FD3D12TransientHeap> { public :)",
    "insertText": "FD3D12TransientHeap(const FInitializer& Initializer, FD3D12Adapter* Adapter, FD3D12Device* Device, FRHIGPUMask VisibleNodeMask)"
  },
  {
    "label": "FD3D12TransientHeap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12TransientHeap()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FD3D12Heap*)",
    "insertText": "Get()"
  },
  {
    "label": "CreateHeap()",
    "kind": "Method",
    "detail": "Function (FRHITransientHeap*)",
    "insertText": "CreateHeap(const FRHITransientHeap::FInitializer& Initializer)"
  },
  {
    "label": "FD3D12TransientHeapCache()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FD3D12TransientHeapCache(const FInitializer& Initializer, FD3D12Adapter* ParentAdapter)"
  },
  {
    "label": "FD3D12TransientResourceHeapAllocator()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12TransientResourceHeapAllocator final : public FRHITransientResourceHeapAllocator,public FD3D12AdapterChild { public :)",
    "insertText": "FD3D12TransientResourceHeapAllocator(FD3D12TransientHeapCache& InHeapCache)"
  },
  {
    "label": "SupportsResourceType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsResourceType(ERHITransientResourceType InType)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRHITransientBuffer*)",
    "insertText": "CreateBuffer(const FRHIBufferCreateInfo& CreateInfo, const TCHAR* Name, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "FResourceAllocatorAdapter()",
    "kind": "Method",
    "detail": "Function (private : class FResourceAllocatorAdapter final : public FD3D12AdapterChild,public ID3D12ResourceAllocator { public :)",
    "insertText": "FResourceAllocatorAdapter(FD3D12Adapter* Adapter, FD3D12TransientHeap& InHeap, const FRHITransientHeapAllocation& InAllocation, const D3D12_RESOURCE_DESC& InDesc) : FD3D12AdapterChild(Adapter) , Heap(InHeap) , Allocation(InAllocation) , Desc(InDesc)"
  },
  {
    "label": "AllocateResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateResource(uint32 GPUIndex, D3D12_HEAP_TYPE InHeapType, const FD3D12ResourceDesc& InDesc, uint64 InSize, uint32 InAllocationAlignment, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, const D3D12_CLEAR_VALUE* InClearValue, const TCHAR* InName, FD3D12ResourceLocation& ResourceLocation)"
  }
]