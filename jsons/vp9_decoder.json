[
  {
    "label": "JobType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JobType"
  },
  {
    "label": "ThreadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadData"
  },
  {
    "label": "VP9Decoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9Decoder"
  },
  {
    "label": "TileBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TileBuffer"
  },
  {
    "label": "TileWorkerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TileWorkerData"
  },
  {
    "label": "vpx_internal_error_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_internal_error_info"
  },
  {
    "label": "RowMTWorkerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RowMTWorkerData"
  },
  {
    "label": "Job",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Job"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_DECODER_VP9_DECODER_H_ # define VPX_VP9_DECODER_VP9_DECODER_H_ # include \" . / vpx_config . h \" # include \" vpx / vpx_codec . h \" # include \" vpx_dsp / bitreader . h \" # include \" vpx_scale / yv12config . h \" # include \" vpx_util / vpx_thread . h \" # include \" vp9 / common / vp9_thread_common . h \" # include \" vp9 / common / vp9_onyxc_int . h \" # include \" vp9 / common / vp9_ppflags . h \" # include \" . / vp9_job_queue . h \" # ifdef __cplusplus \" C \" { # endif # define EOBS_PER_SB_LOG2 8 # define DQCOEFFS_PER_SB_LOG2 1 2 # define PARTITIONS_PER_SB 8 5 typedef enum JobType { PARSE_JOB,RECON_JOB,LPF_JOB } JobType ; typedef struct ThreadData { struct VP9Decoder* pbi ; LFWorkerData* lf_data ; VP9LfSync* lf_sync ; } ThreadData ; typedef struct TileBuffer { const uint8_t* data ; size_t size ; int col ; } TileBuffer ; typedef struct TileWorkerData { const uint8_t* data_end ; int buf_start,buf_end ; vpx_reader bit_reader ; FRAME_COUNTS counts ; LFWorkerData* lf_data ; VP9LfSync* lf_sync ;)",
    "insertText": "DECLARE_ALIGNED(16, MACROBLOCKD, xd)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, tran_low_t, dqcoeff[32 * 32])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, uint16_t, extend_and_predict_buf[80 * 2 * 80 * 2])"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct vpx_internal_error_info error_info ; } TileWorkerData ; typedef)",
    "insertText": "void(*process_block_fn_t)(TileWorkerData *twd, struct VP9Decoder *const pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (typedef struct RowMTWorkerData { int num_sbs ; int* eob [ MAX_MB_PLANE ] ; PARTITION_TYPE* partition ; tran_low_t* dqcoeff [ MAX_MB_PLANE ] ; int8_t* recon_map ; const uint8_t* data_end ; uint8_t* jobq_buf ; JobQueueRowMt jobq ; size_t jobq_size ; int num_tiles_done ; int num_jobs ; # if CONFIG_MULTITHREAD pthread_mutex_t recon_done_mutex ; pthread_mutex_t* recon_sync_mutex ; pthread_cond_t* recon_sync_cond ; # endif ThreadData* thread_data ; } RowMTWorkerData ; typedef struct Job { int row_num ; int tile_col ; JobType job_type ; } Job ; typedef struct VP9Decoder {)",
    "insertText": "DECLARE_ALIGNED(16, MACROBLOCKD, mb)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, VP9_COMMON, common)"
  },
  {
    "label": "vp9_receive_compressed_data()",
    "kind": "Method",
    "detail": "Function (int ready_for_new_data ; int refresh_frame_flags ; RefCntBuffer* cur_buf ; VPxWorker lf_worker ; VPxWorker* tile_workers ; TileWorkerData* tile_worker_data ; TileBuffer tile_buffers [ 6 4 ] ; int num_tile_workers ; int total_tiles ; VP9LfSync lf_row_sync ; vpx_decrypt_cb decrypt_cb ; void* decrypt_state ; int max_threads ; int inv_tile_order ; int need_resync ; int hold_ref_buf ; int row_mt ; int lpf_mt_opt ; RowMTWorkerData* row_mt_worker_data ; } VP9Decoder ; int)",
    "insertText": "vp9_receive_compressed_data(struct VP9Decoder *pbi, size_t size, const uint8_t **psource)"
  },
  {
    "label": "vp9_get_raw_frame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_raw_frame(struct VP9Decoder *pbi, YV12_BUFFER_CONFIG *sd, vp9_ppflags_t *flags)"
  },
  {
    "label": "vp9_copy_reference_dec()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "vp9_copy_reference_dec(struct VP9Decoder *pbi, VP9_REFFRAME ref_frame_flag, YV12_BUFFER_CONFIG *sd)"
  },
  {
    "label": "vp9_set_reference_dec()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "vp9_set_reference_dec(VP9_COMMON *cm, VP9_REFFRAME ref_frame_flag, YV12_BUFFER_CONFIG *sd)"
  },
  {
    "label": "read_marker()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "read_marker(vpx_decrypt_cb decrypt_cb, void *decrypt_state, const uint8_t *data)"
  },
  {
    "label": "decrypt_cb()",
    "kind": "Method",
    "detail": "Function (uint8_t marker ;)",
    "insertText": "decrypt_cb(decrypt_state, data, &marker, 1)"
  },
  {
    "label": "vp9_decoder_create()",
    "kind": "Method",
    "detail": "Function (struct VP9Decoder*)",
    "insertText": "vp9_decoder_create(BufferPool *const pool)"
  },
  {
    "label": "vp9_decoder_remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_decoder_remove(struct VP9Decoder *pbi)"
  },
  {
    "label": "vp9_dec_alloc_row_mt_mem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_dec_alloc_row_mt_mem(RowMTWorkerData *row_mt_worker_data, VP9_COMMON *cm, int num_sbs, int max_threads, int num_jobs)"
  },
  {
    "label": "vp9_dec_free_row_mt_mem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_dec_free_row_mt_mem(RowMTWorkerData *row_mt_worker_data)"
  },
  {
    "label": "decrease_ref_count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decrease_ref_count(int idx, RefCntBuffer *const frame_bufs, BufferPool *const pool)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - frame_bufs [ idx ] . ref_count ;)",
    "insertText": "if(!frame_bufs[idx].released && frame_bufs[idx].ref_count == 0 && frame_bufs[idx].raw_frame_buffer.priv)"
  },
  {
    "label": "release_fb_cb()",
    "kind": "Method",
    "detail": "Function (pool ->)",
    "insertText": "release_fb_cb(pool->cb_priv, &frame_bufs[idx].raw_frame_buffer)"
  }
]