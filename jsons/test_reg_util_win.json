[
  {
    "label": "RegistryOverrideManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegistryOverrideManager"
  },
  {
    "label": "RegistryOverrideManagerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegistryOverrideManagerTest"
  },
  {
    "label": "ScopedRegistryKeyOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedRegistryKeyOverride"
  },
  {
    "label": "RegistryOverrideManager()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_REG_UTIL_WIN_H_ # define BASE_TEST_TEST_REG_UTIL_WIN_H_ # include<memory> # include<string> # include<vector> # include \" base / time / time . h \" # include \" base / win / registry . h \" namespace registry_util { class RegistryOverrideManager { public :)",
    "insertText": "RegistryOverrideManager()"
  },
  {
    "label": "RegistryOverrideManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegistryOverrideManager(const RegistryOverrideManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RegistryOverrideManager&)",
    "insertText": "operator(const RegistryOverrideManager&)"
  },
  {
    "label": "OverrideRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRegistry(HKEY override)"
  },
  {
    "label": "OverrideRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideRegistry(HKEY override, std::wstring* override_path)"
  },
  {
    "label": "ScopedRegistryKeyOverride()",
    "kind": "Method",
    "detail": "Function (private : class RegistryOverrideManagerTest ; class ScopedRegistryKeyOverride { public :)",
    "insertText": "ScopedRegistryKeyOverride(HKEY override, const std::wstring& key_path)"
  },
  {
    "label": "ScopedRegistryKeyOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedRegistryKeyOverride(const ScopedRegistryKeyOverride&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedRegistryKeyOverride&)",
    "insertText": "operator(const ScopedRegistryKeyOverride&)"
  },
  {
    "label": "ScopedRegistryKeyOverride()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedRegistryKeyOverride()"
  },
  {
    "label": "RegistryOverrideManager()",
    "kind": "Method",
    "detail": "Function (private : HKEY override_ ; std::wstring key_path_ ; } ;)",
    "insertText": "RegistryOverrideManager(const base::Time& timestamp, const std::wstring& test_key_root)"
  },
  {
    "label": "GenerateTempKeyPath()",
    "kind": "Method",
    "detail": "Function (base::Time timestamp_ ; std::wstring guid_ ; std::wstring test_key_root_ ; std::vector<std::unique_ptr<ScopedRegistryKeyOverride>> overrides_ ; } ; std::wstring)",
    "insertText": "GenerateTempKeyPath()"
  }
]