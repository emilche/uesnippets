[
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "HistogramDeltaSerialization()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_HISTOGRAM_DELTA_SERIALIZATION_H_ # define BASE_METRICS_HISTOGRAM_DELTA_SERIALIZATION_H_ # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / metrics / histogram_flattener . h \" # include \" base / metrics / histogram_snapshot_manager . h \" # include \" base / threading / thread_checker . h \" namespace base { class HistogramBase ; class BASE_EXPORT HistogramDeltaSerialization : public HistogramFlattener { public :)",
    "insertText": "HistogramDeltaSerialization(const std::string& caller_name)"
  },
  {
    "label": "HistogramDeltaSerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramDeltaSerialization(const HistogramDeltaSerialization&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HistogramDeltaSerialization&)",
    "insertText": "operator(const HistogramDeltaSerialization&)"
  },
  {
    "label": "HistogramDeltaSerialization()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HistogramDeltaSerialization()"
  },
  {
    "label": "PrepareAndSerializeDeltas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAndSerializeDeltas(std::vector<std::string>* serialized_deltas, bool include_persistent)"
  },
  {
    "label": "DeserializeAndAddSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeAndAddSamples(const std::vector<std::string>& serialized_deltas)"
  },
  {
    "label": "RecordDelta()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RecordDelta(const HistogramBase& histogram, const HistogramSamples& snapshot)"
  }
]