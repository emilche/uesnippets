[
  {
    "label": "second_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "second_tag"
  },
  {
    "label": "minute_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "minute_tag"
  },
  {
    "label": "hour_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hour_tag"
  },
  {
    "label": "day_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "day_tag"
  },
  {
    "label": "month_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "month_tag"
  },
  {
    "label": "year_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "year_tag"
  },
  {
    "label": "GetWeekday()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_CIVIL_TIME_H_ # define ABSL_TIME_CIVIL_TIME_H_ # include<iosfwd> # include<string> # include \" absl / base / config . h \" # include \" absl / strings / string_view . h \" # include \" absl / time / internal / cctz / include / cctz / civil_time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { struct second_tag : cctz::detail::second_tag { } ; struct minute_tag : second_tag,cctz::detail::minute_tag { } ; struct hour_tag : minute_tag,cctz::detail::hour_tag { } ; struct day_tag : hour_tag,cctz::detail::day_tag { } ; struct month_tag : day_tag,cctz::detail::month_tag { } ; struct year_tag : month_tag,cctz::detail::year_tag { } ; } using CivilSecond = time_internal::cctz::detail::civil_time<time_internal::second_tag> ; using CivilMinute = time_internal::cctz::detail::civil_time<time_internal::minute_tag> ; using CivilHour = time_internal::cctz::detail::civil_time<time_internal::hour_tag> ; using CivilDay = time_internal::cctz::detail::civil_time<time_internal::day_tag> ; using CivilMonth = time_internal::cctz::detail::civil_time<time_internal::month_tag> ; using CivilYear = time_internal::cctz::detail::civil_time<time_internal::year_tag> ; using civil_year_t = time_internal::cctz::year_t ; using civil_diff_t = time_internal::cctz::diff_t ; using Weekday = time_internal::cctz::weekday ; Weekday)",
    "insertText": "GetWeekday(CivilSecond cs)"
  },
  {
    "label": "NextWeekday()",
    "kind": "Method",
    "detail": "Function (} CivilDay)",
    "insertText": "NextWeekday(CivilDay cd, Weekday wd)"
  },
  {
    "label": "PrevWeekday()",
    "kind": "Method",
    "detail": "Function (} CivilDay)",
    "insertText": "PrevWeekday(CivilDay cd, Weekday wd)"
  },
  {
    "label": "GetYearDay()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetYearDay(CivilSecond cs)"
  },
  {
    "label": "FormatCivilTime()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "FormatCivilTime(CivilSecond c)"
  },
  {
    "label": "FormatCivilTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatCivilTime(CivilMinute c)"
  },
  {
    "label": "FormatCivilTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatCivilTime(CivilHour c)"
  },
  {
    "label": "FormatCivilTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatCivilTime(CivilDay c)"
  },
  {
    "label": "FormatCivilTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatCivilTime(CivilMonth c)"
  },
  {
    "label": "FormatCivilTime()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatCivilTime(CivilYear c)"
  },
  {
    "label": "ParseCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCivilTime(absl::string_view s, CivilSecond* c)"
  },
  {
    "label": "ParseCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCivilTime(absl::string_view s, CivilMinute* c)"
  },
  {
    "label": "ParseCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCivilTime(absl::string_view s, CivilHour* c)"
  },
  {
    "label": "ParseCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCivilTime(absl::string_view s, CivilDay* c)"
  },
  {
    "label": "ParseCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCivilTime(absl::string_view s, CivilMonth* c)"
  },
  {
    "label": "ParseCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseCivilTime(absl::string_view s, CivilYear* c)"
  },
  {
    "label": "ParseLenientCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLenientCivilTime(absl::string_view s, CivilSecond* c)"
  },
  {
    "label": "ParseLenientCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLenientCivilTime(absl::string_view s, CivilMinute* c)"
  },
  {
    "label": "ParseLenientCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLenientCivilTime(absl::string_view s, CivilHour* c)"
  },
  {
    "label": "ParseLenientCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLenientCivilTime(absl::string_view s, CivilDay* c)"
  },
  {
    "label": "ParseLenientCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLenientCivilTime(absl::string_view s, CivilMonth* c)"
  },
  {
    "label": "ParseLenientCivilTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLenientCivilTime(absl::string_view s, CivilYear* c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace time_internal { std::ostream&)",
    "insertText": "operator(std::ostream& os, CivilYear y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, CivilMonth m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, CivilDay d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, CivilHour h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, CivilMinute m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, CivilSecond s)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view s, CivilSecond* c, std::string* error)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view s, CivilMinute* c, std::string* error)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view s, CivilHour* c, std::string* error)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view s, CivilDay* c, std::string* error)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view s, CivilMonth* c, std::string* error)"
  },
  {
    "label": "AbslParseFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbslParseFlag(absl::string_view s, CivilYear* c, std::string* error)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(CivilSecond c)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(CivilMinute c)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(CivilHour c)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(CivilDay c)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(CivilMonth c)"
  },
  {
    "label": "AbslUnparseFlag()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AbslUnparseFlag(CivilYear c)"
  }
]