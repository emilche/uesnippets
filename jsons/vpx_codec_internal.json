[
  {
    "label": "vpx_codec_alg_priv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_alg_priv"
  },
  {
    "label": "vpx_codec_priv_enc_mr_cfg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_priv_enc_mr_cfg"
  },
  {
    "label": "vpx_codec_ctrl_fn_map",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_ctrl_fn_map"
  },
  {
    "label": "vpx_codec_enc_cfg_map",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_enc_cfg_map"
  },
  {
    "label": "vpx_codec_iface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_iface"
  },
  {
    "label": "vpx_codec_dec_iface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_dec_iface"
  },
  {
    "label": "vpx_codec_enc_iface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_enc_iface"
  },
  {
    "label": "vpx_codec_priv_cb_pair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_priv_cb_pair"
  },
  {
    "label": "vpx_codec_priv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_priv"
  },
  {
    "label": "vpx_rational",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rational"
  },
  {
    "label": "vpx_codec_pkt_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_pkt_list"
  },
  {
    "label": "vpx_codec_cx_pkt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_cx_pkt"
  },
  {
    "label": "vpx_internal_error_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_internal_error_info"
  },
  {
    "label": "VPX_CODEC_INTERNAL_ABI_VERSION()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_INTERNAL_VPX_CODEC_INTERNAL_H_ # define VPX_VPX_INTERNAL_VPX_CODEC_INTERNAL_H_ # include \" . . / vpx_decoder . h \" # include \" . . / vpx_encoder . h \" # include<stdarg . h> # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "VPX_CODEC_INTERNAL_ABI_VERSION(5)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef struct vpx_codec_priv_enc_mr_cfg vpx_codec_priv_enc_mr_cfg_t ; typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_init_fn_t)( vpx_codec_ctx_t *ctx, vpx_codec_priv_enc_mr_cfg_t *data)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_destroy_fn_t)(vpx_codec_alg_priv_t *ctx)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_peek_si_fn_t)(const uint8_t *data, unsigned int data_sz, vpx_codec_stream_info_t *si)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_get_si_fn_t)(vpx_codec_alg_priv_t *ctx, vpx_codec_stream_info_t *si)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_control_fn_t)(vpx_codec_alg_priv_t *ctx, va_list ap)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef const struct vpx_codec_ctrl_fn_map { int ctrl_id ; vpx_codec_control_fn_t fn ; } vpx_codec_ctrl_fn_map_t ; typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_decode_fn_t)(vpx_codec_alg_priv_t *ctx, const uint8_t *data, unsigned int data_sz, void *user_priv, long deadline)"
  },
  {
    "label": "vpx_image_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_image_t(*vpx_codec_get_frame_fn_t)(vpx_codec_alg_priv_t *ctx, vpx_codec_iter_t *iter)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_set_fb_fn_t)( vpx_codec_alg_priv_t *ctx, vpx_get_frame_buffer_cb_fn_t cb_get, vpx_release_frame_buffer_cb_fn_t cb_release, void *cb_priv)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_encode_fn_t)(vpx_codec_alg_priv_t *ctx, const vpx_image_t *img, vpx_codec_pts_t pts, unsigned long duration, vpx_enc_frame_flags_t flags, unsigned long deadline)"
  },
  {
    "label": "vpx_codec_cx_pkt_t()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "vpx_codec_cx_pkt_t(*vpx_codec_get_cx_data_fn_t)( vpx_codec_alg_priv_t *ctx, vpx_codec_iter_t *iter)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_enc_config_set_fn_t)( vpx_codec_alg_priv_t *ctx, const vpx_codec_enc_cfg_t *cfg)"
  },
  {
    "label": "vpx_fixed_buf_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_fixed_buf_t(*vpx_codec_get_global_headers_fn_t)( vpx_codec_alg_priv_t *ctx)"
  },
  {
    "label": "vpx_image_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_image_t(*vpx_codec_get_preview_frame_fn_t)( vpx_codec_alg_priv_t *ctx)"
  },
  {
    "label": "vpx_codec_err_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_codec_err_t(*vpx_codec_enc_mr_get_mem_loc_fn_t)( const vpx_codec_enc_cfg_t *cfg, void **mem_loc)"
  },
  {
    "label": "VPX_CTRL_USE_TYPE()",
    "kind": "Method",
    "detail": "Function (typedef const struct vpx_codec_enc_cfg_map { int usage ; vpx_codec_enc_cfg_t cfg ; } vpx_codec_enc_cfg_map_t ; struct vpx_codec_iface { const char* name ; int abi_version ; vpx_codec_caps_t caps ; vpx_codec_init_fn_t init ; vpx_codec_destroy_fn_t destroy ; vpx_codec_ctrl_fn_map_t* ctrl_maps ; struct vpx_codec_dec_iface { vpx_codec_peek_si_fn_t peek_si ; vpx_codec_get_si_fn_t get_si ; vpx_codec_decode_fn_t decode ; vpx_codec_get_frame_fn_t get_frame ; vpx_codec_set_fb_fn_t set_fb_fn ; } dec ; struct vpx_codec_enc_iface { int cfg_map_count ; vpx_codec_enc_cfg_map_t* cfg_maps ; vpx_codec_encode_fn_t encode ; vpx_codec_get_cx_data_fn_t get_cx_data ; vpx_codec_enc_config_set_fn_t cfg_set ; vpx_codec_get_global_headers_fn_t get_glob_hdrs ; vpx_codec_get_preview_frame_fn_t get_preview ; vpx_codec_enc_mr_get_mem_loc_fn_t mr_get_mem_loc ; } enc ; } ; typedef struct vpx_codec_priv_cb_pair { union { vpx_codec_put_frame_cb_fn_t put_frame ; vpx_codec_put_slice_cb_fn_t put_slice ; } u ; void* user_priv ; } vpx_codec_priv_cb_pair_t ; struct vpx_codec_priv { const char* err_detail ; vpx_codec_flags_t init_flags ; struct { vpx_codec_priv_cb_pair_t put_frame_cb ; vpx_codec_priv_cb_pair_t put_slice_cb ; } dec ; struct { vpx_fixed_buf_t cx_data_dst_buf ; unsigned int cx_data_pad_before ; unsigned int cx_data_pad_after ; vpx_codec_cx_pkt_t cx_data_pkt ; unsigned int total_encoders ; } enc ; } ; struct vpx_codec_priv_enc_mr_cfg { unsigned int mr_total_resolutions ; unsigned int mr_encoder_id ; struct vpx_rational mr_down_sampling_factor ; void* mr_low_res_mode_info ; } ; # undef VPX_CTRL_USE_TYPE # define)",
    "insertText": "VPX_CTRL_USE_TYPE(id, typ) \\ static VPX_INLINE typ id##__value(va_list args)"
  },
  {
    "label": "VPX_CTRL_USE_TYPE_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} # undef VPX_CTRL_USE_TYPE_DEPRECATED # define)",
    "insertText": "VPX_CTRL_USE_TYPE_DEPRECATED(id, typ) \\ static VPX_INLINE typ id##__value(va_list args)"
  },
  {
    "label": "CAST()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CAST(id, arg) id##__value(arg) #define CODEC_INTERFACE(id) \\ vpx_codec_iface_t *id(void)"
  },
  {
    "label": "vpx_codec_pkt_list_init()",
    "kind": "Method",
    "detail": "Function (\\ struct vpx_codec_pkt_list head ; \\ struct { \\ struct vpx_codec_pkt_list head ; \\ struct vpx_codec_cx_pkt pkts [ n ] ; \\ } alloc ; \\ } # define)",
    "insertText": "vpx_codec_pkt_list_init(m) \\ (m)->alloc.head.cnt = 0, \\ (m)->alloc.head.max = sizeof((m)->alloc.pkts) / sizeof((m)->alloc.pkts[0]) int vpx_codec_pkt_list_add(struct vpx_codec_pkt_list *, const struct vpx_codec_cx_pkt *)"
  },
  {
    "label": "vpx_codec_pkt_list_get()",
    "kind": "Method",
    "detail": "Function (const vpx_codec_cx_pkt_t*)",
    "insertText": "vpx_codec_pkt_list_get(struct vpx_codec_pkt_list *list, vpx_codec_iter_t *iter)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# include<stdio . h> # include<setjmp . h> struct vpx_internal_error_info { vpx_codec_err_t error_code ; int has_detail ; char detail [ 8 0 ] ; int setjmp ; jmp_buf jmp ; } ; # define CLANG_ANALYZER_NORETURN # if)",
    "insertText": "defined(__has_feature) #if __has_feature(attribute_analyzer_noreturn) #undef CLANG_ANALYZER_NORETURN #define CLANG_ANALYZER_NORETURN __attribute__((analyzer_noreturn)) #endif #endif #define LIBVPX_FORMAT_PRINTF(string_index, first_to_check) #if defined(__has_attribute) #if __has_attribute(format) #undef LIBVPX_FORMAT_PRINTF #define LIBVPX_FORMAT_PRINTF(string_index, first_to_check) \\ __attribute__((__format__(__printf__, string_index, first_to_check))) #endif #endif void vpx_internal_error(struct vpx_internal_error_info *info, vpx_codec_err_t error, const char *fmt, ...) LIBVPX_FORMAT_PRINTF(3, 4)"
  }
]