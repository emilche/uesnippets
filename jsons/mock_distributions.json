[
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_MOCK_DISTRIBUTIONS_H_ # define ABSL_RANDOM_MOCK_DISTRIBUTIONS_H_ # include<limits> # include<type_traits> # include<utility> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / distributions . h \" # include \" absl / random / internal / mock_overload_set . h \" # include \" absl / random / mocking_bit_gen . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<R> using MockUniform = random_internal::MockOverloadSet<random_internal::UniformDistributionWrapper<R>,)",
    "insertText": "R(IntervalClosedOpenTag, MockingBitGen&, R, R), R(IntervalClosedClosedTag, MockingBitGen&, R, R), R(IntervalOpenOpenTag, MockingBitGen&, R, R), R(IntervalOpenClosedTag, MockingBitGen&, R, R), R(MockingBitGen&, R, R), R(MockingBitGen&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using MockBernoulli = random_internal::MockOverloadSet<absl::bernoulli_distribution,)",
    "insertText": "bool(MockingBitGen&, double)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (template<RealType> using MockBeta = random_internal::MockOverloadSet<absl::beta_distribution<RealType>,)",
    "insertText": "RealType(MockingBitGen&, RealType, RealType)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (template<RealType> using MockExponential = random_internal::MockOverloadSet<absl::exponential_distribution<RealType>,)",
    "insertText": "RealType(MockingBitGen&, RealType)"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (template<IntType> using MockLogUniform = random_internal::MockOverloadSet<absl::log_uniform_int_distribution<IntType>,)",
    "insertText": "IntType(MockingBitGen&, IntType, IntType, IntType)"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (template<IntType> using MockPoisson = random_internal::MockOverloadSet<absl::poisson_distribution<IntType>,)",
    "insertText": "IntType(MockingBitGen&, double)"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (template<IntType> using MockZipf = random_internal::MockOverloadSet<absl::zipf_distribution<IntType>,)",
    "insertText": "IntType(MockingBitGen&, IntType, double, double)"
  }
]