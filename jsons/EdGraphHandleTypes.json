[
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FEdGraphNodeHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EdGraph / EdGraph . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" UObject / SoftObjectPtr . h \" struct FEdGraphNodeHandle { public :)",
    "insertText": "FEdGraphNodeHandle(const UEdGraphNode* InNode) : Graph(InNode ? InNode->GetGraph() : nullptr) , NodeName(InNode ? InNode->GetFName() : NAME_None)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FEdGraphNodeHandle& InHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEdGraphNodeHandle& InOther)"
  },
  {
    "label": "GetGraph()",
    "kind": "Method",
    "detail": "Function (} const UEdGraph*)",
    "insertText": "GetGraph()"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} UEdGraphNode*)",
    "insertText": "GetNode()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const TObjectPtr<UEdGraphNode>* Node = EdGraph -> Nodes .)",
    "insertText": "FindByPredicate([this](TObjectPtr<UEdGraphNode> Node) -> bool { return Node->GetFName() == NodeName; })"
  },
  {
    "label": "FEdGraphPinHandle()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } private : TSoftObjectPtr<UEdGraph> Graph ; FName NodeName ; } ; struct FEdGraphPinHandle : FEdGraphNodeHandle { public :)",
    "insertText": "FEdGraphPinHandle(const UEdGraphPin* InPin) : FEdGraphNodeHandle(InPin ? InPin->GetOwningNode() : nullptr) , PinIndex(INDEX_NONE)"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (PinName = InPin ->)",
    "insertText": "GetFName()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (PinDirection = InPin -> Direction .)",
    "insertText": "GetValue()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PersistentPinGuid = InPin -> PersistentGuid ;)",
    "insertText": "if(const UEdGraphNode* Node = InPin->GetOwningNode())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (PinIndex = Node -> Pins .)",
    "insertText": "Find((UEdGraphPin*)InPin)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } else { PinDirection = EEdGraphPinDirection::EGPD_Input ; } } uint32)",
    "insertText": "GetTypeHash(const FEdGraphPinHandle& InHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEdGraphPinHandle& InOther)"
  },
  {
    "label": "GetPin()",
    "kind": "Method",
    "detail": "Function (} UEdGraphPin*)",
    "insertText": "GetPin()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const UEdGraphPin* const* Pin = EdNode -> Pins .)",
    "insertText": "FindByPredicate([this](UEdGraphPin* Pin) -> bool { return Pin->PersistentGuid.IsValid() && Pin->PersistentGuid == PersistentPinGuid && Pin->Direction == PinDirection; })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Pin =& EdNode -> Pins [ PinIndex ] ; } })",
    "insertText": "if(Pin == nullptr)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (Pin = EdNode -> Pins .)",
    "insertText": "FindByPredicate([this](UEdGraphPin* Pin) -> bool { return Pin->GetFName() == PinName && Pin->Direction == PinDirection; })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Pin)"
  }
]