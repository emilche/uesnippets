[
  {
    "label": "InstrProfReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrProfReader"
  },
  {
    "label": "InstrProfIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrProfIterator"
  },
  {
    "label": "TextInstrProfReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TextInstrProfReader"
  },
  {
    "label": "IntPtrT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntPtrT"
  },
  {
    "label": "RawInstrProfReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RawInstrProfReader"
  },
  {
    "label": "ProfileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProfileData"
  },
  {
    "label": "RawHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawHeader"
  },
  {
    "label": "IntT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "InstrProfLookupTrait",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrProfLookupTrait"
  },
  {
    "label": "IndexedInstrProfReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexedInstrProfReader"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PROFILEDATA_INSTRPROFREADER_H # define LLVM_PROFILEDATA_INSTRPROFREADER_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringExtras . h \" # include \" llvm / ProfileData / InstrProf . h \" # include \" llvm / Support / EndianStream . h \" # include \" llvm / Support / ErrorOr . h \" # include \" llvm / Support / LineIterator . h \" # include \" llvm / Support / MemoryBuffer . h \" # include \" llvm / Support / OnDiskHashTable . h \" # include<iterator> namespace llvm { class InstrProfReader ; class InstrProfIterator { InstrProfReader* Reader ; InstrProfRecord Record ; void)",
    "insertText": "Increment()"
  },
  {
    "label": "InstrProfIterator()",
    "kind": "Method",
    "detail": "Function (public : using iterator_category = std::input_iterator_tag ; using value_type = InstrProfRecord ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "InstrProfIterator() : Reader(nullptr)"
  },
  {
    "label": "InstrProfIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InstrProfIterator(InstrProfReader *Reader) : Reader(Reader)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InstrProfIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "InstrProfReader()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "InstrProfReader()"
  },
  {
    "label": "readHeader()",
    "kind": "Method",
    "detail": "Function (} std::error_code)",
    "insertText": "readHeader()"
  },
  {
    "label": "readNextRecord()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "readNextRecord(InstrProfRecord &Record)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (InstrProfIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} InstrProfIterator)",
    "insertText": "end()"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} protected : std::error_code)",
    "insertText": "error(std::error_code EC)"
  },
  {
    "label": "success()",
    "kind": "Method",
    "detail": "Function (LastError = EC ; return EC ; } std::error_code)",
    "insertText": "success()"
  },
  {
    "label": "isEOF()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "isEOF()"
  },
  {
    "label": "getError()",
    "kind": "Method",
    "detail": "Function (} std::error_code)",
    "insertText": "getError()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<InstrProfReader>>)",
    "insertText": "create(std::unique_ptr<MemoryBuffer> Buffer)"
  },
  {
    "label": "TextInstrProfReader()",
    "kind": "Method",
    "detail": "Function (} ; class TextInstrProfReader : public InstrProfReader { private : std::unique_ptr<MemoryBuffer> DataBuffer ; line_iterator Line ;)",
    "insertText": "TextInstrProfReader(const TextInstrProfReader &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TextInstrProfReader&)",
    "insertText": "operator(const TextInstrProfReader &)"
  },
  {
    "label": "TextInstrProfReader()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TextInstrProfReader(std::unique_ptr<MemoryBuffer> DataBuffer_) : DataBuffer(std::move(DataBuffer_)), Line(*DataBuffer, true, '#')"
  },
  {
    "label": "RawInstrProfReader()",
    "kind": "Method",
    "detail": "Function (} ; template<class IntPtrT> class RawInstrProfReader : public InstrProfReader { private : std::unique_ptr<MemoryBuffer> DataBuffer ; struct ProfileData { const uint32_t NameSize ; const uint32_t NumCounters ; const uint64_t FuncHash ; const IntPtrT NamePtr ; const IntPtrT CounterPtr ; } ; struct RawHeader { const uint64_t Magic ; const uint64_t Version ; const uint64_t DataSize ; const uint64_t CountersSize ; const uint64_t NamesSize ; const uint64_t CountersDelta ; const uint64_t NamesDelta ; } ; bool ShouldSwapBytes ; uint64_t CountersDelta ; uint64_t NamesDelta ; const ProfileData* Data ; const ProfileData* DataEnd ; const uint64_t* CountersStart ; const char* NamesStart ; const char* ProfileEnd ;)",
    "insertText": "RawInstrProfReader(const RawInstrProfReader &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RawInstrProfReader&)",
    "insertText": "operator(const RawInstrProfReader &)"
  },
  {
    "label": "RawInstrProfReader()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RawInstrProfReader(std::unique_ptr<MemoryBuffer> DataBuffer) : DataBuffer(std::move(DataBuffer))"
  },
  {
    "label": "hasFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasFormat(const MemoryBuffer &DataBuffer)"
  },
  {
    "label": "readNextHeader()",
    "kind": "Method",
    "detail": "Function (private : std::error_code)",
    "insertText": "readNextHeader(const char *CurrentPos)"
  },
  {
    "label": "readHeader()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "readHeader(const RawHeader &Header)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (template<class IntT> IntT)",
    "insertText": "swap(IntT Int)"
  },
  {
    "label": "getCounter()",
    "kind": "Method",
    "detail": "Function (} const uint64_t*)",
    "insertText": "getCounter(IntPtrT CounterPtr)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t)",
    "insertText": "Offset(swap(CounterPtr) - CountersDelta) / sizeof(uint64_t)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t)",
    "insertText": "Offset(swap(NamePtr) - NamesDelta) / sizeof(char)"
  },
  {
    "label": "EqualKey()",
    "kind": "Method",
    "detail": "Function (} typedef ArrayRef<InstrProfRecord> data_type ; typedef StringRef internal_key_type ; typedef StringRef external_key_type ; typedef uint64_t hash_value_type ; typedef uint64_t offset_type ; bool)",
    "insertText": "EqualKey(StringRef A, StringRef B)"
  },
  {
    "label": "ReadKeyDataLength()",
    "kind": "Method",
    "detail": "Function (std::pair<offset_type,offset_type>)",
    "insertText": "ReadKeyDataLength(const unsigned char *&D)"
  },
  {
    "label": "unaligned()",
    "kind": "Method",
    "detail": "Function (using namespace support ; offset_type KeyLen = endian::readNext<offset_type,little,)",
    "insertText": "unaligned(D)"
  },
  {
    "label": "ReadKey()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "ReadKey(const unsigned char *D, offset_type N)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (} data_type)",
    "insertText": "ReadData(StringRef K, const unsigned char *D, offset_type N)"
  },
  {
    "label": "IndexedInstrProfReader()",
    "kind": "Method",
    "detail": "Function (} ; typedef OnDiskIterableChainedHashTable<InstrProfLookupTrait> InstrProfReaderIndex ; class IndexedInstrProfReader : public InstrProfReader { private : std::unique_ptr<MemoryBuffer> DataBuffer ; std::unique_ptr<InstrProfReaderIndex> Index ; InstrProfReaderIndex::data_iterator RecordIterator ; uint64_t FormatVersion ; uint64_t MaxFunctionCount ;)",
    "insertText": "IndexedInstrProfReader(const IndexedInstrProfReader &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IndexedInstrProfReader&)",
    "insertText": "operator(const IndexedInstrProfReader &)"
  },
  {
    "label": "IndexedInstrProfReader()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "IndexedInstrProfReader(std::unique_ptr<MemoryBuffer> DataBuffer) : DataBuffer(std::move(DataBuffer)), Index(nullptr)"
  },
  {
    "label": "getFunctionCounts()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getFunctionCounts(StringRef FuncName, uint64_t FuncHash, std::vector<uint64_t> &Counts)"
  },
  {
    "label": "getMaximumFunctionCount()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getMaximumFunctionCount()"
  }
]