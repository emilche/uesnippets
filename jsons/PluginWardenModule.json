[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FPluginWardenModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPluginWardenModule"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Account / IPortalUser . h \" # include \" Containers / UnrealString . h \" # include \" IPluginWardenModule . h \" # include \" Logging / LogMacros . h \" # include \" Templates / Function . h \" class FText ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(PluginWarden, Log, All)"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (class FPluginWardenModule : public IPluginWardenModule { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "CheckEntitlementForPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckEntitlementForPlugin(const FText& PluginFriendlyName, const FString& PluginItemId, const FString& PluginOfferId, const EEntitlementCacheLevelRequest CacheLevel, const FText& UnauthorizedMessageOverride, EUnauthorizedErrorHandling UnauthorizedErrorHandling, TFunction<void()> AuthorizedCallback)"
  },
  {
    "label": "CheckEntitlementForPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckEntitlementForPlugin(const FText& PluginFriendlyName, const FString& PluginItemId, const FString& PluginOfferId, const FText& UnauthorizedMessageOverride, EUnauthorizedErrorHandling UnauthorizedErrorHandling, TFunction<void()> AuthorizedCallback)"
  },
  {
    "label": "RunAuthorizationPipeline()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "RunAuthorizationPipeline(const FText& PluginFriendlyName, const FString& PluginItemId, const FString& PluginOfferId, const EEntitlementCacheLevelRequest CacheLevel)"
  }
]