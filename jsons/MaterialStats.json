[
  {
    "label": "FHLSLSyntaxHighlighterMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLSLSyntaxHighlighterMarshaller"
  },
  {
    "label": "FShaderStatsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderStatsInfo"
  },
  {
    "label": "FContent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContent"
  },
  {
    "label": "FMaterialShaderEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderEntry"
  },
  {
    "label": "FShaderPlatformSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPlatformSettings"
  },
  {
    "label": "FInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceData"
  },
  {
    "label": "FPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformData"
  },
  {
    "label": "SScrollBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBox"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FMaterialStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStats"
  },
  {
    "label": "FMaterialStatsUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStatsUtils"
  },
  {
    "label": "SMaterialEditorStatsWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMaterialEditorStatsWidget"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLogListing"
  },
  {
    "label": "FMaterialStatsGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStatsGrid"
  },
  {
    "label": "UMaterialStatsOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialStatsOptions"
  },
  {
    "label": "IMaterialEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMaterialEditor"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / Material . h \" # include \" MaterialStatsCommon . h \" # include \" UObject / GCObject . h \" # include \" Preferences / MaterialStatsOptions . h \" class FHLSLSyntaxHighlighterMarshaller ; struct FShaderStatsInfo { struct FContent { FString StrDescription ; FString StrDescriptionLong ; } ; TMap<ERepresentativeShader,FContent> ShaderInstructionCount ; TMap<ERepresentativeShader,FContent> GenericShaderStatistics ; FContent SamplersCount ; FContent InterpolatorsCount ; FContent TextureSampleCount ; FContent VirtualTextureLookupCount ; FContent ShaderCount ; FContent PreShaderCount ; FContent LWCUsage ; FString StrShaderErrors ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ShaderInstructionCount .)",
    "insertText": "Empty()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (SamplersCount . StrDescription =)",
    "insertText": "TEXT(\"Compiling...\")"
  },
  {
    "label": "HasErrors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasErrors()"
  },
  {
    "label": "CheckShaders()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMaterialShaderEntry { FShaderId ShaderId ; FString Text ; } ; struct FShaderPlatformSettings { public : struct FInstanceData { FMaterialResourceStats* MaterialResourcesStats ; TArray<TSharedPtr<FMaterialShaderEntry>> ArrShaderEntries ; FMaterialShaderEntry ComboBoxSelectedEntry ; bool bUpdateShaderCode = false ; FText ShaderCode ; bool bCompilingShaders = false ; bool bNeedShaderRecompilation = false ; bool bOnlyCompileMostComplexShader = false ; bool bNeedToWarnAboutCompilationErrors = false ; FShaderStatsInfo ShaderStatsInfo ; } ; struct FPlatformData { TArray<FInstanceData> Instances ; bool bExtractStats = false ; bool bExtractCode = false ; TSharedPtr<class SScrollBox> CodeScrollBox ; TWeakPtr<class SDockTab> CodeViewerTab ; double LastTimeCompilationRequested = 0 . 0 ; } ; private : FPlatformData PlatformData [ EMaterialQualityLevel::Num ] ; EPlatformCategoryType PlatformType ; EShaderPlatform PlatformShaderID ; FName PlatformName ; FName PlatformNameID ; FString PlatformDescription ; bool bPresentInGrid = false ; bool bAlwaysOn = false ; bool bAllowCodeView = false ; bool bAllowPresenceInGrid = false ; UMaterial* Material = nullptr ; UMaterialInstance* MaterialInstance = nullptr ; TArray<TObjectPtr<UMaterialInstance>> DerivedMaterialInstances ; private : bool)",
    "insertText": "CheckShaders(bool bIgnoreCooldown)"
  },
  {
    "label": "AllocateMaterialResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateMaterialResources()"
  },
  {
    "label": "ClearResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResources()"
  },
  {
    "label": "FShaderPlatformSettings()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShaderPlatformSettings(const EPlatformCategoryType _PlatformType, const EShaderPlatform _ShaderPlatformID, const FName _Name, const bool _bAllowPresenceInGrid, const bool _bAllowCodeView, const FString& _Description, const bool bAlwaysOn)"
  },
  {
    "label": "FShaderPlatformSettings()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderPlatformSettings()"
  },
  {
    "label": "SetExtractStatsFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtractStatsFlag(const EMaterialQualityLevel::Type QualityType, const bool bValue)"
  },
  {
    "label": "GetSelectedShaderViewComboText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedShaderViewComboText(EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "OnShaderViewComboSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderViewComboSelectionChanged(TSharedPtr<FMaterialShaderEntry> Item, EMaterialQualityLevel::Type QualityType, const int32 InstanceIndex)"
  },
  {
    "label": "GetShaderCode()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetShaderCode(const EMaterialQualityLevel::Type QualityType, const int32 InstanceIndex)"
  },
  {
    "label": "GetShadersStats()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShadersStats()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(UMaterial *InBaseMaterial, UMaterialInstance *InBaseMaterialInstance, const TArray<TObjectPtr<UMaterialInstance>>& InDerivedMaterialInstances)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update()"
  },
  {
    "label": "CachePendingShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CachePendingShaders()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using TMapPlatformSettings = TMap<EPlatformCategoryType,TArray<TSharedPtr<FShaderPlatformSettings>>> ; using TMapPlatformTypeSettings = TMap<EShaderPlatform,TSharedPtr<FShaderPlatformSettings>> ; class FMaterialStats : public FGCObject,public TSharedFromThis<FMaterialStats> { class FMaterialStatsUtils ; TMapPlatformTypeSettings ShaderPlatformStatsDB ; TMapPlatformSettings PlatformTypeDB ; TSharedPtr<class SMaterialEditorStatsWidget> GridStatsWidget ; TSharedPtr<class SWidget> OldStatsWidget ; TSharedPtr<class IMessageLogListing> OldStatsListing ; TSharedPtr<class FMaterialStatsGrid> StatsGrid ; bool bArrStatsQualitySelector [ EMaterialQualityLevel::Num ] = { false } ; bool bArrStatsQualitySelectorAlwaysOn [ EMaterialQualityLevel::Num ] = { false } ; EMaterialStatsDerivedMIOption MaterialStatsDerivedMIOption = EMaterialStatsDerivedMIOption::CompileOnly ; TArray<FString> MaterialNames ; const FName StatsTabId ; const FName OldStatsTabId ; const FName HLSLCodeTabId ; bool bShowStats = false ; bool bShowOldStats = false ; TWeakPtr<SDockTab> StatsTab ; TWeakPtr<SDockTab> OldStatsTab ; TWeakPtr<SDockTab> HLSLTab ; FString HLSLCode ; TObjectPtr<class UMaterialStatsOptions> Options = nullptr ; class IMaterialEditor* MaterialEditor = nullptr ; class UMaterialInterface* MaterialInterface = nullptr ; TArray<TObjectPtr<UMaterialInstance>> DerivedMaterialInstances ; TArray<FString> LastGridMessages ; double LastGridMessagesUpdate = 0 . 0 ; bool bNeedsGridRefresh = false ; TMulticastDelegate<)",
    "insertText": "void()"
  },
  {
    "label": "AddShaderPlatform()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FHLSLSyntaxHighlighterMarshaller> SyntaxHighlighter ; private : TSharedPtr<FShaderPlatformSettings>)",
    "insertText": "AddShaderPlatform(const EPlatformCategoryType PlatformType, const EShaderPlatform PlatformID, const FName PlatformName, const bool bAllowCodeView, const FString& Description, const bool bAlwaysOn = false)"
  },
  {
    "label": "BuildShaderPlatformDB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildShaderPlatformDB(const bool bAllowIgnoringCompilationErrors)"
  },
  {
    "label": "SpawnTab_ShaderCode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SDockTab>)",
    "insertText": "SpawnTab_ShaderCode(const class FSpawnTabArgs& Args, const EShaderPlatform PlatformID, const EMaterialQualityLevel::Type QualityType, const int32 InstanceIndex)"
  },
  {
    "label": "SpawnTab_HLSLCode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SDockTab>)",
    "insertText": "SpawnTab_HLSLCode(const class FSpawnTabArgs& Args)"
  },
  {
    "label": "BuildShaderCodeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SScrollBox>)",
    "insertText": "BuildShaderCodeWidget(TFunction<FText(void)>&& InShaderCodeCallback)"
  },
  {
    "label": "MakeTabName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "MakeTabName(const EPlatformCategoryType PlatformType, const EShaderPlatform ShaderPlatformType, const EMaterialQualityLevel::Type QualityLevel, const int32 InstanceIndex)"
  },
  {
    "label": "BuildStatsTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStatsTab()"
  },
  {
    "label": "SpawnTab_Stats()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Stats(const FSpawnTabArgs& Args)"
  },
  {
    "label": "BuildOldStatsTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOldStatsTab()"
  },
  {
    "label": "SpawnTab_OldStats()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_OldStats(const FSpawnTabArgs& Args)"
  },
  {
    "label": "BuildViewShaderCodeMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildViewShaderCodeMenus()"
  },
  {
    "label": "ToggleStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleStats()"
  },
  {
    "label": "ToggleOldStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOldStats()"
  },
  {
    "label": "SetShowStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowStats(const bool bValue)"
  },
  {
    "label": "SetShowOldStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowOldStats(const bool bValue)"
  },
  {
    "label": "SetShaderPlatformUseCodeView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderPlatformUseCodeView(const EShaderPlatform PlatformID, const EMaterialQualityLevel::Type Quality, const bool bValue)"
  },
  {
    "label": "IsCodeViewWindowActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCodeViewWindowActive()"
  },
  {
    "label": "RefreshStatsGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshStatsGrid()"
  },
  {
    "label": "DisplayStatsGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayStatsGrid(const bool bShow)"
  },
  {
    "label": "DisplayOldStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayOldStats(const bool bShow)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const bool bAllowIgnoringCompilationErrors)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings()"
  },
  {
    "label": "ComputeGridWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGridWarnings()"
  },
  {
    "label": "ExtractHLSLCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractHLSLCode()"
  },
  {
    "label": "FMaterialStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialStats()"
  },
  {
    "label": "GetGridStatsTabName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGridStatsTabName()"
  },
  {
    "label": "GetGridOldStatsTabName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGridOldStatsTabName()"
  },
  {
    "label": "SwitchStatsQualityFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwitchStatsQualityFlag(const EMaterialQualityLevel::Type Quality)"
  },
  {
    "label": "SetStatusQualityFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatusQualityFlag(const EMaterialQualityLevel::Type Quality, const bool bValue)"
  },
  {
    "label": "SetMaterialStatsDerivedMIOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialStatsDerivedMIOption(const EMaterialStatsDerivedMIOption value)"
  },
  {
    "label": "SwitchShaderPlatformUseStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwitchShaderPlatformUseStats(const EShaderPlatform PlatformID)"
  },
  {
    "label": "SetMaterialsDisplayNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialsDisplayNames(const TArray<FString>& Names)"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPlatformName(const EShaderPlatform InEnumValue)"
  },
  {
    "label": "GetShaderPlatformID()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetShaderPlatformID(const FName InName)"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FShaderPlatformSettings>)",
    "insertText": "GetPlatformSettings(const EShaderPlatform PlatformID)"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FShaderPlatformSettings>)",
    "insertText": "GetPlatformSettings(const FName PlatformName)"
  },
  {
    "label": "GetShaderCode()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetShaderCode(const EShaderPlatform PlatformID, const EMaterialQualityLevel::Type QualityType, const int32 InstanceIndex)"
  },
  {
    "label": "SignalMaterialChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalMaterialChanged()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "RegisterTabs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterTabs()"
  },
  {
    "label": "UnregisterTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabs()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize(IMaterialEditor *MaterialEditor, const bool bShowMaterialInstancesMenu, const bool bAllowIgnoringCompilationErrors)"
  },
  {
    "label": "CacheAndCompilePendingShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheAndCompilePendingShaders()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(UMaterial *InMaterial, const TArray<TObjectPtr<UMaterialInstance>>& InDerivedMaterialInstances)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(UMaterialInstance *InMaterialInstance)"
  },
  {
    "label": "AnyNewCompilationErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyNewCompilationErrors(const int32 StartingFromInstanceIndex = 0)"
  },
  {
    "label": "GetPlatformsDB()",
    "kind": "Method",
    "detail": "Function (} ; const TMapPlatformTypeSettings&)",
    "insertText": "GetPlatformsDB()"
  },
  {
    "label": "GetMaterialName()",
    "kind": "Method",
    "detail": "Function (MaterialNames = Names ; } FString)",
    "insertText": "GetMaterialName(const int32 InstanceIndex)"
  },
  {
    "label": "GetStatsQualityFlagAlwaysOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetStatsQualityFlagAlwaysOn(const EMaterialQualityLevel::Type Quality)"
  },
  {
    "label": "GetMaterialStatsDerivedMIOption()",
    "kind": "Method",
    "detail": "Function (} EMaterialStatsDerivedMIOption)",
    "insertText": "GetMaterialStatsDerivedMIOption()"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "GetPlatformData()",
    "kind": "Method",
    "detail": "Function (FPlatformData& SomePlatformData =)",
    "insertText": "GetPlatformData(QualityLevel)"
  },
  {
    "label": "GetCodeViewerTab()",
    "kind": "Method",
    "detail": "Function (SomePlatformData . CodeViewerTab = Tab ; } TWeakPtr<class SDockTab>)",
    "insertText": "GetCodeViewerTab(const EMaterialQualityLevel::Type QualityLevel)"
  },
  {
    "label": "GetInstanceData()",
    "kind": "Method",
    "detail": "Function (auto& InstanceData =)",
    "insertText": "GetInstanceData(QualityLevel, InstanceIndex)"
  },
  {
    "label": "IsCodeViewAllowed()",
    "kind": "Method",
    "detail": "Function (PlatformData [ QualityType ] . bExtractStats = bValue ; } bool)",
    "insertText": "IsCodeViewAllowed()"
  },
  {
    "label": "IsPresentInGrid()",
    "kind": "Method",
    "detail": "Function (PlatformData [ Quality ] . bExtractCode = bValue ; } bool)",
    "insertText": "IsPresentInGrid()"
  },
  {
    "label": "SetPresentInGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPresentInGrid(!IsPresentInGrid())"
  },
  {
    "label": "SetPresentInGrid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPresentInGrid(const bool bValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPresentInGrid = bValue ; } else)",
    "insertText": "if(bValue == true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPresentInGrid = bValue ; } } else {)",
    "insertText": "if(bValue == false)"
  },
  {
    "label": "SetNeedShaderCompilation()",
    "kind": "Method",
    "detail": "Function (bPresentInGrid = bValue ; } } } void)",
    "insertText": "SetNeedShaderCompilation(const EMaterialQualityLevel::Type QualityLevel, const bool bValue, const bool bOnlyCompileDerivedMI)"
  },
  {
    "label": "GetInstanceData()",
    "kind": "Method",
    "detail": "Function (auto& Instance =)",
    "insertText": "GetInstanceData(QualityLevel, InstancesIndex)"
  },
  {
    "label": "bOnlyCompileMostComplexShader()",
    "kind": "Method",
    "detail": "Function (Instance . bNeedShaderRecompilation = bValue ; Instance .)",
    "insertText": "bOnlyCompileMostComplexShader(InstancesIndex > 0)"
  },
  {
    "label": "GetPlatformShaderType()",
    "kind": "Method",
    "detail": "Function (} } EShaderPlatform)",
    "insertText": "GetPlatformShaderType()"
  }
]