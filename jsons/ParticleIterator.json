[
  {
    "label": "TConstParticleView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstParticleView"
  },
  {
    "label": "TParticleView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticleView"
  },
  {
    "label": "TConstHandleView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstHandleView"
  },
  {
    "label": "THandleView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandleView"
  },
  {
    "label": "TConstHandleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstHandleIterator"
  },
  {
    "label": "THandleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THandleIterator"
  },
  {
    "label": "TSOAView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSOAView"
  },
  {
    "label": "TConstParticleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstParticleIterator"
  },
  {
    "label": "TParticleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticleIterator"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / ParallelFor . h \" # include \" Chaos / Particles . h \" # include \" ChaosStats . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"ParticlesSequentialFor\"), STAT_ParticlesSequentialFor, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"ParticlesParallelFor\"), STAT_ParticlesParallelFor, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"ParticleViewParallelForImp\"), STAT_ParticleViewParallelForImp, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"HandleViewParallelForImp\"), STAT_HandleViewParallelForImp, STATGROUP_Chaos)"
  },
  {
    "label": "ParticleViewParallelForImp()",
    "kind": "Method",
    "detail": "Function (namespace Chaos { template<TSOA> class TConstParticleView ; template<TSOA> class TParticleView ; template<TSOA> class TConstHandleView ; template<TSOA> class THandleView ; template<TParticleView,ContextCreatorType,Lambda> void)",
    "insertText": "ParticleViewParallelForImp(const TParticleView& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "HandleViewParallelForImp()",
    "kind": "Method",
    "detail": "Function (template<THandleView,ContextCreatorType,Lambda> void)",
    "insertText": "HandleViewParallelForImp(const THandleView& HandleView, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "ParticlesParallelForImp()",
    "kind": "Method",
    "detail": "Function (template<TSOA,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesParallelForImp(const TConstHandleView<TSOA>& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "HandleViewParallelForImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewParallelForImp(Particles, ContextCreator, Func)"
  },
  {
    "label": "ParticlesParallelForImp()",
    "kind": "Method",
    "detail": "Function (} template<TSOA,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesParallelForImp(const THandleView<TSOA>& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "ParticlesParallelForImp()",
    "kind": "Method",
    "detail": "Function (} template<TSOA,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesParallelForImp(const TConstParticleView<TSOA>& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "ParticleViewParallelForImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParticleViewParallelForImp(Particles, ContextCreator, Func)"
  },
  {
    "label": "ParticlesParallelForImp()",
    "kind": "Method",
    "detail": "Function (} template<TSOA,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesParallelForImp(const TParticleView<TSOA>& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "ParticlesParallelForImp()",
    "kind": "Method",
    "detail": "Function (} template<TParticle,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesParallelForImp(const TArray<TParticle>& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Particles .)",
    "insertText": "Num()"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Num, [&Func, &Particles](const int32 Index) { Func(Particles[Index], Index); })"
  },
  {
    "label": "ParticlesSequentialFor()",
    "kind": "Method",
    "detail": "Function (} template<TView,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesSequentialFor(const TView& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParticlesSequentialFor)"
  },
  {
    "label": "ContextCreator()",
    "kind": "Method",
    "detail": "Function (const int32 ContextIndex =)",
    "insertText": "ContextCreator(0, 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ;)",
    "insertText": "for(auto& Particle : Particles)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Particle, Index++, ContextIndex)"
  },
  {
    "label": "ParticlesParallelFor()",
    "kind": "Method",
    "detail": "Function (} } template<TView,ContextCreatorType,Lambda> void)",
    "insertText": "ParticlesParallelFor(const TView& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func, bool bForceSingleThreaded = false)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParticlesParallelFor)"
  },
  {
    "label": "ParticlesParallelForImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParticlesParallelForImp(Particles, ContextCreator, Func)"
  },
  {
    "label": "ParticlesSequentialFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ParticlesSequentialFor(Particles, ContextCreator, Func)"
  },
  {
    "label": "TConstHandleIterator()",
    "kind": "Method",
    "detail": "Function (} } template<TSOA> class TConstHandleIterator { public : using THandle = TSOA::THandleType ;)",
    "insertText": "TConstHandleIterator() : Handles(nullptr) , CurIdx(0)"
  },
  {
    "label": "TConstHandleIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstHandleIterator(const TArray<THandle*>& InHandles) : Handles(&InHandles) , CurIdx(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } operator)",
    "insertText": "bool()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bFindNextHandle = true ;)",
    "insertText": "while(bFindNextHandle)"
  },
  {
    "label": "CurrentIsLightWeightDisabled()",
    "kind": "Method",
    "detail": "Function (+ + CurIdx ; bFindNextHandle =)",
    "insertText": "CurrentIsLightWeightDisabled()"
  },
  {
    "label": "ComputeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ComputeSize()"
  },
  {
    "label": "THandleIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<TSOA> class THandleIterator : public TConstHandleIterator<TSOA> { public : using Base = TConstHandleIterator<TSOA> ; using Base::THandle ; using Base::Handles ; using Base::CurIdx ;)",
    "insertText": "THandleIterator() : Base()"
  },
  {
    "label": "THandleIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleIterator(const TArray<THandle*>& InHandles) : Base(InHandles)"
  },
  {
    "label": "MakeConstHandleIterator()",
    "kind": "Method",
    "detail": "Function (} template<TSOA2> class THandleView ; } ; template<THandle> TConstHandleIterator<THandle::TSOAType>)",
    "insertText": "MakeConstHandleIterator(const TArray<THandle*>& Handles)"
  },
  {
    "label": "MakeHandleIterator()",
    "kind": "Method",
    "detail": "Function (} template<THandle> THandleIterator<THandle::TSOAType>)",
    "insertText": "MakeHandleIterator(const TArray<THandle*>& Handles)"
  },
  {
    "label": "TConstHandleView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> class TConstHandleView { public : using THandle = TSOA::THandleType ;)",
    "insertText": "TConstHandleView()"
  },
  {
    "label": "TConstHandleView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstHandleView(const TArray<THandle*>& InHandles) : Handles(InHandles)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} TConstHandleIterator<TSOA>)",
    "insertText": "Begin()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TConstHandleIterator<TSOA>)",
    "insertText": "begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} TConstHandleIterator<TSOA>)",
    "insertText": "End()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TConstHandleIterator<TSOA>)",
    "insertText": "end()"
  },
  {
    "label": "HandleViewParallelForImp()",
    "kind": "Method",
    "detail": "Function (} template<TParticleView,ContextCreatorType,Lambda> void)",
    "insertText": "HandleViewParallelForImp(const TParticleView& Particles, const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (template<ContextCreatorType,Lambda> void)",
    "insertText": "ParallelFor(const ContextCreatorType& ContextCreator, const Lambda& Func)"
  },
  {
    "label": "ParticlesParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParticlesParallelFor(*this, ContextCreator, Func)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "ParallelFor(const Lambda& Func)"
  },
  {
    "label": "EmptyContextCreator()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EmptyContextCreator(int32 WorkerIndex, int32 NumWorkers)"
  },
  {
    "label": "ParticlesParallelFor()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ParticlesParallelFor(*this, EmptyContextCreator, ContextFunc)"
  },
  {
    "label": "THandleView()",
    "kind": "Method",
    "detail": "Function (} protected : const TArray<THandle*>& Handles ; } ; template<TSOA> class THandleView : public TConstHandleView<TSOA> { public : using Base = TConstHandleView<TSOA> ; using Base::THandle ; using Base::Handles ; using Base::Num ;)",
    "insertText": "THandleView() : Base()"
  },
  {
    "label": "THandleView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THandleView(const TArray<THandle*>& InHandles) : Base(InHandles)"
  },
  {
    "label": "MakeConstHandleView()",
    "kind": "Method",
    "detail": "Function (} } ; template<THandle> TConstHandleView<THandle::TSOAType>)",
    "insertText": "MakeConstHandleView(const TArray<THandle*>& Handles)"
  },
  {
    "label": "MakeHandleView()",
    "kind": "Method",
    "detail": "Function (} template<THandle> THandleView<THandle::TSOAType>)",
    "insertText": "MakeHandleView(const TArray<THandle*>& Handles)"
  },
  {
    "label": "TSOAView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> struct TSOAView { using THandle = TSOA::THandleType ;)",
    "insertText": "TSOAView() : SOA(nullptr) , HandlesArray(nullptr)"
  },
  {
    "label": "TSOAView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSOAView(TSOA* InSOA) : SOA(InSOA) , HandlesArray(nullptr)"
  },
  {
    "label": "TSOAView()",
    "kind": "Method",
    "detail": "Function (} template<TDerivedHandle>)",
    "insertText": "TSOAView(TArray<TDerivedHandle*>* Handles) : SOA(nullptr)"
  },
  {
    "label": "THandle()",
    "kind": "Method",
    "detail": "Function (HandlesArray = reinterpret_cast<TArray<)",
    "insertText": "THandle(Handles)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} TSOA* SOA ; TArray<THandle*>* HandlesArray ; int32)",
    "insertText": "Size()"
  },
  {
    "label": "TConstParticleIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<TSOA> class TConstParticleIterator { public : using THandle = TSOA::THandleType ; using THandleBase = THandle::THandleBase ; using TTransientHandle = THandle::TTransientHandle ;)",
    "insertText": "TConstParticleIterator()"
  },
  {
    "label": "MoveToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEnd()"
  },
  {
    "label": "TConstParticleIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstParticleIterator(const TArray<TSOAView<TSOA>>& InSOAViews) : SOAViews(&InSOAViews) , CurHandlesArray(nullptr) , SOAIdx(0) #if PARTICLE_ITERATOR_RANGED_FOR_CHECK , DirtyValidationCount(INDEX_NONE)"
  },
  {
    "label": "SeekNonEmptySOA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekNonEmptySOA()"
  },
  {
    "label": "TConstParticleIterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TConstParticleIterator(const TConstParticleIterator& Rhs)"
  },
  {
    "label": "RangedForValidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangedForValidation()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bFindNextEnabledParticle = true ;)",
    "insertText": "while(bFindNextEnabledParticle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + TransientHandle . ParticleIdx ;)",
    "insertText": "if(TransientHandle.ParticleIdx >= static_cast<int32>(CurSOASize))"
  },
  {
    "label": "IncSOAIdx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncSOAIdx()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { + + CurHandleIdx ;)",
    "insertText": "if(CurHandleIdx < CurHandlesArray->Num())"
  },
  {
    "label": "HandlePtr()",
    "kind": "Method",
    "detail": "Function (THandle*)",
    "insertText": "HandlePtr(*CurHandlesArray)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (THandleBase)",
    "insertText": "Handle(HandlePtr->GeometryParticles, HandlePtr->ParticleIdx)"
  },
  {
    "label": "TTransientHandle()",
    "kind": "Method",
    "detail": "Function (TransientHandle = static_cast<)",
    "insertText": "TTransientHandle(Handle)"
  },
  {
    "label": "THandleBase()",
    "kind": "Method",
    "detail": "Function (SOAIdx = 0 ; CurSOASize = 0 ; CurHandleIdx = 0 ; TransientHandle =)",
    "insertText": "THandleBase()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + SOAIdx ; } CurHandleIdx = 0 ;)",
    "insertText": "if(SOAIdx < SOAViews->Num())"
  },
  {
    "label": "CurHandlesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurHandlesArray(*SOAViews)"
  },
  {
    "label": "THandleBase()",
    "kind": "Method",
    "detail": "Function (TransientHandle = CurHandlesArray ?)",
    "insertText": "THandleBase((*CurHandlesArray)[0]->GeometryParticles, (*CurHandlesArray)[0]->ParticleIdx) : THandleBase((*SOAViews)[SOAIdx].SOA, 0)"
  },
  {
    "label": "SyncDirtyValidationCount()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SyncDirtyValidationCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PARTICLE_ITERATOR_RANGED_FOR_CHECK)",
    "insertText": "if(CurHandlesArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TransientHandle.GeometryParticles)"
  },
  {
    "label": "DirtyValidationCount()",
    "kind": "Method",
    "detail": "Function (} else { DirtyValidationCount = TransientHandle . GeometryParticles ? TransientHandle . GeometryParticles ->)",
    "insertText": "DirtyValidationCount()"
  },
  {
    "label": "TParticleIterator()",
    "kind": "Method",
    "detail": "Function (} # endif } # if PARTICLE_ITERATOR_RANGED_FOR_CHECK int32 DirtyValidationCount ; # endif } ; template<TSOA> class TParticleIterator : public TConstParticleIterator<TSOA> { public : using Base = TConstParticleIterator<TSOA> ; using TTransientHandle = Base::TTransientHandle ; using Base::TransientHandle ; using Base::RangedForValidation ;)",
    "insertText": "TParticleIterator() : Base()"
  },
  {
    "label": "TParticleIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TParticleIterator(const TArray<TSOAView<TSOA>>& InSOAs) : Base(InSOAs)"
  },
  {
    "label": "MakeConstParticleIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<TSOA> TConstParticleIterator<TSOA>)",
    "insertText": "MakeConstParticleIterator(const TArray<TSOAView<TSOA>>& SOAs)"
  },
  {
    "label": "MakeParticleIterator()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> TParticleIterator<TSOA>)",
    "insertText": "MakeParticleIterator(const TArray<TSOAView<TSOA>>& SOAs)"
  },
  {
    "label": "TConstParticleView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> class TConstParticleView { public : using THandle = TSOA::THandleType ;)",
    "insertText": "TConstParticleView() : Size(0)"
  },
  {
    "label": "TConstParticleView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstParticleView(TArray<TSOAView<TSOA>>&& InSOAViews) : SOAViews(MoveTemp(InSOAViews)) , Size(0)"
  },
  {
    "label": "TConstParticleView()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TConstParticleView(TSOAView<TSOA>&& InSOAView) : Size(InSOAView.Size())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SOAViews .)",
    "insertText": "Add(MoveTemp(InSOAView))"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} template<ContextCreatorType,Lambda> void)",
    "insertText": "ParallelFor(const ContextCreatorType& ContextCreator, const Lambda& Func, bool bForceSingleThreaded = false)"
  },
  {
    "label": "ParticlesParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParticlesParallelFor(*this, ContextCreator, Func, bForceSingleThreaded)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} template<Lambda> void)",
    "insertText": "ParallelFor(const Lambda& Func, bool bForceSingleThreaded = false)"
  },
  {
    "label": "ParticlesParallelFor()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ParticlesParallelFor(*this, EmptyContextCreator, ContextFunc, bForceSingleThreaded)"
  },
  {
    "label": "TParticleView()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TSOAView<TSOA>> SOAViews ; int32 Size ; } ; template<TSOAIn> class TParticleView : public TConstParticleView<TSOAIn> { public : using TSOA = TSOAIn ; using Base = TConstParticleView<TSOA> ; using Base::SOAViews ; using Base::Num ; using TIterator = TParticleIterator<TSOA> ;)",
    "insertText": "TParticleView() : Base()"
  },
  {
    "label": "TParticleView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TParticleView(TArray<TSOAView<TSOA>>&& InSOAViews) : Base(MoveTemp(InSOAViews))"
  },
  {
    "label": "MakeConstParticleView()",
    "kind": "Method",
    "detail": "Function (} } ; template<TSOA> TConstParticleView<TSOA>)",
    "insertText": "MakeConstParticleView(TArray<TSOAView<TSOA>>&& SOAViews)"
  },
  {
    "label": "MakeConstParticleView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> TConstParticleView<TSOA>)",
    "insertText": "MakeConstParticleView(TSOAView<TSOA>&& SOAView)"
  },
  {
    "label": "MakeParticleView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> TParticleView<TSOA>)",
    "insertText": "MakeParticleView(TArray<TSOAView<TSOA>>&& SOAViews)"
  },
  {
    "label": "MakeConstParticleView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> TConstParticleView<TSOA>)",
    "insertText": "MakeConstParticleView(TSOA* SOA)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<TSOAView<TSOA>> SOAs ; SOAs .)",
    "insertText": "Add({ SOA })"
  },
  {
    "label": "MakeParticleView()",
    "kind": "Method",
    "detail": "Function (} template<TSOA> TParticleView<TSOA>)",
    "insertText": "MakeParticleView(TSOA* SOA)"
  },
  {
    "label": "ParticleViewParallelForImp()",
    "kind": "Method",
    "detail": "Function (} template<TParticleView,ContextCreatorType,Lambda> void)",
    "insertText": "ParticleViewParallelForImp(const TParticleView& Particles, const ContextCreatorType& ContextCreator, const Lambda& UserFunc)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParticleViewParallelForImp)"
  },
  {
    "label": "UserFunc()",
    "kind": "Method",
    "detail": "Function (using TSOA = TParticleView::TSOA ; using THandle = TSOA::THandleType ; using THandleBase = THandle::THandleBase ; using TTransientHandle = THandle::TTransientHandle ; auto Func = [&)",
    "insertText": "UserFunc(auto& Handle, const int32 Idx, const int32 ContextIndex)"
  },
  {
    "label": "UserFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UserFunc(Handle, Idx, ContextIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } ; int32 ParticleIdxOff = 0 ;)",
    "insertText": "for(int32 ViewIndex = 0; ViewIndex < Particles.SOAViews.Num(); ++ViewIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(const TArray<THandle*>* CurHandlesArray = SOAView.HandlesArray)"
  },
  {
    "label": "PhysicsParallelForWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelForWithContext(HandleCount, ContextCreator, [&Func, CurHandlesArray, ParticleIdxOff](const int32 HandleIdx, const int32 ContextIndex) { THandle* HandlePtr = (*CurHandlesArray)[HandleIdx]; THandleBase Handle(HandlePtr->GeometryParticles, HandlePtr->ParticleIdx); Func(static_cast<TTransientHandle&>(Handle), ParticleIdxOff + HandleIdx, ContextIndex); })"
  },
  {
    "label": "PhysicsParallelForWithContext()",
    "kind": "Method",
    "detail": "Function (ParticleIdxOff + = HandleCount ; } else {)",
    "insertText": "PhysicsParallelForWithContext(ParticleCount, ContextCreator, [&Func, &SOAView, ParticleIdxOff](const int32 ParticleIdx, const int32 ContextIndex) { THandleBase Handle(SOAView.SOA, ParticleIdx); Func(static_cast<TTransientHandle&>(Handle), ParticleIdxOff + ParticleIdx, ContextIndex); })"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_HandleViewParallelForImp)"
  },
  {
    "label": "PhysicsParallelForWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelForWithContext(HandleCount, ContextCreator, [&HandleView, &Func](const int32 Index, const int32 ContextIndex) { if (!HandleView.Handles[Index]->LightWeightDisabled()) { Func(static_cast<THandle&>(*HandleView.Handles[Index]), Index, ContextIndex); } })"
  }
]