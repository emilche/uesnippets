[
  {
    "label": "FDerivedDataCacheUsageStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedDataCacheUsageStats"
  },
  {
    "label": "FDerivedDataCacheStatsNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedDataCacheStatsNode"
  },
  {
    "label": "FCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheKey"
  },
  {
    "label": "FBackendDebugMissState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBackendDebugMissState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBackendDebugOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBackendDebugOptions"
  },
  {
    "label": "FDerivedDataBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedDataBackend"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / BitArray . h \" # include \" Containers / StringView . h \" # include \" DerivedDataCache . h \" # include \" DerivedDataCacheKeyFilter . h \" # include \" DerivedDataLegacyCacheStore . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" Stats / Stats . h \" # include \" Templates / DontCopy . h \" # include \" Templates / PimplPtr . h \" class FDerivedDataCacheUsageStats ; class FDerivedDataCacheStatsNode ; namespace UE::DerivedData { struct FCacheKey ; } namespace UE::DerivedData::Private { struct FBackendDebugMissState ; })",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Gets\"),STAT_DDC_NumGets,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Puts\"),STAT_DDC_NumPuts,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Build\"),STAT_DDC_NumBuilds,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Exists\"),STAT_DDC_NumExist,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Sync Get Time\"),STAT_DDC_SyncGetTime,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"ASync Wait Time\"),STAT_DDC_ASyncWaitTime,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Sync Put Time\"),STAT_DDC_PutTime,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Sync Build Time\"),STAT_DDC_SyncBuildTime,STATGROUP_DDC,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Exists Time\"),STAT_DDC_ExistTime,STATGROUP_DDC,)"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_DECLARE_TAG_API(DDCBackend, DERIVEDDATACACHE_API)"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_DECLARE_TAG_API(UntaggedDDCResult, DERIVEDDATACACHE_API)"
  },
  {
    "label": "FBackendDebugOptions()",
    "kind": "Method",
    "detail": "Function (namespace UE::DerivedData { enum class EBackendLegacyMode { ValueOnly,ValueWithLegacyFallback,LegacyOnly,} ; enum class EBackendSpeedClass { Unknown,Slow,Ok,Fast,Local } ; struct FBackendDebugOptions { FCacheKeyFilter SimulateMissFilter ; TDontCopy<TPimplPtr<Private::FBackendDebugMissState>> SimulateMissState ;)",
    "insertText": "FBackendDebugOptions()"
  },
  {
    "label": "ParseFromTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFromTokens(FBackendDebugOptions& OutOptions, const TCHAR* InNodeName, const TCHAR* InTokens)"
  },
  {
    "label": "ShouldSimulatePutMiss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSimulatePutMiss(const FCacheKey& Key)"
  },
  {
    "label": "ShouldSimulateGetMiss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSimulateGetMiss(const FCacheKey& Key)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class FDerivedDataBackend { public : FDerivedDataBackend*)",
    "insertText": "Create()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FDerivedDataBackend&)",
    "insertText": "Get()"
  },
  {
    "label": "FDerivedDataBackend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDerivedDataBackend()"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (ILegacyCacheStore&)",
    "insertText": "GetRoot()"
  },
  {
    "label": "GetMaxKeyLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxKeyLength()"
  },
  {
    "label": "NotifyBootComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBootComplete()"
  },
  {
    "label": "AddToAsyncCompletionCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToAsyncCompletionCounter(int32 Addend)"
  },
  {
    "label": "AnyAsyncRequestsRemaining()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyAsyncRequestsRemaining()"
  },
  {
    "label": "IsShuttingDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShuttingDown()"
  },
  {
    "label": "WaitForQuiescence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForQuiescence(bool bShutdown = false)"
  },
  {
    "label": "GetDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirectories(TArray<FString>& OutResults)"
  },
  {
    "label": "GetUsingSharedDDC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUsingSharedDDC()"
  },
  {
    "label": "GetGraphName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetGraphName()"
  },
  {
    "label": "GetDefaultGraphName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDefaultGraphName()"
  },
  {
    "label": "MountPakFile()",
    "kind": "Method",
    "detail": "Function (ILegacyCacheStore*)",
    "insertText": "MountPakFile(const TCHAR* PakFilename)"
  },
  {
    "label": "UnmountPakFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmountPakFile(const TCHAR* PakFilename)"
  },
  {
    "label": "GatherUsageStats()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDerivedDataCacheStatsNode>)",
    "insertText": "GatherUsageStats()"
  },
  {
    "label": "GatherResourceStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherResourceStats(TArray<FDerivedDataCacheResourceStat>& DDCResourceStats)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; [ [ nodiscard ] ] const TCHAR*)",
    "insertText": "LexToString(const EBackendLegacyMode Value)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "TryLexFromString()",
    "kind": "Method",
    "detail": "Function (} } [ [ nodiscard ] ] bool)",
    "insertText": "TryLexFromString(EBackendLegacyMode& OutValue, const FStringView String)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendLegacyMode::ValueOnly ; return true ; })",
    "insertText": "if(String == TEXTVIEW(\"ValueWithLegacyFallback\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendLegacyMode::ValueWithLegacyFallback ; return true ; })",
    "insertText": "if(String == TEXTVIEW(\"LegacyOnly\"))"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendLegacyMode::LegacyOnly ; return true ; } return false ; } const TCHAR*)",
    "insertText": "LexToString(EBackendSpeedClass SpeedClass)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LexFromString(EBackendSpeedClass& OutValue, const TCHAR* Buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendSpeedClass::Unknown ;)",
    "insertText": "if(FCString::Stricmp(Buffer, TEXT(\"Slow\")) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendSpeedClass::Slow ; } else)",
    "insertText": "if(FCString::Stricmp(Buffer, TEXT(\"Ok\")) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendSpeedClass::Ok ; } else)",
    "insertText": "if(FCString::Stricmp(Buffer, TEXT(\"Fast\")) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = EBackendSpeedClass::Fast ; } else)",
    "insertText": "if(FCString::Stricmp(Buffer, TEXT(\"Local\")) == 0)"
  }
]