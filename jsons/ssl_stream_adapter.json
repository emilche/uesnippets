[
  {
    "label": "SSLRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLRole"
  },
  {
    "label": "SSLMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLMode"
  },
  {
    "label": "SSLProtocolVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLProtocolVersion"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SSLStreamAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLStreamAdapter"
  },
  {
    "label": "SrtpCryptoSuiteToName()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SSL_STREAM_ADAPTER_H_ # define RTC_BASE_SSL_STREAM_ADAPTER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" # include \" rtc_base / stream . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace rtc { int kTlsNullWithNullNull = 0 ; int kSslCipherSuiteMaxValue = 0 xFFFF ; int kSrtpInvalidCryptoSuite = 0 ; int kSrtpAes128CmSha1_80 = 0 x0001 ; int kSrtpAes128CmSha1_32 = 0 x0002 ; int kSrtpAeadAes128Gcm = 0 x0007 ; int kSrtpAeadAes256Gcm = 0 x0008 ; int kSrtpCryptoSuiteMaxValue = 0 xFFFF ; const char kCsAesCm128HmacSha1_80 [ ] ; const char kCsAesCm128HmacSha1_32 [ ] ; const char kCsAeadAes128Gcm [ ] ; const char kCsAeadAes256Gcm [ ] ; std::string)",
    "insertText": "SrtpCryptoSuiteToName(int crypto_suite)"
  },
  {
    "label": "SrtpCryptoSuiteFromName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SrtpCryptoSuiteFromName(absl::string_view crypto_suite)"
  },
  {
    "label": "GetSrtpKeyAndSaltLengths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSrtpKeyAndSaltLengths(int crypto_suite, int* key_length, int* salt_length)"
  },
  {
    "label": "IsGcmCryptoSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGcmCryptoSuite(int crypto_suite)"
  },
  {
    "label": "IsGcmCryptoSuiteName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGcmCryptoSuiteName(absl::string_view crypto_suite)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (enum SSLRole { SSL_CLIENT,SSL_SERVER } ; enum SSLMode { SSL_MODE_TLS,SSL_MODE_DTLS } ; enum SSLProtocolVersion { SSL_PROTOCOL_NOT_GIVEN = - 1,SSL_PROTOCOL_TLS_10 = 0,SSL_PROTOCOL_TLS_11,SSL_PROTOCOL_TLS_12,SSL_PROTOCOL_DTLS_10 = SSL_PROTOCOL_TLS_11,SSL_PROTOCOL_DTLS_12 = SSL_PROTOCOL_TLS_12,} ; enum class SSLPeerCertificateDigestError { NONE,UNKNOWN_ALGORITHM,INVALID_LENGTH,VERIFICATION_FAILED,} ; enum { SSE_MSG_TRUNC = 0 xff0001 } ; enum class SSLHandshakeError { UNKNOWN,INCOMPATIBLE_CIPHERSUITE,MAX_VALUE } ; class SSLStreamAdapter : public StreamInterface,public sigslot::has_slots<> { public : std::unique_ptr<SSLStreamAdapter>)",
    "insertText": "Create(std::unique_ptr<StreamInterface> stream)"
  },
  {
    "label": "SSLStreamAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SSLStreamAdapter()"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(std::unique_ptr<SSLIdentity> identity)"
  },
  {
    "label": "GetIdentityForTesting()",
    "kind": "Method",
    "detail": "Function (SSLIdentity*)",
    "insertText": "GetIdentityForTesting()"
  },
  {
    "label": "SetServerRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetServerRole(SSLRole role = SSL_SERVER)"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(SSLMode mode)"
  },
  {
    "label": "SetMaxProtocolVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxProtocolVersion(SSLProtocolVersion version)"
  },
  {
    "label": "SetInitialRetransmissionTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialRetransmissionTimeout(int timeout_ms)"
  },
  {
    "label": "StartSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartSSL()"
  },
  {
    "label": "SetPeerCertificateDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPeerCertificateDigest(absl::string_view digest_alg, const unsigned char* digest_val, size_t digest_len, SSLPeerCertificateDigestError* error = nullptr)"
  },
  {
    "label": "GetPeerSSLCertChain()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertChain>)",
    "insertText": "GetPeerSSLCertChain()"
  },
  {
    "label": "GetSslCipherSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslCipherSuite(int* cipher_suite)"
  },
  {
    "label": "GetSslVersion()",
    "kind": "Method",
    "detail": "Function (SSLProtocolVersion)",
    "insertText": "GetSslVersion()"
  },
  {
    "label": "GetSslVersionBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslVersionBytes(int* version)"
  },
  {
    "label": "ExportKeyingMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportKeyingMaterial(absl::string_view label, const uint8_t* context, size_t context_len, bool use_context, uint8_t* result, size_t result_len)"
  },
  {
    "label": "SetDtlsSrtpCryptoSuites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDtlsSrtpCryptoSuites(const std::vector<int>& crypto_suites)"
  },
  {
    "label": "GetDtlsSrtpCryptoSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDtlsSrtpCryptoSuite(int* crypto_suite)"
  },
  {
    "label": "IsTlsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTlsConnected()"
  },
  {
    "label": "IsBoringSsl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoringSsl()"
  },
  {
    "label": "IsAcceptableCipher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptableCipher(int cipher, KeyType key_type)"
  },
  {
    "label": "IsAcceptableCipher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptableCipher(absl::string_view cipher, KeyType key_type)"
  },
  {
    "label": "SslCipherSuiteToName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "SslCipherSuiteToName(int cipher_suite)"
  },
  {
    "label": "EnableTimeCallbackForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTimeCallbackForTesting()"
  },
  {
    "label": "SetClientAuthEnabledForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientAuthEnabledForTesting(bool enabled)"
  },
  {
    "label": "GetClientAuthEnabled()",
    "kind": "Method",
    "detail": "Function (client_auth_enabled_ = enabled ; } bool)",
    "insertText": "GetClientAuthEnabled()"
  }
]