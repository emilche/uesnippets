[
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "SSLRole",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLRole"
  },
  {
    "label": "SSLMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLMode"
  },
  {
    "label": "SSLProtocolVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLProtocolVersion"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SSLStreamAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLStreamAdapter"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "method",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "method"
  },
  {
    "label": "SrtpCryptoSuiteToName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "SrtpCryptoSuiteToName(int crypto_suite)"
  },
  {
    "label": "SrtpCryptoSuiteFromName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SrtpCryptoSuiteFromName(absl::string_view crypto_suite)"
  },
  {
    "label": "GetSrtpKeyAndSaltLengths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSrtpKeyAndSaltLengths(int crypto_suite,\n                              int* key_length,\n                              int* salt_length)"
  },
  {
    "label": "IsGcmCryptoSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGcmCryptoSuite(int crypto_suite)"
  },
  {
    "label": "IsGcmCryptoSuiteName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGcmCryptoSuiteName(absl::string_view crypto_suite)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLStreamAdapter>)",
    "insertText": "Create(\n      std::unique_ptr<StreamInterface> stream)"
  },
  {
    "label": "GetSslCipherSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslCipherSuite(int* cipher_suite)"
  },
  {
    "label": "ExportKeyingMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportKeyingMaterial(absl::string_view label,\n                                    const uint8_t* context,\n                                    size_t context_len,\n                                    bool use_context,\n                                    uint8_t* result,\n                                    size_t result_len)"
  },
  {
    "label": "SetDtlsSrtpCryptoSuites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDtlsSrtpCryptoSuites(const std::vector<int>& crypto_suites)"
  },
  {
    "label": "GetDtlsSrtpCryptoSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDtlsSrtpCryptoSuite(int* crypto_suite)"
  },
  {
    "label": "IsBoringSsl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoringSsl()"
  },
  {
    "label": "IsAcceptableCipher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptableCipher(int cipher, KeyType key_type)"
  },
  {
    "label": "IsAcceptableCipher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptableCipher(absl::string_view cipher, KeyType key_type)"
  },
  {
    "label": "SslCipherSuiteToName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "SslCipherSuiteToName(int cipher_suite)"
  },
  {
    "label": "EnableTimeCallbackForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTimeCallbackForTesting()"
  }
]