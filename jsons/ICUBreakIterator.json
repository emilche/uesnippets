[
  {
    "label": "FICUBreakIteratorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUBreakIteratorManager"
  },
  {
    "label": "FICUBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUBreakIterator"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Set . h \" # include \" Templates / SharedPointer . h \" # include \" Internationalization / IBreakIterator . h \" # if UE_ENABLE_ICU THIRD_PARTY_INCLUDES_START # include<unicode / brkiter . h> THIRD_PARTY_INCLUDES_END class FICUBreakIteratorManager { public : void)",
    "insertText": "Create()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FICUBreakIteratorManager&)",
    "insertText": "Get()"
  },
  {
    "label": "CreateCharacterBoundaryIterator()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<icu::BreakIterator>)",
    "insertText": "CreateCharacterBoundaryIterator()"
  },
  {
    "label": "CreateWordBreakIterator()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<icu::BreakIterator>)",
    "insertText": "CreateWordBreakIterator()"
  },
  {
    "label": "CreateLineBreakIterator()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<icu::BreakIterator>)",
    "insertText": "CreateLineBreakIterator()"
  },
  {
    "label": "DestroyIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIterator(TWeakPtr<icu::BreakIterator>& InIterator)"
  },
  {
    "label": "FICUBreakIterator()",
    "kind": "Method",
    "detail": "Function (private : FICUBreakIteratorManager* Singleton ; FCriticalSection AllocatedIteratorsCS ; TSet<TSharedPtr<icu::BreakIterator>> AllocatedIterators ; } ; class FICUBreakIterator : public IBreakIterator { public :)",
    "insertText": "FICUBreakIterator(TWeakPtr<icu::BreakIterator>&& InICUBreakIteratorHandle)"
  },
  {
    "label": "FICUBreakIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FICUBreakIterator()"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(FString&& InString)"
  },
  {
    "label": "SetStringRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringRef(FStringView InString)"
  },
  {
    "label": "GetCurrentPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentPosition()"
  },
  {
    "label": "ResetToBeginning()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ResetToBeginning()"
  },
  {
    "label": "ResetToEnd()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ResetToEnd()"
  },
  {
    "label": "MoveToPrevious()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveToPrevious()"
  },
  {
    "label": "MoveToNext()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveToNext()"
  },
  {
    "label": "MoveToCandidateBefore()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveToCandidateBefore(const int32 InIndex)"
  },
  {
    "label": "MoveToCandidateAfter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveToCandidateAfter(const int32 InIndex)"
  },
  {
    "label": "GetInternalBreakIterator()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<icu::BreakIterator>)",
    "insertText": "GetInternalBreakIterator()"
  }
]