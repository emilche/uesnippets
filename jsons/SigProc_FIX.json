[
  {
    "label": "silk_resampler()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_resampler(\n    silk_resampler_state_struct *S,                 /* I/O  Resampler state                                             */\n    opus_int16                  out[],              /* O    Output signal                                               */\n    const opus_int16            in[],               /* I    Input signal                                                */\n    opus_int32                  inLen               /* I    Number of input samples                                     */\n)"
  },
  {
    "label": "silk_LPC_analysis_filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_LPC_analysis_filter(\n    opus_int16                  *out,               /* O    Output signal                                               */\n    const opus_int16            *in,                /* I    Input signal                                                */\n    const opus_int16            *B,                 /* I    MA prediction coefficients, Q12 [order]                     */\n    const opus_int32            len,                /* I    Signal length                                               */\n    const opus_int32            d,                  /* I    Filter order                                                */\n    int                         arch                /* I    Run-time architecture                                       */\n)"
  },
  {
    "label": "silk_LPC_inverse_pred_gain_c()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_LPC_inverse_pred_gain_c(            /* O   Returns inverse prediction gain in energy domain, Q30        */\n    const opus_int16            *A_Q12,             /* I   Prediction coefficients, Q12 [order]                         */\n    const opus_int              order               /* I   Prediction order                                             */\n)"
  },
  {
    "label": "silk_ana_filt_bank_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_ana_filt_bank_1(\n    const opus_int16            *in,                /* I    Input signal [N]                                            */\n    opus_int32                  *S,                 /* I/O  State vector [2]                                            */\n    opus_int16                  *outL,              /* O    Low band [N/2]                                              */\n    opus_int16                  *outH,              /* O    High band [N/2]                                             */\n    const opus_int32            N                   /* I    Number of input samples                                     */\n)"
  },
  {
    "label": "silk_lin2log()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_lin2log(\n    const opus_int32            inLin               /* I  input in linear scale                                         */\n)"
  },
  {
    "label": "silk_sigm_Q15()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_sigm_Q15(\n    opus_int                    in_Q5               /* I                                                                */\n)"
  },
  {
    "label": "silk_log2lin()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_log2lin(\n    const opus_int32            inLog_Q7            /* I  input on log scale                                            */\n)"
  },
  {
    "label": "silk_sum_sqr_shift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_sum_sqr_shift(\n    opus_int32                  *energy,            /* O   Energy of x, after shifting to the right                     */\n    opus_int                    *shift,             /* O   Number of bits right shift applied to energy                 */\n    const opus_int16            *x,                 /* I   Input vector                                                 */\n    opus_int                    len                 /* I   Length of input vector                                       */\n)"
  },
  {
    "label": "silk_schur()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_schur(                              /* O    Returns residual energy                                     */\n    opus_int16                  *rc_Q15,            /* O    reflection coefficients [order] Q15                         */\n    const opus_int32            *c,                 /* I    correlations [order+1]                                      */\n    const opus_int32            order               /* I    prediction order                                            */\n)"
  },
  {
    "label": "silk_schur64()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_schur64(                            /* O    returns residual energy                                     */\n    opus_int32                  rc_Q16[],           /* O    Reflection coefficients [order] Q16                         */\n    const opus_int32            c[],                /* I    Correlations [order+1]                                      */\n    opus_int32                  order               /* I    Prediction order                                            */\n)"
  },
  {
    "label": "silk_k2a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_k2a(\n    opus_int32                  *A_Q24,             /* O    Prediction coefficients [order] Q24                         */\n    const opus_int16            *rc_Q15,            /* I    Reflection coefficients [order] Q15                         */\n    const opus_int32            order               /* I    Prediction order                                            */\n)"
  },
  {
    "label": "silk_k2a_Q16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_k2a_Q16(\n    opus_int32                  *A_Q24,             /* O    Prediction coefficients [order] Q24                         */\n    const opus_int32            *rc_Q16,            /* I    Reflection coefficients [order] Q16                         */\n    const opus_int32            order               /* I    Prediction order                                            */\n)"
  },
  {
    "label": "silk_apply_sine_window()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_apply_sine_window(\n    opus_int16                  px_win[],           /* O    Pointer to windowed signal                                  */\n    const opus_int16            px[],               /* I    Pointer to input signal                                     */\n    const opus_int              win_type,           /* I    Selects a window type                                       */\n    const opus_int              length              /* I    Window length, multiple of 4                                */\n)"
  },
  {
    "label": "silk_LPC_fit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_LPC_fit(\n    opus_int16                  *a_QOUT,            /* O    Output signal                                               */\n    opus_int32                  *a_QIN,             /* I/O  Input signal                                                */\n    const opus_int              QOUT,               /* I    Input Q domain                                              */\n    const opus_int              QIN,                /* I    Input Q domain                                              */\n    const opus_int              d                   /* I    Filter order                                                */\n)"
  },
  {
    "label": "silk_insertion_sort_increasing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_insertion_sort_increasing(\n    opus_int32                  *a,                 /* I/O   Unsorted / Sorted vector                                   */\n    opus_int                    *idx,               /* O     Index vector for the sorted elements                       */\n    const opus_int              L,                  /* I     Vector length                                              */\n    const opus_int              K                   /* I     Number of correctly sorted positions                       */\n)"
  },
  {
    "label": "silk_insertion_sort_decreasing_int16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_insertion_sort_decreasing_int16(\n    opus_int16                  *a,                 /* I/O   Unsorted / Sorted vector                                   */\n    opus_int                    *idx,               /* O     Index vector for the sorted elements                       */\n    const opus_int              L,                  /* I     Vector length                                              */\n    const opus_int              K                   /* I     Number of correctly sorted positions                       */\n)"
  },
  {
    "label": "silk_insertion_sort_increasing_all_values_int16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_insertion_sort_increasing_all_values_int16(\n     opus_int16                 *a,                 /* I/O   Unsorted / Sorted vector                                   */\n     const opus_int             L                   /* I     Vector length                                              */\n)"
  },
  {
    "label": "silk_NLSF_stabilize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_stabilize(\n          opus_int16            *NLSF_Q15,          /* I/O   Unstable/stabilized normalized LSF vector in Q15 [L]       */\n    const opus_int16            *NDeltaMin_Q15,     /* I     Min distance vector, NDeltaMin_Q15[L] must be >= 1 [L+1]   */\n    const opus_int              L                   /* I     Number of NLSF parameters in the input vector              */\n)"
  },
  {
    "label": "silk_scale_copy_vector16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_scale_copy_vector16(\n    opus_int16                  *data_out,\n    const opus_int16            *data_in,\n    opus_int32                  gain_Q16,           /* I    Gain in Q16                                                 */\n    const opus_int              dataSize            /* I    Length                                                      */\n)"
  },
  {
    "label": "silk_scale_vector32_Q26_lshift_18()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_scale_vector32_Q26_lshift_18(\n    opus_int32                  *data1,             /* I/O  Q0/Q18                                                      */\n    opus_int32                  gain_Q26,           /* I    Q26                                                         */\n    opus_int                    dataSize            /* I    length                                                      */\n)"
  },
  {
    "label": "silk_inner_prod_aligned()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_inner_prod_aligned(\n    const opus_int16 *const     inVec1,             /*    I input vector 1                                              */\n    const opus_int16 *const     inVec2,             /*    I input vector 2                                              */\n    const opus_int              len,                /*    I vector lengths                                              */\n    int                         arch                /*    I Run-time architecture                                       */\n)"
  },
  {
    "label": "silk_inner_prod_aligned_scale()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_inner_prod_aligned_scale(\n    const opus_int16 *const     inVec1,             /*    I input vector 1                                              */\n    const opus_int16 *const     inVec2,             /*    I input vector 2                                              */\n    const opus_int              scale,              /*    I number of bits to shift                                     */\n    const opus_int              len                 /*    I vector lengths                                              */\n)"
  },
  {
    "label": "silk_inner_prod16_c()",
    "kind": "Method",
    "detail": "Function (opus_int64)",
    "insertText": "silk_inner_prod16_c(\n    const opus_int16            *inVec1,            /*    I input vector 1                                              */\n    const opus_int16            *inVec2,            /*    I input vector 2                                              */\n    const opus_int              len                 /*    I vector lengths                                              */\n)"
  }
]