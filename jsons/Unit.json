[
  {
    "label": "UnitConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitConverter"
  },
  {
    "label": "LinearUnitConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinearUnitConverter"
  },
  {
    "label": "UnitConverterRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitConverterRegistry"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "UnitConverter()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_UNIT_H_ # define MATERIALX_UNIT_H_ # include<MaterialXCore / Export . h> # include<MaterialXCore / Document . h> MATERIALX_NAMESPACE_BEGIN class UnitConverter ; class LinearUnitConverter ; class UnitConverterRegistry ; using UnitConverterPtr = shared_ptr<UnitConverter> ; using ConstUnitConverterPtr = shared_ptr<const UnitConverter> ; using LinearUnitConverterPtr = shared_ptr<LinearUnitConverter> ; using ConstLinearUnitConverterPtr = shared_ptr<const LinearUnitConverter> ; using UnitConverterRegistryPtr = shared_ptr<UnitConverterRegistry> ; using ConstUnitConverterRegistryPtr = shared_ptr<const UnitConverterRegistry> ; class UnitConverter { public :)",
    "insertText": "UnitConverter()"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "convert(float input, const string& inputUnit, const string& outputUnit)"
  },
  {
    "label": "getUnitAsInteger()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getUnitAsInteger(const string&)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (Vector3)",
    "insertText": "convert(const Vector3& input, const string& inputUnit, const string& outputUnit)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (Vector4)",
    "insertText": "convert(const Vector4& input, const string& inputUnit, const string& outputUnit)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(DocumentPtr doc)"
  },
  {
    "label": "LinearUnitConverter()",
    "kind": "Method",
    "detail": "Function (} ; class LinearUnitConverter : public UnitConverter { public : ~)",
    "insertText": "LinearUnitConverter()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} LinearUnitConverterPtr)",
    "insertText": "create(UnitTypeDefPtr UnitDef)"
  },
  {
    "label": "getUnitType()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getUnitType()"
  },
  {
    "label": "getUnitScale()",
    "kind": "Method",
    "detail": "Function (const std::unordered_map<string,float>&)",
    "insertText": "getUnitScale()"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (Vector2)",
    "insertText": "convert(const Vector2& input, const string& inputUnit, const string& outputUnit)"
  },
  {
    "label": "getUnitAsInteger()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getUnitAsInteger(const string& unitName)"
  },
  {
    "label": "getUnitFromInteger()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getUnitFromInteger(int index)"
  },
  {
    "label": "LinearUnitConverter()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LinearUnitConverter(UnitTypeDefPtr UnitDef)"
  },
  {
    "label": "UnitConverterRegistry()",
    "kind": "Method",
    "detail": "Function (private : std::unordered_map<string,float> _unitScale ; std::unordered_map<string,int> _unitEnumeration ; string _unitType ; } ; using UnitConverterPtrMap = std::unordered_map<string,UnitConverterPtr> ; class UnitConverterRegistry { public : ~)",
    "insertText": "UnitConverterRegistry()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} UnitConverterRegistryPtr)",
    "insertText": "create()"
  },
  {
    "label": "addUnitConverter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addUnitConverter(UnitTypeDefPtr def, UnitConverterPtr converter)"
  },
  {
    "label": "removeUnitConverter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "removeUnitConverter(UnitTypeDefPtr def)"
  },
  {
    "label": "getUnitConverter()",
    "kind": "Method",
    "detail": "Function (UnitConverterPtr)",
    "insertText": "getUnitConverter(UnitTypeDefPtr def)"
  },
  {
    "label": "clearUnitConverters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearUnitConverters()"
  },
  {
    "label": "convertToUnit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertToUnit(DocumentPtr doc, const string& unitType, const string& targetUnit)"
  },
  {
    "label": "UnitConverterRegistry()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UnitConverterRegistry(const UnitConverterRegistry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UnitConverterRegistry&)",
    "insertText": "operator(const UnitConverterRegistry&)"
  }
]