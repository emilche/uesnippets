[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FRawMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMesh"
  },
  {
    "label": "FRawMeshBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawMeshBulkData"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Misc / Guid . h \" # include \" Serialization / BulkData . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" Templates / DontCopy . h \" class FArchive ; enum { MAX_MESH_TEXTURE_COORDS = 8,} ; struct FRawMesh { TArray<int32> FaceMaterialIndices ; TArray<uint32> FaceSmoothingMasks ; TArray<FVector3f> VertexPositions ; TArray<uint32> WedgeIndices ; TArray<FVector3f> WedgeTangentX ; TArray<FVector3f> WedgeTangentY ; TArray<FVector3f> WedgeTangentZ ; TArray<FVector2f> WedgeTexCoords [ MAX_MESH_TEXTURE_COORDS ] ; TArray<FColor> WedgeColors ; TArray<int32> MaterialIndexToImportIndex ; void)",
    "insertText": "Empty()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsValidOrFixable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidOrFixable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FRawMesh& RawMesh)"
  },
  {
    "label": "FRawMeshBulkData()",
    "kind": "Method",
    "detail": "Function (class FRawMeshBulkData { # if WITH_EDITOR TDontCopy<FRWLock> BulkDataLock ; # endif FByteBulkData BulkData ; FGuid Guid ; bool bGuidIsHash ; public :)",
    "insertText": "FRawMeshBulkData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(class FArchive& Ar, class UObject* Owner)"
  },
  {
    "label": "SaveRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveRawMesh(struct FRawMesh& InMesh)"
  },
  {
    "label": "LoadRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRawMesh(struct FRawMesh& OutMesh)"
  },
  {
    "label": "GetIdString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetIdString()"
  },
  {
    "label": "UseHashAsGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseHashAsGuid(class UObject* Owner)"
  },
  {
    "label": "UsesHashAsGuid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesHashAsGuid()"
  }
]