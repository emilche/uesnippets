[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimpleThrustSim()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { enum class EThrustType : uint8 { Fixed = 0,Wing,Rudder,Elevator,HelicopterRotor } ; struct FSimpleThrustConfig { EThrustType Type ; FVector Offset ; FVector Axis ; TArray<float> Curve ; float MaxSpeed ; float MaxThrustForce ; float MaxControlAngle ; } ; class FSimpleThrustSim : public TVehicleSystem<FSimpleThrustConfig> { public :)",
    "insertText": "FSimpleThrustSim(const FSimpleThrustConfig* SetupIn)"
  },
  {
    "label": "SetThrottle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThrottle(float InThrottle)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (ThrottlePosition =)",
    "insertText": "Clamp(InThrottle, -1.f, 1.f)"
  },
  {
    "label": "SetPitch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPitch(float InPitch)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Pitch = -)",
    "insertText": "Clamp(InPitch, -1.f, 1.f) * Setup()"
  },
  {
    "label": "SetRoll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRoll(float InRoll)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Roll =)",
    "insertText": "Clamp(InRoll, -1.f, 1.f) * Setup()"
  },
  {
    "label": "SetYaw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetYaw(float InYaw)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Yaw =)",
    "insertText": "Clamp(InYaw, -1.f, 1.f) * Setup()"
  },
  {
    "label": "SetWorldVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorldVelocity(const FVector& InVelocity)"
  },
  {
    "label": "GetThrustForce()",
    "kind": "Method",
    "detail": "Function (WorldVelocity = InVelocity ; } const FVector&)",
    "insertText": "GetThrustForce()"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime)"
  }
]