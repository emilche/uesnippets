[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "FSceneViewProjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewProjectionData"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FPostProcessingInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessingInputs"
  },
  {
    "label": "FPostProcessMaterialInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessMaterialInputs"
  },
  {
    "label": "FScreenPassTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTexture"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "ISceneViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewExtension"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAutoRegister",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoRegister"
  },
  {
    "label": "FSceneViewExtensions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewExtensions"
  },
  {
    "label": "FSceneViewExtensionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewExtensionBase"
  },
  {
    "label": "FWorldSceneViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldSceneViewExtension"
  },
  {
    "label": "FHMDSceneViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHMDSceneViewExtension"
  },
  {
    "label": "FUNC_DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / DelegateCombinations . h \" # include \" RendererInterface . h \" # include \" SceneViewExtensionContext . h \" # include \" SceneTexturesConfig . h \" class APlayerController ; class FRHICommandListImmediate ; class FSceneView ; class FSceneViewFamily ; struct FMinimalViewInfo ; struct FSceneViewProjectionData ; class FRDGBuilder ; struct FPostProcessingInputs ; struct FPostProcessMaterialInputs ; struct FScreenPassTexture ; class FViewport ;)",
    "insertText": "FUNC_DECLARE_DELEGATE(FAfterPassCallbackDelegate, FScreenPassTexture , FRDGBuilder& , const FSceneView& , const FPostProcessMaterialInputs&)"
  },
  {
    "label": "ISceneViewExtension()",
    "kind": "Method",
    "detail": "Function (class ISceneViewExtension { public : enum class EPostProcessingPass : uint32 { SSRInput,MotionBlur,Tonemap,FXAA,VisualizeDepthOfField,MAX } ; public :)",
    "insertText": "ISceneViewExtension()"
  },
  {
    "label": "SetupViewFamily()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupViewFamily(FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "SetupView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupView(FSceneViewFamily& InViewFamily, FSceneView& InView)"
  },
  {
    "label": "SetupViewPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewPoint(APlayerController* Player, FMinimalViewInfo& InViewInfo)"
  },
  {
    "label": "SetupViewProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupViewProjectionMatrix(FSceneViewProjectionData& InOutProjectionData)"
  },
  {
    "label": "BeginRenderViewFamily()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRenderViewFamily(FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PostCreateSceneRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreateSceneRenderer(const FSceneViewFamily& InViewFamily, ISceneRenderer* Renderer)"
  },
  {
    "label": "PreRenderViewFamily_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreRenderViewFamily_RenderThread(FRDGBuilder& GraphBuilder, FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PreRenderView_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreRenderView_RenderThread(FRDGBuilder& GraphBuilder, FSceneView& InView)"
  },
  {
    "label": "PreInitViews_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreInitViews_RenderThread(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "PreRenderBasePass_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreRenderBasePass_RenderThread(FRDGBuilder& GraphBuilder, bool bDepthBufferIsPopulated)"
  },
  {
    "label": "PostRenderBasePassDeferred_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRenderBasePassDeferred_RenderThread(FRDGBuilder& GraphBuilder, FSceneView& InView, const FRenderTargetBindingSlots& RenderTargets, TRDGUniformBufferRef<FSceneTextureUniformParameters> SceneTextures)"
  },
  {
    "label": "PostRenderBasePassMobile_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRenderBasePassMobile_RenderThread(FRHICommandList& RHICmdList, FSceneView& InView)"
  },
  {
    "label": "PrePostProcessPass_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrePostProcessPass_RenderThread(FRDGBuilder& GraphBuilder, const FSceneView& InView, const FPostProcessingInputs& Inputs)"
  },
  {
    "label": "SubscribeToPostProcessingPass()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SubscribeToPostProcessingPass(EPostProcessingPass Pass, const FSceneView& InView, FAfterPassCallbackDelegateArray& InOutPassCallbacks, bool bIsPassEnabled)"
  },
  {
    "label": "PostRenderViewFamily_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRenderViewFamily_RenderThread(FRDGBuilder& GraphBuilder, FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PostRenderView_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRenderView_RenderThread(FRDGBuilder& GraphBuilder, FSceneView& InView)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPriority()"
  },
  {
    "label": "IsActiveThisFrame_Internal()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "IsActiveThisFrame_Internal(const FSceneViewExtensionContext& Context)"
  },
  {
    "label": "FSceneViewExtensionBase()",
    "kind": "Method",
    "detail": "Function (} } ; class FSceneViewExtensionBase : public ISceneViewExtension,public TSharedFromThis<FSceneViewExtensionBase,ESPMode::ThreadSafe> { public :)",
    "insertText": "FSceneViewExtensionBase(const FAutoRegister&)"
  },
  {
    "label": "FSceneViewExtensionBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSceneViewExtensionBase()"
  },
  {
    "label": "IsActiveThisFrame()",
    "kind": "Method",
    "detail": "Function (TArray<FSceneViewExtensionIsActiveFunctor> IsActiveThisFrameFunctions ; bool)",
    "insertText": "IsActiveThisFrame(const FSceneViewExtensionContext& Context)"
  },
  {
    "label": "FWorldSceneViewExtension()",
    "kind": "Method",
    "detail": "Function (} ; class FWorldSceneViewExtension : public FSceneViewExtensionBase { public :)",
    "insertText": "FWorldSceneViewExtension(const FAutoRegister& AutoReg, UWorld* InWorld)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "FHMDSceneViewExtension()",
    "kind": "Method",
    "detail": "Function (} private : TWeakObjectPtr<UWorld> World ; } ; class FHMDSceneViewExtension : public FSceneViewExtensionBase { public :)",
    "insertText": "FHMDSceneViewExtension(const FAutoRegister& AutoReg) : FSceneViewExtensionBase(AutoReg)"
  },
  {
    "label": "NewExtension()",
    "kind": "Method",
    "detail": "Function (} ; using FSceneViewExtensionRef = TSharedRef<ISceneViewExtension,ESPMode::ThreadSafe> ; class FSceneViewExtensions { class FSceneViewExtensionBase ; public : template<ExtensionType,. . . TArgs> TSharedRef<ExtensionType,ESPMode::ThreadSafe>)",
    "insertText": "NewExtension(TArgs&&... Args)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ExtensionType,ESPMode::ThreadSafe> NewExtension =)",
    "insertText": "MakeShareable(new ExtensionType( FAutoRegister(), Forward<TArgs>(Args)... ))"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtension(NewExtension)"
  },
  {
    "label": "GatherActiveExtensions()",
    "kind": "Method",
    "detail": "Function (const TArray<FSceneViewExtensionRef>)",
    "insertText": "GatherActiveExtensions(const FSceneViewExtensionContext& InContext)"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterExtension(const FSceneViewExtensionRef& RegisterMe)"
  }
]