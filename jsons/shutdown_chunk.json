[
  {
    "label": "ShutdownChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShutdownChunkConfig"
  },
  {
    "label": "ShutdownChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShutdownChunk"
  },
  {
    "label": "ShutdownChunk()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_SHUTDOWN_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_SHUTDOWN_CHUNK_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct ShutdownChunkConfig : ChunkConfig { int kType = 7 ; size_t kHeaderSize = 8 ; size_t kVariableLengthAlignment = 0 ; } ; class ShutdownChunk : public Chunk,public TLVTrait<ShutdownChunkConfig> { public : int kType = ShutdownChunkConfig::kType ;)",
    "insertText": "ShutdownChunk(TSN cumulative_tsn_ack) : cumulative_tsn_ack_(cumulative_tsn_ack)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<ShutdownChunk>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "cumulative_tsn_ack()",
    "kind": "Method",
    "detail": "Function (TSN)",
    "insertText": "cumulative_tsn_ack()"
  }
]