[
  {
    "label": "IBulkDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBulkDataRegistry"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FEditorBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkData"
  },
  {
    "label": "FEndLoadPackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndLoadPackageContext"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetaData"
  },
  {
    "label": "FData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FData"
  },
  {
    "label": "FResaveSizeTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResaveSizeTracker"
  },
  {
    "label": "IBuildInputResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildInputResolver"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" UObject / NameTypes . h \" # if WITH_EDITOR # include \" Async / Future . h \" # include \" Compression / CompressedBuffer . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" IO / IoHash . h \" # include \" Misc / Optional . h \" class IBulkDataRegistry ; class UPackage ; namespace UE::Serialization { class FEditorBulkData ; } struct FEndLoadPackageContext ; struct FGuid ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBulkDataRegistry, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(IBulkDataRegistry*, FSetBulkDataRegistry)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# endif namespace UE::BulkDataRegistry { enum class ERegisterResult : uint8 { Success,AlreadyExists,InvalidResultCode,} ; } # if WITH_EDITOR const TCHAR*)",
    "insertText": "LexToString(UE::BulkDataRegistry::ERegisterResult Value)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (namespace UE::BulkDataRegistry { struct FMetaData { FIoHash RawHash ; uint64 RawSize ; } ; struct FData { FCompressedBuffer Buffer ; } ; } class IBulkDataRegistry { public : bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IBulkDataRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "TryRegister()",
    "kind": "Method",
    "detail": "Function (UE::BulkDataRegistry::ERegisterResult)",
    "insertText": "TryRegister(UPackage* Owner, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "UpdateRegistrationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegistrationData(UPackage* Owner, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "OnExitMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitMemory(const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "UpdatePlaceholderPayloadId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaceholderPayloadId(const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "GetMeta()",
    "kind": "Method",
    "detail": "Function (TFuture<UE::BulkDataRegistry::FMetaData>)",
    "insertText": "GetMeta(const FGuid& BulkDataId)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (TFuture<UE::BulkDataRegistry::FData>)",
    "insertText": "GetData(const FGuid& BulkDataId)"
  },
  {
    "label": "TryGetBulkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetBulkData(const FGuid& BulkDataId, UE::Serialization::FEditorBulkData* OutBulk = nullptr, FName* OutOwner = nullptr)"
  },
  {
    "label": "GetBulkDataResaveSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetBulkDataResaveSize(FName PackageName)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetSetBulkDataRegistryDelegate()",
    "kind": "Method",
    "detail": "Function (FSetBulkDataRegistry&)",
    "insertText": "GetSetBulkDataRegistryDelegate()"
  },
  {
    "label": "IBulkDataRegistry()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "IBulkDataRegistry()"
  },
  {
    "label": "FResaveSizeTracker()",
    "kind": "Method",
    "detail": "Function (} ; } ; namespace UE::BulkDataRegistry::Private { class FResaveSizeTracker { public :)",
    "insertText": "FResaveSizeTracker()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(UPackage* Owner, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "OnEndLoadPackage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnEndLoadPackage(const FEndLoadPackageContext& Context)"
  },
  {
    "label": "OnAllModuleLoadingPhasesComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllModuleLoadingPhasesComplete()"
  },
  {
    "label": "GetGlobalBuildInputResolver()",
    "kind": "Method",
    "detail": "Function (FRWLock Lock ; TMap<FName,uint64> PackageBulkResaveSize ; TArray<FName> DeferredRemove ; bool bPostEngineInitComplete = false ; } ; } namespace UE::DerivedData { class IBuildInputResolver ; } UE::DerivedData::IBuildInputResolver*)",
    "insertText": "GetGlobalBuildInputResolver()"
  },
  {
    "label": "SetGlobalBuildInputResolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalBuildInputResolver(UE::DerivedData::IBuildInputResolver* InResolver)"
  }
]