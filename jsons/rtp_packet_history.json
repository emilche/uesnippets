[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "RtpPacketHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketHistory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MoreUseful",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoreUseful"
  },
  {
    "label": "StoredPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoredPacket"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_PACKET_HISTORY_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_PACKET_HISTORY_H_ # include<deque> # include<map> # include<memory> # include<set> # include<utility> # include<vector> # include \" api / function_view . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; class RtpPacketToSend ; class RtpPacketHistory { public : enum class StorageMode { kDisabled,kStoreAndCull } ; size_t kMaxCapacity = 9 6 0 0 ; size_t kMaxPaddingHistory = 6 3 ; TimeDelta kMinPacketDuration =)",
    "insertText": "Seconds(1)"
  },
  {
    "label": "RtpPacketHistory()",
    "kind": "Method",
    "detail": "Function (int kMinPacketDurationRtt = 3 ; int kPacketCullingDelayFactor = 3 ;)",
    "insertText": "RtpPacketHistory(Clock* clock, bool enable_padding_prio)"
  },
  {
    "label": "RtpPacketHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketHistory()"
  },
  {
    "label": "RtpPacketHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketHistory(const RtpPacketHistory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketHistory&)",
    "insertText": "operator(const RtpPacketHistory&)"
  },
  {
    "label": "SetStorePacketsStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStorePacketsStatus(StorageMode mode, size_t number_to_store)"
  },
  {
    "label": "GetStorageMode()",
    "kind": "Method",
    "detail": "Function (StorageMode)",
    "insertText": "GetStorageMode()"
  },
  {
    "label": "SetRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtt(TimeDelta rtt)"
  },
  {
    "label": "PutRtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutRtpPacket(std::unique_ptr<RtpPacketToSend> packet, Timestamp send_time)"
  },
  {
    "label": "GetPacketAndMarkAsPending()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "GetPacketAndMarkAsPending(uint16_t sequence_number)"
  },
  {
    "label": "GetPacketAndMarkAsPending()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "GetPacketAndMarkAsPending(uint16_t sequence_number, rtc::FunctionView<std::unique_ptr<RtpPacketToSend>( const RtpPacketToSend&)> encapsulate)"
  },
  {
    "label": "MarkPacketAsSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPacketAsSent(uint16_t sequence_number)"
  },
  {
    "label": "GetPacketState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPacketState(uint16_t sequence_number)"
  },
  {
    "label": "GetPayloadPaddingPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "GetPayloadPaddingPacket()"
  },
  {
    "label": "GetPayloadPaddingPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "GetPayloadPaddingPacket(rtc::FunctionView<std::unique_ptr<RtpPacketToSend>( const RtpPacketToSend&)> encapsulate)"
  },
  {
    "label": "CullAcknowledgedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullAcknowledgedPackets(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (private : struct MoreUseful ; class StoredPacket ; using PacketPrioritySet = std::set<StoredPacket*,MoreUseful> ; class StoredPacket { public :)",
    "insertText": "StoredPacket()"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoredPacket(std::unique_ptr<RtpPacketToSend> packet, Timestamp send_time, uint64_t insert_order)"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoredPacket(StoredPacket&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StoredPacket&)",
    "insertText": "operator(StoredPacket&&)"
  },
  {
    "label": "insert_order()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "insert_order()"
  },
  {
    "label": "send_time()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "send_time()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (send_time_ = value ; } std::unique_ptr<RtpPacketToSend> packet_ ; bool pending_transmission_ ; private : Timestamp send_time_ =)",
    "insertText": "Zero()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint64_t insert_order_ ; size_t times_retransmitted_ ; } ; struct MoreUseful { bool)",
    "insertText": "operator()(StoredPacket* lhs, StoredPacket* rhs)"
  },
  {
    "label": "VerifyRtt()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "VerifyRtt(const StoredPacket& packet) const RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset() RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "CullOldPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullOldPackets() RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "RemovePacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "RemovePacket(int packet_index) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GetPacketIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPacketIndex(uint16_t sequence_number) const RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GetStoredPacket()",
    "kind": "Method",
    "detail": "Function (StoredPacket*)",
    "insertText": "GetStoredPacket(uint16_t sequence_number) RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const bool enable_padding_prio_ ; Mutex lock_ ; size_t number_to_store_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]