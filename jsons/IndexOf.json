[
  {
    "label": "IndexOfBy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / IdentityFunctor . h \" # include \" Templates / Invoke . h \" # include \" Templates / UnrealTemplate . h \" namespace AlgoImpl { template<RangeType,ValueType,ProjectionType> auto)",
    "insertText": "IndexOfBy(RangeType&& Range, const ValueType& Value, ProjectionType Proj)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (auto Num =)",
    "insertText": "GetNum(Range)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto Data =)",
    "insertText": "GetData(Range)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using SizeType =)",
    "insertText": "decltype(Num)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,PredicateType> auto)",
    "insertText": "IndexOfByPredicate(RangeType&& Range, PredicateType Pred)"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (} } namespace Algo { template<RangeType,ValueType> auto)",
    "insertText": "IndexOf(RangeType&& Range, const ValueType& Value)"
  }
]