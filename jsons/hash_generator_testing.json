[
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "IsMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsMap"
  },
  {
    "label": "Map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Map"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "E",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "E"
  },
  {
    "label": "Generator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Generator"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "UniqueGenerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniqueGenerator"
  },
  {
    "label": "GetSharedRng()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_HASH_GENERATOR_TESTING_H_ # define ABSL_CONTAINER_INTERNAL_HASH_GENERATOR_TESTING_H_ # include<stdint . h> # include<algorithm> # include<cassert> # include<iosfwd> # include<random> # include<tuple> # include<type_traits> # include<utility> # include<vector> # include \" absl / container / internal / hash_policy_testing . h \" # include \" absl / memory / memory . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { namespace hash_internal { namespace generator_internal { template<class Container,class = void> struct IsMap : std::false_type { } ; template<class Map> struct IsMap<Map,absl::void_t<Map::mapped_type>> : std::true_type { } ; } std::mt19937_64*)",
    "insertText": "GetSharedRng()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum Enum { kEnumEmpty,kEnumDeleted,} ; enum class EnumClass : uint64_t { kEmpty,kDeleted,} ; std::ostream&)",
    "insertText": "operator(std::ostream& o, const EnumClass& ec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class E = void> struct Generator ; template<class T> struct Generator<T,std::enable_if<std::is_integral<T>::value>::type> { T)",
    "insertText": "operator()()"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (std::uniform_int_distribution<T> dist ; return)",
    "insertText": "dist(*GetSharedRng())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (std::uniform_int_distribution<std::underlying_type<Enum>::type> dist ;)",
    "insertText": "while(true)"
  },
  {
    "label": "EnumClass()",
    "kind": "Method",
    "detail": "Function (EnumClass variate = static_cast<)",
    "insertText": "EnumClass(dist(*GetSharedRng()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<class U> struct Generator<U,absl::void_t<)",
    "insertText": "decltype(std::declval<U&>().key()), decltype(std::declval<U&>().value())>> : Generator<std::pair< typename std::decay<decltype(std::declval<U&>().key())>::type, typename std::decay<decltype(std::declval<U&>().value())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class Container> using GeneratedType =)",
    "insertText": "decltype(std::declval<const Generator< typename std::conditional<generator_internal::IsMap<Container>::value, typename Container::value_type, typename Container::key_type>::type>&>()())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(values.size() < kMaxValues)"
  },
  {
    "label": "gen()",
    "kind": "Method",
    "detail": "Function (T value =)",
    "insertText": "gen()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "push_back(value)"
  }
]