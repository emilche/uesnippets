[
  {
    "label": "EncoderInfoSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderInfoSettings"
  },
  {
    "label": "BitrateLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitrateLimit"
  },
  {
    "label": "SimulcastEncoderAdapterEncoderInfoSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulcastEncoderAdapterEncoderInfoSettings"
  },
  {
    "label": "LibvpxVp8EncoderInfoSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp8EncoderInfoSettings"
  },
  {
    "label": "LibvpxVp9EncoderInfoSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp9EncoderInfoSettings"
  },
  {
    "label": "EncoderInfoSettings()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_ENCODER_INFO_SETTINGS_H_ # define RTC_BASE_EXPERIMENTS_ENCODER_INFO_SETTINGS_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / video_codecs / video_encoder . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { class EncoderInfoSettings { public : ~)",
    "insertText": "EncoderInfoSettings()"
  },
  {
    "label": "requested_resolution_alignment()",
    "kind": "Method",
    "detail": "Function (struct BitrateLimit { int frame_size_pixels = 0 ; int min_start_bitrate_bps = 0 ; int min_bitrate_bps = 0 ; int max_bitrate_bps = 0 ; } ; absl::optional<int>)",
    "insertText": "requested_resolution_alignment()"
  },
  {
    "label": "apply_alignment_to_all_simulcast_layers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "apply_alignment_to_all_simulcast_layers()"
  },
  {
    "label": "resolution_bitrate_limits()",
    "kind": "Method",
    "detail": "Function (} std::vector<VideoEncoder::ResolutionBitrateLimits>)",
    "insertText": "resolution_bitrate_limits()"
  },
  {
    "label": "GetDefaultSinglecastBitrateLimitsForResolution()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoEncoder::ResolutionBitrateLimits>)",
    "insertText": "GetDefaultSinglecastBitrateLimitsForResolution(VideoCodecType codec_type, int frame_size_pixels)"
  },
  {
    "label": "GetDefaultSinglecastBitrateLimitsWhenQpIsUntrusted()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoEncoder::ResolutionBitrateLimits>)",
    "insertText": "GetDefaultSinglecastBitrateLimitsWhenQpIsUntrusted()"
  },
  {
    "label": "GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted()",
    "kind": "Method",
    "detail": "Function (absl::optional<VideoEncoder::ResolutionBitrateLimits>)",
    "insertText": "GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(absl::optional<int> frame_size_pixels, const std::vector<VideoEncoder::ResolutionBitrateLimits>& resolution_bitrate_limits)"
  },
  {
    "label": "EncoderInfoSettings()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "EncoderInfoSettings(absl::string_view name)"
  },
  {
    "label": "SimulcastEncoderAdapterEncoderInfoSettings()",
    "kind": "Method",
    "detail": "Function (private : FieldTrialOptional<int> requested_resolution_alignment_ ; FieldTrialFlag apply_alignment_to_all_simulcast_layers_ ; std::vector<VideoEncoder::ResolutionBitrateLimits> resolution_bitrate_limits_ ; } ; class SimulcastEncoderAdapterEncoderInfoSettings : public EncoderInfoSettings { public :)",
    "insertText": "SimulcastEncoderAdapterEncoderInfoSettings()"
  },
  {
    "label": "LibvpxVp8EncoderInfoSettings()",
    "kind": "Method",
    "detail": "Function (} } ; class LibvpxVp8EncoderInfoSettings : public EncoderInfoSettings { public :)",
    "insertText": "LibvpxVp8EncoderInfoSettings()"
  },
  {
    "label": "LibvpxVp9EncoderInfoSettings()",
    "kind": "Method",
    "detail": "Function (} } ; class LibvpxVp9EncoderInfoSettings : public EncoderInfoSettings { public :)",
    "insertText": "LibvpxVp9EncoderInfoSettings()"
  }
]