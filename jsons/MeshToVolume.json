[
  {
    "label": "MeshToVolumeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MeshToVolumeFlags"
  },
  {
    "label": "MeshDataAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MeshDataAdapter"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "QuadAndTriangleDataAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuadAndTriangleDataAdapter"
  },
  {
    "label": "QuadAndTriangleDataAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuadAndTriangleDataAdapter"
  },
  {
    "label": "MeshToVoxelEdgeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeshToVoxelEdgeData"
  },
  {
    "label": "EdgeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EdgeData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "GenEdgeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenEdgeData"
  },
  {
    "label": "TransformPoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransformPoints"
  },
  {
    "label": "Tolerance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tolerance"
  },
  {
    "label": "CombineLeafNodes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CombineLeafNodes"
  },
  {
    "label": "CombineLeafNodes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CombineLeafNodes"
  },
  {
    "label": "StashOriginAndStoreOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StashOriginAndStoreOffset"
  },
  {
    "label": "RestoreOrigin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestoreOrigin"
  },
  {
    "label": "ComputeNodeConnectivity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComputeNodeConnectivity"
  },
  {
    "label": "ComputeNodeConnectivity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComputeNodeConnectivity"
  },
  {
    "label": "LeafNodeConnectivityTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafNodeConnectivityTable"
  },
  {
    "label": "LeafNodeConnectivityTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeafNodeConnectivityTable"
  },
  {
    "label": "SweepExteriorSign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SweepExteriorSign"
  },
  {
    "label": "Axis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Axis"
  },
  {
    "label": "SweepExteriorSign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SweepExteriorSign"
  },
  {
    "label": "SeedFillExteriorSign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeedFillExteriorSign"
  },
  {
    "label": "FillArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FillArray"
  },
  {
    "label": "SyncVoxelMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SyncVoxelMask"
  },
  {
    "label": "SeedPoints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeedPoints"
  },
  {
    "label": "ComputeIntersectingVoxelSign",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputeIntersectingVoxelSign"
  },
  {
    "label": "ValidateIntersectingVoxels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValidateIntersectingVoxels"
  },
  {
    "label": "IsNegative",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsNegative"
  },
  {
    "label": "RemoveSelfIntersectingSurface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveSelfIntersectingSurface"
  },
  {
    "label": "Comp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Comp"
  },
  {
    "label": "ReleaseChildNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReleaseChildNodes"
  },
  {
    "label": "StealUniqueLeafNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StealUniqueLeafNodes"
  },
  {
    "label": "VoxelizationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoxelizationData"
  },
  {
    "label": "VoxelizePolygons",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoxelizePolygons"
  },
  {
    "label": "Triangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Triangle"
  },
  {
    "label": "SubTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubTask"
  },
  {
    "label": "SubTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubTask"
  },
  {
    "label": "DiffLeafNodeMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiffLeafNodeMask"
  },
  {
    "label": "UnionValueMasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnionValueMasks"
  },
  {
    "label": "ConstructVoxelMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstructVoxelMask"
  },
  {
    "label": "ExpandNarrowband",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandNarrowband"
  },
  {
    "label": "Fragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Fragment"
  },
  {
    "label": "Fragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Fragment"
  },
  {
    "label": "ExpandNarrowband",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandNarrowband"
  },
  {
    "label": "AddNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddNodes"
  },
  {
    "label": "TransformValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransformValues"
  },
  {
    "label": "InactivateValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InactivateValues"
  },
  {
    "label": "OffsetValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OffsetValues"
  },
  {
    "label": "Renormalize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Renormalize"
  },
  {
    "label": "MinCombine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MinCombine"
  },
  {
    "label": "MeshToVoxelEdgeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeshToVoxelEdgeData"
  },
  {
    "label": "Primitive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Primitive"
  },
  {
    "label": "MeshToVoxelEdgeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeshToVoxelEdgeData"
  },
  {
    "label": "meshToVolume()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meshToVolume(\n  const MeshDataAdapter& mesh,\n  const math::Transform& transform,\n  float exteriorBandWidth = 3.0f,\n  float interiorBandWidth = 3.0f,\n  int flags = 0,\n  typename GridType::template ValueConverter<Int32>::Type * polygonIndexGrid = nullptr)"
  },
  {
    "label": "meshToVolume()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meshToVolume(\n    Interrupter& interrupter,\n    const MeshDataAdapter& mesh,\n    const math::Transform& transform,\n    float exteriorBandWidth = 3.0f,\n    float interiorBandWidth = 3.0f,\n    int flags = 0,\n    typename GridType::template ValueConverter<Int32>::Type * polygonIndexGrid = nullptr)"
  },
  {
    "label": "meshToSignedDistanceField()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meshToSignedDistanceField(\n    const openvdb::math::Transform& xform,\n    const std::vector<Vec3s>& points,\n    const std::vector<Vec3I>& triangles,\n    const std::vector<Vec4I>& quads,\n    float exBandWidth,\n    float inBandWidth)"
  },
  {
    "label": "meshToSignedDistanceField()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meshToSignedDistanceField(\n    Interrupter& interrupter,\n    const openvdb::math::Transform& xform,\n    const std::vector<Vec3s>& points,\n    const std::vector<Vec3I>& triangles,\n    const std::vector<Vec4I>& quads,\n    float exBandWidth,\n    float inBandWidth)"
  },
  {
    "label": "meshToUnsignedDistanceField()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meshToUnsignedDistanceField(\n    const openvdb::math::Transform& xform,\n    const std::vector<Vec3s>& points,\n    const std::vector<Vec3I>& triangles,\n    const std::vector<Vec4I>& quads,\n    float bandWidth)"
  },
  {
    "label": "meshToUnsignedDistanceField()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "meshToUnsignedDistanceField(\n    Interrupter& interrupter,\n    const openvdb::math::Transform& xform,\n    const std::vector<Vec3s>& points,\n    const std::vector<Vec3I>& triangles,\n    const std::vector<Vec4I>& quads,\n    float bandWidth)"
  },
  {
    "label": "createLevelSetBox()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "createLevelSetBox(const math::BBox<VecType>& bbox,\n    const openvdb::math::Transform& xform,\n    typename VecType::ValueType halfWidth = LEVEL_SET_HALF_WIDTH)"
  },
  {
    "label": "traceExteriorBoundaries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "traceExteriorBoundaries(FloatTreeT& tree)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convert(const std::vector<Vec3s>& pointList, const std::vector<Vec4I>& polygonList)"
  },
  {
    "label": "getEdgeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getEdgeData(Accessor& acc, const Coord& ijk,\n        std::vector<Vec3d>& points, std::vector<Index32>& primitives)"
  },
  {
    "label": "Accessor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Accessor(mTree)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueType(1e-7)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueType(1.0 + 1e-6)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "distAcc(*mDistTree)"
  },
  {
    "label": "idxAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<Int32TreeType>)",
    "insertText": "idxAcc(*mIdxTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "bbox()",
    "kind": "Method",
    "detail": "Function (CoordBBox)",
    "insertText": "bbox(mBBox)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (Int32)",
    "insertText": "pos(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (information)",
    "insertText": "for(Queue::iterator it = seedPoints.begin()"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "ijk(0, 0, 0)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "range(0, length, grainSize)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "distAcc(*mDistTree)"
  },
  {
    "label": "idxAcc()",
    "kind": "Method",
    "detail": "Function (Int32TreeType>)",
    "insertText": "idxAcc(*mIndexTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "distAcc(*mDistTree)"
  },
  {
    "label": "idxAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<Int32TreeType>)",
    "insertText": "idxAcc(*mIndexTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "acc(*mLhsTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mRhsTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<BoolTreeType>)",
    "insertText": "maskAcc(*mMaskTree)"
  },
  {
    "label": "newMaskAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<BoolTreeType>)",
    "insertText": "newMaskAcc(mNewMaskTree)"
  },
  {
    "label": "distAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "distAcc(*mDistTree)"
  },
  {
    "label": "indexAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<Int32TreeType>)",
    "insertText": "indexAcc(*mIndexTree)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "expandOp()",
    "kind": "Method",
    "detail": "Function (MeshDataAdapter>)",
    "insertText": "expandOp(maskNodes, maskTree,\n        distTree, indexTree, mesh, exteriorBandWidth, interiorBandWidth, voxelSize)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "acc(*mTree)"
  },
  {
    "label": "nodeConnectivity()",
    "kind": "Method",
    "detail": "Function (ConnectivityTable)",
    "insertText": "nodeConnectivity(tree)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (axis)",
    "insertText": "for(size_t n = 0; n < nodeConnectivity.size()"
  },
  {
    "label": "nodeRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "nodeRange(0, numLeafNodes)"
  },
  {
    "label": "maskTree()",
    "kind": "Method",
    "detail": "Function (BoolTreeType)",
    "insertText": "maskTree(false)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (mesh_to_volume_internal::ConstructVoxelMask<TreeType>)",
    "insertText": "op(maskTree, distTree, nodes)"
  },
  {
    "label": "quads()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec4I>)",
    "insertText": "quads(0)"
  },
  {
    "label": "quads()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec4I>)",
    "insertText": "quads(0)"
  },
  {
    "label": "triangles()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec3I>)",
    "insertText": "triangles(0)"
  },
  {
    "label": "triangles()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec3I>)",
    "insertText": "triangles(0)"
  },
  {
    "label": "GenEdgeData()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "GenEdgeData(\n        const std::vector<Vec3s>& pointList,\n        const std::vector<Vec4I>& polygonList)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(bool threaded = true)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "join(GenEdgeData& rhs)"
  },
  {
    "label": "voxelize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "voxelize(const Primitive&)"
  },
  {
    "label": "evalPrimitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "evalPrimitive(const Coord&, const Primitive&)"
  },
  {
    "label": "rayTriangleIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rayTriangleIntersection( const Vec3d& origin, const Vec3d& dir,\n        const Vec3d& a, const Vec3d& b, const Vec3d& c, double& t)"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (GenEdgeData)",
    "insertText": "converter(pointList, polygonList)"
  },
  {
    "label": "mesh()",
    "kind": "Method",
    "detail": "Function (Vec4I>)",
    "insertText": "mesh(points, 8, faces, 6)"
  }
]