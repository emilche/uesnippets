[
  {
    "label": "FD3D11GlobalStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11GlobalStats"
  },
  {
    "label": "FD3D11BufferedGPUTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11BufferedGPUTiming"
  },
  {
    "label": "FD3D11DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11DynamicRHI"
  },
  {
    "label": "FD3D11DisjointTimeStampQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11DisjointTimeStampQuery"
  },
  {
    "label": "FD3D11EventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11EventNode"
  },
  {
    "label": "FD3D11EventNodeFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11EventNodeFrame"
  },
  {
    "label": "FD3DGPUProfiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3DGPUProfiler"
  },
  {
    "label": "FD3D11TransitionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11TransitionData"
  },
  {
    "label": "AGSContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AGSContext"
  },
  {
    "label": "FD3D11Adapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11Adapter"
  },
  {
    "label": "D3D11RHI_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "D3D11RHI_API"
  },
  {
    "label": "FD3D11Viewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11Viewport"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D11RenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11RenderQuery"
  },
  {
    "label": "FProfiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfiler"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FTimestampCalibration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimestampCalibration"
  },
  {
    "label": "ShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderType"
  },
  {
    "label": "FD3D11DynamicRHIModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11DynamicRHIModule"
  },
  {
    "label": "FRangeAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRangeAllocator"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ID3D11DynamicRHI . h \" # include \" D3D11RHI . h \" # include \" RHI . h \" # include \" GPUProfiler . h \" # include \" ShaderCore . h \" # include \" Containers / ResourceArray . h \" # include \" EngineGlobals . h \" # include \" Engine / Engine . h \" # include \" HDRHelper . h \" # include \" BoundShaderStateHistory . h \" # include \" DXGIUtilities . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogD3D11RHI, Log, All)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# include \" Containers / StaticArray . h \" # include \" D3D11Util . h \" # include \" D3D11State . h \" # include \" D3D11Resources . h \" # include \" D3D11Viewport . h \" # include \" D3D11ConstantBuffer . h \" # include \" D3D11StateCache . h \" # include \" D3D11NvidiaAftermath . h \" # include \" RHIValidationCommon . h \" # include \" RHICoreShader . h \" # ifndef WITH_DX_PERF # define WITH_DX_PERF 1 # endif # if INTEL_EXTENSIONS THIRD_PARTY_INCLUDES_START # define INTC_IGDEXT_D3D11 1 # include \" igdext . h \" THIRD_PARTY_INCLUDES_END # endif # define DX_MAX_MSAA_COUNT 8 # ifndef # define 0 # endif # ifndef WITH_AMD_AGS # define WITH_AMD_AGS 0 # endif)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Present time\"),STAT_D3D11PresentTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CustomPresent time\"), STAT_D3D11CustomPresentTime, STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CreateTexture time\"),STAT_D3D11CreateTextureTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"LockTexture time\"),STAT_D3D11LockTextureTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UnlockTexture time\"),STAT_D3D11UnlockTextureTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CopyTexture time\"),STAT_D3D11CopyTextureTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CreateBoundShaderState time\"),STAT_D3D11CreateBoundShaderStateTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"New bound shader state time\"),STAT_D3D11NewBoundShaderStateTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Clean uniform buffer pool\"),STAT_D3D11CleanUniformBufferTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Clear shader resources\"),STAT_D3D11ClearShaderResourceTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Uniform buffer pool num free\"),STAT_D3D11NumFreeUniformBuffers,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Immutable Uniform buffers\"), STAT_D3D11NumImmutableUniformBuffers, STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Bound Shader State\"), STAT_D3D11NumBoundShaderState, STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Uniform buffer pool memory\"), STAT_D3D11FreeUniformBufferMemory, STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Update uniform buffer\"),STAT_D3D11UpdateUniformBufferTime,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Textures Allocated\"),STAT_D3D11TexturesAllocated,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Textures Released\"),STAT_D3D11TexturesReleased,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Texture object pool memory\"),STAT_D3D11TexturePoolMemory,STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"RenderTargetCommit\"), STAT_D3D11RenderTargetCommits, STATGROUP_D3D11RHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"RenderTargetCommitUAV\"), STAT_D3D11RenderTargetCommitsUAV, STATGROUP_D3D11RHI,)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TAutoConsoleVariable<int32> GCVarUseSharedKeyedMutex ; TAutoConsoleVariable<int32> GD3D11DebugCvar ; struct FD3D11GlobalStats { int64 GDedicatedVideoMemory ; int64 GDedicatedSystemMemory ; int64 GSharedSystemMemory ; int64 GTotalGraphicsMemory ; } ; #)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0)"
  },
  {
    "label": "FD3D11BufferedGPUTiming()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FD3D11BufferedGPUTiming(class FD3D11DynamicRHI* InD3DRHI, int32 BufferSize)"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming()"
  },
  {
    "label": "EndTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTiming()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTiming(bool bGetCurrentResultsAndBlock = false)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "CalibrateTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalibrateTimers(FD3D11DynamicRHI* InD3DRHI)"
  },
  {
    "label": "PlatformStaticInitialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PlatformStaticInitialize(void* UserData)"
  },
  {
    "label": "FD3D11DisjointTimeStampQuery()",
    "kind": "Method",
    "detail": "Function (FD3D11DynamicRHI* D3DRHI ; int32 BufferSize ; int32 CurrentTimestamp ; int32 NumIssuedTimestamps ; TRefCountPtr<ID3D11Query>* StartTimestamps ; TRefCountPtr<ID3D11Query>* EndTimestamps ; bool bIsTiming ; } ; class FD3D11DisjointTimeStampQuery : public FRenderResource { public :)",
    "insertText": "FD3D11DisjointTimeStampQuery(class FD3D11DynamicRHI* InD3DRHI)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTracking()"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTracking()"
  },
  {
    "label": "IsResultValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResultValid()"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (D3D11_QUERY_DATA_TIMESTAMP_DISJOINT)",
    "insertText": "GetResult()"
  },
  {
    "label": "FD3D11EventNode()",
    "kind": "Method",
    "detail": "Function (private : TRefCountPtr<ID3D11Query> DisjointQuery ; FD3D11DynamicRHI* D3DRHI ; } ; class FD3D11EventNode : public FGPUProfilerEventNode { public :)",
    "insertText": "FD3D11EventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent, class FD3D11DynamicRHI* InRHI) : FGPUProfilerEventNode(InName, InParent), Timing(InRHI, 1)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (Timing .)",
    "insertText": "InitRHI(FRHICommandListExecutor::GetImmediateCommandList())"
  },
  {
    "label": "FD3D11EventNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D11EventNode()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTiming()"
  },
  {
    "label": "StopTiming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopTiming()"
  },
  {
    "label": "FD3D11EventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} FD3D11BufferedGPUTiming Timing ; } ; class FD3D11EventNodeFrame : public FGPUProfilerEventNodeFrame { public :)",
    "insertText": "FD3D11EventNodeFrame(class FD3D11DynamicRHI* InRHI) : FGPUProfilerEventNodeFrame(), RootEventTiming(InRHI, 1), DisjointQuery(InRHI)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (FRHICommandListBase& RHICmdList =)",
    "insertText": "GetImmediateCommandList()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (RootEventTiming .)",
    "insertText": "InitRHI(RHICmdList)"
  },
  {
    "label": "FD3D11EventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D11EventNodeFrame()"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "GetRootTimingResults()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRootTimingResults()"
  },
  {
    "label": "LogDisjointQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDisjointQuery()"
  },
  {
    "label": "FD3DGPUProfiler()",
    "kind": "Method",
    "detail": "Function (FD3D11BufferedGPUTiming RootEventTiming ; FD3D11DisjointTimeStampQuery DisjointQuery ; } ; struct FD3DGPUProfiler : public FGPUProfiler { FD3D11BufferedGPUTiming FrameTiming ; class FD3D11DynamicRHI* D3D11RHI ; TIndirectArray<FD3D11EventNodeFrame> GPUHitchEventNodeFrames ;)",
    "insertText": "FD3DGPUProfiler(class FD3D11DynamicRHI* InD3DRHI)"
  },
  {
    "label": "CreateEventNode()",
    "kind": "Method",
    "detail": "Function (FGPUProfilerEventNode*)",
    "insertText": "CreateEventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent)"
  },
  {
    "label": "FD3D11EventNode()",
    "kind": "Method",
    "detail": "Function (FD3D11EventNode* EventNode = new)",
    "insertText": "FD3D11EventNode(InName, InParent, D3D11RHI)"
  },
  {
    "label": "PopEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopEvent()"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame(class FD3D11DynamicRHI* InRHI)"
  },
  {
    "label": "FD3D11Adapter()",
    "kind": "Method",
    "detail": "Function (} ; # endif struct FD3D11TransitionData { bool bUAVBarrier ; } ; struct AGSContext ; struct FD3D11Adapter { TRefCountPtr<IDXGIAdapter> DXGIAdapter ; DXGI_ADAPTER_DESC DXGIAdapterDesc ; D3D_FEATURE_LEVEL MaxSupportedFeatureLevel ; bool bSoftwareAdapter ; bool bIsIntegrated ;)",
    "insertText": "FD3D11Adapter()"
  },
  {
    "label": "FD3D11Adapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D11Adapter(TRefCountPtr<IDXGIAdapter> InDXGIAdapter, D3D_FEATURE_LEVEL InMaxSupportedFeatureLevel, bool bInSoftwareAdatper, bool InIsIntegrated) : DXGIAdapter(InDXGIAdapter) , MaxSupportedFeatureLevel(InMaxSupportedFeatureLevel) , bSoftwareAdapter(bInSoftwareAdatper) , bIsIntegrated(InIsIntegrated)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FD3D11DynamicRHI()",
    "kind": "Method",
    "detail": "Function (} } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class D3D11RHI_API FD3D11DynamicRHI : public ID3D11DynamicRHI,public IRHICommandContextPSOFallback { public : typedef TMap<FD3D11LockedKey,FD3D11LockedData> FD3D11LockTracker ; class FD3D11Viewport ;)",
    "insertText": "FD3D11DynamicRHI(IDXGIFactory1* InDXGIFactory1, D3D_FEATURE_LEVEL InFeatureLevel, const FD3D11Adapter& InAdapter)"
  },
  {
    "label": "FD3D11DynamicRHI()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D11DynamicRHI()"
  },
  {
    "label": "InitD3DDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitD3DDevice()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "FlushPendingLogs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushPendingLogs()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FD3D11DynamicRHI&)",
    "insertText": "Get()"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType> TD3D11ResourceTraits<TRHIType>::TConcreteType*)",
    "insertText": "ResourceCast(TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} FD3D11Texture*)",
    "insertText": "ResourceCast(FRHITexture* Texture)"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (template<TRHIShader> void)",
    "insertText": "ApplyStaticUniformBuffers(TRHIShader* Shader)"
  },
  {
    "label": "SetShaderParametersCommon()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "SetShaderParametersCommon(FD3D11ConstantBuffer* StageConstantBuffer, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters)"
  },
  {
    "label": "SetShaderUnbindsCommon()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "SetShaderUnbindsCommon(TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetQueryData(ID3D11Query* Query, void* Data, SIZE_T DataSize, bool bTimestamp, bool bWait, bool bStallRHIThread)"
  },
  {
    "label": "RHICreateSamplerState()",
    "kind": "Method",
    "detail": "Function (FSamplerStateRHIRef)",
    "insertText": "RHICreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateBlendState()",
    "kind": "Method",
    "detail": "Function (FBlendStateRHIRef)",
    "insertText": "RHICreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateStagingBuffer()",
    "kind": "Method",
    "detail": "Function (FStagingBufferRHIRef)",
    "insertText": "RHICreateStagingBuffer()"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBuffer, FRHIStagingBuffer* DestinationStagingBuffer, uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIWriteGPUFence(FRHIGPUFence* Fence)"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateUniformBuffer(FRHICommandListBase& RHICmdList, FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReplaceResources(FRHICommandListBase& RHICmdList, TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "LockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "UnlockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData,int32 SizeX,int32 SizeY,int32 Pitch,int32 PixelSize)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase& RHICmdList, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "RHIAsyncCopyTexture2DCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAsyncCopyTexture2DCopy(FRHITexture* NewTexture2DRHI, FRHITexture* Texture2DRHI, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, uint64* OutLockedByteCount)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHIUnorderedAccessView* UnorderedAccessViewRHI, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture,FIntRect Rect,TArray<FColor>& OutData,FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* TextureRHI, FIntRect InRect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,TArray<FFloat16Color>& OutData,ECubeFace CubeFace,int32 ArrayIndex,int32 MipIndex)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,FIntPoint ZMinMax,TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAliasTextureResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAliasTextureResources(FTextureRHIRef& DestTexture, FTextureRHIRef& SrcTexture)"
  },
  {
    "label": "RHICreateAliasedTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateAliasedTexture(FTextureRHIRef& SourceTexture)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHICreateViewport()",
    "kind": "Method",
    "detail": "Function (FViewportRHIRef)",
    "insertText": "RHICreateViewport(void* WindowHandle, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIHandleDisplayChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIHandleDisplayChange()"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetSupportedResolution(uint32& Width, uint32& Height)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativeInstance()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeInstance()"
  },
  {
    "label": "RHIGetNativeCommandBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeCommandBuffer()"
  },
  {
    "label": "RHIGetDefaultContext()",
    "kind": "Method",
    "detail": "Function (class IRHICommandContext*)",
    "insertText": "RHIGetDefaultContext()"
  },
  {
    "label": "RHIGetCommandContext()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext*)",
    "insertText": "RHIGetCommandContext(ERHIPipeline Pipeline, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIFinalizeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIFinalizeContext(FRHIFinalizeContextArgs&& Args, TRHIPipelineArray<IRHIPlatformCommandList*>& Output)"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHISetComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetComputeShader(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIBeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginUAVOverlap()"
  },
  {
    "label": "RHIEndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndUAVOverlap()"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICreateTransition(FRHITransition* Transition, const FRHITransitionCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReleaseTransition(FRHITransition* Transition)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetRasterizerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetRasterizerState(FRHIRasterizerState* NewState)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetBoundShaderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBoundShaderState(FRHIBoundShaderState* BoundShaderState)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUnbinds(FRHIComputeShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUnbinds(FRHIGraphicsShader* Shader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "RHISetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetDepthStencilState(FRHIDepthStencilState* NewState, uint32 StencilRef)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHISetBlendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendState(FRHIBlendState* NewState, const FLinearColor& BlendFactor)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendFactor(const FLinearColor& BlendFactor)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, const FRHIRenderTargetView* NewRenderTargets, const FRHIDepthRenderTargetView* NewDepthStencilTarget)"
  },
  {
    "label": "InternalSetUAVCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetUAVCS(uint32 BindIndex, FD3D11UnorderedAccessView* UnorderedAccessViewRHI)"
  },
  {
    "label": "InternalSetUAVVSPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetUAVVSPS(uint32 BindIndex, FD3D11UnorderedAccessView* UnorderedAccessViewRHI)"
  },
  {
    "label": "SetRenderTargetsAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsAndClear(const FRHISetRenderTargetsInfo& RenderTargetsInfo)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIEnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEnableDepthBoundsTest(bool bEnable)"
  },
  {
    "label": "EnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDepthBoundsTest(bEnable, 0.0f, 1.0f)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "EnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDepthBoundsTest(true, MinDepth, MaxDepth)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "PollQueryResults()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PollQueryResults()"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "FinalizeAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "FinalizeAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "LockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndUpdateTexture3D(FRHICommandListBase& RHICmdList, FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "RHILockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "ResolveTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveTexture(UE::RHICore::FResolveTextureInfo Info)"
  },
  {
    "label": "RHIGetDevice()",
    "kind": "Method",
    "detail": "Function (ID3D11Device*)",
    "insertText": "RHIGetDevice()"
  },
  {
    "label": "RHIGetDeviceContext()",
    "kind": "Method",
    "detail": "Function (ID3D11DeviceContext*)",
    "insertText": "RHIGetDeviceContext()"
  },
  {
    "label": "RHIGetAdapter()",
    "kind": "Method",
    "detail": "Function (IDXGIAdapter*)",
    "insertText": "RHIGetAdapter()"
  },
  {
    "label": "RHIGetSwapChain()",
    "kind": "Method",
    "detail": "Function (IDXGISwapChain*)",
    "insertText": "RHIGetSwapChain(FRHIViewport* InViewport)"
  },
  {
    "label": "RHIGetSwapChainFormat()",
    "kind": "Method",
    "detail": "Function (DXGI_FORMAT)",
    "insertText": "RHIGetSwapChainFormat(EPixelFormat InFormat)"
  },
  {
    "label": "RHICreateTexture2DFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture2DFromResource(EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D11Texture2D* Resource)"
  },
  {
    "label": "RHICreateTexture2DArrayFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture2DArrayFromResource(EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding&, ID3D11Texture2D* Resource)"
  },
  {
    "label": "RHICreateTextureCubeFromResource()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTextureCubeFromResource(EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D11Texture2D* Resource)"
  },
  {
    "label": "RHIGetResource()",
    "kind": "Method",
    "detail": "Function (ID3D11Buffer*)",
    "insertText": "RHIGetResource(FRHIBuffer* InBuffer)"
  },
  {
    "label": "RHIGetResource()",
    "kind": "Method",
    "detail": "Function (ID3D11Resource*)",
    "insertText": "RHIGetResource(FRHITexture* InTexture)"
  },
  {
    "label": "RHIGetResourceMemorySize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "RHIGetResourceMemorySize(FRHITexture* InTexture)"
  },
  {
    "label": "RHIGetRenderTargetView()",
    "kind": "Method",
    "detail": "Function (ID3D11RenderTargetView*)",
    "insertText": "RHIGetRenderTargetView(FRHITexture* InTexture, int32 InMipIndex = 0, int32 InArraySliceIndex = -1)"
  },
  {
    "label": "RHIGetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (ID3D11ShaderResourceView*)",
    "insertText": "RHIGetShaderResourceView(FRHITexture* InTexture)"
  },
  {
    "label": "RHIRegisterWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRegisterWork(uint32 NumPrimitives)"
  },
  {
    "label": "RHIVerifyResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIVerifyResult(ID3D11Device* Device, HRESULT Result, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line)"
  },
  {
    "label": "RHIGetDisplaysInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetDisplaysInformation(FDisplayInformationArray& OutDisplayInformation)"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ID3D11Device*)",
    "insertText": "GetDevice()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&LockTrackerCS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LockTracker .)",
    "insertText": "Add(Key, LockedData)"
  },
  {
    "label": "RemoveLockedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveLockedData(const FD3D11LockedKey& Key, FD3D11LockedData& OutLockedData)"
  },
  {
    "label": "IsQuadBufferStereoEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsQuadBufferStereoEnabled()"
  },
  {
    "label": "DisableQuadBufferStereo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableQuadBufferStereo()"
  },
  {
    "label": "BeginRecursiveCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRecursiveCommand()"
  },
  {
    "label": "EnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "EnableDepthBoundsTest(bool bEnable, float MinDepth, float MaxDepth)"
  },
  {
    "label": "ClearUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUAV(TRHICommandList_RecursiveHazardous<FD3D11DynamicRHI>& RHICmdList, FD3D11UnorderedAccessView* UAV, const void* ClearValues, bool bFloat)"
  },
  {
    "label": "RHIClearMRTImpl()",
    "kind": "Method",
    "detail": "Function (enum class EForceFullScreenClear { EDoNotForce,EForce } ; void)",
    "insertText": "RHIClearMRTImpl(const bool* bClearColorArray, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "ClearShaderResourceViews()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "ClearShaderResourceViews(FD3D11ViewableResource* Resource)"
  },
  {
    "label": "ClearAllShaderResourcesForFrequency()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "ClearAllShaderResourcesForFrequency()"
  },
  {
    "label": "InternalSetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "InternalSetShaderResourceView(FD3D11ViewableResource* Resource, ID3D11ShaderResourceView* SRV, int32 ResourceIndex)"
  },
  {
    "label": "TrackResourceBoundAsVB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackResourceBoundAsVB(FD3D11ViewableResource* Resource, int32 StreamIndex)"
  },
  {
    "label": "TrackResourceBoundAsIB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackResourceBoundAsIB(FD3D11ViewableResource* Resource)"
  },
  {
    "label": "SetCurrentComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentComputeShader(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "GetCurrentComputeShader()",
    "kind": "Method",
    "detail": "Function (CurrentComputeShader = ComputeShader ; } const FComputeShaderRHIRef&)",
    "insertText": "GetCurrentComputeShader()"
  },
  {
    "label": "ShaderFrequency()",
    "kind": "Method",
    "detail": "Function (InternalSetShaderResourceView<)",
    "insertText": "ShaderFrequency(Resource, SRV, ResourceIndex)"
  },
  {
    "label": "ClearState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearState()"
  },
  {
    "label": "ConditionalClearShaderResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalClearShaderResource(FD3D11ViewableResource* Resource, bool bCheckBoundInputAssembler)"
  },
  {
    "label": "ClearAllShaderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllShaderResources()"
  },
  {
    "label": "GetDisplayFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetDisplayFormat(EPixelFormat InPixelFormat)"
  },
  {
    "label": "GetStateCache()",
    "kind": "Method",
    "detail": "Function (FD3D11StateCache&)",
    "insertText": "GetStateCache()"
  },
  {
    "label": "InsertProfilerTimestamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertProfilerTimestamp(uint64* Target)"
  },
  {
    "label": "FlushProfilerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushProfilerStats()"
  },
  {
    "label": "FStats()",
    "kind": "Method",
    "detail": "Function (EmplaceProfilerEvent<UE::RHI::GPUProfiler::)",
    "insertText": "FStats()"
  },
  {
    "label": "CalibrateTimers()",
    "kind": "Method",
    "detail": "Function (StatEvent = { } ; } } # endif public : struct FTimestampCalibration { uint64 CPUTimestamp = 0 ; uint64 CPUFrequency = 0 ; uint64 GPUTimestamp = 0 ; uint64 GPUFrequency = 0 ; } ; TOptional<FTimestampCalibration>)",
    "insertText": "CalibrateTimers()"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (protected : TOptional<FTimestampCalibration> TimestampCalibration ; enum { MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE = 1 4 } ; FRHIUniformBuffer* BoundUniformBuffers [ SF_NumStandardFrequencies ] [ MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE ] ; uint16 DirtyUniformBuffers [ SF_NumStandardFrequencies ] ; TArray<FRHIUniformBuffer*> StaticUniformBuffers ; FExclusiveDepthStencil CurrentDSVAccessType ; bool bDiscardSharedConstants ; TRefCountPtr<FD3D11ConstantBuffer> VSConstantBuffer ; TRefCountPtr<FD3D11ConstantBuffer> PSConstantBuffer ; TRefCountPtr<FD3D11ConstantBuffer> GSConstantBuffer ; TRefCountPtr<FD3D11ConstantBuffer> CSConstantBuffer ; TGlobalResource<TBoundShaderStateHistory<1 0 0 0 0>> BoundShaderStateHistory ; FComputeShaderRHIRef CurrentComputeShader ; FDisplayInformationArray DisplayList ; HANDLE ExceptionHandlerHandle = INVALID_HANDLE_VALUE ; bool bRenderDoc = false ; public : # if RHI_NEW_GPU_PROFILER void)",
    "insertText": "RegisterGPUWork(uint32 NumPrimitives = 0, uint32 NumVertices = 0)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterGPUDispatch(FIntVector GroupCount)"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (GPUProfilingData .)",
    "insertText": "RegisterGPUWork(NumPrimitives, NumVertices)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (GPUProfilingData .)",
    "insertText": "RegisterGPUDispatch(GroupCount)"
  },
  {
    "label": "GetAdapter()",
    "kind": "Method",
    "detail": "Function (} # endif const FD3D11Adapter&)",
    "insertText": "GetAdapter()"
  },
  {
    "label": "CreateD3D11Texture2D()",
    "kind": "Method",
    "detail": "Function (# endif FD3D11Adapter Adapter ; FD3D11Texture*)",
    "insertText": "CreateD3D11Texture2D(FRHITextureCreateDesc const& CreateDesc, TConstArrayView<D3D11_SUBRESOURCE_DATA> InitialData = {})"
  },
  {
    "label": "CreateD3D11Texture3D()",
    "kind": "Method",
    "detail": "Function (FD3D11Texture*)",
    "insertText": "CreateD3D11Texture3D(FRHITextureCreateDesc const& CreateDesc)"
  },
  {
    "label": "CreateTextureFromResource()",
    "kind": "Method",
    "detail": "Function (FD3D11Texture*)",
    "insertText": "CreateTextureFromResource(bool bTextureArray, bool bCubeTexture, EPixelFormat Format, ETextureCreateFlags TexCreateFlags, const FClearValueBinding& ClearValueBinding, ID3D11Texture2D* TextureResource)"
  },
  {
    "label": "InitConstantBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConstantBuffers()"
  },
  {
    "label": "CommitNonComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitNonComputeShaderConstants()"
  },
  {
    "label": "CommitComputeShaderConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeShaderConstants()"
  },
  {
    "label": "SetResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (template<class ShaderType> void)",
    "insertText": "SetResourcesFromTables(const ShaderType* RESTRICT)"
  },
  {
    "label": "CommitGraphicsResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitGraphicsResourceTables()"
  },
  {
    "label": "CommitComputeResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeResourceTables(FD3D11ComputeShader* ComputeShader)"
  },
  {
    "label": "ValidateExclusiveDepthStencilAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateExclusiveDepthStencilAccess(FExclusiveDepthStencil Src)"
  },
  {
    "label": "GetBestSupportedMSAASetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBestSupportedMSAASetting(DXGI_FORMAT PlatformFormat, uint32 MSAACount, uint32& OutBestMSAACount, uint32& OutMSAAQualityLevels)"
  },
  {
    "label": "SetupAfterDeviceCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupAfterDeviceCreation()"
  },
  {
    "label": "UpdateMSAASettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMSAASettings()"
  },
  {
    "label": "GetMaxMSAAQuality()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxMSAAQuality(uint32 SampleCount)"
  },
  {
    "label": "CommitRenderTargetsAndUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitRenderTargetsAndUAVs()"
  },
  {
    "label": "CommitRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitRenderTargets(bool bClearUAVS)"
  },
  {
    "label": "CommitUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitUAVs()"
  },
  {
    "label": "CleanupD3DDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupD3DDevice()"
  },
  {
    "label": "ReleasePooledUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePooledUniformBuffers()"
  },
  {
    "label": "ResolveTextureUsingShader()",
    "kind": "Method",
    "detail": "Function (template<TPixelShader> void)",
    "insertText": "ResolveTextureUsingShader(FD3D11DynamicRHI* const This, FD3D11Texture* const SourceTexture, FD3D11Texture* const DestTexture, ID3D11RenderTargetView* const DestTextureRTV, ID3D11DepthStencilView* const DestTextureDSV, D3D11_TEXTURE2D_DESC const& ResolveTargetDesc, FResolveRect const& SourceRect, FResolveRect const& DestRect, typename TPixelShader::FParameter const PixelShaderParameter)"
  },
  {
    "label": "GetStagingTexture()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<ID3D11Texture2D>)",
    "insertText": "GetStagingTexture(FRHITexture* TextureRHI,FIntRect InRect, FIntRect& OutRect, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "ReadSurfaceDataNoMSAARaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSurfaceDataNoMSAARaw(FRHITexture* TextureRHI,FIntRect Rect,TArray<uint8>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "ReadSurfaceDataMSAARaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSurfaceDataMSAARaw(FRHITexture* TextureRHI, FIntRect Rect, TArray<uint8>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "StartIntelExtensions()",
    "kind": "Method",
    "detail": "Function (# if INTEL_EXTENSIONS void)",
    "insertText": "StartIntelExtensions()"
  },
  {
    "label": "StopIntelExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopIntelExtensions()"
  },
  {
    "label": "EnableUAVOverlap()",
    "kind": "Method",
    "detail": "Function (# endif bool bUAVOverlapEnabled = false ; void)",
    "insertText": "EnableUAVOverlap()"
  },
  {
    "label": "DisableUAVOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableUAVOverlap()"
  },
  {
    "label": "SetupDisplayHDRMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupDisplayHDRMetaData()"
  },
  {
    "label": "UpdateMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemoryStats()"
  },
  {
    "label": "SupportsDynamicReloading()",
    "kind": "Method",
    "detail": "Function (struct FD3DGPUProfiler ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS class FD3D11DynamicRHIModule : public IDynamicRHIModule { public : bool)",
    "insertText": "SupportsDynamicReloading()"
  },
  {
    "label": "CreateRHI()",
    "kind": "Method",
    "detail": "Function (FDynamicRHI*)",
    "insertText": "CreateRHI(ERHIFeatureLevel::Type RequestedFeatureLevel = ERHIFeatureLevel::Num)"
  },
  {
    "label": "FindAdapter()",
    "kind": "Method",
    "detail": "Function (private : FD3D11Adapter ChosenAdapter ; void)",
    "insertText": "FindAdapter()"
  },
  {
    "label": "FRange()",
    "kind": "Method",
    "detail": "Function (} ; class FRangeAllocator { public : struct FRange {)",
    "insertText": "FRange() : Start(0) , Size(0)"
  },
  {
    "label": "SetOccupied()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOccupied(int32 InStart, int32 InSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Start = InStart ; Size = InSize ;)",
    "insertText": "check(IsOccupied())"
  },
  {
    "label": "SetUnOccupied()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUnOccupied(int32 InStart, int32 InSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Start = InStart ; Size = - InSize ;)",
    "insertText": "check(!IsOccupied())"
  },
  {
    "label": "ExtendUnoccupied()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendUnoccupied(int32 InSize)"
  },
  {
    "label": "MakeOccupied()",
    "kind": "Method",
    "detail": "Function (Size - = InSize ; } void)",
    "insertText": "MakeOccupied(int32 InSize)"
  },
  {
    "label": "MakeUnOccupied()",
    "kind": "Method",
    "detail": "Function (Size = InSize ; } void)",
    "insertText": "MakeUnOccupied()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Size = - Size ; } bool)",
    "insertText": "operator(const FRange& rhs)"
  },
  {
    "label": "FRangeAllocator()",
    "kind": "Method",
    "detail": "Function (} private : int32 Start ; int32 Size ; } ; public :)",
    "insertText": "FRangeAllocator(uint32 TotalSize)"
  },
  {
    "label": "SetUnOccupied()",
    "kind": "Method",
    "detail": "Function (FRange NewRange ; NewRange .)",
    "insertText": "SetUnOccupied(0, TotalSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Add(NewRange)"
  },
  {
    "label": "OccupyRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OccupyRange(FRange InRange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRange& ref = Entries [ i ] ;)",
    "insertText": "if(!ref.IsOccupied())"
  },
  {
    "label": "GetEnd()",
    "kind": "Method",
    "detail": "Function (int32 OverlapSize = ref .)",
    "insertText": "GetEnd() - InRange.GetStart()"
  },
  {
    "label": "GetStart()",
    "kind": "Method",
    "detail": "Function (int32 FrontCutSize = InRange .)",
    "insertText": "GetStart() - ref.GetStart()"
  },
  {
    "label": "SetUnOccupied()",
    "kind": "Method",
    "detail": "Function (FRange NewFrontRange ; NewFrontRange .)",
    "insertText": "SetUnOccupied(InRange.GetStart(), ref.ComputeSize() - FrontCutSize)"
  },
  {
    "label": "SetUnOccupied()",
    "kind": "Method",
    "detail": "Function (ref .)",
    "insertText": "SetUnOccupied(ref.GetStart(), FrontCutSize)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (+ + i ; Entries .)",
    "insertText": "Insert(NewFrontRange, i)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Entries[i].GetStart() == InRange.GetStart())"
  },
  {
    "label": "ComputeSize()",
    "kind": "Method",
    "detail": "Function (int32 BackCutSize = Entries [ i ] .)",
    "insertText": "ComputeSize() - InRange.ComputeSize()"
  },
  {
    "label": "SetUnOccupied()",
    "kind": "Method",
    "detail": "Function (FRange NewBackRange ; NewBackRange .)",
    "insertText": "SetUnOccupied(Entries[i].GetStart() + InRange.ComputeSize(), BackCutSize)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Insert(NewBackRange, i + 1)"
  },
  {
    "label": "AllocRange()",
    "kind": "Method",
    "detail": "Function (} Entries [ i ] = InRange ; return ; } } } } FRange)",
    "insertText": "AllocRange(uint32 InSize)"
  },
  {
    "label": "ComputeSize()",
    "kind": "Method",
    "detail": "Function (uint32 RefSize = ref .)",
    "insertText": "ComputeSize()"
  },
  {
    "label": "MakeOccupied()",
    "kind": "Method",
    "detail": "Function (ref .)",
    "insertText": "MakeOccupied(InSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRange Ret = ref ;)",
    "insertText": "if(RefSize > InSize)"
  },
  {
    "label": "SetUnOccupied()",
    "kind": "Method",
    "detail": "Function (FRange NewRange ; NewRange .)",
    "insertText": "SetUnOccupied(ref.GetEnd(), RefSize - InSize)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Insert(NewRange, i + 1)"
  },
  {
    "label": "FRange()",
    "kind": "Method",
    "detail": "Function (} return Ret ; } } } return)",
    "insertText": "FRange()"
  },
  {
    "label": "ReleaseRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRange(FRange In)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 Index = Entries .)",
    "insertText": "Find(In)"
  },
  {
    "label": "Compacten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compacten(Index)"
  },
  {
    "label": "GetNumEntries()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumEntries()"
  },
  {
    "label": "ComputeUnoccupiedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ComputeUnoccupiedSize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Ret = 0 ;)",
    "insertText": "for(uint32 i = 0, Num = Entries.Num(); i < Num; ++i)"
  },
  {
    "label": "Compacten()",
    "kind": "Method",
    "detail": "Function (Ret + = RefSize ; } } return Ret ; } private : void)",
    "insertText": "Compacten(uint32 StartIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - StartIndex ; } uint32 ElementsToRemove = 0 ; uint32 SizeGained = 0 ;)",
    "insertText": "for(uint32 i = StartIndex + 1, Num = Entries.Num(); i < Num; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { break ; } })",
    "insertText": "if(ElementsToRemove)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "RemoveAt(StartIndex + 1, ElementsToRemove, EAllowShrinking::No)"
  },
  {
    "label": "ExtendUnoccupied()",
    "kind": "Method",
    "detail": "Function (Entries [ StartIndex ] .)",
    "insertText": "ExtendUnoccupied(SizeGained)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "Test()"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING { FRangeAllocator)",
    "insertText": "A(10)"
  },
  {
    "label": "AllocRange()",
    "kind": "Method",
    "detail": "Function (FRangeAllocator::FRange a = A .)",
    "insertText": "AllocRange(3)"
  },
  {
    "label": "AllocRange()",
    "kind": "Method",
    "detail": "Function (FRangeAllocator::FRange b = A .)",
    "insertText": "AllocRange(4)"
  },
  {
    "label": "ReleaseRange()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "ReleaseRange(b)"
  },
  {
    "label": "ReleaseRange()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "ReleaseRange(a)"
  },
  {
    "label": "ReleaseRange()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "ReleaseRange(d)"
  },
  {
    "label": "AllocRange()",
    "kind": "Method",
    "detail": "Function (FRangeAllocator::FRange e = A .)",
    "insertText": "AllocRange(10)"
  },
  {
    "label": "ReleaseRange()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "ReleaseRange(e)"
  },
  {
    "label": "SetOccupied()",
    "kind": "Method",
    "detail": "Function (FRangeAllocator::FRange f ; f .)",
    "insertText": "SetOccupied(2, 4)"
  },
  {
    "label": "OccupyRange()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "OccupyRange(f)"
  },
  {
    "label": "AllocRange()",
    "kind": "Method",
    "detail": "Function (FRangeAllocator::FRange g = A .)",
    "insertText": "AllocRange(2)"
  }
]