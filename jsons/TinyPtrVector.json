[
  {
    "label": "TinyPtrVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TinyPtrVector"
  },
  {
    "label": "TinyPtrVector()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_TINYPTRVECTOR_H # define LLVM_ADT_TINYPTRVECTOR_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / PointerUnion . h \" # include \" llvm / ADT / SmallVector . h \" namespace llvm { template<EltTy> class TinyPtrVector { public : typedef llvm::SmallVector<EltTy,4> VecTy ; typedef VecTy::value_type value_type ; typedef llvm::PointerUnion<EltTy,VecTy*> PtrUnion ; private : PtrUnion Val ; public :)",
    "insertText": "TinyPtrVector()"
  },
  {
    "label": "TinyPtrVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TinyPtrVector(const TinyPtrVector &RHS) : Val(RHS.Val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TinyPtrVector&)",
    "insertText": "operator(const TinyPtrVector &RHS)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "clear()"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (Val . template get<)",
    "insertText": "VecTy()->clear()"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (Val . template get<)",
    "insertText": "VecTy()->push_back(RHS.front())"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (} else {* Val . template get<)",
    "insertText": "VecTy() = *RHS.Val.template get<VecTy*>()"
  },
  {
    "label": "TinyPtrVector()",
    "kind": "Method",
    "detail": "Function (} return* this ; })",
    "insertText": "TinyPtrVector(TinyPtrVector &&RHS) : Val(RHS.Val)"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (RHS .)",
    "insertText": "Val(EltTy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TinyPtrVector&)",
    "insertText": "operator(TinyPtrVector &&RHS)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (V ->)",
    "insertText": "push_back(RHS.front())"
  },
  {
    "label": "EltTy()",
    "kind": "Method",
    "detail": "Function (} operator ArrayRef<)",
    "insertText": "EltTy()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} typedef const EltTy* const_iterator ; typedef EltTy* iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EltTy)",
    "insertText": "operator(unsigned i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Val.isNull() && \"can't index into an empty vector\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i == 0 && \"tinyvector index out of range\")"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} EltTy)",
    "insertText": "front()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"vector empty\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} EltTy)",
    "insertText": "back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_back(EltTy NewVal)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NewVal && \"Can't add a null value\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Val = NewVal ; return ; })",
    "insertText": "if(EltTy V = Val.template dyn_cast<EltTy>())"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (Val = new)",
    "insertText": "VecTy()"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (Val . template get<)",
    "insertText": "VecTy()->push_back(V)"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (} Val . template get<)",
    "insertText": "VecTy()->push_back(NewVal)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(VecTy *Vec = Val.template dyn_cast<VecTy*>())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} } iterator)",
    "insertText": "erase(iterator I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I >= begin() && \"Iterator to erase is out of bounds.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I < end() && \"Erasing at past-the-end iterator.\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator S, iterator E)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(S >= begin() && \"Range to erase is out of bounds.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(S <= E && \"Trying to erase invalid range.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(E <= end() && \"Trying to erase past the end.\")"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(iterator I, const EltTy &Elt)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I >= this->begin() && \"Insertion iterator is out of bounds.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I <= this->end() && \"Inserting past the end of the vector.\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(Elt)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert(!Val.isNull() && \"Null value with non-end insert iterator.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I == begin())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Val = Elt ;)",
    "insertText": "push_back(V)"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (} return Val . template get<)",
    "insertText": "VecTy()->insert(I, Elt)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<ItTy> iterator)",
    "insertText": "insert(iterator I, ItTy From, ItTy To)"
  },
  {
    "label": "VecTy()",
    "kind": "Method",
    "detail": "Function (} return Val . template get<)",
    "insertText": "VecTy()->insert(begin() + Offset, From, To)"
  }
]