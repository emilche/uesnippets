[
  {
    "label": "MCRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterClass"
  },
  {
    "label": "MCRegisterDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCRegisterDesc"
  },
  {
    "label": "MCRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterInfo"
  },
  {
    "label": "DwarfLLVMRegPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DwarfLLVMRegPair"
  },
  {
    "label": "SubRegCoveredBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubRegCoveredBits"
  },
  {
    "label": "DiffListIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiffListIterator"
  },
  {
    "label": "MCSubRegIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubRegIterator"
  },
  {
    "label": "MCSubRegIndexIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubRegIndexIterator"
  },
  {
    "label": "MCSuperRegIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSuperRegIterator"
  },
  {
    "label": "MCRegUnitIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegUnitIterator"
  },
  {
    "label": "MCRegUnitMaskIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegUnitMaskIterator"
  },
  {
    "label": "MCRegUnitRootIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegUnitRootIterator"
  },
  {
    "label": "MCRegAliasIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegAliasIterator"
  },
  {
    "label": "getID()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCREGISTERINFO_H # define LLVM_MC_MCREGISTERINFO_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / Support / ErrorHandling . h \" # include<cassert> namespace llvm { typedef uint16_t MCPhysReg ; class MCRegisterClass { public : typedef const MCPhysReg* iterator ; typedef const MCPhysReg* const_iterator ; const iterator RegsBegin ; const uint8_t* const RegSet ; const uint32_t NameIdx ; const uint16_t RegsSize ; const uint16_t RegSetSize ; const uint16_t ID ; const uint16_t RegSize,Alignment ; const int8_t CopyCost ; const bool Allocatable ; unsigned)",
    "insertText": "getID()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < getNumRegs() && \"Register number out of range!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned InByte = Reg % 8 ; unsigned Byte = Reg / 8 ;)",
    "insertText": "if(Byte >= RegSetSize)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(unsigned Reg1, unsigned Reg2)"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSize()"
  },
  {
    "label": "DiffListIterator()",
    "kind": "Method",
    "detail": "Function (const MCPhysReg* DiffLists ; const unsigned* RegUnitMaskSequences ; const char* RegStrings ; const char* RegClassStrings ; const uint16_t* SubRegIndices ; const SubRegCoveredBits* SubRegIdxRanges ; unsigned NumSubRegIndices ; const uint16_t* RegEncodingTable ; unsigned L2DwarfRegsSize ; unsigned EHL2DwarfRegsSize ; unsigned Dwarf2LRegsSize ; unsigned EHDwarf2LRegsSize ; const DwarfLLVMRegPair* L2DwarfRegs ; const DwarfLLVMRegPair* EHL2DwarfRegs ; const DwarfLLVMRegPair* Dwarf2LRegs ; const DwarfLLVMRegPair* EHDwarf2LRegs ; DenseMap<unsigned,int> L2SEHRegs ; public : class DiffListIterator { uint16_t Val ; const MCPhysReg* List ; protected :)",
    "insertText": "DiffListIterator() : Val(0), List(nullptr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(MCPhysReg InitVal, const MCPhysReg *DiffList)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (Val = InitVal ; List = DiffList ; } unsigned)",
    "insertText": "advance()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValid() && \"Cannot move off the end of the list.\")"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (MCPhysReg D =* List + + ; Val + = D ; return D ; } public : bool)",
    "insertText": "isValid()"
  },
  {
    "label": "InitMCRegisterInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class MCSubRegIterator ; class MCSubRegIndexIterator ; class MCSuperRegIterator ; class MCRegUnitIterator ; class MCRegUnitMaskIterator ; class MCRegUnitRootIterator ; void)",
    "insertText": "InitMCRegisterInfo(const MCRegisterDesc *D, unsigned NR, unsigned RA, unsigned PC, const MCRegisterClass *C, unsigned NC, const MCPhysReg (*RURoots)[2], unsigned NRU, const MCPhysReg *DL, const unsigned *RUMS, const char *Strings, const char *ClassStrings, const uint16_t *SubIndices, unsigned NumIndices, const SubRegCoveredBits *SubIdxRanges, const uint16_t *RET)"
  },
  {
    "label": "mapLLVMRegsToDwarfRegs()",
    "kind": "Method",
    "detail": "Function (Desc = D ; NumRegs = NR ; RAReg = RA ; PCReg = PC ; Classes = C ; DiffLists = DL ; RegUnitMaskSequences = RUMS ; RegStrings = Strings ; RegClassStrings = ClassStrings ; NumClasses = NC ; RegUnitRoots = RURoots ; NumRegUnits = NRU ; SubRegIndices = SubIndices ; NumSubRegIndices = NumIndices ; SubRegIdxRanges = SubIdxRanges ; RegEncodingTable = RET ; } void)",
    "insertText": "mapLLVMRegsToDwarfRegs(const DwarfLLVMRegPair *Map, unsigned Size, bool isEH)"
  },
  {
    "label": "mapDwarfRegsToLLVMRegs()",
    "kind": "Method",
    "detail": "Function (EHL2DwarfRegs = Map ; EHL2DwarfRegsSize = Size ; } else { L2DwarfRegs = Map ; L2DwarfRegsSize = Size ; } } void)",
    "insertText": "mapDwarfRegsToLLVMRegs(const DwarfLLVMRegPair *Map, unsigned Size, bool isEH)"
  },
  {
    "label": "mapLLVMRegToSEHReg()",
    "kind": "Method",
    "detail": "Function (EHDwarf2LRegs = Map ; EHDwarf2LRegsSize = Size ; } else { Dwarf2LRegs = Map ; Dwarf2LRegsSize = Size ; } } void)",
    "insertText": "mapLLVMRegToSEHReg(unsigned LLVMReg, int SEHReg)"
  },
  {
    "label": "getRARegister()",
    "kind": "Method",
    "detail": "Function (L2SEHRegs [ LLVMReg ] = SEHReg ; } unsigned)",
    "insertText": "getRARegister()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RegNo < NumRegs && \"Attempting to access record for invalid register number!\")"
  },
  {
    "label": "getSubReg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSubReg(unsigned Reg, unsigned Idx)"
  },
  {
    "label": "getMatchingSuperReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getMatchingSuperReg(unsigned Reg, unsigned SubIdx, const MCRegisterClass *RC)"
  },
  {
    "label": "getSubRegIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSubRegIndex(unsigned RegNo, unsigned SubRegNo)"
  },
  {
    "label": "getSubRegIdxSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSubRegIdxSize(unsigned Idx)"
  },
  {
    "label": "getSubRegIdxOffset()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSubRegIdxOffset(unsigned Idx)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getName(unsigned RegNo)"
  },
  {
    "label": "getNumRegs()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumRegs()"
  },
  {
    "label": "getLLVMRegNum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getLLVMRegNum(unsigned RegNum, bool isEH)"
  },
  {
    "label": "getSEHRegNum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getSEHRegNum(unsigned RegNum)"
  },
  {
    "label": "regclass_begin()",
    "kind": "Method",
    "detail": "Function (regclass_iterator)",
    "insertText": "regclass_begin()"
  },
  {
    "label": "getRegClass()",
    "kind": "Method",
    "detail": "Function (} const MCRegisterClass&)",
    "insertText": "getRegClass(unsigned i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < getNumRegClasses() && \"Register Class ID out of range\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RegNo < NumRegs && \"Attempting to get encoding for invalid register number!\")"
  },
  {
    "label": "isSuperRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSuperRegister(unsigned RegA, unsigned RegB)"
  },
  {
    "label": "isSubRegisterEq()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSubRegisterEq(unsigned RegA, unsigned RegB)"
  },
  {
    "label": "isSuperRegisterEq()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSuperRegisterEq(unsigned RegA, unsigned RegB)"
  },
  {
    "label": "MCSubRegIterator()",
    "kind": "Method",
    "detail": "Function (} } ; class MCSubRegIterator : public MCRegisterInfo::DiffListIterator { public :)",
    "insertText": "MCSubRegIterator(unsigned Reg, const MCRegisterInfo *MCRI, bool IncludeSelf = false)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Reg, MCRI->DiffLists + MCRI->get(Reg).SubRegs)"
  },
  {
    "label": "MCSubRegIndexIterator()",
    "kind": "Method",
    "detail": "Function (} } ; class MCSubRegIndexIterator { MCSubRegIterator SRIter ; const uint16_t* SRIndex ; public :)",
    "insertText": "MCSubRegIndexIterator(unsigned Reg, const MCRegisterInfo *MCRI) : SRIter(Reg, MCRI)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (SRIndex = MCRI -> SubRegIndices + MCRI ->)",
    "insertText": "get(Reg)"
  },
  {
    "label": "getSubReg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSubReg()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()"
  },
  {
    "label": "MCSuperRegIterator()",
    "kind": "Method",
    "detail": "Function (+ + SRIter ; + + SRIndex ; } } ; class MCSuperRegIterator : public MCRegisterInfo::DiffListIterator { public :)",
    "insertText": "MCSuperRegIterator()"
  },
  {
    "label": "MCSuperRegIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MCSuperRegIterator(unsigned Reg, const MCRegisterInfo *MCRI, bool IncludeSelf = false)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Reg, MCRI->DiffLists + MCRI->get(Reg).SuperRegs)"
  },
  {
    "label": "MCRegUnitIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MCRegUnitIterator(unsigned Reg, const MCRegisterInfo *MCRI)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Reg && \"Null register has no regunits\")"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (unsigned Scale = RU& 1 5 ; unsigned Offset = RU>> 4 ;)",
    "insertText": "init(Reg * Scale, MCRI->DiffLists + Offset)"
  },
  {
    "label": "MCRegUnitMaskIterator()",
    "kind": "Method",
    "detail": "Function (} } ; class MCRegUnitMaskIterator { MCRegUnitIterator RUIter ; const unsigned* MaskListIter ; public :)",
    "insertText": "MCRegUnitMaskIterator()"
  },
  {
    "label": "MCRegUnitMaskIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MCRegUnitMaskIterator(unsigned Reg, const MCRegisterInfo *MCRI) : RUIter(Reg, MCRI)"
  },
  {
    "label": "MCRegUnitRootIterator()",
    "kind": "Method",
    "detail": "Function (+ + MaskListIter ; + + RUIter ; } } ; class MCRegUnitRootIterator { uint16_t Reg0 ; uint16_t Reg1 ; public :)",
    "insertText": "MCRegUnitRootIterator() : Reg0(0), Reg1(0)"
  },
  {
    "label": "MCRegUnitRootIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MCRegUnitRootIterator(unsigned RegUnit, const MCRegisterInfo *MCRI)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RegUnit < MCRI->getNumRegUnits() && \"Invalid register unit\")"
  },
  {
    "label": "MCRegAliasIterator()",
    "kind": "Method",
    "detail": "Function (Reg0 = Reg1 ; Reg1 = 0 ; } } ; class MCRegAliasIterator { private : unsigned Reg ; const MCRegisterInfo* MCRI ; bool IncludeSelf ; MCRegUnitIterator RI ; MCRegUnitRootIterator RRI ; MCSuperRegIterator SI ; public :)",
    "insertText": "MCRegAliasIterator(unsigned Reg, const MCRegisterInfo *MCRI, bool IncludeSelf) : Reg(Reg), MCRI(MCRI), IncludeSelf(IncludeSelf)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(SI.isValid() && \"Cannot dereference an invalid iterator.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + SI ;)",
    "insertText": "if(SI.isValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + RRI ;)",
    "insertText": "if(RRI.isValid())"
  },
  {
    "label": "MCSuperRegIterator()",
    "kind": "Method",
    "detail": "Function (SI =)",
    "insertText": "MCSuperRegIterator(*RRI, MCRI, true)"
  },
  {
    "label": "MCRegUnitRootIterator()",
    "kind": "Method",
    "detail": "Function (RRI =)",
    "insertText": "MCRegUnitRootIterator(*RI, MCRI)"
  }
]