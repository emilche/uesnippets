[
  {
    "label": "PastixLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLU"
  },
  {
    "label": "PastixLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLLT"
  },
  {
    "label": "PastixLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLDLT"
  },
  {
    "label": "Pastix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pastix"
  },
  {
    "label": "pastix_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pastix_traits"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "PastixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixBase"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PASTIXSUPPORT_H # define EIGEN_PASTIXSUPPORT_H namespace Eigen { # if)",
    "insertText": "defined(DCOMPLEX)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (template<_MatrixType,int Options> class PastixLLT ; template<_MatrixType,int Options> class PastixLDLT ; namespace internal { template<class Pastix> struct pastix_traits ; template<_MatrixType> struct pastix_traits<PastixLU<_MatrixType>> { typedef _MatrixType MatrixType ; typedef _MatrixType::Scalar Scalar ; typedef _MatrixType::RealScalar RealScalar ; typedef _MatrixType::StorageIndex StorageIndex ; } ; template<_MatrixType,int Options> struct pastix_traits<PastixLLT<_MatrixType,Options>> { typedef _MatrixType MatrixType ; typedef _MatrixType::Scalar Scalar ; typedef _MatrixType::RealScalar RealScalar ; typedef _MatrixType::StorageIndex StorageIndex ; } ; template<_MatrixType,int Options> struct pastix_traits<PastixLDLT<_MatrixType,Options>> { typedef _MatrixType MatrixType ; typedef _MatrixType::Scalar Scalar ; typedef _MatrixType::RealScalar RealScalar ; typedef _MatrixType::StorageIndex StorageIndex ; } ; void)",
    "insertText": "eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, float *vals, int *perm, int * invp, float *x, int nbrhs, int *iparm, double *dparm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ptr = NULL ; idx = NULL ; vals = NULL ; })",
    "insertText": "if(nbrhs == 0)"
  },
  {
    "label": "s_pastix()",
    "kind": "Method",
    "detail": "Function (x = NULL ; nbrhs = 1 ; })",
    "insertText": "s_pastix(pastix_data, pastix_comm, n, ptr, idx, vals, perm, invp, x, nbrhs, iparm, dparm)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, double *vals, int *perm, int * invp, double *x, int nbrhs, int *iparm, double *dparm)"
  },
  {
    "label": "d_pastix()",
    "kind": "Method",
    "detail": "Function (x = NULL ; nbrhs = 1 ; })",
    "insertText": "d_pastix(pastix_data, pastix_comm, n, ptr, idx, vals, perm, invp, x, nbrhs, iparm, dparm)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, std::complex<float> *vals, int *perm, int * invp, std::complex<float> *x, int nbrhs, int *iparm, double *dparm)"
  },
  {
    "label": "c_pastix()",
    "kind": "Method",
    "detail": "Function (x = NULL ; nbrhs = 1 ; })",
    "insertText": "c_pastix(pastix_data, pastix_comm, n, ptr, idx, reinterpret_cast<PASTIX_COMPLEX*>(vals), perm, invp, reinterpret_cast<PASTIX_COMPLEX*>(x), nbrhs, iparm, dparm)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eigen_pastix(pastix_data_t **pastix_data, int pastix_comm, int n, int *ptr, int *idx, std::complex<double> *vals, int *perm, int * invp, std::complex<double> *x, int nbrhs, int *iparm, double *dparm)"
  },
  {
    "label": "z_pastix()",
    "kind": "Method",
    "detail": "Function (x = NULL ; nbrhs = 1 ; })",
    "insertText": "z_pastix(pastix_data, pastix_comm, n, ptr, idx, reinterpret_cast<PASTIX_DCOMPLEX*>(vals), perm, invp, reinterpret_cast<PASTIX_DCOMPLEX*>(x), nbrhs, iparm, dparm)"
  },
  {
    "label": "c_to_fortran_numbering()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> void)",
    "insertText": "c_to_fortran_numbering(MatrixType& mat)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i <= mat.rows(); ++i) ++mat.outerIndexPtr()"
  },
  {
    "label": "fortran_to_c_numbering()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType> void)",
    "insertText": "fortran_to_c_numbering(MatrixType& mat)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i <= mat.rows(); ++i) --mat.outerIndexPtr()"
  },
  {
    "label": "PastixBase()",
    "kind": "Method",
    "detail": "Function (} } } template<class Derived> class PastixBase : public SparseSolverBase<Derived> { protected : typedef SparseSolverBase<Derived> Base ; using Base::derived ; using Base::m_isInitialized ; public : using Base::_solve_impl ; typedef internal::pastix_traits<Derived>::MatrixType _MatrixType ; typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef Matrix<Scalar,Dynamic,1> Vector ; typedef SparseMatrix<Scalar,ColMajor> ColSpMatrix ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; public :)",
    "insertText": "PastixBase() : m_initisOk(false), m_analysisIsOk(false), m_factorizationIsOk(false), m_pastixdata(0), m_size(0)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "PastixBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PastixBase()"
  },
  {
    "label": "clean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clean()"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> bool)",
    "insertText": "_solve_impl(const MatrixBase<Rhs> &b, MatrixBase<Dest> &x)"
  },
  {
    "label": "iparm()",
    "kind": "Method",
    "detail": "Function (Array<StorageIndex,IPARM_SIZE,1>&)",
    "insertText": "iparm()"
  },
  {
    "label": "dparm()",
    "kind": "Method",
    "detail": "Function (} Array<double,DPARM_SIZE,1>&)",
    "insertText": "dparm()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(ColSpMatrix& mat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(ColSpMatrix& mat)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_initisOk && \"The Pastix structure should be allocated first\")"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_iparm(IPARM_START_TASK)"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_iparm(IPARM_END_TASK)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_pastix(&m_pastixdata, MPI_COMM_WORLD, 0, 0, 0, (Scalar*)0, m_perm.data(), m_invp.data(), 0, 0, m_iparm.data(), m_dparm.data())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute(ColSpMatrix& mat)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (m_size = 0 ; m_iparm .)",
    "insertText": "setZero(IPARM_SIZE)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (m_dparm .)",
    "insertText": "setZero(DPARM_SIZE)"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_iparm(IPARM_MODIFY_PARAMETER)"
  },
  {
    "label": "pastix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pastix(&m_pastixdata, MPI_COMM_WORLD, 0, 0, 0, 0, 0, 0, 0, 1, m_iparm.data(), m_dparm.data())"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (m_iparm [ IPARM_MATRIX_VERIFICATION ] = API_NO ; m_iparm [ IPARM_VERBOSE ] = API_VERBOSE_NOT ; m_iparm [ IPARM_ORDERING ] = API_ORDER_SCOTCH ; m_iparm [ IPARM_INCOMPLETE ] = API_NO ; m_iparm [ IPARM_OOC_LIMIT ] = 2 0 0 0 ; m_iparm [ IPARM_RHS_MAKING ] = API_RHS_B ;)",
    "insertText": "m_iparm(IPARM_MATRIX_VERIFICATION)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_pastix(&m_pastixdata, MPI_COMM_WORLD, 0, 0, 0, (Scalar*)0, 0, 0, 0, 0, m_iparm.data(), m_dparm.data())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mat.rows() == mat.cols() && \"The input matrix should be squared\")"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(mat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(mat)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_initisOk && \"The initialization of PaSTiX failed\")"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (m_size = internal::convert_index<)",
    "insertText": "int(mat.rows())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_perm .)",
    "insertText": "resize(m_size)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_pastix(&m_pastixdata, MPI_COMM_WORLD, m_size, mat.outerIndexPtr(), mat.innerIndexPtr(), mat.valuePtr(), m_perm.data(), m_invp.data(), 0, 0, m_iparm.data(), m_dparm.data())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_analysisIsOk && \"The analysis phase should be called before the factorization phase\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"The matrix should be factorized first\")"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((Dest::Flags&RowMajorBit)==0, THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int rhs = 1 ; x = b ;)",
    "insertText": "for(int i = 0; i < b.cols(); i++)"
  },
  {
    "label": "eigen_pastix()",
    "kind": "Method",
    "detail": "Function (m_iparm [ IPARM_START_TASK ] = API_TASK_SOLVE ; m_iparm [ IPARM_END_TASK ] = API_TASK_REFINE ;)",
    "insertText": "eigen_pastix(&m_pastixdata, MPI_COMM_WORLD, internal::convert_index<int>(x.rows()), 0, 0, 0, m_perm.data(), m_invp.data(), &x(0, i), rhs, m_iparm.data(), m_dparm.data())"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (} m_info =)",
    "insertText": "m_iparm(IPARM_ERROR_NUMBER)"
  },
  {
    "label": "PastixLU()",
    "kind": "Method",
    "detail": "Function (} template<_MatrixType,bool IsStrSym> class PastixLU : public PastixBase<PastixLU<_MatrixType>> { public : typedef _MatrixType MatrixType ; typedef PastixBase<PastixLU<MatrixType>> Base ; typedef Base::ColSpMatrix ColSpMatrix ; typedef MatrixType::StorageIndex StorageIndex ; public :)",
    "insertText": "PastixLU() : Base()"
  },
  {
    "label": "PastixLU()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PastixLU(const MatrixType& matrix):Base()"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute(const MatrixType& matrix)"
  },
  {
    "label": "grabMatrix()",
    "kind": "Method",
    "detail": "Function (m_structureIsUptodate = false ; ColSpMatrix temp ;)",
    "insertText": "grabMatrix(matrix, temp)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(temp)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyzePattern(const MatrixType& matrix)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(temp)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "factorize(const MatrixType& matrix)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(temp)"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (m_structureIsUptodate = false ;)",
    "insertText": "m_iparm(IPARM_SYM)"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_iparm(IPARM_FACTORIZATION)"
  },
  {
    "label": "grabMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "grabMatrix(const MatrixType& matrix, ColSpMatrix& out)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (m_transposedStructure = matrix .)",
    "insertText": "transpose()"
  },
  {
    "label": "c_to_fortran_numbering()",
    "kind": "Method",
    "detail": "Function (m_structureIsUptodate = true ; } out = m_transposedStructure + matrix ; })",
    "insertText": "c_to_fortran_numbering(out)"
  },
  {
    "label": "PastixLLT()",
    "kind": "Method",
    "detail": "Function (} using Base::m_iparm ; using Base::m_dparm ; ColSpMatrix m_transposedStructure ; bool m_structureIsUptodate ; } ; template<_MatrixType,int _UpLo> class PastixLLT : public PastixBase<PastixLLT<_MatrixType,_UpLo>> { public : typedef _MatrixType MatrixType ; typedef PastixBase<PastixLLT<MatrixType,_UpLo>> Base ; typedef Base::ColSpMatrix ColSpMatrix ; public : enum { UpLo = _UpLo } ;)",
    "insertText": "PastixLLT() : Base()"
  },
  {
    "label": "PastixLLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PastixLLT(const MatrixType& matrix):Base()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "resize(matrix.rows(), matrix.cols())"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (out . template selfadjointView<)",
    "insertText": "Lower() = matrix.template selfadjointView<UpLo>()"
  },
  {
    "label": "PastixLDLT()",
    "kind": "Method",
    "detail": "Function (} } ; template<_MatrixType,int _UpLo> class PastixLDLT : public PastixBase<PastixLDLT<_MatrixType,_UpLo>> { public : typedef _MatrixType MatrixType ; typedef PastixBase<PastixLDLT<MatrixType,_UpLo>> Base ; typedef Base::ColSpMatrix ColSpMatrix ; public : enum { UpLo = _UpLo } ;)",
    "insertText": "PastixLDLT():Base()"
  },
  {
    "label": "PastixLDLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PastixLDLT(const MatrixType& matrix):Base()"
  }
]