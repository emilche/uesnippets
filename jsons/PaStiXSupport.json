[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "PastixLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLU"
  },
  {
    "label": "PastixLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLLT"
  },
  {
    "label": "PastixLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLDLT"
  },
  {
    "label": "Pastix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pastix"
  },
  {
    "label": "pastix_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pastix_traits"
  },
  {
    "label": "pastix_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pastix_traits"
  },
  {
    "label": "pastix_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pastix_traits"
  },
  {
    "label": "pastix_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pastix_traits"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "directly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "directly"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "PastixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixBase"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "PastixLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLU"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "SparseLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseLU"
  },
  {
    "label": "PastixLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLU"
  },
  {
    "label": "PastixLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLLT"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "SimplicialLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialLLT"
  },
  {
    "label": "PastixLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLLT"
  },
  {
    "label": "PastixLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLDLT"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "SimplicialLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialLDLT"
  },
  {
    "label": "PastixLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PastixLDLT"
  },
  {
    "label": "m_iparm()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "m_iparm(idxparam)"
  },
  {
    "label": "m_dparm()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "m_dparm(idxparam)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(ColSpMatrix& mat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(ColSpMatrix& mat)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(ColSpMatrix& mat)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (zero)",
    "insertText": "for(Index j=0; j<m_transposedStructure.outerSize()"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (ColSpMatrix::InnerIterator)",
    "insertText": "it(m_transposedStructure, j)"
  }
]