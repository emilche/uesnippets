[
  {
    "label": "STabSidebar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STabSidebar"
  },
  {
    "label": "FSidebarTabLists",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarTabLists"
  },
  {
    "label": "SDockingArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingArea"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / SWindow . h \" # include \" Framework / Docking / TabManager . h \" # include \" Framework / Docking / SDockingNode . h \" # include \" Framework / Docking / SDockingSplitter . h \" class STabSidebar ; struct FSidebarTabLists { TArray<TSharedRef<SDockTab>> LeftSidebarTabs ; TArray<TSharedRef<SDockTab>> RightSidebarTabs ; } ; class SDockingArea : public SDockingSplitter { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDockingArea) : _ParentWindow() , _ShouldManageParentWindow(true) , _InitialContent()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, ParentWindow ) SLATE_ARGUMENT( bool, ShouldManageParentWindow ) SLATE_ARGUMENT( TSharedPtr<SDockingNode>, InitialContent ) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs, const TSharedRef<FTabManager>& InTabManager, const TSharedRef<FTabManager::FArea>& PersistentNode)"
  },
  {
    "label": "GetNodeType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetNodeType()"
  },
  {
    "label": "GetDockArea()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const SDockingArea>)",
    "insertText": "GetDockArea()"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnUserAttemptingDock()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnUserAttemptingDock(SDockingNode::RelativeDirection Direction, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnTabFoundNewHome()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabFoundNewHome(const TSharedRef<SDockTab>& RelocatedTab, const TSharedRef<SWindow>& NewOwnerWindow)"
  },
  {
    "label": "ShowCross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowCross()"
  },
  {
    "label": "HideCross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideCross()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(ELayoutModification RemovalMethod)"
  },
  {
    "label": "SetParentWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentWindow(const TSharedRef<SWindow>& NewParentWindow)"
  },
  {
    "label": "GatherPersistentLayout()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FLayoutNode>)",
    "insertText": "GatherPersistentLayout()"
  },
  {
    "label": "GetTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTabManager>)",
    "insertText": "GetTabManager()"
  },
  {
    "label": "AddTabToSidebar()",
    "kind": "Method",
    "detail": "Function (ESidebarLocation)",
    "insertText": "AddTabToSidebar(TSharedRef<SDockTab> TabToAdd)"
  },
  {
    "label": "RestoreTabFromSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestoreTabFromSidebar(TSharedRef<SDockTab> TabToRemove)"
  },
  {
    "label": "IsTabInSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabInSidebar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "RemoveTabFromSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTabFromSidebar(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "TryOpenSidebarDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryOpenSidebarDrawer(TSharedRef<SDockTab> TabToOpen)"
  },
  {
    "label": "AddSidebarTabsFromRestoredLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSidebarTabsFromRestoredLayout(const FSidebarTabLists& SidebarTabs)"
  },
  {
    "label": "GetAllSidebarTabs()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SDockTab>>)",
    "insertText": "GetAllSidebarTabs()"
  },
  {
    "label": "CanHaveSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveSidebar()"
  },
  {
    "label": "TargetCrossVisibility()",
    "kind": "Method",
    "detail": "Function (private : EVisibility)",
    "insertText": "TargetCrossVisibility()"
  },
  {
    "label": "TargetCrossCenterVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "TargetCrossCenterVisibility()"
  },
  {
    "label": "DockFromOutside()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DockFromOutside(SDockingNode::RelativeDirection Direction, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnOwningWindowBeingDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOwningWindowBeingDestroyed(const TSharedRef<SWindow>& WindowBeingDestroyed)"
  },
  {
    "label": "OnOwningWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOwningWindowActivated()"
  },
  {
    "label": "OnLiveTabAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLiveTabAdded()"
  },
  {
    "label": "UpdateWindowChromeAndSidebar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowChromeAndSidebar()"
  }
]