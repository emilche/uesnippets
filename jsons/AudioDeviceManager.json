[
  {
    "label": "FAudioDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDebugger"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSoundBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundBuffer"
  },
  {
    "label": "IAudioDeviceModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioDeviceModule"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSourceEffectChainEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceEffectChainEntry"
  },
  {
    "label": "FSimpleAudioInfoFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleAudioInfoFactory"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FAudioFormatSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFormatSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAudioDeviceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioDeviceParams"
  },
  {
    "label": "FAudioDeviceManagerDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDeviceManagerDelegates"
  },
  {
    "label": "FAudioDeviceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDeviceManager"
  },
  {
    "label": "FAudioDeviceContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioDeviceContainer"
  },
  {
    "label": "FAudioDeviceHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDeviceHandle"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDefines . h \" # include \" AudioDeviceHandle . h \" # include \" AudioThread . h \" # include \" CoreMinimal . h \" # include \" UObject / WeakObjectPtr . h \" # if ENABLE_AUDIO_DEBUG class FAudioDebugger ; # endif class FReferenceCollector ; class FSoundBuffer ; class IAudioDeviceModule ; class UAudioComponent ; class USoundClass ; class USoundMix ; class USoundSubmixBase ; class USoundWave ; class UWorld ; class FAudioDevice ; struct FSourceEffectChainEntry ; class FSimpleAudioInfoFactory ; namespace Audio { class FMixerDevice ; class FAudioDebugger ; class FAudioFormatSettings ; } enum class ESoundType : uint8 { Class,Cue,Wave } ; enum class EAudioDeviceScope : uint8 { Default,Shared,Unique } ; struct FAudioDeviceParams { UWorld* AssociatedWorld = nullptr ; EAudioDeviceScope Scope = EAudioDeviceScope::Default ; bool bIsNonRealtime = false ; IAudioDeviceModule* AudioModule = nullptr ; int32 BufferSizeOverride = INDEX_NONE ; int32 NumBuffersOverride = INDEX_NONE ; } ; class FAudioDeviceManagerDelegates { public :)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnAudioDeviceCreated, Audio::FDeviceId)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnAudioDeviceCreated OnAudioDeviceCreated ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnAudioDeviceDestroyed, Audio::FDeviceId)"
  },
  {
    "label": "FAudioDeviceManager()",
    "kind": "Method",
    "detail": "Function (FOnAudioDeviceDestroyed OnAudioDeviceDestroyed ; } ; class FAudioDeviceManager { public :)",
    "insertText": "FAudioDeviceManager()"
  },
  {
    "label": "GetMainAudioDeviceHandle()",
    "kind": "Method",
    "detail": "Function (const FAudioDeviceHandle&)",
    "insertText": "GetMainAudioDeviceHandle()"
  },
  {
    "label": "GetMainAudioDeviceID()",
    "kind": "Method",
    "detail": "Function (} Audio::FDeviceId)",
    "insertText": "GetMainAudioDeviceID()"
  },
  {
    "label": "GetAudioDeviceFromWorldContext()",
    "kind": "Method",
    "detail": "Function (} FAudioDevice*)",
    "insertText": "GetAudioDeviceFromWorldContext(const UObject* WorldContextObject)"
  },
  {
    "label": "GetAudioMixerDeviceFromWorldContext()",
    "kind": "Method",
    "detail": "Function (Audio::FMixerDevice*)",
    "insertText": "GetAudioMixerDeviceFromWorldContext(const UObject* WorldContextObject)"
  },
  {
    "label": "GetAudioDeviceModule()",
    "kind": "Method",
    "detail": "Function (IAudioDeviceModule*)",
    "insertText": "GetAudioDeviceModule()"
  },
  {
    "label": "GetDefaultParamsForNewWorld()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceParams)",
    "insertText": "GetDefaultParamsForNewWorld()"
  },
  {
    "label": "RequestAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "RequestAudioDevice(const FAudioDeviceParams& InParams)"
  },
  {
    "label": "IsValidAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAudioDevice(Audio::FDeviceId DeviceID)"
  },
  {
    "label": "GetAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "GetAudioDevice(Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "GetAudioDeviceRaw()",
    "kind": "Method",
    "detail": "Function (FAudioDevice*)",
    "insertText": "GetAudioDeviceRaw(Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "SetAudioDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioDevice(UWorld& InWorld, Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "PreInitialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreInitialize()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceManager*)",
    "insertText": "Get()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "CreateMainAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateMainAudioDevice()"
  },
  {
    "label": "GetActiveAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "GetActiveAudioDevice()"
  },
  {
    "label": "GetNumActiveAudioDevices()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetNumActiveAudioDevices()"
  },
  {
    "label": "GetNumMainAudioDeviceWorlds()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetNumMainAudioDeviceWorlds()"
  },
  {
    "label": "UpdateActiveAudioDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveAudioDevices(bool bGameTicking)"
  },
  {
    "label": "IterateOverAllDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateOverAllDevices(TUniqueFunction<void(Audio::FDeviceId, FAudioDevice*)> ForEachDevice)"
  },
  {
    "label": "IterateOverAllDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateOverAllDevices(TUniqueFunction<void(Audio::FDeviceId, const FAudioDevice*)> ForEachDevice)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "StopSoundsUsingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSoundsUsingResource(class USoundWave* InSoundWave, TArray<UAudioComponent*>* StoppedComponents = nullptr)"
  },
  {
    "label": "RegisterSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSoundClass(USoundClass* SoundClass)"
  },
  {
    "label": "UnregisterSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSoundClass(USoundClass* SoundClass)"
  },
  {
    "label": "RegisterWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterWorld(UWorld* InWorld, Audio::FDeviceId DeviceId)"
  },
  {
    "label": "UnregisterWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterWorld(UWorld* InWorld, Audio::FDeviceId DeviceId)"
  },
  {
    "label": "InitSoundClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundClasses()"
  },
  {
    "label": "RegisterSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSoundSubmix(USoundSubmixBase* SoundSubmix)"
  },
  {
    "label": "UnregisterSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSoundSubmix(const USoundSubmixBase* SoundSubmix)"
  },
  {
    "label": "InitSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundSubmixes()"
  },
  {
    "label": "UpdateSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSourceEffectChain(const uint32 SourceEffectChainId, const TArray<FSourceEffectChainEntry>& SourceEffectChain, const bool bPlayEffectChainTails)"
  },
  {
    "label": "UpdateSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubmix(USoundSubmixBase* SoundSubmix)"
  },
  {
    "label": "SetActiveDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveDevice(uint32 InAudioDeviceHandle)"
  },
  {
    "label": "SetSoloDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoloDevice(Audio::FDeviceId InAudioDeviceHandle)"
  },
  {
    "label": "FreeResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResource(USoundWave* SoundWave)"
  },
  {
    "label": "RemoveSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "TogglePlayAllDeviceAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlayAllDeviceAudio()"
  },
  {
    "label": "IsPlayAllDeviceAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayAllDeviceAudio()"
  },
  {
    "label": "IsVisualizeDebug3dEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizeDebug3dEnabled()"
  },
  {
    "label": "ToggleVisualize3dDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleVisualize3dDebug()"
  },
  {
    "label": "ResetAllDynamicSoundVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllDynamicSoundVolumes()"
  },
  {
    "label": "GetDynamicSoundVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDynamicSoundVolume(ESoundType SoundType, const FName& SoundName)"
  },
  {
    "label": "ResetDynamicSoundVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamicSoundVolume(ESoundType SoundType, const FName& SoundName)"
  },
  {
    "label": "SetDynamicSoundVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicSoundVolume(ESoundType SoundType, const FName& SoundName, float Volume)"
  },
  {
    "label": "GetDebugger()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_AUDIO_DEBUG Audio::FAudioDebugger&)",
    "insertText": "GetDebugger()"
  },
  {
    "label": "GetAudioDevices()",
    "kind": "Method",
    "detail": "Function (TArray<FAudioDevice*>)",
    "insertText": "GetAudioDevices()"
  },
  {
    "label": "GetWorldsUsingAudioDevice()",
    "kind": "Method",
    "detail": "Function (TArray<UWorld*>)",
    "insertText": "GetWorldsUsingAudioDevice(const Audio::FDeviceId& InID)"
  },
  {
    "label": "AddStackWalkForContainer()",
    "kind": "Method",
    "detail": "Function (# if INSTRUMENT_AUDIODEVICE_HANDLES void)",
    "insertText": "AddStackWalkForContainer(Audio::FDeviceId InId, uint32 StackWalkID, FString&& InStackWalk)"
  },
  {
    "label": "RemoveStackWalkForContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStackWalkForContainer(Audio::FDeviceId InId, uint32 StackWalkID)"
  },
  {
    "label": "LogListOfAudioDevices()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LogListOfAudioDevices()"
  },
  {
    "label": "GetAudioFormatSettings()",
    "kind": "Method",
    "detail": "Function (Audio::FAudioFormatSettings&)",
    "insertText": "GetAudioFormatSettings()"
  },
  {
    "label": "GetOrCreate()",
    "kind": "Method",
    "detail": "Function (private : # if ENABLE_AUDIO_DEBUG TUniquePtr<Audio::FAudioDebugger> AudioDebugger ; # endif TPimplPtr<Audio::FAudioFormatSettings> AudioFormatSettings ; TArray<TPimplPtr<FSimpleAudioInfoFactory>> EngineFormats ; FAudioDeviceManager*)",
    "insertText": "GetOrCreate()"
  },
  {
    "label": "GetNewDeviceID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNewDeviceID()"
  },
  {
    "label": "LoadDefaultAudioDeviceModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadDefaultAudioDeviceModule()"
  },
  {
    "label": "CreateNewDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "CreateNewDevice(const FAudioDeviceParams& InParams)"
  },
  {
    "label": "IncrementDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementDevice(Audio::FDeviceId DeviceID)"
  },
  {
    "label": "DecrementDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementDevice(Audio::FDeviceId DeviceID, UWorld* InWorld)"
  },
  {
    "label": "AppWillEnterBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppWillEnterBackground()"
  },
  {
    "label": "RegisterAudioInfoFactories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAudioInfoFactories()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "InitializeManager()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeManager()"
  },
  {
    "label": "FAudioDeviceContainer()",
    "kind": "Method",
    "detail": "Function (IAudioDeviceModule* AudioDeviceModule ; FString AudioMixerModuleName ; FAudioDeviceHandle MainAudioDeviceHandle ; struct FAudioDeviceContainer { FAudioDevice* Device ; int32 NumberOfHandlesToThisDevice ; TArray<UWorld*> WorldsUsingThisDevice ; EAudioDeviceScope Scope ; bool bIsNonRealtime ; IAudioDeviceModule* SpecifiedModule ;)",
    "insertText": "FAudioDeviceContainer(const FAudioDeviceParams& InParams, Audio::FDeviceId InDeviceID, FAudioDeviceManager* DeviceManager)"
  },
  {
    "label": "FAudioDeviceContainer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioDeviceContainer()"
  },
  {
    "label": "FAudioDeviceContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioDeviceContainer(const FAudioDeviceContainer& Other)"
  },
  {
    "label": "FAudioDeviceContainer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioDeviceContainer(FAudioDeviceContainer&& Other)"
  },
  {
    "label": "BuildNewHandle()",
    "kind": "Method",
    "detail": "Function (} ; FAudioDeviceHandle)",
    "insertText": "BuildNewHandle(FAudioDeviceContainer&Container, Audio::FDeviceId DeviceID, const FAudioDeviceParams &InParams)"
  },
  {
    "label": "CanUseAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseAudioDevice(const FAudioDeviceParams& InParams, const FAudioDeviceContainer& InContainer)"
  },
  {
    "label": "CreateUniqueStackWalkID()",
    "kind": "Method",
    "detail": "Function (# if INSTRUMENT_AUDIODEVICE_HANDLES uint32)",
    "insertText": "CreateUniqueStackWalkID()"
  }
]