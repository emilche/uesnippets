[
  {
    "label": "vp9_cost_zero()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_ENCODER_VP9_COST_H_ # define VPX_VP9_ENCODER_VP9_COST_H_ # include \" vpx_dsp / prob . h \" # include \" vpx / vpx_integer . h \" # ifdef __cplusplus \" C \" { # endif const uint16_t vp9_prob_cost [ 2 5 6 ] ; # define VP9_PROB_COST_SHIFT 9 # define)",
    "insertText": "vp9_cost_zero(prob) (vp9_prob_cost[prob]) #define vp9_cost_one(prob) vp9_cost_zero(256 - (prob)) #define vp9_cost_bit(prob, bit) vp9_cost_zero((bit) ? 256 - (prob) : (prob)) static INLINE uint64_t cost_branch256(const unsigned int ct[2], vpx_prob p)"
  },
  {
    "label": "treed_cost()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "treed_cost(vpx_tree tree, const vpx_prob *probs, int bits, int len)"
  },
  {
    "label": "bit()",
    "kind": "Method",
    "detail": "Function (int cost = 0 ; vpx_tree_index i = 0 ; do { const int)",
    "insertText": "bit(bits >> --len)"
  },
  {
    "label": "vp9_cost_bit()",
    "kind": "Method",
    "detail": "Function (cost + =)",
    "insertText": "vp9_cost_bit(probs[i >> 1], bit)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (i = tree [ i + bit ] ; })",
    "insertText": "while(len)"
  },
  {
    "label": "vp9_cost_tokens_skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_cost_tokens_skip(int *costs, const vpx_prob *probs, vpx_tree tree)"
  }
]