[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRBFEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFEntry"
  },
  {
    "label": "FRBFTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFTarget"
  },
  {
    "label": "FRBFOutputWeight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFOutputWeight"
  },
  {
    "label": "FRBFParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFParams"
  },
  {
    "label": "ANIMGRAPHRUNTIME_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANIMGRAPHRUNTIME_API"
  },
  {
    "label": "FRBFSolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFSolver"
  },
  {
    "label": "AddFromRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFromRotator(const FRotator& InRot)"
  },
  {
    "label": "AddFromVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFromVector(const FVector& InVector)"
  },
  {
    "label": "FRBFParams()",
    "kind": "Method",
    "detail": "Function (ANIMGRAPHRUNTIME_API)",
    "insertText": "FRBFParams()"
  },
  {
    "label": "ValidateTargets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTargets(const FRBFParams& Params, const TArray<FRBFTarget>& Targets, TArray<int>& InvalidTargets)"
  },
  {
    "label": "InitSolver()",
    "kind": "Method",
    "detail": "Function (FRBFSolverData>)",
    "insertText": "InitSolver(const FRBFParams& Params, const TArray<FRBFTarget>& Targets)"
  },
  {
    "label": "IsSolverDataValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSolverDataValid(const FRBFSolverData& SolverData, const FRBFParams& Params, const TArray<FRBFTarget>& Targets)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Solve(const FRBFSolverData& SolverData, const FRBFParams& Params, const TArray<FRBFTarget>& Targets, const FRBFEntry& Input, TArray<FRBFOutputWeight>& OutputWeights)"
  },
  {
    "label": "FindTargetNeighbourDistances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTargetNeighbourDistances(const FRBFParams& Params, const TArray<FRBFTarget>& Targets, TArray<float>& NeighbourDists)"
  },
  {
    "label": "FindDistanceBetweenEntries()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindDistanceBetweenEntries(const FRBFEntry& A, const FRBFEntry& B, const FRBFParams& Params, ERBFDistanceMethod OverrideMethod = ERBFDistanceMethod::DefaultMethod)"
  },
  {
    "label": "GetRadiusForTarget()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRadiusForTarget(const FRBFTarget& Target, const FRBFParams& Params)"
  },
  {
    "label": "GetOptimalRadiusForTargets()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOptimalRadiusForTargets(const FRBFParams& Params, const TArray<FRBFTarget>& Targets)"
  }
]