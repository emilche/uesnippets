[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRBFEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFEntry"
  },
  {
    "label": "FRBFTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFTarget"
  },
  {
    "label": "FRBFOutputWeight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFOutputWeight"
  },
  {
    "label": "FRBFParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFParams"
  },
  {
    "label": "ANIMGRAPHRUNTIME_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANIMGRAPHRUNTIME_API"
  },
  {
    "label": "FRBFSolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRBFSolver"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimTypes . h \" # include \" Containers / Array . h \" # include \" Containers / EnumAsByte . h \" # include \" CoreMinimal . h \" # include \" Curves / RichCurve . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" RBFSolver . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (OnlyNormalizeAboveOne,AlwaysNormalize,NormalizeWithinMedian,NoNormalization,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = RBFData)"
  },
  {
    "label": "AsRotator()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "AsRotator(int32 Index)"
  },
  {
    "label": "AsQuat()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "AsQuat(int32 Index)"
  },
  {
    "label": "AsVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "AsVector(int32 Index)"
  },
  {
    "label": "AddFromRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFromRotator(const FRotator& InRot)"
  },
  {
    "label": "AddFromVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFromVector(const FVector& InVector)"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDimensions()"
  },
  {
    "label": "FRBFTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRBFTarget() : ScaleFactor(1.f) , bApplyCustomCurve(false) , DistanceMethod(ERBFDistanceMethod::DefaultMethod) , FunctionType(ERBFFunctionType::DefaultFunction)"
  },
  {
    "label": "FRBFOutputWeight()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRBFOutputWeight { int32 TargetIndex ; float TargetWeight ;)",
    "insertText": "FRBFOutputWeight(int32 InTargetIndex, float InTargetWeight) : TargetIndex(InTargetIndex) , TargetWeight(InTargetWeight)"
  },
  {
    "label": "FRBFOutputWeight()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRBFOutputWeight() : TargetIndex(0) , TargetWeight(0.f)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FRBFParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRBFParams()"
  },
  {
    "label": "GetTwistAxisVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetTwistAxisVector()"
  },
  {
    "label": "ValidateTargets()",
    "kind": "Method",
    "detail": "Function (} ; struct FRBFSolverData ; struct FRBFSolver { bool)",
    "insertText": "ValidateTargets(const FRBFParams& Params, const TArray<FRBFTarget>& Targets, TArray<int>& InvalidTargets)"
  },
  {
    "label": "InitSolver()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FRBFSolverData>)",
    "insertText": "InitSolver(const FRBFParams& Params, const TArray<FRBFTarget>& Targets)"
  },
  {
    "label": "IsSolverDataValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSolverDataValid(const FRBFSolverData& SolverData, const FRBFParams& Params, const TArray<FRBFTarget>& Targets)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Solve(const FRBFSolverData& SolverData, const FRBFParams& Params, const TArray<FRBFTarget>& Targets, const FRBFEntry& Input, TArray<FRBFOutputWeight>& OutputWeights)"
  },
  {
    "label": "FindTargetNeighbourDistances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTargetNeighbourDistances(const FRBFParams& Params, const TArray<FRBFTarget>& Targets, TArray<float>& NeighbourDists)"
  },
  {
    "label": "FindDistanceBetweenEntries()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindDistanceBetweenEntries(const FRBFEntry& A, const FRBFEntry& B, const FRBFParams& Params, ERBFDistanceMethod OverrideMethod = ERBFDistanceMethod::DefaultMethod)"
  },
  {
    "label": "GetRadiusForTarget()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRadiusForTarget(const FRBFTarget& Target, const FRBFParams& Params)"
  },
  {
    "label": "GetOptimalRadiusForTargets()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOptimalRadiusForTargets(const FRBFParams& Params, const TArray<FRBFTarget>& Targets)"
  }
]