[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "FSkelMeshRenderSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshRenderSection"
  },
  {
    "label": "FCachedGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedGeometry"
  },
  {
    "label": "FRWBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWBuffer"
  },
  {
    "label": "FGPUSkinCacheEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCacheEntry"
  },
  {
    "label": "FMeshDeformerGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDeformerGeometry"
  },
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FFinalSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFinalSkinVertex"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSkinBatchVertexFactoryUserData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinBatchVertexFactoryUserData"
  },
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "FGPUSkinCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCache"
  },
  {
    "label": "FDynamicSkelMeshObjectDataCPUSkin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicSkelMeshObjectDataCPUSkin"
  },
  {
    "label": "FDynamicSkelMeshObjectDataGPUSkin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicSkelMeshObjectDataGPUSkin"
  },
  {
    "label": "FSkeletalMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshSceneProxy"
  },
  {
    "label": "FSkeletalMeshSectionIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshSectionIter"
  },
  {
    "label": "FSkelMeshObjectLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshObjectLODInfo"
  },
  {
    "label": "GetMorphTargetMaxBlendWeight()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" ProfilingDebugging / ResourceSize . h \" # include \" PackedNormal . h \" # include \" RenderDeferredCleanup . h \" # include \" RenderUtils . h \" # include \" Engine / SkeletalMesh . h \" # include \" Components / SkinnedMeshComponent . h \" # include \" MeshUVChannelInfo . h \" # include \" SkeletalMeshTypes . h \" # include \" RenderMath . h \" # include \" Async / Mutex . h \" # include \" Matrix3x4 . h \" class FPrimitiveDrawInterface ; class FVertexFactory ; class UMorphTarget ; struct FSkelMeshRenderSection ; struct FCachedGeometry ; struct FRWBuffer ; class FGPUSkinCacheEntry ; class FMeshDeformerGeometry ; class FRayTracingGeometry ; class FRHICommandList ; namespace UE::SkeletalRender::Settings { float)",
    "insertText": "GetMorphTargetMaxBlendWeight()"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (} struct FFinalSkinVertex { FVector3f Position ; FPackedNormal TangentX ; FPackedNormal TangentZ ; float U ; float V ; FVector2D TextureCoordinates [ MAX_TEXCOORDS ] ; FVector3f)",
    "insertText": "GetTangentY()"
  },
  {
    "label": "FSkeletalMeshObject()",
    "kind": "Method",
    "detail": "Function (} ; } ; enum class EPreviousBoneTransformUpdateMode { None,UpdatePrevious,DuplicateCurrentToPrevious,} ; struct FSkinBatchVertexFactoryUserData { FGPUSkinCacheEntry* SkinCacheEntry = nullptr ; FMeshDeformerGeometry* DeformerGeometry = nullptr ; int32 SectionIndex = - 1 ; } ; class FSkeletalMeshObject : public FDeferredCleanupInterface { public :)",
    "insertText": "FSkeletalMeshObject(USkinnedMeshComponent* InMeshComponent, FSkeletalMeshRenderData* InSkelMeshRenderData, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "FSkeletalMeshObject()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkeletalMeshObject()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(USkinnedMeshComponent* InMeshComponent)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int32 LODIndex,USkinnedMeshComponent* InMeshComponent, const FMorphTargetWeightMap& InActiveMorphTargets, const TArray<float>& MorphTargetWeights, EPreviousBoneTransformUpdateMode PreviousBoneTransformUpdateMode, const FExternalMorphWeightData& InExternalMorphWeightData)"
  },
  {
    "label": "GetSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (} const FVertexFactory*)",
    "insertText": "GetSkinVertexFactory(const FSceneView* View, int32 LODIndex, int32 ChunkIdx, ESkinVertexFactoryMode VFMode = ESkinVertexFactoryMode::Default)"
  },
  {
    "label": "GetStaticSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (const FVertexFactory*)",
    "insertText": "GetStaticSkinVertexFactory(int32 LODIndex, int32 ChunkIdx, ESkinVertexFactoryMode VFMode)"
  },
  {
    "label": "GetReferenceToLocalMatrices()",
    "kind": "Method",
    "detail": "Function (const TArray<FMatrix44f>&)",
    "insertText": "GetReferenceToLocalMatrices()"
  },
  {
    "label": "GetPrevReferenceToLocalMatrices()",
    "kind": "Method",
    "detail": "Function (const TArray<FMatrix44f>&)",
    "insertText": "GetPrevReferenceToLocalMatrices()"
  },
  {
    "label": "GetCurrentBoneTransforms()",
    "kind": "Method",
    "detail": "Function (} const TArray<FMatrix3x4>*)",
    "insertText": "GetCurrentBoneTransforms()"
  },
  {
    "label": "GetLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLOD()"
  },
  {
    "label": "EnableOverlayRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableOverlayRendering(bool bEnabled, const TArray<int32>* InBonesOfInterest, const TArray<UMorphTarget*>* MorphTargetOfInterest)"
  },
  {
    "label": "DrawVertexElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawVertexElements(FPrimitiveDrawInterface* PDI, const FMatrix& ToWorldSpace, bool bDrawNormals, bool bDrawTangents, bool bDrawBinormals)"
  },
  {
    "label": "UpdateMinDesiredLODLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMinDesiredLODLevel(const FSceneView* View, const FBoxSphereBounds& Bounds)"
  },
  {
    "label": "HaveValidDynamicData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveValidDynamicData()"
  },
  {
    "label": "ShouldUsePerBoneMotionBlur()",
    "kind": "Method",
    "detail": "Function (class FDynamicSkelMeshObjectDataCPUSkin ; class FDynamicSkelMeshObjectDataGPUSkin ; class FSkeletalMeshSceneProxy ; class FSkeletalMeshSectionIter ; bool)",
    "insertText": "ShouldUsePerBoneMotionBlur()"
  },
  {
    "label": "GetRenderSections()",
    "kind": "Method",
    "detail": "Function (const TArray<FSkelMeshRenderSection>&)",
    "insertText": "GetRenderSections(int32 InLODIndex)"
  },
  {
    "label": "SetHiddenMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHiddenMaterials(int32 InLODIndex,const TArray<bool>& HiddenMaterials)"
  },
  {
    "label": "IsMaterialHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialHidden(int32 InLODIndex,int32 MaterialIdx)"
  },
  {
    "label": "InitLODInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLODInfos(const USkinnedMeshComponent* InMeshComponent)"
  },
  {
    "label": "GetAssetPathName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAssetPathName(int32 LODIndex = -1)"
  },
  {
    "label": "GetRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING FRayTracingGeometry*)",
    "insertText": "GetRayTracingGeometry()"
  },
  {
    "label": "ShouldUseSeparateSkinCacheEntryForRayTracing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUseSeparateSkinCacheEntryForRayTracing()"
  },
  {
    "label": "GetSkinCacheEntryForRayTracing()",
    "kind": "Method",
    "detail": "Function (} FGPUSkinCacheEntry*)",
    "insertText": "GetSkinCacheEntryForRayTracing()"
  },
  {
    "label": "UpdateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateRayTracingGeometry(FRHICommandListBase& RHICmdList, FSkeletalMeshLODRenderData& LODModel, uint32 LODIndex, TArray<FBufferRHIRef>& VertexBuffers)"
  },
  {
    "label": "QueuePendingRayTracingGeometryUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueuePendingRayTracingGeometryUpdate(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetTransform(const FMatrix& InNewLocalToWorld, uint32 FrameNumber)"
  },
  {
    "label": "RefreshClothingTransforms()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RefreshClothingTransforms(const FMatrix& InNewLocalToWorld, uint32 FrameNumber)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} ; struct FSkelMeshObjectLODInfo { TArray<bool> HiddenMaterials ; FPerPlatformFloat ScreenSize ; float LODHysteresis ; } ; TArray<FSkelMeshObjectLODInfo> LODInfo ; TArray<FCapsuleShape3f> ShadowCapsuleShapes ; int32 MinDesiredLODLevel ; float MaxDistanceFactor ; int32 WorkingMinDesiredLODLevel ; float WorkingMaxDistanceFactor ; bool bHasBeenUpdatedAtLeastOnce ; # if RHI_RAYTRACING bool bSupportRayTracing ; bool bHiddenMaterialVisibilityDirtyForRayTracing ; bool bRayTracingGeometryRequiresUpdate ; int32 RayTracingMinLOD ; # endif # if UE_BUILD_SHIPPING FName)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetSkinWeightVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FSkinWeightVertexBuffer*)",
    "insertText": "GetSkinWeightVertexBuffer(FSkeletalMeshLODRenderData& LODData, FSkelMeshComponentLODInfo* CompLODInfo)"
  },
  {
    "label": "GetColorVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FColorVertexBuffer*)",
    "insertText": "GetColorVertexBuffer(FSkeletalMeshLODRenderData& LODData, FSkelMeshComponentLODInfo* CompLODInfo)"
  },
  {
    "label": "GetSkinWeightVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FSkinWeightVertexBuffer*)",
    "insertText": "GetSkinWeightVertexBuffer(int32 LODIndex)"
  }
]