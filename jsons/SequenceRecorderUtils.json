[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "FTakeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTakeInfo"
  },
  {
    "label": "MakeNewAsset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineLogs . h \" # include \" MovieScene . h \" # include \" Modules / ModuleManager . h \" # include \" Misc / PackageName . h \" # include \" AssetRegistry / AssetData . h \" # include \" AssetRegistry / AssetRegistryModule . h \" # include \" ObjectTools . h \" class AActor ; class Error ; class UAnimSequence ; class ULevelSequence ; namespace SequenceRecorderUtils { template<AssetType> AssetType*)",
    "insertText": "MakeNewAsset(const FString& BaseAssetPath, const FString& BaseAssetName)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "Dot(TEXT(\".\"))"
  },
  {
    "label": "FAssetRegistryModule()",
    "kind": "Method",
    "detail": "Function (FString AssetPath = BaseAssetPath ; FString AssetName = BaseAssetName ; AssetPath / = AssetName ; AssetPath + = Dot + AssetName ; FAssetRegistryModule& AssetRegistryModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "FAssetRegistryModule(TEXT(\"AssetRegistry\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FAssetData AssetData = AssetRegistryModule .)",
    "insertText": "Get().GetAssetByObjectPath(FSoftObjectPath(AssetPath))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 ExtensionIndex = 0 ;)",
    "insertText": "while(AssetData.IsValid() && AssetData.GetClass() == AssetType::StaticClass())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (AssetName =)",
    "insertText": "Printf(TEXT(\"%s_%d\"), *BaseAssetName, ExtensionIndex)"
  },
  {
    "label": "AssetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetPath(BaseAssetPath / AssetName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString FileName ;)",
    "insertText": "if(FPackageName::TryConvertLongPackageNameToFilename(AssetPath, FileName))"
  },
  {
    "label": "CreatePackage()",
    "kind": "Method",
    "detail": "Function (UObject* Package =)",
    "insertText": "CreatePackage(*AssetPath)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_LOG(LogAnimation, Error, TEXT(\"Couldnt create file for package %s\"), *AssetPath)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 ExtensionIndex = 0 ;)",
    "insertText": "while(AssetData.IsValid() && AssetData.GetClass() == ObjectToDuplicate->GetClass())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ExtensionIndex + + ; } const FString PackageName = BaseAssetPath +)",
    "insertText": "TEXT(\"/\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ObjectTools::FPackageGroupName PGN ; PGN . PackageName = PackageName ; PGN . GroupName =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "DuplicateSingleObject()",
    "kind": "Method",
    "detail": "Function (PGN . ObjectName = AssetName ; TSet<UPackage*> ObjectsUserRefusedToFullyLoad ; UObject* NewObject =)",
    "insertText": "DuplicateSingleObject(ObjectToDuplicate, PGN, ObjectsUserRefusedToFullyLoad)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 ExtensionIndex = 0 ;)",
    "insertText": "while(AssetData.IsValid())"
  },
  {
    "label": "MakeTakeName()",
    "kind": "Method",
    "detail": "Function (ExtensionIndex + + ; } return AssetName ; } FString)",
    "insertText": "MakeTakeName(const FString& ActorName, const FString& SessionName, uint32 TakeNumber)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const FString TakeSeparator =)",
    "insertText": "TEXT(\"_\")"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (const int32 TakeNumDigits = 3 ; FString TakeName = ActorName + TakeSeparator + SessionName + TakeSeparator +)",
    "insertText": "Printf(TEXT(\"%0*d\"), TakeNumDigits, TakeNumber)"
  },
  {
    "label": "MakeTakeName()",
    "kind": "Method",
    "detail": "Function (FString TakeName =)",
    "insertText": "MakeTakeName(ActorName, SessionName, TakeNumber)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FString FullPath = TakePath + Dot + TakeName ; FAssetData AssetData = AssetRegistryModule .)",
    "insertText": "Get().GetAssetByObjectPath(FSoftObjectPath(FullPath))"
  },
  {
    "label": "GetNewTakeNumber()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNewTakeNumber(const FString& AssetPath, const FString& ActorName, const FString& SessionName, uint32 TakeNumber)"
  },
  {
    "label": "MakeNewGroupName()",
    "kind": "Method",
    "detail": "Function (TakeNumber + + ; } return TakeNumber ; } FString)",
    "insertText": "MakeNewGroupName(const FString& BaseAssetPath, const FString& BaseAssetName, const TArray<FName>& ExistingGroupNames)"
  },
  {
    "label": "ParseTakeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseTakeName(const FString& InTakeName, FString& OutActorName, FString& OutSessionName, uint32& OutTakeNumber, const FString& InSessionName = FString())"
  },
  {
    "label": "CreateCameraCutTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCameraCutTrack(ULevelSequence* LevelSequence, const FGuid& RecordedCameraGuid, const FMovieSceneSequenceID& SequenceID)"
  },
  {
    "label": "ExtendSequencePlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendSequencePlaybackRange(ULevelSequence* LevelSequence)"
  },
  {
    "label": "SaveAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAsset(UObject* InObject)"
  },
  {
    "label": "FTakeInfo()",
    "kind": "Method",
    "detail": "Function (struct FTakeInfo {)",
    "insertText": "FTakeInfo(const FString& InActorLabel, uint32 InTakeNumber, ULevelSequence* InTargetLevelSequence) : ActorLabel(InActorLabel) , TakeNumber(InTakeNumber) , TargetLevelSequence(InTargetLevelSequence)"
  },
  {
    "label": "GatherTakeInfo()",
    "kind": "Method",
    "detail": "Function (} FString ActorLabel ; uint32 TakeNumber ; ULevelSequence* TargetLevelSequence ; } ; void)",
    "insertText": "GatherTakeInfo(ULevelSequence* LevelSequence, TArray<FTakeInfo>& TakeInfos)"
  },
  {
    "label": "GetAttachment()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetAttachment(AActor* InActor, FName& SocketName, FName& ComponentName)"
  },
  {
    "label": "RecordSingleNodeInstanceToAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordSingleNodeInstanceToAnimation(USkeletalMeshComponent* PreviewComponent, UAnimSequence* NewAsset, bool bShowMessage = true)"
  },
  {
    "label": "GetTimecodeSource()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTimecodeSource)",
    "insertText": "GetTimecodeSource()"
  }
]