[
  {
    "label": "Void",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Void"
  },
  {
    "label": "BoolType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoolType"
  },
  {
    "label": "SelectIfImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelectIfImpl"
  },
  {
    "label": "Apply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Apply"
  },
  {
    "label": "SelectIfCond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelectIfCond"
  },
  {
    "label": "SelectIf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelectIf"
  },
  {
    "label": "AndExprCond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AndExprCond"
  },
  {
    "label": "OrExprCond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrExprCond"
  },
  {
    "label": "BoolExpr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoolExpr"
  },
  {
    "label": "NotExpr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotExpr"
  },
  {
    "label": "AndExpr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AndExpr"
  },
  {
    "label": "OrExpr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrExpr"
  },
  {
    "label": "AddConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddConst"
  },
  {
    "label": "MaybeAddConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaybeAddConst"
  },
  {
    "label": "RemoveConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveConst"
  },
  {
    "label": "IsSame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsSame"
  },
  {
    "label": "IsConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsConst"
  },
  {
    "label": "IsMoreConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsMoreConst"
  },
  {
    "label": "IsPointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsPointer"
  },
  {
    "label": "IsBaseOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsBaseOf"
  },
  {
    "label": "IsBaseOfImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsBaseOfImpl"
  },
  {
    "label": "Host",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Host"
  },
  {
    "label": "EnableIfCond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnableIfCond"
  },
  {
    "label": "DisableIfCond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DisableIfCond"
  },
  {
    "label": "EnableIf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnableIf"
  },
  {
    "label": "DisableIf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DisableIf"
  },
  {
    "label": "SfinaeTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SfinaeTag"
  },
  {
    "label": "RemoveSfinaeTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveSfinaeTag"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_INTERNAL_META_H_ # define RAPIDJSON_INTERNAL_META_H_ # include \" . . / rapidjson . h \" # ifdef __GNUC__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(effc++) #endif #if defined(_MSC_VER) && !defined(__clang__) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(6334)"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (template<T> struct Void { typedef void Type ; } ; template<bool Cond> struct BoolType { const bool Value = Cond ; typedef BoolType Type ; } ; typedef BoolType<true> TrueType ; typedef BoolType<false> FalseType ; template<bool C> struct SelectIfImpl { template<T1,T2> struct Apply { typedef T1 Type ; } ; } ; template<> struct SelectIfImpl<false> { template<T1,T2> struct Apply { typedef T2 Type ; } ; } ; template<bool C,T1,T2> struct SelectIfCond : SelectIfImpl<C>::template Apply<T1,T2> { } ; template<C,T1,T2> struct SelectIf : SelectIfCond<C::Value,T1,T2> { } ; template<bool Cond1,bool Cond2> struct AndExprCond : FalseType { } ; template<> struct AndExprCond<true,true> : TrueType { } ; template<bool Cond1,bool Cond2> struct OrExprCond : TrueType { } ; template<> struct OrExprCond<false,false> : FalseType { } ; template<C> struct BoolExpr : SelectIf<C,TrueType,FalseType>::Type { } ; template<C> struct NotExpr : SelectIf<C,FalseType,TrueType>::Type { } ; template<C1,C2> struct AndExpr : AndExprCond<C1::Value,C2::Value>::Type { } ; template<C1,C2> struct OrExpr : OrExprCond<C1::Value,C2::Value>::Type { } ; template<T> struct AddConst { typedef const T Type ; } ; template<bool Constify,T> struct MaybeAddConst : SelectIfCond<Constify,const T,T> { } ; template<T> struct RemoveConst { typedef T Type ; } ; template<T> struct RemoveConst<const T> { typedef T Type ; } ; template<T,U> struct IsSame : FalseType { } ; template<T> struct IsSame<T,T> : TrueType { } ; template<T> struct IsConst : FalseType { } ; template<T> struct IsConst<const T> : TrueType { } ; template<CT,T> struct IsMoreConst : AndExpr<IsSame<RemoveConst<CT>::Type,RemoveConst<T>::Type>,BoolType<IsConst<CT>::Value> = IsConst<T>::Value>>::Type { } ; template<T> struct IsPointer : FalseType { } ; template<T> struct IsPointer<T*> : TrueType { } ; # if RAPIDJSON_HAS_CXX11_TYPETRAITS template<B,D> struct IsBaseOf : BoolType<::std::is_base_of<B,D>::value> { } ; # else template<B,D> struct IsBaseOfImpl {)",
    "insertText": "RAPIDJSON_STATIC_ASSERT(sizeof(B) != 0)"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_STATIC_ASSERT(sizeof(D) != 0)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "char(&Yes)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "char(&No)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (template<T> Yes)",
    "insertText": "Check(const D*, T)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (No)",
    "insertText": "Check(const B*, int)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (struct Host { operator const)",
    "insertText": "B()"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "D()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} ; enum {)",
    "insertText": "Value(sizeof(Check(Host(), 0)) == sizeof(Yes))"
  },
  {
    "label": "SfinaeTag()",
    "kind": "Method",
    "detail": "Function (} ; template<B,D> struct IsBaseOf : OrExpr<IsSame<B,D>,BoolExpr<IsBaseOfImpl<B,D>>>::Type { } ; # endif template<bool Condition,T = void> struct EnableIfCond { typedef T Type ; } ; template<T> struct EnableIfCond<false,T> { } ; template<bool Condition,T = void> struct DisableIfCond { typedef T Type ; } ; template<T> struct DisableIfCond<true,T> { } ; template<Condition,T = void> struct EnableIf : EnableIfCond<Condition::Value,T> { } ; template<Condition,T = void> struct DisableIf : DisableIfCond<Condition::Value,T> { } ; struct SfinaeTag { } ; template<T> struct RemoveSfinaeTag ; template<T> struct RemoveSfinaeTag<)",
    "insertText": "SfinaeTag(*)(T)"
  }
]