[
  {
    "label": "FImplicitBVHObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitBVHObject"
  },
  {
    "label": "FCollisionObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjects"
  },
  {
    "label": "FConvexOptimizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexOptimizer"
  },
  {
    "label": "FTriboxNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriboxNode"
  },
  {
    "label": "FConvexOptimizer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Tribox . h \" namespace Chaos { namespace Private { class FImplicitBVHObject ; struct FCollisionObjects { TArray<Private::FImplicitBVHObject> ImplicitObjects ; } ; class FConvexOptimizer { public : struct FTriboxNode { using FValidEdges = TMap<FImplicitObject*,bool> ; Private::FTribox NodeTribox ; FImplicitObjectPtr TriboxConvex = nullptr ; int32 ShapeIndex = INDEX_NONE ; FTribox::FRealType NodeVolume = 0 . 0 f ; bool bValidNode = true ; FValidEdges bValidEdges = { } ; int32 ConvexId = 0 ; } ; using FTriboxNodes = TMap<FImplicitObject*,FTriboxNode> ;)",
    "insertText": "FConvexOptimizer()"
  },
  {
    "label": "SimplifyRootConvexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimplifyRootConvexes(const Chaos::FImplicitObjectUnionPtr& UnionGeometry, const FShapesArray& UnionShapes, const EObjectStateType ObjectState, const TBitArray<>& bOptimizeConvexes)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "VisitCollisionObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitCollisionObjects(const FImplicitHierarchyVisitor& VisitorFunc)"
  },
  {
    "label": "VisitOverlappingObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitOverlappingObjects(const FAABB3& LocalBounds, const FImplicitHierarchyVisitor& VisitorFunc)"
  },
  {
    "label": "GetShapeInstances()",
    "kind": "Method",
    "detail": "Function (const FShapeInstanceArray&)",
    "insertText": "GetShapeInstances()"
  },
  {
    "label": "BuildUnionConnectivity()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildUnionConnectivity(const Chaos::FImplicitObjectUnionPtr& UnionGeometry)"
  },
  {
    "label": "MergeConnectedShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeConnectedShapes(const Chaos::FImplicitObjectUnionPtr& UnionGeometry, TArray<FTriboxNode>& MergedNodes)"
  },
  {
    "label": "BuildSingleConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSingleConvex(const Chaos::FImplicitObjectUnionPtr& UnionGeometry, const FShapesArray& UnionShapes, const TBitArray<>& bOptimizeConvexes)"
  },
  {
    "label": "BuildMultipleConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMultipleConvex(const Chaos::FImplicitObjectUnionPtr& UnionGeometry, const FShapesArray& UnionShapes, const bool bEnableMerging, const TBitArray<>& bOptimizeConvexes)"
  },
  {
    "label": "BuildConvexShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildConvexShapes(const FShapesArray& UnionShapes)"
  },
  {
    "label": "VisitCollisionObjects()",
    "kind": "Method",
    "detail": "Function (TArray<FImplicitObjectPtr> SimplifiedConvexes ; TUniquePtr<Private::FCollisionObjects> CollisionObjects ; FShapeInstanceArray ShapesArray ; FTriboxNodes RootTriboxes ; TUniquePtr<Private::FImplicitBVH> BVH ; FTriboxNode MainTribox ; int32 NextConvexId = 0 ; } ; void)",
    "insertText": "VisitCollisionObjects(const FConvexOptimizer* ConvexOptimizer, const FImplicitObject* ImplicitObject, const FImplicitHierarchyVisitor& VisitorFunc)"
  },
  {
    "label": "VisitOverlappingObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitOverlappingObjects(const FConvexOptimizer* ConvexOptimizer, const FImplicitObject* ImplicitObject, const FAABB3& LocalBounds, const FImplicitHierarchyVisitor& VisitorFunc)"
  }
]