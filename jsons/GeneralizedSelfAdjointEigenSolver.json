[
  {
    "label": "GeneralizedSelfAdjointEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeneralizedSelfAdjointEigenSolver"
  },
  {
    "label": "GeneralizedSelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERALIZEDSELFADJOINTEIGENSOLVER_H # define EIGEN_GENERALIZEDSELFADJOINTEIGENSOLVER_H # include \" . / Tridiagonalization . h \" namespace Eigen { template<_MatrixType> class GeneralizedSelfAdjointEigenSolver : public SelfAdjointEigenSolver<_MatrixType> { typedef SelfAdjointEigenSolver<_MatrixType> Base ; public : typedef _MatrixType MatrixType ;)",
    "insertText": "GeneralizedSelfAdjointEigenSolver() : Base()"
  },
  {
    "label": "GeneralizedSelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GeneralizedSelfAdjointEigenSolver(Index size) : Base(size)"
  },
  {
    "label": "GeneralizedSelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GeneralizedSelfAdjointEigenSolver(const MatrixType& matA, const MatrixType& matB, int options = ComputeEigenvectors|Ax_lBx) : Base(matA.cols())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matA, matB, options)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} GeneralizedSelfAdjointEigenSolver&)",
    "insertText": "compute(const MatrixType& matA, const MatrixType& matB, int options = ComputeEigenvectors|Ax_lBx)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (protected : } ; template<MatrixType> GeneralizedSelfAdjointEigenSolver<MatrixType>& GeneralizedSelfAdjointEigenSolver<MatrixType)",
    "insertText": "compute(const MatrixType& matA, const MatrixType& matB, int options)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(matA.cols()==matA.rows() && matB.rows()==matA.rows() && matB.cols()==matB.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((options&~(EigVecMask|GenEigMask))==0 && (options&EigVecMask)!=EigVecMask && ((options&GenEigMask)==0 || (options&GenEigMask)==Ax_lBx || (options&GenEigMask)==ABx_lx || (options&GenEigMask)==BAx_lx) && \"invalid option parameter\")"
  },
  {
    "label": "computeEigVecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "computeEigVecs((options&EigVecMask)==0) || ((options&EigVecMask)==ComputeEigenvectors)"
  },
  {
    "label": "cholB()",
    "kind": "Method",
    "detail": "Function (LLT<MatrixType>)",
    "insertText": "cholB(matB)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "type(options&GenEigMask)"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (MatrixType matC = matA . template selfadjointView<)",
    "insertText": "Lower()"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (cholB .)",
    "insertText": "matrixL().template solveInPlace<OnTheLeft>(matC)"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (cholB .)",
    "insertText": "matrixU().template solveInPlace<OnTheRight>(matC)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matC, computeEigVecs ? ComputeEigenvectors : EigenvaluesOnly)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(type==ABx_lx)"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (matC = matC* cholB .)",
    "insertText": "matrixL()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (matC = cholB .)",
    "insertText": "matrixU()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(type==BAx_lx)"
  }
]