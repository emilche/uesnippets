[
  {
    "label": "FWorldPartitionReplayStreamingSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionReplayStreamingSource"
  },
  {
    "label": "FWorldPartitionReplaySample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionReplaySample"
  },
  {
    "label": "AWorldPartitionReplay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldPartitionReplay"
  },
  {
    "label": "FWorldPartitionReplayStreamingSource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameFramework / Actor . h \" # include \" WorldPartition / WorldPartitionStreamingSource . h \" # include \" WorldPartitionReplay . generated . h \" struct FWorldPartitionReplayStreamingSource : public FWorldPartitionStreamingSource {)",
    "insertText": "FWorldPartitionReplayStreamingSource()"
  },
  {
    "label": "FWorldPartitionReplayStreamingSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionReplayStreamingSource(const FWorldPartitionStreamingSource& InStreamingSource) : FWorldPartitionReplayStreamingSource(InStreamingSource.Name, InStreamingSource.Location, InStreamingSource.Rotation, InStreamingSource.TargetState, InStreamingSource.bBlockOnSlowLoading, InStreamingSource.Priority, InStreamingSource.Velocity)"
  },
  {
    "label": "FWorldPartitionReplayStreamingSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionReplayStreamingSource(FName InName, const FVector& InLocation, const FRotator& InRotation, EStreamingSourceTargetState InTargetState, bool bInBlockOnSlowLoading, EStreamingSourcePriority InPriority, FVector InVelocity) : FWorldPartitionStreamingSource(InName, InLocation, InRotation, InTargetState, bInBlockOnSlowLoading, InPriority, false, InVelocity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bReplay = true ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FWorldPartitionReplayStreamingSource& StreamingSource)"
  },
  {
    "label": "FWorldPartitionReplaySample()",
    "kind": "Method",
    "detail": "Function (} ; struct FWorldPartitionReplaySample {)",
    "insertText": "FWorldPartitionReplaySample(AWorldPartitionReplay* InReplay)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FWorldPartitionReplaySample& StreamingSource)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TArray<int32> StreamingSourceNameIndices ; TArray<FWorldPartitionReplayStreamingSource> StreamingSources ; class AWorldPartitionReplay* Replay = nullptr ; float TimeSeconds = 0 . f ; } ;)",
    "insertText": "UCLASS(notplaceable, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: static ENGINE_API void Initialize(UWorld* World)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize(UWorld* World)"
  },
  {
    "label": "IsPlaybackEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaybackEnabled(const UWorld* World)"
  },
  {
    "label": "IsRecordingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordingEnabled(const UWorld* World)"
  },
  {
    "label": "RewindForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RewindForReplay()"
  },
  {
    "label": "PreReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker)"
  },
  {
    "label": "GetReplayStreamingSources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReplayStreamingSources(TArray<FWorldPartitionStreamingSource>& OutStreamingSources)"
  },
  {
    "label": "GetRecordingStreamingSources()",
    "kind": "Method",
    "detail": "Function (struct FWorldPartitionReplaySample ; TArray<FWorldPartitionStreamingSource>)",
    "insertText": "GetRecordingStreamingSources()"
  }
]