[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedAuthorizationRef()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_SCOPED_AUTHORIZATIONREF_H_ # define BASE_MAC_SCOPED_AUTHORIZATIONREF_H_ # include<Security / Authorization . h> # include \" base / base_export . h \" namespace base::mac { class BASE_EXPORT ScopedAuthorizationRef { public :)",
    "insertText": "ScopedAuthorizationRef(AuthorizationRef authorization = NULL) : authorization_(authorization)"
  },
  {
    "label": "ScopedAuthorizationRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedAuthorizationRef(const ScopedAuthorizationRef&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedAuthorizationRef&)",
    "insertText": "operator(const ScopedAuthorizationRef&)"
  },
  {
    "label": "ScopedAuthorizationRef()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedAuthorizationRef()"
  },
  {
    "label": "FreeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeInternal()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "reset(AuthorizationRef authorization = NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} authorization_ = authorization ; } } bool)",
    "insertText": "operator(AuthorizationRef that)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (AuthorizationRef temp = that . authorization_ ; that . authorization_ = authorization_ ; authorization_ = temp ; } [ [ nodiscard ] ] AuthorizationRef)",
    "insertText": "release()"
  }
]