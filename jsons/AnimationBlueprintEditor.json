[
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IAnimationSequenceBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationSequenceBrowser"
  },
  {
    "label": "IPersonaViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaViewport"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimationBlueprintEditorOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationBlueprintEditorOptions"
  },
  {
    "label": "UAnimationBlueprintEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationBlueprintEditorSettings"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FBlueprintExceptionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintExceptionInfo"
  },
  {
    "label": "FAnimationBlueprintEditorModes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBlueprintEditorModes"
  },
  {
    "label": "FAnimationBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationBlueprintEditor"
  },
  {
    "label": "FAnimationBlueprintEditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationBlueprintEditorMode"
  },
  {
    "label": "FAnimationBlueprintTemplateEditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationBlueprintTemplateEditorMode"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "SGraphEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphEditor"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "GetLocalizedMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintEditor . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraphPin . h \" # include \" GraphEditor . h \" # include \" HAL / Platform . h \" # include \" IAnimationBlueprintEditor . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / AssertionMacros . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SharedPointer . h \" # include \" Toolkits / IToolkit . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FExtender ; class FReferenceCollector ; class FUICommandList ; class IAnimationSequenceBrowser ; class IPersonaViewport ; class ISkeletonTreeItem ; class SDockTab ; class SWidget ; class UAnimBlueprint ; class UAnimInstance ; class UAnimationBlueprintEditorOptions ; class UAnimationBlueprintEditorSettings ; class UBlueprint ; class UEdGraph ; class UObject ; class USkeletalMesh ; class USkeletalMeshComponent ; struct FToolMenuContext ; struct FFrame ; struct FBlueprintExceptionInfo ; struct FAnimationBlueprintEditorModes { const FName AnimationBlueprintEditorMode ; const FName AnimationBlueprintInterfaceEditorMode ; const FName AnimationBlueprintTemplateEditorMode ; FText)",
    "insertText": "GetLocalizedMode(const FName InMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FText> LocModes ;)",
    "insertText": "if(LocModes.Num() == 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(AnimationBlueprintEditorMode, NSLOCTEXT(\"AnimationBlueprintEditorModes\", \"AnimationBlueprintEditorMode\", \"Animation Blueprint\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(AnimationBlueprintInterfaceEditorMode, NSLOCTEXT(\"AnimationBlueprintEditorModes\", \"AnimationBlueprintInterface EditorMode\", \"Animation Blueprint Interface\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(AnimationBlueprintTemplateEditorMode, NSLOCTEXT(\"AnimationBlueprintEditorModes\", \"AnimationBlueprintTemplate EditorMode\", \"Animation Blueprint Template\"))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(InMode != NAME_None)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FText* OutDesc = LocModes .)",
    "insertText": "Find(InMode)"
  },
  {
    "label": "InitAnimationBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (} } ; namespace AnimationBlueprintEditorTabs { const FName DetailsTab ; const FName SkeletonTreeTab ; const FName ViewportTab ; const FName AdvancedPreviewTab ; const FName AssetBrowserTab ; const FName AnimBlueprintPreviewEditorTab ; const FName AssetOverridesTab ; const FName SlotNamesTab ; const FName CurveNamesTab ; const FName PoseWatchTab ; const FName FindReplaceTab ; } ; class FAnimationBlueprintEditor : public IAnimationBlueprintEditor { class FAnimationBlueprintEditorMode ; class FAnimationBlueprintTemplateEditorMode ; public : void)",
    "insertText": "InitAnimationBlueprintEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, class UAnimBlueprint* InAnimBlueprint)"
  },
  {
    "label": "FAnimationBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimationBlueprintEditor()"
  },
  {
    "label": "SetDetailObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDetailObjects(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "SetDetailObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDetailObject(UObject* Obj)"
  },
  {
    "label": "GetLastGraphPinTypeUsed()",
    "kind": "Method",
    "detail": "Function (const FEdGraphPinType&)",
    "insertText": "GetLastGraphPinTypeUsed()"
  },
  {
    "label": "GetAssetBrowser()",
    "kind": "Method",
    "detail": "Function (LastGraphPinType = InType ; } IAnimationSequenceBrowser*)",
    "insertText": "GetAssetBrowser()"
  },
  {
    "label": "GetPreviewInstance()",
    "kind": "Method",
    "detail": "Function (UAnimInstance*)",
    "insertText": "GetPreviewInstance()"
  },
  {
    "label": "GetPersonaToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaToolkit>)",
    "insertText": "GetPersonaToolkit()"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> PreviouslyActive, TSharedPtr<SDockTab> NewlyActivated)"
  },
  {
    "label": "OnSelectedNodesChangedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesChangedImpl(const TSet<class UObject*>& NewSelection)"
  },
  {
    "label": "HandleSetObjectBeingDebugged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSetObjectBeingDebugged(UObject* InObject)"
  },
  {
    "label": "GetAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (UAnimBlueprint*)",
    "insertText": "GetAnimBlueprint()"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "ClearSelectedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedActor()"
  },
  {
    "label": "ClearSelectedAnimGraphNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedAnimGraphNodes()"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaPreviewScene>)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "HandleObjectsSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsSelected(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "HandleObjectSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectSelected(UObject* InObject)"
  },
  {
    "label": "HandleSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectionChanged(const TArrayView<TSharedPtr<ISkeletonTreeItem>>& InSelectedItems, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "HandleGetObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "HandleGetObject()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "HandleOpenNewAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOpenNewAsset(UObject* InNewAsset)"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (public : FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetToolkitContextFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitContextFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetToolkitToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolkitToolTipText()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "InitToolMenuContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitToolMenuContext(FToolMenuContext& MenuContext)"
  },
  {
    "label": "GetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationLink()"
  },
  {
    "label": "GetBlueprintObj()",
    "kind": "Method",
    "detail": "Function (} UBlueprint*)",
    "insertText": "GetBlueprintObj()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "JumpToHyperlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToHyperlink(const UObject* ObjectReference, bool bRequestRename)"
  },
  {
    "label": "GetPreviewEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetPreviewEditor()"
  },
  {
    "label": "RefreshPreviewInstanceTrackCurves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshPreviewInstanceTrackCurves()"
  },
  {
    "label": "RecompileAnimBlueprintIfDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecompileAnimBlueprintIfDirty()"
  },
  {
    "label": "GetSkeletonTree()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISkeletonTree>)",
    "insertText": "GetSkeletonTree()"
  },
  {
    "label": "OnCreateGraphEditorCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateGraphEditorCommands(TSharedPtr<FUICommandList> GraphEditorCommandsList)"
  },
  {
    "label": "OnGraphEditorFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphEditorFocused(const TSharedRef<class SGraphEditor>& InGraphEditor)"
  },
  {
    "label": "OnGraphEditorBackgrounded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphEditorBackgrounded(const TSharedRef<SGraphEditor>& InGraphEditor)"
  },
  {
    "label": "IsInAScriptingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInAScriptingMode()"
  },
  {
    "label": "GetCustomDebugObjectLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCustomDebugObjectLabel(UObject* ObjectBeingDebugged)"
  },
  {
    "label": "CreateDefaultTabContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultTabContents(const TArray<UBlueprint*>& InBlueprints)"
  },
  {
    "label": "GetGraphAppearance()",
    "kind": "Method",
    "detail": "Function (FGraphAppearanceInfo)",
    "insertText": "GetGraphAppearance(class UEdGraph* InGraph)"
  },
  {
    "label": "IsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditable(UEdGraph* InGraph)"
  },
  {
    "label": "GetGraphDecorationString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGraphDecorationString(UEdGraph* InGraph)"
  },
  {
    "label": "OnBlueprintChangedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintChangedImpl(UBlueprint* InBlueprint, bool bIsJustBeingCompiled = false)"
  },
  {
    "label": "CreateEditorModeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEditorModeManager()"
  },
  {
    "label": "IsSectionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionVisible(NodeSectionID::Type InSectionID)"
  },
  {
    "label": "AreEventGraphsAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreEventGraphsAllowed()"
  },
  {
    "label": "AreMacrosAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMacrosAllowed()"
  },
  {
    "label": "AreDelegatesAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDelegatesAllowed()"
  },
  {
    "label": "OnCreateComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateComment()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FProperty* PropertyThatChanged)"
  },
  {
    "label": "CanTogglePoseWatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTogglePoseWatch()"
  },
  {
    "label": "OnTogglePoseWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTogglePoseWatch()"
  },
  {
    "label": "CanHideUnboundPropertyPins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideUnboundPropertyPins()"
  },
  {
    "label": "OnHideUnboundPropertyPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHideUnboundPropertyPins()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "ClearupPreviewMeshAnimNotifyStates()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ClearupPreviewMeshAnimNotifyStates()"
  },
  {
    "label": "RegisterOnPostUndo()",
    "kind": "Method",
    "detail": "Function (public : TWeakPtr<class IPersonaViewport> Viewport ; class IDetailLayoutBuilder* PersonaMeshDetailLayout ; public : typedef FSimpleMulticastDelegate::FDelegate FOnPostUndo ; void)",
    "insertText": "RegisterOnPostUndo(const FOnPostUndo& Delegate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OnPostUndo .)",
    "insertText": "Add(Delegate)"
  },
  {
    "label": "UnregisterOnPostUndo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnPostUndo(SWidget* Widget)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (OnPostUndo .)",
    "insertText": "RemoveAll(Widget)"
  },
  {
    "label": "UndoAction()",
    "kind": "Method",
    "detail": "Function (} FSimpleMulticastDelegate OnPostUndo ; protected : void)",
    "insertText": "UndoAction()"
  },
  {
    "label": "RedoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedoAction()"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExtendMenu()"
  },
  {
    "label": "RegisterMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMenus()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  },
  {
    "label": "GetAnimationBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FAnimationBlueprintEditor>)",
    "insertText": "GetAnimationBlueprintEditor(const FToolMenuContext& InMenuContext)"
  },
  {
    "label": "OnBlueprintPreCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintPreCompile(UBlueprint* BlueprintToCompile)"
  },
  {
    "label": "OnBlueprintPostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintPostCompile(UBlueprint* InBlueprint)"
  },
  {
    "label": "OnPostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostCompile()"
  },
  {
    "label": "NotifyAllNodesOnSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAllNodesOnSelection(const bool bInIsSelected)"
  },
  {
    "label": "NotifyAllNodesOnPoseWatchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAllNodesOnPoseWatchChanged(const bool IsPoseWatchActive)"
  },
  {
    "label": "ReleaseAllManagedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllManagedNodes()"
  },
  {
    "label": "AcquireAllManagedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireAllManagedNodes()"
  },
  {
    "label": "FindAnimNode()",
    "kind": "Method",
    "detail": "Function (struct FAnimNode_Base*)",
    "insertText": "FindAnimNode(class UAnimGraphNode_Base* AnimGraphNode)"
  },
  {
    "label": "HandlePinDefaultValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePinDefaultValueChanged(UEdGraphPin* InPinThatChanged)"
  },
  {
    "label": "HandlePreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreviewMeshChanged(USkeletalMesh* OldPreviewMesh, USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "HandleViewportCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportCreated(const TSharedRef<IPersonaViewport>& InPersonaViewport)"
  },
  {
    "label": "HandlePreviewAnimBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreviewAnimBlueprintCompiled(UBlueprint* InBlueprint)"
  },
  {
    "label": "HandlePoseWatchSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePoseWatchSelectedNodes()"
  },
  {
    "label": "RemoveAllSelectionPoseWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllSelectionPoseWatches()"
  },
  {
    "label": "LoadEditorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadEditorSettings()"
  },
  {
    "label": "SaveEditorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveEditorSettings()"
  },
  {
    "label": "HandleAnimationSequenceBrowserCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnimationSequenceBrowserCreated(const TSharedRef<IAnimationSequenceBrowser>& InSequenceBrowser)"
  },
  {
    "label": "HandleScriptException()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleScriptException(const UObject* InObject, const FFrame& InFrame, const FBlueprintExceptionInfo& InInfo)"
  },
  {
    "label": "HandleUpdateSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUpdateSettings(const UAnimationBlueprintEditorSettings* AnimationBlueprintEditorSettings, EPropertyChangeType::Type ChangeType)"
  },
  {
    "label": "ChoosePoseWatchColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "ChoosePoseWatchColor()"
  },
  {
    "label": "OnAddPosePin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddPosePin()"
  },
  {
    "label": "CanAddPosePin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddPosePin()"
  },
  {
    "label": "OnRemovePosePin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovePosePin()"
  },
  {
    "label": "CanRemovePosePin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemovePosePin()"
  },
  {
    "label": "OnConvertToSequenceEvaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToSequenceEvaluator()"
  },
  {
    "label": "OnConvertToSequencePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToSequencePlayer()"
  },
  {
    "label": "OnConvertToBlendSpaceEvaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToBlendSpaceEvaluator()"
  },
  {
    "label": "OnConvertToBlendSpacePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToBlendSpacePlayer()"
  },
  {
    "label": "OnConvertToBlendSpaceGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToBlendSpaceGraph()"
  },
  {
    "label": "OnConvertToPoseBlender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToPoseBlender()"
  },
  {
    "label": "OnConvertToPoseByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToPoseByName()"
  },
  {
    "label": "OnConvertToAimOffsetLookAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToAimOffsetLookAt()"
  },
  {
    "label": "OnConvertToAimOffsetSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToAimOffsetSimple()"
  },
  {
    "label": "OnConvertToAimOffsetGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertToAimOffsetGraph()"
  },
  {
    "label": "OnOpenRelatedAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenRelatedAsset()"
  }
]