[
  {
    "label": "FSkeletalMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMaterial"
  },
  {
    "label": "FSkeletalMeshLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshLODInfo"
  },
  {
    "label": "FSkinnedAssetBuildContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedAssetBuildContext"
  },
  {
    "label": "FSkinnedAssetPostLoadContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedAssetPostLoadContext"
  },
  {
    "label": "FSkinnedAsyncTaskContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedAsyncTaskContext"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UMeshDeformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshDeformer"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FSkinnedAssetAsyncBuildTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinnedAssetAsyncBuildTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FSkinWeightProfilesData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinWeightProfilesData"
  },
  {
    "label": "FSkeletalMeshModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshModel"
  },
  {
    "label": "FSkinnedAssetCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedAssetCompilingManager"
  },
  {
    "label": "FSkinnedAssetAsyncBuildWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedAssetAsyncBuildWorker"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / StreamableRenderAsset . h \" # include \" Interfaces / Interface_AsyncCompilation . h \" # include \" ReferenceSkeleton . h \" # include \" UObject / PerPlatformProperties . h \" # include \" PSOPrecache . h \" # include \" SkinnedAsset . generated . h \" struct FSkeletalMaterial ; struct FSkeletalMeshLODInfo ; class FSkinnedAssetBuildContext ; class FSkinnedAssetPostLoadContext ; class FSkinnedAsyncTaskContext ; class FVertexFactoryType ; class ITargetPlatform ; class UMeshDeformer ; class UMorphTarget ; class UPhysicsAsset ; class USkeleton ; struct FSkinnedAssetAsyncBuildTask ; enum class ESkeletalMeshVertexFlags : uint8 ; enum class ESkinnedAssetAsyncPropertyLockType { None = 0,ReadOnly = 1,WriteOnly = 2,ReadWrite = 3 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESkinnedAssetAsyncPropertyLockType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(hidecategories = Object, config = Engine, editinlinenew, abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API USkinnedAsset(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "USkinnedAsset()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "USkinnedAsset()"
  },
  {
    "label": "GetRefSkeleton()",
    "kind": "Method",
    "detail": "Function (struct FReferenceSkeleton&)",
    "insertText": "GetRefSkeleton() PURE_VIRTUAL(USkinnedAsset::GetRefSkeleton, static FReferenceSkeleton Dummy; return Dummy;)"
  },
  {
    "label": "GetRefSkeleton()",
    "kind": "Method",
    "detail": "Function (const struct FReferenceSkeleton&)",
    "insertText": "GetRefSkeleton() const PURE_VIRTUAL(USkinnedAsset::GetRefSkeleton, static const FReferenceSkeleton Dummy; return Dummy;)"
  },
  {
    "label": "GetLODInfo()",
    "kind": "Method",
    "detail": "Function (FSkeletalMeshLODInfo*)",
    "insertText": "GetLODInfo(int32 Index) PURE_VIRTUAL(USkinnedAsset::GetLODInfo, return nullptr;)"
  },
  {
    "label": "GetLODInfo()",
    "kind": "Method",
    "detail": "Function (const FSkeletalMeshLODInfo*)",
    "insertText": "GetLODInfo(int32 Index) const PURE_VIRTUAL(USkinnedAsset::GetLODInfo, return nullptr;)"
  },
  {
    "label": "IsValidMaterialIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidMaterialIndex(int32 Index)"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetShadowPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (UPhysicsAsset*)",
    "insertText": "GetShadowPhysicsAsset() const PURE_VIRTUAL(USkinnedAsset::GetShadowPhysicsAsset, return nullptr;)"
  },
  {
    "label": "GetComposedRefPoseMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetComposedRefPoseMatrix(FName InBoneName) const PURE_VIRTUAL(USkinnedAsset::GetComposedRefPoseMatrix, return FMatrix::Identity;)"
  },
  {
    "label": "GetComposedRefPoseMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetComposedRefPoseMatrix(int32 InBoneIndex) const PURE_VIRTUAL(USkinnedAsset::GetComposedRefPoseMatrix, return FMatrix::Identity;)"
  },
  {
    "label": "GetUVChannelData()",
    "kind": "Method",
    "detail": "Function (const FMeshUVChannelInfo*)",
    "insertText": "GetUVChannelData(int32 MaterialIndex) const PURE_VIRTUAL(USkinnedAsset::GetUVChannelData, return nullptr;)"
  },
  {
    "label": "GetSupportRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSupportRayTracing() const PURE_VIRTUAL(USkinnedAsset::GetSupportRayTracing, return false;)"
  },
  {
    "label": "GetRayTracingMinLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRayTracingMinLOD() const PURE_VIRTUAL(USkinnedAsset::GetRayTracingMinLOD, return 0;)"
  },
  {
    "label": "GetRefBasesInvMatrix()",
    "kind": "Method",
    "detail": "Function (TArray<FMatrix44f>&)",
    "insertText": "GetRefBasesInvMatrix() PURE_VIRTUAL(USkinnedAsset::GetRefBasesInvMatrix, static TArray<FMatrix44f> Dummy; return Dummy;)"
  },
  {
    "label": "GetRefBasesInvMatrix()",
    "kind": "Method",
    "detail": "Function (const TArray<FMatrix44f>&)",
    "insertText": "GetRefBasesInvMatrix() const PURE_VIRTUAL(USkinnedAsset::GetRefBasesInvMatrix, static const TArray<FMatrix44f> Dummy; return Dummy;)"
  },
  {
    "label": "GetResourceForRendering()",
    "kind": "Method",
    "detail": "Function (class FSkeletalMeshRenderData*)",
    "insertText": "GetResourceForRendering() const PURE_VIRTUAL(USkinnedAsset::GetResourceForRendering, return nullptr;)"
  },
  {
    "label": "GetDefaultMinLod()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDefaultMinLod() const PURE_VIRTUAL(USkinnedAsset::GetDefaultMinLod, return 0;)"
  },
  {
    "label": "GetMinLod()",
    "kind": "Method",
    "detail": "Function (const FPerPlatformInt&)",
    "insertText": "GetMinLod() const PURE_VIRTUAL(USkinnedAsset::GetMinLod, static const FPerPlatformInt Dummy; return Dummy;)"
  },
  {
    "label": "IsMinLodQualityLevelEnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinLodQualityLevelEnable()"
  },
  {
    "label": "GetMaterials()",
    "kind": "Method",
    "detail": "Function (TArray<FSkeletalMaterial>&)",
    "insertText": "GetMaterials() PURE_VIRTUAL(USkinnedAsset::GetMaterials, return GetSkeletalMaterialDummyArray();)"
  },
  {
    "label": "GetMaterials()",
    "kind": "Method",
    "detail": "Function (const TArray<FSkeletalMaterial>&)",
    "insertText": "GetMaterials() const PURE_VIRTUAL(USkinnedAsset::GetMaterials, return GetSkeletalMaterialDummyArray();)"
  },
  {
    "label": "GetLODNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODNum() const PURE_VIRTUAL(USkinnedAsset::GetLODNum, return 0;)"
  },
  {
    "label": "IsMaterialUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialUsed(int32 MaterialIndex) const PURE_VIRTUAL(USkinnedAsset::IsMaterialUsed, return false;)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetBounds() const PURE_VIRTUAL(USkinnedAsset::GetBounds, return FBoxSphereBounds();)"
  },
  {
    "label": "GetActiveSocketList()",
    "kind": "Method",
    "detail": "Function (TArray<class USkeletalMeshSocket*>)",
    "insertText": "GetActiveSocketList() const PURE_VIRTUAL(USkinnedAsset::GetActiveSocketList, static TArray<class USkeletalMeshSocket*> Dummy; return Dummy;)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (USkeleton*)",
    "insertText": "GetSkeleton() PURE_VIRTUAL(USkinnedAsset::GetSkeleton, return nullptr;)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (const USkeleton*)",
    "insertText": "GetSkeleton() const PURE_VIRTUAL(USkinnedAsset::GetSkeleton, return nullptr;)"
  },
  {
    "label": "SetSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeleton(USkeleton* InSkeleton) PURE_VIRTUAL(USkinnedAsset::SetSkeleton,)"
  },
  {
    "label": "GetDefaultMeshDeformer()",
    "kind": "Method",
    "detail": "Function (UMeshDeformer*)",
    "insertText": "GetDefaultMeshDeformer() const PURE_VIRTUAL(USkinnedAsset::GetDefaultMeshDeformer, return nullptr;)"
  },
  {
    "label": "GetOverlayMaterial()",
    "kind": "Method",
    "detail": "Function (class UMaterialInterface*)",
    "insertText": "GetOverlayMaterial() const PURE_VIRTUAL(USkinnedAsset::GetOverlayMaterial, return nullptr;)"
  },
  {
    "label": "GetOverlayMaterialMaxDrawDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOverlayMaterialMaxDrawDistance() const PURE_VIRTUAL(USkinnedAsset::GetOverlayMaterialMaxDrawDistance, return 0.f;)"
  },
  {
    "label": "IsValidLODIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidLODIndex(int32 Index) const PURE_VIRTUAL(USkinnedAsset::IsValidLODIndex, return false;)"
  },
  {
    "label": "GetMinLodIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMinLodIdx(bool bForceLowestLODIdx = false) const PURE_VIRTUAL(USkinnedAsset::GetMinLodIdx, return 0;)"
  },
  {
    "label": "GetMorphTargets()",
    "kind": "Method",
    "detail": "Function (TArray<TObjectPtr<UMorphTarget>>&)",
    "insertText": "GetMorphTargets()"
  },
  {
    "label": "FindMorphTarget()",
    "kind": "Method",
    "detail": "Function (const TArray<TObjectPtr<UMorphTarget>> Dummy ; return Dummy ; } UMorphTarget*)",
    "insertText": "FindMorphTarget(FName MorphTargetName)"
  },
  {
    "label": "GetHasVertexColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasVertexColors() const PURE_VIRTUAL(USkinnedAsset::GetHasVertexColors, return false;)"
  },
  {
    "label": "GetPlatformMinLODIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlatformMinLODIdx(const ITargetPlatform* TargetPlatform) const PURE_VIRTUAL(USkinnedAsset::GetPlatformMinLODIdx, return 0;)"
  },
  {
    "label": "GetDisableBelowMinLodStripping()",
    "kind": "Method",
    "detail": "Function (const FPerPlatformBool&)",
    "insertText": "GetDisableBelowMinLodStripping() const PURE_VIRTUAL(USkinnedAsset::GetDisableBelowMinLodStripping, static const FPerPlatformBool Dummy; return Dummy;)"
  },
  {
    "label": "SetSkinWeightProfilesData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkinWeightProfilesData(int32 LODIndex, struct FSkinWeightProfilesData& SkinWeightProfilesData)"
  },
  {
    "label": "GetSkinWeightProfilesData()",
    "kind": "Method",
    "detail": "Function (} FSkinWeightProfilesData*)",
    "insertText": "GetSkinWeightProfilesData(int32 LODIndex)"
  },
  {
    "label": "FillComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillComponentSpaceTransforms(const TArray<FTransform>& InBoneSpaceTransforms, const TArray<FBoneIndexType>& InFillComponentSpaceTransformsRequiredBones, TArray<FTransform>& OutComponentSpaceTransforms)"
  },
  {
    "label": "GetDetailedInfoInternal()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDetailedInfoInternal()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "GetVertexFactoryTypesPerMaterialIndex()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheVertexFactoryDataPerMaterialIndexList)",
    "insertText": "GetVertexFactoryTypesPerMaterialIndex(USkinnedMeshComponent* SkinnedMeshComponent, int32 MinLODIndex, bool bCPUSkin, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetLODPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLODPathName(const USkinnedAsset* Mesh, int32 LODIndex)"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "IsInitialBuildDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialBuildDone() const PURE_VIRTUAL(USkinnedAsset::IsInitialBuildDone, return false;)"
  },
  {
    "label": "BuildLODModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLODModel(const ITargetPlatform* TargetPlatform, int32 LODIndex)"
  },
  {
    "label": "GetEnableLODStreaming()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetEnableLODStreaming(const ITargetPlatform* TargetPlatform) const PURE_VIRTUAL(USkinnedAsset::GetEnableLODStreaming, return false;)"
  },
  {
    "label": "GetMaxNumStreamedLODs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumStreamedLODs(const ITargetPlatform* TargetPlatform) const PURE_VIRTUAL(USkinnedAsset::GetMaxNumStreamedLODs, return 0;)"
  },
  {
    "label": "GetMaxNumOptionalLODs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumOptionalLODs(const ITargetPlatform* TargetPlatform) const PURE_VIRTUAL(USkinnedAsset::GetMaxNumOptionalLODs, return 0;)"
  },
  {
    "label": "UpdateUVChannelData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateUVChannelData(bool bResetOverrides)"
  },
  {
    "label": "AcquireAsyncProperty()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AcquireAsyncProperty(uint64 AsyncProperties = MAX_uint64, ESkinnedAssetAsyncPropertyLockType LockType = ESkinnedAssetAsyncPropertyLockType::ReadWrite)"
  },
  {
    "label": "ReleaseAsyncProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAsyncProperty(uint64 AsyncProperties = MAX_uint64, ESkinnedAssetAsyncPropertyLockType LockType = ESkinnedAssetAsyncPropertyLockType::ReadWrite)"
  },
  {
    "label": "WaitUntilAsyncPropertyReleasedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilAsyncPropertyReleasedInternal(uint64 AsyncProperties, ESkinnedAssetAsyncPropertyLockType LockType = ESkinnedAssetAsyncPropertyLockType::ReadWrite)"
  },
  {
    "label": "BeginBuildInternal()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BeginBuildInternal(FSkinnedAssetBuildContext& Context)"
  },
  {
    "label": "ExecuteBuildInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteBuildInternal(FSkinnedAssetBuildContext& Context)"
  },
  {
    "label": "FinishBuildInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishBuildInternal(FSkinnedAssetBuildContext& Context)"
  },
  {
    "label": "BeginAsyncTaskInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginAsyncTaskInternal(FSkinnedAsyncTaskContext& Context)"
  },
  {
    "label": "ExecuteAsyncTaskInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteAsyncTaskInternal(FSkinnedAsyncTaskContext& Context)"
  },
  {
    "label": "FinishAsyncTaskInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishAsyncTaskInternal(FSkinnedAsyncTaskContext& Context)"
  },
  {
    "label": "TryCancelAsyncTasks()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryCancelAsyncTasks()"
  },
  {
    "label": "BeginPostLoadInternal()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FSkinnedAssetAsyncBuildTask> AsyncTask ; # endif private : void)",
    "insertText": "BeginPostLoadInternal(FSkinnedAssetPostLoadContext& Context)"
  },
  {
    "label": "ExecutePostLoadInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecutePostLoadInternal(FSkinnedAssetPostLoadContext& Context)"
  },
  {
    "label": "FinishPostLoadInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishPostLoadInternal(FSkinnedAssetPostLoadContext& Context)"
  },
  {
    "label": "GetAsyncPropertyName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetAsyncPropertyName(uint64 Property)"
  },
  {
    "label": "PrepareForAsyncCompilation()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "PrepareForAsyncCompilation()"
  },
  {
    "label": "IsAsyncTaskComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAsyncTaskComplete()"
  },
  {
    "label": "GetSkeletalMaterialDummyArray()",
    "kind": "Method",
    "detail": "Function (TArray<FSkeletalMaterial>&)",
    "insertText": "GetSkeletalMaterialDummyArray()"
  }
]