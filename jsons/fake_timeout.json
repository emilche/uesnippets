[
  {
    "label": "FakeTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeTimeout"
  },
  {
    "label": "FakeTimeoutManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeTimeoutManager"
  },
  {
    "label": "FakeTimeout()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TIMER_FAKE_TIMEOUT_H_ # define NET_DCSCTP_TIMER_FAKE_TIMEOUT_H_ # include<cstdint> # include<functional> # include<limits> # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / public / timeout . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / containers / flat_set . h \" namespace dcsctp { class FakeTimeout : public Timeout { public :)",
    "insertText": "FakeTimeout(std::function<TimeMs()> get_time, std::function<void(FakeTimeout*)> on_delete) : get_time_(std::move(get_time)), on_delete_(std::move(on_delete))"
  },
  {
    "label": "FakeTimeout()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakeTimeout()"
  },
  {
    "label": "on_delete_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "on_delete_(this)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(DurationMs duration_ms, TimeoutID timeout_id)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(expiry_ == TimeMs::InfiniteFuture())"
  },
  {
    "label": "get_time_()",
    "kind": "Method",
    "detail": "Function (timeout_id_ = timeout_id ; expiry_ =)",
    "insertText": "get_time_()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(expiry_ != TimeMs::InfiniteFuture())"
  },
  {
    "label": "InfiniteFuture()",
    "kind": "Method",
    "detail": "Function (expiry_ =)",
    "insertText": "InfiniteFuture()"
  },
  {
    "label": "EvaluateHasExpired()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EvaluateHasExpired(TimeMs now)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (const std::function<)",
    "insertText": "void(FakeTimeout*)"
  },
  {
    "label": "TimeoutID()",
    "kind": "Method",
    "detail": "Function (TimeoutID timeout_id_ =)",
    "insertText": "TimeoutID(0)"
  },
  {
    "label": "FakeTimeoutManager()",
    "kind": "Method",
    "detail": "Function (} ; class FakeTimeoutManager { public :)",
    "insertText": "FakeTimeoutManager(std::function<TimeMs()> get_time) : get_time_(std::move(get_time))"
  },
  {
    "label": "CreateTimeout()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<FakeTimeout>)",
    "insertText": "CreateTimeout()"
  },
  {
    "label": "FakeTimeout()",
    "kind": "Method",
    "detail": "Function (auto timer = std::make_unique<)",
    "insertText": "FakeTimeout(get_time_, [this](FakeTimeout* timer) { timers_.erase(timer); })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (timers_ .)",
    "insertText": "insert(timer.get())"
  },
  {
    "label": "GetNextExpiredTimeout()",
    "kind": "Method",
    "detail": "Function (} absl::optional<TimeoutID>)",
    "insertText": "GetNextExpiredTimeout()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<TimeoutID> expired_timers ;)",
    "insertText": "for(auto& timer : timers_)"
  },
  {
    "label": "TimeMs()",
    "kind": "Method",
    "detail": "Function (} } return absl::nullopt ; } private : const std::function<)",
    "insertText": "TimeMs()"
  }
]