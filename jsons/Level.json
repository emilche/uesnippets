[
  {
    "label": "Refinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Refinement"
  },
  {
    "label": "TriRefinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriRefinement"
  },
  {
    "label": "QuadRefinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QuadRefinement"
  },
  {
    "label": "FVarRefinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVarRefinement"
  },
  {
    "label": "FVarLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVarLevel"
  },
  {
    "label": "Level",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Level"
  },
  {
    "label": "VTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTag"
  },
  {
    "label": "ETag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ETag"
  },
  {
    "label": "FTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTag"
  },
  {
    "label": "VSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VSpan"
  },
  {
    "label": "TopologyError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TopologyError"
  },
  {
    "label": "VTag()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_VTR_LEVEL_H # define OPENSUBDIV3_VTR_LEVEL_H # include \" . . / version . h \" # include \" . . / sdc / types . h \" # include \" . . / sdc / crease . h \" # include \" . . / sdc / options . h \" # include \" . . / vtr / types . h \" # include<algorithm> # include<vector> # include<cassert> # include<cstring> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Vtr { namespace internal { class Refinement ; class TriRefinement ; class QuadRefinement ; class FVarRefinement ; class FVarLevel ; class Level { public : struct VTag {)",
    "insertText": "VTag()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) this, 0, sizeof(VTag))"
  },
  {
    "label": "VTag()",
    "kind": "Method",
    "detail": "Function (} typedef unsigned short VTagSize ; VTagSize _nonManifold : 1 ; VTagSize _xordinary : 1 ; VTagSize _boundary : 1 ; VTagSize _corner : 1 ; VTagSize _infSharp : 1 ; VTagSize _semiSharp : 1 ; VTagSize _semiSharpEdges : 1 ; VTagSize _rule : 4 ; VTagSize _incomplete : 1 ; VTagSize _incidIrregFace : 1 ; VTagSize _infSharpEdges : 1 ; VTagSize _infSharpCrease : 1 ; VTagSize _infIrregular : 1 ;)",
    "insertText": "VTag(VTagSize bits)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(this, &bits, sizeof(bits))"
  },
  {
    "label": "getBits()",
    "kind": "Method",
    "detail": "Function (} VTagSize)",
    "insertText": "getBits()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (VTagSize bits ;)",
    "insertText": "memcpy(&bits, this, sizeof(bits))"
  },
  {
    "label": "ETag()",
    "kind": "Method",
    "detail": "Function (} ; struct ETag {)",
    "insertText": "ETag()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) this, 0, sizeof(ETag))"
  },
  {
    "label": "ETag()",
    "kind": "Method",
    "detail": "Function (} typedef unsigned char ETagSize ; ETagSize _nonManifold : 1 ; ETagSize _boundary : 1 ; ETagSize _infSharp : 1 ; ETagSize _semiSharp : 1 ;)",
    "insertText": "ETag(ETagSize bits)"
  },
  {
    "label": "FTag()",
    "kind": "Method",
    "detail": "Function (} ; struct FTag {)",
    "insertText": "FTag()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) this, 0, sizeof(FTag))"
  },
  {
    "label": "VSpan()",
    "kind": "Method",
    "detail": "Function (} typedef unsigned char FTagSize ; FTagSize _hole : 1 ; } ; struct VSpan {)",
    "insertText": "VSpan()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) this, 0, sizeof(VSpan))"
  },
  {
    "label": "isAssigned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAssigned()"
  },
  {
    "label": "Level()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Level()"
  },
  {
    "label": "getDepth()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getDepth()"
  },
  {
    "label": "getNumFaceEdgesTotal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumFaceEdgesTotal()"
  },
  {
    "label": "getNumEdgeVerticesTotal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumEdgeVerticesTotal()"
  },
  {
    "label": "getNumEdgeFacesTotal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumEdgeFacesTotal()"
  },
  {
    "label": "getNumVertexFacesTotal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumVertexFacesTotal()"
  },
  {
    "label": "getNumVertexEdgesTotal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumVertexEdgesTotal()"
  },
  {
    "label": "getMaxValence()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getMaxValence()"
  },
  {
    "label": "getFaceEdges()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getFaceEdges(Index faceIndex)"
  },
  {
    "label": "getEdgeVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getEdgeVertices(Index edgeIndex)"
  },
  {
    "label": "getEdgeFaces()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getEdgeFaces(Index edgeIndex)"
  },
  {
    "label": "getVertexFaces()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getVertexFaces(Index vertIndex)"
  },
  {
    "label": "getVertexEdges()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getVertexEdges(Index vertIndex)"
  },
  {
    "label": "getEdgeFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (ConstLocalIndexArray)",
    "insertText": "getEdgeFaceLocalIndices(Index edgeIndex)"
  },
  {
    "label": "getVertexFaceLocalIndices()",
    "kind": "Method",
    "detail": "Function (ConstLocalIndexArray)",
    "insertText": "getVertexFaceLocalIndices(Index vertIndex)"
  },
  {
    "label": "getVertexEdgeLocalIndices()",
    "kind": "Method",
    "detail": "Function (ConstLocalIndexArray)",
    "insertText": "getVertexEdgeLocalIndices(Index vertIndex)"
  },
  {
    "label": "getEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getEdgeSharpness(Index edgeIndex)"
  },
  {
    "label": "getVertexSharpness()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getVertexSharpness(Index vertIndex)"
  },
  {
    "label": "getVertexRule()",
    "kind": "Method",
    "detail": "Function (Sdc::Crease::Rule)",
    "insertText": "getVertexRule(Index vertIndex)"
  },
  {
    "label": "findEdge()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findEdge(Index v0Index, Index v1Index)"
  },
  {
    "label": "setFaceHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFaceHole(Index faceIndex, bool b)"
  },
  {
    "label": "isFaceHole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFaceHole(Index faceIndex)"
  },
  {
    "label": "getFVarOptions()",
    "kind": "Method",
    "detail": "Function (Sdc::Options)",
    "insertText": "getFVarOptions(int channel)"
  },
  {
    "label": "getNumFVarChannels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumFVarChannels()"
  },
  {
    "label": "getNumFVarValues()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumFVarValues(int channel)"
  },
  {
    "label": "getFaceFVarValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getFaceFVarValues(Index faceIndex, int channel)"
  },
  {
    "label": "getFVarLevel()",
    "kind": "Method",
    "detail": "Function (FVarLevel&)",
    "insertText": "getFVarLevel(int channel)"
  },
  {
    "label": "isEdgeNonManifold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEdgeNonManifold(Index edgeIndex)"
  },
  {
    "label": "setVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVertexNonManifold(Index vertIndex, bool b)"
  },
  {
    "label": "isVertexNonManifold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVertexNonManifold(Index vertIndex)"
  },
  {
    "label": "getVertexTag()",
    "kind": "Method",
    "detail": "Function (VTag const&)",
    "insertText": "getVertexTag(Index vertIndex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(* ValidationCallback)(TopologyError errCode, char const * msg, void const * clientData)"
  },
  {
    "label": "validateTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validateTopology(ValidationCallback callback=0, void const * clientData=0)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(const Refinement* parentRefinement = 0)"
  },
  {
    "label": "isSingleCreasePatch()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "isSingleCreasePatch(Index face, float* sharpnessOut=NULL, int* rotationOut=NULL)"
  },
  {
    "label": "doesVertexFVarTopologyMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesVertexFVarTopologyMatch(Index vIndex, int fvarChannel)"
  },
  {
    "label": "doesFaceFVarTopologyMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesFaceFVarTopologyMatch(Index fIndex, int fvarChannel)"
  },
  {
    "label": "doesEdgeFVarTopologyMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesEdgeFVarTopologyMatch(Index eIndex, int fvarChannel)"
  },
  {
    "label": "getFaceVTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getFaceVTags(Index fIndex, VTag vTags[], int fvarChannel = -1)"
  },
  {
    "label": "getFaceETags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getFaceETags(Index fIndex, ETag eTags[], int fvarChannel = -1)"
  },
  {
    "label": "getFaceCompositeVTag()",
    "kind": "Method",
    "detail": "Function (VTag)",
    "insertText": "getFaceCompositeVTag(Index fIndex, int fvarChannel = -1)"
  },
  {
    "label": "getFaceCompositeVTag()",
    "kind": "Method",
    "detail": "Function (VTag)",
    "insertText": "getFaceCompositeVTag(ConstIndexArray & fVerts)"
  },
  {
    "label": "getVertexCompositeFVarVTag()",
    "kind": "Method",
    "detail": "Function (VTag)",
    "insertText": "getVertexCompositeFVarVTag(Index vIndex, int fvarChannel)"
  },
  {
    "label": "gatherQuadLinearPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherQuadLinearPatchPoints(Index fIndex, Index patchPoints[], int rotation = 0, int fvarChannel = -1)"
  },
  {
    "label": "gatherQuadRegularInteriorPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherQuadRegularInteriorPatchPoints(Index fIndex, Index patchPoints[], int rotation = 0, int fvarChannel = -1)"
  },
  {
    "label": "gatherQuadRegularBoundaryPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherQuadRegularBoundaryPatchPoints(Index fIndex, Index patchPoints[], int boundaryEdgeInFace, int fvarChannel = -1)"
  },
  {
    "label": "gatherQuadRegularCornerPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherQuadRegularCornerPatchPoints(Index fIndex, Index patchPoints[], int cornerVertInFace, int fvarChannel = -1)"
  },
  {
    "label": "gatherQuadRegularRingAroundVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherQuadRegularRingAroundVertex(Index vIndex, Index ringPoints[], int fvarChannel = -1)"
  },
  {
    "label": "gatherQuadRegularPartialRingAroundVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherQuadRegularPartialRingAroundVertex(Index vIndex, VSpan const & span, Index ringPoints[], int fvarChannel = -1)"
  },
  {
    "label": "gatherTriRegularInteriorPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherTriRegularInteriorPatchPoints(Index fIndex, Index patchVerts[], int rotation = 0)"
  },
  {
    "label": "gatherTriRegularBoundaryVertexPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherTriRegularBoundaryVertexPatchPoints(Index fIndex, Index patchVerts[], int boundaryVertInFace)"
  },
  {
    "label": "gatherTriRegularBoundaryEdgePatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherTriRegularBoundaryEdgePatchPoints(Index fIndex, Index patchVerts[], int boundaryEdgeInFace)"
  },
  {
    "label": "gatherTriRegularCornerVertexPatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherTriRegularCornerVertexPatchPoints(Index fIndex, Index patchVerts[], int cornerVertInFace)"
  },
  {
    "label": "gatherTriRegularCornerEdgePatchPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherTriRegularCornerEdgePatchPoints(Index fIndex, Index patchVerts[], int cornerEdgeInFace)"
  },
  {
    "label": "resizeFaces()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "resizeFaces(int numFaces)"
  },
  {
    "label": "resizeFaceVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeFaceVertices(int numFaceVertsTotal)"
  },
  {
    "label": "resizeFaceEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeFaceEdges(int numFaceEdgesTotal)"
  },
  {
    "label": "resizeEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeEdges(int numEdges)"
  },
  {
    "label": "resizeEdgeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeEdgeVertices()"
  },
  {
    "label": "resizeEdgeFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeEdgeFaces(int numEdgeFacesTotal)"
  },
  {
    "label": "resizeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeVertices(int numVertices)"
  },
  {
    "label": "resizeVertexFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeVertexFaces(int numVertexFacesTotal)"
  },
  {
    "label": "resizeVertexEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeVertexEdges(int numVertexEdgesTotal)"
  },
  {
    "label": "setMaxValence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxValence(int maxValence)"
  },
  {
    "label": "getFaceVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getFaceVertices(Index faceIndex)"
  },
  {
    "label": "createFVarChannel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "createFVarChannel(int fvarValueCount, Sdc::Options const& options)"
  },
  {
    "label": "destroyFVarChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroyFVarChannel(int channel)"
  },
  {
    "label": "completeFVarChannelTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "completeFVarChannelTopology(int channel, int regBoundaryValence)"
  },
  {
    "label": "getNumFaceVertices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumFaceVertices(Index faceIndex)"
  },
  {
    "label": "getOffsetOfFaceEdges()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getOffsetOfFaceEdges(Index faceIndex)"
  },
  {
    "label": "getNumEdgeVertices()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNumEdgeVertices(Index)"
  },
  {
    "label": "resizeFaceVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeFaceVertices(Index FaceIndex, int count)"
  },
  {
    "label": "resizeEdgeFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeEdgeFaces(Index edgeIndex, int count)"
  },
  {
    "label": "trimEdgeFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "trimEdgeFaces(Index edgeIndex, int count)"
  },
  {
    "label": "resizeVertexFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeVertexFaces(Index vertIndex, int count)"
  },
  {
    "label": "trimVertexFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "trimVertexFaces(Index vertIndex, int count)"
  },
  {
    "label": "resizeVertexEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeVertexEdges(Index vertIndex, int count)"
  },
  {
    "label": "trimVertexEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "trimVertexEdges(Index vertIndex, int count)"
  },
  {
    "label": "completeTopologyFromFaceVertices()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "completeTopologyFromFaceVertices()"
  },
  {
    "label": "findEdge()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findEdge(Index v0, Index v1, ConstIndexArray v0Edges)"
  },
  {
    "label": "orientIncidentComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "orientIncidentComponents()"
  },
  {
    "label": "orderVertexFacesAndEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "orderVertexFacesAndEdges(Index vIndex, Index* vFaces, Index* vEdges)"
  },
  {
    "label": "orderVertexFacesAndEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "orderVertexFacesAndEdges(Index vIndex)"
  },
  {
    "label": "populateLocalIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateLocalIndices()"
  },
  {
    "label": "shareFaceVertCountsAndOffsets()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "shareFaceVertCountsAndOffsets()"
  },
  {
    "label": "resizeFaceVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeFaceVertices(Index faceIndex, int count)"
  },
  {
    "label": "countOffsetPair()",
    "kind": "Method",
    "detail": "Function (int* countOffsetPair =& _faceVertCountsAndOffsets [ faceIndex* 2 ] ; countOffsetPair [ 0 ] = count ;)",
    "insertText": "countOffsetPair(faceIndex == 0) ? 0 : (countOffsetPair[-2] + countOffsetPair[-1])"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (_maxValence =)",
    "insertText": "max(_maxValence, count)"
  },
  {
    "label": "getFaceVertices()",
    "kind": "Method",
    "detail": "Function (} ConstIndexArray)",
    "insertText": "getFaceVertices()"
  },
  {
    "label": "countOffsetPair()",
    "kind": "Method",
    "detail": "Function (int* countOffsetPair =& _vertFaceCountsAndOffsets [ vertIndex* 2 ] ; countOffsetPair [ 0 ] = count ;)",
    "insertText": "countOffsetPair(vertIndex == 0) ? 0 : (countOffsetPair[-2] + countOffsetPair[-1])"
  },
  {
    "label": "setMaxValence()",
    "kind": "Method",
    "detail": "Function (_vertEdgeCountsAndOffsets [ vertIndex* 2 ] = count ; } void)",
    "insertText": "setMaxValence(int valence)"
  },
  {
    "label": "countOffsetPair()",
    "kind": "Method",
    "detail": "Function (int* countOffsetPair =& _edgeFaceCountsAndOffsets [ edgeIndex* 2 ] ; countOffsetPair [ 0 ] = count ;)",
    "insertText": "countOffsetPair(edgeIndex == 0) ? 0 : (countOffsetPair[-2] + countOffsetPair[-1])"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (_maxEdgeFaces =)",
    "insertText": "max(_maxEdgeFaces, count)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_faceCount = faceCount ; _faceVertCountsAndOffsets .)",
    "insertText": "resize(2 * faceCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_faceTags .)",
    "insertText": "resize(faceCount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) &_faceTags[0], 0, _faceCount * sizeof(FTag))"
  },
  {
    "label": "resizeFaceVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeFaceVertices(int totalFaceVertCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_faceVertIndices .)",
    "insertText": "resize(totalFaceVertCount)"
  },
  {
    "label": "resizeFaceEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeFaceEdges(int totalFaceEdgeCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_faceEdgeIndices .)",
    "insertText": "resize(totalFaceEdgeCount)"
  },
  {
    "label": "resizeEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeEdges(int edgeCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_edgeCount = edgeCount ; _edgeFaceCountsAndOffsets .)",
    "insertText": "resize(2 * edgeCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_edgeSharpness .)",
    "insertText": "resize(edgeCount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) &_edgeTags[0], 0, _edgeCount * sizeof(ETag))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_edgeVertIndices .)",
    "insertText": "resize(2 * _edgeCount)"
  },
  {
    "label": "resizeEdgeFaces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeEdgeFaces(int totalEdgeFaceCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_edgeFaceIndices .)",
    "insertText": "resize(totalEdgeFaceCount)"
  },
  {
    "label": "resizeVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeVertices(int vertCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_vertCount = vertCount ; _vertFaceCountsAndOffsets .)",
    "insertText": "resize(2 * vertCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_vertSharpness .)",
    "insertText": "resize(vertCount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((void*) &_vertTags[0], 0, _vertCount * sizeof(VTag))"
  },
  {
    "label": "resizeVertexFaces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeVertexFaces(int totalVertFaceCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_vertFaceIndices .)",
    "insertText": "resize(totalVertFaceCount)"
  },
  {
    "label": "resizeVertexEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeVertexEdges(int totalVertEdgeCount)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (_vertEdgeIndices .)",
    "insertText": "resize(totalVertEdgeCount)"
  }
]