[
  {
    "label": "FakeEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeEncoder"
  },
  {
    "label": "FrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameInfo"
  },
  {
    "label": "SpatialLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SpatialLayer"
  },
  {
    "label": "FakeH264Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeH264Encoder"
  },
  {
    "label": "DelayedEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayedEncoder"
  },
  {
    "label": "MultithreadedFakeH264Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultithreadedFakeH264Encoder"
  },
  {
    "label": "FakeEncoder()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FAKE_ENCODER_H_ # define TEST_FAKE_ENCODER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" api / fec_controller_override . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_encoder . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { namespace test { class FakeEncoder : public VideoEncoder { public :)",
    "insertText": "FakeEncoder(Clock* clock)"
  },
  {
    "label": "FakeEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeEncoder()"
  },
  {
    "label": "SetMaxBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxBitrate(int max_kbps) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetQp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQp(int qp) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitEncode(const VideoCodec* config, const Settings& settings) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "GetConfiguredInputFramerate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetConfiguredInputFramerate() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetNumInitializations()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumInitializations() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "config()",
    "kind": "Method",
    "detail": "Function (const VideoCodec&)",
    "insertText": "config() const RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SpatialLayer()",
    "kind": "Method",
    "detail": "Function (const char* kImplementationName ; protected : struct FrameInfo { bool keyframe ; struct SpatialLayer {)",
    "insertText": "SpatialLayer()"
  },
  {
    "label": "SpatialLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpatialLayer(int size, int temporal_id) : size(size), temporal_id(temporal_id)"
  },
  {
    "label": "NextFrame()",
    "kind": "Method",
    "detail": "Function (} int size = 0 ; int temporal_id = 0 ; } ; std::vector<SpatialLayer> layers ; } ; FrameInfo)",
    "insertText": "NextFrame(const std::vector<VideoFrameType>* frame_types, bool keyframe, uint8_t num_simulcast_streams, const VideoBitrateAllocation& target_bitrate, SimulcastStream simulcast_streams[kMaxSimulcastStreams], int framerate) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "EncodeHook()",
    "kind": "Method",
    "detail": "Function (CodecSpecificInfo)",
    "insertText": "EncodeHook(EncodedImage& encoded_image, rtc::scoped_refptr<EncodedImageBuffer> buffer)"
  },
  {
    "label": "SetRatesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRatesLocked(const RateControlParameters& parameters) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (FrameInfo last_frame_info_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "FakeH264Encoder()",
    "kind": "Method",
    "detail": "Function (size_t debt_bytes_ ; } ; class FakeH264Encoder : public FakeEncoder { public :)",
    "insertText": "FakeH264Encoder(Clock* clock)"
  },
  {
    "label": "FakeH264Encoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeH264Encoder()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (int idr_counter_)",
    "insertText": "RTC_GUARDED_BY(local_mutex_)"
  },
  {
    "label": "DelayedEncoder()",
    "kind": "Method",
    "detail": "Function (Mutex local_mutex_ ; } ; class DelayedEncoder : public test::FakeEncoder { public :)",
    "insertText": "DelayedEncoder(Clock* clock, int delay_ms)"
  },
  {
    "label": "DelayedEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelayedEncoder()"
  },
  {
    "label": "SetDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelay(int delay_ms)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : int delay_ms_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "MultithreadedFakeH264Encoder()",
    "kind": "Method",
    "detail": "Function (SequenceChecker sequence_checker_ ; } ; class MultithreadedFakeH264Encoder : public test::FakeH264Encoder { public :)",
    "insertText": "MultithreadedFakeH264Encoder(Clock* clock, TaskQueueFactory* task_queue_factory)"
  },
  {
    "label": "MultithreadedFakeH264Encoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MultithreadedFakeH264Encoder()"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitEncode(const VideoCodec* config, const Settings& settings)"
  },
  {
    "label": "EncodeCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "EncodeCallback(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  }
]