[
  {
    "label": "FCurveEdNotifyInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEdNotifyInterface"
  },
  {
    "label": "UCurveEdOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEdOptions"
  },
  {
    "label": "UInterpCurveEdSetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterpCurveEdSetup"
  },
  {
    "label": "FCurveEditorModKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorModKey"
  },
  {
    "label": "FCurveEditorSelectedKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorSelectedKey"
  },
  {
    "label": "FCurveEditorSharedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorSharedData"
  },
  {
    "label": "ECurveEdMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECurveEdMode"
  },
  {
    "label": "CURVEEDENTRY_HIDECURVE_BIT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Math / Color . h \" # define CURVEED_MAX_CURVES 6 # define)",
    "insertText": "CURVEEDENTRY_HIDECURVE_BIT(0x00000001) #define CURVEEDENTRY_HIDECURVE(x) ((x) & CURVEEDENTRY_HIDECURVE_BIT) #define CURVEEDENTRY_TOGGLE_HIDECURVE(x) ((x) = ((x) ^ CURVEEDENTRY_HIDECURVE_BIT)) #define CURVEEDENTRY_SET_HIDECURVE(x, flg) ((x) = ((flg) ? ((x) | CURVEEDENTRY_HIDECURVE_BIT) : ((x) &~ CURVEEDENTRY_HIDECURVE_BIT))) #define CURVEEDENTRY_HIDESUBCURVE_BIT(idx) (1 << ((idx) + 1)) #define CURVEEDENTRY_HIDESUBCURVE(x, idx) ((x) & CURVEEDENTRY_HIDESUBCURVE_BIT(idx)) #define CURVEEDENTRY_TOGGLE_HIDESUBCURVE(x, idx) ((x) = ((x) ^ CURVEEDENTRY_HIDESUBCURVE_BIT(idx))) #define CURVEEDENTRY_SET_HIDESUBCURVE(x, idx, flg) ((x) = ((flg) ? ((x) | CURVEEDENTRY_HIDESUBCURVE_BIT(idx)) : ((x) &~ CURVEEDENTRY_HIDESUBCURVE_BIT(idx)))) #define CURVEEDENTRY_SELECTED_BIT (0x80000000) #define CURVEEDENTRY_SELECTED(x) ((x) & CURVEEDENTRY_SELECTED_BIT) #define CURVEEDENTRY_TOGGLE_SELECTED(x) ((x) = ((x) ^ CURVEEDENTRY_SELECTED_BIT)) #define CURVEEDENTRY_SET_SELECTED(x, flg) ((x) = ((flg) ? ((x) | CURVEEDENTRY_SELECTED_BIT) : ((x) &~ CURVEEDENTRY_SELECTED_BIT)))"
  },
  {
    "label": "FCurveEditorModKey()",
    "kind": "Method",
    "detail": "Function (class UCurveEdOptions ; class UInterpCurveEdSetup ; struct FCurveEditorModKey { int32 CurveIndex ; int32 KeyIndex ;)",
    "insertText": "FCurveEditorModKey(int32 InCurveIndex, int32 InKeyIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurveIndex = InCurveIndex ; KeyIndex = InKeyIndex ; } bool)",
    "insertText": "operator(const FCurveEditorModKey& Other)"
  },
  {
    "label": "FCurveEditorSelectedKey()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCurveEditorSelectedKey { int32 CurveIndex ; int32 SubIndex ; int32 KeyIndex ; float UnsnappedIn ; float UnsnappedOut ;)",
    "insertText": "FCurveEditorSelectedKey(int32 InCurveIndex, int32 InSubIndex, int32 InKeyIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurveIndex = InCurveIndex ; SubIndex = InSubIndex ; KeyIndex = InKeyIndex ; UnsnappedIn = 0 . 0 f ; UnsnappedOut = 0 . 0 f ; } bool)",
    "insertText": "operator(const FCurveEditorSelectedKey& Other)"
  },
  {
    "label": "FCurveEditorSharedData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCurveEditorSharedData()"
  },
  {
    "label": "SetCurveView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveView(float StartIn, float EndIn, float StartOut, float EndOut)"
  }
]