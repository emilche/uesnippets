[
  {
    "label": "Network",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Network"
  },
  {
    "label": "PacketOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketOptions"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Connection"
  },
  {
    "label": "IceMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceMessage"
  },
  {
    "label": "StunMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunMessage"
  },
  {
    "label": "StunStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunStats"
  },
  {
    "label": "ProtocolType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProtocolType"
  },
  {
    "label": "PortInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PortInterface"
  },
  {
    "label": "CandidateOrigin",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CandidateOrigin"
  },
  {
    "label": "PortInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_PORT_INTERFACE_H_ # define P2P_BASE_PORT_INTERFACE_H_ # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / candidate . h \" # include \" p2p / base / transport_description . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / callback_list . h \" # include \" rtc_base / socket_address . h \" namespace rtc { class Network ; struct PacketOptions ; } namespace cricket { class Connection ; class IceMessage ; class StunMessage ; class StunStats ; enum ProtocolType { PROTO_UDP,PROTO_TCP,PROTO_SSLTCP,PROTO_TLS,PROTO_LAST = PROTO_TLS } ; class PortInterface { public : ~)",
    "insertText": "PortInterface()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "Type()"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (const rtc::Network*)",
    "insertText": "Network()"
  },
  {
    "label": "SetIceRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceRole(IceRole role)"
  },
  {
    "label": "GetIceRole()",
    "kind": "Method",
    "detail": "Function (IceRole)",
    "insertText": "GetIceRole()"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceTiebreaker(uint64_t tiebreaker)"
  },
  {
    "label": "IceTiebreaker()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "IceTiebreaker()"
  },
  {
    "label": "SharedSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SharedSocket()"
  },
  {
    "label": "SupportsProtocol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsProtocol(absl::string_view protocol)"
  },
  {
    "label": "PrepareAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAddress()"
  },
  {
    "label": "GetConnection()",
    "kind": "Method",
    "detail": "Function (Connection*)",
    "insertText": "GetConnection(const rtc::SocketAddress& remote_addr)"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (enum CandidateOrigin { ORIGIN_THIS_PORT,ORIGIN_OTHER_PORT,ORIGIN_MESSAGE } ; Connection*)",
    "insertText": "CreateConnection(const Candidate& remote_candidate, CandidateOrigin origin)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "GetProtocol()",
    "kind": "Method",
    "detail": "Function (ProtocolType)",
    "insertText": "GetProtocol()"
  },
  {
    "label": "Candidates()",
    "kind": "Method",
    "detail": "Function (const std::vector<Candidate>&)",
    "insertText": "Candidates()"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* data, size_t size, const rtc::SocketAddress& addr, const rtc::PacketOptions& options, bool payload)"
  },
  {
    "label": "SendBindingErrorResponse()",
    "kind": "Method",
    "detail": "Function (sigslot::signal6<PortInterface*,const rtc::SocketAddress&,ProtocolType,IceMessage*,const std::string&,bool> SignalUnknownAddress ; void)",
    "insertText": "SendBindingErrorResponse(StunMessage* message, const rtc::SocketAddress& addr, int error_code, absl::string_view reason)"
  },
  {
    "label": "SubscribePortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribePortDestroyed(std::function<void(PortInterface*)> callback)"
  },
  {
    "label": "EnablePortPackets()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<PortInterface*> SignalRoleConflict ; void)",
    "insertText": "EnablePortPackets()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (sigslot::signal4<PortInterface*,const char*,size_t,const rtc::SocketAddress&> SignalReadPacket ; sigslot::signal1<const rtc::SentPacket&> SignalSentPacket ; std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "GetStunStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStunStats(absl::optional<StunStats>* stats)"
  }
]