[
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Capsule . h \" # include \" Chaos / Collision / ContactPoint . h \" # include \" Chaos / Collision / ContactTriangles . h \" # include \" Chaos / Collision / ConvexFeature . h \" # include \" Chaos / Triangle . h \" namespace Chaos::Private { template<ConvexType> void)",
    "insertText": "ProjectOntoAxis(const ConvexType& Convex, const FVec3& AxisN, const FVec3& AxisX, FReal& PMin, FReal& PMax, int32& MinVertexIndex, int32& MaxVertexIndex, TArrayView<FReal>* VertexDs)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (PMin = std::numeric_limits<FReal)",
    "insertText": "max()"
  },
  {
    "label": "lowest()",
    "kind": "Method",
    "detail": "Function (PMax = std::numeric_limits<FReal)",
    "insertText": "lowest()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 V = Convex .)",
    "insertText": "GetVertex(VertexIndex)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal D =)",
    "insertText": "DotProduct(V - AxisX, AxisN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PMin = D ; MinVertexIndex = VertexIndex ; })",
    "insertText": "if(D > PMax)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PMax = D ; MaxVertexIndex = VertexIndex ; })",
    "insertText": "if(VertexDs != nullptr)"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ProjectOntoAxis(const FTriangle& Triangle, const FVec3& AxisN, const FVec3& AxisX, FReal& PMin, FReal& PMax, int32& MinVertexIndex, int32& MaxVertexIndex)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3& V0 = Triangle .)",
    "insertText": "GetVertex(0)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3& V1 = Triangle .)",
    "insertText": "GetVertex(1)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3& V2 = Triangle .)",
    "insertText": "GetVertex(2)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal Ds [ 3 ] = {)",
    "insertText": "DotProduct(V0 - AxisX, AxisN), FVec3::DotProduct(V1 - AxisX, AxisN), FVec3::DotProduct(V2 - AxisX, AxisN)"
  },
  {
    "label": "Min3Index()",
    "kind": "Method",
    "detail": "Function (MinVertexIndex =)",
    "insertText": "Min3Index(Ds[0], Ds[1], Ds[2])"
  },
  {
    "label": "Max3Index()",
    "kind": "Method",
    "detail": "Function (MaxVertexIndex =)",
    "insertText": "Max3Index(Ds[0], Ds[1], Ds[2])"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (PMin = Ds [ MinVertexIndex ] ; PMax = Ds [ MaxVertexIndex ] ; } void)",
    "insertText": "ProjectOntoAxis(const FCapsule& Capsule, const FVec3& AxisN, const FVec3& AxisX, FReal& PMin, FReal& PMax, int32& MinVertexIndex, int32& MaxVertexIndex)"
  },
  {
    "label": "GetX1()",
    "kind": "Method",
    "detail": "Function (const FVec3 V0 = Capsule .)",
    "insertText": "GetX1()"
  },
  {
    "label": "GetX2()",
    "kind": "Method",
    "detail": "Function (const FVec3 V1 = Capsule .)",
    "insertText": "GetX2()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal D0 =)",
    "insertText": "DotProduct(V0 - AxisX, AxisN)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal D1 =)",
    "insertText": "DotProduct(V1 - AxisX, AxisN)"
  },
  {
    "label": "GetConvexFeature()",
    "kind": "Method",
    "detail": "Function (MinVertexIndex = 0 ; MaxVertexIndex = 1 ; PMin = D0 ; PMax = D1 ; } else { MinVertexIndex = 1 ; MaxVertexIndex = 0 ; PMin = D1 ; PMax = D0 ; } } template<ConvexType> bool)",
    "insertText": "GetConvexFeature(const ConvexType& Convex, const FVec3& Position, const FVec3& Normal, Private::FConvexFeature& OutFeature)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal NormalTolerance =)",
    "insertText": "FReal(1.e-6)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal PositionTolerance =)",
    "insertText": "FReal(1.e-4)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (const FReal ToleranceSizeMultiplier = Convex .)",
    "insertText": "BoundingBox().Extents().GetAbsMax()"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal EdgeNormalTolerance = ToleranceSizeMultiplier*)",
    "insertText": "FReal(1.e-3)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (int32 BestPlaneIndex = INDEX_NONE ; FReal BestPlaneDotNormal =)",
    "insertText": "FReal(-1)"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (int SupportVertexIndex = INDEX_NONE ; Convex .)",
    "insertText": "SupportCore(Normal, 0, nullptr, SupportVertexIndex)"
  },
  {
    "label": "FindVertexPlanes()",
    "kind": "Method",
    "detail": "Function (int32 VertexPlanes [ 1 6 ] ; int32 NumVertexPlanes = Convex .)",
    "insertText": "FindVertexPlanes(SupportVertexIndex, VertexPlanes, UE_ARRAY_COUNT(VertexPlanes))"
  },
  {
    "label": "GetPlaneNX()",
    "kind": "Method",
    "detail": "Function (const int32 PlaneIndex = VertexPlanes [ VertexPlaneIndex ] ; FVec3 PlaneN,PlaneX ; Convex .)",
    "insertText": "GetPlaneNX(PlaneIndex, PlaneN, PlaneX)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal PlaneDotNormal =)",
    "insertText": "DotProduct(PlaneN, Normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFeature . FeatureType = Private::EConvexFeatureType::Plane ; OutFeature . PlaneIndex = PlaneIndex ; OutFeature . PlaneFeatureIndex = 0 ; return true ; })",
    "insertText": "if(PlaneDotNormal > BestPlaneDotNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BestPlaneIndex = PlaneIndex ; BestPlaneDotNormal = PlaneDotNormal ; } })",
    "insertText": "if(BestPlaneIndex != INDEX_NONE)"
  },
  {
    "label": "NumPlaneVertices()",
    "kind": "Method",
    "detail": "Function (int32 BestPlaneVertexIndex = INDEX_NONE ; const int32 NumPlaneVertices = Convex .)",
    "insertText": "NumPlaneVertices(BestPlaneIndex)"
  },
  {
    "label": "GetPlaneVertex()",
    "kind": "Method",
    "detail": "Function (const int32 VertexIndex0 = Convex .)",
    "insertText": "GetPlaneVertex(BestPlaneIndex, PlaneVertexIndex)"
  },
  {
    "label": "VertexIndex1()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "VertexIndex1(PlaneVertexIndex == NumPlaneVertices - 1) ? Convex.GetPlaneVertex(BestPlaneIndex, 0) : Convex.GetPlaneVertex(BestPlaneIndex, PlaneVertexIndex + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BestPlaneVertexIndex = PlaneVertexIndex ; })",
    "insertText": "if((VertexIndex0 == SupportVertexIndex) || (VertexIndex1 == SupportVertexIndex))"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 Vertex0 = Convex .)",
    "insertText": "GetVertex(VertexIndex0)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 Vertex1 = Convex .)",
    "insertText": "GetVertex(VertexIndex1)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgeDelta = Vertex1 - Vertex0 ; const FReal EdgeDotNormal =)",
    "insertText": "DotProduct(EdgeDelta, Normal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFeature . FeatureType = Private::EConvexFeatureType::Edge ; OutFeature . PlaneIndex = BestPlaneIndex ; OutFeature . PlaneFeatureIndex = PlaneVertexIndex ; return true ; } } })",
    "insertText": "if(BestPlaneVertexIndex != INDEX_NONE)"
  },
  {
    "label": "GetTriangleFeature()",
    "kind": "Method",
    "detail": "Function (OutFeature . FeatureType = Private::EConvexFeatureType::Vertex ; OutFeature . PlaneIndex = BestPlaneIndex ; OutFeature . PlaneFeatureIndex = BestPlaneVertexIndex ; } return true ; } } return false ; } bool)",
    "insertText": "GetTriangleFeature(const FTriangle& Triangle, const FVec3& TriangleNormal, const FVec3& Position, const FVec3& Normal, Private::FConvexFeature& OutFeature)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal NormalEpsilon =)",
    "insertText": "FReal(0.02)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal NormalDot =)",
    "insertText": "DotProduct(Normal, TriangleNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 VertexIndex0,VertexIndex1 ;)",
    "insertText": "if(GetTriangleEdgeVerticesAtPosition(Position, &Triangle.GetVertex(0), VertexIndex0, VertexIndex1, BarycentricTolerance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFeature . FeatureType = Private::EConvexFeatureType::Edge ; OutFeature . PlaneIndex = 0 ; OutFeature . PlaneFeatureIndex = VertexIndex0 ; return true ; } else)",
    "insertText": "if(VertexIndex0 != INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutFeature . FeatureType = Private::EConvexFeatureType::Vertex ; OutFeature . PlaneIndex = 0 ; OutFeature . PlaneFeatureIndex = VertexIndex0 ; return true ; } else)",
    "insertText": "if(VertexIndex1 != INDEX_NONE)"
  },
  {
    "label": "IsOnMinkowskiSumConvexConvex()",
    "kind": "Method",
    "detail": "Function (OutFeature . FeatureType = Private::EConvexFeatureType::Vertex ; OutFeature . PlaneIndex = 0 ; OutFeature . PlaneFeatureIndex = VertexIndex1 ; return true ; } } return false ; } template<RealType> bool)",
    "insertText": "IsOnMinkowskiSumConvexConvex(const TVec3<RealType>& A, const TVec3<RealType>& B, const TVec3<RealType>& C, const TVec3<RealType>& D, const RealType Tolerance = 1.e-2f)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const TVec3<RealType> BA = TVec3<RealType)",
    "insertText": "CrossProduct(B, A)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const TVec3<RealType> DC = TVec3<RealType)",
    "insertText": "CrossProduct(D, C)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const RealType CBA = TVec3<RealType)",
    "insertText": "DotProduct(C, BA)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const RealType DBA = TVec3<RealType)",
    "insertText": "DotProduct(D, BA)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const RealType ADC = TVec3<RealType)",
    "insertText": "DotProduct(A, DC)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const RealType BDC = TVec3<RealType)",
    "insertText": "DotProduct(B, DC)"
  },
  {
    "label": "IsOnMinkowskiSumConvexTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOnMinkowskiSumConvexTriangle(const FVec3& A, const FVec3& B, const FVec3& BA, const FVec3& C, const FVec3& DC)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FReal Tolerance = 1 . e - 2 f ;)",
    "insertText": "return((ADC * BDC) < -Tolerance) && ((CBA * BDC) > Tolerance)"
  }
]