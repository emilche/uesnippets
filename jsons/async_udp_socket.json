[
  {
    "label": "AsyncUDPSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncUDPSocket"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_ASYNC_UDP_SOCKET_H_ # define RTC_BASE_ASYNC_UDP_SOCKET_H_ # include<stddef . h> # include<cstdint> # include<memory> # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / socket_factory . h \" # include \" rtc_base / thread_annotations . h \" namespace rtc { class AsyncUDPSocket : public AsyncPacketSocket { public : AsyncUDPSocket*)",
    "insertText": "Create(Socket* socket, const SocketAddress& bind_address)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (AsyncUDPSocket*)",
    "insertText": "Create(SocketFactory* factory, const SocketAddress& bind_address)"
  },
  {
    "label": "AsyncUDPSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncUDPSocket(Socket* socket)"
  },
  {
    "label": "AsyncUDPSocket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AsyncUDPSocket()"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "GetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetRemoteAddress()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb, const rtc::PacketOptions& options)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* pv, size_t cb, const SocketAddress& addr, const rtc::PacketOptions& options)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (State)",
    "insertText": "GetState()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(Socket::Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Socket::Option opt, int value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(int error)"
  },
  {
    "label": "OnReadEvent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnReadEvent(Socket* socket)"
  },
  {
    "label": "OnWriteEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWriteEvent(Socket* socket)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker sequence_checker_ ; std::unique_ptr<Socket> socket_ ; int BUF_SIZE = 6 4* 1 0 2 4 ; char buf_ [ BUF_SIZE ])",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  }
]