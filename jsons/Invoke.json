[
  {
    "label": "StrippedAccept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StrippedAccept"
  },
  {
    "label": "Accept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Accept"
  },
  {
    "label": "MemFunAndRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemFunAndRef"
  },
  {
    "label": "AcceptImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AcceptImpl"
  },
  {
    "label": "MemFunAndPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemFunAndPtr"
  },
  {
    "label": "DataMemAndRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataMemAndRef"
  },
  {
    "label": "DataMemAndPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataMemAndPtr"
  },
  {
    "label": "Callable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Callable"
  },
  {
    "label": "Invoker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Invoker"
  },
  {
    "label": "IsInvocableRImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInvocableRImpl"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_INVOKE_H_ # define ABSL_BASE_INTERNAL_INVOKE_H_ # include \" absl / base / config . h \" # if ABSL_INTERNAL_CPLUSPLUS_LANG> = 2 0 1 7 0 3 L # include<functional> namespace absl { ABSL_NAMESPACE_BEGIN namespace base_internal { using std::invoke ; using std::invoke_result_t ; using std::is_invocable_r ; } ABSL_NAMESPACE_END } # else # include<algorithm> # include<type_traits> # include<utility> # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace base_internal { template<Derived> struct StrippedAccept { template<. . . Args> struct Accept : Derived::template AcceptImpl<std::remove_cv<std::remove_reference<Args>::type>::type . . .> { } ; } ; struct MemFunAndRef : StrippedAccept<MemFunAndRef> { template<. . . Args> struct AcceptImpl : std::false_type { } ; template<MemFunType,C,Obj,. . . Args> struct AcceptImpl<MemFunType C::*,Obj,Args . . .> : std::integral_constant<bool,std::is_base_of<C,Obj>::value&& absl::is_function<MemFunType>::value> { } ; template<MemFun,Obj,. . . Args>)",
    "insertText": "decltype((std::declval<Obj>().* std::declval<MemFun>())(std::declval<Args>()...)) Invoke(MemFun&& mem_fun, Obj&& obj, Args&&... args)"
  },
  {
    "label": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(11, 0) #pragma GCC diagnostic push #pragma GCC diagnostic ignored \"-Warray-bounds\" #pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\" #endif return (std::forward<Obj>(obj).* std::forward<MemFun>(mem_fun))(std::forward<Args>(args)...)"
  },
  {
    "label": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(11, 0)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (struct MemFunAndPtr : StrippedAccept<MemFunAndPtr> { template<. . . Args> struct AcceptImpl : std::false_type { } ; template<MemFunType,C,Ptr,. . . Args> struct AcceptImpl<MemFunType C::*,Ptr,Args . . .> : std::integral_constant<bool,! std::is_base_of<C,Ptr>::value&& absl::is_function<MemFunType>::value> { } ; template<MemFun,Ptr,. . . Args>)",
    "insertText": "decltype(((*std::declval<Ptr>()).* std::declval<MemFun>())(std::declval<Args>()...)) Invoke(MemFun&& mem_fun, Ptr&& ptr, Args&&... args)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; struct DataMemAndRef : StrippedAccept<DataMemAndRef> { template<. . . Args> struct AcceptImpl : std::false_type { } ; template<R,C,Obj> struct AcceptImpl<R C::*,Obj> : std::integral_constant<bool,std::is_base_of<C,Obj>::value&& ! absl::is_function<R>::value> { } ; template<DataMem,Ref>)",
    "insertText": "decltype(std::declval<Ref>().*std::declval<DataMem>()) Invoke( DataMem&& data_mem, Ref&& ref)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; struct DataMemAndPtr : StrippedAccept<DataMemAndPtr> { template<. . . Args> struct AcceptImpl : std::false_type { } ; template<R,C,Ptr> struct AcceptImpl<R C::*,Ptr> : std::integral_constant<bool,! std::is_base_of<C,Ptr>::value&& ! absl::is_function<R>::value> { } ; template<DataMem,Ptr>)",
    "insertText": "decltype((*std::declval<Ptr>()).*std::declval<DataMem>()) Invoke( DataMem&& data_mem, Ptr&& ptr)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; struct Callable { template<F,. . . Args>)",
    "insertText": "decltype(std::declval<F>()(std::declval<Args>()...)) Invoke( F&& f, Args&&... args)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Args> struct Invoker { typedef std::conditional<MemFunAndRef::Accept<Args . . .>::value,MemFunAndRef,std::conditional<MemFunAndPtr::Accept<Args . . .>::value,MemFunAndPtr,std::conditional<DataMemAndRef::Accept<Args . . .>::value,DataMemAndRef,std::conditional<DataMemAndPtr::Accept<Args . . .>::value,DataMemAndPtr,Callable>::type>::type>::type>::type type ; } ; template<F,. . . Args> using invoke_result_t =)",
    "insertText": "decltype(Invoker<F, Args...>::type::Invoke( std::declval<F>(), std::declval<Args>()...))"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (template<F,. . . Args> invoke_result_t<F,Args . . .>)",
    "insertText": "invoke(F&& f, Args&&... args)"
  }
]