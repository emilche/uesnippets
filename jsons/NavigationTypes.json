[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "INavAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavAgentInterface"
  },
  {
    "label": "INavRelevantInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavRelevantInterface"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavLinkAuxiliaryId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkAuxiliaryId"
  },
  {
    "label": "FNavLinkId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkId"
  },
  {
    "label": "FNavigationPortalEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPortalEdge"
  },
  {
    "label": "FNavLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLocation"
  },
  {
    "label": "FNavPathPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavPathPoint"
  },
  {
    "label": "FNavPathType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavPathType"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMovementProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovementProperties"
  },
  {
    "label": "FNavMovementProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavMovementProperties"
  },
  {
    "label": "FNavAgentProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavAgentProperties"
  },
  {
    "label": "UShapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UShapeComponent"
  },
  {
    "label": "FNavDataConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavDataConfig"
  },
  {
    "label": "FNavigationProjectionWork",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationProjectionWork"
  },
  {
    "label": "FRayStartEnd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayStartEnd"
  },
  {
    "label": "FNavigationRaycastWork",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRaycastWork"
  },
  {
    "label": "FNavigationMemoryStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationMemoryStat"
  },
  {
    "label": "ForAnyElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForAnyElementType"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TNavStatArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNavStatArray"
  },
  {
    "label": "FNavHeightfieldSamples",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavHeightfieldSamples"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Templates / SubclassOf . h \" # include \" Misc / CoreStats . h \" # include \" UObject / SoftObjectPath . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" GameFramework / Actor . h \" # include \" AI / Navigation / NavDataGatheringMode . h \" # endif # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_5 # include \" NavigationDirtyArea . h \" # endif # include \" NavigationTypes . generated . h \" # define INVALID_NAVQUERYID)",
    "insertText": "uint32(0) #define INVALID_NAVDATA uint32(0) #define INVALID_NAVEXTENT (FVector::ZeroVector)"
  },
  {
    "label": "NavNodeRef()",
    "kind": "Method",
    "detail": "Function (class INavAgentInterface ; class INavRelevantInterface ; class ULevel ; struct FNavigationPath ; typedef uint64 NavNodeRef ; # define INVALID_NAVNODEREF)",
    "insertText": "NavNodeRef(0)"
  },
  {
    "label": "InvalidBoundingBox()",
    "kind": "Method",
    "detail": "Function (const float FallbackAgentRadius ; const float FallbackAgentHeight ; FBox)",
    "insertText": "InvalidBoundingBox(ForceInit, UE::Math::TBoxConstInit{})"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector InvalidLocation =)",
    "insertText": "FVector(TNumericLimits<FVector::FReal>::Max(), UE::Math::TVectorConstInit{})"
  },
  {
    "label": "IsLevelVisibilityChanging()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLevelVisibilityChanging(const UObject* Object)"
  },
  {
    "label": "IsInBaseNavmesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInBaseNavmesh(const UObject* Object)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Default,Enable)",
    "insertText": "UMETA(DisplayName = \"Yes\"), Disable UMETA(DisplayName = \"No\"), MAX UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Invalid)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (SortWithSeedLocations,SortByPriority,None } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FNavDataPerInstanceTransformDelegate, const FBox&, TArray<FTransform>&)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FNavLinkAuxiliaryId()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetId()"
  },
  {
    "label": "GenerateUniqueAuxiliaryId()",
    "kind": "Method",
    "detail": "Function (FNavLinkAuxiliaryId)",
    "insertText": "GenerateUniqueAuxiliaryId(FStringView PathName)"
  },
  {
    "label": "FNavLinkAuxiliaryId()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FNavLinkAuxiliaryId(uint64 InId) : Id(InId)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FNavLinkId()"
  },
  {
    "label": "FNavLinkId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavLinkId(uint64 InId) : Id(InId)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsLegacyId()",
    "kind": "Method",
    "detail": "Function (Id = InId ; } bool)",
    "insertText": "IsLegacyId()"
  },
  {
    "label": "GenerateUniqueId()",
    "kind": "Method",
    "detail": "Function (} FNavLinkId)",
    "insertText": "GenerateUniqueId()"
  },
  {
    "label": "GenerateUniqueId()",
    "kind": "Method",
    "detail": "Function (FNavLinkId)",
    "insertText": "GenerateUniqueId(FNavLinkAuxiliaryId AuxiliaryId, FGuid ActorInstanceGuid)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(FNavLinkId const& Value)"
  },
  {
    "label": "FNavigationPortalEdge()",
    "kind": "Method",
    "detail": "Function (uint64 InvalidLinkId = 0 ; uint64 NavLinkIdBitMask = 1 ULL<<6 3 ; } ; struct FNavigationPortalEdge { FVector Left ; FVector Right ; NavNodeRef ToRef ;)",
    "insertText": "FNavigationPortalEdge() : Left(0.f), Right(0.f), ToRef(INVALID_NAVNODEREF)"
  },
  {
    "label": "FNavigationPortalEdge()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationPortalEdge(const FVector& InLeft, const FVector& InRight, NavNodeRef InToRef) : Left(InLeft), Right(InRight), ToRef(InToRef)"
  },
  {
    "label": "GetPoint()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetPoint(const int32 Index)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "GetLength()"
  },
  {
    "label": "GetMiddlePoint()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetMiddlePoint()"
  },
  {
    "label": "FNavLocation()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNavLocation { FVector Location ; NavNodeRef NodeRef ;)",
    "insertText": "FNavLocation() : Location(FVector::ZeroVector), NodeRef(INVALID_NAVNODEREF)"
  },
  {
    "label": "FNavLocation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavLocation(const FVector& InLocation, NavNodeRef InNodeRef = INVALID_NAVNODEREF) : Location(InLocation), NodeRef(InNodeRef)"
  },
  {
    "label": "HasNodeRef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNodeRef()"
  },
  {
    "label": "FNavPathPoint()",
    "kind": "Method",
    "detail": "Function (FNavLinkId CustomNavLinkId ;)",
    "insertText": "FNavPathPoint() : Flags(0)"
  },
  {
    "label": "FNavPathPoint()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS CustomLinkId = 0 ; PRAGMA_ENABLE_DEPRECATION_WARNINGS })",
    "insertText": "FNavPathPoint(const FVector& InLocation, NavNodeRef InNodeRef = INVALID_NAVNODEREF, uint32 InFlags = 0) : FNavLocation(InLocation, InNodeRef), Flags(InFlags)"
  },
  {
    "label": "FNavPathPoint()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS CustomLinkId = 0 ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FNavPathPoint(const FNavPathPoint&)"
  },
  {
    "label": "FNavPathPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavPathPoint(FNavPathPoint&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavPathPoint&)",
    "insertText": "operator(const FNavPathPoint& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavPathPoint&)",
    "insertText": "operator(FNavPathPoint&& Other)"
  },
  {
    "label": "FNavPathType()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNavPathType {)",
    "insertText": "FNavPathType(const FNavPathType* Parent = nullptr) : Id(++NextUniqueId), ParentType(Parent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNavPathType& Other)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(const FNavPathType& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Cleared,NewPath,UpdatedDueToGoalMoved,UpdatedDueToNavigationChanged,Invalidated,RePathFailed,MetaPathUpdate,Custom,} ; } namespace ENavPathUpdateType { enum Type { GoalMoved,NavigationChanged,MetaPathUpdate,Custom,} ; } namespace EPathObservationResult { enum Type { NoLongerObserving,NoChange,RequestRepath,} ; } namespace ENavAreaEvent { enum Type { Registered,Unregistered } ; } typedef TSharedRef<struct FNavigationPath,ESPMode::ThreadSafe> FNavPathSharedRef ; typedef TSharedPtr<struct FNavigationPath,ESPMode::ThreadSafe> FNavPathSharedPtr ; typedef TWeakPtr<struct FNavigationPath,ESPMode::ThreadSafe> FNavPathWeakPtr ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=MovementProperties)"
  },
  {
    "label": "FMovementProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovementProperties() : bCanCrouch(false) , bCanJump(false) , bCanWalk(false) , bCanSwim(false) , bCanFly(false)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = NavMovement, meta = (EditCondition = \"bUseFixedBrakingDistanceForPaths\"))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=MovementProperties, meta=(DisplayName=\"Nav Agent Radius\"))"
  },
  {
    "label": "FNavAgentProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavAgentProperties(float Radius = -1.f, float Height = -1.f) : AgentRadius(Radius), AgentHeight(Height), AgentStepHeight(-1), NavWalkingSearchHeightScale(0.5f)"
  },
  {
    "label": "FNavAgentProperties()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavAgentProperties(const FNavAgentProperties& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavAgentProperties&)",
    "insertText": "operator(const FNavAgentProperties& Other)"
  },
  {
    "label": "UpdateWithCollisionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWithCollisionComponent(class UShapeComponent* CollisionComponent)"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetExtent()"
  },
  {
    "label": "SetPreferredNavData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreferredNavData(TSubclassOf<AActor> NavDataClass)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const FNavAgentProperties DefaultProperties ; uint32)",
    "insertText": "GetTypeHash(const FNavAgentProperties& A)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Display)"
  },
  {
    "label": "FNavDataConfig()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNavDataConfig(float Radius = FNavigationSystem::FallbackAgentRadius, float Height = FNavigationSystem::FallbackAgentHeight)"
  },
  {
    "label": "FNavDataConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavDataConfig(const FNavDataConfig& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavDataConfig&)",
    "insertText": "operator(const FNavDataConfig& Other)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "SetNavDataClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavDataClass(UClass* InNavDataClass)"
  },
  {
    "label": "SetNavDataClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavDataClass(TSoftClassPtr<AActor> InNavDataClass)"
  },
  {
    "label": "GetNavDataClass()",
    "kind": "Method",
    "detail": "Function (template<T> TSubclassOf<T>)",
    "insertText": "GetNavDataClass()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetNavigationDataClassPropertyName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FName)",
    "insertText": "GetNavigationDataClassPropertyName()"
  },
  {
    "label": "GET_MEMBER_NAME_CHECKED()",
    "kind": "Method",
    "detail": "Function (const FName NAME_NavigationDataClass =)",
    "insertText": "GET_MEMBER_NAME_CHECKED(FNavDataConfig, NavDataClass)"
  },
  {
    "label": "FNavigationProjectionWork()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationProjectionWork() : Point(FNavigationSystem::InvalidLocation), ProjectionLimit(ForceInit), bHintProjection2D(false), bResult(false), bIsValid(false)"
  },
  {
    "label": "FRayStartEnd()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRayStartEnd { const FVector RayStart ; const FVector RayEnd ;)",
    "insertText": "FRayStartEnd(const FVector& InRayStart = FNavigationSystem::InvalidLocation, const FVector& InRayEnd = FNavigationSystem::InvalidLocation) : RayStart(InRayStart), RayEnd(InRayEnd)"
  },
  {
    "label": "FNavigationRaycastWork()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNavigationRaycastWork : FRayStartEnd { FNavLocation HitLocation ; bool bDidHit ; bool bIsRayEndInCorridor ;)",
    "insertText": "FNavigationRaycastWork(const FVector& InRayStart, const FVector& InRayEnd) : FRayStartEnd(InRayStart, InRayEnd), HitLocation(InRayEnd), bDidHit(false), bIsRayEndInCorridor(false)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Invalid,Error,Fail,Success } ; })",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FNavPathQueryDelegate, uint32, ENavigationQueryResult::Type, FNavPathSharedPtr)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (namespace NavMeshMemory { # if STATS class FNavigationMemoryStat : public FDefaultAllocator { public : typedef FDefaultAllocator Super ; class ForAnyElementType : public FDefaultAllocator::ForAnyElementType { public : typedef FDefaultAllocator::ForAnyElementType Super ; private : int64 AllocatedSize ; public :)",
    "insertText": "ForAnyElementType() : AllocatedSize(0)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ForAnyElementType()"
  },
  {
    "label": "DEC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_DWORD_STAT_BY(STAT_NavigationMemory, AllocatedSize)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResizeAllocation(int32 PreviousNumElements, int32 NumElements, int32 NumBytesPerElement, uint32 AlignmentOfElement)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAllocation(PreviousNumElements, NumElements, NumBytesPerElement)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeAllocation(SizeType PreviousNumElements, SizeType NumElements, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "INC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (const int64 NewSize = NumElements* NumBytesPerElement ;)",
    "insertText": "INC_DWORD_STAT_BY(STAT_NavigationMemory, NewSize - AllocatedSize)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ForAnyElementType(const ForAnyElementType&)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (} ; template<ElementType> class ForElementType : public ForAnyElementType { public : ElementType*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "FNavHeightfieldSamples()",
    "kind": "Method",
    "detail": "Function (} } ; } ; typedef FNavigationMemoryStat FNavAllocator ; # else typedef FDefaultAllocator FNavAllocator ; # endif } # if STATS template<> struct TAllocatorTraits<NavMeshMemory::FNavigationMemoryStat> : TAllocatorTraits<NavMeshMemory::FNavigationMemoryStat::Super> { } ; # endif template<InElementType> class TNavStatArray : public TArray<InElementType,NavMeshMemory::FNavAllocator> { public : typedef TArray<InElementType,NavMeshMemory::FNavAllocator> Super ; } ; struct FNavHeightfieldSamples { TNavStatArray<int16> Heights ; TBitArray<> Holes ;)",
    "insertText": "FNavHeightfieldSamples()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  }
]