[
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "FFABRIKChainLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFABRIKChainLink"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoneIndices . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" UObject / ObjectMacros . h \" # include \" FABRIK . generated . h \" struct FBoneContainer ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FFABRIKChainLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFABRIKChainLink(const FVector& InPosition, const double InLength, const FCompactPoseBoneIndex& InBoneIndex, const int32& InTransformIndex) : Position(InPosition) , Length(InLength) , BoneIndex(InBoneIndex.GetInt()) , TransformIndex(InTransformIndex) , DefaultDirToParent(FVector(-1.0, 0.0, 0.0))"
  },
  {
    "label": "FFABRIKChainLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFABRIKChainLink(const FVector& InPosition, const double InLength, const FCompactPoseBoneIndex& InBoneIndex, const int32& InTransformIndex, const FVector& InDefaultDirToParent) : Position(InPosition) , Length(InLength) , BoneIndex(InBoneIndex.GetInt()) , TransformIndex(InTransformIndex) , DefaultDirToParent(InDefaultDirToParent)"
  },
  {
    "label": "FFABRIKChainLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFABRIKChainLink(const FVector& InPosition, const double InLength, const int32 InBoneIndex, const int32 InTransformIndex) : Position(InPosition) , Length(InLength) , BoneIndex(InBoneIndex) , TransformIndex(InTransformIndex) , DefaultDirToParent(FVector(-1.0, 0.0, 0.0))"
  },
  {
    "label": "SolveFabrik()",
    "kind": "Method",
    "detail": "Function (} } ; namespace AnimationCore { bool)",
    "insertText": "SolveFabrik(TArray<FFABRIKChainLink>& InOutChain, const FVector& TargetPosition, double MaximumReach, double Precision, int32 MaxIteration)"
  }
]