[
  {
    "label": "CheckedMulFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedMulFastAsmOp"
  },
  {
    "label": "ClampedAddFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedAddFastAsmOp"
  },
  {
    "label": "ClampedSubFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedSubFastAsmOp"
  },
  {
    "label": "ClampedMulFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedMulFastAsmOp"
  },
  {
    "label": "CheckedAddFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedAddFastOp"
  },
  {
    "label": "CheckedSubFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedSubFastOp"
  },
  {
    "label": "CheckedMulFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckedMulFastOp"
  },
  {
    "label": "ClampedAddFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedAddFastOp"
  },
  {
    "label": "ClampedSubFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedSubFastOp"
  },
  {
    "label": "ClampedMulFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedMulFastOp"
  },
  {
    "label": "ClampedNegFastOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClampedNegFastOp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_NUMERICS_SAFE_MATH_CLANG_GCC_IMPL_H_ # define BASE_NUMERICS_SAFE_MATH_CLANG_GCC_IMPL_H_ # include<cassert> # include<limits> # include<type_traits> # include \" base / numerics / safe_conversions . h \" # if !)",
    "insertText": "defined(__native_client__) && (defined(__ARMEL__) || defined(__arch64__)) #include \"base/numerics/safe_math_arm_impl.h\" #define BASE_HAS_ASSEMBLER_SAFE_MATH (1) #else #define BASE_HAS_ASSEMBLER_SAFE_MATH (0)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (namespace internal { # if ! BASE_HAS_ASSEMBLER_SAFE_MATH template<T,U> struct CheckedMulFastAsmOp { const bool is_supported = false ; template<V> bool)",
    "insertText": "Do(T, U, V*)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct ClampedAddFastAsmOp { const bool is_supported = false ; template<V> V)",
    "insertText": "Do(T, U)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # undef BASE_HAS_ASSEMBLER_SAFE_MATH template<T,U> struct CheckedAddFastOp { const bool is_supported = true ; template<V>)",
    "insertText": "__attribute__((always_inline)) static constexpr bool Do(T x, U y, V* result)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct CheckedMulFastOp { # if)",
    "insertText": "defined(__clang__) static const bool is_supported = (IsTypeInRangeForNumericType<intptr_t, T>::value && IsTypeInRangeForNumericType<intptr_t, U>::value) || (IsTypeInRangeForNumericType<uintptr_t, T>::value && IsTypeInRangeForNumericType<uintptr_t, U>::value)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,U> struct ClampedAddFastOp { const bool is_supported = ClampedAddFastAsmOp<T,U>::is_supported ; template<V>)",
    "insertText": "__attribute__((always_inline)) static V Do(T x, U y)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct ClampedNegFastOp { const bool is_supported = std::is_signed<T>::value ;)",
    "insertText": "__attribute__((always_inline)) static T Do(T value)"
  },
  {
    "label": "__builtin_sub_overflow()",
    "kind": "Method",
    "detail": "Function (T result ; return !)",
    "insertText": "__builtin_sub_overflow(T(0), value, &result) ? result : std::numeric_limits<T>::max()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return ClampedSubFastOp<T,T>::template Do<)",
    "insertText": "T(T(0), value)"
  }
]