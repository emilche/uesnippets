[
  {
    "label": "ExponentialBiased",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExponentialBiased"
  },
  {
    "label": "GetSkipCount()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_PROFILING_INTERNAL_EXPONENTIAL_BIASED_H_ # define ABSL_PROFILING_INTERNAL_EXPONENTIAL_BIASED_H_ # include<stdint . h> # include \" absl / base / config . h \" # include \" absl / base / macros . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace profiling_internal { class ExponentialBiased { public : int kPrngNumBits = 4 8 ; int64_t)",
    "insertText": "GetSkipCount(int64_t mean)"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetStride(int64_t mean)"
  },
  {
    "label": "NextRandom()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "NextRandom(uint64_t rnd)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "prng_mod_mask()",
    "kind": "Method",
    "detail": "Function (const uint64_t prng_mult = uint64_t { 0 x5DEECE66D } ; const uint64_t prng_add = 0 xB ; const uint64_t prng_mod_power = 4 8 ; const uint64_t)",
    "insertText": "prng_mod_mask((~static_cast<uint64_t>(0)) << prng_mod_power)"
  }
]