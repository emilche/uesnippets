[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FPixelShaderUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPixelShaderUtils"
  },
  {
    "label": "FRasterizeToRectsVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRasterizeToRectsVS"
  },
  {
    "label": "FRectUV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRectUV"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CommonRenderResources . h \" # include \" GlobalRenderResources . h \" # include \" GlobalShader . h \" # include \" Math / IntPoint . h \" # include \" Math / IntRect . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" # include \" PipelineStateCache . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" RHIStaticStates . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderGraphEvent . h \" # include \" RenderGraphResources . h \" # include \" RenderGraphUtils . h \" # include \" RenderResource . h \" # include \" RenderUtils . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderParameterMacros . h \" # include \" ShaderParameterStruct . h \" # include \" ShaderPermutation . h \" # include \" Templates / UnrealTemplate . h \" class FPointerTableBase ; class FRDGBuilder ; struct FPixelShaderUtils { class FRasterizeToRectsVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FRasterizeToRectsVS, Global, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FRasterizeToRectsVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint4>, RectCoordBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<float4>, RectUVBuffer) SHADER_PARAMETER(FVector2f, InvViewSize) SHADER_PARAMETER(FVector2f, InvTextureSize) SHADER_PARAMETER(float, DownsampleFactor) SHADER_PARAMETER(uint32, NumRects) END_SHADER_PARAMETER_STRUCT() class FRectUV : SHADER_PERMUTATION_BOOL(\"RECT_UV\")"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FRectUV> ; bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "DrawFullscreenTriangle()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawFullscreenTriangle(FRHICommandList& RHICmdList, uint32 InstanceCount = 1)"
  },
  {
    "label": "DrawFullscreenQuad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFullscreenQuad(FRHICommandList& RHICmdList, uint32 InstanceCount = 1)"
  },
  {
    "label": "InitFullscreenPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFullscreenPipelineState(FRHICommandList& RHICmdList, const FGlobalShaderMap* GlobalShaderMap, const TShaderRef<FShader>& PixelShader, FGraphicsPipelineStateInitializer& GraphicsPSOInit)"
  },
  {
    "label": "InitFullscreenMultiviewportPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFullscreenMultiviewportPipelineState(FRHICommandList& RHICmdList, const FGlobalShaderMap* GlobalShaderMap, const TShaderRef<FShader>& PixelShader, FGraphicsPipelineStateInitializer& GraphicsPSOInit)"
  },
  {
    "label": "DrawFullscreenPixelShader()",
    "kind": "Method",
    "detail": "Function (template<TShaderClass> void)",
    "insertText": "DrawFullscreenPixelShader(FRHICommandList& RHICmdList, const FGlobalShaderMap* GlobalShaderMap, const TShaderRef<TShaderClass>& PixelShader, const typename TShaderClass::FParameters& Parameters, const FIntRect& Viewport, FRHIBlendState* BlendState = nullptr, FRHIRasterizerState* RasterizerState = nullptr, FRHIDepthStencilState* DepthStencilState = nullptr, uint32 StencilRef = 0)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetViewport((float)Viewport.Min.X, (float)Viewport.Min.Y, 0.0f, (float)Viewport.Max.X, (float)Viewport.Max.Y, 1.0f)"
  },
  {
    "label": "InitFullscreenPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateInitializer GraphicsPSOInit ;)",
    "insertText": "InitFullscreenPipelineState(RHICmdList, GlobalShaderMap, PixelShader, GraphicsPSOInit)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . BlendState = BlendState ? BlendState : GraphicsPSOInit . BlendState ; GraphicsPSOInit . RasterizerState = RasterizerState ? RasterizerState : GraphicsPSOInit . RasterizerState ; GraphicsPSOInit . DepthStencilState = DepthStencilState ? DepthStencilState : GraphicsPSOInit . DepthStencilState ;)",
    "insertText": "SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit, StencilRef)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), Parameters)"
  },
  {
    "label": "DrawFullscreenTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFullscreenTriangle(RHICmdList)"
  },
  {
    "label": "DrawFullscreenInstancedMultiViewportPixelShader()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "DrawFullscreenInstancedMultiViewportPixelShader(FRHICommandList& RHICmdList, const FGlobalShaderMap* GlobalShaderMap, const TShaderRef<TShaderClass>& PixelShader, const typename TShaderClass::FParameters& Parameters, TArrayView<FIntRect const> Viewports, FRHIBlendState* BlendState = nullptr, FRHIRasterizerState* RasterizerState = nullptr, FRHIDepthStencilState* DepthStencilState = nullptr, uint32 StencilRef = 0)"
  },
  {
    "label": "SetStereoViewport()",
    "kind": "Method",
    "detail": "Function ({ const FIntRect& LeftViewRect = Viewports [ 0 ] ; const int32 LeftMinX = LeftViewRect . Min . X ; const int32 LeftMaxX = LeftViewRect . Max . X ; const int32 LeftMaxY = LeftViewRect . Max . Y ; const FIntRect& RightViewRect = Viewports [ 1 ] ; const int32 RightMinX = RightViewRect . Min . X ; const int32 RightMaxX = RightViewRect . Max . X ; const int32 RightMaxY = RightViewRect . Max . Y ; RHICmdList .)",
    "insertText": "SetStereoViewport((float)LeftMinX, (float)RightMinX, 0.0f, 0.0f, 0.0f, (float)LeftMaxX, (float)RightMaxX, (float)LeftMaxY, (float)RightMaxY, 1.0f)"
  },
  {
    "label": "InitFullscreenMultiviewportPipelineState()",
    "kind": "Method",
    "detail": "Function (} FGraphicsPipelineStateInitializer GraphicsPSOInit ;)",
    "insertText": "InitFullscreenMultiviewportPipelineState(RHICmdList, GlobalShaderMap, PixelShader, GraphicsPSOInit)"
  },
  {
    "label": "DrawFullscreenTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFullscreenTriangle(RHICmdList, Viewports.Num())"
  },
  {
    "label": "AddFullscreenPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "AddFullscreenPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* GlobalShaderMap, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& PixelShader, typename TShaderClass::FParameters* Parameters, const FIntRect& Viewport, FRHIBlendState* BlendState = nullptr, FRHIRasterizerState* RasterizerState = nullptr, FRHIDepthStencilState* DepthStencilState = nullptr, uint32 StencilRef = 0, ERDGPassFlags AdditionalPassFlags = ERDGPassFlags::None)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(PixelShader, Parameters)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (ERDGPassFlags PassFlags = ERDGPassFlags::Raster ; PassFlags | = AdditionalPassFlags ; GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), Parameters, PassFlags, [Parameters, GlobalShaderMap, PixelShader, Viewport, BlendState, RasterizerState, DepthStencilState, StencilRef](FRDGAsyncTask, FRHICommandList& RHICmdList) { FPixelShaderUtils::DrawFullscreenPixelShader(RHICmdList, GlobalShaderMap, PixelShader, *Parameters, Viewport, BlendState, RasterizerState, DepthStencilState, StencilRef); })"
  },
  {
    "label": "AddFullscreenInstancedMultiViewportPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "AddFullscreenInstancedMultiViewportPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* GlobalShaderMap, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& PixelShader, typename TShaderClass::FParameters* Parameters, TArray<FIntRect>&& Viewports, FRHIBlendState* BlendState = nullptr, FRHIRasterizerState* RasterizerState = nullptr, FRHIDepthStencilState* DepthStencilState = nullptr, uint32 StencilRef = 0, ERDGPassFlags AdditionalPassFlags = ERDGPassFlags::None)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (ERDGPassFlags PassFlags = ERDGPassFlags::Raster ; PassFlags | = AdditionalPassFlags ; GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), Parameters, PassFlags, [Parameters, GlobalShaderMap, PixelShader, Viewports, BlendState, RasterizerState, DepthStencilState, StencilRef](FRDGAsyncTask, FRHICommandList& RHICmdList) { FPixelShaderUtils::DrawFullscreenInstancedMultiViewportPixelShader(RHICmdList, GlobalShaderMap, PixelShader, *Parameters, Viewports, BlendState, RasterizerState, DepthStencilState, StencilRef); })"
  },
  {
    "label": "AddRasterizeToRectsPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRasterizeToRectsPass(GraphBuilder, GlobalShaderMap, PassName, PixelShader, Parameters, ViewportSize, RectCoordBufferSRV, NumRects, BlendState, RasterizerState, DepthStencilState, StencilRef, TextureSize, RectUVBufferSRV, DownsampleFactor, bSkipRenderPass ? ERDGPassFlags::SkipRenderPass : ERDGPassFlags::None)"
  },
  {
    "label": "AddRasterizeToRectsPass()",
    "kind": "Method",
    "detail": "Function (} template<TPixelShaderClass,TPassParameters> void)",
    "insertText": "AddRasterizeToRectsPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* GlobalShaderMap, FRDGEventName&& PassName, const TShaderRef<TPixelShaderClass>& PixelShader, TPassParameters* Parameters, FIntPoint ViewportSize, FRDGBufferSRVRef RectCoordBufferSRV, uint32 NumRects, FRHIBlendState* BlendState = nullptr, FRHIRasterizerState* RasterizerState = nullptr, FRHIDepthStencilState* DepthStencilState = nullptr, uint32 StencilRef = 0, FIntPoint TextureSize = FIntPoint(1, 1), FRDGBufferSRVRef RectUVBufferSRV = nullptr, uint32 DownsampleFactor = 1, ERDGPassFlags AdditionalPassFlags = ERDGPassFlags::None)"
  },
  {
    "label": "FRectUV()",
    "kind": "Method",
    "detail": "Function (FRasterizeToRectsVS::FPermutationDomain PermutationVector ; PermutationVector . Set<)",
    "insertText": "FRectUV(RectUVBufferSRV != nullptr)"
  },
  {
    "label": "FRasterizeToRectsVS()",
    "kind": "Method",
    "detail": "Function (auto VertexShader = GlobalShaderMap -> GetShader<)",
    "insertText": "FRasterizeToRectsVS(PermutationVector)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Parameters -> VS . InvViewSize =)",
    "insertText": "FVector2f(1.0f / ViewportSize.X, 1.0f / ViewportSize.Y)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Parameters -> VS . InvTextureSize =)",
    "insertText": "FVector2f(1.0f / TextureSize.X, 1.0f / TextureSize.Y)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (Parameters -> VS . DownsampleFactor = 1 . 0 f / DownsampleFactor ; Parameters -> VS . RectCoordBuffer = RectCoordBufferSRV ; Parameters -> VS . RectUVBuffer = RectUVBufferSRV ; Parameters -> VS . NumRects = NumRects ;)",
    "insertText": "ClearUnusedGraphResources(PixelShader, &Parameters->PS)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (ERDGPassFlags PassFlags = ERDGPassFlags::Raster ; PassFlags | = AdditionalPassFlags ; const bool bSkipRenderPass =)",
    "insertText": "EnumHasAnyFlags(PassFlags, ERDGPassFlags::SkipRenderPass)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), Parameters, PassFlags, [Parameters, GlobalShaderMap, VertexShader, PixelShader, ViewportSize, BlendState, RasterizerState, DepthStencilState, StencilRef, bSkipRenderPass](FRDGAsyncTask, FRHICommandList& RHICmdList) { if (bSkipRenderPass) { FRHIRenderPassInfo RPInfo; RPInfo.ResolveRect.X1 = 0; RPInfo.ResolveRect.Y1 = 0; RPInfo.ResolveRect.X2 = ViewportSize.X; RPInfo.ResolveRect.Y2 = ViewportSize.Y; RHICmdList.BeginRenderPass(RPInfo, TEXT(\"RasterizeToRects\")); } FGraphicsPipelineStateInitializer GraphicsPSOInit; RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit); RHICmdList.SetViewport(0.0f, 0.0f, 0.0f, (float)ViewportSize.X, (float)ViewportSize.Y, 1.0f); GraphicsPSOInit.BlendState = BlendState ? BlendState : TStaticBlendState<>::GetRHI(); GraphicsPSOInit.RasterizerState = RasterizerState ? RasterizerState : TStaticRasterizerState<>::GetRHI(); GraphicsPSOInit.DepthStencilState = DepthStencilState ? DepthStencilState : TStaticDepthStencilState<false, CF_Always>::GetRHI(); GraphicsPSOInit.PrimitiveType = GRHISupportsRectTopology ? PT_RectList : PT_TriangleList; GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = GTileVertexDeclaration.VertexDeclarationRHI; GraphicsPSOInit.BoundShaderState.VertexShaderRHI = VertexShader.GetVertexShader(); GraphicsPSOInit.BoundShaderState.PixelShaderRHI = PixelShader.GetPixelShader(); SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit, StencilRef); SetShaderParameters(RHICmdList, VertexShader, VertexShader.GetVertexShader(), Parameters->VS); SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), Parameters->PS); const uint32 NumPrimitives = GRHISupportsRectTopology ? 1 : 2; const uint32 NumInstances = Parameters->VS.NumRects; RHICmdList.DrawPrimitive(0, NumPrimitives, NumInstances); if (bSkipRenderPass) { RHICmdList.EndRenderPass(); } })"
  }
]