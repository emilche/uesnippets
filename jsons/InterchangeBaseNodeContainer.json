[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UInterchangeBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBaseNode"
  },
  {
    "label": "UInterchangeFactoryBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeFactoryBaseNode"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "TObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectPtr"
  },
  {
    "label": "UInterchangeBaseNodeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBaseNodeContainer"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / FileHelper . h \" # include \" Nodes / InterchangeFactoryBaseNode . h \" # include \" Templates / Casts . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" InterchangeBaseNodeContainer . generated . h \" class FArchive ; class UClass ; class UInterchangeBaseNode ; class UInterchangeFactoryBaseNode ; struct FFrame ; template<T> struct TObjectPtr ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERCHANGECORE_API UInterchangeBaseNodeContainer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Reset()"
  },
  {
    "label": "IterateNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateNodes(TFunctionRef<void(const FString&, UInterchangeBaseNode*)> IterationLambda)"
  },
  {
    "label": "IterateNodesOfType()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "IterateNodesOfType(TFunctionRef<void(const FString&, T*)> IterationLambda)"
  },
  {
    "label": "IterationLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterationLambda(NodeKeyValue.Key, Node)"
  },
  {
    "label": "IterateNodeChildren()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "IterateNodeChildren(const FString& NodeUniqueID, TFunctionRef<void(const UInterchangeBaseNode*)> IterationLambda)"
  },
  {
    "label": "IterationLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterationLambda(Node)"
  },
  {
    "label": "GetNodeChildrenUids()",
    "kind": "Method",
    "detail": "Function (const TArray<FString> ChildrenIds =)",
    "insertText": "GetNodeChildrenUids(NodeUniqueID)"
  },
  {
    "label": "IterateNodeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateNodeChildren(ChildrenIds[ChildIndex], IterationLambda)"
  },
  {
    "label": "BreakableIterateNodeChildren()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "BreakableIterateNodeChildren(const FString& NodeUniqueID, TFunctionRef<bool(const UInterchangeBaseNode*)> IterationLambda)"
  },
  {
    "label": "BreakableIterateNodesOfType()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "BreakableIterateNodesOfType(TFunctionRef<bool(const FString&, T*)> IterationLambda)"
  },
  {
    "label": "GetCachedNodeChildrenUids()",
    "kind": "Method",
    "detail": "Function (TArray<FString>*)",
    "insertText": "GetCachedNodeChildrenUids(const FString& NodeUniqueID)"
  },
  {
    "label": "GetNodeChildren()",
    "kind": "Method",
    "detail": "Function (const UInterchangeBaseNode*)",
    "insertText": "GetNodeChildren(const FString& NodeUniqueID, int32 ChildIndex)"
  },
  {
    "label": "SerializeNodeContainerData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeNodeContainerData(FArchive& Ar)"
  },
  {
    "label": "GetNodeChildrenInternal()",
    "kind": "Method",
    "detail": "Function (private : UInterchangeBaseNode*)",
    "insertText": "GetNodeChildrenInternal(const FString& NodeUniqueID, int32 ChildIndex)"
  }
]