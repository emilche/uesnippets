[
  {
    "label": "FClusterKMeans",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterKMeans"
  },
  {
    "label": "ComputeClusters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / RandomStream . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" MatrixTypes . h \" # include \" Spatial / PriorityOrderPoints . h \" namespace UE { namespace Geometry { using namespace UE::Math ; struct FClusterKMeans { int32 MaxIterations = 5 0 0 ; int32 RandomSeed = 0 ; TArray<int32> ClusterIDs ; TArray<int32> ClusterSizes ; template<TVectorType = FVector> int32)",
    "insertText": "ComputeClusters(TArrayView<const TVectorType> PointsToCluster, int32 NumClusters, TArrayView<const TVectorType> InitialCenters = TArrayView<const TVectorType>(), TArray<TVectorType>* OutClusterCenters = nullptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (UseCenters = OutClusterCenters ; UseCenters ->)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InitialCenters.IsEmpty())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TArray<int32> Ordering ; const int32 OrderingNum = PointsToCluster .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Ordering .)",
    "insertText": "SetNumUninitialized(OrderingNum)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Ordering [ Idx ] = Idx ; } NumClusters =)",
    "insertText": "Min(PointsToCluster.Num(), NumClusters)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (UseCenters ->)",
    "insertText": "Reserve(NumClusters)"
  },
  {
    "label": "RandomStream()",
    "kind": "Method",
    "detail": "Function (FRandomStream)",
    "insertText": "RandomStream(RandomSeed)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Ordering[Idx], Ordering[Idx + RandomStream.RandHelper(OrderingNum - Idx)])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UseCenters ->)",
    "insertText": "Add(PointsToCluster[Ordering[Idx]])"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } else { UseCenters ->)",
    "insertText": "Append(InitialCenters)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ClusterIDs .)",
    "insertText": "Init(-1, PointsToCluster.Num())"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (ClusterSizes .)",
    "insertText": "SetNumZeroed(NumClusters)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (TArray<int32> ClusterIDRemap ; int32 UseMaxIterations =)",
    "insertText": "Max(1, MaxIterations)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bClustersChanged = Iterations = = 0 ;)",
    "insertText": "for(int32 PointIdx = 0; PointIdx < PointsToCluster.Num(); ++PointIdx)"
  },
  {
    "label": "ClosestDistSq()",
    "kind": "Method",
    "detail": "Function (const TVectorType& Point = PointsToCluster [ PointIdx ] ; double)",
    "insertText": "ClosestDistSq(double)DistanceSquared(Point, (*UseCenters)[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ClosestCenter = 0 ;)",
    "insertText": "for(int32 CenterIdx = 1; CenterIdx < UseCenters->Num(); ++CenterIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ClosestDistSq = DistSq ; ClosestCenter = CenterIdx ; } } ClusterSizes [ ClosestCenter ] + + ;)",
    "insertText": "if(Iterations > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 OldClusterID = ClusterIDs [ PointIdx ] ; ClusterSizes [ OldClusterID ] - - ;)",
    "insertText": "if(OldClusterID != ClosestCenter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bClustersChanged = true ; } } ClusterIDs [ PointIdx ] = ClosestCenter ; NextCenters [ ClosestCenter ] + = Point ; })",
    "insertText": "if(!bClustersChanged)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } bool bDeletedClusters = false ;)",
    "insertText": "for(int32 ClusterIdx = 0; ClusterIdx < UseCenters->Num(); ++ClusterIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextCenters [ ClusterIdx ] = TVectorType::ZeroVector ; } else {)",
    "insertText": "if(!bDeletedClusters)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ClusterIDRemap .)",
    "insertText": "SetNumUninitialized(UseCenters->Num(), EAllowShrinking::No)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (ClusterSizes .)",
    "insertText": "RemoveAtSwap(ClusterIdx, EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bDeletedClusters)"
  },
  {
    "label": "GetUniformSpacedInitialCenters()",
    "kind": "Method",
    "detail": "Function (} template<TVectorType = FVector> void)",
    "insertText": "GetUniformSpacedInitialCenters(TArrayView<const TVectorType> PointsToCluster, int32 NumClusters, TArray<TVectorType>& OutCenters)"
  },
  {
    "label": "ComputeUniformSpaced()",
    "kind": "Method",
    "detail": "Function (FPriorityOrderPoints OrderPoints ; OrderPoints .)",
    "insertText": "ComputeUniformSpaced(PointsToCluster, TArrayView<const float>(), NumClusters)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 NumOut =)",
    "insertText": "Min(NumClusters, OrderPoints.Order.Num())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutCenters .)",
    "insertText": "Reset(NumOut)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCenters .)",
    "insertText": "Add(PointsToCluster[OrderPoints.Order[OrderIdx]])"
  },
  {
    "label": "GetClusters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetClusters(TArray<TArray<int32>>& OutClusters)"
  }
]