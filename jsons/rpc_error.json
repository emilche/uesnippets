[
  {
    "label": "rpc_error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rpc_error"
  },
  {
    "label": "client",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "client"
  },
  {
    "label": "timeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "timeout"
  },
  {
    "label": "get_function_name()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef RPC_ERROR_H_NEOOSTKY # define RPC_ERROR_H_NEOOSTKY # include<exception> # include \" rpc / msgpack . hpp \" namespace rpc { class rpc_error : public std::runtime_error { public : std::string)",
    "insertText": "get_function_name()"
  },
  {
    "label": "get_error()",
    "kind": "Method",
    "detail": "Function (RPCLIB_MSGPACK::object_handle&)",
    "insertText": "get_error()"
  },
  {
    "label": "rpc_error()",
    "kind": "Method",
    "detail": "Function (private : class client ;)",
    "insertText": "rpc_error(std::string const &what_arg, std::string const &function_name, std::shared_ptr<RPCLIB_MSGPACK::object_handle> o)"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (private : std::string func_name_ ; std::shared_ptr<RPCLIB_MSGPACK::object_handle> ob_h_ ; } ; class timeout : public std::runtime_error { public : const char*)",
    "insertText": "what()"
  },
  {
    "label": "timeout()",
    "kind": "Method",
    "detail": "Function (private : class client ;)",
    "insertText": "timeout(std::string const &what_arg)"
  }
]