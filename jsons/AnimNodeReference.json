[
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "IAnimClassInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimClassInterface"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimNodeReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNodeReference"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineLogs . h \" # include \" AnimNodeReference . generated . h \" struct FAnimNode_Base ; class IAnimClassInterface ; class UAnimInstance ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Succeeded = 1,Failed = 0,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FAnimNodeReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNodeReference()"
  },
  {
    "label": "FAnimNodeReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNodeReference(UAnimInstance* InAnimInstance, FAnimNode_Base& InNode)"
  },
  {
    "label": "FAnimNodeReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNodeReference(UAnimInstance* InAnimInstance, int32 InIndex)"
  },
  {
    "label": "GetAnimNodePtr()",
    "kind": "Method",
    "detail": "Function (template<NodeType> NodeType*)",
    "insertText": "GetAnimNodePtr()"
  },
  {
    "label": "GetAnimNode()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<NodeType> NodeType&)",
    "insertText": "GetAnimNode()"
  },
  {
    "label": "CallAnimNodeFunction()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "CallAnimNodeFunction(const TCHAR* InFunctionNameForErrorReporting, TFunctionRef<void(NodeType&)> InFunction)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction(*NodePtr)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogAnimation, Warning, TEXT(\"%s called on an invalid context or with an invalid type\"), InFunctionNameForErrorReporting)"
  },
  {
    "label": "ConvertToType()",
    "kind": "Method",
    "detail": "Function (} } template<OtherContextType> OtherContextType)",
    "insertText": "ConvertToType(const FAnimNodeReference& InReference, EAnimNodeReferenceConversionResult& OutResult)"
  },
  {
    "label": "OtherContextType()",
    "kind": "Method",
    "detail": "Function (OutResult = EAnimNodeReferenceConversionResult::Succeeded ; OtherContextType Context ; Context . AnimNode = InReference . AnimNode ; Context . AnimNodeStruct = InReference . AnimNodeStruct ; return Context ; } OutResult = EAnimNodeReferenceConversionResult::Failed ; return)",
    "insertText": "OtherContextType()"
  }
]