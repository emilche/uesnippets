[
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "FRHIGPUBufferReadback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGPUBufferReadback"
  },
  {
    "label": "FRHIGPUTextureReadback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGPUTextureReadback"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "FTextureRenderTargetBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureRenderTargetBinding"
  },
  {
    "label": "FRDGTextureMSAA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureMSAA"
  },
  {
    "label": "FRDGDrawTextureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGDrawTextureInfo"
  },
  {
    "label": "FRDGTextureClearInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureClearInfo"
  },
  {
    "label": "FRDGUploadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGUploadData"
  },
  {
    "label": "FRDGExternalAccessQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGExternalAccessQueue"
  },
  {
    "label": "FResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResource"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / Color . h \" # include \" Math / IntPoint . h \" # include \" Math / IntRect . h \" # include \" Math / IntVector . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" RenderGraphAllocator . h \" # include \" RenderGraphBuilder . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderGraphEvent . h \" # include \" RenderGraphResources . h \" # include \" RendererInterface . h \" # include \" Shader . h \" # include \" ShaderParameterMacros . h \" # include \" ShaderParameterStruct . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / Invoke . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" PipelineStateCache . h \" # include<initializer_list> class FGlobalShaderMap ; class FRHIGPUBufferReadback ; class FRHIGPUTextureReadback ; class FShaderParametersMetadata ; using FRDGDispatchLateParamCallback = TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "HasBeenProduced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBeenProduced(FRDGViewableResource* Resource)"
  },
  {
    "label": "GetIfProduced()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "GetIfProduced(FRDGTextureRef Texture, FRDGTextureRef FallbackTexture = nullptr)"
  },
  {
    "label": "GetIfProduced()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "GetIfProduced(FRDGBufferRef Buffer, FRDGBufferRef FallbackBuffer = nullptr)"
  },
  {
    "label": "GetLoadActionIfProduced()",
    "kind": "Method",
    "detail": "Function (} ERenderTargetLoadAction)",
    "insertText": "GetLoadActionIfProduced(FRDGTextureRef Texture, ERenderTargetLoadAction ActionIfNotProduced)"
  },
  {
    "label": "GetLoadBindingIfProduced()",
    "kind": "Method",
    "detail": "Function (} FRenderTargetBinding)",
    "insertText": "GetLoadBindingIfProduced(FRDGTextureRef Texture, ERenderTargetLoadAction ActionIfNotProduced)"
  },
  {
    "label": "TryGetRHI()",
    "kind": "Method",
    "detail": "Function (} FRHITexture*)",
    "insertText": "TryGetRHI(FRDGTextureRef Texture)"
  },
  {
    "label": "TryGetRHI()",
    "kind": "Method",
    "detail": "Function (} FRHIBuffer*)",
    "insertText": "TryGetRHI(FRDGBuffer* Buffer)"
  },
  {
    "label": "TryGetRHI()",
    "kind": "Method",
    "detail": "Function (} FRHIBuffer*)",
    "insertText": "TryGetRHI(FRDGPooledBuffer* Buffer)"
  },
  {
    "label": "TryGetSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "TryGetSRV(FRDGPooledBuffer* Buffer)"
  },
  {
    "label": "TryGetSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "TryGetSize(const FRDGBuffer* Buffer)"
  },
  {
    "label": "TryGetSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "TryGetSize(const FRDGPooledBuffer* Buffer)"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRegistered(FRDGBuilder& GraphBuilder, const TRefCountPtr<IPooledRenderTarget>& RenderTarget)"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRegistered(FRDGBuilder& GraphBuilder, const TRefCountPtr<FRDGPooledBuffer>& Buffer)"
  },
  {
    "label": "GetRenderTargetBindings()",
    "kind": "Method",
    "detail": "Function (} FRenderTargetBindingSlots)",
    "insertText": "GetRenderTargetBindings(ERenderTargetLoadAction ColorLoadAction, TArrayView<FRDGTextureRef> ColorTextures)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FRenderTargetBindingSlots BindingSlots ;)",
    "insertText": "for(int32 Index = 0, Count = ColorTextures.Num(); Index < Count; ++Index)"
  },
  {
    "label": "FRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (BindingSlots [ Index ] =)",
    "insertText": "FRenderTargetBinding(ColorTextures[Index], ColorLoadAction)"
  },
  {
    "label": "FTextureRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (} return BindingSlots ; } struct FTextureRenderTargetBinding { FRDGTextureRef Texture ; int16 ArraySlice ; bool bNeverClear ;)",
    "insertText": "FTextureRenderTargetBinding() : Texture(nullptr) , ArraySlice(-1) , bNeverClear(false)"
  },
  {
    "label": "FTextureRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextureRenderTargetBinding(FRDGTextureRef InTexture, bool bInNeverClear) : Texture(InTexture) , ArraySlice(-1) , bNeverClear(bInNeverClear)"
  },
  {
    "label": "FTextureRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextureRenderTargetBinding(FRDGTextureRef InTexture, int16 InArraySlice = -1, bool bInNeverClear = false) : Texture(InTexture) , ArraySlice(InArraySlice) , bNeverClear(bInNeverClear)"
  },
  {
    "label": "GetRenderTargetBindings()",
    "kind": "Method",
    "detail": "Function (} } ; FRenderTargetBindingSlots)",
    "insertText": "GetRenderTargetBindings(ERenderTargetLoadAction ColorLoadAction, TArrayView<FTextureRenderTargetBinding> ColorTextures)"
  },
  {
    "label": "FRenderTargetBinding()",
    "kind": "Method",
    "detail": "Function (BindingSlots [ Index ] =)",
    "insertText": "FRenderTargetBinding(ColorTextures[Index].Texture, ColorLoadAction, 0, ColorTextures[Index].ArraySlice)"
  },
  {
    "label": "SetLoadAction()",
    "kind": "Method",
    "detail": "Function (BindingSlots [ Index ] .)",
    "insertText": "SetLoadAction(ERenderTargetLoadAction::ELoad)"
  },
  {
    "label": "ClearUnusedGraphResourcesImpl()",
    "kind": "Method",
    "detail": "Function (} } return BindingSlots ; } void)",
    "insertText": "ClearUnusedGraphResourcesImpl(const FShaderParameterBindings& ShaderBindings, const FShaderParametersMetadata* ParametersMetadata, void* InoutParameters, std::initializer_list<FRDGResourceRef> ExcludeList)"
  },
  {
    "label": "ClearUnusedGraphResourcesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResourcesImpl(TArrayView<const FShaderParameterBindings*> ShaderBindingsList, const FShaderParametersMetadata* ParametersMetadata, void* InoutParameters, std::initializer_list<FRDGResourceRef> ExcludeList)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (template<TShaderClass> void)",
    "insertText": "ClearUnusedGraphResources(const TShaderRef<TShaderClass>& Shader, const FShaderParametersMetadata* ParametersMetadata, typename TShaderClass::FParameters* InoutParameters, std::initializer_list<FRDGResourceRef> ExcludeList = {})"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, ParametersMetadata, InoutParameters)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "ClearUnusedGraphResources(const TShaderRef<TShaderClass>& Shader, typename TShaderClass::FParameters* InoutParameters, std::initializer_list<FRDGResourceRef> ExcludeList = {})"
  },
  {
    "label": "GetStructMetadata()",
    "kind": "Method",
    "detail": "Function (const FShaderParametersMetadata* ParametersMetadata = TShaderClass::FParameters::)",
    "insertText": "GetStructMetadata()"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClassA,TShaderClassB,TPassParameterStruct> void)",
    "insertText": "ClearUnusedGraphResources(const TShaderRef<TShaderClassA>& ShaderA, const TShaderRef<TShaderClassB>& ShaderB, TPassParameterStruct* InoutParameters, std::initializer_list<FRDGResourceRef> ExcludeList = {})"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(ShaderA, ParametersMetadata, InoutParameters)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(ShaderB, ParametersMetadata, InoutParameters)"
  },
  {
    "label": "ClearUnusedGraphResourcesImpl()",
    "kind": "Method",
    "detail": "Function (const FShaderParameterBindings* ShaderBindings [ ] = {& ShaderA -> Bindings,& ShaderB -> Bindings } ; return)",
    "insertText": "ClearUnusedGraphResourcesImpl(ShaderBindings, ParametersMetadata, InoutParameters, ExcludeList)"
  },
  {
    "label": "RegisterExternalTextureWithFallback()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "RegisterExternalTextureWithFallback(FRDGBuilder& GraphBuilder, const TRefCountPtr<IPooledRenderTarget>& ExternalPooledTexture, const TRefCountPtr<IPooledRenderTarget>& FallbackPooledTexture)"
  },
  {
    "label": "TryRegisterExternalTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "TryRegisterExternalTexture(FRDGBuilder& GraphBuilder, const TRefCountPtr<IPooledRenderTarget>& ExternalPooledTexture, ERDGTextureFlags Flags = ERDGTextureFlags::None)"
  },
  {
    "label": "TryRegisterExternalBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "TryRegisterExternalBuffer(FRDGBuilder& GraphBuilder, const TRefCountPtr<FRDGPooledBuffer>& ExternalPooledBuffer, ERDGBufferFlags Flags = ERDGBufferFlags::None)"
  },
  {
    "label": "RegisterExternalTexture()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "RegisterExternalTexture(FRDGBuilder& GraphBuilder, FRHITexture* Texture, const TCHAR* NameIfUnregistered, ERDGTextureFlags Flags)"
  },
  {
    "label": "RegisterExternalTexture()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "RegisterExternalTexture(FRDGBuilder& GraphBuilder, FRHITexture* Texture, const TCHAR* NameIfUnregistered)"
  },
  {
    "label": "FRDGTextureMSAA()",
    "kind": "Method",
    "detail": "Function (} struct FRDGTextureMSAA {)",
    "insertText": "FRDGTextureMSAA()"
  },
  {
    "label": "FRDGTextureMSAA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGTextureMSAA(FRDGTextureRef InTarget, FRDGTextureRef InResolve) : Target(InTarget) , Resolve(InResolve)"
  },
  {
    "label": "FRDGTextureMSAA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRDGTextureMSAA(FRDGTextureRef InTexture) : Target(InTexture) , Resolve(InTexture)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CreateTextureMSAA()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef Target = nullptr ; FRDGTextureRef Resolve = nullptr ; } ; FRDGTextureMSAA)",
    "insertText": "CreateTextureMSAA(FRDGBuilder& GraphBuilder, FRDGTextureDesc Desc, const TCHAR* NameMultisampled, const TCHAR* NameResolved, ETextureCreateFlags ResolveFlagsToAdd = TexCreate_None)"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (} namespace FComputeShaderUtils { int32 kGolden2DGroupSize = 8 ; FIntVector)",
    "insertText": "GetGroupCount(const int32 ThreadCount, const int32 GroupSize)"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetGroupCount(const FIntPoint& ThreadCount, const FIntPoint& GroupSize)"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetGroupCount(const FIntPoint& ThreadCount, const int32 GroupSize)"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetGroupCount(const FIntVector& ThreadCount, const FIntVector& GroupSize)"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetGroupCount(const FIntVector& ThreadCount, const int32 GroupSize)"
  },
  {
    "label": "GetGroupCountWrapped()",
    "kind": "Method",
    "detail": "Function (} int32 WrappedGroupStride = 1 2 8 ; FIntVector)",
    "insertText": "GetGroupCountWrapped(const int32 TargetGroupCount)"
  },
  {
    "label": "GroupCount()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GroupCount(TargetGroupCount, 1, 1)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (GroupCount . Y =)",
    "insertText": "DivideAndRoundUp(GroupCount.X, WrappedGroupStride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GroupCount . X = WrappedGroupStride ; })",
    "insertText": "if(GroupCount.Y > GRHIMaxDispatchThreadGroupsPerDimension.Y)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (GroupCount . Z =)",
    "insertText": "DivideAndRoundUp(GroupCount.Y, WrappedGroupStride)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (GroupCount . Y = WrappedGroupStride ; })",
    "insertText": "check(TargetGroupCount <= GroupCount.X * GroupCount.Y * GroupCount.Z)"
  },
  {
    "label": "ValidateGroupCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateGroupCount(const FIntVector& GroupCount)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateIndirectArgsBuffer(uint32 IndirectArgsBufferSize, uint32 IndirectArgOffset)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 IndirectArgsSize =)",
    "insertText": "sizeof(FRHIDispatchIndirectParametersNoPadding)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_DISPATCH_INDIRECT_ARGUMENT_BOUNDARY_SIZE ! = 0)",
    "insertText": "checkf(IndirectArgOffset / PLATFORM_DISPATCH_INDIRECT_ARGUMENT_BOUNDARY_SIZE == (IndirectArgOffset + IndirectArgsSize - 1) / PLATFORM_DISPATCH_INDIRECT_ARGUMENT_BOUNDARY_SIZE, TEXT(\"Compute indirect dispatch arguments cannot cross %d byte boundary.\"), PLATFORM_DISPATCH_INDIRECT_ARGUMENT_BOUNDARY_SIZE)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "ValidateIndirectArgsBuffer(const FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgOffset)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(IndirectArgsBuffer->GetSize(), IndirectArgOffset)"
  },
  {
    "label": "PrepareDispatch()",
    "kind": "Method",
    "detail": "Function (} namespace Private { template<TShaderClass> void)",
    "insertText": "PrepareDispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const FShaderParametersMetadata* ParametersMetadata, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "GetComputeShader()",
    "kind": "Method",
    "detail": "Function (FRHIComputeShader* ShaderRHI = ComputeShader .)",
    "insertText": "GetComputeShader()"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(RHICmdList, ShaderRHI)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RHICmdList, ComputeShader, ShaderRHI, ParametersMetadata, Parameters)"
  },
  {
    "label": "PrepareDispatch()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "PrepareDispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "PrepareDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDispatch(RHICmdList, ComputeShader, ParametersMetadata, Parameters)"
  },
  {
    "label": "AfterDispatch()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "AfterDispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader)"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetShaderUAVs(RHICmdList, ComputeShader, ComputeShader.GetComputeShader())"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (} } template<TShaderClass> void)",
    "insertText": "Dispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const FShaderParametersMetadata* ParametersMetadata, const typename TShaderClass::FParameters& Parameters, FIntVector GroupCount)"
  },
  {
    "label": "ValidateGroupCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateGroupCount(GroupCount)"
  },
  {
    "label": "DispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchComputeShader(GroupCount.X, GroupCount.Y, GroupCount.Z)"
  },
  {
    "label": "AfterDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterDispatch(RHICmdList, ComputeShader)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "Dispatch(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const typename TShaderClass::FParameters& Parameters, FIntVector GroupCount)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatch(RHICmdList, ComputeShader, ParametersMetadata, Parameters, GroupCount)"
  },
  {
    "label": "DispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "DispatchIndirect(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const typename TShaderClass::FParameters& Parameters, FRHIBuffer* IndirectArgsBuffer, uint32 IndirectArgOffset)"
  },
  {
    "label": "PrepareDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDispatch(RHICmdList, ComputeShader, Parameters)"
  },
  {
    "label": "DispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchIndirectComputeShader(IndirectArgsBuffer, IndirectArgOffset)"
  },
  {
    "label": "DispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "DispatchIndirect(FRHIComputeCommandList& RHICmdList, const TShaderRef<TShaderClass>& ComputeShader, const typename TShaderClass::FParameters& Parameters, FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgOffset)"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(IndirectArgsBuffer, IndirectArgOffset)"
  },
  {
    "label": "DispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchIndirectComputeShader(IndirectArgsBuffer->GetIndirectRHICallBuffer(), IndirectArgOffset)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, ERDGPassFlags PassFlags, const TShaderRef<TShaderClass>& ComputeShader, const FShaderParametersMetadata* ParametersMetadata, typename TShaderClass::FParameters* Parameters, FIntVector GroupCount)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(ComputeShader, ParametersMetadata, Parameters)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, ERDGPassFlags PassFlags, const TShaderRef<TShaderClass>& ComputeShader, const FShaderParametersMetadata* ParametersMetadata, typename TShaderClass::FParameters* Parameters, FRDGDispatchGroupCountCallback&& GroupCountCallback)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, ERDGPassFlags PassFlags, const TShaderRef<TShaderClass>& ComputeShader, typename TShaderClass::FParameters* Parameters, FIntVector GroupCount)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& ComputeShader, typename TShaderClass::FParameters* Parameters, FIntVector GroupCount)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& ComputeShader, typename TShaderClass::FParameters* Parameters, FRDGDispatchGroupCountCallback&& GroupCountCallback)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, ERDGPassFlags PassFlags, const TShaderRef<TShaderClass>& ComputeShader, typename TShaderClass::FParameters* Parameters, FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgsOffset, FRDGDispatchLateParamCallback&& DispatchLateParamCallback = FRDGDispatchLateParamCallback())"
  },
  {
    "label": "ValidateIndirectArgsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateIndirectArgsBuffer(IndirectArgsBuffer, IndirectArgsOffset)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(ComputeShader, Parameters, { IndirectArgsBuffer })"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> FRDGPassRef)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& ComputeShader, typename TShaderClass::FParameters* Parameters, FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgsOffset, FRDGDispatchLateParamCallback&& DispatchLateParamCallback = FRDGDispatchLateParamCallback())"
  },
  {
    "label": "AddIndirectArgsSetupCsPass1D()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "AddIndirectArgsSetupCsPass1D(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, FRDGBufferRef& InputCountBuffer, const TCHAR* OutputBufferName, uint32 Divisor, uint32 InputCountOffset = 0U, uint32 Multiplier = 1U)"
  },
  {
    "label": "AddCopyTexturePass()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddCopyTexturePass(FRDGBuilder& GraphBuilder, FRDGTextureRef InputTexture, FRDGTextureRef OutputTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "AddCopyTexturePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCopyTexturePass(FRDGBuilder& GraphBuilder, FRDGTextureRef InputTexture, FRDGTextureRef OutputTexture, FIntPoint InputPosition = FIntPoint::ZeroValue, FIntPoint OutputPosition = FIntPoint::ZeroValue, FIntPoint Size = FIntPoint::ZeroValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHICopyTextureInfo CopyInfo ; CopyInfo . SourcePosition . X = InputPosition . X ; CopyInfo . SourcePosition . Y = InputPosition . Y ; CopyInfo . DestPosition . X = OutputPosition . X ; CopyInfo . DestPosition . Y = OutputPosition . Y ;)",
    "insertText": "if(Size != FIntPoint::ZeroValue)"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (CopyInfo . Size =)",
    "insertText": "FIntVector(Size.X, Size.Y, 1)"
  },
  {
    "label": "AddCopyTexturePass()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AddCopyTexturePass(GraphBuilder, InputTexture, OutputTexture, CopyInfo)"
  },
  {
    "label": "AddDrawTexturePass()",
    "kind": "Method",
    "detail": "Function (} struct FRDGDrawTextureInfo { FIntPoint Size = FIntPoint::ZeroValue ; FIntPoint SourcePosition = FIntPoint::ZeroValue ; FIntPoint DestPosition = FIntPoint::ZeroValue ; uint32 SourceSliceIndex = 0 ; uint32 DestSliceIndex = 0 ; uint32 NumSlices = 1 ; uint32 SourceMipIndex = 0 ; uint32 DestMipIndex = 0 ; uint32 NumMips = 1 ; } ; void)",
    "insertText": "AddDrawTexturePass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* ShaderMap, FRDGTextureRef InputTexture, FRDGTextureRef OutputTexture, const FRDGDrawTextureInfo& DrawInfo)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGBufferUAVRef BufferUAV, uint32 Value, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVFloatPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVFloatPass(FRDGBuilder& GraphBuilder, FRDGBufferUAVRef BufferUAV, float Value, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, float ClearValue, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, uint32 ClearValue, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const FIntPoint& ClearValue, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const FVector2D& ClearValue, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const FVector& ClearValue, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const FUintVector4& ClearValues, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const FVector4& ClearValues, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const float(&ClearValues)[4], ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const uint32(&ClearValues)[4], ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, FRDGTextureUAVRef TextureUAV, const FLinearColor& ClearColor, ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute)"
  },
  {
    "label": "AddClearUAVPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearUAVPass(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, FRDGTextureUAVRef TextureUAV, const uint32(&ClearValues)[4], FRDGBufferSRVRef RectMinMaxBufferSRV, uint32 NumRects)"
  },
  {
    "label": "AddClearRenderTargetPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearRenderTargetPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture)"
  },
  {
    "label": "AddClearRenderTargetPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearRenderTargetPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture, const FLinearColor& ClearColor)"
  },
  {
    "label": "AddClearRenderTargetPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearRenderTargetPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture, const FLinearColor& ClearColor, FIntRect Viewport)"
  },
  {
    "label": "FRDGTextureClearInfo()",
    "kind": "Method",
    "detail": "Function (struct FRDGTextureClearInfo {)",
    "insertText": "FRDGTextureClearInfo()"
  },
  {
    "label": "AddClearRenderTargetPass()",
    "kind": "Method",
    "detail": "Function (FIntRect Viewport ; TOptional<FLinearColor> ClearColor ; uint32 FirstSliceIndex = 0 ; uint32 NumSlices = 1 ; uint32 FirstMipIndex = 0 ; uint32 NumMips = 1 ; } ; void)",
    "insertText": "AddClearRenderTargetPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture, const FRDGTextureClearInfo& TextureClearInfo)"
  },
  {
    "label": "AddClearDepthStencilPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearDepthStencilPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture, bool bClearDepth, float Depth, bool bClearStencil, uint8 Stencil)"
  },
  {
    "label": "AddClearDepthStencilPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearDepthStencilPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture, ERenderTargetLoadAction DepthLoadAction = ERenderTargetLoadAction::EClear, ERenderTargetLoadAction StencilLoadAction = ERenderTargetLoadAction::EClear)"
  },
  {
    "label": "AddClearStencilPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearStencilPass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture)"
  },
  {
    "label": "AddResummarizeHTilePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResummarizeHTilePass(FRDGBuilder& GraphBuilder, FRDGTextureRef DepthTexture)"
  },
  {
    "label": "AddCopyBufferPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCopyBufferPass(FRDGBuilder& GraphBuilder, FRDGBufferRef DstBuffer, uint64 DstOffset, FRDGBufferRef SrcBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "AddCopyBufferPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCopyBufferPass(FRDGBuilder& GraphBuilder, FRDGBufferRef DstBuffer, FRDGBufferRef SrcBuffer)"
  },
  {
    "label": "AddEnqueueCopyPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnqueueCopyPass(FRDGBuilder& GraphBuilder, FRHIGPUTextureReadback* Readback, FRDGTextureRef SourceTexture, FResolveRect Rect = FResolveRect())"
  },
  {
    "label": "AddEnqueueCopyPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnqueueCopyPass(FRDGBuilder& GraphBuilder, FRHIGPUBufferReadback* Readback, FRDGBufferRef SourceBuffer, uint32 NumBytes)"
  },
  {
    "label": "FRDGUploadData()",
    "kind": "Method",
    "detail": "Function (template<InElementType> struct FRDGUploadData : public TArrayView<InElementType,int32> {)",
    "insertText": "FRDGUploadData()"
  },
  {
    "label": "FRDGUploadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGUploadData(FRDGBuilder& GraphBuilder, uint32 InCount) : TArrayView<InElementType, int32>(GraphBuilder.AllocPODArray<InElementType>(InCount), InCount)"
  },
  {
    "label": "GetTotalSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTotalSize()"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, uint32 BytesPerElement, uint32 NumElements, const void* InitialData, uint64 InitialDataSize, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, uint32 BytesPerElement, FRDGBufferNumElementsCallback&& NumElementsCallback, FRDGBufferInitialDataCallback&& InitialDataCallback, FRDGBufferInitialDataSizeCallback&& InitialDataSizeCallback)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (template<ElementType,AllocatorType> FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, const TArray<ElementType, AllocatorType>& InitialData, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (const ElementType DummyElement =)",
    "insertText": "ElementType()"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateStructuredBuffer(GraphBuilder, Name, InitialData.GetTypeSize(), InitialData.Num(), InitialData.GetData(), InitialData.Num() * InitialData.GetTypeSize(), InitialDataFlags)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,AllocatorType> FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, TArray<ElementType, AllocatorType>&& InitialData)"
  },
  {
    "label": "AllocatorType()",
    "kind": "Method",
    "detail": "Function (} TArray<ElementType,AllocatorType>& UploadData =* GraphBuilder . AllocObject<TArray<ElementType,)",
    "insertText": "AllocatorType(MoveTemp(InitialData))"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, TConstArrayView<ElementType> InitialData, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateStructuredBuffer_Impl()",
    "kind": "Method",
    "detail": "Function (} template<ArrayType> FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer_Impl(FRDGBuilder& GraphBuilder, const TCHAR* Name, TRDGBufferArrayCallback<ArrayType>&& ArrayCallback)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} template<GetArrayRefCallback,Type = TInvokeResult_T<GetArrayRefCallback>> FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, GetArrayRefCallback&& ArrayCallback)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> FRDGBufferRef)",
    "insertText": "CreateStructuredBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, const FRDGUploadData<ElementType>& InitialData)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateStructuredBuffer(GraphBuilder, Name, InitialData.GetTypeSize(), InitialData.Num(), InitialData.GetData(), InitialData.GetTotalSize(), ERDGInitialDataFlags::NoCopy)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, uint32 NumBytes, const void* InitialData, uint64 InitialDataSize, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, FRDGBufferNumElementsCallback&& NumElementsCallback, FRDGBufferInitialDataCallback&& InitialDataCallback, FRDGBufferInitialDataSizeCallback&& InitialDataSizeCallback)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (template<ElementType,AllocatorType> FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, TArray<ElementType, AllocatorType>&& InitialData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 DummyElement = 0 ;)",
    "insertText": "if(InitialData.Num() == 0)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, TConstArrayView<ElementType> InitialData, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateByteAddressBuffer(GraphBuilder, Name, InitialData.Num() * InitialData.GetTypeSize(), InitialData.GetData(), InitialData.Num() * InitialData.GetTypeSize(), InitialDataFlags)"
  },
  {
    "label": "CreateByteAddressBuffer_Impl()",
    "kind": "Method",
    "detail": "Function (} template<ArrayType> FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer_Impl(FRDGBuilder& GraphBuilder, const TCHAR* Name, TRDGBufferArrayCallback<ArrayType>&& ArrayCallback)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} template<GetArrayRefCallback,Type = TInvokeResult_T<GetArrayRefCallback>> FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, GetArrayRefCallback&& ArrayCallback)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> FRDGBufferRef)",
    "insertText": "CreateByteAddressBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, const FRDGUploadData<ElementType>& InitialData)"
  },
  {
    "label": "CreateByteAddressBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateByteAddressBuffer(GraphBuilder, Name, InitialData.Num() * InitialData.GetTypeSize(), InitialData.GetData(), InitialData.GetTotalSize(), ERDGInitialDataFlags::NoCopy)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "CreateUploadBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, uint32 BytesPerElement, uint32 NumElements, const void* InitialData, uint64 InitialDataSize, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (template<ElementType> FRDGBufferRef)",
    "insertText": "CreateUploadBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, uint32 BytesPerElement, uint32 NumElements, const FRDGUploadData<ElementType>& InitialData)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> FRDGBufferRef)",
    "insertText": "CreateUploadBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, const FRDGUploadData<ElementType>& InitialData)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> FRDGBufferRef)",
    "insertText": "CreateUploadBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, TConstArrayView<ElementType> InitialData, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CreateUploadBuffer(GraphBuilder, Name, sizeof(ElementType), InitialData.Num(), InitialData.GetData(), sizeof(ElementType) * InitialData.Num(), InitialDataFlags)"
  },
  {
    "label": "CreateStructuredUploadBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,AllocatorType> FRDGBufferRef)",
    "insertText": "CreateStructuredUploadBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, const TArray<ElementType, AllocatorType> &InitialData, ERDGInitialDataFlags InitialDataFlags = ERDGInitialDataFlags::None)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef Buffer = GraphBuilder .)",
    "insertText": "CreateBuffer(FRDGBufferDesc::CreateStructuredUploadDesc(sizeof(ElementType), InitialData.Num()), Name)"
  },
  {
    "label": "QueueBufferUpload()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "QueueBufferUpload(Buffer, TConstArrayView<ElementType>(InitialData), InitialDataFlags)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef Buffer = GraphBuilder .)",
    "insertText": "CreateBuffer(FRDGBufferDesc::CreateByteAddressUploadDesc(sizeof(ElementType) * InitialData.Num()), Name)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (template<ExecuteLambdaType> void)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, FRDGEventName&& Name, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(MoveTemp(Name), ERDGPassFlags::None, MoveTemp(ExecuteLambda))"
  },
  {
    "label": "AddPassIfDebug()",
    "kind": "Method",
    "detail": "Function (} template<ExecuteLambdaType> void)",
    "insertText": "AddPassIfDebug(FRDGBuilder& GraphBuilder, FRDGEventName&& Name, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) AddPass(GraphBuilder, MoveTemp(Name), MoveTemp(ExecuteLambda))"
  },
  {
    "label": "AddDispatchToRHIThreadPass()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "AddDispatchToRHIThreadPass(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "AddDispatchHint()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddDispatchHint()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FReadbackTextureParameters, ) RDG_TEXTURE_ACCESS(Texture, ERHIAccess::CopySrc) END_SHADER_PARAMETER_STRUCT() template <typename ExecuteLambdaType> void AddReadbackTexturePass(FRDGBuilder& GraphBuilder, FRDGEventName&& Name, FRDGTextureRef Texture, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "FReadbackTextureParameters()",
    "kind": "Method",
    "detail": "Function (auto* PassParameters = GraphBuilder . AllocParameters<)",
    "insertText": "FReadbackTextureParameters()"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (PassParameters -> Texture = Texture ; GraphBuilder .)",
    "insertText": "AddPass(MoveTemp(Name), PassParameters, ERDGPassFlags::Readback, MoveTemp(ExecuteLambda))"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FReadbackBufferParameters, ) RDG_BUFFER_ACCESS(Buffer, ERHIAccess::CopySrc) END_SHADER_PARAMETER_STRUCT() template <typename ExecuteLambdaType> void AddReadbackBufferPass(FRDGBuilder& GraphBuilder, FRDGEventName&& Name, FRDGBufferRef Buffer, ExecuteLambdaType&& ExecuteLambda)"
  },
  {
    "label": "FReadbackBufferParameters()",
    "kind": "Method",
    "detail": "Function (auto* PassParameters = GraphBuilder . AllocParameters<)",
    "insertText": "FReadbackBufferParameters()"
  },
  {
    "label": "FRDGExternalAccessQueue()",
    "kind": "Method",
    "detail": "Function (} class FRDGExternalAccessQueue { public :)",
    "insertText": "FRDGExternalAccessQueue()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(uint32 ResourceCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Resources .)",
    "insertText": "Reserve(ResourceCount)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FRDGViewableResource* Resource, ERHIAccess Access = ERHIAccess::SRVMask, ERHIPipeline Pipelines = ERHIPipeline::Graphics)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Resources .)",
    "insertText": "Emplace(Resource, Access, Pipelines)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUnique(FRDGViewableResource* Resource, ERHIAccess Access = ERHIAccess::SRVMask, ERHIPipeline Pipelines = ERHIPipeline::Graphics)"
  },
  {
    "label": "Submit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Submit(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(FRDGViewableResource* Resource)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Validate(FRDGViewableResource* Resource, ERHIAccess Access, ERHIPipeline Pipelines)"
  },
  {
    "label": "FResource()",
    "kind": "Method",
    "detail": "Function (} struct FResource {)",
    "insertText": "FResource()"
  },
  {
    "label": "FResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FResource(FRDGViewableResource* InResource, ERHIAccess InAccess, ERHIPipeline InPipelines) : Resource(InResource) , Access(InAccess) , Pipelines(InPipelines)"
  },
  {
    "label": "ConvertToExternalAccessTexture()",
    "kind": "Method",
    "detail": "Function (} FRDGViewableResource* Resource ; ERHIAccess Access ; ERHIPipeline Pipelines = ERHIPipeline::None ; } ; TArray<FResource,FRDGArrayAllocator> Resources ; } ; const TRefCountPtr<IPooledRenderTarget>&)",
    "insertText": "ConvertToExternalAccessTexture(FRDGBuilder& GraphBuilder, FRDGTexture* Texture, ERHIAccess Access = ERHIAccess::SRVMask, ERHIPipeline Pipelines = ERHIPipeline::Graphics)"
  },
  {
    "label": "ConvertToExternalTexture()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<IPooledRenderTarget>& PooledTexture = GraphBuilder .)",
    "insertText": "ConvertToExternalTexture(Texture)"
  },
  {
    "label": "UseExternalAccessMode()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "UseExternalAccessMode(Texture, Access, Pipelines)"
  },
  {
    "label": "ConvertToExternalBuffer()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FRDGPooledBuffer>& PooledBuffer = GraphBuilder .)",
    "insertText": "ConvertToExternalBuffer(Buffer)"
  },
  {
    "label": "UseExternalAccessMode()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "UseExternalAccessMode(Buffer, Access, Pipelines)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ExternalAccessQueue .)",
    "insertText": "Add(Texture, Access, Pipelines)"
  },
  {
    "label": "ConvertToExternalAccessBuffer()",
    "kind": "Method",
    "detail": "Function (} const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "ConvertToExternalAccessBuffer(FRDGBuilder& GraphBuilder, FRDGExternalAccessQueue& ExternalAccessQueue, FRDGBuffer* Buffer, ERHIAccess Access = ERHIAccess::SRVMask, ERHIPipeline Pipelines = ERHIPipeline::Graphics)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ExternalAccessQueue .)",
    "insertText": "Add(Buffer, Access, Pipelines)"
  },
  {
    "label": "AllocatePooledBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllocatePooledBuffer(const FRDGBufferDesc& Desc, TRefCountPtr<FRDGPooledBuffer>& Out, const TCHAR* Name, ERDGPooledBufferAlignment Alignment = ERDGPooledBufferAlignment::Page)"
  },
  {
    "label": "AllocatePooledBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer>)",
    "insertText": "AllocatePooledBuffer(const FRDGBufferDesc& Desc, const TCHAR* Name, ERDGPooledBufferAlignment Alignment = ERDGPooledBufferAlignment::Page)"
  },
  {
    "label": "AllocatePooledTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocatePooledTexture(const FRDGTextureDesc& Desc, TRefCountPtr<IPooledRenderTarget>& Out, const TCHAR* Name)"
  },
  {
    "label": "AllocatePooledTexture()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "AllocatePooledTexture(const FRDGTextureDesc& Desc, const TCHAR* Name)"
  }
]