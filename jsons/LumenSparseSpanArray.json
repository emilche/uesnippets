[
  {
    "label": "TSparseSpanArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSparseSpanArray"
  },
  {
    "label": "TRangedForIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRangedForIterator"
  },
  {
    "label": "TRangedForConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRangedForConstIterator"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" SpanAllocator . h \" template<ElementType> class TSparseSpanArray { public : int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 NumElements)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reserve(NumElements)"
  },
  {
    "label": "AddSpan()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddSpan(int32 NumElements)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (const int32 InsertIndex = SpanAllocator .)",
    "insertText": "Allocate(NumElements)"
  },
  {
    "label": "GetMaxSize()",
    "kind": "Method",
    "detail": "Function (const int32 NumElementsToAdd = SpanAllocator .)",
    "insertText": "GetMaxSize() - Elements.Num()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "AddDefaulted(NumElementsToAdd)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllocatedElementsBitArray .)",
    "insertText": "Add(false, NumElementsToAdd)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 ElementIndex = InsertIndex; ElementIndex < InsertIndex + NumElements; ++ElementIndex)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (Elements [ ElementIndex ] =)",
    "insertText": "ElementType()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (} AllocatedElementsBitArray .)",
    "insertText": "SetRange(InsertIndex, NumElements, true)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} SpanAllocator .)",
    "insertText": "Free(FirstElementIndex, NumElements)"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (AllocatedElementsBitArray .)",
    "insertText": "SetRange(FirstElementIndex, NumElements, false)"
  },
  {
    "label": "Consolidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Consolidate()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "SetNum(SpanAllocator.GetMaxSize())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (AllocatedElementsBitArray .)",
    "insertText": "SetNumUninitialized(SpanAllocator.GetMaxSize())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (AllocatedElementsBitArray .)",
    "insertText": "SetNumUninitialized(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "TRangedForIterator()",
    "kind": "Method",
    "detail": "Function (} class TRangedForIterator { public :)",
    "insertText": "TRangedForIterator(TSparseSpanArray<ElementType>& InArray, int32 InElementIndex) : Array(InArray) , ElementIndex(InElementIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + ElementIndex ; } } TRangedForIterator)",
    "insertText": "operator()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TRangedForIterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TRangedForConstIterator)",
    "insertText": "begin()"
  }
]