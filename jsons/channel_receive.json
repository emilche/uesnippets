[
  {
    "label": "TimestampWrapAroundHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimestampWrapAroundHandler"
  },
  {
    "label": "AudioDeviceModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceModule"
  },
  {
    "label": "FrameDecryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDecryptorInterface"
  },
  {
    "label": "PacketRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketRouter"
  },
  {
    "label": "RateLimiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateLimiter"
  },
  {
    "label": "ReceiveStatistics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveStatistics"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "RtpPacketReceived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketReceived"
  },
  {
    "label": "RtpRtcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpRtcp"
  },
  {
    "label": "CallReceiveStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallReceiveStatistics"
  },
  {
    "label": "ChannelSendInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelSendInterface"
  },
  {
    "label": "ChannelReceiveInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelReceiveInterface"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_CHANNEL_RECEIVE_H_ # define AUDIO_CHANNEL_RECEIVE_H_ # include<map> # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio / audio_mixer . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / call / audio_sink . h \" # include \" api / call / transport . h \" # include \" api / crypto / crypto_options . h \" # include \" api / frame_transformer_interface . h \" # include \" api / neteq / neteq_factory . h \" # include \" api / transport / rtp / rtp_source . h \" # include \" call / rtp_packet_sink_interface . h \" # include \" call / syncable . h \" # include \" modules / audio_coding / include / audio_coding_module_typedefs . h \" # include \" modules / rtp_rtcp / source / source_tracker . h \" # include \" system_wrappers / include / clock . h \" namespace rtc { class TimestampWrapAroundHandler ; } namespace webrtc { class AudioDeviceModule ; class FrameDecryptorInterface ; class PacketRouter ; class RateLimiter ; class ReceiveStatistics ; class RtcEventLog ; class RtpPacketReceived ; class RtpRtcp ; struct CallReceiveStatistics { int cumulativeLost ; unsigned int jitterSamples ; int64_t payload_bytes_rcvd = 0 ; int64_t header_and_padding_bytes_rcvd = 0 ; int packetsReceived ; uint32_t nacks_sent = 0 ; int64_t capture_start_ntp_time_ms_ ; absl::optional<int64_t> last_packet_received_timestamp_ms ; absl::optional<int64_t> last_sender_report_timestamp_ms ; absl::optional<int64_t> last_sender_report_remote_timestamp_ms ; uint32_t sender_reports_packets_sent = 0 ; uint64_t sender_reports_bytes_sent = 0 ; uint64_t sender_reports_reports_count = 0 ; absl::optional<TimeDelta> round_trip_time ; TimeDelta total_round_trip_time =)",
    "insertText": "Zero()"
  },
  {
    "label": "ChannelReceiveInterface()",
    "kind": "Method",
    "detail": "Function (int round_trip_time_measurements ; } ; namespace voe { class ChannelSendInterface ; class ChannelReceiveInterface : public RtpPacketSinkInterface { public : ~)",
    "insertText": "ChannelReceiveInterface()"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSink(AudioSinkInterface* sink)"
  },
  {
    "label": "SetReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiveCodecs(const std::map<int, SdpAudioFormat>& codecs)"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlayout()"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPlayout()"
  },
  {
    "label": "GetReceiveCodec()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<int,SdpAudioFormat>>)",
    "insertText": "GetReceiveCodec()"
  },
  {
    "label": "ReceivedRTCPPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedRTCPPacket(const uint8_t* data, size_t length)"
  },
  {
    "label": "SetChannelOutputVolumeScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelOutputVolumeScaling(float scaling)"
  },
  {
    "label": "GetSpeechOutputLevelFullRange()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetSpeechOutputLevelFullRange()"
  },
  {
    "label": "GetTotalOutputEnergy()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTotalOutputEnergy()"
  },
  {
    "label": "GetTotalOutputDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTotalOutputDuration()"
  },
  {
    "label": "GetNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (NetworkStatistics)",
    "insertText": "GetNetworkStatistics(bool get_and_clear_legacy_stats)"
  },
  {
    "label": "GetDecodingCallStatistics()",
    "kind": "Method",
    "detail": "Function (AudioDecodingCallStats)",
    "insertText": "GetDecodingCallStatistics()"
  },
  {
    "label": "GetDelayEstimate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetDelayEstimate()"
  },
  {
    "label": "SetMinimumPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinimumPlayoutDelay(int delay_ms)"
  },
  {
    "label": "GetPlayoutRtpTimestamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPlayoutRtpTimestamp(uint32_t* rtp_timestamp, int64_t* time_ms)"
  },
  {
    "label": "SetEstimatedPlayoutNtpTimestampMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEstimatedPlayoutNtpTimestampMs(int64_t ntp_timestamp_ms, int64_t time_ms)"
  },
  {
    "label": "GetCurrentEstimatedPlayoutNtpTimestampMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "GetCurrentEstimatedPlayoutNtpTimestampMs(int64_t now_ms)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumPlayoutDelayMs()"
  },
  {
    "label": "GetSyncInfo()",
    "kind": "Method",
    "detail": "Function (absl::optional<Syncable::Info>)",
    "insertText": "GetSyncInfo()"
  },
  {
    "label": "RegisterReceiverCongestionControlObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReceiverCongestionControlObjects(PacketRouter* packet_router)"
  },
  {
    "label": "ResetReceiverCongestionControlObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReceiverCongestionControlObjects()"
  },
  {
    "label": "GetRTCPStatistics()",
    "kind": "Method",
    "detail": "Function (CallReceiveStatistics)",
    "insertText": "GetRTCPStatistics()"
  },
  {
    "label": "SetNACKStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNACKStatus(bool enable, int max_packets)"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "GetAudioFrameWithInfo()",
    "kind": "Method",
    "detail": "Function (AudioMixer::Source::AudioFrameInfo)",
    "insertText": "GetAudioFrameWithInfo(int sample_rate_hz, AudioFrame* audio_frame)"
  },
  {
    "label": "PreferredSampleRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PreferredSampleRate()"
  },
  {
    "label": "SetSourceTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceTracker(SourceTracker* source_tracker)"
  },
  {
    "label": "SetAssociatedSendChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedSendChannel(const ChannelSendInterface* channel)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "OnLocalSsrcChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSsrcChange(uint32_t local_ssrc)"
  },
  {
    "label": "GetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetLocalSsrc()"
  },
  {
    "label": "CreateChannelReceive()",
    "kind": "Method",
    "detail": "Function (} ; std::unique_ptr<ChannelReceiveInterface>)",
    "insertText": "CreateChannelReceive(Clock* clock, NetEqFactory* neteq_factory, AudioDeviceModule* audio_device_module, Transport* rtcp_send_transport, RtcEventLog* rtc_event_log, uint32_t local_ssrc, uint32_t remote_ssrc, size_t jitter_buffer_max_packets, bool jitter_buffer_fast_playout, int jitter_buffer_min_delay_ms, bool enable_non_sender_rtt, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory, absl::optional<AudioCodecPairId> codec_pair_id, rtc::scoped_refptr<FrameDecryptorInterface> frame_decryptor, const webrtc::CryptoOptions& crypto_options, rtc::scoped_refptr<FrameTransformerInterface> frame_transformer)"
  }
]