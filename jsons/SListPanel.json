[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SListPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListPanel"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" SlotBase . h \" # include \" Layout / Children . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / Views / STableViewBase . h \" class FArrangedChildren ; class SListPanel : public SPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SListPanel, SPanel, SLATE_API)"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSlot() : TSlotBase<FSlot>()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (} } ; FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot(int32 InsertAtIndex = INDEX_NONE)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SListPanel ) : _ItemWidth(0) , _ItemHeight(16) , _NumDesiredItems(0) , _ItemAlignment(EListItemAlignment::EvenlyDistributed) , _ListOrientation(Orient_Vertical)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; _Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots) SLATE_ATTRIBUTE( float, ItemWidth ) SLATE_ATTRIBUTE( float, ItemHeight ) SLATE_ATTRIBUTE( int32, NumDesiredItems ) SLATE_ATTRIBUTE( EListItemAlignment, ItemAlignment ) SLATE_ARGUMENT( EOrientation, ListOrientation ) SLATE_END_ARGS() SLATE_API SListPanel()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetAllChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetAllChildren()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "SetFirstLineScrollOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFirstLineScrollOffset(float InFirstLineScrollOffset)"
  },
  {
    "label": "SetOverscrollAmount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverscrollAmount(float InOverscrollAmount)"
  },
  {
    "label": "ClearItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearItems()"
  },
  {
    "label": "GetDesiredItemDimensions()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions)",
    "insertText": "GetDesiredItemDimensions()"
  },
  {
    "label": "GetItemSize()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions)",
    "insertText": "GetItemSize(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "GetItemSize()",
    "kind": "Method",
    "detail": "Function (FTableViewDimensions)",
    "insertText": "GetItemSize(const FGeometry& AllottedGeometry, const EListItemAlignment ListItemAlignment)"
  },
  {
    "label": "GetItemPadding()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetItemPadding(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "GetItemPadding()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetItemPadding(const FGeometry& AllottedGeometry, const EListItemAlignment ListItemAlignment)"
  },
  {
    "label": "GetLinePadding()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLinePadding(const FGeometry& AllottedGeometry, const int32 LineStartIndex)"
  },
  {
    "label": "SetRefreshPending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefreshPending(bool IsPendingRefresh)"
  },
  {
    "label": "IsRefreshPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRefreshPending()"
  },
  {
    "label": "SetItemHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemHeight(TAttribute<float> Height)"
  },
  {
    "label": "SetItemWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemWidth(TAttribute<float> Width)"
  },
  {
    "label": "ShouldArrangeAsTiles()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldArrangeAsTiles()"
  }
]