[
  {
    "label": "FGenericFileIoStoreEventQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericFileIoStoreEventQueue"
  },
  {
    "label": "FGenericFileIoStoreImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericFileIoStoreImpl"
  },
  {
    "label": "FGenericFileIoStoreEventQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / List . h \" # include \" HAL / CriticalSection . h \" # include \" Templates / Tuple . h \" # include \" HAL / Runnable . h \" # include \" Containers / Map . h \" # include \" IO / IoDispatcher . h \" # include \" IoDispatcherFileBackendTypes . h \" # include \" ProfilingDebugging / CountersTrace . h \" class FGenericFileIoStoreEventQueue { public :)",
    "insertText": "FGenericFileIoStoreEventQueue()"
  },
  {
    "label": "ServiceNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServiceNotify()"
  },
  {
    "label": "ServiceWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServiceWait()"
  },
  {
    "label": "FGenericFileIoStoreImpl()",
    "kind": "Method",
    "detail": "Function (private : FEvent* ServiceEvent = nullptr ; } ; class FGenericFileIoStoreImpl : public IPlatformFileIoStore { public :)",
    "insertText": "FGenericFileIoStoreImpl()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FInitializePlatformFileIoStoreParams& Params)"
  },
  {
    "label": "OpenContainer()",
    "kind": "Method",
    "detail": "Function (WakeUpDispatcherThreadDelegate = Params . WakeUpDispatcherThreadDelegate ; BufferAllocator = Params . BufferAllocator ; BlockCache = Params . BlockCache ; Stats = Params . Stats ; } bool)",
    "insertText": "OpenContainer(const TCHAR* ContainerFilePath, uint64& ContainerFileHandle, uint64& ContainerFileSize)"
  },
  {
    "label": "CloseContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseContainer(uint64 ContainerFileHandle)"
  },
  {
    "label": "CreateCustomRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateCustomRequests(FFileIoStoreResolvedRequest& ResolvedRequest, FFileIoStoreReadRequestList& OutRequests)"
  },
  {
    "label": "GetCompletedRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompletedRequests(FFileIoStoreReadRequestList& OutRequests)"
  }
]