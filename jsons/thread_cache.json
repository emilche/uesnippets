[
  {
    "label": "ThreadCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCache"
  },
  {
    "label": "HeapDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HeapDumper"
  },
  {
    "label": "ThreadCacheInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCacheInspector"
  },
  {
    "label": "ThreadCacheLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadCacheLimits"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "tools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tools"
  },
  {
    "label": "ReentrancyGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReentrancyGuard"
  },
  {
    "label": "Bucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Bucket"
  },
  {
    "label": "ThreadCacheRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCacheRegistry"
  },
  {
    "label": "PartitionAllocThreadCacheTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionAllocThreadCacheTest"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_THREAD_CACHE_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_THREAD_CACHE_H_ # include<atomic> # include<cstdint> # include<limits> # include<memory> # include \" base / allocator / partition_allocator / partition_alloc - inl . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / gtest_prod_util . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / time / time . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_bucket_lookup . h \" # include \" base / allocator / partition_allocator / partition_freelist_entry . h \" # include \" base / allocator / partition_allocator / partition_lock . h \" # include \" base / allocator / partition_allocator / partition_stats . h \" # include \" base / allocator / partition_allocator / partition_tls . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(ARCH_CPU_X86_64) && defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (class ThreadCache ; namespace tools { # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (uintptr_t kNeedle2 = 0 x9615ee1c5eb14caf ; # else uintptr_t kNeedle1 = 0 xe69e32f3 ; uintptr_t kNeedle2 = 0 x9615ee1c ; # endif size_t kThreadCacheNeedleArraySize = 4 ; uintptr_t kThreadCacheNeedleArray [ kThreadCacheNeedleArraySize ] ; class HeapDumper ; class ThreadCacheInspector ; } namespace internal {)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_THREAD_LOCAL_TLS) && !BUILDFLAG(IS_ANDROID) #define PA_THREAD_CACHE_FAST_TLS #endif #if defined(PA_THREAD_CACHE_FAST_TLS) extern PA_COMPONENT_EXPORT( PARTITION_ALLOC)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif } struct ThreadCacheLimits { size_t kDefaultSizeThreshold = 5 1 2 ; size_t kLargeSizeThreshold = 1<<1 5 ;)",
    "insertText": "static_assert(kLargeSizeThreshold <= std::numeric_limits<uint16_t>::max(), \"\")"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (public : ThreadCacheRegistry&)",
    "insertText": "Instance()"
  },
  {
    "label": "ThreadCacheRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCacheRegistry()"
  },
  {
    "label": "RegisterThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterThreadCache(ThreadCache* cache)"
  },
  {
    "label": "UnregisterThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterThreadCache(ThreadCache* cache)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats(bool my_thread_only, ThreadCacheStats* stats)"
  },
  {
    "label": "PurgeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeAll()"
  },
  {
    "label": "RunPeriodicPurge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPeriodicPurge()"
  },
  {
    "label": "GetPeriodicPurgeNextIntervalInMicroseconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetPeriodicPurgeNextIntervalInMicroseconds()"
  },
  {
    "label": "SetThreadCacheMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadCacheMultiplier(float multiplier)"
  },
  {
    "label": "SetLargestActiveBucketIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLargestActiveBucketIndex(uint8_t largest_active_bucket_index)"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (internal::Lock&)",
    "insertText": "GetLock()"
  },
  {
    "label": "ForcePurgeAllThreadAfterForkUnsafe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForcePurgeAllThreadAfterForkUnsafe()"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (internal::base::TimeDelta kMinPurgeInterval = internal::)",
    "insertText": "Seconds(1)"
  },
  {
    "label": "Minutes()",
    "kind": "Method",
    "detail": "Function (internal::base::TimeDelta kMaxPurgeInterval = internal::)",
    "insertText": "Minutes(1)"
  },
  {
    "label": "PA_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (internal::base::TimeDelta kDefaultPurgeInterval = 2* kMinPurgeInterval ; size_t kMinCachedMemoryForPurging = 5 0 0* 1 0 2 4 ; private : class tools::ThreadCacheInspector ; class tools::HeapDumper ; internal::Lock lock_ ; ThreadCache* list_head_)",
    "insertText": "PA_GUARDED_BY(GetLock())"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (bool periodic_purge_is_initialized_ = false ; internal::base::TimeDelta periodic_purge_next_interval_ = kDefaultPurgeInterval ; # if)",
    "insertText": "BUILDFLAG(IS_NACL)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (# else uint8_t largest_active_bucket_index_ = internal::)",
    "insertText": "GetIndex(ThreadCacheLimits::kDefaultSizeThreshold)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_THREAD_CACHE_ENABLE_STATISTICS) #define PA_INCREMENT_COUNTER(counter) ++counter #else #define PA_INCREMENT_COUNTER(counter)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if BUILDFLAG(PA_DCHECK_IS_ON)"
  },
  {
    "label": "ReentrancyGuard()",
    "kind": "Method",
    "detail": "Function (class ReentrancyGuard { public :)",
    "insertText": "ReentrancyGuard(bool& flag) : flag_(flag)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK(!flag_)"
  },
  {
    "label": "ReentrancyGuard()",
    "kind": "Method",
    "detail": "Function (flag_ = true ; } ~)",
    "insertText": "ReentrancyGuard()"
  },
  {
    "label": "PA_REENTRANCY_GUARD()",
    "kind": "Method",
    "detail": "Function (flag_ = false ; } private : bool& flag_ ; } ; } # define)",
    "insertText": "PA_REENTRANCY_GUARD(x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif class PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Init(PartitionRoot<>* root)"
  },
  {
    "label": "DeleteForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteForTesting(ThreadCache* tcache)"
  },
  {
    "label": "SwapForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapForTesting(PartitionRoot<>* root)"
  },
  {
    "label": "RemoveTombstoneForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTombstoneForTesting()"
  },
  {
    "label": "EnsureThreadSpecificDataInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureThreadSpecificDataInitialized()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ThreadCache*)",
    "insertText": "Get()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_THREAD_CACHE_FAST_TLS)"
  },
  {
    "label": "ThreadCache()",
    "kind": "Method",
    "detail": "Function (# else return reinterpret_cast<)",
    "insertText": "ThreadCache(internal::PartitionTlsGet(internal::g_thread_cache_key))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "IsValid(ThreadCache* tcache)"
  },
  {
    "label": "IsTombstone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTombstone(ThreadCache* tcache)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ThreadCache*)",
    "insertText": "Create(PartitionRoot<>* root)"
  },
  {
    "label": "ThreadCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadCache()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t, void* buffer)"
  },
  {
    "label": "ThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCache(const ThreadCache&)"
  },
  {
    "label": "ThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCache(const ThreadCache&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadCache&)",
    "insertText": "operator(const ThreadCache&)"
  },
  {
    "label": "MaybePutInCache()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "MaybePutInCache(uintptr_t slot_start, size_t bucket_index)"
  },
  {
    "label": "GetFromCache()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "GetFromCache(size_t bucket_index, size_t* slot_size)"
  },
  {
    "label": "SetShouldPurge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldPurge()"
  },
  {
    "label": "Purge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Purge()"
  },
  {
    "label": "TryPurge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryPurge()"
  },
  {
    "label": "CachedMemory()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CachedMemory()"
  },
  {
    "label": "AccumulateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateStats(ThreadCacheStats* stats)"
  },
  {
    "label": "PurgeCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeCurrentThread()"
  },
  {
    "label": "bucket_count_for_testing()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bucket_count_for_testing(size_t index)"
  },
  {
    "label": "prev_for_testing()",
    "kind": "Method",
    "detail": "Function (uint16_t kBatchFillRatio = 8 ; float kDefaultMultiplier = 2 . ; uint8_t kSmallBucketBaseCount = 6 4 ; size_t kDefaultSizeThreshold = ThreadCacheLimits::kDefaultSizeThreshold ; size_t kLargeSizeThreshold = ThreadCacheLimits::kLargeSizeThreshold ; const ThreadCache*)",
    "insertText": "prev_for_testing() const PA_EXCLUSIVE_LOCKS_REQUIRED(ThreadCacheRegistry::GetLock())"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(Bucket) <= 2 * sizeof(void*), \"Keep Bucket small.\")"
  },
  {
    "label": "ThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCache(PartitionRoot<>* root)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(void* thread_cache_ptr)"
  },
  {
    "label": "PurgeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeInternal()"
  },
  {
    "label": "PurgeInternalHelper()",
    "kind": "Method",
    "detail": "Function (template<bool crash_on_corruption> void)",
    "insertText": "PurgeInternalHelper()"
  },
  {
    "label": "FillBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBucket(size_t bucket_index)"
  },
  {
    "label": "ClearBucketHelper()",
    "kind": "Method",
    "detail": "Function (template<bool crash_on_corruption> void)",
    "insertText": "ClearBucketHelper(Bucket& bucket, size_t limit)"
  },
  {
    "label": "ClearBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBucket(Bucket& bucket, size_t limit)"
  },
  {
    "label": "PutInBucket()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "PutInBucket(Bucket& bucket, uintptr_t slot_start)"
  },
  {
    "label": "FreeAfter()",
    "kind": "Method",
    "detail": "Function (template<bool crash_on_corruption> void)",
    "insertText": "FreeAfter(internal::PartitionFreelistEntry* head, size_t slot_size)"
  },
  {
    "label": "SetGlobalLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalLimits(PartitionRoot<>* root, float multiplier)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (# else uint16_t kBucketCount = internal::)",
    "insertText": "GetIndex(ThreadCache::kLargeSizeThreshold)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "static_assert(kBucketCount < internal::kNumBuckets, \"Cannot have more cached buckets than what the allocator supports\")"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (uintptr_t kTombstone = 0 x1 ; uintptr_t kTombstoneMask = ~ kTombstone ; uint8_t global_limits_ [ kBucketCount ] ; uint16_t largest_active_bucket_index_ ; uint32_t cached_memory_ = 0 ; std::atomic<bool> should_purge_ ; ThreadCacheStats stats_ ; Bucket buckets_ [ kBucketCount ] ; PartitionRoot<>* const root_ ; const internal::base::PlatformThreadId thread_id_ ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON)"
  },
  {
    "label": "PA_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (# endif ThreadCache* next_)",
    "insertText": "PA_GUARDED_BY(ThreadCacheRegistry::GetLock())"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (class ThreadCacheRegistry ; class PartitionAllocThreadCacheTest ; class tools::ThreadCacheInspector ;)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, Simple)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, MultipleObjectsCachedPerBucket)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, LargeAllocationsAreNotCached)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, MultipleThreadCaches)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, RecordStats)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, ThreadCacheRegistry)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, MultipleThreadCachesAccounting)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, DynamicCountPerBucket)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, DynamicCountPerBucketClamping)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, DynamicCountPerBucketMultipleThreads)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, DynamicSizeThreshold)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, DynamicSizeThresholdPurge)"
  },
  {
    "label": "PA_FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_FRIEND_TEST_ALL_PREFIXES(PartitionAllocThreadCacheTest, ClearFromTail)"
  },
  {
    "label": "PA_REENTRANCY_GUARD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_REENTRANCY_GUARD(is_in_thread_cache_)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.cache_fill_count)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.cache_fill_misses)"
  },
  {
    "label": "PutInBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutInBucket(bucket, slot_start)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (cached_memory_ + = bucket . slot_size ;)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.cache_fill_hits)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint8_t limit = bucket . limit .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "ClearBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBucket(bucket, limit / 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PA_UNLIKELY(should_purge_.load(std::memory_order_relaxed))) PurgeInternal()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_THREAD_CACHE_ALLOC_STATS)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.alloc_count)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.alloc_miss_too_large)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.alloc_misses)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.alloc_hits)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PA_DCHECK(bucket.count == 0)"
  },
  {
    "label": "PA_INCREMENT_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_INCREMENT_COUNTER(stats_.alloc_miss_empty)"
  },
  {
    "label": "FillBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBucket(bucket_index)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PA_DCHECK(bucket.count != 0)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (internal::PartitionFreelistEntry* entry = bucket . freelist_head ; internal::PartitionFreelistEntry* next = entry -> GetNextForThreadCache<)",
    "insertText": "true(bucket.slot_size)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(entry != next)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (bucket . count - - ;)",
    "insertText": "PA_DCHECK(bucket.count != 0 || !next)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (bucket . freelist_head = next ;* slot_size = bucket . slot_size ;)",
    "insertText": "PA_DCHECK(cached_memory_ >= bucket.slot_size)"
  },
  {
    "label": "SlotStartPtr2Addr()",
    "kind": "Method",
    "detail": "Function (cached_memory_ - = bucket . slot_size ; return)",
    "insertText": "SlotStartPtr2Addr(entry)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_FREELIST_SHADOW_ENTRY) && defined(ARCH_CPU_X86_64) && \\ defined(PA_HAS_64_BITS_POINTERS) static_assert(internal::kAlignment == 16, \"\")"
  },
  {
    "label": "distance_to_next_cacheline_in_16_bytes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "distance_to_next_cacheline_in_16_bytes((slot_start >> 4) & 3)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (int slot_size_remaining_in_16_bytes = # if)",
    "insertText": "BUILDFLAG(PUT_REF_COUNT_IN_PREVIOUS_SLOT) (bucket.slot_size - sizeof(PartitionRefCount))"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (# else bucket . slot_size / 1 6 ; # endif slot_size_remaining_in_16_bytes =)",
    "insertText": "min(slot_size_remaining_in_16_bytes, distance_to_next_cacheline_in_16_bytes)"
  },
  {
    "label": "PA_HAS_BUILTIN()",
    "kind": "Method",
    "detail": "Function (const uint32_t poison_16_bytes [ 4 ] = { 0 xbadbad00,0 xbadbad00,0 xbadbad00,0 xbadbad00 } ; # if)",
    "insertText": "PA_HAS_BUILTIN(__builtin_assume_aligned) void* slot_start_tagged = __builtin_assume_aligned( internal::SlotStartAddr2Ptr(slot_start), internal::kAlignment)"
  },
  {
    "label": "SlotStartAddr2Ptr()",
    "kind": "Method",
    "detail": "Function (# else void* slot_start_tagged =)",
    "insertText": "SlotStartAddr2Ptr(slot_start)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (# endif uint32_t* address_aligned = static_cast<)",
    "insertText": "uint32_t(slot_start_tagged)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(address_aligned, poison_16_bytes, sizeof(poison_16_bytes))"
  },
  {
    "label": "EmplaceAndInitForThreadCache()",
    "kind": "Method",
    "detail": "Function (address_aligned + = 4 ; } # endif auto* entry = internal::)",
    "insertText": "EmplaceAndInitForThreadCache(slot_start, bucket.freelist_head)"
  }
]