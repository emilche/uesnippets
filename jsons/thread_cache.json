[
  {
    "label": "ThreadCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCache"
  },
  {
    "label": "HeapDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HeapDumper"
  },
  {
    "label": "ThreadCacheInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCacheInspector"
  },
  {
    "label": "ThreadCacheLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadCacheLimits"
  },
  {
    "label": "cannot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cannot"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "tools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tools"
  },
  {
    "label": "tools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tools"
  },
  {
    "label": "ReentrancyGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReentrancyGuard"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "tools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tools"
  },
  {
    "label": "tools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tools"
  },
  {
    "label": "Bucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Bucket"
  },
  {
    "label": "ThreadCacheRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCacheRegistry"
  },
  {
    "label": "PartitionAllocThreadCacheTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionAllocThreadCacheTest"
  },
  {
    "label": "tools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tools"
  },
  {
    "label": "ThreadCacheRegistry()",
    "kind": "Method",
    "detail": "Function (constexpr)",
    "insertText": "ThreadCacheRegistry()"
  },
  {
    "label": "RegisterThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterThreadCache(ThreadCache* cache)"
  },
  {
    "label": "UnregisterThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterThreadCache(ThreadCache* cache)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats(bool my_thread_only, ThreadCacheStats* stats)"
  },
  {
    "label": "PurgeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeAll()"
  },
  {
    "label": "RunPeriodicPurge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPeriodicPurge()"
  },
  {
    "label": "SetThreadCacheMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadCacheMultiplier(float multiplier)"
  },
  {
    "label": "SetLargestActiveBucketIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLargestActiveBucketIndex(uint8_t largest_active_bucket_index)"
  },
  {
    "label": "ForcePurgeAllThreadAfterForkUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePurgeAllThreadAfterForkUnsafe()"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(PartitionRoot<>* root)"
  },
  {
    "label": "DeleteForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteForTesting(ThreadCache* tcache)"
  },
  {
    "label": "SwapForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapForTesting(PartitionRoot<>* root)"
  },
  {
    "label": "RemoveTombstoneForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTombstoneForTesting()"
  },
  {
    "label": "EnsureThreadSpecificDataInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureThreadSpecificDataInitialized()"
  },
  {
    "label": "MaybePutInCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybePutInCache(uintptr_t slot_start,\n                                        size_t bucket_index)"
  },
  {
    "label": "GetFromCache()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetFromCache(size_t bucket_index,\n                                          size_t* slot_size)"
  },
  {
    "label": "SetShouldPurge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldPurge()"
  },
  {
    "label": "Purge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Purge()"
  },
  {
    "label": "TryPurge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryPurge()"
  },
  {
    "label": "PurgeCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeCurrentThread()"
  },
  {
    "label": "SetLargestCachedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLargestCachedSize(size_t size)"
  },
  {
    "label": "ThreadCache()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ThreadCache(PartitionRoot<>* root)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(void* thread_cache_ptr)"
  },
  {
    "label": "PurgeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeInternal()"
  },
  {
    "label": "PurgeInternalHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeInternalHelper()"
  },
  {
    "label": "FillBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBucket(size_t bucket_index)"
  },
  {
    "label": "ClearBucketHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBucketHelper(Bucket& bucket, size_t limit)"
  },
  {
    "label": "ClearBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBucket(Bucket& bucket, size_t limit)"
  },
  {
    "label": "PutInBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutInBucket(Bucket& bucket, uintptr_t slot_start)"
  },
  {
    "label": "ResetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForTesting()"
  },
  {
    "label": "FreeAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeAfter(internal::PartitionFreelistEntry* head, size_t slot_size)"
  },
  {
    "label": "SetGlobalLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalLimits(PartitionRoot<>* root, float multiplier)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "static_assert(\n      kBucketCount < internal::kNumBuckets,\n      \"Cannot have more cached buckets than what the allocator supports\")"
  },
  {
    "label": "PA_REENTRANCY_GUARD()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "PA_REENTRANCY_GUARD(is_in_thread_cache_)"
  }
]