[
  {
    "label": "InterleaveWithZeros()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / AABB . h \" # include \" Chaos / Defines . h \" # include \" ChaosLog . h \" # include<limits> namespace Chaos { uint32)",
    "insertText": "InterleaveWithZeros(uint16 input)"
  },
  {
    "label": "Intermediate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Intermediate(uint32)"
  },
  {
    "label": "Intermediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intermediate(Intermediate ^ (Intermediate << 8))"
  },
  {
    "label": "Intermediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intermediate(Intermediate ^ (Intermediate << 4))"
  },
  {
    "label": "Intermediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intermediate(Intermediate ^ (Intermediate << 2))"
  },
  {
    "label": "Intermediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intermediate(Intermediate ^ (Intermediate << 1))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FReal CellIndex = Coordinate* DirtyElementGridCellSizeInv ; FReal FloatingPointMaxCellIndexError =)",
    "insertText": "Abs(CellIndex) * std::numeric_limits<FReal>::epsilon()"
  },
  {
    "label": "HashCell()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "HashCell(int64 XCell, int64 YCell)"
  },
  {
    "label": "HashCoordinates()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "HashCoordinates(FReal Xcoordinate, FReal Ycoordinate, FReal DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 X =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(Xcoordinate,DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 Y =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(Ycoordinate,DirtyElementGridCellSizeInv)"
  },
  {
    "label": "TooManyOverlapQueryCells()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "TooManyOverlapQueryCells(const TAABB<T, 3>& AABB, FReal DirtyElementGridCellSizeInv, int32 MaximumOverlap)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellStartX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(AABB.Min().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellStartY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(AABB.Min().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellEndX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(AABB.Max().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellEndY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(AABB.Max().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "XsampleCount()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "XsampleCount(CellEndX - CellStartX)"
  },
  {
    "label": "YsampleCount()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "YsampleCount(CellEndY - CellStartY)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 NewCellStartX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABB.Min().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 NewCellStartY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABB.Min().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 NewCellEndX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABB.Max().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 NewCellEndY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABB.Max().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 OldCellStartX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABBExclude.Min().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 OldCellStartY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABBExclude.Min().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 OldCellEndX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABBExclude.Max().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 OldCellEndY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate((FReal)AABBExclude.Max().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "TestIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TestIndex(EndIndex + StartIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 TestValue = Array [ TestIndex ] ;)",
    "insertText": "if(TestValue == FindValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(StartIndex == TestIndex)"
  },
  {
    "label": "FindInsertIndexIntoSortedArray()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindInsertIndexIntoSortedArray(const TArray<int32>& Array, int32 FindValue, int32 StartIndex, int32 EndIndex)"
  },
  {
    "label": "InsertValueIntoSortedSubArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InsertValueIntoSortedSubArray(TArray<int32>& Array, int32 Value, int32 StartIndex, int32 Count)"
  },
  {
    "label": "FindInsertIndexIntoSortedArray()",
    "kind": "Method",
    "detail": "Function (int32 EndIndex = StartIndex + Count - 1 ; int32 InsertIndex =)",
    "insertText": "FindInsertIndexIntoSortedArray(Array, Value, StartIndex, EndIndex)"
  },
  {
    "label": "DeleteValueFromSortedSubArray()",
    "kind": "Method",
    "detail": "Function (Array [ Index ] = Array [ Index - 1 ] ; } Array [ InsertIndex ] = Value ; } else { return false ; } } else { Array [ StartIndex ] = Value ; } return true ; } bool)",
    "insertText": "DeleteValueFromSortedSubArray(TArray<int32>& Array, int32 Value, int32 StartIndex, int32 Count)"
  },
  {
    "label": "FindInSortedArray()",
    "kind": "Method",
    "detail": "Function (int32 EndIndex = StartIndex + Count - 1 ; int32 DeleteIndex =)",
    "insertText": "FindInSortedArray(Array, Value, StartIndex, EndIndex)"
  },
  {
    "label": "TooManySweepQueryCells()",
    "kind": "Method",
    "detail": "Function (Array [ Index ] = Array [ Index + 1 ] ; } return true ; } } return false ; } bool)",
    "insertText": "TooManySweepQueryCells(const TVec3<FReal>& QueryHalfExtents, const FVec3& StartPoint, const FVec3& Dir, FReal Length, FReal DirtyElementGridCellSizeInv, int32 DirtyElementMaxGridCellQueryCount)"
  },
  {
    "label": "DoForSweepIntersectCellsImp()",
    "kind": "Method",
    "detail": "Function (} template<FunctionType> void)",
    "insertText": "DoForSweepIntersectCellsImp(const FReal QueryHalfExtentsX, const FReal QueryHalfExtentsY, const FReal StartPointX, const FReal StartPointY, const FReal RayX, const FReal RayY, FReal DirtyElementGridCellSize, FReal DirtyElementGridCellSizeInv, FunctionType InFunction)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 ReferenceCellIndexX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(StartPointX, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 ReferenceCellIndexY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(StartPointY, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "LocalCoordinatesOrigin()",
    "kind": "Method",
    "detail": "Function (const TVector<FReal,2>)",
    "insertText": "LocalCoordinatesOrigin(FReal)ReferenceCellIndexX * DirtyElementGridCellSize, (FReal)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const TVector<FReal,2> StartPointLocal { StartPointX - LocalCoordinatesOrigin . X,StartPointY - LocalCoordinatesOrigin . Y } ; const TVector<FReal,2> EndPointLocal { StartPointLocal . X + RayX,StartPointLocal . Y + RayY } ; FReal DeltaX = RayX ; FReal DeltaY = RayY ; FReal AbsDx =)",
    "insertText": "Abs(DeltaX)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FReal AbsDy =)",
    "insertText": "Abs(DeltaY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool DxTooSmall = AbsDx<= UE_SMALL_NUMBER ; bool DyTooSmall = AbsDy<= UE_SMALL_NUMBER ; int64 DeltaCelIndexX ; int64 DeltaCelIndexY ; FReal DtDy = 0 ; FReal DtDx = 0 ;)",
    "insertText": "if(DxTooSmall)"
  },
  {
    "label": "DtDx()",
    "kind": "Method",
    "detail": "Function (DeltaCelIndexX = 1 ; DeltaCelIndexY = 1 ; } else { DeltaCelIndexX = DeltaX> = 0 ? 1 : - 1 ; DeltaCelIndexY = DeltaY> = 0 ? 1 : - 1 ; })",
    "insertText": "DtDx(FReal)"
  },
  {
    "label": "DyTooSmall()",
    "kind": "Method",
    "detail": "Function (DtDy =)",
    "insertText": "DyTooSmall(FReal)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FReal XEndPointExpanded = EndPointLocal .)",
    "insertText": "X(DeltaCelIndexX >= 0 ? QueryHalfExtentsX : -QueryHalfExtentsX)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (FReal YEndPointExpanded = EndPointLocal .)",
    "insertText": "Y(DeltaCelIndexY >= 0 ? QueryHalfExtentsY : -QueryHalfExtentsY)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FReal XStartPointExpanded = StartPointLocal .)",
    "insertText": "X(DeltaCelIndexX >= 0 ? -QueryHalfExtentsX : QueryHalfExtentsX)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (FReal YStartPointExpanded = StartPointLocal .)",
    "insertText": "Y(DeltaCelIndexY >= 0 ? -QueryHalfExtentsY : QueryHalfExtentsY)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 TurningPointForLine1 ; TurningPointForLine1 =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(StartPointLocal.X + (DeltaCelIndexX >= 0 ? QueryHalfExtentsX : -QueryHalfExtentsX), DirtyElementGridCellSizeInv)"
  },
  {
    "label": "QueryHalfExtentsY()",
    "kind": "Method",
    "detail": "Function (FReal X0 = XStartPointExpanded ; FReal Y0 = YStartPointExpanded +)",
    "insertText": "QueryHalfExtentsY(FReal)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (FReal X1 = XStartPointExpanded ; FReal Y1 = YStartPointExpanded ; int64 CurrentCellIndexX0 =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(X0 + LocalCoordinatesOrigin.X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 CurrentCellIndexY0 =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(Y0 + LocalCoordinatesOrigin.Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 CurrentCellIndexX1 =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(X1 + LocalCoordinatesOrigin.X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 CurrentCellIndexY1 =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(Y1 + LocalCoordinatesOrigin.Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 LastCellIndexX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(XEndPointExpanded + LocalCoordinatesOrigin.X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 LastCellIndexY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(YEndPointExpanded + LocalCoordinatesOrigin.Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LastCellIndexY =)",
    "insertText": "Max(CurrentCellIndexY0, LastCellIndexY)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} bool Done = false ;)",
    "insertText": "while(!Done)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (FReal CrossingVerticleCellBorderT = std::numeric_limits<FReal)",
    "insertText": "max()"
  },
  {
    "label": "DtDx()",
    "kind": "Method",
    "detail": "Function (CrossingVerticleCellBorderT =)",
    "insertText": "DtDx((FReal)(CurrentCellIndexX0 - ReferenceCellIndexX + (DeltaCelIndexX > 0 ? 1 : 0)) * DirtyElementGridCellSize - X0)"
  },
  {
    "label": "DtDy()",
    "kind": "Method",
    "detail": "Function (CrossingHorizontalCellBorderT =)",
    "insertText": "DtDy((FReal)(CurrentCellIndexY0 - ReferenceCellIndexY + (DeltaCelIndexY > 0 ? 1 : 0)) * DirtyElementGridCellSize - Y0)"
  },
  {
    "label": "CrossingHorizontalCellBorderT()",
    "kind": "Method",
    "detail": "Function (X0 + =)",
    "insertText": "CrossingHorizontalCellBorderT(1 / DtDx)"
  },
  {
    "label": "CrossingHorizontalCellBorderT()",
    "kind": "Method",
    "detail": "Function (Y0 + =)",
    "insertText": "CrossingHorizontalCellBorderT(1 / DtDy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CurrentCellIndexY0 + = DeltaCelIndexY ; } })",
    "insertText": "for(int64 CurrentFillCellIndexY = CurrentCellIndexY1; CurrentFillCellIndexY * DeltaCelIndexY <= CurrentCellIndexY0 * DeltaCelIndexY; CurrentFillCellIndexY += DeltaCelIndexY)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction((FReal)CurrentCellIndexX0 * DirtyElementGridCellSize, (FReal)CurrentFillCellIndexY * DirtyElementGridCellSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "if(CurrentCellIndexY0 != LastCellIndexY && !DyTooSmall)"
  },
  {
    "label": "CrossingVerticleCellBorderT()",
    "kind": "Method",
    "detail": "Function (X0 + =)",
    "insertText": "CrossingVerticleCellBorderT(1 / DtDx)"
  },
  {
    "label": "CrossingVerticleCellBorderT()",
    "kind": "Method",
    "detail": "Function (Y0 + =)",
    "insertText": "CrossingVerticleCellBorderT(1 / DtDy)"
  },
  {
    "label": "DirtyElementGridCellSize()",
    "kind": "Method",
    "detail": "Function (} else { X0 + =)",
    "insertText": "DirtyElementGridCellSize(FReal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(CurrentCellIndexX1 != LastCellIndexX)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if((CurrentCellIndexX1 - ReferenceCellIndexX) == TurningPointForLine1)"
  },
  {
    "label": "DtDx()",
    "kind": "Method",
    "detail": "Function (CrossingVerticleCellBorderT =)",
    "insertText": "DtDx((FReal)(CurrentCellIndexX1 - ReferenceCellIndexX + (DeltaCelIndexX > 0 ? 1 : 0)) * DirtyElementGridCellSize - X1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!DyTooSmall)"
  },
  {
    "label": "DtDy()",
    "kind": "Method",
    "detail": "Function (CrossingHorizontalCellBorderT =)",
    "insertText": "DtDy((FReal)(CurrentCellIndexY1 - ReferenceCellIndexY + (DeltaCelIndexY > 0 ? 1 : 0)) * DirtyElementGridCellSize - Y1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CrossingHorizontalCellBorderT < CrossingVerticleCellBorderT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentCellIndexY1 + = DeltaCelIndexY ; })",
    "insertText": "if(!DxTooSmall)"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (} } CurrentCellIndexX1 + = DeltaCelIndexX ; } CurrentCellIndexX0 + = DeltaCelIndexX ;)",
    "insertText": "Done(CurrentCellIndexY0 == LastCellIndexY) && (DeltaCelIndexX * CurrentCellIndexX0 > LastCellIndexX * DeltaCelIndexX)"
  },
  {
    "label": "DoForSweepIntersectCells()",
    "kind": "Method",
    "detail": "Function (} } template<FunctionType> void)",
    "insertText": "DoForSweepIntersectCells(const FVec3 QueryHalfExtents, const FVec3& StartPoint, const FVec3& Dir, FReal Length, FReal DirtyElementGridCellSize, FReal DirtyElementGridCellSizeInv, FunctionType InFunction)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FReal AbsDx =)",
    "insertText": "Abs(Dir.X * Length)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FReal AbsDy =)",
    "insertText": "Abs(Dir.Y * Length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool XDirectionDominant = AbsDx> = AbsDy ;)",
    "insertText": "if(AbsDx <= UE_SMALL_NUMBER && AbsDy <= UE_SMALL_NUMBER)"
  },
  {
    "label": "QueryBounds()",
    "kind": "Method",
    "detail": "Function (const FAABB3)",
    "insertText": "QueryBounds(StartPoint- QueryHalfExtents, StartPoint + QueryHalfExtents)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellStartX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(QueryBounds.Min().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellStartY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(QueryBounds.Min().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellEndX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(QueryBounds.Max().X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 CellEndY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(QueryBounds.Max().Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction((FReal)X * DirtyElementGridCellSize, (FReal)Y * DirtyElementGridCellSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(XDirectionDominant)"
  },
  {
    "label": "DoForSweepIntersectCellsImp()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DoForSweepIntersectCellsImp(QueryHalfExtents.Y, QueryHalfExtents.X, StartPoint.Y, StartPoint.X, Dir.Y * Length, Dir.X * Length, DirtyElementGridCellSize, DirtyElementGridCellSizeInv, [&](auto X, auto Y) {InFunction(Y, X); })"
  },
  {
    "label": "TooManyRaycastQueryCells()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "TooManyRaycastQueryCells(const FVec3& StartPoint, const FVec3& Dir, const FReal Length, FReal DirtyElementGridCellSizeInv, int32 DirtyElementMaxGridCellQueryCount)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 FirstCellIndexY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(StartPoint.Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 LastCellIndexX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(EndPoint.X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (int64 LastCellIndexY =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(EndPoint.Y, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (uint64 CellCount =)",
    "insertText": "Abs(FirstCellIndexX - LastCellIndexX) + FMath::Abs(FirstCellIndexY - LastCellIndexY)"
  },
  {
    "label": "GetDirtyCellIndexFromWorldCoordinate()",
    "kind": "Method",
    "detail": "Function (const int64 FirstCellIndexX =)",
    "insertText": "GetDirtyCellIndexFromWorldCoordinate(StartPoint.X, DirtyElementGridCellSizeInv)"
  },
  {
    "label": "LocalCoordinatesOrigin()",
    "kind": "Method",
    "detail": "Function (int64 CurrentCellIndexX = FirstCellIndexX ; int64 CurrentCellIndexY = FirstCellIndexY ; const FVec3)",
    "insertText": "LocalCoordinatesOrigin(FReal)CurrentCellIndexX * DirtyElementGridCellSize, (FReal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool DxTooSmall = AbsDx<= UE_SMALL_NUMBER ; bool DyTooSmall = AbsDy<= UE_SMALL_NUMBER ;)",
    "insertText": "if(DxTooSmall && DyTooSmall)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction(HashCoordinates(StartPoint.X, StartPoint.Y, DirtyElementGridCellSizeInv))"
  },
  {
    "label": "DxTooSmall()",
    "kind": "Method",
    "detail": "Function (} else { DtDx =)",
    "insertText": "DxTooSmall(FReal)"
  },
  {
    "label": "DtDy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtDy(FReal)"
  },
  {
    "label": "InFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InFunction(HashCell(CurrentCellIndexX, CurrentCellIndexY))"
  },
  {
    "label": "DtDx()",
    "kind": "Method",
    "detail": "Function (CrossingVerticleCellBorderT =)",
    "insertText": "DtDx((FReal)(CurrentCellIndexX - FirstCellIndexX + (DeltaCelIndexX > 0 ? 1 : 0)) * DirtyElementGridCellSize - X)"
  },
  {
    "label": "DtDy()",
    "kind": "Method",
    "detail": "Function (CrossingHorizontalCellBorderT =)",
    "insertText": "DtDy((FReal)(CurrentCellIndexY - FirstCellIndexY + (DeltaCelIndexY > 0 ? 1 : 0)) * DirtyElementGridCellSize - Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FReal SmallestT ;)",
    "insertText": "if(CrossingVerticleCellBorderT <= CrossingHorizontalCellBorderT)"
  },
  {
    "label": "SmallestT()",
    "kind": "Method",
    "detail": "Function (X + =)",
    "insertText": "SmallestT(1 / DtDx)"
  },
  {
    "label": "SmallestT()",
    "kind": "Method",
    "detail": "Function (Y + =)",
    "insertText": "SmallestT(1 / DtDy)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DeltaCelIndexX * CurrentCellIndexX > DeltaCelIndexX * LastCellIndexX || DeltaCelIndexY * CurrentCellIndexY > DeltaCelIndexY * LastCellIndexY)"
  }
]