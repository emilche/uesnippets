[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimpleAerodynamicsConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / MathFwd . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { struct FSimpleAerodynamicsConfig {)",
    "insertText": "FSimpleAerodynamicsConfig() : AreaMetresSquared(2.0f) , DragCoefficient(0.1f) , DownforceCoefficient(0.1f)"
  },
  {
    "label": "FSimpleAerodynamicsSim()",
    "kind": "Method",
    "detail": "Function (} float AreaMetresSquared ; float DragCoefficient ; float DownforceCoefficient ; } ; class FSimpleAerodynamicsSim : public TVehicleSystem<FSimpleAerodynamicsConfig> { public :)",
    "insertText": "FSimpleAerodynamicsSim(const FSimpleAerodynamicsConfig* SetupIn)"
  },
  {
    "label": "SetDensityOfMedium()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDensityOfMedium(float DensityIn)"
  },
  {
    "label": "SetDragCoefficient()",
    "kind": "Method",
    "detail": "Function (DensityOfMedium = DensityIn ; } void)",
    "insertText": "SetDragCoefficient(float InCoeffient)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (DragCoefficient = InCoeffient ; EffectiveDragConstant = 0 . 5 f*)",
    "insertText": "Setup()"
  },
  {
    "label": "SetDownforceCoefficient()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDownforceCoefficient(float InCoeffient)"
  },
  {
    "label": "GetDragForceFromVelocity()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDragForceFromVelocity(float VelocityIn)"
  }
]