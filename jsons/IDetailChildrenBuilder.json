[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "IDetailCategoryBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCategoryBuilder"
  },
  {
    "label": "IDetailCustomNodeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCustomNodeBuilder"
  },
  {
    "label": "IDetailGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailGroup"
  },
  {
    "label": "IDetailPropertyRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailPropertyRow"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "IStructureDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStructureDataProvider"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailChildrenBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DetailBuilderTypes . h \" class FDetailWidgetRow ; class FStructOnScope ; class IDetailCategoryBuilder ; class IDetailCustomNodeBuilder ; class IDetailGroup ; class IDetailPropertyRow ; class IPropertyHandle ; class IStructureDataProvider ; class SWidget ; class IDetailChildrenBuilder { public : ~)",
    "insertText": "IDetailChildrenBuilder()"
  },
  {
    "label": "AddCustomBuilder()",
    "kind": "Method",
    "detail": "Function (} IDetailChildrenBuilder&)",
    "insertText": "AddCustomBuilder(TSharedRef<IDetailCustomNodeBuilder> InCustomBuilder)"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (IDetailGroup&)",
    "insertText": "AddGroup(FName GroupName, const FText& LocalizedDisplayName)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (FDetailWidgetRow&)",
    "insertText": "AddCustomRow(const FText& SearchString)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow&)",
    "insertText": "AddProperty(TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "AddExternalObjects()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalObjects(const TArray<UObject*>& Objects, FName UniqueIdName = NAME_None)"
  },
  {
    "label": "AddExternalObjects()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalObjects(const TArray<UObject*>& Objects, const FAddPropertyParams& Params = FAddPropertyParams())"
  },
  {
    "label": "AddExternalObjectProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalObjectProperty(const TArray<UObject*>& Objects, FName PropertyName, const FAddPropertyParams& Params = FAddPropertyParams())"
  },
  {
    "label": "AddExternalStructureProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalStructureProperty(TSharedRef<FStructOnScope> ChildStructure, FName PropertyName, const FAddPropertyParams& Params = FAddPropertyParams())"
  },
  {
    "label": "AddExternalStructureProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalStructureProperty(TSharedPtr<IStructureDataProvider> ChildStructure, FName PropertyName, const FAddPropertyParams& Params = FAddPropertyParams())"
  },
  {
    "label": "AddChildStructureProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddChildStructureProperty(TSharedRef<IPropertyHandle> PropertyHandle, TSharedPtr<IStructureDataProvider> ChildStructure, FName PropertyName, const FAddPropertyParams& Params = FAddPropertyParams(), const FText& DisplayNameOverride = FText())"
  },
  {
    "label": "AddExternalStructure()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalStructure(TSharedRef<FStructOnScope> ChildStructure, FName UniqueIdName = NAME_None)"
  },
  {
    "label": "AddExternalStructure()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddExternalStructure(TSharedPtr<IStructureDataProvider> ChildStructure, FName UniqueIdName = NAME_None)"
  },
  {
    "label": "AddChildStructure()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow*)",
    "insertText": "AddChildStructure(TSharedRef<IPropertyHandle> PropertyHandle, TSharedPtr<IStructureDataProvider> ChildStructure, FName UniqueIdName = NAME_None, const FText& DisplayNameOverride = FText())"
  },
  {
    "label": "AddAllExternalStructureProperties()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<IPropertyHandle>>)",
    "insertText": "AddAllExternalStructureProperties(TSharedRef<FStructOnScope> ChildStructure)"
  },
  {
    "label": "AddAllExternalStructureProperties()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<IPropertyHandle>>)",
    "insertText": "AddAllExternalStructureProperties(TSharedPtr<IStructureDataProvider> ChildStructure)"
  },
  {
    "label": "GenerateStructValueWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateStructValueWidget(TSharedRef<IPropertyHandle> StructPropertyHandle)"
  },
  {
    "label": "GetParentCategory()",
    "kind": "Method",
    "detail": "Function (IDetailCategoryBuilder&)",
    "insertText": "GetParentCategory()"
  },
  {
    "label": "GetParentGroup()",
    "kind": "Method",
    "detail": "Function (IDetailGroup*)",
    "insertText": "GetParentGroup()"
  }
]