[
  {
    "label": "Prof",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Prof"
  },
  {
    "label": "Archetype",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Archetype"
  },
  {
    "label": "PropertiesOfArchetype",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PropertiesOfArchetype"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsArchetype",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsArchetype"
  },
  {
    "label": "MakeArchetypeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeArchetypeState"
  },
  {
    "label": "ArchetypeStateBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchetypeStateBase"
  },
  {
    "label": "ArchetypeMoveConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchetypeMoveConstructor"
  },
  {
    "label": "ArchetypeCopyConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchetypeCopyConstructor"
  },
  {
    "label": "ArchetypeMoveAssign",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchetypeMoveAssign"
  },
  {
    "label": "ArchetypeCopyAssign",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchetypeCopyAssign"
  },
  {
    "label": "ArchetypeDestructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchetypeDestructor"
  },
  {
    "label": "Arch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Arch"
  },
  {
    "label": "Enabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Enabler"
  },
  {
    "label": "NothrowBool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NothrowBool"
  },
  {
    "label": "ExceptionalBool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExceptionalBool"
  },
  {
    "label": "PoisonedHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PoisonedHash"
  },
  {
    "label": "EnabledHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnabledHash"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TYPES_INTERNAL_CONFORMANCE_ARCHETYPE_H_ # define ABSL_TYPES_INTERNAL_CONFORMANCE_ARCHETYPE_H_ # include<cstddef> # include<functional> # include<type_traits> # include<utility> # include \" absl / meta / type_traits . h \" # include \" absl / types / internal / conformance_profile . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace types_internal { template<class Prof,class = void> class Archetype ; template<class Archetype> struct PropertiesOfArchetype ; template<class Prof> struct PropertiesOfArchetype<Archetype<Prof>> { using type = PropertiesOfT<Prof> ; } ; template<class Archetype> using PropertiesOfArchetypeT = PropertiesOfArchetype<Archetype>::type ; template<class T> struct IsArchetype : std::false_type { } ; template<class Prof> struct IsArchetype<Archetype<Prof>> : std::true_type { } ; struct MakeArchetypeState { } ; using ArchetypeState = std::size_t ; template<default_constructible DefaultConstructibleValue> struct ArchetypeStateBase {)",
    "insertText": "static_assert(DefaultConstructibleValue == default_constructible::yes || DefaultConstructibleValue == default_constructible::nothrow, \"\")"
  },
  {
    "label": "ArchetypeStateBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeStateBase() noexcept( DefaultConstructibleValue == default_constructible:: nothrow)"
  },
  {
    "label": "ArchetypeStateBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeStateBase(MakeArchetypeState, ArchetypeState state) noexcept : archetype_state(state)"
  },
  {
    "label": "ArchetypeStateBase()",
    "kind": "Method",
    "detail": "Function (} ArchetypeState archetype_state ; } ; template<> struct ArchetypeStateBase<default_constructible::maybe> {)",
    "insertText": "ArchetypeStateBase()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ArchetypeState archetype_state ; } ; template<default_constructible DefaultConstructibleValue,move_constructible MoveConstructibleValue> struct ArchetypeMoveConstructor : ArchetypeStateBase<DefaultConstructibleValue> {)",
    "insertText": "static_assert(MoveConstructibleValue == move_constructible::yes || MoveConstructibleValue == move_constructible::nothrow, \"\")"
  },
  {
    "label": "ArchetypeMoveConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeMoveConstructor(MakeArchetypeState, ArchetypeState state) noexcept : ArchetypeStateBase<DefaultConstructibleValue>(MakeArchetypeState(), state)"
  },
  {
    "label": "ArchetypeMoveConstructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeMoveConstructor()"
  },
  {
    "label": "ArchetypeMoveConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeMoveConstructor(ArchetypeMoveConstructor&& other) noexcept( MoveConstructibleValue == move_constructible::nothrow) : ArchetypeStateBase<DefaultConstructibleValue>(MakeArchetypeState(), other.archetype_state)"
  },
  {
    "label": "ArchetypeMoveConstructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeMoveConstructor(const ArchetypeMoveConstructor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeMoveConstructor&)",
    "insertText": "operator(ArchetypeMoveConstructor&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeMoveConstructor&)",
    "insertText": "operator(const ArchetypeMoveConstructor&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<default_constructible DefaultConstructibleValue,move_constructible MoveConstructibleValue,copy_constructible CopyConstructibleValue> struct ArchetypeCopyConstructor : ArchetypeMoveConstructor<DefaultConstructibleValue,MoveConstructibleValue> {)",
    "insertText": "static_assert(CopyConstructibleValue == copy_constructible::yes || CopyConstructibleValue == copy_constructible::nothrow, \"\")"
  },
  {
    "label": "ArchetypeCopyConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyConstructor(MakeArchetypeState, ArchetypeState state) noexcept : ArchetypeMoveConstructor<DefaultConstructibleValue, MoveConstructibleValue>(MakeArchetypeState(), state)"
  },
  {
    "label": "ArchetypeCopyConstructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeCopyConstructor()"
  },
  {
    "label": "ArchetypeCopyConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyConstructor(ArchetypeCopyConstructor&&)"
  },
  {
    "label": "ArchetypeCopyConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyConstructor(const ArchetypeCopyConstructor& other) noexcept( CopyConstructibleValue == copy_constructible::nothrow) : ArchetypeMoveConstructor<DefaultConstructibleValue, MoveConstructibleValue>( MakeArchetypeState(), other.archetype_state)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ArchetypeCopyConstructor&)",
    "insertText": "operator(ArchetypeCopyConstructor&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeCopyConstructor&)",
    "insertText": "operator(const ArchetypeCopyConstructor&)"
  },
  {
    "label": "ArchetypeCopyConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyConstructor(const ArchetypeCopyConstructor&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<default_constructible DefaultConstructibleValue,move_constructible MoveConstructibleValue,copy_constructible CopyConstructibleValue,move_assignable MoveAssignableValue> struct ArchetypeMoveAssign : ArchetypeCopyConstructor<DefaultConstructibleValue,MoveConstructibleValue,CopyConstructibleValue> {)",
    "insertText": "static_assert(MoveAssignableValue == move_assignable::yes || MoveAssignableValue == move_assignable::nothrow, \"\")"
  },
  {
    "label": "ArchetypeMoveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeMoveAssign(MakeArchetypeState, ArchetypeState state) noexcept : ArchetypeCopyConstructor<DefaultConstructibleValue, MoveConstructibleValue, CopyConstructibleValue>(MakeArchetypeState(), state)"
  },
  {
    "label": "ArchetypeMoveAssign()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeMoveAssign()"
  },
  {
    "label": "ArchetypeMoveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeMoveAssign(ArchetypeMoveAssign&&)"
  },
  {
    "label": "ArchetypeMoveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeMoveAssign(const ArchetypeMoveAssign&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeMoveAssign&)",
    "insertText": "operator(ArchetypeMoveAssign&& other) noexcept( MoveAssignableValue == move_assignable::nothrow)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this -> archetype_state = other . archetype_state ; return* this ; } ArchetypeMoveAssign&)",
    "insertText": "operator(const ArchetypeMoveAssign&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<default_constructible DefaultConstructibleValue,move_constructible MoveConstructibleValue,copy_constructible CopyConstructibleValue,move_assignable MoveAssignableValue,copy_assignable CopyAssignableValue> struct ArchetypeCopyAssign : ArchetypeMoveAssign<DefaultConstructibleValue,MoveConstructibleValue,CopyConstructibleValue,MoveAssignableValue> {)",
    "insertText": "static_assert(CopyAssignableValue == copy_assignable::yes || CopyAssignableValue == copy_assignable::nothrow, \"\")"
  },
  {
    "label": "ArchetypeCopyAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyAssign(MakeArchetypeState, ArchetypeState state) noexcept : ArchetypeMoveAssign<DefaultConstructibleValue, MoveConstructibleValue, CopyConstructibleValue, MoveAssignableValue>( MakeArchetypeState(), state)"
  },
  {
    "label": "ArchetypeCopyAssign()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeCopyAssign()"
  },
  {
    "label": "ArchetypeCopyAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyAssign(ArchetypeCopyAssign&&)"
  },
  {
    "label": "ArchetypeCopyAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeCopyAssign(const ArchetypeCopyAssign&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeCopyAssign&)",
    "insertText": "operator(ArchetypeCopyAssign&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeCopyAssign&)",
    "insertText": "operator(const ArchetypeCopyAssign& other) noexcept( CopyAssignableValue == copy_assignable::nothrow)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeCopyAssign&)",
    "insertText": "operator(const ArchetypeCopyAssign&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<default_constructible DefaultConstructibleValue,move_constructible MoveConstructibleValue,copy_constructible CopyConstructibleValue,move_assignable MoveAssignableValue,copy_assignable CopyAssignableValue,destructible DestructibleValue> struct ArchetypeDestructor : ArchetypeCopyAssign<DefaultConstructibleValue,MoveConstructibleValue,CopyConstructibleValue,MoveAssignableValue,CopyAssignableValue> {)",
    "insertText": "static_assert(DestructibleValue == destructible::yes || DestructibleValue == destructible::nothrow, \"\")"
  },
  {
    "label": "ArchetypeDestructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeDestructor(MakeArchetypeState, ArchetypeState state) noexcept : ArchetypeCopyAssign<DefaultConstructibleValue, MoveConstructibleValue, CopyConstructibleValue, MoveAssignableValue, CopyAssignableValue>(MakeArchetypeState(), state)"
  },
  {
    "label": "ArchetypeDestructor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArchetypeDestructor()"
  },
  {
    "label": "ArchetypeDestructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeDestructor(ArchetypeDestructor&&)"
  },
  {
    "label": "ArchetypeDestructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArchetypeDestructor(const ArchetypeDestructor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeDestructor&)",
    "insertText": "operator(ArchetypeDestructor&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArchetypeDestructor&)",
    "insertText": "operator(const ArchetypeDestructor&)"
  },
  {
    "label": "ArchetypeDestructor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ArchetypeDestructor() noexcept(DestructibleValue == destructible::nothrow)"
  },
  {
    "label": "MakeArchetype()",
    "kind": "Method",
    "detail": "Function (} ; template<default_constructible DefaultConstructibleValue,move_constructible MoveConstructibleValue,copy_constructible CopyConstructibleValue,move_assignable MoveAssignableValue,copy_assignable CopyAssignableValue,destructible DestructibleValue> using ArchetypeSpecialMembersBase = ArchetypeDestructor<DefaultConstructibleValue,MoveConstructibleValue ! = move_constructible::maybe ? MoveConstructibleValue : move_constructible::nothrow,CopyConstructibleValue,MoveAssignableValue ! = move_assignable::maybe ? MoveAssignableValue : move_assignable::nothrow,CopyAssignableValue,DestructibleValue ! = destructible::maybe ? DestructibleValue : destructible::nothrow> ; template<class Arch> Arch)",
    "insertText": "MakeArchetype(ArchetypeState state)"
  },
  {
    "label": "ShouldDeleteConstructor()",
    "kind": "Method",
    "detail": "Function (} template<class Prof,class T> bool)",
    "insertText": "ShouldDeleteConstructor()"
  },
  {
    "label": "ShouldDeleteAssign()",
    "kind": "Method",
    "detail": "Function (} template<class Prof,class T> bool)",
    "insertText": "ShouldDeleteAssign()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<class Prof,class Enabler> class Archetype : ArchetypeSpecialMembersBase<PropertiesOfT<Prof>::default_constructible_support,PropertiesOfT<Prof>::move_constructible_support,PropertiesOfT<Prof>::copy_constructible_support,PropertiesOfT<Prof>::move_assignable_support,PropertiesOfT<Prof>::copy_assignable_support,PropertiesOfT<Prof>::destructible_support> {)",
    "insertText": "static_assert(std::is_same<Enabler, void>::value, \"An explicit type must not be passed as the second template \" \"argument to 'Archetype`.\")"
  },
  {
    "label": "Archetype()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Archetype()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (template<class T,std::enable_if<ShouldDeleteConstructor<Prof,)",
    "insertText": "T()>::type* = nullptr> Archetype(T&&)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (template<class T,std::enable_if<ShouldDeleteAssign<Prof,)",
    "insertText": "T()>::type* = nullptr> Archetype& operator=(T&&)"
  },
  {
    "label": "Archetype()",
    "kind": "Method",
    "detail": "Function (using ArchetypeSpecialMembersBase<PropertiesOfT<Prof>::default_constructible_support,PropertiesOfT<Prof>::move_constructible_support,PropertiesOfT<Prof>::copy_constructible_support,PropertiesOfT<Prof>::move_assignable_support,PropertiesOfT<Prof>::copy_assignable_support,PropertiesOfT<Prof>::destructible_support>::archetype_state ; private :)",
    "insertText": "Archetype(MakeArchetypeState, ArchetypeState state) noexcept : ArchetypeSpecialMembersBase< PropertiesOfT<Prof>::default_constructible_support, PropertiesOfT<Prof>::move_constructible_support, PropertiesOfT<Prof>::copy_constructible_support, PropertiesOfT<Prof>::move_assignable_support, PropertiesOfT<Prof>::copy_assignable_support, PropertiesOfT<Prof>::destructible_support>(MakeArchetypeState(), state)"
  },
  {
    "label": "Archetype()",
    "kind": "Method",
    "detail": "Function (} Archetype MakeArchetype<)",
    "insertText": "Archetype(ArchetypeState)"
  },
  {
    "label": "Archetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Archetype(Archetype&&)"
  },
  {
    "label": "Archetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Archetype(const Archetype&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Archetype&)",
    "insertText": "operator(Archetype&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Archetype&)",
    "insertText": "operator(const Archetype&)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} ; template<class Prof,absl::enable_if_t<! PropertiesOfT<Prof>::is_swappable,int> = 0> void)",
    "insertText": "swap(Archetype<Prof>&, Archetype<Prof>&)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (template<class Prof,absl::enable_if_t<PropertiesOfT<Prof>::is_swappable,int> = 0> void)",
    "insertText": "swap(Archetype<Prof>& lhs, Archetype<Prof>& rhs) noexcept(PropertiesOfT<Prof>::swappable_support != swappable::yes)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(lhs.archetype_state, rhs.archetype_state)"
  },
  {
    "label": "NothrowBool()",
    "kind": "Method",
    "detail": "Function (} struct NothrowBool {)",
    "insertText": "NothrowBool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NothrowBool&)",
    "insertText": "operator(NothrowBool const&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "NothrowBool()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "NothrowBool(bool const value) noexcept : value(value)"
  },
  {
    "label": "ExceptionalBool()",
    "kind": "Method",
    "detail": "Function (} bool value ; } ; struct ExceptionalBool {)",
    "insertText": "ExceptionalBool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ExceptionalBool&)",
    "insertText": "operator(ExceptionalBool const&)"
  },
  {
    "label": "ExceptionalBool()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ExceptionalBool(bool const value) noexcept : value(value)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (} bool value ; } ; # define)",
    "insertText": "ABSL_TYPES_INTERNAL_OP(enum_name, op) \\ template <class Prof> \\ absl::enable_if_t<!PropertiesOfT<Prof>::is_##enum_name, bool> operator op( \\ const Archetype<Prof>&, const Archetype<Prof>&)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (\\ \\ template<class Prof> \\ absl::enable_if_t<\\ PropertiesOfT<Prof>::is_ # # enum_name,\\ std::conditional<PropertiesOfT<Prof>::enum_name # # _support = = \\ enum_name::nothrow,\\ NothrowBool,ExceptionalBool>>::type \\ operator)",
    "insertText": "op(const Archetype<Prof>& lhs, \\ const Archetype<Prof>& rhs)"
  },
  {
    "label": "make()",
    "kind": "Method",
    "detail": "Function (\\ return absl::conditional_t<\\ PropertiesOfT<Prof>::enum_name # # _support = = enum_name::nothrow,\\ NothrowBool,ExceptionalBool)",
    "insertText": "make(lhs.archetype_state op \\ rhs.archetype_state)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "ABSL_TYPES_INTERNAL_OP(equality_comparable, ==)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TYPES_INTERNAL_OP(inequality_comparable, !=)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TYPES_INTERNAL_OP(less_than_comparable, <)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TYPES_INTERNAL_OP(less_equal_comparable, <=)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TYPES_INTERNAL_OP(greater_equal_comparable, >=)"
  },
  {
    "label": "ABSL_TYPES_INTERNAL_OP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_TYPES_INTERNAL_OP(greater_than_comparable, >)"
  },
  {
    "label": "PoisonedHash()",
    "kind": "Method",
    "detail": "Function (# undef ABSL_TYPES_INTERNAL_OP struct PoisonedHash {)",
    "insertText": "PoisonedHash()"
  },
  {
    "label": "PoisonedHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PoisonedHash(const PoisonedHash&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PoisonedHash&)",
    "insertText": "operator(const PoisonedHash&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class Prof> struct EnabledHash { using argument_type = Archetype<Prof> ; using result_type = std::size_t ; result_type)",
    "insertText": "operator()(const argument_type& arg)"
  }
]