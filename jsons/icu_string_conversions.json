[
  {
    "label": "OnStringConversionError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnStringConversionError"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "OnStringConversionError()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_I18N_ICU_STRING_CONVERSIONS_H_ # define BASE_I18N_ICU_STRING_CONVERSIONS_H_ # include<string> # include \" base / i18n / base_i18n_export . h \" # include \" base / i18n / i18n_constants . h \" # include \" base / strings / string_piece . h \" namespace base { class OnStringConversionError { public : enum Type { FAIL,SKIP,SUBSTITUTE,} ; private :)",
    "insertText": "OnStringConversionError()"
  },
  {
    "label": "UTF16ToCodepage()",
    "kind": "Method",
    "detail": "Function (} ; BASE_I18N_EXPORT bool)",
    "insertText": "UTF16ToCodepage(base::StringPiece16 utf16, const char* codepage_name, OnStringConversionError::Type on_error, std::string* encoded)"
  },
  {
    "label": "CodepageToUTF16()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT bool)",
    "insertText": "CodepageToUTF16(base::StringPiece encoded, const char* codepage_name, OnStringConversionError::Type on_error, std::u16string* utf16)"
  },
  {
    "label": "ConvertToUtf8AndNormalize()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT bool)",
    "insertText": "ConvertToUtf8AndNormalize(base::StringPiece text, const std::string& charset, std::string* result)"
  }
]