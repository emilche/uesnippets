[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FMeshBatchElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchElement"
  },
  {
    "label": "FLocalVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalVertexFactory"
  },
  {
    "label": "FColorVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorVertexBuffer"
  },
  {
    "label": "FDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataType"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FLocalVertexFactoryShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalVertexFactoryShaderParameters"
  },
  {
    "label": "FSkeletalMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshSceneProxy"
  },
  {
    "label": "FDebugName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugName"
  },
  {
    "label": "FLocalVertexFactoryShaderParametersBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalVertexFactoryShaderParametersBase"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" Components . h \" # include \" VertexFactory . h \" # include \" GlobalRenderResources . h \" class FMaterial ; class FSceneView ; struct FMeshBatchElement ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLocalVertexFactoryUniformShaderParameters,ENGINE_API) SHADER_PARAMETER(FIntVector4,VertexFetch_Parameters) SHADER_PARAMETER(int32, PreSkinBaseVertexIndex) SHADER_PARAMETER(uint32,LODLightmapDataIndex) SHADER_PARAMETER_SRV(Buffer<float2>, VertexFetch_TexCoordBuffer) SHADER_PARAMETER_SRV(Buffer<float>, VertexFetch_PositionBuffer) SHADER_PARAMETER_SRV(Buffer<float>, VertexFetch_PreSkinPositionBuffer) SHADER_PARAMETER_SRV(Buffer<float4>, VertexFetch_PackedTangentsBuffer) SHADER_PARAMETER_SRV(Buffer<float4>, VertexFetch_ColorComponentsBuffer) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLocalVertexFactoryLooseParameters,) SHADER_PARAMETER(uint32, FrameNumber) SHADER_PARAMETER_SRV(Buffer<float>, GPUSkinPassThroughPositionBuffer) SHADER_PARAMETER_SRV(Buffer<float>, GPUSkinPassThroughPreviousPositionBuffer) SHADER_PARAMETER_SRV(Buffer<float4>, GPUSkinPassThroughPreSkinnedTangentBuffer) END_GLOBAL_SHADER_PARAMETER_STRUCT() extern ENGINE_API void GetLocalVFUniformShaderParameters( FLocalVertexFactoryUniformShaderParameters& UniformParameters, const class FLocalVertexFactory* VertexFactory, uint32 LODLightmapDataIndex, class FColorVertexBuffer* OverrideColorVertexBuffer, int32 BaseVertexIndex, int32 PreSkinBaseVertexIndex)"
  },
  {
    "label": "CreateLocalVFUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TUniformBufferRef<FLocalVertexFactoryUniformShaderParameters>)",
    "insertText": "CreateLocalVFUniformBuffer(const class FLocalVertexFactory* VertexFactory, uint32 LODLightmapDataIndex, class FColorVertexBuffer* OverrideColorVertexBuffer, int32 BaseVertexIndex, int32 PreSkinBaseVertexIndex)"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE_API()",
    "kind": "Method",
    "detail": "Function (class FLocalVertexFactory : public FVertexFactory {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE_API(FLocalVertexFactory, ENGINE_API)"
  },
  {
    "label": "FLocalVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLocalVertexFactory(ERHIFeatureLevel::Type InFeatureLevel, const char* InDebugName) : FVertexFactory(InFeatureLevel) , ColorStreamIndex(INDEX_NONE) , DebugName(InDebugName)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} struct FDataType : public FStaticMeshDataType { FVertexStreamComponent PreSkinPositionComponent ; FRHIShaderResourceView* PreSkinPositionComponentSRV = nullptr ; # if WITH_EDITORONLY_DATA const class UStaticMesh* StaticMesh = nullptr ; bool bIsCoarseProxy = false ; # endif } ; bool)",
    "insertText": "ShouldCompilePermutation(const FVertexFactoryShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FVertexFactoryShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ValidateCompiledResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCompiledResult(const FVertexFactoryType* Type, EShaderPlatform Platform, const FShaderParameterMap& ParameterMap, TArray<FString>& OutErrors)"
  },
  {
    "label": "GetPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "GetVertexElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexElements(ERHIFeatureLevel::Type FeatureLevel, EVertexInputStreamType InputStreamType, bool bSupportsManualVertexFetch, FDataType& Data, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(FRHICommandListBase& RHICmdList, const FDataType& InData)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FLocalVertexFactory& Other)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (UniformBuffer .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetStreamSource(ColorStreamIndex, ColorVertexBuffer->VertexBufferRHI, 0)"
  },
  {
    "label": "GetColorOverrideStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetColorOverrideStream(const FVertexBuffer* ColorVertexBuffer, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VertexStreams .)",
    "insertText": "Add(FVertexInputStream(ColorStreamIndex, 0, ColorVertexBuffer->VertexBufferRHI))"
  },
  {
    "label": "GetPositionsSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetPositionsSRV()"
  },
  {
    "label": "GetTangentsSRV()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderResourceView*)",
    "insertText": "GetTangentsSRV()"
  },
  {
    "label": "IsCoarseProxyMesh()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsCoarseProxyMesh()"
  },
  {
    "label": "FDebugName()",
    "kind": "Method",
    "detail": "Function (FDataType Data ; TUniformBufferRef<FLocalVertexFactoryUniformShaderParameters> UniformBuffer ; TUniformBufferRef<FLocalVertexFactoryLooseParameters> LooseParametersUniformBuffer ; int32 ColorStreamIndex ; bool bGPUSkinPassThrough = false ; struct FDebugName {)",
    "insertText": "FDebugName(const char* InDebugName) #if !UE_BUILD_SHIPPING : DebugName(InDebugName)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} private : # if ! UE_BUILD_SHIPPING const char* DebugName ; # endif } DebugName ; } ; class FLocalVertexFactoryShaderParametersBase : public FVertexFactoryShaderParameters {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FLocalVertexFactoryShaderParametersBase, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "GetElementShaderBindingsBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementShaderBindingsBase(const class FSceneInterface* Scene, const FSceneView* View, const FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const FVertexFactory* VertexFactory, const FMeshBatchElement& BatchElement, FRHIUniformBuffer* VertexFactoryUniformBuffer, FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "FLocalVertexFactoryShaderParametersBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLocalVertexFactoryShaderParametersBase() : bAnySpeedTreeParamIsBound(false)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(FShaderParameter, LODParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(bool, bAnySpeedTreeParamIsBound)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FLocalVertexFactoryShaderParameters : public FLocalVertexFactoryShaderParametersBase {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FLocalVertexFactoryShaderParameters, NonVirtual)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementShaderBindings(const FSceneInterface* Scene, const FSceneView* View, const FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const FVertexFactory* VertexFactory, const FMeshBatchElement& BatchElement, FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, IsGPUSkinPassThrough)"
  }
]