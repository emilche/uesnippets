[
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FComputeBufferDetail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputeBufferDetail"
  },
  {
    "label": "FComputeBufferReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeBufferReader"
  },
  {
    "label": "FComputeBufferWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeBufferWriter"
  },
  {
    "label": "FComputeBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeBuffer"
  },
  {
    "label": "FParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParams"
  },
  {
    "label": "FWorkerComputeSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerComputeSocket"
  },
  {
    "label": "FReaderRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReaderRef"
  },
  {
    "label": "FComputeBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include<memory> struct FHeader ; struct FComputeBufferDetail ; class FComputeBufferReader ; class FComputeBufferWriter ; class FComputeBuffer { public : const int MaxReaders = 1 6 ; const int MaxChunks = 1 6 ; const size_t MaxNameLength = 2 5 6 ; struct FParams { const char* Name = nullptr ; int NumChunks = 2 ; int ChunkLength = 5 1 2* 1 0 2 4 ; int NumReaders = 1 ; } ;)",
    "insertText": "FComputeBuffer()"
  },
  {
    "label": "FComputeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeBuffer(const FComputeBuffer& Other)"
  },
  {
    "label": "FComputeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeBuffer(FComputeBuffer&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeBuffer&)",
    "insertText": "operator(const FComputeBuffer& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeBuffer&)",
    "insertText": "operator(FComputeBuffer&& Other)"
  },
  {
    "label": "CreateNew()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateNew(const FParams& Params)"
  },
  {
    "label": "OpenExisting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenExisting(const char* Name)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CreateWriter()",
    "kind": "Method",
    "detail": "Function (FComputeBufferWriter)",
    "insertText": "CreateWriter()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (private : class FWorkerComputeSocket ; FComputeBufferDetail* Detail ; const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "FComputeBufferReader()",
    "kind": "Method",
    "detail": "Function (} ; class FComputeBufferReader { public :)",
    "insertText": "FComputeBufferReader()"
  },
  {
    "label": "FComputeBufferReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeBufferReader(const FComputeBufferReader& Other)"
  },
  {
    "label": "FComputeBufferReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeBufferReader(FComputeBufferReader&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeBufferReader&)",
    "insertText": "operator(const FComputeBufferReader& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeBufferReader&)",
    "insertText": "operator(FComputeBufferReader&& Other)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "AdvanceReadPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceReadPosition(size_t Size)"
  },
  {
    "label": "GetMaxReadSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxReadSize()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Read(void* Buffer, size_t MaxSize, int TimeoutMs = -1)"
  },
  {
    "label": "WaitToRead()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "WaitToRead(size_t MinSize, int TimeoutMs = -1)"
  },
  {
    "label": "FComputeBufferReader()",
    "kind": "Method",
    "detail": "Function (private : struct FReaderRef ; class FComputeBuffer ; class FWorkerComputeSocket ; FComputeBufferDetail* Detail ; int ReaderIdx ;)",
    "insertText": "FComputeBufferReader(FComputeBufferDetail* Detail, int ReaderIdx)"
  },
  {
    "label": "FComputeBufferWriter()",
    "kind": "Method",
    "detail": "Function (} ; class FComputeBufferWriter { public :)",
    "insertText": "FComputeBufferWriter()"
  },
  {
    "label": "FComputeBufferWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeBufferWriter(const FComputeBufferWriter& Other)"
  },
  {
    "label": "FComputeBufferWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeBufferWriter(FComputeBufferWriter&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeBufferWriter&)",
    "insertText": "operator(const FComputeBufferWriter& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeBufferWriter&)",
    "insertText": "operator(FComputeBufferWriter&& Other)"
  },
  {
    "label": "AdvanceWritePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceWritePosition(size_t Size)"
  },
  {
    "label": "GetMaxWriteSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxWriteSize()"
  },
  {
    "label": "GetChunkMaxLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetChunkMaxLength()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Write(const void* Buffer, size_t MaxSize, int TimeoutMs = -1)"
  },
  {
    "label": "WaitToWrite()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "WaitToWrite(size_t MinSize, int TimeoutMs = -1)"
  },
  {
    "label": "FComputeBufferWriter()",
    "kind": "Method",
    "detail": "Function (private : class FComputeBuffer ; class FWorkerComputeSocket ; FComputeBufferDetail* Detail ;)",
    "insertText": "FComputeBufferWriter(FComputeBufferDetail* Detail)"
  }
]