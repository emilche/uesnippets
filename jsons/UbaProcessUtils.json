[
  {
    "label": "ParseArguments()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaStringBuffer . h \" namespace uba { template<CharType,Func> bool)",
    "insertText": "ParseArguments(const CharType* arguments, u64 argumentsLen, const Func& argumentFunc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const CharType* argStart = arguments ; bool isInArg = false ; bool isInQuotes = false ; bool isEnd =* arguments = = 0 ; CharType currentChar = 0 ; CharType lastChar = 0 ; bool isBackslashOwned = false ;)",
    "insertText": "for(const CharType* it = arguments; !isEnd; lastChar = currentChar, ++it)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (bool pastEnd =)",
    "insertText": "u64(it - arguments)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (isEnd = pastEnd | | currentChar = = 0 ;)",
    "insertText": "if(isEnd || currentChar == ' ' || currentChar == '\\t' || currentChar == '\\n')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const CharType* argIt = argStart ; const CharType* argEnd = it ;)",
    "insertText": "if((pastEnd || *argEnd == '\\n') && argStart != argEnd && *(argEnd-1) == '\\r')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CharType arg [ 1 6* 1 0 2 4 ] ; CharType* argWrite = arg ; CharType lastChar2 = 0 ; isBackslashOwned = false ;)",
    "insertText": "while(argIt != argEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastChar2 = 0 ; + + argIt ; continue ; })",
    "insertText": "if(*argIt == '\\\\' && lastChar2 == '\\\\')"
  },
  {
    "label": "argumentFunc()",
    "kind": "Method",
    "detail": "Function (* argWrite = 0 ;)",
    "insertText": "argumentFunc(arg, u32(argWrite - arg))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} isInArg = false ; isBackslashOwned = false ; continue ; })",
    "insertText": "if(!isInArg)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (isInArg = true ; argStart = it ;)",
    "insertText": "if(currentChar == '\\\"')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(*it == '\\\"')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (isInQuotes = ! isInQuotes ; })",
    "insertText": "if(*it == '\\\\' && lastChar == '\\\\')"
  }
]