[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChaosScopedDurationTimeLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosScopedDurationTimeLogger"
  },
  {
    "label": "FScopedChaosPerfTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedChaosPerfTest"
  },
  {
    "label": "FChaosScopedDurationTimeLogger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / OutputDevice . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # ifndef CHAOS_PERF_TEST_ENABLED # define CHAOS_PERF_TEST_ENABLED 1 # endif # if CHAOS_PERF_TEST_ENABLED enum class EChaosPerfUnits { S,Ms,Us,Num } ; class FChaosScopedDurationTimeLogger { public :)",
    "insertText": "FChaosScopedDurationTimeLogger(const TCHAR* InLabel) : Label(InLabel) , Device(GLog) , Accumulator(0.0) , Timer(Accumulator)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (Timer .)",
    "insertText": "Start()"
  },
  {
    "label": "FChaosScopedDurationTimeLogger()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosScopedDurationTimeLogger()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const float Multipliers [ static_cast<)",
    "insertText": "int(EChaosPerfUnits::Num)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEXT(\"s\"), TEXT(\"ms\"), TEXT(\"us\")"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (Timer .)",
    "insertText": "Stop()"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Device ->)",
    "insertText": "Logf(TEXT(\"%s - %s: %f%s\"), GlobalLabel, Label, Accumulator * Multipliers[static_cast<int>(GlobalUnits)], Units[static_cast<int>(GlobalUnits)])"
  },
  {
    "label": "FScopedChaosPerfTest()",
    "kind": "Method",
    "detail": "Function (} } const TCHAR* GlobalLabel ; EChaosPerfUnits GlobalUnits ; const TCHAR* Label ; FOutputDevice* Device ; double Accumulator ; FDurationTimer Timer ; } ; struct FScopedChaosPerfTest {)",
    "insertText": "FScopedChaosPerfTest(const TCHAR* InLabel, EChaosPerfUnits Units)"
  },
  {
    "label": "FScopedChaosPerfTest()",
    "kind": "Method",
    "detail": "Function (FChaosScopedDurationTimeLogger::GlobalLabel = InLabel ; FChaosScopedDurationTimeLogger::GlobalUnits = Units ; } ~)",
    "insertText": "FScopedChaosPerfTest()"
  },
  {
    "label": "CHAOS_PERF_TEST()",
    "kind": "Method",
    "detail": "Function (FChaosScopedDurationTimeLogger::GlobalLabel = nullptr ; } } ; # define)",
    "insertText": "CHAOS_PERF_TEST(x, units) FScopedChaosPerfTest Scope_##x(TEXT(#x), units)"
  },
  {
    "label": "CHAOS_SCOPED_TIMER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHAOS_SCOPED_TIMER(x) FChaosScopedDurationTimeLogger Timer_##x(TEXT(#x))"
  }
]