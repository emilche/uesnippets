[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Internationalization / Text . h \" # include \" SGraphPin . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" class SWidget ; class UEdGraphPin ; class SGraphPinString : public SGraphPin { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPinString)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj)"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "GetTypeInValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTypeInValue()"
  },
  {
    "label": "SetTypeInValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTypeInValue(const FText& NewTypeInValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetDefaultValueIsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultValueIsReadOnly()"
  },
  {
    "label": "GenerateComboBoxEntry()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "GenerateComboBoxEntry(TSharedPtr<FString> Value)"
  },
  {
    "label": "HandleComboBoxSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleComboBoxSelectionChanged(TSharedPtr<FString> Value, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "TryBuildComboBoxWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TryBuildComboBoxWidget()"
  }
]