[
  {
    "label": "VideoFramePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFramePair"
  },
  {
    "label": "VideoFramesStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFramesStats"
  },
  {
    "label": "VideoQualityStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoQualityStats"
  },
  {
    "label": "CollectedCallStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollectedCallStats"
  },
  {
    "label": "CollectedAudioReceiveStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollectedAudioReceiveStats"
  },
  {
    "label": "CollectedVideoSendStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollectedVideoSendStats"
  },
  {
    "label": "CollectedVideoReceiveStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CollectedVideoReceiveStats"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_PERFORMANCE_STATS_H_ # define TEST_SCENARIO_PERFORMANCE_STATS_H_ # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_frame_buffer . h \" # include \" rtc_base / numerics / event_rate_counter . h \" # include \" rtc_base / numerics / sample_stats . h \" namespace webrtc { namespace test { struct VideoFramePair { rtc::scoped_refptr<VideoFrameBuffer> captured ; rtc::scoped_refptr<VideoFrameBuffer> decoded ; Timestamp capture_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp decoded_time =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "AddFrameInfo()",
    "kind": "Method",
    "detail": "Function (int layer_id = 0 ; int capture_id = 0 ; int decode_id = 0 ; int repeated = 0 ; } ; struct VideoFramesStats { int count = 0 ; SampleStats<double> pixels ; SampleStats<double> resolution ; EventRateCounter frames ; void)",
    "insertText": "AddFrameInfo(const VideoFrameBuffer& frame, Timestamp at_time)"
  },
  {
    "label": "AddStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStats(const VideoFramesStats& other)"
  },
  {
    "label": "AddStats()",
    "kind": "Method",
    "detail": "Function (} ; struct VideoQualityStats { int lost_count = 0 ; int freeze_count = 0 ; VideoFramesStats capture ; VideoFramesStats render ; SampleStats<TimeDelta> capture_to_decoded_delay ; SampleStats<TimeDelta> end_to_end_delay ; SampleStats<double> psnr ; SampleStats<double> psnr_with_freeze ; SampleStats<double> skipped_between_rendered ; SampleStats<TimeDelta> freeze_duration ; SampleStats<TimeDelta> time_between_freezes ; void)",
    "insertText": "AddStats(const VideoQualityStats& other)"
  }
]