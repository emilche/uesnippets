[
  {
    "label": "EchoAudibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EchoAudibility"
  },
  {
    "label": "EchoAudibility()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_ECHO_AUDIBILITY_H_ # define MODULES_AUDIO_PROCESSING_AEC3_ECHO_AUDIBILITY_H_ # include<stddef . h> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / block_buffer . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / aec3 / spectrum_buffer . h \" # include \" modules / audio_processing / aec3 / stationarity_estimator . h \" namespace webrtc { class EchoAudibility { public :)",
    "insertText": "EchoAudibility(bool use_render_stationarity_at_init)"
  },
  {
    "label": "EchoAudibility()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EchoAudibility()"
  },
  {
    "label": "EchoAudibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EchoAudibility(const EchoAudibility&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EchoAudibility&)",
    "insertText": "operator(const EchoAudibility&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const RenderBuffer& render_buffer, rtc::ArrayView<const float> average_reverb, int min_channel_delay_blocks, bool external_delay_seen)"
  },
  {
    "label": "GetResidualEchoScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResidualEchoScaling(bool filter_has_had_time_to_converge, rtc::ArrayView<float> residual_scaling)"
  },
  {
    "label": "IsBlockStationary()",
    "kind": "Method",
    "detail": "Function (residual_scaling [ band ] = 0 . f ; } else { residual_scaling [ band ] = 1 . 0 f ; } } } bool)",
    "insertText": "IsBlockStationary()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateRenderStationarityFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderStationarityFlags(const RenderBuffer& render_buffer, rtc::ArrayView<const float> average_reverb, int delay_blocks)"
  },
  {
    "label": "UpdateRenderNoiseEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderNoiseEstimator(const SpectrumBuffer& spectrum_buffer, const BlockBuffer& block_buffer, bool external_delay_seen)"
  },
  {
    "label": "IsRenderTooLow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderTooLow(const BlockBuffer& block_buffer)"
  }
]