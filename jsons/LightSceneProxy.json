[
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewMatrices"
  },
  {
    "label": "FLightRenderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightRenderParameters"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FWholeSceneProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWholeSceneProjectedShadowInitializer"
  },
  {
    "label": "FPerObjectProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerObjectProjectedShadowInitializer"
  },
  {
    "label": "FShadowCascadeSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowCascadeSettings"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "UTextureLightProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureLightProfile"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "ELightShaderParameterFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightShaderParameterFlags"
  },
  {
    "label": "FLightSceneProxyFixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxyFixLayout"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FStaticShadowDepthMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticShadowDepthMap"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FLightSceneProxyFixLayout()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GameFramework / Actor . h \" # include \" Math / Color . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" UObject / NameTypes . h \" class ULightComponent ; class FMaterialRenderProxy ; struct FViewMatrices ; struct FLightRenderParameters ; class FSceneView ; class FSceneViewFamily ; class FWholeSceneProjectedShadowInitializer ; class FPerObjectProjectedShadowInitializer ; class FShadowCascadeSettings ; class FRHICommandList ; class FLightSceneInfo ; class UTextureLightProfile ; class FTexture ; enum ELightShaderParameterFlags { RectAsSpotLight = 1,} ; class FLightSceneProxyFixLayout { public : ~)",
    "insertText": "FLightSceneProxyFixLayout()"
  },
  {
    "label": "FLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (} ; class FLightSceneProxy : public FLightSceneProxyFixLayout { public :)",
    "insertText": "FLightSceneProxy(const ULightComponent* InLightComponent)"
  },
  {
    "label": "FLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLightSceneProxy()"
  },
  {
    "label": "AffectsBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AffectsBounds(const FBoxSphereBounds& Bounds)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRadius()"
  },
  {
    "label": "GetDirectionalLightDistanceFadeParameters()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetDirectionalLightDistanceFadeParameters(ERHIFeatureLevel::Type InFeatureLevel, bool bPrecomputedLightingIsValid, int32 MaxNearCascades)"
  },
  {
    "label": "GetDirectionalLightForwardShadingPriority()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetDirectionalLightForwardShadingPriority()"
  },
  {
    "label": "GetLightPositionForLightShafts()",
    "kind": "Method",
    "detail": "Function (OutOcclusionMaskDarkness = 0 ; OutOcclusionDepthRange = 1 ; return false ; } FVector)",
    "insertText": "GetLightPositionForLightShafts(FVector ViewOrigin)"
  },
  {
    "label": "GetWholeSceneProjectedShadowInitializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetWholeSceneProjectedShadowInitializer(const FSceneViewFamily& ViewFamily, TArray<FWholeSceneProjectedShadowInitializer, TInlineAllocator<6> >& OutInitializers)"
  },
  {
    "label": "UseCSMForDynamicObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCSMForDynamicObjects()"
  },
  {
    "label": "GetVSMTexelDitherScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVSMTexelDitherScale()"
  },
  {
    "label": "GetShadowSplitBoundsDepthRange()",
    "kind": "Method",
    "detail": "Function (} FSphere)",
    "insertText": "GetShadowSplitBoundsDepthRange(const FSceneView& View, FVector ViewOrigin, float SplitNear, float SplitFar, FShadowCascadeSettings* OutCascadeSettings)"
  },
  {
    "label": "GetScissorRect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetScissorRect(FIntRect& ScissorRect, const FSceneView& View, const FIntRect& ViewRect)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetScissorRect(FRHICommandList& RHICmdList, const FSceneView& View, const FIntRect& ViewRect, FIntRect* OutScissorRect = nullptr)"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (} FVector4)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetLightFunctionMaterial()",
    "kind": "Method",
    "detail": "Function (const FMaterialRenderProxy*)",
    "insertText": "GetLightFunctionMaterial()"
  },
  {
    "label": "GetOwnerNameOrLabel()",
    "kind": "Method",
    "detail": "Function (bSelected = bNewSelected ; } # if ACTOR_HAS_LABELS const FString&)",
    "insertText": "GetOwnerNameOrLabel()"
  },
  {
    "label": "GetLevelName()",
    "kind": "Method",
    "detail": "Function (} # endif FName)",
    "insertText": "GetLevelName()"
  },
  {
    "label": "GetMaxDrawDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDrawDistance()"
  },
  {
    "label": "GetOuterSpaceLuminance()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetOuterSpaceLuminance()"
  },
  {
    "label": "GetAtmosphereTransmittanceTowardSun()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetAtmosphereTransmittanceTowardSun()"
  },
  {
    "label": "GetSunIlluminanceAccountingForSkyAtmospherePerPixelTransmittance()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetSunIlluminanceAccountingForSkyAtmospherePerPixelTransmittance()"
  },
  {
    "label": "GetPerPixelTransmittanceEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPerPixelTransmittanceEnabled()"
  },
  {
    "label": "GetSunLightHalfApexAngleRadian()",
    "kind": "Method",
    "detail": "Function (const float SunOnEarthApexAngleDegree = 0 . 5 4 5 f ; return 0 . 5 f* SunOnEarthApexAngleDegree* UE_PI / 1 8 0 . 0 f ; } float)",
    "insertText": "GetSunLightHalfApexAngleRadian()"
  },
  {
    "label": "GetCastShadowsOnClouds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCastShadowsOnClouds()"
  },
  {
    "label": "HasValidLightFunctionAtlasSlot()",
    "kind": "Method",
    "detail": "Function (LightFunctionAtlasLightIndex = LightIndex ; } bool)",
    "insertText": "HasValidLightFunctionAtlasSlot()"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const FLinearColor& InColor)"
  }
]