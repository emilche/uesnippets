[
  {
    "label": "CompoundPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompoundPacket"
  },
  {
    "label": "CompoundPacket()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_COMPOUND_PACKET_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_COMPOUND_PACKET_H_ # include<memory> # include<vector> # include \" modules / rtp_rtcp / source / rtcp_packet . h \" namespace webrtc { namespace rtcp { class CompoundPacket : public RtcpPacket { public :)",
    "insertText": "CompoundPacket()"
  },
  {
    "label": "CompoundPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompoundPacket(const CompoundPacket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CompoundPacket&)",
    "insertText": "operator(const CompoundPacket&)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(std::unique_ptr<RtcpPacket> packet)"
  },
  {
    "label": "BlockLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "BlockLength()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  }
]