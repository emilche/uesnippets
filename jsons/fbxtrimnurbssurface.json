[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_TRIM_NURBS_SURFACE_H_ # define _FBXSDK_SCENE_GEOMETRY_TRIM_NURBS_SURFACE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / scene / geometry / fbxgeometry . h> # include<fbxsdk / scene / geometry / fbxnurbscurve . h> # include<fbxsdk / scene / geometry / fbxnurbssurface . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxBoundary : public FbxGeometry {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxBoundary, FbxGeometry)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (public : const char* sOuterFlag ; FbxPropertyT<FbxBool> OuterFlag ; void)",
    "insertText": "AddCurve(FbxNurbsCurve* pCurve)"
  },
  {
    "label": "GetCurveCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCurveCount()"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (FbxNurbsCurve*)",
    "insertText": "GetCurve(int pIndex)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute::EType)",
    "insertText": "GetAttributeType()"
  },
  {
    "label": "IsPointInControlHull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInControlHull(const FbxVector4& pPoint)"
  },
  {
    "label": "ComputePointInBoundary()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "ComputePointInBoundary()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "ClearCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurves()"
  },
  {
    "label": "CopyCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurves(FbxBoundary const& pOther)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(bool mustClosed = true)"
  },
  {
    "label": "IsCounterClockwise()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCounterClockwise()"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "LineSegmentIntersect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineSegmentIntersect(const FbxVector4 & pStart1, const FbxVector4 & pEnd1, const FbxVector4 & pStart2, const FbxVector4 & pEnd2)"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FBXSDK_DLL FbxTrimNurbsSurface : public FbxGeometry {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxTrimNurbsSurface,FbxGeometry)"
  },
  {
    "label": "GetTrimRegionCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTrimRegionCount()"
  },
  {
    "label": "BeginTrimRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrimRegion()"
  },
  {
    "label": "EndTrimRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTrimRegion()"
  },
  {
    "label": "AddBoundary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddBoundary(FbxBoundary* pBoundary)"
  },
  {
    "label": "GetBoundary()",
    "kind": "Method",
    "detail": "Function (FbxBoundary*)",
    "insertText": "GetBoundary(int pIndex, int pRegionIndex = 0)"
  },
  {
    "label": "GetBoundaryCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBoundaryCount(int pRegionIndex = 0)"
  },
  {
    "label": "SetNurbsSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNurbsSurface(const FbxNurbsSurface* pNurbs)"
  },
  {
    "label": "GetNurbsSurface()",
    "kind": "Method",
    "detail": "Function (FbxNurbsSurface*)",
    "insertText": "GetNurbsSurface()"
  },
  {
    "label": "SetFlipNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlipNormals(bool pFlip)"
  },
  {
    "label": "GetFlipNormals()",
    "kind": "Method",
    "detail": "Function (mFlipNormals = pFlip ; } bool)",
    "insertText": "GetFlipNormals()"
  },
  {
    "label": "SetControlPointAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointAt(const FbxVector4 &pCtrlPoint, const FbxVector4 &pNormal , int pIndex, bool pI2DSearch = false)"
  },
  {
    "label": "SetControlPointAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointAt(const FbxVector4 &pCtrlPoint, int pIndex)"
  },
  {
    "label": "SetControlPointAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointAt(pCtrlPoint, pIndex)"
  },
  {
    "label": "GetControlPoints()",
    "kind": "Method",
    "detail": "Function (} FbxVector4*)",
    "insertText": "GetControlPoints(FbxStatus* pStatus = NULL)"
  },
  {
    "label": "ClearBoundaries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBoundaries()"
  },
  {
    "label": "CopyBoundaries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBoundaries(FbxTrimNurbsSurface const& pOther)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(int pRegion, bool mustClosed = true)"
  },
  {
    "label": "RebuildRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildRegions()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  }
]