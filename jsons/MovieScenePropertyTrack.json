[
  {
    "label": "UMovieScenePropertyTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScenePropertyTrack"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FMovieScenePropertyTrackEntityImportHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePropertyTrackEntityImportHelper"
  },
  {
    "label": "TPropertyTrackEntityImportHelperImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyTrackEntityImportHelperImpl"
  },
  {
    "label": "FPropertyTrackEntityImportHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTrackEntityImportHelper"
  },
  {
    "label": "FPropertyTrackEntityImportHelperParamsImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTrackEntityImportHelperParamsImpl"
  },
  {
    "label": "TPropertyTrackWithOverridableChannelsEntityImportHelperImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyTrackWithOverridableChannelsEntityImportHelperImpl"
  },
  {
    "label": "FPropertyTrackWithOverridableChannelsEntityImportHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTrackWithOverridableChannelsEntityImportHelper"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Channels / IMovieSceneChannelOverrideProvider . h \" # include \" Channels / MovieSceneSectionChannelOverrideRegistry . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / IMovieSceneEntityProvider . h \" # include \" EntitySystem / MovieSceneEntityBuilder . h \" # include \" EntitySystem / MovieScenePropertyBinding . h \" # include \" MovieSceneCommonHelpers . h \" # include \" MovieSceneNameableTrack . h \" # include \" MovieSceneTracksComponentTypes . h \" # include \" Systems / MovieScenePiecewiseBoolBlenderSystem . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieScenePropertyTrack . generated . h \")",
    "insertText": "UCLASS(abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: MOVIESCENETRACKS_API virtual void RemoveAllAnimationData()"
  },
  {
    "label": "HasSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSection(const UMovieSceneSection& Section)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSection(UMovieSceneSection& Section)"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSection(UMovieSceneSection& Section)"
  },
  {
    "label": "RemoveSectionAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSectionAt(int32 SectionIndex)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (const TArray<UMovieSceneSection*>&)",
    "insertText": "GetAllSections()"
  },
  {
    "label": "GetDefaultDisplayName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FText)",
    "insertText": "GetDefaultDisplayName()"
  },
  {
    "label": "GetDisplayNameToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameToolTipText(const FMovieSceneLabelParams& LabelParams)"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor(const FMovieSceneLabelParams& LabelParams)"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SetPropertyNameAndPath()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetPropertyNameAndPath(FName InPropertyName, const FString& InPropertyPath)"
  },
  {
    "label": "GetPropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPropertyName()"
  },
  {
    "label": "FindAllSections()",
    "kind": "Method",
    "detail": "Function (} TArray<UMovieSceneSection*,TInlineAllocator<4>>)",
    "insertText": "FindAllSections(FFrameNumber Time)"
  },
  {
    "label": "FindSection()",
    "kind": "Method",
    "detail": "Function (class UMovieSceneSection*)",
    "insertText": "FindSection(FFrameNumber Time)"
  },
  {
    "label": "FindOrExtendSection()",
    "kind": "Method",
    "detail": "Function (class UMovieSceneSection*)",
    "insertText": "FindOrExtendSection(FFrameNumber Time, float& OutWeight)"
  },
  {
    "label": "FindOrAddSection()",
    "kind": "Method",
    "detail": "Function (class UMovieSceneSection*)",
    "insertText": "FindOrAddSection(FFrameNumber Time, bool& bSectionAdded)"
  },
  {
    "label": "SetSectionToKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionToKey(UMovieSceneSection* Section)"
  },
  {
    "label": "GetSectionToKey()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "GetSectionToKey()"
  },
  {
    "label": "PopulateEvaluationField()",
    "kind": "Method",
    "detail": "Function (} ; struct FMovieScenePropertyTrackEntityImportHelper { const int32 SectionPropertyValueImportingID ; const int32 SectionEditConditionToggleImportingID ; void)",
    "insertText": "PopulateEvaluationField(UMovieSceneSection& Section, const TRange<FFrameNumber>& EffectiveRange, const FMovieSceneEvaluationFieldEntityMetaData& InMetaData, FMovieSceneEntityComponentFieldBuilder* OutFieldBuilder)"
  },
  {
    "label": "IsPropertyValueID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyValueID(const UE::MovieScene::FEntityImportParams& Params)"
  },
  {
    "label": "IsEditConditionToggleID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditConditionToggleID(const UE::MovieScene::FEntityImportParams& Params)"
  },
  {
    "label": "ImportEditConditionToggleEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportEditConditionToggleEntity(const UE::MovieScene::FEntityImportParams& Params, UE::MovieScene::FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "SanitizeBoolPropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SanitizeBoolPropertyName(FName InPropertyName)"
  },
  {
    "label": "TPropertyTrackEntityImportHelperImpl()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE { namespace MovieScene { template<. . . T> struct TPropertyTrackEntityImportHelperImpl {)",
    "insertText": "TPropertyTrackEntityImportHelperImpl(TEntityBuilder<T...>&& InBuilder, FComponentTypeID InPropertyTag = {}) : Builder(MoveTemp(InBuilder)) , PropertyTag(InPropertyTag)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<U,PayloadType> TPropertyTrackEntityImportHelperImpl<T . . .,TAdd<U>>)",
    "insertText": "Add(TComponentTypeID<U> ComponentType, PayloadType&& InPayload)"
  },
  {
    "label": "AddConditional()",
    "kind": "Method",
    "detail": "Function (} template<U,PayloadType> TPropertyTrackEntityImportHelperImpl<T . . .,TAddConditional<U>>)",
    "insertText": "AddConditional(TComponentTypeID<U> ComponentType, PayloadType&& InPayload, bool bCondition)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Commit(const UMovieSceneSection* InSection, const UE::MovieScene::FEntityImportParams& Params, UE::MovieScene::FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "GetObjectBindingID()",
    "kind": "Method",
    "detail": "Function (const FGuid ObjectBindingID = Params .)",
    "insertText": "GetObjectBindingID()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FBuiltInComponentTypes* BuiltInComponents =)",
    "insertText": "Get()"
  },
  {
    "label": "AddBuilder()",
    "kind": "Method",
    "detail": "Function (OutImportedEntity ->)",
    "insertText": "AddBuilder(Builder .Add(BuiltInComponents->PropertyBinding, PropertyTrack->GetPropertyBinding()) .AddConditional(BuiltInComponents->GenericObjectBinding, ObjectBindingID, ObjectBindingID.IsValid()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ensure(FMovieScenePropertyTrackEntityImportHelper::IsEditConditionToggleID(Params)))"
  },
  {
    "label": "ImportEditConditionToggleEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportEditConditionToggleEntity(Params, OutImportedEntity)"
  },
  {
    "label": "AddBuilder()",
    "kind": "Method",
    "detail": "Function (} } else { OutImportedEntity ->)",
    "insertText": "AddBuilder(Builder .AddConditional(BuiltInComponents->GenericObjectBinding, ObjectBindingID, ObjectBindingID.IsValid()))"
  },
  {
    "label": "TPropertyTrackEntityImportHelperImpl()",
    "kind": "Method",
    "detail": "Function (} } protected : TEntityBuilder<T . . .> Builder ; FComponentTypeID PropertyTag ; } ; template<> struct TPropertyTrackEntityImportHelperImpl<> {)",
    "insertText": "TPropertyTrackEntityImportHelperImpl(FComponentTypeID InPropertyTag) : Builder(FEntityBuilder().AddTag(InPropertyTag)) , PropertyTag(InPropertyTag)"
  },
  {
    "label": "FPropertyTrackEntityImportHelper()",
    "kind": "Method",
    "detail": "Function (} protected : TEntityBuilder<FAdd> Builder ; FComponentTypeID PropertyTag ; } ; struct FPropertyTrackEntityImportHelper : TPropertyTrackEntityImportHelperImpl<> { template<PropertyTraits>)",
    "insertText": "FPropertyTrackEntityImportHelper(const TPropertyComponents<PropertyTraits>& PropertyComponents) : TPropertyTrackEntityImportHelperImpl<>(PropertyComponents.PropertyTag)"
  },
  {
    "label": "FPropertyTrackEntityImportHelperParamsImpl()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPropertyTrackEntityImportHelperParamsImpl {)",
    "insertText": "FPropertyTrackEntityImportHelperParamsImpl(TScriptInterface<IMovieSceneChannelOverrideProvider> InRegistryProvider) : RegistryProvider(InRegistryProvider)"
  },
  {
    "label": "GetChannelOverrideRegistry()",
    "kind": "Method",
    "detail": "Function (Registry = InRegistryProvider ->)",
    "insertText": "GetChannelOverrideRegistry(false)"
  },
  {
    "label": "TPropertyTrackWithOverridableChannelsEntityImportHelperImpl()",
    "kind": "Method",
    "detail": "Function (} } TScriptInterface<IMovieSceneChannelOverrideProvider> RegistryProvider ; TObjectPtr<UMovieSceneSectionChannelOverrideRegistry> Registry ; TArray<FChannelOverrideEntityImportParams> ImportParams ; } ; template<. . . T> struct TPropertyTrackWithOverridableChannelsEntityImportHelperImpl {)",
    "insertText": "TPropertyTrackWithOverridableChannelsEntityImportHelperImpl(TEntityBuilder<T...>&& InBuilder, FPropertyTrackEntityImportHelperParamsImpl& InOverrideInfo, FComponentTypeID InPropertyTag = {}) : Builder(MoveTemp(InBuilder)) , OverrideInfo(InOverrideInfo) , PropertyTag(InPropertyTag)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<U,PayloadType> TPropertyTrackEntityImportHelperImpl<T . . .,TAddConditional<U>>)",
    "insertText": "Add(TComponentTypeID<U> ComponentType, PayloadType&& InPayload, FChannelOverrideEntityImportParams OverrideParams)"
  },
  {
    "label": "bOverriden()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bOverriden(OverrideInfo.Registry && OverrideInfo.Registry->ContainsChannel(OverrideParams.ChannelName))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OverrideInfo . ImportParams .)",
    "insertText": "Add(MoveTemp(OverrideParams))"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (} return TPropertyTrackEntityImportHelperImpl<T . . .,TAddConditional<)",
    "insertText": "U(Builder.Add(ComponentType, InPayload, !bOverriden), OverrideInfo, PropertyTag)"
  },
  {
    "label": "AddConditional()",
    "kind": "Method",
    "detail": "Function (} template<U,PayloadType> TPropertyTrackEntityImportHelperImpl<T . . .,TAddConditional<U>>)",
    "insertText": "AddConditional(TComponentTypeID<U> ComponentType, PayloadType&& InPayload, bool bCondition, FChannelOverrideEntityImportParams OverrideParams)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (} return TPropertyTrackEntityImportHelperImpl<T . . .,TAddConditional<)",
    "insertText": "U(Builder.AddConditional(ComponentType, InPayload, bCondition && !bOverriden), OverrideInfo, PropertyTag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FMovieScenePropertyTrackEntityImportHelper::IsEditConditionToggleID(Params))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ensure(OverrideInfo.Registry))"
  },
  {
    "label": "FEntityBuilder()",
    "kind": "Method",
    "detail": "Function (auto BaseBuilder =)",
    "insertText": "FEntityBuilder() .Add(BuiltInComponents->PropertyBinding, PropertyTrack->GetPropertyBinding()) .AddConditional(BuiltInComponents->GenericObjectBinding, ObjectBindingID, ObjectBindingID.IsValid()) .AddTag(PropertyTag)"
  },
  {
    "label": "AddBuilder()",
    "kind": "Method",
    "detail": "Function (OutImportedEntity ->)",
    "insertText": "AddBuilder(BaseBuilder)"
  },
  {
    "label": "GetChannelOverrideProviderTraits()",
    "kind": "Method",
    "detail": "Function (FChannelOverrideProviderTraitsHandle Traits = OverrideInfo . RegistryProvider ->)",
    "insertText": "GetChannelOverrideProviderTraits()"
  },
  {
    "label": "GetChannelOverrideName()",
    "kind": "Method",
    "detail": "Function (const FName ChannelOverrideName = Traits ->)",
    "insertText": "GetChannelOverrideName(Params.EntityID)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (auto* ChannelOverrideParams = OverrideInfo . ImportParams .)",
    "insertText": "FindByPredicate([=](const FChannelOverrideEntityImportParams& CurParams) { return CurParams.ChannelName == ChannelOverrideName; })"
  },
  {
    "label": "ImportEntityImpl()",
    "kind": "Method",
    "detail": "Function (OverrideInfo . Registry ->)",
    "insertText": "ImportEntityImpl(*ChannelOverrideParams, Params, OutImportedEntity)"
  },
  {
    "label": "TPropertyTrackWithOverridableChannelsEntityImportHelperImpl()",
    "kind": "Method",
    "detail": "Function (} } protected : TEntityBuilder<T . . .> Builder ; FPropertyTrackEntityImportHelperParamsImpl OverrideInfo ; FComponentTypeID PropertyTag ; } ; template<> struct TPropertyTrackWithOverridableChannelsEntityImportHelperImpl<> {)",
    "insertText": "TPropertyTrackWithOverridableChannelsEntityImportHelperImpl(FComponentTypeID InPropertyTag, TScriptInterface<IMovieSceneChannelOverrideProvider> InRegistryProvider) : Builder(FEntityBuilder().AddTag(InPropertyTag)) , OverrideInfo(InRegistryProvider) , PropertyTag(InPropertyTag)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (} return TPropertyTrackWithOverridableChannelsEntityImportHelperImpl<FAdd,TAddConditional<)",
    "insertText": "U(Builder.AddConditional(ComponentType, InPayload, !bOverriden), OverrideInfo, PropertyTag)"
  },
  {
    "label": "FPropertyTrackWithOverridableChannelsEntityImportHelper()",
    "kind": "Method",
    "detail": "Function (} protected : TEntityBuilder<FAdd> Builder ; FPropertyTrackEntityImportHelperParamsImpl OverrideInfo ; FComponentTypeID PropertyTag ; } ; struct FPropertyTrackWithOverridableChannelsEntityImportHelper : TPropertyTrackWithOverridableChannelsEntityImportHelperImpl<> { template<PropertyTraits>)",
    "insertText": "FPropertyTrackWithOverridableChannelsEntityImportHelper(const TPropertyComponents<PropertyTraits>& PropertyComponents, TScriptInterface<IMovieSceneChannelOverrideProvider> InRegistryProvider) : TPropertyTrackWithOverridableChannelsEntityImportHelperImpl<>(PropertyComponents.PropertyTag, InRegistryProvider)"
  }
]