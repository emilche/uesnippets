[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "VCMReceiveStatisticsCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMReceiveStatisticsCallback"
  },
  {
    "label": "JitterEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JitterEstimator"
  },
  {
    "label": "VCMTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMTiming"
  },
  {
    "label": "FrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameBuffer"
  },
  {
    "label": "FrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameInfo"
  },
  {
    "label": "FrameBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_FRAME_BUFFER2_H_ # define MODULES_VIDEO_CODING_FRAME_BUFFER2_H_ # include<array> # include<map> # include<memory> # include<utility> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / video / encoded_frame . h \" # include \" modules / video_coding / include / video_coding_defines . h \" # include \" modules / video_coding / timing / inter_frame_delay . h \" # include \" modules / video_coding / timing / jitter_estimator . h \" # include \" modules / video_coding / utility / decoded_frames_history . h \" # include \" rtc_base / event . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / experiments / rtt_mult_experiment . h \" # include \" rtc_base / numerics / sequence_number_util . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; class VCMReceiveStatisticsCallback ; class JitterEstimator ; class VCMTiming ; namespace video_coding { class FrameBuffer { public :)",
    "insertText": "FrameBuffer(Clock* clock, VCMTiming* timing, const FieldTrialsView& field_trials)"
  },
  {
    "label": "FrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameBuffer()"
  },
  {
    "label": "FrameBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameBuffer(const FrameBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FrameBuffer&)",
    "insertText": "operator(const FrameBuffer&)"
  },
  {
    "label": "InsertFrame()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "InsertFrame(std::unique_ptr<EncodedFrame> frame)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using NextFrameCallback = std::function<)",
    "insertText": "void(std::unique_ptr<EncodedFrame>)"
  },
  {
    "label": "NextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextFrame(int64_t max_wait_time_ms, bool keyframe_required, TaskQueueBase* callback_queue, NextFrameCallback handler)"
  },
  {
    "label": "SetProtectionMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProtectionMode(VCMVideoProtection mode)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(int64_t rtt_ms)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Size()"
  },
  {
    "label": "FrameInfo()",
    "kind": "Method",
    "detail": "Function (private : struct FrameInfo {)",
    "insertText": "FrameInfo()"
  },
  {
    "label": "FrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameInfo(FrameInfo&&)"
  },
  {
    "label": "ValidReferences()",
    "kind": "Method",
    "detail": "Function (absl::InlinedVector<int64_t,8> dependent_frames ; size_t num_missing_continuous = 0 ; size_t num_missing_decodable = 0 ; bool continuous = false ; std::unique_ptr<EncodedFrame> frame ; } ; using FrameMap = std::map<int64_t,FrameInfo> ; bool)",
    "insertText": "ValidReferences(const EncodedFrame& frame)"
  },
  {
    "label": "FindNextFrame()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "FindNextFrame(Timestamp now) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetNextFrame()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<EncodedFrame>)",
    "insertText": "GetNextFrame() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "StartWaitForNextFrameOnQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWaitForNextFrameOnQueue() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "CancelCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCallback() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "PropagateContinuity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateContinuity(FrameMap::iterator start) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "PropagateDecodability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateDecodability(const FrameInfo& info) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "UpdateFrameInfoWithIncomingFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateFrameInfoWithIncomingFrame(const EncodedFrame& frame, FrameMap::iterator info) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ClearFramesAndHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFramesAndHistory() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "CombineAndDeleteFrames()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<EncodedFrame>)",
    "insertText": "CombineAndDeleteFrames(std::vector<std::unique_ptr<EncodedFrame>> frames)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker construction_checker_ ; RTC_NO_UNIQUE_ADDRESS SequenceChecker callback_checker_ ; FrameMap frames_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]