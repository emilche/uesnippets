[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FThinZone2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2D"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FThinZoneSide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZoneSide"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Chrono . h \" # include \" Core / HaveStates . h \" # include \" Core / Types . h \" # include \" Math / Point . h \" # include \" Mesh / MeshEnum . h \" # include \" Mesh / Structure / EdgeSegment . h \" namespace UE::CADKernel { enum class EThinZone2DType : uint8 { Undefined = 0,Global,PeakStart,PeakEnd,Butterfly,BetweenLoops,TooSmall } ; enum class ESide : uint8 { First = 0,Second,None } ; class FModelMesh ; class FThinZone2D ; class FTopologicalFace ; using FReserveContainerFunc = TFunction<)",
    "insertText": "void(int32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FAddMeshNodeFunc = TFunction<)",
    "insertText": "void(const int32, const FPoint2D&, const double, const FEdgeSegment&, const FPairOfIndex&)"
  },
  {
    "label": "FThinZoneSide()",
    "kind": "Method",
    "detail": "Function (class FThinZoneSide : public FHaveStates { FThinZone2D ; private : TArray<FEdgeSegment> Segments ; FThinZoneSide& FrontSide ; TArray<FTopologicalEdge*> Edges ; double SideLength ; double MediumThickness ; double MaxThickness ; public :)",
    "insertText": "FThinZoneSide(FThinZoneSide* InFrontSide, const TArray<FEdgeSegment*>& InSegments)"
  },
  {
    "label": "FThinZoneSide()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FThinZoneSide()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (} const FEdgeSegment&)",
    "insertText": "GetFirst()"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetEdges(TArray<FTopologicalEdge*>& OutEdges)"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (const TArray<FTopologicalEdge*>&)",
    "insertText": "GetEdges()"
  },
  {
    "label": "CleanMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanMesh()"
  },
  {
    "label": "GetSegments()",
    "kind": "Method",
    "detail": "Function (const TArray<FEdgeSegment>&)",
    "insertText": "GetSegments()"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "SetEdgesZoneSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEdgesZoneSide(ESide Side)"
  },
  {
    "label": "GetImposedPointCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetImposedPointCount()"
  },
  {
    "label": "GetExistingMeshNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExistingMeshNodes(const FTopologicalFace& Face, FModelMesh& MeshModel, FReserveContainerFunc& Reserve, FAddMeshNodeFunc& AddMeshNode, const bool bWithTolerance)"
  },
  {
    "label": "ComputeThicknessAndLength()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ComputeThicknessAndLength()"
  },
  {
    "label": "FThinZone2D()",
    "kind": "Method",
    "detail": "Function (} ; class FThinZone2D : public FHaveStates { private : FThinZoneSide SideA ; FThinZoneSide SideB ; EThinZone2DType Category ; double Thickness ; double MaxThickness ; bool bIsSwap = false ; public :)",
    "insertText": "FThinZone2D(const TArray<FEdgeSegment*>& InFirstSideSegments, const TArray<FEdgeSegment*>& InSecondSideSegments) : SideA(&SideB, InFirstSideSegments) , SideB(&SideA, InSecondSideSegments) , Category(EThinZone2DType::Undefined)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "FThinZone2D()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FThinZone2D()"
  },
  {
    "label": "GetThickness()",
    "kind": "Method",
    "detail": "Function (Thickness = - 1 ; } double)",
    "insertText": "GetThickness()"
  },
  {
    "label": "GetSide()",
    "kind": "Method",
    "detail": "Function (} FThinZoneSide&)",
    "insertText": "GetSide(ESide Side)"
  },
  {
    "label": "GetFirstSide()",
    "kind": "Method",
    "detail": "Function (} FThinZoneSide&)",
    "insertText": "GetFirstSide()"
  },
  {
    "label": "GetMaxSideLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetMaxSideLength()"
  },
  {
    "label": "SetCategory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCategory(EThinZone2DType InType)"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (Category = InType ; } void)",
    "insertText": "GetEdges(TArray<FTopologicalEdge*>& OutSideAEdges, TArray<FTopologicalEdge*>& OutSideBEdges)"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (SideA .)",
    "insertText": "GetEdges(OutSideAEdges)"
  },
  {
    "label": "GetEdges()",
    "kind": "Method",
    "detail": "Function (SideB .)",
    "insertText": "GetEdges(OutSideBEdges)"
  },
  {
    "label": "CheckEdgesZoneSide()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckEdgesZoneSide()"
  },
  {
    "label": "SetEdgesZoneSide()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEdgesZoneSide()"
  },
  {
    "label": "SetEdgesZoneSide()",
    "kind": "Method",
    "detail": "Function (SideA .)",
    "insertText": "SetEdgesZoneSide(ESide::First)"
  },
  {
    "label": "SetEdgesZoneSide()",
    "kind": "Method",
    "detail": "Function (SideB .)",
    "insertText": "SetEdgesZoneSide(ESide::Second)"
  },
  {
    "label": "AddToEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToEdge()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bIsSwap = ! bIsSwap ;)",
    "insertText": "switch(Category)"
  }
]