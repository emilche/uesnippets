[
  {
    "label": "_Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Derived"
  },
  {
    "label": "view_interface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "view_interface"
  },
  {
    "label": "_D2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_D2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_VIEW_INTERFACE_H # define _LIBCPP___RANGES_VIEW_INTERFACE_H # include<__assert> # include<__concepts / derived_from . h> # include<__concepts / same_as . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / prev . h> # include<__memory / pointer_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / empty . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__derived()",
    "kind": "Method",
    "detail": "Function (template<class _Derived> requires is_class_v<_Derived>&& same_as<_Derived,remove_cv_t<_Derived>> class view_interface { _LIBCPP_HIDE_FROM_ABI _Derived&)",
    "insertText": "__derived()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} public : template<class _D2 = _Derived> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "empty()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} template<class _D2 = _Derived> _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "bool() requires requires (_D2& __t)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "empty(__t)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} { return !)",
    "insertText": "empty(__derived())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} template<class _D2 = _Derived> _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "bool() const requires requires (const _D2& __t)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} template<class _D2 = _Derived> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "data()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} template<class _D2 = _Derived> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "size()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _D2 = _Derived> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) front()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!empty(), \"Precondition `!empty()` not satisfied. `.front()` called on an empty view.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _D2 = _Derived> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) back()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!empty(), \"Precondition `!empty()` not satisfied. `.back()` called on an empty view.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<random_access_range _RARange = _Derived> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator[](range_difference_t<_RARange> __index)"
  }
]