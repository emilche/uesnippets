[
  {
    "label": "ObserverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverInterface"
  },
  {
    "label": "NotifierInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NotifierInterface"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SourceState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SourceState"
  },
  {
    "label": "TrackState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TrackState"
  },
  {
    "label": "VideoTrackSourceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrackSourceInterface"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AudioTrackSinkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTrackSinkInterface"
  },
  {
    "label": "AudioObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioObserver"
  },
  {
    "label": "AudioProcessorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioProcessorInterface"
  },
  {
    "label": "AudioProcessorStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioProcessorStatistics"
  },
  {
    "label": "MediaStreamInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaStreamInterface"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (# ifndef API_MEDIA_STREAM_INTERFACE_H_ # define API_MEDIA_STREAM_INTERFACE_H_ # include<stddef . h> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_options . h \" # include \" api / scoped_refptr . h \" # include \" api / video / recordable_encoded_frame . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" api / video_track_source_constraints . h \" # include \" modules / audio_processing / include / audio_processing_statistics . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class ObserverInterface { public : void)",
    "insertText": "OnChanged()"
  },
  {
    "label": "ObserverInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ObserverInterface()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (} } ; class NotifierInterface { public : void)",
    "insertText": "RegisterObserver(ObserverInterface* observer)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserver(ObserverInterface* observer)"
  },
  {
    "label": "NotifierInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NotifierInterface()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (} } ; class RTC_EXPORT MediaSourceInterface : public rtc::RefCountInterface,public NotifierInterface { public : enum SourceState { kInitializing,kLive,kEnded,kMuted } ; SourceState)",
    "insertText": "state()"
  },
  {
    "label": "remote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remote()"
  },
  {
    "label": "MediaSourceInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "MediaSourceInterface()"
  },
  {
    "label": "kind()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT MediaStreamTrackInterface : public rtc::RefCountInterface,public NotifierInterface { public : enum TrackState { kLive,kEnded,} ; const char* const kAudioKind ; const char* const kVideoKind ; std::string)",
    "insertText": "kind()"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "id()"
  },
  {
    "label": "enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "enabled()"
  },
  {
    "label": "set_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_enabled(bool enable)"
  },
  {
    "label": "MediaStreamTrackInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "MediaStreamTrackInterface()"
  },
  {
    "label": "is_screencast()",
    "kind": "Method",
    "detail": "Function (} ; class VideoTrackSourceInterface : public MediaSourceInterface,public rtc::VideoSourceInterface<VideoFrame> { public : struct Stats { int input_width ; int input_height ; } ; bool)",
    "insertText": "is_screencast()"
  },
  {
    "label": "needs_denoising()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "needs_denoising()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(Stats* stats)"
  },
  {
    "label": "SupportsEncodedOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEncodedOutput()"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame()"
  },
  {
    "label": "AddEncodedSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEncodedSink(rtc::VideoSinkInterface<RecordableEncodedFrame>* sink)"
  },
  {
    "label": "RemoveEncodedSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEncodedSink(rtc::VideoSinkInterface<RecordableEncodedFrame>* sink)"
  },
  {
    "label": "ProcessConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessConstraints(const webrtc::VideoTrackSourceConstraints& constraints)"
  },
  {
    "label": "VideoTrackSourceInterface()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "VideoTrackSourceInterface()"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT VideoTrackInterface : public MediaStreamTrackInterface,public rtc::VideoSourceInterface<VideoFrame> { public : enum class ContentHint { kNone,kFluid,kDetailed,kText } ; void)",
    "insertText": "AddOrUpdateSink(rtc::VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveSink(rtc::VideoSinkInterface<VideoFrame>* sink)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (} VideoTrackSourceInterface*)",
    "insertText": "GetSource()"
  },
  {
    "label": "content_hint()",
    "kind": "Method",
    "detail": "Function (ContentHint)",
    "insertText": "content_hint()"
  },
  {
    "label": "set_content_hint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_content_hint(ContentHint hint)"
  },
  {
    "label": "VideoTrackInterface()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "VideoTrackInterface()"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (} ; class AudioTrackSinkInterface { public : void)",
    "insertText": "OnData(const void* audio_data, int bits_per_sample, int sample_rate, size_t number_of_channels, size_t number_of_frames)"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnData(const void* audio_data, int bits_per_sample, int sample_rate, size_t number_of_channels, size_t number_of_frames, absl::optional<int64_t> absolute_capture_timestamp_ms)"
  },
  {
    "label": "NumPreferredChannels()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumPreferredChannels()"
  },
  {
    "label": "OnSetVolume()",
    "kind": "Method",
    "detail": "Function (} } ; class RTC_EXPORT AudioSourceInterface : public MediaSourceInterface { public : class AudioObserver { public : void)",
    "insertText": "OnSetVolume(double volume)"
  },
  {
    "label": "AudioObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "AudioObserver()"
  },
  {
    "label": "SetVolume()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "SetVolume(double volume)"
  },
  {
    "label": "RegisterAudioObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterAudioObserver(AudioObserver* observer)"
  },
  {
    "label": "UnregisterAudioObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterAudioObserver(AudioObserver* observer)"
  },
  {
    "label": "AddSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSink(AudioTrackSinkInterface* sink)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveSink(AudioTrackSinkInterface* sink)"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (} const cricket::AudioOptions)",
    "insertText": "options()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} ; class AudioProcessorInterface : public rtc::RefCountInterface { public : struct AudioProcessorStatistics { bool typing_noise_detected = false ; AudioProcessingStats apm_statistics ; } ; AudioProcessorStatistics)",
    "insertText": "GetStats(bool has_remote_tracks)"
  },
  {
    "label": "AudioProcessorInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "AudioProcessorInterface()"
  },
  {
    "label": "GetSignalLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSignalLevel(int* level)"
  },
  {
    "label": "GetAudioProcessor()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioProcessorInterface>)",
    "insertText": "GetAudioProcessor()"
  },
  {
    "label": "AudioTrackInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "AudioTrackInterface()"
  },
  {
    "label": "GetAudioTracks()",
    "kind": "Method",
    "detail": "Function (AudioTrackVector)",
    "insertText": "GetAudioTracks()"
  },
  {
    "label": "GetVideoTracks()",
    "kind": "Method",
    "detail": "Function (VideoTrackVector)",
    "insertText": "GetVideoTracks()"
  },
  {
    "label": "FindAudioTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioTrackInterface>)",
    "insertText": "FindAudioTrack(const std::string& track_id)"
  },
  {
    "label": "FindVideoTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<VideoTrackInterface>)",
    "insertText": "FindVideoTrack(const std::string& track_id)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTrack(rtc::scoped_refptr<AudioTrackInterface> track)"
  },
  {
    "label": "RTC_CHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_NOTREACHED()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddTrack(rtc::scoped_refptr<VideoTrackInterface> track)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveTrack(rtc::scoped_refptr<AudioTrackInterface> track)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveTrack(rtc::scoped_refptr<VideoTrackInterface> track)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (} [ [)",
    "insertText": "deprecated(\"Pass a scoped_refptr\")]] virtual bool AddTrack( AudioTrackInterface* track)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (} [ [)",
    "insertText": "deprecated(\"Pass a scoped_refptr\")]] virtual bool AddTrack( VideoTrackInterface* track)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (} [ [)",
    "insertText": "deprecated(\"Pass a scoped_refptr\")]] virtual bool RemoveTrack( AudioTrackInterface* track)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (} [ [)",
    "insertText": "deprecated(\"Pass a scoped_refptr\")]] virtual bool RemoveTrack( VideoTrackInterface* track)"
  },
  {
    "label": "MediaStreamInterface()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "MediaStreamInterface()"
  }
]