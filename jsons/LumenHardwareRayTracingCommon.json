[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSceneOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOptions"
  },
  {
    "label": "FHitGroupRootConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitGroupRootConstants"
  },
  {
    "label": "FLumenHardwareRayTracingShaderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenHardwareRayTracingShaderBase"
  },
  {
    "label": "FUseThreadGroupSize64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUseThreadGroupSize64"
  },
  {
    "label": "ShaderClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderClass"
  },
  {
    "label": "FLumenHardwareRayTracingDeferredMaterialRGS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenHardwareRayTracingDeferredMaterialRGS"
  },
  {
    "label": "IsInlineSupported()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" GlobalShader . h \" # include \" Lumen / LumenTracingUtils . h \" # include \" RayTracing / RayTracingLighting . h \" # include \" RayTracing / RayTracing . h \" # include \" RayTracingPayloadType . h \" # include \" SceneTextureParameters . h \" # include \" Substrate / Substrate . h \" enum class EReflectionsMethod ; namespace RayTracing { struct FSceneOptions ; } ; namespace LumenHardwareRayTracing { enum class EAvoidSelfIntersectionsMode : uint8 { Disabled,Retrace,AHS,MAX } ; enum class EHitLightingMode { SurfaceCache,HitLighting,HitLightingForReflections,MAX } ; bool)",
    "insertText": "IsInlineSupported()"
  },
  {
    "label": "IsRayGenSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayGenSupported()"
  },
  {
    "label": "GetFarFieldBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFarFieldBias()"
  },
  {
    "label": "UseSurfaceCacheAlphaMasking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSurfaceCacheAlphaMasking()"
  },
  {
    "label": "GetAvoidSelfIntersectionsMode()",
    "kind": "Method",
    "detail": "Function (EAvoidSelfIntersectionsMode)",
    "insertText": "GetAvoidSelfIntersectionsMode()"
  },
  {
    "label": "GetHitLightingMode()",
    "kind": "Method",
    "detail": "Function (EHitLightingMode)",
    "insertText": "GetHitLightingMode(const FViewInfo& View, EDiffuseIndirectMethod DiffuseIndirectMethod)"
  },
  {
    "label": "GetHitLightingShadowMode()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHitLightingShadowMode()"
  },
  {
    "label": "UseHitLightingDirectLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHitLightingDirectLighting()"
  },
  {
    "label": "UseHitLightingSkylight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHitLightingSkylight(EDiffuseIndirectMethod DiffuseIndirectMethod)"
  },
  {
    "label": "UseReflectionCapturesForHitLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseReflectionCapturesForHitLighting()"
  },
  {
    "label": "SetRayTracingSceneOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRayTracingSceneOptions(const FViewInfo& View, EDiffuseIndirectMethod DiffuseIndirectMethod, EReflectionsMethod ReflectionsMethod, RayTracing::FSceneOptions& SceneOptions)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} # if RHI_RAYTRACING namespace Lumen { struct FHitGroupRootConstants { uint32 UserData ; } ; enum class ERayTracingShaderDispatchType { RayGen = 0,= 1 } ; } class FLumenHardwareRayTracingShaderBase : public FGlobalShader { public :)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FSharedParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FSceneTextureParameters, SceneTextures) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FSceneTextureUniformParameters, SceneTexturesStruct) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FSubstrateGlobalUniformParameters, Substrate) SHADER_PARAMETER_RDG_BUFFER_SRV(RaytracingAccelerationStructure, TLAS) SHADER_PARAMETER_SRV(StructuredBuffer, RayTracingSceneMetadata) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FRayTracingLightGrid, LightGridParameters) SHADER_PARAMETER_STRUCT_REF(FReflectionCaptureShaderData, ReflectionCapture) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FForwardLightData, Forward) SHADER_PARAMETER_STRUCT_INCLUDE(FLumenCardTracingParameters, TracingParameters) SHADER_PARAMETER(uint32, MaxTraversalIterations) SHADER_PARAMETER(uint32, MeshSectionVisibilityTest) SHADER_PARAMETER(float, MinTraceDistanceToSampleSurfaceCache) SHADER_PARAMETER(float, SurfaceCacheSamplingDepthBias) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<Lumen::FHitGroupRootConstants>, HitGroupData) SHADER_PARAMETER_STRUCT_REF(FLumenHardwareRayTracingUniformBufferParameters, LumenHardwareRayTracingUniformBuffer) END_SHADER_PARAMETER_STRUCT() FLumenHardwareRayTracingShaderBase()"
  },
  {
    "label": "FLumenHardwareRayTracingShaderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLumenHardwareRayTracingShaderBase(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FUseThreadGroupSize64 :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"RAY_TRACING_USE_THREAD_GROUP_SIZE_64\")"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (using FBasePermutationDomain = TShaderPermutationDomain<FUseThreadGroupSize64> ; using FPermutationDomain = TShaderPermutationDomain<FBasePermutationDomain> ; void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, Lumen::ERayTracingShaderDispatchType ShaderDispatchType, Lumen::ESurfaceCacheSampling SurfaceCacheSampling, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironmentInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironmentInternal(Lumen::ERayTracingShaderDispatchType ShaderDispatchType, bool UseThreadGroupSize64, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetThreadGroupSizeInternal()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetThreadGroupSizeInternal(Lumen::ERayTracingShaderDispatchType ShaderDispatchType, bool UseThreadGroupSize64)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters, Lumen::ERayTracingShaderDispatchType ShaderDispatchType)"
  },
  {
    "label": "UseThreadGroupSize64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseThreadGroupSize64(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "DECLARE_LUMEN_RAYTRACING_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "DECLARE_LUMEN_RAYTRACING_SHADER(ShaderClass) \\ public: \\ ShaderClass()"
  },
  {
    "label": "ShaderClass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ShaderClass(const ShaderMetaType::CompiledShaderInitializerType & Initializer)\\ : FLumenHardwareRayTracingShaderBase(Initializer)"
  },
  {
    "label": "IMPLEMENT_LUMEN_COMPUTE_RAYTRACING_SHADER()",
    "kind": "Method",
    "detail": "Function (} \\ using TComputeShaderType = class ShaderClass # # CS ; \\ using TRayGenShaderType = class ShaderClass # # RGS ; # define)",
    "insertText": "IMPLEMENT_LUMEN_COMPUTE_RAYTRACING_SHADER(ShaderClass)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DECLARE_GLOBAL_SHADER(ShaderClass##CS) \\ SHADER_USE_PARAMETER_STRUCT(ShaderClass##CS, ShaderClass) \\ static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "PermutationVector()",
    "kind": "Method",
    "detail": "Function (\\ FPermutationDomain)",
    "insertText": "PermutationVector(Parameters.PermutationId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(PermutationVector.Get<FLumenHardwareRayTracingShaderBase::FBasePermutationDomain>().Get<FUseThreadGroupSize64>() && !RHISupportsWaveSize64(Parameters.Platform))"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ return)",
    "insertText": "ShouldCompilePermutation(Parameters, Lumen::ERayTracingShaderDispatchType::Inline)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "FBasePermutationDomain()",
    "kind": "Method",
    "detail": "Function (\\ const bool UseThreadGroupSize64 = PermutationVector . Get<)",
    "insertText": "FBasePermutationDomain().Get<FUseThreadGroupSize64>()"
  },
  {
    "label": "GetThreadGroupSizeInternal()",
    "kind": "Method",
    "detail": "Function (\\ FIntPoint Size =)",
    "insertText": "GetThreadGroupSizeInternal(Lumen::ERayTracingShaderDispatchType::Inline, UseThreadGroupSize64)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (\\ OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"INLINE_RAY_TRACING_THREAD_GROUP_SIZE_X\"), Size.X)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (\\ OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"INLINE_RAY_TRACING_THREAD_GROUP_SIZE_Y\"), Size.Y)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ModifyCompilationEnvironment(Parameters, Lumen::ERayTracingShaderDispatchType::Inline, OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironmentInternal()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ModifyCompilationEnvironmentInternal(Lumen::ERayTracingShaderDispatchType::Inline, UseThreadGroupSize64, OutEnvironment)"
  },
  {
    "label": "MakePermutationVector()",
    "kind": "Method",
    "detail": "Function (\\ } \\ FPermutationDomain)",
    "insertText": "MakePermutationVector(ShaderClass::FPermutationDomain PermutationVector, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "FUseThreadGroupSize64()",
    "kind": "Method",
    "detail": "Function (\\ FLumenHardwareRayTracingShaderBase::FBasePermutationDomain Base ; \\ Base . Set<)",
    "insertText": "FUseThreadGroupSize64(UseThreadGroupSize64(ShaderPlatform))"
  },
  {
    "label": "FBasePermutationDomain()",
    "kind": "Method",
    "detail": "Function (\\ PermutationVector . Set<)",
    "insertText": "FBasePermutationDomain(Base)"
  },
  {
    "label": "GetThreadGroupSize()",
    "kind": "Method",
    "detail": "Function (\\ return PermutationVector ; \\ } \\ FIntPoint)",
    "insertText": "GetThreadGroupSize(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetRayTracingPayloadType()",
    "kind": "Method",
    "detail": "Function (} \\ ERayTracingPayloadType)",
    "insertText": "GetRayTracingPayloadType(const int32 PermutationId)"
  },
  {
    "label": "AddLumenRayTracingDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "AddLumenRayTracingDispatchIndirect(FRDGBuilder& GraphBuilder, FRDGEventName&& EventName, const FViewInfo& View, ShaderClass::FPermutationDomain PermutationVector, \\ ShaderClass::FParameters* PassParameters, FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgsOffset, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "CS()",
    "kind": "Method",
    "detail": "Function (\\ TShaderRef<ShaderClass # # CS> ComputeShader = View . ShaderMap -> GetShader<ShaderClass # #)",
    "insertText": "CS(MakePermutationVector(PermutationVector, View.GetShaderPlatform()))"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddPass(GraphBuilder, std::move(EventName), ComputePassFlags, ComputeShader, PassParameters, IndirectArgsBuffer, IndirectArgsOffset)"
  },
  {
    "label": "AddLumenRayTracingDispatch()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "AddLumenRayTracingDispatch(FRDGBuilder& GraphBuilder, FRDGEventName&& EventName, const FViewInfo& View, ShaderClass::FPermutationDomain PermutationVector, \\ ShaderClass::FParameters* PassParameters, FIntVector GroupCount, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddPass(GraphBuilder, std::move(EventName), ComputePassFlags, ComputeShader, PassParameters, GroupCount)"
  },
  {
    "label": "AddLumenRayTraceDispatchPass()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; template<TShaderClass> void)",
    "insertText": "AddLumenRayTraceDispatchPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& RayGenerationShader, typename TShaderClass::FParameters* Parameters, FIntPoint Resolution, const FViewInfo& View, bool bUseMinimalPayload)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(RayGenerationShader, Parameters)"
  },
  {
    "label": "GetSceneUniforms()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer* SceneUniformBuffer = View .)",
    "insertText": "GetSceneUniforms().GetBufferRHI(GraphBuilder)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), Parameters, ERDGPassFlags::Compute, [Parameters, &View, SceneUniformBuffer, RayGenerationShader, bUseMinimalPayload, Resolution](FRDGAsyncTask, FRHICommandList& RHICmdList) { FRHIBatchedShaderParameters& GlobalResources = RHICmdList.GetScratchShaderParameters(); SetShaderParameters(GlobalResources, RayGenerationShader, *Parameters); TOptional<FScopedUniformBufferStaticBindings> StaticUniformBufferScope = RayTracing::BindStaticUniformBufferBindings(View, SceneUniformBuffer, RHICmdList); FRayTracingPipelineState* Pipeline = View.RayTracingMaterialPipeline; FRHIShaderBindingTable* SBT = View.RayTracingSBT; if (bUseMinimalPayload) { Pipeline = View.LumenHardwareRayTracingMaterialPipeline; SBT = View.LumenHardwareRayTracingSBT; } RHICmdList.RayTraceDispatch(Pipeline, RayGenerationShader.GetRayTracingShader(), SBT, GlobalResources, Resolution.X, Resolution.Y); })"
  },
  {
    "label": "AddLumenRayTraceDispatchIndirectPass()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "AddLumenRayTraceDispatchIndirectPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& RayGenerationShader, typename TShaderClass::FParameters* Parameters, FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgsOffset, const FViewInfo& View, bool bUseMinimalPayload)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(RayGenerationShader, Parameters, { IndirectArgsBuffer })"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), Parameters, ERDGPassFlags::Compute, [Parameters, &View, SceneUniformBuffer, RayGenerationShader, bUseMinimalPayload, IndirectArgsBuffer, IndirectArgsOffset](FRDGAsyncTask, FRHICommandList& RHICmdList) { IndirectArgsBuffer->MarkResourceAsUsed(); FRHIBatchedShaderParameters& GlobalResources = RHICmdList.GetScratchShaderParameters(); SetShaderParameters(GlobalResources, RayGenerationShader, *Parameters); TOptional<FScopedUniformBufferStaticBindings> StaticUniformBufferScope = RayTracing::BindStaticUniformBufferBindings(View, SceneUniformBuffer, RHICmdList); FRayTracingPipelineState* Pipeline = View.RayTracingMaterialPipeline; FRHIShaderBindingTable* SBT = View.RayTracingSBT; if (bUseMinimalPayload) { Pipeline = View.LumenHardwareRayTracingMaterialPipeline; SBT = View.LumenHardwareRayTracingSBT; } RHICmdList.RayTraceDispatchIndirect(Pipeline, RayGenerationShader.GetRayTracingShader(), SBT, GlobalResources, IndirectArgsBuffer->GetIndirectRHICallBuffer(), IndirectArgsOffset); })"
  },
  {
    "label": "IMPLEMENT_LUMEN_RAYGEN_RAYTRACING_SHADER()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IMPLEMENT_LUMEN_RAYGEN_RAYTRACING_SHADER(ShaderClass)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DECLARE_GLOBAL_SHADER(ShaderClass##RGS) \\ SHADER_USE_ROOT_PARAMETER_STRUCT(ShaderClass##RGS, ShaderClass) \\ static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(PermutationVector.Get<FLumenHardwareRayTracingShaderBase::FBasePermutationDomain>().Get<FUseThreadGroupSize64>())"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ return)",
    "insertText": "ShouldCompilePermutation(Parameters, Lumen::ERayTracingShaderDispatchType::RayGen)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ModifyCompilationEnvironment(Parameters, Lumen::ERayTracingShaderDispatchType::RayGen, OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironmentInternal()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ModifyCompilationEnvironmentInternal(Lumen::ERayTracingShaderDispatchType::RayGen, false, OutEnvironment)"
  },
  {
    "label": "GetThreadGroupSize()",
    "kind": "Method",
    "detail": "Function (\\ } \\ FIntPoint)",
    "insertText": "GetThreadGroupSize()"
  },
  {
    "label": "AddLumenRayTracingDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "AddLumenRayTracingDispatchIndirect(FRDGBuilder& GraphBuilder, FRDGEventName&& EventName, const FViewInfo& View, ShaderClass::FPermutationDomain PermutationVector, \\ ShaderClass::FParameters* PassParameters, FRDGBufferRef IndirectArgsBuffer, uint32 IndirectArgsOffset, bool bUseMinimalPayload)"
  },
  {
    "label": "RGS()",
    "kind": "Method",
    "detail": "Function (\\ TShaderRef<ShaderClass # # RGS> RayGenerationShader = View . ShaderMap -> GetShader<ShaderClass # #)",
    "insertText": "RGS(PermutationVector)"
  },
  {
    "label": "AddLumenRayTraceDispatchIndirectPass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddLumenRayTraceDispatchIndirectPass(GraphBuilder, std::move(EventName), RayGenerationShader, PassParameters, IndirectArgsBuffer, IndirectArgsOffset, View, bUseMinimalPayload)"
  },
  {
    "label": "AddLumenRayTracingDispatch()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "AddLumenRayTracingDispatch(FRDGBuilder& GraphBuilder, FRDGEventName&& EventName, const FViewInfo& View, ShaderClass::FPermutationDomain PermutationVector, \\ ShaderClass::FParameters* PassParameters, FIntPoint DispatchResolution, bool bUseMinimalPayload)"
  },
  {
    "label": "AddLumenRayTraceDispatchPass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddLumenRayTraceDispatchPass(GraphBuilder, std::move(EventName), RayGenerationShader, PassParameters, DispatchResolution, View, bUseMinimalPayload)"
  },
  {
    "label": "GetShaderBindingLayout()",
    "kind": "Method",
    "detail": "Function (\\ } \\ const FShaderBindingLayout*)",
    "insertText": "GetShaderBindingLayout(const FShaderPermutationParameters& Parameters)"
  },
  {
    "label": "GetShaderBindingLayout()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GetShaderBindingLayout(Parameters.Platform)"
  },
  {
    "label": "IMPLEMENT_LUMEN_RAYGEN_AND_COMPUTE_RAYTRACING_SHADERS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; # define)",
    "insertText": "IMPLEMENT_LUMEN_RAYGEN_AND_COMPUTE_RAYTRACING_SHADERS(ShaderClass) \\ IMPLEMENT_LUMEN_COMPUTE_RAYTRACING_SHADER(ShaderClass) \\ IMPLEMENT_LUMEN_RAYGEN_RAYTRACING_SHADER(ShaderClass)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FDeferredMaterialParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FLumenHardwareRayTracingShaderBase::FSharedParameters, SharedParameters) SHADER_PARAMETER(int, TileSize) SHADER_PARAMETER(FIntPoint, DeferredMaterialBufferResolution) SHADER_PARAMETER_RDG_BUFFER_UAV(RWStructuredBuffer<FDeferredMaterialPayload>, RWDeferredMaterialBuffer) END_SHADER_PARAMETER_STRUCT() FLumenHardwareRayTracingDeferredMaterialRGS()"
  },
  {
    "label": "FLumenHardwareRayTracingDeferredMaterialRGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLumenHardwareRayTracingDeferredMaterialRGS(const ShaderMetaType::CompiledShaderInitializerType & Initializer) : FLumenHardwareRayTracingShaderBase(Initializer)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, ShaderDispatchType, SurfaceCacheSampling, OutEnvironment)"
  },
  {
    "label": "SetLumenHardwareRayTracingSharedParameters()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "SetLumenHardwareRayTracingSharedParameters(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View, const FLumenCardTracingParameters& TracingParameters, FLumenHardwareRayTracingShaderBase::FSharedParameters* SharedParameters)"
  }
]