[
  {
    "label": "ToCString()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_POST_ASYNC_RESULTS_H_ # define BASE_WIN_POST_ASYNC_RESULTS_H_ # include<unknwn . h> # include<windows . foundation . h> # include<wrl / async . h> # include<wrl / client . h> # include<type_traits> # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / location . h \" # include \" base / logging . h \" # include \" base / task / bind_post_task . h \" # include \" base / threading / sequenced_task_runner_handle . h \" namespace base { namespace win { namespace internal { const char*)",
    "insertText": "ToCString(AsyncStatus async_status)"
  },
  {
    "label": "GetAsyncResultsT()",
    "kind": "Method",
    "detail": "Function (template<T> using AsyncAbiT = ABI::Windows::Foundation::Internal::GetAbiType<IAsyncOperationT<T>::TResult_complex>::type ; template<T> using AsyncResultsT = std::conditional_t<std::is_convertible<AsyncAbiT<T>,IUnknown*>::value,Microsoft::WRL::ComPtr<std::remove_pointer_t<AsyncAbiT<T>>>,AsyncAbiT<T>> ; template<T> HRESULT)",
    "insertText": "GetAsyncResultsT(IAsyncOperationT<T>* async_operation, AsyncStatus async_status, AsyncResultsT<T>* results)"
  },
  {
    "label": "GetResults()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = async_operation ->)",
    "insertText": "GetResults(&(*results))"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (} ; return hr ; }* results = AsyncResultsT<T> { } ; Microsoft::WRL::ComPtr<ABI::Windows::Foundation::IAsyncInfo> async_info ; HRESULT hr = async_operation ->)",
    "insertText": "QueryInterface(IID_PPV_ARGS(&async_info))"
  },
  {
    "label": "get_ErrorCode()",
    "kind": "Method",
    "detail": "Function (HRESULT operation_hr ; hr = async_info ->)",
    "insertText": "get_ErrorCode(&operation_hr)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(FAILED(operation_hr))"
  },
  {
    "label": "BindOnce()",
    "kind": "Method",
    "detail": "Function (using AsyncResult = std::pair<Microsoft::WRL::ComPtr<IAsyncOperationT<T>>,AsyncStatus> ; auto internal_completed_handler =)",
    "insertText": "BindOnce([](IAsyncOperationT<T>* async_operation, AsyncStatus async_status) -> AsyncResult { return std::make_pair(async_operation, async_status); }) .Then(base::BindPostTask( base::SequencedTaskRunnerHandle::Get(), base::BindOnce( [](IAsyncOperationCompletedHandlerT<T> completed_handler, AsyncResult async_result) { std::move(completed_handler) .Run(async_result.first.Get(), async_result.second); }, std::move(completed_handler))))"
  },
  {
    "label": "put_Completed()",
    "kind": "Method",
    "detail": "Function (using CompletedHandler = Microsoft::WRL::Implements<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom>,ABI::Windows::Foundation::IAsyncOperationCompletedHandler<T>,Microsoft::WRL::FtmBase> ; return async_operation ->)",
    "insertText": "put_Completed(Microsoft::WRL::Callback<CompletedHandler>( [internal_completed_handler(std::move(internal_completed_handler))]( IAsyncOperationT<T>* async_operation, AsyncStatus async_status) mutable { std::move(internal_completed_handler) .Run(async_operation, async_status); return S_OK; }) .Get())"
  },
  {
    "label": "PostAsyncHandlers()",
    "kind": "Method",
    "detail": "Function (} } template<T> HRESULT)",
    "insertText": "PostAsyncHandlers(internal::IAsyncOperationT<T>* async_operation, base::OnceCallback<void(internal::AsyncResultsT<T>)> success_callback)"
  },
  {
    "label": "PostAsyncHandlers()",
    "kind": "Method",
    "detail": "Function (} template<T> HRESULT)",
    "insertText": "PostAsyncHandlers(internal::IAsyncOperationT<T>* async_operation, base::OnceCallback<void(internal::AsyncResultsT<T>)> success_callback, base::OnceCallback<void()> failure_callback)"
  },
  {
    "label": "PostAsyncHandlers()",
    "kind": "Method",
    "detail": "Function (} template<T> HRESULT)",
    "insertText": "PostAsyncHandlers(internal::IAsyncOperationT<T>* async_operation, base::OnceCallback<void(internal::AsyncResultsT<T>)> success_callback, base::OnceCallback<void(HRESULT)> failure_callback)"
  },
  {
    "label": "PostAsyncHandlers()",
    "kind": "Method",
    "detail": "Function (} template<T> HRESULT)",
    "insertText": "PostAsyncHandlers(internal::IAsyncOperationT<T>* async_operation, base::OnceCallback<void(internal::AsyncResultsT<T>)> success_callback, base::OnceCallback<void(HRESULT, internal::AsyncResultsT<T>)> failure_callback)"
  },
  {
    "label": "PostAsyncResults()",
    "kind": "Method",
    "detail": "Function (} template<T> HRESULT)",
    "insertText": "PostAsyncResults(Microsoft::WRL::ComPtr<internal::IAsyncOperationT<T>> async_operation, base::OnceCallback<void(internal::AsyncResultsT<T>)> callback)"
  }
]