[
  {
    "label": "ObjectLinkingLayerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectLinkingLayerBase"
  },
  {
    "label": "LinkedObjectSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkedObjectSet"
  },
  {
    "label": "DoNothingOnNotifyLoaded",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DoNothingOnNotifyLoaded"
  },
  {
    "label": "ObjectLinkingLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectLinkingLayer"
  },
  {
    "label": "ConcreteLinkedObjectSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConcreteLinkedObjectSet"
  },
  {
    "label": "LinkedObjectSet()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_OBJECTLINKINGLAYER_H # define LLVM_EXECUTIONENGINE_ORC_OBJECTLINKINGLAYER_H # include \" JITSymbol . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ExecutionEngine / ExecutionEngine . h \" # include \" llvm / ExecutionEngine / SectionMemoryManager . h \" # include<list> # include<memory> namespace llvm { namespace orc { class ObjectLinkingLayerBase { protected : class LinkedObjectSet {)",
    "insertText": "LinkedObjectSet(const LinkedObjectSet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const LinkedObjectSet&)"
  },
  {
    "label": "LinkedObjectSet()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LinkedObjectSet(RuntimeDyld::MemoryManager &MemMgr, RuntimeDyld::SymbolResolver &Resolver) : RTDyld(llvm::make_unique<RuntimeDyld>(MemMgr, Resolver)), State(Raw)"
  },
  {
    "label": "LinkedObjectSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LinkedObjectSet()"
  },
  {
    "label": "addObject()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<RuntimeDyld::LoadedObjectInfo>)",
    "insertText": "addObject(const object::ObjectFile &Obj)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (} RuntimeDyld::SymbolInfo)",
    "insertText": "getSymbol(StringRef Name)"
  },
  {
    "label": "NeedsFinalization()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsFinalization()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finalize()"
  },
  {
    "label": "mapSectionAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mapSectionAddress(const void *LocalAddress, TargetAddress TargetAddr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((State != Finalized) && \"Attempting to remap sections for finalized objects.\")"
  },
  {
    "label": "mapSectionAddress()",
    "kind": "Method",
    "detail": "Function (RTDyld ->)",
    "insertText": "mapSectionAddress(LocalAddress, TargetAddr)"
  },
  {
    "label": "takeOwnershipOfBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "takeOwnershipOfBuffer(std::unique_ptr<MemoryBuffer> B)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (OwnedBuffers .)",
    "insertText": "push_back(std::move(B))"
  },
  {
    "label": "takeOwnershipOfBuffers()",
    "kind": "Method",
    "detail": "Function (} protected : std::unique_ptr<RuntimeDyld> RTDyld ; enum { Raw,Finalizing,Finalized } State ; std::vector<std::unique_ptr<MemoryBuffer>> OwnedBuffers ; } ; typedef std::list<std::unique_ptr<LinkedObjectSet>> LinkedObjectSetListT ; public : typedef LinkedObjectSetListT::iterator ObjSetHandleT ; template<OwningMBSet> void)",
    "insertText": "takeOwnershipOfBuffers(ObjSetHandleT H, OwningMBSet MBs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; class DoNothingOnNotifyLoaded { public : template<ObjSetT,LoadResult> void)",
    "insertText": "operator()(ObjectLinkingLayerBase::ObjSetHandleT, const ObjSetT &, const LoadResult &)"
  },
  {
    "label": "ConcreteLinkedObjectSet()",
    "kind": "Method",
    "detail": "Function (} } ; template<NotifyLoadedFtor = DoNothingOnNotifyLoaded> class ObjectLinkingLayer : public ObjectLinkingLayerBase { private : template<MemoryManagerPtrT,SymbolResolverPtrT> class ConcreteLinkedObjectSet : public LinkedObjectSet { public :)",
    "insertText": "ConcreteLinkedObjectSet(MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver) : LinkedObjectSet(*MemMgr, *Resolver), MemMgr(std::move(MemMgr)), Resolver(std::move(Resolver))"
  },
  {
    "label": "resolveRelocations()",
    "kind": "Method",
    "detail": "Function (State = Finalizing ; RTDyld ->)",
    "insertText": "resolveRelocations()"
  },
  {
    "label": "registerEHFrames()",
    "kind": "Method",
    "detail": "Function (RTDyld ->)",
    "insertText": "registerEHFrames()"
  },
  {
    "label": "finalizeMemory()",
    "kind": "Method",
    "detail": "Function (MemMgr ->)",
    "insertText": "finalizeMemory()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (OwnedBuffers .)",
    "insertText": "clear()"
  },
  {
    "label": "createLinkedObjectSet()",
    "kind": "Method",
    "detail": "Function (State = Finalized ; } private : MemoryManagerPtrT MemMgr ; SymbolResolverPtrT Resolver ; } ; template<MemoryManagerPtrT,SymbolResolverPtrT> std::unique_ptr<LinkedObjectSet>)",
    "insertText": "createLinkedObjectSet(MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "LOS()",
    "kind": "Method",
    "detail": "Function (typedef ConcreteLinkedObjectSet<MemoryManagerPtrT,SymbolResolverPtrT> LOS ; return llvm::make_unique<)",
    "insertText": "LOS(std::move(MemMgr), std::move(Resolver))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} public : typedef std::vector<std::unique_ptr<RuntimeDyld::LoadedObjectInfo>> LoadedObjInfoList ; typedef std::function<)",
    "insertText": "void(ObjSetHandleT)"
  },
  {
    "label": "ObjectLinkingLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectLinkingLayer(NotifyLoadedFtor NotifyLoaded = NotifyLoadedFtor(), NotifyFinalizedFtor NotifyFinalized = NotifyFinalizedFtor()) : NotifyLoaded(std::move(NotifyLoaded)), NotifyFinalized(std::move(NotifyFinalized))"
  },
  {
    "label": "addObjectSet()",
    "kind": "Method",
    "detail": "Function (} template<ObjSetT,MemoryManagerPtrT,SymbolResolverPtrT> ObjSetHandleT)",
    "insertText": "addObjectSet(const ObjSetT &Objects, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (ObjSetHandleT Handle = LinkedObjSetList .)",
    "insertText": "insert(LinkedObjSetList.end(), createLinkedObjectSet(std::move(MemMgr), std::move(Resolver)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LinkedObjectSet& LOS =** Handle ; LoadedObjInfoList LoadedObjInfos ;)",
    "insertText": "for(auto &Obj : Objects) LoadedObjInfos.push_back(LOS.addObject(*Obj))"
  },
  {
    "label": "NotifyLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLoaded(Handle, Objects, LoadedObjInfos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (LinkedObjSetList .)",
    "insertText": "erase(H)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbol(StringRef Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "getAddress()",
    "kind": "Method",
    "detail": "Function (auto Addr = Sym .)",
    "insertText": "getAddress()"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (auto Flags = Sym .)",
    "insertText": "getFlags()"
  },
  {
    "label": "H()",
    "kind": "Method",
    "detail": "Function (} else { auto GetAddress = [ this,Addr,)",
    "insertText": "H()"
  },
  {
    "label": "JITSymbol()",
    "kind": "Method",
    "detail": "Function (} return Addr ; } ; return)",
    "insertText": "JITSymbol(std::move(GetAddress), Flags)"
  },
  {
    "label": "mapSectionAddress()",
    "kind": "Method",
    "detail": "Function (} } } return nullptr ; } void)",
    "insertText": "mapSectionAddress(ObjSetHandleT H, const void *LocalAddress, TargetAddress TargetAddr)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitAndFinalize(ObjSetHandleT H)"
  }
]