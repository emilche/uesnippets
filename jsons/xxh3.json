[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef XXH3_H_1397135465 # define XXH3_H_1397135465 # ifndef XXHASH_H_5627135585666179 # undef XXH_INLINE_ALL # define XXH_INLINE_ALL # endif # include \" xxhash . h \" # if)",
    "insertText": "defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L # define XXH_RESTRICT restrict #else # define XXH_RESTRICT #endif #if (defined(__GNUC__) && (__GNUC__ >= 3)) \\ || (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 800)) \\ || defined(__clang__) # define XXH_likely(x) __builtin_expect(x, 1) # define XXH_unlikely(x) __builtin_expect(x, 0) #else # define XXH_likely(x) (x) # define XXH_unlikely(x) (x) #endif #if defined(__GNUC__) # if defined(__AVX2__) # include <immintrin.h> # elif defined(__SSE2__) # include <emmintrin.h> # elif defined(__ARM_NEON__) || defined(__ARM_NEON) # define inline __inline__ # include <arm_neon.h> # undef inline # endif #elif defined(_MSC_VER) # include <intrin.h> #endif #if defined(__thumb__) && !defined(__thumb2__) && defined(__ARM_ARCH_ISA_ARM) # warning \"XXH3 is highly inefficient without ARM or Thumb-2.\" #endif #define XXH_SCALAR 0 #define XXH_SSE2 1 #define XXH_AVX2 2 #define XXH_NEON 3 #define XXH_VSX 4 #ifndef XXH_VECTOR # if defined(__AVX2__) # define XXH_VECTOR XXH_AVX2 # elif defined(__SSE2__) || defined(_M_AMD64) || defined(_M_X64) || (defined(_M_IX86_FP) && (_M_IX86_FP == 2)) # define XXH_VECTOR XXH_SSE2 # elif defined(__GNUC__) \\ && (defined(__ARM_NEON__) || defined(__ARM_NEON)) \\ && (defined(__LITTLE_ENDIAN__) \\ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)) # define XXH_VECTOR XXH_NEON # elif (defined(__PPC64__) && defined(__POWER8_VECTOR__)) \\ || (defined(__s390x__) && defined(__VEC__)) \\ && defined(__GNUC__) # define XXH_VECTOR XXH_VSX # else # define XXH_VECTOR XXH_SCALAR # endif #endif #ifndef XXH_ACC_ALIGN # if XXH_VECTOR == XXH_SCALAR # define XXH_ACC_ALIGN 8 # elif XXH_VECTOR == XXH_SSE2 # define XXH_ACC_ALIGN 16 # elif XXH_VECTOR == XXH_AVX2 # define XXH_ACC_ALIGN 32 # elif XXH_VECTOR == XXH_NEON # define XXH_ACC_ALIGN 16 # elif XXH_VECTOR == XXH_VSX # define XXH_ACC_ALIGN 16 # endif #endif #if XXH_VECTOR == XXH_AVX2 \\ && defined(__GNUC__) && !defined(__clang__) \\ && defined(__OPTIMIZE__) && !defined(__OPTIMIZE_SIZE__) # pragma GCC push_options # pragma GCC optimize(\"-O2\") #endif #if XXH_VECTOR == XXH_NEON # if !defined(XXH_NO_VZIP_HACK) \\ && defined(__GNUC__) \\ && !defined(__aarch64__) && !defined(__arm64__) # define XXH_SPLIT_IN_PLACE(in, outLo, outHi)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ \\)",
    "insertText": "__asm__(\"vzip.32 %e0, %f0\" : \"+w\" (in))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) # else # define XXH_SPLIT_IN_PLACE(in, outLo, outHi)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) # endif #endif #if XXH_VECTOR == XXH_VSX # if defined(__s390x__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef __vector unsigned char xxh_u8x16 ; typedef __vector unsigned xxh_u32x4 ; # ifndef XXH_VSX_BE # if)",
    "insertText": "defined(__BIG_ENDIAN__) \\ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) # define XXH_VSX_BE 1 # elif defined(__VEC_ELEMENT_REG_ORDER__) && __VEC_ELEMENT_REG_ORDER__ == __ORDER_BIG_ENDIAN__ # warning \"-maltivec=be is not recommended. Please use native endianness.\" # define XXH_VSX_BE 1 # else # define XXH_VSX_BE 0 # endif # endif # if XXH_VSX_BE # if defined(__POWER9_VECTOR__) || (defined(__clang__) && defined(__s390x__)) # define XXH_vec_revb vec_revb # else XXH_FORCE_INLINE xxh_u64x2 XXH_vec_revb(xxh_u64x2 val)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (xxh_u8x16 const vByteSwap = { 0 x07,0 x06,0 x05,0 x04,0 x03,0 x02,0 x01,0 x00,0 x0F,0 x0E,0 x0D,0 x0C,0 x0B,0 x0A,0 x09,0 x08 } ; return)",
    "insertText": "vec_perm(val, val, vByteSwap)"
  },
  {
    "label": "XXH_vec_loadu()",
    "kind": "Method",
    "detail": "Function (} # endif # endif XXH_FORCE_INLINE xxh_u64x2)",
    "insertText": "XXH_vec_loadu(const void *ptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 ret ;)",
    "insertText": "memcpy(&ret, ptr, sizeof(xxh_u64x2))"
  },
  {
    "label": "XXH_vec_revb()",
    "kind": "Method",
    "detail": "Function (# if XXH_VSX_BE ret =)",
    "insertText": "XXH_vec_revb(ret)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif return ret ; } # if)",
    "insertText": "defined(__s390x__) # define XXH_vec_mulo vec_mulo # define XXH_vec_mule vec_mule # elif defined(__clang__) && __has_builtin(__builtin_altivec_vmuleuw) # define XXH_vec_mulo __builtin_altivec_vmulouw # define XXH_vec_mule __builtin_altivec_vmuleuw # else XXH_FORCE_INLINE xxh_u64x2 XXH_vec_mulo(xxh_u32x4 a, xxh_u32x4 b)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 result ;)",
    "insertText": "__asm__(\"vmulouw %0, %1, %2\" : \"=v\" (result) : \"v\" (a), \"v\" (b))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 result ;)",
    "insertText": "__asm__(\"vmuleuw %0, %1, %2\" : \"=v\" (result) : \"v\" (a), \"v\" (b))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (0 xb8,0 xfe,0 x6c,0 x39,0 x23,0 xa4,0 x4b,0 xbe,0 x7c,0 x01,0 x81,0 x2c,0 xf7,0 x21,0 xad,0 x1c,0 xde,0 xd4,0 x6d,0 xe9,0 x83,0 x90,0 x97,0 xdb,0 x72,0 x40,0 xa4,0 xa4,0 xb7,0 xb3,0 x67,0 x1f,0 xcb,0 x79,0 xe6,0 x4e,0 xcc,0 xc0,0 xe5,0 x78,0 x82,0 x5a,0 xd0,0 x7d,0 xcc,0 xff,0 x72,0 x21,0 xb8,0 x08,0 x46,0 x74,0 xf7,0 x43,0 x24,0 x8e,0 xe0,0 x35,0 x90,0 xe6,0 x81,0 x3a,0 x26,0 x4c,0 x3c,0 x28,0 x52,0 xbb,0 x91,0 xc3,0 x00,0 xcb,0 x88,0 xd0,0 x65,0 x8b,0 x1b,0 x53,0 x2e,0 xa3,0 x71,0 x64,0 x48,0 x97,0 xa2,0 x0d,0 xf9,0 x4e,0 x38,0 x19,0 xef,0 x46,0 xa9,0 xde,0 xac,0 xd8,0 xa8,0 xfa,0 x76,0 x3f,0 xe3,0 x9c,0 x34,0 x3f,0 xf9,0 xdc,0 xbb,0 xc7,0 xc7,0 x0b,0 x4f,0 x1d,0 x8a,0 x51,0 xe0,0 x4b,0 xcd,0 xb4,0 x59,0 x31,0 xc8,0 x9f,0 x7e,0 xc9,0 xd9,0 x78,0 x73,0 x64,0 xea,0 xc5,0 xac,0 x83,0 x34,0 xd3,0 xeb,0 xc3,0 xc5,0 x81,0 xa0,0 xff,0 xfa,0 x13,0 x63,0 xeb,0 x17,0 x0d,0 xdd,0 x51,0 xb7,0 xf0,0 xda,0 x49,0 xd3,0 x16,0 x55,0 x26,0 x29,0 xd4,0 x68,0 x9e,0 x2b,0 x16,0 xbe,0 x58,0 x7d,0 x47,0 xa1,0 xfc,0 x8f,0 xf8,0 xb8,0 xd1,0 x7a,0 xd0,0 x31,0 xce,0 x45,0 xcb,0 x3a,0 x8f,0 x95,0 x16,0 x04,0 x28,0 xaf,0 xd7,0 xfb,0 xca,0 xbb,0 x4b,0 x40,0 x7e,} ; # if)",
    "insertText": "defined(_MSC_VER) && defined(_M_IX86) # include <intrin.h> # define XXH_mult32to64(x, y) __emulu((unsigned)(x), (unsigned)(y)) #else # define XXH_mult32to64(x, y) ((xxh_u64)(xxh_u32)(x) * (xxh_u64)(xxh_u32)(y)) #endif static XXH128_hash_t XXH_mult64to128(xxh_u64 lhs, xxh_u64 rhs)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && !defined(__wasm__) \\ && defined(__SIZEOF_INT128__) \\ || (defined(_INTEGRAL_MAX_BITS) && _INTEGRAL_MAX_BITS >= 128) __uint128_t product = (__uint128_t)lhs * (__uint128_t)"
  },
  {
    "label": "r128()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const)",
    "insertText": "r128(xxh_u64)(product), (xxh_u64)(product >> 64)"
  },
  {
    "label": "_umul128()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const product_low =)",
    "insertText": "_umul128(lhs, rhs, &product_high)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const r128 = { product_low,product_high } ; return r128 ; # else xxh_u64 const lo_lo =)",
    "insertText": "XXH_mult32to64(lhs & 0xFFFFFFFF, rhs & 0xFFFFFFFF)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const hi_lo =)",
    "insertText": "XXH_mult32to64(lhs >> 32, rhs & 0xFFFFFFFF)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const lo_hi =)",
    "insertText": "XXH_mult32to64(lhs & 0xFFFFFFFF, rhs >> 32)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const hi_hi =)",
    "insertText": "XXH_mult32to64(lhs >> 32, rhs >> 32)"
  },
  {
    "label": "cross()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "cross(lo_lo >> 32) + (hi_lo & 0xFFFFFFFF)"
  },
  {
    "label": "upper()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "upper(hi_lo >> 32) + (cross >> 32)"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "lower(cross << 32) | (lo_lo & 0xFFFFFFFF)"
  },
  {
    "label": "XXH3_mul128_fold64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t r128 = { lower,upper } ; return r128 ; # endif } xxh_u64)",
    "insertText": "XXH3_mul128_fold64(xxh_u64 lhs, xxh_u64 rhs)"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t product =)",
    "insertText": "XXH_mult64to128(lhs, rhs)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(0 <= shift && shift < 64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_avalanche(xxh_u64 h64)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH_xorshift64(h64, 37)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (h64* = 0 x165667919E3779F9ULL ; h64 =)",
    "insertText": "XXH_xorshift64(h64, 32)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(input != NULL)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(1 <= len && len <= 3)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(secret != NULL)"
  },
  {
    "label": "combined()",
    "kind": "Method",
    "detail": "Function ({ xxh_u8 const c1 = input [ 0 ] ; xxh_u8 const c2 = input [ len>> 1 ] ; xxh_u8 const c3 = input [ len - 1 ] ; xxh_u32 const)",
    "insertText": "combined((xxh_u32)c1<<16) | (((xxh_u32)c2) << 24) | (((xxh_u32)c3) << 0) | (((xxh_u32)len) << 8)"
  },
  {
    "label": "bitflip()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip(XXH_readLE32(secret) ^ XXH_readLE32(secret+4))"
  },
  {
    "label": "keyed()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "keyed(xxh_u64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const mixed = keyed* PRIME64_1 ; return)",
    "insertText": "XXH3_avalanche(mixed)"
  },
  {
    "label": "XXH3_len_4to8_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_4to8_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(4 <= len && len < 8)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(xxh_u64)XXH_swap32((xxh_u32)seed)"
  },
  {
    "label": "XXH_readLE32()",
    "kind": "Method",
    "detail": "Function ({ xxh_u32 const input1 =)",
    "insertText": "XXH_readLE32(input)"
  },
  {
    "label": "XXH_readLE32()",
    "kind": "Method",
    "detail": "Function (xxh_u32 const input2 =)",
    "insertText": "XXH_readLE32(input + len - 4)"
  },
  {
    "label": "bitflip()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip(XXH_readLE64(secret+8) ^ XXH_readLE64(secret+16))"
  },
  {
    "label": "input2()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input64 =)",
    "insertText": "input2(((xxh_u64)input1) << 32)"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 x = input64 ^ bitflip ; x ^ =)",
    "insertText": "XXH_rotl64(x, 49) ^ XXH_rotl64(x, 24)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (x* = 0 x9FB21C651E98DF25ULL ;)",
    "insertText": "x(x >> 35)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (x* = 0 x9FB21C651E98DF25ULL ; return)",
    "insertText": "XXH_xorshift64(x, 28)"
  },
  {
    "label": "XXH3_len_9to16_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_9to16_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(8 <= len && len <= 16)"
  },
  {
    "label": "bitflip1()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const)",
    "insertText": "bitflip1(XXH_readLE64(secret+24) ^ XXH_readLE64(secret+32))"
  },
  {
    "label": "bitflip2()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip2(XXH_readLE64(secret+40) ^ XXH_readLE64(secret+48))"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_lo =)",
    "insertText": "XXH_readLE64(input)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_hi =)",
    "insertText": "XXH_readLE64(input + len - 8)"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const acc = len +)",
    "insertText": "XXH_swap64(input_lo) + input_hi + XXH3_mul128_fold64(input_lo, input_hi)"
  },
  {
    "label": "XXH3_len_0to16_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_0to16_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(len <= 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "if(XXH_likely(len > 8)) return XXH3_len_9to16_64b(input, len, secret, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH3_mix16B(const xxh_u8* XXH_RESTRICT input, const xxh_u8* XXH_RESTRICT secret, xxh_u64 seed64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && !defined(__clang__) \\ && defined(__i386__) && defined(__SSE2__) \\ && !defined(XXH_ENABLE_AUTOVECTORIZE) __asm__ (\"\" : \"+r\" (seed64))"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_hi =)",
    "insertText": "XXH_readLE64(input+8)"
  },
  {
    "label": "XXH3_len_17to128_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_17to128_64b(const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(secretSize >= XXH3_SECRET_SIZE_MIN)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(16 < len && len <= 128)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 acc = len* PRIME64_1 ;)",
    "insertText": "if(len > 32)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+48, secret+96, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-64, secret+112, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input+32, secret+64, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-48, secret+80, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input+16, secret+32, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-32, secret+48, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input+0, secret+0, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-16, secret+16, seed)"
  },
  {
    "label": "XXH3_len_129to240_64b()",
    "kind": "Method",
    "detail": "Function (} } # define XXH3_MIDSIZE_MAX 2 4 0 XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_129to240_64b(const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(128 < len && len <= XXH3_MIDSIZE_MAX)"
  },
  {
    "label": "nbRounds()",
    "kind": "Method",
    "detail": "Function (# define XXH3_MIDSIZE_STARTOFFSET 3 # define XXH3_MIDSIZE_LASTOFFSET 1 7 { xxh_u64 acc = len* PRIME64_1 ; int const)",
    "insertText": "nbRounds(int)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i<8; i++)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+(16*i), secret+(16*i), seed)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH3_avalanche(acc)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbRounds >= 8)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) \\ && (defined(__ARM_NEON) || defined(__ARM_NEON__)) \\ && !defined(XXH_ENABLE_AUTOVECTORIZE) #pragma clang loop vectorize(disable) #endif for (i=8 ; i < nbRounds; i++)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+(16*i), secret+(16*(i-8)) + XXH3_MIDSIZE_STARTOFFSET, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input + len - 16, secret + XXH3_SECRET_SIZE_MIN - XXH3_MIDSIZE_LASTOFFSET, seed)"
  },
  {
    "label": "ACC_NB()",
    "kind": "Method",
    "detail": "Function (} } # define STRIPE_LEN 6 4 # define XXH_SECRET_CONSUME_RATE 8 # define)",
    "insertText": "ACC_NB(STRIPE_LEN / sizeof(xxh_u64))"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (XXH3_acc_64bits,XXH3_acc_128bits } XXH3_accWidth_e ; XXH_FORCE_INLINE void)",
    "insertText": "XXH3_accumulate_512(void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret, XXH3_accWidth_e accWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(XXH_VECTOR == XXH_AVX2) XXH_ASSERT((((size_t)acc) & 31) == 0)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(32) __m256i* const xacc = (__m256i *)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (const __m256i* const)",
    "insertText": "xinput(const __m256i *)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const __m256i* const)",
    "insertText": "xsecret(const __m256i *)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < STRIPE_LEN/sizeof(__m256i); i++)"
  },
  {
    "label": "_mm256_loadu_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const data_vec =)",
    "insertText": "_mm256_loadu_si256(xinput+i)"
  },
  {
    "label": "_mm256_loadu_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const key_vec =)",
    "insertText": "_mm256_loadu_si256(xsecret+i)"
  },
  {
    "label": "_mm256_xor_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const data_key =)",
    "insertText": "_mm256_xor_si256(data_vec, key_vec)"
  },
  {
    "label": "_mm256_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m256i const data_key_lo =)",
    "insertText": "_mm256_shuffle_epi32(data_key, _MM_SHUFFLE(0, 3, 0, 1))"
  },
  {
    "label": "_mm256_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m256i const product =)",
    "insertText": "_mm256_mul_epu32(data_key, data_key_lo)"
  },
  {
    "label": "_mm256_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m256i const data_swap =)",
    "insertText": "_mm256_shuffle_epi32(data_vec, _MM_SHUFFLE(1, 0, 3, 2))"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (__m256i const sum =)",
    "insertText": "_mm256_add_epi64(xacc[i], data_swap)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm256_add_epi64(product, sum)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (} else { __m256i const sum =)",
    "insertText": "_mm256_add_epi64(xacc[i], data_vec)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} } } #)",
    "insertText": "elif(XXH_VECTOR == XXH_SSE2) XXH_ASSERT((((size_t)acc) & 15) == 0)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(16) __m128i* const xacc = (__m128i *)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (const __m128i* const)",
    "insertText": "xinput(const __m128i *)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const __m128i* const)",
    "insertText": "xsecret(const __m128i *)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < STRIPE_LEN/sizeof(__m128i); i++)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const data_vec =)",
    "insertText": "_mm_loadu_si128(xinput+i)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const key_vec =)",
    "insertText": "_mm_loadu_si128(xsecret+i)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const data_key =)",
    "insertText": "_mm_xor_si128(data_vec, key_vec)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i const data_key_lo =)",
    "insertText": "_mm_shuffle_epi32(data_key, _MM_SHUFFLE(0, 3, 0, 1))"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i const product =)",
    "insertText": "_mm_mul_epu32(data_key, data_key_lo)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i const data_swap =)",
    "insertText": "_mm_shuffle_epi32(data_vec, _MM_SHUFFLE(1,0,3,2))"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i const sum =)",
    "insertText": "_mm_add_epi64(xacc[i], data_swap)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm_add_epi64(product, sum)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (} else { __m128i const sum =)",
    "insertText": "_mm_add_epi64(xacc[i], data_vec)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} } } #)",
    "insertText": "elif(XXH_VECTOR == XXH_NEON) XXH_ASSERT((((size_t)acc) & 15) == 0)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(16) uint64x2_t* const xacc = (uint64x2_t *)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (uint8_t const* const)",
    "insertText": "xinput(const uint8_t *)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (uint8_t const* const)",
    "insertText": "xsecret(const uint8_t *)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < STRIPE_LEN / sizeof(uint64x2_t); i++)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t data_vec =)",
    "insertText": "vld1q_u8(xinput + (i * 16))"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t key_vec =)",
    "insertText": "vld1q_u8(xsecret + (i * 16))"
  },
  {
    "label": "vreinterpretq_u64_u8()",
    "kind": "Method",
    "detail": "Function (uint64x2_t data_key =)",
    "insertText": "vreinterpretq_u64_u8(veorq_u8(data_vec, key_vec))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32x2_t data_key_lo,data_key_hi ;)",
    "insertText": "if(accWidth == XXH3_acc_64bits)"
  },
  {
    "label": "vaddq_u64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vaddq_u64(xacc[i], vreinterpretq_u64_u8(data_vec))"
  },
  {
    "label": "vreinterpretq_u64_u8()",
    "kind": "Method",
    "detail": "Function (} else { uint64x2_t const data64 =)",
    "insertText": "vreinterpretq_u64_u8(data_vec)"
  },
  {
    "label": "vextq_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t const swapped =)",
    "insertText": "vextq_u64(data64, data64, 1)"
  },
  {
    "label": "vaddq_u64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vaddq_u64(xacc[i], swapped)"
  },
  {
    "label": "XXH_SPLIT_IN_PLACE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XXH_SPLIT_IN_PLACE(data_key, data_key_lo, data_key_hi)"
  },
  {
    "label": "vmlal_u32()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vmlal_u32(xacc[i], data_key_lo, data_key_hi)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} } #)",
    "insertText": "elif(XXH_VECTOR == XXH_VSX) xxh_u64x2* const xacc = (xxh_u64x2*)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const* const)",
    "insertText": "xinput(xxh_u64x2 const*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const* const)",
    "insertText": "xsecret(xxh_u64x2 const*)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const v32 = { 3 2,3 2 } ; size_t i ;)",
    "insertText": "for(i = 0; i < STRIPE_LEN / sizeof(xxh_u64x2); i++)"
  },
  {
    "label": "XXH_vec_loadu()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const data_vec =)",
    "insertText": "XXH_vec_loadu(xinput + i)"
  },
  {
    "label": "XXH_vec_loadu()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const key_vec =)",
    "insertText": "XXH_vec_loadu(xsecret + i)"
  },
  {
    "label": "shuffled()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const data_key = data_vec ^ key_vec ; xxh_u32x4 const)",
    "insertText": "shuffled(xxh_u32x4)vec_rl(data_key, v32)"
  },
  {
    "label": "XXH_vec_mulo()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const product =)",
    "insertText": "XXH_vec_mulo((xxh_u32x4)data_key, shuffled)"
  },
  {
    "label": "vec_permi()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] + = data_vec ; } else { # ifdef __s390x__ xxh_u64x2 const data_swapped =)",
    "insertText": "vec_permi(data_vec, data_vec, 2)"
  },
  {
    "label": "vec_xxpermdi()",
    "kind": "Method",
    "detail": "Function (# else xxh_u64x2 const data_swapped =)",
    "insertText": "vec_xxpermdi(data_vec, data_vec, 2)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (# endif xacc [ i ] + = data_swapped ; } } # else)",
    "insertText": "XXH_ALIGN(XXH_ACC_ALIGN) xxh_u64* const xacc = (xxh_u64*)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const)",
    "insertText": "xinput(const xxh_u8*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const)",
    "insertText": "xsecret(const xxh_u8*)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "XXH_ASSERT(((size_t)acc & (XXH_ACC_ALIGN-1)) == 0)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const data_val =)",
    "insertText": "XXH_readLE64(xinput + 8*i)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const data_key = data_val ^)",
    "insertText": "XXH_readLE64(xsecret + i*8)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] + = data_val ; } else { xacc [ i ^ 1 ] + = data_val ; } xacc [ i ] + =)",
    "insertText": "XXH_mult32to64(data_key & 0xFFFFFFFF, data_key >> 32)"
  },
  {
    "label": "XXH3_scrambleAcc()",
    "kind": "Method",
    "detail": "Function (} # endif } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_scrambleAcc(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(32) __m256i* const xacc = (__m256i*)"
  },
  {
    "label": "_mm256_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m256i prime32 =)",
    "insertText": "_mm256_set1_epi32((int)PRIME32_1)"
  },
  {
    "label": "_mm256_srli_epi64()",
    "kind": "Method",
    "detail": "Function (__m256i const acc_vec = xacc [ i ] ; __m256i const shifted =)",
    "insertText": "_mm256_srli_epi64(acc_vec, 47)"
  },
  {
    "label": "_mm256_xor_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const data_vec =)",
    "insertText": "_mm256_xor_si256(acc_vec, shifted)"
  },
  {
    "label": "_mm256_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m256i const prod_lo =)",
    "insertText": "_mm256_mul_epu32(data_key, prime32)"
  },
  {
    "label": "_mm256_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m256i const prod_hi =)",
    "insertText": "_mm256_mul_epu32(data_key_hi, prime32)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm256_add_epi64(prod_lo, _mm256_slli_epi64(prod_hi, 32))"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(16) __m128i* const xacc = (__m128i*)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i prime32 =)",
    "insertText": "_mm_set1_epi32((int)PRIME32_1)"
  },
  {
    "label": "_mm_srli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i const acc_vec = xacc [ i ] ; __m128i const shifted =)",
    "insertText": "_mm_srli_epi64(acc_vec, 47)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const data_vec =)",
    "insertText": "_mm_xor_si128(acc_vec, shifted)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i const prod_lo =)",
    "insertText": "_mm_mul_epu32(data_key, prime32)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i const prod_hi =)",
    "insertText": "_mm_mul_epu32(data_key_hi, prime32)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm_add_epi64(prod_lo, _mm_slli_epi64(prod_hi, 32))"
  },
  {
    "label": "xacc()",
    "kind": "Method",
    "detail": "Function ({ uint64x2_t*)",
    "insertText": "xacc(uint64x2_t*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (uint8_t const*)",
    "insertText": "xsecret(uint8_t const*)"
  },
  {
    "label": "vdup_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t prime =)",
    "insertText": "vdup_n_u32(PRIME32_1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < STRIPE_LEN/sizeof(uint64x2_t); i++)"
  },
  {
    "label": "vshrq_n_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t acc_vec = xacc [ i ] ; uint64x2_t shifted =)",
    "insertText": "vshrq_n_u64(acc_vec, 47)"
  },
  {
    "label": "veorq_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t data_vec =)",
    "insertText": "veorq_u64(acc_vec, shifted)"
  },
  {
    "label": "veorq_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t data_key =)",
    "insertText": "veorq_u64(data_vec, vreinterpretq_u64_u8(key_vec))"
  },
  {
    "label": "vmull_u32()",
    "kind": "Method",
    "detail": "Function ({ uint64x2_t prod_hi =)",
    "insertText": "vmull_u32(data_key_hi, prime)"
  },
  {
    "label": "vshlq_n_u64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vshlq_n_u64(prod_hi, 32)"
  },
  {
    "label": "vmlal_u32()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vmlal_u32(xacc[i], data_key_lo, prime)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} } } #)",
    "insertText": "elif(XXH_VECTOR == XXH_VSX) XXH_ASSERT((((size_t)acc) & 15) == 0)"
  },
  {
    "label": "xacc()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64x2* const)",
    "insertText": "xacc(xxh_u64x2*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const xxh_u64x2* const)",
    "insertText": "xsecret(const xxh_u64x2*)"
  },
  {
    "label": "acc_vec()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const acc_vec = xacc [ i ] ; xxh_u64x2 const data_vec =)",
    "insertText": "acc_vec(acc_vec >> v47)"
  },
  {
    "label": "XXH_vec_mule()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const data_key = data_vec ^ key_vec ; xxh_u64x2 const prod_even =)",
    "insertText": "XXH_vec_mule((xxh_u32x4)data_key, prime)"
  },
  {
    "label": "XXH_vec_mulo()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const prod_odd =)",
    "insertText": "XXH_vec_mulo((xxh_u32x4)data_key, prime)"
  },
  {
    "label": "prod_odd()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "prod_odd(prod_even << v32)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "XXH_ASSERT((((size_t)acc) & (XXH_ACC_ALIGN-1)) == 0)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const key64 =)",
    "insertText": "XXH_readLE64(xsecret + 8*i)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 acc64 = xacc [ i ] ; acc64 =)",
    "insertText": "XXH_xorshift64(acc64, 47)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (acc64 ^ = key64 ; acc64* = PRIME32_1 ; xacc [ i ] = acc64 ; } # endif } # define XXH_PREFETCH_DIST 3 8 4 XXH_FORCE_INLINE void)",
    "insertText": "XXH3_accumulate(xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT input, const xxh_u8* XXH_RESTRICT secret, size_t nbStripes, XXH3_accWidth_e accWidth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t n ;)",
    "insertText": "for(n = 0; n < nbStripes; n++)"
  },
  {
    "label": "XXH_PREFETCH()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const in = input + n* STRIPE_LEN ;)",
    "insertText": "XXH_PREFETCH(in + XXH_PREFETCH_DIST)"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate_512(acc, in, secret + n*XXH_SECRET_CONSUME_RATE, accWidth)"
  },
  {
    "label": "XXH3_hashLong_internal_loop()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_hashLong_internal_loop(xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize, XXH3_accWidth_e accWidth)"
  },
  {
    "label": "nb_rounds()",
    "kind": "Method",
    "detail": "Function (size_t const)",
    "insertText": "nb_rounds(secretSize - STRIPE_LEN)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate(acc, input + n*block_len, secret, nb_rounds, accWidth)"
  },
  {
    "label": "XXH3_scrambleAcc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_scrambleAcc(acc, secret + secretSize - STRIPE_LEN)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XXH_ASSERT(len > STRIPE_LEN)"
  },
  {
    "label": "nbStripes()",
    "kind": "Method",
    "detail": "Function ({ size_t const)",
    "insertText": "nbStripes(len - (block_len * nb_blocks))"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbStripes <= (secretSize / XXH_SECRET_CONSUME_RATE))"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate(acc, input + nb_blocks*block_len, secret, nbStripes, accWidth)"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const p = input + len - STRIPE_LEN ; # define XXH_SECRET_LASTACC_START 7)",
    "insertText": "XXH3_accumulate_512(acc, p, secret + secretSize - STRIPE_LEN - XXH_SECRET_LASTACC_START, accWidth)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH3_mix2Accs(const xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_mergeAccs(const xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT secret, xxh_u64 start)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (xxh_u64 result64 = start ; result64 + =)",
    "insertText": "XXH3_mix2Accs(acc+0, secret + 0)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (result64 + =)",
    "insertText": "XXH3_mix2Accs(acc+2, secret + 16)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (result64 + =)",
    "insertText": "XXH3_mix2Accs(acc+4, secret + 32)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (result64 + =)",
    "insertText": "XXH3_mix2Accs(acc+6, secret + 48)"
  },
  {
    "label": "XXH3_hashLong_internal()",
    "kind": "Method",
    "detail": "Function (} # define XXH3_INIT_ACC { PRIME32_3,PRIME64_1,PRIME64_2,PRIME64_3,\\ PRIME64_4,PRIME32_2,PRIME64_5,PRIME32_1 } ; XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_internal(const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(XXH_ACC_ALIGN)"
  },
  {
    "label": "XXH3_hashLong_internal_loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_hashLong_internal_loop(acc, input, len, secret, secretSize, XXH3_acc_64bits)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(sizeof(acc) == 64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (# define XXH_SECRET_MERGEACCS_START 1 1)",
    "insertText": "XXH_ASSERT(secretSize >= sizeof(acc) + XXH_SECRET_MERGEACCS_START)"
  },
  {
    "label": "XXH3_hashLong_64b_defaultSecret()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_defaultSecret(const xxh_u8* XXH_RESTRICT input, size_t len)"
  },
  {
    "label": "XXH3_hashLong_64b_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_withSecret(const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize)"
  },
  {
    "label": "XXH_writeLE64()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE void)",
    "insertText": "XXH_writeLE64(void* dst, xxh_u64 v64)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst, &v64, sizeof(v64))"
  },
  {
    "label": "XXH3_initCustomSecret()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE void)",
    "insertText": "XXH3_initCustomSecret(xxh_u8* customSecret, xxh_u64 seed64)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (int const nbRounds = XXH_SECRET_DEFAULT_SIZE / 1 6 ; int i ;)",
    "insertText": "XXH_STATIC_ASSERT((XXH_SECRET_DEFAULT_SIZE & 15) == 0)"
  },
  {
    "label": "XXH_writeLE64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_writeLE64(customSecret + 16*i, XXH_readLE64(kSecret + 16*i) + seed64)"
  },
  {
    "label": "XXH_writeLE64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_writeLE64(customSecret + 16*i + 8, XXH_readLE64(kSecret + 16*i + 8) - seed64)"
  },
  {
    "label": "XXH3_hashLong_64b_withSeed()",
    "kind": "Method",
    "detail": "Function (} } XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_withSeed(const xxh_u8* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(8)"
  },
  {
    "label": "XXH3_initCustomSecret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_initCustomSecret(secret, seed)"
  },
  {
    "label": "XXH3_64bits()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_64bits(const void* input, size_t len)"
  },
  {
    "label": "XXH3_64bits_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_64bits_withSecret(const void* input, size_t len, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_64bits_withSeed()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_64bits_withSeed(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_createState()",
    "kind": "Method",
    "detail": "Function (} XXH3_state_t*)",
    "insertText": "XXH3_createState(void)"
  },
  {
    "label": "XXH3_freeState()",
    "kind": "Method",
    "detail": "Function (} XXH_errorcode)",
    "insertText": "XXH3_freeState(XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_free(statePtr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst_state, src_state, sizeof(*dst_state))"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH3_64bits_reset_internal(XXH3_state_t* statePtr, XXH64_hash_t seed, const xxh_u8* secret, size_t secretSize)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(statePtr != NULL)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(statePtr, 0, sizeof(*statePtr))"
  },
  {
    "label": "secretLimit()",
    "kind": "Method",
    "detail": "Function (statePtr ->)",
    "insertText": "secretLimit(XXH32_hash_t)(secretSize - STRIPE_LEN)"
  },
  {
    "label": "XXH3_64bits_reset()",
    "kind": "Method",
    "detail": "Function (statePtr -> nbStripesPerBlock = statePtr -> secretLimit / XXH_SECRET_CONSUME_RATE ; } XXH_errorcode)",
    "insertText": "XXH3_64bits_reset(XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, 0, kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, 0, (const xxh_u8*)secret, secretSize)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, seed, kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_initCustomSecret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_initCustomSecret(statePtr->customSecret, seed)"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (statePtr -> secret = statePtr -> customSecret ; return XXH_OK ; } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_consumeStripes(xxh_u64* acc, XXH32_hash_t* nbStripesSoFarPtr, XXH32_hash_t nbStripesPerBlock, const xxh_u8* input, size_t totalStripes, const xxh_u8* secret, size_t secretLimit, XXH3_accWidth_e accWidth)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(*nbStripesSoFarPtr < nbStripesPerBlock)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (size_t const nbStripes = nbStripesPerBlock -* nbStripesSoFarPtr ;)",
    "insertText": "XXH3_accumulate(acc, input, secret + nbStripesSoFarPtr[0] * XXH_SECRET_CONSUME_RATE, nbStripes, accWidth)"
  },
  {
    "label": "XXH3_scrambleAcc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_scrambleAcc(acc, secret + secretLimit)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate(acc, input + nbStripes * STRIPE_LEN, secret, totalStripes - nbStripes, accWidth)"
  },
  {
    "label": "nbStripesSoFarPtr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "nbStripesSoFarPtr(XXH32_hash_t)(totalStripes - nbStripes)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "XXH3_accumulate(acc, input, secret + nbStripesSoFarPtr[0] * XXH_SECRET_CONSUME_RATE, totalStripes, accWidth)"
  },
  {
    "label": "nbStripesSoFarPtr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "nbStripesSoFarPtr(XXH32_hash_t)"
  },
  {
    "label": "XXH3_update()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH_errorcode)",
    "insertText": "XXH3_update(XXH3_state_t* state, const xxh_u8* input, size_t len, XXH3_accWidth_e accWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else return XXH_ERROR ; # endif { const xxh_u8* const bEnd = input + len ; state -> totalLen + = len ;)",
    "insertText": "if(state->bufferedSize + len <= XXH3_INTERNALBUFFER_SIZE)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(state->buffer + state->bufferedSize, input, len)"
  },
  {
    "label": "bufferedSize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "bufferedSize(XXH32_hash_t)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (size_t const loadSize = XXH3_INTERNALBUFFER_SIZE - state -> bufferedSize ;)",
    "insertText": "XXH_memcpy(state->buffer + state->bufferedSize, input, loadSize)"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (input + = loadSize ;)",
    "insertText": "XXH3_consumeStripes(state->acc, &state->nbStripesSoFar, state->nbStripesPerBlock, state->buffer, XXH3_INTERNALBUFFER_STRIPES, state->secret, state->secretLimit, accWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state -> bufferedSize = 0 ; })",
    "insertText": "if(input+XXH3_INTERNALBUFFER_SIZE <= bEnd)"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const limit = bEnd - XXH3_INTERNALBUFFER_SIZE ; do {)",
    "insertText": "XXH3_consumeStripes(state->acc, &state->nbStripesSoFar, state->nbStripesPerBlock, input, XXH3_INTERNALBUFFER_STRIPES, state->secret, state->secretLimit, accWidth)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (input + = XXH3_INTERNALBUFFER_SIZE ; })",
    "insertText": "while(input<=limit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(input < bEnd)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(state->buffer, input, (size_t)(bEnd-input))"
  },
  {
    "label": "bufferedSize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "bufferedSize(XXH32_hash_t)(bEnd-input)"
  },
  {
    "label": "XXH3_64bits_update()",
    "kind": "Method",
    "detail": "Function (} } return XXH_OK ; } XXH_errorcode)",
    "insertText": "XXH3_64bits_update(XXH3_state_t* state, const void* input, size_t len)"
  },
  {
    "label": "XXH3_digest_long()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE void)",
    "insertText": "XXH3_digest_long(XXH64_hash_t* acc, const XXH3_state_t* state, XXH3_accWidth_e accWidth)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(acc, state->acc, sizeof(state->acc))"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (size_t const totalNbStripes = state -> bufferedSize / STRIPE_LEN ; XXH32_hash_t nbStripesSoFar = state -> nbStripesSoFar ;)",
    "insertText": "XXH3_consumeStripes(acc, &nbStripesSoFar, state->nbStripesPerBlock, state->buffer, totalNbStripes, state->secret, state->secretLimit, accWidth)"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate_512(acc, state->buffer + state->bufferedSize - STRIPE_LEN, state->secret + state->secretLimit - XXH_SECRET_LASTACC_START, accWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(state->bufferedSize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (xxh_u8 lastStripe [ STRIPE_LEN ] ; size_t const catchupSize = STRIPE_LEN - state -> bufferedSize ;)",
    "insertText": "memcpy(lastStripe, state->buffer + sizeof(state->buffer) - catchupSize, catchupSize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(lastStripe + catchupSize, state->buffer, state->bufferedSize)"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate_512(acc, lastStripe, state->secret + state->secretLimit - XXH_SECRET_LASTACC_START, accWidth)"
  },
  {
    "label": "XXH3_64bits_digest()",
    "kind": "Method",
    "detail": "Function (} } } XXH64_hash_t)",
    "insertText": "XXH3_64bits_digest(const XXH3_state_t* state)"
  },
  {
    "label": "XXH3_digest_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_digest_long(acc, state, XXH3_acc_64bits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(state->seed) return XXH3_64bits_withSeed(state->buffer, (size_t)state->totalLen, state->seed)"
  },
  {
    "label": "XXH3_len_1to3_128b()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE XXH128_hash_t)",
    "insertText": "XXH3_len_1to3_128b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "combinedl()",
    "kind": "Method",
    "detail": "Function ({ xxh_u8 const c1 = input [ 0 ] ; xxh_u8 const c2 = input [ len>> 1 ] ; xxh_u8 const c3 = input [ len - 1 ] ; xxh_u32 const)",
    "insertText": "combinedl((xxh_u32)c1<<16) | (((xxh_u32)c2) << 24) | (((xxh_u32)c3) << 0) | (((xxh_u32)len) << 8)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (xxh_u32 const combinedh =)",
    "insertText": "XXH_rotl32(XXH_swap32(combinedl), 13)"
  },
  {
    "label": "bitflipl()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflipl(XXH_readLE32(secret) ^ XXH_readLE32(secret+4))"
  },
  {
    "label": "bitfliph()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitfliph(XXH_readLE32(secret+8) ^ XXH_readLE32(secret+12))"
  },
  {
    "label": "keyed_lo()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "keyed_lo(xxh_u64)"
  },
  {
    "label": "keyed_hi()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "keyed_hi(xxh_u64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const mixedl = keyed_lo* PRIME64_1 ; xxh_u64 const mixedh = keyed_hi* PRIME64_5 ; XXH128_hash_t const h128 = {)",
    "insertText": "XXH3_avalanche(mixedl) , XXH3_avalanche(mixedh)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(4 <= len && len <= 8)"
  },
  {
    "label": "input_lo()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_64 =)",
    "insertText": "input_lo((xxh_u64)input_hi << 32)"
  },
  {
    "label": "bitflip()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip(XXH_readLE64(secret+16) ^ XXH_readLE64(secret+24))"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const keyed = input_64 ^ bitflip ; XXH128_hash_t m128 =)",
    "insertText": "XXH_mult64to128(keyed, PRIME64_1 + (len << 2))"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "high64(m128.low64 << 1)"
  },
  {
    "label": "low64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "low64(m128.high64 >> 3)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (m128 . low64 =)",
    "insertText": "XXH_xorshift64(m128.low64, 35)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (m128 . low64* = 0 x9FB21C651E98DF25ULL ; m128 . low64 =)",
    "insertText": "XXH_xorshift64(m128.low64, 28)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (m128 . high64 =)",
    "insertText": "XXH3_avalanche(m128.high64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(9 <= len && len <= 16)"
  },
  {
    "label": "bitflipl()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const)",
    "insertText": "bitflipl(XXH_readLE64(secret+32) ^ XXH_readLE64(secret+40))"
  },
  {
    "label": "bitfliph()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitfliph(XXH_readLE64(secret+48) ^ XXH_readLE64(secret+56))"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t m128 =)",
    "insertText": "XXH_mult64to128(input_lo ^ input_hi ^ bitflipl, PRIME64_1)"
  },
  {
    "label": "low64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "low64(xxh_u64)(len - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (input_hi ^ = bitfliph ;)",
    "insertText": "if(sizeof(void *) < sizeof(xxh_u64))"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "high64(input_hi & 0xFFFFFFFF00000000) + XXH_mult32to64((xxh_u32)input_hi, PRIME32_2)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (} else { m128 . high64 + = input_hi +)",
    "insertText": "XXH_mult32to64((xxh_u32)input_hi, PRIME32_2 - 1)"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (} m128 . low64 ^ =)",
    "insertText": "XXH_swap64(m128.high64)"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 =)",
    "insertText": "XXH_mult64to128(m128.low64, PRIME64_2)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 + = m128 . high64* PRIME64_2 ; h128 . low64 =)",
    "insertText": "XXH3_avalanche(h128.low64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH3_avalanche(h128.high64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "if(len > 8) return XXH3_len_9to16_128b(input, len, secret, seed)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 ; xxh_u64 const bitflipl =)",
    "insertText": "XXH_readLE64(secret+64) ^ XXH_readLE64(secret+72)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const bitfliph =)",
    "insertText": "XXH_readLE64(secret+80) ^ XXH_readLE64(secret+88)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . low64 =)",
    "insertText": "XXH3_avalanche((PRIME64_1 + seed) ^ bitflipl)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH3_avalanche((PRIME64_2 - seed) ^ bitfliph)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc . low64 + =)",
    "insertText": "XXH3_mix16B(input_1, secret+0, seed)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (acc . low64 ^ =)",
    "insertText": "XXH_readLE64(input_2) + XXH_readLE64(input_2 + 8)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc . high64 + =)",
    "insertText": "XXH3_mix16B(input_2, secret+16, seed)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (acc . high64 ^ =)",
    "insertText": "XXH_readLE64(input_1) + XXH_readLE64(input_1 + 8)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (acc =)",
    "insertText": "XXH128_mix32B(acc, input+48, input+len-64, secret+96, seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input+32, input+len-48, secret+64, seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input+16, input+len-32, secret+32, seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input, input+len-16, secret, seed)"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const low64 = acc . low64 + acc . high64 ; xxh_u64 const)",
    "insertText": "high64(acc.low64 * PRIME64_1) + (acc.high64 * PRIME64_4) + ((len - seed) * PRIME64_2)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const h128 = {)",
    "insertText": "XXH3_avalanche(low64), (XXH64_hash_t)0 - XXH3_avalanche(high64)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ; acc . low64 = len* PRIME64_1 ; acc . high64 = 0 ;)",
    "insertText": "for(i=0; i<4; i++)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (acc =)",
    "insertText": "XXH128_mix32B(acc, input+(32*i), input+(32*i)+16, secret+(32*i), seed)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (} acc . low64 =)",
    "insertText": "XXH3_avalanche(acc.low64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (acc . high64 =)",
    "insertText": "XXH3_avalanche(acc.high64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbRounds >= 4)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (acc =)",
    "insertText": "XXH128_mix32B(acc, input+(32*i), input+(32*i)+16, secret+XXH3_MIDSIZE_STARTOFFSET+(32*(i-4)), seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input + len - 16, input + len - 32, secret + XXH3_SECRET_SIZE_MIN - XXH3_MIDSIZE_LASTOFFSET - 16, 0ULL - seed)"
  },
  {
    "label": "XXH3_hashLong_internal_loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_hashLong_internal_loop(acc, input, len, secret, secretSize, XXH3_acc_128bits)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const low64 =)",
    "insertText": "XXH3_mergeAccs(acc, secret + XXH_SECRET_MERGEACCS_START, (xxh_u64)len * PRIME64_1)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const high64 =)",
    "insertText": "XXH3_mergeAccs(acc, secret + secretSize - sizeof(acc) - XXH_SECRET_MERGEACCS_START, ~((xxh_u64)len * PRIME64_2))"
  },
  {
    "label": "XXH3_hashLong_128b_defaultSecret()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const h128 = { low64,high64 } ; return h128 ; } } XXH_NO_INLINE XXH128_hash_t)",
    "insertText": "XXH3_hashLong_128b_defaultSecret(const xxh_u8* input, size_t len)"
  },
  {
    "label": "XXH3_hashLong_128b_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH128_hash_t)",
    "insertText": "XXH3_hashLong_128b_withSecret(const xxh_u8* input, size_t len, const xxh_u8* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_hashLong_128b_withSeed()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH128_hash_t)",
    "insertText": "XXH3_hashLong_128b_withSeed(const xxh_u8* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_128bits()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits(const void* input, size_t len)"
  },
  {
    "label": "XXH3_128bits_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits_withSecret(const void* input, size_t len, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_128bits_withSeed()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits_withSeed(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH128()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH128(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH3_128bits_reset_internal(XXH3_state_t* statePtr, XXH64_hash_t seed, const xxh_u8* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, seed, secret, secretSize)"
  },
  {
    "label": "XXH3_128bits_reset()",
    "kind": "Method",
    "detail": "Function (} XXH_errorcode)",
    "insertText": "XXH3_128bits_reset(XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_128bits_reset_internal(statePtr, 0, kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_128bits_reset_internal(statePtr, 0, (const xxh_u8*)secret, secretSize)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_128bits_reset_internal(statePtr, seed, kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_128bits_update()",
    "kind": "Method",
    "detail": "Function (statePtr -> secret = statePtr -> customSecret ; return XXH_OK ; } XXH_errorcode)",
    "insertText": "XXH3_128bits_update(XXH3_state_t* state, const void* input, size_t len)"
  },
  {
    "label": "XXH3_128bits_digest()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits_digest(const XXH3_state_t* state)"
  },
  {
    "label": "XXH3_digest_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_digest_long(acc, state, XXH3_acc_128bits)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(state->secretLimit + STRIPE_LEN >= sizeof(acc) + XXH_SECRET_MERGEACCS_START)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const low64 =)",
    "insertText": "XXH3_mergeAccs(acc, state->secret + XXH_SECRET_MERGEACCS_START, (xxh_u64)state->totalLen * PRIME64_1)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const high64 =)",
    "insertText": "XXH3_mergeAccs(acc, state->secret + state->secretLimit + STRIPE_LEN - sizeof(acc) - XXH_SECRET_MERGEACCS_START, ~((xxh_u64)state->totalLen * PRIME64_2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const h128 = { low64,high64 } ; return h128 ; } })",
    "insertText": "if(state->seed) return XXH3_128bits_withSeed(state->buffer, (size_t)state->totalLen, state->seed)"
  },
  {
    "label": "XXH128_isEqual()",
    "kind": "Method",
    "detail": "Function (} # include<string . h> int)",
    "insertText": "XXH128_isEqual(XXH128_hash_t h1, XXH128_hash_t h2)"
  },
  {
    "label": "XXH128_cmp()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "XXH128_cmp(const void* h128_1, const void* h128_2)"
  },
  {
    "label": "h1()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const)",
    "insertText": "h1(const XXH128_hash_t*)"
  },
  {
    "label": "h2()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const)",
    "insertText": "h2(const XXH128_hash_t*)"
  },
  {
    "label": "hcmp()",
    "kind": "Method",
    "detail": "Function (int const)",
    "insertText": "hcmp(h1.high64 > h2.high64) - (h2.high64 > h1.high64)"
  },
  {
    "label": "XXH128_canonicalFromHash()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH128_canonicalFromHash(XXH128_canonical_t* dst, XXH128_hash_t hash)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(sizeof(XXH128_canonical_t) == sizeof(XXH128_hash_t))"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (hash . high64 =)",
    "insertText": "XXH_swap64(hash.high64)"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (hash . low64 =)",
    "insertText": "XXH_swap64(hash.low64)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(dst, &hash.high64, sizeof(hash.high64))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy((char*)dst + sizeof(hash.high64), &hash.low64, sizeof(hash.low64))"
  },
  {
    "label": "XXH128_hashFromCanonical()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH128_hashFromCanonical(const XXH128_canonical_t* src)"
  },
  {
    "label": "XXH_readBE64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t h ; h . high64 =)",
    "insertText": "XXH_readBE64(src)"
  },
  {
    "label": "XXH_readBE64()",
    "kind": "Method",
    "detail": "Function (h . low64 =)",
    "insertText": "XXH_readBE64(src->digest + 8)"
  }
]