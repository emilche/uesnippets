[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "EMaterialSamplerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialSamplerType"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "UMaterialExpressionTextureBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionTextureBase"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Materials / MaterialExpression . h \" # include \" MaterialExpressionTextureBase . generated . h \" class UTexture ; struct FPropertyChangedEvent ; enum EMaterialSamplerType : int ; enum EShaderPlatform : uint16 ;)",
    "insertText": "UCLASS(abstract, hidecategories=Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=MaterialExpressionTextureBase)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "MatchesSearchQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesSearchQuery(const TCHAR* SearchQuery)"
  },
  {
    "label": "GetPreviewOverlayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPreviewOverlayText()"
  },
  {
    "label": "GetReferencedTexture()",
    "kind": "Method",
    "detail": "Function (# endif UObject*)",
    "insertText": "GetReferencedTexture()"
  },
  {
    "label": "CanReferenceTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReferenceTexture()"
  },
  {
    "label": "GetSamplerTypeForTexture()",
    "kind": "Method",
    "detail": "Function (EMaterialSamplerType)",
    "insertText": "GetSamplerTypeForTexture(const UTexture* Texture, bool ForceNoVT = false)"
  },
  {
    "label": "VerifySamplerType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifySamplerType(const FString& TexturePathName, EMaterialSamplerType CorrectSamplerType, bool bSRGB, EMaterialSamplerType SamplerType, FString& OutErrorMessage)"
  },
  {
    "label": "VerifySamplerType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifySamplerType(EShaderPlatform ShaderPlatform, const ITargetPlatform* TargetPlatform, const UTexture* Texture, EMaterialSamplerType SamplerType, FString& OutErrorMessage)"
  }
]