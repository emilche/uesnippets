[
  {
    "label": "FMediaTimeStamp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaTimeStamp"
  },
  {
    "label": "FMediaTimeStampSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaTimeStampSample"
  },
  {
    "label": "IMediaTimeSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTimeSource"
  },
  {
    "label": "FMediaTimeStamp()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Timespan . h \" # include \" Math / NumericLimits . h \" class FMediaTimeStamp { public :)",
    "insertText": "FMediaTimeStamp() : Time(FTimespan::MinValue()), SequenceIndex(0)"
  },
  {
    "label": "FMediaTimeStamp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaTimeStamp(const FTimespan & InTime) : Time(InTime), SequenceIndex(0)"
  },
  {
    "label": "FMediaTimeStamp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaTimeStamp(const FTimespan & InTime, int64 InSequenceIndex) : Time(InTime), SequenceIndex(InSequenceIndex)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (Time =)",
    "insertText": "MinValue()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsRelative()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRelative()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMediaTimeStamp & Other)"
  },
  {
    "label": "SetPrimaryIndex()",
    "kind": "Method",
    "detail": "Function (} FMediaTimeStamp&)",
    "insertText": "SetPrimaryIndex(int32 InSetTo)"
  },
  {
    "label": "MakeSequenceIndex()",
    "kind": "Method",
    "detail": "Function (SequenceIndex =)",
    "insertText": "MakeSequenceIndex(InSetTo, GetSecondaryIndex())"
  },
  {
    "label": "MakeSequenceIndex()",
    "kind": "Method",
    "detail": "Function (SequenceIndex =)",
    "insertText": "MakeSequenceIndex(GetPrimaryIndex(), InSetTo)"
  },
  {
    "label": "SequenceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceIndex(static_cast<int64>(Add) << 32)"
  },
  {
    "label": "GetPrimaryIndex()",
    "kind": "Method",
    "detail": "Function (SequenceIndex + = Add ; return* this ; } int32)",
    "insertText": "GetPrimaryIndex()"
  },
  {
    "label": "GetSecondaryIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSecondaryIndex()"
  },
  {
    "label": "MakeSequenceIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "MakeSequenceIndex(int32 PrimaryIndex, int32 SecondaryIndex)"
  },
  {
    "label": "AdjustPrimaryIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "AdjustPrimaryIndex(int64 InSequenceIndex, int32 Add)"
  },
  {
    "label": "AdjustSecondaryIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "AdjustSecondaryIndex(int64 InSequenceIndex, int32 Add)"
  },
  {
    "label": "GetSecondaryIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSecondaryIndex(int64 InSequenceIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMediaTimeStamp)",
    "insertText": "operator(const FTimespan & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMediaTimeStamp)",
    "insertText": "operator(const FMediaTimeStamp& Other)"
  },
  {
    "label": "FMediaTimeStampSample()",
    "kind": "Method",
    "detail": "Function (Time - = Other . Time ; SequenceIndex = MAX_int64 ; return* this ; } FTimespan Time ; int64 SequenceIndex ; } ; class FMediaTimeStampSample { public :)",
    "insertText": "FMediaTimeStampSample() : SampledAtTime(-1.0)"
  },
  {
    "label": "FMediaTimeStampSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaTimeStampSample(const FMediaTimeStamp & InTimeStamp, double InSampledAtTime) : TimeStamp(InTimeStamp), SampledAtTime(InSampledAtTime)"
  },
  {
    "label": "GetTimecode()",
    "kind": "Method",
    "detail": "Function (} FMediaTimeStamp TimeStamp ; double SampledAtTime ; } ; class IMediaTimeSource { public : FTimespan)",
    "insertText": "GetTimecode()"
  },
  {
    "label": "IMediaTimeSource()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "IMediaTimeSource()"
  }
]