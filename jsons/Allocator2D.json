[
  {
    "label": "FMD5Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMD5Hash"
  },
  {
    "label": "FRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRect"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FAllocator2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocator2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegment"
  },
  {
    "label": "FRun",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRun"
  },
  {
    "label": "FStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStats"
  },
  {
    "label": "FStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStat"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMemory . h \" # include \" MeshUtilitiesCommon . h \" struct FMD5Hash ; struct FRect ; struct Rect ; template<FuncType> class TFunctionRef ; # define DEBUG_LAYOUT_STATS 0 class FAllocator2D { public : enum class EMode { FreeSegments,UsedSegments } ; struct FRect { uint32 X ; uint32 Y ; uint32 W ; uint32 H ; } ; struct FSegment { uint32 StartPos ; uint32 Length ; bool)",
    "insertText": "operator(const FSegment& Other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Find(FRect& Rect)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Test(FRect Rect)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Alloc(FRect Rect)"
  },
  {
    "label": "FindBitByBit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindBitByBit(FRect& Rect, const FAllocator2D& Other)"
  },
  {
    "label": "FindWithSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindWithSegments(FRect& Rect, const FAllocator2D& Other, TFunctionRef<bool (const FAllocator2D::FRect&)> IsBestRect)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Test(FRect Rect, const FAllocator2D& Other)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Alloc(FRect Rect, const FAllocator2D& Other)"
  },
  {
    "label": "GetBit()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetBit(uint32 x, uint32 y)"
  },
  {
    "label": "SetBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBit(uint32 x, uint32 y)"
  },
  {
    "label": "ClearBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBit(uint32 x, uint32 y)"
  },
  {
    "label": "CreateUsedSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUsedSegments()"
  },
  {
    "label": "MergeRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeRun(FRun& Run, const FRun& OtherRun, uint32 RectOffset, uint32 RectLength, uint32 PrimaryResolution , uint32 PerpendicularResolution)"
  },
  {
    "label": "MergeSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeSegments(const FRect& Rect, const FAllocator2D& Other)"
  },
  {
    "label": "FlipX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipX(const FRect& Rect)"
  },
  {
    "label": "FlipY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipY(const FRect& Rect)"
  },
  {
    "label": "GetUsedTexels()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUsedTexels()"
  },
  {
    "label": "CopyRuns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRuns(TArray<FRun>& Runs, const TArray<FRun>& OtherRuns, int32 MaxSize)"
  },
  {
    "label": "FAllocator2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAllocator2D(const FAllocator2D& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAllocator2D&)",
    "insertText": "operator(const FAllocator2D& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetRasterMD5()",
    "kind": "Method",
    "detail": "Function (FMD5Hash)",
    "insertText": "GetRasterMD5()"
  },
  {
    "label": "GetRasterWidth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRasterWidth()"
  },
  {
    "label": "PublishStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PublishStats(int32 ChartIndex, int32 Orientation, bool bFound, const FRect& Rect, const FRect& BestRect, const FMD5Hash& ChartMD5, TFunctionRef<bool (const FAllocator2D::FRect&)> IsBestRect)"
  },
  {
    "label": "TestOneRun()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "TestOneRun(const FRun& Run, const FRun& OtherRun, uint32 RectOffset, uint32 RectLength, uint32 PrimaryResolution, uint32& OutFailedLength)"
  },
  {
    "label": "TestAllRows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestAllRows(const FRect& Rect, const FAllocator2D& Other, uint32& FailedLength)"
  },
  {
    "label": "TestAllColumns()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestAllColumns(const FRect& Rect, const FAllocator2D& Other, uint32& FailedLength)"
  },
  {
    "label": "InitRuns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRuns(TArray<FRun>& Runs, uint32 PrimaryResolution, uint32 PerpendicularRasterSize)"
  },
  {
    "label": "InitSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSegments()"
  },
  {
    "label": "AddUsedSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUsedSegment(FRun& Run, uint32 StartPos, uint32 Length)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const EMode Mode ; const uint32 Width ; const uint32 Height ; const uint32 Pitch ; const ELightmapUVVersion LayoutVersion ; uint32 RasterWidth ; uint32 RasterHeight ; TArray<FRun> Rows ; TArray<FRun> Columns ; TArray<uint64> Bits ; TArray<uint16> SortedRowsIndex ; TArray<uint16> SortedColumnsIndex ; private : struct FStats { struct FStat { # if DEBUG_LAYOUT_STATS void)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value + + ; } void)",
    "insertText": "operator(uint64 InValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Value + = InValue ; } uint64)",
    "insertText": "GetValue()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(FStats))"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(x >> 6) + y * Pitch ] |= ( 1ull << ( x & 63 ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RasterHeight = y + 1 ; })",
    "insertText": "if(x >= RasterWidth)"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(x >> 6) + y * Pitch ] &= ~( 1ull << ( x & 63 ))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint32 LowShift = Rect . X& 6 3 ; const uint32 HighShift = 6 4 - LowShift ;)",
    "insertText": "for(uint32 y = 0; y < Rect.H; y++)"
  },
  {
    "label": "ThisIndex()",
    "kind": "Method",
    "detail": "Function (# if 1 uint32)",
    "insertText": "ThisIndex(Rect.X >> 6) + (y + Rect.Y)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 OtherIndex = y* Pitch ;)",
    "insertText": "for(uint32 x = 0; x < Rect.W; x += 64)"
  },
  {
    "label": "ThisInt()",
    "kind": "Method",
    "detail": "Function (uint64 LowInt = Bits [ ThisIndex ] ; uint64 HighInt = Bits [ ThisIndex + 1 ] ; uint64)",
    "insertText": "ThisInt(HighInt << HighShift) | (LowInt >> LowShift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 OtherInt = Other . Bits [ OtherIndex ] ;)",
    "insertText": "if(ThisInt & OtherInt)"
  }
]