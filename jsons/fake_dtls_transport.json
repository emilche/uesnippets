[
  {
    "label": "FakeDtlsTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeDtlsTransport"
  },
  {
    "label": "FakeDtlsTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_FAKE_DTLS_TRANSPORT_H_ # define P2P_BASE_FAKE_DTLS_TRANSPORT_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / crypto / crypto_options . h \" # include \" api / dtls_transport_interface . h \" # include \" p2p / base / dtls_transport_internal . h \" # include \" p2p / base / fake_ice_transport . h \" # include \" rtc_base / fake_ssl_identity . h \" # include \" rtc_base / rtc_certificate . h \" namespace cricket { class FakeDtlsTransport : public DtlsTransportInternal { public :)",
    "insertText": "FakeDtlsTransport(FakeIceTransport* ice_transport) : ice_transport_(ice_transport), transport_name_(ice_transport->transport_name()), component_(ice_transport->component()), dtls_fingerprint_(\"\", nullptr)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(ice_transport_)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (ice_transport_ -> SignalReadPacket .)",
    "insertText": "connect(this, &FakeDtlsTransport::OnIceTransportReadPacket)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (ice_transport_ -> SignalNetworkRouteChanged .)",
    "insertText": "connect(this, &FakeDtlsTransport::OnNetworkRouteChanged)"
  },
  {
    "label": "FakeDtlsTransport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FakeDtlsTransport(std::unique_ptr<FakeIceTransport> ice) : owned_ice_transport_(std::move(ice)), transport_name_(owned_ice_transport_->transport_name()), component_(owned_ice_transport_->component()), dtls_fingerprint_(\"\", rtc::ArrayView<const uint8_t>())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (ice_transport_ = owned_ice_transport_ .)",
    "insertText": "get()"
  },
  {
    "label": "FakeDtlsTransport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FakeDtlsTransport(const std::string& name, int component) : FakeDtlsTransport(std::make_unique<FakeIceTransport>(name, component))"
  },
  {
    "label": "FakeDtlsTransport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FakeDtlsTransport(const std::string& name, int component, rtc::Thread* network_thread) : FakeDtlsTransport(std::make_unique<FakeIceTransport>(name, component, network_thread))"
  },
  {
    "label": "FakeDtlsTransport()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakeDtlsTransport()"
  },
  {
    "label": "fake_ice_transport()",
    "kind": "Method",
    "detail": "Function (dest_ -> dest_ = nullptr ; } } FakeIceTransport*)",
    "insertText": "fake_ice_transport()"
  },
  {
    "label": "SetAsync()",
    "kind": "Method",
    "detail": "Function (ice_transport_ ->)",
    "insertText": "SetAsync(async)"
  },
  {
    "label": "SetAsyncDelay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAsyncDelay(int delay_ms)"
  },
  {
    "label": "SetAsyncDelay()",
    "kind": "Method",
    "detail": "Function (ice_transport_ ->)",
    "insertText": "SetAsyncDelay(delay_ms)"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWritable(bool writable)"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (ice_transport_ ->)",
    "insertText": "SetWritable(writable)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_writable(writable)"
  },
  {
    "label": "SetReceiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReceiving(bool receiving)"
  },
  {
    "label": "SetReceiving()",
    "kind": "Method",
    "detail": "Function (ice_transport_ ->)",
    "insertText": "SetReceiving(receiving)"
  },
  {
    "label": "set_receiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_receiving(receiving)"
  },
  {
    "label": "SetDtlsState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDtlsState(webrtc::DtlsTransportState state)"
  },
  {
    "label": "SendDtlsState()",
    "kind": "Method",
    "detail": "Function (dtls_state_ = state ;)",
    "insertText": "SendDtlsState(this, dtls_state_)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDestination(FakeDtlsTransport* dest, bool asymmetric = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dest_ = dest ;)",
    "insertText": "if(local_cert_ && dest_->local_cert_)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (} else { do_dtls_ = false ;)",
    "insertText": "RTC_LOG(LS_INFO)"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetWritable(true)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (dest ->)",
    "insertText": "SetDestination(this, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!dtls_role_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (dtls_role_ =)",
    "insertText": "move(rtc::SSL_CLIENT)"
  },
  {
    "label": "SetDtlsState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetDtlsState(webrtc::DtlsTransportState::kConnected)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (ice_transport_ ->)",
    "insertText": "SetDestination(static_cast<FakeIceTransport*>(dest->ice_transport()), asymmetric)"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (} else { dest_ = nullptr ;)",
    "insertText": "SetWritable(false)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (ice_transport_ ->)",
    "insertText": "SetDestination(nullptr, asymmetric)"
  },
  {
    "label": "dtls_state()",
    "kind": "Method",
    "detail": "Function (} } webrtc::DtlsTransportState)",
    "insertText": "dtls_state()"
  },
  {
    "label": "SetDtlsRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDtlsRole(*role)"
  },
  {
    "label": "SetRemoteFingerprint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetRemoteFingerprint(alg, digest, digest_len)"
  },
  {
    "label": "SetRemoteFingerprint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetRemoteFingerprint(absl::string_view alg, const uint8_t* digest, size_t digest_len)"
  },
  {
    "label": "SSLFingerprint()",
    "kind": "Method",
    "detail": "Function (dtls_fingerprint_ =)",
    "insertText": "SSLFingerprint(alg, rtc::MakeArrayView(digest, digest_len))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (dtls_role_ =)",
    "insertText": "move(role)"
  },
  {
    "label": "IsDtlsActive()",
    "kind": "Method",
    "detail": "Function (remote_cert_ = cert ; } bool)",
    "insertText": "IsDtlsActive()"
  },
  {
    "label": "GetSslCipherSuite()",
    "kind": "Method",
    "detail": "Function (crypto_suite_ = crypto_suite ; } bool)",
    "insertText": "GetSslCipherSuite(int* cipher_suite)"
  },
  {
    "label": "SetSslCipherSuite()",
    "kind": "Method",
    "detail": "Function (* cipher_suite =* ssl_cipher_suite_ ; return true ; } return false ; } void)",
    "insertText": "SetSslCipherSuite(absl::optional<int> cipher_suite)"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (ssl_cipher_suite_ = cipher_suite ; } rtc::scoped_refptr<rtc::RTCCertificate>)",
    "insertText": "GetLocalCertificate()"
  },
  {
    "label": "ExportKeyingMaterial()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExportKeyingMaterial(absl::string_view label, const uint8_t* context, size_t context_len, bool use_context, uint8_t* result, size_t result_len)"
  },
  {
    "label": "ssl_max_protocol_version()",
    "kind": "Method",
    "detail": "Function (ssl_max_version_ = version ; } rtc::SSLProtocolVersion)",
    "insertText": "ssl_max_protocol_version()"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetError()"
  },
  {
    "label": "network_route()",
    "kind": "Method",
    "detail": "Function (} absl::optional<rtc::NetworkRoute>)",
    "insertText": "network_route()"
  },
  {
    "label": "OnIceTransportReadPacket()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnIceTransportReadPacket(PacketTransportInternal* ice_, const char* data, size_t len, const int64_t& packet_time_us, int flags)"
  },
  {
    "label": "SignalReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalReadPacket(this, data, len, packet_time_us, flags)"
  },
  {
    "label": "set_receiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_receiving(bool receiving)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_writable(bool writable)"
  },
  {
    "label": "SignalReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalReadyToSend(this)"
  },
  {
    "label": "SignalWritableState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SignalWritableState(this)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNetworkRouteChanged(absl::optional<rtc::NetworkRoute> network_route)"
  },
  {
    "label": "SignalNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalNetworkRouteChanged(network_route)"
  }
]