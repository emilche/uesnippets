[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "ISequencerEditTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditTool"
  },
  {
    "label": "FCaptureLostEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptureLostEvent"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FTimeToPixel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeToPixel"
  },
  {
    "label": "FTrackAreaViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "SOutlinerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutlinerView"
  },
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "FTrackAreaSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaSlot"
  },
  {
    "label": "FTrackAreaViewLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackAreaViewLayers"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FTrackAreaSlot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / BasicLayoutWidgetSlot . h \" # include \" Layout / Children . h \" # include \" Layout / Clipping . h \" # include \" Layout / Geometry . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / Views / SequencerInputHandlerStack . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / Optional . h \" # include \" SlotBase . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class FChildren ; class FDragDropEvent ; class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; class ISequencerEditTool ; struct FCaptureLostEvent ; struct FFrameNumber ; struct FGeometry ; struct FPointerEvent ; template<ElementType> class TRange ; struct FTimeToPixel ; namespace UE { namespace Sequencer { class FTrackAreaViewModel ; class FViewModel ; class IOutlinerExtension ; class SOutlinerView ; class STrackLane ; class FTrackAreaSlot : public TSlotBase<FTrackAreaSlot>,public TAlignmentWidgetSlotMixin<FTrackAreaSlot> { public :)",
    "insertText": "FTrackAreaSlot(const TSharedPtr<STrackLane>& InSlotContent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<STrackLane> TrackLane ; } ; struct FTrackAreaViewLayers { int32 LaneBackgrounds = 0 ; } ; class STrackAreaView : public SPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STrackAreaView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_END_ARGS() STrackAreaView()"
  },
  {
    "label": "STrackAreaView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "STrackAreaView()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TWeakPtr<FTrackAreaViewModel> InWeakViewModel)"
  },
  {
    "label": "GetViewModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTrackAreaViewModel>)",
    "insertText": "GetViewModel()"
  },
  {
    "label": "SetVirtualPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualPosition(float InVirtualTop)"
  },
  {
    "label": "GetTimeToPixel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimeToPixel>)",
    "insertText": "GetTimeToPixel()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddTrackSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackSlot(const TViewModelPtr<IOutlinerExtension>& InDataModel, const TSharedPtr<STrackLane>& InSlot)"
  },
  {
    "label": "FindTrackSlot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STrackLane>)",
    "insertText": "FindTrackSlot(const TViewModelPtr<IOutlinerExtension>& InDataModel)"
  },
  {
    "label": "SetOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutliner(const TSharedPtr<SOutlinerView>& InOutliner)"
  },
  {
    "label": "GetOutliner()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SOutlinerView>)",
    "insertText": "GetOutliner()"
  },
  {
    "label": "SetShowPinned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShowPinned(bool bShowPinned)"
  },
  {
    "label": "ShowPinned()",
    "kind": "Method",
    "detail": "Function (bShowPinnedNodes = bShowPinned ; } bool)",
    "insertText": "ShowPinned()"
  },
  {
    "label": "IsPinned()",
    "kind": "Method",
    "detail": "Function (bIsPinned = bInIsPinned ; } bool)",
    "insertText": "IsPinned()"
  },
  {
    "label": "BlendDefaultTrackColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "BlendDefaultTrackColor(FLinearColor InColor)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnResized()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnResized(const FVector2D& OldSize, const FVector2D& NewSize)"
  },
  {
    "label": "UpdateHoverStates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHoverStates(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  }
]