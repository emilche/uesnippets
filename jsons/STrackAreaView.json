[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "ISequencerEditTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditTool"
  },
  {
    "label": "FCaptureLostEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptureLostEvent"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FTimeToPixel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeToPixel"
  },
  {
    "label": "FTrackAreaViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "IOutlinerExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerExtension"
  },
  {
    "label": "SOutlinerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutlinerView"
  },
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "FTrackAreaSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaSlot"
  },
  {
    "label": "FTrackAreaViewLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackAreaViewLayers"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TWeakPtr<FTrackAreaViewModel> InWeakViewModel)"
  },
  {
    "label": "SetVirtualPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualPosition(float InVirtualTop)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddTrackSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackSlot(const TViewModelPtr<IOutlinerExtension>& InDataModel, const TSharedPtr<STrackLane>& InSlot)"
  },
  {
    "label": "FindTrackSlot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STrackLane>)",
    "insertText": "FindTrackSlot(const TViewModelPtr<IOutlinerExtension>& InDataModel)"
  },
  {
    "label": "SetOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutliner(const TSharedPtr<SOutlinerView>& InOutliner)"
  },
  {
    "label": "BlendDefaultTrackColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "BlendDefaultTrackColor(FLinearColor InColor)"
  },
  {
    "label": "UpdateHoverStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverStates( const FGeometry& MyGeometry, const FPointerEvent& MouseEvent )"
  }
]