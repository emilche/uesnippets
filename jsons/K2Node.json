[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FBlueprintActionDatabaseRegistrar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintActionDatabaseRegistrar"
  },
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "FKismetCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetCompilerContext"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UDynamicBlueprintBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDynamicBlueprintBinding"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UK2Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FMemberReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemberReference"
  },
  {
    "label": "TKeyValuePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TKeyValuePair"
  },
  {
    "label": "FOldOptionalPinSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOldOptionalPinSettings"
  },
  {
    "label": "FOptionalPinFromProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalPinFromProperty"
  },
  {
    "label": "BLUEPRINTGRAPH_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BLUEPRINTGRAPH_API"
  },
  {
    "label": "ERenamePinResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERenamePinResult"
  },
  {
    "label": "FBlueprintActionFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintActionFilter"
  },
  {
    "label": "FNodeHandlingFunctor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNodeHandlingFunctor"
  },
  {
    "label": "EBaseNodeRefreshPriority",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBaseNodeRefreshPriority"
  },
  {
    "label": "ERedirectType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERedirectType"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintActionFilter . h \" # include \" BlueprintNodeSignature . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraphNode . h \" # include \" Engine / Blueprint . h \" # include \" HAL / PlatformMath . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / LinkerLoad . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" K2Node . generated . h \" class AActor ; class FArchive ; class FBlueprintActionDatabaseRegistrar ; class FCompilerResultsLog ; class FKismetCompilerContext ; class FProperty ; class UActorComponent ; class UBlueprint ; class UClass ; class UDynamicBlueprintBinding ; class UEdGraph ; class UEdGraphPin ; class UEdGraphSchema ; class UFunction ; class UK2Node ; class UStruct ; struct FMemberReference ; template<KeyType,ValueType> struct TKeyValuePair ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnUserDefinedPinRenamed, UK2Node*, FName, FName)"
  },
  {
    "label": "FOldOptionalPinSettings()",
    "kind": "Method",
    "detail": "Function (struct FOldOptionalPinSettings { uint8 bOldVisibility : 1 ; uint8 bIsOldOverrideEnabled : 1 ; uint8 bIsOldSetValuePinVisible : 1 ; uint8 bIsOldOverridePinVisible : 1 ;)",
    "insertText": "FOldOptionalPinSettings(bool bInOldVisibility, bool bInIsOldOverrideEnabled, bool bInIsOldSetValuePinVisible, bool bInIsOldOverridePinVisible) : bOldVisibility(bInOldVisibility) , bIsOldOverrideEnabled(bInIsOldOverrideEnabled) , bIsOldSetValuePinVisible(bInIsOldSetValuePinVisible) , bIsOldOverridePinVisible(bInIsOldOverridePinVisible)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category= OptionalPin)"
  },
  {
    "label": "FOptionalPinFromProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOptionalPinFromProperty() : bShowPin(false) , bCanToggleVisibility(false) , bPropertyIsCustomized(false) , bHasOverridePin(false) , bIsMarkedForAdvancedDisplay(false) , bIsOverrideEnabled(true) , bIsSetValuePinVisible(true) , bIsOverridePinVisible(true)"
  },
  {
    "label": "FOptionalPinFromProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalPinFromProperty(FName InPropertyName, bool bInShowPin, bool bInCanToggleVisibility, const FString& InFriendlyName, const FText& InTooltip, bool bInPropertyIsCustomized, FName InCategoryName, bool bInHasOverridePin) : PropertyName(InPropertyName) , PropertyFriendlyName(InFriendlyName) #if WITH_EDITORONLY_DATA , PropertyTooltip(InTooltip) #endif , CategoryName(InCategoryName) , bShowPin(bInShowPin) , bCanToggleVisibility(bInCanToggleVisibility) , bPropertyIsCustomized(bInPropertyIsCustomized) , bHasOverridePin(bInHasOverridePin) , bIsMarkedForAdvancedDisplay(false) , bIsOverrideEnabled(true) , bIsSetValuePinVisible(true) , bIsOverridePinVisible(true)"
  },
  {
    "label": "FOptionalPinManager()",
    "kind": "Method",
    "detail": "Function (} } ; struct FOptionalPinManager { public : ~)",
    "insertText": "FOptionalPinManager()"
  },
  {
    "label": "GetRecordDefaults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetRecordDefaults(FProperty* TestProperty, FOptionalPinFromProperty& Record)"
  },
  {
    "label": "CanTreatPropertyAsOptional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTreatPropertyAsOptional(FProperty* TestProperty)"
  },
  {
    "label": "RebuildPropertyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildPropertyList(TArray<FOptionalPinFromProperty>& Properties, UStruct* SourceStruct)"
  },
  {
    "label": "CreateVisiblePins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVisiblePins(TArray<FOptionalPinFromProperty>& Properties, UStruct* SourceStruct, EEdGraphPinDirection Direction, class UK2Node* TargetNode, uint8* StructBasePtr = nullptr, uint8* DefaultsPtr = nullptr)"
  },
  {
    "label": "CustomizePinData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizePinData(UEdGraphPin* Pin, FName SourcePropertyName, int32 ArrayIndex, FProperty* Property = NULL)"
  },
  {
    "label": "CacheShownPins()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheShownPins(const TArray<FOptionalPinFromProperty>& OptionalPins, TArray<FName>& OldShownPins)"
  },
  {
    "label": "EvaluateOldShownPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateOldShownPins(const TArray<FOptionalPinFromProperty>& OptionalPins, TArray<FName>& OldShownPins, UK2Node* Node)"
  },
  {
    "label": "PostInitNewPin()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PostInitNewPin(UEdGraphPin* Pin, FOptionalPinFromProperty& Record, int32 ArrayIndex, FProperty* Property, uint8* PropertyAddress, uint8* DefaultPropertyAddress)"
  },
  {
    "label": "PostRemovedOldPin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRemovedOldPin(FOptionalPinFromProperty& Record, int32 ArrayIndex, FProperty* Property, uint8* PropertyAddress, uint8* DefaultPropertyAddress)"
  },
  {
    "label": "RebuildProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildProperty(FProperty* TestProperty, FName CategoryName, TArray<FOptionalPinFromProperty>& Properties, UStruct* SourceStruct, TMap<FName, FOldOptionalPinSettings>& OldSettings)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; enum ERenamePinResult { ERenamePinResult_Success,ERenamePinResult_NoSuchPin,ERenamePinResult_NameCollision } ;)",
    "insertText": "UCLASS(abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: BLUEPRINTGRAPH_API virtual void PreEditChange(FProperty* PropertyThatWillChange)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "HasNonEditorOnlyReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNonEditorOnlyReferences()"
  },
  {
    "label": "ReconstructNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconstructNode()"
  },
  {
    "label": "GetNodeTitleColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeTitleColor()"
  },
  {
    "label": "AutowireNewNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutowireNewNode(UEdGraphPin* FromPin)"
  },
  {
    "label": "PinConnectionListChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PinConnectionListChanged(UEdGraphPin* Pin)"
  },
  {
    "label": "GetJumpTargetForDoubleClick()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetJumpTargetForDoubleClick()"
  },
  {
    "label": "CanJumpToDefinition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanJumpToDefinition()"
  },
  {
    "label": "JumpToDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToDefinition()"
  },
  {
    "label": "GetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationLink()"
  },
  {
    "label": "GetPinHoverText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPinHoverText(const UEdGraphPin& Pin, FString& HoverTextOut)"
  },
  {
    "label": "ShowPaletteIconOnNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowPaletteIconOnNode()"
  },
  {
    "label": "GetPassThroughPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetPassThroughPin(const UEdGraphPin* FromPin)"
  },
  {
    "label": "IsInDevelopmentMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInDevelopmentMode()"
  },
  {
    "label": "ValidateNodeDuringCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateNodeDuringCompilation(FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "GetPinMetaData()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPinMetaData(FName InPinName, FName InKey)"
  },
  {
    "label": "ReallocatePinsDuringReconstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocatePinsDuringReconstruction(TArray<UEdGraphPin*>& OldPins)"
  },
  {
    "label": "IsNodePure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodePure()"
  },
  {
    "label": "DrawNodeAsEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DrawNodeAsEntry()"
  },
  {
    "label": "GetToolTipHeading()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetToolTipHeading()"
  },
  {
    "label": "IsActionFilteredOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActionFilteredOut(class FBlueprintActionFilter const& Filter)"
  },
  {
    "label": "CreatePinsForFunctionEntryExit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreatePinsForFunctionEntryExit(const UFunction* Function, bool bForFunctionEntry)"
  },
  {
    "label": "ExpandNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandNode(class FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph)"
  },
  {
    "label": "ClearCachedBlueprintData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedBlueprintData(UBlueprint* Blueprint)"
  },
  {
    "label": "ConvertDeprecatedNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConvertDeprecatedNode(UEdGraph* Graph, bool bOnlySafeChanges)"
  },
  {
    "label": "CreateNodeHandler()",
    "kind": "Method",
    "detail": "Function (} class FNodeHandlingFunctor*)",
    "insertText": "CreateNodeHandler(class FKismetCompilerContext& CompilerContext)"
  },
  {
    "label": "IsNodeSafeToIgnore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeSafeToIgnore()"
  },
  {
    "label": "NodeCausesStructuralBlueprintChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NodeCausesStructuralBlueprintChange()"
  },
  {
    "label": "GetBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetBlueprint()"
  },
  {
    "label": "GetExecPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetExecPin()"
  },
  {
    "label": "GetThenPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetThenPin()"
  },
  {
    "label": "GetReferencedLevelActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetReferencedLevelActor()"
  },
  {
    "label": "GetDynamicBindingClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetDynamicBindingClass()"
  },
  {
    "label": "RenameUserDefinedPin()",
    "kind": "Method",
    "detail": "Function (} ; ERenamePinResult)",
    "insertText": "RenameUserDefinedPin(const FName OldName, const FName NewName, bool bTest = false)"
  },
  {
    "label": "OnUserDefinedPinRenamed()",
    "kind": "Method",
    "detail": "Function (FOnUserDefinedPinRenamed&)",
    "insertText": "OnUserDefinedPinRenamed()"
  },
  {
    "label": "InsertNewNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewNode(UEdGraphPin* FromPin, UEdGraphPin* NewLinkPin, TSet<UEdGraphNode*>& OutNodeList)"
  },
  {
    "label": "AllowMultipleSelfs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMultipleSelfs(bool bInputAsArray)"
  },
  {
    "label": "IsConnectionDisallowed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnectionDisallowed(const UEdGraphPin* MyPin, const UEdGraphPin* OtherPin, FString& OutReason)"
  },
  {
    "label": "GetNodeAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodeAttributes(TArray<TKeyValuePair<FString, FString>>& OutNodeAttributes)"
  },
  {
    "label": "PreloadRequiredAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadRequiredAssets()"
  },
  {
    "label": "GetMenuActions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar)"
  },
  {
    "label": "GetMenuCategory()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetMenuCategory()"
  },
  {
    "label": "GetSignature()",
    "kind": "Method",
    "detail": "Function (} FBlueprintNodeSignature)",
    "insertText": "GetSignature()"
  },
  {
    "label": "GetNodeRefreshPriority()",
    "kind": "Method",
    "detail": "Function (} enum EBaseNodeRefreshPriority { Low_UsesDependentWildcard = 1 0 0,Low_ReceivesDelegateSignature = 1 5 0,Normal = 2 0 0,} ; int32)",
    "insertText": "GetNodeRefreshPriority()"
  },
  {
    "label": "DoesInputWildcardPinAcceptArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesInputWildcardPinAcceptArray(const UEdGraphPin* Pin)"
  },
  {
    "label": "ReferencesVariable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReferencesVariable(const FName& InVarName, const UStruct* InScope)"
  },
  {
    "label": "ReferencesFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReferencesFunction(const FName& InFunctionName, const UStruct* InScope)"
  },
  {
    "label": "ExpandSplitPins()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExpandSplitPins(FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph)"
  },
  {
    "label": "ReconstructSinglePin()",
    "kind": "Method",
    "detail": "Function (protected : enum ERedirectType { ERedirectType_None,ERedirectType_Name,ERedirectType_Value,ERedirectType_DefaultValue,} ; void)",
    "insertText": "ReconstructSinglePin(UEdGraphPin* NewPin, UEdGraphPin* OldPin, ERedirectType RedirectType)"
  },
  {
    "label": "RewireOldPinsToNewPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RewireOldPinsToNewPins(TArray<UEdGraphPin*>& InOldPins, TArray<UEdGraphPin*>& InNewPins, TMap<UEdGraphPin*, UEdGraphPin*>* NewPinToOldPin)"
  },
  {
    "label": "DestroyPinList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPinList(TArray<UEdGraphPin*>& InPins)"
  },
  {
    "label": "DoPinsMatchForReconstruction()",
    "kind": "Method",
    "detail": "Function (ERedirectType)",
    "insertText": "DoPinsMatchForReconstruction(const UEdGraphPin* NewPin, int32 NewPinIndex, const UEdGraphPin* OldPin, int32 OldPinIndex)"
  },
  {
    "label": "GetRedirectPinNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRedirectPinNames(const UEdGraphPin& Pin, TArray<FString>& RedirectPinNames)"
  },
  {
    "label": "RenameUserDefinedPinImpl()",
    "kind": "Method",
    "detail": "Function (ERenamePinResult)",
    "insertText": "RenameUserDefinedPinImpl(const FName OldName, const FName NewName, bool bTest)"
  },
  {
    "label": "BroadcastUserDefinedPinRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastUserDefinedPinRenamed(FName OldName, FName NewName)"
  },
  {
    "label": "ShouldRedirectParam()",
    "kind": "Method",
    "detail": "Function (ERedirectType)",
    "insertText": "ShouldRedirectParam(const TArray<FString>& OldPinNames, FName& NewPinName, const UK2Node* NewPinNode)"
  },
  {
    "label": "RestoreSplitPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSplitPins(TArray<UEdGraphPin*>& OldPins)"
  },
  {
    "label": "Message_Note()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes> void)",
    "insertText": "Message_Note(const FString& Message, ArgTypes... Args)"
  },
  {
    "label": "Message_Note()",
    "kind": "Method",
    "detail": "Function (OwningBP ->)",
    "insertText": "Message_Note(Message, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogBlueprint, Log, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "Message_Warn()",
    "kind": "Method",
    "detail": "Function (} } template<. . . ArgTypes> void)",
    "insertText": "Message_Warn(const FString& Message, ArgTypes... Args)"
  },
  {
    "label": "Message_Warn()",
    "kind": "Method",
    "detail": "Function (OwningBP ->)",
    "insertText": "Message_Warn(Message, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogBlueprint, Warning, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "Message_Error()",
    "kind": "Method",
    "detail": "Function (} } template<. . . ArgTypes> void)",
    "insertText": "Message_Error(const FString& Message, ArgTypes... Args)"
  },
  {
    "label": "Message_Error()",
    "kind": "Method",
    "detail": "Function (OwningBP ->)",
    "insertText": "Message_Error(Message, Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogBlueprint, Error, TEXT(\"%s\"), *Message)"
  },
  {
    "label": "PreloadObject()",
    "kind": "Method",
    "detail": "Function (} } class FKismetCompilerContext ; protected : void)",
    "insertText": "PreloadObject(UObject* ReferencedObject)"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (ReferencedObject ->)",
    "insertText": "GetLinker()->Preload(ReferencedObject)"
  },
  {
    "label": "FixupPinDefaultValues()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FixupPinDefaultValues()"
  },
  {
    "label": "FixupPinStringDataReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupPinStringDataReferences(FArchive* SavingArchive)"
  },
  {
    "label": "ValidateOrphanPins()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ValidateOrphanPins(FCompilerResultsLog& MessageLog, bool bStore)"
  },
  {
    "label": "ValidateOrphanPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateOrphanPin(UEdGraphPin* Pin, FCompilerResultsLog& MessageLog, bool bStore)"
  },
  {
    "label": "ValidateLinkedPinTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateLinkedPinTypes(UEdGraphPin* OutputPin, FCompilerResultsLog& MessageLog)"
  },
  {
    "label": "TryInsertDefaultValueConversionNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInsertDefaultValueConversionNode(const UEdGraphPin& OldPin, UEdGraphPin& NewPin)"
  },
  {
    "label": "GetBlueprintClassFromNode()",
    "kind": "Method",
    "detail": "Function (public : UClass*)",
    "insertText": "GetBlueprintClassFromNode()"
  }
]