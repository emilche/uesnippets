[
  {
    "label": "CondVar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CondVar"
  },
  {
    "label": "Mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mutex"
  },
  {
    "label": "SchedulingHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedulingHelper"
  },
  {
    "label": "SpinLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpinLock"
  },
  {
    "label": "SchedulingGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedulingGuard"
  },
  {
    "label": "ScopedDisable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedDisable"
  },
  {
    "label": "ScopedEnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedEnable"
  },
  {
    "label": "absl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "absl"
  },
  {
    "label": "__google_disable_rescheduling()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_LOW_LEVEL_SCHEDULING_H_ # define ABSL_BASE_INTERNAL_LOW_LEVEL_SCHEDULING_H_ # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / internal / scheduling_mode . h \" # include \" absl / base / macros . h \" \" C \" bool)",
    "insertText": "__google_disable_rescheduling(void)"
  },
  {
    "label": "__google_enable_rescheduling()",
    "kind": "Method",
    "detail": "Function (\" C \" void)",
    "insertText": "__google_enable_rescheduling(bool disable_result)"
  },
  {
    "label": "MutexDelay()",
    "kind": "Method",
    "detail": "Function (namespace absl { ABSL_NAMESPACE_BEGIN class CondVar ; class Mutex ; namespace synchronization_internal { int)",
    "insertText": "MutexDelay(int32_t c, int mode)"
  },
  {
    "label": "ReschedulingIsAllowed()",
    "kind": "Method",
    "detail": "Function (} namespace base_internal { class SchedulingHelper ; class SpinLock ; class SchedulingGuard { public : bool)",
    "insertText": "ReschedulingIsAllowed()"
  },
  {
    "label": "SchedulingGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SchedulingGuard(const SchedulingGuard&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SchedulingGuard&)",
    "insertText": "operator(const SchedulingGuard&)"
  },
  {
    "label": "DisableRescheduling()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DisableRescheduling()"
  },
  {
    "label": "EnableRescheduling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRescheduling(bool disable_result)"
  },
  {
    "label": "ScopedDisable()",
    "kind": "Method",
    "detail": "Function (struct ScopedDisable {)",
    "insertText": "ScopedDisable()"
  },
  {
    "label": "EnableRescheduling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRescheduling(disabled)"
  },
  {
    "label": "ScopedEnable()",
    "kind": "Method",
    "detail": "Function (} bool disabled ; } ; class ScopedEnable { public :)",
    "insertText": "ScopedEnable()"
  },
  {
    "label": "ABSL_RAW_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_RAW_CHECK(scheduling_disabled_depth_ == 0, \"disable unused warning\")"
  }
]