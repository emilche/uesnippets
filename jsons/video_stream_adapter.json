[
  {
    "label": "VideoSourceRestrictionsListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSourceRestrictionsListener"
  },
  {
    "label": "VideoStreamAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamAdapter"
  },
  {
    "label": "Adaptation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Adaptation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RestrictionsWithCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestrictionsWithCounters"
  },
  {
    "label": "RestrictionsOrStateVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RestrictionsOrStateVisitor"
  },
  {
    "label": "AwaitingFrameSizeChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AwaitingFrameSizeChange"
  },
  {
    "label": "VideoSourceRestrictionsListener()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_ADAPTATION_VIDEO_STREAM_ADAPTER_H_ # define CALL_ADAPTATION_VIDEO_STREAM_ADAPTER_H_ # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" absl / types / variant . h \" # include \" api / adaptation / resource . h \" # include \" api / field_trials_view . h \" # include \" api / rtp_parameters . h \" # include \" api / video / video_adaptation_counters . h \" # include \" call / adaptation / adaptation_constraint . h \" # include \" call / adaptation / degradation_preference_provider . h \" # include \" call / adaptation / video_source_restrictions . h \" # include \" call / adaptation / video_stream_input_state . h \" # include \" call / adaptation / video_stream_input_state_provider . h \" # include \" modules / video_coding / utility / quality_scaler . h \" # include \" rtc_base / experiments / balanced_degradation_settings . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" # include \" video / video_stream_encoder_observer . h \" namespace webrtc { class VideoSourceRestrictionsListener { public : ~)",
    "insertText": "VideoSourceRestrictionsListener()"
  },
  {
    "label": "OnVideoSourceRestrictionsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoSourceRestrictionsUpdated(VideoSourceRestrictions restrictions, const VideoAdaptationCounters& adaptation_counters, rtc::scoped_refptr<Resource> reason, const VideoSourceRestrictions& unfiltered_restrictions)"
  },
  {
    "label": "FilterRestrictionsByDegradationPreference()",
    "kind": "Method",
    "detail": "Function (} ; class VideoStreamAdapter ; const int kMinFrameRateFps ; VideoSourceRestrictions)",
    "insertText": "FilterRestrictionsByDegradationPreference(VideoSourceRestrictions source_restrictions, DegradationPreference degradation_preference)"
  },
  {
    "label": "GetLowerResolutionThan()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLowerResolutionThan(int pixel_count)"
  },
  {
    "label": "GetHigherResolutionThan()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetHigherResolutionThan(int pixel_count)"
  },
  {
    "label": "StatusToString()",
    "kind": "Method",
    "detail": "Function (class Adaptation final { public : enum class Status { kValid,kLimitReached,kAwaitingPreviousAdaptation,kInsufficientInput,kAdaptationDisabled,kRejectedByConstraint,} ; const char*)",
    "insertText": "StatusToString(Status status)"
  },
  {
    "label": "status()",
    "kind": "Method",
    "detail": "Function (Status)",
    "insertText": "status()"
  },
  {
    "label": "input_state()",
    "kind": "Method",
    "detail": "Function (const VideoStreamInputState&)",
    "insertText": "input_state()"
  },
  {
    "label": "restrictions()",
    "kind": "Method",
    "detail": "Function (const VideoSourceRestrictions&)",
    "insertText": "restrictions()"
  },
  {
    "label": "counters()",
    "kind": "Method",
    "detail": "Function (const VideoAdaptationCounters&)",
    "insertText": "counters()"
  },
  {
    "label": "Adaptation()",
    "kind": "Method",
    "detail": "Function (private : class VideoStreamAdapter ;)",
    "insertText": "Adaptation(int validation_id, VideoSourceRestrictions restrictions, VideoAdaptationCounters counters, VideoStreamInputState input_state)"
  },
  {
    "label": "Adaptation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adaptation(int validation_id, Status invalid_status)"
  },
  {
    "label": "VideoStreamAdapter()",
    "kind": "Method",
    "detail": "Function (const int validation_id_ ; const Status status_ ; const VideoStreamInputState input_state_ ; const VideoSourceRestrictions restrictions_ ; const VideoAdaptationCounters counters_ ; } ; class VideoStreamAdapter { public :)",
    "insertText": "VideoStreamAdapter(VideoStreamInputStateProvider* input_state_provider, VideoStreamEncoderObserver* encoder_stats_observer, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VideoStreamAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoStreamAdapter()"
  },
  {
    "label": "source_restrictions()",
    "kind": "Method",
    "detail": "Function (VideoSourceRestrictions)",
    "insertText": "source_restrictions()"
  },
  {
    "label": "adaptation_counters()",
    "kind": "Method",
    "detail": "Function (const VideoAdaptationCounters&)",
    "insertText": "adaptation_counters()"
  },
  {
    "label": "ClearRestrictions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRestrictions()"
  },
  {
    "label": "AddRestrictionsListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRestrictionsListener(VideoSourceRestrictionsListener* restrictions_listener)"
  },
  {
    "label": "RemoveRestrictionsListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRestrictionsListener(VideoSourceRestrictionsListener* restrictions_listener)"
  },
  {
    "label": "AddAdaptationConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdaptationConstraint(AdaptationConstraint* adaptation_constraint)"
  },
  {
    "label": "RemoveAdaptationConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAdaptationConstraint(AdaptationConstraint* adaptation_constraint)"
  },
  {
    "label": "SetDegradationPreference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDegradationPreference(DegradationPreference degradation_preference)"
  },
  {
    "label": "GetAdaptationUp()",
    "kind": "Method",
    "detail": "Function (Adaptation)",
    "insertText": "GetAdaptationUp()"
  },
  {
    "label": "GetAdaptationDown()",
    "kind": "Method",
    "detail": "Function (Adaptation)",
    "insertText": "GetAdaptationDown()"
  },
  {
    "label": "GetAdaptationTo()",
    "kind": "Method",
    "detail": "Function (Adaptation)",
    "insertText": "GetAdaptationTo(const VideoAdaptationCounters& counters, const VideoSourceRestrictions& restrictions)"
  },
  {
    "label": "GetAdaptDownResolution()",
    "kind": "Method",
    "detail": "Function (Adaptation)",
    "insertText": "GetAdaptDownResolution()"
  },
  {
    "label": "ApplyAdaptation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAdaptation(const Adaptation& adaptation, rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetSingleActiveLayerPixels()",
    "kind": "Method",
    "detail": "Function (struct RestrictionsWithCounters { VideoSourceRestrictions restrictions ; VideoAdaptationCounters counters ; } ; absl::optional<uint32_t>)",
    "insertText": "GetSingleActiveLayerPixels(const VideoCodec& codec)"
  },
  {
    "label": "BroadcastVideoRestrictionsUpdate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BroadcastVideoRestrictionsUpdate(const VideoStreamInputState& input_state, const rtc::scoped_refptr<Resource>& resource)"
  },
  {
    "label": "HasSufficientInputForAdaptation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSufficientInputForAdaptation(const VideoStreamInputState& input_state) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "GetAdaptationUpStep()",
    "kind": "Method",
    "detail": "Function (using RestrictionsOrState = absl::variant<RestrictionsWithCounters,Adaptation::Status> ; RestrictionsOrState)",
    "insertText": "GetAdaptationUpStep(const VideoStreamInputState& input_state) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "GetAdaptationDownStep()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "GetAdaptationDownStep(const VideoStreamInputState& input_state, const RestrictionsWithCounters& current_restrictions) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "GetAdaptDownResolutionStepForBalanced()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "GetAdaptDownResolutionStepForBalanced(const VideoStreamInputState& input_state) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "AdaptIfFpsDiffInsufficient()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "AdaptIfFpsDiffInsufficient(const VideoStreamInputState& input_state, const RestrictionsWithCounters& restrictions) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "GetAdaptationUp()",
    "kind": "Method",
    "detail": "Function (Adaptation)",
    "insertText": "GetAdaptationUp(const VideoStreamInputState& input_state) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "GetAdaptationDown()",
    "kind": "Method",
    "detail": "Function (Adaptation)",
    "insertText": "GetAdaptationDown(const VideoStreamInputState& input_state) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "DecreaseResolution()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "DecreaseResolution(const VideoStreamInputState& input_state, const RestrictionsWithCounters& current_restrictions)"
  },
  {
    "label": "IncreaseResolution()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "IncreaseResolution(const VideoStreamInputState& input_state, const RestrictionsWithCounters& current_restrictions)"
  },
  {
    "label": "DecreaseFramerate()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "DecreaseFramerate(const VideoStreamInputState& input_state, const RestrictionsWithCounters& current_restrictions) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "IncreaseFramerate()",
    "kind": "Method",
    "detail": "Function (RestrictionsOrState)",
    "insertText": "IncreaseFramerate(const VideoStreamInputState& input_state, const RestrictionsWithCounters& current_restrictions) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "RestrictionsOrStateToAdaptation()",
    "kind": "Method",
    "detail": "Function (struct RestrictionsOrStateVisitor ; Adaptation)",
    "insertText": "RestrictionsOrStateToAdaptation(RestrictionsOrState step_or_state, const VideoStreamInputState& input_state) const RTC_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker sequence_checker_)",
    "insertText": "RTC_GUARDED_BY(&sequence_checker_)"
  },
  {
    "label": "AwaitingFrameSizeChange()",
    "kind": "Method",
    "detail": "Function (struct AwaitingFrameSizeChange {)",
    "insertText": "AwaitingFrameSizeChange(bool pixels_increased, int frame_size)"
  }
]