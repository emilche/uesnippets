[
  {
    "label": "FNetExportContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExportContext"
  },
  {
    "label": "FAcknowledgedExports",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAcknowledgedExports"
  },
  {
    "label": "FBatchExports",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchExports"
  },
  {
    "label": "FNetExportRollbackScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExportRollbackScope"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Iris / ReplicationSystem / NetRefHandle . h \" # include \" Net / Core / NetToken / NetToken . h \" # include \" Iris / Serialization / NetSerializationContext . h \" # include \" Iris / Core / NetObjectReference . h \" namespace UE::Net::Private { class FNetExportContext { public : typedef TArray<FNetRefHandle,TInlineAllocator<3 2>> FExportsArray ; typedef TArray<FNetToken,TInlineAllocator<3 2>> FNetTokenExportsArray ; typedef TArray<FNetObjectReference,TInlineAllocator<3 2>> FPendingExportArray ; typedef TArray<FNetToken,TInlineAllocator<3 2>> FNetTokenPendingExportArray ; struct FAcknowledgedExports { TSet<FNetRefHandle> AcknowledgedExportedHandles ; TSet<FNetToken> AcknowledgedExportedNetTokens ; } ; struct FBatchExports { void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (HandlesExportedInCurrentBatch .)",
    "insertText": "Empty()"
  },
  {
    "label": "HasPendingExports()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPendingExports()"
  },
  {
    "label": "FNetExportContext()",
    "kind": "Method",
    "detail": "Function (} FExportsArray HandlesExportedInCurrentBatch ; FNetTokenExportsArray NetTokensExportedInCurrentBatch ; FPendingExportArray ReferencesPendingExportInCurrentBatch ; FNetTokenPendingExportArray NetTokensPendingExportInCurrentBatch ; } ; public :)",
    "insertText": "FNetExportContext(const FAcknowledgedExports& InAcknowledgedExports, FBatchExports& BatchExports)"
  },
  {
    "label": "IsExported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExported(FNetRefHandle Handle)"
  },
  {
    "label": "IsExported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExported(FNetToken Token)"
  },
  {
    "label": "AddExported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExported(FNetRefHandle Handle)"
  },
  {
    "label": "AddExported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExported(FNetToken Token)"
  },
  {
    "label": "AddPendingExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingExport(const FNetObjectReference& Ref)"
  },
  {
    "label": "AddPendingExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingExport(FNetToken Token)"
  },
  {
    "label": "AddPendingExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingExports(TArrayView<const FNetToken> NetTokens)"
  },
  {
    "label": "IsPendingExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingExport(const FNetObjectReference& Ref)"
  },
  {
    "label": "ClearPendingExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingExports()"
  },
  {
    "label": "GetBatchExports()",
    "kind": "Method",
    "detail": "Function (} const FNetExportContext::FBatchExports&)",
    "insertText": "GetBatchExports()"
  },
  {
    "label": "FNetExportRollbackScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNetExportRollbackScope()"
  },
  {
    "label": "Rollback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rollback()"
  },
  {
    "label": "FNetExportRollbackScope()",
    "kind": "Method",
    "detail": "Function (private : FNetSerializationContext& Context ; int32 StartNumNetHandleExports ; int32 StartNumNetTokenExports ; int32 StartNumPendingExports ; int32 StartNumNetTokensPendingExports ; } ;)",
    "insertText": "FNetExportRollbackScope(FNetSerializationContext& InContext) : Context(InContext)"
  },
  {
    "label": "GetExportContext()",
    "kind": "Method",
    "detail": "Function (const FNetExportContext* ExportContext = Context .)",
    "insertText": "GetExportContext()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (StartNumNetHandleExports = ExportContext ? ExportContext -> BatchExports . HandlesExportedInCurrentBatch .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ExportContext -> BatchExports . HandlesExportedInCurrentBatch .)",
    "insertText": "SetNum(StartNumNetHandleExports)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ExportContext -> BatchExports . NetTokensExportedInCurrentBatch .)",
    "insertText": "SetNum(StartNumNetTokenExports)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ExportContext -> BatchExports . NetTokensPendingExportInCurrentBatch .)",
    "insertText": "SetNum(StartNumNetTokensPendingExports)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ExportContext -> BatchExports . ReferencesPendingExportInCurrentBatch .)",
    "insertText": "SetNum(StartNumPendingExports)"
  },
  {
    "label": "FNetExportContext()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FNetExportContext(const FAcknowledgedExports& InAcknowledgedExports, FBatchExports& InBatchExports) : AcknowledgedExports(InAcknowledgedExports) , BatchExports(InBatchExports)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BatchExports . HandlesExportedInCurrentBatch .)",
    "insertText": "Add(Handle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BatchExports . NetTokensExportedInCurrentBatch .)",
    "insertText": "Add(Token)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (BatchExports . ReferencesPendingExportInCurrentBatch .)",
    "insertText": "AddUnique(Ref)"
  },
  {
    "label": "AddPendingExport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPendingExport(FNetToken NetToken)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (BatchExports . NetTokensPendingExportInCurrentBatch .)",
    "insertText": "AddUnique(NetToken)"
  },
  {
    "label": "AddPendingExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingExport(NetToken)"
  }
]