[
  {
    "label": "LogicalDylib",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogicalDylib"
  },
  {
    "label": "LogicalModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LogicalModule"
  },
  {
    "label": "LogicalDylib()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_LOGICALDYLIB_H # define LLVM_EXECUTIONENGINE_ORC_LOGICALDYLIB_H namespace llvm { namespace orc { template<BaseLayerT,LogicalModuleResources,LogicalDylibResources> class LogicalDylib { public : typedef BaseLayerT::ModuleSetHandleT BaseLayerModuleSetHandleT ; private : typedef std::vector<BaseLayerModuleSetHandleT> BaseLayerHandleList ; struct LogicalModule { LogicalModuleResources Resources ; BaseLayerHandleList BaseLayerHandles ; } ; typedef std::vector<LogicalModule> LogicalModuleList ; public : typedef BaseLayerHandleList::iterator BaseLayerHandleIterator ; typedef LogicalModuleList::iterator LogicalModuleHandle ;)",
    "insertText": "LogicalDylib(BaseLayerT &BaseLayer) : BaseLayer(BaseLayer)"
  },
  {
    "label": "LogicalDylib()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LogicalDylib()"
  },
  {
    "label": "createLogicalModule()",
    "kind": "Method",
    "detail": "Function (} LogicalModuleHandle)",
    "insertText": "createLogicalModule()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LogicalModules .)",
    "insertText": "push_back(LogicalModule())"
  },
  {
    "label": "addToLogicalModule()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addToLogicalModule(LogicalModuleHandle LMH, BaseLayerModuleSetHandleT BaseLayerHandle)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LMH -> BaseLayerHandles .)",
    "insertText": "push_back(BaseLayerHandle)"
  },
  {
    "label": "getLogicalModuleResources()",
    "kind": "Method",
    "detail": "Function (} LogicalModuleResources&)",
    "insertText": "getLogicalModuleResources(LogicalModuleHandle LMH)"
  },
  {
    "label": "moduleHandlesEnd()",
    "kind": "Method",
    "detail": "Function (} BaseLayerHandleIterator)",
    "insertText": "moduleHandlesEnd(LogicalModuleHandle LMH)"
  },
  {
    "label": "findSymbolInLogicalModule()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbolInLogicalModule(LogicalModuleHandle LMH, const std::string &Name)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } JITSymbol)",
    "insertText": "findSymbol(const std::string &Name, bool ExportedSymbolsOnly)"
  }
]