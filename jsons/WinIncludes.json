[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "_ENUM_FLAG_INTEGER_FOR_SIZE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ENUM_FLAG_INTEGER_FOR_SIZE"
  },
  {
    "label": "_ENUM_FLAG_SIZED_INTEGER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ENUM_FLAG_SIZED_INTEGER"
  },
  {
    "label": "IMalloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMalloc"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef _MSC_VER # undef _WIN32_WINNT # undef _WIN32_IE # define _WIN32_WINNT 0 x0601 # define _WIN32_IE 0 x0800 # define NOATOM 1 # define NOGDICAPMASKS 1 # define NOMETAFILE 1 # ifndef NOMINMAX # define NOMINMAX 1 # endif # define NOOPENFILE 1 # define NORASTEROPS 1 # define NOSCROLL 1 # define NOSOUND 1 # define NOSYSMETRICS 1 # define NOWH 1 # define NOCOMM 1 # define NOKANJI 1 # define NOCRYPT 1 # define NOMCX 1 # define WIN32_LEAN_AND_MEAN 1 # define VC_EXTRALEAN 1 # define NONAMELESSSTRUCT 1 # include<ObjIdl . h> # include<atlbase . h> # include<intsafe . h> # include<strsafe . h> # include<unknwn . h> # include<windows . h> # include \" dxc / config . h \" # ifndef _ATL_DECLSPEC_ALLOCATOR # define _ATL_DECLSPEC_ALLOCATOR # endif template<class T> void)",
    "insertText": "swap(CComHeapPtr<T> &a, CComHeapPtr<T> &b)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "c(a.m_pData)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (a . m_pData = b . m_pData ; b . m_pData = c ; } # else # include \" dxc / WinAdapter . h \" # ifdef __cplusplus # if !)",
    "insertText": "defined(DEFINE_ENUM_FLAG_OPERATORS)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<size_t S> struct _ENUM_FLAG_INTEGER_FOR_SIZE ; template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE<1> { typedef int8_t type ; } ; template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE<2> { typedef int16_t type ; } ; template<> struct _ENUM_FLAG_INTEGER_FOR_SIZE<4> { typedef int32_t type ; } ; template<class T> struct _ENUM_FLAG_SIZED_INTEGER { typedef _ENUM_FLAG_INTEGER_FOR_SIZE<)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (} ; } # define)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ ENUMTYPE)",
    "insertText": "operator(ENUMTYPE a, ENUMTYPE b)"
  },
  {
    "label": "ENUMTYPE()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) | \\ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ENUMTYPE&)",
    "insertText": "operator(ENUMTYPE &a, ENUMTYPE b)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) |= \\ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b))"
  },
  {
    "label": "ENUMTYPE()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) & \\ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) &= \\ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ENUMTYPE)",
    "insertText": "operator(ENUMTYPE a)"
  },
  {
    "label": "ENUMTYPE()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "ENUMTYPE(~((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a))"
  },
  {
    "label": "ENUMTYPE()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "ENUMTYPE(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)a) ^ \\ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(ENUMTYPE &)(((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type &)a) ^= \\ ((_ENUM_FLAG_SIZED_INTEGER<ENUMTYPE>::type)b))"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # endif # else # define)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE) #endif #endif #if defined(_WIN32) && !defined(DXC_DISABLE_ALLOCATOR_OVERRIDES)"
  },
  {
    "label": "DxcCoGetMalloc()",
    "kind": "Method",
    "detail": "Function (# endif HRESULT)",
    "insertText": "DxcCoGetMalloc(DWORD dwMemContext, IMalloc **ppMalloc)"
  }
]