[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OPolyMesh_h # define Alembic_AbcGeom_OPolyMesh_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / OFaceSet . h> # include<Alembic / AbcGeom / OGeomParam . h> # include<Alembic / AbcGeom / OGeomBase . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OPolyMeshSchema : public OGeomBaseSchema<PolyMeshSchemaInfo> { public : class Sample { public :)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::P3fArraySample &iPos ) : m_positions( iPos)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::P3fArraySample &iPos, const Abc::Int32ArraySample &iInd, const Abc::Int32ArraySample &iCnt, const OV2fGeomParam::Sample &iUVs = OV2fGeomParam::Sample(), const ON3fGeomParam::Sample &iNormals = ON3fGeomParam::Sample() ) : m_positions( iPos ) , m_indices( iInd ) , m_counts( iCnt ) , m_uvs( iUVs ) , m_normals( iNormals)"
  },
  {
    "label": "getPositions()",
    "kind": "Method",
    "detail": "Function (} const Abc::P3fArraySample&)",
    "insertText": "getPositions()"
  },
  {
    "label": "getVelocities()",
    "kind": "Method",
    "detail": "Function (m_positions = iSmp ; } const Abc::V3fArraySample&)",
    "insertText": "getVelocities()"
  },
  {
    "label": "getFaceIndices()",
    "kind": "Method",
    "detail": "Function (m_velocities = iVelocities ; } const Abc::Int32ArraySample&)",
    "insertText": "getFaceIndices()"
  },
  {
    "label": "getFaceCounts()",
    "kind": "Method",
    "detail": "Function (m_indices = iSmp ; } const Abc::Int32ArraySample&)",
    "insertText": "getFaceCounts()"
  },
  {
    "label": "getSelfBounds()",
    "kind": "Method",
    "detail": "Function (m_counts = iCnt ; } const Abc::Box3d&)",
    "insertText": "getSelfBounds()"
  },
  {
    "label": "getUVs()",
    "kind": "Method",
    "detail": "Function (m_selfBounds = iBnds ; } const OV2fGeomParam::Sample&)",
    "insertText": "getUVs()"
  },
  {
    "label": "getNormals()",
    "kind": "Method",
    "detail": "Function (m_uvs = iUVs ; } const ON3fGeomParam::Sample&)",
    "insertText": "getNormals()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "isPartialSample()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPartialSample()"
  },
  {
    "label": "OPolyMeshSchema()",
    "kind": "Method",
    "detail": "Function (m_selectiveExport = false ; m_numSamples = 0 ; m_timeSamplingIndex = 0 ; })",
    "insertText": "OPolyMeshSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OPolyMeshSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPolyMeshSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getObject().getArchive().getTimeSampling( 0)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} } size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_faceSets .)",
    "insertText": "clear()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "createFaceSet()",
    "kind": "Method",
    "detail": "Function (} OFaceSet&)",
    "insertText": "createFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "getFaceSetNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getFaceSetNames(std::vector <std::string> & oFaceSetNames)"
  },
  {
    "label": "getFaceSet()",
    "kind": "Method",
    "detail": "Function (OFaceSet)",
    "insertText": "getFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "hasFaceSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFaceSet(const std::string &iFaceSetName)"
  },
  {
    "label": "setUVSourceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUVSourceName(const std::string & iName)"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(OPolyMeshSchema::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(uint32_t iTsIdx, bool isSparse)"
  },
  {
    "label": "selectiveSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "selectiveSet(const Sample &iSamp)"
  },
  {
    "label": "createPositionsProperty()",
    "kind": "Method",
    "detail": "Function (Abc::OP3fArrayProperty m_positionsProperty ; Abc::OV3fArrayProperty m_velocitiesProperty ; Abc::OInt32ArrayProperty m_indicesProperty ; Abc::OInt32ArrayProperty m_countsProperty ; std::map<std::string,OFaceSet> m_faceSets ; OV2fGeomParam m_uvsParam ; ON3fGeomParam m_normalsParam ; std::string m_uvSourceName ; bool m_selectiveExport ; size_t m_numSamples ; uint32_t m_timeSamplingIndex ; void)",
    "insertText": "createPositionsProperty()"
  },
  {
    "label": "createVelocitiesProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createVelocitiesProperty()"
  },
  {
    "label": "createUVsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createUVsProperty(const Sample &iSamp)"
  },
  {
    "label": "createNormalsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createNormalsProperty(const Sample &iSamp)"
  }
]