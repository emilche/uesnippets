[
  {
    "label": "ComputeConvexHull()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector . h \" namespace ConvexHull2D { template<VectorType,Allocator> void)",
    "insertText": "ComputeConvexHull(const TArray<VectorType, Allocator>& Points, TArray<int32, Allocator>& OutIndices)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 PointsNum = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutIndices .)",
    "insertText": "Add(Index)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} return ; } TArray<uint32,Allocator> SortedIndices ; SortedIndices .)",
    "insertText": "SetNumUninitialized(PointsNum)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (SortedIndices [ Index ] = Index ; })",
    "insertText": "Sort(SortedIndices, [P = Points.GetData()](uint32 a, uint32 b) { return P[a].X == P[b].X ? P[a].Y < P[b].Y : P[a].X < P[b].X; })"
  },
  {
    "label": "IsClockwise()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "IsClockwise(const VectorType& O, const VectorType& A, const VectorType& B)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} ; int32 HullIndex = 0 ; OutIndices .)",
    "insertText": "SetNum(PointsNum*2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const VectorType& B = Points [ SortedIndices [ Index ] ] ;)",
    "insertText": "while(HullIndex >= 2 && IsClockwise(Points[OutIndices[HullIndex - 2]], Points[OutIndices[HullIndex - 1]], B))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - HullIndex ; } OutIndices [ HullIndex + + ] = SortedIndices [ Index ] ; })",
    "insertText": "for(int32 Index = PointsNum - 1, StartIndex = HullIndex + 1; Index > 0; --Index)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const VectorType& B = Points [ SortedIndices [ Index - 1 ] ] ;)",
    "insertText": "while(HullIndex >= StartIndex && IsClockwise(Points[OutIndices[HullIndex - 2]], Points[OutIndices[HullIndex - 1]], B))"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (- - HullIndex ; } OutIndices [ HullIndex + + ] = SortedIndices [ Index - 1 ] ; } OutIndices .)",
    "insertText": "SetNum(HullIndex - 1, EAllowShrinking::No)"
  },
  {
    "label": "ComputeDeterminant()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "ComputeDeterminant(const FVector& A, const FVector& B, const FVector& C)"
  },
  {
    "label": "ComparePoints()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal u1 = B . X - A . X ; const FVector::FReal v1 = B . Y - A . Y ; const FVector::FReal u2 = C . X - A . X ; const FVector::FReal v2 = C . Y - A . Y ; return u1* v2 - v1* u2 ; } bool)",
    "insertText": "ComparePoints(const FVector& A, const FVector& B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HullStart = i ; })",
    "insertText": "if(ComparePoints(Points[HullEnd], Points[i]))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HullEnd = i ; } } OutIndices .)",
    "insertText": "Add(HullStart)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NextPoint = LocalEnd ;)",
    "insertText": "for(int j = 0; j < Points.Num(); ++j)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (continue ; } const FVector& A = Points .)",
    "insertText": "GetData()"
  },
  {
    "label": "ComputeDeterminant()",
    "kind": "Method",
    "detail": "Function (FVector::FReal Deter =)",
    "insertText": "ComputeDeterminant(A, B, C)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextPoint = j ; } else)",
    "insertText": "if(Deter < 0.001)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextPoint = j ; } } else {)",
    "insertText": "if(ComparePoints(C, B))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextPoint = j ; } } } else { } })",
    "insertText": "if(NextPoint == HullEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bGoRight = false ; LocalEnd = HullStart ; })",
    "insertText": "if(NextPoint == HullStart)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bFinished = true ; break ; } OutIndices .)",
    "insertText": "Add(NextPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Hull = NextPoint ; })",
    "insertText": "if(!bFinished)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutIndices .)",
    "insertText": "Reset()"
  },
  {
    "label": "ComputeDeterminant2D()",
    "kind": "Method",
    "detail": "Function (} } FVector2D::FReal)",
    "insertText": "ComputeDeterminant2D(const FVector2D& A, const FVector2D& B, const FVector2D& C)"
  },
  {
    "label": "ComputeConvexHullLegacy2()",
    "kind": "Method",
    "detail": "Function (const FVector2D::FReal u1 = B . X - A . X ; const FVector2D::FReal v1 = B . Y - A . Y ; const FVector2D::FReal u2 = C . X - A . X ; const FVector2D::FReal v2 = C . Y - A . Y ; return u1* v2 - v1* u2 ; } template<Allocator> void)",
    "insertText": "ComputeConvexHullLegacy2(const TArray<FVector2D, Allocator>& Points, TArray<int32, Allocator>& OutIndices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LeftmostIndex = PointIndex ; Leftmost = Points [ PointIndex ] ; } } int32 PointOnHullIndex = LeftmostIndex ; int32 EndPointIndex ; do { OutIndices .)",
    "insertText": "Add(PointOnHullIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EndPointIndex = 0 ;)",
    "insertText": "for(int32 j = 1; j < Points.Num(); j++)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (EndPointIndex = j ; } } PointOnHullIndex = EndPointIndex ; })",
    "insertText": "while(EndPointIndex != LeftmostIndex)"
  }
]