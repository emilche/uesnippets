[
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "FDateTimeStructCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDateTimeStructCustomization"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" IPropertyTypeCustomization . h \" # include \" Internationalization / Text . h \" # include \" Misc / DateTime . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" class IPropertyHandle ; class SEditableTextBox ; class FDateTimeStructCustomization : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "CustomizeChildren(TSharedRef<class IPropertyHandle> StructPropertyHandle, class IDetailChildrenBuilder& StructBuilder, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeHeader(TSharedRef<class IPropertyHandle> StructPropertyHandle, class FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "FDateTimeStructCustomization()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDateTimeStructCustomization()"
  },
  {
    "label": "HandleTextBoxForegroundColor()",
    "kind": "Method",
    "detail": "Function (private : FSlateColor)",
    "insertText": "HandleTextBoxForegroundColor()"
  },
  {
    "label": "HandleTextBoxText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleTextBoxText()"
  },
  {
    "label": "HandleTextBoxTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextBoxTextChanged(const FText& NewText)"
  },
  {
    "label": "HandleTextBoxTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextBoxTextCommited(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetLocalTimezone()",
    "kind": "Method",
    "detail": "Function (private : const int32 TIMEZONE_UTC = 0 ; int32)",
    "insertText": "GetLocalTimezone()"
  },
  {
    "label": "ParseDateTimeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDateTimeZone(const FString& DateTimeZoneString, FDateTime& OutDateTime)"
  },
  {
    "label": "ConvertTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "ConvertTime(const FDateTime& InDate, int32 InTimezone, int32 OutTimezone)"
  },
  {
    "label": "ToDateTimeZoneString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToDateTimeZoneString(const FDateTime& UTCDate)"
  },
  {
    "label": "ConvertShortTimezone()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConvertShortTimezone(int32 ShortTimezone)"
  }
]