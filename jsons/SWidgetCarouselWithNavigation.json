[
  {
    "label": "SWidgetCarouselWithNavigation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidgetCarouselWithNavigation"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBox . h \" # include \" WidgetCarouselStyle . h \" # include \" Widgets / SOverlay . h \" # include \" SWidgetCarousel . h \" # include \" SCarouselNavigationButton . h \" # include \" SCarouselNavigationBar . h \" # include \" Widgets / Layout / SScaleBox . h \" template<ItemType> class SWidgetCarouselWithNavigation : public SCompoundWidget { public : typedef TSlateDelegates<ItemType>::FOnGenerateWidget FOnGenerateWidget ;)",
    "insertText": "SLATE_BEGIN_ARGS(SWidgetCarouselWithNavigation<ItemType>) : _NavigationBarStyle() , _NavigationButtonStyle() , _WidgetItemsSource(static_cast<const TArray<ItemType>*>(NULL))"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FWidgetCarouselNavigationBarStyle, NavigationBarStyle) SLATE_STYLE_ARGUMENT(FWidgetCarouselNavigationButtonStyle, NavigationButtonStyle) SLATE_EVENT(FOnGenerateWidget, OnGenerateWidget) SLATE_ARGUMENT(const TArray<ItemType>*, WidgetItemsSource) SLATE_END_ARGS()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (OnGenerateWidget = InArgs . _OnGenerateWidget ; WidgetItemsSource = InArgs . _WidgetItemsSource ; ChildSlot [)",
    "insertText": "SNew(SVerticalBox) + SVerticalBox::Slot() .AutoHeight() .HAlign(HAlign_Center) .VAlign(VAlign_Center) [ SNew(SBox) .MaxDesiredHeight(442) [ SNew(SOverlay) + SOverlay::Slot() .HAlign(HAlign_Center) .VAlign(VAlign_Center) [ SNew(SBorder) .BorderImage(FWidgetCarouselModuleStyle::Get().GetBrush(\"WidgetBackground\")) .Padding(0) [ SNew(SScaleBox) .Stretch(EStretch::ScaleToFit) .StretchDirection(EStretchDirection::DownOnly) [ SAssignNew(Carousel, SWidgetCarousel<ItemType>) .WidgetItemsSource(WidgetItemsSource) .FadeRate(0) .SlideValueLeftLimit(-1) .SlideValueRightLimit(1) .MoveSpeed(5.f) .OnGenerateWidget(this, &SWidgetCarouselWithNavigation::GenerateWidget) ] ] ] + SOverlay::Slot() .Padding(0) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .HAlign(HAlign_Left) [ SNew(SCarouselNavigationButton) .Style(InArgs._NavigationButtonStyle) .OnClicked(this, &SWidgetCarouselWithNavigation::HandleNextButtonClicked) .Visibility(this, &SWidgetCarouselWithNavigation::GetScreenshotNavigationVisibility) .OnBeginPeek(this, &SWidgetCarouselWithNavigation::HandlePeak, EWidgetCarouselScrollDirection::Carousel_Right) .OnEndPeek(this, &SWidgetCarouselWithNavigation::HandlePeak, EWidgetCarouselScrollDirection::Carousel_Center) .Direction(SCarouselNavigationButton::ENavigationButtonDirection::Left) ] + SHorizontalBox::Slot() .HAlign(HAlign_Right) [ SNew(SCarouselNavigationButton) .Style(InArgs._NavigationButtonStyle) .OnClicked(this, &SWidgetCarouselWithNavigation::HandlePreviousButtonClicked) .Visibility(this, &SWidgetCarouselWithNavigation::GetScreenshotNavigationVisibility) .OnBeginPeek(this, &SWidgetCarouselWithNavigation::HandlePeak, EWidgetCarouselScrollDirection::Carousel_Left) .OnEndPeek(this, &SWidgetCarouselWithNavigation::HandlePeak, EWidgetCarouselScrollDirection::Carousel_Center) .Direction(SCarouselNavigationButton::ENavigationButtonDirection::Right) ] ] ] ] + SVerticalBox::Slot() .AutoHeight() .HAlign(HAlign_Center) .Padding(10.0f, 10.f) [ SNew(SCarouselNavigationBar) .Style(InArgs._NavigationBarStyle) .Visibility(this, &SWidgetCarouselWithNavigation::GetScreenshotNavigationVisibility) .ItemCount(WidgetItemsSource->Num()) .CurrentItemIndex(this, &SWidgetCarouselWithNavigation::GetCurrentItemIndex) .CurrentSlideAmount(this, &SWidgetCarouselWithNavigation::GetCurrentSlideAmount) .OnSelectedIndexChanged(this, &SWidgetCarouselWithNavigation::CarouselScrollBarIndexChanged)"
  },
  {
    "label": "SWidgetCarouselWithNavigation()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SWidgetCarouselWithNavigation()"
  },
  {
    "label": "GenerateWidget()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<SWidget>)",
    "insertText": "GenerateWidget(ItemType Item)"
  },
  {
    "label": "HandleNextButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleNextButtonClicked()"
  },
  {
    "label": "SetNextWidget()",
    "kind": "Method",
    "detail": "Function (Carousel ->)",
    "insertText": "SetNextWidget()"
  },
  {
    "label": "HandlePreviousButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandlePreviousButtonClicked()"
  },
  {
    "label": "SetPreviousWidget()",
    "kind": "Method",
    "detail": "Function (Carousel ->)",
    "insertText": "SetPreviousWidget()"
  },
  {
    "label": "HandlePeak()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandlePeak(EWidgetCarouselScrollDirection::Type Direction)"
  },
  {
    "label": "Peak()",
    "kind": "Method",
    "detail": "Function (Carousel ->)",
    "insertText": "Peak(Direction)"
  },
  {
    "label": "GetScreenshotVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetScreenshotVisibility()"
  },
  {
    "label": "GetScreenshotNavigationVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetScreenshotNavigationVisibility()"
  },
  {
    "label": "GetCurrentItemIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCurrentItemIndex()"
  },
  {
    "label": "GetCurrentSlideAmount()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentSlideAmount()"
  },
  {
    "label": "CarouselScrollBarIndexChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CarouselScrollBarIndexChanged(int32 NewIndex)"
  },
  {
    "label": "SetActiveWidgetIndex()",
    "kind": "Method",
    "detail": "Function (Carousel ->)",
    "insertText": "SetActiveWidgetIndex(NewIndex)"
  }
]