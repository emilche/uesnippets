[
  {
    "label": "multialloc_node_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "multialloc_node_impl"
  },
  {
    "label": "multialloc_it_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "multialloc_it_impl"
  },
  {
    "label": "boost_cont_memchain_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "boost_cont_memchain_impl"
  },
  {
    "label": "boost_cont_malloc_stats_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "boost_cont_malloc_stats_impl"
  },
  {
    "label": "boost_cont_command_ret_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "boost_cont_command_ret_impl"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifndef BOOST_CONTAINER_ALLOC_LIB_EXT_H # define BOOST_CONTAINER_ALLOC_LIB_EXT_H # include<stddef . h> # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) #pragma warning (disable : 4127)"
  },
  {
    "label": "BOOST_CONTAINER_MEMIT_NEXT()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct multialloc_node_impl { struct multialloc_node_impl* next_node_ptr ; } boost_cont_memchain_node ; typedef struct multialloc_it_impl { boost_cont_memchain_node* node_ptr ; } boost_cont_memchain_it ; typedef struct boost_cont_memchain_impl { size_t num_mem ; boost_cont_memchain_node root_node ; boost_cont_memchain_node* last_node_ptr ; } boost_cont_memchain ; # define)",
    "insertText": "BOOST_CONTAINER_MEMIT_NEXT(IT) (IT.node_ptr = IT.node_ptr->next_node_ptr) #define BOOST_CONTAINER_MEMIT_ADDR(IT) ((void*)IT.node_ptr) #define BOOST_CONTAINER_MEMCHAIN_BEFORE_BEGIN_IT(PMEMCHAIN)"
  },
  {
    "label": "BOOST_CONTAINER_MEMCHAIN_INIT()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "BOOST_CONTAINER_MEMCHAIN_INIT(PMEMCHAIN)\\ ((PMEMCHAIN)->root_node.next_node_ptr = 0, (PMEMCHAIN)->last_node_ptr = &((PMEMCHAIN)->root_node), (PMEMCHAIN)->num_mem = 0)\\ #define BOOST_CONTAINER_MEMCHAIN_EMPTY(PMEMCHAIN)\\ ((PMEMCHAIN)->num_mem == 0)\\ #define BOOST_CONTAINER_MEMCHAIN_PUSH_BACK(PMEMCHAIN, MEM)"
  },
  {
    "label": "____chain____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain*)",
    "insertText": "____chain____(PMEMCHAIN)"
  },
  {
    "label": "____tmp_mem____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain_node*)",
    "insertText": "____tmp_mem____(boost_cont_memchain_node *)(MEM)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ____chain____ -> last_node_ptr -> next_node_ptr = ____tmp_mem____ ; \\ ____tmp_mem____ -> next_node_ptr = 0 ; \\ ____chain____ -> last_node_ptr = ____tmp_mem____ ; \\ + + ____chain____ -> num_mem ; \\ })",
    "insertText": "while(0)\\ #define BOOST_CONTAINER_MEMCHAIN_PUSH_FRONT(PMEMCHAIN, MEM)"
  },
  {
    "label": "____root____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain*)",
    "insertText": "____root____((PMEMCHAIN)->root_node)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!____chain____->root_node.next_node_ptr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ____chain____ -> last_node_ptr = ____tmp_mem____ ; \\ } \\ boost_cont_memchain_node* ____old_first____ = ____root____ -> next_node_ptr ; \\ ____tmp_mem____ -> next_node_ptr = ____old_first____ ; \\ ____root____ -> next_node_ptr = ____tmp_mem____ ; \\ + + ____chain____ -> num_mem ; \\ })",
    "insertText": "while(0)\\ #define BOOST_CONTAINER_MEMCHAIN_ERASE_AFTER(PMEMCHAIN, BEFORE_IT)"
  },
  {
    "label": "____prev_node____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain_node*)",
    "insertText": "____prev_node____(BEFORE_IT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain_node* ____erase_node____ = ____prev_node____ -> next_node_ptr ; \\)",
    "insertText": "if(____chain____->last_node_ptr == ____erase_node____)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ____chain____ -> last_node_ptr =& ____chain____ -> root_node ; \\ } \\ ____prev_node____ -> next_node_ptr = ____erase_node____ -> next_node_ptr ; \\ - - ____chain____ -> num_mem ; \\ })",
    "insertText": "while(0)\\ #define BOOST_CONTAINER_MEMCHAIN_POP_FRONT(PMEMCHAIN)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ____chain____ -> last_node_ptr =& ____chain____ -> root_node ; \\ } \\ ____prev_node____ -> next_node_ptr = ____erase_node____ -> next_node_ptr ; \\ - - ____chain____ -> num_mem ; \\ })",
    "insertText": "while(0)\\ #define BOOST_CONTAINER_MEMCHAIN_INCORPORATE_AFTER(PMEMCHAIN, BEFORE_IT, FIRST, BEFORELAST, NUM)"
  },
  {
    "label": "____pnode____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain_node*)",
    "insertText": "____pnode____(BEFORE_IT)"
  },
  {
    "label": "____first____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain_node* ____next____ = ____pnode____ -> next_node_ptr ; \\ boost_cont_memchain_node*)",
    "insertText": "____first____(boost_cont_memchain_node *)(FIRST)"
  },
  {
    "label": "____blast____()",
    "kind": "Method",
    "detail": "Function (\\ boost_cont_memchain_node*)",
    "insertText": "____blast____(boost_cont_memchain_node *)(BEFORELAST)"
  },
  {
    "label": "____num____()",
    "kind": "Method",
    "detail": "Function (\\ size_t)",
    "insertText": "____num____(NUM)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!____num____)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ } \\)",
    "insertText": "if(____pnode____ == ____chain____->last_node_ptr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ ____chain____ -> last_node_ptr = ____blast____ ; \\ } \\ ____pnode____ -> next_node_ptr = ____first____ ; \\ ____blast____ -> next_node_ptr = ____next____ ; \\ ____chain____ -> num_mem + = ____num____ ; \\ })",
    "insertText": "while(0)\\ #define BOOST_CONTAINER_DL_MULTIALLOC_ALL_CONTIGUOUS ((size_t)(-1)) #define BOOST_CONTAINER_DL_MULTIALLOC_DEFAULT_CONTIGUOUS ((size_t)(0))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t max_system_bytes ; size_t system_bytes ; size_t in_use_bytes ; } boost_cont_malloc_stats_t ; typedef unsigned int allocation_type ; enum { BOOST_CONTAINER_ALLOCATE_NEW = 0 X01,BOOST_CONTAINER_EXPAND_FWD = 0 X02,BOOST_CONTAINER_EXPAND_BWD = 0 X04,BOOST_CONTAINER_SHRINK_IN_PLACE = 0 X08,BOOST_CONTAINER_NOTHROW_ALLOCATION = 0 X10,BOOST_CONTAINER_TRY_SHRINK_IN_PLACE = 0 X40,BOOST_CONTAINER_EXPAND_BOTH = BOOST_CONTAINER_EXPAND_FWD | BOOST_CONTAINER_EXPAND_BWD,BOOST_CONTAINER_EXPAND_OR_NEW = BOOST_CONTAINER_ALLOCATE_NEW | BOOST_CONTAINER_EXPAND_BOTH } ; # ifndef BOOST_CONTAINER_DLMALLOC_FOOTERS enum { BOOST_CONTAINER_ALLOCATION_PAYLOAD =)",
    "insertText": "sizeof(size_t)"
  },
  {
    "label": "boost_cont_size()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct boost_cont_command_ret_impl { void* first ; int second ; } boost_cont_command_ret_t ; size_t)",
    "insertText": "boost_cont_size(const void *p)"
  },
  {
    "label": "boost_cont_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "boost_cont_malloc(size_t bytes)"
  },
  {
    "label": "boost_cont_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boost_cont_free(void* mem)"
  },
  {
    "label": "boost_cont_memalign()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "boost_cont_memalign(size_t bytes, size_t alignment)"
  },
  {
    "label": "boost_cont_multialloc_nodes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_multialloc_nodes(size_t n_elements, size_t elem_size, size_t contiguous_elements, boost_cont_memchain *pchain)"
  },
  {
    "label": "boost_cont_multialloc_arrays()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_multialloc_arrays(size_t n_elements, const size_t *sizes, size_t sizeof_element, size_t contiguous_elements, boost_cont_memchain *pchain)"
  },
  {
    "label": "boost_cont_multidealloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boost_cont_multidealloc(boost_cont_memchain *pchain)"
  },
  {
    "label": "boost_cont_footprint()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "boost_cont_footprint()"
  },
  {
    "label": "boost_cont_allocated_memory()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "boost_cont_allocated_memory()"
  },
  {
    "label": "boost_cont_chunksize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "boost_cont_chunksize(const void *p)"
  },
  {
    "label": "boost_cont_all_deallocated()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_all_deallocated()"
  },
  {
    "label": "boost_cont_malloc_stats()",
    "kind": "Method",
    "detail": "Function (boost_cont_malloc_stats_t)",
    "insertText": "boost_cont_malloc_stats()"
  },
  {
    "label": "boost_cont_in_use_memory()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "boost_cont_in_use_memory()"
  },
  {
    "label": "boost_cont_trim()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_trim(size_t pad)"
  },
  {
    "label": "boost_cont_mallopt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_mallopt(int parameter_number, int parameter_value)"
  },
  {
    "label": "boost_cont_grow()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_grow(void* oldmem, size_t minbytes, size_t maxbytes, size_t *received)"
  },
  {
    "label": "boost_cont_shrink()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_shrink(void* oldmem, size_t minbytes, size_t maxbytes, size_t *received, int do_commit)"
  },
  {
    "label": "boost_cont_alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "boost_cont_alloc(size_t minbytes, size_t preferred_bytes, size_t *received_bytes)"
  },
  {
    "label": "boost_cont_malloc_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_malloc_check()"
  },
  {
    "label": "boost_cont_allocation_command()",
    "kind": "Method",
    "detail": "Function (boost_cont_command_ret_t)",
    "insertText": "boost_cont_allocation_command(allocation_type command , size_t sizeof_object , size_t limit_objects , size_t preferred_objects , size_t *received_objects , void *reuse_ptr)"
  },
  {
    "label": "boost_cont_sync_create()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "boost_cont_sync_create()"
  },
  {
    "label": "boost_cont_sync_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boost_cont_sync_destroy(void *sync)"
  },
  {
    "label": "boost_cont_sync_lock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_sync_lock(void *sync)"
  },
  {
    "label": "boost_cont_sync_unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boost_cont_sync_unlock(void *sync)"
  },
  {
    "label": "boost_cont_global_sync_lock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "boost_cont_global_sync_lock()"
  },
  {
    "label": "boost_cont_global_sync_unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boost_cont_global_sync_unlock()"
  }
]