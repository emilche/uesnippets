[
  {
    "label": "FObjectKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectKey"
  },
  {
    "label": "TObjectKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectKey"
  },
  {
    "label": "MakeObjectKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Requires . h \" # include \" UObject / WeakObjectPtr . h \" # include<type_traits> struct FObjectKey ; namespace UE::CoreUObject::Private { FObjectKey)",
    "insertText": "MakeObjectKey(int32 ObjectIndex, int32 ObjectSerialNumber)"
  },
  {
    "label": "FObjectKey()",
    "kind": "Method",
    "detail": "Function (} struct FObjectKey { public :)",
    "insertText": "FObjectKey() : ObjectIndex(UE::Core::Private::InvalidWeakObjectIndex) , ObjectSerialNumber(0)"
  },
  {
    "label": "FObjectKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FObjectKey(const UObject* Object) : ObjectIndex(UE::Core::Private::InvalidWeakObjectIndex) , ObjectSerialNumber(0)"
  },
  {
    "label": "Weak()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr)",
    "insertText": "Weak(Object)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (ObjectIndex = Weak . ObjectIndex ; ObjectSerialNumber = Weak . ObjectSerialNumber ; } } template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U, const UObject*>) > FORCEINLINE FObjectKey(U Object) : FObjectKey(ImplicitConv<const UObject*>(Object))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FObjectKey& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FObjectKey& Key)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr WeakPtr ; WeakPtr . ObjectIndex = ObjectIndex ; WeakPtr . ObjectSerialNumber = ObjectSerialNumber ; return WeakPtr .)",
    "insertText": "Get()"
  },
  {
    "label": "ResolveObjectPtrEvenIfGarbage()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "ResolveObjectPtrEvenIfGarbage()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr WeakPtr ; WeakPtr . ObjectIndex = ObjectIndex ; WeakPtr . ObjectSerialNumber = ObjectSerialNumber ; bool bEvenIfGarbage = true ; return WeakPtr .)",
    "insertText": "Get(bEvenIfGarbage)"
  },
  {
    "label": "ResolveObjectPtrEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "ResolveObjectPtrEvenIfUnreachable()"
  },
  {
    "label": "GetEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (FWeakObjectPtr WeakPtr ; WeakPtr . ObjectIndex = ObjectIndex ; WeakPtr . ObjectSerialNumber = ObjectSerialNumber ; return WeakPtr .)",
    "insertText": "GetEvenIfUnreachable()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(const FObjectKey& Key)"
  },
  {
    "label": "FObjectKey()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FObjectKey(int32 Index, int32 Serial) : ObjectIndex(Index) , ObjectSerialNumber(Serial)"
  },
  {
    "label": "TObjectKey()",
    "kind": "Method",
    "detail": "Function (int32 ObjectIndex ; int32 ObjectSerialNumber ; } ; template<InElementType> class TObjectKey { public : typedef InElementType ElementType ;)",
    "insertText": "TObjectKey()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U, const InElementType*>) > FORCEINLINE TObjectKey(U Object) : ObjectKey(ImplicitConv<const InElementType*>(Object))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TObjectKey& Other)"
  },
  {
    "label": "ResolveObjectPtr()",
    "kind": "Method",
    "detail": "Function (} InElementType*)",
    "insertText": "ResolveObjectPtr()"
  }
]