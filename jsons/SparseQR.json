[
  {
    "label": "SparseQR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseQR"
  },
  {
    "label": "SparseQRMatrixQReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseQRMatrixQReturnType"
  },
  {
    "label": "SparseQRMatrixQTransposeReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseQRMatrixQTransposeReturnType"
  },
  {
    "label": "SparseQR_QProduct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseQR_QProduct"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "SparseQR()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_QR_H # define EIGEN_SPARSE_QR_H namespace Eigen { template<MatrixType,OrderingType> class SparseQR ; template<SparseQRType> struct SparseQRMatrixQReturnType ; template<SparseQRType> struct SparseQRMatrixQTransposeReturnType ; template<SparseQRType,Derived> struct SparseQR_QProduct ; namespace internal { template<SparseQRType> struct traits<SparseQRMatrixQReturnType<SparseQRType>> { typedef SparseQRType::MatrixType ReturnType ; typedef ReturnType::StorageIndex StorageIndex ; typedef ReturnType::StorageKind StorageKind ; enum { RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic } ; } ; template<SparseQRType> struct traits<SparseQRMatrixQTransposeReturnType<SparseQRType>> { typedef SparseQRType::MatrixType ReturnType ; } ; template<SparseQRType,Derived> struct traits<SparseQR_QProduct<SparseQRType,Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<_MatrixType,_OrderingType> class SparseQR : public SparseSolverBase<SparseQR<_MatrixType,_OrderingType>> { protected : typedef SparseSolverBase<SparseQR<_MatrixType,_OrderingType>> Base ; using Base::m_isInitialized ; public : using Base::_solve_impl ; typedef _MatrixType MatrixType ; typedef _OrderingType OrderingType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> QRMatrixType ; typedef Matrix<StorageIndex,Dynamic,1> IndexVector ; typedef Matrix<Scalar,Dynamic,1> ScalarVector ; typedef PermutationMatrix<Dynamic,Dynamic,StorageIndex> PermutationType ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; public :)",
    "insertText": "SparseQR() : m_analysisIsok(false), m_lastError(\"\"), m_useDefaultThreshold(true),m_isQSorted(false),m_isEtreeOk(false)"
  },
  {
    "label": "SparseQR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseQR(const MatrixType& mat) : m_analysisIsok(false), m_lastError(\"\"), m_useDefaultThreshold(true),m_isQSorted(false),m_isEtreeOk(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(mat)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute(const MatrixType& mat)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(mat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(mat)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyzePattern(const MatrixType& mat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(const MatrixType& mat)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "matrixR()",
    "kind": "Method",
    "detail": "Function (} const QRMatrixType&)",
    "insertText": "matrixR()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"The factorization should be called first, use compute()\")"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (} const PermutationType&)",
    "insertText": "colsPermutation()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->rows() == B.rows() && \"SparseQR::solve() : invalid number of rows in the right hand side matrix\")"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (Index rank = this ->)",
    "insertText": "rank()"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (Dest::PlainObject y,b ; y = this ->)",
    "insertText": "matrixQ().adjoint()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (b = y ; y .)",
    "insertText": "resize((std::max<Index>)(cols(),y.rows()),y.cols())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (y .)",
    "insertText": "topRows(rank) = this->matrixR().topLeftCorner(rank, rank).template triangularView<Upper>().solve(b.topRows(rank))"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (y .)",
    "insertText": "bottomRows(y.rows()-rank).setZero()"
  },
  {
    "label": "setPivotThreshold()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return true ; } void)",
    "insertText": "setPivotThreshold(const RealScalar& threshold)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (m_useDefaultThreshold = false ; m_threshold = threshold ; } template<Rhs> const Solve<SparseQR,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& B)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} template<Rhs> const Solve<SparseQR,Rhs>)",
    "insertText": "solve(const SparseMatrixBase<Rhs>& B)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "mQrm()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<Scalar,RowMajor,Index>)",
    "insertText": "mQrm(this->m_Q)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mat.isCompressed() && \"SparseQR requires a sparse matrix in compressed mode. Call .makeCompressed() before passing it to SparseQR\")"
  },
  {
    "label": "matCpy()",
    "kind": "Method",
    "detail": "Function (internal::conditional<MatrixType::IsRowMajor,QRMatrixType,const MatrixType&>::type)",
    "insertText": "matCpy(mat)"
  },
  {
    "label": "ord()",
    "kind": "Method",
    "detail": "Function (OrderingType ord ;)",
    "insertText": "ord(matCpy, m_perm_c)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "diagSize(std::min)(m,n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_perm_c .)",
    "insertText": "resize(n)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (m_perm_c .)",
    "insertText": "indices().setLinSpaced(n, 0,StorageIndex(n-1))"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} m_outputPerm_c = m_perm_c .)",
    "insertText": "inverse()"
  },
  {
    "label": "coletree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coletree(matCpy, m_etree, m_firstRowElt, m_outputPerm_c.indices().data())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_isEtreeOk = true ; m_R .)",
    "insertText": "resize(m, n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_Q .)",
    "insertText": "resize(m, diagSize)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_R .)",
    "insertText": "reserve(2*mat.nonZeros())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_hcoeffs .)",
    "insertText": "resize(diagSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::abs ;)",
    "insertText": "eigen_assert(m_analysisIsok && \"analyzePattern() should be called before this step\")"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex m =)",
    "insertText": "StorageIndex(mat.rows())"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex n =)",
    "insertText": "StorageIndex(mat.cols())"
  },
  {
    "label": "mark()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "mark((std::max)(m,n))"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (mark .)",
    "insertText": "setConstant(-1)"
  },
  {
    "label": "Ridx()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "Ridx(n), Qidx(m)"
  },
  {
    "label": "tval()",
    "kind": "Method",
    "detail": "Function (Index nzcolR,nzcolQ ; ScalarVector)",
    "insertText": "tval(m)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (RealScalar pivotThreshold = m_threshold ; m_R .)",
    "insertText": "setZero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_pmat = mat ;)",
    "insertText": "if(!m_isEtreeOk)"
  },
  {
    "label": "coletree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coletree(m_pmat, m_etree, m_firstRowElt, m_outputPerm_c.indices().data())"
  },
  {
    "label": "uncompress()",
    "kind": "Method",
    "detail": "Function (m_isEtreeOk = true ; } m_pmat .)",
    "insertText": "uncompress()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function ({ IndexVector originalOuterIndicesCpy ; const StorageIndex* originalOuterIndices = mat .)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (originalOuterIndicesCpy =)",
    "insertText": "Map(m_pmat.outerIndexPtr(),n+1)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (originalOuterIndices = originalOuterIndicesCpy .)",
    "insertText": "data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < n; i++)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index p = m_perm_c .)",
    "insertText": "size() ? m_perm_c.indices()(i)"
  },
  {
    "label": "innerNonZeroPtr()",
    "kind": "Method",
    "detail": "Function (m_pmat .)",
    "insertText": "innerNonZeroPtr()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(m_useDefaultThreshold)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar max2Norm = 0 . 0 ;)",
    "insertText": "for(int j = 0; j < n; j++) max2Norm = numext::maxi(max2Norm, m_pmat.col(j).norm())"
  },
  {
    "label": "pivotThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pivotThreshold(m + n) * max2Norm * NumTraits<RealScalar>::epsilon()"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (} m_pivotperm .)",
    "insertText": "setIdentity(n)"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (StorageIndex nonzeroCol = 0 ; m_Q .)",
    "insertText": "startVec(0)"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (m_R .)",
    "insertText": "startVec(col)"
  },
  {
    "label": "mark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mark(nonzeroCol)"
  },
  {
    "label": "Qidx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Qidx(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StorageIndex curIdx = nonzeroCol ;)",
    "insertText": "if(itp) curIdx = StorageIndex(itp.row())"
  },
  {
    "label": "m_firstRowElt()",
    "kind": "Method",
    "detail": "Function (StorageIndex st =)",
    "insertText": "m_firstRowElt(curIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_lastError = \" Empty row found during numerical factorization \" ; m_info = InvalidInput ; return ; } Index bi = nzcolR ;)",
    "insertText": "for(; mark(st) != col; st = m_etree(st))"
  },
  {
    "label": "Ridx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ridx(nzcolR)"
  },
  {
    "label": "mark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mark(st)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nzcolR + + ; } Index nt = nzcolR - bi ;)",
    "insertText": "for(Index i = 0; i < nt/2; i++) std::swap(Ridx(bi+i), Ridx(nzcolR-i-1))"
  },
  {
    "label": "Qidx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Qidx(nzcolQ)"
  },
  {
    "label": "mark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mark(curIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nzcolQ + + ; } })",
    "insertText": "for(Index i = nzcolR-1; i >= 0; i--)"
  },
  {
    "label": "Ridx()",
    "kind": "Method",
    "detail": "Function (Index curIdx =)",
    "insertText": "Ridx(i)"
  },
  {
    "label": "tdot()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "tdot(0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tdot = m_Q .)",
    "insertText": "col(curIdx).dot(tval)"
  },
  {
    "label": "m_hcoeffs()",
    "kind": "Method",
    "detail": "Function (tdot* =)",
    "insertText": "m_hcoeffs(curIdx)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex iQ =)",
    "insertText": "StorageIndex(itq.row())"
  },
  {
    "label": "Qidx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Qidx(nzcolQ++)"
  },
  {
    "label": "mark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mark(iQ)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (} } } } Scalar tau =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealScalar beta = 0 ;)",
    "insertText": "if(nonzeroCol < diagSize)"
  },
  {
    "label": "tval()",
    "kind": "Method",
    "detail": "Function (Scalar c0 = nzcolQ ?)",
    "insertText": "tval(Qidx(0)) : Scalar(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar sqrNorm = 0 . ;)",
    "insertText": "for(Index itq = 1; itq < nzcolQ; ++itq) sqrNorm += numext::abs2(tval(Qidx(itq)))"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (beta =)",
    "insertText": "real(c0)"
  },
  {
    "label": "tval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tval(Qidx(0))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} else { using std::sqrt ; beta =)",
    "insertText": "sqrt(numext::abs2(c0) + sqrNorm)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (tau =)",
    "insertText": "conj((beta-c0) / beta)"
  },
  {
    "label": "insertBackByOuterInnerUnordered()",
    "kind": "Method",
    "detail": "Function (m_R .)",
    "insertText": "insertBackByOuterInnerUnordered(col, curIdx) = tval(curIdx)"
  },
  {
    "label": "tval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tval(curIdx) = Scalar(0.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(nonzeroCol < diagSize && abs(beta) >= pivotThreshold)"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (m_R .)",
    "insertText": "insertBackByOuterInner(col, nonzeroCol)"
  },
  {
    "label": "m_hcoeffs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_hcoeffs(nonzeroCol)"
  },
  {
    "label": "Qidx()",
    "kind": "Method",
    "detail": "Function (Index iQ =)",
    "insertText": "Qidx(itq)"
  },
  {
    "label": "insertBackByOuterInnerUnordered()",
    "kind": "Method",
    "detail": "Function (m_Q .)",
    "insertText": "insertBackByOuterInnerUnordered(nonzeroCol,iQ) = tval(iQ)"
  },
  {
    "label": "tval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tval(iQ) = Scalar(0.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} nonzeroCol + + ;)",
    "insertText": "if(nonzeroCol<diagSize) m_Q.startVec(nonzeroCol)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(Index j = nonzeroCol; j < n-1; j++) std::swap(m_pivotperm.indices()(j), m_pivotperm.indices()[j+1])"
  },
  {
    "label": "coletree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coletree(m_pmat, m_etree, m_firstRowElt, m_pivotperm.indices().data())"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (m_isEtreeOk = false ; } } m_hcoeffs .)",
    "insertText": "tail(diagSize-nonzeroCol).setZero()"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (m_Q .)",
    "insertText": "finalize()"
  },
  {
    "label": "makeCompressed()",
    "kind": "Method",
    "detail": "Function (m_Q .)",
    "insertText": "makeCompressed()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_isQSorted = false ; m_nonzeropivots = nonzeroCol ;)",
    "insertText": "if(nonzeroCol<n)"
  },
  {
    "label": "tempR()",
    "kind": "Method",
    "detail": "Function (QRMatrixType)",
    "insertText": "tempR(m_R)"
  },
  {
    "label": "SparseQR_QProduct()",
    "kind": "Method",
    "detail": "Function (m_R = tempR* m_pivotperm ; m_outputPerm_c = m_outputPerm_c* m_pivotperm ; } m_isInitialized = true ; m_factorizationIsok = true ; m_info = Success ; } template<SparseQRType,Derived> struct SparseQR_QProduct : ReturnByValue<SparseQR_QProduct<SparseQRType,Derived>> { typedef SparseQRType::QRMatrixType MatrixType ; typedef SparseQRType::Scalar Scalar ;)",
    "insertText": "SparseQR_QProduct(const SparseQRType& qr, const Derived& other, bool transpose) : m_qr(qr),m_other(other),m_transpose(transpose)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<DesType> void)",
    "insertText": "evalTo(DesType& res)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (res = m_other ;)",
    "insertText": "if(m_transpose)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_qr.m_Q.rows() == m_other.rows() && \"Non conforming object sizes\")"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar tau =)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tau = m_qr . m_Q .)",
    "insertText": "col(k).dot(res.col(j))"
  },
  {
    "label": "m_hcoeffs()",
    "kind": "Method",
    "detail": "Function (tau = tau* m_qr .)",
    "insertText": "m_hcoeffs(k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "col(j) -= tau * m_qr.m_Q.col(k)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "eigen_assert(m_qr.matrixQ().cols() == m_other.rows() && \"Non conforming object sizes\")"
  },
  {
    "label": "conservativeResize()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "conservativeResize(rows(), cols())"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (Index start_k = internal::is_identity<Derived>::value ?)",
    "insertText": "mini(j,diagSize-1)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (tau = tau*)",
    "insertText": "conj(m_qr.m_hcoeffs(k))"
  },
  {
    "label": "SparseQRMatrixQReturnType()",
    "kind": "Method",
    "detail": "Function (} } } } const SparseQRType& m_qr ; const Derived& m_other ; bool m_transpose ; } ; template<SparseQRType> struct SparseQRMatrixQReturnType : public EigenBase<SparseQRMatrixQReturnType<SparseQRType>> { typedef SparseQRType::Scalar Scalar ; typedef Matrix<Scalar,Dynamic,Dynamic> DenseMatrix ; enum { RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic } ;)",
    "insertText": "SparseQRMatrixQReturnType(const SparseQRType& qr) : m_qr(qr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Derived> SparseQR_QProduct<SparseQRType,Derived>)",
    "insertText": "operator(const MatrixBase<Derived>& other)"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} SparseQRMatrixQTransposeReturnType<SparseQRType>)",
    "insertText": "adjoint()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} SparseQRMatrixQTransposeReturnType<SparseQRType>)",
    "insertText": "transpose()"
  },
  {
    "label": "SparseQRMatrixQTransposeReturnType()",
    "kind": "Method",
    "detail": "Function (} const SparseQRType& m_qr ; } ; template<SparseQRType> struct SparseQRMatrixQTransposeReturnType {)",
    "insertText": "SparseQRMatrixQTransposeReturnType(const SparseQRType& qr) : m_qr(qr)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} const SparseQRType& m_qr ; } ; namespace internal { template<SparseQRType> struct evaluator_traits<SparseQRMatrixQReturnType<SparseQRType>> { typedef SparseQRType::MatrixType MatrixType ; typedef storage_kind_to_evaluator_kind<MatrixType::StorageKind>::Kind Kind ; typedef SparseShape Shape ; } ; template<DstXprType,SparseQRType> struct Assignment<DstXprType,SparseQRMatrixQReturnType<SparseQRType>,internal::assign_op<DstXprType::Scalar,DstXprType::Scalar>,Sparse2Sparse> { typedef SparseQRMatrixQReturnType<SparseQRType> SrcXprType ; typedef DstXprType::Scalar Scalar ; typedef DstXprType::StorageIndex StorageIndex ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)"
  },
  {
    "label": "idMat()",
    "kind": "Method",
    "detail": "Function (DstXprType::PlainObject)",
    "insertText": "idMat(src.rows(), src.cols())"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (idMat .)",
    "insertText": "setIdentity()"
  },
  {
    "label": "SparseQRType()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "SparseQRType(&src.m_qr)->_sort_matrix_Q()"
  },
  {
    "label": "DstXprType()",
    "kind": "Method",
    "detail": "Function (dst = SparseQR_QProduct<SparseQRType,)",
    "insertText": "DstXprType(src.m_qr, idMat, false)"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (dst = src . m_qr .)",
    "insertText": "matrixQ() * DstXprType::Identity(src.m_qr.rows(), src.m_qr.rows())"
  }
]