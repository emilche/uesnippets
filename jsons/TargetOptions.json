[
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "ABIType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ABIType"
  },
  {
    "label": "FPOpFusionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FPOpFusionMode"
  },
  {
    "label": "JumpTableType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JumpTableType"
  },
  {
    "label": "Model",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Model"
  },
  {
    "label": "TargetOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetOptions"
  },
  {
    "label": "TargetOptions()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TARGET_TARGETOPTIONS_H # define LLVM_TARGET_TARGETOPTIONS_H # include \" llvm / Target / TargetRecip . h \" # include \" llvm / MC / MCTargetOptions . h \" # include<string> namespace llvm { class MachineFunction ; class Module ; class StringRef ; namespace FloatABI { enum ABIType { Default,Soft,Hard } ; } namespace FPOpFusion { enum FPOpFusionMode { Fast,Standard,Strict } ; } namespace JumpTable { enum JumpTableType { Single,Arity,Simplified,Full } ; } namespace ThreadModel { enum Model { POSIX,Single } ; } class TargetOptions { public :)",
    "insertText": "TargetOptions() : PrintMachineCode(false), LessPreciseFPMADOption(false), UnsafeFPMath(false), NoInfsFPMath(false), NoNaNsFPMath(false), HonorSignDependentRoundingFPMathOption(false), NoZerosInBSS(false), GuaranteedTailCallOpt(false), StackAlignmentOverride(0), EnableFastISel(false), PositionIndependentExecutable(false), UseInitArray(false), DisableIntegratedAS(false), CompressDebugSections(false), FunctionSections(false), DataSections(false), UniqueSectionNames(true), TrapUnreachable(false), FloatABIType(FloatABI::Default), AllowFPOpFusion(FPOpFusion::Standard), Reciprocals(TargetRecip()), JTType(JumpTable::Single), ThreadModel(ThreadModel::POSIX)"
  },
  {
    "label": "DisableFramePointerElim()",
    "kind": "Method",
    "detail": "Function (} unsigned PrintMachineCode : 1 ; bool)",
    "insertText": "DisableFramePointerElim(const MachineFunction &MF)"
  },
  {
    "label": "LessPreciseFPMAD()",
    "kind": "Method",
    "detail": "Function (unsigned LessPreciseFPMADOption : 1 ; bool)",
    "insertText": "LessPreciseFPMAD()"
  },
  {
    "label": "HonorSignDependentRoundingFPMath()",
    "kind": "Method",
    "detail": "Function (unsigned UnsafeFPMath : 1 ; unsigned NoInfsFPMath : 1 ; unsigned NoNaNsFPMath : 1 ; unsigned HonorSignDependentRoundingFPMathOption : 1 ; bool)",
    "insertText": "HonorSignDependentRoundingFPMath()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (unsigned NoZerosInBSS : 1 ; unsigned GuaranteedTailCallOpt : 1 ; unsigned StackAlignmentOverride ; unsigned EnableFastISel : 1 ; unsigned PositionIndependentExecutable : 1 ; unsigned UseInitArray : 1 ; unsigned DisableIntegratedAS : 1 ; unsigned CompressDebugSections : 1 ; unsigned FunctionSections : 1 ; unsigned DataSections : 1 ; unsigned UniqueSectionNames : 1 ; unsigned TrapUnreachable : 1 ; FloatABI::ABIType FloatABIType ; FPOpFusion::FPOpFusionMode AllowFPOpFusion ; TargetRecip Reciprocals ; JumpTable::JumpTableType JTType ; ThreadModel::Model ThreadModel ; MCTargetOptions MCOptions ; } ; bool)",
    "insertText": "operator(const TargetOptions &LHS, const TargetOptions &RHS)"
  },
  {
    "label": "ARE_EQUAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ARE_EQUAL(X) LHS.X == RHS.X return ARE_EQUAL(UnsafeFPMath) && ARE_EQUAL(NoInfsFPMath) && ARE_EQUAL(NoNaNsFPMath) && ARE_EQUAL(HonorSignDependentRoundingFPMathOption) && ARE_EQUAL(NoZerosInBSS) && ARE_EQUAL(GuaranteedTailCallOpt) && ARE_EQUAL(StackAlignmentOverride) && ARE_EQUAL(EnableFastISel) && ARE_EQUAL(PositionIndependentExecutable) && ARE_EQUAL(UseInitArray) && ARE_EQUAL(TrapUnreachable) && ARE_EQUAL(FloatABIType) && ARE_EQUAL(AllowFPOpFusion) && ARE_EQUAL(Reciprocals) && ARE_EQUAL(JTType) && ARE_EQUAL(ThreadModel) && ARE_EQUAL(MCOptions)"
  }
]