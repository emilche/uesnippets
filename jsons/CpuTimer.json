[
  {
    "label": "CpuTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CpuTimer"
  },
  {
    "label": "CpuTimer()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_UTIL_CPUTIMER_HAS_BEEN_INCLUDED # define OPENVDB_UTIL_CPUTIMER_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<string> # include<chrono> # include<iostream> # include<sstream> # include<iomanip> # include \" Formats . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace util { class CpuTimer { public :)",
    "insertText": "CpuTimer(std::ostream& os = std::cerr) : mOutStream(os), mT0(this->now())"
  },
  {
    "label": "CpuTimer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CpuTimer(const std::string& msg, std::ostream& os = std::cerr) : mOutStream(os)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "start(msg)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "start()"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (mT0 = this ->)",
    "insertText": "now()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "start(const std::string& msg)"
  },
  {
    "label": "microseconds()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "microseconds()"
  },
  {
    "label": "milliseconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "milliseconds()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (double resolution = 1 . 0 / 1 E3 ; return static_cast<)",
    "insertText": "double(this->microseconds())"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "seconds()"
  },
  {
    "label": "time()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "time()"
  },
  {
    "label": "printTime()",
    "kind": "Method",
    "detail": "Function (std::ostringstream os ;)",
    "insertText": "printTime(os, msec, \"\", \"\", 4, 1, 1)"
  },
  {
    "label": "stop()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "stop()"
  },
  {
    "label": "printTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printTime(mOutStream, msec, \" completed in \", \"\\n\", 4, 3, 1)"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (const auto time_since_epoch = std::chrono::)",
    "insertText": "now().time_since_epoch()"
  },
  {
    "label": "microseconds()",
    "kind": "Method",
    "detail": "Function (const auto microseconds = std::chrono::duration_cast<std::)",
    "insertText": "microseconds(time_since_epoch).count()"
  }
]