[
  {
    "label": "Source",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Source"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "ScopedObservation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedObservation"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SCOPED_OBSERVATION_H_ # define BASE_SCOPED_OBSERVATION_H_ # include<stddef . h> # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / memory / raw_ptr . h \" namespace base { template<class Source,class Observer,)",
    "insertText": "void(Source::*AddObsFn)(Observer*) = &Source::AddObserver, void (Source::*RemoveObsFn)(Observer*)"
  },
  {
    "label": "ScopedObservation()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedObservation(Observer* observer) : observer_(observer)"
  },
  {
    "label": "ScopedObservation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedObservation(const ScopedObservation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedObservation&)",
    "insertText": "operator(const ScopedObservation&)"
  },
  {
    "label": "ScopedObservation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedObservation()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Observe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Observe(Source* source)"
  },
  {
    "label": "source()",
    "kind": "Method",
    "detail": "Function (source_ =)",
    "insertText": "source(source_.get()->*AddObsFn)(observer_)"
  },
  {
    "label": "IsObserving()",
    "kind": "Method",
    "detail": "Function (source_ = nullptr ; } } bool)",
    "insertText": "IsObserving()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(source)"
  }
]