[
  {
    "label": "_LIBCPP_TYPE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TYPE_VIS"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_RandomNumberGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomNumberGenerator"
  },
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "_UniformRandomNumberGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UniformRandomNumberGenerator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SHUFFLE_H # define _LIBCPP___ALGORITHM_SHUFFLE_H # include<__algorithm / iterator_operations . h> # include<__config> # include<__debug> # include<__iterator / iterator_traits . h> # include<__random / uniform_int_distribution . h> # include<__utility / forward . h> # include<__utility / move . h> # include<cstddef> # include<cstdint> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__libcpp_debug_randomizer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "__libcpp_debug_randomizer()"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (__state =)",
    "insertText": "__seed()"
  },
  {
    "label": "__inc()",
    "kind": "Method",
    "detail": "Function (__inc = __state + 0 xda3e39cb94b95bdbULL ;)",
    "insertText": "__inc(__inc << 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} typedef uint_fast32_t result_type ; const result_type _Min = 0 ; const result_type _Max = 0 xFFFFFFFF ; _LIBCPP_HIDE_FROM_ABI result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (uint_fast64_t __oldstate = __state ; __state = __oldstate* 6 3 6 4 1 3 6 2 2 3 8 4 6 7 9 3 0 0 5 ULL + __inc ; return __oldstate>> 3 2 ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR result_type)",
    "insertText": "min()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (# ifdef _LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY_SEED return _LIBCPP_DEBUG_RANDOMIZE_UNSPECIFIED_STABILITY_SEED ; # else char __x ; return reinterpret_cast<)",
    "insertText": "uintptr_t(&__x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } } ; # if _LIBCPP_STD_VER<= 1 4 | |)",
    "insertText": "defined(_LIBCPP_ENABLE_CXX17_REMOVED_RANDOM_SHUFFLE) \\ || defined(_LIBCPP_BUILDING_LIBRARY)"
  },
  {
    "label": "__rs_get()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS __rs_default)",
    "insertText": "__rs_get()"
  },
  {
    "label": "__rs_default()",
    "kind": "Method",
    "detail": "Function (class _LIBCPP_TYPE_VIS __rs_default { unsigned __c_ ;)",
    "insertText": "__rs_default()"
  },
  {
    "label": "__rs_default()",
    "kind": "Method",
    "detail": "Function (public : typedef uint_fast32_t result_type ; const result_type _Min = 0 ; const result_type _Max = 0 xFFFFFFFF ;)",
    "insertText": "__rs_default(const __rs_default&)"
  },
  {
    "label": "random_shuffle()",
    "kind": "Method",
    "detail": "Function (template<class _RandomAccessIterator> _LIBCPP_DEPRECATED_IN_CXX14 void)",
    "insertText": "random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_RandomAccessIterator>::difference_type difference_type ; typedef uniform_int_distribution<ptrdiff_t> _Dp ; typedef _Dp::param_type _Pp ; difference_type __d = __last - __first ;)",
    "insertText": "if(__d > 1)"
  },
  {
    "label": "__uid()",
    "kind": "Method",
    "detail": "Function (difference_type __i =)",
    "insertText": "__uid(__g, _Pp(0, __d))"
  },
  {
    "label": "random_shuffle()",
    "kind": "Method",
    "detail": "Function (} } } template<class _RandomAccessIterator,class _RandomNumberGenerator> _LIBCPP_DEPRECATED_IN_CXX14 void)",
    "insertText": "random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, #ifndef _LIBCPP_CXX03_LANG _RandomNumberGenerator&& __rand) #else _RandomNumberGenerator& __rand)"
  },
  {
    "label": "__rand()",
    "kind": "Method",
    "detail": "Function (difference_type __i =)",
    "insertText": "__rand(__d)"
  },
  {
    "label": "__shuffle()",
    "kind": "Method",
    "detail": "Function (} } } # endif template<class _AlgPolicy,class _RandomAccessIterator,class _Sentinel,class _UniformRandomNumberGenerator> _RandomAccessIterator)",
    "insertText": "__shuffle(_RandomAccessIterator __first, _Sentinel __last_sentinel, _UniformRandomNumberGenerator&& __g)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_RandomAccessIterator>::difference_type difference_type ; typedef uniform_int_distribution<ptrdiff_t> _Dp ; typedef _Dp::param_type _Pp ; auto __original_last = _IterOps<_AlgPolicy)",
    "insertText": "next(__first, __last_sentinel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_Dp __uid ;)",
    "insertText": "for(--__last, (void) --__d; __first < __last; ++__first, (void) --__d)"
  },
  {
    "label": "shuffle()",
    "kind": "Method",
    "detail": "Function (} } return __original_last ; } template<class _RandomAccessIterator,class _UniformRandomNumberGenerator> void)",
    "insertText": "shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator&& __g)"
  }
]