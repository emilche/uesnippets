[
  {
    "label": "triangular_solve_vector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_vector"
  },
  {
    "label": "triangular_solve_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_matrix"
  },
  {
    "label": "trsolve_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "trsolve_traits"
  },
  {
    "label": "triangular_solver_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solver_selector"
  },
  {
    "label": "triangular_solver_unroller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solver_unroller"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "triangular_solve_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_retval"
  },
  {
    "label": "RhsIsVectorAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SOLVETRIANGULAR_H # define EIGEN_SOLVETRIANGULAR_H namespace Eigen { namespace internal { template<LhsScalar,RhsScalar,Index,int Side,int Mode,bool Conjugate,int StorageOrder> struct triangular_solve_vector ; template<Scalar,Index,int Side,int Mode,bool Conjugate,int TriStorageOrder,int OtherStorageOrder,int OtherInnerStride> struct triangular_solve_matrix ; template<Lhs,Rhs,int Side> class trsolve_traits { private : enum {)",
    "insertText": "RhsIsVectorAtCompileTime(Side==OnTheLeft ? Rhs::ColsAtCompileTime : Rhs::RowsAtCompileTime)"
  },
  {
    "label": "Unrolling()",
    "kind": "Method",
    "detail": "Function (public : enum {)",
    "insertText": "Unrolling(RhsIsVectorAtCompileTime && Rhs::SizeAtCompileTime != Dynamic && Rhs::SizeAtCompileTime <= 8)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} ; template<Lhs,Rhs,int Side,int Mode,int Unrolling = trsolve_traits<Lhs,Rhs,Side>::Unrolling,int RhsVectors = trsolve_traits<Lhs,Rhs,Side>::RhsVectors> struct triangular_solver_selector ; template<Lhs,Rhs,int Side,int Mode> struct triangular_solver_selector<Lhs,Rhs,Side,Mode,NoUnrolling,1> { typedef Lhs::Scalar LhsScalar ; typedef Rhs::Scalar RhsScalar ; typedef blas_traits<Lhs> LhsProductTraits ; typedef LhsProductTraits::ExtractType ActualLhsType ; typedef Map<Matrix<RhsScalar,Dynamic,1>,Aligned> MappedRhs ; EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const Lhs& lhs, Rhs& rhs)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (ActualLhsType actualLhs =)",
    "insertText": "extract(lhs)"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (bool useRhsDirectly = Rhs::InnerStrideAtCompileTime = = 1 | | rhs .)",
    "insertText": "innerStride()"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(RhsScalar,actualRhs,rhs.size(), (useRhsDirectly ? rhs.data() : 0))"
  },
  {
    "label": "NeedToConjugate()",
    "kind": "Method",
    "detail": "Function (triangular_solve_vector<LhsScalar,RhsScalar,Index,Side,Mode,)",
    "insertText": "NeedToConjugate(int(Lhs::Flags) & RowMajorBit) ? RowMajor : ColMajor> ::run(actualLhs.cols(), actualLhs.data(), actualLhs.outerStride(), actualRhs)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index size = lhs .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index othersize = Side = = OnTheLeft ? rhs .)",
    "insertText": "cols() : rhs.rows()"
  },
  {
    "label": "gemm_blocking_space()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "gemm_blocking_space(Rhs::Flags&RowMajorBit)"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (BlockingType)",
    "insertText": "blocking(rhs.rows(), rhs.cols(), size, 1, false)"
  },
  {
    "label": "NeedToConjugate()",
    "kind": "Method",
    "detail": "Function (triangular_solve_matrix<Scalar,Index,Side,Mode,)",
    "insertText": "NeedToConjugate(int(Lhs::Flags) & RowMajorBit) ? RowMajor : ColMajor, (Rhs::Flags&RowMajorBit) ? RowMajor : ColMajor, Rhs::InnerStrideAtCompileTime> ::run(size, othersize, &actualLhs.coeffRef(0,0), actualLhs.outerStride(), &rhs.coeffRef(0,0), rhs.innerStride(), rhs.outerStride(), blocking)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int Mode,int LoopIndex,int Size,bool Stop = LoopIndex = = Size> struct triangular_solver_unroller ; template<Lhs,Rhs,int Mode,int LoopIndex,int Size> struct triangular_solver_unroller<Lhs,Rhs,Mode,LoopIndex,Size,false> { enum {)",
    "insertText": "IsLower((Mode&Lower)==Lower)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (triangular_solver_unroller<Lhs,Rhs,Mode,LoopIndex + 1,Size)",
    "insertText": "run(lhs,rhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int Mode,int LoopIndex,int Size> struct triangular_solver_unroller<Lhs,Rhs,Mode,LoopIndex,Size,true> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(const Lhs&, Rhs&)"
  },
  {
    "label": "trLhs()",
    "kind": "Method",
    "detail": "Function (Transpose<const Lhs>)",
    "insertText": "trLhs(lhs)"
  },
  {
    "label": "trRhs()",
    "kind": "Method",
    "detail": "Function (Transpose<Rhs>)",
    "insertText": "trRhs(rhs)"
  },
  {
    "label": "Rhs()",
    "kind": "Method",
    "detail": "Function (triangular_solver_unroller<Transpose<const Lhs>,Transpose<)",
    "insertText": "Rhs((Mode&Upper)==Upper ? Lower : Upper) | (Mode&UnitDiag), 0,Rhs::SizeAtCompileTime>::run(trLhs,trRhs)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (} } ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<MatrixType,unsigned int Mode> template<int Side,OtherDerived> EIGEN_DEVICE_FUNC void TriangularViewImpl<MatrixType,Mode,Dense)",
    "insertText": "solveInPlace(const MatrixBase<OtherDerived>& _other)"
  },
  {
    "label": "const_cast_derived()",
    "kind": "Method",
    "detail": "Function (OtherDerived& other = _other .)",
    "insertText": "const_cast_derived()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(derived().cols() == derived().rows() && ((Side==OnTheLeft && derived().cols() == other.rows()) || (Side==OnTheRight && derived().cols() == other.cols())))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((!(int(Mode) & int(ZeroDiag))) && bool(int(Mode) & (int(Upper) | int(Lower))))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "copy(internal::traits<OtherDerived>::Flags & RowMajorBit)"
  },
  {
    "label": "otherCopy()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<copy,internal::plain_matrix_type_column_major<OtherDerived>::type,OtherDerived&>::type OtherCopy ; OtherCopy)",
    "insertText": "otherCopy(other)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::triangular_solver_selector<MatrixType,internal::remove_reference<OtherCopy>::type,Side,Mode)",
    "insertText": "run(derived().nestedExpression(), otherCopy)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} template<Derived,unsigned int Mode> template<int Side,Other> const internal::triangular_solve_retval<Side,TriangularView<Derived,Mode>,Other> TriangularViewImpl<Derived,Mode,Dense)",
    "insertText": "solve(const MatrixBase<Other>& other)"
  },
  {
    "label": "triangular_solve_retval()",
    "kind": "Method",
    "detail": "Function (} # endif namespace internal { template<int Side,TriangularType,Rhs> struct traits<triangular_solve_retval<Side,TriangularType,Rhs>> { typedef internal::plain_matrix_type_column_major<Rhs>::type ReturnType ; } ; template<int Side,TriangularType,Rhs> struct triangular_solve_retval : public ReturnByValue<triangular_solve_retval<Side,TriangularType,Rhs>> { typedef remove_all<Rhs::Nested>::type RhsNestedCleaned ; typedef ReturnByValue<triangular_solve_retval> Base ;)",
    "insertText": "triangular_solve_retval(const TriangularType& tri, const Rhs& rhs) : m_triangularMatrix(tri), m_rhs(rhs)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "evalTo(Dest& dst)"
  },
  {
    "label": "Side()",
    "kind": "Method",
    "detail": "Function (m_triangularMatrix . template solveInPlace<)",
    "insertText": "Side(dst)"
  }
]