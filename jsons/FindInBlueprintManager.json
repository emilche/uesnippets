[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FTopLevelAssetPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelAssetPath"
  },
  {
    "label": "FFindInBlueprintsResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsResult"
  },
  {
    "label": "FImaginaryBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImaginaryBlueprint"
  },
  {
    "label": "FImaginaryFiBData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImaginaryFiBData"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "SFindInBlueprints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFindInBlueprints"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "EFiBVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFiBVersion"
  },
  {
    "label": "FSearchDataVersionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchDataVersionInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSearchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchData"
  },
  {
    "label": "ESearchQueryFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESearchQueryFilter"
  },
  {
    "label": "FSearchTagDataPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchTagDataPair"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FActiveSearchQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSearchQuery"
  },
  {
    "label": "FAssetRegistryModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryModule"
  },
  {
    "label": "FCacheAllBlueprintsTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheAllBlueprintsTickableObject"
  },
  {
    "label": "FWorkspaceItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkspaceItem"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Queue . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Dom / JsonObject . h \" # include \" Engine / Blueprint . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" SlateFwd . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" TickableEditorObject . h \" # include \" Types / WidgetActiveTimerDelegate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" FindInBlueprintManager . generated . h \" class FArchive ; class SDockTab ; class SWidget ; class UBlueprint ; class UClass ; class UObject ; struct FTopLevelAssetPath ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogFindInBlueprint, Warning, All)"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_DECLARE_CATEGORY_EXTERN(FindInBlueprint)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (class FFindInBlueprintsResult ; class FImaginaryBlueprint ; class FImaginaryFiBData ; class FSpawnTabArgs ; class SFindInBlueprints ; struct FAssetData ; typedef TWeakPtr<FImaginaryFiBData,ESPMode::ThreadSafe> FImaginaryFiBDataWeakPtr ; typedef TSharedPtr<FImaginaryFiBData,ESPMode::ThreadSafe> FImaginaryFiBDataSharedPtr ; # define MAX_GLOBAL_FIND_RESULTS 4 struct FFindInBlueprintSearchTags { const FText FiB_Properties ; const FText FiB_Components ; const FText FiB_IsSCSComponent ; const FText FiB_Nodes ; const FText FiB_SchemaName ; const FText FiB_UberGraphs ; const FText FiB_Functions ; const FText FiB_Macros ; const FText FiB_SubGraphs ; const FText FiB_ExtensionGraphs ; const FText FiB_Extensions ; const FText FiB_Name ; const FText FiB_NativeName ; const FText FiB_ClassName ; const FText FiB_NodeGuid ; const FText FiB_DefaultValue ; const FText FiB_Tooltip ; const FText FiB_Description ; const FText FiB_Comment ; const FText FiB_Path ; const FText FiB_ParentClass ; const FText FiB_Interfaces ; const FText FiB_FuncOriginClass ; const FText FiB_Pins ; const FText FiB_PinCategory ; const FText FiB_PinSubCategory ; const FText FiB_ObjectClass ; const FText FiB_IsArray ; const FText FiB_IsReference ; const FText FiB_Glyph ; const FText FiB_GlyphStyleSet ; const FText FiB_GlyphColor ; const FText FiBMetaDataTag ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (FIB_VER_NONE = - 1,FIB_VER_BASE = 0,FIB_VER_VARIABLE_REFERENCE,FIB_VER_INTERFACE_GRAPHS,FIB_VER_FUNC_CALL_SITES,FIB_VER_PLUS_ONE,FIB_VER_LATEST = FIB_VER_PLUS_ONE - 1 } ; struct FSearchDataVersionInfo { int32 FiBDataVersion = EFiBVersion::FIB_VER_NONE ; int32 EditorObjectVersion = - 1 ; FSearchDataVersionInfo Current ; } ; enum class ESearchDataStateFlags : uint8 { None = 0,IsIndexed = 1<<0,WasRemoved = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESearchDataStateFlags)"
  },
  {
    "label": "FSearchData()",
    "kind": "Method",
    "detail": "Function (struct FSearchData { TWeakObjectPtr<UBlueprint> Blueprint ; FSoftObjectPath AssetPath ; FString Value ; FName AssetKeyForValue ; FString ParentClass ; TArray<FString> Interfaces ; FImaginaryFiBDataSharedPtr ImaginaryBlueprint ; FSearchDataVersionInfo VersionInfo ; ESearchDataStateFlags StateFlags ;)",
    "insertText": "FSearchData() : Blueprint(nullptr) , StateFlags(ESearchDataStateFlags::None)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "HasEncodedValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasEncodedValue()"
  },
  {
    "label": "ClearEncodedValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearEncodedValue()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Reset()"
  },
  {
    "label": "IsIndexingCompleted()",
    "kind": "Method",
    "detail": "Function (AssetKeyForValue = NAME_None ; } bool)",
    "insertText": "IsIndexingCompleted()"
  },
  {
    "label": "IsMarkedForDeletion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMarkedForDeletion()"
  },
  {
    "label": "FSearchTagDataPair()",
    "kind": "Method",
    "detail": "Function (} } ; enum ESearchQueryFilter { BlueprintFilter = 0,GraphsFilter,UberGraphsFilter,FunctionsFilter,MacrosFilter,NodesFilter,PinsFilter,PropertiesFilter,VariablesFilter,ComponentsFilter,AllFilter,} ; struct FSearchTagDataPair {)",
    "insertText": "FSearchTagDataPair(FText InKey, FText InValue) : Key(InKey) , Value(InValue)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} FText Key ; FText Value ; } ; struct FFiBMD { const FString FiBSearchableMD ; const FString FiBSearchableShallowMD ; const FString FiBSearchableExplicitMD ; const FString FiBSearchableHiddenExplicitMD ; const FString FiBSearchableFormatVersionMD ; } ; enum class EFiBCacheOpType { CachePendingAssets,CacheUnindexedAssets } ; enum class EFiBCacheOpFlags { None = 0,ShowProgress = 1<<0,HideNotifications = 1<<1,AllowUserCancel = 1<<2,CheckOutAndSave = 1<<3,HideProgressBars = 1<<4,AllowUserCloseProgress = 1<<5,IsCachingDiscoveredAssets = 1<<6,KeepProgressVisibleOnCompletion = 1<<7,ExecuteOnMainThread = 1<<8,ExecuteOnSingleThread = 1<<9,ExecuteGatherPhaseOnly = 1<<1 0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFiBCacheOpFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (struct FFindInBlueprintCachingOptions { EFiBCacheOpType OpType = EFiBCacheOpType::CachePendingAssets ; EFiBCacheOpFlags OpFlags = EFiBCacheOpFlags::None ; FSimpleDelegate OnFinished ; EFiBVersion MinimiumVersionRequirement = EFiBVersion::FIB_VER_LATEST ; } ; enum class EAddOrUpdateBlueprintSearchMetadataFlags { None = 0,ForceRecache = 1<<0,ClearCachedValue = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAddOrUpdateBlueprintSearchMetadataFlags)"
  },
  {
    "label": "FFindInBlueprintsResult()",
    "kind": "Method",
    "detail": "Function (class FFindInBlueprintsResult : public TSharedFromThis<FFindInBlueprintsResult> { public :)",
    "insertText": "FFindInBlueprintsResult()"
  },
  {
    "label": "FFindInBlueprintsResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFindInBlueprintsResult(const FText& InDisplayText)"
  },
  {
    "label": "OnClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick()"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCategory()"
  },
  {
    "label": "CreateIcon()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateIcon()"
  },
  {
    "label": "FinalizeSearchData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSearchData()"
  },
  {
    "label": "GetCommentText()",
    "kind": "Method",
    "detail": "Function (} ; FString)",
    "insertText": "GetCommentText()"
  },
  {
    "label": "GetParentBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetParentBlueprint()"
  },
  {
    "label": "ParseSearchInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSearchInfo(FText InKey, FText InValue)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} ; UObject*)",
    "insertText": "GetObject(UBlueprint* InBlueprint)"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "FStreamSearchOptions()",
    "kind": "Method",
    "detail": "Function (public : TArray<TSharedPtr<FFindInBlueprintsResult>> Children ; TWeakPtr<FFindInBlueprintsResult> Parent ; FText DisplayText ; FString CommentText ; } ; typedef TSharedPtr<FFindInBlueprintsResult> FSearchResult ; struct FStreamSearchOptions { enum ESearchQueryFilter ImaginaryDataFilter ; EFiBVersion MinimiumVersionRequirement ;)",
    "insertText": "FStreamSearchOptions() :ImaginaryDataFilter(ESearchQueryFilter::AllFilter) ,MinimiumVersionRequirement(EFiBVersion::FIB_VER_LATEST)"
  },
  {
    "label": "FStreamSearch()",
    "kind": "Method",
    "detail": "Function (} } ; class FStreamSearch : public FRunnable { public :)",
    "insertText": "FStreamSearch(const FString& InSearchValue, const FStreamSearchOptions& InSearchOptions = FStreamSearchOptions())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "WasStopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasStopped()"
  },
  {
    "label": "GetFilteredItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredItems(TArray<TSharedPtr<class FFindInBlueprintsResult>>& OutItemsFound)"
  },
  {
    "label": "GetPercentComplete()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPercentComplete()"
  },
  {
    "label": "GetOutOfDateCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOutOfDateCount()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : TUniquePtr<FRunnableThread> Thread ; TArray<TSharedPtr<class FFindInBlueprintsResult>> ItemsFound ; FString SearchValue ; FStreamSearchOptions SearchOptions ; FCriticalSection SearchCriticalSection ; TArray<FImaginaryFiBDataSharedPtr> FilteredImaginaryResults ; int32 BlueprintCountBelowVersion ; bool bThreadCompleted ; private : int32 SearchId ; FThreadSafeCounter StopTaskCounter ; } ; class FFindInBlueprintSearchManager : public FTickableEditorObject { public : FFindInBlueprintSearchManager* Instance ; FFindInBlueprintSearchManager&)",
    "insertText": "Get()"
  },
  {
    "label": "FFindInBlueprintSearchManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFindInBlueprintSearchManager()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "ApplySearchDataToDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySearchDataToDatabase(FSearchData InSearchData, bool bAllowNewEntry = false)"
  },
  {
    "label": "GetSearchDataForAssetPath()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "GetSearchDataForAssetPath(const FSoftObjectPath& InAssetPath)"
  },
  {
    "label": "AddOrUpdateBlueprintSearchMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateBlueprintSearchMetadata(UBlueprint* InBlueprint, EAddOrUpdateBlueprintSearchMetadataFlags InFlags = EAddOrUpdateBlueprintSearchMetadataFlags::None, EFiBVersion InVersion = EFiBVersion::FIB_VER_NONE)"
  },
  {
    "label": "BeginSearchQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearchQuery(const class FStreamSearch* InSearchOriginator)"
  },
  {
    "label": "ContinueSearchQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinueSearchQuery(const class FStreamSearch* InSearchOriginator, FSearchData& OutSearchData)"
  },
  {
    "label": "EnsureSearchQueryEnds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureSearchQueryEnds(const class FStreamSearch* InSearchOriginator)"
  },
  {
    "label": "GetPercentComplete()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPercentComplete(const class FStreamSearch* InSearchOriginator)"
  },
  {
    "label": "QuerySingleBlueprint()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "QuerySingleBlueprint(UBlueprint* InBlueprint, bool bInRebuildSearchData)"
  },
  {
    "label": "ProcessEncodedValueForUnloadedBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEncodedValueForUnloadedBlueprint(FSearchData& SearchData)"
  },
  {
    "label": "GetNumberUnindexedAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberUnindexedAssets()"
  },
  {
    "label": "GetNumberUncachedAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberUncachedAssets()"
  },
  {
    "label": "CacheAllAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheAllAssets(TWeakPtr< class SFindInBlueprints > InSourceWidget, const FFindInBlueprintCachingOptions& InCachingOptions)"
  },
  {
    "label": "ExportOutdatedAssetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportOutdatedAssetList()"
  },
  {
    "label": "OnCacheAllUnindexedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCacheAllUnindexedAssets(bool bInSourceControlActive, bool bInCheckoutAndSave)"
  },
  {
    "label": "CancelCacheAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCacheAll(SFindInBlueprints* InFindInBlueprintWidget)"
  },
  {
    "label": "GetCurrentCacheIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentCacheIndex()"
  },
  {
    "label": "GetCurrentCacheBlueprintPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetCurrentCacheBlueprintPath()"
  },
  {
    "label": "GetCacheProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCacheProgress()"
  },
  {
    "label": "GetFailedToCachePathList()",
    "kind": "Method",
    "detail": "Function (TSet<FSoftObjectPath>)",
    "insertText": "GetFailedToCachePathList()"
  },
  {
    "label": "HasCachingFailed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCachingFailed()"
  },
  {
    "label": "StartedCachingBlueprints()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "StartedCachingBlueprints(EFiBCacheOpType InCacheOpType, EFiBCacheOpFlags InCacheOpFlags)"
  },
  {
    "label": "FinishedCachingBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedCachingBlueprints(EFiBCacheOpType InCacheOpType, EFiBCacheOpFlags InCacheOpFlags, int32 InNumberCached, TSet<FSoftObjectPath>& InFailedToCacheList)"
  },
  {
    "label": "IsCacheInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheInProgress()"
  },
  {
    "label": "IsUnindexedCacheInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnindexedCacheInProgress()"
  },
  {
    "label": "IsAssetDiscoveryInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetDiscoveryInProgress()"
  },
  {
    "label": "IsAsyncSearchQueryInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncSearchQueryInProgress()"
  },
  {
    "label": "GetSourceCachingWidget()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SFindInBlueprints>)",
    "insertText": "GetSourceCachingWidget()"
  },
  {
    "label": "IsGatheringDataEnabled()",
    "kind": "Method",
    "detail": "Function (bEnableGatheringData = bInEnableGatheringData ; } bool)",
    "insertText": "IsGatheringDataEnabled()"
  },
  {
    "label": "EnableGlobalFindResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGlobalFindResults(bool bEnable)"
  },
  {
    "label": "CloseOrphanedGlobalFindResultsTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseOrphanedGlobalFindResultsTabs(TSharedPtr<class FTabManager> TabManager)"
  },
  {
    "label": "IsGlobalFindResultsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlobalFindResultsOpen()"
  },
  {
    "label": "GlobalFindResultsClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GlobalFindResultsClosed(const TSharedRef<SFindInBlueprints>& FindResults)"
  },
  {
    "label": "DumpCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpCache(FArchive& Ar)"
  },
  {
    "label": "ConvertHexStringToFText()",
    "kind": "Method",
    "detail": "Function (public : FText)",
    "insertText": "ConvertHexStringToFText(FString InHexString)"
  },
  {
    "label": "ConvertFTextToHexString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertFTextToHexString(FText InValue)"
  },
  {
    "label": "ConvertJsonStringToObject()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FJsonObject>)",
    "insertText": "ConvertJsonStringToObject(FSearchDataVersionInfo InVersionInfo, const FString& InJsonString, TMap<int32, FText>& OutFTextLookupTable)"
  },
  {
    "label": "GenerateSearchIndexForDebugging()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateSearchIndexForDebugging(UBlueprint* InBlueprint)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "PauseFindInBlueprintSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseFindInBlueprintSearch()"
  },
  {
    "label": "UnpauseFindInBlueprintSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpauseFindInBlueprintSearch()"
  },
  {
    "label": "OnAssetAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetAdded(const struct FAssetData& InAssetData)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRemoved(const struct FAssetData& InAssetData)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRenamed(const struct FAssetData& InAssetData, const FString& InOldName)"
  },
  {
    "label": "OnAssetRegistryFilesLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRegistryFilesLoaded()"
  },
  {
    "label": "OnAssetLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetLoaded(class UObject* InAsset)"
  },
  {
    "label": "OnBlueprintUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintUnloaded(class UBlueprint* InBlueprint)"
  },
  {
    "label": "OnReloadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReloadComplete(EReloadCompleteReason Reason)"
  },
  {
    "label": "GetSearchDataForIndex()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "GetSearchDataForIndex(int32 CacheIndex)"
  },
  {
    "label": "CleanCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanCache()"
  },
  {
    "label": "BuildCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCache()"
  },
  {
    "label": "AddSearchDataToDatabase()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSearchDataToDatabase(FSearchData InSearchData)"
  },
  {
    "label": "RemoveBlueprintByPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBlueprintByPath(const FSoftObjectPath& InPath)"
  },
  {
    "label": "AddUnloadedBlueprintSearchMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUnloadedBlueprintSearchMetadata(const FAssetData& InAssetData)"
  },
  {
    "label": "ExtractUnloadedFiBData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractUnloadedFiBData(const FAssetData& InAssetData, FString* InFiBData, FName InKeyForFiBData, EFiBVersion InFiBDataVersion)"
  },
  {
    "label": "GetGlobalFindResultsTabLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGlobalFindResultsTabLabel(int32 TabIdx)"
  },
  {
    "label": "SpawnGlobalFindResultsTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnGlobalFindResultsTab(const FSpawnTabArgs& SpawnTabArgs, int32 TabIdx)"
  },
  {
    "label": "OpenGlobalFindResultsTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SFindInBlueprints>)",
    "insertText": "OpenGlobalFindResultsTab()"
  },
  {
    "label": "FActiveSearchQuery()",
    "kind": "Method",
    "detail": "Function (protected : struct FActiveSearchQuery { TAtomic<int32> NextIndex ; TAtomic<int32> SearchCount ; TQueue<FSoftObjectPath> DeferredAssetPaths ;)",
    "insertText": "FActiveSearchQuery() :NextIndex(0) ,SearchCount(0)"
  },
  {
    "label": "FindSearchQuery()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSharedPtr<FActiveSearchQuery,ESPMode::ThreadSafe> FActiveSearchQueryPtr ; FActiveSearchQueryPtr)",
    "insertText": "FindSearchQuery(const class FStreamSearch* InSearchOriginator)"
  },
  {
    "label": "GetNextSearchDataForQuery()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "GetNextSearchDataForQuery(const FStreamSearch* InSearchOriginator, FActiveSearchQueryPtr InSearchQueryPtr, bool bCheckDeferredList)"
  },
  {
    "label": "BlockSearchQueryIfPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockSearchQueryIfPaused()"
  },
  {
    "label": "FDisableGatheringDataOnScope()",
    "kind": "Method",
    "detail": "Function (private : TMap<FSoftObjectPath,int32> SearchMap ; TArray<FSearchData> SearchArray ; FThreadSafeCounter ActiveSearchCounter ; TMap<const class FStreamSearch*,FActiveSearchQueryPtr> ActiveSearchQueries ; FCriticalSection SafeQueryModifyCriticalSection ; FCriticalSection PauseThreadsCriticalSection ; FCriticalSection SafeModifyCacheCriticalSection ; class FAssetRegistryModule* AssetRegistryModule ; TWeakPtr<SFindInBlueprints> SourceCachingWidget ; TSet<FSoftObjectPath> PendingAssets ; TSet<FSoftObjectPath> UnindexedAssets ; TSet<FSoftObjectPath> FailedToCachePaths ; TSet<FSoftObjectPath> AssetsToIndexOnFirstSearch ; TUniquePtr<class FCacheAllBlueprintsTickableObject> CachingObject ; EFiBCacheOpType CurrentCacheOpType ; TMap<FTopLevelAssetPath,TWeakObjectPtr<const UClass>> CachedAssetClasses ; FName GlobalFindResultsTabIDs [ MAX_GLOBAL_FIND_RESULTS ] ; TArray<TWeakPtr<SFindInBlueprints>> GlobalFindResults ; TSharedPtr<class FWorkspaceItem> GlobalFindResultsMenuItem ; int32 AsyncTaskBatchSize ; TAtomic<bool> bIsPausing ; TAtomic<bool> bHasFirstSearchOccurred ; bool bEnableGatheringData ; bool bDisableDeferredIndexing ; bool bDisableThreadedIndexing ; bool bEnableCSVStatsProfiling ; bool bEnableDeveloperMenuTools ; bool bDisableSearchResultTemplates ; bool bDisableImmediateAssetDiscovery ; } ; struct FDisableGatheringDataOnScope { bool bOriginallyEnabled ;)",
    "insertText": "FDisableGatheringDataOnScope() : bOriginallyEnabled(FFindInBlueprintSearchManager::Get().IsGatheringDataEnabled())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().EnableGatheringData(false)"
  },
  {
    "label": "FDisableGatheringDataOnScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDisableGatheringDataOnScope()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().EnableGatheringData(bOriginallyEnabled)"
  }
]