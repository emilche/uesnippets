[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FTopLevelAssetPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelAssetPath"
  },
  {
    "label": "FFindInBlueprintsResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsResult"
  },
  {
    "label": "FImaginaryBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImaginaryBlueprint"
  },
  {
    "label": "FImaginaryFiBData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImaginaryFiBData"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "SFindInBlueprints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFindInBlueprints"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tag"
  },
  {
    "label": "EFiBVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFiBVersion"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "FSearchDataVersionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchDataVersionInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSearchData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchData"
  },
  {
    "label": "ESearchQueryFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESearchQueryFilter"
  },
  {
    "label": "FSearchTagDataPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchTagDataPair"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "ESearchQueryFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESearchQueryFilter"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FFindInBlueprintsResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsResult"
  },
  {
    "label": "FFindInBlueprintsResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFindInBlueprintsResult"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "SFindInBlueprints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFindInBlueprints"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "FActiveSearchQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSearchQuery"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "FStreamSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamSearch"
  },
  {
    "label": "FAssetRegistryModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryModule"
  },
  {
    "label": "FCacheAllBlueprintsTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheAllBlueprintsTickableObject"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "FWorkspaceItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkspaceItem"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "EnumHasAllFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EnumHasAllFlags(StateFlags, ESearchDataStateFlags::IsIndexed)"
  },
  {
    "label": "EnumHasAllFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EnumHasAllFlags(StateFlags, ESearchDataStateFlags::WasRemoved)"
  },
  {
    "label": "FFindInBlueprintsResult()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FFindInBlueprintsResult(const FText& InDisplayText)"
  },
  {
    "label": "OnClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "GetFilteredItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredItems(TArray<TSharedPtr<class FFindInBlueprintsResult>>& OutItemsFound)"
  },
  {
    "label": "GetFilteredImaginaryResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredImaginaryResults(TArray<FImaginaryFiBDataSharedPtr>& OutFilteredImaginaryResults)"
  },
  {
    "label": "ApplySearchDataToDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySearchDataToDatabase(FSearchData InSearchData, bool bAllowNewEntry = false)"
  },
  {
    "label": "GetSearchDataForAssetPath()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "GetSearchDataForAssetPath(const FSoftObjectPath& InAssetPath)"
  },
  {
    "label": "AddOrUpdateBlueprintSearchMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateBlueprintSearchMetadata(UBlueprint* InBlueprint, EAddOrUpdateBlueprintSearchMetadataFlags InFlags = EAddOrUpdateBlueprintSearchMetadataFlags::None, EFiBVersion InVersion = EFiBVersion::FIB_VER_NONE)"
  },
  {
    "label": "BeginSearchQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearchQuery(const class FStreamSearch* InSearchOriginator)"
  },
  {
    "label": "ContinueSearchQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContinueSearchQuery(const class FStreamSearch* InSearchOriginator, FSearchData& OutSearchData)"
  },
  {
    "label": "EnsureSearchQueryEnds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureSearchQueryEnds(const class FStreamSearch* InSearchOriginator)"
  },
  {
    "label": "QuerySingleBlueprint()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "QuerySingleBlueprint(UBlueprint* InBlueprint, bool bInRebuildSearchData)"
  },
  {
    "label": "ProcessEncodedValueForUnloadedBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEncodedValueForUnloadedBlueprint(FSearchData& SearchData)"
  },
  {
    "label": "CacheAllAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheAllAssets(TWeakPtr< class SFindInBlueprints > InSourceWidget, const FFindInBlueprintCachingOptions& InCachingOptions)"
  },
  {
    "label": "ExportOutdatedAssetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportOutdatedAssetList()"
  },
  {
    "label": "OnCacheAllUnindexedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCacheAllUnindexedAssets(bool bInSourceControlActive, bool bInCheckoutAndSave)"
  },
  {
    "label": "CancelCacheAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCacheAll(SFindInBlueprints* InFindInBlueprintWidget)"
  },
  {
    "label": "StartedCachingBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartedCachingBlueprints(EFiBCacheOpType InCacheOpType, EFiBCacheOpFlags InCacheOpFlags)"
  },
  {
    "label": "FinishedCachingBlueprints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedCachingBlueprints(EFiBCacheOpType InCacheOpType, EFiBCacheOpFlags InCacheOpFlags, int32 InNumberCached, TSet<FSoftObjectPath>& InFailedToCacheList)"
  },
  {
    "label": "GetGlobalFindResults()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SFindInBlueprints>)",
    "insertText": "GetGlobalFindResults()"
  },
  {
    "label": "EnableGlobalFindResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGlobalFindResults(bool bEnable)"
  },
  {
    "label": "CloseOrphanedGlobalFindResultsTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseOrphanedGlobalFindResultsTabs(TSharedPtr<class FTabManager> TabManager)"
  },
  {
    "label": "GlobalFindResultsClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalFindResultsClosed(const TSharedRef<SFindInBlueprints>& FindResults)"
  },
  {
    "label": "DumpCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpCache(FArchive& Ar)"
  },
  {
    "label": "ConvertHexStringToFText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ConvertHexStringToFText(FString InHexString)"
  },
  {
    "label": "ConvertFTextToHexString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertFTextToHexString(FText InValue)"
  },
  {
    "label": "GenerateSearchIndexForDebugging()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateSearchIndexForDebugging(UBlueprint* InBlueprint)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "PauseFindInBlueprintSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseFindInBlueprintSearch()"
  },
  {
    "label": "UnpauseFindInBlueprintSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpauseFindInBlueprintSearch()"
  },
  {
    "label": "OnAssetAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetAdded(const struct FAssetData& InAssetData)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRemoved(const struct FAssetData& InAssetData)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRenamed(const struct FAssetData& InAssetData, const FString& InOldName)"
  },
  {
    "label": "OnAssetRegistryFilesLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRegistryFilesLoaded()"
  },
  {
    "label": "OnAssetLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetLoaded(class UObject* InAsset)"
  },
  {
    "label": "OnBlueprintUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintUnloaded(class UBlueprint* InBlueprint)"
  },
  {
    "label": "OnReloadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReloadComplete(EReloadCompleteReason Reason)"
  },
  {
    "label": "GetSearchDataForIndex()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "GetSearchDataForIndex(int32 CacheIndex)"
  },
  {
    "label": "CleanCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanCache()"
  },
  {
    "label": "BuildCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCache()"
  },
  {
    "label": "AddSearchDataToDatabase()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSearchDataToDatabase(FSearchData InSearchData)"
  },
  {
    "label": "RemoveBlueprintByPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBlueprintByPath(const FSoftObjectPath& InPath)"
  },
  {
    "label": "AddUnloadedBlueprintSearchMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUnloadedBlueprintSearchMetadata(const FAssetData& InAssetData)"
  },
  {
    "label": "ExtractUnloadedFiBData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractUnloadedFiBData(const FAssetData& InAssetData, FString* InFiBData, FName InKeyForFiBData, EFiBVersion InFiBDataVersion)"
  },
  {
    "label": "GetGlobalFindResultsTabLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGlobalFindResultsTabLabel(int32 TabIdx)"
  },
  {
    "label": "SpawnGlobalFindResultsTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnGlobalFindResultsTab(const FSpawnTabArgs& SpawnTabArgs, int32 TabIdx)"
  },
  {
    "label": "OpenGlobalFindResultsTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SFindInBlueprints>)",
    "insertText": "OpenGlobalFindResultsTab()"
  },
  {
    "label": "GetNextSearchDataForQuery()",
    "kind": "Method",
    "detail": "Function (FSearchData)",
    "insertText": "GetNextSearchDataForQuery(const FStreamSearch* InSearchOriginator, FActiveSearchQueryPtr InSearchQueryPtr, bool bCheckDeferredList)"
  },
  {
    "label": "BlockSearchQueryIfPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockSearchQueryIfPaused()"
  }
]