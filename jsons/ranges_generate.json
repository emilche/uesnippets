[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Func"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_GENERATE_H # define _LIBCPP___ALGORITHM_RANGES_GENERATE_H # include<__concepts / constructible . h> # include<__concepts / invocable . h> # include<__config> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__generate_fn_impl()",
    "kind": "Method",
    "detail": "Function (namespace __generate { struct __fn { template<class _OutIter,class _Sent,class _Func> _LIBCPP_HIDE_FROM_ABI _OutIter)",
    "insertText": "__generate_fn_impl(_OutIter __first, _Sent __last, _Func& __gen)"
  },
  {
    "label": "__gen()",
    "kind": "Method",
    "detail": "Function (* __first =)",
    "insertText": "__gen()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return __first ; } template<input_or_output_iterator _OutIter,sentinel_for<_OutIter> _Sent,copy_constructible _Func> requires invocable<_Func&>&& indirectly_writable<_OutIter,invoke_result_t<_Func&>> _LIBCPP_HIDE_FROM_ABI _OutIter)",
    "insertText": "operator()(_OutIter __first, _Sent __last, _Func __gen)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Range,copy_constructible _Func> requires invocable<_Func&>&& output_range<_Range,invoke_result_t<_Func&>> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Range>)",
    "insertText": "operator()(_Range&& __range, _Func __gen)"
  }
]