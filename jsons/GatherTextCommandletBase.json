[
  {
    "label": "FGatherTextDelegates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatherTextDelegates"
  },
  {
    "label": "FFuzzyPathMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFuzzyPathMatcher"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFuzzyPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFuzzyPath"
  },
  {
    "label": "UGatherTextCommandletBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGatherTextCommandletBase"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Commandlets / Commandlet . h \" # include \" LocTextHelper . h \" # include \" LocalizationSourceControlUtil . h \" # include \" LocalizedAssetUtil . h \" # include \" GatherTextCommandletBase . generated . h \" struct FGatherTextDelegates {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FGetAdditionalGatherPaths, const FString& , TArray<FString>& , TArray<FString>&)"
  },
  {
    "label": "FFuzzyPathMatcher()",
    "kind": "Method",
    "detail": "Function (FGetAdditionalGatherPaths GetAdditionalGatherPaths ; } ; class FFuzzyPathMatcher { public : enum class EPathMatch { Included,Excluded,NoMatch,} ; public :)",
    "insertText": "FFuzzyPathMatcher(const TArray<FString>& InIncludePathFilters, const TArray<FString>& InExcludePathFilters)"
  },
  {
    "label": "TestPath()",
    "kind": "Method",
    "detail": "Function (EPathMatch)",
    "insertText": "TestPath(const FString& InPathToTest)"
  },
  {
    "label": "FFuzzyPath()",
    "kind": "Method",
    "detail": "Function (private : enum class EPathType : uint8 { Include,Exclude,} ; enum class EPathTestPolicy : uint8 { MatchesWildcard,StartsWith } ; struct FFuzzyPath {)",
    "insertText": "FFuzzyPath(FString InPathFilter, const EPathType InPathType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FString PathFilter ; EPathType PathType ; EPathTestPolicy PathTestPolicy ; } ; TArray<FFuzzyPath> FuzzyPaths ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UNREALED_API virtual void Initialize( const TSharedRef< FLocTextHelper >& InGatherManifestHelper, const TSharedPtr< FLocalizationSCC >& InSourceControlInfo)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetBoolFromConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoolFromConfig(const TCHAR* Section, const TCHAR* Key, bool& OutValue, const FString& Filename)"
  },
  {
    "label": "GetStringFromConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStringFromConfig(const TCHAR* Section, const TCHAR* Key, FString& OutValue, const FString& Filename)"
  },
  {
    "label": "GetPathFromConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPathFromConfig(const TCHAR* Section, const TCHAR* Key, FString& OutValue, const FString& Filename)"
  },
  {
    "label": "GetStringArrayFromConfig()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStringArrayFromConfig(const TCHAR* Section, const TCHAR* Key, TArray<FString>& OutArr, const FString& Filename)"
  },
  {
    "label": "GetPathArrayFromConfig()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPathArrayFromConfig(const TCHAR* Section, const TCHAR* Key, TArray<FString>& OutArr, const FString& Filename)"
  },
  {
    "label": "IsSplitPlatformName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplitPlatformName(const FName InPlatformName)"
  },
  {
    "label": "ShouldSplitPlatformForPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSplitPlatformForPath(const FString& InPath, FName* OutPlatformName = nullptr)"
  },
  {
    "label": "GetSplitPlatformNameFromPath()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSplitPlatformNameFromPath(const FString& InPath)"
  },
  {
    "label": "GetProjectBasePath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetProjectBasePath()"
  },
  {
    "label": "ShouldRunInPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunInPreview(const TArray<FString>& Switches, const TMap<FString, FString>& ParamVals)"
  },
  {
    "label": "GetSplitPlatformNameFromPath_Static()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSplitPlatformNameFromPath_Static(const FString& InPath, const TMap<FName, FString>& InSplitPlatforms)"
  },
  {
    "label": "CreateCustomEngine()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLocTextHelper> GatherManifestHelper ; TSharedPtr<FLocalizationSCC> SourceControlInfo ; TMap<FName,FString> SplitPlatforms ; const TCHAR* ConfigParam ; const TCHAR* EnableSourceControlSwitch ; const TCHAR* DisableSubmitSwitch ; const TCHAR* PreviewSwitch ; const TCHAR* GatherTypeParam ; const TCHAR* SkipNestedMacroPrepassSwitch ; private : void)",
    "insertText": "CreateCustomEngine(const FString& Params)"
  }
]