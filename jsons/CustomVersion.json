[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCustomVersionContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomVersionContainer"
  },
  {
    "label": "FCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomVersion"
  },
  {
    "label": "ECustomVersionSerializationFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ECustomVersionSerializationFormat"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStaticCustomVersionRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticCustomVersionRegistry"
  },
  {
    "label": "FCustomVersionDifference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomVersionDifference"
  },
  {
    "label": "FCurrentCustomVersions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurrentCustomVersions"
  },
  {
    "label": "FCustomVersionRegistration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomVersionRegistration"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / Crc . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" class FArchive ; class FCustomVersionContainer ; struct FCustomVersion ; struct ECustomVersionSerializationFormat { enum Type { Unknown,Guids,Enums,Optimized,CustomVersion_Automatic_Plus_One,Latest = CustomVersion_Automatic_Plus_One - 1 } ; } ; typedef TArray<FCustomVersion> FCustomVersionArray ; typedef)",
    "insertText": "bool(*CustomVersionValidatorFunc)(const FCustomVersion& Version, const FCustomVersionArray& AllVersions, const TCHAR* DebugContext)"
  },
  {
    "label": "FCustomVersion()",
    "kind": "Method",
    "detail": "Function (struct FCustomVersion { class FCustomVersionContainer ; FGuid Key ; int32 Version ; int32 ReferenceCount ; CustomVersionValidatorFunc Validator ;)",
    "insertText": "FCustomVersion() : Validator(nullptr)"
  },
  {
    "label": "FCustomVersion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomVersion(FGuid InKey, int32 InVersion, FName InFriendlyName, CustomVersionValidatorFunc InValidatorFunc = nullptr) : Key (InKey) , Version (InVersion) , ReferenceCount(1) , Validator (InValidatorFunc) , FriendlyName (InFriendlyName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FGuid InKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FCustomVersion& Version)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : FName FriendlyName ; } ; class FCustomVersionRegistration ; enum class ESetCustomVersionFlags : uint8 { None,SkipUpdateExistingVersion = 0 x01,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESetCustomVersionFlags)"
  },
  {
    "label": "GetAllVersions()",
    "kind": "Method",
    "detail": "Function (struct FStaticCustomVersionRegistry ; public : const FCustomVersionArray&)",
    "insertText": "GetAllVersions()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetFriendlyName(FGuid CustomKey)"
  },
  {
    "label": "SetVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVersion(FGuid CustomKey, int32 Version, FName FriendlyName)"
  },
  {
    "label": "SetVersionUsingRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVersionUsingRegistry(FGuid CustomKey, ESetCustomVersionFlags Options = ESetCustomVersionFlags::None)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, ECustomVersionSerializationFormat::Type Format = ECustomVersionSerializationFormat::Latest)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot, ECustomVersionSerializationFormat::Type Format = ECustomVersionSerializationFormat::Latest)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "SortByKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortByKey()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const FString& Indent)"
  },
  {
    "label": "GetAll()",
    "kind": "Method",
    "detail": "Function (private : FCustomVersionArray Versions ; } ; enum class ECustomVersionDifference { Missing,Newer,Older,Invalid } ; struct FCustomVersionDifference { ECustomVersionDifference Type ; const FCustomVersion* Version ; } ; class FCurrentCustomVersions { public : FCustomVersionContainer)",
    "insertText": "GetAll()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TOptional<FCustomVersion>)",
    "insertText": "Get(const FGuid& Guid)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (TArray<FCustomVersionDifference>)",
    "insertText": "Compare(const FCustomVersionArray& CompareVersions, const TCHAR* DebugContext)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (private : class FCustomVersionRegistration ; void)",
    "insertText": "Register(const FGuid& Key, int32 Version, const TCHAR* FriendlyName, CustomVersionValidatorFunc ValidatorFunc)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FGuid& Key)"
  },
  {
    "label": "FCustomVersionRegistration()",
    "kind": "Method",
    "detail": "Function (} ; class FCustomVersionRegistration : FNoncopyable { public : template<int N>)",
    "insertText": "FCustomVersionRegistration(FGuid InKey, int32 Version, const TCHAR(&InFriendlyName)[N], CustomVersionValidatorFunc InValidatorFunc = nullptr) : Key(InKey)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(InKey, Version, InFriendlyName, InValidatorFunc)"
  },
  {
    "label": "FCustomVersionRegistration()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCustomVersionRegistration()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(Key)"
  }
]