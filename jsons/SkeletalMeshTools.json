[
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FSoftSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftSkinVertex"
  },
  {
    "label": "FSkelMeshSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshSection"
  },
  {
    "label": "FBoneVertInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneVertInfo"
  },
  {
    "label": "FSkeletalMeshVertIndexAndZ",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshVertIndexAndZ"
  },
  {
    "label": "FSoftSkinBuildVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftSkinBuildVertex"
  },
  {
    "label": "FSkinnedMeshChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinnedMeshChunk"
  },
  {
    "label": "FSkinnedModelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkinnedModelData"
  },
  {
    "label": "SkeletalMesh_UVsEqual()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoneIndices . h \" # include \" Components . h \" # include \" Containers / IndirectArray . h \" # include \" CoreMinimal . h \" # include \" GPUSkinPublicDefs . h \" # include \" MeshBuild . h \" # include \" Rendering / SkeletalMeshLODImporterData . h \" class USkeletalMesh ; struct FSoftSkinVertex ; struct FSkelMeshSection ; struct FBoneVertInfo ; struct FSkeletalMeshVertIndexAndZ { int32 Index ; float Z ; } ; struct FSoftSkinBuildVertex { FVector3f Position ; FVector3f TangentX,TangentY,TangentZ ; FVector2f UVs [ MAX_TEXCOORDS ] ; FColor Color ; FBoneIndexType InfluenceBones [ MAX_TOTAL_INFLUENCES ] ; uint16 InfluenceWeights [ MAX_TOTAL_INFLUENCES ] ; uint32 PointWedgeIdx ; } ; struct FSkinnedMeshChunk { int32 MaterialIndex ; int32 OriginalSectionIndex ; TArray<FSoftSkinBuildVertex> Vertices ; TArray<uint32> Indices ; TArray<FBoneIndexType> BoneMap ; int32 ParentChunkSectionIndex ; } ; struct FSkinnedModelData { TArray<FSoftSkinVertex> Vertices ; TArray<uint32> Indices ; TArray<uint32> RawPointIndices ; TArray<int32> MeshToImportVertexMap ; TArray<FSkelMeshSection> Sections ; TIndirectArray<TArray<FBoneIndexType>> BoneMaps ; int32 NumTexCoords ; } ; namespace SkeletalMeshTools { bool)",
    "insertText": "SkeletalMesh_UVsEqual(const SkeletalMeshImportData::FMeshWedge& V1, const SkeletalMeshImportData::FMeshWedge& V2, const FOverlappingThresholds& OverlappingThresholds, const int32 UVIndex = 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FVector2f& UV1 = V1 . UVs [ UVIndex ] ; const FVector2f& UV2 = V2 . UVs [ UVIndex ] ;)",
    "insertText": "if(FMath::Abs(UV1.X - UV2.X) > OverlappingThresholds.ThresholdUV)"
  },
  {
    "label": "BuildSkeletalMeshChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSkeletalMeshChunks(const TArray<SkeletalMeshImportData::FMeshFace>& Faces, const TArray<FSoftSkinBuildVertex>& RawVertices, TArray<FSkeletalMeshVertIndexAndZ>& RawVertIndexAndZ, const FOverlappingThresholds &OverlappingThresholds, TArray<FSkinnedMeshChunk*>& OutChunks, bool& bOutTooManyVerts)"
  },
  {
    "label": "ChunkSkinnedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChunkSkinnedVertices(TArray<FSkinnedMeshChunk*>& Chunks, TMap<uint32, TArray<FBoneIndexType>>& AlternateBoneIDs, int32 MaxBonesPerChunk)"
  }
]