[
  {
    "label": "CordRep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRep"
  },
  {
    "label": "CordRepConcat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepConcat"
  },
  {
    "label": "CordRepExternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepExternal"
  },
  {
    "label": "CordRepFlat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepFlat"
  },
  {
    "label": "CordRepSubstring",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepSubstring"
  },
  {
    "label": "CordRepCrc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepCrc"
  },
  {
    "label": "CordRepRing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepRing"
  },
  {
    "label": "CordRepBtree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepBtree"
  },
  {
    "label": "CordzInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordzInfo"
  },
  {
    "label": "CordFeatureDefaults",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CordFeatureDefaults"
  },
  {
    "label": "Constants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Constants"
  },
  {
    "label": "RefcountAndFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefcountAndFlags"
  },
  {
    "label": "Immortal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Immortal"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "CordRepKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CordRepKind"
  },
  {
    "label": "ExtractResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtractResult"
  },
  {
    "label": "Rank1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rank1"
  },
  {
    "label": "Rank0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rank0"
  },
  {
    "label": "CordRepExternalImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepExternalImpl"
  },
  {
    "label": "ConstInitExternalStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstInitExternalStorage"
  },
  {
    "label": "InlineData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineData"
  },
  {
    "label": "DefaultInitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DefaultInitType"
  },
  {
    "label": "AsTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AsTree"
  },
  {
    "label": "enable_cord_ring_buffer()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_INTERNAL_H_ # define ABSL_STRINGS_INTERNAL_CORD_INTERNAL_H_ # include<atomic> # include<cassert> # include<cstddef> # include<cstdint> # include<type_traits> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / internal / endian . h \" # include \" absl / base / internal / invoke . h \" # include \" absl / base / optimization . h \" # include \" absl / container / internal / compressed_tuple . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { struct CordRep ; struct CordRepConcat ; struct CordRepExternal ; struct CordRepFlat ; struct CordRepSubstring ; struct CordRepCrc ; class CordRepRing ; class CordRepBtree ; class CordzInfo ; enum CordFeatureDefaults { kCordEnableRingBufferDefault = false,kCordShallowSubcordsDefault = false } ; std::atomic<bool> cord_ring_buffer_enabled ; std::atomic<bool> shallow_subcords_enabled ; std::atomic<bool> cord_btree_exhaustive_validation ; void)",
    "insertText": "enable_cord_ring_buffer(bool enable)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (cord_ring_buffer_enabled .)",
    "insertText": "store(enable, std::memory_order_relaxed)"
  },
  {
    "label": "enable_shallow_subcords()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "enable_shallow_subcords(bool enable)"
  },
  {
    "label": "LogFatalNodeType()",
    "kind": "Method",
    "detail": "Function (} enum Constants { kInlinedVectorSize = 4 7,kMaxBytesToCopy = 5 1 1 } ; ABSL_ATTRIBUTE_NORETURN void)",
    "insertText": "LogFatalNodeType(CordRep* rep)"
  },
  {
    "label": "RefcountAndFlags()",
    "kind": "Method",
    "detail": "Function (class RefcountAndFlags { public :)",
    "insertText": "RefcountAndFlags()"
  },
  {
    "label": "RefcountAndFlags()",
    "kind": "Method",
    "detail": "Function (kRefIncrement } { } struct Immortal { } ;)",
    "insertText": "RefcountAndFlags(Immortal) : count_(kImmortalFlag)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Increment()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (count_ .)",
    "insertText": "fetch_add(kRefIncrement, std::memory_order_relaxed)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Decrement()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (int32_t refcount = count_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(refcount > 0 || refcount & kImmortalFlag)"
  },
  {
    "label": "DecrementExpectHighRefcount()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DecrementExpectHighRefcount()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (int32_t refcount = count_ .)",
    "insertText": "fetch_sub(kRefIncrement, std::memory_order_acq_rel)"
  },
  {
    "label": "IsOne()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOne()"
  },
  {
    "label": "IsImmortal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImmortal()"
  },
  {
    "label": "kRefIncrement()",
    "kind": "Method",
    "detail": "Function (} private : enum Flags { kNumFlags = 2,kImmortalFlag = 0 x1,kReservedFlag = 0 x2,)",
    "insertText": "kRefIncrement(1 << kNumFlags)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (std::atomic<int32_t> count_ ; } ; enum CordRepKind { UNUSED_0 = 0,SUBSTRING = 1,CRC = 2,BTREE = 3,RING = 4,EXTERNAL = 5,FLAT = 6,MAX_FLAT_TAG = 2 4 8 } ;)",
    "insertText": "static_assert(RING == BTREE + 1, \"BTREE and RING not consecutive\")"
  },
  {
    "label": "CordRep()",
    "kind": "Method",
    "detail": "Function (struct CordRep { struct ExtractResult { CordRep* tree ; CordRep* extracted ; } ;)",
    "insertText": "CordRep()"
  },
  {
    "label": "CordRep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordRep(RefcountAndFlags::Immortal immortal, size_t l) : length(l), refcount(immortal), tag(EXTERNAL)"
  },
  {
    "label": "IsRing()",
    "kind": "Method",
    "detail": "Function (} { } size_t length ; RefcountAndFlags refcount ; uint8_t tag ; uint8_t storage [ 3 ] ; bool)",
    "insertText": "IsRing()"
  },
  {
    "label": "ring()",
    "kind": "Method",
    "detail": "Function (const CordRepRing*)",
    "insertText": "ring()"
  },
  {
    "label": "substring()",
    "kind": "Method",
    "detail": "Function (CordRepSubstring*)",
    "insertText": "substring()"
  },
  {
    "label": "crc()",
    "kind": "Method",
    "detail": "Function (CordRepCrc*)",
    "insertText": "crc()"
  },
  {
    "label": "external()",
    "kind": "Method",
    "detail": "Function (CordRepExternal*)",
    "insertText": "external()"
  },
  {
    "label": "flat()",
    "kind": "Method",
    "detail": "Function (CordRepFlat*)",
    "insertText": "flat()"
  },
  {
    "label": "btree()",
    "kind": "Method",
    "detail": "Function (CordRepBtree*)",
    "insertText": "btree()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(CordRep* rep)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "Ref(CordRep* rep)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unref(CordRep* rep)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; struct CordRepSubstring : public CordRep { size_t start ; CordRep* child ; CordRepSubstring*)",
    "insertText": "Create(CordRep* child, size_t pos, size_t n)"
  },
  {
    "label": "Substring()",
    "kind": "Method",
    "detail": "Function (CordRep*)",
    "insertText": "Substring(CordRep* rep, size_t pos, size_t n)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using ExternalReleaserInvoker =)",
    "insertText": "void(*)(CordRepExternal*)"
  },
  {
    "label": "CordRepExternal()",
    "kind": "Method",
    "detail": "Function (struct CordRepExternal : public CordRep {)",
    "insertText": "CordRepExternal()"
  },
  {
    "label": "CordRepExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordRepExternal(absl::string_view str) : CordRep(RefcountAndFlags::Immortal{}, str.size()), base(str.data()), releaser_invoker(nullptr)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} const char* base ; ExternalReleaserInvoker releaser_invoker ; void)",
    "insertText": "Delete(CordRep* rep)"
  },
  {
    "label": "InvokeReleaser()",
    "kind": "Method",
    "detail": "Function (} ; struct Rank1 { } ; struct Rank0 : Rank1 { } ; template<Releaser,=::absl::base_internal::invoke_result_t<Releaser,absl::string_view>> void)",
    "insertText": "InvokeReleaser(Rank0, Releaser&& releaser, absl::string_view data)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (::absl::)",
    "insertText": "invoke(std::forward<Releaser>(releaser), data)"
  },
  {
    "label": "InvokeReleaser()",
    "kind": "Method",
    "detail": "Function (} template<Releaser,=::absl::base_internal::invoke_result_t<Releaser>> void)",
    "insertText": "InvokeReleaser(Rank1, Releaser&& releaser, absl::string_view)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (::absl::)",
    "insertText": "invoke(std::forward<Releaser>(releaser))"
  },
  {
    "label": "CordRepExternalImpl()",
    "kind": "Method",
    "detail": "Function (} template<Releaser> struct CordRepExternalImpl : public CordRepExternal,public::absl::container_internal::CompressedTuple<Releaser> { template<T>)",
    "insertText": "CordRepExternalImpl(T&& releaser, int) : CordRepExternalImpl::CompressedTuple(std::forward<T>(releaser))"
  },
  {
    "label": "CordRepExternalImpl()",
    "kind": "Method",
    "detail": "Function (this -> releaser_invoker =& Release ; } ~)",
    "insertText": "CordRepExternalImpl()"
  },
  {
    "label": "InvokeReleaser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeReleaser(Rank0{}, std::move(this->template get<0>()), absl::string_view(base, length))"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(CordRepExternal* rep)"
  },
  {
    "label": "CordRepExternalImpl()",
    "kind": "Method",
    "detail": "Function (delete static_cast<)",
    "insertText": "CordRepExternalImpl(rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(child != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n > 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n < child->length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pos < child->length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n <= child->length - pos)"
  },
  {
    "label": "LogFatalNodeType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogFatalNodeType(child)"
  },
  {
    "label": "CordRepSubstring()",
    "kind": "Method",
    "detail": "Function (} CordRepSubstring* rep = new)",
    "insertText": "CordRepSubstring()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(rep != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n != 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pos < rep->length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n <= rep->length - pos)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (substr -> length = n ; substr -> tag = SUBSTRING ; substr -> start = pos ; substr -> child =)",
    "insertText": "Ref(rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(rep != nullptr && rep->IsExternal())"
  },
  {
    "label": "CordRepExternal()",
    "kind": "Method",
    "detail": "Function (auto* rep_external = static_cast<)",
    "insertText": "CordRepExternal(rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(rep_external->releaser_invoker != nullptr)"
  },
  {
    "label": "releaser_invoker()",
    "kind": "Method",
    "detail": "Function (rep_external ->)",
    "insertText": "releaser_invoker(rep_external)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} template<Str> struct ConstInitExternalStorage { ABSL_CONST_INIT CordRepExternal value ; } ; template<Str> ABSL_CONST_INIT CordRepExternal ConstInitExternalStorage<Str)",
    "insertText": "value(Str::value)"
  },
  {
    "label": "GetOrNull()",
    "kind": "Method",
    "detail": "Function (enum { kMaxInline = 1 5,} ; char)",
    "insertText": "GetOrNull(absl::string_view data, size_t pos)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} using cordz_info_t = int64_t ;)",
    "insertText": "static_assert(sizeof(cordz_info_t) * 2 == kMaxInline + 1, \"\")"
  },
  {
    "label": "LittleEndianByte()",
    "kind": "Method",
    "detail": "Function (cordz_info_t)",
    "insertText": "LittleEndianByte(unsigned char value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ABSL_IS_BIG_ENDIAN) return static_cast<cordz_info_t>(value) << ((sizeof(cordz_info_t) - 1) * 8)"
  },
  {
    "label": "LittleEndianByte()",
    "kind": "Method",
    "detail": "Function (# else return value ; # endif } class InlineData { public : enum DefaultInitType { kDefaultInit } ; cordz_info_t kNullCordzInfo =)",
    "insertText": "LittleEndianByte(1)"
  },
  {
    "label": "InlineData()",
    "kind": "Method",
    "detail": "Function (size_t kTagOffset = 0 ;)",
    "insertText": "InlineData()"
  },
  {
    "label": "InlineData()",
    "kind": "Method",
    "detail": "Function (0 } { })",
    "insertText": "InlineData(DefaultInitType)"
  },
  {
    "label": "InlineData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InlineData(CordRep* rep) : as_tree_(rep)"
  },
  {
    "label": "InlineData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InlineData(absl::string_view chars)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "char((chars.size() << 1)), GetOrNull(chars, 0), GetOrNull(chars, 1), GetOrNull(chars, 2), GetOrNull(chars, 3), GetOrNull(chars, 4), GetOrNull(chars, 5), GetOrNull(chars, 6), GetOrNull(chars, 7), GetOrNull(chars, 8), GetOrNull(chars, 9), GetOrNull(chars, 10), GetOrNull(chars, 11), GetOrNull(chars, 12), GetOrNull(chars, 13), GetOrNull(chars, 14)"
  },
  {
    "label": "is_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_empty()"
  },
  {
    "label": "is_tree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_tree()"
  },
  {
    "label": "is_profiled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_profiled()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(is_tree())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(data1.is_tree() && data2.is_tree())"
  },
  {
    "label": "cordz_info()",
    "kind": "Method",
    "detail": "Function (} CordzInfo*)",
    "insertText": "cordz_info()"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (intptr_t info = static_cast<)",
    "insertText": "intptr_t(absl::little_endian::ToHost64( static_cast<uint64_t>(as_tree_.cordz_info)))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(info & 1)"
  },
  {
    "label": "set_cordz_info()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_cordz_info(CordzInfo* cordz_info)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t info = reinterpret_cast<)",
    "insertText": "uintptr_t(cordz_info)"
  },
  {
    "label": "cordz_info_t()",
    "kind": "Method",
    "detail": "Function (as_tree_ . cordz_info = static_cast<)",
    "insertText": "cordz_info_t(absl::little_endian::FromHost64(info))"
  },
  {
    "label": "clear_cordz_info()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear_cordz_info()"
  },
  {
    "label": "as_chars()",
    "kind": "Method",
    "detail": "Function (as_tree_ . cordz_info = kNullCordzInfo ; } const char*)",
    "insertText": "as_chars()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!is_tree())"
  },
  {
    "label": "set_tree()",
    "kind": "Method",
    "detail": "Function (as_tree_ . rep = rep ; as_tree_ . cordz_info = kNullCordzInfo ; } void)",
    "insertText": "set_tree(CordRep* rep)"
  },
  {
    "label": "inline_size()",
    "kind": "Method",
    "detail": "Function (as_tree_ . rep = rep ; } size_t)",
    "insertText": "inline_size()"
  },
  {
    "label": "set_inline_size()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_inline_size(size_t size)"
  },
  {
    "label": "ABSL_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ASSERT(size <= kMaxInline)"
  },
  {
    "label": "tag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tag() = static_cast<int8_t>(size << 1)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Compare(const InlineData& rhs)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (uint64_t x,y ;)",
    "insertText": "memcpy(&x, as_chars(), sizeof(x))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&y, rhs.as_chars(), sizeof(y))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&x, as_chars() + 7, sizeof(x))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&y, rhs.as_chars() + 7, sizeof(y))"
  },
  {
    "label": "FromHost64()",
    "kind": "Method",
    "detail": "Function (} } x = absl::)",
    "insertText": "FromHost64(x)"
  },
  {
    "label": "FromHost64()",
    "kind": "Method",
    "detail": "Function (y = absl::)",
    "insertText": "FromHost64(y)"
  },
  {
    "label": "tag()",
    "kind": "Method",
    "detail": "Function (} cordz_info_t cordz_info = kNullCordzInfo ; absl::cord_internal::CordRep* rep ; } ; int8_t&)",
    "insertText": "tag()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} union { char as_chars_ [ kMaxInline + 1 ] ; AsTree as_tree_ ; } ; } ;)",
    "insertText": "static_assert(sizeof(InlineData) == kMaxInline + 1, \"\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsSubstring())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsExternal())"
  },
  {
    "label": "ABSL_ASSUME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ASSUME(rep != nullptr)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(rep)"
  }
]