[
  {
    "label": "_NV_RECT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_NV_RECT"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "name"
  },
  {
    "label": "_NvAPI_Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_NvAPI_Status"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" nvapi_lite_salstart . h \" # pragma)",
    "insertText": "pack(push,8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(defined(WIN32) || defined(_WIN32)) && defined(_MSC_VER) && (_MSC_VER > 1399) && !defined(NVAPI_INTERNAL) && !defined(NVAPI_DEPRECATED_OLD) #ifndef __nvapi_deprecated_function #define __nvapi_deprecated_function(message) __declspec(deprecated(message)) #endif #ifndef __nvapi_deprecated_datatype #define __nvapi_deprecated_datatype(FirstRelease) __declspec(deprecated(\"Do not use this data type - it is deprecated in release \" #FirstRelease \".\")) #endif #else #ifndef __nvapi_deprecated_function #define __nvapi_deprecated_function(message) #endif #ifndef __nvapi_deprecated_datatype #define __nvapi_deprecated_datatype(FirstRelease) #endif #endif #if defined(__GNUC__) || defined(__arm) || defined(__IAR_SYSTEMS_ICC__) || defined(__ghs__) || defined(_WIN64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef long long NvS64 ; # else typedef unsigned __int64 NvU64 ; typedef __int64 NvS64 ; # endif #)",
    "insertText": "if(defined(macintosh) || defined(__APPLE__)) && !defined(__LP64__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else typedef signed int NvS32 ; # endif # ifndef __unix #)",
    "insertText": "if((defined(macintosh) && defined(__LP64__) && (__NVAPI_RESERVED0__)) || \\ (!defined(macintosh) && defined(__NVAPI_RESERVED0__)))"
  },
  {
    "label": "NvU32TONvF32()",
    "kind": "Method",
    "detail": "Function (# else typedef unsigned long NvU32 ; # endif # else typedef unsigned int NvU32 ; # endif typedef unsigned long temp_NvU32 ; typedef signed short NvS16 ; typedef unsigned short NvU16 ; typedef unsigned char NvU8 ; typedef signed char NvS8 ; typedef float NvF32 ; typedef double NvF64 ; # define)",
    "insertText": "NvU32TONvF32(_pData) *(NvF32 *)(_pData) #define NvF32TONvU32(_pData) *(NvU32 *)(_pData)"
  },
  {
    "label": "NV_TRUE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "NV_TRUE((NvBool)(0 == 0)) #define NV_FALSE ((NvBool)(0 != 0))"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (NvU32 left ; NvU32 top ; NvU32 right ; NvU32 bottom ; } NV_RECT ; # define)",
    "insertText": "NV_DECLARE_HANDLE(name)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (int unused ; } ; typedef struct name # # __* name)",
    "insertText": "NV_DECLARE_HANDLE(NvLogicalGpuHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvPhysicalGpuHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvDisplayHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvMonitorHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvUnAttachedDisplayHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvVisualComputingDeviceHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvEventHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvHICHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvGSyncDeviceHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvVioHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvTransitionHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvAudioHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(Nv3DVPContextHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(Nv3DVPTransceiverHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(Nv3DVPGlassesHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvPcfClientHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (typedef void* StereoHandle ;)",
    "insertText": "NV_DECLARE_HANDLE(NvSourceHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NvTargetHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NV_DECLARE_HANDLE(NVDX_SwapChainHandle)"
  },
  {
    "label": "NV_DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (const NVDX_SwapChainHandle NVDX_SWAPCHAIN_NONE = 0 ;)",
    "insertText": "NV_DECLARE_HANDLE(NvPresentBarrierClientHandle)"
  },
  {
    "label": "NV_BIT()",
    "kind": "Method",
    "detail": "Function (# define NVAPI_DEFAULT_HANDLE 0 # define)",
    "insertText": "NV_BIT(x) (1 << (x))"
  },
  {
    "label": "MAKE_NVAPI_VERSION()",
    "kind": "Method",
    "detail": "Function (NvS32 sX ; NvS32 sY ; NvS32 sWidth ; NvS32 sHeight ; } NvSBox ; # ifndef NvGUID_Defined # define NvGUID_Defined typedef struct { NvU32 data1 ; NvU16 data2 ; NvU16 data3 ; NvU8 data4 [ 8 ] ; } NvGUID,NvLUID ; # endif # define NVAPI_MAX_PHYSICAL_GPUS 6 4 # define NVAPI_MAX_PHYSICAL_BRIDGES 1 0 0 # define NVAPI_PHYSICAL_GPUS 3 2 # define NVAPI_MAX_LOGICAL_GPUS 6 4 # define NVAPI_MAX_AVAILABLE_GPU_TOPOLOGIES 2 5 6 # define NVAPI_MAX_AVAILABLE_SLI_GROUPS 2 5 6 # define NVAPI_MAX_GPU_TOPOLOGIES NVAPI_MAX_PHYSICAL_GPUS # define NVAPI_MAX_GPU_PER_TOPOLOGY 8 # define NVAPI_MAX_DISPLAY_HEADS 2 # define NVAPI_ADVANCED_DISPLAY_HEADS 4 # define NVAPI_MAX_DISPLAYS NVAPI_PHYSICAL_GPUS* NVAPI_ADVANCED_DISPLAY_HEADS # define NVAPI_MAX_ACPI_IDS 1 6 # define NVAPI_MAX_VIEW_MODES 8 # define NVAPI_SYSTEM_MAX_HWBCS 1 2 8 # define NVAPI_SYSTEM_HWBC_INVALID_ID 0 xffffffff # define NVAPI_SYSTEM_MAX_DISPLAYS NVAPI_MAX_PHYSICAL_GPUS* NV_MAX_HEADS # define NV_MAX_HEADS 4 # define NVAPI_MAX_HEADS_PER_GPU 3 2 # define NV_MAX_VID_STREAMS 4 # define NV_MAX_VID_STREAMS_EX 2 0 # define NV_MAX_VID_PROFILES 4 # define NVAPI_MAX_AUDIO_DEVICES 1 6 typedef char NvAPI_String [ NVAPI_GENERIC_STRING_MAX ] ; typedef char NvAPI_LongString [ NVAPI_LONG_STRING_MAX ] ; typedef char NvAPI_ShortString [ NVAPI_SHORT_STRING_MAX ] ; typedef NvU16 NvAPI_UnicodeShortString [ NVAPI_SHORT_STRING_MAX ] ; # define)",
    "insertText": "MAKE_NVAPI_VERSION(typeName,ver) (NvU32)(sizeof(typeName) | ((ver)<<16)) #define GET_NVAPI_VERSION(ver) (NvU32)((ver)>>16) #define GET_NVAPI_SIZE(ver) (NvU32)((ver) & 0xffff)"
  },
  {
    "label": "NvAPI_SYS_GetDriverAndBranchVersion()",
    "kind": "Method",
    "detail": "Function (NVAPI_OK = 0,NVAPI_ERROR = - 1,NVAPI_LIBRARY_NOT_FOUND = - 2,NVAPI_NO_IMPLEMENTATION = - 3,NVAPI_API_NOT_INITIALIZED = - 4,NVAPI_INVALID_ARGUMENT = - 5,NVAPI_NVIDIA_DEVICE_NOT_FOUND = - 6,NVAPI_END_ENUMERATION = - 7,NVAPI_INVALID_HANDLE = - 8,NVAPI_INCOMPATIBLE_STRUCT_VERSION = - 9,NVAPI_HANDLE_INVALIDATED = - 1 0,NVAPI_OPENGL_CONTEXT_NOT_CURRENT = - 1 1,NVAPI_INVALID_POINTER = - 1 4,NVAPI_NO_GL_EXPERT = - 1 2,NVAPI_INSTRUMENTATION_DISABLED = - 1 3,NVAPI_NO_GL_NSIGHT = - 1 5,NVAPI_EXPECTED_LOGICAL_GPU_HANDLE = - 1 0 0,NVAPI_EXPECTED_PHYSICAL_GPU_HANDLE = - 1 0 1,NVAPI_EXPECTED_DISPLAY_HANDLE = - 1 0 2,NVAPI_INVALID_COMBINATION = - 1 0 3,NVAPI_NOT_SUPPORTED = - 1 0 4,NVAPI_PORTID_NOT_FOUND = - 1 0 5,NVAPI_EXPECTED_UNATTACHED_DISPLAY_HANDLE = - 1 0 6,NVAPI_INVALID_PERF_LEVEL = - 1 0 7,NVAPI_DEVICE_BUSY = - 1 0 8,NVAPI_NV_PERSIST_FILE_NOT_FOUND = - 1 0 9,NVAPI_PERSIST_DATA_NOT_FOUND = - 1 1 0,NVAPI_EXPECTED_TV_DISPLAY = - 1 1 1,NVAPI_EXPECTED_TV_DISPLAY_ON_DCONNECTOR = - 1 1 2,NVAPI_NO_ACTIVE_SLI_TOPOLOGY = - 1 1 3,NVAPI_SLI_RENDERING_MODE_NOTALLOWED = - 1 1 4,NVAPI_EXPECTED_DIGITAL_FLAT_PANEL = - 1 1 5,NVAPI_ARGUMENT_EXCEED_MAX_SIZE = - 1 1 6,NVAPI_DEVICE_SWITCHING_NOT_ALLOWED = - 1 1 7,NVAPI_TESTING_CLOCKS_NOT_SUPPORTED = - 1 1 8,NVAPI_UNKNOWN_UNDERSCAN_CONFIG = - 1 1 9,NVAPI_TIMEOUT_RECONFIGURING_GPU_TOPO = - 1 2 0,NVAPI_DATA_NOT_FOUND = - 1 2 1,NVAPI_EXPECTED_ANALOG_DISPLAY = - 1 2 2,NVAPI_NO_VIDLINK = - 1 2 3,NVAPI_REQUIRES_REBOOT = - 1 2 4,NVAPI_INVALID_HYBRID_MODE = - 1 2 5,NVAPI_MIXED_TARGET_TYPES = - 1 2 6,NVAPI_SYSWOW64_NOT_SUPPORTED = - 1 2 7,NVAPI_IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED = - 1 2 8,NVAPI_REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS = - 1 2 9,NVAPI_OUT_OF_MEMORY = - 1 3 0,NVAPI_WAS_STILL_DRAWING = - 1 3 1,NVAPI_FILE_NOT_FOUND = - 1 3 2,NVAPI_TOO_MANY_UNIQUE_STATE_OBJECTS = - 1 3 3,NVAPI_INVALID_CALL = - 1 3 4,NVAPI_D3D10_1_LIBRARY_NOT_FOUND = - 1 3 5,NVAPI_FUNCTION_NOT_FOUND = - 1 3 6,NVAPI_INVALID_USER_PRIVILEGE = - 1 3 7,NVAPI_EXPECTED_NON_PRIMARY_DISPLAY_HANDLE = - 1 3 8,NVAPI_EXPECTED_COMPUTE_GPU_HANDLE = - 1 3 9,NVAPI_STEREO_NOT_INITIALIZED = - 1 4 0,NVAPI_STEREO_REGISTRY_ACCESS_FAILED = - 1 4 1,NVAPI_STEREO_REGISTRY_PROFILE_TYPE_NOT_SUPPORTED = - 1 4 2,NVAPI_STEREO_REGISTRY_VALUE_NOT_SUPPORTED = - 1 4 3,NVAPI_STEREO_NOT_ENABLED = - 1 4 4,NVAPI_STEREO_NOT_TURNED_ON = - 1 4 5,NVAPI_STEREO_INVALID_DEVICE_INTERFACE = - 1 4 6,NVAPI_STEREO_PARAMETER_OUT_OF_RANGE = - 1 4 7,NVAPI_STEREO_FRUSTUM_ADJUST_MODE_NOT_SUPPORTED = - 1 4 8,NVAPI_TOPO_NOT_POSSIBLE = - 1 4 9,NVAPI_MODE_CHANGE_FAILED = - 1 5 0,NVAPI_D3D11_LIBRARY_NOT_FOUND = - 1 5 1,NVAPI_INVALID_ADDRESS = - 1 5 2,NVAPI_STRING_TOO_SMALL = - 1 5 3,NVAPI_MATCHING_DEVICE_NOT_FOUND = - 1 5 4,NVAPI_DRIVER_RUNNING = - 1 5 5,NVAPI_DRIVER_NOTRUNNING = - 1 5 6,NVAPI_ERROR_DRIVER_RELOAD_REQUIRED = - 1 5 7,NVAPI_SET_NOT_ALLOWED = - 1 5 8,NVAPI_ADVANCED_DISPLAY_TOPOLOGY_REQUIRED = - 1 5 9,NVAPI_SETTING_NOT_FOUND = - 1 6 0,NVAPI_SETTING_SIZE_TOO_LARGE = - 1 6 1,NVAPI_TOO_MANY_SETTINGS_IN_PROFILE = - 1 6 2,NVAPI_PROFILE_NOT_FOUND = - 1 6 3,NVAPI_PROFILE_NAME_IN_USE = - 1 6 4,NVAPI_PROFILE_NAME_EMPTY = - 1 6 5,NVAPI_EXECUTABLE_NOT_FOUND = - 1 6 6,NVAPI_EXECUTABLE_ALREADY_IN_USE = - 1 6 7,NVAPI_DATATYPE_MISMATCH = - 1 6 8,NVAPI_PROFILE_REMOVED = - 1 6 9,NVAPI_UNREGISTERED_RESOURCE = - 1 7 0,NVAPI_ID_OUT_OF_RANGE = - 1 7 1,NVAPI_DISPLAYCONFIG_VALIDATION_FAILED = - 1 7 2,NVAPI_DPMST_CHANGED = - 1 7 3,NVAPI_INSUFFICIENT_BUFFER = - 1 7 4,NVAPI_ACCESS_DENIED = - 1 7 5,NVAPI_MOSAIC_NOT_ACTIVE = - 1 7 6,NVAPI_SHARE_RESOURCE_RELOCATED = - 1 7 7,NVAPI_REQUEST_USER_TO_DISABLE_DWM = - 1 7 8,NVAPI_D3D_DEVICE_LOST = - 1 7 9,NVAPI_INVALID_CONFIGURATION = - 1 8 0,NVAPI_STEREO_HANDSHAKE_NOT_DONE = - 1 8 1,NVAPI_EXECUTABLE_PATH_IS_AMBIGUOUS = - 1 8 2,NVAPI_DEFAULT_STEREO_PROFILE_IS_NOT_DEFINED = - 1 8 3,NVAPI_DEFAULT_STEREO_PROFILE_DOES_NOT_EXIST = - 1 8 4,NVAPI_CLUSTER_ALREADY_EXISTS = - 1 8 5,NVAPI_DPMST_DISPLAY_ID_EXPECTED = - 1 8 6,NVAPI_INVALID_DISPLAY_ID = - 1 8 7,NVAPI_STREAM_IS_OUT_OF_SYNC = - 1 8 8,NVAPI_INCOMPATIBLE_AUDIO_DRIVER = - 1 8 9,NVAPI_VALUE_ALREADY_SET = - 1 9 0,NVAPI_TIMEOUT = - 1 9 1,NVAPI_GPU_WORKSTATION_FEATURE_INCOMPLETE = - 1 9 2,NVAPI_STEREO_INIT_ACTIVATION_NOT_DONE = - 1 9 3,NVAPI_SYNC_NOT_ACTIVE = - 1 9 4,NVAPI_SYNC_MASTER_NOT_FOUND = - 1 9 5,NVAPI_INVALID_SYNC_TOPOLOGY = - 1 9 6,NVAPI_ECID_SIGN_ALGO_UNSUPPORTED = - 1 9 7,NVAPI_ECID_KEY_VERIFICATION_FAILED = - 1 9 8,NVAPI_FIRMWARE_OUT_OF_DATE = - 1 9 9,NVAPI_FIRMWARE_REVISION_NOT_SUPPORTED = - 2 0 0,NVAPI_LICENSE_CALLER_AUTHENTICATION_FAILED = - 2 0 1,NVAPI_D3D_DEVICE_NOT_REGISTERED = - 2 0 2,NVAPI_RESOURCE_NOT_ACQUIRED = - 2 0 3,NVAPI_TIMING_NOT_SUPPORTED = - 2 0 4,NVAPI_HDCP_ENCRYPTION_FAILED = - 2 0 5,NVAPI_PCLK_LIMITATION_FAILED = - 2 0 6,NVAPI_NO_CONNECTOR_FOUND = - 2 0 7,NVAPI_HDCP_DISABLED = - 2 0 8,NVAPI_API_IN_USE = - 2 0 9,NVAPI_NVIDIA_DISPLAY_NOT_FOUND = - 2 1 0,NVAPI_PRIV_SEC_VIOLATION = - 2 1 1,NVAPI_INCORRECT_VENDOR = - 2 1 2,NVAPI_DISPLAY_IN_USE = - 2 1 3,NVAPI_UNSUPPORTED_CONFIG_NON_HDCP_HMD = - 2 1 4,NVAPI_MAX_DISPLAY_LIMIT_REACHED = - 2 1 5,NVAPI_INVALID_DIRECT_MODE_DISPLAY = - 2 1 6,NVAPI_GPU_IN_DEBUG_MODE = - 2 1 7,NVAPI_D3D_CONTEXT_NOT_FOUND = - 2 1 8,NVAPI_STEREO_VERSION_MISMATCH = - 2 1 9,NVAPI_GPU_NOT_POWERED = - 2 2 0,NVAPI_ERROR_DRIVER_RELOAD_IN_PROGRESS = - 2 2 1,NVAPI_WAIT_FOR_HW_RESOURCE = - 2 2 2,NVAPI_REQUIRE_FURTHER_HDCP_ACTION = - 2 2 3,NVAPI_DISPLAY_MUX_TRANSITION_FAILED = - 2 2 4,NVAPI_INVALID_DSC_VERSION = - 2 2 5,NVAPI_INVALID_DSC_SLICECOUNT = - 2 2 6,NVAPI_INVALID_DSC_OUTPUT_BPP = - 2 2 7,NVAPI_FAILED_TO_LOAD_FROM_DRIVER_STORE = - 2 2 8,NVAPI_NO_VULKAN = - 2 2 9,NVAPI_REQUEST_PENDING = - 2 3 0,NVAPI_RESOURCE_IN_USE = - 2 3 1,NVAPI_INVALID_IMAGE = - 2 3 2,NVAPI_INVALID_PTX = - 2 3 3,NVAPI_NVLINK_UNCORRECTABLE = - 2 3 4,NVAPI_JIT_COMPILER_NOT_FOUND = - 2 3 5,NVAPI_INVALID_SOURCE = - 2 3 6,NVAPI_ILLEGAL_INSTRUCTION = - 2 3 7,NVAPI_INVALID_PC = - 2 3 8,NVAPI_LAUNCH_FAILED = - 2 3 9,NVAPI_NOT_PERMITTED = - 2 4 0,NVAPI_CALLBACK_ALREADY_REGISTERED = - 2 4 1,NVAPI_CALLBACK_NOT_FOUND = - 2 4 2,} NvAPI_Status ; NVAPI_INTERFACE)",
    "insertText": "NvAPI_SYS_GetDriverAndBranchVersion(NvU32* pDriverVersion, NvAPI_ShortString szBuildBranchString)"
  },
  {
    "label": "MAKE_NVAPI_VERSION()",
    "kind": "Method",
    "detail": "Function (typedef struct { NvU32 version ; NvU32 dedicatedVideoMemory ; NvU32 availableDedicatedVideoMemory ; NvU32 systemVideoMemory ; NvU32 sharedSystemMemory ; } NV_DISPLAY_DRIVER_MEMORY_INFO_V1 ; typedef struct { NvU32 version ; NvU32 dedicatedVideoMemory ; NvU32 availableDedicatedVideoMemory ; NvU32 systemVideoMemory ; NvU32 sharedSystemMemory ; NvU32 curAvailableDedicatedVideoMemory ; } NV_DISPLAY_DRIVER_MEMORY_INFO_V2 ; typedef struct { NvU32 version ; NvU32 dedicatedVideoMemory ; NvU32 availableDedicatedVideoMemory ; NvU32 systemVideoMemory ; NvU32 sharedSystemMemory ; NvU32 curAvailableDedicatedVideoMemory ; NvU32 dedicatedVideoMemoryEvictionsSize ; NvU32 dedicatedVideoMemoryEvictionCount ; } NV_DISPLAY_DRIVER_MEMORY_INFO_V3 ; typedef NV_DISPLAY_DRIVER_MEMORY_INFO_V3 NV_DISPLAY_DRIVER_MEMORY_INFO ; # define NV_DISPLAY_DRIVER_MEMORY_INFO_VER_1)",
    "insertText": "MAKE_NVAPI_VERSION(NV_DISPLAY_DRIVER_MEMORY_INFO_V1,1) #define NV_DISPLAY_DRIVER_MEMORY_INFO_VER_2 MAKE_NVAPI_VERSION(NV_DISPLAY_DRIVER_MEMORY_INFO_V2,2) #define NV_DISPLAY_DRIVER_MEMORY_INFO_VER_3 MAKE_NVAPI_VERSION(NV_DISPLAY_DRIVER_MEMORY_INFO_V3,3) #define NV_DISPLAY_DRIVER_MEMORY_INFO_VER NV_DISPLAY_DRIVER_MEMORY_INFO_VER_3 __nvapi_deprecated_function(\"Do not use this function - it is deprecated in release 520. Instead, use NvAPI_GPU_GetMemoryInfoEx.\") NVAPI_INTERFACE NvAPI_GPU_GetMemoryInfo(NvPhysicalGpuHandle hPhysicalGpu, NV_DISPLAY_DRIVER_MEMORY_INFO *pMemoryInfo)"
  },
  {
    "label": "MAKE_NVAPI_VERSION()",
    "kind": "Method",
    "detail": "Function (typedef struct { NvU32 version ; NvU64 dedicatedVideoMemory ; NvU64 availableDedicatedVideoMemory ; NvU64 systemVideoMemory ; NvU64 sharedSystemMemory ; NvU64 curAvailableDedicatedVideoMemory ; NvU64 dedicatedVideoMemoryEvictionsSize ; NvU64 dedicatedVideoMemoryEvictionCount ; NvU64 dedicatedVideoMemoryPromotionsSize ; NvU64 dedicatedVideoMemoryPromotionCount ; } NV_GPU_MEMORY_INFO_EX_V1 ; typedef NV_GPU_MEMORY_INFO_EX_V1 NV_GPU_MEMORY_INFO_EX ; # define NV_GPU_MEMORY_INFO_EX_VER_1)",
    "insertText": "MAKE_NVAPI_VERSION(NV_GPU_MEMORY_INFO_EX_V1,1) #define NV_GPU_MEMORY_INFO_EX_VER NV_GPU_MEMORY_INFO_EX_VER_1 NVAPI_INTERFACE NvAPI_GPU_GetMemoryInfoEx(NvPhysicalGpuHandle hPhysicalGpu, NV_GPU_MEMORY_INFO_EX *pMemoryInfo)"
  },
  {
    "label": "NvAPI_EnumPhysicalGPUs()",
    "kind": "Method",
    "detail": "Function (NVAPI_INTERFACE)",
    "insertText": "NvAPI_EnumPhysicalGPUs(NvPhysicalGpuHandle nvGPUHandle[NVAPI_MAX_PHYSICAL_GPUS], NvU32 *pGpuCount)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_D3D9_H_) || defined(__d3d10_h__) || defined(__d3d11_h__) || defined(__d3d12_h__) NV_DECLARE_HANDLE(NVDX_ObjectHandle)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const NVDX_ObjectHandle NVDX_OBJECT_NONE = 0 ; # endif # if)",
    "insertText": "defined(_D3D9_H_) || defined(__d3d10_h__) || defined(__d3d11_h__) || defined(__d3d12_h__) NVAPI_INTERFACE NvAPI_D3D_GetObjectHandleForResource( IUnknown *pDevice, IUnknown *pResource, NVDX_ObjectHandle *pHandle)"
  }
]