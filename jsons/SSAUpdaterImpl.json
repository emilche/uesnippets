[
  {
    "label": "CastInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CastInst"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "SSAUpdaterTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSAUpdaterTraits"
  },
  {
    "label": "SSAUpdaterImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSAUpdaterImpl"
  },
  {
    "label": "BBInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BBInfo"
  },
  {
    "label": "BBInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_SSAUPDATERIMPL_H # define LLVM_TRANSFORMS_UTILS_SSAUPDATERIMPL_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / Debug . h \" namespace llvm { # define DEBUG_TYPE \" ssaupdater \" class CastInst ; class PHINode ; template<T> class SSAUpdaterTraits ; template<UpdaterT> class SSAUpdaterImpl { private : UpdaterT* Updater ; typedef SSAUpdaterTraits<UpdaterT> Traits ; typedef Traits::BlkT BlkT ; typedef Traits::ValT ValT ; typedef Traits::PhiT PhiT ; class BBInfo { public : BlkT* BB ; ValT AvailableVal ; BBInfo* DefBB ; int BlkNum ; BBInfo* IDom ; unsigned NumPreds ; BBInfo** Preds ; PhiT* PHITag ;)",
    "insertText": "BBInfo(BlkT *ThisBB, ValT V) : BB(ThisBB), AvailableVal(V), DefBB(V ? this : nullptr), BlkNum(0), IDom(nullptr), NumPreds(0), Preds(nullptr), PHITag(nullptr)"
  },
  {
    "label": "SSAUpdaterImpl()",
    "kind": "Method",
    "detail": "Function (} } ; typedef DenseMap<BlkT*,ValT> AvailableValsTy ; AvailableValsTy* AvailableVals ; SmallVectorImpl<PhiT*>* InsertedPHIs ; typedef SmallVectorImpl<BBInfo*> BlockListTy ; typedef DenseMap<BlkT*,BBInfo*> BBMapTy ; BBMapTy BBMap ; BumpPtrAllocator Allocator ; public :)",
    "insertText": "SSAUpdaterImpl(UpdaterT *U, AvailableValsTy *A, SmallVectorImpl<PhiT*> *Ins) : Updater(U), AvailableVals(A), InsertedPHIs(Ins)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} ValT)",
    "insertText": "GetValue(BlkT *BB)"
  },
  {
    "label": "BuildBlockList()",
    "kind": "Method",
    "detail": "Function (SmallVector<BBInfo*,1 0 0> BlockList ; BBInfo* PseudoEntry =)",
    "insertText": "BuildBlockList(BB, &BlockList)"
  },
  {
    "label": "GetUndefVal()",
    "kind": "Method",
    "detail": "Function (ValT V =)",
    "insertText": "GetUndefVal(BB, Updater)"
  },
  {
    "label": "FindPHIPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPHIPlacement(&BlockList)"
  },
  {
    "label": "FindAvailableVals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAvailableVals(&BlockList)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (SmallVector<BBInfo*,1 0> RootList ; SmallVector<BBInfo*,6 4> WorkList ; BBInfo* Info =)",
    "insertText": "new(Allocator) BBInfo(BB, 0)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (BBMap [ BB ] = Info ; WorkList .)",
    "insertText": "push_back(Info)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (SmallVector<BlkT*,1 0> Preds ;)",
    "insertText": "while(!WorkList.empty())"
  },
  {
    "label": "pop_back_val()",
    "kind": "Method",
    "detail": "Function (Info = WorkList .)",
    "insertText": "pop_back_val()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Preds .)",
    "insertText": "clear()"
  },
  {
    "label": "FindPredecessorBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPredecessorBlocks(Info->BB, &Preds)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Info -> NumPreds = Preds .)",
    "insertText": "size()"
  },
  {
    "label": "FindAndConstruct()",
    "kind": "Method",
    "detail": "Function (BlkT* Pred = Preds [ p ] ; BBMapTy::value_type& BBMapBucket = BBMap .)",
    "insertText": "FindAndConstruct(Pred)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (Info -> Preds [ p ] = BBMapBucket . second ; continue ; } ValT PredVal = AvailableVals ->)",
    "insertText": "lookup(Pred)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (BBInfo* PredInfo =)",
    "insertText": "new(Allocator) BBInfo(Pred, PredVal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BBMapBucket . second = PredInfo ; Info -> Preds [ p ] = PredInfo ;)",
    "insertText": "if(PredInfo->AvailableVal)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (RootList .)",
    "insertText": "push_back(PredInfo)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} } BBInfo* PseudoEntry =)",
    "insertText": "new(Allocator) BBInfo(nullptr, 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (unsigned BlkNum = 1 ;)",
    "insertText": "while(!RootList.empty())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (Info = WorkList .)",
    "insertText": "back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Info -> BlkNum = BlkNum + + ;)",
    "insertText": "if(!Info->AvailableVal) BlockList->push_back(Info)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (WorkList .)",
    "insertText": "pop_back()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } Info -> BlkNum = - 2 ;)",
    "insertText": "for(typename Traits::BlkSucc_iterator SI = Traits::BlkSucc_begin(Info->BB), E = Traits::BlkSucc_end(Info->BB); SI != E; ++SI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BBInfo* SuccInfo = BBMap [* SI ] ;)",
    "insertText": "if(!SuccInfo || SuccInfo->BlkNum)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SuccInfo -> BlkNum = - 1 ; WorkList .)",
    "insertText": "push_back(SuccInfo)"
  },
  {
    "label": "IntersectDominators()",
    "kind": "Method",
    "detail": "Function (} } PseudoEntry -> BlkNum = BlkNum ; return PseudoEntry ; } BBInfo*)",
    "insertText": "IntersectDominators(BBInfo *Blk1, BBInfo *Blk2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Blk1 = Blk1 -> IDom ;)",
    "insertText": "if(!Blk1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(Blk2->BlkNum < Blk1->BlkNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Blk2 = Blk2 -> IDom ;)",
    "insertText": "if(!Blk2)"
  },
  {
    "label": "FindDominators()",
    "kind": "Method",
    "detail": "Function (} } return Blk1 ; } void)",
    "insertText": "FindDominators(BlockListTy *BlockList, BBInfo *PseudoEntry)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool Changed ; do { Changed = false ;)",
    "insertText": "for(typename BlockListTy::reverse_iterator I = BlockList->rbegin(), E = BlockList->rend(); I != E; ++I)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BBInfo* Info =* I ; BBInfo* NewIDom = nullptr ;)",
    "insertText": "for(unsigned p = 0; p != Info->NumPreds; ++p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BBInfo* Pred = Info -> Preds [ p ] ;)",
    "insertText": "if(Pred->BlkNum == 0)"
  },
  {
    "label": "GetUndefVal()",
    "kind": "Method",
    "detail": "Function (Pred -> AvailableVal =)",
    "insertText": "GetUndefVal(Pred->BB, Updater)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Pred -> DefBB = Pred ; Pred -> BlkNum = PseudoEntry -> BlkNum ; PseudoEntry -> BlkNum + + ; })",
    "insertText": "if(!NewIDom)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NewIDom && NewIDom != Info->IDom)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Info -> IDom = NewIDom ; Changed = true ; } } })",
    "insertText": "while(Changed)"
  },
  {
    "label": "IsDefInDomFrontier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDefInDomFrontier(const BBInfo *Pred, const BBInfo *IDom)"
  },
  {
    "label": "FindPHIPlacement()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "FindPHIPlacement(BlockListTy *BlockList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BBInfo* Info =* I ;)",
    "insertText": "if(Info->DefBB == Info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewDefBB = Info ; break ; } })",
    "insertText": "if(NewDefBB != Info->DefBB)"
  },
  {
    "label": "FindAvailableVals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindAvailableVals(BlockListTy *BlockList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BBInfo* Info =* I ;)",
    "insertText": "if(Info->DefBB != Info)"
  },
  {
    "label": "FindExistingPHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindExistingPHI(Info->BB, BlockList)"
  },
  {
    "label": "CreateEmptyPHI()",
    "kind": "Method",
    "detail": "Function (ValT PHI =)",
    "insertText": "CreateEmptyPHI(Info->BB, Info->NumPreds, Updater)"
  },
  {
    "label": "PHI()",
    "kind": "Method",
    "detail": "Function (BB] = PHI)",
    "insertText": "PHI(*AvailableVals)"
  },
  {
    "label": "ValueIsNewPHI()",
    "kind": "Method",
    "detail": "Function (continue ; } PhiT* PHI =)",
    "insertText": "ValueIsNewPHI(Info->AvailableVal, Updater)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DefBB)",
    "insertText": "if(PredInfo->DefBB != PredInfo)"
  },
  {
    "label": "AddPHIOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPHIOperand(PHI, PredInfo->AvailableVal, Pred)"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DEBUG(dbgs() << \" Inserted PHI: \" << *PHI << \"\\n\")"
  },
  {
    "label": "FindExistingPHI()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindExistingPHI(BlkT *BB, BlockListTy *BlockList)"
  },
  {
    "label": "InstrIsPHI()",
    "kind": "Method",
    "detail": "Function (PhiT* SomePHI =)",
    "insertText": "InstrIsPHI(BBI)"
  },
  {
    "label": "RecordMatchingPHIs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordMatchingPHIs(BlockList)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PHITag = nullptr)",
    "insertText": "for(typename BlockListTy::iterator I = BlockList->begin(), E = BlockList->end(); I != E; ++I) (*I)"
  },
  {
    "label": "CheckIfPHIMatches()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CheckIfPHIMatches(PhiT *PHI)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SmallVector<PhiT*,2 0> WorkList ; WorkList .)",
    "insertText": "push_back(PHI)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (PHITag = PHI)",
    "insertText": "getParent()"
  },
  {
    "label": "getIncomingValue()",
    "kind": "Method",
    "detail": "Function (ValT IncomingVal = I .)",
    "insertText": "getIncomingValue()"
  },
  {
    "label": "getIncomingBlock()",
    "kind": "Method",
    "detail": "Function (BBInfo* PredInfo = BBMap [ I .)",
    "insertText": "getIncomingBlock()"
  },
  {
    "label": "RecordMatchingPHIs()",
    "kind": "Method",
    "detail": "Function (} } return true ; } void)",
    "insertText": "RecordMatchingPHIs(BlockListTy *BlockList)"
  },
  {
    "label": "GetPHIValue()",
    "kind": "Method",
    "detail": "Function (ValT PHIVal =)",
    "insertText": "GetPHIValue(PHI)"
  }
]