[
  {
    "label": "FPBDAxialSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDAxialSpringConstraints"
  },
  {
    "label": "FPBDAreaSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDAreaSpringConstraints"
  },
  {
    "label": "FPBDAxialSpringConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDAxialSpringConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" namespace Chaos::Softs { class FPBDAxialSpringConstraints : public FPBDAxialSpringConstraintsBase { typedef FPBDAxialSpringConstraintsBase Base ; using Base::Barys ; public :)",
    "insertText": "FPBDAxialSpringConstraints(const FSolverParticlesRange& Particles, const TArray<TVec3<int32>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints) : Base( Particles, InConstraints, StiffnessMultipliers, InStiffness, bTrimKinematicConstraints)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColor(Particles)"
  },
  {
    "label": "FPBDAxialSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDAxialSpringConstraints(const FSolverParticles& Particles, int32 InParticleOffset, int32 InParticleCount, const TArray<TVec3<int32>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints) : Base( Particles, InParticleOffset, InParticleCount, InConstraints, StiffnessMultipliers, InStiffness, bTrimKinematicConstraints)"
  },
  {
    "label": "FPBDAxialSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDAxialSpringConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (protected : using Base::Constraints ; using Base::Stiffness ; using Base::ParticleOffset ; using Base::ParticleCount ; private : template<SolverParticlesOrRange> void)",
    "insertText": "InitColor(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& InParticles, const FSolverReal Dt, const int32 ConstraintIndex, const FSolverReal ExpStiffnessValue)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (TArray<int32> ConstraintsPerColorStartIndex ; } ; class FPBDAreaSpringConstraints final : public FPBDAxialSpringConstraints { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDAreaSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDAreaSpringConstraints(const FSolverParticlesRange& Particles, const TArray<TVec3<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints) : FPBDAxialSpringConstraints( Particles, InConstraints, WeightMaps.FindRef(GetAreaSpringStiffnessString(PropertyCollection, AreaSpringStiffnessName.ToString())), FSolverVec2(GetWeightedFloatAreaSpringStiffness(PropertyCollection, 1.f)), bTrimKinematicConstraints) , AreaSpringStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "FPBDAreaSpringConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDAreaSpringConstraints(const FSolverParticles& Particles, int32 InParticleOffset, int32 InParticleCount, const TArray<TVec3<int32>>& InConstraints, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, bool bTrimKinematicConstraints) : FPBDAxialSpringConstraints( Particles, InParticleOffset, InParticleCount, InConstraints, WeightMaps.FindRef(GetAreaSpringStiffnessString(PropertyCollection, AreaSpringStiffnessName.ToString())), FSolverVec2(GetWeightedFloatAreaSpringStiffness(PropertyCollection, 1.f)), bTrimKinematicConstraints) , AreaSpringStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "FPBDAreaSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDAreaSpringConstraints()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (private : using FPBDAxialSpringConstraints::Constraints ; using FPBDAxialSpringConstraints::Stiffness ; using FPBDAxialSpringConstraints::ParticleOffset ; using FPBDAxialSpringConstraints::ParticleCount ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(AreaSpringStiffness, float)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_AXIAL_SPRING_ISPC_ENABLED_DEFAULT)"
  }
]