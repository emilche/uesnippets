[
  {
    "label": "_InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIter"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_NEXT_H # define _LIBCPP___ITERATOR_NEXT_H # include<__assert> # include<__config> # include<__iterator / advance . h> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iterator_traits . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIter> inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 typename enable_if<__is_cpp17_input_iterator<_InputIter>::value, _InputIter>::type next(_InputIter __x, typename iterator_traits<_InputIter>::difference_type __n = 1)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n >= 0 || __is_cpp17_bidirectional_iterator<_InputIter>::value, \"Attempt to next(it, n) with negative n on a non-bidirectional iterator\")"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__x, __n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __next { struct __fn { template<input_or_output_iterator _Ip> _LIBCPP_HIDE_FROM_ABI _Ip)",
    "insertText": "operator()(_Ip __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __x ; return __x ; } template<input_or_output_iterator _Ip> _LIBCPP_HIDE_FROM_ABI _Ip)",
    "insertText": "operator()(_Ip __x, iter_difference_t<_Ip> __n)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__x, __bound_sentinel)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance(__x, __n, __bound_sentinel)"
  }
]