[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TokenHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TokenHash"
  },
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TOKEN_H_ # define BASE_TOKEN_H_ # include<stdint . h> # include<string> # include<tuple> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / hash / hash . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT Token { public :)",
    "insertText": "Token()"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Token(uint64_t high, uint64_t low)"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (high,low } { })",
    "insertText": "Token(const Token&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Token&)",
    "insertText": "operator(const Token&)"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Token(Token&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Token&)",
    "insertText": "operator(Token&&)"
  },
  {
    "label": "CreateRandom()",
    "kind": "Method",
    "detail": "Function (Token)",
    "insertText": "CreateRandom()"
  },
  {
    "label": "high()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "high()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Token& other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (absl::optional<Token>)",
    "insertText": "FromString(StringPiece string_representation)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : uint64_t words_ [ 2 ] = { 0,0 } ; } ; struct TokenHash { size_t)",
    "insertText": "operator()(const base::Token& token)"
  },
  {
    "label": "WriteTokenToPickle()",
    "kind": "Method",
    "detail": "Function (} } ; class Pickle ; class PickleIterator ; BASE_EXPORT void)",
    "insertText": "WriteTokenToPickle(Pickle* pickle, const Token& token)"
  },
  {
    "label": "ReadTokenFromPickle()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT absl::optional<Token>)",
    "insertText": "ReadTokenFromPickle(PickleIterator* pickle_iterator)"
  }
]