[
  {
    "label": "TMemoryView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMemoryView"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformString . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathUtility . h \" # include \" Memory / MemoryFwd . h \" # include \" Templates / AndOrNot . h \" # include \" Templates / EnableIf . h \" # include \" Templates / Identity . h \" # include \" Templates / IsConst . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Templates / UnrealTemplate . h \" # include \" Traits / IsContiguousContainer . h \" # include<initializer_list> template<DataType> class TMemoryView {)",
    "insertText": "static_assert(std::is_void_v<DataType>, \"DataType must be cv-qualified void\")"
  },
  {
    "label": "TMemoryView()",
    "kind": "Method",
    "detail": "Function (using ByteType = std::conditional_t<TIsConst<DataType>::Value,const uint8,uint8> ; public :)",
    "insertText": "TMemoryView()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<OtherDataType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherDataType*, DataType*>) > constexpr inline TMemoryView(const TMemoryView<OtherDataType>& InView) : Data(InView.Data) , Size(InView.Size)"
  },
  {
    "label": "TMemoryView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMemoryView(DataType* InData, uint64 InSize) : Data(InData) , Size(InSize)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<DataEndType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<DataEndType*, DataType*>) > inline TMemoryView(DataType* InData, DataEndType* InDataEnd) : Data(InData) , Size(static_cast<uint64>(static_cast<ByteType*>(ImplicitConv<DataType*>(InDataEnd)) - static_cast<ByteType*>(InData)))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] DataType*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint64)",
    "insertText": "GetSize()"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TMemoryView)",
    "insertText": "Left(uint64 InSize)"
  },
  {
    "label": "View()",
    "kind": "Method",
    "detail": "Function (TMemoryView)",
    "insertText": "View(*this)"
  },
  {
    "label": "LeftInline()",
    "kind": "Method",
    "detail": "Function (View .)",
    "insertText": "LeftInline(InSize)"
  },
  {
    "label": "LeftChopInline()",
    "kind": "Method",
    "detail": "Function (View .)",
    "insertText": "LeftChopInline(InSize)"
  },
  {
    "label": "RightInline()",
    "kind": "Method",
    "detail": "Function (View .)",
    "insertText": "RightInline(InSize)"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (View .)",
    "insertText": "RightChopInline(InSize)"
  },
  {
    "label": "MidInline()",
    "kind": "Method",
    "detail": "Function (View .)",
    "insertText": "MidInline(InOffset, InSize)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "Min(Size, InSize)"
  },
  {
    "label": "LeftChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LeftChopInline(uint64 InSize)"
  },
  {
    "label": "RightInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightInline(uint64 InSize)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const uint64 OldSize = Size ; const uint64 NewSize =)",
    "insertText": "Min(OldSize, InSize)"
  },
  {
    "label": "GetDataAtOffsetNoCheck()",
    "kind": "Method",
    "detail": "Function (Data =)",
    "insertText": "GetDataAtOffsetNoCheck(OldSize - NewSize)"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (Size = NewSize ; } void)",
    "insertText": "RightChopInline(uint64 InSize)"
  },
  {
    "label": "GetDataAtOffsetNoCheck()",
    "kind": "Method",
    "detail": "Function (Data =)",
    "insertText": "GetDataAtOffsetNoCheck(Offset)"
  },
  {
    "label": "MidInline()",
    "kind": "Method",
    "detail": "Function (Size - = Offset ; } void)",
    "insertText": "MidInline(uint64 InOffset, uint64 InSize = TNumericLimits<uint64>::Max())"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RightChopInline(InOffset)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} template<OtherDataType> [ [ nodiscard ] ] bool)",
    "insertText": "Contains(const TMemoryView<OtherDataType>& InView)"
  },
  {
    "label": "Intersects()",
    "kind": "Method",
    "detail": "Function (} template<OtherDataType> [ [ nodiscard ] ] bool)",
    "insertText": "Intersects(const TMemoryView<OtherDataType>& InView)"
  },
  {
    "label": "CompareBytes()",
    "kind": "Method",
    "detail": "Function (} template<OtherDataType> [ [ nodiscard ] ] int32)",
    "insertText": "CompareBytes(const TMemoryView<OtherDataType>& InView)"
  },
  {
    "label": "Memcmp()",
    "kind": "Method",
    "detail": "Function (const int32 Compare = Data = = InView . Data ? 0 :)",
    "insertText": "Memcmp(Data, InView.Data, FMath::Min(Size, InView.Size))"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} template<OtherDataType> [ [ nodiscard ] ] bool)",
    "insertText": "Equals(const TMemoryView<OtherDataType>& InView)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDataType> [ [ nodiscard ] ] bool)",
    "insertText": "operator(const TMemoryView<OtherDataType>& InView)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMemoryView&)",
    "insertText": "operator(uint64 InOffset)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, InView.Data, InView.Size)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "RightChop(InView.Size)"
  },
  {
    "label": "GetDataAtOffsetNoCheck()",
    "kind": "Method",
    "detail": "Function (} private : [ [ nodiscard ] ] DataType*)",
    "insertText": "GetDataAtOffsetNoCheck(uint64 InOffset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDataType> class TMemoryView ; private : DataType* Data = nullptr ; uint64 Size = 0 ; } ; template<DataType> [ [ nodiscard ] ] TMemoryView<DataType>)",
    "insertText": "operator(const TMemoryView<DataType>& View, uint64 Offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<DataType> [ [ nodiscard ] ] TMemoryView<DataType>)",
    "insertText": "operator(uint64 Offset, const TMemoryView<DataType>& View)"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TMemoryView<void>)",
    "insertText": "MakeMemoryView(void* Data, uint64 Size)"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TMemoryView<const void>)",
    "insertText": "MakeMemoryView(const void* Data, uint64 Size)"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (} template<DataType,DataEndType> [ [ nodiscard ] ] auto)",
    "insertText": "MakeMemoryView(DataType* Data, DataEndType* DataEnd)"
  },
  {
    "label": "VoidType()",
    "kind": "Method",
    "detail": "Function (using VoidType = std::conditional_t<std::is_const_v<DataType> | | std::is_const_v<DataEndType>,const void,void> ; return TMemoryView<)",
    "insertText": "VoidType(Data, DataEnd)"
  },
  {
    "label": "MakeMemoryView()",
    "kind": "Method",
    "detail": "Function (} template<T> [ [ nodiscard ] ] TMemoryView<const void>)",
    "insertText": "MakeMemoryView(std::initializer_list<typename TIdentity<T>::Type> List)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<ContainerType)",
    "insertText": "UE_REQUIRES(TIsContiguousContainer<ContainerType>::Value) > [[nodiscard]] constexpr inline auto MakeMemoryView(ContainerType&& Container)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using ElementType = TRemovePointer<)",
    "insertText": "decltype(GetData(DeclVal<ContainerType>()))"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (bool bIsConst = TIsConst<ElementType>::Value ; using DataType = std::conditional_t<bIsConst,const void,void> ; return TMemoryView<)",
    "insertText": "DataType(GetData(Container), GetNum(Container) * sizeof(ElementType))"
  }
]