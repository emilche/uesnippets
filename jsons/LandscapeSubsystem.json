[
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "IConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleVariable"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "FLandscapeNotificationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeNotificationManager"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "FLandscapeGrassMapsBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeGrassMapsBuilder"
  },
  {
    "label": "FLandscapeTextureStreamingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeTextureStreamingManager"
  },
  {
    "label": "FActionableMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActionableMessage"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FScopedSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSlowTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FOnHeightmapStreamedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnHeightmapStreamedContext"
  },
  {
    "label": "ULandscapeSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSubsystem"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FLandscapePhysicalMaterialBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapePhysicalMaterialBuilder"
  },
  {
    "label": "MarkModifiedLandscapesAsDirty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" LandscapeSubsystem . generated . h \" class ALandscapeProxy ; class ALandscape ; class AWorldSettings ; class IConsoleVariable ; class ULandscapeInfo ; class FLandscapeNotificationManager ; class ULandscapeComponent ; class FLandscapeGrassMapsBuilder ; class FLandscapeTextureStreamingManager ; struct FActionableMessage ; struct FDateTime ; struct FScopedSlowTask ; namespace UE::Landscape { enum class EOutdatedDataFlags : uint8 ; # if WITH_EDITOR void)",
    "insertText": "MarkModifiedLandscapesAsDirty()"
  },
  {
    "label": "BuildGrassMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildGrassMaps()"
  },
  {
    "label": "BuildPhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPhysicalMaterial()"
  },
  {
    "label": "BuildNanite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNanite()"
  },
  {
    "label": "BuildAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAll()"
  },
  {
    "label": "GetUpdateRegion()",
    "kind": "Method",
    "detail": "Function (# endif } # if WITH_EDITOR struct FOnHeightmapStreamedContext { private : const FBox2D& UpdateRegion ; const TSet<class ULandscapeComponent*>& LandscapeComponentsInvolved ; public : const FBox2D&)",
    "insertText": "GetUpdateRegion()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnHeightmapStreamedDelegate, const FOnHeightmapStreamedContext& context)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ULandscapeSubsystem()"
  },
  {
    "label": "ULandscapeSubsystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ULandscapeSubsystem()"
  },
  {
    "label": "RegisterActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActor(ALandscapeProxy* Proxy)"
  },
  {
    "label": "UnregisterActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterActor(ALandscapeProxy* Proxy)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "DoesSupportWorldType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportWorldType(const EWorldType::Type WorldType)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "PrioritizeGrassCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeGrassCreation(bool bPrioritizeGrassCreation)"
  },
  {
    "label": "IsGrassCreationPrioritized()",
    "kind": "Method",
    "detail": "Function (bIsGrassCreationPrioritized = bPrioritizeGrassCreation ; } bool)",
    "insertText": "IsGrassCreationPrioritized()"
  },
  {
    "label": "RemoveGrassInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGrassInstances(const TSet<ULandscapeComponent*>* ComponentsToRemoveGrassInstances = nullptr)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponent(ULandscapeComponent* Component)"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent(ULandscapeComponent* Component)"
  },
  {
    "label": "BuildNanite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildNanite(TArrayView<ALandscapeProxy*> InProxiesToBuild = TArrayView<ALandscapeProxy*>(), bool bForceRebuild = false)"
  },
  {
    "label": "GetOutdatedProxyDetails()",
    "kind": "Method",
    "detail": "Function (TArray<TTuple<ALandscapeProxy*,UE::Landscape::EOutdatedDataFlags>>)",
    "insertText": "GetOutdatedProxyDetails(UE::Landscape::EOutdatedDataFlags InMatchingOutdatedDataFlags, bool bInMustMatchAllFlags)"
  },
  {
    "label": "IsGridBased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGridBased()"
  },
  {
    "label": "ChangeGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeGridSize(ULandscapeInfo* LandscapeInfo, uint32 NewGridSizeInComponents)"
  },
  {
    "label": "FindOrAddLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "FindOrAddLandscapeProxy(ULandscapeInfo* LandscapeInfo, const FIntPoint& SectionBase)"
  },
  {
    "label": "GetActionableMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetActionableMessage(FActionableMessage& OutActionableMessage)"
  },
  {
    "label": "SaveModifiedLandscapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveModifiedLandscapes()"
  },
  {
    "label": "HasModifiedLandscapes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasModifiedLandscapes()"
  },
  {
    "label": "GetDirtyOnlyInMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDirtyOnlyInMode()"
  },
  {
    "label": "GetNotificationManager()",
    "kind": "Method",
    "detail": "Function (FLandscapeNotificationManager*)",
    "insertText": "GetNotificationManager()"
  },
  {
    "label": "AddAsyncEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncEvent(FGraphEventRef GraphEventRef)"
  },
  {
    "label": "IsMultithreadedNaniteBuildEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultithreadedNaniteBuildEnabled()"
  },
  {
    "label": "IsLiveNaniteRebuildEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLiveNaniteRebuildEnabled()"
  },
  {
    "label": "AreNaniteBuildsInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreNaniteBuildsInProgress()"
  },
  {
    "label": "IncNaniteBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncNaniteBuild()"
  },
  {
    "label": "DecNaniteBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecNaniteBuild()"
  },
  {
    "label": "WaitLaunchNaniteBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitLaunchNaniteBuild()"
  },
  {
    "label": "ForEachLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "ForEachLandscapeInfo(TFunctionRef<bool(ULandscapeInfo*)> ForEachLandscapeInfoFunc)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "OnNaniteWorldSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNaniteWorldSettingsChanged(AWorldSettings* WorldSettings)"
  },
  {
    "label": "RegenerateGrass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateGrass(true, true)"
  },
  {
    "label": "OnNaniteEnabledChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNaniteEnabledChanged(IConsoleVariable*)"
  },
  {
    "label": "HandlePostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostGarbageCollect()"
  }
]