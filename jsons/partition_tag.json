[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_TAG_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_TAG_H_ # include<string . h> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_alloc_notreached . h \" # include \" base / allocator / partition_allocator / partition_cookie . h \" # include \" base / allocator / partition_allocator / partition_page . h \" # include \" base / allocator / partition_allocator / partition_tag_bitmap . h \" # include \" base / allocator / partition_allocator / partition_tag_types . h \" # include \" base / allocator / partition_allocator / reservation_offset_table . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" namespace partition_alloc { # if)",
    "insertText": "defined(PA_ENABLE_MTE_CHECKED_PTR_SUPPORT_WITH_64_BITS_POINTERS) static_assert( sizeof(PartitionTag) == internal::tag_bitmap::kPartitionTagSize, \"sizeof(PartitionTag) must be equal to bitmap::kPartitionTagSize.\")"
  },
  {
    "label": "NormalBucketPartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionTag*)",
    "insertText": "NormalBucketPartitionTagPointer(uintptr_t addr)"
  },
  {
    "label": "SuperPageTagBitmapAddr()",
    "kind": "Method",
    "detail": "Function (uintptr_t bitmap_base =)",
    "insertText": "SuperPageTagBitmapAddr(addr & internal::kSuperPageBaseMask)"
  },
  {
    "label": "PartitionPageSize()",
    "kind": "Method",
    "detail": "Function (const size_t bitmap_end_offset =)",
    "insertText": "PartitionPageSize() + internal::ReservedTagBitmapSize()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((addr & internal::kSuperPageOffsetMask) >= bitmap_end_offset)"
  },
  {
    "label": "offset_in_super_page()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "offset_in_super_page(addr & internal::kSuperPageOffsetMask)"
  },
  {
    "label": "PartitionTag()",
    "kind": "Method",
    "detail": "Function (size_t offset_in_bitmap = offset_in_super_page>> internal::tag_bitmap::kBytesPerPartitionTagShift<<internal::tag_bitmap::kPartitionTagSizeShift ; return reinterpret_cast<)",
    "insertText": "PartitionTag(bitmap_base + offset_in_bitmap)"
  },
  {
    "label": "DirectMapPartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE PartitionTag*)",
    "insertText": "DirectMapPartitionTagPointer(uintptr_t addr)"
  },
  {
    "label": "GetDirectMapReservationStart()",
    "kind": "Method",
    "detail": "Function (uintptr_t first_super_page =)",
    "insertText": "GetDirectMapReservationStart(addr)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(first_super_page)"
  },
  {
    "label": "GetSubsequentPageMetadata()",
    "kind": "Method",
    "detail": "Function (auto* subsequent_page_metadata =)",
    "insertText": "GetSubsequentPageMetadata(internal::PartitionSuperPageToMetadataArea<internal::ThreadSafe>( first_super_page))"
  },
  {
    "label": "NormalBucketPartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "NormalBucketPartitionTagPointer(addr)"
  },
  {
    "label": "PartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE PartitionTag*)",
    "insertText": "PartitionTagPointer(const void* ptr)"
  },
  {
    "label": "DirectMapPartitionTagSetValue()",
    "kind": "Method",
    "detail": "Function (} namespace internal { PA_ALWAYS_INLINE void)",
    "insertText": "DirectMapPartitionTagSetValue(uintptr_t addr, PartitionTag value)"
  },
  {
    "label": "DirectMapPartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "DirectMapPartitionTagPointer(addr)"
  },
  {
    "label": "NormalBucketPartitionTagSetValue()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "NormalBucketPartitionTagSetValue(uintptr_t slot_start, size_t size, PartitionTag value)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((size % tag_bitmap::kBytesPerPartitionTag) == 0)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK((slot_start % tag_bitmap::kBytesPerPartitionTag) == 0)"
  },
  {
    "label": "NormalBucketPartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (size_t tag_count = size>> tag_bitmap::kBytesPerPartitionTagShift ; PartitionTag* tag_ptr =)",
    "insertText": "NormalBucketPartitionTagPointer(slot_start)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(tag_ptr, value, tag_count)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "while(tag_count-- > 0)"
  },
  {
    "label": "PartitionTagGetValue()",
    "kind": "Method",
    "detail": "Function (} } PA_ALWAYS_INLINE PartitionTag)",
    "insertText": "PartitionTagGetValue(void* ptr)"
  },
  {
    "label": "PartitionTagIncrementValue()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "PartitionTagIncrementValue(uintptr_t slot_start, size_t size)"
  },
  {
    "label": "PartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (PartitionTag tag =*)",
    "insertText": "PartitionTagPointer(slot_start)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (PartitionTag new_tag = tag ; + + new_tag ; new_tag + = ! new_tag ; # if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) PA_DCHECK(internal::IsManagedByNormalBuckets(slot_start))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(tag == *tag_ptr)"
  },
  {
    "label": "NormalBucketPartitionTagSetValue()",
    "kind": "Method",
    "detail": "Function (tag_ptr + + ; } # endif)",
    "insertText": "NormalBucketPartitionTagSetValue(slot_start, size, new_tag)"
  },
  {
    "label": "PartitionTagPointer()",
    "kind": "Method",
    "detail": "Function (} } # else PA_ALWAYS_INLINE PartitionTag*)",
    "insertText": "PartitionTagPointer(void* ptr)"
  },
  {
    "label": "PA_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_NOTREACHED()"
  }
]