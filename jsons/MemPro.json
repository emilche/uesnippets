[
  {
    "label": "PageState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PageState"
  },
  {
    "label": "PageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PageType"
  },
  {
    "label": "EPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlatform"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "MemProGLobalScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemProGLobalScope"
  },
  {
    "label": "Initialise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialise(bool wait_for_connect=false)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "TrackAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackAlloc(void* p, size_t size, bool wait_for_connect=false)"
  },
  {
    "label": "TrackFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackFree(void* p, bool wait_for_connect=false)"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "SetPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPaused(bool paused)"
  },
  {
    "label": "TakeSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeSnapshot(bool send_memory=false)"
  },
  {
    "label": "FlushDumpFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDumpFile()"
  },
  {
    "label": "IncRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncRef()"
  },
  {
    "label": "DecRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecRef()"
  },
  {
    "label": "CreateLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLock(void* p_os_lock_mem, int os_lock_mem_size)"
  },
  {
    "label": "DestroyLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyLock(void* p_os_lock_mem)"
  },
  {
    "label": "TakeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeLock(void* p_os_lock_mem)"
  },
  {
    "label": "ReleaseLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseLock(void* p_os_lock_mem)"
  },
  {
    "label": "UninitialiseSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitialiseSockets()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSocket(void* p_os_socket_mem, int os_socket_mem_size)"
  },
  {
    "label": "IsValidSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSocket(const void* p_os_socket_mem)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect(void* p_os_socket_mem)"
  },
  {
    "label": "StartListening()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListening(void* p_os_socket_mem)"
  },
  {
    "label": "BindSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindSocket(void* p_os_socket_mem, const char* p_port)"
  },
  {
    "label": "AcceptSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcceptSocket(void* p_os_socket_mem, void* p_client_os_socket_mem)"
  },
  {
    "label": "SocketSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SocketSend(void* p_os_socket_mem, void* p_buffer, int size)"
  },
  {
    "label": "SocketReceive()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SocketReceive(void* p_os_socket_mem, void* p_buffer, int size)"
  },
  {
    "label": "MemProCreateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProCreateEvent(\n\t\t\tvoid* p_os_event_mem,\n\t\t\tint os_event_mem_size,\n\t\t\tbool initial_state,\n\t\t\tbool auto_reset)"
  },
  {
    "label": "DestroyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEvent(void* p_os_event_mem)"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvent(void* p_os_event_mem)"
  },
  {
    "label": "ResetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEvent(void* p_os_event_mem)"
  },
  {
    "label": "WaitEvent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WaitEvent(void* p_os_event_mem, int timeout)"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateThread(void* p_os_thread_mem, int os_thread_mem_size)"
  },
  {
    "label": "DestroyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyThread(void* p_os_thread_mem)"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartThread(void* p_os_thread_mem, ThreadMain p_thread_main, void* p_param)"
  },
  {
    "label": "IsThreadAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadAlive(const void* p_os_thread_mem)"
  },
  {
    "label": "MemProInterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MemProInterlockedCompareExchange(int64 volatile *dest, int64 exchange, int64 comperand)"
  },
  {
    "label": "MemProInterlockedExchangeAdd()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MemProInterlockedExchangeAdd(int64 volatile *Addend, int64 Value)"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEndian(unsigned int& value)"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEndian(uint64& value)"
  },
  {
    "label": "DebugBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugBreak()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* p, int size)"
  },
  {
    "label": "GetHiResTimer()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetHiResTimer()"
  },
  {
    "label": "GetHiResTimerFrequency()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetHiResTimerFrequency()"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadName(unsigned int thread_id, const char* p_name)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(int ms)"
  },
  {
    "label": "GetStackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStackTrace(void** stack, int& stack_size, unsigned int& hash)"
  },
  {
    "label": "SendPageState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPageState(\n\t\t\tbool send_memory,\n\t\t\tSendPageStateFunction send_page_state_function,\n\t\t\tvoid* p_context)"
  },
  {
    "label": "GetVirtualMemStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVirtualMemStats(size_t& reserved, size_t& committed)"
  },
  {
    "label": "GetExtraModuleInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetExtraModuleInfo(\n\t\t\tint64 ModuleBase,\n\t\t\tint& age,\n\t\t\tvoid* p_guid,\n\t\t\tint guid_size,\n\t\t\tchar* p_pdb_filename,\n\t\t\tint pdb_filename_size)"
  },
  {
    "label": "MemProEnumerateLoadedModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProEnumerateLoadedModules(\n\t\t\tEnumerateLoadedModulesCallbackFunction p_callback_function,\n\t\t\tvoid* p_context)"
  },
  {
    "label": "DebugWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugWrite(const char* p_message)"
  },
  {
    "label": "MemProMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProMemoryBarrier()"
  },
  {
    "label": "GetPlatform()",
    "kind": "Method",
    "detail": "Function (EPlatform)",
    "insertText": "GetPlatform()"
  },
  {
    "label": "GetStackTraceSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStackTraceSize()"
  },
  {
    "label": "MemCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemCpy(void* p_dest, int dest_size, const void* p_source, int source_size)"
  },
  {
    "label": "SPrintF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SPrintF(char* p_dest, int dest_size, const char* p_format, const char* p_str)"
  },
  {
    "label": "MemProCreateFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProCreateFile(void* p_os_file_mem, int os_file_mem_size)"
  },
  {
    "label": "DestroyFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyFile(void* p_os_file_mem)"
  },
  {
    "label": "OpenFileForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileForWrite(void* p_os_file_mem, const char* p_filename)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFile(void* p_os_file_mem)"
  },
  {
    "label": "FlushFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushFile(void* p_os_file_mem)"
  },
  {
    "label": "WriteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFile(void* p_os_file_mem, const void* p_data, int size)"
  },
  {
    "label": "GetDumpFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDumpFilename(char* p_filename, int max_length)"
  },
  {
    "label": "CreateLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLock(void* p_os_lock_mem, int os_lock_mem_size)"
  },
  {
    "label": "DestroyLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyLock(void* p_os_lock_mem)"
  },
  {
    "label": "TakeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeLock(void* p_os_lock_mem)"
  },
  {
    "label": "ReleaseLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseLock(void* p_os_lock_mem)"
  },
  {
    "label": "InitialiseSockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitialiseSockets()"
  },
  {
    "label": "UninitialiseSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitialiseSockets()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSocket(void* p_os_socket_mem, int os_socket_mem_size)"
  },
  {
    "label": "IsValidSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSocket(const void* p_os_socket_mem)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect(void* p_os_socket_mem)"
  },
  {
    "label": "StartListening()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListening(void* p_os_socket_mem)"
  },
  {
    "label": "BindSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindSocket(void* p_os_socket_mem, const char* p_port)"
  },
  {
    "label": "AcceptSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcceptSocket(void* p_os_socket_mem, void* p_client_os_socket_mem)"
  },
  {
    "label": "SocketSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SocketSend(void* p_os_socket_mem, void* p_buffer, int size)"
  },
  {
    "label": "SocketReceive()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SocketReceive(void* p_os_socket_mem, void* p_buffer, int size)"
  },
  {
    "label": "MemProCreateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProCreateEvent(\n\t\t\tvoid* p_os_event_mem,\n\t\t\tint os_event_mem_size,\n\t\t\tbool initial_state,\n\t\t\tbool auto_reset)"
  },
  {
    "label": "DestroyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEvent(void* p_os_event_mem)"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvent(void* p_os_event_mem)"
  },
  {
    "label": "ResetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEvent(void* p_os_event_mem)"
  },
  {
    "label": "WaitEvent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WaitEvent(void* p_os_event_mem, int timeout)"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateThread(void* p_os_thread_mem, int os_thread_mem_size)"
  },
  {
    "label": "DestroyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyThread(void* p_os_thread_mem)"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartThread(void* p_os_thread_mem, ThreadMain p_thread_main, void* p_param)"
  },
  {
    "label": "IsThreadAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadAlive(const void* p_os_thread_mem)"
  },
  {
    "label": "MemProInterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MemProInterlockedCompareExchange(int64 volatile *dest, int64 exchange, int64 comperand)"
  },
  {
    "label": "MemProInterlockedExchangeAdd()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MemProInterlockedExchangeAdd(int64 volatile *Addend, int64 Value)"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEndian(unsigned int& value)"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEndian(uint64& value)"
  },
  {
    "label": "DebugBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugBreak()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* p, int size)"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadName(unsigned int thread_id, const char* p_name)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(int ms)"
  },
  {
    "label": "SendPageState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPageState(\n\t\t\tbool send_memory,\n\t\t\tSendPageStateFunction send_page_state_function,\n\t\t\tvoid* p_context)"
  },
  {
    "label": "GetVirtualMemStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVirtualMemStats(size_t& reserved, size_t& committed)"
  },
  {
    "label": "GetExtraModuleInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetExtraModuleInfo(\n\t\t\tint64 ModuleBase,\n\t\t\tint& age,\n\t\t\tvoid* p_guid,\n\t\t\tint guid_size,\n\t\t\tchar* p_pdb_filename,\n\t\t\tint pdb_filename_size)"
  },
  {
    "label": "MemProEnumerateLoadedModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProEnumerateLoadedModules(EnumerateLoadedModulesCallbackFunction p_callback_function, void* p_context)"
  },
  {
    "label": "DebugWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugWrite(const char* p_message)"
  },
  {
    "label": "MemCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemCpy(void* p_dest, int dest_size, const void* p_source, int source_size)"
  },
  {
    "label": "SPrintF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SPrintF(char* p_dest, int dest_size, const char* p_format, const char* p_str)"
  },
  {
    "label": "MemProCreateFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProCreateFile(void* p_os_file_mem, int os_file_mem_size)"
  },
  {
    "label": "DestroyFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyFile(void* p_os_file_mem)"
  },
  {
    "label": "OpenFileForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileForWrite(void* p_os_file_mem, const char* p_filename)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFile(void* p_os_file_mem)"
  },
  {
    "label": "FlushFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushFile(void* p_os_file_mem)"
  },
  {
    "label": "WriteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFile(void* p_os_file_mem, const void* p_data, int size)"
  },
  {
    "label": "GetDumpFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDumpFilename(char* p_filename, int max_length)"
  }
]