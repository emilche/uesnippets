[
  {
    "label": "PageState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PageState"
  },
  {
    "label": "PageType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PageType"
  },
  {
    "label": "EPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlatform"
  },
  {
    "label": "MemProGLobalScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemProGLobalScope"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MEMPRO_MEMPRO_H_INCLUDED # define MEMPRO_MEMPRO_H_INCLUDED # if !)",
    "insertText": "defined(__UNREAL__) #define MEMPRO_ENABLED 1 #elif !defined(MEMPRO_ENABLED) #define MEMPRO_ENABLED 0 #endif #if defined(__UNREAL__) && MEMPRO_ENABLED && !defined(WITH_ENGINE) #undef MEMPRO_ENABLED #define MEMPRO_ENABLED 0 #endif #if defined(__UNREAL__) #include \"CoreTypes.h\" #include \"HAL/PlatformMisc.h\" #endif #if defined(MEMPRO_PLATFORM_XBOXONE) #elif defined(MEMPRO_PLATFORM_PS4) #elif defined(MEMPRO_PLATFORM_EXTENSION) #elif defined(_WIN32) || defined(_WIN64) || defined(WIN32) || defined(WIN64) || defined(__WIN32__) #if defined(_XBOX_ONE) #define MEMPRO_PLATFORM_XBOXONE #elif defined(_XBOX) #define MEMPRO_PLATFORM_XBOX360 #else #define MEMPRO_PLATFORM_WIN #endif #elif defined(__APPLE__) #define MEMPRO_PLATFORM_APPLE #else #define MEMPRO_PLATFORM_UNIX #endif #if MEMPRO_ENABLED #ifndef WAIT_FOR_CONNECT #define WAIT_FOR_CONNECT false #endif #define MEMPRO_TRACK_ALLOC(p, size) MemPro::TrackAlloc(p, size, WAIT_FOR_CONNECT) #define MEMPRO_TRACK_FREE(p) MemPro::TrackFree(p, WAIT_FOR_CONNECT) #else #define MEMPRO_TRACK_ALLOC(p, size) ((void)0) #define MEMPRO_TRACK_FREE(p) ((void)0) #endif #if MEMPRO_ENABLED #define MEMPRO_INIT_DELAY 100 #define MEMPRO_CONNECT_TIMEOUT 500 #include <stdlib.h> #if defined(__UNREAL__) && !defined(MEMPRO_WRITE_DUMP) #define MEMPRO_WRITE_DUMP #endif #if defined(MEMPRO_WRITE_DUMP) && defined(DISALLOW_WRITE_DUMP) #error #endif #define MEMPRO_ASSERT(b) if(!(b)) Platform::DebugBreak()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef long long int64 ; typedef unsigned long long uint64 ; enum PageState { Invalid = - 1,Free,Reserved,Committed } ; enum PageType { page_Unknown = - 1,page_Image,page_Mapped,page_Private } ; enum EPlatform { Platform_Windows,Platform_Unix,Platform_PS4,} ; typedef)",
    "insertText": "int(*ThreadMain)(void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*SendPageStateFunction)(void*, size_t, PageState, PageType, unsigned int, bool, int, void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*EnumerateLoadedModulesCallbackFunction)(int64, const char*, void*)"
  },
  {
    "label": "Initialise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialise(bool wait_for_connect=false)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "TrackAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackAlloc(void* p, size_t size, bool wait_for_connect=false)"
  },
  {
    "label": "TrackFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackFree(void* p, bool wait_for_connect=false)"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "SetPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPaused(bool paused)"
  },
  {
    "label": "TakeSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeSnapshot(bool send_memory=false)"
  },
  {
    "label": "FlushDumpFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDumpFile()"
  },
  {
    "label": "IncRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncRef()"
  },
  {
    "label": "DecRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecRef()"
  },
  {
    "label": "MemProGLobalScope()",
    "kind": "Method",
    "detail": "Function (} # ifndef MEMPRO_WRITE_DUMP namespace { class MemProGLobalScope { public :)",
    "insertText": "MemProGLobalScope()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; MemProGLobalScope g_MemProGLobalScope ; } # endif # if MEMPRO_ENABLED # if)",
    "insertText": "defined(MEMPRO_PLATFORM_WIN) #define MEMPRO_WIN_BASED_PLATFORM #define MEMPRO_INTERLOCKED_ALIGN __declspec(align(8)) #define MEMPRO_INSTRUCTION_BARRIER #define MEMPRO_ENABLE_WARNING_PRAGMAS #define MEMPRO_PUSH_WARNING_DISABLE __pragma(warning(push)) #define MEMPRO_DISABLE_WARNING(w) __pragma(warning(disable : w)) #define MEMPRO_POP_WARNING_DISABLE __pragma(warning(pop)) #define MEMPRO_FORCEINLINE FORCEINLINE #define ENUMERATE_ALL_MODULES #define THREAD_LOCAL_STORAGE __declspec(thread) #define MEMPRO_PORT \"27016\" #define STACK_TRACE_SIZE 128 #define MEMPRO_PAGE_SIZE 4096 #define MEMPRO_ALIGN_SUFFIX(n) #if defined(_WIN64) || defined(__LP64__) || defined(__x86_64__) || defined(__ppc64__) #define MEMPRO64 #endif #ifdef MEMPRO64 #define MEMPRO_MAX_ADDRESS ULLONG_MAX #else #define MEMPRO_MAX_ADDRESS UINT_MAX #endif #ifdef __UNREAL__ #include \"Windows/AllowWindowsPlatformTypes.h\" #endif #ifndef MEMPRO_WRITE_DUMP #if defined(UNICODE) && !defined(_UNICODE) #error for unicode builds please define both UNICODE and _UNICODE. See the FAQ for more details. #endif #if defined(AF_IPX) && !defined(_WINSOCK2API_) #error winsock already defined. Please include winsock2.h before including windows.h or use WIN32_LEAN_AND_MEAN. See the FAQ for more info. #endif #pragma warning(push) #pragma warning(disable : 4668) #include <winsock2.h> #pragma warning(pop) #include <ws2tcpip.h> #ifndef _WIN32_WINNT #define _WIN32_WINNT 0x0501 #endif #endif #define WINDOWS_LEAN_AND_MEAN #include <windows.h> #include <intrin.h> #ifdef ENUMERATE_ALL_MODULES #pragma warning(push) #pragma warning(disable : 4091) #include <Dbghelp.h> #pragma warning(pop) #pragma comment(lib, \"Dbghelp.lib\") #endif #ifdef __UNREAL__ #include \"Windows/HideWindowsPlatformTypes.h\" #endif #elif defined(MEMPRO_PLATFORM_EXTENSION) && defined(__UNREAL__) #include COMPILED_PLATFORM_HEADER_WITH_PREFIX(MemPro,MemProExt.h) #elif defined(MEMPRO_PLATFORM_XBOXONE) #ifdef __UNREAL__ #include \"MemPro/MemProXboxOne.h\" #else #include \"MemProXboxOne.hpp\" #endif #elif defined(MEMPRO_PLATFORM_XBOX360) #include \"MemProXbox360.hpp\" #elif defined(MEMPRO_PLATFORM_PS4) #ifdef __UNREAL__ #include \"MemPro/MemProPS4.h\" #else #include \"MemProPS4.hpp\" #endif #elif defined(MEMPRO_PLATFORM_UNIX) #define MEMPRO_UNIX_BASED_PLATFORM #define MEMPRO_INTERLOCKED_ALIGN #define MEMPRO_INSTRUCTION_BARRIER #define MEMPRO_PUSH_WARNING_DISABLE #define MEMPRO_DISABLE_WARNING(w) #define MEMPRO_POP_WARNING_DISABLE #define MEMPRO_FORCEINLINE inline #define ENUMERATE_ALL_MODULES #define THREAD_LOCAL_STORAGE __thread #define MEMPRO_PORT \"27016\" #define STACK_TRACE_SIZE 128 #define MEMPRO_ALIGN_SUFFIX(n) __attribute__ ((aligned(n))) #if defined(__LP64__) || defined(__x86_64__) || defined(__ppc64__) #define MEMPRO64 #endif #elif defined(MEMPRO_PLATFORM_APPLE) #define MEMPRO_UNIX_BASED_PLATFORM #define MEMPRO_INTERLOCKED_ALIGN #define MEMPRO_INSTRUCTION_BARRIER #define MEMPRO_PUSH_WARNING_DISABLE #define MEMPRO_DISABLE_WARNING(w) #define MEMPRO_POP_WARNING_DISABLE #define MEMPRO_FORCEINLINE inline #define ENUMERATE_ALL_MODULES #define THREAD_LOCAL_STORAGE __thread #define MEMPRO_PORT \"27016\" #define STACK_TRACE_SIZE 128 #define MEMPRO_ALIGN_SUFFIX(n) __attribute__ ((aligned(n))) #if defined(__LP64__) || defined(__x86_64__) || defined(__ppc64__) #define MEMPRO64 #endif #ifdef OVERRIDE_NEW_DELETE void* operator new(std::size_t size) throw(std::bad_alloc)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (void* p =)",
    "insertText": "malloc(size)"
  },
  {
    "label": "MEMPRO_TRACK_ALLOC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MEMPRO_TRACK_ALLOC(p, size)"
  },
  {
    "label": "MEMPRO_TRACK_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MEMPRO_TRACK_FREE(p)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(p)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* p, const std::nothrow_t&) throw()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(std::size_t size) throw(std::bad_alloc)"
  },
  {
    "label": "CreateLock()",
    "kind": "Method",
    "detail": "Function (} # endif # else # error # endif namespace MemPro { namespace Platform { void)",
    "insertText": "CreateLock(void* p_os_lock_mem, int os_lock_mem_size)"
  },
  {
    "label": "DestroyLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyLock(void* p_os_lock_mem)"
  },
  {
    "label": "TakeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeLock(void* p_os_lock_mem)"
  },
  {
    "label": "ReleaseLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseLock(void* p_os_lock_mem)"
  },
  {
    "label": "UninitialiseSockets()",
    "kind": "Method",
    "detail": "Function (# ifndef MEMPRO_WRITE_DUMP void)",
    "insertText": "UninitialiseSockets()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSocket(void* p_os_socket_mem, int os_socket_mem_size)"
  },
  {
    "label": "IsValidSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSocket(const void* p_os_socket_mem)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect(void* p_os_socket_mem)"
  },
  {
    "label": "StartListening()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListening(void* p_os_socket_mem)"
  },
  {
    "label": "BindSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindSocket(void* p_os_socket_mem, const char* p_port)"
  },
  {
    "label": "AcceptSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcceptSocket(void* p_os_socket_mem, void* p_client_os_socket_mem)"
  },
  {
    "label": "SocketSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SocketSend(void* p_os_socket_mem, void* p_buffer, int size)"
  },
  {
    "label": "SocketReceive()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SocketReceive(void* p_os_socket_mem, void* p_buffer, int size)"
  },
  {
    "label": "MemProCreateEvent()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "MemProCreateEvent(void* p_os_event_mem, int os_event_mem_size, bool initial_state, bool auto_reset)"
  },
  {
    "label": "DestroyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEvent(void* p_os_event_mem)"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvent(void* p_os_event_mem)"
  },
  {
    "label": "ResetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEvent(void* p_os_event_mem)"
  },
  {
    "label": "WaitEvent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WaitEvent(void* p_os_event_mem, int timeout)"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateThread(void* p_os_thread_mem, int os_thread_mem_size)"
  },
  {
    "label": "DestroyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyThread(void* p_os_thread_mem)"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartThread(void* p_os_thread_mem, ThreadMain p_thread_main, void* p_param)"
  },
  {
    "label": "IsThreadAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadAlive(const void* p_os_thread_mem)"
  },
  {
    "label": "MemProInterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MemProInterlockedCompareExchange(int64 volatile *dest, int64 exchange, int64 comperand)"
  },
  {
    "label": "MemProInterlockedExchangeAdd()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "MemProInterlockedExchangeAdd(int64 volatile *Addend, int64 Value)"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEndian(unsigned int& value)"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEndian(uint64& value)"
  },
  {
    "label": "DebugBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugBreak()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(int size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* p, int size)"
  },
  {
    "label": "GetHiResTimer()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetHiResTimer()"
  },
  {
    "label": "GetHiResTimerFrequency()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetHiResTimerFrequency()"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadName(unsigned int thread_id, const char* p_name)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(int ms)"
  },
  {
    "label": "GetStackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStackTrace(void** stack, int& stack_size, unsigned int& hash)"
  },
  {
    "label": "SendPageState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPageState(bool send_memory, SendPageStateFunction send_page_state_function, void* p_context)"
  },
  {
    "label": "GetVirtualMemStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVirtualMemStats(size_t& reserved, size_t& committed)"
  },
  {
    "label": "GetExtraModuleInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetExtraModuleInfo(int64 ModuleBase, int& age, void* p_guid, int guid_size, char* p_pdb_filename, int pdb_filename_size)"
  },
  {
    "label": "MemProEnumerateLoadedModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProEnumerateLoadedModules(EnumerateLoadedModulesCallbackFunction p_callback_function, void* p_context)"
  },
  {
    "label": "DebugWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugWrite(const char* p_message)"
  },
  {
    "label": "MemProMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProMemoryBarrier()"
  },
  {
    "label": "GetPlatform()",
    "kind": "Method",
    "detail": "Function (EPlatform)",
    "insertText": "GetPlatform()"
  },
  {
    "label": "GetStackTraceSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStackTraceSize()"
  },
  {
    "label": "MemCpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemCpy(void* p_dest, int dest_size, const void* p_source, int source_size)"
  },
  {
    "label": "SPrintF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SPrintF(char* p_dest, int dest_size, const char* p_format, const char* p_str)"
  },
  {
    "label": "MemProCreateFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemProCreateFile(void* p_os_file_mem, int os_file_mem_size)"
  },
  {
    "label": "DestroyFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyFile(void* p_os_file_mem)"
  },
  {
    "label": "OpenFileForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileForWrite(void* p_os_file_mem, const char* p_filename)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFile(void* p_os_file_mem)"
  },
  {
    "label": "FlushFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushFile(void* p_os_file_mem)"
  },
  {
    "label": "WriteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFile(void* p_os_file_mem, const void* p_data, int size)"
  },
  {
    "label": "GetDumpFilename()",
    "kind": "Method",
    "detail": "Function (# ifdef MEMPRO_WRITE_DUMP void)",
    "insertText": "GetDumpFilename(char* p_filename, int max_length)"
  },
  {
    "label": "InitialiseSockets()",
    "kind": "Method",
    "detail": "Function (# ifndef MEMPRO_WRITE_DUMP bool)",
    "insertText": "InitialiseSockets()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } } # endif # ifdef OVERRIDE_NEW_DELETE # if)",
    "insertText": "defined(_WIN32) || defined(_WIN64) || defined(WIN32) || defined(WIN64) || defined(__WIN32__) || defined(__WINDOWS__) #include <malloc.h> void* operator new(size_t size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t size)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # ifdef OVERRIDE_MALLOC_FREE # if)",
    "insertText": "defined(_WIN32) || defined(_WIN64) || defined(WIN32) || defined(WIN64) || defined(__WIN32__) || defined(__WINDOWS__) __declspec(restrict) __declspec(noalias) void* malloc(size_t size)"
  },
  {
    "label": "HeapAlloc()",
    "kind": "Method",
    "detail": "Function (void* p =)",
    "insertText": "HeapAlloc(GetProcessHeap(), 0, size)"
  },
  {
    "label": "HeapReAlloc()",
    "kind": "Method",
    "detail": "Function (void* p_new =)",
    "insertText": "HeapReAlloc(GetProcessHeap(), 0, p, new_size)"
  },
  {
    "label": "MEMPRO_TRACK_ALLOC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MEMPRO_TRACK_ALLOC(p_new, new_size)"
  },
  {
    "label": "HeapFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapFree(GetProcessHeap(), 0, p)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (} # else void*)",
    "insertText": "malloc(int size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ptr)(int)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "handle(void*)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptr(void*)dlsym(handle, \"malloc\")"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "p(*ptr)(size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ptr)(void *, int)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptr(void*)dlsym(handle, \"realloc\")"
  },
  {
    "label": "p_new()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "p_new(*ptr)(p, size)"
  },
  {
    "label": "MEMPRO_TRACK_ALLOC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MEMPRO_TRACK_ALLOC(p_new, size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*ptr)(void*)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptr(void*)dlsym(handle, \"free\")"
  }
]