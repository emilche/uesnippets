[
  {
    "label": "AdjustConstness_const()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_FUNCTION_MOCKERS_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_FUNCTION_MOCKERS_H_ # include<functional> # include<utility> # include \" gmock / gmock - spec - builders . h \" # include \" gmock / internal / gmock - internal - utils . h \" namespace testing { namespace internal { template<MockType> const MockType*)",
    "insertText": "AdjustConstness_const(const MockType* mock)"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (} } using internal::FunctionMocker ; # define)",
    "insertText": "GMOCK_RESULT_(tn, ...) \\ tn ::testing::internal::Function<__VA_ARGS__>::Result #define GMOCK_ARG_(tn, N, ...) \\ tn ::testing::internal::Function<__VA_ARGS__>::template Arg<N-1>::type #define GMOCK_MATCHER_(tn, N, ...) \\ const ::testing::Matcher<GMOCK_ARG_(tn, N, __VA_ARGS__)>& #define GMOCK_MOCKER_(arity, constness, Method) \\ GTEST_CONCAT_TOKEN_(gmock##constness##arity##_##Method##_, __LINE__) #define GMOCK_METHOD0_(tn, constness, ct, Method, ...) \\ static_assert(0 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(0, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(0, constness, Method).Invoke()"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method()"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(0, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(0, constness, Method).With()"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> gmock_ # #)",
    "insertText": "Method(\\ const ::testing::internal::WithoutMatchers&, \\ constness ::testing::internal::Function<__VA_ARGS__>*)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method()"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(0, constness, \\ Method) #define GMOCK_METHOD1_(tn, constness, ct, Method, ...) \\ static_assert(1 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(1, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(1, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(1, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(1, constness, Method).With(gmock_a1)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(1, constness, \\ Method) #define GMOCK_METHOD2_(tn, constness, ct, Method, ...) \\ static_assert(2 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(2, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(2, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(2, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(2, constness, Method).With(gmock_a1, gmock_a2)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(2, constness, \\ Method) #define GMOCK_METHOD3_(tn, constness, ct, Method, ...) \\ static_assert(3 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, \\ __VA_ARGS__) gmock_a3)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(3, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(3, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(3, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(3, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(3, constness, \\ Method) #define GMOCK_METHOD4_(tn, constness, ct, Method, ...) \\ static_assert(4 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(4, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(4, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(4, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(4, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(4, constness, \\ Method) #define GMOCK_METHOD5_(tn, constness, ct, Method, ...) \\ static_assert(5 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, \\ __VA_ARGS__) gmock_a5)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(5, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(5, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4), \\ ::std::forward<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(gmock_a5))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, \\ GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(5, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(5, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4, gmock_a5)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 5, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(5, constness, \\ Method) #define GMOCK_METHOD6_(tn, constness, ct, Method, ...) \\ static_assert(6 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, \\ __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, \\ __VA_ARGS__) gmock_a6)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(6, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(6, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4), \\ ::std::forward<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(gmock_a5), \\ ::std::forward<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(gmock_a6))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, \\ GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, \\ GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(6, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(6, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4, gmock_a5, gmock_a6)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 6, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(6, constness, \\ Method) #define GMOCK_METHOD7_(tn, constness, ct, Method, ...) \\ static_assert(7 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, \\ __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(7, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(7, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4), \\ ::std::forward<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(gmock_a5), \\ ::std::forward<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(gmock_a6), \\ ::std::forward<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(gmock_a7))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, \\ GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, \\ GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(7, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(7, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 7, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(7, constness, \\ Method) #define GMOCK_METHOD8_(tn, constness, ct, Method, ...) \\ static_assert(8 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, \\ __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_ARG_(tn, 8, \\ __VA_ARGS__) gmock_a8)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(8, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(8, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4), \\ ::std::forward<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(gmock_a5), \\ ::std::forward<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(gmock_a6), \\ ::std::forward<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(gmock_a7), \\ ::std::forward<GMOCK_ARG_(tn, 8, __VA_ARGS__)>(gmock_a8))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, \\ GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, \\ GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7, \\ GMOCK_MATCHER_(tn, 8, __VA_ARGS__) gmock_a8)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(8, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(8, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7, gmock_a8)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 8, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(8, constness, \\ Method) #define GMOCK_METHOD9_(tn, constness, ct, Method, ...) \\ static_assert(9 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, \\ __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_ARG_(tn, 8, \\ __VA_ARGS__) gmock_a8, GMOCK_ARG_(tn, 9, \\ __VA_ARGS__) gmock_a9)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(9, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(9, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4), \\ ::std::forward<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(gmock_a5), \\ ::std::forward<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(gmock_a6), \\ ::std::forward<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(gmock_a7), \\ ::std::forward<GMOCK_ARG_(tn, 8, __VA_ARGS__)>(gmock_a8), \\ ::std::forward<GMOCK_ARG_(tn, 9, __VA_ARGS__)>(gmock_a9))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, \\ GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, \\ GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7, \\ GMOCK_MATCHER_(tn, 8, __VA_ARGS__) gmock_a8, \\ GMOCK_MATCHER_(tn, 9, __VA_ARGS__) gmock_a9)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(9, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(9, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7, gmock_a8, \\ gmock_a9)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 8, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 9, __VA_ARGS__)>())"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<__VA_ARGS__>)",
    "insertText": "GMOCK_MOCKER_(9, constness, \\ Method) #define GMOCK_METHOD10_(tn, constness, ct, Method, ...) \\ static_assert(10 == \\ ::testing::internal::Function<__VA_ARGS__>::ArgumentCount, \\ \"MOCK_METHOD<N> must match argument count.\")"
  },
  {
    "label": "GMOCK_RESULT_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_RESULT_(tn, __VA_ARGS__) ct Method( \\ GMOCK_ARG_(tn, 1, __VA_ARGS__) gmock_a1, GMOCK_ARG_(tn, 2, \\ __VA_ARGS__) gmock_a2, GMOCK_ARG_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_ARG_(tn, 4, __VA_ARGS__) gmock_a4, GMOCK_ARG_(tn, 5, \\ __VA_ARGS__) gmock_a5, GMOCK_ARG_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_ARG_(tn, 7, __VA_ARGS__) gmock_a7, GMOCK_ARG_(tn, 8, \\ __VA_ARGS__) gmock_a8, GMOCK_ARG_(tn, 9, __VA_ARGS__) gmock_a9, \\ GMOCK_ARG_(tn, 10, __VA_ARGS__) gmock_a10)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(10, constness, Method).SetOwnerAndName(this, #Method)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(10, constness, \\ Method).Invoke(::std::forward<GMOCK_ARG_(tn, 1, \\ __VA_ARGS__)>(gmock_a1), \\ ::std::forward<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(gmock_a2), \\ ::std::forward<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(gmock_a3), \\ ::std::forward<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(gmock_a4), \\ ::std::forward<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(gmock_a5), \\ ::std::forward<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(gmock_a6), \\ ::std::forward<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(gmock_a7), \\ ::std::forward<GMOCK_ARG_(tn, 8, __VA_ARGS__)>(gmock_a8), \\ ::std::forward<GMOCK_ARG_(tn, 9, __VA_ARGS__)>(gmock_a9), \\ ::std::forward<GMOCK_ARG_(tn, 10, __VA_ARGS__)>(gmock_a10))"
  },
  {
    "label": "Method()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<__VA_ARGS__> \\ gmock_ # #)",
    "insertText": "Method(GMOCK_MATCHER_(tn, 1, __VA_ARGS__) gmock_a1, \\ GMOCK_MATCHER_(tn, 2, __VA_ARGS__) gmock_a2, \\ GMOCK_MATCHER_(tn, 3, __VA_ARGS__) gmock_a3, \\ GMOCK_MATCHER_(tn, 4, __VA_ARGS__) gmock_a4, \\ GMOCK_MATCHER_(tn, 5, __VA_ARGS__) gmock_a5, \\ GMOCK_MATCHER_(tn, 6, __VA_ARGS__) gmock_a6, \\ GMOCK_MATCHER_(tn, 7, __VA_ARGS__) gmock_a7, \\ GMOCK_MATCHER_(tn, 8, __VA_ARGS__) gmock_a8, \\ GMOCK_MATCHER_(tn, 9, __VA_ARGS__) gmock_a9, \\ GMOCK_MATCHER_(tn, 10, \\ __VA_ARGS__) gmock_a10)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(10, constness, Method).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(10, constness, Method).With(gmock_a1, gmock_a2, \\ gmock_a3, gmock_a4, gmock_a5, gmock_a6, gmock_a7, gmock_a8, gmock_a9, \\ gmock_a10)"
  },
  {
    "label": "constness()",
    "kind": "Method",
    "detail": "Function (\\ return::testing::internal::AdjustConstness_ # #)",
    "insertText": "constness(this)-> \\ gmock_##Method(::testing::A<GMOCK_ARG_(tn, 1, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 2, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 3, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 4, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 5, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 6, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 7, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 8, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 9, __VA_ARGS__)>(), \\ ::testing::A<GMOCK_ARG_(tn, 10, __VA_ARGS__)>())"
  }
]