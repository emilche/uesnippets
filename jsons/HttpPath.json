[
  {
    "label": "FHttpPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpPath"
  },
  {
    "label": "FHttpPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HttpRequestHandler . h \" # include \" Misc / CString . h \" struct FHttpPath { public :)",
    "insertText": "FHttpPath()"
  },
  {
    "label": "FHttpPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHttpPath(FString InPath)"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetPath()"
  },
  {
    "label": "ParsePathTokens()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ParsePathTokens(TArray<FString>& OutPathTokens)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FString Path)"
  },
  {
    "label": "IsValidPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPath()"
  },
  {
    "label": "IsRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRoot()"
  },
  {
    "label": "MakeRelative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRelative(const FString& OtherPath)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FHttpPath& Other)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bEqual(0 == Path.Compare(Other.Path, ESearchCase::CaseSensitive))"
  },
  {
    "label": "NormalizePath()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "NormalizePath()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString Path =)",
    "insertText": "TEXT(\"/\")"
  }
]