[
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "FLowpassFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLowpassFilter"
  },
  {
    "label": "FLowpassFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" namespace ViewportInteractionUtils { class FOneEuroFilter { private : class FLowpassFilter { public :)",
    "insertText": "FLowpassFilter()"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Filter(const FVector& InValue, const FVector& InAlpha)"
  },
  {
    "label": "IsFirstTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFirstTime()"
  },
  {
    "label": "GetPrevious()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPrevious()"
  },
  {
    "label": "FOneEuroFilter()",
    "kind": "Method",
    "detail": "Function (private : FVector Previous ; bool bFirstTime ; } ; public :)",
    "insertText": "FOneEuroFilter()"
  },
  {
    "label": "FOneEuroFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOneEuroFilter(const double InMinCutoff, const double InCutoffSlope, const double InDeltaCutoff)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Filter(const FVector& InRaw, const double InDeltaTime)"
  },
  {
    "label": "SetMinCutoff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinCutoff(const double InMinCutoff)"
  },
  {
    "label": "SetCutoffSlope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCutoffSlope(const double InCutoffSlope)"
  },
  {
    "label": "SetDeltaCutoff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeltaCutoff(const double InDeltaCutoff)"
  },
  {
    "label": "CalculateCutoff()",
    "kind": "Method",
    "detail": "Function (private : const FVector)",
    "insertText": "CalculateCutoff(const FVector& InValue)"
  },
  {
    "label": "CalculateAlpha()",
    "kind": "Method",
    "detail": "Function (const FVector)",
    "insertText": "CalculateAlpha(const FVector& InCutoff, const double InDeltaTime)"
  },
  {
    "label": "CalculateAlpha()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "CalculateAlpha(const double InCutoff, const double InDeltaTime)"
  }
]