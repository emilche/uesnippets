[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FMovieSceneObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingID"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FMovieSceneEvaluationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTrack"
  },
  {
    "label": "UMovieSceneUserImportFBXSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneUserImportFBXSettings"
  },
  {
    "label": "UMovieSceneUserImportFBXControlRigSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneUserImportFBXControlRigSettings"
  },
  {
    "label": "UMovieSceneUserExportFBXControlRigSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneUserExportFBXControlRigSettings"
  },
  {
    "label": "FMovieSceneDoubleValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDoubleValue"
  },
  {
    "label": "FMovieSceneFloatValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFloatValue"
  },
  {
    "label": "INodeNameAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INodeNameAdapter"
  },
  {
    "label": "FMovieSceneSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceTransform"
  },
  {
    "label": "UAnimSeqExportOption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSeqExportOption"
  },
  {
    "label": "TMovieSceneChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "FActorForWorldTransforms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorForWorldTransforms"
  },
  {
    "label": "UMovieScene3DTransformSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSection"
  },
  {
    "label": "UMovieSceneSubTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubTrack"
  },
  {
    "label": "FBakingAnimationKeySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakingAnimationKeySettings"
  },
  {
    "label": "FKeyDataOptimizationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDataOptimizationParams"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "FbxCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCamera"
  },
  {
    "label": "FbxNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNode"
  },
  {
    "label": "FFbxImporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxImporter"
  },
  {
    "label": "FFbxCurvesAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxCurvesAPI"
  },
  {
    "label": "FFBXInOutParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFBXInOutParameters"
  },
  {
    "label": "FAnimExportSequenceParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimExportSequenceParameters"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "FTrackEditorBindingIDPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorBindingIDPicker"
  },
  {
    "label": "FAnimExportSequenceParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SWidget . h \" # include \" Curves / RichCurve . h \" # include \" Math / InterpCurvePoint . h \" # include \" MovieSceneObjectBindingID . h \" # include \" MovieSceneObjectBindingIDPicker . h \" # include \" ISequencer . h \" # include \" Logging / TokenizedMessage . h \" # include \" MovieSceneTranslator . h \" # include \" MovieSceneSpawnable . h \" # include \" MovieSceneCaptureSettings . h \" # include \" KeyParams . h \" # include \" SEnumCombo . h \" # include \" Animation / AnimSequence . h \" # include \" INodeAndChannelMappings . h \" # include \" Channels / MovieSceneChannelProxy . h \" # include \" MovieSceneSection . h \" class UMovieScene ; class UMovieSceneSequence ; struct FMovieSceneObjectBindingID ; class UMovieSceneTrack ; struct FMovieSceneEvaluationTrack ; class UMovieSceneUserImportFBXSettings ; class UMovieSceneUserImportFBXControlRigSettings ; class UMovieSceneUserExportFBXControlRigSettings ; struct FMovieSceneDoubleValue ; struct FMovieSceneFloatValue ; class INodeNameAdapter ; struct FMovieSceneSequenceTransform ; class UAnimSeqExportOption ; template<ChannelType> struct TMovieSceneChannelData ; enum class EVisibilityBasedAnimTickOption : uint8 ; class ACameraActor ; struct FActorForWorldTransforms ; class UMovieScene3DTransformSection ; class UMovieSceneSubTrack ; struct FBakingAnimationKeySettings ; struct FKeyDataOptimizationParams ; class UMovieSceneSubSection ; enum class EMovieSceneTransformChannel : uint32 ; namespace fbxsdk { class FbxCamera ; class FbxNode ; } namespace UnFbx { class FFbxImporter ; class FFbxCurvesAPI ; } ; struct FFBXInOutParameters { bool bConvertSceneBackup ; bool bConvertSceneUnitBackup ; bool bForceFrontXAxisBackup ; float ImportUniformScaleBackup ; } ; struct FAnimExportSequenceParameters {)",
    "insertText": "FAnimExportSequenceParameters()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence* MovieSceneSequence ; UMovieSceneSequence* RootMovieSceneSequence ; IMovieScenePlayer* Player ; FMovieSceneSequenceTransform RootToLocalTransform ; } ;)",
    "insertText": "DECLARE_DELEGATE(FInitAnimationCB)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FStartAnimationCB)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FTickAnimationCB, float, FFrameNumber)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FEndAnimationCB)"
  },
  {
    "label": "FSkelMeshRecorderState()",
    "kind": "Method",
    "detail": "Function (struct FSkelMeshRecorderState { public :)",
    "insertText": "FSkelMeshRecorderState()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(USkeletalMeshComponent* InComponent)"
  },
  {
    "label": "FinishRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecording()"
  },
  {
    "label": "TrimSection()",
    "kind": "Method",
    "detail": "Function (public : TWeakObjectPtr<USkeletalMeshComponent> SkelComp ; ; int CachedSkelCompForcedLodModel ; EVisibilityBasedAnimTickOption CachedVisibilityBasedAnimTickOption ; bool bCachedEnableUpdateRateOptimizations ; } ; enum class FChannelMergeAlgorithm : uint8 { Average,Add,Override,} ; class MovieSceneToolHelpers { public : void)",
    "insertText": "TrimSection(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time, bool bTrimLeft, bool bDeleteKeys)"
  },
  {
    "label": "CanTrimSectionLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTrimSectionLeft(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time)"
  },
  {
    "label": "CanTrimSectionRight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTrimSectionRight(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time)"
  },
  {
    "label": "TrimOrExtendSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimOrExtendSection(UMovieSceneTrack* Track, TOptional<int32> RowIndex, FQualifiedFrameTime Time, bool bTrimOrExtendLeft, bool bDeleteKeys)"
  },
  {
    "label": "SplitSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSection(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time, bool bDeleteKeys)"
  },
  {
    "label": "CanSplitSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSplitSection(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time)"
  },
  {
    "label": "ParseShotName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseShotName(const FString& ShotName, FString& ShotPrefix, uint32& ShotNumber, uint32& TakeNumber, uint32& ShotNumberDigits, uint32& TakeNumberDigits)"
  },
  {
    "label": "ComposeShotName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ComposeShotName(const FString& ShotPrefix, uint32 ShotNumber, uint32 TakeNumber, uint32 ShotNumberDigits, uint32 TakeNumberDigits)"
  },
  {
    "label": "GenerateNewSubsequencePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateNewSubsequencePath(UMovieScene* SequenceMovieScene, const FString& SubsequenceDirectory, FString& NewShotName)"
  },
  {
    "label": "GenerateNewSubsequenceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateNewSubsequenceName(const TArray<UMovieSceneSection*>& AllSections, const FString& SubsequencePrefix, FFrameNumber Time)"
  },
  {
    "label": "CreateSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "CreateSequence(FString& NewSequenceName, FString& NewSequencePath, UMovieSceneSubSection* SectionToDuplicate = nullptr)"
  },
  {
    "label": "GatherTakes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherTakes(const UMovieSceneSection* Section, TArray<FAssetData>& AssetData, uint32& OutCurrentTakeNumber)"
  },
  {
    "label": "GetTakeNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTakeNumber(const UMovieSceneSection* Section, FAssetData AssetData, uint32& OutTakeNumber)"
  },
  {
    "label": "SetTakeNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTakeNumber(const UMovieSceneSection* Section, uint32 InTakeNumber)"
  },
  {
    "label": "FindAvailableRowIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindAvailableRowIndex(UMovieSceneTrack* InTrack, UMovieSceneSection* InSection, const TArray<UMovieSceneSection*>& SectionsToDisregard = TArray<UMovieSceneSection*>())"
  },
  {
    "label": "OverlapsSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapsSection(UMovieSceneTrack* InTrack, UMovieSceneSection* InSection, const TArray<UMovieSceneSection*>& SectionsToDisregard = TArray<UMovieSceneSection*>())"
  },
  {
    "label": "MakeEnumComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeEnumComboBox(const UEnum* Enum, TAttribute<int32> CurrentValue, SEnumComboBox::FOnEnumSelectionChanged OnSelectionChanged)"
  },
  {
    "label": "ShowImportEDLDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowImportEDLDialog(UMovieScene* InMovieScene, FFrameRate InFrameRate, FString InOpenDirectory = TEXT(\"\"))"
  },
  {
    "label": "ShowExportEDLDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowExportEDLDialog(const UMovieScene* InMovieScene, FFrameRate InFrameRate, FString InSaveDirectory = TEXT(\"\"), int32 InHandleFrames = 8, FString InMovieExtension = TEXT(\".avi\"))"
  },
  {
    "label": "MovieSceneTranslatorImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MovieSceneTranslatorImport(FMovieSceneImporter* InImporter, UMovieScene* InMovieScene, FFrameRate InFrameRate, FString InOpenDirectory = TEXT(\"\"))"
  },
  {
    "label": "MovieSceneTranslatorExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MovieSceneTranslatorExport(FMovieSceneExporter* InExporter, const UMovieScene* InMovieScene, const FMovieSceneCaptureSettings& Settings)"
  },
  {
    "label": "MovieSceneTranslatorLogMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovieSceneTranslatorLogMessages(FMovieSceneTranslator* InTranslator, TSharedRef<FMovieSceneTranslatorContext> InContext, bool bDisplayMessages)"
  },
  {
    "label": "MovieSceneTranslatorLogOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovieSceneTranslatorLogOutput(FMovieSceneTranslator* InTranslator, TSharedRef<FMovieSceneTranslatorContext> InContext)"
  },
  {
    "label": "ExportFBX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBX(UWorld* World, const FAnimExportSequenceParameters& AnimExportSequenceParameters, const TArray<FGuid>& Bindings, const TArray<UMovieSceneTrack*>& Tracks, INodeNameAdapter& NodeNameAdapter, FMovieSceneSequenceIDRef& Template, const FString& InFBXFileName)"
  },
  {
    "label": "ImportFBXWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXWithDialog(UMovieSceneSequence* InSequence, ISequencer& InSequencer, const TMap<FGuid, FString>& InObjectBindingNameMap, TOptional<bool> bCreateCameras)"
  },
  {
    "label": "ReadyFBXForImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyFBXForImport(const FString& ImportFilename, UMovieSceneUserImportFBXSettings* ImportFBXSettings, FFBXInOutParameters& OutFBXParams)"
  },
  {
    "label": "ImportFBXIfReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXIfReady(UWorld* World, UMovieSceneSequence* InSequence, IMovieScenePlayer* Player, FMovieSceneSequenceIDRef TemplateID, TMap<FGuid, FString>& ObjectBindingMap, UMovieSceneUserImportFBXSettings* ImportFBXSettings, const FFBXInOutParameters& InFBXParams)"
  },
  {
    "label": "ImportFBXCameraToExisting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportFBXCameraToExisting(UnFbx::FFbxImporter* FbxImporter, UMovieSceneSequence* InSequence, IMovieScenePlayer* Player, FMovieSceneSequenceIDRef TemplateID, TMap<FGuid, FString>& InObjectBindingMap, bool bMatchByNameOnly, bool bNotifySlate)"
  },
  {
    "label": "ImportFBXNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXNode(FString NodeName, UnFbx::FFbxCurvesAPI& CurveAPI, UMovieSceneSequence* InSequence, IMovieScenePlayer* Player, FMovieSceneSequenceIDRef TemplateID, FGuid ObjectBinding)"
  },
  {
    "label": "LockCameraActorToViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockCameraActorToViewport(const TSharedPtr<ISequencer>& Sequencer, ACameraActor* CameraActor)"
  },
  {
    "label": "CreateCameraCutSectionForCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCameraCutSectionForCamera(UMovieScene* MovieScene, FGuid CameraGuid, FFrameNumber FrameNumber)"
  },
  {
    "label": "CopyCameraProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCameraProperties(fbxsdk::FbxCamera* CameraNode, AActor* InCameraActor)"
  },
  {
    "label": "ExportToAnimSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportToAnimSequence(UAnimSequence* AnimSequence, UAnimSeqExportOption* ExportOptions, const FAnimExportSequenceParameters& AnimExportSequenceParameters, USkeletalMeshComponent* SkelMesh)"
  },
  {
    "label": "BakeToSkelMeshToCallbacks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BakeToSkelMeshToCallbacks(const FAnimExportSequenceParameters& AnimExportSequenceParameters, USkeletalMeshComponent* SkelMesh, UAnimSeqExportOption* ExportOptions, FInitAnimationCB InitCallback, FStartAnimationCB StartCallback, FTickAnimationCB TickCallback, FEndAnimationCB EndCallback)"
  },
  {
    "label": "HasHiddenMobility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHiddenMobility(const UClass* ObjectClass)"
  },
  {
    "label": "GetEvaluationTrack()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneEvaluationTrack*)",
    "insertText": "GetEvaluationTrack(ISequencer *Sequencer, const FGuid& TrackSignature)"
  },
  {
    "label": "GetLocationAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocationAtTime(const FMovieSceneEvaluationTrack* Track, UObject* Object, FFrameTime KeyTime, FVector& KeyPos, FRotator& KeyRot, const TSharedPtr<ISequencer>& Sequencer)"
  },
  {
    "label": "GetParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParents(TArray<const UObject*>& Parents, const UObject* InObject)"
  },
  {
    "label": "GetRefFrameFromParents()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRefFrameFromParents(const TSharedPtr<ISequencer>& Sequencer, const TArray<const UObject*>& Parents, FFrameTime KeyTime)"
  },
  {
    "label": "GetParentTM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParentTM(FTransform& CurrentRefTM, const TSharedPtr<ISequencer>& Sequencer, UObject* ParentObject, FFrameTime KeyTime)"
  },
  {
    "label": "GetCameras()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCameras(fbxsdk::FbxNode* Parent, TArray<fbxsdk::FbxCamera*>& Cameras)"
  },
  {
    "label": "GetCameraName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCameraName(fbxsdk::FbxCamera* InCamera)"
  },
  {
    "label": "ImportFBXIntoControlRigChannelsWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXIntoControlRigChannelsWithDialog(const TSharedRef<ISequencer>& InSequencer, TArray<FRigControlFBXNodeAndChannels>* NodeAndChannels)"
  },
  {
    "label": "ExportFBXFromControlRigChannelsWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBXFromControlRigChannelsWithDialog(const TSharedRef<ISequencer>& InSequencer, UMovieSceneTrack* Track)"
  },
  {
    "label": "ImportFBXIntoControlRigChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXIntoControlRigChannels(UMovieScene* MovieScene, const FString& ImportFilename, UMovieSceneUserImportFBXControlRigSettings *ControlRigSettings, TArray<FRigControlFBXNodeAndChannels>* NodeAndChannels, const TArray<FName>& SelectedControlNames, FFrameRate FrameRate)"
  },
  {
    "label": "ExportFBXFromControlRigChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBXFromControlRigChannels(const UMovieSceneSection* Section, const UMovieSceneUserExportFBXControlRigSettings* ExportFBXControlRigSettings, const TArray<FName>& SelectedControlNames, const FMovieSceneSequenceTransform& RootToLocalTransform)"
  },
  {
    "label": "AcquireSkeletalMeshFromObject()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshComponent*)",
    "insertText": "AcquireSkeletalMeshFromObject(UObject* BoundObject)"
  },
  {
    "label": "GetActorParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorParents(const FActorForWorldTransforms& Actor, TArray<FActorForWorldTransforms>& OutParentActors)"
  },
  {
    "label": "GetActorParentsWithAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorParentsWithAttachments(ISequencer* Sequencer, const FActorForWorldTransforms& Actor, TArray<FActorForWorldTransforms>& OutParentActors)"
  },
  {
    "label": "GetActorsAndParentsKeyFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorsAndParentsKeyFrames(ISequencer* Sequencer, const FActorForWorldTransforms& Actor, const FFrameNumber& StartFrame, const FFrameNumber& EndFrame, TSortedMap<FFrameNumber, FFrameNumber>& OutFrameMap)"
  },
  {
    "label": "GetActorWorldTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorWorldTransforms(ISequencer* Sequencer, const FActorForWorldTransforms& Actors, const TArray<FFrameNumber>& Frames, TArray<FTransform>& OutWorldTransforms)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneFloatValue>& ChannelData, FFrameNumber Time, float Value, const EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneDoubleValue>& ChannelData, FFrameNumber Time, double Value, const EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneFloatValue>& Curve, FFrameNumber Time, const FMovieSceneFloatValue& Value)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneDoubleValue>& ChannelData, FFrameNumber Time, FMovieSceneDoubleValue Value)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneFloatValue>& Curve, FFrameNumber Time, float Value, float ArriveTangent, float LeaveTangent, ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode, FFrameRate FrameRate, ERichCurveTangentWeightMode WeightedMode = RCTWM_WeightedNone, float ArriveTangentWeight = 0.0f, float LeaveTangentWeight = 0.0f)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneDoubleValue>& Curve, FFrameNumber Time, double Value, float ArriveTangent, float LeaveTangent, ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode, FFrameRate FrameRate, ERichCurveTangentWeightMode WeightedMode = RCTWM_WeightedNone, float ArriveTangentWeight = 0.0f, float LeaveTangentWeight = 0.0f)"
  },
  {
    "label": "GetActorWorldTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorWorldTransforms(IMovieScenePlayer* Player, UMovieSceneSequence* InSequence, FMovieSceneSequenceIDRef Template,const FActorForWorldTransforms& Actors, const TArray<FFrameNumber>& Frames, TArray<FTransform>& OutWorldTransforms)"
  },
  {
    "label": "IsValidAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAsset(UMovieSceneSequence* Sequence, const FAssetData& InAssetData)"
  },
  {
    "label": "CollapseSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollapseSection(TSharedPtr<ISequencer>& InSequencer, UMovieSceneTrack* InOwnerTrack, TArray<UMovieSceneSection*> InSections, const FBakingAnimationKeySettings& InSettings)"
  },
  {
    "label": "SplitSectionsByBlendType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSectionsByBlendType(EMovieSceneBlendType BlendType, const TArray<UMovieSceneSection*>& InSections, TArray<UMovieSceneSection*>& OutSections, TArray<UMovieSceneSection*>& OutBlendTypeSections)"
  },
  {
    "label": "GetChannelValues()",
    "kind": "Method",
    "detail": "Function (template<ChannelType,CurveValueType> TArray<CurveValueType>)",
    "insertText": "GetChannelValues(const int32 StartIndex, const int32 EndIndex, const TArray<UMovieSceneSection*>& Sections, const TArray<UMovieSceneSection*>& AbsoluteSections, const FFrameNumber& FrameTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<CurveValueType> Values ; int32 NumChannels = 0 ;)",
    "insertText": "if(Sections.Num() > 0)"
  },
  {
    "label": "GetChannelProxy()",
    "kind": "Method",
    "detail": "Function (TArrayView<ChannelType*> Channels = Sections [ 0 ] ->)",
    "insertText": "GetChannelProxy().GetChannels<ChannelType>()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumChannels = Channels .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(AbsoluteSections.Num() > 0)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogMovieScene, Warning, TEXT(\"GetChannelValues:: Invalid number of channels\"))"
  },
  {
    "label": "GetTotalWeightValue()",
    "kind": "Method",
    "detail": "Function (float Weight = AbsoluteSection ->)",
    "insertText": "GetTotalWeightValue(FrameTime)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (CurveValueType WeightedValue = 0 . 0 ; ChannelType* Channel = Channels [ ChannelIndex ] ; Channel ->)",
    "insertText": "Evaluate(FrameTime, WeightedValue)"
  },
  {
    "label": "WeightedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeightedValue((double)Weight)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Value + = WeightedValue ; })",
    "insertText": "Value(double)AbsoluteSections.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(UMovieSceneSection* Section : Sections)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WeightedValue* = Weight ; Value + = WeightedValue ; } else)",
    "insertText": "if(Section->GetBlendType().Get() == EMovieSceneBlendType::Override)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Value * (1.0 - Weight)) + (WeightedValue * Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } Values .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "MergeChannels()",
    "kind": "Method",
    "detail": "Function (} return Values ; } template<ChannelType> bool)",
    "insertText": "MergeChannels(int32 SectionChannelIndex, TArray<ChannelType*>& Channels, const TArray<UMovieSceneSection*>& Sections, const TRange<FFrameNumber>& Range, FChannelMergeAlgorithm MergeAlgorithm)"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (TArray<UMovieSceneSection*> TrackSections = OwnerTrack ->)",
    "insertText": "GetAllSections()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 SectionIndex = TrackSections .)",
    "insertText": "Find(Sections[1])"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TrackSections .)",
    "insertText": "SetNum(SectionIndex + 1)"
  },
  {
    "label": "SplitSectionsByBlendType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSectionsByBlendType(EMovieSceneBlendType::Absolute,TrackSections, OtherSections, AbsoluteSections)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} } } ChannelType* BaseChannel = Channels [ 0 ] ; TMovieSceneChannelData<ChannelValueType> BaseChannelData = BaseChannel ->)",
    "insertText": "GetData()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FFrameNumber> KeyTimes ; TArray<FKeyHandle> Handles ; TArray<TPair<FFrameNumber,ChannelValueType>> KeysToSet ;)",
    "insertText": "for(int32 ChannelIndex = 0; ChannelIndex < Channels.Num(); ++ChannelIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (KeyTimes .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (ChannelType* Channel = Channels [ ChannelIndex ] ; Channel ->)",
    "insertText": "GetKeys(Range, &KeyTimes, &Handles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FFrameNumber& Frame = KeyTimes [ FrameIndex ] ;)",
    "insertText": "if(Sections[0]->GetRange().Contains(Frame) == false)"
  },
  {
    "label": "FrameTime()",
    "kind": "Method",
    "detail": "Function (continue ; } const FFrameTime)",
    "insertText": "FrameTime(Frame)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (int32 KeyIndex = Channel ->)",
    "insertText": "GetData().GetIndex(Handles[FrameIndex])"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (ChannelValueType Value = Channel ->)",
    "insertText": "GetData().GetValues()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value . Value = 0 . 0 ;)",
    "insertText": "if(MergeAlgorithm == FChannelMergeAlgorithm::Average)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value . Value + = WeightedValue ; DNumChannels + = 1 . 0 ; } })",
    "insertText": "if(DNumChannels > 0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value . Value / = DNumChannels ; } } else)",
    "insertText": "if(MergeAlgorithm == FChannelMergeAlgorithm::Add)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WeightedValue* = Weight ; Value . Value + = WeightedValue ; } } } else)",
    "insertText": "if(MergeAlgorithm == FChannelMergeAlgorithm::Override)"
  },
  {
    "label": "CurveValueType()",
    "kind": "Method",
    "detail": "Function (TArray<CurveValueType> ChannelValues = MovieSceneToolHelpers::GetChannelValues<ChannelType,)",
    "insertText": "CurveValueType(OverrideChannelIndex, OverrideChannelIndex, OtherSections, AbsoluteSections, Frame)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Value . Value = ChannelValues [ 0 ] ; } } } KeysToSet .)",
    "insertText": "Add(TPair<FFrameNumber, ChannelValueType>(Frame, Value))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(TPair<FFrameNumber, ChannelValueType>& KeyToSet : KeysToSet)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(BaseChannelData, KeyToSet.Key, KeyToSet.Value)"
  },
  {
    "label": "MergeSections()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<ChannelType> bool)",
    "insertText": "MergeSections(UMovieSceneSection* BaseSection, UMovieSceneSection* TopSection, int32 StartIndex, int32 EndIndex, const TRange<FFrameNumber>& Range)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<ChannelType*> Channels ; int32 ChannelIndex = 0 ; TArray<UMovieSceneSection*> Sections ; Sections .)",
    "insertText": "Add(BaseSection)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sections .)",
    "insertText": "Add(TopSection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FChannelMergeAlgorithm MergeAlgorithm = FChannelMergeAlgorithm::Add ;)",
    "insertText": "if((TopSection->GetBlendType().IsValid() && TopSection->GetBlendType().Get() == EMovieSceneBlendType::Override) || (BaseSection->GetBlendType().IsValid() && BaseSection->GetBlendType().Get() == EMovieSceneBlendType::Override))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MergeAlgorithm = FChannelMergeAlgorithm::Override ; } else)",
    "insertText": "if(TopSection->GetBlendType().IsValid() && TopSection->GetBlendType().Get() == EMovieSceneBlendType::Absolute)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MergeAlgorithm = FChannelMergeAlgorithm::Average ; })",
    "insertText": "for(ChannelIndex = StartIndex; ChannelIndex <= EndIndex; ++ChannelIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Channels .)",
    "insertText": "Add(BaseChannels[ChannelIndex])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Channels .)",
    "insertText": "Add(TopChannels[ChannelIndex])"
  },
  {
    "label": "AutoSetTangents()",
    "kind": "Method",
    "detail": "Function (Channel ->)",
    "insertText": "AutoSetTangents()"
  },
  {
    "label": "MergeSections()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<ChannelType> bool)",
    "insertText": "MergeSections(UMovieSceneSection* BaseSection, TArray<UMovieSceneSection*>& AbsoluteSections, TArray<UMovieSceneSection*>& AdditiveSections, int32 StartIndex, int32 EndIndex, const TRange<FFrameNumber>& Range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 SectionIndex = 0 ;)",
    "insertText": "for(SectionIndex = 0; SectionIndex < AbsoluteSections.Num(); ++SectionIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<ChannelType*> Channels ;)",
    "insertText": "for(int32 ChannelIndex = StartIndex; ChannelIndex <= EndIndex; ++ChannelIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Channels .)",
    "insertText": "Add(OurChannels[ChannelIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MergeChannels(ChannelIndex, Channels, AbsoluteSections, Range, FChannelMergeAlgorithm::Average) == false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MergeChannels(ChannelIndex,Channels, AdditiveSections, Range, FChannelMergeAlgorithm::Add) == false)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogMovieScene, Warning, TEXT(\"MergeSections:: Invalid number of channels\"))"
  },
  {
    "label": "CalculateFramesBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFramesBetween(const UMovieScene* MovieScene, FFrameNumber StartFrame, FFrameNumber EndFrame, int FrameIncrement, TArray<FFrameNumber>& OutFrames)"
  },
  {
    "label": "GetTransformSection()",
    "kind": "Method",
    "detail": "Function (UMovieScene3DTransformSection*)",
    "insertText": "GetTransformSection(const ISequencer* InSequencer, const FGuid& InGuid, const FTransform& InDefaultTransform = FTransform::Identity)"
  },
  {
    "label": "AddTransformKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTransformKeys(const UMovieScene3DTransformSection* InTransformSection, const TArray<FFrameNumber>& Frames, const TArray<FTransform>& InLocalTransforms, const EMovieSceneTransformChannel& InChannels)"
  },
  {
    "label": "FSpawnableRestoreState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSpawnableRestoreState(UMovieScene* MovieScene, TSharedPtr<UE::MovieScene::FSharedPlaybackState> InSharedPlaybackState)"
  },
  {
    "label": "FSpawnableRestoreState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSpawnableRestoreState()"
  },
  {
    "label": "FTrackEditorBindingIDPicker()",
    "kind": "Method",
    "detail": "Function (bool bWasChanged ; TMap<FGuid,ESpawnOwnership> SpawnOwnershipMap ; TWeakObjectPtr<UMovieScene> WeakMovieScene ; TSharedPtr<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState ; } ; class FTrackEditorBindingIDPicker : public FMovieSceneObjectBindingIDPicker { public :)",
    "insertText": "FTrackEditorBindingIDPicker(FMovieSceneSequenceID InLocalSequenceID, TWeakPtr<ISequencer> InSequencer) : FMovieSceneObjectBindingIDPicker(InLocalSequenceID, InSequencer)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(FTrackEditorBindingIDPicker, FOnBindingPicked, FMovieSceneObjectBindingID) FOnBindingPicked& OnBindingPicked()"
  },
  {
    "label": "SetCurrentValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCurrentValue(const FMovieSceneObjectBindingID& InBindingId)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnBindingPickedEvent .)",
    "insertText": "Broadcast(InBindingId)"
  },
  {
    "label": "GetCurrentValue()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneObjectBindingID)",
    "insertText": "GetCurrentValue()"
  }
]