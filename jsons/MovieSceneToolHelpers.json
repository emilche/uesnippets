[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FMovieSceneObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingID"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FMovieSceneEvaluationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTrack"
  },
  {
    "label": "UMovieSceneUserImportFBXSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneUserImportFBXSettings"
  },
  {
    "label": "UMovieSceneUserImportFBXControlRigSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneUserImportFBXControlRigSettings"
  },
  {
    "label": "UMovieSceneUserExportFBXControlRigSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneUserExportFBXControlRigSettings"
  },
  {
    "label": "FMovieSceneDoubleValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDoubleValue"
  },
  {
    "label": "FMovieSceneFloatValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFloatValue"
  },
  {
    "label": "INodeNameAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INodeNameAdapter"
  },
  {
    "label": "FMovieSceneSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceTransform"
  },
  {
    "label": "UAnimSeqExportOption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSeqExportOption"
  },
  {
    "label": "TMovieSceneChannelData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "FActorForWorldTransforms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorForWorldTransforms"
  },
  {
    "label": "UMovieScene3DTransformSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSection"
  },
  {
    "label": "UMovieSceneSubTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubTrack"
  },
  {
    "label": "FBakingAnimationKeySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakingAnimationKeySettings"
  },
  {
    "label": "FKeyDataOptimizationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDataOptimizationParams"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FbxCamera",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxCamera"
  },
  {
    "label": "FbxNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNode"
  },
  {
    "label": "FFbxImporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxImporter"
  },
  {
    "label": "FFbxCurvesAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxCurvesAPI"
  },
  {
    "label": "FFBXInOutParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFBXInOutParameters"
  },
  {
    "label": "FAnimExportSequenceParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimExportSequenceParameters"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "to",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "to"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "FTrackEditorBindingIDPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorBindingIDPicker"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (recorders)",
    "insertText": "DECLARE_DELEGATE(FInitAnimationCB)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(USkeletalMeshComponent* InComponent)"
  },
  {
    "label": "FinishRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecording()"
  },
  {
    "label": "TrimSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimSection(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time, bool bTrimLeft, bool bDeleteKeys)"
  },
  {
    "label": "CanTrimSectionLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTrimSectionLeft(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time)"
  },
  {
    "label": "CanTrimSectionRight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTrimSectionRight(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time)"
  },
  {
    "label": "TrimOrExtendSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimOrExtendSection(UMovieSceneTrack* Track, TOptional<int32> RowIndex, FQualifiedFrameTime Time, bool bTrimOrExtendLeft, bool bDeleteKeys)"
  },
  {
    "label": "SplitSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSection(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time, bool bDeleteKeys)"
  },
  {
    "label": "CanSplitSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSplitSection(const TSet<UMovieSceneSection*>& Sections, FQualifiedFrameTime Time)"
  },
  {
    "label": "ParseShotName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseShotName(const FString& ShotName, FString& ShotPrefix, uint32& ShotNumber, uint32& TakeNumber, uint32& ShotNumberDigits, uint32& TakeNumberDigits)"
  },
  {
    "label": "ComposeShotName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ComposeShotName(const FString& ShotPrefix, uint32 ShotNumber, uint32 TakeNumber, uint32 ShotNumberDigits, uint32 TakeNumberDigits)"
  },
  {
    "label": "GenerateNewSubsequencePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateNewSubsequencePath(UMovieScene* SequenceMovieScene, const FString& SubsequenceDirectory, FString& NewShotName)"
  },
  {
    "label": "GenerateNewShotPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateNewShotPath(UMovieScene* SequenceMovieScene, FString& NewShotName)"
  },
  {
    "label": "GenerateNewSubsequenceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateNewSubsequenceName(const TArray<UMovieSceneSection*>& AllSections, const FString& SubsequencePrefix, FFrameNumber Time)"
  },
  {
    "label": "GenerateNewShotName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateNewShotName(const TArray<UMovieSceneSection*>& AllSections, FFrameNumber Time)"
  },
  {
    "label": "GatherTakes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherTakes(const UMovieSceneSection* Section, TArray<FAssetData>& AssetData, uint32& OutCurrentTakeNumber)"
  },
  {
    "label": "GetTakeNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTakeNumber(const UMovieSceneSection* Section, FAssetData AssetData, uint32& OutTakeNumber)"
  },
  {
    "label": "SetTakeNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTakeNumber(const UMovieSceneSection* Section, uint32 InTakeNumber)"
  },
  {
    "label": "MakeEnumComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeEnumComboBox(const UEnum* Enum, TAttribute<int32> CurrentValue, SEnumComboBox::FOnEnumSelectionChanged OnSelectionChanged)"
  },
  {
    "label": "MovieSceneTranslatorExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MovieSceneTranslatorExport(FMovieSceneExporter* InExporter, const UMovieScene* InMovieScene, const FMovieSceneCaptureSettings& Settings)"
  },
  {
    "label": "MovieSceneTranslatorLogMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovieSceneTranslatorLogMessages(FMovieSceneTranslator* InTranslator, TSharedRef<FMovieSceneTranslatorContext> InContext, bool bDisplayMessages)"
  },
  {
    "label": "MovieSceneTranslatorLogOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovieSceneTranslatorLogOutput(FMovieSceneTranslator* InTranslator, TSharedRef<FMovieSceneTranslatorContext> InContext)"
  },
  {
    "label": "ExportFBX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBX(UWorld* World, const FAnimExportSequenceParameters& AnimExportSequenceParameters, const TArray<FGuid>& Bindings, const TArray<UMovieSceneTrack*>& Tracks, INodeNameAdapter& NodeNameAdapter, FMovieSceneSequenceIDRef& Template, const FString& InFBXFileName)"
  },
  {
    "label": "ExportFBX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBX(UWorld* World, UMovieScene* MovieScene, IMovieScenePlayer* Player, const TArray<FGuid>& Bindings, const TArray<UMovieSceneTrack*>& Tracks, INodeNameAdapter& NodeNameAdapter, FMovieSceneSequenceIDRef& Template,  const FString& InFBXFileName, FMovieSceneSequenceTransform& RootToLocalTransform)"
  },
  {
    "label": "ImportFBXWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXWithDialog(UMovieSceneSequence* InSequence, ISequencer& InSequencer, const TMap<FGuid, FString>& InObjectBindingNameMap, TOptional<bool> bCreateCameras)"
  },
  {
    "label": "ReadyFBXForImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyFBXForImport(const FString&  ImportFilename, UMovieSceneUserImportFBXSettings* ImportFBXSettings, FFBXInOutParameters& OutFBXParams)"
  },
  {
    "label": "ImportFBXIfReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXIfReady(UWorld* World, UMovieSceneSequence* InSequence, IMovieScenePlayer* Player, FMovieSceneSequenceIDRef TemplateID, TMap<FGuid, FString>& ObjectBindingMap, UMovieSceneUserImportFBXSettings* ImportFBXSettings,\n\t\tconst FFBXInOutParameters& InFBXParams)"
  },
  {
    "label": "ImportFBXCameraToExisting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportFBXCameraToExisting(UnFbx::FFbxImporter* FbxImporter, UMovieSceneSequence* InSequence, IMovieScenePlayer* Player, FMovieSceneSequenceIDRef TemplateID, TMap<FGuid, FString>& InObjectBindingMap, bool bMatchByNameOnly, bool bNotifySlate)"
  },
  {
    "label": "ImportFBXNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXNode(FString NodeName, UnFbx::FFbxCurvesAPI& CurveAPI, UMovieSceneSequence* InSequence, IMovieScenePlayer* Player, FMovieSceneSequenceIDRef TemplateID, FGuid ObjectBinding)"
  },
  {
    "label": "LockCameraActorToViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockCameraActorToViewport(const TSharedPtr<ISequencer>& Sequencer, ACameraActor* CameraActor)"
  },
  {
    "label": "CreateCameraCutSectionForCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCameraCutSectionForCamera(UMovieScene* MovieScene, FGuid CameraGuid, FFrameNumber FrameNumber)"
  },
  {
    "label": "CopyCameraProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCameraProperties(fbxsdk::FbxCamera* CameraNode, AActor* InCameraActor)"
  },
  {
    "label": "ExportToAnimSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportToAnimSequence(UAnimSequence* AnimSequence, UAnimSeqExportOption* ExportOptions, const FAnimExportSequenceParameters& AnimExportSequenceParameters,\n\t\t\tUSkeletalMeshComponent* SkelMesh)"
  },
  {
    "label": "ExportToAnimSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportToAnimSequence(UAnimSequence* AnimSequence, UAnimSeqExportOption* ExportOptions, UMovieScene* MovieScene, IMovieScenePlayer* Player,\n\t\tUSkeletalMeshComponent* SkelMesh, FMovieSceneSequenceIDRef& Template, FMovieSceneSequenceTransform& RootToLocalTransform)"
  },
  {
    "label": "BakeToSkelMeshToCallbacks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BakeToSkelMeshToCallbacks(const FAnimExportSequenceParameters& AnimExportSequenceParameters, USkeletalMeshComponent* SkelMesh, UAnimSeqExportOption* ExportOptions,\n\t\tFInitAnimationCB InitCallback, FStartAnimationCB StartCallback, FTickAnimationCB TickCallback, FEndAnimationCB EndCallback)"
  },
  {
    "label": "BakeToSkelMeshToCallbacks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BakeToSkelMeshToCallbacks(UMovieScene* MovieScene, IMovieScenePlayer* Player,\n\t\tUSkeletalMeshComponent* SkelMesh, FMovieSceneSequenceIDRef& Template, FMovieSceneSequenceTransform& RootToLocalTransform, UAnimSeqExportOption* ExportOptions,\n\t\tFInitAnimationCB InitCallback, FStartAnimationCB StartCallback, FTickAnimationCB TickCallback, FEndAnimationCB EndCallback)"
  },
  {
    "label": "HasHiddenMobility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHiddenMobility(const UClass* ObjectClass)"
  },
  {
    "label": "GetLocationAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocationAtTime(const FMovieSceneEvaluationTrack* Track, UObject* Object, FFrameTime KeyTime, FVector& KeyPos, FRotator& KeyRot, const TSharedPtr<ISequencer>& Sequencer)"
  },
  {
    "label": "GetParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParents(TArray<const UObject*>& Parents, const UObject* InObject)"
  },
  {
    "label": "GetRefFrameFromParents()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRefFrameFromParents(const TSharedPtr<ISequencer>& Sequencer, const TArray<const UObject*>& Parents, FFrameTime KeyTime)"
  },
  {
    "label": "GetParentTM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParentTM(FTransform& CurrentRefTM, const TSharedPtr<ISequencer>& Sequencer, UObject* ParentObject, FFrameTime KeyTime)"
  },
  {
    "label": "GetCameras()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCameras(fbxsdk::FbxNode* Parent, TArray<fbxsdk::FbxCamera*>& Cameras)"
  },
  {
    "label": "GetCameraName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCameraName(fbxsdk::FbxCamera* InCamera)"
  },
  {
    "label": "ImportFBXIntoControlRigChannelsWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXIntoControlRigChannelsWithDialog(const TSharedRef<ISequencer>& InSequencer, TArray<FRigControlFBXNodeAndChannels>* NodeAndChannels)"
  },
  {
    "label": "ExportFBXFromControlRigChannelsWithDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBXFromControlRigChannelsWithDialog(const TSharedRef<ISequencer>& InSequencer, UMovieSceneTrack* Track)"
  },
  {
    "label": "ImportFBXIntoControlRigChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportFBXIntoControlRigChannels(UMovieScene* MovieScene, const FString& ImportFilename,  UMovieSceneUserImportFBXControlRigSettings *ControlRigSettings,\n\t\tTArray<FRigControlFBXNodeAndChannels>* NodeAndChannels, const TArray<FName>& SelectedControlNames, FFrameRate FrameRate)"
  },
  {
    "label": "ExportFBXFromControlRigChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportFBXFromControlRigChannels(const UMovieSceneSection* Section, const UMovieSceneUserExportFBXControlRigSettings* ExportFBXControlRigSettings,\n\t                                            const TArray<FName>& SelectedControlNames, const FMovieSceneSequenceTransform& RootToLocalTransform)"
  },
  {
    "label": "GetActorParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorParents(const FActorForWorldTransforms& Actor,\n\t\tTArray<FActorForWorldTransforms>& OutParentActors)"
  },
  {
    "label": "GetActorParentsWithAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorParentsWithAttachments(ISequencer* Sequencer, const FActorForWorldTransforms& Actor, TArray<FActorForWorldTransforms>& OutParentActors)"
  },
  {
    "label": "GetActorsAndParentsKeyFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorsAndParentsKeyFrames(ISequencer* Sequencer, const FActorForWorldTransforms& Actor,\n\t\tconst FFrameNumber& StartFrame, const FFrameNumber& EndFrame, TSortedMap<FFrameNumber, FFrameNumber>& OutFrameMap)"
  },
  {
    "label": "GetActorWorldTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorWorldTransforms(ISequencer* Sequencer, const FActorForWorldTransforms& Actors, const TArray<FFrameNumber>& Frames, TArray<FTransform>& OutWorldTransforms)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneFloatValue>& ChannelData, FFrameNumber Time, float Value, const EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneDoubleValue>& ChannelData, FFrameNumber Time, double Value, const EMovieSceneKeyInterpolation Interpolation = EMovieSceneKeyInterpolation::Auto)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneFloatValue>& Curve, FFrameNumber Time, const FMovieSceneFloatValue& Value)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneDoubleValue>& ChannelData, FFrameNumber Time, FMovieSceneDoubleValue Value)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneFloatValue>& Curve, FFrameNumber Time, float Value, \n\t\t\tfloat ArriveTangent, float LeaveTangent, ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode,\n\t\t\tFFrameRate FrameRate, ERichCurveTangentWeightMode WeightedMode = RCTWM_WeightedNone, \n\t\t\tfloat ArriveTangentWeight = 0.0f, float LeaveTangentWeight = 0.0f)"
  },
  {
    "label": "SetOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrAddKey(TMovieSceneChannelData<FMovieSceneDoubleValue>& Curve, FFrameNumber Time, double Value, \n\t\t\tfloat ArriveTangent, float LeaveTangent, ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode,\n\t\t\tFFrameRate FrameRate, ERichCurveTangentWeightMode WeightedMode = RCTWM_WeightedNone, \n\t\t\tfloat ArriveTangentWeight = 0.0f, float LeaveTangentWeight = 0.0f)"
  },
  {
    "label": "GetActorWorldTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorWorldTransforms(IMovieScenePlayer* Player, UMovieSceneSequence* InSequence, FMovieSceneSequenceIDRef Template,const FActorForWorldTransforms& Actors, const TArray<FFrameNumber>& Frames, TArray<FTransform>& OutWorldTransforms)"
  },
  {
    "label": "IsValidAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAsset(UMovieSceneSequence* Sequence, const FAssetData& InAssetData)"
  },
  {
    "label": "CollapseSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollapseSection(TSharedPtr<ISequencer>& InSequencer, UMovieSceneTrack* InOwnerTrack, TArray<UMovieSceneSection*> InSections,\n\t\tconst FBakingAnimationKeySettings& InSettings)"
  },
  {
    "label": "SplitSectionsByBlendType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSectionsByBlendType(EMovieSceneBlendType BlendType, const TArray<UMovieSceneSection*>& InSections, TArray<UMovieSceneSection*>& OutSections, TArray<UMovieSceneSection*>& OutBlendTypeSections)"
  },
  {
    "label": "FrameTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "FrameTime(Frame)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size)",
    "insertText": "for(SectionIndex = 0; SectionIndex < AbsoluteSections.Num()"
  },
  {
    "label": "OptimizeSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OptimizeSection(const FKeyDataOptimizationParams& InParams, UMovieSceneSection* InSection)"
  },
  {
    "label": "CalculateFramesBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateFramesBetween(\n\t\tconst UMovieScene* MovieScene,\n\t\tFFrameNumber StartFrame,\n\t\tFFrameNumber EndFrame,\n\t\tint FrameIncrement,\n\t\tTArray<FFrameNumber>& OutFrames)"
  },
  {
    "label": "AddTransformKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTransformKeys(\n\t\tconst UMovieScene3DTransformSection* InTransformSection,\n\t\tconst TArray<FFrameNumber>& Frames,\n\t\tconst TArray<FTransform>& InLocalTransforms,\n\t\tconst EMovieSceneTransformChannel& InChannels)"
  },
  {
    "label": "FMovieSceneObjectBindingID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FMovieSceneObjectBindingID()"
  }
]