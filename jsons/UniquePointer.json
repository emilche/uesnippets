[
  {
    "label": "ObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "TUPtrArrayG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUPtrArrayG"
  },
  {
    "label": "TUPtrG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUPtrG"
  },
  {
    "label": "OtherObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherObjectType"
  },
  {
    "label": "OtherAllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherAllocatorType"
  },
  {
    "label": "TUPtrG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Memory / Allocator . h \" # include \" uLang / Common / Templates / References . h \" namespace uLang { template<class ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TUPtrArrayG ; template<ObjectType,bool AllowNull,class AllocatorType,. . . AllocatorArgsType> class TUPtrG { public : ULANG_FORCEINLINE)",
    "insertText": "TUPtrG(NullPtrType NullPtr = nullptr) : _Object(nullptr), _Allocator(DefaultInit)"
  },
  {
    "label": "TUPtrG()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TUPtrG(TUPtrG && Other) : _Object(Other._Object), _Allocator(Other._Allocator)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Other . _Object = nullptr ; } template<class OtherObjectType,bool OtherAllowNull,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType)",
    "insertText": "Value(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TUPtrG(TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> && Other) : _Object(Other._Object), _Allocator(Other._Allocator)"
  },
  {
    "label": "TUPtrG()",
    "kind": "Method",
    "detail": "Function (Other . _Object = nullptr ; } ULANG_FORCEINLINE ~)",
    "insertText": "TUPtrG()"
  },
  {
    "label": "SetNew()",
    "kind": "Method",
    "detail": "Function (} template<. . . CtorArgsType> ULANG_FORCEINLINE TUPtrG&)",
    "insertText": "SetNew(CtorArgsType&&... CtorArgs)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} _Object =)",
    "insertText": "new(_Allocator) ObjectType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (AllocatorType)",
    "insertText": "Allocator(AllocatorArgs...)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ObjectType* Object =)",
    "insertText": "new(Allocator) ObjectType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "TUPtrG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUPtrG(const TUPtrG &)"
  },
  {
    "label": "TUPtrG()",
    "kind": "Method",
    "detail": "Function (template<class OtherObjectType,bool OtherAllowNull>)",
    "insertText": "TUPtrG(const TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUPtrG&)",
    "insertText": "operator(const TUPtrG &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class OtherObjectType,bool OtherAllowNull> TUPtrG&)",
    "insertText": "operator(const TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE TUPtrG&)",
    "insertText": "operator(NullPtrType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType)",
    "insertText": "Value(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TUPtrG & operator=(TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> && Other)"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE operator)",
    "insertText": "ObjectType()"
  },
  {
    "label": "AsRef()",
    "kind": "Method",
    "detail": "Function (_Object = nullptr ; } } ULANG_FORCEINLINE TUPtrG<ObjectType,false,AllocatorType,AllocatorArgsType . . .>&)",
    "insertText": "AsRef()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_Object, \"Converting null pointer to reference!\")"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,= TEnableIf<TPointerIsStaticCastableFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE TUPtrG<OtherObjectType,AllowNull,AllocatorType,AllocatorArgsType . . .>&)",
    "insertText": "As()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "TUPtrG()",
    "kind": "Method",
    "detail": "Function (} private : template<class OtherObjectType,bool OtherAllowNull,class OtherAllocatorType,. . . OtherAllocatorArgsType> class TUPtrG ; template<class OtherObjectType,bool OtherAllowNull,class OtherAllocatorType,. . . OtherAllocatorArgsType> class TUPtrArrayG ; ULANG_FORCEINLINE)",
    "insertText": "TUPtrG(ObjectType * Object, const AllocatorType & Allocator) : _Object(Object) , _Allocator(Allocator)"
  },
  {
    "label": "AssignMove()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull> ULANG_FORCEINLINE TUPtrG&)",
    "insertText": "AssignMove(TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> && Other)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (_Allocator .)",
    "insertText": "Deallocate(_Object)"
  }
]