[
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "FViewElementDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewElementDrawer"
  },
  {
    "label": "ISceneViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewExtension"
  },
  {
    "label": "FVolumetricFogViewResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricFogViewResources"
  },
  {
    "label": "ISceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneRenderer"
  },
  {
    "label": "ISpatialUpscaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialUpscaler"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "ITemporalUpscaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITemporalUpscaler"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FSceneViewProjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewProjectionData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFirstPersonParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFirstPersonParameters"
  },
  {
    "label": "FSceneViewInitOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewInitOptions"
  },
  {
    "label": "FViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewMatrices"
  },
  {
    "label": "FMinimalInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalInitializer"
  },
  {
    "label": "ETranslucencyVolumeCascade",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETranslucencyVolumeCascade"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSceneViewFixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFixLayout"
  },
  {
    "label": "FCustomRenderPassBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomRenderPassBase"
  },
  {
    "label": "FWaterInfoTextureRenderingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaterInfoTextureRenderingParams"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FDisplayInternalsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayInternalsData"
  },
  {
    "label": "ISceneViewFamilyExtention",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewFamilyExtention"
  },
  {
    "label": "ISceneViewFamilyExtentionData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewFamilyExtentionData"
  },
  {
    "label": "ISceneViewFamilyScreenPercentage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewFamilyScreenPercentage"
  },
  {
    "label": "ConstructionValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstructionValues"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FSceneViewFamilyContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamilyContext"
  },
  {
    "label": "FSetupViewUniformParametersInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetupViewUniformParametersInputs"
  },
  {
    "label": "FIntRect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ConvexVolume . h \" # include \" DebugViewModeHelpers . h \" # include \" DynamicRenderScaling . h \" # include \" EngineDefines . h \" # include \" FinalPostProcessSettings . h \" # include \" GameTime . h \" # include \" GlobalDistanceFieldConstants . h \" # include \" Interfaces / Interface_PostProcessVolume . h \" # include \" Math / MirrorMatrix . h \" # include \" PrimitiveComponentId . h \" # include \" RendererInterface . h \" # include \" RenderResource . h \" # include \" ShowFlags . h \" # include \" StereoRendering . h \" # include \" StereoRenderUtils . h \" # define MAX_PHYSICS_FIELD_TARGETS 3 2 class FSceneView ; class FSceneViewFamily ; class FSceneViewStateInterface ; class FViewElementDrawer ; class ISceneViewExtension ; class FSceneViewFamily ; class FVolumetricFogViewResources ; class ISceneRenderer ; class ISpatialUpscaler ; struct FMinimalViewInfo ; namespace UE::Renderer::Private { class ITemporalUpscaler ; } class FRenderTarget ; struct FSceneViewProjectionData { FVector ViewOrigin = FVector::ZeroVector ; FMatrix ViewRotationMatrix = FMatrix::Identity ; FMatrix ProjectionMatrix = FMatrix::Identity ; FIntRect ViewRect =)",
    "insertText": "FIntRect(0,0,0,0)"
  },
  {
    "label": "SetViewRectangle()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetViewRectangle(const FIntRect& InViewRect)"
  },
  {
    "label": "SetConstrainedViewRectangle()",
    "kind": "Method",
    "detail": "Function (ViewRect = InViewRect ; ConstrainedViewRect = InViewRect ; } void)",
    "insertText": "SetConstrainedViewRectangle(const FIntRect& InViewRect)"
  },
  {
    "label": "IsValidViewRectangle()",
    "kind": "Method",
    "detail": "Function (ConstrainedViewRect = InViewRect ; } bool)",
    "insertText": "IsValidViewRectangle()"
  },
  {
    "label": "IsPerspectiveProjection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPerspectiveProjection()"
  },
  {
    "label": "GetNearPlaneFromProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetNearPlaneFromProjectionMatrix(const FMatrix& ProjectionMatrix)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "float((1.0f - ProjectionMatrix.M[3][2]) / (ProjectionMatrix.M[2][2] == 0.0f ? UE_DELTA : ProjectionMatrix.M[2][2]))"
  },
  {
    "label": "GetNearPlaneFromProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetNearPlaneFromProjectionMatrix()"
  },
  {
    "label": "UpdateOrthoPlanes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateOrthoPlanes(FSceneViewProjectionData* InOutProjectionData, float& NearPlane, float& FarPlane, float HalfOrthoWidth, bool bUseCameraHeightAsViewTarget)"
  },
  {
    "label": "UpdateOrthoPlanes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOrthoPlanes(float& NearPlane, float& FarPlane, float HalfOrthoWidth, bool bUseCameraHeightAsViewTarget)"
  },
  {
    "label": "UpdateOrthoPlanes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateOrthoPlanes(FMinimalViewInfo& MinimalViewInfo)"
  },
  {
    "label": "UpdateOrthoPlanes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOrthoPlanes(bool bUseCameraHeightAsViewTarget)"
  },
  {
    "label": "FFirstPersonParameters()",
    "kind": "Method",
    "detail": "Function (} ; enum class EPrimaryScreenPercentageMethod { SpatialUpscale,TemporalUpscale,RawOutput,} ; enum class ESecondaryScreenPercentageMethod { NearestSpatialUpscale,LowerPixelDensitySimulation,} ; struct FFirstPersonParameters { float FOVCorrectionFactor = 1 . 0 f ; float Scale = 1 . 0 f ; bool bUseParameters = false ;)",
    "insertText": "FFirstPersonParameters()"
  },
  {
    "label": "FFirstPersonParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFirstPersonParameters(float InFOVCorrectionFactor, float InScale, bool bInUseParameters) : FOVCorrectionFactor(InFOVCorrectionFactor), Scale(InScale), bUseParameters(bInUseParameters)"
  },
  {
    "label": "FSceneViewInitOptions()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSceneViewInitOptions : public FSceneViewProjectionData { const FSceneViewFamily* ViewFamily ; FSceneViewStateInterface* SceneViewStateInterface ; const AActor* ViewActor ; int32 PlayerIndex ; FViewElementDrawer* ViewElementDrawer ; FLinearColor BackgroundColor ; FLinearColor OverlayColor ; FLinearColor ColorScale ; EStereoscopicPass StereoPass ; int32 StereoViewIndex ; float WorldToMetersScale ; FVector ViewLocation ; FRotator ViewRotation ; TSet<FPrimitiveComponentId> HiddenPrimitives ; TOptional<TSet<FPrimitiveComponentId>> ShowOnlyPrimitives ; FIntPoint CursorPos ; float LODDistanceFactor ; float OverrideFarClippingPlaneDistance ; FVector OriginOffsetThisFrame ; bool bInCameraCut ; bool bUseFieldOfViewForLOD ; float FOV ; float DesiredFOV ; FFirstPersonParameters FirstPersonParams ; bool bIsSceneCapture ; bool bIsSceneCaptureCube ; bool bSceneCaptureUsesRayTracing ; bool bIsReflectionCapture ; bool bIsPlanarReflection ; float OverridePrimaryResolutionFraction ; float OverscanResolutionFraction = 1 . 0 f ; float CropFraction = 1 . 0 f ; # if WITH_EDITOR uint64 EditorViewBitflag ; bool bDisableGameScreenPercentage ; # endif)",
    "insertText": "FSceneViewInitOptions() : ViewFamily(NULL) , SceneViewStateInterface(NULL) , ViewActor(NULL) , PlayerIndex(INDEX_NONE) , ViewElementDrawer(NULL) , BackgroundColor(FLinearColor::Transparent) , OverlayColor(FLinearColor::Transparent) , ColorScale(FLinearColor::White) , StereoPass(EStereoscopicPass::eSSP_FULL) , StereoViewIndex(INDEX_NONE) , WorldToMetersScale(100.f) , ViewLocation(ForceInitToZero) , ViewRotation(ForceInitToZero) , CursorPos(-1, -1) , LODDistanceFactor(1.0f) , OverrideFarClippingPlaneDistance(-1.0f) , OriginOffsetThisFrame(ForceInitToZero) , bInCameraCut(false) , bUseFieldOfViewForLOD(true) , FOV(90.f) , DesiredFOV(90.f) , FirstPersonParams() , bIsSceneCapture(false) , bIsSceneCaptureCube(false) , bSceneCaptureUsesRayTracing(false) , bIsReflectionCapture(false) , bIsPlanarReflection(false) , OverridePrimaryResolutionFraction(-1.0) #if WITH_EDITOR , EditorViewBitflag(1) , bDisableGameScreenPercentage(false)"
  },
  {
    "label": "FIntRect()",
    "kind": "Method",
    "detail": "Function (} } ; struct FViewMatrices { struct FMinimalInitializer { FMatrix ViewRotationMatrix = FMatrix::Identity ; FMatrix ProjectionMatrix = FMatrix::Identity ; FVector ViewOrigin = FVector::ZeroVector ; FIntRect ConstrainedViewRect =)",
    "insertText": "FIntRect(0, 0, 0, 0)"
  },
  {
    "label": "FViewMatrices()",
    "kind": "Method",
    "detail": "Function (FVector CameraToViewTarget = FVector::ZeroVector ; EStereoscopicPass StereoPass = EStereoscopicPass::eSSP_FULL ; FFirstPersonParameters FirstPersonParams = { } ; } ;)",
    "insertText": "FViewMatrices()"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (ProjectionMatrix .)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "FViewMatrices()",
    "kind": "Method",
    "detail": "Function (PreViewTranslation = FVector::ZeroVector ; ViewOrigin = FVector::ZeroVector ; CameraToViewTarget = FVector::ZeroVector ; ProjectionScale = FVector2D::ZeroVector ; TemporalAAProjectionJitter = FVector2D::ZeroVector ; ScreenScale = 1 . f ; })",
    "insertText": "FViewMatrices(const FMinimalInitializer& Initializer)"
  },
  {
    "label": "FViewMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewMatrices(const FSceneViewInitOptions& InitOptions)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Init(const FMinimalInitializer& Initializer)"
  },
  {
    "label": "UpdateViewMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix ProjectionMatrix ; FMatrix ProjectionNoAAMatrix ; FMatrix InvProjectionMatrix ; FMatrix ViewMatrix ; FMatrix InvViewMatrix ; FMatrix ViewProjectionMatrix ; FMatrix InvViewProjectionMatrix ; FMatrix HMDViewMatrixNoRoll ; FMatrix TranslatedViewMatrix ; FMatrix InvTranslatedViewMatrix ; FMatrix OverriddenTranslatedViewMatrix ; FMatrix OverriddenInvTranslatedViewMatrix ; FMatrix TranslatedViewProjectionMatrix ; FMatrix InvTranslatedViewProjectionMatrix ; FMatrix ScreenToClipMatrix ; FMatrix FirstPersonTransform ; FVector PreViewTranslation ; FVector ViewOrigin ; FVector CameraToViewTarget ; FVector2D ProjectionScale ; FVector2D TemporalAAProjectionJitter ; float ScreenScale ; float PerProjectionDepthThicknessScale ; public : void)",
    "insertText": "UpdateViewMatrix(const FVector& ViewLocation, const FRotator& ViewRotation)"
  },
  {
    "label": "UpdatePlanarReflectionViewMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlanarReflectionViewMatrix(const FSceneView& SourceView, const FMirrorMatrix& MirrorMatrix)"
  },
  {
    "label": "GetProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (const FMatrix&)",
    "insertText": "GetProjectionMatrix()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FVector2f(1.0f, 1.0f)"
  },
  {
    "label": "GetTanHalfFov()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetTanHalfFov()"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FVector2f(1.0f,1.0f)"
  },
  {
    "label": "GetTanAndInvTanHalfFOV()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "GetTanAndInvTanHalfFOV()"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FVector4f(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "GetPerProjectionDepthThicknessScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPerProjectionDepthThicknessScale()"
  },
  {
    "label": "HackOverrideViewMatrixForShadows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HackOverrideViewMatrixForShadows(const FMatrix& InViewMatrix)"
  },
  {
    "label": "SaveProjectionNoAAMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveProjectionNoAAMatrix()"
  },
  {
    "label": "HackAddTemporalAAProjectionJitter()",
    "kind": "Method",
    "detail": "Function (ProjectionNoAAMatrix = ProjectionMatrix ; } void)",
    "insertText": "HackAddTemporalAAProjectionJitter(const FVector2D& InTemporalAAProjectionJitter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TemporalAAProjectionJitter = InTemporalAAProjectionJitter ;)",
    "insertText": "if(IsPerspectiveProjection())"
  },
  {
    "label": "InvertProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (ProjectionMatrix . M [ 2 ] [ 0 ] + = TemporalAAProjectionJitter . X ; ProjectionMatrix . M [ 2 ] [ 1 ] + = TemporalAAProjectionJitter . Y ; } else { ProjectionMatrix . M [ 3 ] [ 0 ] + = TemporalAAProjectionJitter . X ; ProjectionMatrix . M [ 3 ] [ 1 ] + = TemporalAAProjectionJitter . Y ; } InvProjectionMatrix =)",
    "insertText": "InvertProjectionMatrix(ProjectionMatrix)"
  },
  {
    "label": "RecomputeDerivedMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeDerivedMatrices()"
  },
  {
    "label": "HackRemoveTemporalAAProjectionJitter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HackRemoveTemporalAAProjectionJitter()"
  },
  {
    "label": "ComputeProjectionNoAAMatrix()",
    "kind": "Method",
    "detail": "Function (} const FMatrix)",
    "insertText": "ComputeProjectionNoAAMatrix()"
  },
  {
    "label": "GetTemporalAAJitter()",
    "kind": "Method",
    "detail": "Function (ProjNoAAMatrix . M [ 2 ] [ 0 ] - = TemporalAAProjectionJitter . X ; ProjNoAAMatrix . M [ 2 ] [ 1 ] - = TemporalAAProjectionJitter . Y ; } else { ProjNoAAMatrix . M [ 3 ] [ 0 ] - = TemporalAAProjectionJitter . X ; ProjNoAAMatrix . M [ 3 ] [ 1 ] - = TemporalAAProjectionJitter . Y ; } return ProjNoAAMatrix ; } const FVector2D)",
    "insertText": "GetTemporalAAJitter()"
  },
  {
    "label": "ComputeInvProjectionNoAAMatrix()",
    "kind": "Method",
    "detail": "Function (} const FMatrix)",
    "insertText": "ComputeInvProjectionNoAAMatrix()"
  },
  {
    "label": "ComputeHalfFieldOfViewPerAxis()",
    "kind": "Method",
    "detail": "Function (} const FVector2D)",
    "insertText": "ComputeHalfFieldOfViewPerAxis()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector VCenter =)",
    "insertText": "FVector(ClipToView.TransformPosition(FVector(0.0, 0.0, 0.0)))"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector VUp =)",
    "insertText": "FVector(ClipToView.TransformPosition(FVector(0.0, 1.0, 0.0)))"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector VRight =)",
    "insertText": "FVector(ClipToView.TransformPosition(FVector(1.0, 0.0, 0.0)))"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (VCenter .)",
    "insertText": "Normalize()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using ResultType =)",
    "insertText": "decltype(FVector2D::X)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Zero()"
  },
  {
    "label": "ComputeNearPlane()",
    "kind": "Method",
    "detail": "Function (} FMatrix::FReal)",
    "insertText": "ComputeNearPlane()"
  },
  {
    "label": "ComputeOrthoFarPlane()",
    "kind": "Method",
    "detail": "Function (} FMatrix::FReal)",
    "insertText": "ComputeOrthoFarPlane()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} return 0 . 0 ; } void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset)"
  },
  {
    "label": "SetOrigin()",
    "kind": "Method",
    "detail": "Function (ViewOrigin + = InOffset ; PreViewTranslation - = InOffset ; ViewMatrix .)",
    "insertText": "SetOrigin(ViewMatrix.GetOrigin() + ViewMatrix.TransformVector(-InOffset))"
  },
  {
    "label": "SetOrigin()",
    "kind": "Method",
    "detail": "Function (InvViewMatrix .)",
    "insertText": "SetOrigin(ViewOrigin)"
  },
  {
    "label": "GetOrthoDimensions()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetOrthoDimensions()"
  },
  {
    "label": "GetViewMatrix()",
    "kind": "Method",
    "detail": "Function (ViewProjectionMatrix =)",
    "insertText": "GetViewMatrix() * GetProjectionMatrix()"
  },
  {
    "label": "GetInvProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (InvViewProjectionMatrix =)",
    "insertText": "GetInvProjectionMatrix() * GetInvViewMatrix()"
  },
  {
    "label": "GetTranslatedViewMatrix()",
    "kind": "Method",
    "detail": "Function (TranslatedViewProjectionMatrix =)",
    "insertText": "GetTranslatedViewMatrix() * GetProjectionMatrix()"
  },
  {
    "label": "GetInvProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (InvTranslatedViewProjectionMatrix =)",
    "insertText": "GetInvProjectionMatrix() * GetInvTranslatedViewMatrix()"
  },
  {
    "label": "InvertProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (} const FMatrix)",
    "insertText": "InvertProjectionMatrix(const FMatrix& M)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} else { return M .)",
    "insertText": "Inverse()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} } } ; const int MAX_MOBILE_SHADOWCASCADES = 4 ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR(FMobileDirectionalLightShaderParameters, ENGINE_API) SHADER_PARAMETER_EX(FLinearColor, DirectionalLightColor, EShaderPrecisionModifier::Half) SHADER_PARAMETER_EX(FVector4f, DirectionalLightDirectionAndShadowTransition, EShaderPrecisionModifier::Half) SHADER_PARAMETER_EX(FVector4f, DirectionalLightShadowSize, EShaderPrecisionModifier::Half) SHADER_PARAMETER_EX(FVector4f, DirectionalLightDistanceFadeMADAndSpecularScale, EShaderPrecisionModifier::Half) SHADER_PARAMETER_EX(FVector4f, DirectionalLightShadowDistances, EShaderPrecisionModifier::Half) SHADER_PARAMETER_ARRAY(FMatrix44f, DirectionalLightScreenToShadow, [MAX_MOBILE_SHADOWCASCADES]) SHADER_PARAMETER(uint32, DirectionalLightNumCascades) SHADER_PARAMETER(uint32, DirectionalLightShadowMapChannelMask) SHADER_PARAMETER_TEXTURE(Texture2D, DirectionalLightShadowTexture) SHADER_PARAMETER_SAMPLER(SamplerState, DirectionalLightShadowSampler) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW()",
    "kind": "Method",
    "detail": "Function (TVC_Inner,TVC_Outer,TVC_MAX,} ; # define SKY_IRRADIANCE_ENVIRONMENT_MAP_VEC4_COUNT 8 # define VIEW_UNIFORM_BUFFER_MEMBER_TABLE \\)",
    "insertText": "VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, TranslatedWorldToClip) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, RelativeWorldToClip) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ClipToRelativeWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, TranslatedWorldToView) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ViewToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, TranslatedWorldToCameraView) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, CameraViewToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ViewToClip) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ViewToClipNoAA) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ClipToView) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ClipToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, SVPositionToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ScreenToRelativeWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ScreenToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, MobileMultiviewShadowTransform) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, MobileMultiviewDecalTransform) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, FirstPersonTransform) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevFirstPersonTransform) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, ViewOriginHigh) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector3f, ViewForward, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector3f, ViewUp, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector3f, ViewRight, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(FVector3f, HMDViewNoRollUp, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(FVector3f, HMDViewNoRollRight, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, InvDeviceZToWorldZTransform) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(FVector4f, ScreenPositionScaleBias, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, ViewOriginLow) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, TranslatedWorldCameraOrigin) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, WorldViewOriginHigh) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, WorldViewOriginLow) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PreViewTranslationHigh) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PreViewTranslationLow) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevViewToClip) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevClipToView) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevTranslatedWorldToClip) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevTranslatedWorldToView) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevViewToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevTranslatedWorldToCameraView) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevCameraViewToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevTranslatedWorldCameraOrigin) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevWorldCameraOriginHigh) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevWorldCameraOriginLow) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevWorldViewOriginHigh) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevWorldViewOriginLow) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevPreViewTranslationHigh) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevPreViewTranslationLow) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, ViewTilePosition) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, RelativeWorldCameraOriginTO) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, RelativeWorldViewOriginTO) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, RelativePreViewTranslationTO) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevRelativeWorldCameraOriginTO) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, PrevRelativeWorldViewOriginTO) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, RelativePrevPreViewTranslationTO) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevClipToRelativeWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, PrevScreenToTranslatedWorld) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ClipToPrevClip) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FMatrix44f, ClipToPrevClipWithAA) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, TemporalAAJitter) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, GlobalClippingPlane) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector2f, FieldOfViewWideAngles) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector2f, PrevFieldOfViewWideAngles) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(FVector4f, ViewRectMin, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, ViewSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FUintVector4, ViewRectMinAndSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, LightProbeSizeRatioAndInvSizeRatio) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, BufferSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, BufferBilinearUVMinMax) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, ScreenToViewSpace) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector2f, BufferToSceneTextureScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, ResolutionFractionAndInv) \\ VIEW_UNIFORM_BUFFER_MEMBER(int32, NumSceneColorMSAASamples) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(float, ProjectionDepthThicknessScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, PreExposure) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, OneOverPreExposure) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4f, DiffuseOverrideParameter, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4f, SpecularOverrideParameter, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector4f, NormalOverrideParameter, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector2f, RoughnessOverrideParameter, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, PrevFrameGameTime) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, PrevFrameRealTime) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(float, OutOfBoundsMask, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector3f, WorldCameraMovementSinceLastFrame) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, CullingSign) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(float, NearPlane, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(float, OrthoFarPlane) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GameTime) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, RealTime) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DeltaTime) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MaterialTextureMipBias) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MaterialTextureDerivativeMultiply) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, Random) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, FrameNumber) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, FrameCounter) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, StateFrameIndexMod8) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, StateFrameIndex) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, StateOutputFrameIndex) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, DebugViewModeMask) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, WorldIsPaused) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(float, CameraCut, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(float, UnlitViewmodeMask, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FLinearColor, DirectionalLightColor, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(FVector3f, DirectionalLightDirection, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, TranslucencyLightingVolumeMin, TVC_MAX) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, TranslucencyLightingVolumeInvSize, TVC_MAX) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, TemporalAAParams) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, CircleDOFParams) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldSensorWidth) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFocalDistance) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFocalLength) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFocalRegion) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldNearTransitionRegion) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DepthOfFieldFarTransitionRegion) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MotionBlurNormalizedToPixel) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GeneralPurposeTweak) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GeneralPurposeTweak2) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(float, DemosaicVposOffset, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DecalDepthBias) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, IndirectLightingColorScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, PrecomputedIndirectLightingColorScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, PrecomputedIndirectSpecularColorScale) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, AtmosphereLightDirection, NUM_ATMOSPHERE_LIGHTS) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FLinearColor, AtmosphereLightIlluminanceOnGroundPostTransmittance, NUM_ATMOSPHERE_LIGHTS) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FLinearColor, AtmosphereLightIlluminanceOuterSpace, NUM_ATMOSPHERE_LIGHTS) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FLinearColor, AtmosphereLightDiscLuminance, NUM_ATMOSPHERE_LIGHTS) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, AtmosphereLightDiscCosHalfApexAngle_PPTrans, NUM_ATMOSPHERE_LIGHTS) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, SkyViewLutSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, SkyCameraTranslatedWorldOrigin) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, SkyPlanetTranslatedWorldCenterAndViewHeight) \\ VIEW_UNIFORM_BUFFER_MEMBER(FMatrix44f, SkyViewLutReferential) \\ VIEW_UNIFORM_BUFFER_MEMBER(FLinearColor, SkyAtmosphereSkyLuminanceFactor) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmospherePresentInScene) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereHeightFogContribution) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereBottomRadiusKm) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereTopRadiusKm) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereAerialPerspectiveStartDepthKm) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyAtmosphereApplyCameraAerialPerspectiveVolume) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, NormalCurvatureToRoughnessScaleBias) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, RenderingReflectionCaptureMask) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, RealTimeReflectionCapture) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, RealTimeReflectionCapturePreExposure) \\ VIEW_UNIFORM_BUFFER_MEMBER(FLinearColor, AmbientCubemapTint) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, AmbientCubemapIntensity) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyLightApplyPrecomputedBentNormalShadowingFlag) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyLightAffectReflectionFlag) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyLightAffectGlobalIlluminationFlag) \\ VIEW_UNIFORM_BUFFER_MEMBER(FLinearColor, SkyLightColor) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SkyLightVolumetricScatteringIntensity) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, MobileSkyIrradianceEnvironmentMap, SKY_IRRADIANCE_ENVIRONMENT_MAP_VEC4_COUNT) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MobilePreviewMode) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(float, HMDEyePaddingOffset) \\ VIEW_UNIFORM_BUFFER_MEMBER_EX(float, ReflectionCubemapMaxMip, EShaderPrecisionModifier::Half) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, ShowDecalsMask) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, DistanceFieldAOSpecularOcclusionMode) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, IndirectCapsuleSelfShadowingIntensity) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(int32, StereoPassIndex) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, GlobalVolumeTranslatedCenterAndExtent, GlobalDistanceField::MaxClipmaps) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, GlobalVolumeTranslatedWorldToUVAddAndMul, GlobalDistanceField::MaxClipmaps) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, GlobalDistanceFieldMipTranslatedWorldToUVScale, GlobalDistanceField::MaxClipmaps) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, GlobalDistanceFieldMipTranslatedWorldToUVBias, GlobalDistanceField::MaxClipmaps) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalDistanceFieldMipFactor) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalDistanceFieldMipTransition) \\ VIEW_UNIFORM_BUFFER_MEMBER(int32, GlobalDistanceFieldClipmapSizeInPages) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, GlobalDistanceFieldInvPageAtlasSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, GlobalDistanceFieldInvCoverageAtlasSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalVolumeDimension) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalVolumeTexelSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MaxGlobalDFAOConeDistance) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, NumGlobalSDFClipmaps) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, CoveredExpandSurfaceScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, NotCoveredExpandSurfaceScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, NotCoveredMinStepScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DitheredTransparencyStepThreshold) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, DitheredTransparencyTraceThreshold) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, ViewportScaleUI) \\ VIEW_UNIFORM_BUFFER_MEMBER(FIntPoint, CursorPosition) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, bCheckerboardSubsurfaceProfileRendering) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricFogInvGridSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricFogGridZParams) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogSVPosToVolumeUV) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogViewGridUVToPrevViewRectUV) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogPrevViewGridRectUVToResourceUV) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogPrevUVMax) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogPrevUVMaxForTemporalBlend) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricFogPrevResourceGridSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogScreenToResourceUV) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, VolumetricFogUVMax) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, VolumetricFogMaxDistance) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricLightmapWorldToUVScale) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricLightmapWorldToUVAdd) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricLightmapIndirectionTextureSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, VolumetricLightmapBrickSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, VolumetricLightmapBrickTexelSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, IndirectLightingCacheShowFlag) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, EyeToPixelSpreadAngle) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FVector4f, XRPassthroughCameraUVs, 2) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, GlobalVirtualTextureMipBias) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, VirtualTextureFeedbackShift) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, VirtualTextureFeedbackMask) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, VirtualTextureFeedbackStride) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, VirtualTextureFeedbackJitterOffset) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, VirtualTextureFeedbackSampleOffset) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, RuntimeVirtualTextureMipLevel) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector2f, RuntimeVirtualTexturePackHeight) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, RuntimeVirtualTextureDebugParams) \\ VIEW_UNIFORM_BUFFER_MEMBER(int32, FarShadowStaticMeshLODBias) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MinRoughness) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, HairRenderInfo) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, EnableSkyLight) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, HairRenderInfoBits) \\ VIEW_UNIFORM_BUFFER_MEMBER(uint32, HairComponents) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, bSubsurfacePostprocessEnabled) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, SSProfilesTextureSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, SSProfilesPreIntegratedTextureSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector4f, SpecularProfileTextureSizeAndInvSize) \\ VIEW_UNIFORM_BUFFER_MEMBER(FVector3f, PhysicsFieldClipmapCenter) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, PhysicsFieldClipmapDistance) \\ VIEW_UNIFORM_BUFFER_MEMBER(int, PhysicsFieldClipmapResolution) \\ VIEW_UNIFORM_BUFFER_MEMBER(int, PhysicsFieldClipmapExponent) \\ VIEW_UNIFORM_BUFFER_MEMBER(int, PhysicsFieldClipmapCount) \\ VIEW_UNIFORM_BUFFER_MEMBER(int, PhysicsFieldTargetCount) \\ VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(FIntVector4, PhysicsFieldTargets, MAX_PHYSICS_FIELD_TARGETS) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(uint32, GPUSceneViewId) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, ViewResolutionFraction) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, SubSurfaceColorAsTransmittanceAtDistanceInMeters) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, TanAndInvTanHalfFOV) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, PrevTanAndInvTanHalfFOV) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector2f, WorldDepthToPixelWorldRadius) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, ScreenRayLengthMultiplier) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, GlintLUTParameters0) \\ VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(FVector4f, GlintLUTParameters1) \\ VIEW_UNIFORM_BUFFER_MEMBER(float, MaterialMaxEmissiveValue) \\ VIEW_UNIFORM_BUFFER_MEMBER(int32, PostVolumeUserFlags) \\ VIEW_UNIFORM_BUFFER_MEMBER(FIntVector4, EnvironmentComponentsFlags) \\ #define VIEW_UNIFORM_BUFFER_MEMBER(type, identifier) \\ SHADER_PARAMETER(type, identifier) #define VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(type, identifier) \\ SHADER_PARAMETER(type, identifier) #define VIEW_UNIFORM_BUFFER_MEMBER_EX(type, identifier, precision) \\ SHADER_PARAMETER_EX(type, identifier, precision) #define VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(type, identifier, precision) \\ SHADER_PARAMETER_EX(type, identifier, precision) #define VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(type, identifier, dimension) \\ SHADER_PARAMETER_ARRAY(type, identifier, [dimension]) #define VIEW_UNIFORM_BUFFER_MEMBER_ARRAY_PER_VIEW(type, identifier, dimension) \\ SHADER_PARAMETER_ARRAY(type, identifier, [dimension]) BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR(FViewUniformShaderParameters, ENGINE_API) VIEW_UNIFORM_BUFFER_MEMBER_TABLE SHADER_PARAMETER_SAMPLER(SamplerState, MaterialTextureBilinearWrapedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, MaterialTextureBilinearClampedSampler) SHADER_PARAMETER_TEXTURE(Texture3D<uint4>, VolumetricLightmapIndirectionTexture) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickAmbientVector) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients0) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients1) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients2) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients3) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients4) SHADER_PARAMETER_TEXTURE(Texture3D, VolumetricLightmapBrickSHCoefficients5) SHADER_PARAMETER_TEXTURE(Texture3D, SkyBentNormalBrickTexture) SHADER_PARAMETER_TEXTURE(Texture3D, DirectionalLightShadowingBrickTexture) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapBrickAmbientVectorSampler) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler0) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler1) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler2) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler3) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler4) SHADER_PARAMETER_SAMPLER(SamplerState, VolumetricLightmapTextureSampler5) SHADER_PARAMETER_SAMPLER(SamplerState, SkyBentNormalTextureSampler) SHADER_PARAMETER_SAMPLER(SamplerState, DirectionalLightShadowingTextureSampler) SHADER_PARAMETER_TEXTURE(Texture3D, GlobalDistanceFieldPageAtlasTexture) SHADER_PARAMETER_TEXTURE(Texture3D, GlobalDistanceFieldCoverageAtlasTexture) SHADER_PARAMETER_TEXTURE(Texture3D<uint>, GlobalDistanceFieldPageTableTexture) SHADER_PARAMETER_TEXTURE(Texture3D, GlobalDistanceFieldMipTexture) SHADER_PARAMETER_SAMPLER(SamplerState, GlobalDistanceFieldPageAtlasTextureSampler) SHADER_PARAMETER_SAMPLER(SamplerState, GlobalDistanceFieldCoverageAtlasTextureSampler) SHADER_PARAMETER_SAMPLER(SamplerState, GlobalDistanceFieldMipTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, AtmosphereTransmittanceTexture) SHADER_PARAMETER_SAMPLER(SamplerState, AtmosphereTransmittanceTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, AtmosphereIrradianceTexture) SHADER_PARAMETER_SAMPLER(SamplerState, AtmosphereIrradianceTextureSampler) SHADER_PARAMETER_TEXTURE(Texture3D, AtmosphereInscatterTexture) SHADER_PARAMETER_SAMPLER(SamplerState, AtmosphereInscatterTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, PerlinNoiseGradientTexture) SHADER_PARAMETER_SAMPLER(SamplerState, PerlinNoiseGradientTextureSampler) SHADER_PARAMETER_TEXTURE(Texture3D, PerlinNoise3DTexture) SHADER_PARAMETER_SAMPLER(SamplerState, PerlinNoise3DTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D<uint>, SobolSamplingTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SharedPointWrappedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SharedPointClampedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SharedBilinearWrappedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SharedBilinearClampedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SharedBilinearAnisoClampedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SharedTrilinearWrappedSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SharedTrilinearClampedSampler) SHADER_PARAMETER_TEXTURE(Texture2D, PreIntegratedBRDF) SHADER_PARAMETER_SAMPLER(SamplerState, PreIntegratedBRDFSampler) SHADER_PARAMETER_SRV(StructuredBuffer<float4>, SkyIrradianceEnvironmentMap) SHADER_PARAMETER_TEXTURE(Texture2D, TransmittanceLutTexture) SHADER_PARAMETER_SAMPLER(SamplerState, TransmittanceLutTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, SkyViewLutTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SkyViewLutTextureSampler) SHADER_PARAMETER_TEXTURE(Texture3D, CameraAerialPerspectiveVolume) SHADER_PARAMETER_SAMPLER(SamplerState, CameraAerialPerspectiveVolumeSampler) SHADER_PARAMETER_TEXTURE(Texture3D, CameraAerialPerspectiveVolumeMieOnly) SHADER_PARAMETER_SAMPLER(SamplerState, CameraAerialPerspectiveVolumeMieOnlySampler) SHADER_PARAMETER_TEXTURE(Texture3D, CameraAerialPerspectiveVolumeRayOnly) SHADER_PARAMETER_SAMPLER(SamplerState, CameraAerialPerspectiveVolumeRayOnlySampler) SHADER_PARAMETER_SRV(StructuredBuffer<float4>, DistantSkyLightLutBufferSRV) SHADER_PARAMETER_SRV(Buffer<float4>, MobileDistantSkyLightLutBufferSRV) SHADER_PARAMETER_TEXTURE(Texture3D, HairScatteringLUTTexture) SHADER_PARAMETER_SAMPLER(SamplerState, HairScatteringLUTSampler) SHADER_PARAMETER_TEXTURE(Texture2D, GGXLTCMatTexture) SHADER_PARAMETER_SAMPLER(SamplerState, GGXLTCMatSampler) SHADER_PARAMETER_TEXTURE(Texture2D, GGXLTCAmpTexture) SHADER_PARAMETER_SAMPLER(SamplerState, GGXLTCAmpSampler) SHADER_PARAMETER_TEXTURE(Texture2D, SheenLTCTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SheenLTCSampler) SHADER_PARAMETER(uint32, bShadingEnergyConservation) SHADER_PARAMETER(uint32, bShadingEnergyPreservation) SHADER_PARAMETER_TEXTURE(Texture2D<float2>, ShadingEnergyGGXSpecTexture) SHADER_PARAMETER_TEXTURE(Texture3D<float2>, ShadingEnergyGGXGlassTexture) SHADER_PARAMETER_TEXTURE(Texture2D<float2>, ShadingEnergyClothSpecTexture) SHADER_PARAMETER_TEXTURE(Texture2D<float>, ShadingEnergyDiffuseTexture) SHADER_PARAMETER_SAMPLER(SamplerState, ShadingEnergySampler) SHADER_PARAMETER_TEXTURE(Texture2DArray<float4>, GlintTexture) SHADER_PARAMETER_SAMPLER(SamplerState, GlintSampler) SHADER_PARAMETER_TEXTURE(Texture3D<float>, SimpleVolumeTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SimpleVolumeTextureSampler) SHADER_PARAMETER_TEXTURE(Texture3D<float>, SimpleVolumeEnvTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SimpleVolumeEnvTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, SSProfilesTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SSProfilesSampler) SHADER_PARAMETER_SAMPLER(SamplerState, SSProfilesTransmissionSampler) SHADER_PARAMETER_TEXTURE(Texture2DArray, SSProfilesPreIntegratedTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SSProfilesPreIntegratedSampler) SHADER_PARAMETER_TEXTURE(Texture2DArray, SpecularProfileTexture) SHADER_PARAMETER_SAMPLER(SamplerState, SpecularProfileSampler) SHADER_PARAMETER_SRV(Buffer<float4>, WaterIndirection) SHADER_PARAMETER_SRV(Buffer<float4>, WaterData) SHADER_PARAMETER(int32, WaterInfoTextureViewIndex) SHADER_PARAMETER(FVector4f, RectLightAtlasSizeAndInvSize) SHADER_PARAMETER(float, RectLightAtlasMaxMipLevel) SHADER_PARAMETER_TEXTURE(Texture2D<float4>, RectLightAtlasTexture) SHADER_PARAMETER_SAMPLER(SamplerState, RectLightAtlasSampler) SHADER_PARAMETER(FVector4f, IESAtlasSizeAndInvSize) SHADER_PARAMETER_TEXTURE(Texture2DArray<float>, IESAtlasTexture) SHADER_PARAMETER_SAMPLER(SamplerState, IESAtlasSampler) SHADER_PARAMETER_SAMPLER(SamplerState, LandscapeWeightmapSampler) SHADER_PARAMETER_SRV(Buffer<uint>, LandscapeIndirection) SHADER_PARAMETER_SRV(Buffer<float>, LandscapePerComponentData) SHADER_PARAMETER_UAV(RWStructuredBuffer<uint>, VTFeedbackBuffer) SHADER_PARAMETER_SRV(Buffer<float>, PhysicsFieldClipmapBuffer) SHADER_PARAMETER(FVector3f, TLASPreViewTranslationHigh) SHADER_PARAMETER(FVector3f, TLASPreViewTranslationLow) END_GLOBAL_SHADER_PARAMETER_STRUCT() #undef VIEW_UNIFORM_BUFFER_MEMBER #undef VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW #undef VIEW_UNIFORM_BUFFER_MEMBER_EX #undef VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX #undef VIEW_UNIFORM_BUFFER_MEMBER_ARRAY #undef VIEW_UNIFORM_BUFFER_MEMBER_ARRAY_PER_VIEW #define INSTANCED_VIEW_COUNT 2 #define VIEW_UNIFORM_BUFFER_MEMBER(type, identifier) \\ SHADER_PARAMETER(type, identifier) #define VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(type, identifier) \\ SHADER_PARAMETER_ARRAY(TShaderParameterTypeInfo<type>::TInstancedType, identifier, [INSTANCED_VIEW_COUNT]) #define VIEW_UNIFORM_BUFFER_MEMBER_EX(type, identifier, precision) \\ SHADER_PARAMETER_EX(type, identifier, precision) #define VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(type, identifier, precision) \\ SHADER_PARAMETER_ARRAY_EX(TShaderParameterTypeInfo<type>::TInstancedType, identifier, [INSTANCED_VIEW_COUNT], precision) #define VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(type, identifier, dimension) \\ SHADER_PARAMETER_ARRAY(type, identifier, [dimension]) #define VIEW_UNIFORM_BUFFER_MEMBER_ARRAY_PER_VIEW(type, identifier, dimension) \\ SHADER_PARAMETER_ARRAY(type, identifier, [dimension * INSTANCED_VIEW_COUNT]) BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT_WITH_CONSTRUCTOR(FInstancedViewUniformShaderParameters, ENGINE_API) VIEW_UNIFORM_BUFFER_MEMBER_TABLE END_GLOBAL_SHADER_PARAMETER_STRUCT() #undef VIEW_UNIFORM_BUFFER_MEMBER #undef VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW #undef VIEW_UNIFORM_BUFFER_MEMBER_EX #undef VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX #undef VIEW_UNIFORM_BUFFER_MEMBER_ARRAY #undef VIEW_UNIFORM_BUFFER_MEMBER_ARRAY_PER_VIEW #undef INSTANCED_VIEW_COUNT #define VIEW_UNIFORM_BUFFER_MEMBER(type, identifier) \\ if ( CopyViewId == 0)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&InstancedViewParameters.identifier, &ViewParameters.identifier, sizeof(type))"
  },
  {
    "label": "VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW(type, identifier) \\ FMemory::Memcpy(&InstancedViewParameters.identifier[CopyViewId], &ViewParameters.identifier, sizeof(type))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(FMemory::MemIsZero(((uint8*) &InstancedViewParameters.identifier[CopyViewId]) + sizeof(type), sizeof(TShaderParameterTypeInfo<type>::TInstancedType) - sizeof(type)))"
  },
  {
    "label": "VIEW_UNIFORM_BUFFER_MEMBER_EX()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VIEW_UNIFORM_BUFFER_MEMBER_EX(type, identifier, precision) \\ if ( CopyViewId == 0)"
  },
  {
    "label": "VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX(type, identifier, precision) \\ FMemory::Memcpy(&InstancedViewParameters.identifier[CopyViewId], &ViewParameters.identifier, sizeof(type))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(FMemory::MemIsZero(((uint8*)&InstancedViewParameters.identifier[CopyViewId]) + sizeof(type), sizeof(TShaderParameterTypeInfo<type>::TInstancedType) - sizeof(type)))"
  },
  {
    "label": "VIEW_UNIFORM_BUFFER_MEMBER_ARRAY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VIEW_UNIFORM_BUFFER_MEMBER_ARRAY(type, identifier, dimension) \\ if ( CopyViewId == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(uint32 ElementIndex = 0; ElementIndex < dimension; ElementIndex++)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Memcpy(&InstancedViewParameters.identifier[CopyViewId * dimension + ElementIndex], &ViewParameters.identifier[ElementIndex], sizeof(type))"
  },
  {
    "label": "VIEW_UNIFORM_BUFFER_MEMBER_ARRAY_PER_VIEW()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "VIEW_UNIFORM_BUFFER_MEMBER_ARRAY_PER_VIEW(type, identifier, dimension) \\ for (uint32 ElementIndex = 0; ElementIndex < dimension; ElementIndex++)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(FMemory::MemIsZero(((uint8*) &InstancedViewParameters.identifier[CopyViewId * dimension + ElementIndex]) + sizeof(type), sizeof(TShaderParameterTypeInfo<type>::TInstancedType) - sizeof(type)))"
  },
  {
    "label": "CopyIntoInstancedViewParameters()",
    "kind": "Method",
    "detail": "Function (\\ } namespace InstancedViewParametersUtils { void)",
    "insertText": "CopyIntoInstancedViewParameters(FInstancedViewUniformShaderParameters& InstancedViewParameters, const FViewUniformShaderParameters& ViewParameters, uint32 CopyViewId)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (VIEW_UNIFORM_BUFFER_MEMBER_TABLE } } # undef VIEW_UNIFORM_BUFFER_MEMBER # undef VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW # undef VIEW_UNIFORM_BUFFER_MEMBER_EX # undef VIEW_UNIFORM_BUFFER_MEMBER_PER_VIEW_EX # undef VIEW_UNIFORM_BUFFER_MEMBER_ARRAY # undef VIEW_UNIFORM_BUFFER_MEMBER_TABLE)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FViewShaderParameters, ) SHADER_PARAMETER_STRUCT_REF(FViewUniformShaderParameters, View) SHADER_PARAMETER_STRUCT_REF(FInstancedViewUniformShaderParameters, InstancedView) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "FSceneViewFixLayout()",
    "kind": "Method",
    "detail": "Function (enum Type : int32 { None = 0,ForceLowestLOD = 0 x1,FarShadowCascade = 0 x2,} ; } class FSceneViewFixLayout { public : ~)",
    "insertText": "FSceneViewFixLayout()"
  },
  {
    "label": "FMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix ViewRotationMatrix =)",
    "insertText": "FMatrix(EForceInit::ForceInit)"
  },
  {
    "label": "FSceneView()",
    "kind": "Method",
    "detail": "Function (FVector2f WaterHeightExtents = FVector2f::ZeroVector ; float GroundZMin = 0 . 0 f ; float CaptureZ = 0 . 0 f ; int32 VelocityBlurRadius = 0 ; int32 RenderTargetArrayLayer = 0 ; } ; TArray<FWaterInfoTextureRenderingParams> WaterInfoTextureRenderingParams ; FShaderResourceViewRHIRef LandscapeIndirectionBuffer ; FShaderResourceViewRHIRef LandscapePerComponentDataBuffer ; bool bEnableDynamicCocOffset = false ; float InFocusDistance = 0 . 0 ; FTextureRHIRef DynamicCocOffsetLUT ; const ERHIFeatureLevel::Type FeatureLevel ; uint32 InstanceFactor = 1 ; bool bAllowRayTracing = true ; UE::StereoRenderUtils::FStereoShaderAspects Aspects ; protected : class FSceneRenderer ; const FSceneView* SnapshotOriginView = nullptr ; public :)",
    "insertText": "FSceneView(const FSceneViewInitOptions& InitOptions)"
  },
  {
    "label": "FSceneView()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FSceneView(const FSceneView& Other)"
  },
  {
    "label": "FSceneView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneView(FSceneView&& Other)"
  },
  {
    "label": "FSceneView()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FSceneView()"
  },
  {
    "label": "VerifyMembersChecks()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK | | USING_CODE_ANALYSIS bool)",
    "insertText": "VerifyMembersChecks()"
  },
  {
    "label": "AllowGPUParticleUpdate()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "AllowGPUParticleUpdate()"
  },
  {
    "label": "ScreenToWorld()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ScreenToWorld(const FVector4& ScreenPoint)"
  },
  {
    "label": "ScreenToPixel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScreenToPixel(const FVector4& ScreenPoint,FVector2D& OutPixelLocation)"
  },
  {
    "label": "PixelToScreen()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "PixelToScreen(float X,float Y,float Z)"
  },
  {
    "label": "CursorToScreen()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "CursorToScreen(float X, float Y, float Z)"
  },
  {
    "label": "WorldToPixel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WorldToPixel(const FVector& WorldPoint,FVector2D& OutPixelLocation)"
  },
  {
    "label": "PixelToWorld()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "PixelToWorld(float X,float Y,float Z)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (FPlane)",
    "insertText": "Project(const FVector& WorldPoint)"
  },
  {
    "label": "Deproject()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Deproject(const FPlane& ScreenPoint)"
  },
  {
    "label": "DeprojectFVector2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeprojectFVector2D(const FVector2D& ScreenPos, FVector& out_WorldOrigin, FVector& out_WorldDirection)"
  },
  {
    "label": "DeprojectScreenToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeprojectScreenToWorld(const FVector2D& ScreenPos, const FIntRect& ViewRect, const FMatrix& InvViewMatrix, const FMatrix& InvProjMatrix, FVector& out_WorldOrigin, FVector& out_WorldDirection)"
  },
  {
    "label": "DeprojectScreenToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeprojectScreenToWorld(const FVector2D& ScreenPos, const FIntRect& ViewRect, const FMatrix& InvViewProjMatrix, FVector& out_WorldOrigin, FVector& out_WorldDirection)"
  },
  {
    "label": "ProjectWorldToScreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectWorldToScreen(const FVector& WorldPosition, const FIntRect& ViewRect, const FMatrix& ViewProjectionMatrix, FVector2D& out_ScreenPos, bool bShouldCalcOutsideViewPosition = false)"
  },
  {
    "label": "GetViewRight()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetViewRight()"
  },
  {
    "label": "GetViewUp()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetViewUp()"
  },
  {
    "label": "GetViewDirection()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetViewDirection()"
  },
  {
    "label": "GetDynamicMeshElementsShadowCullFrustum()",
    "kind": "Method",
    "detail": "Function (} const FConvexVolume*)",
    "insertText": "GetDynamicMeshElementsShadowCullFrustum()"
  },
  {
    "label": "GetPreShadowTranslation()",
    "kind": "Method",
    "detail": "Function (DynamicMeshElementsShadowCullFrustum = InDynamicMeshElementsShadowCullFrustum ; } const FVector&)",
    "insertText": "GetPreShadowTranslation()"
  },
  {
    "label": "IsUnderwater()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUnderwater()"
  },
  {
    "label": "GetTemporalLODTransition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTemporalLODTransition()"
  },
  {
    "label": "GetDistanceFieldTemporalSampleIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDistanceFieldTemporalSampleIndex()"
  },
  {
    "label": "GetViewKey()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetViewKey()"
  },
  {
    "label": "GetOcclusionFrameCounter()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOcclusionFrameCounter()"
  },
  {
    "label": "UpdateProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProjectionMatrix(const FMatrix& NewProjectionMatrix)"
  },
  {
    "label": "UpdateViewMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewMatrix()"
  },
  {
    "label": "StartFinalPostprocessSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFinalPostprocessSettings(FVector InViewLocation)"
  },
  {
    "label": "OverridePostProcessSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePostProcessSettings(const FPostProcessSettings& Src, float Weight)"
  },
  {
    "label": "EndFinalPostprocessSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFinalPostprocessSettings(const FSceneViewInitOptions& ViewInitOptions)"
  },
  {
    "label": "SetupAntiAliasingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupAntiAliasingMethod()"
  },
  {
    "label": "ConfigureBufferVisualizationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureBufferVisualizationSettings()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING) ENGINE_API void ConfigureVisualizeCalibrationSettings()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (# endif ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "IsInstancedStereoPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstancedStereoPass()"
  },
  {
    "label": "GetStereoPassInstanceFactor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStereoPassInstanceFactor()"
  },
  {
    "label": "GetScreenPositionScaleBias()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "GetScreenPositionScaleBias(const FIntPoint& BufferSize, const FIntRect& ViewRect)"
  },
  {
    "label": "SetupCommonViewUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCommonViewUniformBufferParameters(FViewUniformShaderParameters& ViewUniformShaderParameters, const FIntPoint& InBufferSize, int32 NumMSAASamples, const FIntRect& InEffectiveViewRect, const FViewMatrices& InViewMatrices, const FViewMatrices& InPrevViewMatrices)"
  },
  {
    "label": "HasValidEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidEyeAdaptationBuffer()"
  },
  {
    "label": "GetEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGPooledBuffer*)",
    "insertText": "GetEyeAdaptationBuffer()"
  },
  {
    "label": "GetLastEyeAdaptationExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastEyeAdaptationExposure()"
  },
  {
    "label": "GetPrimarySceneView()",
    "kind": "Method",
    "detail": "Function (const FSceneView*)",
    "insertText": "GetPrimarySceneView()"
  },
  {
    "label": "IsPrimarySceneView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrimarySceneView()"
  },
  {
    "label": "GetInstancedSceneView()",
    "kind": "Method",
    "detail": "Function (} const FSceneView*)",
    "insertText": "GetInstancedSceneView()"
  },
  {
    "label": "IsInstancedSceneView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstancedSceneView()"
  },
  {
    "label": "GetSecondaryViews()",
    "kind": "Method",
    "detail": "Function (} TArray<const FSceneView*>)",
    "insertText": "GetSecondaryViews()"
  },
  {
    "label": "GetInstancedViewUniformBuffer()",
    "kind": "Method",
    "detail": "Function (const TUniformBufferRef<FInstancedViewUniformShaderParameters>&)",
    "insertText": "GetInstancedViewUniformBuffer()"
  },
  {
    "label": "FDisplayInternalsData()",
    "kind": "Method",
    "detail": "Function (} protected : FSceneViewStateInterface* EyeAdaptationViewState = nullptr ; TUniformBufferRef<FInstancedViewUniformShaderParameters> InstancedViewUniformBuffer ; } ; struct FDisplayInternalsData { int32 DisplayInternalsCVarValue ; uint32 NumPendingStreamingRequests ;)",
    "insertText": "FDisplayInternalsData() : DisplayInternalsCVarValue(0) , NumPendingStreamingRequests(-1)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Setup(UWorld *World)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetSubclassIdentifier()",
    "kind": "Method",
    "detail": "Function (} ; class FSceneViewFamily ; } ; class ISceneViewFamilyExtentionData : public ISceneViewFamilyExtention { public : const TCHAR*)",
    "insertText": "GetSubclassIdentifier()"
  },
  {
    "label": "IsValidResolutionFraction()",
    "kind": "Method",
    "detail": "Function (} ; class ISceneViewFamilyScreenPercentage : ISceneViewFamilyExtention { public : float kMinResolutionFraction = 0 . 0 1 f ; float kMaxResolutionFraction = 4 . 0 f ; float kMinTSRResolutionFraction = 0 . 2 5 f ; float kMaxTSRResolutionFraction = 2 . 0 f ; float kMinTAAUpsampleResolutionFraction = 0 . 5 f ; float kMaxTAAUpsampleResolutionFraction = 2 . 0 f ; # if DO_CHECK | | USING_CODE_ANALYSIS bool)",
    "insertText": "IsValidResolutionFraction(float ResolutionFraction)"
  },
  {
    "label": "Fork_GameThread()",
    "kind": "Method",
    "detail": "Function (ISceneViewFamilyScreenPercentage*)",
    "insertText": "Fork_GameThread(const class FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "GetResolutionFractions_RenderThread()",
    "kind": "Method",
    "detail": "Function (protected : DynamicRenderScaling::TMap<float>)",
    "insertText": "GetResolutionFractions_RenderThread()"
  },
  {
    "label": "ConstructionValues()",
    "kind": "Method",
    "detail": "Function (class FSceneViewFamily ; class FSceneRenderer ; } ; class FSceneViewFamily { public : struct ConstructionValues { PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "ConstructionValues(ConstructionValues&&)"
  },
  {
    "label": "ConstructionValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructionValues(const ConstructionValues& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstructionValues&)",
    "insertText": "operator(ConstructionValues&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstructionValues&)",
    "insertText": "operator(const ConstructionValues& Other)"
  },
  {
    "label": "ConstructionValues()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "ConstructionValues(const FRenderTarget* InRenderTarget, FSceneInterface* InScene, const FEngineShowFlags& InEngineShowFlags)"
  },
  {
    "label": "SetRenderTargetDepth()",
    "kind": "Method",
    "detail": "Function (uint32 bAdditionalViewFamily : 1 ; uint32 bRealtimeUpdate : 1 ; uint32 bDeferClear : 1 ; uint32 bResolveScene : 1 ; uint32 bTimesSet : 1 ; uint32 bRequireMultiView : 1 ; ConstructionValues&)",
    "insertText": "SetRenderTargetDepth(const FRenderTarget* InRenderTargetDepth)"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (RenderTargetDepth = InRenderTargetDepth ; return* this ; } ConstructionValues&)",
    "insertText": "SetTime(const FGameTime& InTime)"
  },
  {
    "label": "SetAdditionalViewFamily()",
    "kind": "Method",
    "detail": "Function (} ConstructionValues&)",
    "insertText": "SetAdditionalViewFamily(const bool Value)"
  },
  {
    "label": "SetRealtimeUpdate()",
    "kind": "Method",
    "detail": "Function (bAdditionalViewFamily = Value ; return* this ; } ConstructionValues&)",
    "insertText": "SetRealtimeUpdate(const bool Value)"
  },
  {
    "label": "SetDeferClear()",
    "kind": "Method",
    "detail": "Function (bRealtimeUpdate = Value ; return* this ; } ConstructionValues&)",
    "insertText": "SetDeferClear(const bool Value)"
  },
  {
    "label": "SetResolveScene()",
    "kind": "Method",
    "detail": "Function (bDeferClear = Value ; return* this ; } ConstructionValues&)",
    "insertText": "SetResolveScene(const bool Value)"
  },
  {
    "label": "SetRequireMobileMultiView()",
    "kind": "Method",
    "detail": "Function (bResolveScene = Value ; return* this ; } ConstructionValues&)",
    "insertText": "SetRequireMobileMultiView(const bool Value)"
  },
  {
    "label": "SetViewModeParam()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS GammaCorrection = Value ; return* this ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } ConstructionValues&)",
    "insertText": "SetViewModeParam(const int InViewModeParam, const FName& InViewModeParamName)"
  },
  {
    "label": "FSceneViewFamily()",
    "kind": "Method",
    "detail": "Function (float DebugDPIScale = 1 . 0 f ; FExposureSettings ExposureSettings ; TArray<TSharedRef<class ISceneViewExtension,ESPMode::ThreadSafe>> ViewExtensions ; FDisplayInternalsData DisplayInternalsData ; float SecondaryViewFraction ; ESecondaryScreenPercentageMethod SecondaryScreenPercentageMethod ; int8 LandscapeLODOverride ; bool bCurrentlyBeingEdited ; bool bOverrideVirtualTextureThrottle ; int32 VirtualTextureFeedbackFactor ; # if WITH_EDITOR bool bDrawBaseInfo ; bool bNullifyWorldSpacePosition ; # endif FString ProfileDescription ; float* ProfileSceneRenderTime ; TArray<FVector,TInlineAllocator<2>> StreamingViewOrigins ;)",
    "insertText": "FSceneViewFamily(const ConstructionValues& CVS)"
  },
  {
    "label": "FSceneViewFamily()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSceneViewFamily()"
  },
  {
    "label": "GetShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetShaderPlatform()"
  },
  {
    "label": "GetDebugViewShaderMode()",
    "kind": "Method",
    "detail": "Function (} # if WITH_DEBUG_VIEW_MODES EDebugViewShaderMode DebugViewShaderMode ; int32 ViewModeParam ; FName ViewModeParamName ; bool bUsedDebugViewVSDSHS ; EDebugViewShaderMode)",
    "insertText": "GetDebugViewShaderMode()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScreenPercentageInterface = InScreenPercentageInterface ; } void)",
    "insertText": "operator(const FSceneViewFamily&)"
  },
  {
    "label": "FSceneViewFamily()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneViewFamily(FSceneViewFamily&& InViewFamily)"
  },
  {
    "label": "GetExtentionData()",
    "kind": "Method",
    "detail": "Function (template<TExtensionData> const TExtensionData*)",
    "insertText": "GetExtentionData()"
  },
  {
    "label": "GetOrCreateExtentionData()",
    "kind": "Method",
    "detail": "Function (} template<TExtensionData> TExtensionData*)",
    "insertText": "GetOrCreateExtentionData()"
  },
  {
    "label": "TExtensionData()",
    "kind": "Method",
    "detail": "Function (TExtensionData* ViewExtensionData = GetExtentionData<)",
    "insertText": "TExtensionData()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ViewExtentionDatas .)",
    "insertText": "Push(MakeShared<TExtensionData>())"
  },
  {
    "label": "TExtensionData()",
    "kind": "Method",
    "detail": "Function (ViewExtensionData = static_cast<)",
    "insertText": "TExtensionData(&ViewExtentionDatas.Last().Get())"
  },
  {
    "label": "SetTemporalUpscalerInterface()",
    "kind": "Method",
    "detail": "Function (} return ViewExtensionData ; } void)",
    "insertText": "SetTemporalUpscalerInterface(UE::Renderer::Private::ITemporalUpscaler* InTemporalUpscalerInterface)"
  },
  {
    "label": "GetTemporalUpscalerInterface()",
    "kind": "Method",
    "detail": "Function (TemporalUpscalerInterface = InTemporalUpscalerInterface ; } const UE::Renderer::Private::ITemporalUpscaler*)",
    "insertText": "GetTemporalUpscalerInterface()"
  },
  {
    "label": "GetPrimarySpatialUpscalerInterface()",
    "kind": "Method",
    "detail": "Function (PrimarySpatialUpscalerInterface = InSpatialUpscalerInterface ; } const ISpatialUpscaler*)",
    "insertText": "GetPrimarySpatialUpscalerInterface()"
  },
  {
    "label": "GetSecondarySpatialUpscalerInterface()",
    "kind": "Method",
    "detail": "Function (SecondarySpatialUpscalerInterface = InSpatialUpscalerInterface ; } const ISpatialUpscaler*)",
    "insertText": "GetSecondarySpatialUpscalerInterface()"
  },
  {
    "label": "SetSceneRenderer()",
    "kind": "Method",
    "detail": "Function (bIsInFocus = bInIsInFocus ; } void)",
    "insertText": "SetSceneRenderer(ISceneRenderer* NewSceneRenderer)"
  },
  {
    "label": "GetSceneRenderer()",
    "kind": "Method",
    "detail": "Function (SceneRenderer = NewSceneRenderer ; } ISceneRenderer*)",
    "insertText": "GetSceneRenderer()"
  },
  {
    "label": "FSceneViewFamilyContext()",
    "kind": "Method",
    "detail": "Function (class FSceneRenderer ; class FViewFamilyInfo ; PRAGMA_DISABLE_DEPRECATION_WARNINGS } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS class FSceneViewFamilyContext : public FSceneViewFamily { public :)",
    "insertText": "FSceneViewFamilyContext(const ConstructionValues& CVS) : FSceneViewFamily(CVS)"
  },
  {
    "label": "FSceneViewFamilyContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSceneViewFamilyContext()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; struct FSetupViewUniformParametersInputs { FSetupViewUniformParametersInputs)",
    "insertText": "Create(const FSceneView& View)"
  },
  {
    "label": "FPlane()",
    "kind": "Method",
    "detail": "Function (} const FEngineShowFlags* EngineShowFlags = nullptr ; FIntRect UnscaledViewRect ; FGameTime Time ; FIntPoint CursorPosition = FIntPoint::ZeroValue ; FPlane GlobalClippingPlane =)",
    "insertText": "FPlane(0, 0, 0, 0)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f InvDeviceZToWorldZTransform =)",
    "insertText": "FVector4f(0, 0, 0, 0)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f DiffuseOverrideParameter =)",
    "insertText": "FVector4f(0, 0, 0, 1)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D RoughnessOverrideParameter =)",
    "insertText": "FVector2D(0, 1)"
  },
  {
    "label": "SetupCommonViewUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (EDebugViewShaderMode DebugViewShaderMode = EDebugViewShaderMode::DVSM_None ; uint64 FrameCounter = 0 ; uint32 FrameNumber = 0 ; float FOV = 0 . 0 f ; float MotionBlurMax = 0 . 0 f ; bool bNullifyWorldSpacePosition = false ; bool bReverseCulling = false ; bool bCameraCut = false ; bool bWorldIsPaused = false ; } ; void)",
    "insertText": "SetupCommonViewUniformBufferParameters(FViewUniformShaderParameters& ViewUniformShaderParameters, const FIntPoint& InBufferSize, int32 NumMSAASamples, const FIntRect& InEffectiveViewRect, const FViewMatrices& InViewMatrices, const FViewMatrices& InPrevViewMatrices, const FSetupViewUniformParametersInputs& Inputs)"
  },
  {
    "label": "SetupViewRectUniformBufferParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewRectUniformBufferParameters(FViewUniformShaderParameters& ViewUniformShaderParameters, const FIntPoint& InBufferSize, const FIntRect& InEffectiveViewRect, const FViewMatrices& InViewMatrices, const FViewMatrices& InPrevViewMatrice, const FSetupViewUniformParametersInputs& Inputs)"
  }
]