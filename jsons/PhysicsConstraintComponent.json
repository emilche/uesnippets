[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "UPhysicsConstraintComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsConstraintComponent"
  },
  {
    "label": "UPhysicsConstraintTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsConstraintTemplate"
  },
  {
    "label": "FConstraintComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintComponentVisualizer"
  },
  {
    "label": "InitComponentConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitComponentConstraint()"
  },
  {
    "label": "TermComponentConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermComponentConstraint()"
  },
  {
    "label": "SetConstrainedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstrainedComponents(UPrimitiveComponent* Component1, FName BoneName1, UPrimitiveComponent* Component2, FName BoneName2)"
  },
  {
    "label": "GetConstrainedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConstrainedComponents(UPrimitiveComponent*& OutComponent1, FName& OutBoneName1, UPrimitiveComponent*& OutComponent2, FName& OutBoneName2)"
  },
  {
    "label": "BreakConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakConstraint()"
  },
  {
    "label": "SetLinearPositionDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)"
  },
  {
    "label": "SetLinearVelocityDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)"
  },
  {
    "label": "SetOrientationDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)"
  },
  {
    "label": "SetOrientationDriveSLERP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientationDriveSLERP(bool bEnableSLERP)"
  },
  {
    "label": "SetAngularVelocityDriveTwistAndSwing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)"
  },
  {
    "label": "SetAngularVelocityDriveSLERP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityDriveSLERP(bool bEnableSLERP)"
  },
  {
    "label": "SetAngularDriveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveMode(EAngularDriveMode::Type DriveMode)"
  },
  {
    "label": "SetAngularDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveAccelerationMode(bool bAccelerationMode)"
  },
  {
    "label": "SetLinearPositionTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearPositionTarget(const FVector& InPosTarget)"
  },
  {
    "label": "SetLinearVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocityTarget(const FVector& InVelTarget)"
  },
  {
    "label": "SetLinearDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)"
  },
  {
    "label": "SetLinearDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearDriveAccelerationMode(bool bAccelerationMode)"
  },
  {
    "label": "SetAngularOrientationTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularOrientationTarget(const FRotator& InPosTarget)"
  },
  {
    "label": "SetAngularVelocityTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocityTarget(const FVector& InVelTarget)"
  },
  {
    "label": "SetAngularDriveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit)"
  },
  {
    "label": "SetLinearXLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearXLimit(ELinearConstraintMotion ConstraintType, float LimitSize)"
  },
  {
    "label": "SetLinearYLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearYLimit(ELinearConstraintMotion ConstraintType, float LimitSize)"
  },
  {
    "label": "SetLinearZLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearZLimit(ELinearConstraintMotion ConstraintType, float LimitSize)"
  },
  {
    "label": "SetAngularSwing1Limit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularSwing1Limit(EAngularConstraintMotion MotionType, float Swing1LimitAngle)"
  },
  {
    "label": "SetAngularSwing2Limit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularSwing2Limit(EAngularConstraintMotion MotionType, float Swing2LimitAngle)"
  },
  {
    "label": "SetAngularTwistLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularTwistLimit(EAngularConstraintMotion ConstraintType, float TwistLimitAngle)"
  },
  {
    "label": "SetLinearBreakable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold)"
  },
  {
    "label": "SetLinearPlasticity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, EConstraintPlasticityType PlasticityType)"
  },
  {
    "label": "SetAngularBreakable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold)"
  },
  {
    "label": "SetAngularPlasticity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold)"
  },
  {
    "label": "SetContactTransferScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContactTransferScale(float ContactTransferScale)"
  },
  {
    "label": "UpdateConstraintFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConstraintFrames()"
  },
  {
    "label": "SetConstraintReferenceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintReferenceFrame(EConstraintFrame::Type Frame, const FTransform& RefFrame)"
  },
  {
    "label": "SetConstraintReferencePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintReferencePosition(EConstraintFrame::Type Frame, const FVector& RefPosition)"
  },
  {
    "label": "SetConstraintReferenceOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintReferenceOrientation(EConstraintFrame::Type Frame, const FVector& PriAxis, const FVector& SecAxis)"
  },
  {
    "label": "SetDisableCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableCollision(bool bDisableCollision)"
  },
  {
    "label": "SetProjectionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectionEnabled(bool bProjectionEnabled)"
  },
  {
    "label": "SetProjectionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectionParams(float ProjectionLinearAlpha, float ProjectionAngularAlpha, float ProjectionLinearTolerance, float ProjectionAngularTolerance)"
  },
  {
    "label": "GetConstraintForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce)"
  },
  {
    "label": "IsBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBroken()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (FConstraintInstanceAccessor)",
    "insertText": "GetConstraint()"
  },
  {
    "label": "UpdateSpriteTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpriteTexture()"
  },
  {
    "label": "OnConstraintBrokenHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstraintBrokenHandler(FConstraintInstance* BrokenConstraint)"
  },
  {
    "label": "OnPlasticDeformationHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlasticDeformationHandler(FConstraintInstance* Constraint)"
  },
  {
    "label": "OnConstraintBrokenWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstraintBrokenWrapper(int32 ConstraintIndex)"
  },
  {
    "label": "OnPlasticDeformationWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlasticDeformationWrapper(int32 ConstraintIndex)"
  }
]