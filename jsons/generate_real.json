[
  {
    "label": "GeneratePositiveTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GeneratePositiveTag"
  },
  {
    "label": "GenerateNegativeTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenerateNegativeTag"
  },
  {
    "label": "GenerateSignedTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenerateSignedTag"
  },
  {
    "label": "GenerateRealFromBits()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_GENERATE_REAL_H_ # define ABSL_RANDOM_INTERNAL_GENERATE_REAL_H_ # include<cstdint> # include<cstring> # include<limits> # include<type_traits> # include \" absl / meta / type_traits . h \" # include \" absl / numeric / bits . h \" # include \" absl / random / internal / fastmath . h \" # include \" absl / random / internal / traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { struct GeneratePositiveTag { } ; struct GenerateNegativeTag { } ; struct GenerateSignedTag { } ; template<RealType,SignedTag = GeneratePositiveTag,bool IncludeZero = true> RealType)",
    "insertText": "GenerateRealFromBits(uint64_t bits, int exp_bias = 0)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using real_type = RealType ; using uint_type = absl::conditional_t<std::is_same<real_type,float>::value,uint32_t,uint64_t> ;)",
    "insertText": "static_assert((std::is_same<double, real_type>::value || std::is_same<float, real_type>::value), \"GenerateRealFromBits must be parameterized by either float or double.\")"
  },
  {
    "label": "kMask()",
    "kind": "Method",
    "detail": "Function (int kExp = std::numeric_limits<real_type>::digits - 1 ; uint_type)",
    "insertText": "kMask(static_cast<uint_type>(1) << kExp)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int kUintBits =)",
    "insertText": "sizeof(uint_type)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (int exp = exp_bias + int { std::numeric_limits<real_type>::max_exponent - 2 } ; uint_type sign = std::is_same<SignedTag,GenerateNegativeTag)",
    "insertText": "value(static_cast<uint_type>(1) << (kUintBits - 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sign = bits& uint64_t { 0 x8000000000000000 } ; })",
    "insertText": "if(std::is_same<uint_type, uint32_t>::value)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint64_t tmp = bits& uint64_t { 0 x8000000000000000 } ; sign = static_cast<)",
    "insertText": "uint32_t(tmp >> 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bits = bits& uint64_t { 0 x7FFFFFFFFFFFFFFF } ; exp + + ; })",
    "insertText": "if(IncludeZero)"
  },
  {
    "label": "countl_zero()",
    "kind": "Method",
    "detail": "Function (} int clz =)",
    "insertText": "countl_zero(bits)"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bits(IncludeZero ? clz : (clz & 63))"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (exp - = clz ;)",
    "insertText": "bits(63 - kExp)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (uint_type val =)",
    "insertText": "sign(static_cast<uint_type>(exp) << kExp) | (static_cast<uint_type>(bits) & kMask)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (real_type result ;)",
    "insertText": "memcpy(static_cast<void*>(&result), static_cast<const void*>(&val), sizeof(result))"
  }
]