[
  {
    "label": "FBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElementParameters"
  },
  {
    "label": "FBatchedElements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBatchedElements"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "FCanvasItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasItem"
  },
  {
    "label": "FCanvasTileItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTileItem"
  },
  {
    "label": "FCanvasBorderItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBorderItem"
  },
  {
    "label": "FCanvasTextItemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTextItemBase"
  },
  {
    "label": "FTextEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextEffect"
  },
  {
    "label": "FCanvasSimpleTextItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasSimpleTextItem"
  },
  {
    "label": "FCanvasTextItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTextItem"
  },
  {
    "label": "FCanvasTextStringViewItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTextStringViewItem"
  },
  {
    "label": "FCanvasShapedTextItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasShapedTextItem"
  },
  {
    "label": "FCanvasLineItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasLineItem"
  },
  {
    "label": "FCanvasBoxItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasBoxItem"
  },
  {
    "label": "FCanvasTriangleItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTriangleItem"
  },
  {
    "label": "FCanvasNGonItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasNGonItem"
  },
  {
    "label": "FCanvasItemTestbed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasItemTestbed"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "LineVars",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LineVars"
  },
  {
    "label": "FCanvasItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / ShapedTextFwd . h \" # include \" Engine / EngineTypes . h \" # include \" Templates / Casts . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Engine / Font . h \" # include \" SceneTypes . h \" class FBatchedElementParameters ; class FBatchedElements ; class FCanvas ; class FMaterialRenderProxy ; class FTexture ; class UMaterial ; class FCanvasItem { public :)",
    "insertText": "FCanvasItem(const FVector2D& InPosition ) : Position( InPosition ) , StereoDepth( 0 ) , BlendMode( SE_BLEND_Opaque ) , bFreezeTime( false ) , BatchedElementParameters( nullptr ) , Color( FLinearColor::White)"
  },
  {
    "label": "FCanvasItem()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FCanvasItem()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FCanvas* InCanvas)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FCanvas* InCanvas, const FVector2D& InPosition)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (Position = InPosition ;)",
    "insertText": "Draw(InCanvas)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FCanvas* InCanvas, float X, float Y)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColor(const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (Color = InColor ; } FVector2D Position ; uint32 StereoDepth ; ESimpleElementBlendMode BlendMode ; bool bFreezeTime ; FBatchedElementParameters* BatchedElementParameters ; protected : FLinearColor Color ; } ; class FCanvasTileItem : public FCanvasItem { public :)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FTexture* InTexture, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FTexture* InTexture, const FVector2D& InSize, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FVector2D& InSize, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FTexture* InTexture, const FVector2D& InUV0, const FVector2D& InUV1, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FTexture* InTexture, const FVector2D& InSize, const FVector2D& InUV0, const FVector2D& InUV1, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FMaterialRenderProxy* InMaterialRenderProxy, const FVector2D& InSize)"
  },
  {
    "label": "FCanvasTileItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTileItem(const FVector2D& InPosition, const FMaterialRenderProxy* InMaterialRenderProxy, const FVector2D& InSize, const FVector2D& InUV0, const FVector2D& InUV1)"
  },
  {
    "label": "RenderMaterialTile()",
    "kind": "Method",
    "detail": "Function (using FCanvasItem::Draw ; FVector2D Size ; float Z ; FVector2D UV0 ; FVector2D UV1 ; const FTexture* Texture ; const FMaterialRenderProxy* MaterialRenderProxy ; FRotator Rotation ; FVector2D PivotPoint ; private : void)",
    "insertText": "RenderMaterialTile(FCanvas* InCanvas, const FVector2D& InPosition)"
  },
  {
    "label": "FCanvasBorderItem()",
    "kind": "Method",
    "detail": "Function (} ; class FCanvasBorderItem : public FCanvasItem { public :)",
    "insertText": "FCanvasBorderItem(const FVector2D& InPosition, const FTexture* InBorderTexture, const FTexture* InBackgroundTexture, const FTexture* InBorderLeftTexture, const FTexture* InBorderRightTexture, const FTexture* InBorderTopTexture, const FTexture* InBorderBottomTexture, const FVector2D& InSize, const FLinearColor& InColor ) : FCanvasItem( InPosition ) , Size( InSize ) , BorderScale( FVector2D(1.0f,1.0f )) , BackgroundScale( FVector2D(1.0f,1.0f )) , Z( 1.0f ) , BorderUV0( 0.0f, 0.0f ) , BorderUV1( 1.0f, 1.0f ) , BorderTexture( InBorderTexture ) , BackgroundTexture( InBackgroundTexture ) , BorderLeftTexture( InBorderLeftTexture ) , BorderRightTexture( InBorderRightTexture ) , BorderTopTexture( InBorderTopTexture ) , BorderBottomTexture( InBorderBottomTexture ) , Rotation( ForceInitToZero ) , PivotPoint( FVector2D::ZeroVector)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(InColor)"
  },
  {
    "label": "FCanvasTextItemBase()",
    "kind": "Method",
    "detail": "Function (} using FCanvasItem::Draw ; FVector2D Size ; FVector2D BorderScale ; FVector2D BackgroundScale ; float Z ; FVector2D BorderUV0 ; FVector2D BorderUV1 ; const FTexture* BorderTexture ; const FTexture* BackgroundTexture ; const FTexture* BorderLeftTexture ; const FTexture* BorderRightTexture ; const FTexture* BorderTopTexture ; const FTexture* BorderBottomTexture ; FRotator Rotation ; FVector2D PivotPoint ; FVector2D CornerSize ; } ; class FCanvasTextItemBase : public FCanvasItem { public :)",
    "insertText": "FCanvasTextItemBase(const FVector2D& InPosition, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTextItemBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCanvasTextItemBase()"
  },
  {
    "label": "EnableShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableShadow(const FLinearColor& InColor, const FVector2D& InOffset = FVector2D( 1.0f, 1.0f ))"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (ShadowOffset = InOffset ; ShadowColor = InColor ; FontRenderInfo . bEnableShadow = ShadowOffset .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "DisableShadow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableShadow()"
  },
  {
    "label": "HasValidText()",
    "kind": "Method",
    "detail": "Function (} using FCanvasItem::Draw ; float HorizSpacingAdjust ; float Depth ; FFontRenderInfo FontRenderInfo ; FLinearColor ShadowColor ; FVector2D ShadowOffset ; FVector2D DrawnSize ; bool bCentreX ; bool bCentreY ; bool bOutlined ; FLinearColor OutlineColor ; bool bDontCorrectStereoscopic ; FVector2D Scale ; protected : FCanvasTileItem TileItem ; bool)",
    "insertText": "HasValidText()"
  },
  {
    "label": "GetTextBlendMode()",
    "kind": "Method",
    "detail": "Function (ESimpleElementBlendMode)",
    "insertText": "GetTextBlendMode(const bool bHasShadow)"
  },
  {
    "label": "GetTextSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTextSize(float DPIScale)"
  },
  {
    "label": "DrawStringInternal()",
    "kind": "Method",
    "detail": "Function (struct FTextEffect { FVector2f Offset ; FLinearColor Color ; } ; void)",
    "insertText": "DrawStringInternal(FCanvas* InCanvas, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> Offsets)"
  },
  {
    "label": "FCanvasSimpleTextItem()",
    "kind": "Method",
    "detail": "Function (FBatchedElements* BatchedElements ; } ; class FCanvasSimpleTextItem : public FCanvasTextItemBase { public :)",
    "insertText": "FCanvasSimpleTextItem(const FVector2D& InPosition, const UFont* InFont, const FLinearColor& InColor) : FCanvasTextItemBase(InPosition, InColor) , Font(InFont) , SlateFontInfo()"
  },
  {
    "label": "FCanvasSimpleTextItem()",
    "kind": "Method",
    "detail": "Function (BlendMode = SE_BLEND_Translucent ; })",
    "insertText": "FCanvasSimpleTextItem(const FVector2D& InPosition, const FSlateFontInfo& InFontInfo, const FLinearColor& InColor) : FCanvasTextItemBase(InPosition, InColor) , Font(Cast<const UFont>(InFontInfo.FontObject)) , SlateFontInfo(InFontInfo)"
  },
  {
    "label": "FCanvasSimpleTextItem()",
    "kind": "Method",
    "detail": "Function (BlendMode = SE_BLEND_TranslucentAlphaOnly ; } ~)",
    "insertText": "FCanvasSimpleTextItem()"
  },
  {
    "label": "GetFontCacheType()",
    "kind": "Method",
    "detail": "Function (const UFont* Font ; TOptional<FSlateFontInfo> SlateFontInfo ; protected : EFontCacheType)",
    "insertText": "GetFontCacheType()"
  },
  {
    "label": "GetTextSizeInternal()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTextSizeInternal(FStringView Text, float DPIScale)"
  },
  {
    "label": "DrawStringInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStringInternal(FCanvas* InCanvas, FStringView Text, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> TextEffects)"
  },
  {
    "label": "DrawStringInternal_OfflineCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStringInternal_OfflineCache(FCanvas* InCanvas, FStringView Text, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> TextEffects)"
  },
  {
    "label": "DrawStringInternal_RuntimeCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStringInternal_RuntimeCache(FCanvas* InCanvas, FStringView Text, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> TextEffects)"
  },
  {
    "label": "FCanvasTextItem()",
    "kind": "Method",
    "detail": "Function (} ; class FCanvasTextItem : public FCanvasSimpleTextItem { public :)",
    "insertText": "FCanvasTextItem(const FVector2D& InPosition, const FText& InText, const UFont* InFont, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTextItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanvasTextItem(const FVector2D& InPosition, const FText& InText, const FSlateFontInfo& InFontInfo, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasTextItem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCanvasTextItem()"
  },
  {
    "label": "DrawStringInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStringInternal(FCanvas* InCanvas, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> TextEffects)"
  },
  {
    "label": "DrawStringInternal_OfflineCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStringInternal_OfflineCache(FCanvas* InCanvas, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> TextEffects)"
  },
  {
    "label": "DrawStringInternal_RuntimeCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStringInternal_RuntimeCache(FCanvas* InCanvas, const FVector2D& DrawPos, const FLinearColor& DrawColor, TArrayView<FTextEffect> TextEffects)"
  },
  {
    "label": "FCanvasTextStringViewItem()",
    "kind": "Method",
    "detail": "Function (} ; class FCanvasTextStringViewItem : public FCanvasSimpleTextItem { public :)",
    "insertText": "FCanvasTextStringViewItem(const FVector2D& InPosition, FStringView InText, const UFont* InFont, const FLinearColor& InColor) : FCanvasSimpleTextItem(InPosition, InFont, InColor) , Text(InText)"
  },
  {
    "label": "FCanvasTextStringViewItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCanvasTextStringViewItem(const FVector2D& InPosition, FStringView InText, const FSlateFontInfo& InFontInfo, const FLinearColor& InColor) : FCanvasSimpleTextItem(InPosition, InFontInfo, InColor) , Text(InText)"
  },
  {
    "label": "FCanvasTextStringViewItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCanvasTextStringViewItem()"
  },
  {
    "label": "FCanvasShapedTextItem()",
    "kind": "Method",
    "detail": "Function (} ; class FCanvasShapedTextItem : public FCanvasTextItemBase { public :)",
    "insertText": "FCanvasShapedTextItem(const FVector2D& InPosition, FShapedGlyphSequenceRef InShapedGlyphSequence, const FLinearColor& InColor ) : FCanvasTextItemBase( InPosition, InColor ) , ShapedGlyphSequence( InShapedGlyphSequence)"
  },
  {
    "label": "FCanvasLineItem()",
    "kind": "Method",
    "detail": "Function (} ; class FCanvasLineItem : public FCanvasItem { public :)",
    "insertText": "FCanvasLineItem() : FCanvasItem( FVector2D::ZeroVector ) , LineThickness( 0.0f)"
  },
  {
    "label": "FCanvasLineItem()",
    "kind": "Method",
    "detail": "Function (Origin . X = 0 . 0 f ; Origin . Y = 0 . 0 f ; Origin . Z = 0 . 0 f ; EndPos . X = 0 . 0 f ; EndPos . Y = 0 . 0 f ; EndPos . Z = 0 . 0 f ; })",
    "insertText": "FCanvasLineItem(const FVector2D& InPosition, const FVector2D& InEndPos ) : FCanvasItem( InPosition ) , LineThickness( 0.0f)"
  },
  {
    "label": "FCanvasLineItem()",
    "kind": "Method",
    "detail": "Function (Origin . X = InPosition . X ; Origin . Y = InPosition . Y ; Origin . Z = 0 . 0 f ; EndPos . X = InEndPos . X ; EndPos . Y = InEndPos . Y ; EndPos . Z = 0 . 0 f ; })",
    "insertText": "FCanvasLineItem(const FVector& InPosition, const FVector& InEndPos ) : FCanvasItem( FVector2D( UE_REAL_TO_FLOAT(InPosition.X), UE_REAL_TO_FLOAT(InPosition.Y) ) ) , LineThickness( 0.0f)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FCanvas* InCanvas, const FVector2D& InStartPos, const FVector2D& InEndPos)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FCanvas* InCanvas, float InX, float InY)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FCanvas* InCanvas, const FVector& InPosition)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FCanvas* InCanvas, float X, float Y, float Z)"
  },
  {
    "label": "SetEndPos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEndPos(const FVector2D& InEndPos)"
  },
  {
    "label": "FCanvasBoxItem()",
    "kind": "Method",
    "detail": "Function (EndPos . X = InEndPos . X ; EndPos . Y = InEndPos . Y ; } FVector Origin ; FVector EndPos ; float LineThickness ; } ; class FCanvasBoxItem : public FCanvasItem { public :)",
    "insertText": "FCanvasBoxItem(const FVector2D& InPosition, const FVector2D& InSize ) : FCanvasItem( InPosition ) , Size( InSize ) , LineThickness( 0.0f)"
  },
  {
    "label": "SetupBox()",
    "kind": "Method",
    "detail": "Function (using FCanvasItem::Draw ; FVector2D Size ; float LineThickness ; private : void)",
    "insertText": "SetupBox()"
  },
  {
    "label": "FCanvasTriangleItem()",
    "kind": "Method",
    "detail": "Function (TArray<FVector> Corners ; } ; class FCanvasTriangleItem : public FCanvasItem { public :)",
    "insertText": "FCanvasTriangleItem(const FVector2D& InPointA, const FVector2D& InPointB, const FVector2D& InPointC, const FTexture* InTexture ) : FCanvasItem( InPointA ) , Texture( InTexture ) , MaterialRenderProxy( nullptr ) , BatchedElementParameters( nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FCanvasUVTri SingleTri ; SingleTri . V0_Pos = InPointA ; SingleTri . V1_Pos = InPointB ; SingleTri . V2_Pos = InPointC ; SingleTri . V0_UV = FVector2D::ZeroVector ; SingleTri . V1_UV = FVector2D::ZeroVector ; SingleTri . V2_UV = FVector2D::ZeroVector ; SingleTri . V0_Color = FLinearColor::White ; SingleTri . V1_Color = FLinearColor::White ; SingleTri . V2_Color = FLinearColor::White ; TriangleList .)",
    "insertText": "Add(SingleTri)"
  },
  {
    "label": "FCanvasTriangleItem()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FCanvasTriangleItem(const FVector2D& InPointA, const FVector2D& InPointB, const FVector2D& InPointC, const FVector2D& InTexCoordPointA, const FVector2D& InTexCoordPointB, const FVector2D& InTexCoordPointC, const FTexture* InTexture ) :FCanvasItem( InPointA ) , Texture( InTexture ) , MaterialRenderProxy( nullptr ) , BatchedElementParameters( nullptr)"
  },
  {
    "label": "FCanvasTriangleItem()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FCanvasTriangleItem(FCanvasUVTri InSingleTri, const FTexture* InTexture ) :FCanvasItem( InSingleTri.V0_Pos ) , Texture( InTexture ) , MaterialRenderProxy( nullptr ) , BatchedElementParameters( nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TriangleList .)",
    "insertText": "Add(InSingleTri)"
  },
  {
    "label": "FCanvasTriangleItem()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FCanvasTriangleItem(const TArray< FCanvasUVTri >& InTriangleList, const FTexture* InTexture ) :FCanvasItem( FVector2D::ZeroVector ) , Texture( InTexture ) , MaterialRenderProxy( nullptr ) , BatchedElementParameters( nullptr)"
  },
  {
    "label": "FCanvasTriangleItem()",
    "kind": "Method",
    "detail": "Function (TriangleList = InTriangleList ; Position = TriangleList [ 0 ] . V0_Pos ; } ; ~)",
    "insertText": "FCanvasTriangleItem()"
  },
  {
    "label": "SetPoints()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetPoints(const FVector2D& InPointA, const FVector2D& InPointB, const FVector2D& InPointC)"
  },
  {
    "label": "FCanvasNGonItem()",
    "kind": "Method",
    "detail": "Function (const FTexture* Texture ; const FMaterialRenderProxy* MaterialRenderProxy ; FBatchedElementParameters* BatchedElementParameters ; TArray<FCanvasUVTri> TriangleList ; } ; class FCanvasNGonItem : public FCanvasItem { public :)",
    "insertText": "FCanvasNGonItem(const FVector2D& InPosition, const FVector2D& InRadius, int32 InNumSides, const FTexture* InTexture, const FLinearColor& InColor ) : FCanvasItem( InPosition ) , TriListItem( nullptr ) , Texture( InTexture)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Color = InColor ;)",
    "insertText": "check(InNumSides >= 3)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TriangleList .)",
    "insertText": "SetNum(InNumSides)"
  },
  {
    "label": "SetupPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPosition(InPosition, InRadius)"
  },
  {
    "label": "FCanvasNGonItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCanvasNGonItem(const FVector2D& InPosition, const FVector2D& InRadius, int32 InNumSides, const FLinearColor& InColor)"
  },
  {
    "label": "FCanvasNGonItem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCanvasNGonItem()"
  },
  {
    "label": "SetupPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPosition(const FVector2D& InPosition, const FVector2D& InRadius)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (delete TriListItem ; } float Angle = 0 . 0 f ; int32 NumSides = TriangleList .)",
    "insertText": "Num()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (FVector2D LastPoint = InPosition +)",
    "insertText": "FVector2D(InRadius.X*FMath::Cos(Angle), InRadius.Y*FMath::Sin(Angle))"
  },
  {
    "label": "Angle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Angle(2 * (float)UE_PI) * (float)i/(float)"
  },
  {
    "label": "FCanvasTriangleItem()",
    "kind": "Method",
    "detail": "Function (TriangleList [ i - 1 ] . V2_Pos = LastPoint ; TriangleList [ i - 1 ] . V2_Color = Color ; } TriListItem = new)",
    "insertText": "FCanvasTriangleItem(TriangleList, Texture)"
  },
  {
    "label": "FCanvasItemTestbed()",
    "kind": "Method",
    "detail": "Function (private : TArray<FCanvasUVTri> TriangleList ; FCanvasTriangleItem* TriListItem ; const FTexture* Texture ; } ; # if WITH_EDITOR class FCanvasItemTestbed { public :)",
    "insertText": "FCanvasItemTestbed()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(class FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "LineVars()",
    "kind": "Method",
    "detail": "Function (struct LineVars {)",
    "insertText": "LineVars()"
  }
]