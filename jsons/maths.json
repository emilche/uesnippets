[
  {
    "label": "Vec3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vec3"
  },
  {
    "label": "Sym3x3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sym3x3"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (# ifndef SQUISH_MATHS_H # define SQUISH_MATHS_H # include<cmath> # include<algorithm> # include \" config . h \" namespace squish { class Vec3 { public : typedef Vec3 const& Arg ;)",
    "insertText": "Vec3()"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec3(float a)"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (m_x = a ; m_y = a ; m_z = a ; })",
    "insertText": "Vec3(float a, float b, float c)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (m_x = a ; m_y = b ; m_z = c ; } float)",
    "insertText": "X()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec3&)",
    "insertText": "operator(Arg v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_x* = v . m_x ; m_y* = v . m_y ; m_z* = v . m_z ; return* this ; } Vec3&)",
    "insertText": "operator(float s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (float t = 1 . 0 f / s ; m_x* = t ; m_y* = t ; m_z* = t ; return* this ; } Vec3)",
    "insertText": "operator(Arg left, Arg right)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "copy(left)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "copy(right)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} Vec3)",
    "insertText": "Max(Arg left, Arg right)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (} Vec3)",
    "insertText": "Floor(Arg v)"
  },
  {
    "label": "LengthSquared()",
    "kind": "Method",
    "detail": "Function (} private : float m_x ; float m_y ; float m_z ; } ; float)",
    "insertText": "LengthSquared(Vec3::Arg v)"
  },
  {
    "label": "Sym3x3()",
    "kind": "Method",
    "detail": "Function (} class Sym3x3 { public :)",
    "insertText": "Sym3x3()"
  },
  {
    "label": "Sym3x3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sym3x3(float a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "operator(int index)"
  },
  {
    "label": "ComputePrincipleComponent()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "ComputePrincipleComponent(Sym3x3 const& matrix)"
  }
]