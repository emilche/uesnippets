[
  {
    "label": "SkylineStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SkylineStorage"
  },
  {
    "label": "SkylineStorage()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SKYLINE_STORAGE_H # define EIGEN_SKYLINE_STORAGE_H namespace Eigen { template<Scalar> class SkylineStorage { typedef NumTraits<Scalar>::Real RealScalar ; typedef SparseIndex Index ; public :)",
    "insertText": "SkylineStorage() : m_diag(0), m_lower(0), m_upper(0), m_lowerProfile(0), m_upperProfile(0), m_diagSize(0), m_upperSize(0), m_lowerSize(0), m_upperProfileSize(0), m_lowerProfileSize(0), m_allocatedSize(0)"
  },
  {
    "label": "SkylineStorage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SkylineStorage(const SkylineStorage& other) : m_diag(0), m_lower(0), m_upper(0), m_lowerProfile(0), m_upperProfile(0), m_diagSize(0), m_upperSize(0), m_lowerSize(0), m_upperProfileSize(0), m_lowerProfileSize(0), m_allocatedSize(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = other ; } SkylineStorage&)",
    "insertText": "operator(const SkylineStorage& other)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(other.diagSize(), other.m_upperProfileSize, other.m_lowerProfileSize, other.upperSize(), other.lowerSize())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_diag, other.m_diag, m_diagSize * sizeof (Scalar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_upper, other.m_upper, other.upperSize() * sizeof (Scalar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_lower, other.m_lower, other.lowerSize() * sizeof (Scalar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_upperProfile, other.m_upperProfile, m_upperProfileSize * sizeof (Index))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_lowerProfile, other.m_lowerProfile, m_lowerProfileSize * sizeof (Index))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_diag, other.m_diag)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_upper, other.m_upper)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_lower, other.m_lower)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_upperProfile, other.m_upperProfile)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_lowerProfile, other.m_lowerProfile)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_diagSize, other.m_diagSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_upperSize, other.m_upperSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_lowerSize, other.m_lowerSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_allocatedSize, other.m_allocatedSize)"
  },
  {
    "label": "SkylineStorage()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SkylineStorage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_diag ; delete [ ] m_upper ;)",
    "insertText": "if(m_upper != m_lower)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_upperProfile ; delete [ ] m_lowerProfile ; } void)",
    "insertText": "reserve(Index size, Index upperProfileSize, Index lowerProfileSize, Index upperSize, Index lowerSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index newAllocatedSize = size + upperSize + lowerSize ;)",
    "insertText": "if(newAllocatedSize > m_allocatedSize) reallocate(size, upperProfileSize, lowerProfileSize, upperSize, lowerSize)"
  },
  {
    "label": "squeeze()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "squeeze()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(Index diagSize, Index upperProfileSize, Index lowerProfileSize, Index upperSize, Index lowerSize, float reserveSizeFactor = 0)"
  },
  {
    "label": "diagSize()",
    "kind": "Method",
    "detail": "Function (m_diagSize = diagSize ; m_upperSize = upperSize ; m_lowerSize = lowerSize ; m_upperProfileSize = upperProfileSize ; m_lowerProfileSize = lowerProfileSize ; } Index)",
    "insertText": "diagSize()"
  },
  {
    "label": "diag()",
    "kind": "Method",
    "detail": "Function (m_diagSize = 0 ; } Scalar&)",
    "insertText": "diag(Index i)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (SkylineStorage res ; res . m_upperProfile = upperProfile ; res . m_lowerProfile = lowerProfile ; res . m_diag = diag ; res . m_upper = upper ; res . m_lower = lower ; res . m_allocatedSize = res . m_diagSize = size ; res . m_upperSize = upperSize ; res . m_lowerSize = lowerSize ; return res ; } void)",
    "insertText": "reset()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_diag, 0, m_diagSize * sizeof (Scalar))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_upper, 0, m_upperSize * sizeof (Scalar))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_lower, 0, m_lowerSize * sizeof (Scalar))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_upperProfile, 0, m_diagSize * sizeof (Index))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_lowerProfile, 0, m_diagSize * sizeof (Index))"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "prune(Scalar reference, RealScalar epsilon = dummy_precision<RealScalar>())"
  },
  {
    "label": "reallocate()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "reallocate(Index diagSize, Index upperProfileSize, Index lowerProfileSize, Index upperSize, Index lowerSize)"
  },
  {
    "label": "copyDiagSize()",
    "kind": "Method",
    "detail": "Function (Scalar* diag = new Scalar [ diagSize ] ; Scalar* upper = new Scalar [ upperSize ] ; Scalar* lower = new Scalar [ lowerSize ] ; Index* upperProfile = new Index [ upperProfileSize ] ; Index* lowerProfile = new Index [ lowerProfileSize ] ; Index)",
    "insertText": "copyDiagSize(std::min)(diagSize, m_diagSize)"
  },
  {
    "label": "copyUpperSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "copyUpperSize(std::min)(upperSize, m_upperSize)"
  },
  {
    "label": "copyLowerSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "copyLowerSize(std::min)(lowerSize, m_lowerSize)"
  },
  {
    "label": "copyUpperProfileSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "copyUpperProfileSize(std::min)(upperProfileSize, m_upperProfileSize)"
  },
  {
    "label": "copyLowerProfileSize()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "copyLowerProfileSize(std::min)(lowerProfileSize, m_lowerProfileSize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(diag, m_diag, copyDiagSize * sizeof (Scalar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(upper, m_upper, copyUpperSize * sizeof (Scalar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(lower, m_lower, copyLowerSize * sizeof (Scalar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(upperProfile, m_upperProfile, copyUpperProfileSize * sizeof (Index))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(lowerProfile, m_lowerProfile, copyLowerProfileSize * sizeof (Index))"
  }
]