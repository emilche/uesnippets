[
  {
    "label": "BitstreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamWriter"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Block"
  },
  {
    "label": "BlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockInfo"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_BITCODE_BITSTREAMWRITER_H # define LLVM_BITCODE_BITSTREAMWRITER_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Bitcode / BitCodes . h \" # include \" llvm / Support / Endian . h \" # include<vector> namespace llvm { class BitstreamWriter { SmallVectorImpl<char>& Out ; unsigned CurBit ; uint32_t CurValue ; unsigned CurCodeSize ; unsigned BlockInfoCurBID ; std::vector<IntrusiveRefCntPtr<BitCodeAbbrev>> CurAbbrevs ; struct Block { unsigned PrevCodeSize ; unsigned StartSizeWord ; std::vector<IntrusiveRefCntPtr<BitCodeAbbrev>> PrevAbbrevs ;)",
    "insertText": "Block(unsigned PCS, unsigned SSW) : PrevCodeSize(PCS), StartSizeWord(SSW)"
  },
  {
    "label": "BackpatchWord()",
    "kind": "Method",
    "detail": "Function (} } ; std::vector<Block> BlockScope ; struct BlockInfo { unsigned BlockID ; std::vector<IntrusiveRefCntPtr<BitCodeAbbrev>> Abbrevs ; } ; std::vector<BlockInfo> BlockInfoRecords ; void)",
    "insertText": "BackpatchWord(unsigned ByteNo, unsigned NewWord)"
  },
  {
    "label": "write32le()",
    "kind": "Method",
    "detail": "Function (support::)",
    "insertText": "write32le(&Out[ByteNo], NewWord)"
  },
  {
    "label": "WriteByte()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteByte(unsigned char Value)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "push_back(Value)"
  },
  {
    "label": "WriteWord()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteWord(unsigned Value)"
  },
  {
    "label": "little()",
    "kind": "Method",
    "detail": "Function (Value = support::endian::byte_swap<uint32_t,)",
    "insertText": "little(Value)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (Out .)",
    "insertText": "append(reinterpret_cast<const char *>(&Value), reinterpret_cast<const char *>(&Value + 1))"
  },
  {
    "label": "GetBufferOffset()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "GetBufferOffset()"
  },
  {
    "label": "GetWordIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "GetWordIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Offset & 3) == 0 && \"Not 32-bit aligned\")"
  },
  {
    "label": "BitstreamWriter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BitstreamWriter()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "assert(CurBit == 0 && \"Unflushed data remaining\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BlockScope.empty() && CurAbbrevs.empty() && \"Block imbalance\")"
  },
  {
    "label": "GetCurrentBitNo()",
    "kind": "Method",
    "detail": "Function (# endif } uint64_t)",
    "insertText": "GetCurrentBitNo()"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Emit(uint32_t Val, unsigned NumBits)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumBits && NumBits <= 32 && \"Invalid value size!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Val & ~(~0U >> (32-NumBits))) == 0 && \"High bits set!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurValue | = Val<<CurBit ;)",
    "insertText": "if(CurBit + NumBits < 32)"
  },
  {
    "label": "WriteWord()",
    "kind": "Method",
    "detail": "Function (CurBit + = NumBits ; return ; })",
    "insertText": "WriteWord(CurValue)"
  },
  {
    "label": "Emit64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Emit64(uint64_t Val, unsigned NumBits)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit((uint32_t)(Val >> 32), NumBits-32)"
  },
  {
    "label": "FlushToWord()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FlushToWord()"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (CurBit = 0 ; CurValue = 0 ; } } void)",
    "insertText": "EmitVBR(uint32_t Val, unsigned NumBits)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumBits <= 32 && \"Too many bits to emit!\")"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (uint32_t Threshold = 1)",
    "insertText": "U(NumBits-1)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit((Val & ((1 << (NumBits-1))-1)) | (1 << (NumBits-1)), NumBits)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (Val>> = NumBits - 1 ; })",
    "insertText": "Emit(Val, NumBits)"
  },
  {
    "label": "EmitVBR64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitVBR64(uint64_t Val, unsigned NumBits)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit(((uint32_t)Val & ((1 << (NumBits-1))-1)) | (1 << (NumBits-1)), NumBits)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (Val>> = NumBits - 1 ; })",
    "insertText": "Emit((uint32_t)Val, NumBits)"
  },
  {
    "label": "EmitCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitCode(unsigned Val)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit(Val, CurCodeSize)"
  },
  {
    "label": "getBlockInfo()",
    "kind": "Method",
    "detail": "Function (} BlockInfo*)",
    "insertText": "getBlockInfo(unsigned BlockID)"
  },
  {
    "label": "EmitCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCode(bitc::ENTER_SUBBLOCK)"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR(BlockID, bitc::BlockIDWidth)"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR(CodeLen, bitc::CodeLenWidth)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (unsigned OldCodeSize = CurCodeSize ;)",
    "insertText": "Emit(0, bitc::BlockSizeWidth)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (CurCodeSize = CodeLen ; BlockScope .)",
    "insertText": "emplace_back(OldCodeSize, BlockSizeWordIndex)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (BlockScope .)",
    "insertText": "back().PrevAbbrevs.swap(CurAbbrevs)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (CurAbbrevs .)",
    "insertText": "insert(CurAbbrevs.end(), Info->Abbrevs.begin(), Info->Abbrevs.end())"
  },
  {
    "label": "ExitBlock()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ExitBlock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!BlockScope.empty() && \"Block scope imbalance!\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (const Block& B = BlockScope .)",
    "insertText": "back()"
  },
  {
    "label": "EmitCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCode(bitc::END_BLOCK)"
  },
  {
    "label": "BackpatchWord()",
    "kind": "Method",
    "detail": "Function (unsigned ByteNo = B . StartSizeWord* 4 ;)",
    "insertText": "BackpatchWord(ByteNo, SizeInWords)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (CurCodeSize = B . PrevCodeSize ; CurAbbrevs =)",
    "insertText": "move(B.PrevAbbrevs)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (BlockScope .)",
    "insertText": "pop_back()"
  },
  {
    "label": "EmitAbbreviatedLiteral()",
    "kind": "Method",
    "detail": "Function (} private : template<uintty> void)",
    "insertText": "EmitAbbreviatedLiteral(const BitCodeAbbrevOp &Op, uintty V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Op.isLiteral() && \"Not a literal\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(V == Op.getLiteralValue() && \"Invalid abbrev for record!\")"
  },
  {
    "label": "EmitAbbreviatedField()",
    "kind": "Method",
    "detail": "Function (} template<uintty> void)",
    "insertText": "EmitAbbreviatedField(const BitCodeAbbrevOp &Op, uintty V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Op.isLiteral() && \"Literals should use EmitAbbreviatedLiteral!\")"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unknown encoding!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case BitCodeAbbrevOp::VBR :)",
    "insertText": "if(Op.getEncodingData()) EmitVBR64(V, (unsigned)Op.getEncodingData())"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (break ; case BitCodeAbbrevOp::Char6 :)",
    "insertText": "Emit(BitCodeAbbrevOp::EncodeChar6((char)V), 6)"
  },
  {
    "label": "EmitRecordWithAbbrevImpl()",
    "kind": "Method",
    "detail": "Function (break ; } } template<uintty> void)",
    "insertText": "EmitRecordWithAbbrevImpl(unsigned Abbrev, SmallVectorImpl<uintty> &Vals, StringRef Blob)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const char* BlobData = Blob .)",
    "insertText": "data()"
  },
  {
    "label": "BlobLen()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "BlobLen(unsigned) Blob.size()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (unsigned AbbrevNo = Abbrev - bitc::FIRST_APPLICATION_ABBREV ;)",
    "insertText": "assert(AbbrevNo < CurAbbrevs.size() && \"Invalid abbrev #!\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const BitCodeAbbrev* Abbv = CurAbbrevs [ AbbrevNo ] .)",
    "insertText": "get()"
  },
  {
    "label": "EmitCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCode(Abbrev)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned RecordIdx = 0 ;)",
    "insertText": "for(unsigned i = 0, e = static_cast<unsigned>(Abbv->getNumOperandInfos()); i != e; ++i)"
  },
  {
    "label": "getOperandInfo()",
    "kind": "Method",
    "detail": "Function (const BitCodeAbbrevOp& Op = Abbv ->)",
    "insertText": "getOperandInfo(i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RecordIdx < Vals.size() && \"Invalid abbrev/record\")"
  },
  {
    "label": "EmitAbbreviatedLiteral()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAbbreviatedLiteral(Op, Vals[RecordIdx])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + RecordIdx ; } else)",
    "insertText": "if(Op.getEncoding() == BitCodeAbbrevOp::Array)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i+2 == e && \"array op not second to last?\")"
  },
  {
    "label": "getOperandInfo()",
    "kind": "Method",
    "detail": "Function (const BitCodeAbbrevOp& EltEnc = Abbv ->)",
    "insertText": "getOperandInfo(++i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RecordIdx == Vals.size() && \"Blob data and record entries specified for array!\")"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR(static_cast<uint32_t>(BlobLen), 6)"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (BlobData = nullptr ; } else {)",
    "insertText": "EmitVBR(static_cast<uint32_t>(Vals.size()-RecordIdx), 6)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Op.getEncoding() == BitCodeAbbrevOp::Blob)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RecordIdx == Vals.size() && \"Blob data and record entries specified for blob operand!\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BlobData = nullptr ; } else {)",
    "insertText": "for(unsigned e = Vals.size(); RecordIdx != e; ++RecordIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isUInt<8>(Vals[RecordIdx]) && \"Value too large to emit as blob\")"
  },
  {
    "label": "WriteByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteByte((unsigned char)Vals[RecordIdx])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(GetBufferOffset() & 3) WriteByte(0)"
  },
  {
    "label": "EmitAbbreviatedField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAbbreviatedField(Op, Vals[RecordIdx])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (+ + RecordIdx ; } })",
    "insertText": "assert(RecordIdx == Vals.size() && \"Not all record operands emitted!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BlobData == nullptr && \"Blob data specified for record that doesn't use it!\")"
  },
  {
    "label": "EmitRecord()",
    "kind": "Method",
    "detail": "Function (} public : template<uintty> void)",
    "insertText": "EmitRecord(unsigned Code, SmallVectorImpl<uintty> &Vals, unsigned Abbrev = 0)"
  },
  {
    "label": "EmitCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCode(bitc::UNABBREV_RECORD)"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR(Code, 6)"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR(static_cast<uint32_t>(Vals.size()), 6)"
  },
  {
    "label": "EmitRecordWithAbbrev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRecordWithAbbrev(Abbrev, Vals)"
  },
  {
    "label": "EmitRecordWithAbbrev()",
    "kind": "Method",
    "detail": "Function (} template<uintty> void)",
    "insertText": "EmitRecordWithAbbrev(unsigned Abbrev, SmallVectorImpl<uintty> &Vals)"
  },
  {
    "label": "EmitRecordWithAbbrevImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRecordWithAbbrevImpl(Abbrev, Vals, StringRef())"
  },
  {
    "label": "EmitRecordWithBlob()",
    "kind": "Method",
    "detail": "Function (} template<uintty> void)",
    "insertText": "EmitRecordWithBlob(unsigned Abbrev, SmallVectorImpl<uintty> &Vals, StringRef Blob)"
  },
  {
    "label": "EmitRecordWithAbbrevImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRecordWithAbbrevImpl(Abbrev, Vals, Blob)"
  },
  {
    "label": "EmitRecordWithBlob()",
    "kind": "Method",
    "detail": "Function (} template<uintty> void)",
    "insertText": "EmitRecordWithBlob(unsigned Abbrev, SmallVectorImpl<uintty> &Vals, const char *BlobData, unsigned BlobLen)"
  },
  {
    "label": "EmitRecordWithArray()",
    "kind": "Method",
    "detail": "Function (} template<uintty> void)",
    "insertText": "EmitRecordWithArray(unsigned Abbrev, SmallVectorImpl<uintty> &Vals, StringRef Array)"
  },
  {
    "label": "EmitRecordWithAbbrevImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRecordWithAbbrevImpl(Abbrev, Vals, Array)"
  },
  {
    "label": "EmitRecordWithArray()",
    "kind": "Method",
    "detail": "Function (} template<uintty> void)",
    "insertText": "EmitRecordWithArray(unsigned Abbrev, SmallVectorImpl<uintty> &Vals, const char *ArrayData, unsigned ArrayLen)"
  },
  {
    "label": "EncodeAbbrev()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "EncodeAbbrev(BitCodeAbbrev *Abbv)"
  },
  {
    "label": "EmitCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCode(bitc::DEFINE_ABBREV)"
  },
  {
    "label": "EmitVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR(Abbv->getNumOperandInfos(), 5)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit(Op.isLiteral(), 1)"
  },
  {
    "label": "EmitVBR64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitVBR64(Op.getLiteralValue(), 8)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Emit(Op.getEncoding(), 3)"
  },
  {
    "label": "EmitAbbrev()",
    "kind": "Method",
    "detail": "Function (} } } public : unsigned)",
    "insertText": "EmitAbbrev(BitCodeAbbrev *Abbv)"
  },
  {
    "label": "EncodeAbbrev()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeAbbrev(Abbv)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (CurAbbrevs .)",
    "insertText": "push_back(Abbv)"
  },
  {
    "label": "EnterBlockInfoBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnterBlockInfoBlock(unsigned CodeWidth)"
  },
  {
    "label": "EnterSubblock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterSubblock(bitc::BLOCKINFO_BLOCK_ID, CodeWidth)"
  },
  {
    "label": "SwitchToBlockID()",
    "kind": "Method",
    "detail": "Function (BlockInfoCurBID = ~ 0 U ; } private : void)",
    "insertText": "SwitchToBlockID(unsigned BlockID)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SmallVector<unsigned,2> V ; V .)",
    "insertText": "push_back(BlockID)"
  },
  {
    "label": "EmitRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRecord(bitc::BLOCKINFO_CODE_SETBID, V)"
  },
  {
    "label": "getOrCreateBlockInfo()",
    "kind": "Method",
    "detail": "Function (BlockInfoCurBID = BlockID ; } BlockInfo&)",
    "insertText": "getOrCreateBlockInfo(unsigned BlockID)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (BlockInfoRecords .)",
    "insertText": "emplace_back()"
  },
  {
    "label": "EmitBlockInfoAbbrev()",
    "kind": "Method",
    "detail": "Function (} public : unsigned)",
    "insertText": "EmitBlockInfoAbbrev(unsigned BlockID, BitCodeAbbrev *Abbv)"
  },
  {
    "label": "getOrCreateBlockInfo()",
    "kind": "Method",
    "detail": "Function (BlockInfo& Info =)",
    "insertText": "getOrCreateBlockInfo(BlockID)"
  }
]