[
  {
    "label": "FChangeMaskCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeMaskCache"
  },
  {
    "label": "FCachedInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInfo"
  },
  {
    "label": "PrepareCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Net / Core / NetBitArray . h \" namespace UE::Net::Private { struct FChangeMaskCache { struct FCachedInfo { uint32 InternalIndex ; uint32 StorageOffset : 2 4 U ; uint32 bMarkSubObjectOwnerDirty : 1 U ; uint32 bHasDirtyChangeMask : 1 ; } ; TArray<FCachedInfo,TInlineAllocator<1>> Indices ; TArray<uint32,TInlineAllocator<1>> Storage ; void)",
    "insertText": "PrepareCache(uint32 IndexCount, uint32 StorageSize)"
  },
  {
    "label": "ResetCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCache()"
  },
  {
    "label": "EmptyCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyCache()"
  },
  {
    "label": "AddChangeMaskForObject()",
    "kind": "Method",
    "detail": "Function (FCachedInfo&)",
    "insertText": "AddChangeMaskForObject(uint32 InternalIndex, uint32 BitCount)"
  },
  {
    "label": "AddSubObjectOwnerDirty()",
    "kind": "Method",
    "detail": "Function (FCachedInfo&)",
    "insertText": "AddSubObjectOwnerDirty(uint32 InternalIndex)"
  },
  {
    "label": "AddEmptyChangeMaskForObject()",
    "kind": "Method",
    "detail": "Function (FCachedInfo&)",
    "insertText": "AddEmptyChangeMaskForObject(uint32 InternalIndex)"
  },
  {
    "label": "GetChangeMaskStorage()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "GetChangeMaskStorage(const FCachedInfo& Info)"
  },
  {
    "label": "PopLastEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopLastEntry()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Reset(IndexCount)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Reset(StorageSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Empty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const uint32 StorageIndex = Storage .)",
    "insertText": "Num()"
  },
  {
    "label": "CalculateRequiredWordCount()",
    "kind": "Method",
    "detail": "Function (const uint32 WordCount =)",
    "insertText": "CalculateRequiredWordCount(BitCount)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (FCachedInfo Info ; Info . InternalIndex = InternalIndex ; Info . StorageOffset = StorageIndex ; Info . bMarkSubObjectOwnerDirty = 0 U ; Info . bHasDirtyChangeMask = 0 U ; Storage .)",
    "insertText": "AddZeroed(WordCount)"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (FCachedInfo Info ; Info . InternalIndex = InternalIndex ; Info . StorageOffset = 0 U ; Info . bMarkSubObjectOwnerDirty = 0 U ; Info . bHasDirtyChangeMask = 0 U ; return Indices .)",
    "insertText": "Add_GetRef(Info)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const FCachedInfo& Info = Indices .)",
    "insertText": "Last()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "SetNum(Info.StorageOffset, EAllowShrinking::No)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Pop(EAllowShrinking::No)"
  }
]