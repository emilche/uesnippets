[
  {
    "label": "FD3D11StateCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11StateCacheBase"
  },
  {
    "label": "FD3D11VertexBufferState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11VertexBufferState"
  },
  {
    "label": "FD3D11ConstantBufferState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11ConstantBufferState"
  },
  {
    "label": "D3D11_STATE_CACHE_VERIFY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" Windows / D3D11ThirdParty . h \" # define D3D11_ALLOW_STATE_CACHE 1 # define D3D11_STATE_CACHE_RUNTIME_TOGGLE 0 # ifndef D3D11_STATE_CACHE_DEBUG # define D3D11_STATE_CACHE_DEBUG 0 # endif # define D3D11_STATE_CACHE_INLINE # if D3D11_ALLOW_STATE_CACHE&& D3D11_STATE_CACHE_DEBUG&& DO_CHECK # define)",
    "insertText": "D3D11_STATE_CACHE_VERIFY(...) VerifyCacheState() #define D3D11_STATE_CACHE_VERIFY_PRE(...) VerifyCacheStatePre() #define D3D11_STATE_CACHE_VERIFY_POST(...) VerifyCacheStatePost() #else #define D3D11_STATE_CACHE_VERIFY(...) #define D3D11_STATE_CACHE_VERIFY_PRE(...) #define D3D11_STATE_CACHE_VERIFY_POST(...)"
  },
  {
    "label": "InternalSetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (# else const bool GD3D11SkipStateCaching = false ; # endif class FD3D11StateCacheBase { public : bool bDepthBoundsEnabled = false ; float DepthBoundsMin = 0 . 0 f ; float DepthBoundsMax = 1 . 0 f ; protected : ID3D11DeviceContext* Direct3DDeviceIMContext ; # if D3D11_ALLOW_STATE_CACHE ID3D11ShaderResourceView* CurrentShaderResourceViews [ SF_NumStandardFrequencies ] [ D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT ] ; ID3D11RasterizerState* CurrentRasterizerState ; uint32 CurrentReferenceStencil ; ID3D11DepthStencilState* CurrentDepthStencilState ; ID3D11VertexShader* CurrentVertexShader ; ID3D11GeometryShader* CurrentGeometryShader ; ID3D11PixelShader* CurrentPixelShader ; ID3D11ComputeShader* CurrentComputeShader ; float CurrentBlendFactor [ 4 ] ; uint32 CurrentBlendSampleMask ; ID3D11BlendState* CurrentBlendState ; uint32 CurrentNumberOfViewports ; D3D11_VIEWPORT CurrentViewport [ D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE ] ; struct FD3D11VertexBufferState { ID3D11Buffer* VertexBuffer ; uint32 Stride ; uint32 Offset ; } CurrentVertexBuffers [ D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT ] ; ID3D11Buffer* CurrentIndexBuffer ; DXGI_FORMAT CurrentIndexFormat ; uint32 CurrentIndexOffset ; D3D11_PRIMITIVE_TOPOLOGY CurrentPrimitiveTopology ; ID3D11InputLayout* CurrentInputLayout ; uint16 StreamStrides [ MaxVertexElementCount ] ; ID3D11SamplerState* CurrentSamplerStates [ SF_NumStandardFrequencies ] [ D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT ] ; struct FD3D11ConstantBufferState { ID3D11Buffer* Buffer ; uint32 FirstConstant ; uint32 NumConstants ; } CurrentConstantBuffers [ SF_NumStandardFrequencies ] [ D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT ] ; bool bAlwaysSetIndexBuffers ; # endif template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetShaderResourceView(uint32 ResourceIndex, ID3D11ShaderResourceView*& SRV)"
  },
  {
    "label": "CA_SUPPRESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CA_SUPPRESS(6326)"
  },
  {
    "label": "GSSetShaderResources()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Geometry : Direct3DDeviceIMContext ->)",
    "insertText": "GSSetShaderResources(ResourceIndex, 1, &SRV)"
  },
  {
    "label": "PSSetShaderResources()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Pixel : Direct3DDeviceIMContext ->)",
    "insertText": "PSSetShaderResources(ResourceIndex, 1, &SRV)"
  },
  {
    "label": "CSSetShaderResources()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Compute : Direct3DDeviceIMContext ->)",
    "insertText": "CSSetShaderResources(ResourceIndex, 1, &SRV)"
  },
  {
    "label": "InternalSetSamplerState()",
    "kind": "Method",
    "detail": "Function (break ; } } template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetSamplerState(uint32 SamplerIndex, ID3D11SamplerState*& SamplerState)"
  },
  {
    "label": "GSSetSamplers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Geometry : Direct3DDeviceIMContext ->)",
    "insertText": "GSSetSamplers(SamplerIndex, 1, &SamplerState)"
  },
  {
    "label": "PSSetSamplers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Pixel : Direct3DDeviceIMContext ->)",
    "insertText": "PSSetSamplers(SamplerIndex, 1, &SamplerState)"
  },
  {
    "label": "CSSetSamplers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Compute : Direct3DDeviceIMContext ->)",
    "insertText": "CSSetSamplers(SamplerIndex, 1, &SamplerState)"
  },
  {
    "label": "InternalSetSetConstantBuffer()",
    "kind": "Method",
    "detail": "Function (break ; } } template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetSetConstantBuffer(uint32 SlotIndex, ID3D11Buffer*& ConstantBuffer)"
  },
  {
    "label": "GSSetConstantBuffers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Geometry : Direct3DDeviceIMContext ->)",
    "insertText": "GSSetConstantBuffers(SlotIndex, 1, &ConstantBuffer)"
  },
  {
    "label": "PSSetConstantBuffers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Pixel : Direct3DDeviceIMContext ->)",
    "insertText": "PSSetConstantBuffers(SlotIndex, 1, &ConstantBuffer)"
  },
  {
    "label": "CSSetConstantBuffers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Compute : Direct3DDeviceIMContext ->)",
    "insertText": "CSSetConstantBuffers(SlotIndex, 1, &ConstantBuffer)"
  },
  {
    "label": "InternalSetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (break ; } } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetIndexBuffer(ID3D11Buffer* IndexBuffer, DXGI_FORMAT Format, uint32 Offset)"
  },
  {
    "label": "D3D11_STATE_CACHE_VERIFY_PRE()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE)",
    "insertText": "D3D11_STATE_CACHE_VERIFY_PRE()"
  },
  {
    "label": "IASetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (CurrentIndexBuffer = IndexBuffer ; CurrentIndexFormat = Format ; CurrentIndexOffset = Offset ; Direct3DDeviceIMContext ->)",
    "insertText": "IASetIndexBuffer(IndexBuffer, Format, Offset)"
  },
  {
    "label": "D3D11_STATE_CACHE_VERIFY_POST()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "D3D11_STATE_CACHE_VERIFY_POST()"
  },
  {
    "label": "InternalSetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (# endif } template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetShaderResourceView(ID3D11ShaderResourceView*& SRV, uint32 ResourceIndex)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (SRV ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CurrentShaderResourceViews[ShaderFrequency][ResourceIndex])"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (CurrentShaderResourceViews [ ShaderFrequency ] [ ResourceIndex ] ->)",
    "insertText": "Release()"
  },
  {
    "label": "ShaderFrequency()",
    "kind": "Method",
    "detail": "Function (} CurrentShaderResourceViews [ ShaderFrequency ] [ ResourceIndex ] = SRV ; InternalSetShaderResourceView<)",
    "insertText": "ShaderFrequency(ResourceIndex, SRV)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetStreamSource(ID3D11Buffer* VertexBuffer, uint32 StreamIndex, uint32 Stride, uint32 Offset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FD3D11VertexBufferState& Slot = CurrentVertexBuffers [ StreamIndex ] ;)",
    "insertText": "if((Slot.VertexBuffer != VertexBuffer || Slot.Offset != Offset || Slot.Stride != Stride) || GD3D11SkipStateCaching)"
  },
  {
    "label": "IASetVertexBuffers()",
    "kind": "Method",
    "detail": "Function (Slot . VertexBuffer = VertexBuffer ; Slot . Offset = Offset ; Slot . Stride = Stride ; Direct3DDeviceIMContext ->)",
    "insertText": "IASetVertexBuffers(StreamIndex, 1, &VertexBuffer, &Stride, &Offset)"
  },
  {
    "label": "InternalSetSamplerState()",
    "kind": "Method",
    "detail": "Function (# endif } template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "InternalSetSamplerState(ID3D11SamplerState* SamplerState, uint32 SamplerIndex)"
  },
  {
    "label": "ShaderFrequency()",
    "kind": "Method",
    "detail": "Function (CurrentSamplerStates [ ShaderFrequency ] [ SamplerIndex ] = SamplerState ; InternalSetSamplerState<)",
    "insertText": "ShaderFrequency(SamplerIndex, SamplerState)"
  },
  {
    "label": "ClearConstantBuffers()",
    "kind": "Method",
    "detail": "Function (# endif } public : template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "ClearConstantBuffers()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE)",
    "insertText": "Memzero(CurrentConstantBuffers[ShaderFrequency])"
  },
  {
    "label": "GSSetConstantBuffers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Geometry : Direct3DDeviceIMContext ->)",
    "insertText": "GSSetConstantBuffers(0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT, Empty)"
  },
  {
    "label": "PSSetConstantBuffers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Pixel : Direct3DDeviceIMContext ->)",
    "insertText": "PSSetConstantBuffers(0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT, Empty)"
  },
  {
    "label": "CSSetConstantBuffers()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Compute : Direct3DDeviceIMContext ->)",
    "insertText": "CSSetConstantBuffers(0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT, Empty)"
  },
  {
    "label": "SetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (break ; } } template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetShaderResourceView(ID3D11ShaderResourceView* SRV, uint32 ResourceIndex)"
  },
  {
    "label": "ShaderFrequency()",
    "kind": "Method",
    "detail": "Function (InternalSetShaderResourceView<)",
    "insertText": "ShaderFrequency(SRV, ResourceIndex)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (} D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetViewport(D3D11_VIEWPORT Viewport)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&CurrentViewport[0], &Viewport, sizeof(D3D11_VIEWPORT))"
  },
  {
    "label": "RSSetViewports()",
    "kind": "Method",
    "detail": "Function (CurrentNumberOfViewports = 1 ; Direct3DDeviceIMContext ->)",
    "insertText": "RSSetViewports(1,&Viewport)"
  },
  {
    "label": "SetViewports()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetViewports(uint32 Count, D3D11_VIEWPORT* Viewports)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&CurrentViewport[0], Viewports, sizeof(D3D11_VIEWPORT) * Count)"
  },
  {
    "label": "RSSetViewports()",
    "kind": "Method",
    "detail": "Function (CurrentNumberOfViewports = Count ; Direct3DDeviceIMContext ->)",
    "insertText": "RSSetViewports(Count, Viewports)"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "GetViewport(D3D11_VIEWPORT *Viewport)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE)",
    "insertText": "check(Viewport)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Viewport,&CurrentViewport,sizeof(D3D11_VIEWPORT))"
  },
  {
    "label": "RSGetViewports()",
    "kind": "Method",
    "detail": "Function (# else uint32 one = 1 ; Direct3DDeviceIMContext ->)",
    "insertText": "RSGetViewports(&one,Viewport)"
  },
  {
    "label": "GetViewports()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "GetViewports(uint32* Count, D3D11_VIEWPORT *Viewports)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE)",
    "insertText": "check(*Count)"
  },
  {
    "label": "StorageSizeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StorageSizeCount(int32)(*Count)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (int32 CopyCount =)",
    "insertText": "Min(FMath::Min(StorageSizeCount, (int32)CurrentNumberOfViewports), D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Viewports, &CurrentViewport[0], sizeof(D3D11_VIEWPORT) * CopyCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(StorageSizeCount > CopyCount)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(&Viewports[CopyCount], 0, sizeof(D3D11_VIEWPORT) * (StorageSizeCount - CopyCount))"
  },
  {
    "label": "RSGetViewports()",
    "kind": "Method",
    "detail": "Function (} }* Count = CurrentNumberOfViewports ; # else Direct3DDeviceIMContext ->)",
    "insertText": "RSGetViewports(Count, Viewports)"
  },
  {
    "label": "SetSamplerState()",
    "kind": "Method",
    "detail": "Function (# endif } template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetSamplerState(ID3D11SamplerState* SamplerState, uint32 SamplerIndex)"
  },
  {
    "label": "ShaderFrequency()",
    "kind": "Method",
    "detail": "Function (InternalSetSamplerState<)",
    "insertText": "ShaderFrequency(SamplerState, SamplerIndex)"
  },
  {
    "label": "SetConstantBuffer()",
    "kind": "Method",
    "detail": "Function (} template<EShaderFrequency ShaderFrequency> D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetConstantBuffer(ID3D11Buffer* ConstantBuffer, uint32 SlotIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FD3D11ConstantBufferState& Current = CurrentConstantBuffers [ ShaderFrequency ] [ SlotIndex ] ;)",
    "insertText": "if((Current.Buffer != ConstantBuffer || Current.FirstConstant != 0 || Current.NumConstants != D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT) || GD3D11SkipStateCaching)"
  },
  {
    "label": "ShaderFrequency()",
    "kind": "Method",
    "detail": "Function (Current . Buffer = ConstantBuffer ; Current . FirstConstant = 0 ; Current . NumConstants = D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT ; InternalSetSetConstantBuffer<)",
    "insertText": "ShaderFrequency(SlotIndex, ConstantBuffer)"
  },
  {
    "label": "SetRasterizerState()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetRasterizerState(ID3D11RasterizerState* State)"
  },
  {
    "label": "RSSetState()",
    "kind": "Method",
    "detail": "Function (CurrentRasterizerState = State ; Direct3DDeviceIMContext ->)",
    "insertText": "RSSetState(State)"
  },
  {
    "label": "SetBlendState()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetBlendState(ID3D11BlendState* State, const float BlendFactor[4], uint32 SampleMask)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (CurrentBlendState = State ; CurrentBlendSampleMask = SampleMask ;)",
    "insertText": "Memcpy(CurrentBlendFactor, BlendFactor, sizeof(CurrentBlendFactor))"
  },
  {
    "label": "OMSetBlendState()",
    "kind": "Method",
    "detail": "Function (Direct3DDeviceIMContext ->)",
    "insertText": "OMSetBlendState(State, BlendFactor, SampleMask)"
  },
  {
    "label": "SetBlendFactor()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetBlendFactor(const float BlendFactor[4], uint32 SampleMask)"
  },
  {
    "label": "OMSetBlendState()",
    "kind": "Method",
    "detail": "Function (Direct3DDeviceIMContext ->)",
    "insertText": "OMSetBlendState(CurrentBlendState, BlendFactor, SampleMask)"
  },
  {
    "label": "SetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetDepthStencilState(ID3D11DepthStencilState* State, uint32 RefStencil)"
  },
  {
    "label": "OMSetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (CurrentDepthStencilState = State ; CurrentReferenceStencil = RefStencil ; Direct3DDeviceIMContext ->)",
    "insertText": "OMSetDepthStencilState(State, RefStencil)"
  },
  {
    "label": "SetStencilRef()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetStencilRef(uint32 RefStencil)"
  },
  {
    "label": "OMSetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (CurrentReferenceStencil = RefStencil ; Direct3DDeviceIMContext ->)",
    "insertText": "OMSetDepthStencilState(CurrentDepthStencilState, RefStencil)"
  },
  {
    "label": "SetVertexShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetVertexShader(ID3D11VertexShader* Shader)"
  },
  {
    "label": "VSSetShader()",
    "kind": "Method",
    "detail": "Function (CurrentVertexShader = Shader ; Direct3DDeviceIMContext ->)",
    "insertText": "VSSetShader(Shader, nullptr, 0)"
  },
  {
    "label": "GetVertexShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "GetVertexShader(ID3D11VertexShader** VertexShader)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE* VertexShader = CurrentVertexShader ;)",
    "insertText": "if(CurrentVertexShader)"
  },
  {
    "label": "VSGetShader()",
    "kind": "Method",
    "detail": "Function (} # else Direct3DDeviceIMContext ->)",
    "insertText": "VSGetShader(VertexShader, nullptr, nullptr)"
  },
  {
    "label": "SetGeometryShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetGeometryShader(ID3D11GeometryShader* Shader)"
  },
  {
    "label": "GSSetShader()",
    "kind": "Method",
    "detail": "Function (CurrentGeometryShader = Shader ; Direct3DDeviceIMContext ->)",
    "insertText": "GSSetShader(Shader, nullptr, 0)"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "GetGeometryShader(ID3D11GeometryShader** GeometryShader)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE* GeometryShader = CurrentGeometryShader ;)",
    "insertText": "if(CurrentGeometryShader)"
  },
  {
    "label": "GSGetShader()",
    "kind": "Method",
    "detail": "Function (} # else Direct3DDeviceIMContext ->)",
    "insertText": "GSGetShader(GeometryShader, nullptr, nullptr)"
  },
  {
    "label": "SetPixelShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetPixelShader(ID3D11PixelShader* Shader)"
  },
  {
    "label": "PSSetShader()",
    "kind": "Method",
    "detail": "Function (CurrentPixelShader = Shader ; Direct3DDeviceIMContext ->)",
    "insertText": "PSSetShader(Shader, nullptr, 0)"
  },
  {
    "label": "GetPixelShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "GetPixelShader(ID3D11PixelShader** PixelShader)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE* PixelShader = CurrentPixelShader ;)",
    "insertText": "if(CurrentPixelShader)"
  },
  {
    "label": "PSGetShader()",
    "kind": "Method",
    "detail": "Function (} # else Direct3DDeviceIMContext ->)",
    "insertText": "PSGetShader(PixelShader, nullptr, nullptr)"
  },
  {
    "label": "SetComputeShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetComputeShader(ID3D11ComputeShader* Shader)"
  },
  {
    "label": "CSSetShader()",
    "kind": "Method",
    "detail": "Function (CurrentComputeShader = Shader ; Direct3DDeviceIMContext ->)",
    "insertText": "CSSetShader(Shader, nullptr, 0)"
  },
  {
    "label": "GetComputeShader()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "GetComputeShader(ID3D11ComputeShader** ComputeShader)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE* ComputeShader = CurrentComputeShader ;)",
    "insertText": "if(CurrentComputeShader)"
  },
  {
    "label": "CSGetShader()",
    "kind": "Method",
    "detail": "Function (} # else Direct3DDeviceIMContext ->)",
    "insertText": "CSGetShader(ComputeShader, nullptr, nullptr)"
  },
  {
    "label": "SetStreamStrides()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetStreamStrides(const uint16* InStreamStrides)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(StreamStrides, InStreamStrides, sizeof(StreamStrides))"
  },
  {
    "label": "SetInputLayout()",
    "kind": "Method",
    "detail": "Function (} D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetInputLayout(ID3D11InputLayout* InputLayout)"
  },
  {
    "label": "IASetInputLayout()",
    "kind": "Method",
    "detail": "Function (CurrentInputLayout = InputLayout ; Direct3DDeviceIMContext ->)",
    "insertText": "IASetInputLayout(InputLayout)"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (# endif } D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetStreamSource(ID3D11Buffer* VertexBuffer, uint32 StreamIndex, uint32 Stride, uint32 Offset)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetStreamSource(VertexBuffer, StreamIndex, Stride, Offset)"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (} D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetStreamSource(ID3D11Buffer* VertexBuffer, uint32 StreamIndex, uint32 Offset)"
  },
  {
    "label": "InternalSetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetStreamSource(VertexBuffer, StreamIndex, StreamStrides[StreamIndex], Offset)"
  },
  {
    "label": "SetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} public : D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetIndexBuffer(ID3D11Buffer* IndexBuffer, DXGI_FORMAT Format, uint32 Offset)"
  },
  {
    "label": "InternalSetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetIndexBuffer(IndexBuffer, Format, Offset)"
  },
  {
    "label": "SetPrimitiveTopology()",
    "kind": "Method",
    "detail": "Function (} D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY PrimitiveTopology)"
  },
  {
    "label": "IASetPrimitiveTopology()",
    "kind": "Method",
    "detail": "Function (CurrentPrimitiveTopology = PrimitiveTopology ; Direct3DDeviceIMContext ->)",
    "insertText": "IASetPrimitiveTopology(PrimitiveTopology)"
  },
  {
    "label": "FD3D11StateCacheBase()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FD3D11StateCacheBase() : Direct3DDeviceIMContext(nullptr)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(CurrentShaderResourceViews, sizeof(CurrentShaderResourceViews))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(ID3D11DeviceContext* InDeviceContext, bool bInAlwaysSetIndexBuffers = false)"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContext(InDeviceContext)"
  },
  {
    "label": "FD3D11StateCacheBase()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE bAlwaysSetIndexBuffers = bInAlwaysSetIndexBuffers ; # endif } ~)",
    "insertText": "FD3D11StateCacheBase()"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (} D3D11_STATE_CACHE_INLINE void)",
    "insertText": "SetContext(ID3D11DeviceContext* InDeviceContext)"
  },
  {
    "label": "ClearState()",
    "kind": "Method",
    "detail": "Function (Direct3DDeviceIMContext = InDeviceContext ;)",
    "insertText": "ClearState()"
  },
  {
    "label": "D3D11_STATE_CACHE_VERIFY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "D3D11_STATE_CACHE_VERIFY()"
  },
  {
    "label": "VerifySamplerStates()",
    "kind": "Method",
    "detail": "Function (# if D3D11_ALLOW_STATE_CACHE&& D3D11_STATE_CACHE_DEBUG protected : template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "VerifySamplerStates()"
  },
  {
    "label": "VerifyConstantBuffers()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "VerifyConstantBuffers()"
  },
  {
    "label": "VerifyShaderResourceViews()",
    "kind": "Method",
    "detail": "Function (template<EShaderFrequency ShaderFrequency> void)",
    "insertText": "VerifyShaderResourceViews()"
  },
  {
    "label": "VerifyCacheStatePre()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCacheStatePre()"
  },
  {
    "label": "VerifyCacheStatePost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCacheStatePost()"
  },
  {
    "label": "VerifyCacheState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyCacheState()"
  }
]