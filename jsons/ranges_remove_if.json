[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REMOVE_IF_H # define _LIBCPP___ALGORITHM_RANGES_REMOVE_IF_H # include<__config> # include<__algorithm / ranges_find_if . h> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / iter_move . h> # include<__iterator / permutable . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / subrange . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__remove_if_impl()",
    "kind": "Method",
    "detail": "Function (template<class _Iter,class _Sent,class _Proj,class _Pred> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "__remove_if_impl(_Iter __first, _Sent __last, _Pred& __pred, _Proj& __proj)"
  },
  {
    "label": "__find_if_impl()",
    "kind": "Method",
    "detail": "Function (auto __new_end =)",
    "insertText": "__find_if_impl(__first, __last, __pred, __proj)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (__new_end,__new_end } ; _Iter __i = __new_end ;)",
    "insertText": "while(++__i != __last)"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (* __new_end =)",
    "insertText": "iter_move(__i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __new_end ; } } return { __new_end,__i } ; } namespace __remove_if { struct __fn { template<permutable _Iter,sentinel_for<_Iter> _Sent,class _Proj = identity,indirect_unary_predicate<projected<_Iter,_Proj>> _Pred> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "operator()(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Range,class _Proj = identity,indirect_unary_predicate<projected<iterator_t<_Range>,_Proj>> _Pred> requires permutable<iterator_t<_Range>> _LIBCPP_HIDE_FROM_ABI borrowed_subrange_t<_Range>)",
    "insertText": "operator()(_Range&& __range, _Pred __pred, _Proj __proj = {})"
  }
]