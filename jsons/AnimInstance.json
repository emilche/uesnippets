[
  {
    "label": "FDisplayDebugManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayDebugManager"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "IAnimClassInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimClassInterface"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FAlphaBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlend"
  },
  {
    "label": "FAlphaBlendArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlendArgs"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "FAnimationEvaluationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationEvaluationContext"
  },
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimNode_LinkedInputPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedInputPose"
  },
  {
    "label": "FBakedAnimationStateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakedAnimationStateMachine"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FCurveEvaluationOption",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEvaluationOption"
  },
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "FBlendedHeapCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedHeapCurve"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "FSmartNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartNameMapping"
  },
  {
    "label": "FAnimNode_LinkedAnimLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimLayer"
  },
  {
    "label": "FNodeDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeDebugData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FHeapAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapAttributeContainer"
  },
  {
    "label": "FCurveFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveFilterSettings"
  },
  {
    "label": "FParallelEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParallelEvaluationData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FA2Pose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2Pose"
  },
  {
    "label": "FA2CSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2CSPose"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FAnimationRuntime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationRuntime"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FQueuedMontageBlendingOutEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedMontageBlendingOutEvent"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FQueuedMontageBlendedInEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedMontageBlendedInEvent"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FQueuedMontageEndedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedMontageEndedEvent"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FNativeTransitionBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNativeTransitionBinding"
  },
  {
    "label": "FNativeStateBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNativeStateBinding"
  },
  {
    "label": "FMontageActiveSlotTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMontageActiveSlotTracker"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "within",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "within"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "FQueuedRootMotionBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedRootMotionBlend"
  },
  {
    "label": "FAnimNode_LinkedAnimGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimGraph"
  },
  {
    "label": "FAnimNode_LinkedAnimLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimLayer"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "AllocateLocalPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateLocalPoses(const FBoneContainer& InBoneContainer, const FA2Pose & LocalPose)"
  },
  {
    "label": "AllocateLocalPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateLocalPoses(const FBoneContainer& InBoneContainer, const FTransformArrayA2 & LocalBones)"
  },
  {
    "label": "GetLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetLocalSpaceTransform(int32 BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransform(int32 BoneIndex)"
  },
  {
    "label": "CalculateComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateComponentSpaceTransform(int32 Index)"
  },
  {
    "label": "SetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentSpaceTransform(int32 Index, const FTransform& NewTransform)"
  },
  {
    "label": "ConvertBoneToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneToLocalSpace(int32 BoneIndex)"
  },
  {
    "label": "SetLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSpaceTransform(int32 Index, const FTransform& NewTransform)"
  },
  {
    "label": "MakeMontageTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeMontageTickRecord(FAnimTickRecord& TickRecord, class UAnimMontage* Montage, float MoveDelta, float Weight, TArray<FPassedMarker>& MarkersPassedThisTick, FMarkerTickRecord& MarkerTickRecord)"
  },
  {
    "label": "SavePoseSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "RemovePoseSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "BlueprintInitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlueprintInitializeAnimation()"
  },
  {
    "label": "BlueprintUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlueprintUpdateAnimation(float DeltaTimeX)"
  },
  {
    "label": "BlueprintPostEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlueprintPostEvaluateAnimation()"
  },
  {
    "label": "BlueprintBeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlueprintBeginPlay()"
  },
  {
    "label": "BlueprintLinkedAnimationLayersInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlueprintLinkedAnimationLayersInitialized()"
  },
  {
    "label": "BlueprintThreadSafeUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlueprintThreadSafeUpdateAnimation(float DeltaTime)"
  },
  {
    "label": "StopSlotAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSlotAnimation(float InBlendOutTime = 0.25f, FName SlotNodeName = NAME_None)"
  },
  {
    "label": "Montage_Play()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate = 1.f, EMontagePlayReturnType ReturnValueType = EMontagePlayReturnType::MontageLength, float InTimeToStartMontageAt=0.f, bool bStopAllMontages = true)"
  },
  {
    "label": "Montage_PlayWithBlendIn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Montage_PlayWithBlendIn(UAnimMontage* MontageToPlay, const FAlphaBlendArgs& BlendIn, float InPlayRate = 1.f, EMontagePlayReturnType ReturnValueType = EMontagePlayReturnType::MontageLength, float InTimeToStartMontageAt=0.f, bool bStopAllMontages = true)"
  },
  {
    "label": "Montage_PlayWithBlendSettings()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Montage_PlayWithBlendSettings(UAnimMontage* MontageToPlay, const FMontageBlendSettings& BlendInSettings, float InPlayRate = 1.f, EMontagePlayReturnType ReturnValueType = EMontagePlayReturnType::MontageLength, float InTimeToStartMontageAt=0.f, bool bStopAllMontages = true)"
  },
  {
    "label": "Montage_Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_Stop(float InBlendOutTime, const UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_StopWithBlendOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_StopWithBlendOut(const FAlphaBlendArgs& BlendOut, const UAnimMontage* Montage = nullptr)"
  },
  {
    "label": "Montage_StopWithBlendSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_StopWithBlendSettings(const FMontageBlendSettings& BlendOutSettings, const UAnimMontage* Montage = nullptr)"
  },
  {
    "label": "Montage_StopGroupByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_StopGroupByName(float InBlendOutTime, FName GroupName)"
  },
  {
    "label": "Montage_Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_Pause(const UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_Resume(const UAnimMontage* Montage)"
  },
  {
    "label": "Montage_JumpToSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_JumpToSection(FName SectionName, const UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_JumpToSectionsEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_JumpToSectionsEnd(FName SectionName, const UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_SetNextSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_SetPlayRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetPlayRate(const UAnimMontage* Montage, float NewPlayRate = 1.f)"
  },
  {
    "label": "Montage_SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetPosition(const UAnimMontage* Montage, float NewPosition)"
  },
  {
    "label": "MontageSync_Follow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_Follow(const UAnimMontage* MontageFollower, const UAnimInstance* OtherAnimInstance, const UAnimMontage* MontageLeader)"
  },
  {
    "label": "MontageSync_StopFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MontageSync_StopFollowing(const UAnimMontage* MontageFollower)"
  },
  {
    "label": "Montage_SetEndDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetEndDelegate(FOnMontageEnded & InOnMontageEnded, UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_SetBlendingOutDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetBlendingOutDelegate(FOnMontageBlendingOutStarted& InOnMontageBlendingOut, UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_SetBlendedInDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetBlendedInDelegate(FOnMontageBlendedInEnded& InOnMontageBlendingIn, UAnimMontage* Montage = nullptr)"
  },
  {
    "label": "StopAllMontages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllMontages(float BlendOut)"
  },
  {
    "label": "OnMontageInstanceStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMontageInstanceStopped(FAnimMontageInstance & StoppedMontageInstance)"
  },
  {
    "label": "ClearMontageInstanceReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMontageInstanceReferences(FAnimMontageInstance& InMontageInstance)"
  },
  {
    "label": "GetLinkedInputPoseNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLinkedInputPoseNode(InSubInput, InGraph)"
  },
  {
    "label": "GetLinkedAnimGraphInstanceByTag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLinkedAnimGraphInstanceByTag(InTag)"
  },
  {
    "label": "LinkAnimGraphByTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAnimGraphByTag(FName InTag, TSubclassOf<UAnimInstance> InClass)"
  },
  {
    "label": "LinkAnimClassLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAnimClassLayers(TSubclassOf<UAnimInstance> InClass)"
  },
  {
    "label": "UnlinkAnimClassLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkAnimClassLayers(TSubclassOf<UAnimInstance> InClass)"
  },
  {
    "label": "GetLinkedAnimLayerInstanceByGroup()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLinkedAnimLayerInstanceByGroup(InGroup)"
  },
  {
    "label": "GetLinkedAnimLayerInstanceByClass()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetLinkedAnimLayerInstanceByClass(InClass)"
  },
  {
    "label": "InitializeGroupedLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGroupedLayers(bool bInDeferSubGraphInitialization)"
  },
  {
    "label": "AddExternalNotifyHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalNotifyHandler(UObject* ExternalHandlerObject, FName NotifyEventName)"
  },
  {
    "label": "RemoveExternalNotifyHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExternalNotifyHandler(UObject* ExternalHandlerObject, FName NotifyEventName)"
  },
  {
    "label": "StopAllMontagesByGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllMontagesByGroupName(FName InGroupName, const FAlphaBlend& BlendOut)"
  },
  {
    "label": "StopAllMontagesByGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllMontagesByGroupName(FName InGroupName, const FMontageBlendSettings& BlendOutSettings)"
  },
  {
    "label": "Montage_UpdateWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_UpdateWeight(float DeltaSeconds)"
  },
  {
    "label": "Montage_Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_Advance(float DeltaSeconds)"
  },
  {
    "label": "Montage_PlayInternal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Montage_PlayInternal(UAnimMontage* MontageToPlay, const FMontageBlendSettings& BlendInSettings, float InPlayRate = 1.f, EMontagePlayReturnType ReturnValueType = EMontagePlayReturnType::MontageLength, float InTimeToStartMontageAt = 0.f, bool bStopAllMontages = true)"
  },
  {
    "label": "ConditionalFlushCompletedMontages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalFlushCompletedMontages()"
  },
  {
    "label": "RequestMontageInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMontageInertialization(const UAnimMontage* Montage, float Duration, const UBlendProfile* BlendProfile = nullptr)"
  },
  {
    "label": "RequestMontageInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMontageInertialization(const UAnimMontage* Montage, const FInertializationRequest& Request)"
  },
  {
    "label": "RequestSlotGroupInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSlotGroupInertialization(FName InSlotGroupName, float Duration, const UBlendProfile* BlendProfile = nullptr)"
  },
  {
    "label": "QueueMontageBlendingOutEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMontageBlendingOutEvent(const FQueuedMontageBlendingOutEvent& MontageBlendingOutEvent)"
  },
  {
    "label": "QueueMontageBlendedInEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMontageBlendedInEvent(const FQueuedMontageBlendedInEvent& MontageBlendedInEvent)"
  },
  {
    "label": "QueueMontageEndedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMontageEndedEvent(const FQueuedMontageEndedEvent& MontageEndedEvent)"
  },
  {
    "label": "TriggerQueuedMontageEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerQueuedMontageEvents()"
  },
  {
    "label": "TriggerMontageBlendingOutEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMontageBlendingOutEvent(const FQueuedMontageBlendingOutEvent& MontageBlendingOutEvent)"
  },
  {
    "label": "TriggerMontageBlendedInEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMontageBlendedInEvent(const FQueuedMontageBlendedInEvent& MontageBlendedInEvent)"
  },
  {
    "label": "TriggerMontageEndedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMontageEndedEvent(const FQueuedMontageEndedEvent& MontageEndedEvent)"
  },
  {
    "label": "SetRootMotionMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootMotionMode(TEnumAsByte<ERootMotionMode::Type> Value)"
  },
  {
    "label": "GetInstanceAssetPlayerLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerLength(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTime(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTimeFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTimeFraction(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTimeFromEnd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTimeFromEnd(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerTimeFromEndFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceAssetPlayerTimeFromEndFraction(int32 AssetPlayerIndex)"
  },
  {
    "label": "GetInstanceMachineWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceMachineWeight(int32 MachineIndex)"
  },
  {
    "label": "GetInstanceStateWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceStateWeight(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetInstanceCurrentStateElapsedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceCurrentStateElapsedTime(int32 MachineIndex)"
  },
  {
    "label": "GetInstanceTransitionCrossfadeDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceTransitionCrossfadeDuration(int32 MachineIndex, int32 TransitionIndex)"
  },
  {
    "label": "GetInstanceTransitionTimeElapsed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceTransitionTimeElapsed(int32 MachineIndex, int32 TransitionIndex)"
  },
  {
    "label": "GetInstanceTransitionTimeElapsedFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstanceTransitionTimeElapsedFraction(int32 MachineIndex, int32 TransitionIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemaining()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemaining(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemainingFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemainingFraction(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimLength(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTime(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeFraction(int32 MachineIndex, int32 StateIndex)"
  },
  {
    "label": "WasAnimNotifyStateActiveInAnyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyStateActiveInAnyState(TSubclassOf<UAnimNotifyState> AnimNotifyStateType)"
  },
  {
    "label": "WasAnimNotifyStateActiveInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyStateActiveInStateMachine(int32 MachineIndex, TSubclassOf<UAnimNotifyState> AnimNotifyStateType)"
  },
  {
    "label": "WasAnimNotifyStateActiveInSourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyStateActiveInSourceState(int32 MachineIndex, int32 StateIndex, TSubclassOf<UAnimNotifyState> AnimNotifyStateType)"
  },
  {
    "label": "WasAnimNotifyTriggeredInSourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyTriggeredInSourceState(int32 MachineIndex, int32 StateIndex,  TSubclassOf<UAnimNotify> AnimNotifyType)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInSourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInSourceState(int32 MachineIndex, int32 StateIndex, FName NotifyName)"
  },
  {
    "label": "WasAnimNotifyTriggeredInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyTriggeredInStateMachine(int32 MachineIndex, TSubclassOf<UAnimNotify> AnimNotifyType)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInStateMachine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInStateMachine(int32 MachineIndex, FName NotifyName)"
  },
  {
    "label": "WasAnimNotifyTriggeredInAnyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyTriggeredInAnyState(TSubclassOf<UAnimNotify> AnimNotifyType)"
  },
  {
    "label": "WasAnimNotifyNameTriggeredInAnyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasAnimNotifyNameTriggeredInAnyState(FName NotifyName)"
  },
  {
    "label": "GetStateMachineIndexAndDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStateMachineIndexAndDescription(FName InMachineName, int32& OutMachineIndex, const FBakedAnimationStateMachine** OutMachineDescription)"
  },
  {
    "label": "GetCurveValueWithDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurveValueWithDefault(FName CurveName, float DefaultValue, float& OutValue)"
  },
  {
    "label": "OverrideCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideCurveValue(FName CurveName, float Value)"
  },
  {
    "label": "GetCurrentStateName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCurrentStateName(int32 MachineIndex)"
  },
  {
    "label": "SetMorphTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMorphTarget(FName MorphTargetName, float Value)"
  },
  {
    "label": "ClearMorphTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMorphTargets()"
  },
  {
    "label": "LockAIResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockAIResources(bool bLockMovement, bool LockAILogic)"
  },
  {
    "label": "UnlockAIResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)"
  },
  {
    "label": "RequestTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestTransitionEvent(const FName EventName, const double RequestTimeout, const ETransitionRequestQueueMode QueueMode, const ETransitionRequestOverwriteMode OverwriteMode)"
  },
  {
    "label": "ClearTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTransitionEvents(const FName EventName)"
  },
  {
    "label": "ClearAllTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllTransitionEvents()"
  },
  {
    "label": "QueryTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryTransitionEvent(int32 MachineIndex, int32 TransitionIndex, FName EventName)"
  },
  {
    "label": "QueryAndMarkTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAndMarkTransitionEvent(int32 MachineIndex, int32 TransitionIndex, FName EventName)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "InitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAnimation(bool bInDeferRootNodeInitialization = false)"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimation(float DeltaSeconds, bool bNeedsValidRootMotion, EUpdateAnimationFlag UpdateFlag = EUpdateAnimationFlag::Default )"
  },
  {
    "label": "ParallelUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelUpdateAnimation()"
  },
  {
    "label": "PostUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateAnimation()"
  },
  {
    "label": "PreEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEvaluateAnimation()"
  },
  {
    "label": "ParallelEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelEvaluateAnimation(bool bForceRefPose, const USkeletalMesh* InSkeletalMesh, FParallelEvaluationData& OutAnimationPoseData)"
  },
  {
    "label": "ParallelEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelEvaluateAnimation(bool bForceRefPose, const USkeletalMesh* InSkeletalMesh, FBlendedHeapCurve& OutCurve, FCompactPose& OutPose)"
  },
  {
    "label": "PostEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluateAnimation()"
  },
  {
    "label": "UninitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeAnimation()"
  },
  {
    "label": "NativeInitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeInitializeAnimation()"
  },
  {
    "label": "NativeUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUpdateAnimation(float DeltaSeconds)"
  },
  {
    "label": "NativeThreadSafeUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeThreadSafeUpdateAnimation(float DeltaSeconds)"
  },
  {
    "label": "NativePostEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativePostEvaluateAnimation()"
  },
  {
    "label": "NativeUninitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUninitializeAnimation()"
  },
  {
    "label": "NativeBeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeBeginPlay()"
  },
  {
    "label": "AddNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, const FCanTakeTransition& NativeTransitionDelegate, const FName& TransitionName = NAME_None)"
  },
  {
    "label": "HasNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateEntryBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeEnteredDelegate)"
  },
  {
    "label": "HasNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateEntryBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateExitBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeExitedDelegate)"
  },
  {
    "label": "HasNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateExitBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "DisplayDebugInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebugInstance(FDisplayDebugManager& DisplayDebugManager, float& Indent)"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics(ETeleportType InTeleportType)"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics()"
  },
  {
    "label": "ResetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAnimationCurves()"
  },
  {
    "label": "UpdateCurvesToEvaluationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesToEvaluationContext(const FAnimationEvaluationContext& InOutContext)"
  },
  {
    "label": "UpdateCurvesPostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesPostEvaluation()"
  },
  {
    "label": "SwapCurveWithEvaluationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapCurveWithEvaluationContext(FAnimationEvaluationContext& InOutContext)"
  },
  {
    "label": "UpdateCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurves(const FBlendedHeapCurve& InCurves)"
  },
  {
    "label": "CopyCurveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurveValues(const UAnimInstance& InSourceInstance)"
  },
  {
    "label": "RefreshCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCurves(USkeletalMeshComponent* Component)"
  },
  {
    "label": "RecalcRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredBones()"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves(const UE::Anim::FCurveFilterSettings& CurveFilterSettings)"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves(const FCurveEvaluationOption& CurveEvalOption)"
  },
  {
    "label": "TriggerAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerAnimNotifies(float DeltaSeconds)"
  },
  {
    "label": "TriggerSingleAnimNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerSingleAnimNotify(const FAnimNotifyEvent* AnimNotifyEvent)"
  },
  {
    "label": "TriggerSingleAnimNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerSingleAnimNotify(FAnimNotifyEventReference& EventReference)"
  },
  {
    "label": "EndNotifyStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNotifyStates()"
  },
  {
    "label": "RecordMachineWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordMachineWeight(const int32 InMachineClassIndex, const float InMachineWeight)"
  },
  {
    "label": "AddCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveValue(const FName& CurveName, float Value, bool bMorphtarget = false, bool bMaterial = false)"
  },
  {
    "label": "RecordStateWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStateWeight(const int32 InMachineClassIndex, const int32 InStateIndex, const float InStateWeight, const float InElapsedTime)"
  },
  {
    "label": "UpdateSnapshotAndSkipRemainingUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSnapshotAndSkipRemainingUpdate()"
  },
  {
    "label": "HandleNotify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNotify(const FAnimNotifyEvent& AnimNotifyEvent)"
  },
  {
    "label": "ConsumeExtractedRootMotion()",
    "kind": "Method",
    "detail": "Function (FRootMotionMovementParams)",
    "insertText": "ConsumeExtractedRootMotion(float Alpha)"
  },
  {
    "label": "QueueRootMotionBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueRootMotionBlend(const FTransform& RootTransform, const FName& SlotName, float Weight)"
  },
  {
    "label": "UpdateMontage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMontage(float DeltaSeconds)"
  },
  {
    "label": "UpdateMontageSyncGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMontageSyncGroup()"
  },
  {
    "label": "UpdateMontageEvaluationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMontageEvaluationData()"
  },
  {
    "label": "PreUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdateAnimation(float DeltaSeconds)"
  },
  {
    "label": "UpdateCurvesToComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesToComponents(USkeletalMeshComponent* Component)"
  },
  {
    "label": "DestroyAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAnimInstanceProxy(FAnimInstanceProxy* InProxy)"
  },
  {
    "label": "IsSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkeletalMeshComponent(const UObject* Object)"
  },
  {
    "label": "HandleExistingParallelEvaluationTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExistingParallelEvaluationTask(USkeletalMeshComponent* Component)"
  },
  {
    "label": "DispatchQueuedAnimEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchQueuedAnimEvents()"
  },
  {
    "label": "HandleObjectsReinstanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsReinstanced(const TMap<UObject*, UObject*>& OldToNewInstanceMap)"
  }
]