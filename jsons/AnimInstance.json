[
  {
    "label": "FDisplayDebugManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayDebugManager"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "IAnimClassInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimClassInterface"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FAlphaBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlend"
  },
  {
    "label": "FAlphaBlendArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphaBlendArgs"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FAnimMontageInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimMontageInstance"
  },
  {
    "label": "FAnimationEvaluationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationEvaluationContext"
  },
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimNode_LinkedInputPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedInputPose"
  },
  {
    "label": "FBakedAnimationStateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakedAnimationStateMachine"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FCurveEvaluationOption",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEvaluationOption"
  },
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "FBlendedHeapCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedHeapCurve"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "FSmartNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartNameMapping"
  },
  {
    "label": "FAnimNode_LinkedAnimLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimLayer"
  },
  {
    "label": "FNodeDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeDebugData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAnimMontage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimMontage"
  },
  {
    "label": "FHeapAttributeContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapAttributeContainer"
  },
  {
    "label": "FCurveFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveFilterSettings"
  },
  {
    "label": "FParallelEvaluationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParallelEvaluationData"
  },
  {
    "label": "FA2Pose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2Pose"
  },
  {
    "label": "FA2CSPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FA2CSPose"
  },
  {
    "label": "FAnimationRuntime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationRuntime"
  },
  {
    "label": "FQueuedMontageBlendingOutEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedMontageBlendingOutEvent"
  },
  {
    "label": "FQueuedMontageBlendedInEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedMontageBlendedInEvent"
  },
  {
    "label": "FQueuedMontageEndedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedMontageEndedEvent"
  },
  {
    "label": "FNativeTransitionBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNativeTransitionBinding"
  },
  {
    "label": "FNativeStateBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNativeStateBinding"
  },
  {
    "label": "FMontageActiveSlotTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMontageActiveSlotTracker"
  },
  {
    "label": "FQueuedRootMotionBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedRootMotionBlend"
  },
  {
    "label": "FAnimNode_LinkedAnimGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimGraph"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimNotifyQueue . h \" # include \" Animation / AnimSubsystemInstance . h \" # include \" Animation / AnimSync . h \" # include \" Animation / AnimNotifies / AnimNotify . h \" # include \" Animation / AnimInertializationRequest . h \" # include \" AnimInstance . generated . h \" # define ANIMINST_PostCompileValidation WITH_EDITOR struct FDisplayDebugManager ; class FDebugDisplayInfo ; class IAnimClassInterface ; class UAnimInstance ; class UCanvas ; class USkeletalMeshComponent ; class USkeleton ; struct FAlphaBlend ; struct FAlphaBlendArgs ; struct FAnimInstanceProxy ; struct FAnimMontageInstance ; struct FAnimationEvaluationContext ; struct FAnimNode_AssetPlayerBase ; struct FAnimNode_AssetPlayerRelevancyBase ; struct FAnimNode_StateMachine ; struct FAnimNode_LinkedInputPose ; struct FBakedAnimationStateMachine ; struct FCompactPose ; struct FCurveEvaluationOption ; class FCompilerResultsLog ; struct FBlendedHeapCurve ; struct FBoneContainer ; struct FSmartNameMapping ; struct FAnimNode_LinkedAnimLayer ; struct FNodeDebugData ; enum class ETransitionRequestQueueMode : uint8 ; enum class ETransitionRequestOverwriteMode : uint8 ; class UAnimMontage ; typedef TArray<FTransform> FTransformArrayA2 ; namespace UE::Anim { struct FHeapAttributeContainer ; using FSlotInertializationRequest = TPair<float,const UBlendProfile*> ; struct FCurveFilterSettings ; } struct FParallelEvaluationData { FBlendedHeapCurve& OutCurve ; FCompactPose& OutPose ; UE::Anim::FHeapAttributeContainer& OutAttributes ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (MontageLength,Duration,} ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnMontageStarted, UAnimMontage*) DECLARE_DELEGATE_TwoParams(FOnMontageEnded, UAnimMontage*, bool ) DECLARE_DELEGATE_TwoParams(FOnMontageBlendingOutStarted, UAnimMontage*, bool ) DECLARE_DELEGATE_OneParam(FOnMontageBlendedInEnded, UAnimMontage*) DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMontageStartedMCDelegate, UAnimMontage*, Montage)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnMontageEndedMCDelegate, UAnimMontage*, Montage, bool, bInterrupted)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnAllMontageInstancesEndedMCDelegate)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnMontageBlendingOutStartedMCDelegate, UAnimMontage*, Montage, bool, bInterrupted)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMontageBlendedInEndedMCDelegate, UAnimMontage*, Montage)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FCanTakeTransition)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnGraphStateChanged, const struct FAnimNode_StateMachine& , int32 , int32)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAddCustomAnimationCurves, UAnimInstance*) DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FPlayMontageAnimNotifyDelegate, FName, NotifyName, const FBranchingPointNotifyPayload&, BranchingPointPayload)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FA2Pose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FA2Pose()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FA2CSPose()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FA2CSPose() : BoneContainer(NULL)"
  },
  {
    "label": "AllocateLocalPoses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateLocalPoses(const FBoneContainer& InBoneContainer, const FA2Pose & LocalPose)"
  },
  {
    "label": "AllocateLocalPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateLocalPoses(const FBoneContainer& InBoneContainer, const FTransformArrayA2 & LocalBones)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetParentBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParentBoneIndex(const int32 BoneIndex)"
  },
  {
    "label": "GetLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetLocalSpaceTransform(int32 BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransform(int32 BoneIndex)"
  },
  {
    "label": "ConvertToLocalPoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToLocalPoses(FA2Pose & LocalPoses)"
  },
  {
    "label": "CalculateComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CalculateComponentSpaceTransform(int32 Index)"
  },
  {
    "label": "SetComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentSpaceTransform(int32 Index, const FTransform& NewTransform)"
  },
  {
    "label": "ConvertBoneToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertBoneToLocalSpace(int32 BoneIndex)"
  },
  {
    "label": "SetLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSpaceTransform(int32 Index, const FTransform& NewTransform)"
  },
  {
    "label": "FQueuedMontageBlendingOutEvent()",
    "kind": "Method",
    "detail": "Function (class FAnimationRuntime ; } ; struct FQueuedMontageBlendingOutEvent { TObjectPtr<class UAnimMontage> Montage ; bool bInterrupted ; FOnMontageBlendingOutStarted Delegate ;)",
    "insertText": "FQueuedMontageBlendingOutEvent() : bInterrupted(false)"
  },
  {
    "label": "FQueuedMontageBlendingOutEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQueuedMontageBlendingOutEvent(class UAnimMontage* InMontage, bool InbInterrupted, FOnMontageBlendingOutStarted InDelegate) : Montage(InMontage) , bInterrupted(InbInterrupted) , Delegate(InDelegate)"
  },
  {
    "label": "FQueuedMontageBlendedInEvent()",
    "kind": "Method",
    "detail": "Function (} } ; struct FQueuedMontageBlendedInEvent { TObjectPtr<class UAnimMontage> Montage ; FOnMontageBlendedInEnded Delegate ;)",
    "insertText": "FQueuedMontageBlendedInEvent(class UAnimMontage* InMontage, FOnMontageBlendedInEnded InDelegate) : Montage(InMontage) , Delegate(InDelegate)"
  },
  {
    "label": "FQueuedMontageEndedEvent()",
    "kind": "Method",
    "detail": "Function (} } ; struct FQueuedMontageEndedEvent { TObjectPtr<class UAnimMontage> Montage ; int32 MontageInstanceID ; bool bInterrupted ; FOnMontageEnded Delegate ;)",
    "insertText": "FQueuedMontageEndedEvent() : MontageInstanceID(INDEX_NONE) , bInterrupted(false)"
  },
  {
    "label": "FQueuedMontageEndedEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQueuedMontageEndedEvent(class UAnimMontage* InMontage, int32 InInstanceID, bool InbInterrupted, FOnMontageEnded InDelegate) : Montage(InMontage) , MontageInstanceID(InInstanceID) , bInterrupted(InbInterrupted) , Delegate(InDelegate)"
  },
  {
    "label": "FNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNativeTransitionBinding { FName MachineName ; FName PreviousStateName ; FName NextStateName ; FCanTakeTransition NativeTransitionDelegate ; # if WITH_EDITORONLY_DATA FName TransitionName ; # endif)",
    "insertText": "FNativeTransitionBinding(const FName& InMachineName, const FName& InPreviousStateName, const FName& InNextStateName, const FCanTakeTransition& InNativeTransitionDelegate, const FName& InTransitionName = NAME_None) : MachineName(InMachineName) , PreviousStateName(InPreviousStateName) , NextStateName(InNextStateName) , NativeTransitionDelegate(InNativeTransitionDelegate) #if WITH_EDITORONLY_DATA , TransitionName(InTransitionName)"
  },
  {
    "label": "FNativeStateBinding()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNativeStateBinding { FName MachineName ; FName StateName ; FOnGraphStateChanged NativeStateDelegate ; # if WITH_EDITORONLY_DATA FName BindingName ; # endif)",
    "insertText": "FNativeStateBinding(const FName& InMachineName, const FName& InStateName, const FOnGraphStateChanged& InNativeStateDelegate, const FName& InBindingName = NAME_None) : MachineName(InMachineName) , StateName(InStateName) , NativeStateDelegate(InNativeStateDelegate) #if WITH_EDITORONLY_DATA , BindingName(InBindingName)"
  },
  {
    "label": "FMontageActiveSlotTracker()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMontageActiveSlotTracker { float MontageLocalWeight ; float NodeGlobalWeight ; bool bIsRelevantThisTick ; bool bWasRelevantOnPreviousTick ;)",
    "insertText": "FMontageActiveSlotTracker() : MontageLocalWeight(0.f) , NodeGlobalWeight(0.f) , bIsRelevantThisTick(false) , bWasRelevantOnPreviousTick(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(transient, Blueprintable, hideCategories=AnimInstance, BlueprintType, Within=SkeletalMeshComponent, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "UAnimInstance()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UAnimInstance()"
  },
  {
    "label": "MakeMontageTickRecord()",
    "kind": "Method",
    "detail": "Function (uint8 bUninitialized : 1 ; # if DO_CHECK uint8 bInitializing : 1 ; bool bPostUpdatingAnimation ; bool bUpdatingAnimation ; # endif public : void)",
    "insertText": "MakeMontageTickRecord(FAnimTickRecord& TickRecord, class UAnimMontage* Montage, float MoveDelta, float Weight, TArray<FPassedMarker>& MarkersPassedThisTick, FMarkerTickRecord& MarkerTickRecord)"
  },
  {
    "label": "GetSlotNodeGlobalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSlotNodeGlobalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "ShouldExtractRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExtractRootMotion()"
  },
  {
    "label": "GetSlotMontageLocalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSlotMontageLocalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "CalcSlotMontageLocalWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcSlotMontageLocalWeight(const FName& SlotNodeName)"
  },
  {
    "label": "AddPoseSnapshot()",
    "kind": "Method",
    "detail": "Function (FPoseSnapshot&)",
    "insertText": "AddPoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "GetPoseSnapshot()",
    "kind": "Method",
    "detail": "Function (const FPoseSnapshot*)",
    "insertText": "GetPoseSnapshot(FName SnapshotName)"
  },
  {
    "label": "GetSyncGroupMapRead()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FAnimGroupInstance>&)",
    "insertText": "GetSyncGroupMapRead()"
  },
  {
    "label": "GetUngroupedActivePlayersRead()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnimTickRecord>&)",
    "insertText": "GetUngroupedActivePlayersRead()"
  },
  {
    "label": "GetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,float>&)",
    "insertText": "GetAnimationCurves(EAnimCurveType InCurveType)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "CanRunParallelWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRunParallelWork()"
  },
  {
    "label": "NeedsUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsUpdate()"
  },
  {
    "label": "NeedsImmediateUpdate()",
    "kind": "Method",
    "detail": "Function (bUseMainInstanceMontageEvaluationData = bSet ; } private : bool)",
    "insertText": "NeedsImmediateUpdate(float DeltaSeconds, bool bNeedsValidRootMotion)"
  },
  {
    "label": "CanTransitionSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTransitionSignature()"
  },
  {
    "label": "IsPlayingSlotAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingSlotAnimation(const UAnimSequenceBase* Asset, FName SlotNodeName, UAnimMontage*& OutMontage)"
  },
  {
    "label": "Montage_SetEndDelegate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Montage_SetEndDelegate(FOnMontageEnded & InOnMontageEnded, UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_GetEndedDelegate()",
    "kind": "Method",
    "detail": "Function (FOnMontageEnded*)",
    "insertText": "Montage_GetEndedDelegate(UAnimMontage* Montage = nullptr)"
  },
  {
    "label": "Montage_SetBlendingOutDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetBlendingOutDelegate(FOnMontageBlendingOutStarted& InOnMontageBlendingOut, UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_SetBlendedInDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_SetBlendedInDelegate(FOnMontageBlendedInEnded& InOnMontageBlendingIn, UAnimMontage* Montage = nullptr)"
  },
  {
    "label": "Montage_GetBlendingOutDelegate()",
    "kind": "Method",
    "detail": "Function (FOnMontageBlendingOutStarted*)",
    "insertText": "Montage_GetBlendingOutDelegate(UAnimMontage* Montage = NULL)"
  },
  {
    "label": "Montage_GetNextSectionID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Montage_GetNextSectionID(const UAnimMontage* Montage, int32 const & CurrentSectionID)"
  },
  {
    "label": "GetActiveMontageInstance()",
    "kind": "Method",
    "detail": "Function (FAnimMontageInstance*)",
    "insertText": "GetActiveMontageInstance()"
  },
  {
    "label": "GetActiveInstanceForMontage()",
    "kind": "Method",
    "detail": "Function (FAnimMontageInstance*)",
    "insertText": "GetActiveInstanceForMontage(const UAnimMontage* Montage)"
  },
  {
    "label": "GetInstanceForMontage()",
    "kind": "Method",
    "detail": "Function (FAnimMontageInstance*)",
    "insertText": "GetInstanceForMontage(const UAnimMontage* Montage)"
  },
  {
    "label": "GetMontageInstanceForID()",
    "kind": "Method",
    "detail": "Function (FAnimMontageInstance*)",
    "insertText": "GetMontageInstanceForID(int32 MontageInstanceID)"
  },
  {
    "label": "StopAllMontages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllMontages(float BlendOut)"
  },
  {
    "label": "OnMontageInstanceStopped()",
    "kind": "Method",
    "detail": "Function (TArray<struct FAnimMontageInstance*> MontageInstances ; void)",
    "insertText": "OnMontageInstanceStopped(FAnimMontageInstance & StoppedMontageInstance)"
  },
  {
    "label": "ClearMontageInstanceReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMontageInstanceReferences(FAnimMontageInstance& InMontageInstance)"
  },
  {
    "label": "GetLinkedInputPoseNode()",
    "kind": "Method",
    "detail": "Function (} FAnimNode_LinkedInputPose*)",
    "insertText": "GetLinkedInputPoseNode(FName InSubInput = NAME_None, FName InGraph = NAME_None)"
  },
  {
    "label": "LinkAnimGraphByTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAnimGraphByTag(InTag, InClass)"
  },
  {
    "label": "LinkAnimClassLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAnimClassLayers(InClass)"
  },
  {
    "label": "UnlinkAnimClassLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkAnimClassLayers(InClass)"
  },
  {
    "label": "InitializeGroupedLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGroupedLayers(bool bInDeferSubGraphInitialization)"
  },
  {
    "label": "AddExternalNotifyHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExternalNotifyHandler(UObject* ExternalHandlerObject, FName NotifyEventName)"
  },
  {
    "label": "RemoveExternalNotifyHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExternalNotifyHandler(UObject* ExternalHandlerObject, FName NotifyEventName)"
  },
  {
    "label": "FindSubsystem()",
    "kind": "Method",
    "detail": "Function (FAnimSubsystemInstance*)",
    "insertText": "FindSubsystem(UScriptStruct* InSubsystemType)"
  },
  {
    "label": "FindSubsystem()",
    "kind": "Method",
    "detail": "Function (template<SubsystemType> SubsystemType*)",
    "insertText": "FindSubsystem()"
  },
  {
    "label": "FindSubsystem()",
    "kind": "Method",
    "detail": "Function (FAnimSubsystemInstance* Subsystem =)",
    "insertText": "FindSubsystem(SubsystemType::StaticStruct())"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<SubsystemType> SubsystemType&)",
    "insertText": "GetSubsystem()"
  },
  {
    "label": "PerformLinkedLayerOverlayOperation()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PerformLinkedLayerOverlayOperation(TSubclassOf<UAnimInstance> InClass, TFunctionRef<UClass*(UClass*, FAnimNode_LinkedAnimLayer*)> InClassSelectorFunction, bool bInDeferSubGraphInitialization = false)"
  },
  {
    "label": "StopAllMontagesByGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllMontagesByGroupName(FName InGroupName, const FMontageBlendSettings& BlendOutSettings)"
  },
  {
    "label": "Montage_UpdateWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_UpdateWeight(float DeltaSeconds)"
  },
  {
    "label": "Montage_Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_Advance(float DeltaSeconds)"
  },
  {
    "label": "Montage_StopInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Montage_StopInternal(TFunctionRef<FMontageBlendSettings(const FAnimMontageInstance*)> AlphaBlendSelectorFunction, const UAnimMontage* Montage = nullptr)"
  },
  {
    "label": "Montage_PlayInternal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Montage_PlayInternal(UAnimMontage* MontageToPlay, const FMontageBlendSettings& BlendInSettings, float InPlayRate = 1.f, EMontagePlayReturnType ReturnValueType = EMontagePlayReturnType::MontageLength, float InTimeToStartMontageAt = 0.f, bool bStopAllMontages = true)"
  },
  {
    "label": "ConditionalFlushCompletedMontages()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ConditionalFlushCompletedMontages()"
  },
  {
    "label": "RequestMontageInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMontageInertialization(const UAnimMontage* Montage, float Duration, const UBlendProfile* BlendProfile = nullptr)"
  },
  {
    "label": "RequestMontageInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMontageInertialization(const UAnimMontage* Montage, const FInertializationRequest& Request)"
  },
  {
    "label": "QueueMontageBlendingOutEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMontageBlendingOutEvent(const FQueuedMontageBlendingOutEvent& MontageBlendingOutEvent)"
  },
  {
    "label": "QueueMontageBlendedInEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMontageBlendedInEvent(const FQueuedMontageBlendedInEvent& MontageBlendedInEvent)"
  },
  {
    "label": "QueueMontageEndedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMontageEndedEvent(const FQueuedMontageEndedEvent& MontageEndedEvent)"
  },
  {
    "label": "TriggerQueuedMontageEvents()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TriggerQueuedMontageEvents()"
  },
  {
    "label": "TriggerMontageBlendingOutEvent()",
    "kind": "Method",
    "detail": "Function (TArray<FQueuedMontageBlendingOutEvent> QueuedMontageBlendingOutEvents ; TArray<FQueuedMontageBlendedInEvent> QueuedMontageBlendedInEvents ; TArray<FQueuedMontageEndedEvent> QueuedMontageEndedEvents ; void)",
    "insertText": "TriggerMontageBlendingOutEvent(const FQueuedMontageBlendingOutEvent& MontageBlendingOutEvent)"
  },
  {
    "label": "TriggerMontageBlendedInEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMontageBlendedInEvent(const FQueuedMontageBlendedInEvent& MontageBlendedInEvent)"
  },
  {
    "label": "TriggerMontageEndedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMontageEndedEvent(const FQueuedMontageEndedEvent& MontageEndedEvent)"
  },
  {
    "label": "IsPostUpdatingAnimation()",
    "kind": "Method",
    "detail": "Function (public : # if DO_CHECK bool)",
    "insertText": "IsPostUpdatingAnimation()"
  },
  {
    "label": "GetStateMachineInstanceFromName()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_StateMachine*)",
    "insertText": "GetStateMachineInstanceFromName(FName MachineName)"
  },
  {
    "label": "GetMachineDescription()",
    "kind": "Method",
    "detail": "Function (const FBakedAnimationStateMachine*)",
    "insertText": "GetMachineDescription(IAnimClassInterface* AnimBlueprintClass, FAnimNode_StateMachine* MachineInstance)"
  },
  {
    "label": "GetStateMachineIndexAndDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStateMachineIndexAndDescription(FName InMachineName, int32& OutMachineIndex, const FBakedAnimationStateMachine** OutMachineDescription)"
  },
  {
    "label": "GetSyncGroupIndexFromName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSyncGroupIndexFromName(FName SyncGroupName)"
  },
  {
    "label": "GetStateMachineIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStateMachineIndex(FName MachineName)"
  },
  {
    "label": "GetStateMachineInstance()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_StateMachine*)",
    "insertText": "GetStateMachineInstance(int32 MachineIndex)"
  },
  {
    "label": "GetInstanceAssetPlayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstanceAssetPlayerIndex(FName MachineName, FName StateName, FName InstanceName = NAME_None)"
  },
  {
    "label": "GetInstanceAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<const FAnimNode_AssetPlayerBase*>)",
    "insertText": "GetInstanceAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetMutableInstanceAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNode_AssetPlayerBase*>)",
    "insertText": "GetMutableInstanceAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetInstanceRelevantAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<const FAnimNode_AssetPlayerRelevancyBase*>)",
    "insertText": "GetInstanceRelevantAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetMutableInstanceRelevantAssetPlayers()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNode_AssetPlayerRelevancyBase*>)",
    "insertText": "GetMutableInstanceRelevantAssetPlayers(const FName& GraphName)"
  },
  {
    "label": "GetStateMachineInstanceDesc()",
    "kind": "Method",
    "detail": "Function (const FBakedAnimationStateMachine*)",
    "insertText": "GetStateMachineInstanceDesc(FName MachineName)"
  },
  {
    "label": "GetCurveValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCurveValue(FName CurveName, float& OutValue)"
  },
  {
    "label": "OverrideCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideCurveValue(FName CurveName, float Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "PCV_ShouldWarnAboutNodesNotUsingFastPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PCV_ShouldWarnAboutNodesNotUsingFastPath()"
  },
  {
    "label": "OnUROSkipTickAnimation()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "OnUROSkipTickAnimation()"
  },
  {
    "label": "OnUROPreInterpolation_AnyThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnUROPreInterpolation_AnyThread(FAnimationEvaluationContext& InOutContext)"
  },
  {
    "label": "InitializeAnimation()",
    "kind": "Method",
    "detail": "Function (} enum class EUpdateAnimationFlag : uint8 { ForceParallelUpdate,Default } ; void)",
    "insertText": "InitializeAnimation(bool bInDeferRootNodeInitialization = false)"
  },
  {
    "label": "PreUpdateLinkedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdateLinkedInstances(float DeltaSeconds)"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateAnimation(float DeltaSeconds, bool bNeedsValidRootMotion, EUpdateAnimationFlag UpdateFlag = EUpdateAnimationFlag::Default)"
  },
  {
    "label": "ParallelUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelUpdateAnimation()"
  },
  {
    "label": "PostUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateAnimation()"
  },
  {
    "label": "PreEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEvaluateAnimation()"
  },
  {
    "label": "ParallelCanEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParallelCanEvaluate(const USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "ParallelEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelEvaluateAnimation(bool bForceRefPose, const USkeletalMesh* InSkeletalMesh, FParallelEvaluationData& OutAnimationPoseData)"
  },
  {
    "label": "PostEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluateAnimation()"
  },
  {
    "label": "UninitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeAnimation()"
  },
  {
    "label": "NativeInitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeInitializeAnimation()"
  },
  {
    "label": "NativeUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUpdateAnimation(float DeltaSeconds)"
  },
  {
    "label": "NativeThreadSafeUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeThreadSafeUpdateAnimation(float DeltaSeconds)"
  },
  {
    "label": "NativePostEvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativePostEvaluateAnimation()"
  },
  {
    "label": "NativeUninitializeAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUninitializeAnimation()"
  },
  {
    "label": "EnableUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableUpdateAnimation(bool bEnable)"
  },
  {
    "label": "IsUpdateAnimationEnabled()",
    "kind": "Method",
    "detail": "Function (bUpdateAnimationEnabled = bEnable ; } bool)",
    "insertText": "IsUpdateAnimationEnabled()"
  },
  {
    "label": "AddNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, const FCanTakeTransition& NativeTransitionDelegate, const FName& TransitionName = NAME_None)"
  },
  {
    "label": "HasNativeTransitionBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeTransitionBinding(const FName& MachineName, const FName& PrevStateName, const FName& NextStateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateEntryBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeEnteredDelegate)"
  },
  {
    "label": "HasNativeStateEntryBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateEntryBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "AddNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeStateExitBinding(const FName& MachineName, const FName& StateName, const FOnGraphStateChanged& NativeExitedDelegate)"
  },
  {
    "label": "HasNativeStateExitBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNativeStateExitBinding(const FName& MachineName, const FName& StateName, FName& OutBindingName)"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "DisplayDebugInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebugInstance(FDisplayDebugManager& DisplayDebugManager, float& Indent)"
  },
  {
    "label": "GetLODLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLODLevel()"
  },
  {
    "label": "GetUpdateCounter()",
    "kind": "Method",
    "detail": "Function (public : const FGraphTraversalCounter&)",
    "insertText": "GetUpdateCounter()"
  },
  {
    "label": "GetRequiredBones()",
    "kind": "Method",
    "detail": "Function (FBoneContainer&)",
    "insertText": "GetRequiredBones()"
  },
  {
    "label": "GetRequiredBonesOnAnyThread()",
    "kind": "Method",
    "detail": "Function (const FBoneContainer&)",
    "insertText": "GetRequiredBonesOnAnyThread()"
  },
  {
    "label": "ResetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetAnimationCurves()"
  },
  {
    "label": "UpdateCurvesToEvaluationContext()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateCurvesToEvaluationContext(const FAnimationEvaluationContext& InOutContext)"
  },
  {
    "label": "UpdateCurvesPostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesPostEvaluation()"
  },
  {
    "label": "SwapCurveWithEvaluationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapCurveWithEvaluationContext(FAnimationEvaluationContext& InOutContext)"
  },
  {
    "label": "UpdateCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurves(const FBlendedHeapCurve& InCurves)"
  },
  {
    "label": "CopyCurveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurveValues(const UAnimInstance& InSourceInstance)"
  },
  {
    "label": "RefreshCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCurves(USkeletalMeshComponent* Component)"
  },
  {
    "label": "HasMorphTargetCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMorphTargetCurves()"
  },
  {
    "label": "HasActiveCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveCurves()"
  },
  {
    "label": "AppendAnimationCurveList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnimationCurveList(EAnimCurveType Type, TMap<FName, float>& InOutCurveList)"
  },
  {
    "label": "GetAnimationCurveList()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,float>&)",
    "insertText": "GetAnimationCurveList(EAnimCurveType Type)"
  },
  {
    "label": "CheckOnInstanceAndMainInstance()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA double LifeTimer ; double CurrentLifeTimerScrubPosition ; # endif public : FGraphTraversalCounter DebugDataCounter ; private : uint32 LastMontageFlushFrame = 0 u ; TMap<FName,FMontageActiveSlotTracker> SlotWeightTracker ; TMap<FName,FSimpleMulticastDelegate> ExternalNotifyHandlers ; bool)",
    "insertText": "CheckOnInstanceAndMainInstance(TFunctionRef<bool (FAnimInstanceProxy* )> ProxyLambdaFunc)"
  },
  {
    "label": "RecalcRequiredBones()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RecalcRequiredBones()"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves(const UE::Anim::FCurveFilterSettings& CurveFilterSettings)"
  },
  {
    "label": "GetSkelMeshComponent()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshComponent*)",
    "insertText": "GetSkelMeshComponent()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "TriggerAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerAnimNotifies(float DeltaSeconds)"
  },
  {
    "label": "TriggerSingleAnimNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerSingleAnimNotify(const FAnimNotifyEvent* AnimNotifyEvent)"
  },
  {
    "label": "TriggerSingleAnimNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerSingleAnimNotify(FAnimNotifyEventReference& EventReference)"
  },
  {
    "label": "EndNotifyStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNotifyStates()"
  },
  {
    "label": "RecordMachineWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordMachineWeight(const int32 InMachineClassIndex, const float InMachineWeight)"
  },
  {
    "label": "AddCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveValue(const FName& CurveName, float Value, bool bMorphtarget = false, bool bMaterial = false)"
  },
  {
    "label": "RecordStateWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStateWeight(const int32 InMachineClassIndex, const int32 InStateIndex, const float InStateWeight, const float InElapsedTime)"
  },
  {
    "label": "UpdateSnapshotAndSkipRemainingUpdate()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITORONLY_DATA bool)",
    "insertText": "UpdateSnapshotAndSkipRemainingUpdate()"
  },
  {
    "label": "HandleNotify()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HandleNotify(const FAnimNotifyEvent& AnimNotifyEvent)"
  },
  {
    "label": "GetRootMotionMontageInstance()",
    "kind": "Method",
    "detail": "Function (public : FAnimMontageInstance*)",
    "insertText": "GetRootMotionMontageInstance()"
  },
  {
    "label": "ConsumeExtractedRootMotion()",
    "kind": "Method",
    "detail": "Function (FRootMotionMovementParams)",
    "insertText": "ConsumeExtractedRootMotion(float Alpha)"
  },
  {
    "label": "QueueRootMotionBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueRootMotionBlend(const FTransform& RootTransform, const FName& SlotName, float Weight)"
  },
  {
    "label": "FQueuedRootMotionBlend()",
    "kind": "Method",
    "detail": "Function (private : struct FAnimMontageInstance* RootMotionMontageInstance ; struct FQueuedRootMotionBlend {)",
    "insertText": "FQueuedRootMotionBlend(const FTransform& InTransform, const FName& InSlotName, float InWeight) : Transform(InTransform) , SlotName(InSlotName) , Weight(InWeight)"
  },
  {
    "label": "UpdateMontage()",
    "kind": "Method",
    "detail": "Function (} FTransform Transform ; FName SlotName ; float Weight ; } ; TArray<FQueuedRootMotionBlend> RootMotionBlendQueue ; FRootMotionMovementParams ExtractedRootMotion ; private : void)",
    "insertText": "UpdateMontage(float DeltaSeconds)"
  },
  {
    "label": "UpdateMontageSyncGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMontageSyncGroup()"
  },
  {
    "label": "UpdateMontageEvaluationData()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateMontageEvaluationData()"
  },
  {
    "label": "PreUpdateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdateAnimation(float DeltaSeconds)"
  },
  {
    "label": "UpdateCurvesToComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurvesToComponents(USkeletalMeshComponent* Component)"
  },
  {
    "label": "CreateAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (FAnimInstanceProxy*)",
    "insertText": "CreateAnimInstanceProxy()"
  },
  {
    "label": "DestroyAnimInstanceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAnimInstanceProxy(FAnimInstanceProxy* InProxy)"
  },
  {
    "label": "GetProxyOnGameThreadStatic()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "GetProxyOnGameThreadStatic(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "GetOuter()",
    "kind": "Method",
    "detail": "Function (UObject* OuterObj = InAnimInstance ->)",
    "insertText": "GetOuter()"
  },
  {
    "label": "HandleExistingParallelEvaluationTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExistingParallelEvaluationTask(InAnimInstance->GetSkelMeshComponent())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InAnimInstance->AnimInstanceProxy == nullptr)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "T(InAnimInstance->AnimInstanceProxy)"
  },
  {
    "label": "GetProxyOnGameThread()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T> T&)",
    "insertText": "GetProxyOnGameThread()"
  },
  {
    "label": "HandleExistingParallelEvaluationTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExistingParallelEvaluationTask(GetSkelMeshComponent())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AnimInstanceProxy == nullptr)"
  },
  {
    "label": "UAnimInstance()",
    "kind": "Method",
    "detail": "Function (AnimInstanceProxy = const_cast<)",
    "insertText": "UAnimInstance(this)->CreateAnimInstanceProxy()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return* static_cast<const)",
    "insertText": "T(AnimInstanceProxy)"
  },
  {
    "label": "GetProxyOnAnyThread()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetProxyOnAnyThread()"
  },
  {
    "label": "ShouldTriggerAnimNotifyState()",
    "kind": "Method",
    "detail": "Function (} struct FAnimNode_LinkedAnimGraph ; struct FAnimNode_LinkedAnimLayer ; struct FAnimInstanceProxy ; public : bool)",
    "insertText": "ShouldTriggerAnimNotifyState(const UAnimNotifyState* AnimNotifyState)"
  },
  {
    "label": "IsSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsSkeletalMeshComponent(const UObject* Object)"
  },
  {
    "label": "HandleExistingParallelEvaluationTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExistingParallelEvaluationTask(USkeletalMeshComponent* Component)"
  },
  {
    "label": "DispatchQueuedAnimEvents()",
    "kind": "Method",
    "detail": "Function (FAnimInstanceProxy* AnimInstanceProxy ; public : FPlayMontageAnimNotifyDelegate OnPlayMontageNotifyBegin ; FPlayMontageAnimNotifyDelegate OnPlayMontageNotifyEnd ; public : void)",
    "insertText": "DispatchQueuedAnimEvents()"
  },
  {
    "label": "HandleObjectsReinstanced()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "HandleObjectsReinstanced(const TMap<UObject*, UObject*>& OldToNewInstanceMap)"
  },
  {
    "label": "IsBeingDebugged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBeingDebugged()"
  }
]