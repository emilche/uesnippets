[
  {
    "label": "FTetrahedralMetrics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTetrahedralMetrics"
  },
  {
    "label": "FTetrahedralMetrics()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" namespace GeometryCollection::Facades { class FTetrahedralMetrics { public : const FName SignedVolumeAttributeName ; const FName AspectRatioAttributeName ;)",
    "insertText": "FTetrahedralMetrics(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "FTetrahedralMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTetrahedralMetrics(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "FTetrahedralMetrics()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTetrahedralMetrics()"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetSignedVolumeRO()",
    "kind": "Method",
    "detail": "Function (const TManagedArrayAccessor<float>&)",
    "insertText": "GetSignedVolumeRO()"
  }
]