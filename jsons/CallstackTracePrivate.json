[
  {
    "label": "FCallstackTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCallstackTracer"
  },
  {
    "label": "FBacktraceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBacktraceEntry"
  },
  {
    "label": "FEncounteredCallstackSetEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncounteredCallstackSetEntry"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ProfilingDebugging / CallstackTrace . h \" # include \" CoreTypes . h \" # include \" Experimental / Containers / GrowOnlyLockFreeHash . h \" # include \" Trace / Trace . h \" # include \" Trace / Trace . inl \" # if UE_CALLSTACK_TRACE_ENABLED # if !)",
    "insertText": "defined(UE_CALLSTACK_TRACE_RESERVE_MB) #if WITH_EDITOR #define UE_CALLSTACK_TRACE_RESERVE_MB 16 #else #define UE_CALLSTACK_TRACE_RESERVE_MB 8 #endif #endif #if !defined(UE_CALLSTACK_TRACE_RESERVE_GROWABLE) #define UE_CALLSTACK_TRACE_RESERVE_GROWABLE 1 #endif UE_TRACE_CHANNEL_EXTERN(CallstackChannel) UE_TRACE_EVENT_BEGIN_EXTERN(Memory, CallstackSpec, NoSync) UE_TRACE_EVENT_FIELD(uint32, CallstackId) UE_TRACE_EVENT_FIELD(uint64[], Frames) UE_TRACE_EVENT_END()"
  },
  {
    "label": "FCallstackTracer()",
    "kind": "Method",
    "detail": "Function (public : struct FBacktraceEntry { uint64 Hash = 0 ; uint32 FrameCount = 0 ; uint64* Frames ; } ;)",
    "insertText": "FCallstackTracer(FMalloc* InMalloc) : KnownSet(InMalloc) , CallstackIdCounter(1)"
  },
  {
    "label": "AddCallstack()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AddCallstack(const FBacktraceEntry& Entry)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (bool bAlreadyAdded = false ; const uint64 Hash =)",
    "insertText": "Max(Entry.Hash, 1ull)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (uint32 Id ; KnownSet .)",
    "insertText": "Find(Hash, &Id, &bAlreadyAdded)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (Id = CallstackIdCounter .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (KnownSet .)",
    "insertText": "Reserve(InitialReserveCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_CALLSTACK_TRACE_RESERVE_GROWABLE)",
    "insertText": "if(Id >= InitialReserveCount)"
  },
  {
    "label": "UE_TRACE_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_TRACE_LOG(Memory, CallstackSpec, CallstackChannel) << CallstackSpec.CallstackId(Id) << CallstackSpec.Frames(Entry.Frames, Entry.FrameCount)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} return Id ; } private : struct FEncounteredCallstackSetEntry { std::atomic_uint64_t Key ; std::atomic_uint32_t Value ; uint64)",
    "insertText": "GetKey()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetValue()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyValue(uint64 InKey, uint32 InValue)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "store(InValue, std::memory_order_release)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Key .)",
    "insertText": "store(InKey, std::memory_order_relaxed)"
  },
  {
    "label": "KeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "KeyHash(uint64 Key)"
  },
  {
    "label": "ClearEntries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearEntries(FEncounteredCallstackSetEntry* Entries, int32 EntryCount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(Entries, 0, EntryCount * sizeof(FEncounteredCallstackSetEntry))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TGrowOnlyLockFreeHash<FEncounteredCallstackSetEntry,uint64,uint32> FEncounteredCallstackSet ; uint32 InitialReserveBytes = UE_CALLSTACK_TRACE_RESERVE_MB* 1 0 2 4* 1 0 2 4 ; uint32 InitialReserveCount = InitialReserveBytes /)",
    "insertText": "sizeof(FEncounteredCallstackSetEntry)"
  }
]