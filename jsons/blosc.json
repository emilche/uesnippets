[
  {
    "label": "BLOSC_MAX_BUFFERSIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef BLOSC_H # define BLOSC_H # include<limits . h> # include<stdlib . h> # include \" blosc - export . h \" # ifdef __cplusplus \" C \" { # endif # define BLOSC_VERSION_MAJOR 1 # define BLOSC_VERSION_MINOR 2 1 # define BLOSC_VERSION_RELEASE 0 # define BLOSC_VERSION_STRING \" 1 . 2 1 . 0 \" # define BLOSC_VERSION_REVISION \" $ Rev $ \" # define BLOSC_VERSION_DATE \" $ Date::2 0 2 0 - 1 2 - 2 2 # $ \" # define BLOSCLZ_VERSION_STRING \" 2 . 3 . 0 \" # define BLOSC_VERSION_FORMAT 2 # define BLOSC_MIN_HEADER_LENGTH 1 6 # define BLOSC_MAX_OVERHEAD BLOSC_MIN_HEADER_LENGTH # define)",
    "insertText": "BLOSC_MAX_BUFFERSIZE(INT_MAX - BLOSC_MAX_OVERHEAD) #define BLOSC_MAX_TYPESIZE 255 #define BLOSC_MAX_BLOCKSIZE \\ ((INT_MAX - BLOSC_MAX_TYPESIZE * sizeof(int32_t)) / 3) #define BLOSC_MAX_THREADS 256 #define BLOSC_NOSHUFFLE 0 #define BLOSC_SHUFFLE 1 #define BLOSC_BITSHUFFLE 2 #define BLOSC_DOSHUFFLE 0x1 #define BLOSC_MEMCPYED 0x2 #define BLOSC_DOBITSHUFFLE 0x4 #define BLOSC_BLOSCLZ 0 #define BLOSC_LZ4 1 #define BLOSC_LZ4HC 2 #define BLOSC_SNAPPY 3 #define BLOSC_ZLIB 4 #define BLOSC_ZSTD 5 #define BLOSC_BLOSCLZ_COMPNAME \"blosclz\" #define BLOSC_LZ4_COMPNAME \"lz4\" #define BLOSC_LZ4HC_COMPNAME \"lz4hc\" #define BLOSC_SNAPPY_COMPNAME \"snappy\" #define BLOSC_ZLIB_COMPNAME \"zlib\" #define BLOSC_ZSTD_COMPNAME \"zstd\" #define BLOSC_BLOSCLZ_LIB 0 #define BLOSC_LZ4_LIB 1 #define BLOSC_SNAPPY_LIB 2 #define BLOSC_ZLIB_LIB 3 #define BLOSC_ZSTD_LIB 4 #define BLOSC_BLOSCLZ_LIBNAME \"BloscLZ\" #define BLOSC_LZ4_LIBNAME \"LZ4\" #define BLOSC_SNAPPY_LIBNAME \"Snappy\" #define BLOSC_ZLIB_LIBNAME \"Zlib\" #define BLOSC_ZSTD_LIBNAME \"Zstd\" #define BLOSC_BLOSCLZ_FORMAT BLOSC_BLOSCLZ_LIB #define BLOSC_LZ4_FORMAT BLOSC_LZ4_LIB #define BLOSC_LZ4HC_FORMAT BLOSC_LZ4_LIB #define BLOSC_SNAPPY_FORMAT BLOSC_SNAPPY_LIB #define BLOSC_ZLIB_FORMAT BLOSC_ZLIB_LIB #define BLOSC_ZSTD_FORMAT BLOSC_ZSTD_LIB #define BLOSC_BLOSCLZ_VERSION_FORMAT 1 #define BLOSC_LZ4_VERSION_FORMAT 1 #define BLOSC_LZ4HC_VERSION_FORMAT 1 #define BLOSC_SNAPPY_VERSION_FORMAT 1 #define BLOSC_ZLIB_VERSION_FORMAT 1 #define BLOSC_ZSTD_VERSION_FORMAT 1 #define BLOSC_ALWAYS_SPLIT 1 #define BLOSC_NEVER_SPLIT 2 #define BLOSC_AUTO_SPLIT 3 #define BLOSC_FORWARD_COMPAT_SPLIT 4 BLOSC_EXPORT void blosc_init(void)"
  },
  {
    "label": "blosc_destroy()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT void)",
    "insertText": "blosc_destroy(void)"
  },
  {
    "label": "blosc_compress()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_compress(int clevel, int doshuffle, size_t typesize, size_t nbytes, const void *src, void *dest, size_t destsize)"
  },
  {
    "label": "blosc_compress_ctx()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_compress_ctx(int clevel, int doshuffle, size_t typesize, size_t nbytes, const void* src, void* dest, size_t destsize, const char* compressor, size_t blocksize, int numinternalthreads)"
  },
  {
    "label": "blosc_decompress()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_decompress(const void *src, void *dest, size_t destsize)"
  },
  {
    "label": "blosc_decompress_ctx()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_decompress_ctx(const void *src, void *dest, size_t destsize, int numinternalthreads)"
  },
  {
    "label": "blosc_getitem()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_getitem(const void *src, int start, int nitems, void *dest)"
  },
  {
    "label": "blosc_get_nthreads()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_get_nthreads(void)"
  },
  {
    "label": "blosc_set_nthreads()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_set_nthreads(int nthreads)"
  },
  {
    "label": "blosc_get_compressor()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT const char*)",
    "insertText": "blosc_get_compressor(void)"
  },
  {
    "label": "blosc_set_compressor()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_set_compressor(const char* compname)"
  },
  {
    "label": "blosc_compcode_to_compname()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_compcode_to_compname(int compcode, const char **compname)"
  },
  {
    "label": "blosc_compname_to_compcode()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_compname_to_compcode(const char *compname)"
  },
  {
    "label": "blosc_list_compressors()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT const char*)",
    "insertText": "blosc_list_compressors(void)"
  },
  {
    "label": "blosc_get_version_string()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT const char*)",
    "insertText": "blosc_get_version_string(void)"
  },
  {
    "label": "blosc_get_complib_info()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_get_complib_info(const char *compname, char **complib, char **version)"
  },
  {
    "label": "blosc_free_resources()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_free_resources(void)"
  },
  {
    "label": "blosc_cbuffer_sizes()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT void)",
    "insertText": "blosc_cbuffer_sizes(const void *cbuffer, size_t *nbytes, size_t *cbytes, size_t *blocksize)"
  },
  {
    "label": "blosc_cbuffer_validate()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_cbuffer_validate(const void* cbuffer, size_t cbytes, size_t* nbytes)"
  },
  {
    "label": "blosc_cbuffer_metainfo()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT void)",
    "insertText": "blosc_cbuffer_metainfo(const void *cbuffer, size_t *typesize, int *flags)"
  },
  {
    "label": "blosc_cbuffer_versions()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT void)",
    "insertText": "blosc_cbuffer_versions(const void *cbuffer, int *version, int *compversion)"
  },
  {
    "label": "blosc_cbuffer_complib()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT const char*)",
    "insertText": "blosc_cbuffer_complib(const void *cbuffer)"
  },
  {
    "label": "blosc_get_blocksize()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT int)",
    "insertText": "blosc_get_blocksize(void)"
  },
  {
    "label": "blosc_set_blocksize()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT void)",
    "insertText": "blosc_set_blocksize(size_t blocksize)"
  },
  {
    "label": "blosc_set_splitmode()",
    "kind": "Method",
    "detail": "Function (BLOSC_EXPORT void)",
    "insertText": "blosc_set_splitmode(int splitmode)"
  }
]