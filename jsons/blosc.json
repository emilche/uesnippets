[
  {
    "label": "blosc_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_init(void)"
  },
  {
    "label": "blosc_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_destroy(void)"
  },
  {
    "label": "blosc_compress()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_compress(int clevel, int doshuffle, size_t typesize,\n\t\t\t\tsize_t nbytes, const void *src, void *dest,\n\t\t\t\tsize_t destsize)"
  },
  {
    "label": "blosc_compress_ctx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_compress_ctx(int clevel, int doshuffle, size_t typesize,\n                                    size_t nbytes, const void* src, void* dest,\n                                    size_t destsize, const char* compressor,\n                                    size_t blocksize, int numinternalthreads)"
  },
  {
    "label": "blosc_decompress()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_decompress(const void *src, void *dest, size_t destsize)"
  },
  {
    "label": "blosc_decompress_ctx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_decompress_ctx(const void *src, void *dest,\n                                      size_t destsize, int numinternalthreads)"
  },
  {
    "label": "blosc_getitem()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_getitem(const void *src, int start, int nitems, void *dest)"
  },
  {
    "label": "blosc_get_nthreads()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_get_nthreads(void)"
  },
  {
    "label": "blosc_set_nthreads()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_set_nthreads(int nthreads)"
  },
  {
    "label": "blosc_set_compressor()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_set_compressor(const char* compname)"
  },
  {
    "label": "blosc_compcode_to_compname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_compcode_to_compname(int compcode, const char **compname)"
  },
  {
    "label": "blosc_compname_to_compcode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_compname_to_compcode(const char *compname)"
  },
  {
    "label": "blosc_get_complib_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_get_complib_info(const char *compname, char **complib, char **version)"
  },
  {
    "label": "blosc_free_resources()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_free_resources(void)"
  },
  {
    "label": "blosc_cbuffer_sizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_cbuffer_sizes(const void *cbuffer, size_t *nbytes,\n\t\t\t\t      size_t *cbytes, size_t *blocksize)"
  },
  {
    "label": "blosc_cbuffer_validate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_cbuffer_validate(const void* cbuffer, size_t cbytes,\n                                         size_t* nbytes)"
  },
  {
    "label": "blosc_cbuffer_metainfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_cbuffer_metainfo(const void *cbuffer, size_t *typesize,\n\t\t\t\t\t                               int *flags)"
  },
  {
    "label": "blosc_cbuffer_versions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_cbuffer_versions(const void *cbuffer, int *version,\n                                         int *compversion)"
  },
  {
    "label": "blosc_get_blocksize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blosc_get_blocksize(void)"
  },
  {
    "label": "blosc_set_blocksize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_set_blocksize(size_t blocksize)"
  },
  {
    "label": "blosc_set_splitmode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blosc_set_splitmode(int splitmode)"
  }
]