[
  {
    "label": "FTimerHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerHandle"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "FTimerHeapOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerHeapOrder"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TimerHandle . generated . h \")",
    "insertText": "DECLARE_DYNAMIC_DELEGATE(FTimerDynamicDelegate)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FTimerHandle()",
    "kind": "Method",
    "detail": "Function (struct FTimerHeapOrder ;)",
    "insertText": "FTimerHandle() : Handle(0)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Handle = 0 ; } bool)",
    "insertText": "operator(const FTimerHandle& Other)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : uint32 IndexBits = 2 4 ; uint32 SerialNumberBits = 4 0 ;)",
    "insertText": "static_assert(IndexBits + SerialNumberBits == 64, \"The space for the timer index and serial number should total 64 bits\")"
  },
  {
    "label": "MaxIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxIndex(int32)"
  },
  {
    "label": "MaxSerialNumber()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "MaxSerialNumber(uint64)"
  },
  {
    "label": "SetIndexAndSerialNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIndexAndSerialNumber(int32 Index, uint64 SerialNumber)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Handle(SerialNumber << IndexBits) | (uint64)(uint32)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FTimerHandle& InHandle)"
  }
]