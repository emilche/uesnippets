[
  {
    "label": "FStorageServerFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerFileHandle"
  },
  {
    "label": "FStorageServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerConnection"
  },
  {
    "label": "IPackageStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageStore"
  },
  {
    "label": "FCookOnTheFlyMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyMessage"
  },
  {
    "label": "ICookOnTheFlyServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyServerConnection"
  },
  {
    "label": "FStorageServerFileSystemTOC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerFileSystemTOC"
  },
  {
    "label": "FDirectory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectory"
  },
  {
    "label": "FFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFile"
  },
  {
    "label": "FStorageServerPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerPlatformFile"
  },
  {
    "label": "STORAGE_SERVER_FILE_UNKOWN_SIZE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" Containers / StringView . h \" # include \" IO / IoDispatcher . h \" # include \" IStorageServerPlatformFile . h \" # if ! UE_BUILD_SHIPPING class FStorageServerFileHandle ; class FStorageServerConnection ; class IPackageStore ; # if WITH_COTF namespace UE::Cook { class FCookOnTheFlyMessage ; class ICookOnTheFlyServerConnection ; } # endif # define)",
    "insertText": "STORAGE_SERVER_FILE_UNKOWN_SIZE(-1)"
  },
  {
    "label": "FStorageServerFileSystemTOC()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FStorageServerFileSystemTOC()"
  },
  {
    "label": "AddFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFile(const FIoChunkId& FileChunkId, FStringView Path, int64 RawSize)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const FString& Path)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const FString& Path)"
  },
  {
    "label": "GetFileChunkId()",
    "kind": "Method",
    "detail": "Function (const FIoChunkId*)",
    "insertText": "GetFileChunkId(const FString& Path)"
  },
  {
    "label": "GetFileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetFileSize(const FString& Path)"
  },
  {
    "label": "GetFileData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileData(const FString& Path, FIoChunkId& OutChunkId, int64& OutRawSize)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const FString& Path, TFunctionRef<bool(const FIoChunkId&, const TCHAR*, int64)> Callback)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const FString& Path, TFunctionRef<bool(const FIoChunkId&, const TCHAR*, int64)> Callback)"
  },
  {
    "label": "AddDirectoriesRecursive()",
    "kind": "Method",
    "detail": "Function (private : struct FDirectory { TArray<FString> Directories ; TArray<int32> Files ; } ; struct FFile { FIoChunkId FileChunkId ; FString FilePath ; int64 RawSize ; } ; FDirectory*)",
    "insertText": "AddDirectoriesRecursive(const FString& DirectoryPath)"
  },
  {
    "label": "FStorageServerPlatformFile()",
    "kind": "Method",
    "detail": "Function (FDirectory Root ; TMap<FString,FDirectory*> Directories ; TMap<FString,int32> FilePathToIndexMap ; TArray<FFile> Files ; FRWLock TocLock ; } ; class FStorageServerPlatformFile : public IStorageServerPlatformFile { public :)",
    "insertText": "FStorageServerPlatformFile()"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "InitializeAfterProjectFilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAfterProjectFilePath()"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (LowerLevel = NewLowerLevel ; } const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "OpenMapped(const TCHAR* Filename)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IPlatformFile::IFileServerMessageHandler* Handler)"
  },
  {
    "label": "GetHostAddr()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetHostAddr()"
  },
  {
    "label": "GetAndResetConnectionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAndResetConnectionStats(FConnectionStats& OutStats)"
  },
  {
    "label": "SetAllowPackageIo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowPackageIo(bool bInAllowPackageIo)"
  },
  {
    "label": "SetAbortOnConnectionFailure()",
    "kind": "Method",
    "detail": "Function (bAllowPackageIo = bInAllowPackageIo ; } void)",
    "insertText": "SetAbortOnConnectionFailure(bool bInAbortOnConnectionFailure)"
  },
  {
    "label": "SetCustomProjectStorePath()",
    "kind": "Method",
    "detail": "Function (bAbortOnConnectionFailure = bInAbortOnConnectionFailure ; } void)",
    "insertText": "SetCustomProjectStorePath(FStringView InProjectStorePath)"
  },
  {
    "label": "InitializeConnection()",
    "kind": "Method",
    "detail": "Function (CustomProjectStorePath = InProjectStorePath ; } private : class FStorageServerFileHandle ; void)",
    "insertText": "InitializeConnection()"
  },
  {
    "label": "IsNonServerFilenameAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonServerFilenameAllowed(FStringView InFilename)"
  },
  {
    "label": "IsAssumedImmutableTimeStampFilename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssumedImmutableTimeStampFilename(FStringView InFilename)"
  },
  {
    "label": "MakeStorageServerPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeStorageServerPath(const TCHAR* LocalFilenameOrDirectory, FStringBuilderBase& OutPath)"
  },
  {
    "label": "MakeLocalPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeLocalPath(const TCHAR* ServerFilenameOrDirectory, FStringBuilderBase& OutPath)"
  },
  {
    "label": "SendGetFileListMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendGetFileListMessage()"
  },
  {
    "label": "SendGetStatDataMessage()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "SendGetStatDataMessage(const FIoChunkId& FileChunkId)"
  },
  {
    "label": "SendReadMessage()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SendReadMessage(uint8* Destination, const FIoChunkId& FileChunkId, int64 Offset, int64 BytesToRead)"
  },
  {
    "label": "OnCookOnTheFlyMessage()",
    "kind": "Method",
    "detail": "Function (# if WITH_COTF void)",
    "insertText": "OnCookOnTheFlyMessage(const UE::Cook::FCookOnTheFlyMessage& Message)"
  },
  {
    "label": "TryFindProjectStoreMarkerFile()",
    "kind": "Method",
    "detail": "Function (# endif TUniquePtr<FArchive>)",
    "insertText": "TryFindProjectStoreMarkerFile(IPlatformFile* Inner)"
  },
  {
    "label": "MakeBaseURI()",
    "kind": "Method",
    "detail": "Function (FAnsiString)",
    "insertText": "MakeBaseURI()"
  },
  {
    "label": "FStringView()",
    "kind": "Method",
    "detail": "Function (FString CustomProjectStorePath ; TSet<FName> ExcludedNonServerExtensions ; TSet<FName> AssumedImmutableTimeStampExtensions ; IPlatformFile* LowerLevel = nullptr ; FStringView ServerEngineDirView =)",
    "insertText": "FStringView(TEXT(\"/{engine}/\"))"
  },
  {
    "label": "FStringView()",
    "kind": "Method",
    "detail": "Function (FStringView ServerProjectDirView =)",
    "insertText": "FStringView(TEXT(\"/{project}/\"))"
  }
]