[
  {
    "label": "FBTBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTBuilder"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "CreateBehaviorTree()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / UnrealType . h \" # include \" BehaviorTree / BehaviorTreeTypes . h \" # include \" BehaviorTree / BlackboardData . h \" # include \" BehaviorTree / BehaviorTree . h \" # include \" BehaviorTree / Blackboard / BlackboardKeyType_Bool . h \" # include \" BehaviorTree / Blackboard / BlackboardKeyType_Int . h \" # include \" BehaviorTree / Composites / BTComposite_Selector . h \" # include \" BehaviorTree / Composites / BTComposite_Sequence . h \" # include \" BehaviorTree / Composites / BTComposite_SimpleParallel . h \" # include \" BehaviorTree / Decorators / BTDecorator_Loop . h \" # include \" BehaviorTree / Tasks / BTTask_RunBehavior . h \" # include \" BehaviorTree / TestBTDecorator_Blackboard . h \" # include \" BehaviorTree / TestBTDecorator_DelayedAbort . h \" # include \" BehaviorTree / TestBTDecorator_Blueprint . h \" # include \" BehaviorTree / TestBTService_Log . h \" # include \" BehaviorTree / TestBTService_BTStopAction . h \" # include \" BehaviorTree / TestBTTask_LatentWithFlags . h \" # include \" BehaviorTree / TestBTTask_Log . h \" # include \" BehaviorTree / TestBTTask_SetFlag . h \" # include \" BehaviorTree / TestBTTask_SetValue . h \" # include \" BehaviorTree / TestBTTask_SetValuesWithLogs . h \" # include \" BehaviorTree / TestBTTask_BTStopAction . h \" # include \" BehaviorTree / TestBTTask_ToggleFlag . h \" struct FBTBuilder { UBehaviorTree&)",
    "insertText": "CreateBehaviorTree()"
  },
  {
    "label": "UBlackboardData()",
    "kind": "Method",
    "detail": "Function (UBlackboardData* BB = NewObject<)",
    "insertText": "UBlackboardData()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FBlackboardEntry KeyData ; KeyData . EntryName =)",
    "insertText": "TEXT(\"Bool1\")"
  },
  {
    "label": "UBlackboardKeyType_Bool()",
    "kind": "Method",
    "detail": "Function (KeyData . KeyType = NewObject<)",
    "insertText": "UBlackboardKeyType_Bool()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BB -> Keys .)",
    "insertText": "Add(KeyData)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (KeyData . EntryName =)",
    "insertText": "TEXT(\"Bool2\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (KeyData . EntryName =)",
    "insertText": "TEXT(\"Bool3\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (KeyData . EntryName =)",
    "insertText": "TEXT(\"Bool4\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (KeyData . EntryName =)",
    "insertText": "TEXT(\"Int\")"
  },
  {
    "label": "UBlackboardKeyType_Int()",
    "kind": "Method",
    "detail": "Function (KeyData . KeyType = NewObject<)",
    "insertText": "UBlackboardKeyType_Int()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (KeyData . EntryName =)",
    "insertText": "TEXT(\"Int2\")"
  },
  {
    "label": "UpdateParentKeys()",
    "kind": "Method",
    "detail": "Function (BB ->)",
    "insertText": "UpdateParentKeys()"
  },
  {
    "label": "UBehaviorTree()",
    "kind": "Method",
    "detail": "Function (UBehaviorTree* TreeOb = NewObject<)",
    "insertText": "UBehaviorTree()"
  },
  {
    "label": "CreateBehaviorTree()",
    "kind": "Method",
    "detail": "Function (TreeOb -> BlackboardAsset = BB ; return* TreeOb ; } UBehaviorTree&)",
    "insertText": "CreateBehaviorTree(UBehaviorTree& ParentTree)"
  },
  {
    "label": "AddSelector()",
    "kind": "Method",
    "detail": "Function (TreeOb -> BlackboardAsset = ParentTree . BlackboardAsset ; return* TreeOb ; } UBTComposite_Selector&)",
    "insertText": "AddSelector(UBehaviorTree& TreeOb)"
  },
  {
    "label": "UBTComposite_Selector()",
    "kind": "Method",
    "detail": "Function (UBTComposite_Selector* NodeOb = NewObject<)",
    "insertText": "UBTComposite_Selector(&TreeOb)"
  },
  {
    "label": "InitializeFromAsset()",
    "kind": "Method",
    "detail": "Function (NodeOb ->)",
    "insertText": "InitializeFromAsset(TreeOb)"
  },
  {
    "label": "AddSelector()",
    "kind": "Method",
    "detail": "Function (TreeOb . RootNode = NodeOb ; return* NodeOb ; } UBTComposite_Selector&)",
    "insertText": "AddSelector(UBTCompositeNode& ParentNode)"
  },
  {
    "label": "UBTComposite_Selector()",
    "kind": "Method",
    "detail": "Function (UBTComposite_Selector* NodeOb = NewObject<)",
    "insertText": "UBTComposite_Selector(ParentNode.GetTreeAsset())"
  },
  {
    "label": "InitializeFromAsset()",
    "kind": "Method",
    "detail": "Function (NodeOb ->)",
    "insertText": "InitializeFromAsset(*ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (const int32 ChildIdx = ParentNode . Children .)",
    "insertText": "AddZeroed(1)"
  },
  {
    "label": "AddSequence()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildComposite = NodeOb ; return* NodeOb ; } UBTComposite_Sequence&)",
    "insertText": "AddSequence(UBehaviorTree& TreeOb)"
  },
  {
    "label": "UBTComposite_Sequence()",
    "kind": "Method",
    "detail": "Function (UBTComposite_Sequence* NodeOb = NewObject<)",
    "insertText": "UBTComposite_Sequence(&TreeOb)"
  },
  {
    "label": "AddSequence()",
    "kind": "Method",
    "detail": "Function (TreeOb . RootNode = NodeOb ; return* NodeOb ; } UBTComposite_Sequence&)",
    "insertText": "AddSequence(UBTCompositeNode& ParentNode)"
  },
  {
    "label": "UBTComposite_Sequence()",
    "kind": "Method",
    "detail": "Function (UBTComposite_Sequence* NodeOb = NewObject<)",
    "insertText": "UBTComposite_Sequence(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddParallel()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildComposite = NodeOb ; return* NodeOb ; } UBTComposite_SimpleParallel&)",
    "insertText": "AddParallel(UBehaviorTree& TreeOb, EBTParallelMode::Type Mode)"
  },
  {
    "label": "UBTComposite_SimpleParallel()",
    "kind": "Method",
    "detail": "Function (UBTComposite_SimpleParallel* NodeOb = NewObject<)",
    "insertText": "UBTComposite_SimpleParallel(&TreeOb)"
  },
  {
    "label": "AddParallel()",
    "kind": "Method",
    "detail": "Function (TreeOb . RootNode = NodeOb ; return* NodeOb ; } UBTComposite_SimpleParallel&)",
    "insertText": "AddParallel(UBTCompositeNode& ParentNode, EBTParallelMode::Type Mode)"
  },
  {
    "label": "UBTComposite_SimpleParallel()",
    "kind": "Method",
    "detail": "Function (UBTComposite_SimpleParallel* NodeOb = NewObject<)",
    "insertText": "UBTComposite_SimpleParallel(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTask()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildComposite = NodeOb ; return* NodeOb ; } template<class T> T&)",
    "insertText": "AddTask(UBTCompositeNode& ParentNode, UClass* TaskClass = T::StaticClass())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* TaskNode = NewObject<)",
    "insertText": "T(ParentNode.GetTreeAsset())"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "UTestBTTask_Log()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_Log* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_Log(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTaskLogFinish()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskLogFinish(UBTCompositeNode& ParentNode, int32 LogIndex, int32 FinishIndex, EBTNodeResult::Type NodeResult, int32 ExecutionTicks = 0)"
  },
  {
    "label": "AddTaskFlagChange()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskFlagChange(UBTCompositeNode& ParentNode, bool bValue, EBTNodeResult::Type NodeResult, FName BoolKeyName = TEXT(\"Bool1\"), FName BoolOnAbortKeyName = FName(), bool bOnAbortValue = false)"
  },
  {
    "label": "UTestBTTask_SetFlag()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_SetFlag* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_SetFlag(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTaskToggleFlag()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskToggleFlag(UBTCompositeNode& ParentNode, EBTNodeResult::Type NodeResult, FName BoolKeyName, int32 NumToggles)"
  },
  {
    "label": "UTestBTTask_ToggleFlag()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_ToggleFlag* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_ToggleFlag(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTaskValueChange()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskValueChange(UBTCompositeNode& ParentNode, int32 Value, EBTNodeResult::Type NodeResult, FName IntKeyName = TEXT(\"Int\"), FName IntOnAbortKeyName = FName(), int32 OnAbortValue = 0)"
  },
  {
    "label": "UTestBTTask_SetValue()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_SetValue* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_SetValue(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTaskValuesChangedWithLogs()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskValuesChangedWithLogs(UBTCompositeNode& ParentNode, int32 LogIndex, EBTNodeResult::Type NodeResult, int32 Value1, int32 Value2, FName IntKeyName1 = TEXT(\"Int\"), FName IntKeyName2 = TEXT(\"Int2\"), int32 ExecutionTicks1 = 0, int32 ExecutionTicks2 = 0, int32 LogTickIndex = -1, int32 LogFinished = -1, FName IntOnAbortKeyName = FName(), int32 OnAbortValue = 0)"
  },
  {
    "label": "UTestBTTask_SetValuesWithLogs()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_SetValuesWithLogs* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_SetValuesWithLogs(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTaskSubtree()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskSubtree(UBTCompositeNode& ParentNode, UBehaviorTree* TreeAsset)"
  },
  {
    "label": "UBTTask_RunBehavior()",
    "kind": "Method",
    "detail": "Function (UBTTask_RunBehavior* TaskNode = NewObject<)",
    "insertText": "UBTTask_RunBehavior(ParentNode.GetTreeAsset())"
  },
  {
    "label": "FObjectProperty()",
    "kind": "Method",
    "detail": "Function (FObjectProperty* SubtreeProp = FindFProperty<)",
    "insertText": "FObjectProperty(UBTTask_RunBehavior::StaticClass(), TEXT(\"BehaviorAsset\"))"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* SubtreePropData = SubtreeProp -> ContainerPtrToValuePtr<)",
    "insertText": "uint8(TaskNode)"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (SubtreeProp ->)",
    "insertText": "SetObjectPropertyValue(SubtreePropData, TreeAsset)"
  },
  {
    "label": "AddTaskLatentFlags()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskLatentFlags(UBTCompositeNode& ParentNode, EBTNodeResult::Type NodeResult, int32 ExecuteHalfTicks, FName ExecuteKeyName, int32 ExecuteLogStart, int32 ExecuteLogFinish, int32 AbortHalfTicks = 0, FName AbortKeyName = NAME_None, int32 AbortLogStart = 0, int32 AbortLogFinish = 0, EBTTestChangeFlagBehavior ChangeFlagBehavior = EBTTestChangeFlagBehavior::Set)"
  },
  {
    "label": "UTestBTTask_LatentWithFlags()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_LatentWithFlags* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_LatentWithFlags(ParentNode.GetTreeAsset())"
  },
  {
    "label": "AddTaskBTStopAction()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } void)",
    "insertText": "AddTaskBTStopAction(UBTCompositeNode& ParentNode, int32 LogIndex, EBTNodeResult::Type NodeResult, EBTTestTaskStopTiming StopTiming, EBTTestStopAction StopAction)"
  },
  {
    "label": "UTestBTTask_BTStopAction()",
    "kind": "Method",
    "detail": "Function (UTestBTTask_BTStopAction* TaskNode = NewObject<)",
    "insertText": "UTestBTTask_BTStopAction(ParentNode.GetTreeAsset())"
  },
  {
    "label": "WithDecorator()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children [ ChildIdx ] . ChildTask = TaskNode ; } template<class T> T&)",
    "insertText": "WithDecorator(UBTCompositeNode& ParentNode, UClass* DecoratorClass = T::StaticClass())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (ParentNode . Children .)",
    "insertText": "Last().Decorators.Add(DecoratorOb)"
  },
  {
    "label": "UTestBTDecorator_Blackboard()",
    "kind": "Method",
    "detail": "Function (UTestBTDecorator_Blackboard& BBDecorator = WithDecorator<)",
    "insertText": "UTestBTDecorator_Blackboard(ParentNode)"
  },
  {
    "label": "FByteProperty()",
    "kind": "Method",
    "detail": "Function (BBDecorator . LogIndexBecomeRelevant = LogIndexBecomeRelevant ; BBDecorator . LogIndexCeaseRelevant = LogIndexCeaseRelevant ; BBDecorator . LogIndexCalculate = LogIndexCalculate ; FByteProperty* ConditionProp = FindFProperty<)",
    "insertText": "FByteProperty(UBTDecorator_Blackboard::StaticClass(), TEXT(\"OperationType\"))"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* ConditionPropData = ConditionProp -> ContainerPtrToValuePtr<)",
    "insertText": "uint8(&BBDecorator)"
  },
  {
    "label": "SetIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (ConditionProp ->)",
    "insertText": "SetIntPropertyValue(ConditionPropData, (uint64)Condition)"
  },
  {
    "label": "FByteProperty()",
    "kind": "Method",
    "detail": "Function (FByteProperty* ObserverProp = FindFProperty<)",
    "insertText": "FByteProperty(UBTDecorator_Blackboard::StaticClass(), TEXT(\"FlowAbortMode\"))"
  },
  {
    "label": "SetIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (ObserverProp ->)",
    "insertText": "SetIntPropertyValue(ObserverPropData, (uint64)Observer)"
  },
  {
    "label": "FStructProperty()",
    "kind": "Method",
    "detail": "Function (FStructProperty* KeyProp = FindFProperty<)",
    "insertText": "FStructProperty(UBTDecorator_Blackboard::StaticClass(), TEXT(\"BlackboardKey\"))"
  },
  {
    "label": "FBlackboardKeySelector()",
    "kind": "Method",
    "detail": "Function (FBlackboardKeySelector* KeyPropData = KeyProp -> ContainerPtrToValuePtr<)",
    "insertText": "FBlackboardKeySelector(&BBDecorator)"
  },
  {
    "label": "WithDecoratorBlackboard()",
    "kind": "Method",
    "detail": "Function (KeyPropData -> SelectedKeyName = BoolKeyName ; } void)",
    "insertText": "WithDecoratorBlackboard(UBTCompositeNode& ParentNode, EArithmeticKeyOperation::Type Condition, int32 Value, EBTFlowAbortMode::Type Observer, EBTBlackboardRestart::Type NotifyMode, FName IntKeyName = TEXT(\"Int\"), int32 LogIndexBecomeRelevant = -1, int32 LogIndexCeaseRelevant = -1, int32 LogIndexCalculate = -1)"
  },
  {
    "label": "FByteProperty()",
    "kind": "Method",
    "detail": "Function (FByteProperty* NotifyModeProp = FindFProperty<)",
    "insertText": "FByteProperty(UBTDecorator_Blackboard::StaticClass(), TEXT(\"NotifyObserver\"))"
  },
  {
    "label": "SetIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (NotifyModeProp ->)",
    "insertText": "SetIntPropertyValue(NotifyModePropData, (uint64)NotifyMode)"
  },
  {
    "label": "FIntProperty()",
    "kind": "Method",
    "detail": "Function (FIntProperty* ConditionValueProp = FindFProperty<)",
    "insertText": "FIntProperty(UBTDecorator_Blackboard::StaticClass(), TEXT(\"IntValue\"))"
  },
  {
    "label": "SetIntPropertyValue()",
    "kind": "Method",
    "detail": "Function (ConditionValueProp ->)",
    "insertText": "SetIntPropertyValue(ConditionValuePropData, (uint64)Value)"
  },
  {
    "label": "WithDecoratorDelayedAbort()",
    "kind": "Method",
    "detail": "Function (KeyPropData -> SelectedKeyName = IntKeyName ; } void)",
    "insertText": "WithDecoratorDelayedAbort(UBTCompositeNode& ParentNode, int32 NumTicks, bool bAbortOnlyOnce = true)"
  },
  {
    "label": "UTestBTDecorator_DelayedAbort()",
    "kind": "Method",
    "detail": "Function (UTestBTDecorator_DelayedAbort& AbortDecorator = WithDecorator<)",
    "insertText": "UTestBTDecorator_DelayedAbort(ParentNode)"
  },
  {
    "label": "WithDecoratorBlueprint()",
    "kind": "Method",
    "detail": "Function (AbortDecorator . DelayTicks = NumTicks ; AbortDecorator . bOnlyOnce = bAbortOnlyOnce ; } void)",
    "insertText": "WithDecoratorBlueprint(UBTCompositeNode& ParentNode, EBTFlowAbortMode::Type Observer, EBPConditionType BPConditionType = EBPConditionType::TrueCondition, int32 LogIndexBecomeRelevant = -1, int32 LogIndexCeaseRelevant = -1, int32 LogIndexCalculate = -1, FName ObservingKeyName = NAME_None)"
  },
  {
    "label": "UTestBTDecorator_Blueprint()",
    "kind": "Method",
    "detail": "Function (UTestBTDecorator_Blueprint& BPDecorator = WithDecorator<)",
    "insertText": "UTestBTDecorator_Blueprint(ParentNode)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* ObserverPropData = ObserverProp -> ContainerPtrToValuePtr<)",
    "insertText": "uint8(&BPDecorator)"
  },
  {
    "label": "WithDecoratorLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WithDecoratorLoop(UBTCompositeNode& ParentNode, int32 NumLoops = 2)"
  },
  {
    "label": "UBTDecorator_Loop()",
    "kind": "Method",
    "detail": "Function (UBTDecorator_Loop& LoopDecorator = WithDecorator<)",
    "insertText": "UBTDecorator_Loop(ParentNode)"
  },
  {
    "label": "WithService()",
    "kind": "Method",
    "detail": "Function (LoopDecorator . NumLoops = NumLoops ; } template<class T> T&)",
    "insertText": "WithService(UBTCompositeNode& ParentNode, UClass* ServiceClass = T::StaticClass())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParentNode . Services .)",
    "insertText": "Add(ServiceOb)"
  },
  {
    "label": "UTestBTService_Log()",
    "kind": "Method",
    "detail": "Function (UTestBTService_Log& LogService = WithService<)",
    "insertText": "UTestBTService_Log(ParentNode)"
  },
  {
    "label": "SetFlagOnTick()",
    "kind": "Method",
    "detail": "Function (LogService . LogActivation = ActivationIndex ; LogService . LogDeactivation = DeactivationIndex ; LogService . LogTick = TickIndex ; LogService .)",
    "insertText": "SetFlagOnTick(TickBoolKeyName, bCallTickOnSearchStart)"
  },
  {
    "label": "WithServiceBTStopAction()",
    "kind": "Method",
    "detail": "Function (LogService . KeyNameBecomeRelevant = BecomeRelevantBoolKeyName ; LogService . KeyNameCeaseRelevant = CeaseRelevantBoolKeyName ; LogService . bToggleValue = bToggleValue ; LogService . TicksDelaySetKeyNameTick = TicksDelaySetKeyNameTick ; } void)",
    "insertText": "WithServiceBTStopAction(UBTCompositeNode& ParentNode, int32 LogIndex, EBTTestServiceStopTiming StopTiming, EBTTestStopAction StopAction)"
  },
  {
    "label": "UTestBTService_BTStopAction()",
    "kind": "Method",
    "detail": "Function (UTestBTService_BTStopAction& Service = WithService<)",
    "insertText": "UTestBTService_BTStopAction(ParentNode)"
  },
  {
    "label": "WithTaskService()",
    "kind": "Method",
    "detail": "Function (Service . LogIndex = LogIndex ; Service . StopTiming = StopTiming ; Service . StopAction = StopAction ; } template<class T> T&)",
    "insertText": "WithTaskService(UBTCompositeNode& ParentNode, UClass* ServiceClass = T::StaticClass())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (UBTTaskNode* TaskNode = ParentNode . Children .)",
    "insertText": "Last()"
  },
  {
    "label": "WithTaskServiceBTStopAction()",
    "kind": "Method",
    "detail": "Function (LogService . KeyNameBecomeRelevant = BecomeRelevantBoolKeyName ; LogService . KeyNameCeaseRelevant = CeaseRelevantBoolKeyName ; LogService . bToggleValue = bToggleValue ; } void)",
    "insertText": "WithTaskServiceBTStopAction(UBTCompositeNode& ParentNode, int32 LogIndex, EBTTestServiceStopTiming StopTiming, EBTTestStopAction StopAction)"
  }
]