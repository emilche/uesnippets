[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ICollisionAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICollisionAnalyzer"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "ICollisionAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" class SWidget ; struct FCollisionObjectQueryParams ; struct FCollisionResponseParams ; struct FHitResult ; namespace ECAQueryType { enum Type { Raycast,GeomSweep,GeomOverlap } ; } namespace ECAQueryShape { enum Type { Sphere,Box,Capsule,Convex } ; } namespace ECAQueryMode { enum Type { Test,Single,Multi } ; } class ICollisionAnalyzer { public : ~)",
    "insertText": "ICollisionAnalyzer()"
  },
  {
    "label": "CaptureQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CaptureQuery(const FVector& Start, const FVector& End, const FQuat& Rot, ECAQueryType::Type QueryType, ECAQueryShape::Type QueryShape, ECAQueryMode::Type QueryMode, const FVector& Dims, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const FCollisionResponseParams& ResponseParams, const FCollisionObjectQueryParams& ObjectParams, const TArray<FHitResult>& Results, const TArray<FHitResult>& TouchAllResults, double CPUTime)"
  },
  {
    "label": "SummonUI()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "SummonUI()"
  },
  {
    "label": "TickAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAnalyzer(UWorld* InWorld)"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  }
]