[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "IDetailCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCustomization"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SScreenPositionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScreenPositionCustomization"
  },
  {
    "label": "SScreenResolutionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScreenResolutionCustomization"
  },
  {
    "label": "FLevelEditorPlaySettingsCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorPlaySettingsCustomization"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IDetailCustomization . h \" # include \" Settings / LevelEditorPlaySettings . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FMenuBuilder ; struct FSlateBrush ; class IDetailCustomization ; class IDetailLayoutBuilder ; class IPropertyHandle ; template<OptionType = TSharedPtr<FString>> class SComboBox ; class SWidget ; class SScreenPositionCustomization : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SScreenPositionCustomization)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, IDetailLayoutBuilder* LayoutBuilder, const TSharedRef<IPropertyHandle>& InWindowPositionProperty, const TSharedRef<IPropertyHandle>& InCenterWindowProperty)"
  },
  {
    "label": "HandleNewWindowPositionPropertyIsEnabled()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HandleNewWindowPositionPropertyIsEnabled()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<IPropertyHandle> CenterWindowProperty ; } ; class SScreenResolutionCustomization : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SScreenResolutionCustomization)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, IDetailLayoutBuilder* LayoutBuilder, const TSharedRef<IPropertyHandle>& InWindowHeightProperty, const TSharedRef<IPropertyHandle>& InWindowWidthProperty)"
  },
  {
    "label": "ResetCustomTitleSafeZoneSettings()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ResetCustomTitleSafeZoneSettings(ULevelEditorPlaySettings* PlayInSettings, const int32 Width, const int32 Height)"
  },
  {
    "label": "BroadcastSafeZoneChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastSafeZoneChanged(const FMargin& SafeZoneRatio, const int32 Width, const int32 Height)"
  },
  {
    "label": "HandleSwapAspectRatioClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleSwapAspectRatioClicked()"
  },
  {
    "label": "HandleCommonResolutionSelected()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleCommonResolutionSelected(const FPlayScreenResolution Resolution)"
  },
  {
    "label": "GetAspectRatioSwitchImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAspectRatioSwitchImage()"
  },
  {
    "label": "OnSizeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSizeChanged()"
  },
  {
    "label": "GetResolutionMenuAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "GetResolutionMenuAction(const FPlayScreenResolution& ScreenResolution)"
  },
  {
    "label": "GetResolutionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetResolutionsMenu()"
  },
  {
    "label": "FLevelEditorPlaySettingsCustomization()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<IPropertyHandle> WindowHeightProperty ; TSharedPtr<IPropertyHandle> WindowWidthProperty ; bool bSetFromMenu ; } ; class FLevelEditorPlaySettingsCustomization : public IDetailCustomization { public : ~)",
    "insertText": "FLevelEditorPlaySettingsCustomization()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& LayoutBuilder)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "HandleMultiplayerOptionsDescription()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "HandleMultiplayerOptionsDescription()"
  },
  {
    "label": "HandleClientWindowSizePropertyIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClientWindowSizePropertyIsEnabled()"
  },
  {
    "label": "HandleGameOptionsIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGameOptionsIsEnabled()"
  },
  {
    "label": "HandleRerouteInputToSecondWindowEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRerouteInputToSecondWindowEnabled()"
  },
  {
    "label": "HandleRerouteInputToSecondWindowVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleRerouteInputToSecondWindowVisibility()"
  },
  {
    "label": "HandleQualityLevelComboBoxOpening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleQualityLevelComboBoxOpening()"
  },
  {
    "label": "HandleQualityLevelComboBoxGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleQualityLevelComboBoxGenerateWidget(TSharedPtr<FString> InItem)"
  },
  {
    "label": "HandleQualityLevelSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleQualityLevelSelectionChanged(TSharedPtr<FString> InSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetSelectedQualityLevelName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedQualityLevelName()"
  },
  {
    "label": "GetPreviewText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPreviewText()"
  },
  {
    "label": "GetPreviewTextToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPreviewTextToolTipText()"
  }
]