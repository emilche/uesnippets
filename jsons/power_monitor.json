[
  {
    "label": "PowerMonitorSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PowerMonitorSource"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POWER_MONITOR_POWER_MONITOR_H_ # define BASE_POWER_MONITOR_POWER_MONITOR_H_ # include<memory> # include \" base / base_export . h \" # include \" base / no_destructor . h \" # include \" base / observer_list_threadsafe . h \" # include \" base / power_monitor / power_observer . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" namespace base { class PowerMonitorSource ; class BASE_EXPORT PowerMonitor { public : void)",
    "insertText": "Initialize(std::unique_ptr<PowerMonitorSource> source)"
  },
  {
    "label": "PowerMonitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PowerMonitor(const PowerMonitor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PowerMonitor&)",
    "insertText": "operator(const PowerMonitor&)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "AddPowerSuspendObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPowerSuspendObserver(PowerSuspendObserver* observer)"
  },
  {
    "label": "RemovePowerSuspendObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePowerSuspendObserver(PowerSuspendObserver* observer)"
  },
  {
    "label": "AddPowerStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPowerStateObserver(PowerStateObserver* observer)"
  },
  {
    "label": "RemovePowerStateObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePowerStateObserver(PowerStateObserver* observer)"
  },
  {
    "label": "AddPowerThermalObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPowerThermalObserver(PowerThermalObserver* observer)"
  },
  {
    "label": "RemovePowerThermalObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePowerThermalObserver(PowerThermalObserver* observer)"
  },
  {
    "label": "AddPowerSuspendObserverAndReturnSuspendedState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPowerSuspendObserverAndReturnSuspendedState(PowerSuspendObserver* observer)"
  },
  {
    "label": "AddPowerStateObserverAndReturnOnBatteryState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPowerStateObserverAndReturnOnBatteryState(PowerStateObserver* observer)"
  },
  {
    "label": "AddPowerStateObserverAndReturnPowerThermalState()",
    "kind": "Method",
    "detail": "Function (PowerThermalObserver::DeviceThermalState)",
    "insertText": "AddPowerStateObserverAndReturnPowerThermalState(PowerThermalObserver* observer)"
  },
  {
    "label": "IsOnBatteryPower()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnBatteryPower()"
  },
  {
    "label": "GetLastSystemResumeTime()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "GetLastSystemResumeTime()"
  },
  {
    "label": "GetCurrentThermalState()",
    "kind": "Method",
    "detail": "Function (PowerThermalObserver::DeviceThermalState)",
    "insertText": "GetCurrentThermalState()"
  },
  {
    "label": "SetCurrentThermalState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThermalState(PowerThermalObserver::DeviceThermalState state)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_ANDROID) static int GetRemainingBatteryCapacity()"
  },
  {
    "label": "ShutdownForTesting()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ShutdownForTesting()"
  },
  {
    "label": "PowerMonitor()",
    "kind": "Method",
    "detail": "Function (private : class PowerMonitorSource ; class base::NoDestructor<PowerMonitor> ;)",
    "insertText": "PowerMonitor()"
  },
  {
    "label": "Source()",
    "kind": "Method",
    "detail": "Function (PowerMonitorSource*)",
    "insertText": "Source()"
  },
  {
    "label": "NotifyPowerStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPowerStateChange(bool on_battery_power)"
  },
  {
    "label": "NotifySuspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySuspend()"
  },
  {
    "label": "NotifyResume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyResume()"
  },
  {
    "label": "NotifyThermalStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyThermalStateChange(PowerThermalObserver::DeviceThermalState new_state)"
  },
  {
    "label": "NotifySpeedLimitChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySpeedLimitChange(int speed_limit)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (PowerMonitor*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool is_system_suspended_)",
    "insertText": "GUARDED_BY(is_system_suspended_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool on_battery_power_)",
    "insertText": "GUARDED_BY(on_battery_power_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock on_battery_power_lock_ ; PowerThermalObserver::DeviceThermalState power_thermal_state_)",
    "insertText": "GUARDED_BY(power_thermal_state_lock_)"
  }
]