[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FTimingEventsTrackDrawState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingEventsTrackDrawState"
  },
  {
    "label": "FFilteredDrawStateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilteredDrawStateInfo"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / ViewModels / BaseTimingTrack . h \" struct FSlateBrush ; class ITimingEventsTrackDrawStateBuilder { public : typedef TFunctionRef<const)",
    "insertText": "FString(float)"
  },
  {
    "label": "ITimingEventsTrackDrawStateBuilder()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ITimingEventsTrackDrawStateBuilder()"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, const TCHAR* InEventName, uint64 InEventType = 0, uint32 InEventColor = 0)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, uint32 InEventColor, GetEventNameCallback InGetEventNameCallback)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} ; class FTimingEventsTrack : public FBaseTimingTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingEventsTrack, FBaseTimingTrack) public: explicit FTimingEventsTrack()"
  },
  {
    "label": "FTimingEventsTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimingEventsTrack(const FString& InTrackName)"
  },
  {
    "label": "FTimingEventsTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingEventsTrack()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "PostDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "DrawEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEvent(const ITimingTrackDrawContext& Context, const ITimingEvent& InTimingEvent, EDrawEventMode InDrawMode)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetEvent(float InPosX, float InPosY, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "GetFilterByEvent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITimingEventFilter>)",
    "insertText": "GetFilterByEvent(const TSharedPtr<const ITimingEvent> InTimingEvent)"
  },
  {
    "label": "BuildDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "BuildFilteredDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFilteredDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "GetNumLanes()",
    "kind": "Method",
    "detail": "Function (} protected : int32)",
    "insertText": "GetNumLanes()"
  },
  {
    "label": "GetDrawState()",
    "kind": "Method",
    "detail": "Function (NumLanes = InNumLanes ; } const struct FTimingEventsTrackDrawState&)",
    "insertText": "GetDrawState()"
  },
  {
    "label": "DrawEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEvents(const ITimingTrackDrawContext& Context, const float OffsetY = 1.0f)"
  },
  {
    "label": "DrawHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHeader(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "DrawMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMarkers(const ITimingTrackDrawContext& Context, float LineY, float LineH)"
  },
  {
    "label": "DrawSelectedEventInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSelectedEventInfo(const FString& InText, const FTimingTrackViewport& Viewport, const UE::Insights::FDrawContext& DrawContext, const FSlateBrush* WhiteBrush, const FSlateFontInfo& Font)"
  },
  {
    "label": "DrawSelectedEventInfoEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSelectedEventInfoEx(const FString& InText, const FString& InLeftText, const FString& InTopText, const FTimingTrackViewport& Viewport, const UE::Insights::FDrawContext& DrawContext, const FSlateBrush* WhiteBrush, const FSlateFontInfo& Font)"
  },
  {
    "label": "GetHeaderBackgroundLayerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeaderBackgroundLayerId(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "GetHeaderTextLayerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeaderTextLayerId(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetEvent(double InTime, double SecondsPerPixel, int32 Depth)"
  },
  {
    "label": "HasCustomFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomFilter()"
  }
]