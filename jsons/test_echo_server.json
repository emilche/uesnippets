[
  {
    "label": "TestEchoServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEchoServer"
  },
  {
    "label": "TestEchoServer()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TEST_ECHO_SERVER_H_ # define RTC_BASE_TEST_ECHO_SERVER_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<memory> # include \" absl / algorithm / container . h \" # include \" absl / memory / memory . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / async_tcp_socket . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" namespace rtc { class TestEchoServer : public sigslot::has_slots<> { public :)",
    "insertText": "TestEchoServer(Thread* thread, const SocketAddress& addr)"
  },
  {
    "label": "TestEchoServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestEchoServer()"
  },
  {
    "label": "TestEchoServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestEchoServer(const TestEchoServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestEchoServer&)",
    "insertText": "operator(const TestEchoServer&)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "address()"
  },
  {
    "label": "OnAccept()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnAccept(Socket* socket)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (Socket* raw_socket = socket ->)",
    "insertText": "Accept(nullptr)"
  },
  {
    "label": "AsyncTCPSocket()",
    "kind": "Method",
    "detail": "Function (AsyncTCPSocket* packet_socket = new)",
    "insertText": "AsyncTCPSocket(raw_socket)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (packet_socket -> SignalReadPacket .)",
    "insertText": "connect(this, &TestEchoServer::OnPacket)"
  },
  {
    "label": "SubscribeClose()",
    "kind": "Method",
    "detail": "Function (packet_socket ->)",
    "insertText": "SubscribeClose(this, [this](AsyncPacketSocket* s, int err) { OnClose(s, err); })"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (client_sockets_ .)",
    "insertText": "push_back(packet_socket)"
  },
  {
    "label": "OnPacket()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnPacket(AsyncPacketSocket* socket, const char* buf, size_t size, const SocketAddress& remote_addr, const int64_t&)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (rtc::PacketOptions options ; socket ->)",
    "insertText": "Send(buf, size, options)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClose(AsyncPacketSocket* socket, int err)"
  },
  {
    "label": "c_find()",
    "kind": "Method",
    "detail": "Function (ClientList::iterator it =)",
    "insertText": "c_find(client_sockets_, socket)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (client_sockets_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Current()->PostTask([socket = absl::WrapUnique(socket)] {})"
  }
]