[
  {
    "label": "STextComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextComboBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FBlueprintDebugObjectInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintDebugObjectInstance"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FBlueprintDebugObjectInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintEditor . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" class STextComboBox ; class SWidget ; class UBlueprint ; class UObject ; class UWorld ; struct FGeometry ; struct FBlueprintDebugObjectInstance { TWeakObjectPtr<UObject> ObjectPtr ; FString ObjectLabel ; FString ObjectPath ; FString EditorObjectPath ;)",
    "insertText": "FBlueprintDebugObjectInstance(TWeakObjectPtr<UObject> InPtr, const FString& InLabel) : ObjectPtr(InPtr) , ObjectLabel(InLabel)"
  },
  {
    "label": "IsEmptyObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmptyObject()"
  },
  {
    "label": "IsSpawnedObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSpawnedObject()"
  },
  {
    "label": "IsEditorObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEditorObject()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; class SBlueprintEditorSelectedDebugObjectWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBlueprintEditorSelectedDebugObjectWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<FBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "AddDebugObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDebugObject(UObject* TestObject, const FString& TestObjectName = FString())"
  },
  {
    "label": "GetBlueprintObj()",
    "kind": "Method",
    "detail": "Function (private : UBlueprint*)",
    "insertText": "GetBlueprintObj()"
  },
  {
    "label": "GenerateDebugObjectInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateDebugObjectInstances(bool bRestoreSelection)"
  },
  {
    "label": "GenerateDebugWorldNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDebugWorldNames(bool bRestoreSelection)"
  },
  {
    "label": "OnRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefresh()"
  },
  {
    "label": "GetDebugObjectInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintDebugObjectInstance>)",
    "insertText": "GetDebugObjectInstance()"
  },
  {
    "label": "GetDebugWorldName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetDebugWorldName()"
  },
  {
    "label": "DebugObjectSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugObjectSelectionChanged(TSharedPtr<FBlueprintDebugObjectInstance> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "DebugWorldSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugWorldSelectionChanged(TSharedPtr<FString> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SelectedDebugObject_OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectedDebugObject_OnClicked()"
  },
  {
    "label": "IsDebugObjectSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugObjectSelected()"
  },
  {
    "label": "IsDebugWorldComboVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsDebugWorldComboVisible()"
  },
  {
    "label": "GetNoDebugString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetNoDebugString()"
  },
  {
    "label": "GetDebugAllWorldsString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDebugAllWorldsString()"
  },
  {
    "label": "OnGetActiveDetailSlotContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetActiveDetailSlotContent(bool bChangedToHighDetail)"
  },
  {
    "label": "MakeDebugObjectLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeDebugObjectLabel(UObject* TestObject, bool bAddContextIfSelectedInEditor, bool bAddSpawnedContext)"
  },
  {
    "label": "FillDebugObjectInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillDebugObjectInstance(TSharedPtr<FBlueprintDebugObjectInstance> Instance)"
  },
  {
    "label": "CreateDebugObjectItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateDebugObjectItemWidget(TSharedPtr<FBlueprintDebugObjectInstance> InItem)"
  },
  {
    "label": "GetSelectedDebugObjectTextLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedDebugObjectTextLabel()"
  }
]