[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SimpleTaskExecutor()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SIMPLE_TASK_EXECUTOR_H_ # define BASE_TASK_SIMPLE_TASK_EXECUTOR_H_ # include \" base / base_export . h \" # include \" base / task / task_executor . h \" # include \" build / build_config . h \" namespace base { class BASE_EXPORT SimpleTaskExecutor : public TaskExecutor { public :)",
    "insertText": "SimpleTaskExecutor(scoped_refptr<SingleThreadTaskRunner> task_queue)"
  },
  {
    "label": "SimpleTaskExecutor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleTaskExecutor()"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, const TaskTraits& traits, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskRunner>)",
    "insertText": "CreateTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "CreateSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SequencedTaskRunner>)",
    "insertText": "CreateSequencedTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "CreateSingleThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateSingleThreadTaskRunner(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) scoped_refptr<SingleThreadTaskRunner> CreateCOMSTATaskRunner( const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  }
]