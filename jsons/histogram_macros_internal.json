[
  {
    "label": "EnumSizeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnumSizeTraits"
  },
  {
    "label": "type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "type"
  },
  {
    "label": "ScaledLinearHistogramInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScaledLinearHistogramInstance"
  },
  {
    "label": "ScopedHistogramTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHistogramTimer"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_HISTOGRAM_MACROS_INTERNAL_H_ # define BASE_METRICS_HISTOGRAM_MACROS_INTERNAL_H_ # include<stdint . h> # include<atomic> # include<limits> # include<memory> # include<type_traits> # include \" base / dcheck_is_on . h \" # include \" base / metrics / histogram . h \" # include \" base / metrics / sparse_histogram . h \" # include \" base / time / time . h \" namespace base { namespace internal { template<Enum,SFINAE = void> struct EnumSizeTraits { Enum)",
    "insertText": "Count()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<Enum> struct EnumSizeTraits<Enum,std::enable_if_t<std::is_enum<)",
    "insertText": "decltype(Enum::kMaxValue)"
  },
  {
    "label": "HISTOGRAM_POINTER_USE()",
    "kind": "Method",
    "detail": "Function (} } ; } } # define)",
    "insertText": "HISTOGRAM_POINTER_USE(\\ atomic_histogram_pointer, constant_histogram_name, \\ histogram_add_method_invocation, histogram_factory_get_invocation)"
  },
  {
    "label": "histogram_pointer()",
    "kind": "Method",
    "detail": "Function (\\ base::HistogramBase*)",
    "insertText": "histogram_pointer(\\ reinterpret_cast<base::HistogramBase*>( \\ atomic_histogram_pointer->load(std::memory_order_acquire)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!histogram_pointer)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (\\ \\ histogram_pointer = histogram_factory_get_invocation ; \\ \\ \\ atomic_histogram_pointer ->)",
    "insertText": "store(\\ reinterpret_cast<uintptr_t>(histogram_pointer), \\ std::memory_order_release)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "if(DCHECK_IS_ON()) \\ histogram_pointer->CheckName(constant_histogram_name)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ histogram_pointer -> histogram_add_method_invocation ; \\ })",
    "insertText": "while(0) #define STATIC_HISTOGRAM_POINTER_BLOCK(constant_histogram_name, \\ histogram_add_method_invocation, \\ histogram_factory_get_invocation)"
  },
  {
    "label": "HISTOGRAM_POINTER_USE()",
    "kind": "Method",
    "detail": "Function (\\ \\ std::atomic_uintptr_t atomic_histogram_pointer ; \\)",
    "insertText": "HISTOGRAM_POINTER_USE(\\ std::addressof(atomic_histogram_pointer), constant_histogram_name, \\ histogram_add_method_invocation, histogram_factory_get_invocation)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define INTERNAL_HISTOGRAM_CUSTOM_COUNTS_WITH_FLAG(name, sample, min, max, \\ bucket_count, flag) \\ STATIC_HISTOGRAM_POINTER_BLOCK( \\ name, Add(sample), \\ base::Histogram::FactoryGet(name, min, max, bucket_count, flag)) #define INTERNAL_HISTOGRAM_EXACT_LINEAR_WITH_FLAG(name, sample, boundary, \\ flag)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!std::is_enum<std::decay_t<decltype(sample)>>::value, \\ \"|sample| should not be an enum type!\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!std::is_enum<std::decay_t<decltype(boundary)>>::value, \\ \"|boundary| should not be an enum type!\")"
  },
  {
    "label": "STATIC_HISTOGRAM_POINTER_BLOCK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "STATIC_HISTOGRAM_POINTER_BLOCK(\\ name, Add(sample), \\ base::LinearHistogram::FactoryGet(name, 1, boundary, boundary + 1, \\ flag))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define INTERNAL_HISTOGRAM_SCALED_EXACT_LINEAR_WITH_FLAG( \\ name, sample, count, boundary, scale, flag)"
  },
  {
    "label": "ScaledLinearHistogramInstance()",
    "kind": "Method",
    "detail": "Function (\\ class ScaledLinearHistogramInstance : public base::ScaledLinearHistogram { \\ public : \\)",
    "insertText": "ScaledLinearHistogramInstance() \\ : ScaledLinearHistogram(name, \\ 1, \\ boundary, \\ boundary + 1, \\ scale, \\ flag)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ base::LazyInstance<ScaledLinearHistogramInstance>::Leaky scaled ; \\ scaled .)",
    "insertText": "Get().AddScaledCount(sample, count)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define INTERNAL_UMA_HISTOGRAM_ENUMERATION_GET_MACRO(_1, _2, NAME, ...) NAME #define INTERNAL_UMA_HISTOGRAM_ENUMERATION_DEDUCE_BOUNDARY(name, sample, \\ flags) \\ INTERNAL_HISTOGRAM_ENUMERATION_WITH_FLAG( \\ name, sample, \\ base::internal::EnumSizeTraits<std::decay_t<decltype(sample)>>::Count(), \\ flags) #define INTERNAL_UMA_HISTOGRAM_ENUMERATION_SPECIFY_BOUNDARY(name, sample, \\ enum_size, flags) \\ INTERNAL_HISTOGRAM_ENUMERATION_WITH_FLAG(name, sample, enum_size, flags) #define INTERNAL_HISTOGRAM_ENUMERATION_WITH_FLAG(name, sample, boundary, flag)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using decayed_sample = std::decay<)",
    "insertText": "decltype(sample)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using decayed_boundary = std::decay<)",
    "insertText": "decltype(boundary)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!std::is_enum<decayed_boundary>::value || \\ std::is_enum<decayed_sample>::value, \\ \"Unexpected: |boundary| is enum, but |sample| is not.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!std::is_enum<decayed_sample>::value || \\ !std::is_enum<decayed_boundary>::value || \\ std::is_same<decayed_sample, decayed_boundary>::value, \\ \"|sample| and |boundary| shouldn't be of different enums\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(\\ static_cast<uintmax_t>(boundary) < \\ static_cast<uintmax_t>( \\ std::numeric_limits<base::HistogramBase::Sample>::max()), \\ \"|boundary| is out of range of HistogramBase::Sample\")"
  },
  {
    "label": "INTERNAL_HISTOGRAM_EXACT_LINEAR_WITH_FLAG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_HISTOGRAM_EXACT_LINEAR_WITH_FLAG(\\ name, static_cast<base::HistogramBase::Sample>(sample), \\ static_cast<base::HistogramBase::Sample>(boundary), flag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define INTERNAL_HISTOGRAM_SCALED_ENUMERATION_WITH_FLAG(name, sample, count, \\ scale, flag)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(std::is_enum<decayed_sample>::value, \\ \"Unexpected: |sample| is not at enum.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ auto boundary = base::internal::EnumSizeTraits<\\ std::decay_t<)",
    "insertText": "decltype(sample)>>::Count()"
  },
  {
    "label": "INTERNAL_HISTOGRAM_SCALED_EXACT_LINEAR_WITH_FLAG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_HISTOGRAM_SCALED_EXACT_LINEAR_WITH_FLAG(\\ name, static_cast<base::HistogramBase::Sample>(sample), count, \\ static_cast<base::HistogramBase::Sample>(boundary), scale, flag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define INTERNAL_SCOPED_UMA_HISTOGRAM_TIMER_EXPANDER(name, timing, key) \\ INTERNAL_SCOPED_UMA_HISTOGRAM_TIMER_UNIQUE(name, timing, key) #define INTERNAL_SCOPED_UMA_HISTOGRAM_TIMER_UNIQUE(name, timing, key)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ ScopedHistogramTimer # #)",
    "insertText": "key() : constructed_(base::TimeTicks::Now())"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} \\ ~ ScopedHistogramTimer # #)",
    "insertText": "key()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (\\ base::TimeDelta elapsed = base::)",
    "insertText": "Now()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "switch(timing)"
  },
  {
    "label": "UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES()",
    "kind": "Method",
    "detail": "Function (\\ case ScopedHistogramTiming::kMicrosecondTimes : \\)",
    "insertText": "UMA_HISTOGRAM_CUSTOM_MICROSECONDS_TIMES(\\ name, elapsed, base::Microseconds(1), base::Seconds(1), 50)"
  },
  {
    "label": "UMA_HISTOGRAM_TIMES()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ case ScopedHistogramTiming::kMediumTimes : \\)",
    "insertText": "UMA_HISTOGRAM_TIMES(name, elapsed)"
  },
  {
    "label": "UMA_HISTOGRAM_LONG_TIMES_100()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ case ScopedHistogramTiming::kLongTimes : \\)",
    "insertText": "UMA_HISTOGRAM_LONG_TIMES_100(name, elapsed)"
  }
]