[
  {
    "label": "TestWindowDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestWindowDelegate"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# include<memory> # include \" include / base / cef_callback . h \" # include \" include / base / cef_weak_ptr . h \" # include \" include / cef_waitable_event . h \" # include \" include / views / cef_window . h \" # include \" include / views / cef_window_delegate . h \" class TestWindowDelegate : public CefWindowDelegate { public : const int kWSize ; using OnWindowCreatedCallback = base::OnceCallback<)",
    "insertText": "void(CefRefPtr<CefWindow>)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using OnAcceleratorCallback = base::RepeatingCallback<)",
    "insertText": "bool(CefRefPtr<CefWindow>, int)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using OnKeyEventCallback = base::RepeatingCallback<)",
    "insertText": "bool(CefRefPtr<CefWindow>, const CefKeyEvent&)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (struct Config { OnWindowCreatedCallback on_window_created ; OnWindowDestroyedCallback on_window_destroyed ; OnAcceleratorCallback on_accelerator ; OnKeyEventCallback on_key_event ; bool frameless = false ; bool close_window = true ; int window_size = kWSize ; CefPoint window_origin = { } ; } ; void)",
    "insertText": "RunTest(CefRefPtr<CefWaitableEvent> event, std::unique_ptr<Config> config)"
  },
  {
    "label": "OnWindowCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowCreated(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDestroyed(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "IsFrameless()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrameless(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "GetInitialBounds()",
    "kind": "Method",
    "detail": "Function (CefRect)",
    "insertText": "GetInitialBounds(CefRefPtr<CefWindow> window)"
  },
  {
    "label": "GetPreferredSize()",
    "kind": "Method",
    "detail": "Function (CefSize)",
    "insertText": "GetPreferredSize(CefRefPtr<CefView> view)"
  },
  {
    "label": "OnAccelerator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAccelerator(CefRefPtr<CefWindow> window, int command_id)"
  },
  {
    "label": "OnKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyEvent(CefRefPtr<CefWindow> window, const CefKeyEvent& event)"
  },
  {
    "label": "TestWindowDelegate()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "TestWindowDelegate(CefRefPtr<CefWaitableEvent> event, std::unique_ptr<Config> config, const CefSize& window_size)"
  },
  {
    "label": "TestWindowDelegate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestWindowDelegate()"
  },
  {
    "label": "OnCloseWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseWindow()"
  },
  {
    "label": "OnTimeoutWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeoutWindow()"
  },
  {
    "label": "IMPLEMENT_REFCOUNTING()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefWaitableEvent> event_ ; std::unique_ptr<Config> config_ ; const CefSize window_size_ ; CefRefPtr<CefWindow> window_ ; bool got_get_initial_bounds_ = false ; bool got_get_preferred_size_ = false ; base::WeakPtrFactory<TestWindowDelegate> weak_ptr_factory_ ;)",
    "insertText": "IMPLEMENT_REFCOUNTING(TestWindowDelegate)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(TestWindowDelegate)"
  }
]