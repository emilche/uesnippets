[
  {
    "label": "DspHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DspHelper"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_DSP_HELPER_H_ # define MODULES_AUDIO_CODING_NETEQ_DSP_HELPER_H_ # include<stdint . h> # include<string . h> # include \" modules / audio_coding / neteq / audio_multi_vector . h \" # include \" modules / audio_coding / neteq / audio_vector . h \" namespace webrtc { class DspHelper { public : const int16_t kDownsample8kHzTbl [ 3 ] ; const int16_t kDownsample16kHzTbl [ 5 ] ; const int16_t kDownsample32kHzTbl [ 7 ] ; const int16_t kDownsample48kHzTbl [ 7 ] ; const int kMuteFactorStart8kHz = 2 7 3 0 7 ; const int kMuteFactorIncrement8kHz = - 5 4 6 1 ; const int kUnmuteFactorStart8kHz = 5 4 6 1 ; const int kUnmuteFactorIncrement8kHz = 5 4 6 1 ; const int kMuteFactorStart16kHz = 2 9 7 8 9 ; const int kMuteFactorIncrement16kHz = - 2 9 7 9 ; const int kUnmuteFactorStart16kHz = 2 9 7 9 ; const int kUnmuteFactorIncrement16kHz = 2 9 7 9 ; const int kMuteFactorStart32kHz = 3 1 2 0 8 ; const int kMuteFactorIncrement32kHz = - 1 5 6 0 ; const int kUnmuteFactorStart32kHz = 1 5 6 0 ; const int kUnmuteFactorIncrement32kHz = 1 5 6 0 ; const int kMuteFactorStart48kHz = 3 1 7 1 1 ; const int kMuteFactorIncrement48kHz = - 1 0 5 7 ; const int kUnmuteFactorStart48kHz = 1 0 5 7 ; const int kUnmuteFactorIncrement48kHz = 1 0 5 7 ; int)",
    "insertText": "RampSignal(const int16_t* input, size_t length, int factor, int increment, int16_t* output)"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(int16_t* signal, size_t length, int factor, int increment)"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(AudioVector* signal, size_t start_index, size_t length, int factor, int increment)"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(AudioMultiVector* signal, size_t start_index, size_t length, int factor, int increment)"
  },
  {
    "label": "PeakDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeakDetection(int16_t* data, size_t data_length, size_t num_peaks, int fs_mult, size_t* peak_index, int16_t* peak_value)"
  },
  {
    "label": "ParabolicFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParabolicFit(int16_t* signal_points, int fs_mult, size_t* peak_index, int16_t* peak_value)"
  },
  {
    "label": "MinDistortion()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MinDistortion(const int16_t* signal, size_t min_lag, size_t max_lag, size_t length, int32_t* distortion_value)"
  },
  {
    "label": "CrossFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CrossFade(const int16_t* input1, const int16_t* input2, size_t length, int16_t* mix_factor, int16_t factor_decrement, int16_t* output)"
  },
  {
    "label": "UnmuteSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmuteSignal(const int16_t* input, size_t length, int16_t* factor, int increment, int16_t* output)"
  },
  {
    "label": "MuteSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MuteSignal(int16_t* signal, int mute_slope, size_t length)"
  },
  {
    "label": "DownsampleTo4kHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DownsampleTo4kHz(const int16_t* input, size_t input_length, size_t output_length, int input_rate_hz, bool compensate_delay, int16_t* output)"
  },
  {
    "label": "DspHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DspHelper(const DspHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DspHelper&)",
    "insertText": "operator(const DspHelper&)"
  }
]