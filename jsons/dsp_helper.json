[
  {
    "label": "contains",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "contains"
  },
  {
    "label": "DspHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DspHelper"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(const int16_t* input,\n                        size_t length,\n                        int factor,\n                        int increment,\n                        int16_t* output)"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(int16_t* signal,\n                        size_t length,\n                        int factor,\n                        int increment)"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(AudioVector* signal,\n                        size_t start_index,\n                        size_t length,\n                        int factor,\n                        int increment)"
  },
  {
    "label": "RampSignal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RampSignal(AudioMultiVector* signal,\n                        size_t start_index,\n                        size_t length,\n                        int factor,\n                        int increment)"
  },
  {
    "label": "PeakDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeakDetection(int16_t* data,\n                            size_t data_length,\n                            size_t num_peaks,\n                            int fs_mult,\n                            size_t* peak_index,\n                            int16_t* peak_value)"
  },
  {
    "label": "ParabolicFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParabolicFit(int16_t* signal_points,\n                           int fs_mult,\n                           size_t* peak_index,\n                           int16_t* peak_value)"
  },
  {
    "label": "MinDistortion()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MinDistortion(const int16_t* signal,\n                              size_t min_lag,\n                              size_t max_lag,\n                              size_t length,\n                              int32_t* distortion_value)"
  },
  {
    "label": "CrossFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CrossFade(const int16_t* input1,\n                        const int16_t* input2,\n                        size_t length,\n                        int16_t* mix_factor,\n                        int16_t factor_decrement,\n                        int16_t* output)"
  },
  {
    "label": "UnmuteSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmuteSignal(const int16_t* input,\n                           size_t length,\n                           int16_t* factor,\n                           int increment,\n                           int16_t* output)"
  },
  {
    "label": "MuteSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MuteSignal(int16_t* signal, int mute_slope, size_t length)"
  },
  {
    "label": "DownsampleTo4kHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DownsampleTo4kHz(const int16_t* input,\n                              size_t input_length,\n                              size_t output_length,\n                              int input_rate_hz,\n                              bool compensate_delay,\n                              int16_t* output)"
  }
]