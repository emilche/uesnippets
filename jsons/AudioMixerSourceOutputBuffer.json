[
  {
    "label": "FMixerSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSubmix"
  },
  {
    "label": "FMixerSourceSubmixOutputBufferSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceSubmixOutputBufferSettings"
  },
  {
    "label": "FMixerSourceSubmixOutputBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceSubmixOutputBuffer"
  },
  {
    "label": "FSourceChannelMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceChannelMap"
  },
  {
    "label": "FSoundfieldData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundfieldData"
  },
  {
    "label": "FMixerSourceSubmixOutputBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISoundfieldFormat . h \" # include \" IAudioExtensionPlugin . h \" # include \" AudioMixerDevice . h \" # include \" AudioMixerSubmix . h \" namespace Audio { class FMixerSubmix ; struct FMixerSourceSubmixOutputBufferSettings { uint32 NumSourceChannels ; uint32 NumOutputChannels ; TArray<FMixerSubmixPtr> SoundfieldSubmixSends ; bool bIs3D ; bool bIsVorbis ; bool bIsSoundfield ; } ; class FMixerSourceSubmixOutputBuffer { public :)",
    "insertText": "FMixerSourceSubmixOutputBuffer(FMixerDevice* InMixerDevice, uint32 InNumSourceChannels, uint32 InNumOutputChannels, uint32 InNumFrames)"
  },
  {
    "label": "FMixerSourceSubmixOutputBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMixerSourceSubmixOutputBuffer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const FMixerSourceSubmixOutputBufferSettings& InResetSettings)"
  },
  {
    "label": "SetNumOutputChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumOutputChannels(uint32 InNumOutputChannels)"
  },
  {
    "label": "GetNumSourceChannels()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumSourceChannels()"
  },
  {
    "label": "SetPreAttenuationSourceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreAttenuationSourceBuffer(FAlignedFloatBuffer* InPreAttenuationBuffer)"
  },
  {
    "label": "SetPostAttenuationSourceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostAttenuationSourceBuffer(FAlignedFloatBuffer* InPostAttenuationBuffer)"
  },
  {
    "label": "CopyReverbPluginOutputData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyReverbPluginOutputData(FAlignedFloatBuffer& InAudioBuffer)"
  },
  {
    "label": "GetReverbPluginOutputData()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetReverbPluginOutputData()"
  },
  {
    "label": "GetSoundfieldPacket()",
    "kind": "Method",
    "detail": "Function (const ISoundfieldAudioPacket*)",
    "insertText": "GetSoundfieldPacket(const FSoundfieldEncodingKey& InKey)"
  },
  {
    "label": "GetSoundFieldPacket()",
    "kind": "Method",
    "detail": "Function (ISoundfieldAudioPacket*)",
    "insertText": "GetSoundFieldPacket(const FSoundfieldEncodingKey& InKey)"
  },
  {
    "label": "ComputeOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOutput(const FSpatializationParams& InSpatParams)"
  },
  {
    "label": "MixOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixOutput(float SendLevel, EMixerSourceSubmixSendStage InSubmixSendStage, FAlignedFloatBuffer& OutMixedBuffer)"
  },
  {
    "label": "GetListenerRotation()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetListenerRotation()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (private : struct FSourceChannelMap {)",
    "insertText": "alignas(16)"
  },
  {
    "label": "FSourceChannelMap()",
    "kind": "Method",
    "detail": "Function (int32 CopySize = 0 ; bool bIsInit = false ;)",
    "insertText": "FSourceChannelMap(int32 InNumInChannels, int32 InNumOutChannels) : CopySize(InNumInChannels* InNumOutChannels * sizeof(float))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ChannelStartGains, CopySize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(int32 InNumInChannels, int32 InNumOutChannels)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (CopySize = InNumInChannels* InNumOutChannels*)",
    "insertText": "sizeof(float)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ChannelDestinationGains, CopySize)"
  },
  {
    "label": "CopyDestinationToStart()",
    "kind": "Method",
    "detail": "Function (bIsInit = false ; } void)",
    "insertText": "CopyDestinationToStart()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ChannelStartGains, ChannelDestinationGains, CopySize)"
  },
  {
    "label": "SetChannelMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetChannelMap(const float* RESTRICT InChannelGains)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ChannelDestinationGains, InChannelGains, CopySize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(ChannelStartGains, InChannelGains, CopySize)"
  },
  {
    "label": "FSourceChannelMap()",
    "kind": "Method",
    "detail": "Function (bIsInit = true ; } } private :)",
    "insertText": "FSourceChannelMap() : CopySize(0) , bIsInit(false)"
  },
  {
    "label": "ComputeOutput3D()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSoundfieldData { TUniquePtr<ISoundfieldEncoderStream> SoundfieldEncoder ; TUniquePtr<ISoundfieldTranscodeStream> SoundfieldTranscoder ; TUniquePtr<ISoundfieldEncodingSettingsProxy> EncoderSettings ; TUniquePtr<ISoundfieldAudioPacket> EncodedPacket ; bool bIsUnrealAmbisonicsSubmix ; } ; private : void)",
    "insertText": "ComputeOutput3D(FAlignedFloatBuffer& InSource, FAlignedFloatBuffer& InOutput)"
  },
  {
    "label": "ComputeOutput3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOutput3D()"
  },
  {
    "label": "ComputeOutput2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOutput2D(FAlignedFloatBuffer& InSource, FAlignedFloatBuffer& InOutput)"
  },
  {
    "label": "ComputeOutput2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOutput2D()"
  },
  {
    "label": "EncodeSoundfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeSoundfield(FSoundfieldData& InSoundfieldData, Audio::FAlignedFloatBuffer& InSourceBuffer)"
  },
  {
    "label": "EncodeToSoundfieldFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeToSoundfieldFormats(const FSpatializationParams& InSpatParams)"
  }
]