[
  {
    "label": "FCharacterGroundConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraint"
  },
  {
    "label": "FCharacterGroundConstraintProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintProxy"
  },
  {
    "label": "FCharacterGroundConstraint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Character / CharacterGroundConstraintSettings . h \" # include \" Chaos / PBDConstraintBaseData . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxy . h \" namespace Chaos { class FCharacterGroundConstraint : public FConstraintBase { public : using Base = FConstraintBase ; class FCharacterGroundConstraintProxy ;)",
    "insertText": "FCharacterGroundConstraint()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FSingleParticlePhysicsProxy* InCharacterProxy)"
  },
  {
    "label": "GetCharacterParticleProxy()",
    "kind": "Method",
    "detail": "Function (FSingleParticlePhysicsProxy*)",
    "insertText": "GetCharacterParticleProxy()"
  },
  {
    "label": "GetGroundParticleProxy()",
    "kind": "Method",
    "detail": "Function (} FSingleParticlePhysicsProxy*)",
    "insertText": "GetGroundParticleProxy()"
  },
  {
    "label": "SetGroundParticleProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGroundParticleProxy(FSingleParticlePhysicsProxy* InGroundProxy)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (GroundProxy .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [InGroundProxy](FParticleProxyProperty& Data) { Data.ParticleProxy = InGroundProxy; })"
  },
  {
    "label": "WakeGroundBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeGroundBody()"
  },
  {
    "label": "SetGroundNormal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGroundNormal(const FVec3& Normal)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (FVec3 Tmp = Normal ; FReal SizeSq = Tmp .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (Tmp* =)",
    "insertText": "InvSqrt(SizeSq)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} ConstraintData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Tmp](FCharacterGroundConstraintDynamicData& Data) { Data.GroundNormal = Tmp; })"
  },
  {
    "label": "GetGroundNormal()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetGroundNormal()"
  },
  {
    "label": "SetVerticalAxis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVerticalAxis(const FVec3& Axis)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Tmp](FCharacterGroundConstraintSettings& Data) { Data.VerticalAxis = Tmp; })"
  },
  {
    "label": "GetVerticalAxis()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetVerticalAxis()"
  },
  {
    "label": "SetGroundDistance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGroundDistance(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintDynamicData& Data) { Data.GroundDistance = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "WakeCharacterBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeCharacterBody()"
  },
  {
    "label": "GetGroundDistance()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetGroundDistance()"
  },
  {
    "label": "SetTargetHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTargetHeight(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.TargetHeight = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetTargetHeight()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetTargetHeight()"
  },
  {
    "label": "SetDampingFactor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDampingFactor(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.DampingFactor = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetDampingFactor()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetDampingFactor()"
  },
  {
    "label": "SetAssumedOnGroundHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAssumedOnGroundHeight(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.AssumedOnGroundHeight = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetAssumedOnGroundHeight()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetAssumedOnGroundHeight()"
  },
  {
    "label": "SetMaxWalkableSlopeAngle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxWalkableSlopeAngle(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { FReal Angle = FMath::Clamp(Value, 0.0, UE_HALF_PI); Data.CosMaxWalkableSlopeAngle = FMath::Cos(Angle); })"
  },
  {
    "label": "GetMaxWalkableSlopeAngle()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetMaxWalkableSlopeAngle()"
  },
  {
    "label": "SetCosMaxWalkableSlopeAngle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCosMaxWalkableSlopeAngle(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { FReal CosAngle = FMath::Clamp(Value, -1.0, 1.0); Data.CosMaxWalkableSlopeAngle = CosAngle; })"
  },
  {
    "label": "GetCosMaxWalkableSlopeAngle()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetCosMaxWalkableSlopeAngle()"
  },
  {
    "label": "SetTargetDeltaPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTargetDeltaPosition(const FVec3& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintDynamicData& Data) { Data.TargetDeltaPosition = Value; })"
  },
  {
    "label": "GetTargetDeltaPosition()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetTargetDeltaPosition()"
  },
  {
    "label": "SetTargetDeltaFacing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTargetDeltaFacing(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintDynamicData& Data) { Data.TargetDeltaFacing = Value; })"
  },
  {
    "label": "GetTargetDeltaFacing()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetTargetDeltaFacing()"
  },
  {
    "label": "SetMotionTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMotionTarget(const FVector& TargetDeltaPosition, const FReal& TargetDeltaFacing)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&TargetDeltaPosition, &TargetDeltaFacing](FCharacterGroundConstraintDynamicData& Data) { Data.TargetDeltaPosition = TargetDeltaPosition; Data.TargetDeltaFacing = TargetDeltaFacing; })"
  },
  {
    "label": "SetRadialForceLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRadialForceLimit(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.RadialForceLimit = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetRadialForceLimit()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRadialForceLimit()"
  },
  {
    "label": "SetFrictionForceLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFrictionForceLimit(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.FrictionForceLimit = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetFrictionForceLimit()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetFrictionForceLimit()"
  },
  {
    "label": "SetTwistTorqueLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTwistTorqueLimit(Value)"
  },
  {
    "label": "SetTwistTorqueLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTwistTorqueLimit(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.TwistTorqueLimit = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetTwistTorqueLimit()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetTwistTorqueLimit()"
  },
  {
    "label": "SetSwingTorqueLimit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSwingTorqueLimit(const FReal& Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.SwingTorqueLimit = Value > FReal(0.0) ? Value : FReal(0.0); })"
  },
  {
    "label": "GetSwingTorqueLimit()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetSwingTorqueLimit()"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUserData(void* Value)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (ConstraintSettings .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&Value](FCharacterGroundConstraintSettings& Data) { Data.UserData = Value; })"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetUserData()"
  },
  {
    "label": "GetSolverAppliedForce()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetSolverAppliedForce()"
  },
  {
    "label": "GetGameThreadAPI()",
    "kind": "Method",
    "detail": "Function (FRigidBodyHandle_External& Body = Character ->)",
    "insertText": "GetGameThreadAPI()"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (Body .)",
    "insertText": "SetObjectState(EObjectStateType::Dynamic)"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SyncRemoteDataImp(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  }
]