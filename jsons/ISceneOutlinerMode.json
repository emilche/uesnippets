[
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ISceneOutlinerMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutlinerMode"
  },
  {
    "label": "ISceneOutlinerMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SceneOutlinerFwd . h \" # include \" ISceneOutlinerTreeItem . h \" # include \" SceneOutlinerFilters . h \" # include \" SSceneOutliner . h \" # include \" SceneOutlinerDragDrop . h \" # include \" Folder . h \" class FUICommandList ; class ISceneOutlinerMode { public :)",
    "insertText": "ISceneOutlinerMode(SSceneOutliner* InSceneOutliner) : SceneOutliner(InSceneOutliner)"
  },
  {
    "label": "ISceneOutlinerMode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ISceneOutlinerMode()"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "CreateItemFor()",
    "kind": "Method",
    "detail": "Function (template<TreeItemType,TreeItemData> FSceneOutlinerTreeItemPtr)",
    "insertText": "CreateItemFor(const TreeItemData& Data, bool bForce = false)"
  },
  {
    "label": "CreateViewContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateViewContent(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "InitializeViewMenuExtender()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeViewMenuExtender(TSharedPtr<FExtender> Extender)"
  },
  {
    "label": "CreateFolderPickerMode()",
    "kind": "Method",
    "detail": "Function (} FCreateSceneOutlinerMode)",
    "insertText": "CreateFolderPickerMode(const FFolder::FRootObject& InRootObject = FFolder::GetInvalidRootObject())"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (} public : TSharedPtr<FDragDropOperation>)",
    "insertText": "CreateDragDropOperation(const FPointerEvent& MouseEvent, const TArray<FSceneOutlinerTreeItemPtr>& InTreeItems)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDrop(ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload, const FSceneOutlinerDragValidationInfo& ValidationInfo)"
  },
  {
    "label": "OnDragOverItem()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnDragOverItem(const FDragDropEvent& Event, const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "OnItemAdded()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "OnItemAdded(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemRemoved(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemSelectionChanged(FSceneOutlinerTreeItemPtr Item, ESelectInfo::Type SelectionType, const FSceneOutlinerItemSelection& Selection)"
  },
  {
    "label": "OnItemDoubleClick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemDoubleClick(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemClicked(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterTextCommited()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFilterTextCommited(FSceneOutlinerItemSelection& Selection, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnItemPassesFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemPassesFilters(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenu()"
  },
  {
    "label": "CanRenameItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRenameItem(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "OnDuplicateSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDuplicateSelected()"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (} FFolder::FRootObject)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "GetPasteTargetRootObject()",
    "kind": "Method",
    "detail": "Function (} FFolder::FRootObject)",
    "insertText": "GetPasteTargetRootObject()"
  },
  {
    "label": "GetSelectionMode()",
    "kind": "Method",
    "detail": "Function (} public : ESelectionMode::Type)",
    "insertText": "GetSelectionMode()"
  },
  {
    "label": "GetStatusTextColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetStatusTextColor()"
  },
  {
    "label": "ShouldShowFolders()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShowFolders()"
  },
  {
    "label": "RepairErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RepairErrors()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindCommands(const TSharedRef<FUICommandList>& OutCommandList)"
  },
  {
    "label": "CreateNewFolder()",
    "kind": "Method",
    "detail": "Function (} public : FFolder)",
    "insertText": "CreateNewFolder()"
  },
  {
    "label": "GetFolder()",
    "kind": "Method",
    "detail": "Function (} FFolder)",
    "insertText": "GetFolder(const FFolder& ParentPath, const FName& LeafName)"
  },
  {
    "label": "CreateFolder()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateFolder(const FFolder& NewFolder)"
  },
  {
    "label": "HasCustomFolderDoubleClick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCustomFolderDoubleClick()"
  },
  {
    "label": "UnpinItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnpinItems(const TArray<FSceneOutlinerTreeItemPtr>& InItems)"
  },
  {
    "label": "CanPinItems()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanPinItems(const TArray<FSceneOutlinerTreeItemPtr>& InItems)"
  },
  {
    "label": "GetFilterInfos()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FSceneOutlinerFilterInfo>&)",
    "insertText": "GetFilterInfos()"
  },
  {
    "label": "ISceneOutlinerMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ISceneOutlinerMode(const ISceneOutliner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ISceneOutlinerMode&)",
    "insertText": "operator(const ISceneOutliner&)"
  }
]