[
  {
    "label": "FPropertyPairsMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPairsMap"
  },
  {
    "label": "Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Func"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Misc / StringBuilder . h \" # include \" OverrideVoidReturnInvoker . h \" # include \" UObject / NameTypes . h \" class FPropertyPairsMap { public : void)",
    "insertText": "AddProperty(FName InName, FName InValue = NAME_None)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Properties .)",
    "insertText": "Add(InName, InValue)"
  },
  {
    "label": "HasProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasProperty(FName InName)"
  },
  {
    "label": "HasProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasProperty(const TCHAR* InName)"
  },
  {
    "label": "PropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "PropertyName(InName, FNAME_Find)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetProperty(FName InName, FName* OutValue = nullptr)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (* OutValue =* ValuePtr ; } return true ; } return false ; } bool)",
    "insertText": "GetProperty(const TCHAR* InName, FName* OutValue = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPropertyPairsMap& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& InAr, FPropertyPairsMap& InPropertyPairsMap)"
  },
  {
    "label": "Invoker()",
    "kind": "Method",
    "detail": "Function (TOverrideVoidReturnInvoker)",
    "insertText": "Invoker(true, InFunc)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> StringBuilder ; StringBuilder .)",
    "insertText": "AppendChar(TEXT('(')); if (Properties.Num()) { for (auto [Name, Value] : Properties) { StringBuilder.AppendChar(TEXT('(')); StringBuilder.Append(Name.ToString()); if (!Value.IsNone()) { StringBuilder.AppendChar(TEXT(',')); StringBuilder.Append(Value.ToString()); } StringBuilder.AppendChar(TEXT(')')); StringBuilder.AppendChar(TEXT(',')); } StringBuilder.RemoveSuffix(1); } StringBuilder.AppendChar(TEXT(')'))"
  }
]