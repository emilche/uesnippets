[
  {
    "label": "FCompactMaps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompactMaps"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" IndexTypes . h \" namespace UE { namespace Geometry { class FCompactMaps { TArray<int32> VertMap ; TArray<int32> TriMap ; public : int32 InvalidID = IndexConstants::InvalidID ; void)",
    "insertText": "SetIdentity(int32 NumVertMappings, int32 NumTriMappings)"
  },
  {
    "label": "SetIdentityVertexMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentityVertexMap(NumVertMappings)"
  },
  {
    "label": "SetIdentityTriangleMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentityTriangleMap(NumTriMappings)"
  },
  {
    "label": "SetIdentityVertexMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIdentityVertexMap(int32 NumVertMappings)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (VertMap .)",
    "insertText": "SetNumUninitialized(NumVertMappings)"
  },
  {
    "label": "SetIdentityTriangleMap()",
    "kind": "Method",
    "detail": "Function (VertMap [ i ] = i ; } } void)",
    "insertText": "SetIdentityTriangleMap(int32 NumTriMappings)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TriMap .)",
    "insertText": "SetNumUninitialized(NumTriMappings)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TriMap [ i ] = i ; } } void)",
    "insertText": "Reset(int32 NumVertMappings, int32 NumTriMappings, bool bInitializeWithInvalidID)"
  },
  {
    "label": "ResetVertexMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetVertexMap(NumVertMappings, bInitializeWithInvalidID)"
  },
  {
    "label": "ResetTriangleMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTriangleMap(NumTriMappings, bInitializeWithInvalidID)"
  },
  {
    "label": "ResetVertexMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetVertexMap(int32 NumVertMappings, bool bInitializeWithInvalidID)"
  },
  {
    "label": "ResetTriangleMap()",
    "kind": "Method",
    "detail": "Function (VertMap [ i ] = InvalidID ; } } } void)",
    "insertText": "ResetTriangleMap(int32 NumTriMappings, bool bInitializeWithInvalidID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TriMap [ i ] = InvalidID ; } } } void)",
    "insertText": "Reset()"
  },
  {
    "label": "VertexMapIsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VertexMapIsSet()"
  },
  {
    "label": "TriangleMapIsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TriangleMapIsSet()"
  },
  {
    "label": "NumVertexMappings()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumVertexMappings()"
  },
  {
    "label": "NumTriangleMappings()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumTriangleMappings()"
  },
  {
    "label": "SetVertexMapping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertexMapping(int32 FromID, int32 ToID)"
  },
  {
    "label": "SetTriangleMapping()",
    "kind": "Method",
    "detail": "Function (VertMap [ FromID ] = ToID ; } void)",
    "insertText": "SetTriangleMapping(int32 FromID, int32 ToID)"
  },
  {
    "label": "GetVertexMapping()",
    "kind": "Method",
    "detail": "Function (TriMap [ FromID ] = ToID ; } int32)",
    "insertText": "GetVertexMapping(int32 FromID)"
  }
]