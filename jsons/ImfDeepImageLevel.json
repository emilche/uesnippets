[
  {
    "label": "DeepImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeepImage"
  },
  {
    "label": "IMFUTIL_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "SampleCountChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleCountChannel"
  },
  {
    "label": "DeepImageLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeepImageLevel"
  },
  {
    "label": "deepImage()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_DEEP_IMAGE_LEVEL_H # define INCLUDED_IMF_DEEP_IMAGE_LEVEL_H # include \" ImfNamespace . h \" # include \" ImfUtilExport . h \" # include \" ImfDeepImageChannel . h \" # include \" ImfImageLevel . h \" # include \" ImfSampleCountChannel . h \" # include<map> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class DeepImage ; class IMFUTIL_EXPORT_TYPE DeepImageLevel : public ImageLevel { public : IMFUTIL_EXPORT DeepImage&)",
    "insertText": "deepImage()"
  },
  {
    "label": "findChannel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT DeepImageChannel*)",
    "insertText": "findChannel(const std::string& name)"
  },
  {
    "label": "channel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT DeepImageChannel&)",
    "insertText": "channel(const std::string& name)"
  },
  {
    "label": "findTypedChannel()",
    "kind": "Method",
    "detail": "Function (template<class T> TypedDeepImageChannel<T>*)",
    "insertText": "findTypedChannel(const std::string& name)"
  },
  {
    "label": "typedChannel()",
    "kind": "Method",
    "detail": "Function (template<class T> TypedDeepImageChannel<T>&)",
    "insertText": "typedChannel(const std::string& name)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::map<std::string,DeepImageChannel*> ChannelMap ; class Iterator ; class ConstIterator ; IMFUTIL_EXPORT Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT Iterator)",
    "insertText": "end()"
  },
  {
    "label": "sampleCounts()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT SampleCountChannel&)",
    "insertText": "sampleCounts()"
  },
  {
    "label": "DeepImageLevel()",
    "kind": "Method",
    "detail": "Function (private : class DeepImage ; class SampleCountChannel ; IMF_HIDDEN)",
    "insertText": "DeepImageLevel(DeepImage& image, int xLevelNumber, int yLevelNumber, const IMATH_NAMESPACE::Box2i& dataWindow)"
  },
  {
    "label": "DeepImageLevel()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN ~)",
    "insertText": "DeepImageLevel()"
  },
  {
    "label": "setSamplesToZero()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "setSamplesToZero(size_t i, unsigned int oldNumSamples, unsigned int newNumSamples)"
  },
  {
    "label": "moveSampleList()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "moveSampleList(size_t i, unsigned int oldNumSamples, unsigned int newNumSamples, size_t newSampleListPosition)"
  },
  {
    "label": "moveSamplesToNewBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "moveSamplesToNewBuffer(const unsigned int* oldNumSamples, const unsigned int* newNumSamples, const size_t* newSampleListPositions)"
  },
  {
    "label": "initializeSampleLists()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "initializeSampleLists()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "resize(const IMATH_NAMESPACE::Box2i& dataWindow)"
  },
  {
    "label": "shiftPixels()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "shiftPixels(int dx, int dy)"
  },
  {
    "label": "insertChannel()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "insertChannel(const std::string& name, PixelType type, int xSampling, int ySampling, bool pLinear)"
  },
  {
    "label": "eraseChannel()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "eraseChannel(const std::string& name)"
  },
  {
    "label": "clearChannels()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "clearChannels()"
  },
  {
    "label": "renameChannel()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "renameChannel(const std::string& oldName, const std::string& newName)"
  },
  {
    "label": "renameChannels()",
    "kind": "Method",
    "detail": "Function (IMF_HIDDEN void)",
    "insertText": "renameChannels(const RenamingMap& oldToNewNames)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (ChannelMap _channels ; SampleCountChannel _sampleCounts ; } ; class IMFUTIL_EXPORT_TYPE DeepImageLevel::Iterator { public : IMFUTIL_EXPORT)",
    "insertText": "Iterator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT)",
    "insertText": "Iterator(const DeepImageLevel::ChannelMap::iterator& i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT const std::string&)",
    "insertText": "name()"
  },
  {
    "label": "channel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT DeepImageChannel&)",
    "insertText": "channel()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (private : class DeepImageLevel::ConstIterator ; DeepImageLevel::ChannelMap::iterator _i ; } ; class IMFUTIL_EXPORT_TYPE DeepImageLevel::ConstIterator { public : IMFUTIL_EXPORT)",
    "insertText": "ConstIterator()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT)",
    "insertText": "ConstIterator(const DeepImageLevel::ChannelMap::const_iterator& i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT)",
    "insertText": "ConstIterator(const DeepImageLevel::Iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "operator(const ConstIterator&, const ConstIterator&)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TypedDeepImageChannel<T>* ptr = findTypedChannel<)",
    "insertText": "T(name)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} DeepImageLevel::)",
    "insertText": "Iterator(const DeepImageLevel::ChannelMap::iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} DeepImageLevel::)",
    "insertText": "ConstIterator(const DeepImageLevel::ChannelMap::const_iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} DeepImageLevel::)",
    "insertText": "ConstIterator(const DeepImageLevel::Iterator& other) : _i (other._i)"
  }
]