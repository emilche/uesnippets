[
  {
    "label": "SingleProcessEncodedImageDataInjector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleProcessEncodedImageDataInjector"
  },
  {
    "label": "ExtractionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtractionInfo"
  },
  {
    "label": "ExtractionInfoVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtractionInfoVector"
  },
  {
    "label": "SingleProcessEncodedImageDataInjector()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_SINGLE_PROCESS_ENCODED_IMAGE_DATA_INJECTOR_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_SINGLE_PROCESS_ENCODED_IMAGE_DATA_INJECTOR_H_ # include<cstdint> # include<map> # include<memory> # include<utility> # include<vector> # include \" api / video / encoded_image . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" test / pc / e2e / analyzer / video / encoded_image_data_injector . h \" namespace webrtc { namespace webrtc_pc_e2e { class SingleProcessEncodedImageDataInjector : public EncodedImageDataPropagator { public :)",
    "insertText": "SingleProcessEncodedImageDataInjector()"
  },
  {
    "label": "InjectData()",
    "kind": "Method",
    "detail": "Function (EncodedImage)",
    "insertText": "InjectData(uint16_t id, bool discard, const EncodedImage& source)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(int expected_receivers_count)"
  },
  {
    "label": "crit()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "crit(&lock_)"
  },
  {
    "label": "AddParticipantInCall()",
    "kind": "Method",
    "detail": "Function (expected_receivers_count_ = expected_receivers_count ; } void)",
    "insertText": "AddParticipantInCall()"
  },
  {
    "label": "RemoveParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParticipantInCall()"
  },
  {
    "label": "ExtractData()",
    "kind": "Method",
    "detail": "Function (EncodedImageExtractionResult)",
    "insertText": "ExtractData(const EncodedImage& source)"
  },
  {
    "label": "ExtractionInfoVector()",
    "kind": "Method",
    "detail": "Function (private : struct ExtractionInfo { const size_t kUsedBufferSize = 3 ; uint8_t sub_id ; bool discard ; uint8_t origin_data [ ExtractionInfo::kUsedBufferSize ] ; int received_count = 0 ; } ; struct ExtractionInfoVector {)",
    "insertText": "ExtractionInfoVector()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (uint8_t next_sub_id = 0 ; std::map<uint8_t,ExtractionInfo> infos ; } ; Mutex lock_ ; int expected_receivers_count_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]