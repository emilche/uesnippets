[
  {
    "label": "UPhysicsThreadLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsThreadLibrary"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / UnrealType . h \" # include \" UObject / ScriptMacros . h \" # include \" UObject / Interface . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Engine / CollisionProfile . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxy . h \" # include \" PhysicsEngine / BodyInstance . h \" # include \" PhysicsThreadLibrary . generated . h \")",
    "insertText": "UCLASS(meta = (ScriptName = \"PhysicsThreadLibrary\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UFUNCTION(BlueprintCallable, Category = \"Utilities\") static void AddForce(FBodyInstanceAsyncPhysicsTickHandle Handle, FVector Force, bool bAccelChange = false)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "AddForce(Force * Handle->M())"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (} else { Handle ->)",
    "insertText": "AddForce(Force)"
  }
]