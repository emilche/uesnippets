[
  {
    "label": "FDefaultRichTextMarkupParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultRichTextMarkupParser"
  },
  {
    "label": "FDefaultRichTextMarkupWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultRichTextMarkupWriter"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateGlobals . h \" # include \" Framework / Text / ITextDecorator . h \" # include \" Internationalization / Regex . h \" # include \" Framework / Text / IRichTextMarkupParser . h \" # include \" Framework / Text / IRichTextMarkupWriter . h \" # if WITH_FANCY_TEXT class FDefaultRichTextMarkupParser : public IRichTextMarkupParser { public : TSharedRef<FDefaultRichTextMarkupParser>)",
    "insertText": "Create()"
  },
  {
    "label": "GetStaticInstance()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDefaultRichTextMarkupParser>)",
    "insertText": "GetStaticInstance()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Process(TArray<FTextLineParseResults>& Results, const FString& Input, FString& Output)"
  },
  {
    "label": "FDefaultRichTextMarkupParser()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FDefaultRichTextMarkupParser()"
  },
  {
    "label": "ParseLineRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseLineRanges(const FString& Input, const TArray<FTextRange>& LineRanges, TArray<FTextLineParseResults>& LineParseResultsArray)"
  },
  {
    "label": "HandleEscapeSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEscapeSequences(const FString& Input, TArray<FTextLineParseResults>& LineParseResultsArray, FString& ConcatenatedUnescapedLines)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Write(const TArray<FRichTextLine>& InLines, FString& Output)"
  },
  {
    "label": "FDefaultRichTextMarkupWriter()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FDefaultRichTextMarkupWriter()"
  },
  {
    "label": "EscapeText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EscapeText(FString& TextToEscape)"
  }
]