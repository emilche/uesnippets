[
  {
    "label": "UNetTokenDataStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetTokenDataStream"
  },
  {
    "label": "FNetTokenDataStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenDataStore"
  },
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FNetTokenStoreState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreState"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FNetExportContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExportContext"
  },
  {
    "label": "FNetTokenStoreKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreKey"
  },
  {
    "label": "FInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitParams"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Net / Core / NetToken / NetToken . h \" # include \" UObject / NameTypes . h \" # include \" Containers / Array . h \" # include \" Templates / Tuple . h \" # ifndef UE_NET_VALIDATE_NETTOKENTYPE #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FNetTokenStoreKey()",
    "kind": "Method",
    "detail": "Function (namespace UE::Net { class FNetTokenDataStore ; class FNetTokenStore ; class FNetTokenStoreState ; class FNetSerializationContext ; namespace Private { class FNetExportContext ; } } namespace UE::Net { class FNetTokenDataStore { public : class FNetTokenStoreKey { public : enum { InvalidKeyIndex = 0 U } ;)",
    "insertText": "FNetTokenStoreKey() : KeyIndex(InvalidKeyIndex)"
  },
  {
    "label": "FNetTokenStoreKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetTokenStoreKey(uint32 InKeyIndex) : KeyIndex(InKeyIndex)"
  },
  {
    "label": "GetKeyIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyIndex()"
  },
  {
    "label": "FNetTokenDataStore()",
    "kind": "Method",
    "detail": "Function (private : uint32 KeyIndex = InvalidKeyIndex ; } ; ~)",
    "insertText": "FNetTokenDataStore()"
  },
  {
    "label": "WriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNetToken(UE::Net::FNetSerializationContext& Context, FNetToken Token)"
  },
  {
    "label": "ReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "ReadNetToken(UE::Net::FNetSerializationContext& Context)"
  },
  {
    "label": "WriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNetToken(FArchive& Ar, FNetToken Token)"
  },
  {
    "label": "ReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "ReadNetToken(FArchive& Ar)"
  },
  {
    "label": "FNetTokenDataStore()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FNetTokenDataStore(FNetTokenStore& InTokenStore)"
  },
  {
    "label": "WriteTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTokenData(FNetSerializationContext& Context, FNetTokenStoreKey Key)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (FNetTokenDataStore::FNetTokenStoreKey)",
    "insertText": "ReadTokenData(FNetSerializationContext& Context, const FNetToken& NetToken)"
  },
  {
    "label": "WriteTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTokenData(FArchive& Ar, FNetTokenStoreKey Key)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (FNetTokenDataStore::FNetTokenStoreKey)",
    "insertText": "ReadTokenData(FArchive& Ar, const FNetToken& NetToken)"
  },
  {
    "label": "GetTokenKey()",
    "kind": "Method",
    "detail": "Function (FNetTokenDataStore::FNetTokenStoreKey)",
    "insertText": "GetTokenKey(FNetToken Token, const FNetTokenStoreState& TokenStoreState)"
  },
  {
    "label": "GetTypeId()",
    "kind": "Method",
    "detail": "Function (FNetToken::FTypeId)",
    "insertText": "GetTypeId()"
  },
  {
    "label": "StoreTokenForKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreTokenForKey(FNetTokenStoreKey Key, FNetToken NetToken)"
  },
  {
    "label": "GetNetTokenFromKey()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "GetNetTokenFromKey(FNetTokenStoreKey)"
  },
  {
    "label": "GetNextNetTokenStoreKey()",
    "kind": "Method",
    "detail": "Function (FNetTokenDataStore::FNetTokenStoreKey)",
    "insertText": "GetNextNetTokenStoreKey()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FNetToken> StoredTokens ; FNetTokenStore& TokenStore ; private : FNetTokenStore ; FNetToken::FTypeId TypeId ; } ; class FNetTokenStore {)",
    "insertText": "UE_NONCOPYABLE(FNetTokenStore)"
  },
  {
    "label": "FNetTokenStore()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNetTokenStore()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (struct FInitParams { FNetToken::ENetTokenAuthority Authority ; uint32 MaxConnections = 2 5 6 ; } ; void)",
    "insertText": "Init(FInitParams& InitParams)"
  },
  {
    "label": "IsAuthority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAuthority()"
  },
  {
    "label": "RegisterDataStore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RegisterDataStore(TUniquePtr<FNetTokenDataStore> DataStore, FName TokenStoreName)"
  },
  {
    "label": "GetDataStore()",
    "kind": "Method",
    "detail": "Function (const FNetTokenDataStore*)",
    "insertText": "GetDataStore(FName Name)"
  },
  {
    "label": "CreateAndRegisterDataStore()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "CreateAndRegisterDataStore()"
  },
  {
    "label": "NetTokenDataStore()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FNetTokenDataStore>)",
    "insertText": "NetTokenDataStore(MakeUnique<T>(*this))"
  },
  {
    "label": "GetDataStore()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetDataStore()"
  },
  {
    "label": "GetLocalNetTokenStoreState()",
    "kind": "Method",
    "detail": "Function (} const FNetTokenStoreState*)",
    "insertText": "GetLocalNetTokenStoreState()"
  },
  {
    "label": "InitRemoteNetTokenStoreState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRemoteNetTokenStoreState(uint32 ConnectionId)"
  },
  {
    "label": "GetRemoteNetTokenStoreState()",
    "kind": "Method",
    "detail": "Function (const FNetTokenStoreState*)",
    "insertText": "GetRemoteNetTokenStoreState(uint32 ConnectionId)"
  },
  {
    "label": "WriteTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTokenData(FNetSerializationContext& Context, const FNetToken NetToken)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadTokenData(FNetSerializationContext& Context, const FNetToken NetToken, FNetTokenStoreState& RemoteNetTokenStoreState)"
  },
  {
    "label": "WriteTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTokenData(FArchive& Ar, const FNetToken NetToken)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadTokenData(FArchive& Ar, const FNetToken NetToken, FNetTokenStoreState& RemoteNetTokenStoreState)"
  },
  {
    "label": "ConditionalWriteNetTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalWriteNetTokenData(FNetSerializationContext& Context, Private::FNetExportContext* ExportContext, const FNetToken NetToken)"
  },
  {
    "label": "ConditionalReadNetTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalReadNetTokenData(FNetSerializationContext& Context, const FNetToken NetToken)"
  },
  {
    "label": "AppendExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExport(FNetSerializationContext&, FNetToken NetToken)"
  },
  {
    "label": "WriteNetTokenWithKnownType()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "WriteNetTokenWithKnownType(FNetSerializationContext& Context, FNetToken NetToken)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_NET_VALIDATE_NETTOKENTYPE)",
    "insertText": "if(NetToken.IsValid())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T* DataStore = GetDataStore<)",
    "insertText": "T()"
  },
  {
    "label": "InternalWriteNetToken()",
    "kind": "Method",
    "detail": "Function (} } # endif const bool bWriteTypeId = false ;)",
    "insertText": "InternalWriteNetToken(Context, NetToken, bWriteTypeId)"
  },
  {
    "label": "ReadNetTokenWithKnownType()",
    "kind": "Method",
    "detail": "Function (} template<T> FNetToken)",
    "insertText": "ReadNetTokenWithKnownType(FNetSerializationContext& Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FNetToken NetToken ;)",
    "insertText": "if(T* DataStore = GetDataStore<T>())"
  },
  {
    "label": "ReadNetToken()",
    "kind": "Method",
    "detail": "Function (NetToken = DataStore ->)",
    "insertText": "ReadNetToken(Context)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogNetToken, Error, TEXT(\"ReadNetTokenWithKnownType Tried to read NetToken using invalid NetTokenStore %s\"), *(T::GetTokenStoreName().ToString()))"
  },
  {
    "label": "WriteNetToken()",
    "kind": "Method",
    "detail": "Function (} return NetToken ; } void)",
    "insertText": "WriteNetToken(FNetSerializationContext& Context, FNetToken NetToken)"
  },
  {
    "label": "ReadNetToken()",
    "kind": "Method",
    "detail": "Function (} FNetToken)",
    "insertText": "ReadNetToken(FNetSerializationContext& Context)"
  },
  {
    "label": "WriteNetToken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteNetToken(FArchive& Ar, FNetToken NetToken)"
  },
  {
    "label": "InternalWriteNetToken()",
    "kind": "Method",
    "detail": "Function (const bool bWriteTypeId = true ;)",
    "insertText": "InternalWriteNetToken(Ar, NetToken, bWriteTypeId)"
  },
  {
    "label": "InternalWriteNetToken()",
    "kind": "Method",
    "detail": "Function (} private : UNetTokenDataStream ; FNetTokenDataStore ; using FNetTokenStoreKey = FNetTokenDataStore::FNetTokenStoreKey ; void)",
    "insertText": "InternalWriteNetToken(UE::Net::FNetSerializationContext& Context, FNetToken Token, bool bWriteTokenType)"
  },
  {
    "label": "InternalWriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalWriteNetToken(FArchive& Ar, FNetToken Token, bool bWriteTokenType)"
  },
  {
    "label": "InternalReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "InternalReadNetToken(UE::Net::FNetSerializationContext& Context, FNetToken::FTypeId TokenTypeId)"
  },
  {
    "label": "InternalReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "InternalReadNetToken(FArchive& Ar, FNetToken::FTypeId TokenTypeId)"
  },
  {
    "label": "ValidateAndStoreNetTokenData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAndStoreNetTokenData(FNetTokenDataStore& DataStore, FNetTokenStoreState& RemoteNetTokenStoreState, const FNetToken NetToken, const FNetTokenStoreKey StoreKey)"
  },
  {
    "label": "GetAllNetTokens()",
    "kind": "Method",
    "detail": "Function (TArray<FNetToken>)",
    "insertText": "GetAllNetTokens()"
  },
  {
    "label": "MakeNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "MakeNetToken(uint32 TypeId, uint32 Index, FNetToken::ENetTokenAuthority Authority)"
  },
  {
    "label": "NextTokenStoreKeyIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NextTokenStoreKeyIndex(uint32)StoredTokens.Num()"
  },
  {
    "label": "TokenKey()",
    "kind": "Method",
    "detail": "Function (FNetTokenStoreKey)",
    "insertText": "TokenKey(NextTokenStoreKeyIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StoredTokens .)",
    "insertText": "Add(FNetToken())"
  }
]