[
  {
    "label": "UNetTokenDataStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetTokenDataStream"
  },
  {
    "label": "FNetTokenDataStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenDataStore"
  },
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FNetTokenStoreState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreState"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FNetExportContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExportContext"
  },
  {
    "label": "FNetTokenDataStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenDataStore"
  },
  {
    "label": "FNetTokenStoreKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreKey"
  },
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitParams"
  },
  {
    "label": "WriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNetToken(UE::Net::FNetSerializationContext& Context, FNetToken Token)"
  },
  {
    "label": "ReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "ReadNetToken(UE::Net::FNetSerializationContext& Context)"
  },
  {
    "label": "WriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNetToken(FArchive& Ar, FNetToken Token)"
  },
  {
    "label": "ReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "ReadNetToken(FArchive& Ar)"
  },
  {
    "label": "FNetTokenDataStore()",
    "kind": "Method",
    "detail": "Function (IRISCORE_API)",
    "insertText": "FNetTokenDataStore(FNetTokenStore& InTokenStore)"
  },
  {
    "label": "CreateAndStoreTokenForKey()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "CreateAndStoreTokenForKey(FNetTokenStoreKey Key)"
  },
  {
    "label": "StoreTokenForKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreTokenForKey(FNetTokenStoreKey Key, FNetToken NetToken)"
  },
  {
    "label": "GetNextNetTokenStoreKey()",
    "kind": "Method",
    "detail": "Function (FNetTokenDataStore::FNetTokenStoreKey)",
    "insertText": "GetNextNetTokenStoreKey()"
  },
  {
    "label": "FNetTokenStore()",
    "kind": "Method",
    "detail": "Function (IRISCORE_API)",
    "insertText": "FNetTokenStore()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FInitParams& InitParams)"
  },
  {
    "label": "RegisterDataStore()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDataStore(TUniquePtr<FNetTokenDataStore> DataStore, FName TokenStoreName)"
  },
  {
    "label": "InitRemoteNetTokenStoreState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRemoteNetTokenStoreState(uint32 ConnectionId)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadTokenData(FNetSerializationContext& Context, const FNetToken NetToken, FNetTokenStoreState& RemoteNetTokenStoreState)"
  },
  {
    "label": "ReadTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadTokenData(FArchive& Ar, const FNetToken NetToken, FNetTokenStoreState& RemoteNetTokenStoreState)"
  },
  {
    "label": "ConditionalReadNetTokenData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalReadNetTokenData(FNetSerializationContext& Context, const FNetToken NetToken)"
  },
  {
    "label": "AppendExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExport(FNetSerializationContext&, FNetToken NetToken)"
  },
  {
    "label": "InternalReadNetToken()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "InternalReadNetToken(Context, FNetToken::InvalidTokenTypeId)"
  },
  {
    "label": "InternalReadNetToken()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "InternalReadNetToken(Ar, FNetToken::InvalidTokenTypeId)"
  },
  {
    "label": "InternalWriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalWriteNetToken(UE::Net::FNetSerializationContext& Context, FNetToken Token, bool bWriteTokenType)"
  },
  {
    "label": "InternalWriteNetToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalWriteNetToken(FArchive& Ar, FNetToken Token, bool bWriteTokenType)"
  },
  {
    "label": "InternalReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "InternalReadNetToken(UE::Net::FNetSerializationContext& Context, FNetToken::FTypeId TokenTypeId)"
  },
  {
    "label": "InternalReadNetToken()",
    "kind": "Method",
    "detail": "Function (FNetToken)",
    "insertText": "InternalReadNetToken(FArchive& Ar, FNetToken::FTypeId TokenTypeId)"
  },
  {
    "label": "ValidateAndStoreNetTokenData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateAndStoreNetTokenData(FNetTokenDataStore& DataStore, FNetTokenStoreState& RemoteNetTokenStoreState, const FNetToken NetToken, const FNetTokenStoreKey StoreKey)"
  },
  {
    "label": "FNetToken()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FNetToken(TypeId, Index, Authority)"
  },
  {
    "label": "TokenKey()",
    "kind": "Method",
    "detail": "Function (FNetTokenStoreKey)",
    "insertText": "TokenKey(NextTokenStoreKeyIndex)"
  },
  {
    "label": "FNetTokenStoreKey()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FNetTokenStoreKey()"
  }
]