[
  {
    "label": "FConvolutionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvolutionSettings"
  },
  {
    "label": "IConvolutionAlgorithm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConvolutionAlgorithm"
  },
  {
    "label": "IConvolutionAlgorithmFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConvolutionAlgorithmFactory"
  },
  {
    "label": "FConvolutionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvolutionFactory"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" namespace Audio { struct FConvolutionSettings { bool bEnableHardwareAcceleration = true ; int32 BlockNumSamples = 2 5 6 ; int32 NumInputChannels = 0 ; int32 NumOutputChannels = 0 ; int32 NumImpulseResponses = 0 ; int32 MaxNumImpulseResponseSamples = 0 ; bool)",
    "insertText": "operator(const FConvolutionSettings& Other)"
  },
  {
    "label": "IConvolutionAlgorithm()",
    "kind": "Method",
    "detail": "Function (} } ; class IConvolutionAlgorithm { public : ~)",
    "insertText": "IConvolutionAlgorithm()"
  },
  {
    "label": "GetNumSamplesInBlock()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumSamplesInBlock()"
  },
  {
    "label": "GetNumAudioInputs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAudioInputs()"
  },
  {
    "label": "GetNumAudioOutputs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAudioOutputs()"
  },
  {
    "label": "ProcessAudioBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioBlock(const float* const InSamples[], float* const OutSamples[])"
  },
  {
    "label": "ResetAudioHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAudioHistory()"
  },
  {
    "label": "GetMaxNumImpulseResponseSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxNumImpulseResponseSamples()"
  },
  {
    "label": "GetNumImpulseResponses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumImpulseResponses()"
  },
  {
    "label": "GetNumImpulseResponseSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumImpulseResponseSamples(int32 InImpulseResponseIndex)"
  },
  {
    "label": "SetImpulseResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImpulseResponse(int32 InImpulseResponseIndex, const float* InSamples, int32 NumSamples)"
  },
  {
    "label": "SetMatrixGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMatrixGain(int32 InAudioInputIndex, int32 InImpulseResponseIndex, int32 InAudioOutputIndex, float InGain)"
  },
  {
    "label": "GetMatrixGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMatrixGain(int32 InAudioInputIndex, int32 InImpulseResponseIndex, int32 InAudioOutputIndex)"
  },
  {
    "label": "IConvolutionAlgorithmFactory()",
    "kind": "Method",
    "detail": "Function (} ; class IConvolutionAlgorithmFactory : public IModularFeature { public : ~)",
    "insertText": "IConvolutionAlgorithmFactory()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "GetFactoryName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetFactoryName()"
  },
  {
    "label": "IsHardwareAccelerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareAccelerated()"
  },
  {
    "label": "AreConvolutionSettingsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreConvolutionSettingsSupported(const FConvolutionSettings& InSettings)"
  },
  {
    "label": "NewConvolutionAlgorithm()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IConvolutionAlgorithm>)",
    "insertText": "NewConvolutionAlgorithm(const FConvolutionSettings& InSettings)"
  },
  {
    "label": "NewConvolutionAlgorithm()",
    "kind": "Method",
    "detail": "Function (} ; class FConvolutionFactory { public : const FName AnyAlgorithmFactory ; TUniquePtr<IConvolutionAlgorithm>)",
    "insertText": "NewConvolutionAlgorithm(const FConvolutionSettings& InSettings, const FName& InAlgorithmFactoryName = AnyAlgorithmFactory)"
  }
]