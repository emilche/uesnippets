[
  {
    "label": "FPhysInterface_Chaos",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysInterface_Chaos"
  },
  {
    "label": "FChaosSolverConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosSolverConfiguration"
  },
  {
    "label": "FSkeletalMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshPhysicsProxy"
  },
  {
    "label": "FStaticMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshPhysicsProxy"
  },
  {
    "label": "FPerSolverFieldSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerSolverFieldSystem"
  },
  {
    "label": "FPersistentPhysicsTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentPhysicsTask"
  },
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FCharacterGroundConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraint"
  },
  {
    "label": "FCharacterGroundConstraintProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintProxy"
  },
  {
    "label": "FSingleParticleProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleParticleProxy"
  },
  {
    "label": "FGeometryParticleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryParticleBuffer"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "ISpatialAccelerationCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAccelerationCollection"
  },
  {
    "label": "FAccelerationStructureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccelerationStructureHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TSolverSimMaterialScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSolverSimMaterialScope"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "FDispatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDispatcher"
  },
  {
    "label": "FEventDefaults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventDefaults"
  },
  {
    "label": "FPhysScene_ChaosInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysScene_ChaosInterface"
  },
  {
    "label": "FPBDRigidDirtyParticlesBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidDirtyParticlesBuffer"
  },
  {
    "label": "FPendingDestroyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingDestroyInfo"
  },
  {
    "label": "AdvanceSolverNoPushHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Defines . h \" # include \" Chaos / Framework / MultiBufferResource . h \" # include \" Chaos / Framework / PhysicsProxy . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Chaos / PBDRigidParticles . h \" # include \" Chaos / PBDRigidsEvolutionGBF . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" Chaos / PBDRigidDynamicSpringConstraints . h \" # include \" Chaos / PBDPositionConstraints . h \" # include \" Chaos / PBDSuspensionConstraints . h \" # include \" Chaos / PBDJointConstraints . h \" # include \" Chaos / PerParticleGravity . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Transform . h \" # include \" Chaos / Framework / PhysicsProxy . h \" # include \" CoreMinimal . h \" # include \" Containers / Queue . h \" # include \" EventManager . h \" # include \" Field / FieldSystem . h \" # include \" PBDRigidActiveParticlesBuffer . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" # include \" PhysicsProxy / JointConstraintProxy . h \" # include \" PhysicsProxy / SuspensionConstraintProxy . h \" # include \" SolverEventFilters . h \" # include \" Chaos / PBDRigidsEvolutionFwd . h \" # include \" ChaosSolversModule . h \" class FPhysInterface_Chaos ; struct FChaosSolverConfiguration ; class FSkeletalMeshPhysicsProxy ; class FStaticMeshPhysicsProxy ; class FPerSolverFieldSystem ; # define PBDRIGID_PREALLOC_COUNT 1 0 2 4 # define KINEMATIC_GEOM_PREALLOC_COUNT 1 0 0 # define GEOMETRY_PREALLOC_COUNT 1 0 0 int32 ChaosSolverParticlePoolNumFrameUntilShrink ; namespace ChaosTest { template<TSolver> void)",
    "insertText": "AdvanceSolverNoPushHelper(TSolver* Solver, Chaos::FReal Dt)"
  },
  {
    "label": "TSolverSimMaterialScope()",
    "kind": "Method",
    "detail": "Function (} namespace Chaos { class FPersistentPhysicsTask ; class FChaosArchive ; class FCharacterGroundConstraint ; class FCharacterGroundConstraintProxy ; class FSingleParticleProxy ; class FGeometryParticleBuffer ; class FClusterUnionPhysicsProxy ; template<T,R,int d> class ISpatialAccelerationCollection ; class FAccelerationStructureHandle ; enum class ELockType : uint8 { Read,Write } ; template<ELockType LockType> struct TSolverSimMaterialScope {)",
    "insertText": "TSolverSimMaterialScope()"
  },
  {
    "label": "FPBDRigidsSolver()",
    "kind": "Method",
    "detail": "Function (} ; class FPBDRigidsSolver : public FPhysicsSolverBase {)",
    "insertText": "FPBDRigidsSolver(const EMultiBufferMode BufferingModeIn, UObject* InOwner, FReal AsyncDt)"
  },
  {
    "label": "FPBDRigidsSolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDRigidsSolver()"
  },
  {
    "label": "ChangeBufferMode()",
    "kind": "Method",
    "detail": "Function (public : typedef FPhysicsSolverBase Super ; class FPersistentPhysicsTask ; class::FChaosSolversModule ; template<EThreadingMode Mode> class FDispatcher ; class FEventDefaults ; class FPhysInterface_Chaos ; class FPhysScene_ChaosInterface ; class FPBDRigidDirtyParticlesBuffer ; void* PhysSceneHack ; typedef FPBDRigidsSOAs FParticlesType ; typedef FPBDRigidDirtyParticlesBuffer FDirtyParticlesBuffer ; typedef Chaos::FGeometryParticle FParticle ; typedef Chaos::FGeometryParticleHandle FHandle ; typedef Chaos::FPBDRigidsEvolutionGBF FPBDRigidsEvolution ; typedef FPBDRigidDynamicSpringConstraints FRigidDynamicSpringConstraints ; typedef FPBDPositionConstraints FPositionConstraints ; using FJointConstraints = FPBDJointConstraints ; void)",
    "insertText": "ChangeBufferMode(Chaos::EMultiBufferMode InBufferMode)"
  },
  {
    "label": "RegisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObject(FSingleParticlePhysicsProxy* Proxy)"
  },
  {
    "label": "UnregisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObject(FSingleParticlePhysicsProxy* Proxy)"
  },
  {
    "label": "RegisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObject(FGeometryCollectionPhysicsProxy* InProxy)"
  },
  {
    "label": "UnregisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObject(FGeometryCollectionPhysicsProxy* InProxy)"
  },
  {
    "label": "RegisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObject(FClusterUnionPhysicsProxy* Proxy)"
  },
  {
    "label": "UnregisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObject(FClusterUnionPhysicsProxy* Proxy)"
  },
  {
    "label": "RegisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObject(Chaos::FJointConstraint* GTConstraint)"
  },
  {
    "label": "UnregisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObject(Chaos::FJointConstraint* GTConstraint)"
  },
  {
    "label": "RegisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObject(Chaos::FSuspensionConstraint* GTConstraint)"
  },
  {
    "label": "UnregisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObject(Chaos::FSuspensionConstraint* GTConstraint)"
  },
  {
    "label": "RegisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObject(Chaos::FCharacterGroundConstraint* GTConstraint)"
  },
  {
    "label": "UnregisterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObject(Chaos::FCharacterGroundConstraint* GTConstraint)"
  },
  {
    "label": "GetDirtyParticlesBuffer()",
    "kind": "Method",
    "detail": "Function (FDirtyParticlesBuffer*)",
    "insertText": "GetDirtyParticlesBuffer()"
  },
  {
    "label": "NumJointConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumJointConstraints()"
  },
  {
    "label": "NumCollisionConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumCollisionConstraints()"
  },
  {
    "label": "AdvanceSolverNoPushHelper()",
    "kind": "Method",
    "detail": "Function (template<TSolver> void)",
    "insertText": "AdvanceSolverNoPushHelper(TSolver* Solver, FReal Dt)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "StartingSceneSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartingSceneSimulation()"
  },
  {
    "label": "CompleteSceneSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteSceneSimulation()"
  },
  {
    "label": "UpdateGameThreadStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGameThreadStructures()"
  },
  {
    "label": "SetCurrentFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentFrame(const int32 CurrentFrameIn)"
  },
  {
    "label": "GetCurrentFrame()",
    "kind": "Method",
    "detail": "Function (CurrentFrame = CurrentFrameIn ; } int32&)",
    "insertText": "GetCurrentFrame()"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->SetNumPositionIterations(InNumIterations)"
  },
  {
    "label": "SetVelocityIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVelocityIterations(const int32 InNumIterations)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->SetNumVelocityIterations(InNumIterations)"
  },
  {
    "label": "SetProjectionIterations()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProjectionIterations(const int32 InNumIterations)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->SetNumProjectionIterations(InNumIterations)"
  },
  {
    "label": "SetCollisionCullDistance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionCullDistance(const FReal InCullDistance)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->GetCollisionConstraints().SetCullDistance(InCullDistance)"
  },
  {
    "label": "SetVelocityBoundsExpansion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVelocityBoundsExpansion(const FReal BoundsVelocityMultiplier, const FReal MaxBoundsVelocityExpansion)"
  },
  {
    "label": "SetVelocityBoundsExpansionMACD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVelocityBoundsExpansionMACD(const FReal BoundsVelocityMultiplier, const FReal MaxBoundsVelocityExpansion)"
  },
  {
    "label": "SetCollisionMaxPushOutVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionMaxPushOutVelocity(const FReal InMaxPushOutVelocity)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->GetCollisionConstraints().SetMaxPushOutVelocity(InMaxPushOutVelocity)"
  },
  {
    "label": "SetCollisionDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionDepenetrationVelocity(const FRealSingle InVelocity)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->GetCollisionConstraints().SetDepenetrationVelocity(InVelocity)"
  },
  {
    "label": "SetGenerateCollisionData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGenerateCollisionData(bool bDoGenerate)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->SetGenerateCollisionEvents(bDoGenerate)"
  },
  {
    "label": "SetGenerateBreakingData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGenerateBreakingData(bool bDoGenerate)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->SetGenerateBreakingEvents(bDoGenerate)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->GetRigidClustering().SetGenerateClusterBreaking(bDoGenerate)"
  },
  {
    "label": "SetGenerateTrailingData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGenerateTrailingData(bool bDoGenerate)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->SetGenerateTrailingEvents(bDoGenerate)"
  },
  {
    "label": "SetGenerateRemovalData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGenerateRemovalData(bool bDoGenerate)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->SetGenerateRemovalEvents(bDoGenerate)"
  },
  {
    "label": "SetCollisionFilterSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionFilterSettings(const FSolverCollisionFilterSettings& InCollisionFilterSettings)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->GetCollisionFilter()->UpdateFilterSettings(InCollisionFilterSettings)"
  },
  {
    "label": "SetBreakingFilterSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBreakingFilterSettings(const FSolverBreakingFilterSettings& InBreakingFilterSettings)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->GetBreakingFilter()->UpdateFilterSettings(InBreakingFilterSettings)"
  },
  {
    "label": "SetTrailingFilterSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTrailingFilterSettings(const FSolverTrailingFilterSettings& InTrailingFilterSettings)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->GetTrailingFilter()->UpdateFilterSettings(InTrailingFilterSettings)"
  },
  {
    "label": "SetRemovalFilterSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRemovalFilterSettings(const FSolverRemovalFilterSettings& InRemovalFilterSettings)"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEventFilters()->GetRemovalFilter()->UpdateFilterSettings(InRemovalFilterSettings)"
  },
  {
    "label": "IsDetemerministic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDetemerministic()"
  },
  {
    "label": "SetIsDeterministic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDeterministic(const bool bInIsDeterministic)"
  },
  {
    "label": "GetJointConstraints()",
    "kind": "Method",
    "detail": "Function (FJointConstraints&)",
    "insertText": "GetJointConstraints()"
  },
  {
    "label": "GetSuspensionConstraints()",
    "kind": "Method",
    "detail": "Function (} FPBDSuspensionConstraints&)",
    "insertText": "GetSuspensionConstraints()"
  },
  {
    "label": "SetSuspensionTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSuspensionTarget(Chaos::FSuspensionConstraint* GTConstraint, const FVector& TargetPos, const FVector& Normal, bool Enabled)"
  },
  {
    "label": "GetCharacterGroundConstraints()",
    "kind": "Method",
    "detail": "Function (FCharacterGroundConstraintContainer&)",
    "insertText": "GetCharacterGroundConstraints()"
  },
  {
    "label": "EnableRewindCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableRewindCapture(int32 NumFrames, bool InUseCollisionResimCache, TUniquePtr<IRewindCallback>&& RewindCallback)"
  },
  {
    "label": "EnableRewindCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRewindCapture(int32 NumFrames, bool InUseCollisionResimCache)"
  },
  {
    "label": "EnableRewindCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRewindCapture(int32 NumFrames)"
  },
  {
    "label": "EnableRewindCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRewindCapture()"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (FPBDRigidsEvolution*)",
    "insertText": "GetEvolution()"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (} FParticlesType&)",
    "insertText": "GetParticles()"
  },
  {
    "label": "FlipEventManagerBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlipEventManagerBuffer()"
  },
  {
    "label": "FlipBuffersIfRequired()",
    "kind": "Method",
    "detail": "Function (MEventManager ->)",
    "insertText": "FlipBuffersIfRequired()"
  },
  {
    "label": "GetEventFilters()",
    "kind": "Method",
    "detail": "Function (} FSolverEventFilters*)",
    "insertText": "GetEventFilters()"
  },
  {
    "label": "SyncEvents_GameThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SyncEvents_GameThread()"
  },
  {
    "label": "PreIntegrateDebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreIntegrateDebugDraw(FReal Dt)"
  },
  {
    "label": "PreSolveDebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSolveDebugDraw(FReal Dt)"
  },
  {
    "label": "PostTickDebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickDebugDraw(FReal Dt)"
  },
  {
    "label": "GetGeometryCollectionPhysicsProxies_Internal()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FGeometryCollectionPhysicsProxy*>&)",
    "insertText": "GetGeometryCollectionPhysicsProxies_Internal()"
  },
  {
    "label": "CreateMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMaterial(Chaos::FMaterialHandle InHandle, const Chaos::FChaosPhysicsMaterial& InNewData)"
  },
  {
    "label": "DestroyMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMaterial(Chaos::FMaterialHandle InHandle)"
  },
  {
    "label": "UpdateMaterialMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialMask(Chaos::FMaterialMaskHandle InHandle, const Chaos::FChaosPhysicsMaterialMask& InNewData)"
  },
  {
    "label": "CreateMaterialMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMaterialMask(Chaos::FMaterialMaskHandle InHandle, const Chaos::FChaosPhysicsMaterialMask& InNewData)"
  },
  {
    "label": "DestroyMaterialMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMaterialMask(Chaos::FMaterialMaskHandle InHandle)"
  },
  {
    "label": "GetQueryMaterials_External()",
    "kind": "Method",
    "detail": "Function (const THandleArray<FChaosPhysicsMaterial>&)",
    "insertText": "GetQueryMaterials_External()"
  },
  {
    "label": "FinalizeRewindData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinalizeRewindData(const TParticleView<FPBDRigidParticles>& DirtyParticles)"
  },
  {
    "label": "GetPerSolverField()",
    "kind": "Method",
    "detail": "Function (FPerSolverFieldSystem&)",
    "insertText": "GetPerSolverField()"
  },
  {
    "label": "GetInternalAccelerationStructure_Internal()",
    "kind": "Method",
    "detail": "Function (const ISpatialAccelerationCollection<FAccelerationStructureHandle,FReal,3>*)",
    "insertText": "GetInternalAccelerationStructure_Internal()"
  },
  {
    "label": "ApplyConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyConfig(const FChaosSolverConfiguration& InConfig)"
  },
  {
    "label": "KillSafeAsyncTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillSafeAsyncTasks()"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEvolution()->KillSafeAsyncTasks()"
  },
  {
    "label": "AreAnyTasksPending()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreAnyTasksPending()"
  },
  {
    "label": "FieldParameterUpdateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldParameterUpdateCallback(Chaos::FPBDPositionConstraints& PositionTarget, TMap<int32, int32>& TargetedParticles)"
  },
  {
    "label": "FieldForcesUpdateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldForcesUpdateCallback()"
  },
  {
    "label": "ResetStatCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStatCounters()"
  },
  {
    "label": "UpdateStatCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatCounters()"
  },
  {
    "label": "UpdateExpensiveStatCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExpensiveStatCounters()"
  },
  {
    "label": "GetParticleProxy_PT()",
    "kind": "Method",
    "detail": "Function (FSingleParticlePhysicsProxy*)",
    "insertText": "GetParticleProxy_PT(const FUniqueIdx& Idx)"
  },
  {
    "label": "GetParticleProxy_PT()",
    "kind": "Method",
    "detail": "Function (FSingleParticlePhysicsProxy*)",
    "insertText": "GetParticleProxy_PT(const FGeometryParticleHandle& Handle)"
  },
  {
    "label": "SetParticleDynamicMisc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleDynamicMisc(FPBDRigidParticleHandle* Rigid, const FParticleDynamicMisc& DynamicMisc)"
  },
  {
    "label": "ApplyCallbacks_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCallbacks_Internal()"
  },
  {
    "label": "OnDebugNameChanged()",
    "kind": "Method",
    "detail": "Function (protected : # if CHAOS_DEBUG_NAME void)",
    "insertText": "OnDebugNameChanged()"
  },
  {
    "label": "BufferPhysicsResults()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "BufferPhysicsResults()"
  },
  {
    "label": "PrepareAdvanceBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAdvanceBy(const FReal DeltaTime)"
  },
  {
    "label": "AdvanceSolverBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSolverBy(const FSubStepInfo& SubStepInfo)"
  },
  {
    "label": "PushPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushPhysicsState(const FReal ExternalDt, const int32 NumSteps, const int32 NumExternalSteps)"
  },
  {
    "label": "SetExternalTimestampConsumed_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalTimestampConsumed_Internal(const int32 Timestamp)"
  },
  {
    "label": "ApplyCVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCVars()"
  },
  {
    "label": "UpdateIsDeterministic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIsDeterministic()"
  },
  {
    "label": "DebugDrawShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawShapes(const bool bShowStatic, const bool bShowKinematic, const bool bShowDynamic)"
  },
  {
    "label": "ProcessSinglePushedData_Internal()",
    "kind": "Method",
    "detail": "Function (int32 CurrentFrame ; bool bHasFloor ; bool bIsFloorAnalytic ; FReal FloorHeight ; bool bIsDeterministic ; FParticleUniqueIndicesMultithreaded UniqueIndices ; FParticlesType Particles ; TUniquePtr<FPBDRigidsEvolution> MEvolution ; TUniquePtr<FEventManager> MEventManager ; TUniquePtr<FSolverEventFilters> MSolverEventFilters ; TUniquePtr<FDirtyParticlesBuffer> MDirtyParticlesBuffer ; TSharedPtr<FCriticalSection> MCurrentLock ; TSparseArray<FSingleParticlePhysicsProxy*> SingleParticlePhysicsProxies_PT ; TArray<FGeometryCollectionPhysicsProxy*> GeometryCollectionPhysicsProxies_Internal ; TArray<FGeometryCollectionPhysicsProxy*> GeometryCollectionPhysicsProxiesField_Internal ; TArray<FClusterUnionPhysicsProxy*> ClusterUnionPhysicsProxies_Internal ; TArray<FJointConstraintPhysicsProxy*> JointConstraintPhysicsProxies_Internal ; TArray<FCharacterGroundConstraintProxy*> CharacterGroundConstraintProxies_Internal ; TUniquePtr<FPerSolverFieldSystem> PerSolverField ; THandleArray<FChaosPhysicsMaterial> QueryMaterials_External ; THandleArray<FChaosPhysicsMaterialMask> QueryMaterialMasks_External ; THandleArray<FChaosPhysicsMaterial> SimMaterials ; THandleArray<FChaosPhysicsMaterialMask> SimMaterialMasks ; struct FPendingDestroyInfo { FSingleParticlePhysicsProxy* Proxy ; int32 DestroyOnStep ; FGeometryParticleHandle* Handle ; FUniqueIdx UniqueIdx ; } ; TArray<FPendingDestroyInfo> PendingDestroyPhysicsProxy ; TArray<FGeometryCollectionPhysicsProxy*> PendingDestroyGeometryCollectionPhysicsProxy ; TArray<FClusterUnionPhysicsProxy*> PendingDestroyClusterUnionProxy ; void)",
    "insertText": "ProcessSinglePushedData_Internal(FPushPhysicsData& PushData)"
  },
  {
    "label": "ProcessPushedData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPushedData_Internal(FPushPhysicsData& PushData)"
  },
  {
    "label": "DestroyPendingProxies_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPendingProxies_Internal()"
  },
  {
    "label": "ConditionalApplyRewind_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalApplyRewind_Internal()"
  },
  {
    "label": "IsResimming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResimming()"
  },
  {
    "label": "SetIsResimming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsResimming(bool bIsResimming)"
  },
  {
    "label": "SetDebugDrawScene()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_DRAW public : void)",
    "insertText": "SetDebugDrawScene(const ChaosDD::Private::FChaosDDScenePtr& InCDDScene)"
  },
  {
    "label": "TSolverSimMaterialScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSolverSimMaterialScope(FPhysicsSolverBase* InSolver) : Solver(InSolver)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (Solver -> SimMaterialLock .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (Solver -> SimMaterialLock .)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (Solver -> SimMaterialLock .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (Solver -> SimMaterialLock .)",
    "insertText": "WriteUnlock()"
  }
]