[
  {
    "label": "FInstancedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedStruct"
  },
  {
    "label": "TInstancedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInstancedStruct"
  },
  {
    "label": "TStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructView"
  },
  {
    "label": "FConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstStructView"
  },
  {
    "label": "TConstStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConstStructView"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FStructSharedMemoryDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructSharedMemoryDeleter"
  },
  {
    "label": "FConstSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstSharedStruct"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "TSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSharedStruct"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "TConstSharedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConstSharedStruct"
  },
  {
    "label": "FStructSharedMemory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StructUtils . h \" # include \" StructUtils / InstancedStruct . h \" # include \" StructUtils / StructUtilsTypes . h \" # include \" SharedStruct . generated . h \" struct FInstancedStruct ; template<BaseStructT> struct TInstancedStruct ; template<BaseStructT> struct TStructView ; struct FConstStructView ; template<BaseStructT> struct TConstStructView ; struct FStructSharedMemory { ~)",
    "insertText": "FStructSharedMemory()"
  },
  {
    "label": "DestroyStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStruct ->)",
    "insertText": "DestroyStruct(GetMutableMemory())"
  },
  {
    "label": "FStructSharedMemory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructSharedMemory(const FStructSharedMemory& Other)"
  },
  {
    "label": "FStructSharedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructSharedMemory(const FStructSharedMemory&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStructSharedMemory&)",
    "insertText": "operator(const FStructSharedMemory& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStructSharedMemory&)",
    "insertText": "operator(const FStructSharedMemory&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FStructSharedMemoryDeleter { void)",
    "insertText": "operator()(FStructSharedMemory* StructSharedMemory)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(StructSharedMemory)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; TSharedPtr<FStructSharedMemory>)",
    "insertText": "Create(const UScriptStruct& InScriptStruct, const uint8* InStructMemory = nullptr)"
  },
  {
    "label": "CreateImpl()",
    "kind": "Method",
    "detail": "Function (FStructSharedMemory* const StructMemory =)",
    "insertText": "CreateImpl(InScriptStruct, InStructMemory)"
  },
  {
    "label": "CreateArgs()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . TArgs> TSharedPtr<FStructSharedMemory>)",
    "insertText": "CreateArgs(TArgs&&... InArgs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (UE::StructUtils::CheckStructType<)",
    "insertText": "T()"
  },
  {
    "label": "CreateImpl()",
    "kind": "Method",
    "detail": "Function (FStructSharedMemory* const StructMemory =)",
    "insertText": "CreateImpl(*TBaseStructure<T>::Get())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(StructMemory->GetMutableMemory()) T(Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "GetMemory()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetMemory()"
  },
  {
    "label": "GetMutableMemory()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetMutableMemory()"
  },
  {
    "label": "GetScriptStruct()",
    "kind": "Method",
    "detail": "Function (} const UScriptStruct&)",
    "insertText": "GetScriptStruct()"
  },
  {
    "label": "GetScriptStructPtr()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<const UScriptStruct>&)",
    "insertText": "GetScriptStructPtr()"
  },
  {
    "label": "InitializeStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStruct ->)",
    "insertText": "InitializeStruct(GetMutableMemory())"
  },
  {
    "label": "CopyScriptStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStruct ->)",
    "insertText": "CopyScriptStruct(GetMutableMemory(), InStructMemory)"
  },
  {
    "label": "CreateImpl()",
    "kind": "Method",
    "detail": "Function (} } FStructSharedMemory*)",
    "insertText": "CreateImpl(const UScriptStruct& InScriptStruct, const uint8* InStructMemory = nullptr)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 RequiredSize = static_cast<)",
    "insertText": "int32(Align(sizeof(FStructSharedMemory), InScriptStruct.GetMinAlignment())) + InScriptStruct.GetStructureSize()"
  },
  {
    "label": "CA_SUPPRESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CA_SUPPRESS(6386 ) FStructSharedMemory* StructMemory = new(FMemory::Malloc(RequiredSize, InScriptStruct.GetMinAlignment())) FStructSharedMemory(InScriptStruct, InStructMemory)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FSharedStruct()",
    "kind": "Method",
    "detail": "Function (struct FConstSharedStruct ;)",
    "insertText": "FSharedStruct()"
  },
  {
    "label": "FSharedStruct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSharedStruct(const FSharedStruct& InOther)"
  },
  {
    "label": "FSharedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSharedStruct(FSharedStruct&& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSharedStruct&)",
    "insertText": "operator(const FSharedStruct& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSharedStruct&)",
    "insertText": "operator(FSharedStruct&& InOther)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FSharedStruct* Other, uint32 PortFlags)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStructReferencedObjects(class FReferenceCollector& Collector)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "InitializeAs()"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAs(TBaseStructure<T>::Get(), nullptr)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (} template<T,UE::StructUtils::EnableIfNotSharedInstancedOrViewStruct<T>* = nullptr> void)",
    "insertText": "InitializeAs(const T& Struct)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAs(TBaseStructure<T>::Get(), reinterpret_cast<const uint8*>(&Struct))"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAs(Struct.GetScriptStruct(), Struct.GetMemory())"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeAs(const UScriptStruct* InScriptStruct, const uint8* InStructMemory = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (StructMemoryPtr =)",
    "insertText": "Create(*InScriptStruct, InStructMemory)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (} } template<T,. . . TArgs> void)",
    "insertText": "InitializeAs(TArgs&&... InArgs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (StructMemoryPtr = FStructSharedMemory::CreateArgs<)",
    "insertText": "T(Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} template<T> FSharedStruct)",
    "insertText": "Make()"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (FSharedStruct SharedStruct ; SharedStruct .)",
    "insertText": "InitializeAs(Struct)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (FSharedStruct SharedStruct ; SharedStruct .)",
    "insertText": "InitializeAs(InScriptStruct, InStructMemory)"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetPtr()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherType> bool)",
    "insertText": "operator(const OtherType& Other)"
  },
  {
    "label": "CompareStructValues()",
    "kind": "Method",
    "detail": "Function (} template<OtherType> bool)",
    "insertText": "CompareStructValues(const OtherType& Other, uint32 PortFlags = 0)"
  },
  {
    "label": "OtherType()",
    "kind": "Method",
    "detail": "Function (UE::StructUtils::CheckWrapperType<)",
    "insertText": "OtherType()"
  },
  {
    "label": "TSharedStruct()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<FStructSharedMemory> StructMemoryPtr ; } ; template<BaseStructT> struct TSharedStruct {)",
    "insertText": "TSharedStruct()"
  },
  {
    "label": "TSharedStruct()",
    "kind": "Method",
    "detail": "Function (template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TSharedStruct(const TSharedStruct<T>& InOther) : SharedStruct(InOther.SharedStruct)"
  },
  {
    "label": "TSharedStruct()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TSharedStruct(TSharedStruct<T>&& InOther) : SharedStruct(MoveTemp(InOther.SharedStruct))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TSharedStruct&)",
    "insertText": "operator(const TSharedStruct<T>& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedStruct = InOther . SharedStruct ; } return* this ; } template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TSharedStruct&)",
    "insertText": "operator(TSharedStruct<T>&& InOther)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SharedStruct =)",
    "insertText": "MoveTemp(InOther.SharedStruct)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> void)",
    "insertText": "Initialize()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<)",
    "insertText": "T(std::is_same_v<TStructView<T>, T> || std::is_same_v<TConstStructView<T>, T> || std::is_same_v<TSharedStruct<T>, T> || std::is_same_v<TConstSharedStruct<T>, T> || std::is_same_v<TInstancedStruct<T>, T>), T>> void Initialize(const T& Struct)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,. . . TArgs,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> void)",
    "insertText": "Initialize(TArgs&&... InArgs)"
  },
  {
    "label": "InitializeAs()",
    "kind": "Method",
    "detail": "Function (SharedStruct .)",
    "insertText": "InitializeAs(Forward<TArgs>(InArgs)...)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TSharedStruct)",
    "insertText": "Make(const T& Struct)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} template<. . . TArgs> TSharedStruct)",
    "insertText": "Make(TArgs&&... InArgs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> T&)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> bool)",
    "insertText": "operator(const T& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} private : FSharedStruct SharedStruct ; template<U> struct TSharedStruct ; } ; template<> struct TStructOpsTypeTraits<FSharedStruct> : public TStructOpsTypeTraitsBase2<FSharedStruct> { enum { WithIdentical = true,WithAddStructReferencedObjects = true,} ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "FConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstSharedStruct()"
  },
  {
    "label": "FConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstSharedStruct(const FConstSharedStruct& Other)"
  },
  {
    "label": "FConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstSharedStruct(const FSharedStruct& SharedStruct) : StructMemoryPtr(SharedStruct.StructMemoryPtr)"
  },
  {
    "label": "FConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstSharedStruct(FConstSharedStruct&& Other)"
  },
  {
    "label": "FConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstSharedStruct(FSharedStruct&& SharedStruct) : StructMemoryPtr(MoveTemp(SharedStruct.StructMemoryPtr))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstSharedStruct&)",
    "insertText": "operator(const FConstSharedStruct& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConstSharedStruct&)",
    "insertText": "operator(const FSharedStruct& SharedStruct)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StructMemoryPtr = SharedStruct . StructMemoryPtr ; return* this ; } FConstSharedStruct&)",
    "insertText": "operator(FConstSharedStruct&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConstSharedStruct&)",
    "insertText": "operator(FSharedStruct&& InSharedStruct)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (StructMemoryPtr =)",
    "insertText": "MoveTemp(InSharedStruct.StructMemoryPtr)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FConstSharedStruct SharedStruct ; SharedStruct . InitializeAs<)",
    "insertText": "T(Struct)"
  },
  {
    "label": "TConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<const FStructSharedMemory> StructMemoryPtr ; } ; template<BaseStructT> struct TConstSharedStruct {)",
    "insertText": "TConstSharedStruct()"
  },
  {
    "label": "TConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstSharedStruct(const TConstSharedStruct<T>& Other) : ConstSharedStruct(Other.ConstSharedStruct)"
  },
  {
    "label": "TConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstSharedStruct(const TSharedStruct<T>& ConstSharedStruct) : ConstSharedStruct(ConstSharedStruct.SharedStruct)"
  },
  {
    "label": "TConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstSharedStruct(TConstSharedStruct<T>&& Other) : ConstSharedStruct(MoveTemp(Other.ConstSharedStruct))"
  },
  {
    "label": "TConstSharedStruct()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>>)",
    "insertText": "TConstSharedStruct(TSharedStruct<T>&& ConstSharedStruct) : ConstSharedStruct(MoveTemp(ConstSharedStruct.SharedStruct))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TConstSharedStruct&)",
    "insertText": "operator(const TConstSharedStruct<T>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConstSharedStruct = Other . ConstSharedStruct ; } return* this ; } template<T = BaseStructT,= std::enable_if_t<std::is_base_of_v<BaseStructT,std::decay_t<T>>>> TConstSharedStruct&)",
    "insertText": "operator(const TSharedStruct<T>& SharedStruct)"
  },
  {
    "label": "BaseStructT()",
    "kind": "Method",
    "detail": "Function (ConstSharedStruct . InitializeAs<)",
    "insertText": "BaseStructT()"
  },
  {
    "label": "BaseStructT()",
    "kind": "Method",
    "detail": "Function (FConstSharedStruct SharedStruct ; SharedStruct . InitializeAs<)",
    "insertText": "BaseStructT(Struct)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TConstSharedStruct SharedStruct ; SharedStruct . template Initialize<)",
    "insertText": "T(InStructMemory)"
  }
]