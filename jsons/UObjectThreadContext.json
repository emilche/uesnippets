[
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FObjectInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectInitializer"
  },
  {
    "label": "IAsyncPackageLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncPackageLoader"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FUObjectThreadContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUObjectThreadContext"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / ThreadSingleton . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UnrealTemplate . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / PropertyPathName . h \" # include \" UObject / ObjectMacros . h \" class FLinkerLoad ; class FName ; class FObjectInitializer ; class IAsyncPackageLoader ; class UObject ; struct FUObjectSerializeContext ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogUObjectThreadContext, Log, All)"
  },
  {
    "label": "FUObjectThreadContext()",
    "kind": "Method",
    "detail": "Function (class FUObjectThreadContext : public TThreadSingleton<FUObjectThreadContext> { TThreadSingleton<FUObjectThreadContext> ;)",
    "insertText": "FUObjectThreadContext()"
  },
  {
    "label": "FUObjectThreadContext()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "FUObjectThreadContext(const FUObjectThreadContext& Other)"
  },
  {
    "label": "FUObjectThreadContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUObjectThreadContext(FUObjectThreadContext&& Other)"
  },
  {
    "label": "PopInitializer()",
    "kind": "Method",
    "detail": "Function (# endif TArray<FObjectInitializer*> InitializerStack ; public : void)",
    "insertText": "PopInitializer()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (InitializerStack .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "PushInitializer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushInitializer(FObjectInitializer* Initializer)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (InitializerStack .)",
    "insertText": "Push(Initializer)"
  },
  {
    "label": "TopInitializer()",
    "kind": "Method",
    "detail": "Function (} FObjectInitializer*)",
    "insertText": "TopInitializer()"
  },
  {
    "label": "TopInitializerChecked()",
    "kind": "Method",
    "detail": "Function (} FObjectInitializer&)",
    "insertText": "TopInitializerChecked()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bool IsRoutingPostLoad ; bool IsDeletingLinkers ; int32 SyncLoadUsingAsyncLoaderCount ; int32 IsInConstructor ; UObject* ConstructedObject ; UObject* CurrentlyPostLoadedObjectByALT ; void* AsyncPackage ; IAsyncPackageLoader* AsyncPackageLoader ; EInternalObjectFlags AsyncVisibilityFilter = EInternalObjectFlags::None ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "GetSerializeContext()",
    "kind": "Method",
    "detail": "Function (# endif FUObjectSerializeContext*)",
    "insertText": "GetSerializeContext()"
  },
  {
    "label": "FUObjectSerializeContext()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FUObjectSerializeContext> SerializeContext ; } ; struct FUObjectSerializeContext { class FUObjectThreadContext ; private :)",
    "insertText": "FUObjectSerializeContext()"
  },
  {
    "label": "AddLoadedObject()",
    "kind": "Method",
    "detail": "Function (int32 RefCount ; int32 ImportCount ; int32 ForcedExportCount ; int32 ObjBeginLoadCount ; TArray<UObject*> ObjectsLoaded ; TArray<FLinkerLoad*> DelayedLinkerClosePackages ; public : UObject* SerializedObject ; FLinkerLoad* SerializedPackageLinker ; int32 SerializedImportIndex ; FLinkerLoad* SerializedImportLinker ; int32 SerializedExportIndex ; FLinkerLoad* SerializedExportLinker ; # if WITH_EDITORONLY_DATA UE_INTERNAL UE::FPropertyPathName SerializedPropertyPath ; UE_INTERNAL bool bTrackSerializedPropertyPath ; UE_INTERNAL bool bTrackInitializedProperties ; UE_INTERNAL bool bTrackSerializedProperties ; UE_INTERNAL bool bTrackUnknownProperties ; UE_INTERNAL bool bTrackUnknownEnumNames ; UE_INTERNAL bool bImpersonateProperties ; # endif void)",
    "insertText": "AddLoadedObject(UObject* InObject)"
  },
  {
    "label": "AddUniqueLoadedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniqueLoadedObjects(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "HasStartedLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStartedLoading()"
  },
  {
    "label": "DecrementBeginLoadCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecrementBeginLoadCount()"
  },
  {
    "label": "IncrementImportCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IncrementImportCount()"
  },
  {
    "label": "IncrementForcedExportCount()",
    "kind": "Method",
    "detail": "Function (ImportCount = 0 ; } int32)",
    "insertText": "IncrementForcedExportCount()"
  },
  {
    "label": "PRIVATE_PatchNewObjectIntoExport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PRIVATE_PatchNewObjectIntoExport(UObject* OldObject, UObject* NewObject)"
  },
  {
    "label": "PRIVATE_GetObjectsLoadedInternalUseOnly()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>&)",
    "insertText": "PRIVATE_GetObjectsLoadedInternalUseOnly()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (InLoadedObject .)",
    "insertText": "Append(ObjectsLoaded)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ObjectsLoaded .)",
    "insertText": "Reset()"
  },
  {
    "label": "ReserveObjectsLoaded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveObjectsLoaded(int32 InReserveSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ObjectsLoaded .)",
    "insertText": "Reserve(InReserveSize)"
  },
  {
    "label": "GetNumObjectsLoaded()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumObjectsLoaded()"
  },
  {
    "label": "AddDelayedLinkerClosePackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDelayedLinkerClosePackage(class FLinkerLoad* InLinker)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (DelayedLinkerClosePackages .)",
    "insertText": "AddUnique(InLinker)"
  },
  {
    "label": "RemoveDelayedLinkerClosePackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDelayedLinkerClosePackage(class FLinkerLoad* InLinker)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (DelayedLinkerClosePackages .)",
    "insertText": "Remove(InLinker)"
  },
  {
    "label": "MoveDelayedLinkerClosePackages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveDelayedLinkerClosePackages(TArray<class FLinkerLoad*>& OutDelayedLinkerClosePackages)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutDelayedLinkerClosePackages =)",
    "insertText": "MoveTemp(DelayedLinkerClosePackages)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddRef()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (int32 CurrentRefCount = - - RefCount ;)",
    "insertText": "check(CurrentRefCount >= 0)"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (delete this ; } return CurrentRefCount ; } int32)",
    "insertText": "GetRefCount()"
  }
]