[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQueryFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryFlags"
  },
  {
    "label": "FHitFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitFlags"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Serialization / Archive . h \" enum class EQueryFlags : uint16 { None = 0,)",
    "insertText": "PreFilter(1 << 2), PostFilter = (1 << 3), AnyHit = (1 << 4), SkipNarrowPhase = (1 << 5)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EQueryFlags)",
    "insertText": "operator(EQueryFlags lhs, EQueryFlags rhs)"
  },
  {
    "label": "FQueryFlags()",
    "kind": "Method",
    "detail": "Function (} struct FQueryFlags {)",
    "insertText": "FQueryFlags(EQueryFlags InFlags) : QueryFlags(InFlags)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FQueryFlags)",
    "insertText": "operator(EQueryFlags Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this =* this& Rhs ; return* this ; } bool)",
    "insertText": "operator(const FQueryFlags& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EHitFlags)",
    "insertText": "operator(EHitFlags lhs, EHitFlags rhs)"
  },
  {
    "label": "FHitFlags()",
    "kind": "Method",
    "detail": "Function (} struct FHitFlags {)",
    "insertText": "FHitFlags(EHitFlags InFlags = EHitFlags::None) : HitFlags(InFlags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FHitFlags)",
    "insertText": "operator(EHitFlags Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this =* this& Rhs ; return* this ; } bool)",
    "insertText": "operator(const FHitFlags& Other)"
  }
]