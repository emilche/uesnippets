[
  {
    "label": "ProcessableEventListInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessableEventListInterface"
  },
  {
    "label": "ProcessableEventList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessableEventList"
  },
  {
    "label": "RtcEventProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventProcessor"
  },
  {
    "label": "ProcessableEventListInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_RTC_EVENT_PROCESSOR_H_ # define LOGGING_RTC_EVENT_LOG_RTC_EVENT_PROCESSOR_H_ # include<stdint . h> # include<algorithm> # include<memory> # include<utility> # include<vector> # include \" api / function_view . h \" # include \" rtc_base / checks . h \" namespace webrtc { namespace event_processor_impl { class ProcessableEventListInterface { public : ~)",
    "insertText": "ProcessableEventListInterface()"
  },
  {
    "label": "ProcessNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNext()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetNextTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetNextTime()"
  },
  {
    "label": "GetTieBreaker()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTieBreaker()"
  },
  {
    "label": "ProcessableEventList()",
    "kind": "Method",
    "detail": "Function (} ; template<Iterator,T> class ProcessableEventList : public ProcessableEventListInterface { public :)",
    "insertText": "ProcessableEventList(Iterator begin, Iterator end, std::function<void(const T&)> f, int tie_breaker) : begin_(begin), end_(end), f_(f), tie_breaker_(tie_breaker)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!IsEmpty())"
  },
  {
    "label": "f_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_(*begin_)"
  },
  {
    "label": "RtcEventProcessor()",
    "kind": "Method",
    "detail": "Function (int tie_breaker_ ; } ; } class RtcEventProcessor { public :)",
    "insertText": "RtcEventProcessor()"
  },
  {
    "label": "AddEvents()",
    "kind": "Method",
    "detail": "Function (template<Iterable> void)",
    "insertText": "AddEvents(const Iterable& iterable, std::function<void(const typename Iterable::value_type&)> handler)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (event_lists_ .)",
    "insertText": "push_back(std::make_unique<event_processor_impl::ProcessableEventList< typename Iterable::const_iterator, typename Iterable::value_type>>( iterable.begin(), iterable.end(), handler, insertion_order_index_++))"
  },
  {
    "label": "push_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_heap(event_lists_.begin(), event_lists_.end(), Cmp)"
  },
  {
    "label": "ProcessEventsInOrder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessEventsInOrder()"
  },
  {
    "label": "Cmp()",
    "kind": "Method",
    "detail": "Function (private : using ListPtrType = std::unique_ptr<event_processor_impl::ProcessableEventListInterface> ; int insertion_order_index_ = 0 ; std::vector<ListPtrType> event_lists_ ; bool)",
    "insertText": "Cmp(const ListPtrType& a, const ListPtrType& b)"
  }
]