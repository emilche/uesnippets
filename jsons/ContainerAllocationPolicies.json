[
  {
    "label": "FArraySlackTrackingHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArraySlackTrackingHeader"
  },
  {
    "label": "FDefaultBitArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultBitArrayAllocator"
  },
  {
    "label": "TSizedDefaultAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSizedDefaultAllocator"
  },
  {
    "label": "FScriptContainerElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptContainerElement"
  },
  {
    "label": "TAllocatorTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraitsBase"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TCanMoveBetweenAllocators",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanMoveBetweenAllocators"
  },
  {
    "label": "FContainerAllocatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContainerAllocatorInterface"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "TAlignedHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAlignedHeapAllocator"
  },
  {
    "label": "ForAnyElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForAnyElementType"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TBitsToSizeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBitsToSizeType"
  },
  {
    "label": "TBitsToSizeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBitsToSizeType"
  },
  {
    "label": "TBitsToSizeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBitsToSizeType"
  },
  {
    "label": "TBitsToSizeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBitsToSizeType"
  },
  {
    "label": "TBitsToSizeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBitsToSizeType"
  },
  {
    "label": "TSizedHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSizedHeapAllocator"
  },
  {
    "label": "ForAnyElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForAnyElementType"
  },
  {
    "label": "TSizedHeapAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSizedHeapAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TCanMoveBetweenAllocators",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanMoveBetweenAllocators"
  },
  {
    "label": "TSizedInlineAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSizedInlineAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TNonRelocatableInlineAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNonRelocatableInlineAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TFixedAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFixedAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TSparseArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSparseArrayAllocator"
  },
  {
    "label": "TAlignedSparseArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAlignedSparseArrayAllocator"
  },
  {
    "label": "TInlineSparseArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInlineSparseArrayAllocator"
  },
  {
    "label": "TFixedSparseArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFixedSparseArrayAllocator"
  },
  {
    "label": "TSetAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSetAllocator"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TInlineSetAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInlineSetAllocator"
  },
  {
    "label": "TFixedSetAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFixedSetAllocator"
  },
  {
    "label": "TSizedDefaultAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSizedDefaultAllocator"
  },
  {
    "label": "FDefaultSetAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultSetAllocator"
  },
  {
    "label": "FDefaultBitArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultBitArrayAllocator"
  },
  {
    "label": "FDefaultSparseArrayAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultSparseArrayAllocator"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "TCanMoveBetweenAllocators",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanMoveBetweenAllocators"
  },
  {
    "label": "LlmGetActiveTag()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "LlmGetActiveTag()"
  },
  {
    "label": "ArraySlackTrackInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySlackTrackInit()"
  },
  {
    "label": "ArraySlackTrackGenerateReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySlackTrackGenerateReport(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "AddAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocation()"
  },
  {
    "label": "RemoveAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllocation()"
  },
  {
    "label": "UpdateNumUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNumUsed(int64 NewNumUsed)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "static_assert(UE_CONTAINER_SLACK_GROWTH_FACTOR_DENOMINATOR > 0, \"UE_CONTAINER_SLACK_GROWTH_FACTOR_DENOMINATOR must be greater than 0\")"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEmpty(ForElementType& Other)"
  },
  {
    "label": "MoveToEmptyFromOtherAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEmptyFromOtherAllocator(typename OtherAllocatorType::template ForElementType<ElementType>& Other)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAllocation(\n\t\t\tSizeType CurrentNum,\n\t\t\tSizeType NewMax,\n\t\t\tSIZE_T NumBytesPerElement\n\t\t)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAllocation(\n\t\t\tSizeType CurrentNum,\n\t\t\tSizeType NewMax,\n\t\t\tSIZE_T NumBytesPerElement,\n\t\t\tuint32 AlignmentOfElement\n\t\t)"
  },
  {
    "label": "SlackTrackerLogNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlackTrackerLogNum(SizeType NewNumUsed)"
  },
  {
    "label": "OnInvalidAlignedHeapAllocatorNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidAlignedHeapAllocatorNum(int32 NewNum, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "OnInvalidSizedHeapAllocatorNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInvalidSizedHeapAllocatorNum(int32 IndexSize, int64 NewNum, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "DefaultCalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackReserve(NewMax, NumBytesPerElement, true, Alignment)"
  },
  {
    "label": "DefaultCalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackShrink(NewMax, CurrentMax, NumBytesPerElement, true, Alignment)"
  },
  {
    "label": "DefaultCalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackGrow(NewMax, CurrentMax, NumBytesPerElement, true, Alignment)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ForAnyElementType(const ForAnyElementType&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (parameter)",
    "insertText": "static_assert(IndexSize == IndexSize+1, \"Unsupported allocator index size.\")"
  },
  {
    "label": "DefaultCalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackReserve(NewMax, NumBytesPerElement, true)"
  },
  {
    "label": "DefaultCalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackShrink(NewMax, CurrentMax, NumBytesPerElement, true)"
  },
  {
    "label": "DefaultCalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DefaultCalculateSlackGrow(NewMax, CurrentMax, NumBytesPerElement, true)"
  },
  {
    "label": "ForAnyElementType()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ForAnyElementType(const ForAnyElementType&)"
  },
  {
    "label": "GetInlineElements()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetInlineElements()"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ForElementType(const ForElementType&)"
  },
  {
    "label": "GetInlineElements()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetInlineElements()"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ForElementType(const ForElementType&)"
  }
]