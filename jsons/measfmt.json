[
  {
    "label": "UMeasureFormatWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UMeasureFormatWidth"
  },
  {
    "label": "Measure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Measure"
  },
  {
    "label": "MeasureUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeasureUnit"
  },
  {
    "label": "NumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormat"
  },
  {
    "label": "PluralRules",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PluralRules"
  },
  {
    "label": "MeasureFormatCacheData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeasureFormatCacheData"
  },
  {
    "label": "SharedNumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedNumberFormat"
  },
  {
    "label": "SharedPluralRules",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPluralRules"
  },
  {
    "label": "QuantityFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QuantityFormatter"
  },
  {
    "label": "SimpleFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleFormatter"
  },
  {
    "label": "ListFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListFormatter"
  },
  {
    "label": "DateFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFormat"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "MeasureFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef MEASUREFORMAT_H # define MEASUREFORMAT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / format . h \" # include \" unicode / udat . h \" enum UMeasureFormatWidth { UMEASFMT_WIDTH_WIDE,UMEASFMT_WIDTH_SHORT,UMEASFMT_WIDTH_NARROW,UMEASFMT_WIDTH_NUMERIC,# ifndef UMEASFMT_WIDTH_COUNT = 4 # endif } ; typedef enum UMeasureFormatWidth UMeasureFormatWidth ; U_NAMESPACE_BEGIN class Measure ; class MeasureUnit ; class NumberFormat ; class PluralRules ; class MeasureFormatCacheData ; class SharedNumberFormat ; class SharedPluralRules ; class QuantityFormatter ; class SimpleFormatter ; class ListFormatter ; class DateFormat ; class U_I18N_API MeasureFormat : public Format { public : using Format::parseObject ; using Format::format ;)",
    "insertText": "MeasureFormat(const Locale &locale, UMeasureFormatWidth width, UErrorCode &status)"
  },
  {
    "label": "MeasureFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeasureFormat(const Locale &locale, UMeasureFormatWidth width, NumberFormat *nfToAdopt, UErrorCode &status)"
  },
  {
    "label": "MeasureFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeasureFormat(const MeasureFormat &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MeasureFormat&)",
    "insertText": "operator(const MeasureFormat &rhs)"
  },
  {
    "label": "MeasureFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MeasureFormat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format &other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable &obj, UnicodeString &appendTo, FieldPosition &pos, UErrorCode &status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString &source, Formattable &reslt, ParsePosition &pos)"
  },
  {
    "label": "formatMeasures()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatMeasures(const Measure *measures, int32_t measureCount, UnicodeString &appendTo, FieldPosition &pos, UErrorCode &status)"
  },
  {
    "label": "formatMeasurePerUnit()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatMeasurePerUnit(const Measure &measure, const MeasureUnit &perUnit, UnicodeString &appendTo, FieldPosition &pos, UErrorCode &status)"
  },
  {
    "label": "getUnitDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getUnitDisplayName(const MeasureUnit& unit, UErrorCode &status)"
  },
  {
    "label": "createCurrencyFormat()",
    "kind": "Method",
    "detail": "Function (MeasureFormat* U_EXPORT2)",
    "insertText": "createCurrencyFormat(const Locale& locale, UErrorCode& ec)"
  },
  {
    "label": "createCurrencyFormat()",
    "kind": "Method",
    "detail": "Function (MeasureFormat* U_EXPORT2)",
    "insertText": "createCurrencyFormat(UErrorCode& ec)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "initMeasureFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef void)",
    "insertText": "initMeasureFormat(const Locale &locale, UMeasureFormatWidth width, NumberFormat *nfToAdopt, UErrorCode &status)"
  },
  {
    "label": "setMeasureFormatLocale()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "setMeasureFormatLocale(const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "adoptNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptNumberFormat(NumberFormat *nfToAdopt, UErrorCode &status)"
  },
  {
    "label": "getNumberFormatInternal()",
    "kind": "Method",
    "detail": "Function (const NumberFormat&)",
    "insertText": "getNumberFormatInternal()"
  },
  {
    "label": "getCurrencyFormatInternal()",
    "kind": "Method",
    "detail": "Function (const NumberFormat&)",
    "insertText": "getCurrencyFormatInternal()"
  },
  {
    "label": "getPluralRules()",
    "kind": "Method",
    "detail": "Function (const PluralRules&)",
    "insertText": "getPluralRules()"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getLocale(UErrorCode &status)"
  },
  {
    "label": "getLocaleID()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getLocaleID(UErrorCode &status)"
  },
  {
    "label": "formatMeasure()",
    "kind": "Method",
    "detail": "Function (# endif private : const MeasureFormatCacheData* cache ; const SharedNumberFormat* numberFormat ; const SharedPluralRules* pluralRules ; UMeasureFormatWidth fWidth ; ListFormatter* listFormatter ; UnicodeString&)",
    "insertText": "formatMeasure(const Measure &measure, const NumberFormat &nf, UnicodeString &appendTo, FieldPosition &pos, UErrorCode &status)"
  },
  {
    "label": "formatMeasuresSlowTrack()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatMeasuresSlowTrack(const Measure *measures, int32_t measureCount, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "formatNumeric()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatNumeric(const Formattable *hms, int32_t bitMap, UnicodeString &appendTo, UErrorCode &status)"
  },
  {
    "label": "formatNumeric()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatNumeric(UDate date, const DateFormat &dateFmt, UDateFormatField smallestField, const Formattable &smallestAmount, UnicodeString &appendTo, UErrorCode &status)"
  }
]