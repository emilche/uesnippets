[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "CwiseTernaryOpImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CwiseTernaryOpImpl"
  },
  {
    "label": "CwiseTernaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CwiseTernaryOp"
  },
  {
    "label": "TernaryOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CWISE_TERNARY_OP_H # define EIGEN_CWISE_TERNARY_OP_H namespace Eigen { namespace internal { template<TernaryOp,Arg1,Arg2,Arg3> struct traits<CwiseTernaryOp<TernaryOp,Arg1,Arg2,Arg3>> { typedef remove_all<Arg1>::type Ancestor ; typedef traits<Ancestor>::XprKind XprKind ; enum { RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime } ; typedef result_of<)",
    "insertText": "TernaryOp(const typename Arg1::Scalar&, const typename Arg2::Scalar&, const typename Arg3::Scalar&)"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (typedef internal::traits<Arg1>::StorageKind StorageKind ; typedef internal::traits<Arg1>::StorageIndex StorageIndex ; typedef Arg1::Nested Arg1Nested ; typedef Arg2::Nested Arg2Nested ; typedef Arg3::Nested Arg3Nested ; typedef remove_reference<Arg1Nested>::type _Arg1Nested ; typedef remove_reference<Arg2Nested>::type _Arg2Nested ; typedef remove_reference<Arg3Nested>::type _Arg3Nested ; enum { Flags = _Arg1Nested::Flags& RowMajorBit } ; } ; } template<TernaryOp,Arg1,Arg2,Arg3,StorageKind> class CwiseTernaryOpImpl ; template<TernaryOp,Arg1Type,Arg2Type,Arg3Type> class CwiseTernaryOp : public CwiseTernaryOpImpl<TernaryOp,Arg1Type,Arg2Type,Arg3Type,internal::traits<Arg1Type>::StorageKind>,internal::no_assignment_operator { public : typedef internal::remove_all<Arg1Type>::type Arg1 ; typedef internal::remove_all<Arg2Type>::type Arg2 ; typedef internal::remove_all<Arg3Type>::type Arg3 ; typedef CwiseTernaryOpImpl<TernaryOp,Arg1Type,Arg2Type,Arg3Type,internal::traits<Arg1Type>::StorageKind>::Base Base ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(CwiseTernaryOp)"
  },
  {
    "label": "CwiseTernaryOp()",
    "kind": "Method",
    "detail": "Function (typedef internal::ref_selector<Arg2Type>::type Arg2Nested ; typedef internal::ref_selector<Arg3Type>::type Arg3Nested ; typedef internal::remove_reference<Arg1Nested>::type _Arg1Nested ; typedef internal::remove_reference<Arg2Nested>::type _Arg2Nested ; typedef internal::remove_reference<Arg3Nested>::type _Arg3Nested ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "CwiseTernaryOp(const Arg1& a1, const Arg2& a2, const Arg3& a3, const TernaryOp& func = TernaryOp()) : m_arg1(a1), m_arg2(a2), m_arg3(a3), m_functor(func)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Arg1, Arg2) EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Arg1, Arg3) EIGEN_STATIC_ASSERT((internal::is_same< typename internal::traits<Arg1Type>::StorageKind, typename internal::traits<Arg2Type>::StorageKind>::value), STORAGE_KIND_MUST_MATCH) EIGEN_STATIC_ASSERT((internal::is_same< typename internal::traits<Arg1Type>::StorageKind, typename internal::traits<Arg3Type>::StorageKind>::value), STORAGE_KIND_MUST_MATCH) eigen_assert(a1.rows() == a2.rows() && a1.cols() == a2.cols() && a1.rows() == a3.rows() && a1.cols() == a3.cols())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "cols()"
  },
  {
    "label": "arg1()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const _Arg1Nested&)",
    "insertText": "arg1()"
  }
]