[
  {
    "label": "MyThreadRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MyThreadRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "thread()",
    "kind": "Method",
    "detail": "Function (DelegateSimpleThread)",
    "insertText": "thread(&runner, \"good_name_here\")"
  },
  {
    "label": "SimpleThread()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "SimpleThread(const std::string& name)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync()"
  },
  {
    "label": "tid()",
    "kind": "Method",
    "detail": "Function (PlatformThreadId)",
    "insertText": "tid()"
  },
  {
    "label": "HasBeenStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBeenStarted()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "JoinAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinAll()"
  },
  {
    "label": "AddWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWork(Delegate* work, size_t repeat_count = 1)"
  }
]