[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SIMPLE_THREAD_H_ # define BASE_THREADING_SIMPLE_THREAD_H_ # include<stddef . h> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / containers / queue . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / lock . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / threading / platform_thread . h \" namespace base { class BASE_EXPORT SimpleThread : public PlatformThread::Delegate { public : struct BASE_EXPORT Options { public :)",
    "insertText": "Options()"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Options(ThreadType thread_type) : thread_type(thread_type)"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Options(const Options& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Options&)",
    "insertText": "operator(const Options& other)"
  },
  {
    "label": "SimpleThread()",
    "kind": "Method",
    "detail": "Function (size_t stack_size = 0 ; ThreadType thread_type = ThreadType::kDefault ; bool joinable = true ; } ;)",
    "insertText": "SimpleThread(const std::string& name)"
  },
  {
    "label": "SimpleThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleThread(const std::string& name, const Options& options)"
  },
  {
    "label": "SimpleThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleThread(const SimpleThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleThread&)",
    "insertText": "operator(const SimpleThread&)"
  },
  {
    "label": "SimpleThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleThread()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "tid()",
    "kind": "Method",
    "detail": "Function (PlatformThreadId)",
    "insertText": "tid()"
  },
  {
    "label": "HasBeenStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBeenStarted()"
  },
  {
    "label": "HasBeenJoined()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBeenJoined()"
  },
  {
    "label": "BeforeStart()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BeforeStart()"
  },
  {
    "label": "BeforeRun()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeforeRun()"
  },
  {
    "label": "BeforeJoin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeforeJoin()"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (} const std::string name_ ; const Options options_ ; PlatformThreadHandle thread_ ; WaitableEvent event_ ; PlatformThreadId tid_ = kInvalidThreadId ; bool joined_ = false ; bool start_called_ = false ; } ; class BASE_EXPORT DelegateSimpleThread : public SimpleThread { public : class BASE_EXPORT Delegate { public : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "DelegateSimpleThread()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DelegateSimpleThread(Delegate* delegate, const std::string& name_prefix)"
  },
  {
    "label": "DelegateSimpleThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelegateSimpleThread(Delegate* delegate, const std::string& name_prefix, const Options& options)"
  },
  {
    "label": "DelegateSimpleThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelegateSimpleThread(const DelegateSimpleThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelegateSimpleThread&)",
    "insertText": "operator(const DelegateSimpleThread&)"
  },
  {
    "label": "DelegateSimpleThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelegateSimpleThread()"
  },
  {
    "label": "DelegateSimpleThreadPool()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<Delegate> delegate_ ; } ; class BASE_EXPORT DelegateSimpleThreadPool : public DelegateSimpleThread::Delegate { public : typedef DelegateSimpleThread::Delegate Delegate ;)",
    "insertText": "DelegateSimpleThreadPool(const std::string& name_prefix, size_t num_threads)"
  },
  {
    "label": "DelegateSimpleThreadPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelegateSimpleThreadPool(const DelegateSimpleThreadPool&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelegateSimpleThreadPool&)",
    "insertText": "operator(const DelegateSimpleThreadPool&)"
  },
  {
    "label": "DelegateSimpleThreadPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelegateSimpleThreadPool()"
  },
  {
    "label": "JoinAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinAll()"
  },
  {
    "label": "AddWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWork(Delegate* work, size_t repeat_count = 1)"
  }
]