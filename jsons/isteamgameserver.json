[
  {
    "label": "ISteamGameServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamGameServer"
  },
  {
    "label": "GSClientApprove_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSClientApprove_t"
  },
  {
    "label": "GSClientDeny_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSClientDeny_t"
  },
  {
    "label": "GSClientKick_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSClientKick_t"
  },
  {
    "label": "GSClientAchievementStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSClientAchievementStatus_t"
  },
  {
    "label": "GSPolicyResponse_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSPolicyResponse_t"
  },
  {
    "label": "GSGameplayStats_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSGameplayStats_t"
  },
  {
    "label": "GSClientGroupStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSClientGroupStatus_t"
  },
  {
    "label": "GSReputation_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSReputation_t"
  },
  {
    "label": "AssociateWithClanResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssociateWithClanResult_t"
  },
  {
    "label": "ComputeNewPlayerCompatibilityResult_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputeNewPlayerCompatibilityResult_t"
  },
  {
    "label": "STEAM_PRIVATE_API()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMGAMESERVER_H # define ISTEAMGAMESERVER_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" class ISteamGameServer { public :)",
    "insertText": "STEAM_PRIVATE_API(virtual bool InitGameServer( uint32 unIP, uint16 usGamePort, uint16 usQueryPort, uint32 unFlags, AppId_t nGameAppId, const char *pchVersionString ) = 0; ) virtual void SetProduct( const char *pszProduct)"
  },
  {
    "label": "SetGameDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameDescription(const char *pszGameDescription)"
  },
  {
    "label": "SetModDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModDir(const char *pszModDir)"
  },
  {
    "label": "SetDedicatedServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDedicatedServer(bool bDedicated)"
  },
  {
    "label": "LogOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogOn(const char *pszToken)"
  },
  {
    "label": "LogOnAnonymous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogOnAnonymous()"
  },
  {
    "label": "LogOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogOff()"
  },
  {
    "label": "BLoggedOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BLoggedOn()"
  },
  {
    "label": "BSecure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BSecure()"
  },
  {
    "label": "GetSteamID()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "GetSteamID()"
  },
  {
    "label": "WasRestartRequested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasRestartRequested()"
  },
  {
    "label": "SetMaxPlayerCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxPlayerCount(int cPlayersMax)"
  },
  {
    "label": "SetBotPlayerCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBotPlayerCount(int cBotplayers)"
  },
  {
    "label": "SetServerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetServerName(const char *pszServerName)"
  },
  {
    "label": "SetMapName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMapName(const char *pszMapName)"
  },
  {
    "label": "SetPasswordProtected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPasswordProtected(bool bPasswordProtected)"
  },
  {
    "label": "SetSpectatorPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectatorPort(uint16 unSpectatorPort)"
  },
  {
    "label": "SetSpectatorServerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectatorServerName(const char *pszSpectatorServerName)"
  },
  {
    "label": "ClearAllKeyValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllKeyValues()"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(const char *pKey, const char *pValue)"
  },
  {
    "label": "SetGameTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameTags(const char *pchGameTags)"
  },
  {
    "label": "SetGameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameData(const char *pchGameData)"
  },
  {
    "label": "SetRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRegion(const char *pszRegion)"
  },
  {
    "label": "SetAdvertiseServerActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdvertiseServerActive(bool bActive)"
  },
  {
    "label": "GetAuthSessionTicket()",
    "kind": "Method",
    "detail": "Function (HAuthTicket)",
    "insertText": "GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket, const SteamNetworkingIdentity *pSnid)"
  },
  {
    "label": "BeginAuthSession()",
    "kind": "Method",
    "detail": "Function (EBeginAuthSessionResult)",
    "insertText": "BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, CSteamID steamID)"
  },
  {
    "label": "EndAuthSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAuthSession(CSteamID steamID)"
  },
  {
    "label": "CancelAuthTicket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAuthTicket(HAuthTicket hAuthTicket)"
  },
  {
    "label": "UserHasLicenseForApp()",
    "kind": "Method",
    "detail": "Function (EUserHasLicenseForAppResult)",
    "insertText": "UserHasLicenseForApp(CSteamID steamID, AppId_t appID)"
  },
  {
    "label": "RequestUserGroupStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)"
  },
  {
    "label": "GetGameplayStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGameplayStats()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(GSReputation_t ) virtual SteamAPICall_t GetServerReputation()"
  },
  {
    "label": "GetPublicIP()",
    "kind": "Method",
    "detail": "Function (SteamIPAddress_t)",
    "insertText": "GetPublicIP()"
  },
  {
    "label": "HandleIncomingPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIncomingPacket(const void *pData, int cbData, uint32 srcIP, uint16 srcPort)"
  },
  {
    "label": "GetNextOutgoingPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNextOutgoingPacket(void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(AssociateWithClanResult_t ) virtual SteamAPICall_t AssociateWithClan( CSteamID steamIDClan)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(ComputeNewPlayerCompatibilityResult_t ) virtual SteamAPICall_t ComputeNewPlayerCompatibility( CSteamID steamIDNewPlayer)"
  },
  {
    "label": "SendUserConnectAndAuthenticate_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendUserConnectAndAuthenticate_DEPRECATED(uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser)"
  },
  {
    "label": "CreateUnauthenticatedUserConnection()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "CreateUnauthenticatedUserConnection()"
  },
  {
    "label": "SendUserDisconnect_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUserDisconnect_DEPRECATED(CSteamID steamIDUser)"
  },
  {
    "label": "BUpdateUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BUpdateUserData(CSteamID steamIDUser, const char *pchPlayerName, uint32 uScore)"
  },
  {
    "label": "STEAM_PRIVATE_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_PRIVATE_API(virtual void SetMasterServerHeartbeatInterval_DEPRECATED( int iHeartbeatInterval ) = 0; virtual void ForceMasterServerHeartbeat_DEPRECATED() = 0;)"
  },
  {
    "label": "SteamGameServer()",
    "kind": "Method",
    "detail": "Function (# define STEAMGAMESERVER_INTERFACE_VERSION \" SteamGameServer015 \" ISteamGameServer*)",
    "insertText": "SteamGameServer()"
  },
  {
    "label": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR(ISteamGameServer *, SteamGameServer, STEAMGAMESERVER_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]