[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimDataModelNotifyCollector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimDataModelNotifyCollector"
  },
  {
    "label": "FAnimDataModelNotifyCollector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimData / AnimDataNotifications . h \" # include \" Containers / Set . h \" # include \" Containers / Array . h \" enum class EAnimDataModelNotifyType : uint8 ; namespace UE { namespace Anim { # if WITH_EDITORONLY_DATA struct FAnimDataModelNotifyCollector {)",
    "insertText": "FAnimDataModelNotifyCollector() : BracketDepth(0), bDataModified(false)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Handle(EAnimDataModelNotifyType NotifyType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bDataModified = false ; } NotifyTypes .)",
    "insertText": "Add(NotifyType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + BracketDepth ; } else)",
    "insertText": "if(NotifyType == EAnimDataModelNotifyType::BracketClosed)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (- - BracketDepth ; } } bool)",
    "insertText": "Contains(EAnimDataModelNotifyType NotifyType)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TArray<EAnimDataModelNotifyType>& TestNotifyTypes)"
  },
  {
    "label": "WasDataModified()",
    "kind": "Method",
    "detail": "Function (bDataModified = true ; } bool)",
    "insertText": "WasDataModified()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NotifyTypes .)",
    "insertText": "Empty()"
  }
]