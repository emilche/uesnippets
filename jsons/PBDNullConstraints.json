[
  {
    "label": "FPBDNullConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDNullConstraintHandle"
  },
  {
    "label": "FPBDNullConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDNullConstraints"
  },
  {
    "label": "FPBDNullConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDNullConstraint"
  },
  {
    "label": "FPBDNullConstraint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Declares . h \" # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { class FPBDNullConstraintHandle ; class FPBDNullConstraints ; class FPBDNullConstraint { public :)",
    "insertText": "FPBDNullConstraint(const TVec2<FGeometryParticleHandle*>& InConstrainedParticles) : ConstrainedParticles(InConstrainedParticles) , bEnabled(true) , bSleeping(false)"
  },
  {
    "label": "FPBDNullConstraints()",
    "kind": "Method",
    "detail": "Function (} FParticlePair ConstrainedParticles ; bool bEnabled ; bool bSleeping ; } ; class FPBDNullConstraints : public TPBDIndexedConstraintContainer<FPBDNullConstraints> { public : using FConstraintContainerHandle = FPBDNullConstraintHandle ;)",
    "insertText": "FPBDNullConstraints()"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (} FPBDNullConstraint&)",
    "insertText": "GetConstraint(const int32 ConstraintIndex)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (FParticlePair)",
    "insertText": "GetConstrainedParticles(int32 ConstraintIndex)"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherInput(const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "AddBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddBodies(const TArrayView<int32>& ConstraintIndices, FSolverBodyContainer& SolverBodyContainer)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherInput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScatterOutput(const TArrayView<int32>& ConstraintIndices, const FReal Dt)"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyPositionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyVelocityConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "ApplyProjectionConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProjectionConstraints(const TArrayView<int32>& ConstraintIndices, const FReal Dt, const int32 It, const int32 NumIts)"
  },
  {
    "label": "FPBDNullConstraintHandle()",
    "kind": "Method",
    "detail": "Function (} TArray<FPBDNullConstraint> Constraints ; TArray<FPBDNullConstraintHandle*> Handles ; TConstraintHandleAllocator<FPBDNullConstraints> HandleAllocator ; } ; class FPBDNullConstraintHandle final : public TIndexedContainerConstraintHandle<FPBDNullConstraints> { public :)",
    "insertText": "FPBDNullConstraintHandle(FPBDNullConstraints* InConstraintContainer, int32 ConstraintIndex) : TIndexedContainerConstraintHandle<FPBDNullConstraints>(InConstraintContainer, ConstraintIndex)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool bInEnabled)"
  },
  {
    "label": "ConcreteContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcreteContainer()->GetConstraint(GetConstraintIndex())"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetIsSleeping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsSleeping(bool bInIsSleeping)"
  },
  {
    "label": "IsSleeping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSleeping()"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (} FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FPBDNullConstraintHandle\"), &FIndexedConstraintHandle::StaticType())"
  }
]