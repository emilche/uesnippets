[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKinematicTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKinematicTarget"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "MakePositionTarget()",
    "kind": "Method",
    "detail": "Function (class FKinematicTarget { public : FKinematicTarget)",
    "insertText": "MakePositionTarget(const FRigidTransform3& InTransform)"
  },
  {
    "label": "MakePositionTarget()",
    "kind": "Method",
    "detail": "Function (} FKinematicTarget)",
    "insertText": "MakePositionTarget(const FVec3& InPosition, const FRotation3f& InRotation)"
  },
  {
    "label": "FKinematicTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKinematicTarget() : Position(0) , Rotation(FRotation3f::FromIdentity()) , Mode(EKinematicTargetMode::None)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (} EKinematicTargetMode)",
    "insertText": "GetMode()"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Position =)",
    "insertText": "FVec3()"
  },
  {
    "label": "FRotation3f()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "FRotation3f()"
  },
  {
    "label": "SetTargetMode()",
    "kind": "Method",
    "detail": "Function (Mode = EKinematicTargetMode::None ; } void)",
    "insertText": "SetTargetMode(const FVec3& X, const FRotation3f& R)"
  },
  {
    "label": "SetTargetMode()",
    "kind": "Method",
    "detail": "Function (Position = X ; Rotation = R ; Mode = EKinematicTargetMode::Position ; } void)",
    "insertText": "SetTargetMode(const FRigidTransform3& InTarget)"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (Position = InTarget .)",
    "insertText": "GetLocation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (Rotation = InTarget .)",
    "insertText": "GetRotation()"
  },
  {
    "label": "SetVelocityMode()",
    "kind": "Method",
    "detail": "Function (Mode = EKinematicTargetMode::Position ; } void)",
    "insertText": "SetVelocityMode()"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (Mode = EKinematicTargetMode::Velocity ; } void)",
    "insertText": "SetMode(EKinematicTargetMode InMode)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Mode = InMode ; } FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, FKinematicTarget& KinematicTarget)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FFortniteReleaseBranchCustomObjectVersion::GUID)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FFortniteMainBranchObjectVersion::GUID)"
  },
  {
    "label": "bRemovedScaleFN()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bRemovedScaleFN(Ar.CustomVer(FFortniteReleaseBranchCustomObjectVersion::GUID) >= FFortniteReleaseBranchCustomObjectVersion::ChaosKinematicTargetRemoveScale)"
  },
  {
    "label": "bRemovedScaleUE4()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bRemovedScaleUE4(Ar.CustomVer(FPhysicsObjectVersion::GUID) >= FPhysicsObjectVersion::ChaosKinematicTargetRemoveScale)"
  },
  {
    "label": "bRotationStoredAsSinglePrecision()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bRotationStoredAsSinglePrecision(Ar.CustomVer(FFortniteMainBranchObjectVersion::GUID) >= FFortniteMainBranchObjectVersion::ChaosStoreKinematicTargetRotationAsSinglePrecision)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<KinematicTarget . Position ;)",
    "insertText": "if(bRotationStoredAsSinglePrecision)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<KinematicTarget . Rotation ; } else { FRotation3 RotationDoublePrecision ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Ar<<RotationDoublePrecision ; KinematicTarget . Rotation = RotationDoublePrecision ; } else { RotationDoublePrecision = KinematicTarget . Rotation ; Ar<<RotationDoublePrecision ; } } Ar<<KinematicTarget . Mode ; } else { FRigidTransform3 Transform ; Ar<<Transform<<KinematicTarget . Mode ; KinematicTarget . Position =)",
    "insertText": "FVec3(Transform.GetLocation())"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (KinematicTarget . Rotation = TRotation3<)",
    "insertText": "FRealSingle(Transform.GetRotation())"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } bool)",
    "insertText": "IsEqual(const FKinematicTarget& other)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} template<TOther> bool)",
    "insertText": "IsEqual(const TOther& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FKinematicTarget& other)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} template<TOther> void)",
    "insertText": "CopyFrom(const TOther& Other)"
  },
  {
    "label": "KinematicTarget()",
    "kind": "Method",
    "detail": "Function (Position = Other .)",
    "insertText": "KinematicTarget()"
  },
  {
    "label": "FKinematicTarget()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FKinematicTarget(const FRigidTransform3& InTransform) : Position(InTransform.GetTranslation()) , Rotation(InTransform.GetRotation()) , Mode(EKinematicTargetMode::Position)"
  },
  {
    "label": "FKinematicTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKinematicTarget(const FVec3& InPosition, const FRotation3f& InRotation) : Position(InPosition) , Rotation(InRotation) , Mode(EKinematicTargetMode::Position)"
  }
]