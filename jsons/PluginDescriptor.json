[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPluginDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginDescriptor"
  },
  {
    "label": "GetFileExtension()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CustomBuildSteps . h \" # include \" HAL / Platform . h \" # include \" LocalizationDescriptor . h \" # include \" Misc / Optional . h \" # include \" ModuleDescriptor . h \" # include \" PluginDisallowedDescriptor . h \" # include \" PluginReferenceDescriptor . h \" # include \" Serialization / JsonWriter . h \" # include \" Templates / SharedPointer . h \" # include \" VerseScope . h \" class FJsonObject ; class FJsonValue ; class FText ; enum class EPluginEnabledByDefault : uint8 { Unspecified,Enabled,Disabled,} ; struct FPluginDescriptor { int32 Version ; FString VersionName ; FString FriendlyName ; FString Description ; FString Category ; FString CreatedBy ; FString CreatedByURL ; FString DocsURL ; FString MarketplaceURL ; FString SupportURL ; FString EngineVersion ; FString EditorCustomVirtualPath ; TArray<FString> SupportedTargetPlatforms ; TArray<FString> SupportedPrograms ; FString ParentPluginName ; TArray<FModuleDescriptor> Modules ; TArray<FLocalizationTargetDescriptor> LocalizationTargets ; FString VersePath ; EVerseScope::Type VerseScope = EVerseScope::PublicUser ; TOptional<uint32> VerseVersion ; bool bEnableVerseAssetReflection = false ; bool bEnableIAD = false ; EPluginEnabledByDefault EnabledByDefault ; bool bCanContainContent ; bool bCanContainVerse ; bool bIsBetaVersion ; bool bIsExperimentalVersion ; bool bInstalled ; bool bRequiresBuildPlatform ; bool bIsHidden ; bool bIsSealed ; bool bNoCode ; bool bExplicitlyLoaded ; bool bHasExplicitPlatforms ; bool bIsPluginExtension ; FCustomBuildSteps PreBuildSteps ; FCustomBuildSteps PostBuildSteps ; TArray<FPluginReferenceDescriptor> Plugins ; TArray<FPluginDisallowedDescriptor> DisallowedPlugins ; # if WITH_EDITOR TSharedPtr<FJsonObject> CachedJson ; TMap<FString,TSharedPtr<FJsonValue>> AdditionalFieldsToWrite ; TSet<FString> AdditionalFieldsToRemove ; # endif const FString&)",
    "insertText": "GetFileExtension()"
  },
  {
    "label": "FPluginDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPluginDescriptor()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const TCHAR* FileName, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const FString& FileName, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const FString& FileName, FText& OutFailReason)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FString& Text, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FString& Text, FText& OutFailReason)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText& OutFailReason)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(const TCHAR* FileName, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(const FString& FileName, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(const FString& FileName, FText& OutFailReason)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(FString& Text)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(TJsonWriter<>& Writer)"
  },
  {
    "label": "UpdateJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJson(FJsonObject& JsonObject)"
  },
  {
    "label": "UpdatePluginFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePluginFile(const FString& FileName, FText* OutFailReason = nullptr)"
  },
  {
    "label": "UpdatePluginFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePluginFile(const FString& FileName, FText& OutFailReason)"
  },
  {
    "label": "SupportsTargetPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTargetPlatform(const FString& Platform)"
  }
]