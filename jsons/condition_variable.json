[
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNCHRONIZATION_CONDITION_VARIABLE_H_ # define BASE_SYNCHRONIZATION_CONDITION_VARIABLE_H_ # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #include <pthread.h> #endif #include \"base/base_export.h\" #include \"base/synchronization/lock.h\" #if BUILDFLAG(IS_WIN)"
  },
  {
    "label": "ConditionVariable()",
    "kind": "Method",
    "detail": "Function (class TimeDelta ; class BASE_EXPORT ConditionVariable { public :)",
    "insertText": "ConditionVariable(Lock* user_lock)"
  },
  {
    "label": "ConditionVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionVariable(const ConditionVariable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ConditionVariable&)",
    "insertText": "operator(const ConditionVariable&)"
  },
  {
    "label": "ConditionVariable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ConditionVariable()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void NOT_TAIL_CALLED)",
    "insertText": "Wait()"
  },
  {
    "label": "TimedWait()",
    "kind": "Method",
    "detail": "Function (void NOT_TAIL_CALLED)",
    "insertText": "TimedWait(const TimeDelta& max_time)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast()"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Signal()"
  },
  {
    "label": "declare_only_used_while_idle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "declare_only_used_while_idle()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (waiting_is_blocking_ = false ; } private : # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (const raw_ptr<CHROME_SRWLOCK> srwlock_ ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (raw_ptr<pthread_mutex_t> user_mutex_ ; # endif # if)",
    "insertText": "DCHECK_IS_ON()"
  }
]