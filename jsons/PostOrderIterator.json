[
  {
    "label": "SetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetType"
  },
  {
    "label": "po_iterator_storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "po_iterator_storage"
  },
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "GT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GT"
  },
  {
    "label": "po_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "po_iterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "po_ext_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "po_ext_iterator"
  },
  {
    "label": "ipo_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ipo_iterator"
  },
  {
    "label": "ipo_ext_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ipo_ext_iterator"
  },
  {
    "label": "ReversePostOrderTraversal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReversePostOrderTraversal"
  },
  {
    "label": "insertEdge()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_POSTORDERITERATOR_H # define LLVM_ADT_POSTORDERITERATOR_H # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / iterator_range . h \" # include<set> # include<vector> namespace llvm { template<class SetType,bool External> class po_iterator_storage { SetType Visited ; public : template<NodeType> bool)",
    "insertText": "insertEdge(NodeType *From, NodeType *To)"
  },
  {
    "label": "finishPostorder()",
    "kind": "Method",
    "detail": "Function (} template<NodeType> void)",
    "insertText": "finishPostorder(NodeType *BB)"
  },
  {
    "label": "po_iterator_storage()",
    "kind": "Method",
    "detail": "Function (} } ; template<class SetType> class po_iterator_storage<SetType,true> { SetType& Visited ; public :)",
    "insertText": "po_iterator_storage(SetType &VSet) : Visited(VSet)"
  },
  {
    "label": "po_iterator_storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "po_iterator_storage(const po_iterator_storage &S) : Visited(S.Visited)"
  },
  {
    "label": "traverseChild()",
    "kind": "Method",
    "detail": "Function (} } ; template<class GraphT,class SetType = llvm::SmallPtrSet<GraphTraits<GraphT>::NodeType*,8>,bool ExtStorage = false,class GT = GraphTraits<GraphT>> class po_iterator : public po_iterator_storage<SetType,ExtStorage> { public : using iterator_category = std::forward_iterator_tag ; using value_type = GT::NodeType ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; typedef GT::NodeType NodeType ; typedef GT::ChildIteratorType ChildItTy ; std::vector<std::pair<NodeType*,ChildItTy>> VisitStack ; void)",
    "insertText": "traverseChild()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (NodeType* BB =* VisitStack .)",
    "insertText": "back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "push_back(std::make_pair(BB, GT::child_begin(BB)))"
  },
  {
    "label": "po_iterator()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "po_iterator(NodeType *BB)"
  },
  {
    "label": "insertEdge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "insertEdge((NodeType*)nullptr, BB)"
  },
  {
    "label": "po_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "po_iterator()"
  },
  {
    "label": "po_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "po_iterator(NodeType *BB, SetType &S) : po_iterator_storage<SetType, ExtStorage>(S)"
  },
  {
    "label": "po_iterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "po_iterator(SetType &S) : po_iterator_storage<SetType, ExtStorage>(S)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : po_iterator)",
    "insertText": "begin(GraphT G)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} po_iterator)",
    "insertText": "end(GraphT G)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} po_iterator)",
    "insertText": "begin(GraphT G, SetType &S)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} po_iterator)",
    "insertText": "end(GraphT G, SetType &S)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const po_iterator &x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "operator()"
  },
  {
    "label": "finishPostorder()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "finishPostorder(VisitStack.back().first)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "po_begin()",
    "kind": "Method",
    "detail": "Function (po_iterator tmp =* this ; + +* this ; return tmp ; } } ; template<class T> po_iterator<T>)",
    "insertText": "po_begin(const T &G)"
  },
  {
    "label": "po_end()",
    "kind": "Method",
    "detail": "Function (} template<class T> po_iterator<T>)",
    "insertText": "po_end(const T &G)"
  },
  {
    "label": "post_order()",
    "kind": "Method",
    "detail": "Function (} template<class T> iterator_range<po_iterator<T>>)",
    "insertText": "post_order(const T &G)"
  },
  {
    "label": "po_ext_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType = std::set<GraphTraits<T>::NodeType*>> struct po_ext_iterator : public po_iterator<T,SetType,true> {)",
    "insertText": "po_ext_iterator(const po_iterator<T, SetType, true> &V) : po_iterator<T, SetType, true>(V)"
  },
  {
    "label": "po_ext_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class SetType> po_ext_iterator<T,SetType>)",
    "insertText": "po_ext_begin(T G, SetType &S)"
  },
  {
    "label": "po_ext_end()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType> po_ext_iterator<T,SetType>)",
    "insertText": "po_ext_end(T G, SetType &S)"
  },
  {
    "label": "post_order_ext()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType> iterator_range<po_ext_iterator<T,SetType>>)",
    "insertText": "post_order_ext(const T &G, SetType &S)"
  },
  {
    "label": "ipo_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType = std::set<GraphTraits<T>::NodeType*>,bool External = false> struct ipo_iterator : public po_iterator<Inverse<T>,SetType,External> {)",
    "insertText": "ipo_iterator(const po_iterator<Inverse<T>, SetType, External> &V) : po_iterator<Inverse<T>, SetType, External> (V)"
  },
  {
    "label": "ipo_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> ipo_iterator<T>)",
    "insertText": "ipo_begin(const T &G, bool Reverse = false)"
  },
  {
    "label": "ipo_end()",
    "kind": "Method",
    "detail": "Function (} template<class T> ipo_iterator<T>)",
    "insertText": "ipo_end(const T &G)"
  },
  {
    "label": "inverse_post_order()",
    "kind": "Method",
    "detail": "Function (} template<class T> iterator_range<ipo_iterator<T>>)",
    "insertText": "inverse_post_order(const T &G, bool Reverse = false)"
  },
  {
    "label": "ipo_ext_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType = std::set<GraphTraits<T>::NodeType*>> struct ipo_ext_iterator : public ipo_iterator<T,SetType,true> {)",
    "insertText": "ipo_ext_iterator(const ipo_iterator<T, SetType, true> &V) : ipo_iterator<T, SetType, true>(V)"
  },
  {
    "label": "ipo_ext_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ipo_ext_iterator(const po_iterator<Inverse<T>, SetType, true> &V) : ipo_iterator<T, SetType, true>(V)"
  },
  {
    "label": "ipo_ext_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class SetType> ipo_ext_iterator<T,SetType>)",
    "insertText": "ipo_ext_begin(const T &G, SetType &S)"
  },
  {
    "label": "ipo_ext_end()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType> ipo_ext_iterator<T,SetType>)",
    "insertText": "ipo_ext_end(const T &G, SetType &S)"
  },
  {
    "label": "inverse_post_order_ext()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetType> iterator_range<ipo_ext_iterator<T,SetType>>)",
    "insertText": "inverse_post_order_ext(const T &G, SetType &S)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} template<class GraphT,class GT = GraphTraits<GraphT>> class ReversePostOrderTraversal { typedef GT::NodeType NodeType ; std::vector<NodeType*> Blocks ; void)",
    "insertText": "Initialize(NodeType *BB)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(po_begin(BB), po_end(BB), std::back_inserter(Blocks))"
  },
  {
    "label": "ReversePostOrderTraversal()",
    "kind": "Method",
    "detail": "Function (} public : typedef std::vector<NodeType*>::reverse_iterator rpo_iterator ;)",
    "insertText": "ReversePostOrderTraversal(GraphT G)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(GT::getEntryNode(G))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} rpo_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} rpo_iterator)",
    "insertText": "end()"
  }
]