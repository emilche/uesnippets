[
  {
    "label": "TLightMapDensityElementData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLightMapDensityElementData"
  },
  {
    "label": "TLightMapDensityVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLightMapDensityVS"
  },
  {
    "label": "TLightMapDensityPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLightMapDensityPS"
  },
  {
    "label": "FLightmapDensityMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapDensityMeshProcessor"
  },
  {
    "label": "TLightMapDensityElementData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineGlobals . h \" # include \" RHI . h \" # include \" DataDrivenShaderPlatformInfo . h \" # include \" HitProxies . h \" # include \" ShaderParameters . h \" # include \" RHIStaticStates . h \" # include \" Shader . h \" # include \" UnrealEngine . h \" # include \" MeshMaterialShaderType . h \" # include \" MeshMaterialShader . h \" # include \" ShaderBaseClasses . h \" # include \" SceneRendering . h \" # include \" Engine / LightMapTexture2D . h \" template<LightMapPolicyType> class TLightMapDensityElementData : public FMeshMaterialShaderElementData { public :)",
    "insertText": "TLightMapDensityElementData(const typename LightMapPolicyType::ElementDataType& InLightMapPolicyElementData) : LightMapPolicyElementData(InLightMapPolicyElementData)"
  },
  {
    "label": "DECLARE_SHADER_TYPE_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} LightMapPolicyType::ElementDataType LightMapPolicyElementData ; FVector3f BuiltLightingAndSelectedFlags ; FVector2f LightMapResolutionScale ; bool bTextureMapped ; } ; template<LightMapPolicyType> class TLightMapDensityVS : public FMeshMaterialShader,public LightMapPolicyType::VertexParametersType {)",
    "insertText": "DECLARE_SHADER_TYPE_EXPLICIT_BASES(TLightMapDensityVS,MeshMaterial, FMeshMaterialShader, typename LightMapPolicyType::VertexParametersType)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "TLightMapDensityVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLightMapDensityVS(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer): FMeshMaterialShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightMapPolicyType::)",
    "insertText": "Bind(Initializer.ParameterMap)"
  },
  {
    "label": "TLightMapDensityVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLightMapDensityVS()"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderBindings(const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, const TLightMapDensityElementData<LightMapPolicyType>& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderBindings(Scene, FeatureLevel, PrimitiveSceneProxy, MaterialRenderProxy, Material, ShaderElementData, ShaderBindings)"
  },
  {
    "label": "GetVertexShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexShaderBindings(PrimitiveSceneProxy, ShaderElementData.LightMapPolicyElementData, this, ShaderBindings)"
  },
  {
    "label": "DECLARE_SHADER_TYPE_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} } ; template<LightMapPolicyType> class TLightMapDensityPS : public FMeshMaterialShader,public LightMapPolicyType::PixelParametersType {)",
    "insertText": "DECLARE_SHADER_TYPE_EXPLICIT_BASES(TLightMapDensityPS,MeshMaterial, FMeshMaterialShader, typename LightMapPolicyType::PixelParametersType)"
  },
  {
    "label": "TLightMapDensityPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLightMapDensityPS(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer): FMeshMaterialShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (BuiltLightingAndSelectedFlags .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"BuiltLightingAndSelectedFlags\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightMapResolutionScale .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"LightMapResolutionScale\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightMapDensityDisplayOptions .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"LightMapDensityDisplayOptions\"))"
  },
  {
    "label": "TLightMapDensityPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLightMapDensityPS()"
  },
  {
    "label": "GetPixelShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPixelShaderBindings(PrimitiveSceneProxy, ShaderElementData.LightMapPolicyElementData, this, ShaderBindings)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(BuiltLightingAndSelectedFlags, ShaderElementData.BuiltLightingAndSelectedFlags)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(LightMapResolutionScale, ShaderElementData.LightMapResolutionScale)"
  },
  {
    "label": "OptionsParameter()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "OptionsParameter(GEngine->bRenderLightMapDensityGrayscale ? GEngine->RenderLightMapDensityGrayscaleScale : 0.0f, GEngine->bRenderLightMapDensityGrayscale ? 0.0f : GEngine->RenderLightMapDensityColorScale, (ShaderElementData.bTextureMapped == true) ? 1.0f : 0.0f, (ShaderElementData.bTextureMapped == false) ? 1.0f : 0.0f)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(LightMapDensityDisplayOptions, OptionsParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, BuiltLightingAndSelectedFlags)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, LightMapResolutionScale)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, LightMapDensityDisplayOptions)"
  },
  {
    "label": "FLightmapDensityMeshProcessor()",
    "kind": "Method",
    "detail": "Function (} ; class FLightmapDensityMeshProcessor : public FSceneRenderingAllocatorObject<FLightmapDensityMeshProcessor>,public FMeshPassProcessor { public :)",
    "insertText": "FLightmapDensityMeshProcessor(const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FSceneView* InViewIfDynamicMeshCommand, FMeshPassDrawListContext* InDrawListContext)"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId = -1)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (template<LightMapPolicyType> bool)",
    "insertText": "Process(const FMeshBatch& MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, const LightMapPolicyType& RESTRICT LightMapPolicy, const typename LightMapPolicyType::ElementDataType& RESTRICT LightMapElementData, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode)"
  },
  {
    "label": "RenderLightMapDensities()",
    "kind": "Method",
    "detail": "Function (FMeshPassProcessorRenderState PassDrawRenderState ; } ; void)",
    "insertText": "RenderLightMapDensities(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, const FRenderTargetBindingSlots& RenderTargets)"
  }
]