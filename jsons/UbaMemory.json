[
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "_Other",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Other"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "MemoryBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryBlock"
  },
  {
    "label": "GrowingAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GrowingAllocator"
  },
  {
    "label": "GrowingAllocatorNoLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GrowingAllocatorNoLock"
  },
  {
    "label": "BlockAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockAllocator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaSynchronization . h \" # include<list> # include<map> # include<set> # include<string> # include<unordered_map> # include<unordered_set> # include<vector> # include<functional> # if UBA_USE_MIMALLOC # include<mimalloc . h> # endif # if PLATFORM_WINDOWS&& !)",
    "insertText": "defined(aligned_alloc) #define aligned_alloc(a, s) _aligned_malloc(s, a) #define aligned_free(p) _aligned_free(p) #else #define aligned_free(p) free(p)"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "AlignUp(T arg, uintptr_t alignment)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (} # if UBA_USE_MIMALLOC template<Type> class Allocator { public : using value_type = Type ;)",
    "insertText": "Allocator()"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Allocator(const Allocator& o)"
  },
  {
    "label": "Allocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Allocator(Allocator&& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Allocator&)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} value_type*)",
    "insertText": "allocate(u64 n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(value_type* p, u64 n)"
  },
  {
    "label": "mi_free_size_aligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_free_size_aligned(p, sizeof(value_type)*n, alignof(value_type))"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "max_size()"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(p)"
  },
  {
    "label": "MemoryBlock()",
    "kind": "Method",
    "detail": "Function (} } ; # else template<Type> using Allocator = std::allocator<Type> ; # endif using TString = std::basic_string<tchar,std::char_traits<tchar>,Allocator<tchar>> ; template<class T> using Function = std::function<T> ; template<Key,Value,Hash = std::hash<Key>,EqualTo = std::equal_to<Key>> using UnorderedMap = std::unordered_map<Key,Value,Hash,EqualTo,Allocator<std::pair<const Key,Value>>> ; template<Key,Hash = std::hash<Key>,EqualTo = std::equal_to<Key>> using UnorderedSet = std::unordered_set<Key,Hash,EqualTo,Allocator<Key>> ; template<Key,Value,Less = std::less<Key>> using MultiMap = std::multimap<Key,Value,Less,Allocator<std::pair<const Key,Value>>> ; template<Value,Alloc = Allocator<Value>> using Vector = std::vector<Value,Alloc> ; template<Value,Alloc = Allocator<Value>> using List = std::list<Value,Alloc> ; template<Key,Value,Less = std::less<Key>> using Map = std::map<Key,Value,Less,Allocator<std::pair<const Key,Value>>> ; template<Key,Less = std::less<Key>> using Set = std::set<Key,Less,Allocator<Key>> ; struct MemoryBlock {)",
    "insertText": "MemoryBlock(u64 reserveSize_, void* baseAddress_ = nullptr)"
  },
  {
    "label": "MemoryBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryBlock(u8* baseAddress_ = nullptr)"
  },
  {
    "label": "MemoryBlock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MemoryBlock()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(u64 reserveSize_, void* baseAddress_ = nullptr, bool useHugePages = false)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(u64 bytes, u64 alignment, const tchar* hint)"
  },
  {
    "label": "AllocateNoLock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocateNoLock(u64 bytes, u64 alignment, const tchar* hint)"
  },
  {
    "label": "ReserveNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveNoLock(u64 bytes, const tchar* hint)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* p)"
  },
  {
    "label": "Strdup()",
    "kind": "Method",
    "detail": "Function (tchar*)",
    "insertText": "Strdup(const tchar* str)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(MemoryBlock& other)"
  },
  {
    "label": "GrowingAllocator()",
    "kind": "Method",
    "detail": "Function (ReaderWriterLock lock ; u8* memory ; u64 reserveSize = 0 ; u64 writtenSize = 0 ; u64 mappedSize = 0 ; } ; template<Type> class GrowingAllocator { public : using value_type = Type ;)",
    "insertText": "GrowingAllocator(MemoryBlock* block) : m_block(block)"
  },
  {
    "label": "GrowingAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GrowingAllocator(const GrowingAllocator& o) : m_block(o.m_block)"
  },
  {
    "label": "GrowingAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GrowingAllocator(GrowingAllocator&& o) noexcept : m_block(o.m_block)"
  },
  {
    "label": "GrowingAllocator()",
    "kind": "Method",
    "detail": "Function (} template<class _Other>)",
    "insertText": "GrowingAllocator(const GrowingAllocator<_Other>& o) noexcept : m_block(o.m_block)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (m_block ->)",
    "insertText": "Free(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const GrowingAllocator& o)"
  },
  {
    "label": "GrowingAllocatorNoLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GrowingAllocatorNoLock(const GrowingAllocatorNoLock& o) : m_block(o.m_block)"
  },
  {
    "label": "GrowingAllocatorNoLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GrowingAllocatorNoLock(GrowingAllocatorNoLock&& o) noexcept : m_block(o.m_block)"
  },
  {
    "label": "GrowingAllocatorNoLock()",
    "kind": "Method",
    "detail": "Function (} template<class _Other>)",
    "insertText": "GrowingAllocatorNoLock(const GrowingAllocatorNoLock<_Other>& o) noexcept : m_block(o.m_block)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(value_type*, u64)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const GrowingAllocatorNoLock& o)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate()"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(m_lock, lock)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ptr(void*)"
  },
  {
    "label": "m_nextFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_nextFree(u64*)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (# if UBA_DEBUG)",
    "insertText": "memset(mem, 0xFE, sizeof(Type))"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (m_nextFree =)",
    "insertText": "u64(mem)"
  },
  {
    "label": "HexToByte()",
    "kind": "Method",
    "detail": "Function (} ReaderWriterLock m_lock ; MemoryBlock& m_memory ; u64 m_nextFree = 0 ; } ; u8)",
    "insertText": "HexToByte(tchar c)"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (} tchar g_hexChars [ ] =)",
    "insertText": "TC(\"0123456789abcdef\")"
  },
  {
    "label": "ValueToString()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "ValueToString(tchar* out, int capacity, u64 value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (tchar* it = out ;)",
    "insertText": "for(int i=0;i!=8;++i)"
  },
  {
    "label": "g_hexChars()",
    "kind": "Method",
    "detail": "Function (* it + + =)",
    "insertText": "g_hexChars(value >> 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* it + + = g_hexChars [ value& 0 xf ] ; value = value>> 8 ;)",
    "insertText": "if(!value)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (}* it = 0 ; return)",
    "insertText": "u32(it - out)"
  },
  {
    "label": "StringToValue()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "StringToValue(const tchar* str, u64 len)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (u64 v = 0 ; const tchar* pos = str + len ;)",
    "insertText": "while(pos != str)"
  },
  {
    "label": "HexToByte()",
    "kind": "Method",
    "detail": "Function (u8 b =)",
    "insertText": "HexToByte(*--pos)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "u64(v << 8) | u64(a << 4 | b)"
  },
  {
    "label": "StringToValue2()",
    "kind": "Method",
    "detail": "Function (} return v ; } u64)",
    "insertText": "StringToValue2(const tchar* str, u64 len)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (u64 v = 0 ; const tchar* pos = str ;)",
    "insertText": "while(*pos)"
  },
  {
    "label": "HexToByte()",
    "kind": "Method",
    "detail": "Function (u8 a =)",
    "insertText": "HexToByte(*pos++)"
  },
  {
    "label": "SupportsHugePages()",
    "kind": "Method",
    "detail": "Function (} return v ; } bool)",
    "insertText": "SupportsHugePages()"
  },
  {
    "label": "GetHugePageCount()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetHugePageCount()"
  }
]