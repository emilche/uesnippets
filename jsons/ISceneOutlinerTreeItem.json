[
  {
    "label": "ISceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutliner"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "SCENEOUTLINER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCENEOUTLINER_API"
  },
  {
    "label": "FlagsType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagsType"
  },
  {
    "label": "FlagsType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" SceneOutlinerStandaloneTypes . h \" class ISceneOutliner ; class UToolMenu ; struct ISceneOutlinerTreeItem : TSharedFromThis<ISceneOutlinerTreeItem> { SSceneOutliner ; struct FlagsType { bool bIsExpanded : 1 ; bool bIsFilteredOut : 1 ; bool bInteractive : 1 ; bool bChildrenRequireSort : 1 ;)",
    "insertText": "FlagsType() : bIsExpanded(1), bIsFilteredOut(0), bInteractive(1), bChildrenRequireSort(1)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} } ; public : FlagsType Flags ; TWeakPtr<ISceneOutliner> WeakSceneOutliner ;)",
    "insertText": "DECLARE_DELEGATE(FOnRenameRequest)"
  },
  {
    "label": "ISceneOutlinerTreeItem()",
    "kind": "Method",
    "detail": "Function (FOnRenameRequest RenameRequestEvent ; protected :)",
    "insertText": "ISceneOutlinerTreeItem(FSceneOutlinerTreeItemType InType) : Parent(nullptr), TreeType(InType)"
  },
  {
    "label": "ISceneOutlinerTreeItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ISceneOutlinerTreeItem()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<ISceneOutlinerTreeItem> Parent ; TSet<TWeakPtr<ISceneOutlinerTreeItem>> Children ; const FSceneOutlinerTreeItemType Type ; FSceneOutlinerTreeItemType TreeType ; public : FSceneOutlinerTreeItemPtr)",
    "insertText": "GetParent()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(FSceneOutlinerTreeItemRef Child)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (Child -> Parent =)",
    "insertText": "AsShared()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(MoveTemp(Child))"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveChild(const FSceneOutlinerTreeItemRef& Child)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (Child -> Parent = nullptr ; } } const TSet<TWeakPtr<ISceneOutlinerTreeItem>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FInteractivePredicate, const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Filter(FFilterPredicate Pred)"
  },
  {
    "label": "GetInteractiveState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInteractiveState(FInteractivePredicate Pred)"
  },
  {
    "label": "CastTo()",
    "kind": "Method",
    "detail": "Function (} public : template<T> T*)",
    "insertText": "CastTo()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsA()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (public : FSceneOutlinerTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (FFolder::FRootObject)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract()"
  },
  {
    "label": "OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExpansionChanged()"
  },
  {
    "label": "GenerateLabelWidget()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<SWidget>)",
    "insertText": "GenerateLabelWidget(ISceneOutliner& Outliner, const STableRow<FSceneOutlinerTreeItemPtr>& InRow)"
  },
  {
    "label": "OnVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnVisibilityChanged(const bool bNewVisibility)"
  },
  {
    "label": "ShouldShowVisibilityState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShowVisibilityState()"
  },
  {
    "label": "ShouldRemoveOnceLastChildRemoved()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRemoveOnceLastChildRemoved()"
  }
]