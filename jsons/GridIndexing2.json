[
  {
    "label": "TScaleGridIndexer2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScaleGridIndexer2"
  },
  {
    "label": "TShiftGridIndexer2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TShiftGridIndexer2"
  },
  {
    "label": "TScaleGridIndexer2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" # include \" Math / IntRect . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TScaleGridIndexer2 { RealType CellSize ;)",
    "insertText": "TScaleGridIndexer2() : CellSize((RealType)1)"
  },
  {
    "label": "TScaleGridIndexer2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TScaleGridIndexer2(RealType CellSize) : CellSize(CellSize)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "ToGrid(const TVector2<RealType>& P)"
  },
  {
    "label": "FromGrid()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "FromGrid(const FVector2i& GridPoint)"
  },
  {
    "label": "TShiftGridIndexer2()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TScaleGridIndexer2<float> FScaleGridIndexer2f ; typedef TScaleGridIndexer2<double> FScaleGridIndexer2d ; template<RealType> struct TShiftGridIndexer2 { RealType CellSize ; TVector2<RealType> Origin ;)",
    "insertText": "TShiftGridIndexer2(const TVector2<RealType>& origin, RealType cellSize)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (Origin = origin ; CellSize = cellSize ;)",
    "insertText": "ensure(CellSize >= TMathUtil<RealType>::ZeroTolerance)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "ToGrid(const TVector2<RealType>& Point)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "ToGrid(const TBox2<RealType>& Box)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (const FVector2i Min =)",
    "insertText": "ToGrid(Box.Min)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (const FVector2i Max =)",
    "insertText": "ToGrid(Box.Max)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "ToGrid(const TBox<RealType>& Box)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (const FVector2i Min =)",
    "insertText": "ToGrid(TVector2<RealType>(Box.Min))"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (const FVector2i Max =)",
    "insertText": "ToGrid(TVector2<RealType>(Box.Max))"
  },
  {
    "label": "FromGrid()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "FromGrid(const TVector2<RealType>& RealGridPoint)"
  },
  {
    "label": "BoxFromGrid()",
    "kind": "Method",
    "detail": "Function (} TBox2<RealType>)",
    "insertText": "BoxFromGrid(const FVector2i& GridPoint)"
  },
  {
    "label": "FromGrid()",
    "kind": "Method",
    "detail": "Function (const TVector2<RealType> Min =)",
    "insertText": "FromGrid(GridPoint)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (const TVector2<RealType> Max = Min + TVector2<)",
    "insertText": "RealType(CellSize)"
  }
]