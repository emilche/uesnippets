[
  {
    "label": "FFormatArgsTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFormatArgsTrace"
  },
  {
    "label": "EFormatArgTypeCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFormatArgTypeCode"
  },
  {
    "label": "TIsStringArgument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsStringArgument"
  },
  {
    "label": "FormatArgTypeCode_SizeBitMask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<CoreTypes . h> # include \" Containers / ContainerAllocationPolicies . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / CString . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Traits / IsCharType . h \" struct FFormatArgsTrace { enum EFormatArgTypeCode { FormatArgTypeCode_CategoryBitShift = 6,)",
    "insertText": "FormatArgTypeCode_SizeBitMask(1 << FormatArgTypeCode_CategoryBitShift)"
  },
  {
    "label": "EncodeArgumentsWithArray()",
    "kind": "Method",
    "detail": "Function (template<int InlineSize> using TBufferWithOverflow = TArray<uint8,TInlineAllocator<InlineSize>> ; template<BufferType,. . . Types> int32)",
    "insertText": "EncodeArgumentsWithArray(BufferType& Array, Types... FormatArgs)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int32 FormatArgsCount =)",
    "insertText": "sizeof(FormatArgs)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 FormatArgsSize = 1 + FormatArgsCount +)",
    "insertText": "int32(GetArgumentsEncodedSize(FormatArgs...))"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "SetNumUninitialized(FormatArgsSize)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (uint8* Buffer = Array .)",
    "insertText": "GetData()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* TypeCodesBufferPtr = Buffer ;* TypeCodesBufferPtr + + =)",
    "insertText": "uint8(FormatArgsCount)"
  },
  {
    "label": "EncodeArgumentsInternal()",
    "kind": "Method",
    "detail": "Function (uint8* PayloadBufferPtr = TypeCodesBufferPtr + FormatArgsCount ;)",
    "insertText": "EncodeArgumentsInternal(TypeCodesBufferPtr, PayloadBufferPtr, FormatArgs...)"
  },
  {
    "label": "GetArgumentEncodedSize()",
    "kind": "Method",
    "detail": "Function (} private : template<T> struct TIsStringArgument { enum { Value = TAnd<TIsPointer<T>,TIsCharType<std::remove_cv_t<TRemovePointer<T>::Type>>>::Value } ; } ; template<T,CharType = std::remove_cv_t<TRemovePointer<T>::Type>> uint64)",
    "insertText": "GetArgumentEncodedSize(T Argument)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "sizeof(CharType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } else { return)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "GetArgumentsEncodedSize()",
    "kind": "Method",
    "detail": "Function (} } uint64)",
    "insertText": "GetArgumentsEncodedSize()"
  },
  {
    "label": "EncodeArgumentInternal()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "EncodeArgumentInternal(uint8*& TypeCodesPtr, uint8*& PayloadPtr, T Argument)"
  },
  {
    "label": "SizeBytes()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "SizeBytes(uint16)FMath::Min<int32>((int32)UINT16_MAX, (TCString<CharType>::Strlen(Argument) + 1) * sizeof(CharType))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(PayloadPtr, Argument, SizeBytes)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const CharType Ellipsis [ 4 ] = { L ' . ',L ' . ',L ' . ',L ' \\ 0 ' } ; void* PatchPoint = PayloadPtr + SizeBytes -)",
    "insertText": "sizeof(Ellipsis) - (SizeBytes % sizeof(CharType))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(PatchPoint, Ellipsis, sizeof(Ellipsis))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (} PayloadPtr + = SizeBytes ; } else { CharType Terminator { 0 } ;)",
    "insertText": "memcpy(PayloadPtr, &Terminator, sizeof(CharType))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else { if)",
    "insertText": "constexpr(std::is_floating_point_v<T>)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_SUPPORTS_UNALIGNED_LOADS* reinterpret_cast<)",
    "insertText": "T(PayloadPtr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "memcpy(PayloadPtr, &Argument, sizeof Argument)"
  },
  {
    "label": "EncodeArgumentsInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EncodeArgumentsInternal(uint8*& TypeCodesPtr, uint8*& PayloadPtr)"
  },
  {
    "label": "EncodeArgumentsInternal()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . Types> void)",
    "insertText": "EncodeArgumentsInternal(uint8*& ArgDescriptorsPtr, uint8*& ArgPayloadPtr, T Head, Types... Tail)"
  },
  {
    "label": "EncodeArgumentInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeArgumentInternal(ArgDescriptorsPtr, ArgPayloadPtr, Head)"
  },
  {
    "label": "EncodeArgumentsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeArgumentsInternal(ArgDescriptorsPtr, ArgPayloadPtr, Tail...)"
  }
]