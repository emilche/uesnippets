[
  {
    "label": "SuppressionFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SuppressionFilter"
  },
  {
    "label": "SuppressionFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_SUPPRESSION_FILTER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_SUPPRESSION_FILTER_H_ # include<array> # include<vector> # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / aec3_fft . h \" # include \" modules / audio_processing / aec3 / block . h \" # include \" modules / audio_processing / aec3 / fft_data . h \" namespace webrtc { class SuppressionFilter { public :)",
    "insertText": "SuppressionFilter(Aec3Optimization optimization, int sample_rate_hz, size_t num_capture_channels_)"
  },
  {
    "label": "SuppressionFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SuppressionFilter()"
  },
  {
    "label": "SuppressionFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressionFilter(const SuppressionFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SuppressionFilter&)",
    "insertText": "operator(const SuppressionFilter&)"
  },
  {
    "label": "ApplyGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyGain(rtc::ArrayView<const FftData> comfort_noise, rtc::ArrayView<const FftData> comfort_noise_high_bands, const std::array<float, kFftLengthBy2Plus1>& suppression_gain, float high_bands_gain, rtc::ArrayView<const FftData> E_lowest_band, Block* e)"
  }
]