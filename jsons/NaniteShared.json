[
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "FPackedView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedView"
  },
  {
    "label": "FPackedViewArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedViewArray"
  },
  {
    "label": "FPackedViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedViewParams"
  },
  {
    "label": "FVisualizeResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizeResult"
  },
  {
    "label": "FBinningData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBinningData"
  },
  {
    "label": "FNodesAndClusterBatchesBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodesAndClusterBatchesBuffer"
  },
  {
    "label": "FGlobalResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalResources"
  },
  {
    "label": "PassBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassBuffers"
  },
  {
    "label": "FNaniteGlobalShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteGlobalShader"
  },
  {
    "label": "FNaniteMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteMaterialShader"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FHWRasterizePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHWRasterizePS"
  },
  {
    "label": "FHWRasterizeVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHWRasterizeVS"
  },
  {
    "label": "FHWRasterizeMS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHWRasterizeMS"
  },
  {
    "label": "FMicropolyRasterizeCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicropolyRasterizeCS"
  },
  {
    "label": "FNaniteRasterPipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterPipeline"
  },
  {
    "label": "FNaniteRasterBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterBin"
  },
  {
    "label": "FNaniteRasterMaterialCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterMaterialCacheKey"
  },
  {
    "label": "FNaniteRasterMaterialCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterMaterialCache"
  },
  {
    "label": "FNaniteRasterEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterEntry"
  },
  {
    "label": "FNaniteRasterEntryKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterEntryKeyFuncs"
  },
  {
    "label": "FNaniteRasterBinIndexTranslator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteRasterBinIndexTranslator"
  },
  {
    "label": "FNaniteRasterPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteRasterPipelines"
  },
  {
    "label": "FNaniteRasterPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteRasterPipelines"
  },
  {
    "label": "FFixedFunctionBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedFunctionBin"
  },
  {
    "label": "FNaniteShadingBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingBin"
  },
  {
    "label": "FNaniteBasePassData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteBasePassData"
  },
  {
    "label": "FNaniteLumenCardData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteLumenCardData"
  },
  {
    "label": "FMeshDrawShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawShaderBindings"
  },
  {
    "label": "FNaniteShadingPipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingPipeline"
  },
  {
    "label": "FNaniteShadingEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingEntry"
  },
  {
    "label": "FNaniteShadingEntryKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingEntryKeyFuncs"
  },
  {
    "label": "FNaniteShadingPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteShadingPipelines"
  },
  {
    "label": "FNaniteShadingCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingCommand"
  },
  {
    "label": "FNaniteShadingCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingCommands"
  },
  {
    "label": "UpdateLODScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLODScales(const float NaniteMaxPixelsPerEdge, const float MinPixelsPerEdgeHW)"
  },
  {
    "label": "SetCullingViewOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCullingViewOverrides(FViewInfo const* InCullingView, Nanite::FPackedViewParams& InOutParams)"
  },
  {
    "label": "CreatePackedView()",
    "kind": "Method",
    "detail": "Function (FPackedView)",
    "insertText": "CreatePackedView(const FPackedViewParams& Params)"
  },
  {
    "label": "CreatePackedViewFromViewInfo()",
    "kind": "Method",
    "detail": "Function (FPackedView)",
    "insertText": "CreatePackedViewFromViewInfo(\n\tconst FViewInfo& View,\n\tFIntPoint RasterContextSize,\n\tuint32 Flags,\n\tuint32 StreamingPriorityCategory = 0,\n\tfloat MinBoundsRadius = 0.0f,\n\tfloat MaxPixelsPerEdgeMultipler = 1.0f,\n\t/** Note: this rect should be in HZB space. */\n\tconst FIntRect* InHZBTestViewRect = nullptr\n)"
  },
  {
    "label": "ShouldDrawSceneViewsInOneNanitePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawSceneViewsInOneNanitePass(const FViewInfo& View)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetMaxCandidateClusters()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxCandidateClusters()"
  },
  {
    "label": "GetMaxClusterBatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxClusterBatches()"
  },
  {
    "label": "GetMaxVisibleClusters()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxVisibleClusters()"
  },
  {
    "label": "GetMaxNodes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxNodes()"
  },
  {
    "label": "GetMaxCandidatePatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxCandidatePatches()"
  },
  {
    "label": "GetMaxVisiblePatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxVisiblePatches()"
  },
  {
    "label": "CreateDebugNaniteShadingUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FNaniteShadingUniformParameters>)",
    "insertText": "CreateDebugNaniteShadingUniformBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "CreateDebugNaniteRasterUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FNaniteRasterUniformParameters>)",
    "insertText": "CreateDebugNaniteRasterUniformBuffer(FRDGBuilder& GraphBuilder, uint32 InstanceSceneDataSOAStride)"
  },
  {
    "label": "DoesPlatformSupportNanite()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DoesPlatformSupportNanite(Parameters.Platform)"
  },
  {
    "label": "GetFixedFunctionPipeline()",
    "kind": "Method",
    "detail": "Function (FNaniteRasterPipeline)",
    "insertText": "GetFixedFunctionPipeline(uint8 BinMask)"
  },
  {
    "label": "FNaniteRasterPipelines()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FNaniteRasterPipelines()"
  },
  {
    "label": "AllocateFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateFixedFunctionBins()"
  },
  {
    "label": "ReleaseFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFixedFunctionBins()"
  },
  {
    "label": "ReloadFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadFixedFunctionBins()"
  },
  {
    "label": "AllocateBin()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "AllocateBin(bool bPerPixelEval)"
  },
  {
    "label": "ReleaseBin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBin(uint16 BinIndex)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (FNaniteRasterBin)",
    "insertText": "Register(const FNaniteRasterPipeline& InRasterPipeline)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FNaniteRasterBin& InRasterBin)"
  },
  {
    "label": "RegisterBinForCustomPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterBinForCustomPass(uint16 BinIndex)"
  },
  {
    "label": "UnregisterBinForCustomPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterBinForCustomPass(uint16 BinIndex)"
  },
  {
    "label": "FNaniteShadingPipelines()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FNaniteShadingPipelines()"
  },
  {
    "label": "AllocateBin()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "AllocateBin()"
  },
  {
    "label": "ReleaseBin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBin(uint16 BinIndex)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (FNaniteShadingBin)",
    "insertText": "Register(const FNaniteShadingPipeline& InShadingPipeline)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FNaniteShadingBin& InShadingBin)"
  },
  {
    "label": "BuildIdList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildIdList()"
  },
  {
    "label": "ComputeRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeRelevance(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "ShouldRenderNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderNanite(const FScene* Scene, const FViewInfo& View, bool bCheckForAtomicSupport = true)"
  },
  {
    "label": "WouldRenderNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WouldRenderNanite(const FScene* Scene, const FViewInfo& View, bool bCheckForAtomicSupport = true, bool bCheckForProjectSetting = true)"
  },
  {
    "label": "UseComputeDepthExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseComputeDepthExport()"
  }
]