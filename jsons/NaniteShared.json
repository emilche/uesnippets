[
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "FPackedView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedView"
  },
  {
    "label": "FPackedViewArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedViewArray"
  },
  {
    "label": "FPackedViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedViewParams"
  },
  {
    "label": "FVisualizeResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizeResult"
  },
  {
    "label": "FBinningData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBinningData"
  },
  {
    "label": "FNodesAndClusterBatchesBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodesAndClusterBatchesBuffer"
  },
  {
    "label": "FGlobalResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalResources"
  },
  {
    "label": "PassBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassBuffers"
  },
  {
    "label": "FNaniteGlobalShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteGlobalShader"
  },
  {
    "label": "FNaniteMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteMaterialShader"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FHWRasterizePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHWRasterizePS"
  },
  {
    "label": "FHWRasterizeVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHWRasterizeVS"
  },
  {
    "label": "FHWRasterizeMS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHWRasterizeMS"
  },
  {
    "label": "FMicropolyRasterizeCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicropolyRasterizeCS"
  },
  {
    "label": "FNaniteRasterPipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterPipeline"
  },
  {
    "label": "FNaniteRasterBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterBin"
  },
  {
    "label": "FNaniteRasterMaterialCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterMaterialCacheKey"
  },
  {
    "label": "FNaniteRasterMaterialCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterMaterialCache"
  },
  {
    "label": "FNaniteRasterEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterEntry"
  },
  {
    "label": "FNaniteRasterEntryKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterEntryKeyFuncs"
  },
  {
    "label": "FNaniteRasterBinIndexTranslator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteRasterBinIndexTranslator"
  },
  {
    "label": "FNaniteRasterPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteRasterPipelines"
  },
  {
    "label": "FFixedFunctionBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedFunctionBin"
  },
  {
    "label": "FNaniteShadingBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingBin"
  },
  {
    "label": "FNaniteBasePassData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteBasePassData"
  },
  {
    "label": "FNaniteLumenCardData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteLumenCardData"
  },
  {
    "label": "FMeshDrawShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawShaderBindings"
  },
  {
    "label": "FNaniteShadingPipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingPipeline"
  },
  {
    "label": "FNaniteShadingEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingEntry"
  },
  {
    "label": "FNaniteShadingEntryKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingEntryKeyFuncs"
  },
  {
    "label": "FNaniteShadingPipelines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteShadingPipelines"
  },
  {
    "label": "FNaniteShadingCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingCommand"
  },
  {
    "label": "FNaniteShadingCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingCommands"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameterMacros . h \" # include \" GlobalShader . h \" # include \" UnifiedBuffer . h \" # include \" RenderGraphResources . h \" # include \" RenderGraphUtils . h \" # include \" Rendering / NaniteResources . h \" # include \" NaniteFeedback . h \" # include \" MaterialDomain . h \" # include \" MaterialShaderType . h \" # include \" MaterialShader . h \" # include \" Misc / ScopeRWLock . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" LightMapRendering . h \" # include \" RenderUtils . h \" # include \" PrimitiveViewRelevance . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNanite, Warning, All)"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(NaniteDebug, TEXT(\"Nanite Debug\"))"
  },
  {
    "label": "UpdateLODScales()",
    "kind": "Method",
    "detail": "Function (struct FSceneTextures ; struct FDBufferTextures ; namespace Nanite { struct FPackedView { FMatrix44f SVPositionToTranslatedWorld ; FMatrix44f ViewToTranslatedWorld ; FMatrix44f TranslatedWorldToView ; FMatrix44f TranslatedWorldToClip ; FMatrix44f ViewToClip ; FMatrix44f ClipToRelativeWorld ; FMatrix44f PrevTranslatedWorldToView ; FMatrix44f PrevTranslatedWorldToClip ; FMatrix44f PrevViewToClip ; FMatrix44f PrevClipToRelativeWorld ; FIntVector4 ViewRect ; FVector4f ViewSizeAndInvSize ; FVector4f ClipSpaceScaleOffset ; FVector3f PreViewTranslationHigh ; float ViewOriginHighX ; FVector3f PrevPreViewTranslationHigh ; float ViewOriginHighY ; FVector3f PrevPreViewTranslationLow ; float CullingViewMinRadiusTestFactorSq ; FVector3f ViewOriginLow ; float ViewOriginHighZ ; FVector3f CullingViewOriginTranslatedWorld ; float RangeBasedCullingDistance ; FVector3f ViewForward ; float NearPlane ; FVector4f TranslatedGlobalClipPlane ; FVector3f PreViewTranslationLow ; float CullingViewScreenMultiple ; FVector2f LODScales ; uint32 InstanceOcclusionQueryMask ; uint32 StreamingPriorityCategory_AndFlags ; FIntVector4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ ; FIntVector4 HZBTestViewRect ; FUintVector4 FirstPersonTransformRowsExceptRow2Z ; uint32 FirstPersonTransformRow2Z ; uint32 LightingChannelMask ; uint32 Padding0 ; uint32 Padding1 ; void)",
    "insertText": "UpdateLODScales(const float NaniteMaxPixelsPerEdge, const float MinPixelsPerEdgeHW)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; class FPackedViewArray { public : using ArrayType = TArray<FPackedView,SceneRenderingAllocator> ; using TaskLambdaType = TFunction<)",
    "insertText": "void(ArrayType&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FPackedViewArray*)",
    "insertText": "Create(FRDGBuilder& GraphBuilder, const FPackedView& View)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FPackedViewArray*)",
    "insertText": "Create(FRDGBuilder& GraphBuilder, uint32 NumPrimaryViews, uint32 MaxNumMips, ArrayType&& Views)"
  },
  {
    "label": "CreateWithSetupTask()",
    "kind": "Method",
    "detail": "Function (FPackedViewArray*)",
    "insertText": "CreateWithSetupTask(FRDGBuilder& GraphBuilder, uint32 NumPrimaryViews, uint32 MaxNumMips, TaskLambdaType&& TaskLambda, UE::Tasks::FPipe* Pipe = nullptr, bool bExecuteInTask = true)"
  },
  {
    "label": "GetViews()",
    "kind": "Method",
    "detail": "Function (const ArrayType&)",
    "insertText": "GetViews()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (SetupTask .)",
    "insertText": "Wait()"
  },
  {
    "label": "RDG_FRIEND_ALLOCATOR_FRIEND()",
    "kind": "Method",
    "detail": "Function (} ArrayType Views ; UE::Tasks::FTask SetupTask ;)",
    "insertText": "RDG_FRIEND_ALLOCATOR_FRIEND(FPackedViewArray)"
  },
  {
    "label": "SetCullingViewOverrides()",
    "kind": "Method",
    "detail": "Function (} ; struct FPackedViewParams { FViewMatrices ViewMatrices ; FViewMatrices PrevViewMatrices ; FIntRect ViewRect ; FIntPoint RasterContextSize ; uint32 StreamingPriorityCategory = 0 ; float MinBoundsRadius = 0 . 0 f ; float LODScaleFactor = 1 . 0 f ; float ViewLODDistanceFactor = 1 . 0 f ; uint32 Flags = NANITE_VIEW_FLAG_NEAR_CLIP ; int32 TargetLayerIndex = INDEX_NONE ; int32 PrevTargetLayerIndex = INDEX_NONE ; int32 TargetMipLevel = 0 ; int32 TargetMipCount = 1 ; float RangeBasedCullingDistance = 0 . 0 f ; FIntRect HZBTestViewRect = { 0,0,0,0 } ; float MaxPixelsPerEdgeMultipler = 1 . 0 f ; bool bUseCullingViewOverrides = false ; FVector CullingViewOrigin = FVector::ZeroVector ; float CullingViewScreenMultiple = - 1 . 0 f ; float CullingViewMinRadiusTestFactorSq = 0 . 0 f ; FPlane GlobalClippingPlane = { 0 . 0 f,0 . 0 f,0 . 0 f,0 . 0 f } ; uint32 InstanceOcclusionQueryMask = 0 ; uint32 LightingChannelMask = 0 b111 ; bool bUseLightingChannelMask = false ; } ; void)",
    "insertText": "SetCullingViewOverrides(FViewInfo const* InCullingView, Nanite::FPackedViewParams& InOutParams)"
  },
  {
    "label": "CreatePackedView()",
    "kind": "Method",
    "detail": "Function (FPackedView)",
    "insertText": "CreatePackedView(const FPackedViewParams& Params)"
  },
  {
    "label": "CreatePackedViewFromViewInfo()",
    "kind": "Method",
    "detail": "Function (FPackedView)",
    "insertText": "CreatePackedViewFromViewInfo(const FViewInfo& View, FIntPoint RasterContextSize, uint32 Flags, uint32 StreamingPriorityCategory = 0, float MinBoundsRadius = 0.0f, float MaxPixelsPerEdgeMultipler = 1.0f, const FIntRect* InHZBTestViewRect = nullptr)"
  },
  {
    "label": "ShouldDrawSceneViewsInOneNanitePass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawSceneViewsInOneNanitePass(const FViewInfo& View)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (struct FVisualizeResult { FRDGTextureRef ModeOutput ; FName ModeName ; int32 ModeID ; uint8 bCompositeScene : 1 ; uint8 bSkippedTile : 1 ; } ; struct FBinningData { uint32 BinCount = 0 ; FRDGBufferRef DataBuffer = nullptr ; FRDGBufferRef MetaBuffer = nullptr ; FRDGBufferRef IndirectArgs = nullptr ; } ; struct FNodesAndClusterBatchesBuffer { TRefCountPtr<FRDGPooledBuffer> Buffer ; uint32 NumNodes = 0 ; uint32 NumClusterBatches = 0 ; } ; class FGlobalResources : public FRenderResource { public : struct PassBuffers { TRefCountPtr<FRDGPooledBuffer> StatsRasterizeArgsSWHWBuffer ; } ; uint32 StatsRenderFlags = 0 ; uint32 StatsDebugFlags = 0 ; const int32 MaxPickingBuffers = 4 ; int32 PickingBufferWriteIndex = 0 ; int32 PickingBufferNumPending = 0 ; TArray<TUniquePtr<FRHIGPUBufferReadback>> PickingBuffers ; TRefCountPtr<FRDGPooledBuffer> SplitWorkQueueBuffer ; TRefCountPtr<FRDGPooledBuffer> OccludedPatchesBuffer ; FNodesAndClusterBatchesBuffer MainAndPostNodesAndClusterBatchesBuffer ; public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetMaxCandidateClusters()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxCandidateClusters()"
  },
  {
    "label": "GetMaxClusterBatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxClusterBatches()"
  },
  {
    "label": "GetMaxVisibleClusters()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxVisibleClusters()"
  },
  {
    "label": "GetMaxNodes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxNodes()"
  },
  {
    "label": "GetMaxCandidatePatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxCandidatePatches()"
  },
  {
    "label": "GetMaxVisiblePatches()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxVisiblePatches()"
  },
  {
    "label": "GetMainPassBuffers()",
    "kind": "Method",
    "detail": "Function (PassBuffers&)",
    "insertText": "GetMainPassBuffers()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FNaniteRasterUniformParameters, ) SHADER_PARAMETER(FIntVector4, PageConstants) SHADER_PARAMETER(uint32, MaxNodes) SHADER_PARAMETER(uint32, MaxVisibleClusters) SHADER_PARAMETER(uint32, MaxCandidatePatches) SHADER_PARAMETER(uint32, MaxPatchesPerGroup) SHADER_PARAMETER(uint32, MeshPass) SHADER_PARAMETER(float, InvDiceRate) SHADER_PARAMETER(uint32, RenderFlags) SHADER_PARAMETER(uint32, DebugFlags) END_SHADER_PARAMETER_STRUCT() extern TRDGUniformBufferRef<FNaniteRasterUniformParameters> CreateDebugNaniteRasterUniformBuffer(FRDGBuilder& GraphBuilder, uint32 InstanceSceneDataSOAStride)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FNaniteRayTracingUniformParameters, ) SHADER_PARAMETER(FIntVector4, PageConstants) SHADER_PARAMETER(uint32, MaxNodes) SHADER_PARAMETER(uint32, MaxVisibleClusters) SHADER_PARAMETER(uint32, RenderFlags) SHADER_PARAMETER(float, RayTracingCutError) SHADER_PARAMETER_SRV(ByteAddressBuffer, ClusterPageData) SHADER_PARAMETER_SRV(ByteAddressBuffer, HierarchyBuffer) SHADER_PARAMETER_SRV(StructuredBuffer<uint>, RayTracingDataBuffer) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "FNaniteGlobalShader()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNaniteGlobalShader()"
  },
  {
    "label": "FNaniteGlobalShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNaniteGlobalShader(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VF_SUPPORTS_PRIMITIVE_SCENE_DATA\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_SPLINE_MESH_SCENE_RESOURCES\"), UseSplineMeshSceneResources(Parameters.Platform))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_ForceDXC)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_HLSL2021)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_WarningsAsErrors)"
  },
  {
    "label": "FNaniteMaterialShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FNaniteMaterialShader : public FMaterialShader { public :)",
    "insertText": "FNaniteMaterialShader()"
  },
  {
    "label": "FNaniteMaterialShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNaniteMaterialShader(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FMaterialShader(Initializer)"
  },
  {
    "label": "IsVertexProgrammable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexProgrammable(const FMaterialShaderParameters& MaterialParameters, bool bHWRasterShader)"
  },
  {
    "label": "IsPixelProgrammable()",
    "kind": "Method",
    "detail": "Function (const bool bPixelProgrammable =)",
    "insertText": "IsPixelProgrammable(MaterialParameters)"
  },
  {
    "label": "bPixelProgrammable()",
    "kind": "Method",
    "detail": "Function (const bool bHasVertexUVs =)",
    "insertText": "bPixelProgrammable(MaterialParameters.bHasVertexInterpolator || MaterialParameters.NumCustomizedUVs > 0)"
  },
  {
    "label": "bHasTessellation()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasTessellation(!bHWRasterShader && MaterialParameters.bIsTessellationEnabled)"
  },
  {
    "label": "IsPixelProgrammable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPixelProgrammable(const FMaterialShaderParameters& MaterialParameters)"
  },
  {
    "label": "ShouldCompileProgrammablePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompileProgrammablePermutation(const FMaterialShaderParameters& MaterialParameters, bool bPermutationVertexProgrammable, bool bPermutationPixelProgrammable, bool bHWRasterShader)"
  },
  {
    "label": "ShouldCompilePixelPermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePixelPermutation(const FMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bValidMaterial = Parameters . MaterialParameters . bIsDefaultMaterial ;)",
    "insertText": "if(Parameters.MaterialParameters.bIsUsedWithNanite && FNaniteMaterialShader::IsPixelProgrammable(Parameters.MaterialParameters))"
  },
  {
    "label": "DoesPlatformSupportNanite()",
    "kind": "Method",
    "detail": "Function (bValidMaterial = true ; } return)",
    "insertText": "DoesPlatformSupportNanite(Parameters.Platform)"
  },
  {
    "label": "ShouldCompileVertexPermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompileVertexPermutation(const FMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bValidMaterial = Parameters . MaterialParameters . bIsDefaultMaterial ; const bool bHWRasterShader = true ;)",
    "insertText": "if(Parameters.MaterialParameters.bIsUsedWithNanite && FNaniteMaterialShader::IsVertexProgrammable(Parameters.MaterialParameters, bHWRasterShader))"
  },
  {
    "label": "ShouldCompileComputePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompileComputePermutation(const FMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bValidMaterial = Parameters . MaterialParameters . bIsDefaultMaterial ; const bool bHWRasterShader = false ;)",
    "insertText": "if(Parameters.MaterialParameters.bIsUsedWithNanite && (IsVertexProgrammable(Parameters.MaterialParameters, bHWRasterShader) || IsPixelProgrammable(Parameters.MaterialParameters)))"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_ShaderBundle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_RootConstants)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"NANITE_MATERIAL_SHADER\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"IS_NANITE_RASTER_PASS\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"IS_NANITE_PASS\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"NANITE_USE_SHADING_UNIFORM_BUFFER\"), 0)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"NANITE_USE_RASTER_UNIFORM_BUFFER\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"NANITE_USE_VIEW_UNIFORM_BUFFER\"), 0)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"HAS_PRIMITIVE_UNIFORM_BUFFER\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ALWAYS_EVALUATE_WORLD_POSITION_OFFSET\"), Parameters.MaterialParameters.bAlwaysEvaluateWorldPositionOffset ? 1 : 0)"
  },
  {
    "label": "GetFixedFunctionPipeline()",
    "kind": "Method",
    "detail": "Function (} } ; class FMaterialRenderProxy ; class FHWRasterizePS ; class FHWRasterizeVS ; class FHWRasterizeMS ; class FMicropolyRasterizeCS ; struct FNaniteRasterPipeline { const FMaterialRenderProxy* RasterMaterial = nullptr ; FDisplacementScaling DisplacementScaling ; FDisplacementFadeRange DisplacementFadeRange ; bool bIsTwoSided : 1 = false ; bool bWPOEnabled : 1 = false ; bool bDisplacementEnabled : 1 = false ; bool bPerPixelEval : 1 = false ; bool bSplineMesh : 1 = false ; bool bSkinnedMesh : 1 = false ; bool bHasWPODistance : 1 = false ; bool bHasPixelDistance : 1 = false ; bool bHasDisplacementFadeOut : 1 = false ; bool bFixedDisplacementFallback : 1 = false ; bool bCastShadow : 1 = false ; bool bVertexUVs : 1 = false ; FNaniteRasterPipeline)",
    "insertText": "GetFixedFunctionPipeline(uint8 BinMask)"
  },
  {
    "label": "GetPipelineHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPipelineHash()"
  },
  {
    "label": "GetFallbackPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFallbackPipeline(FNaniteRasterPipeline& OutFallback)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNaniteRasterBin { int32 BinId = INDEX_NONE ; uint16 BinIndex = 0 xFFFFu ; bool)",
    "insertText": "operator(const FNaniteRasterBin& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNaniteRasterMaterialCacheKey { union { struct { uint32 FeatureLevel : 3 ; uint32 bWPOEnabled : 1 ; uint32 bPerPixelEval : 1 ; uint32 bUseMeshShader : 1 ; uint32 bUsePrimitiveShader : 1 ; uint32 bDisplacementEnabled : 1 ; uint32 bVisualizeActive : 1 ; uint32 bHasVirtualShadowMap : 1 ; uint32 bIsDepthOnly : 1 ; uint32 bIsTwoSided : 1 ; uint32 bCastShadow : 1 ; uint32 bSplineMesh : 1 ; uint32 bSkinnedMesh : 1 ; uint32 bFixedDisplacementFallback : 1 ; uint32 bUseWorkGraph : 1 ; uint32 Unused : 1 5 ; } ; uint32 Packed = 0 ; } ; bool)",
    "insertText": "operator(FNaniteRasterMaterialCacheKey Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNaniteRasterMaterialCacheKey& Key)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(KeyInitType Key)"
  },
  {
    "label": "FNaniteRasterBinIndexTranslator()",
    "kind": "Method",
    "detail": "Function (} } ; using FNaniteRasterPipelineMap = Experimental::TRobinHoodHashMap<FNaniteRasterPipeline,FNaniteRasterEntry,FNaniteRasterEntryKeyFuncs> ; class FNaniteRasterBinIndexTranslator { public :)",
    "insertText": "FNaniteRasterBinIndexTranslator()"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "Translate(uint16 BinIndex)"
  },
  {
    "label": "FNaniteRasterBinIndexTranslator()",
    "kind": "Method",
    "detail": "Function (} private : class FNaniteRasterPipelines ; uint32 RegularBinCount ;)",
    "insertText": "FNaniteRasterBinIndexTranslator(uint32 InRegularBinCount) : RegularBinCount(InRegularBinCount)"
  },
  {
    "label": "RevertBinIndex()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "RevertBinIndex(uint16 BinIndex)"
  },
  {
    "label": "FNaniteRasterPipelines()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNaniteRasterPipelines()"
  },
  {
    "label": "AllocateFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateFixedFunctionBins()"
  },
  {
    "label": "ReleaseFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFixedFunctionBins()"
  },
  {
    "label": "ReloadFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadFixedFunctionBins()"
  },
  {
    "label": "AllocateBin()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "AllocateBin(bool bPerPixelEval)"
  },
  {
    "label": "ReleaseBin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBin(uint16 BinIndex)"
  },
  {
    "label": "IsBinAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBinAllocated(uint16 BinIndex)"
  },
  {
    "label": "GetRegularBinCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRegularBinCount()"
  },
  {
    "label": "GetBinCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBinCount()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (FNaniteRasterBin)",
    "insertText": "Register(const FNaniteRasterPipeline& InRasterPipeline)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FNaniteRasterBin& InRasterBin)"
  },
  {
    "label": "GetRasterPipelineMap()",
    "kind": "Method",
    "detail": "Function (const FNaniteRasterPipelineMap&)",
    "insertText": "GetRasterPipelineMap()"
  },
  {
    "label": "RegisterBinForCustomPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterBinForCustomPass(uint16 BinIndex)"
  },
  {
    "label": "UnregisterBinForCustomPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterBinForCustomPass(uint16 BinIndex)"
  },
  {
    "label": "ShouldBinRenderInCustomPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBinRenderInCustomPass(uint16 BinIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : TBitArray<> PipelineBins ; TBitArray<> PerPixelEvalPipelineBins ; TArray<uint32> CustomPassRefCounts ; TArray<uint32> PerPixelEvalCustomPassRefCounts ; FNaniteRasterPipelineMap PipelineMap ; struct FFixedFunctionBin { FNaniteRasterBin RasterBin ; uint8 BinMask ; } ; TArray<FFixedFunctionBin,TInlineAllocator<6 u>> FixedFunctionBins ; } ; struct FNaniteShadingBin { int32 BinId = INDEX_NONE ; uint16 BinIndex = 0 xFFFFu ; bool)",
    "insertText": "operator(const FNaniteShadingBin& Other)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 PipelineHash =)",
    "insertText": "uint64(reinterpret_cast<UPTRINT>(MaterialProxy) >> 4)"
  },
  {
    "label": "CityHash128to64()",
    "kind": "Method",
    "detail": "Function (PipelineHash =)",
    "insertText": "CityHash128to64({ PipelineHash, ShadingFlagsHash })"
  },
  {
    "label": "CityHash128to64()",
    "kind": "Method",
    "detail": "Function (PipelineHash =)",
    "insertText": "CityHash128to64({ PipelineHash, BoundTargetMask })"
  },
  {
    "label": "CityHash128to64()",
    "kind": "Method",
    "detail": "Function (PipelineHash =)",
    "insertText": "CityHash128to64({ PipelineHash, ShaderBindingsHash })"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE uint32)",
    "insertText": "GetTypeHash(const FNaniteShadingPipeline& Other)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNaniteShadingEntry { TSharedPtr<FNaniteShadingPipeline> ShadingPipeline ; uint32 ReferenceCount = 0 ; uint16 BinIndex = 0 xFFFFu ; } ; struct FNaniteShadingEntryKeyFuncs : TDefaultMapHashableKeyFuncs<FNaniteShadingPipeline,FNaniteShadingEntry,false> { bool)",
    "insertText": "Matches(KeyInitType A, KeyInitType B)"
  },
  {
    "label": "FNaniteShadingPipelines()",
    "kind": "Method",
    "detail": "Function (} } ; using FNaniteShadingPipelineMap = Experimental::TRobinHoodHashMap<FNaniteShadingPipeline,FNaniteShadingEntry,FNaniteShadingEntryKeyFuncs> ; class FNaniteShadingPipelines { public : typedef Experimental::FHashType FShadingHash ; typedef Experimental::FHashElementId FShadingId ; public :)",
    "insertText": "FNaniteShadingPipelines()"
  },
  {
    "label": "AllocateBin()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "AllocateBin()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (FNaniteShadingBin)",
    "insertText": "Register(const FNaniteShadingPipeline& InShadingPipeline)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const FNaniteShadingBin& InShadingBin)"
  },
  {
    "label": "GetShadingPipelineMap()",
    "kind": "Method",
    "detail": "Function (const FNaniteShadingPipelineMap&)",
    "insertText": "GetShadingPipelineMap()"
  },
  {
    "label": "GetIdList()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<const FShadingId>)",
    "insertText": "GetIdList()"
  },
  {
    "label": "ComputeRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeRelevance(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "ShouldRenderNanite()",
    "kind": "Method",
    "detail": "Function (private : TBitArray<> PipelineBins ; FNaniteShadingPipelineMap PipelineMap ; TArray<FShadingId> ShadingIdList ; bool bBuildIdList = true ; } ; struct FNaniteShadingCommand { TSharedPtr<FNaniteShadingPipeline> Pipeline ; FUint32Vector4 PassData ; uint16 ShadingBin = 0 xFFFFu ; bool bVisible = true ; EPSOPrecacheResult PSOPrecacheState = EPSOPrecacheResult::Unknown ; } ; struct FNaniteShadingCommands { using FMetaBufferArray = TArray<FUintVector4,SceneRenderingAllocator> ; uint32 MaxShadingBin = 0 u ; uint32 NumCommands = 0 u ; uint32 BoundTargetMask = 0 x0u ; FShaderBundleRHIRef ShaderBundle ; TArray<FNaniteShadingCommand> Commands ; TArray<int32> CommandLookup ; FMetaBufferArray MetaBufferData ; UE::Tasks::FTask SetupTask ; UE::Tasks::FTask BuildCommandsTask ; } ; bool)",
    "insertText": "ShouldRenderNanite(const FScene* Scene, const FViewInfo& View, bool bCheckForAtomicSupport = true)"
  },
  {
    "label": "WouldRenderNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WouldRenderNanite(const FScene* Scene, const FViewInfo& View, bool bCheckForAtomicSupport = true, bool bCheckForProjectSetting = true)"
  },
  {
    "label": "UseComputeDepthExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseComputeDepthExport()"
  }
]