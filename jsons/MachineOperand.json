[
  {
    "label": "BlockAddress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockAddress"
  },
  {
    "label": "ConstantFP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantFP"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "ModuleSlotTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleSlotTracker"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "hash_code",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hash_code"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MachineOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineOperand"
  },
  {
    "label": "MachineOperandType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MachineOperandType"
  },
  {
    "label": "MachineOperand()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEOPERAND_H # define LLVM_CODEGEN_MACHINEOPERAND_H # include \" llvm / Support / DataTypes . h \" # include<cassert> namespace llvm { class BlockAddress ; class ConstantFP ; class ConstantInt ; class GlobalValue ; class MachineBasicBlock ; class MachineInstr ; class MachineRegisterInfo ; class MDNode ; class ModuleSlotTracker ; class TargetMachine ; class TargetRegisterInfo ; class hash_code ; class raw_ostream ; class MCSymbol ; class MachineOperand { public : enum MachineOperandType : unsigned char { MO_Register,MO_Immediate,MO_CImmediate,MO_FPImmediate,MO_MachineBasicBlock,MO_FrameIndex,MO_ConstantPoolIndex,MO_TargetIndex,MO_JumpTableIndex,MO_ExternalSymbol,MO_GlobalAddress,MO_BlockAddress,MO_RegisterMask,MO_RegisterLiveOut,MO_Metadata,MO_MCSymbol,MO_CFIIndex } ; private : MachineOperandType OpKind : 8 ; unsigned SubReg_TargetFlags : 1 2 ; unsigned char TiedTo : 4 ; bool IsDef : 1 ; bool IsImp : 1 ; bool IsKill : 1 ; bool IsDead : 1 ; bool IsUndef : 1 ; bool IsInternalRead : 1 ; bool IsEarlyClobber : 1 ; bool IsDebug : 1 ; union { unsigned RegNo ; unsigned OffsetLo ; } SmallContents ; MachineInstr* ParentMI ; union { MachineBasicBlock* MBB ; const ConstantFP* CFP ; const ConstantInt* CI ; int64_t ImmVal ; const uint32_t* RegMask ; const MDNode* MD ; MCSymbol* Sym ; unsigned CFIIndex ; struct { MachineOperand* Prev ; MachineOperand* Next ; } Reg ; struct { union { int Index ; const char* SymbolName ; const GlobalValue* GV ; const BlockAddress* BA ; } Val ; int OffsetHi ; } OffsetedInfo ; } Contents ;)",
    "insertText": "MachineOperand(MachineOperandType K) : OpKind(K), SubReg_TargetFlags(0), ParentMI(nullptr)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} public : MachineOperandType)",
    "insertText": "getType()"
  },
  {
    "label": "getTargetFlags()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getTargetFlags()"
  },
  {
    "label": "setTargetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTargetFlags(unsigned F)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isReg() && \"Register operands can't have target flags\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (SubReg_TargetFlags = F ;)",
    "insertText": "assert(SubReg_TargetFlags == F && \"Target flags out of range\")"
  },
  {
    "label": "addTargetFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addTargetFlag(unsigned F)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (SubReg_TargetFlags | = F ;)",
    "insertText": "assert((SubReg_TargetFlags & F) && \"Target flags out of range\")"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (} MachineInstr*)",
    "insertText": "getParent()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (ParentMI = nullptr ; } void)",
    "insertText": "print(raw_ostream &os, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &os, ModuleSlotTracker &MST, const TargetRegisterInfo *TRI = nullptr)"
  },
  {
    "label": "isReg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isReg()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReg() && \"This is not a register operand!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReg() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "setReg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setReg(unsigned Reg)"
  },
  {
    "label": "setSubReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSubReg(unsigned subReg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (SubReg_TargetFlags = subReg ;)",
    "insertText": "assert(SubReg_TargetFlags == subReg && \"SubReg out of range\")"
  },
  {
    "label": "substVirtReg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "substVirtReg(unsigned Reg, unsigned SubIdx, const TargetRegisterInfo&)"
  },
  {
    "label": "substPhysReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "substPhysReg(unsigned Reg, const TargetRegisterInfo&)"
  },
  {
    "label": "setIsUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIsUse(bool Val = true)"
  },
  {
    "label": "setIsDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIsDef(!Val)"
  },
  {
    "label": "setIsDef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIsDef(bool Val = true)"
  },
  {
    "label": "setImplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setImplicit(bool Val = true)"
  },
  {
    "label": "setIsKill()",
    "kind": "Method",
    "detail": "Function (IsImp = Val ; } void)",
    "insertText": "setIsKill(bool Val = true)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReg() && !IsDef && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!Val || !isDebug()) && \"Marking a debug operation as kill\")"
  },
  {
    "label": "setIsDead()",
    "kind": "Method",
    "detail": "Function (IsKill = Val ; } void)",
    "insertText": "setIsDead(bool Val = true)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReg() && IsDef && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "setIsUndef()",
    "kind": "Method",
    "detail": "Function (IsDead = Val ; } void)",
    "insertText": "setIsUndef(bool Val = true)"
  },
  {
    "label": "setIsInternalRead()",
    "kind": "Method",
    "detail": "Function (IsUndef = Val ; } void)",
    "insertText": "setIsInternalRead(bool Val = true)"
  },
  {
    "label": "setIsEarlyClobber()",
    "kind": "Method",
    "detail": "Function (IsInternalRead = Val ; } void)",
    "insertText": "setIsEarlyClobber(bool Val = true)"
  },
  {
    "label": "setIsDebug()",
    "kind": "Method",
    "detail": "Function (IsEarlyClobber = Val ; } void)",
    "insertText": "setIsDebug(bool Val = true)"
  },
  {
    "label": "getImm()",
    "kind": "Method",
    "detail": "Function (IsDebug = Val ; } int64_t)",
    "insertText": "getImm()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isImm() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isCImm() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isFPImm() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMBB() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((isFI() || isCPI() || isTargetIndex() || isJTI()) && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isGlobal() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isBlockAddress() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMCSymbol() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isCFIIndex() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((isGlobal() || isSymbol() || isMCSymbol() || isCPI() || isTargetIndex() || isBlockAddress()) && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "getSymbolName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getSymbolName()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isSymbol() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(PhysReg < (1u << 30) && \"Not a physical register\")"
  },
  {
    "label": "clobbersPhysReg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "clobbersPhysReg(unsigned PhysReg)"
  },
  {
    "label": "getRegMask()",
    "kind": "Method",
    "detail": "Function (} const uint32_t*)",
    "insertText": "getRegMask()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isRegMask() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isRegLiveOut() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMetadata() && \"Wrong MachineOperand accessor\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isImm() && \"Wrong MachineOperand mutator\")"
  },
  {
    "label": "setFPImm()",
    "kind": "Method",
    "detail": "Function (Contents . ImmVal = immVal ; } void)",
    "insertText": "setFPImm(const ConstantFP *CFP)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isFPImm() && \"Wrong MachineOperand mutator\")"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (Contents . CFP = CFP ; } void)",
    "insertText": "setOffset(int64_t Offset)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (SmallContents . OffsetLo =)",
    "insertText": "unsigned(Offset)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (Contents . OffsetedInfo . OffsetHi =)",
    "insertText": "int(Offset >> 32)"
  },
  {
    "label": "setIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIndex(int Idx)"
  },
  {
    "label": "setMBB()",
    "kind": "Method",
    "detail": "Function (Contents . OffsetedInfo . Val . Index = Idx ; } void)",
    "insertText": "setMBB(MachineBasicBlock *MBB)"
  },
  {
    "label": "isIdenticalTo()",
    "kind": "Method",
    "detail": "Function (Contents . MBB = MBB ; } bool)",
    "insertText": "isIdenticalTo(const MachineOperand &Other)"
  },
  {
    "label": "hash_value()",
    "kind": "Method",
    "detail": "Function (hash_code)",
    "insertText": "hash_value(const MachineOperand &MO)"
  },
  {
    "label": "ChangeToImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeToImmediate(int64_t ImmVal)"
  },
  {
    "label": "ChangeToFPImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeToFPImmediate(const ConstantFP *FPImm)"
  },
  {
    "label": "ChangeToES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeToES(const char *SymName, unsigned char TargetFlags = 0)"
  },
  {
    "label": "ChangeToMCSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeToMCSymbol(MCSymbol *Sym)"
  },
  {
    "label": "ChangeToRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeToRegister(unsigned Reg, bool isDef, bool isImp = false, bool isKill = false, bool isDead = false, bool isUndef = false, bool isDebug = false)"
  },
  {
    "label": "CreateImm()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "CreateImm(int64_t Val)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_Immediate)"
  },
  {
    "label": "setImm()",
    "kind": "Method",
    "detail": "Function (Op .)",
    "insertText": "setImm(Val)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_CImmediate)"
  },
  {
    "label": "CreateFPImm()",
    "kind": "Method",
    "detail": "Function (Op . Contents . CI = CI ; return Op ; } MachineOperand)",
    "insertText": "CreateFPImm(const ConstantFP *CFP)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_FPImmediate)"
  },
  {
    "label": "CreateReg()",
    "kind": "Method",
    "detail": "Function (Op . Contents . CFP = CFP ; return Op ; } MachineOperand)",
    "insertText": "CreateReg(unsigned Reg, bool isDef, bool isImp = false, bool isKill = false, bool isDead = false, bool isUndef = false, bool isEarlyClobber = false, unsigned SubReg = 0, bool isDebug = false, bool isInternalRead = false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!(isDead && !isDef) && \"Dead flag on non-def\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!(isKill && isDef) && \"Kill flag on def\")"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_Register)"
  },
  {
    "label": "setSubReg()",
    "kind": "Method",
    "detail": "Function (Op . IsDef = isDef ; Op . IsImp = isImp ; Op . IsKill = isKill ; Op . IsDead = isDead ; Op . IsUndef = isUndef ; Op . IsInternalRead = isInternalRead ; Op . IsEarlyClobber = isEarlyClobber ; Op . TiedTo = 0 ; Op . IsDebug = isDebug ; Op . SmallContents . RegNo = Reg ; Op . Contents . Reg . Prev = nullptr ; Op . Contents . Reg . Next = nullptr ; Op .)",
    "insertText": "setSubReg(SubReg)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_MachineBasicBlock)"
  },
  {
    "label": "setMBB()",
    "kind": "Method",
    "detail": "Function (Op .)",
    "insertText": "setMBB(MBB)"
  },
  {
    "label": "setTargetFlags()",
    "kind": "Method",
    "detail": "Function (Op .)",
    "insertText": "setTargetFlags(TargetFlags)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_FrameIndex)"
  },
  {
    "label": "setIndex()",
    "kind": "Method",
    "detail": "Function (Op .)",
    "insertText": "setIndex(Idx)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_ConstantPoolIndex)"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (Op .)",
    "insertText": "setOffset(Offset)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_TargetIndex)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_JumpTableIndex)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_GlobalAddress)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_ExternalSymbol)"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (Op . Contents . OffsetedInfo . Val . SymbolName = SymName ; Op .)",
    "insertText": "setOffset(0)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_BlockAddress)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Mask && \"Missing register mask\")"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_RegisterMask)"
  },
  {
    "label": "CreateRegLiveOut()",
    "kind": "Method",
    "detail": "Function (Op . Contents . RegMask = Mask ; return Op ; } MachineOperand)",
    "insertText": "CreateRegLiveOut(const uint32_t *Mask)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Mask && \"Missing live-out register mask\")"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_RegisterLiveOut)"
  },
  {
    "label": "CreateMetadata()",
    "kind": "Method",
    "detail": "Function (Op . Contents . RegMask = Mask ; return Op ; } MachineOperand)",
    "insertText": "CreateMetadata(const MDNode *Meta)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_Metadata)"
  },
  {
    "label": "CreateMCSymbol()",
    "kind": "Method",
    "detail": "Function (Op . Contents . MD = Meta ; return Op ; } MachineOperand)",
    "insertText": "CreateMCSymbol(MCSymbol *Sym, unsigned char TargetFlags = 0)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_MCSymbol)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (MachineOperand)",
    "insertText": "Op(MachineOperand::MO_CFIIndex)"
  },
  {
    "label": "removeRegFromUses()",
    "kind": "Method",
    "detail": "Function (Op . Contents . CFIIndex = CFIIndex ; return Op ; } class MachineInstr ; class MachineRegisterInfo ; private : void)",
    "insertText": "removeRegFromUses()"
  },
  {
    "label": "isOnRegUseList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOnRegUseList()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isReg() && \"Can only add reg operand to use lists\")"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (MO .)",
    "insertText": "print(OS, nullptr)"
  }
]