[
  {
    "label": "IUntypedTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IUntypedTable"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "SUntypedTableTreeView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsCore / Common / Stopwatch . h \" # include \" InsightsCore / Table / ViewModels / UntypedTable . h \" # include \" InsightsCore / Table / Widgets / STableTreeView . h \" namespace TraceServices { class IUntypedTable ; } namespace UE::Insights { class SUntypedTableTreeView : public STableTreeView { public :)",
    "insertText": "SUntypedTableTreeView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SUntypedTableTreeView) : _RunInAsyncMode(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, RunInAsyncMode) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<FUntypedTable> InTablePtr)"
  },
  {
    "label": "GetUntypedTable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUntypedTable>)",
    "insertText": "GetUntypedTable()"
  },
  {
    "label": "UpdateSourceTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSourceTable(TSharedPtr<TraceServices::IUntypedTable> SourceTable)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "GetAllOperationsDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAllOperationsDuration()"
  },
  {
    "label": "GetCurrentOperationDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentOperationDuration()"
  },
  {
    "label": "SetCurrentOperationNameOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentOperationNameOverride(const FText& InOperationName)"
  },
  {
    "label": "ClearCurrentOperationNameOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentOperationNameOverride()"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  }
]