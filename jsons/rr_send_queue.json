[
  {
    "label": "RRSendQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RRSendQueue"
  },
  {
    "label": "MessageAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MessageAttributes"
  },
  {
    "label": "ThresholdWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThresholdWatcher"
  },
  {
    "label": "OutgoingStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutgoingStream"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Item",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Item"
  },
  {
    "label": "RRSendQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TX_RR_SEND_QUEUE_H_ # define NET_DCSCTP_TX_RR_SEND_QUEUE_H_ # include<cstdint> # include<deque> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / algorithm / container . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / public / dcsctp_message . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / public / types . h \" # include \" net / dcsctp / tx / send_queue . h \" # include \" net / dcsctp / tx / stream_scheduler . h \" namespace dcsctp { class RRSendQueue : public SendQueue { public :)",
    "insertText": "RRSendQueue(absl::string_view log_prefix, DcSctpSocketCallbacks* callbacks, size_t buffer_size, size_t mtu, StreamPriority default_priority, size_t total_buffered_amount_low_threshold)"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TimeMs now, DcSctpMessage message, const SendOptions& send_options = {})"
  },
  {
    "label": "Produce()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataToSend>)",
    "insertText": "Produce(TimeMs now, size_t max_size)"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Discard(IsUnordered unordered, StreamID stream_id, MID message_id)"
  },
  {
    "label": "PrepareResetStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareResetStream(StreamID streams)"
  },
  {
    "label": "HasStreamsReadyToBeReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStreamsReadyToBeReset()"
  },
  {
    "label": "GetStreamsReadyToBeReset()",
    "kind": "Method",
    "detail": "Function (std::vector<StreamID>)",
    "insertText": "GetStreamsReadyToBeReset()"
  },
  {
    "label": "CommitResetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitResetStreams()"
  },
  {
    "label": "RollbackResetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RollbackResetStreams()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "buffered_amount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "buffered_amount(StreamID stream_id)"
  },
  {
    "label": "total_buffered_amount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "total_buffered_amount()"
  },
  {
    "label": "buffered_amount_low_threshold()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "buffered_amount_low_threshold(StreamID stream_id)"
  },
  {
    "label": "SetBufferedAmountLowThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferedAmountLowThreshold(StreamID stream_id, size_t bytes)"
  },
  {
    "label": "EnableMessageInterleaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMessageInterleaving(bool enabled)"
  },
  {
    "label": "EnableMessageInterleaving()",
    "kind": "Method",
    "detail": "Function (scheduler_ .)",
    "insertText": "EnableMessageInterleaving(enabled)"
  },
  {
    "label": "SetStreamPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStreamPriority(StreamID stream_id, StreamPriority priority)"
  },
  {
    "label": "GetStreamPriority()",
    "kind": "Method",
    "detail": "Function (StreamPriority)",
    "insertText": "GetStreamPriority(StreamID stream_id)"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "ThresholdWatcher()",
    "kind": "Method",
    "detail": "Function (private : struct MessageAttributes { IsUnordered unordered ; MaxRetransmits max_retransmissions ; TimeMs expires_at ; LifecycleId lifecycle_id ; } ; class ThresholdWatcher { public :)",
    "insertText": "ThresholdWatcher(std::function<void()> on_threshold_reached) : on_threshold_reached_(std::move(on_threshold_reached))"
  },
  {
    "label": "Increase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Increase(size_t bytes)"
  },
  {
    "label": "Decrease()",
    "kind": "Method",
    "detail": "Function (value_ + = bytes ; } void)",
    "insertText": "Decrease(size_t bytes)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "value()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : const std::function<)",
    "insertText": "void()"
  },
  {
    "label": "OutgoingStream()",
    "kind": "Method",
    "detail": "Function (size_t value_ = 0 ; size_t low_threshold_ = 0 ; } ; class OutgoingStream : public StreamScheduler::StreamProducer { public :)",
    "insertText": "OutgoingStream(RRSendQueue* parent, StreamScheduler* scheduler, StreamID stream_id, StreamPriority priority, std::function<void()> on_buffered_amount_low, const DcSctpSocketHandoverState::OutgoingStream* state = nullptr) : parent_(*parent), scheduler_stream_(scheduler->CreateStream(this, stream_id, priority)), next_unordered_mid_(MID(state ? state->next_unordered_mid : 0)), next_ordered_mid_(MID(state ? state->next_ordered_mid : 0)), next_ssn_(SSN(state ? state->next_ssn : 0)), buffered_amount_(std::move(on_buffered_amount_low))"
  },
  {
    "label": "stream_id()",
    "kind": "Method",
    "detail": "Function (} StreamID)",
    "insertText": "stream_id()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(DcSctpMessage message, MessageAttributes attributes)"
  },
  {
    "label": "bytes_to_send_in_next_message()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytes_to_send_in_next_message()"
  },
  {
    "label": "buffered_amount()",
    "kind": "Method",
    "detail": "Function (const ThresholdWatcher&)",
    "insertText": "buffered_amount()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "IsReadyToBeReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToBeReset()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(pause_state_ == PauseState::kPaused)"
  },
  {
    "label": "has_partially_sent_message()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_partially_sent_message()"
  },
  {
    "label": "priority()",
    "kind": "Method",
    "detail": "Function (StreamPriority)",
    "insertText": "priority()"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPriority(StreamPriority priority)"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (scheduler_stream_ ->)",
    "insertText": "SetPriority(priority)"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState::OutgoingStream& state)"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (private : enum class PauseState { kNotPaused,kPending,kPaused,kResetting,} ; struct Item {)",
    "insertText": "Item(DcSctpMessage msg, MessageAttributes attributes) : message(std::move(msg)), attributes(std::move(attributes)), remaining_offset(0), remaining_size(message.payload().size())"
  },
  {
    "label": "FSN()",
    "kind": "Method",
    "detail": "Function (} DcSctpMessage message ; MessageAttributes attributes ; size_t remaining_offset ; size_t remaining_size ; absl::optional<MID> message_id = absl::nullopt ; absl::optional<SSN> ssn = absl::nullopt ; FSN current_fsn =)",
    "insertText": "FSN(0)"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsConsistent()"
  },
  {
    "label": "HandleMessageExpired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessageExpired(OutgoingStream::Item& item)"
  },
  {
    "label": "GetOrCreateStreamInfo()",
    "kind": "Method",
    "detail": "Function (OutgoingStream&)",
    "insertText": "GetOrCreateStreamInfo(StreamID stream_id)"
  },
  {
    "label": "Produce()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataToSend>)",
    "insertText": "Produce(std::map<StreamID, OutgoingStream>::iterator it, TimeMs now, size_t max_size)"
  }
]