[
  {
    "label": "RRSendQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RRSendQueue"
  },
  {
    "label": "MessageAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MessageAttributes"
  },
  {
    "label": "ThresholdWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThresholdWatcher"
  },
  {
    "label": "OutgoingStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutgoingStream"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Item",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Item"
  },
  {
    "label": "RRSendQueue()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RRSendQueue(absl::string_view log_prefix,\n              DcSctpSocketCallbacks* callbacks,\n              size_t buffer_size,\n              size_t mtu,\n              StreamPriority default_priority,\n              size_t total_buffered_amount_low_threshold)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TimeMs now,\n           DcSctpMessage message,\n           const SendOptions& send_options = {})"
  },
  {
    "label": "SetStreamPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamPriority(StreamID stream_id, StreamPriority priority)"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "Decrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decrease(size_t bytes)"
  },
  {
    "label": "SetLowThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowThreshold(size_t low_threshold)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(DcSctpMessage message, MessageAttributes attributes)"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Discard(IsUnordered unordered, MID message_id)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "HandleMessageExpired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessageExpired(OutgoingStream::Item& item)"
  },
  {
    "label": "Produce()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataToSend>)",
    "insertText": "Produce(\n      std::map<StreamID, OutgoingStream>::iterator it,\n      TimeMs now,\n      size_t max_size)"
  }
]