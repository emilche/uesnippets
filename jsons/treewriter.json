[
  {
    "label": "vp8_write_bit()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_ENCODER_TREEWRITER_H_ # define VPX_VP8_ENCODER_TREEWRITER_H_ # include<stdint . h> # include \" . / vpx_config . h \" # include \" vp8 / common / treecoder . h \" # include \" boolhuff . h \" # ifdef __cplusplus \" C \" { # endif typedef BOOL_CODER vp8_writer ; # define vp8_write vp8_encode_bool # define vp8_write_literal vp8_encode_value # define)",
    "insertText": "vp8_write_bit(W, V) vp8_write(W, V, vp8_prob_half) #define vp8bc_write vp8bc_write_bool #define vp8bc_write_literal vp8bc_write_bits #define vp8bc_write_bit(W, V) vp8bc_write_bits(W, V, 1) #define vp8_cost_zero(x) (vp8_prob_cost[x]) #define vp8_cost_one(x) vp8_cost_zero(vp8_complement(x)) #define vp8_cost_bit(x, b) vp8_cost_zero((b) ? vp8_complement(x) : (x)) static INLINE unsigned int vp8_cost_branch(const unsigned int ct[2], vp8_prob p)"
  },
  {
    "label": "vp8_treed_write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp8_treed_write(vp8_writer *const w, vp8_tree t, const vp8_prob *const p, int v, int n)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (vp8_tree_index i = 0 ; do { const int)",
    "insertText": "b(v >> --n)"
  },
  {
    "label": "vp8_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_write(w, b, p[i >> 1])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (i = t [ i + b ] ; })",
    "insertText": "while(n)"
  },
  {
    "label": "vp8_write_token()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp8_write_token(vp8_writer *const w, vp8_tree t, const vp8_prob *const p, vp8_token *const x)"
  },
  {
    "label": "vp8_treed_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_treed_write(w, t, p, x->value, x->Len)"
  },
  {
    "label": "vp8_treed_cost()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp8_treed_cost(vp8_tree t, const vp8_prob *const p, int v, int n)"
  },
  {
    "label": "vp8_cost_bit()",
    "kind": "Method",
    "detail": "Function (c + =)",
    "insertText": "vp8_cost_bit(p[i >> 1], b)"
  },
  {
    "label": "vp8_cost_tokens()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp8_cost_tokens(int *c, const vp8_prob *, vp8_tree)"
  },
  {
    "label": "vp8_cost_tokens2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_cost_tokens2(int *c, const vp8_prob *, vp8_tree, int)"
  }
]