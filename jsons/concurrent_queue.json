[
  {
    "label": "concurrent_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "concurrent_bounded_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_bounded_queue"
  },
  {
    "label": "destroyer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "destroyer"
  },
  {
    "label": "allocate_block()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_queue_H # define __TBB_concurrent_queue_H # include \" internal / _concurrent_queue_impl . h \" # include \" internal / _allocator_traits . h \" namespace tbb { namespace strict_ppl { template<T,A = cache_aligned_allocator<T>> class concurrent_queue : public internal::concurrent_queue_base_v3<T> { template<Container,Value> class internal::concurrent_queue_iterator ; typedef tbb::internal::allocator_rebind<A,char>::type page_allocator_type ; page_allocator_type my_allocator ; void*)",
    "insertText": "allocate_block(size_t n)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void* b = reinterpret_cast<)",
    "insertText": "void(my_allocator.allocate( n ))"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (my_allocator .)",
    "insertText": "deallocate(reinterpret_cast<char*>(b), n)"
  },
  {
    "label": "copy_construct_item()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copy_construct_item(T* location, const void* src)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(location) T(*static_cast<const T*>(src))"
  },
  {
    "label": "move_construct_item()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "move_construct_item(T* location, const void* src)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(location) T( std::move(*static_cast<T*>(const_cast<void*>(src))))"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (} # endif public : typedef T value_type ; typedef T& reference ; typedef const T& const_reference ; typedef size_t size_type ; typedef ptrdiff_t difference_type ; typedef A allocator_type ;)",
    "insertText": "concurrent_queue(const allocator_type& a = allocator_type()) : my_allocator( a)"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (} template<InputIterator>)",
    "insertText": "concurrent_queue(InputIterator begin, InputIterator end, const allocator_type& a = allocator_type()) : my_allocator( a)"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_queue(const concurrent_queue& src, const allocator_type& a = allocator_type()) : internal::concurrent_queue_base_v3<T>(), my_allocator( a)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "assign(src, copy_construct_item)"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_queue(concurrent_queue&& src ) : internal::concurrent_queue_base_v3<T>(), my_allocator( std::move(src.my_allocator))"
  },
  {
    "label": "internal_swap()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_swap(src)"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_queue(concurrent_queue&& src, const allocator_type& a ) : internal::concurrent_queue_base_v3<T>(), my_allocator( a)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "assign(src, move_construct_item)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (src .)",
    "insertText": "clear()"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (} } # endif ~)",
    "insertText": "concurrent_queue()"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(const T& source)"
  },
  {
    "label": "internal_push()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_push(&source, copy_construct_item)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "push(T&& source)"
  },
  {
    "label": "internal_push()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_push(&source, move_construct_item)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<. . . Arguments> void)",
    "insertText": "emplace(Arguments&&... args)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(T(std::forward<Arguments>( args )...))"
  },
  {
    "label": "try_pop()",
    "kind": "Method",
    "detail": "Function (} # endif # endif bool)",
    "insertText": "try_pop(T& result)"
  },
  {
    "label": "unsafe_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "unsafe_size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "get_allocator()",
    "kind": "Method",
    "detail": "Function (allocator_type)",
    "insertText": "get_allocator()"
  },
  {
    "label": "unsafe_end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "unsafe_end()"
  },
  {
    "label": "unsafe_begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "unsafe_begin()"
  },
  {
    "label": "concurrent_queue()",
    "kind": "Method",
    "detail": "Function (concurrent_queue<T, A>)",
    "insertText": "concurrent_queue(InputIterator, InputIterator, const A& = A())"
  },
  {
    "label": "internal_finish_clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_finish_clear()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (T value ;)",
    "insertText": "while(!empty() ) try_pop(value)"
  },
  {
    "label": "destroyer()",
    "kind": "Method",
    "detail": "Function (} } template<T,class A = cache_aligned_allocator<T>> class concurrent_bounded_queue : public internal::concurrent_queue_base_v8 { template<Container,Value> class internal::concurrent_queue_iterator ; typedef tbb::internal::allocator_rebind<A,char>::type page_allocator_type ; page_allocator_type my_allocator ; typedef concurrent_queue_base_v3::padded_page<T> padded_page ; typedef concurrent_queue_base_v3::copy_specifics copy_specifics ; class destroyer : internal::no_copy { T& my_value ; public :)",
    "insertText": "destroyer(T& value ) : my_value(value)"
  },
  {
    "label": "destroyer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "destroyer()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (my_value . ~)",
    "insertText": "T()"
  },
  {
    "label": "get_ref()",
    "kind": "Method",
    "detail": "Function (} } ; T&)",
    "insertText": "get_ref(page& p, size_t index)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(index<items_per_page, NULL)"
  },
  {
    "label": "copy_item()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copy_item(page& dst, size_t index, const void* src)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&get_ref(dst,index) ) T(*static_cast<const T*>(src))"
  },
  {
    "label": "move_item()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "move_item(page& dst, size_t index, const void* src)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&get_ref(dst,index) ) T( std::move(*static_cast<T*>(const_cast<void*>(src))))"
  },
  {
    "label": "move_item()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "move_item(page&, size_t, const void*)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(false, \"Unreachable code\")"
  },
  {
    "label": "copy_page_item()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "copy_page_item(page& dst, size_t dindex, const page& src, size_t sindex)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&get_ref(dst,dindex) ) T( get_ref( const_cast<page&>(src), sindex ))"
  },
  {
    "label": "move_page_item()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "move_page_item(page& dst, size_t dindex, const page& src, size_t sindex)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&get_ref(dst,dindex) ) T( std::move(get_ref( const_cast<page&>(src), sindex )))"
  },
  {
    "label": "move_page_item()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "move_page_item(page&, size_t, const page&, size_t)"
  },
  {
    "label": "assign_and_destroy_item()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "assign_and_destroy_item(void* dst, page& src, size_t index)"
  },
  {
    "label": "get_ref()",
    "kind": "Method",
    "detail": "Function (T& from =)",
    "insertText": "get_ref(src,index)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (destroyer)",
    "insertText": "d(from)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "T(dst) = tbb::internal::move( from)"
  },
  {
    "label": "allocate_page()",
    "kind": "Method",
    "detail": "Function (} page*)",
    "insertText": "allocate_page()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t n =)",
    "insertText": "sizeof(padded_page) + (items_per_page-1)*sizeof(T)"
  },
  {
    "label": "page()",
    "kind": "Method",
    "detail": "Function (page* p = reinterpret_cast<)",
    "insertText": "page(my_allocator.allocate( n ))"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (my_allocator .)",
    "insertText": "deallocate(reinterpret_cast<char*>(p), n)"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (} public : typedef T value_type ; typedef A allocator_type ; typedef T& reference ; typedef const T& const_reference ; typedef std::ptrdiff_t size_type ; typedef std::ptrdiff_t difference_type ;)",
    "insertText": "concurrent_bounded_queue(const allocator_type& a = allocator_type()) : concurrent_queue_base_v8( sizeof(T) ), my_allocator( a)"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_bounded_queue(const concurrent_bounded_queue& src, const allocator_type& a = allocator_type()) : concurrent_queue_base_v8( sizeof(T) ), my_allocator( a)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(src)"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_bounded_queue(concurrent_bounded_queue&& src ) : concurrent_queue_base_v8( sizeof(T) ), my_allocator( std::move(src.my_allocator))"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_bounded_queue(concurrent_bounded_queue&& src, const allocator_type& a ) : concurrent_queue_base_v8( sizeof(T) ), my_allocator( a)"
  },
  {
    "label": "move_content()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "move_content(src)"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (} } # endif template<InputIterator>)",
    "insertText": "concurrent_bounded_queue(InputIterator begin, InputIterator end, const allocator_type& a = allocator_type()) : concurrent_queue_base_v8( sizeof(T) ), my_allocator( a)"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "concurrent_bounded_queue()"
  },
  {
    "label": "internal_push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_push(&source)"
  },
  {
    "label": "internal_push_move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_push_move(&source)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} # endif # endif void)",
    "insertText": "pop(T& destination)"
  },
  {
    "label": "internal_pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_pop(&destination)"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (} # if TBB_USE_EXCEPTIONS void)",
    "insertText": "abort()"
  },
  {
    "label": "internal_abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_abort()"
  },
  {
    "label": "try_push()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "try_push(const T& source)"
  },
  {
    "label": "try_push()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_RVALUE_REF_PRESENT bool)",
    "insertText": "try_push(T&& source)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<. . . Arguments> bool)",
    "insertText": "try_emplace(Arguments&&... args)"
  },
  {
    "label": "try_pop()",
    "kind": "Method",
    "detail": "Function (} # endif # endif bool)",
    "insertText": "try_pop(T& destination)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "capacity()"
  },
  {
    "label": "internal_set_capacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_set_capacity(new_capacity, sizeof(T))"
  },
  {
    "label": "concurrent_bounded_queue()",
    "kind": "Method",
    "detail": "Function (concurrent_bounded_queue<T, A>)",
    "insertText": "concurrent_bounded_queue(InputIterator, InputIterator, const A& = A())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (T value ;)",
    "insertText": "while(try_pop(value))"
  }
]