[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "FCollectionTransformSelectionFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionTransformSelectionFacade"
  },
  {
    "label": "FCollectionTransformSelectionFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" Math / MathFwd . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / Facades / CollectionSelectionFacade . h \" # include \" GeometryCollection / GeometryCollection . h \" # include \" Chaos / Triangle . h \" class FGeometryCollection ; namespace GeometryCollection::Facades { class FCollectionTransformSelectionFacade { public :)",
    "insertText": "FCollectionTransformSelectionFacade(const FManagedArrayCollection& InSelf)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsValidBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBone(const int32 Index)"
  },
  {
    "label": "IsARootBone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsARootBone(const int32 Index)"
  },
  {
    "label": "HasSelectedAncestor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedAncestor(const TArray<int32>& InSelection, const int32 Index)"
  },
  {
    "label": "GetBonesByLevel()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetBonesByLevel(const int32 Level, bool bOnlyClusteredOrRigid, bool bSkipFiltered)"
  },
  {
    "label": "GetBonesExactlyAtLevel()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetBonesExactlyAtLevel(const int32 TargetLevel, bool bOnlyClusteredOrRigid)"
  },
  {
    "label": "Sanitize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sanitize(TArray<int32>& InSelection, bool bFavorParents = true)"
  },
  {
    "label": "RemoveRootNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRootNodes(TArray<int32>& InOutSelection)"
  },
  {
    "label": "ConvertSelectionToRigidNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectionToRigidNodes(const int32 Index, TArray<int32>& InSelection)"
  },
  {
    "label": "ConvertSelectionToRigidNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectionToRigidNodes(TArray<int32>& InSelection)"
  },
  {
    "label": "FilterSelectionBySimulationType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterSelectionBySimulationType(TArray<int32>& InOutSelection, FGeometryCollection::ESimulationTypes KeepSimulationType)"
  },
  {
    "label": "ConvertSelectionToClusterNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSelectionToClusterNodes(TArray<int32>& InOutSelection, bool bLeaveRigidRoots = true)"
  },
  {
    "label": "ConvertEmbeddedSelectionToParents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertEmbeddedSelectionToParents(TArray<int32>& InOutSelection)"
  },
  {
    "label": "CanSelectRootBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectRootBones()"
  },
  {
    "label": "SelectRootBones()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectRootBones()"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "SelectNone()"
  },
  {
    "label": "CanSelectAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectAll()"
  },
  {
    "label": "SelectAll()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectAll()"
  },
  {
    "label": "CanSelectInverse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectInverse()"
  },
  {
    "label": "SelectInverse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectInverse(TArray<int32>& InOutSelection)"
  },
  {
    "label": "CanSelectRandom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectRandom()"
  },
  {
    "label": "SelectRandom()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectRandom(bool bDeterministic, float RandomSeed, float RandomThresholdVal)"
  },
  {
    "label": "CanSelectLeaf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectLeaf()"
  },
  {
    "label": "SelectLeaf()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectLeaf()"
  },
  {
    "label": "CanSelectCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectCluster()"
  },
  {
    "label": "SelectCluster()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectCluster()"
  },
  {
    "label": "CanSelectContact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectContact()"
  },
  {
    "label": "SelectContact()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectContact(TArray<int32>& InOutSelection, bool bIncludeNeighborsInParentLevels = true)"
  },
  {
    "label": "CanSelectParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectParent()"
  },
  {
    "label": "SelectParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectParent(TArray<int32>& InOutSelection)"
  },
  {
    "label": "CanSelectChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectChildren()"
  },
  {
    "label": "SelectChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectChildren(TArray<int32>& InOutSelection)"
  },
  {
    "label": "CanSelectSiblings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectSiblings()"
  },
  {
    "label": "SelectSiblings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectSiblings(TArray<int32>& InOutSelection)"
  },
  {
    "label": "CanSelectLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectLevel()"
  },
  {
    "label": "SelectLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectLevel(TArray<int32>& InOutSelection)"
  },
  {
    "label": "SelectByPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByPercentage(TArray<int32>& InOutSelection, int32 Percentage, bool Deterministic, float RandomSeed)"
  },
  {
    "label": "SelectBySize()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "SelectBySize(float SizeMin, float SizeMax, bool bInclusive, bool bInsideRange, bool bUseRelativeSize = true)"
  },
  {
    "label": "SelectByVolume()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "SelectByVolume(float VolumeMin, float VolumeMax, bool bInclusive, bool bInsideRange)"
  },
  {
    "label": "GetClusteredSelections()",
    "kind": "Method",
    "detail": "Function (TMap<int32,TArray<int32>>)",
    "insertText": "GetClusteredSelections(const TArray<int32>& InSelection)"
  },
  {
    "label": "CanSelectVerticesInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectVerticesInBox()"
  },
  {
    "label": "SelectVerticesInBox()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectVerticesInBox(const FBox& InBox, const FTransform& InBoxTransform, bool bAllVerticesInBox)"
  },
  {
    "label": "CanSelectCentroidInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectCentroidInBox()"
  },
  {
    "label": "SelectCentroidInBox()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectCentroidInBox(const FBox& InBox, const FTransform& InBoxTransform)"
  },
  {
    "label": "CanSelectBoundingBoxInBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectBoundingBoxInBox()"
  },
  {
    "label": "SelectBoundingBoxInBox()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectBoundingBoxInBox(const FBox& InBox, const FTransform& InBoxTransform)"
  },
  {
    "label": "CanSelectVerticesInSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectVerticesInSphere()"
  },
  {
    "label": "SelectVerticesInSphere()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectVerticesInSphere(const FSphere& InSphere, const FTransform& InSphereTransform, bool bAllVerticesInSphere)"
  },
  {
    "label": "CanSelectBoundingBoxInSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectBoundingBoxInSphere()"
  },
  {
    "label": "SelectBoundingBoxInSphere()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectBoundingBoxInSphere(const FSphere& InSphere, const FTransform& InSphereTransform)"
  },
  {
    "label": "CanSelectCentroidInSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectCentroidInSphere()"
  },
  {
    "label": "SelectCentroidInSphere()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "SelectCentroidInSphere(const FSphere& InSphere, const FTransform& InSphereTransform)"
  },
  {
    "label": "SelectByFloatAttribute()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "SelectByFloatAttribute(FString GroupName, FString AttrName, float Min, float Max, bool bInclusive, bool bInsideRange)"
  },
  {
    "label": "SelectByIntAttribute()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "SelectByIntAttribute(FString GroupName, FString AttrName, int32 Min, int32 Max, bool bInclusive, bool bInsideRange)"
  },
  {
    "label": "ConvertVertexSelectionToTransformSelection()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ConvertVertexSelectionToTransformSelection(const TArray<int32>& InVertexSelection, bool bAllElementsMustBeSelected)"
  },
  {
    "label": "ConvertFaceSelectionToTransformSelection()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ConvertFaceSelectionToTransformSelection(const TArray<int32>& InFaceSelection, bool bAllElementsMustBeSelected)"
  },
  {
    "label": "ConvertVertexSelectionToFaceSelection()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ConvertVertexSelectionToFaceSelection(const TArray<int32>& InVertexSelection, bool bAllElementsMustBeSelected)"
  },
  {
    "label": "ConvertTransformSelectionToFaceSelection()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ConvertTransformSelectionToFaceSelection(const TArray<int32>& InTransformSelection)"
  },
  {
    "label": "ConvertFaceSelectionToVertexSelection()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ConvertFaceSelectionToVertexSelection(const TArray<int32>& InFaceSelection)"
  },
  {
    "label": "ConvertTransformSelectionToVertexSelection()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ConvertTransformSelectionToVertexSelection(const TArray<int32>& InTransformSelection)"
  }
]