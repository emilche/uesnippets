[
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "SNetworkingProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNetworkingProfilerWindow"
  },
  {
    "label": "FNetworkPacketEventRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPacketEventRef"
  },
  {
    "label": "SPacketContentView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPacketContentView"
  },
  {
    "label": "FAggregationModeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAggregationModeItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetworkPacketEventRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Geometry . h \" # include \" Rendering / RenderingCommon . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" TraceServices / Model / NetProfiler . h \" # include \" InsightsCore / Common / FixedCircularBuffer . h \" # include \" Insights / NetworkingProfiler / ViewModels / PacketContentViewDrawHelper . h \" # include \" Insights / NetworkingProfiler / ViewModels / PacketContentViewport . h \" # include \" Insights / ViewModels / TooltipDrawState . h \" class SScrollBar ; namespace UE::Insights::NetworkingProfiler { class SNetworkingProfilerWindow ; struct FNetworkPacketEventRef { FNetworkPacketEvent Event ; bool bIsValid ;)",
    "insertText": "FNetworkPacketEventRef() : Event() , bIsValid(false)"
  },
  {
    "label": "FNetworkPacketEventRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPacketEventRef(const FNetworkPacketEvent& InEvent) : Event(InEvent) , bIsValid(true)"
  },
  {
    "label": "FNetworkPacketEventRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPacketEventRef(const FNetworkPacketEventRef& Other) : Event(Other.Event) , bIsValid(Other.bIsValid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FNetworkPacketEventRef&)",
    "insertText": "operator(const FNetworkPacketEventRef& Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Event = Other . Event ; bIsValid = Other . bIsValid ; return* this ; } void)",
    "insertText": "Set(const FNetworkPacketEvent& InEvent)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Event = InEvent ; bIsValid = true ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bIsValid = false ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AreEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreEquals(const FNetworkPacketEventRef& A, const FNetworkPacketEventRef& B)"
  },
  {
    "label": "FAggregationModeItem()",
    "kind": "Method",
    "detail": "Function (} } ; class SPacketContentView : public SCompoundWidget { private : struct FAggregationModeItem {)",
    "insertText": "FAggregationModeItem(const TraceServices::ENetProfilerAggregationMode& InMode) : Mode(InMode)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetText()"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "SPacketContentView()",
    "kind": "Method",
    "detail": "Function (TraceServices::ENetProfilerAggregationMode Mode ; } ; public : float MOUSE_SNAP_DISTANCE = 2 . 0 f ; enum class ECursorType { Default,Arrow,Hand,} ; enum class EEventNavigationType { AnyLevel,SameLevel } ; public :)",
    "insertText": "SPacketContentView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SPacketContentView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<SNetworkingProfilerWindow> InProfilerWindow)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "ResetPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPacket()"
  },
  {
    "label": "SetPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacket(uint32 InGameInstanceIndex, uint32 InConnectionIndex, TraceServices::ENetProfilerConnectionMode InConnectionMode, uint32 InPacketIndex, int64 InPacketBitSize)"
  },
  {
    "label": "IsFilterByNetIdEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterByNetIdEnabled()"
  },
  {
    "label": "IsFilterByEventTypeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterByEventTypeEnabled()"
  },
  {
    "label": "EnableFilterEventType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableFilterEventType(const uint32 InEventTypeIndex)"
  },
  {
    "label": "DisableFilterEventType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableFilterEventType()"
  },
  {
    "label": "GetSelectedFilterEventAggregationMode()",
    "kind": "Method",
    "detail": "Function (TraceServices::ENetProfilerAggregationMode)",
    "insertText": "GetSelectedFilterEventAggregationMode()"
  },
  {
    "label": "FindPreviousEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPreviousEvent(EEventNavigationType NavigationType)"
  },
  {
    "label": "FindNextEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextEvent(EEventNavigationType NavigationType)"
  },
  {
    "label": "FindLastEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLastEvent()"
  },
  {
    "label": "FindPreviousLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPreviousLevel()"
  },
  {
    "label": "FindNextLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextLevel()"
  },
  {
    "label": "FindPreviousPacket()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FindPreviousPacket()"
  },
  {
    "label": "FindNextPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextPacket()"
  },
  {
    "label": "GetPacketText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPacketText()"
  },
  {
    "label": "Packet_OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Packet_OnTextCommitted(const FText& InNewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "FilterByNetId_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByNetId_IsChecked()"
  },
  {
    "label": "FilterByNetId_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByNetId_OnCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "GetFilterNetIdText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterNetIdText()"
  },
  {
    "label": "FilterNetId_OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterNetId_OnTextCommitted(const FText& InNewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "FilterByEventType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByEventType_IsChecked()"
  },
  {
    "label": "FilterByEventType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByEventType_OnCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "GetFilterEventTypeText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterEventTypeText()"
  },
  {
    "label": "HighlightFilteredEvents_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighlightFilteredEvents_OnCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHorizontalScrollBar()"
  },
  {
    "label": "ZoomHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomHorizontally(const float Delta, const float X)"
  },
  {
    "label": "BringIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringIntoView(const float X1, const float X2)"
  },
  {
    "label": "BringEventIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringEventIntoView(const FNetworkPacketEventRef& EventRef)"
  },
  {
    "label": "GetPacketSequence()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPacketSequence(int32 PacketIndex)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(float FontScale)"
  },
  {
    "label": "UpdateHoveredEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoveredEvent()"
  },
  {
    "label": "GetEventAtMousePosition()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketEventRef)",
    "insertText": "GetEventAtMousePosition(float X, float Y)"
  },
  {
    "label": "OnSelectedEventChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedEventChanged()"
  },
  {
    "label": "SelectHoveredEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectHoveredEvent()"
  },
  {
    "label": "AdjustForSplitContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustForSplitContent()"
  },
  {
    "label": "CreateAggregationModeComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateAggregationModeComboBox()"
  },
  {
    "label": "AggregationMode_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "AggregationMode_OnGenerateWidget(TSharedPtr<FAggregationModeItem> InAggregationMode)"
  },
  {
    "label": "AggregationMode_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AggregationMode_OnSelectionChanged(TSharedPtr<FAggregationModeItem> NewAggregationMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "AggregationMode_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AggregationMode_GetSelectedText()"
  },
  {
    "label": "AggregationMode_GetSelectedTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AggregationMode_GetSelectedTooltipText()"
  }
]