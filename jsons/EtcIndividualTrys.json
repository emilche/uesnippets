[
  {
    "label": "IndividualTrys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndividualTrys"
  },
  {
    "label": "Try",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Try"
  },
  {
    "label": "Half",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Half"
  },
  {
    "label": "IndividualTrys()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EtcColorFloatRGBA . h \" namespace Etc { class IndividualTrys { public : const unsigned int MAX_RADIUS = 1 ;)",
    "insertText": "IndividualTrys(ColorFloatRGBA a_frgbaColor1, ColorFloatRGBA a_frgbaColor2, const unsigned int *a_pauiPixelMapping1, const unsigned int *a_pauiPixelMapping2, unsigned int a_uiRadius)"
  },
  {
    "label": "MoveAwayFromEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MoveAwayFromEdge(int a_i, int a_iDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(a_i > (15- a_iDistance))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} return a_i ; } class Try { public : const unsigned int SELECTORS = 8 ; int m_iRed ; int m_iGreen ; int m_iBlue ; unsigned int m_uiCW ; unsigned int m_auiSelectors [ SELECTORS ] ; float m_fError ; } ; class Half { public : const unsigned int MAX_TRYS = 2 7 ; void)",
    "insertText": "Init(int a_iRed, int a_iGreen, int a_iBlue, const unsigned int *a_pauiPixelMapping, unsigned int a_uiRadius)"
  }
]