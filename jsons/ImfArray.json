[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IMF_EXPORT_TEMPLATE_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TEMPLATE_TYPE"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_ARRAY_H # define INCLUDED_IMF_ARRAY_H # include \" ImfForward . h \" OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER template<class T> class IMF_EXPORT_TEMPLATE_TYPE Array { public :)",
    "insertText": "Array()"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (_data = 0 ; _size = 0 ; })",
    "insertText": "Array(long size)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (delete [ ] _data ; } operator)",
    "insertText": "T()"
  },
  {
    "label": "resizeEraseUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeEraseUnsafe(long size)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "size()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Array&)",
    "insertText": "operator(const Array&)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array(Array&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Array&)",
    "insertText": "operator(Array&&)"
  },
  {
    "label": "Array2D()",
    "kind": "Method",
    "detail": "Function (long _size ; T* _data ; } ; template<class T> class IMF_EXPORT_TEMPLATE_TYPE Array2D { public :)",
    "insertText": "Array2D()"
  },
  {
    "label": "Array2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array2D(long sizeX, long sizeY)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "operator(long x)"
  },
  {
    "label": "resizeErase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeErase(long sizeX, long sizeY)"
  },
  {
    "label": "resizeEraseUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resizeEraseUnsafe(long sizeX, long sizeY)"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "height()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Array2D&)",
    "insertText": "operator(const Array2D&)"
  },
  {
    "label": "Array2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array2D(Array2D&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Array2D&)",
    "insertText": "operator(Array2D&&)"
  },
  {
    "label": "resizeErase()",
    "kind": "Method",
    "detail": "Function (long _sizeX ; long _sizeY ; T* _data ; } ; template<class T> void Array<T)",
    "insertText": "resizeErase(long size)"
  },
  {
    "label": "Array2D()",
    "kind": "Method",
    "detail": "Function (delete [ ] _data ; _data = 0 ; _size = 0 ; _data = new T [ size ] ; _size = size ; } template<class T> Array2D<T)",
    "insertText": "Array2D() : _sizeX (0), _sizeY (0), _data (0)"
  },
  {
    "label": "Array2D()",
    "kind": "Method",
    "detail": "Function (} template<class T> Array2D<T)",
    "insertText": "Array2D(long sizeX, long sizeY) : _sizeX (sizeX), _sizeY (sizeY), _data (new T[sizeX * sizeY])"
  }
]