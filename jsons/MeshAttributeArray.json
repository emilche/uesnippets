[
  {
    "label": "FElementID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementID"
  },
  {
    "label": "TVariantFromTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariantFromTuple"
  },
  {
    "label": "TIsBulkSerializable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsBulkSerializable"
  },
  {
    "label": "TMeshAttributeArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshAttributeArrayBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshAttributeArraySetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshAttributeArraySetBase"
  },
  {
    "label": "TMeshAttributeArraySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshAttributeArraySet"
  },
  {
    "label": "TMeshUnboundedAttributeArraySet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshUnboundedAttributeArraySet"
  },
  {
    "label": "TMeshAttributesRefTypeBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMeshAttributesRefTypeBase"
  },
  {
    "label": "TMeshAttributesRefType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMeshAttributesRefType"
  },
  {
    "label": "TMeshAttributesRegisterType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMeshAttributesRegisterType"
  },
  {
    "label": "TMeshAttributesRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshAttributesRef"
  },
  {
    "label": "FAttributesSetEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributesSetEntry"
  },
  {
    "label": "FAttributesSetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributesSetBase"
  },
  {
    "label": "TAttributesSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttributesSet"
  },
  {
    "label": "TJumpTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TJumpTable"
  },
  {
    "label": "DispatchFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DispatchFunctor"
  },
  {
    "label": "ConstDispatchFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstDispatchFunctor"
  },
  {
    "label": "TMeshAttributeArrayBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AttributeArrayContainer . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" Delegates / IntegerSequence . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" MeshElementRemappings . h \" # include \" MeshTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Crc . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / TVariant . h \" # include \" Serialization / Archive . h \" # include \" Templates / CopyQualifiersFromTo . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsArray . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / FortniteMainBranchObjectVersion . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ReleaseObjectVersion . h \" # include \" UObject / UE5MainStreamObjectVersion . h \" struct FElementID ; using AttributeTypes = TTuple<FVector4f,FVector3f,FVector2f,float,int32,bool,FName,FTransform> ; template<Tuple> struct TVariantFromTuple ; template<. . . Ts> struct TVariantFromTuple<TTuple<Ts . . .>> { using Type = TVariant<FEmptyVariantState,Ts . . .> ; } ; template<T> struct TIsBulkSerializable { const bool Value = true ; } ; template<> struct TIsBulkSerializable<FName> { const bool Value = false ; } ; template<> struct TIsBulkSerializable<FTransform> { const bool Value = false ; } ; template<AttributeType> class TMeshAttributeArrayBase { public :)",
    "insertText": "TMeshAttributeArrayBase(uint32 InExtent = 1) : Extent(InExtent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<! TIsBulkSerializable<T>::Value,FArchive>::Type&)",
    "insertText": "operator(FArchive& Ar, TMeshAttributeArrayBase<T>& Array)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const int32 ElementCount, const AttributeType& Default)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Reset(ElementCount * Extent)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(ElementCount - 1, Default)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNum(const int32 ElementCount, const AttributeType& Default)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "SetNum(ElementCount * Extent)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetHash(uint32 Crc = 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(const int32 Index, const AttributeType& Default)"
  },
  {
    "label": "SetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToDefault(const int32 Index, const AttributeType& Default)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (Container [ Index* Extent + I ] = Default ; } } void)",
    "insertText": "Remap(const TSparseArray<int32>& IndexRemap, const AttributeType& Default)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const FString ItemStr = Item .)",
    "insertText": "ToString()"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (Crc =)",
    "insertText": "MemCrc32(*ItemStr, ItemStr.Len() * sizeof(TCHAR), Crc)"
  },
  {
    "label": "EndIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EndIndex(Index + 1)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = Container .)",
    "insertText": "AddUninitialized(EndIndex - Container.Num())"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (AttributeType* Data = Container .)",
    "insertText": "GetData()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) AttributeType(Default)"
  },
  {
    "label": "NewAttributeArray()",
    "kind": "Method",
    "detail": "Function (TMeshAttributeArrayBase)",
    "insertText": "NewAttributeArray(Extent)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 OldElementIndex = It .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (const int32 NewElementIndex = IndexRemap [ OldElementIndex ] ; NewAttributeArray .)",
    "insertText": "Insert(NewElementIndex, Default)"
  },
  {
    "label": "GetElementBase()",
    "kind": "Method",
    "detail": "Function (AttributeType* DestElementBase = NewAttributeArray .)",
    "insertText": "GetElementBase(NewElementIndex)"
  },
  {
    "label": "GetElementBase()",
    "kind": "Method",
    "detail": "Function (AttributeType* SrcElementBase =)",
    "insertText": "GetElementBase(OldElementIndex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (DestElementBase [ Index ] =)",
    "insertText": "MoveTemp(SrcElementBase[Index])"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} } Container =)",
    "insertText": "MoveTemp(NewAttributeArray.Container)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (Array . Extent = 1 ; } else { Ar<<Array . Extent ; } if)",
    "insertText": "constexpr(std::is_same_v<T, FTransform>)"
  },
  {
    "label": "GetCustomVersions()",
    "kind": "Method",
    "detail": "Function (const FCustomVersion* PossiblySavedVersion = Ar .)",
    "insertText": "GetCustomVersions().GetVersion(FFortniteMainBranchObjectVersion::GUID)"
  },
  {
    "label": "BulkSerialize()",
    "kind": "Method",
    "detail": "Function (Array . Container .)",
    "insertText": "BulkSerialize(Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Array . Extent = 1 ; } else { Ar<<Array . Extent ; })",
    "insertText": "if(Ar.IsLoading() && Ar.CustomVer( FReleaseObjectVersion::GUID ) < FReleaseObjectVersion::MeshDescriptionNewSerialization)"
  },
  {
    "label": "Lerpable()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } enum class EMeshAttributeFlags : uint32 { None = 0,)",
    "insertText": "Lerpable(1 << 0), AutoGenerated = (1 << 1), Mergeable = (1 << 2), Transient = (1 << 3), IndexReference = (1 << 4), Mandatory = (1 << 5)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EMeshAttributeFlags)"
  },
  {
    "label": "FMeshAttributeArraySetBase()",
    "kind": "Method",
    "detail": "Function (class FMeshAttributeArraySetBase { public :)",
    "insertText": "FMeshAttributeArraySetBase(const uint32 InType, const EMeshAttributeFlags InFlags, const int32 InNumberOfElements, const uint32 InExtent) : Type(InType), Extent(InExtent), NumElements(InNumberOfElements), Flags(InFlags)"
  },
  {
    "label": "FMeshAttributeArraySetBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMeshAttributeArraySetBase()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FMeshAttributeArraySetBase>)",
    "insertText": "Clone()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(const int32 Index)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const int32 Index)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const int32 Count)"
  },
  {
    "label": "SetNumElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumElements(const int32 Count)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remap(const TSparseArray<int32>& IndexRemap)"
  },
  {
    "label": "GetNumIndices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumIndices()"
  },
  {
    "label": "SetNumIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumIndices(const int32 NumIndices)"
  },
  {
    "label": "InsertIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertIndex(const int32 Index)"
  },
  {
    "label": "RemoveIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIndex(const int32 Index)"
  },
  {
    "label": "GetNumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChannels()"
  },
  {
    "label": "SetNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannels(const int32 NumChannels)"
  },
  {
    "label": "InsertChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChannel(const int32 Index)"
  },
  {
    "label": "RemoveChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChannel(const int32 Index)"
  },
  {
    "label": "HasType()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "HasType()"
  },
  {
    "label": "GetNumElements()",
    "kind": "Method",
    "detail": "Function (Flags = InFlags ; } int32)",
    "insertText": "GetNumElements()"
  },
  {
    "label": "TMeshAttributeArraySet()",
    "kind": "Method",
    "detail": "Function (using Super = FMeshAttributeArraySetBase ; public :)",
    "insertText": "TMeshAttributeArraySet(const int32 Extent = 1) : Super(TTupleIndex<AttributeType, AttributeTypes>::Value, EMeshAttributeFlags::None, 0, Extent)"
  },
  {
    "label": "TMeshAttributeArraySet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMeshAttributeArraySet(const int32 NumberOfChannels, const AttributeType& InDefaultValue, const EMeshAttributeFlags InFlags, const int32 InNumberOfElements, const uint32 Extent) : Super(TTupleIndex<AttributeType, AttributeTypes>::Value, InFlags, InNumberOfElements, Extent), DefaultValue(InDefaultValue)"
  },
  {
    "label": "SetNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannels(NumberOfChannels)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (ArrayForChannel .)",
    "insertText": "Insert(Index, DefaultValue)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} NumElements =)",
    "insertText": "Max(NumElements, Index + 1)"
  },
  {
    "label": "SetToDefault()",
    "kind": "Method",
    "detail": "Function (ArrayForChannel .)",
    "insertText": "SetToDefault(Index, DefaultValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumElements = Count ;)",
    "insertText": "for(TMeshAttributeArrayBase<AttributeType>& ArrayForChannel : ArrayForChannels)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (ArrayForChannel .)",
    "insertText": "Initialize(Count, DefaultValue)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ArrayForChannel .)",
    "insertText": "SetNum(Count, DefaultValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 CrcResult = 0 ;)",
    "insertText": "for(const TMeshAttributeArrayBase<AttributeType>& ArrayForChannel : ArrayForChannels)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (CrcResult = ArrayForChannel .)",
    "insertText": "GetHash(CrcResult)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ar(*this)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (ArrayForChannel .)",
    "insertText": "Remap(IndexRemap, DefaultValue)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumElements = ArrayForChannel .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannels(NumIndices)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ArrayForChannels .)",
    "insertText": "SetNum(NumChannels)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (TMeshAttributeArrayBase<AttributeType>& Array = ArrayForChannels .)",
    "insertText": "Emplace_GetRef(Extent)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Initialize(NumElements, DefaultValue)"
  },
  {
    "label": "InsertChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertChannel(Index)"
  },
  {
    "label": "EmplaceAt_GetRef()",
    "kind": "Method",
    "detail": "Function (TMeshAttributeArrayBase<AttributeType>& Array = ArrayForChannels .)",
    "insertText": "EmplaceAt_GetRef(Index, Extent)"
  },
  {
    "label": "RemoveChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChannel(Index)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ArrayForChannels .)",
    "insertText": "RemoveAt(Index)"
  },
  {
    "label": "TMeshUnboundedAttributeArraySet()",
    "kind": "Method",
    "detail": "Function (Ar<<AttributeArraySet . NumElements ; Ar<<AttributeArraySet . ArrayForChannels ; Ar<<AttributeArraySet . DefaultValue ; Ar<<AttributeArraySet . Flags ; return Ar ; } protected : TArray<TMeshAttributeArrayBase<AttributeType>,TInlineAllocator<1>> ArrayForChannels ; AttributeType DefaultValue ; } ; template<AttributeType> class TMeshUnboundedAttributeArraySet final : public FMeshAttributeArraySetBase { using Super = FMeshAttributeArraySetBase ; public :)",
    "insertText": "TMeshUnboundedAttributeArraySet() : Super(TTupleIndex<AttributeType, AttributeTypes>::Value, EMeshAttributeFlags::None, 0, 0)"
  },
  {
    "label": "TMeshUnboundedAttributeArraySet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMeshUnboundedAttributeArraySet(const int32 NumberOfChannels, const AttributeType& InDefaultValue, const EMeshAttributeFlags InFlags, const int32 InNumberOfElements) : Super(TTupleIndex<AttributeType, AttributeTypes>::Value, InFlags, InNumberOfElements, 0), DefaultValue(InDefaultValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumElements = Count ;)",
    "insertText": "for(TAttributeArrayContainer<AttributeType>& ArrayForChannel : ArrayForChannels)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 CrcResult = 0 ;)",
    "insertText": "for(const TAttributeArrayContainer<AttributeType>& ArrayForChannel : ArrayForChannels)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (TAttributeArrayContainer<AttributeType>& Array = ArrayForChannels .)",
    "insertText": "Emplace_GetRef(DefaultValue)"
  },
  {
    "label": "EmplaceAt_GetRef()",
    "kind": "Method",
    "detail": "Function (TAttributeArrayContainer<AttributeType>& Array = ArrayForChannels .)",
    "insertText": "EmplaceAt_GetRef(Index, DefaultValue)"
  },
  {
    "label": "GetArrayForChannel()",
    "kind": "Method",
    "detail": "Function (} const TAttributeArrayContainer<AttributeType>&)",
    "insertText": "GetArrayForChannel(const int32 Index)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (Ar<<AttributeArraySet . NumElements ; Ar<<AttributeArraySet . ArrayForChannels ; Ar<<AttributeArraySet . DefaultValue ; Ar<<AttributeArraySet . Flags ; return Ar ; } protected : TArray<TAttributeArrayContainer<AttributeType>,TInlineAllocator<1>> ArrayForChannels ; AttributeType DefaultValue ; } ; template<T> struct TMeshAttributesRefTypeBase { using AttributeType = T ; using RealAttributeType = std::conditional_t<TIsDerivedFrom<AttributeType,FElementID>::Value,int32,AttributeType> ; } ; template<T> struct TMeshAttributesRefType : TMeshAttributesRefTypeBase<T> { const uint32 MinExpectedExtent = 1 ; const uint32 MaxExpectedExtent = 1 ; using RefType = T ; using ConstRefType = const T ; using NonConstRefType = std::remove_cv_t<T> ; } ; template<T> struct TMeshAttributesRefType<TArrayView<T>> : TMeshAttributesRefTypeBase<T> { const uint32 MinExpectedExtent = 0 ; const uint32 MaxExpectedExtent = 0 xFFFFFFFF ; using RefType = TArrayView<T> ; using ConstRefType = TArrayView<const T> ; using NonConstRefType = TArrayView<std::remove_cv_t<T>> ; } ; template<T> struct TMeshAttributesRefType<TArrayAttribute<T>> : TMeshAttributesRefTypeBase<T> { const uint32 MinExpectedExtent = 0 ; const uint32 MaxExpectedExtent = 0 ; using RefType = TArrayAttribute<T> ; using ConstRefType = TArrayAttribute<const T> ; using NonConstRefType = TArrayAttribute<std::remove_cv_t<T>> ; } ; template<T> struct TMeshAttributesRegisterType : TMeshAttributesRefType<T> { const uint32 Extent = 1 ; } ; template<T,SIZE_T N> struct TMeshAttributesRegisterType<T [ N ]> : TMeshAttributesRefType<TArrayView<T>> { const uint32 Extent = N ; } ; template<T> struct TMeshAttributesRegisterType<T [ ]> : TMeshAttributesRefType<TArrayAttribute<T>> { const uint32 Extent = 0 ; } ; template<ElementIDType,AttributeType> class TMeshAttributesRef ; template<ElementIDType,AttributeType> using TMeshAttributesConstRef = TMeshAttributesRef<ElementIDType,TMeshAttributesRefType<AttributeType>::ConstRefType> ; template<AttributeType> using TMeshAttributesArray = TMeshAttributesRef<int32,AttributeType> ; template<AttributeType> using TMeshAttributesConstArray = TMeshAttributesRef<int32,TMeshAttributesRefType<AttributeType>::ConstRefType> ; template<ElementIDType,AttributeType> class TMeshAttributesRef { template<T,U> class TMeshAttributesRef ; public : using BaseArrayType = TCopyQualifiersFromTo<AttributeType,FMeshAttributeArraySetBase>::Type ; using ArrayType = TCopyQualifiersFromTo<AttributeType,TMeshAttributeArraySet<std::remove_cv_t<AttributeType>>>::Type ;)",
    "insertText": "TMeshAttributesRef(BaseArrayType* InArrayPtr = nullptr, uint32 InExtent = 1) : ArrayPtr(InArrayPtr)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<SrcAttributeType,DestAttributeType = AttributeType,TEnableIf<std::is_const_v<DestAttributeType>,int>::Type = 0,TEnableIf<! std::is_const_v<SrcAttributeType>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<ElementIDType, SrcAttributeType>& InRef) : ArrayPtr(InRef.ArrayPtr)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<IDType = ElementIDType,TEnableIf<! std::is_same_v<IDType,int32>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<int32, AttributeType>& InRef) : ArrayPtr(InRef.ArrayPtr)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<SrcAttributeType,DestAttributeType = AttributeType,IDType = ElementIDType,TEnableIf<! std::is_same_v<IDType,int32>,int>::Type = 0,TEnableIf<std::is_const_v<DestAttributeType>,int>::Type = 0,TEnableIf<! std::is_const_v<SrcAttributeType>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<int32, SrcAttributeType>& InRef) : ArrayPtr(InRef.ArrayPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T = ElementIDType,TEnableIf<TIsDerivedFrom<T,FElementID>::Value,int>::Type = 0> AttributeType&)",
    "insertText": "operator(const ElementIDType ElementID)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<T = ElementIDType,TEnableIf<TIsDerivedFrom<T,FElementID>::Value,int>::Type = 0> AttributeType)",
    "insertText": "Get(const ElementIDType ElementID, const int32 Channel = 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AttributeType&)",
    "insertText": "operator(int32 ElementIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} AttributeType)",
    "insertText": "Get(int32 ElementIndex, const int32 Channel = 0)"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (} TArrayView<AttributeType>)",
    "insertText": "GetArrayView(int32 ElementIndex, const int32 Channel = 0)"
  },
  {
    "label": "GetRawArray()",
    "kind": "Method",
    "detail": "Function (} TArrayView<AttributeType>)",
    "insertText": "GetRawArray(const int32 AttributeChannel = 0)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (} AttributeType* Element = static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(AttributeChannel).GetElementBase(0)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (} AttributeType)",
    "insertText": "GetDefaultValue()"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} EMeshAttributeFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetExtent()"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(0).GetElementBase(ElementID.GetValue())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<T = ElementIDType,TEnableIf<TIsDerivedFrom<T,FElementID>::Value,int>::Type = 0> void)",
    "insertText": "Set(const ElementIDType ElementID, const int32 Channel, const AttributeType& Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(Channel).GetElementBase(ElementID.GetValue())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 ElementIndex, const AttributeType& Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(0).GetElementBase(ElementIndex)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 ElementIndex, const int32 Channel, const AttributeType& Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(Channel).GetElementBase(ElementIndex)"
  },
  {
    "label": "SetArrayView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetArrayView(int32 ElementIndex, TArrayView<const AttributeType> Value)"
  },
  {
    "label": "SetArrayView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetArrayView(int32 ElementIndex, const int32 Channel, TArrayView<const AttributeType> Value)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Copy(TMeshAttributesRef<ElementIDType, const AttributeType> Src, const int32 DestChannel = 0, const int32 SrcChannel = 0)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->ArrayType::SetNumChannels(NumChannels)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->ArrayType::InsertChannel(Index)"
  },
  {
    "label": "InsertChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertChannel(const int32 Channel)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->ArrayType::InsertChannel(Channel)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->ArrayType::RemoveChannel(Index)"
  },
  {
    "label": "RemoveChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveChannel(const int32 Channel)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->ArrayType::RemoveChannel(Channel)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} private : BaseArrayType* ArrayPtr ; } ; template<ElementIDType,AttributeType> void TMeshAttributesRef<ElementIDType,AttributeType)",
    "insertText": "Copy(TMeshAttributesRef<ElementIDType, const AttributeType> Src, const int32 DestChannel, const int32 SrcChannel)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (const TMeshAttributeArrayBase<AttributeType>& SrcArray = static_cast<const)",
    "insertText": "ArrayType(Src.ArrayPtr)->GetArrayForChannel(SrcChannel)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (TMeshAttributeArrayBase<AttributeType>& DestArray = static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(DestChannel)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const int32 Num =)",
    "insertText": "Min(SrcArray.Num(), DestArray.Num())"
  },
  {
    "label": "GetElementBase()",
    "kind": "Method",
    "detail": "Function (DestArray .)",
    "insertText": "GetElementBase(Index)[0] = SrcArray.GetElementBase(Index)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} } template<ElementIDType,AttributeType> class TMeshAttributesRef<ElementIDType,TArrayView<AttributeType>> { template<T,U> class TMeshAttributesRef ; public : using BaseArrayType = TCopyQualifiersFromTo<AttributeType,FMeshAttributeArraySetBase>::Type ; using BoundedArrayType = TCopyQualifiersFromTo<AttributeType,TMeshAttributeArraySet<std::remove_cv_t<AttributeType>>>::Type ; using UnboundedArrayType = TCopyQualifiersFromTo<AttributeType,TMeshUnboundedAttributeArraySet<std::remove_cv_t<AttributeType>>>::Type ;)",
    "insertText": "TMeshAttributesRef(BaseArrayType* InArrayPtr = nullptr, uint32 InExtent = 1) : ArrayPtr(InArrayPtr), Extent(InExtent)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<SrcAttributeType,DestAttributeType = AttributeType,TEnableIf<std::is_const_v<DestAttributeType>,int>::Type = 0,TEnableIf<! std::is_const_v<SrcAttributeType>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<ElementIDType, TArrayView<SrcAttributeType>>& InRef) : ArrayPtr(InRef.ArrayPtr), Extent(InRef.Extent)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<IDType = ElementIDType,TEnableIf<! std::is_same_v<IDType,int32>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<int32, TArrayView<AttributeType>>& InRef) : ArrayPtr(InRef.ArrayPtr), Extent(InRef.Extent)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<SrcAttributeType,DestAttributeType = AttributeType,IDType = ElementIDType,TEnableIf<! std::is_same_v<IDType,int32>,int>::Type = 0,TEnableIf<std::is_const_v<DestAttributeType>,int>::Type = 0,TEnableIf<! std::is_const_v<SrcAttributeType>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<int32, TArrayView<SrcAttributeType>>& InRef) : ArrayPtr(InRef.ArrayPtr), Extent(InRef.Extent)"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (AttributeType* Element = static_cast<)",
    "insertText": "BoundedArrayType(ArrayPtr)->GetArrayForChannel(0).GetElementBase(ElementID.GetValue())"
  },
  {
    "label": "UnboundedArrayType()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "UnboundedArrayType(ArrayPtr)->GetArrayForChannel(0).Get(ElementID.GetValue())"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (AttributeType* Element = static_cast<)",
    "insertText": "BoundedArrayType(ArrayPtr)->GetArrayForChannel(Channel).GetElementBase(ElementID.GetValue())"
  },
  {
    "label": "UnboundedArrayType()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "UnboundedArrayType(ArrayPtr)->GetArrayForChannel(Channel).Get(ElementID.GetValue())"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (AttributeType* Element = static_cast<)",
    "insertText": "BoundedArrayType(ArrayPtr)->GetArrayForChannel(0).GetElementBase(ElementIndex)"
  },
  {
    "label": "UnboundedArrayType()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "UnboundedArrayType(ArrayPtr)->GetArrayForChannel(0).Get(ElementIndex)"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (AttributeType* Element = static_cast<)",
    "insertText": "BoundedArrayType(ArrayPtr)->GetArrayForChannel(Channel).GetElementBase(ElementIndex)"
  },
  {
    "label": "UnboundedArrayType()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "UnboundedArrayType(ArrayPtr)->GetArrayForChannel(Channel).Get(ElementIndex)"
  },
  {
    "label": "GetRawArray()",
    "kind": "Method",
    "detail": "Function (} } TArrayView<AttributeType>)",
    "insertText": "GetRawArray(const int32 ChannelIndex = 0)"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (} AttributeType* Element = static_cast<)",
    "insertText": "BoundedArrayType(ArrayPtr)->GetArrayForChannel(ChannelIndex).GetElementBase(0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<AttributeType> Elements =)",
    "insertText": "Get(ElementID)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Elements [ Index ] = Value [ Index ] ; } } template<T = ElementIDType,TEnableIf<TIsDerivedFrom<T,FElementID>::Value,int>::Type = 0> void)",
    "insertText": "Set(const ElementIDType ElementID, const int32 Channel, TArrayView<const AttributeType> Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<AttributeType> Elements =)",
    "insertText": "Get(ElementID, Channel)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Elements [ Index ] = Value [ Index ] ; } } void)",
    "insertText": "Set(int32 ElementIndex, TArrayView<const AttributeType> Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<AttributeType> Elements =)",
    "insertText": "Get(ElementIndex)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Elements [ Index ] = Value [ Index ] ; } } void)",
    "insertText": "Set(int32 ElementIndex, const int32 Channel, TArrayView<const AttributeType> Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<AttributeType> Elements =)",
    "insertText": "Get(ElementIndex, Channel)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(ElementIndex, Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(ElementIndex, Channel, Value)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Copy(TMeshAttributesConstRef<ElementIDType, TArrayView<AttributeType>> Src, const int32 DestChannel = 0, const int32 SrcChannel = 0)"
  },
  {
    "label": "SetNumChannels()",
    "kind": "Method",
    "detail": "Function (ArrayPtr ->)",
    "insertText": "SetNumChannels(NumChannels)"
  },
  {
    "label": "InsertChannel()",
    "kind": "Method",
    "detail": "Function (ArrayPtr ->)",
    "insertText": "InsertChannel(Channel)"
  },
  {
    "label": "RemoveChannel()",
    "kind": "Method",
    "detail": "Function (ArrayPtr ->)",
    "insertText": "RemoveChannel(Channel)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} private : BaseArrayType* ArrayPtr ; uint32 Extent ; } ; template<ElementIDType,AttributeType> void TMeshAttributesRef<ElementIDType,TArrayView<AttributeType>)",
    "insertText": "Copy(TMeshAttributesConstRef<ElementIDType, TArrayView<AttributeType>> Src, const int32 DestChannel, const int32 SrcChannel)"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (const TMeshAttributeArrayBase<AttributeType>& SrcArray = static_cast<const)",
    "insertText": "BoundedArrayType(Src.ArrayPtr)->GetArrayForChannel(SrcChannel)"
  },
  {
    "label": "BoundedArrayType()",
    "kind": "Method",
    "detail": "Function (TMeshAttributeArrayBase<AttributeType>& DestArray = static_cast<)",
    "insertText": "BoundedArrayType(ArrayPtr)->GetArrayForChannel(DestChannel)"
  },
  {
    "label": "GetElementBase()",
    "kind": "Method",
    "detail": "Function (DestArray .)",
    "insertText": "GetElementBase(Index)[Count] = SrcArray.GetElementBase(Index)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} } } template<ElementIDType,AttributeType> class TMeshAttributesRef<ElementIDType,TArrayAttribute<AttributeType>> { template<T,U> class TMeshAttributesRef ; public : using BaseArrayType = TCopyQualifiersFromTo<AttributeType,FMeshAttributeArraySetBase>::Type ; using ArrayType = TCopyQualifiersFromTo<AttributeType,TMeshUnboundedAttributeArraySet<std::remove_cv_t<AttributeType>>>::Type ;)",
    "insertText": "TMeshAttributesRef(BaseArrayType* InArrayPtr = nullptr, uint32 InExtent = 0) : ArrayPtr(InArrayPtr)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<SrcAttributeType,DestAttributeType = AttributeType,TEnableIf<std::is_const_v<DestAttributeType>,int>::Type = 0,TEnableIf<! std::is_const_v<SrcAttributeType>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<ElementIDType, TArrayAttribute<SrcAttributeType>>& InRef) : ArrayPtr(InRef.ArrayPtr)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<IDType = ElementIDType,TEnableIf<! std::is_same_v<IDType,int32>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<int32, TArrayAttribute<AttributeType>>& InRef) : ArrayPtr(InRef.ArrayPtr)"
  },
  {
    "label": "TMeshAttributesRef()",
    "kind": "Method",
    "detail": "Function (} template<SrcAttributeType,DestAttributeType = AttributeType,IDType = ElementIDType,TEnableIf<! std::is_same_v<IDType,int32>,int>::Type = 0,TEnableIf<std::is_const_v<DestAttributeType>,int>::Type = 0,TEnableIf<! std::is_const_v<SrcAttributeType>,int>::Type = 0>)",
    "insertText": "TMeshAttributesRef(const TMeshAttributesRef<int32, TArrayAttribute<SrcAttributeType>>& InRef) : ArrayPtr(InRef.ArrayPtr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<T = ElementIDType,TEnableIf<TIsDerivedFrom<T,FElementID>::Value,int>::Type = 0> void)",
    "insertText": "Set(const ElementIDType ElementID, TArrayAttribute<const AttributeType> Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(0).Set(ElementID.GetValue(), Value.ToArrayView())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<T = ElementIDType,TEnableIf<TIsDerivedFrom<T,FElementID>::Value,int>::Type = 0> void)",
    "insertText": "Set(const ElementIDType ElementID, const int32 Channel, TArrayAttribute<const AttributeType> Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(Channel).Set(ElementID.GetValue(), Value.ToArrayView())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 ElementIndex, TArrayAttribute<const AttributeType> Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(0).Set(ElementIndex, Value.ToArrayView())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 ElementIndex, const int32 Channel, TArrayAttribute<const AttributeType> Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(Channel).Set(ElementIndex, Value.ToArrayView())"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(0).Set(ElementIndex, Value)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "ArrayType(ArrayPtr)->GetArrayForChannel(Channel).Set(ElementIndex, Value)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Copy(TMeshAttributesConstRef<ElementIDType, TArrayAttribute<AttributeType>> Src, const int32 DestChannel = 0, const int32 SrcChannel = 0)"
  },
  {
    "label": "FAttributesSetEntry()",
    "kind": "Method",
    "detail": "Function (} private : BaseArrayType* ArrayPtr ; } ; class FAttributesSetEntry { public :)",
    "insertText": "FAttributesSetEntry()"
  },
  {
    "label": "FAttributesSetEntry()",
    "kind": "Method",
    "detail": "Function (template<AttributeType>)",
    "insertText": "FAttributesSetEntry(const int32 NumberOfChannels, const AttributeType& Default, const EMeshAttributeFlags Flags, const int32 NumElements, const int32 Extent)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (Ptr = MakeUnique<TMeshAttributeArraySet<)",
    "insertText": "AttributeType(NumberOfChannels, Default, Flags, NumElements, Extent)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (} else { Ptr = MakeUnique<TMeshUnboundedAttributeArraySet<)",
    "insertText": "AttributeType(NumberOfChannels, Default, Flags, NumElements)"
  },
  {
    "label": "FAttributesSetEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributesSetEntry(const FAttributesSetEntry& Other) : Ptr(Other.Ptr ? Other.Ptr->Clone() : nullptr)"
  },
  {
    "label": "FAttributesSetEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAttributesSetEntry(FAttributesSetEntry&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAttributesSetEntry&)",
    "insertText": "operator(const FAttributesSetEntry& Other)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FAttributesSetEntry)",
    "insertText": "Temp(Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(*this, Temp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FMeshAttributeArraySetBase*)",
    "insertText": "operator()"
  },
  {
    "label": "CreateArrayOfType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateArrayOfType(const uint32 Type, const uint32 Extent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FAttributesSetEntry& Entry)"
  },
  {
    "label": "FAttributesSetBase()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<FMeshAttributeArraySetBase> Ptr ; } ; class FAttributesSetBase { public :)",
    "insertText": "FAttributesSetBase() : NumElements(0)"
  },
  {
    "label": "RegisterAttributeInternal()",
    "kind": "Method",
    "detail": "Function (} template<T> TMeshAttributesArray<TMeshAttributesRegisterType<T>::RefType>)",
    "insertText": "RegisterAttributeInternal(const FName AttributeName, const int32 NumberOfChannels = 1, const typename TMeshAttributesRegisterType<T>::RealAttributeType& Default = typename TMeshAttributesRegisterType<T>::RealAttributeType(), const EMeshAttributeFlags Flags = EMeshAttributeFlags::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using AttributeType = TMeshAttributesRegisterType<T>::AttributeType ; using RealAttributeType = TMeshAttributesRegisterType<T>::RealAttributeType ; using RefType = TMeshAttributesRegisterType<T>::RefType ; const uint32 Extent = TMeshAttributesRegisterType<T>::Extent ;)",
    "insertText": "if(FAttributesSetEntry* ArraySetPtr = Map.Find(AttributeName))"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { Map .)",
    "insertText": "Remove(AttributeName)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} } FAttributesSetEntry& Entry = Map .)",
    "insertText": "Emplace(AttributeName, FAttributesSetEntry(NumberOfChannels, Default, Flags, NumElements, Extent))"
  },
  {
    "label": "RegisterAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsArray<T>::Value,int>::Type = 0> TMeshAttributesArray<TMeshAttributesRegisterType<T>::RefType>)",
    "insertText": "RegisterAttribute(const FName AttributeName, const int32 NumberOfChannels = 1, const T& Default = T(), const EMeshAttributeFlags Flags = EMeshAttributeFlags::None)"
  },
  {
    "label": "RegisterAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<TIsArray<T>::Value,int>::Type = 0> TMeshAttributesArray<TMeshAttributesRegisterType<T>::RefType>)",
    "insertText": "RegisterAttribute(const FName AttributeName, const int32 NumberOfChannels = 1, const typename TMeshAttributesRegisterType<T>::RealAttributeType& Default = typename TMeshAttributesRegisterType<T>::RealAttributeType(), const EMeshAttributeFlags Flags = EMeshAttributeFlags::None)"
  },
  {
    "label": "RegisterIndexAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<std::is_same_v<TMeshAttributesRegisterType<T>::RealAttributeType,int>,int>::Type = 0> TMeshAttributesArray<TMeshAttributesRegisterType<T>::RefType>)",
    "insertText": "RegisterIndexAttribute(const FName AttributeName, const int32 NumberOfChannels = 1, const EMeshAttributeFlags Flags = EMeshAttributeFlags::None)"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterAttribute(const FName AttributeName)"
  },
  {
    "label": "HasAttribute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAttribute(const FName AttributeName)"
  },
  {
    "label": "HasAttributeOfType()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "HasAttributeOfType(const FName AttributeName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using RealAttributeType = TMeshAttributesRefType<T>::RealAttributeType ;)",
    "insertText": "if(const FAttributesSetEntry* ArraySetPtr = Map.Find(AttributeName))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumElements = Count ;)",
    "insertText": "for(auto& MapEntry : Map)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (MapEntry . Value ->)",
    "insertText": "Initialize(Count)"
  },
  {
    "label": "SetNumElements()",
    "kind": "Method",
    "detail": "Function (MapEntry . Value ->)",
    "insertText": "SetNumElements(Count)"
  },
  {
    "label": "GetAttributeNames()",
    "kind": "Method",
    "detail": "Function (template<Allocator> void)",
    "insertText": "GetAttributeNames(TArray<FName, Allocator>& OutAttributeNames)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "GetKeys(OutAttributeNames)"
  },
  {
    "label": "DoesAttributeHaveAnyFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesAttributeHaveAnyFlags(const FName AttributeName, EMeshAttributeFlags AttributeFlags)"
  },
  {
    "label": "DoesAttributeHaveAllFlags()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "DoesAttributeHaveAllFlags(const FName AttributeName, EMeshAttributeFlags AttributeFlags)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} return false ; } uint32)",
    "insertText": "GetHash(const FName AttributeName)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (MapEntry . Value ->)",
    "insertText": "Insert(Index)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (MapEntry . Value ->)",
    "insertText": "Remove(Index)"
  },
  {
    "label": "GetAttributesRef()",
    "kind": "Method",
    "detail": "Function (} } template<T> TMeshAttributesConstRef<int32,TMeshAttributesRefType<T>::ConstRefType>)",
    "insertText": "GetAttributesRef(const FName AttributeName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using RefType = TMeshAttributesRefType<T>::ConstRefType ;)",
    "insertText": "if(const FAttributesSetEntry* ArraySetPtr = this->Map.Find(AttributeName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using AttributeType = TMeshAttributesRefType<T>::AttributeType ; using RealAttributeType = TMeshAttributesRefType<T>::RealAttributeType ;)",
    "insertText": "if((*ArraySetPtr)->HasType<RealAttributeType>())"
  },
  {
    "label": "ActualExtent()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ActualExtent(*ArraySetPtr)->GetExtent()"
  },
  {
    "label": "RefType()",
    "kind": "Method",
    "detail": "Function (} } } return TMeshAttributesConstRef<int32,)",
    "insertText": "RefType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using RefType = TMeshAttributesRefType<T>::RefType ;)",
    "insertText": "if(FAttributesSetEntry* ArraySetPtr = this->Map.Find(AttributeName))"
  },
  {
    "label": "AppendAttributesFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendAttributesFrom(const FAttributesSetBase& OtherAttributesSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : FArchive&)",
    "insertText": "operator(FArchive& Ar, FAttributesSetBase& AttributesSet)"
  },
  {
    "label": "SerializeLegacy()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SerializeLegacy(FArchive& Ar, FAttributesSetBase& AttributesSet)"
  },
  {
    "label": "GetAttributeChannelCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAttributeChannelCount(const FName AttributeName)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (using ArrayType = TMeshAttributeArraySet<AttributeType> ; return static_cast<const)",
    "insertText": "ArrayType(ArraySetPtr->Get() )->ArrayType::GetNumChannels()"
  },
  {
    "label": "SetAttributeChannelCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeChannelCount(AttributeName, NumChannels)"
  },
  {
    "label": "SetAttributeChannelCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttributeChannelCount(const FName AttributeName, const int32 NumChannels)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (using ArrayType = TMeshAttributeArraySet<AttributeType> ; static_cast<)",
    "insertText": "ArrayType(ArraySetPtr->Get())->ArrayType::SetNumChannels(NumIndices)"
  },
  {
    "label": "InsertAttributeChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAttributeChannel(AttributeName, Index)"
  },
  {
    "label": "InsertAttributeChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertAttributeChannel(const FName AttributeName, const int32 Index)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (using ArrayType = TMeshAttributeArraySet<AttributeType> ; static_cast<)",
    "insertText": "ArrayType(ArraySetPtr->Get())->ArrayType::InsertChannel(Index)"
  },
  {
    "label": "RemoveAttributeChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttributeChannel(AttributeName, Index)"
  },
  {
    "label": "RemoveAttributeChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAttributeChannel(const FName AttributeName, const int32 Index)"
  },
  {
    "label": "ArrayType()",
    "kind": "Method",
    "detail": "Function (using ArrayType = TMeshAttributeArraySet<AttributeType> ; static_cast<)",
    "insertText": "ArrayType(ArraySetPtr->Get())->ArrayType::RemoveChannel(Index)"
  },
  {
    "label": "GetAttribute()",
    "kind": "Method",
    "detail": "Function (} } } template<T> T)",
    "insertText": "GetAttribute(const ElementIDType ElementID, const FName AttributeName, const int32 AttributeChannel = 0)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (using RefType = TMeshAttributesRefType<T>::ConstRefType ; using AttributeType = TMeshAttributesRefType<T>::AttributeType ; using RealAttributeType = TMeshAttributesRefType<T>::RealAttributeType ; const FMeshAttributeArraySetBase* ArraySetPtr = this -> Map .)",
    "insertText": "FindChecked(AttributeName).Get()"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (TMeshAttributesConstRef<FElementID,RefType>)",
    "insertText": "Ref(ArraySetPtr, ActualExtent)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SetAttribute(const ElementIDType ElementID, const FName AttributeName, const int32 AttributeChannel, const T& AttributeValue)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(const ElementIDType ElementID)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Insert(ElementID.GetValue())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const ElementIDType ElementID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Remove(ElementID.GetValue())"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (} template<ForEachFunc> void)",
    "insertText": "ForEach(ForEachFunc Func)"
  },
  {
    "label": "ForEachByType()",
    "kind": "Method",
    "detail": "Function (template<AttributeType,ForEachFunc> void)",
    "insertText": "ForEachByType(ForEachFunc Func)"
  },
  {
    "label": "TJumpTable()",
    "kind": "Method",
    "detail": "Function (} ; template<FnType,uint32 Size> struct TJumpTable { template<. . . T>)",
    "insertText": "TJumpTable(T... Ts)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (Ts . . . } { } FnType* Fns [ Size ] ; } ; namespace ForEachImpl { template<ElementIDType,ForEachFunc> using JumpTableType = TJumpTable<)",
    "insertText": "void(FName, ForEachFunc, FMeshAttributeArraySetBase*)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (template<ElementIDType,ForEachFunc,uint32 I> void)",
    "insertText": "Dispatch(FName Name, ForEachFunc Fn, FMeshAttributeArraySetBase* Attributes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using AttributeType = TTupleElement<I,AttributeTypes>::Type ;)",
    "insertText": "if(Attributes->GetExtent() == 0)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(Name, TMeshAttributesRef<ElementIDType, TArrayAttribute<AttributeType>>(static_cast<TMeshUnboundedAttributeArraySet<AttributeType>*>(Attributes)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Attributes->GetExtent() == 1)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(Name, TMeshAttributesRef<ElementIDType, AttributeType>(static_cast<TMeshAttributeArraySet<AttributeType>*>(Attributes)))"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Fn(Name, TMeshAttributesRef<ElementIDType, TArrayView<AttributeType>>(static_cast<TMeshAttributeArraySet<AttributeType>*>(Attributes), Attributes->GetExtent()))"
  },
  {
    "label": "MakeJumpTable()",
    "kind": "Method",
    "detail": "Function (} } template<ElementIDType,ForEachFunc,uint32 . . . Is> JumpTableType<ElementIDType,ForEachFunc>)",
    "insertText": "MakeJumpTable(TIntegerSequence< uint32, Is...>)"
  },
  {
    "label": "ForEachFunc()",
    "kind": "Method",
    "detail": "Function (ForEachImpl::JumpTableType<ElementIDType,ForEachFunc> JumpTable = ForEachImpl::MakeJumpTable<ElementIDType,)",
    "insertText": "ForEachFunc(TMakeIntegerSequence<uint32, TTupleArity<AttributeTypes>::Value>())"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const uint32 Type = MapEntry . Value ->)",
    "insertText": "GetType()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (JumpTable . Fns [)",
    "insertText": "Type(MapEntry.Key, Func, MapEntry.Value.Get())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } namespace ForEachConstImpl { template<ElementIDType,ForEachFunc> using JumpTableType = TJumpTable<)",
    "insertText": "void(FName, ForEachFunc, const FMeshAttributeArraySetBase*)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (template<ElementIDType,ForEachFunc,uint32 I> void)",
    "insertText": "Dispatch(FName Name, ForEachFunc Fn, const FMeshAttributeArraySetBase* Attributes)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(Name, TMeshAttributesConstRef<ElementIDType, TArrayAttribute<const AttributeType>>(static_cast<const TMeshUnboundedAttributeArraySet<AttributeType>*>(Attributes)))"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(Name, TMeshAttributesConstRef<ElementIDType, AttributeType>(static_cast<const TMeshAttributeArraySet<AttributeType>*>(Attributes)))"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Fn(Name, TMeshAttributesConstRef<ElementIDType, TArrayView<const AttributeType>>(static_cast<const TMeshAttributeArraySet<AttributeType>*>(Attributes), Attributes->GetExtent()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } namespace ForEachByTypeImpl { template<ElementIDType,AttributeType,ForEachFunc> struct DispatchFunctor { void)",
    "insertText": "operator()(FName Name, ForEachFunc Fn, FMeshAttributeArraySetBase* Attributes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } ; template<ElementIDType,AttributeType,ForEachFunc> struct ConstDispatchFunctor { void)",
    "insertText": "operator()(FName Name, ForEachFunc Fn, const FMeshAttributeArraySetBase* Attributes)"
  },
  {
    "label": "FMeshAttributeArraySetBase()",
    "kind": "Method",
    "detail": "Function (} } namespace CreateTypeImpl { using JumpTableType = TJumpTable<TUniquePtr<)",
    "insertText": "FMeshAttributeArraySetBase(uint32)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (template<uint32 I> TUniquePtr<FMeshAttributeArraySetBase>)",
    "insertText": "Dispatch(uint32 Extent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using AttributeType = TTupleElement<I,AttributeTypes>::Type ;)",
    "insertText": "if(Extent > 0)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (} else { return MakeUnique<TMeshUnboundedAttributeArraySet<)",
    "insertText": "AttributeType()"
  },
  {
    "label": "MakeJumpTable()",
    "kind": "Method",
    "detail": "Function (CreateTypeImpl::JumpTableType JumpTable =)",
    "insertText": "MakeJumpTable(TMakeIntegerSequence<uint32, TTupleArity<AttributeTypes>::Value>())"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (Ptr = JumpTable . Fns [)",
    "insertText": "Type(Extent)"
  }
]