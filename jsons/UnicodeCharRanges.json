[
  {
    "label": "UnicodeCharRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnicodeCharRange"
  },
  {
    "label": "UnicodeCharSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeCharSet"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_UNICODECHARRANGES_H # define LLVM_SUPPORT_UNICODECHARRANGES_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / Debug . h \" # include \" llvm / Support / Mutex . h \" # include \" llvm / Support / MutexGuard . h \" # include \" llvm / Support / raw_ostream . h \" # include<algorithm> namespace llvm { namespace sys { # define DEBUG_TYPE \" unicode \" struct UnicodeCharRange { uint32_t Lower ; uint32_t Upper ; } ; bool)",
    "insertText": "operator(uint32_t Value, UnicodeCharRange Range)"
  },
  {
    "label": "UnicodeCharSet()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "UnicodeCharSet(CharRanges Ranges) : Ranges(Ranges)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(rangesAreValid())"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "contains(uint32_t C)"
  },
  {
    "label": "rangesAreValid()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "rangesAreValid()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32_t Prev = 0 ;)",
    "insertText": "for(CharRanges::const_iterator I = Ranges.begin(), E = Ranges.end(); I != E; ++I)"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs() << \"Upper bound 0x\")"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs().write_hex(Prev))"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs() << \" should be less than succeeding lower bound 0x\")"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs().write_hex(I->Lower) << \"\\n\")"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs().write_hex(I->Lower))"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs() << \" should not be less than lower bound 0x\")"
  },
  {
    "label": "DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEBUG(dbgs().write_hex(I->Upper) << \"\\n\")"
  }
]