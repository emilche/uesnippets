[
  {
    "label": "TMemoryHasher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMemoryHasher"
  },
  {
    "label": "TMemoryHasher()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / NumericLimits . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Logging / LogMacros . h \" # include \" CoreGlobals . h \" # include \" Serialization / MemoryArchive . h \" # include \" Misc / SecureHash . h \" # include \" Hash / Blake3 . h \" template<HashBuilder,HashDigest> class TMemoryHasher : public FMemoryArchive { public :)",
    "insertText": "TMemoryHasher() : FMemoryArchive()"
  },
  {
    "label": "SetIsSaving()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsSaving(true)"
  },
  {
    "label": "SetIsPersistent()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsPersistent(false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* Data, int64 Num)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (BuilderState .)",
    "insertText": "Update(reinterpret_cast<uint8*>(Data), Num)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} HashDigest)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  }
]