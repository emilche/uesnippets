[
  {
    "label": "EMetalGPUSemantics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalGPUSemantics"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "SDMARange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDMARange"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include<list> # include<map> enum EMetalGPUSemantics { EMetalGPUSemanticsMobile,EMetalGPUSemanticsTBDRDesktop,EMetalGPUSemanticsImmediateDesktop } ; const int32 MaxMetalSamplers = 1 6 ; struct FShaderCompilerEnvironment ; struct SDMARange { unsigned SourceCB ; unsigned SourceOffset ; unsigned Size ; unsigned DestCBIndex ; unsigned DestCBPrecision ; unsigned DestOffset ; bool)",
    "insertText": "operator(SDMARange const & Other)"
  },
  {
    "label": "SourceDestCBKey()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "SourceDestCBKey(SourceCB << 20) | (DestCBIndex << 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SDMARange Range = { SourceCB,SourceOffset,Size,DestCBIndex,DestCBPrecision,DestOffset } ; TDMARangeList& CBRanges = CBAllRanges [ SourceDestCBKey ] ;)",
    "insertText": "if(CBRanges.empty())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (CBRanges .)",
    "insertText": "push_back(Range)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} else { TDMARangeList::iterator Prev = CBRanges .)",
    "insertText": "end()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAdded = false ;)",
    "insertText": "for(auto Iter = CBRanges.begin(); Iter != CBRanges.end(); ++Iter)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (CBRanges .)",
    "insertText": "push_front(Range)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} else { CBRanges .)",
    "insertText": "insert(Iter, Range)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bAdded = true ; break ; } Prev = Iter ; })",
    "insertText": "if(!bAdded)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CBRanges.size() > 1)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Prev = CBRanges .)",
    "insertText": "begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(Prev->SourceOffset + Prev->Size == Iter->SourceOffset && Prev->DestOffset + Prev->Size == Iter->DestOffset)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (SDMARange Merged =* Prev ; Merged . Size = Prev -> Size + Iter -> Size ; NewCBRanges .)",
    "insertText": "pop_back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (NewCBRanges .)",
    "insertText": "push_back(Merged)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (+ + Iter ; NewCBRanges .)",
    "insertText": "insert(NewCBRanges.end(), Iter, CBRanges.end())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (bDirty = true ; break ; } } NewCBRanges .)",
    "insertText": "push_back(*Iter)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Prev = Iter ; } CBRanges .)",
    "insertText": "swap(NewCBRanges)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(bDirty)"
  }
]