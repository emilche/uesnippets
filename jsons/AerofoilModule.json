[
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FAerofoilSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VehicleUtility . h \" # include \" SimModule / SimulationModuleBase . h \" namespace Chaos { struct FAllInputs ; class FSimModuleTree ; enum class EAerofoil : uint8 { Fixed = 0,Wing,Rudder,Elevator } ; struct FAerofoilSettings {)",
    "insertText": "FAerofoilSettings() : Offset(FVector::ZeroVector) , ForceAxis(FVector(0.f, 0.f, 1.f)) , ControlRotationAxis(FVector(0.f, 1.f, 0.f)) , Area(5.0f) , Camber(3.0f) , MaxControlAngle(1.f) , StallAngle(16.0f) , Type(EAerofoil::Fixed) , LiftMultiplier(1.0f) , DragMultiplier(1.0f) , AnimationMagnitudeMultiplier(1.0f)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} FVector Offset ; FVector ForceAxis ; FVector ControlRotationAxis ; float Area ; float Camber ; float MaxControlAngle ; float StallAngle ; EAerofoil Type ; float LiftMultiplier ; float DragMultiplier ; float AnimationMagnitudeMultiplier ; } ; class FAerofoilSimModule : public ISimulationModuleBase,public TSimModuleSettings<FAerofoilSettings>,public TSimulationModuleTypeable<FAerofoilSimModule> { public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FAerofoilSimModule)"
  },
  {
    "label": "FAerofoilSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAerofoilSimModule(const FAerofoilSettings& Settings)"
  },
  {
    "label": "FAerofoilSimModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAerofoilSimModule()"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FModuleNetData>)",
    "insertText": "GenerateNetData(const int32 NodeArrayIndex)"
  },
  {
    "label": "IsBehaviourType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBehaviourType(eSimModuleTypeFlags InType)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Simulate(float DeltaTime, const FAllInputs& Inputs, FSimModuleTree& VehicleModuleSystem)"
  },
  {
    "label": "Animate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Animate(Chaos::FClusterUnionPhysicsProxy* Proxy)"
  },
  {
    "label": "SetDensityOfMedium()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDensityOfMedium(float InDensity)"
  },
  {
    "label": "SetControlSurface()",
    "kind": "Method",
    "detail": "Function (CurrentAirDensity = InDensity ; } void)",
    "insertText": "SetControlSurface(float CtrlSurfaceInput)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (ControlSurfaceAngle = CtrlSurfaceInput*)",
    "insertText": "Setup()"
  },
  {
    "label": "GetCenterOfLiftOffset()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetCenterOfLiftOffset()"
  },
  {
    "label": "GetForce()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetForce(const FVector& v, float Altitude, float DeltaTime)"
  },
  {
    "label": "CalcDynamicPressure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcDynamicPressure(float VelocitySqr, float InAltitude)"
  },
  {
    "label": "CalcCentreOfLift()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcCentreOfLift()"
  },
  {
    "label": "CalcDragCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcDragCoefficient(float InAngleOfAttack, float InControlSurfaceAngle)"
  },
  {
    "label": "CalcLiftCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLiftCoefficient(float InAngleOfAttack, float InControlSurfaceAngle)"
  },
  {
    "label": "CalcAngleOfAttackDegrees()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcAngleOfAttackDegrees(const FVector& UpAxis, const FVector& InAirflowVector)"
  }
]