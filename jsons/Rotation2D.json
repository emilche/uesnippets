[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Rotation2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rotation2D"
  },
  {
    "label": "Rotation2D()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ROTATION2D_H # define EIGEN_ROTATION2D_H namespace Eigen { namespace internal { template<_Scalar> struct traits<Rotation2D<_Scalar>> { typedef _Scalar Scalar ; } ; } template<_Scalar> class Rotation2D : public RotationBase<Rotation2D<_Scalar>,2> { typedef RotationBase<Rotation2D<_Scalar>,2> Base ; public : using Base::operator* ; enum { Dim = 2 } ; typedef _Scalar Scalar ; typedef Matrix<Scalar,2,1> Vector2 ; typedef Matrix<Scalar,2,2> Matrix2 ; protected : Scalar m_angle ; public : EIGEN_DEVICE_FUNC)",
    "insertText": "Rotation2D(const Scalar& a) : m_angle(a)"
  },
  {
    "label": "Rotation2D()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Rotation2D()"
  },
  {
    "label": "Rotation2D()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC)",
    "insertText": "Rotation2D(const MatrixBase<Derived>& m)"
  },
  {
    "label": "fromRotationMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fromRotationMatrix(m.derived())"
  },
  {
    "label": "angle()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "angle()"
  },
  {
    "label": "fmod()",
    "kind": "Method",
    "detail": "Function (Scalar tmp =)",
    "insertText": "fmod(m_angle,Scalar(2*EIGEN_PI))"
  },
  {
    "label": "smallestAngle()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "smallestAngle()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Rotation2D)",
    "insertText": "operator(const Rotation2D& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_angle + = other . m_angle ; return* this ; } EIGEN_DEVICE_FUNC Vector2)",
    "insertText": "operator(const Vector2& vec)"
  },
  {
    "label": "fromRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC Rotation2D&)",
    "insertText": "fromRotationMatrix(const MatrixBase<Derived>& m)"
  },
  {
    "label": "toRotationMatrix()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Matrix2)",
    "insertText": "toRotationMatrix()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Derived> EIGEN_DEVICE_FUNC Rotation2D&)",
    "insertText": "operator(const MatrixBase<Derived>& m)"
  },
  {
    "label": "slerp()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Rotation2D)",
    "insertText": "slerp(const Scalar& t, const Rotation2D& other)"
  },
  {
    "label": "Rotation2D()",
    "kind": "Method",
    "detail": "Function (Scalar dist =)",
    "insertText": "Rotation2D(other.m_angle-m_angle).smallestAngle()"
  },
  {
    "label": "cast()",
    "kind": "Method",
    "detail": "Function (} template<NewScalarType> EIGEN_DEVICE_FUNC internal::cast_return_type<Rotation2D,Rotation2D<NewScalarType>>::type)",
    "insertText": "cast()"
  },
  {
    "label": "Rotation2D()",
    "kind": "Method",
    "detail": "Function (} template<OtherScalarType> EIGEN_DEVICE_FUNC)",
    "insertText": "Rotation2D(const Rotation2D<OtherScalarType>& other)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (m_angle =)",
    "insertText": "Scalar(other.angle())"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Rotation2D)",
    "insertText": "Identity()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApprox(const Rotation2D& other, const typename NumTraits<Scalar>::Real& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "fromRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; typedef Rotation2D<float> Rotation2Df ; typedef Rotation2D<double> Rotation2Dd ; template<Scalar> template<Derived> EIGEN_DEVICE_FUNC Rotation2D<Scalar>& Rotation2D<Scalar)",
    "insertText": "fromRotationMatrix(const MatrixBase<Derived>& mat)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(atan2) EIGEN_STATIC_ASSERT(Derived::RowsAtCompileTime==2 && Derived::ColsAtCompileTime==2,YOU_MADE_A_PROGRAMMING_MISTAKE) m_angle = atan2(mat.coeff(1,0), mat.coeff(0,0))"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sin) EIGEN_USING_STD(cos) Scalar sinA = sin(m_angle)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (Scalar cosA =)",
    "insertText": "cos(m_angle)"
  }
]