[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SProjectLauncherArchivePage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherArchivePage"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Models / ProjectLauncherModel . h \" enum class ECheckBoxState : uint8 ; class SProjectLauncherArchivePage : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherArchivePage)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: ~SProjectLauncherArchivePage()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "HandleArchiveCheckedStateChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleArchiveCheckedStateChanged(ECheckBoxState CheckState)"
  },
  {
    "label": "HandleArchiveIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleArchiveIsChecked()"
  },
  {
    "label": "HandleArchiveVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleArchiveVisibility()"
  },
  {
    "label": "GetDirectoryPathText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDirectoryPathText()"
  },
  {
    "label": "HandleBrowseButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleBrowseButtonClicked()"
  },
  {
    "label": "IsDirectoryEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectoryEditable()"
  },
  {
    "label": "OnDirectoryTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  }
]