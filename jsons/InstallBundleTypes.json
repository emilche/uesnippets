[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInstallBundleSourceType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallBundleSourceType"
  },
  {
    "label": "FInstallBundleCombinedInstallState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleCombinedInstallState"
  },
  {
    "label": "FInstallBundleContentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleContentState"
  },
  {
    "label": "FInstallBundleCombinedContentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleCombinedContentState"
  },
  {
    "label": "FInstallBundleSourceInitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceInitInfo"
  },
  {
    "label": "FInstallBundleSourceAsyncInitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceAsyncInitInfo"
  },
  {
    "label": "FInstallBundleSourceUpdateBundleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceUpdateBundleInfo"
  },
  {
    "label": "FInstallBundleSourceUpdateBundleInfoResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceUpdateBundleInfoResult"
  },
  {
    "label": "FInstallBundleSourcePersistentBundleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourcePersistentBundleInfo"
  },
  {
    "label": "FInstallBundleSourceBundleInfoQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceBundleInfoQueryResult"
  },
  {
    "label": "FInstallBundleSourceUpdateContentResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceUpdateContentResultInfo"
  },
  {
    "label": "FInstallBundleSourceReleaseContentResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceReleaseContentResultInfo"
  },
  {
    "label": "FInstallBundleSourceProgress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourceProgress"
  },
  {
    "label": "FInstallBundleSourcePauseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleSourcePauseInfo"
  },
  {
    "label": "FInstallBundleCacheStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleCacheStats"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / EnumRange . h \" # include \" UObject / NameTypes . h \" # if !)",
    "insertText": "defined(WITH_PLATFORM_INSTALL_BUNDLE_SOURCE) #define WITH_PLATFORM_INSTALL_BUNDLE_SOURCE 0 #endif enum class UE_DEPRECATED(5.5, \"Use FInstallBundleSourceType\")"
  },
  {
    "label": "ENUM_RANGE_BY_COUNT()",
    "kind": "Method",
    "detail": "Function (Bulk,Launcher,BuildPatchServices,# if WITH_PLATFORM_INSTALL_BUNDLE_SOURCE Platform,# endif GameCustom,Streaming,Count,} ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "ENUM_RANGE_BY_COUNT(EInstallBundleSourceType, EInstallBundleSourceType::Count)"
  },
  {
    "label": "FInstallBundleSourceType()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS class FInstallBundleSourceType { private : FStringView NameStr ; public :)",
    "insertText": "FInstallBundleSourceType(FStringView InNameStr)"
  },
  {
    "label": "FInstallBundleSourceType()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FInstallBundleSourceType(EInstallBundleSourceType InLegacySourceType)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FStringView)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNameCStr()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetNameCStr()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInstallBundleSourceType Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FInstallBundleSourceType In)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } ; const TCHAR*)",
    "insertText": "LexToString(FInstallBundleSourceType Type)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleManagerInitState : int { NotInitialized,Failed,Succeeded } ; enum class EInstallBundleManagerInitResult : int { OK,BuildMetaDataNotFound,RemoteBuildMetaDataNotFound,BuildMetaDataDownloadError,BuildMetaDataParsingError,DistributionRootParseError,DistributionRootDownloadError,ManifestArchiveError,ManifestCreationError,ManifestDownloadError,BackgroundDownloadsIniDownloadError,NoInternetConnectionError,ConfigurationError,ClientPatchRequiredError,Count } ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleManagerInitResult Result)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleInstallState : int { NotInstalled,NeedsUpdate,UpToDate,Count,} ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleInstallState State)"
  },
  {
    "label": "GetAllBundlesHaveState()",
    "kind": "Method",
    "detail": "Function (struct FInstallBundleCombinedInstallState { TMap<FName,EInstallBundleInstallState> IndividualBundleStates ; bool)",
    "insertText": "GetAllBundlesHaveState(EInstallBundleInstallState State, TArrayView<const FName> ExcludedBundles = TArrayView<const FName>())"
  },
  {
    "label": "GetAnyBundleHasState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnyBundleHasState(EInstallBundleInstallState State, TArrayView<const FName> ExcludedBundles = TArrayView<const FName>())"
  },
  {
    "label": "ForceNoPatching()",
    "kind": "Method",
    "detail": "Function (} ; enum class EInstallBundleGetContentStateFlags : uint32 { None = 0,)",
    "insertText": "ForceNoPatching(1 << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EInstallBundleGetContentStateFlags)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FInstallBundleGetContentStateDelegate, FInstallBundleCombinedContentState)"
  },
  {
    "label": "EnqueuedBundles()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleRequestInfoFlags : int32 { None = 0,)",
    "insertText": "EnqueuedBundles(1 << 0), SkippedAlreadyMountedBundles = (1 << 1), SkippedAlreadyUpdatedBundles = (1 << 2), SkippedAlreadyReleasedBundles = (1 << 3), SkippedAlreadyRemovedBundles = (1 << 4), SkippedUnknownBundles = (1 << 5), SkippedInvalidBundles = (1 << 6), SkippedUnusableLanguageBundles = (1 << 7), SkippedBundlesDueToBundleSource = (1 << 8)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EInstallBundleRequestInfoFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleResult : uint32 { OK,FailedPrereqRequiresLatestClient,FailedPrereqRequiresLatestContent,FailedCacheReserve,InstallError,InstallerOutOfDiskSpaceError,ManifestArchiveError,ConnectivityError,UserCancelledError,InitializationError,InitializationPending,MetadataError,Count,} ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleResult Result)"
  },
  {
    "label": "CheckForCellularDataUsage()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleRequestFlags : uint32 { None = 0,)",
    "insertText": "CheckForCellularDataUsage(1 << 0), UseBackgroundDownloads = (1 << 1), SendNotificationIfDownloadCompletesInBackground = (1 << 2), ForceNoPatching = (1 << 3), TrackPersistentBundleStats = (1 << 4), SkipMount = (1 << 5), AsyncMount = (1 << 6)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EInstallBundleRequestFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (OK,ManifestArchiveError,UserCancelledError,MetadataError,Count,} ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleReleaseResult Result)"
  },
  {
    "label": "RemoveFilesIfPossible()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleReleaseRequestFlags : uint32 { None = 0,)",
    "insertText": "RemoveFilesIfPossible(1 << 0), ExplicitRemoveList = (1 << 1), SkipReleaseUnmountOnly = (1 << 2)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EInstallBundleReleaseRequestFlags)"
  },
  {
    "label": "OnCellularNetwork()",
    "kind": "Method",
    "detail": "Function (None = 0,)",
    "insertText": "OnCellularNetwork(1 << 0), NoInternetConnection = (1 << 1), UserPaused = (1 << 2)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EInstallBundlePauseFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleStatus : int { Requested,Updating,Finishing,Ready,Count,} ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleStatus Status)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundleManagerPatchCheckResult : uint32 { NoPatchRequired,ClientPatchRequired,ContentPatchRequired,NoLoggedInUser,PatchCheckFailure,Count,} ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleManagerPatchCheckResult EnumVal)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (enum class EInstallBundlePriority : uint8 { High,Normal,Low,Count } ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundlePriority Priority)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(EInstallBundlePriority& OutMode, const TCHAR* InBuffer)"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (struct FInstallBundleSourceInitInfo { EInstallBundleManagerInitResult Result = EInstallBundleManagerInitResult::OK ; bool bShouldUseFallbackSource = false ; } ; struct FInstallBundleSourceAsyncInitInfo : public FInstallBundleSourceInitInfo { } ; struct FInstallBundleSourceUpdateBundleInfo { FName BundleName ; FString BundleNameString ; EInstallBundlePriority Priority = EInstallBundlePriority::Low ; uint64 FullInstallSize = 0 ; uint64 InstallOverheadSize = 0 ; FDateTime LastAccessTime =)",
    "insertText": "MinValue()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (EInstallBundleInstallState BundleContentState = EInstallBundleInstallState::NotInstalled ; bool bIsCached = false ; bool bUseChunkDBs = false ; } ; struct FInstallBundleSourceUpdateBundleInfoResult { TMap<FName,FInstallBundleSourceUpdateBundleInfo> SourceBundleInfoMap ; } ; struct FInstallBundleSourcePersistentBundleInfo : FInstallBundleSourceUpdateBundleInfo { uint64 CurrentInstallSize = 0 ; bool bIsStartup = false ; bool bDoPatchCheck = false ; } ; struct FInstallBundleSourceBundleInfoQueryResult { TMap<FName,FInstallBundleSourcePersistentBundleInfo> SourceBundleInfoMap ; } ; enum class EInstallBundleSourceUpdateBundleInfoResult : uint8 { OK,NotInitailized,AlreadyMounted,AlreadyRequested,IllegalCacheStatus,Count,} ; const TCHAR*)",
    "insertText": "LexToString(EInstallBundleSourceUpdateBundleInfoResult Result)"
  },
  {
    "label": "DidBundleSourceDoWork()",
    "kind": "Method",
    "detail": "Function (bool bContentWasInstalled = false ; bool)",
    "insertText": "DidBundleSourceDoWork()"
  },
  {
    "label": "LanguageNotCurrent()",
    "kind": "Method",
    "detail": "Function (bool bContentWasRemoved = false ; } ; struct FInstallBundleSourceProgress { FName BundleName ; float Install_Percent = 0 ; } ; struct FInstallBundleSourcePauseInfo { FName BundleName ; EInstallBundlePauseFlags PauseFlags = EInstallBundlePauseFlags::None ; bool bDidPauseChange = false ; } ; enum class EInstallBundleSourceBundleSkipReason : uint32 { None = 0,)",
    "insertText": "LanguageNotCurrent(1 << 0), NotValid = (1 << 1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EInstallBundleSourceBundleSkipReason)"
  }
]