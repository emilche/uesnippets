[
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "FGameplayDebuggerCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCategory"
  },
  {
    "label": "UAISenseConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseConfig"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FActorPerceptionUpdateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPerceptionUpdateInfo"
  },
  {
    "label": "FActorPerceptionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPerceptionInfo"
  },
  {
    "label": "FActorPerceptionBlueprintInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPerceptionBlueprintInfo"
  },
  {
    "label": "UAIPerceptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionComponent"
  },
  {
    "label": "FStimulusToProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStimulusToProcess"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectKey . h \" # include \" Templates / SubclassOf . h \" # include \" Components / ActorComponent . h \" # include \" EngineDefines . h \" # include \" GenericTeamAgentInterface . h \" # include \" Perception / AIPerceptionTypes . h \" # include \" Perception / AISense . h \" # include \" Perception / AIPerceptionSystem . h \" # include \" AIPerceptionComponent . generated . h \" class AAIController ; class FGameplayDebuggerCategory ; class UAISenseConfig ; struct FVisualLogEntry ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FPerceptionUpdatedDelegate, const TArray<AActor*>&, UpdatedActors)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FActorPerceptionUpdatedDelegate, AActor*, Actor, FAIStimulus, Stimulus)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FActorPerceptionForgetUpdatedDelegate, AActor*, Actor)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType, meta = (DisplayName = \"Sensed Actor's Update Data\"))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(BlueprintReadWrite, Category = \"AI|Perception\")"
  },
  {
    "label": "FActorPerceptionUpdateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FActorPerceptionUpdateInfo()"
  },
  {
    "label": "FActorPerceptionUpdateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FActorPerceptionUpdateInfo(const int32 TargetId, const TWeakObjectPtr<AActor>& Target, const FAIStimulus& Stimulus)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FActorPerceptionInfoUpdatedDelegate, const FActorPerceptionUpdateInfo&, UpdateInfo)"
  },
  {
    "label": "FActorPerceptionInfo()",
    "kind": "Method",
    "detail": "Function (struct FActorPerceptionInfo { TWeakObjectPtr<AActor> Target ; TArray<FAIStimulus> LastSensedStimuli ; FAISenseID DominantSense ; uint32 bIsHostile : 1 ; uint32 bIsFriendly : 1 ;)",
    "insertText": "FActorPerceptionInfo(AActor* InTarget = nullptr) : Target(InTarget), DominantSense(FAISenseID::InvalidID()), bIsHostile(false), bIsFriendly(false)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (LastSensedStimuli .)",
    "insertText": "AddDefaulted(FAISenseID::GetSize())"
  },
  {
    "label": "GetLastStimulusLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetLastStimulusLocation(float* OptionalAge = nullptr)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Location(FAISystem::InvalidLocation)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float BestAge = FLT_MAX ; bool bBestWasSuccessfullySensed = false ;)",
    "insertText": "for(int32 Sense = 0; Sense < LastSensedStimuli.Num(); ++Sense)"
  },
  {
    "label": "GetAge()",
    "kind": "Method",
    "detail": "Function (const float Age = LastSensedStimuli [ Sense ] .)",
    "insertText": "GetAge()"
  },
  {
    "label": "WasSuccessfullySensed()",
    "kind": "Method",
    "detail": "Function (const bool bWasSuccessfullySensed = LastSensedStimuli [ Sense ] .)",
    "insertText": "WasSuccessfullySensed()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BestAge = Age ; Location = LastSensedStimuli [ Sense ] . StimulusLocation ; bBestWasSuccessfullySensed = bWasSuccessfullySensed ;)",
    "insertText": "if(Sense == DominantSense && bWasSuccessfullySensed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "if(OptionalAge)"
  },
  {
    "label": "HasAnyKnownStimulus()",
    "kind": "Method",
    "detail": "Function (* OptionalAge = BestAge ; } return Location ; } bool)",
    "insertText": "HasAnyKnownStimulus()"
  },
  {
    "label": "GetReceiverLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetReceiverLocation(const FAISenseID Sense)"
  },
  {
    "label": "HasKnownStimulusOfSense()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasKnownStimulusOfSense(const FAISenseID Sense)"
  },
  {
    "label": "IsSenseActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSenseActive(const FAISenseID Sense)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Merge(const FActorPerceptionInfo& Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType, meta = (DisplayName = \"Sensed Actor's Data\"))"
  },
  {
    "label": "FActorPerceptionBlueprintInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FActorPerceptionBlueprintInfo() : Target(nullptr), bIsHostile(false), bIsFriendly(false)"
  },
  {
    "label": "FActorPerceptionBlueprintInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActorPerceptionBlueprintInfo(const FActorPerceptionInfo& Info)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(ClassGroup=AI, HideCategories=(Activation, Collision), meta=(BlueprintSpawnableComponent), config=Game, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "FStimulusToProcess()",
    "kind": "Method",
    "detail": "Function (FPerceptionChannelAllowList PerceptionFilter ; private : FPerceptionListenerID PerceptionListenerId ; FActorPerceptionContainer PerceptualData ; protected : struct FStimulusToProcess { TObjectKey<AActor> Source ; FAIStimulus Stimulus ;)",
    "insertText": "FStimulusToProcess(AActor* InSource, const FAIStimulus& InStimulus) : Source(InSource), Stimulus(InStimulus)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FStimulusToProcess> StimuliToProcess ; TArray<float> MaxActiveAge ; private : uint32 bForgetStaleActors : 1 ; uint32 bCleanedUp : 1 ; public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "GetLocationAndDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocationAndDirection(FVector& Location, FVector& Direction)"
  },
  {
    "label": "GetBodyActor()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetBodyActor()"
  },
  {
    "label": "GetMutableBodyActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetMutableBodyActor()"
  },
  {
    "label": "GetPerceptualDataIterator()",
    "kind": "Method",
    "detail": "Function (} FActorPerceptionContainer::TIterator)",
    "insertText": "GetPerceptualDataIterator()"
  },
  {
    "label": "GetPerceptualDataConstIterator()",
    "kind": "Method",
    "detail": "Function (} FActorPerceptionContainer::TConstIterator)",
    "insertText": "GetPerceptualDataConstIterator()"
  },
  {
    "label": "GetHostileActors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetHostileActors(TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetHostileActorsBySense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHostileActorsBySense(TSubclassOf<UAISense> SenseToFilterBy, TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetFilteredActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilteredActors(const TFunctionRef<bool(const FActorPerceptionInfo&)>& Predicate, TArray<AActor*>& OutActors)"
  },
  {
    "label": "GetFreshestTrace()",
    "kind": "Method",
    "detail": "Function (const FActorPerceptionInfo*)",
    "insertText": "GetFreshestTrace(const FAISenseID Sense)"
  },
  {
    "label": "SetDominantSense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDominantSense(TSubclassOf<UAISense> InDominantSense)"
  },
  {
    "label": "GetSenseConfig()",
    "kind": "Method",
    "detail": "Function (const UAISenseConfig*)",
    "insertText": "GetSenseConfig(const FAISenseID& SenseID)"
  },
  {
    "label": "GetSenseConfig()",
    "kind": "Method",
    "detail": "Function (template<T,= std::enable_if_t<std::is_base_of_v<UAISenseConfig,T>>> T*)",
    "insertText": "GetSenseConfig()"
  },
  {
    "label": "GetSensesConfigIterator()",
    "kind": "Method",
    "detail": "Function (typedef TArray<UAISenseConfig*>::TConstIterator TAISenseConfigConstIterator ; TAISenseConfigConstIterator)",
    "insertText": "GetSensesConfigIterator()"
  },
  {
    "label": "UpdatePerceptionAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePerceptionAllowList(const FAISenseID Channel, const bool bNewValue)"
  },
  {
    "label": "UpdatePerceptionAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePerceptionAllowList(Channel, bNewValue)"
  },
  {
    "label": "RegisterStimulus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterStimulus(AActor* Source, const FAIStimulus& Stimulus)"
  },
  {
    "label": "ProcessStimuli()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessStimuli()"
  },
  {
    "label": "AgeStimuli()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AgeStimuli(const float ConstPerceptionAgingRate)"
  },
  {
    "label": "ForgetActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetActor(AActor* ActorToForget)"
  },
  {
    "label": "GetYoungestStimulusAge()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetYoungestStimulusAge(const AActor& Source)"
  },
  {
    "label": "HasAnyActiveStimulus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyActiveStimulus(const AActor& Source)"
  },
  {
    "label": "HasAnyCurrentStimulus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyCurrentStimulus(const AActor& Source)"
  },
  {
    "label": "HasActiveStimulus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveStimulus(const AActor& Source, const FAISenseID Sense)"
  },
  {
    "label": "DescribeSelfToGameplayDebugger()",
    "kind": "Method",
    "detail": "Function (# if WITH_GAMEPLAY_DEBUGGER_MENU void)",
    "insertText": "DescribeSelfToGameplayDebugger(FGameplayDebuggerCategory* DebuggerCategory)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# endif # if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(FVisualLogEntry* Snapshot)"
  },
  {
    "label": "GetPerceptualData()",
    "kind": "Method",
    "detail": "Function (protected : FActorPerceptionContainer&)",
    "insertText": "GetPerceptualData()"
  },
  {
    "label": "RemoveDeadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeadData()"
  },
  {
    "label": "RefreshStimulus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshStimulus(FAIStimulus& StimulusStore, const FAIStimulus& NewStimulus)"
  },
  {
    "label": "HandleExpiredStimulus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExpiredStimulus(FAIStimulus& StimulusStore)"
  },
  {
    "label": "RegisterSenseConfig()",
    "kind": "Method",
    "detail": "Function (private : UAIPerceptionSystem ; void)",
    "insertText": "RegisterSenseConfig(const UAISenseConfig& SenseConfig, UAIPerceptionSystem& AIPerceptionSys)"
  },
  {
    "label": "StoreListenerId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreListenerId(const FPerceptionListenerID InListenerId)"
  },
  {
    "label": "SetMaxStimulusAge()",
    "kind": "Method",
    "detail": "Function (PerceptionListenerId = InListenerId ; } void)",
    "insertText": "SetMaxStimulusAge(const FAISenseID SenseId, float MaxAge)"
  }
]