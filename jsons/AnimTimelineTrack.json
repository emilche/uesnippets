[
  {
    "label": "SAnimOutlinerItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimOutlinerItem"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EVisibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EVisibility"
  },
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "UAnimTimelineClipboardContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimTimelineClipboardContent"
  },
  {
    "label": "FAnimTrackPadding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrackPadding"
  },
  {
    "label": "FAnimTimelineTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack"
  },
  {
    "label": "FAnimTrackPadding()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnimTimeline / AnimModel . h \" class SAnimOutlinerItem ; class SWidget ; enum class ECheckBoxState : uint8 ; struct EVisibility ; class FAnimModel ; class FMenuBuilder ; class SBorder ; class SHorizontalBox ; class UAnimTimelineClipboardContent ; struct FAnimTrackPadding {)",
    "insertText": "FAnimTrackPadding(float InUniform) : Top(InUniform) , Bottom(InUniform)"
  },
  {
    "label": "FAnimTrackPadding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimTrackPadding(float InTop, float InBottom) : Top(InTop) , Bottom(InBottom)"
  },
  {
    "label": "Combined()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Combined()"
  },
  {
    "label": "IsKindOf()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "IsKindOf(const FName& InTypeName)"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} \\ template<Type> bool)",
    "insertText": "IsA()"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (} \\ template<Type> const Type&)",
    "insertText": "As()"
  },
  {
    "label": "ANIMTIMELINE_DECLARE_TRACK()",
    "kind": "Method",
    "detail": "Function (} \\ private : \\ const FName ; # define)",
    "insertText": "ANIMTIMELINE_DECLARE_TRACK(ClassName, BaseClassName) \\ public: \\ static const FName& GetStaticTypeName()"
  },
  {
    "label": "ANIMTIMELINE_IMPLEMENT_TRACK()",
    "kind": "Method",
    "detail": "Function (} \\ private : \\ const FName ; # define)",
    "insertText": "ANIMTIMELINE_IMPLEMENT_TRACK(ClassName) \\ const FName ClassName::TypeName = TEXT(#ClassName)"
  },
  {
    "label": "ANIMTIMELINE_DECLARE_BASE_TRACK()",
    "kind": "Method",
    "detail": "Function (class FAnimTimelineTrack : public TSharedFromThis<FAnimTimelineTrack> {)",
    "insertText": "ANIMTIMELINE_DECLARE_BASE_TRACK(FAnimTimelineTrack)"
  },
  {
    "label": "FAnimTimelineTrack()",
    "kind": "Method",
    "detail": "Function (public : const float OutlinerRightPadding ;)",
    "insertText": "FAnimTimelineTrack(const FText& InDisplayName, const FText& InToolTipText, const TSharedPtr<FAnimModel>& InModel, bool bInIsHeaderTrack = false) : Model(InModel) , DisplayName(InDisplayName) , ToolTipText(InToolTipText) , Padding(0.0f) , Height(24.0f) , bIsHovered(false) , bIsVisible(true) , bIsExpanded(true) , bIsHeaderTrack(bInIsHeaderTrack)"
  },
  {
    "label": "FAnimTimelineTrack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAnimTimelineTrack()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedRef<FAnimTimelineTrack>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FAnimModel>)",
    "insertText": "GetModel()"
  },
  {
    "label": "Traverse_ChildFirst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Traverse_ChildFirst(const TFunctionRef<bool(FAnimTimelineTrack&)>& InPredicate, bool bIncludeThisTrack = true)"
  },
  {
    "label": "Traverse_ParentFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Traverse_ParentFirst(const TFunctionRef<bool(FAnimTimelineTrack&)>& InPredicate, bool bIncludeThisTrack = true)"
  },
  {
    "label": "TraverseVisible_ChildFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TraverseVisible_ChildFirst(const TFunctionRef<bool(FAnimTimelineTrack&)>& InPredicate, bool bIncludeThisTrack = true)"
  },
  {
    "label": "TraverseVisible_ParentFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TraverseVisible_ParentFirst(const TFunctionRef<bool(FAnimTimelineTrack&)>& InPredicate, bool bIncludeThisTrack = true)"
  },
  {
    "label": "GenerateContainerWidgetForOutliner()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateContainerWidgetForOutliner(const TSharedRef<SAnimOutlinerItem>& InRow)"
  },
  {
    "label": "GenerateContainerWidgetForTimeline()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateContainerWidgetForTimeline()"
  },
  {
    "label": "AddToContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToContextMenu(FMenuBuilder& InMenuBuilder, TSet<FName>& InOutExistingMenuTypes)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetPadding()",
    "kind": "Method",
    "detail": "Function (Height = InHeight ; } const FAnimTrackPadding&)",
    "insertText": "GetPadding()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bIsHovered = bInIsHovered ; } bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsExpanded()",
    "kind": "Method",
    "detail": "Function (bIsVisible = bInIsVisible ; } bool)",
    "insertText": "IsExpanded()"
  },
  {
    "label": "SupportsSelection()",
    "kind": "Method",
    "detail": "Function (bIsExpanded = bInIsExpanded ; } bool)",
    "insertText": "SupportsSelection()"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "GenerateStandardOutlinerWidget()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "GenerateStandardOutlinerWidget(const TSharedRef<SAnimOutlinerItem>& InRow, bool bWithLabelText, TSharedPtr<SBorder>& OutOuterBorder, TSharedPtr<SHorizontalBox>& OutInnerHorizontalBox)"
  },
  {
    "label": "GetMinInput()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "GetMinInput()"
  },
  {
    "label": "GetViewMinInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMinInput()"
  },
  {
    "label": "GetViewMaxInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewMaxInput()"
  },
  {
    "label": "GetScrubValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrubValue()"
  },
  {
    "label": "SelectObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectObjects(const TArray<UObject*>& SelectedItems)"
  },
  {
    "label": "OnSetInputViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetInputViewRange(float ViewMin, float ViewMax)"
  }
]