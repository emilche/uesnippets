[
  {
    "label": "File",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "File"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Provider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Provider"
  },
  {
    "label": "ScopedEnabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedEnabler"
  },
  {
    "label": "ScopedTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTrace"
  },
  {
    "label": "SCOPED_FILE_TRACE_WITH_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_TRACING_H_ # define BASE_FILES_FILE_TRACING_H_ # include<stdint . h> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # define FILE_TRACING_PREFIX \" File \" # define)",
    "insertText": "SCOPED_FILE_TRACE_WITH_SIZE(name, size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(FileTracing::IsCategoryEnabled()) \\ scoped_file_trace.Initialize(FILE_TRACING_PREFIX \"::\" name, this, size) #define SCOPED_FILE_TRACE(name) SCOPED_FILE_TRACE_WITH_SIZE(name, 0)"
  },
  {
    "label": "IsCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (class File ; class FilePath ; class BASE_EXPORT FileTracing { public : bool)",
    "insertText": "IsCategoryEnabled()"
  },
  {
    "label": "Provider()",
    "kind": "Method",
    "detail": "Function (class Provider { public : ~)",
    "insertText": "Provider()"
  },
  {
    "label": "FileTracingCategoryIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileTracingCategoryIsEnabled()"
  },
  {
    "label": "FileTracingEnable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileTracingEnable(const void* id)"
  },
  {
    "label": "FileTracingDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileTracingDisable(const void* id)"
  },
  {
    "label": "FileTracingEventBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileTracingEventBegin(const char* name, const void* id, const FilePath& path, int64_t size)"
  },
  {
    "label": "FileTracingEventEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileTracingEventEnd(const char* name, const void* id)"
  },
  {
    "label": "SetProvider()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetProvider(Provider* provider)"
  },
  {
    "label": "ScopedEnabler()",
    "kind": "Method",
    "detail": "Function (class ScopedEnabler { public :)",
    "insertText": "ScopedEnabler()"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (} ; class ScopedTrace { public :)",
    "insertText": "ScopedTrace()"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedTrace(const ScopedTrace&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedTrace&)",
    "insertText": "operator(const ScopedTrace&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const char* name, const File* file, int64_t size)"
  },
  {
    "label": "FileTracing()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<const void> id_ = nullptr ; const char* name_ ; } ;)",
    "insertText": "FileTracing(const FileTracing&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileTracing&)",
    "insertText": "operator(const FileTracing&)"
  }
]