[
  {
    "label": "PCScanScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PCScanScheduler"
  },
  {
    "label": "QuarantineData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuarantineData"
  },
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "PartitionAllocPCScanMUAwareTaskBasedBackendTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionAllocPCScanMUAwareTaskBasedBackendTest"
  },
  {
    "label": "QuarantineData()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_PCSCAN_SCHEDULING_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_PCSCAN_SCHEDULING_H_ # include<atomic> # include<cstdint> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / thread_annotations . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / time / time . h \" # include \" base / allocator / partition_allocator / partition_lock . h \" namespace partition_alloc::internal { class PCScanScheduler ; struct QuarantineData final { size_t kQuarantineSizeMinLimit = 1* 1 0 2 4* 1 0 2 4 ;)",
    "insertText": "QuarantineData()"
  },
  {
    "label": "MinimumScanningThresholdReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MinimumScanningThresholdReached()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (} std::atomic<size_t> current_size { 0 u } ; std::atomic<size_t> size_limit { kQuarantineSizeMinLimit } ; std::atomic<size_t> epoch { 0 u } ; } ; class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "PCScanSchedulingBackend()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PCScanSchedulingBackend(PCScanScheduler&)"
  },
  {
    "label": "PCScanSchedulingBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCScanSchedulingBackend(const PCScanSchedulingBackend&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PCScanSchedulingBackend&)",
    "insertText": "operator(const PCScanSchedulingBackend&)"
  },
  {
    "label": "DisableScheduling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableScheduling()"
  },
  {
    "label": "EnableScheduling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableScheduling()"
  },
  {
    "label": "is_scheduling_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_scheduling_enabled()"
  },
  {
    "label": "GetQuarantineData()",
    "kind": "Method",
    "detail": "Function (} QuarantineData&)",
    "insertText": "GetQuarantineData()"
  },
  {
    "label": "LimitReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LimitReached()"
  },
  {
    "label": "ScanStarted()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ScanStarted()"
  },
  {
    "label": "UpdateScheduleAfterScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScheduleAfterScan(size_t survived_bytes, base::TimeDelta time_spent_in_scan, size_t heap_size)"
  },
  {
    "label": "UpdateDelayedSchedule()",
    "kind": "Method",
    "detail": "Function (base::TimeDelta)",
    "insertText": "UpdateDelayedSchedule()"
  },
  {
    "label": "SchedulingDisabled()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SchedulingDisabled()"
  },
  {
    "label": "NeedsToImmediatelyScan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsToImmediatelyScan()"
  },
  {
    "label": "LimitBackend()",
    "kind": "Method",
    "detail": "Function (public : double kQuarantineSizeFraction = 0 . 1 ;)",
    "insertText": "LimitBackend(PCScanScheduler&)"
  },
  {
    "label": "UpdateScheduleAfterScan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScheduleAfterScan(size_t, base::TimeDelta, size_t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (public : using ScheduleDelayedScanFunc =)",
    "insertText": "void(*)(int64_t delay_in_microseconds)"
  },
  {
    "label": "MUAwareTaskBasedBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MUAwareTaskBasedBackend(PCScanScheduler&, ScheduleDelayedScanFunc)"
  },
  {
    "label": "MUAwareTaskBasedBackend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MUAwareTaskBasedBackend()"
  },
  {
    "label": "PA_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const ScheduleDelayedScanFunc schedule_delayed_scan_ ; Lock scheduler_lock_ ; size_t hard_limit_)",
    "insertText": "PA_GUARDED_BY(scheduler_lock_)"
  },
  {
    "label": "PCScanScheduler()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PCScanScheduler()"
  },
  {
    "label": "PCScanScheduler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCScanScheduler(const PCScanScheduler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PCScanScheduler&)",
    "insertText": "operator(const PCScanScheduler&)"
  },
  {
    "label": "AccountFreed()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "AccountFreed(size_t bytes)"
  },
  {
    "label": "epoch()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "epoch()"
  },
  {
    "label": "SetNewSchedulingBackend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewSchedulingBackend(PCScanSchedulingBackend&)"
  },
  {
    "label": "scheduling_backend()",
    "kind": "Method",
    "detail": "Function (PCScanSchedulingBackend&)",
    "insertText": "scheduling_backend()"
  },
  {
    "label": "PCScanSchedulingBackend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCScanSchedulingBackend(PCScanScheduler& scheduler) : scheduler_(scheduler)"
  },
  {
    "label": "AccountFreed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AccountFreed(size_t size)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (const size_t size_before = quarantine_data_ . current_size .)",
    "insertText": "fetch_add(size, std::memory_order_relaxed)"
  }
]