[
  {
    "label": "ByteSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ByteSink"
  },
  {
    "label": "BytesTrieBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BytesTrieBuilder"
  },
  {
    "label": "CharString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharString"
  },
  {
    "label": "UVector32",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector32"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "State",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "State"
  },
  {
    "label": "BytesTrie",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BytesTrie"
  },
  {
    "label": "BytesTrie()",
    "kind": "Method",
    "detail": "Function (# ifndef __BYTESTRIE_H__ # define __BYTESTRIE_H__ # include \" unicode / utypes . h \" # include \" unicode / stringpiece . h \" # include \" unicode / uobject . h \" # include \" unicode / ustringtrie . h \" U_NAMESPACE_BEGIN class ByteSink ; class BytesTrieBuilder ; class CharString ; class UVector32 ; class BytesTrie : public UMemory { public :)",
    "insertText": "BytesTrie(const void *trieBytes) : ownedArray_(NULL), bytes_(static_cast<const uint8_t *>(trieBytes)), pos_(bytes_), remainingMatchLength_(-1)"
  },
  {
    "label": "BytesTrie()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BytesTrie()"
  },
  {
    "label": "BytesTrie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BytesTrie(const BytesTrie &other) : ownedArray_(NULL), bytes_(other.bytes_), pos_(other.pos_), remainingMatchLength_(other.remainingMatchLength_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} BytesTrie&)",
    "insertText": "reset()"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (pos_ = bytes_ ; remainingMatchLength_ = - 1 ; return* this ; } class State : public UMemory { public :)",
    "insertText": "State()"
  },
  {
    "label": "saveState()",
    "kind": "Method",
    "detail": "Function (bytes = NULL ; } private : class BytesTrie ; const uint8_t* bytes ; const uint8_t* pos ; int32_t remainingMatchLength ; } ; const BytesTrie&)",
    "insertText": "saveState(State &state)"
  },
  {
    "label": "resetToState()",
    "kind": "Method",
    "detail": "Function (state . bytes = bytes_ ; state . pos = pos_ ; state . remainingMatchLength = remainingMatchLength_ ; return* this ; } BytesTrie&)",
    "insertText": "resetToState(const State &state)"
  },
  {
    "label": "current()",
    "kind": "Method",
    "detail": "Function (pos_ = state . pos ; remainingMatchLength_ = state . remainingMatchLength ; } return* this ; } UStringTrieResult)",
    "insertText": "current()"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (UStringTrieResult)",
    "insertText": "first(int32_t inByte)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (remainingMatchLength_ = - 1 ;)",
    "insertText": "if(inByte<0)"
  },
  {
    "label": "nextImpl()",
    "kind": "Method",
    "detail": "Function (inByte + = 0 x100 ; } return)",
    "insertText": "nextImpl(bytes_, inByte)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} UStringTrieResult)",
    "insertText": "next(int32_t inByte)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (UStringTrieResult)",
    "insertText": "next(const char *s, int32_t length)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getValue()"
  },
  {
    "label": "readValue()",
    "kind": "Method",
    "detail": "Function (const uint8_t* pos = pos_ ; int32_t leadByte =* pos + + ; return)",
    "insertText": "readValue(pos, leadByte>>1)"
  },
  {
    "label": "hasUniqueValue()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "hasUniqueValue(int32_t &uniqueValue)"
  },
  {
    "label": "findUniqueValue()",
    "kind": "Method",
    "detail": "Function (const uint8_t* pos = pos_ ; return pos ! = NULL&&)",
    "insertText": "findUniqueValue(pos+remainingMatchLength_+1, FALSE, uniqueValue)"
  },
  {
    "label": "getNextBytes()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getNextBytes(ByteSink &out)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (class Iterator : public UMemory { public :)",
    "insertText": "Iterator(const void *trieBytes, int32_t maxStringLength, UErrorCode &errorCode)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterator(const BytesTrie &trie, int32_t maxStringLength, UErrorCode &errorCode)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Iterator()"
  },
  {
    "label": "hasNext()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasNext()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "next(UErrorCode &errorCode)"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "getString()"
  },
  {
    "label": "branchNext()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "branchNext(const uint8_t *pos, int32_t length, UErrorCode &errorCode)"
  },
  {
    "label": "BytesTrie()",
    "kind": "Method",
    "detail": "Function (const uint8_t* bytes_ ; const uint8_t* pos_ ; const uint8_t* initialPos_ ; int32_t remainingMatchLength_ ; int32_t initialRemainingMatchLength_ ; CharString* str_ ; int32_t maxLength_ ; int32_t value_ ; UVector32* stack_ ; } ; private : class BytesTrieBuilder ;)",
    "insertText": "BytesTrie(void *adoptBytes, const void *trieBytes) : ownedArray_(static_cast<uint8_t *>(adoptBytes)), bytes_(static_cast<const uint8_t *>(trieBytes)), pos_(bytes_), remainingMatchLength_(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BytesTrie&)",
    "insertText": "operator(const BytesTrie &other)"
  },
  {
    "label": "stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stop()"
  },
  {
    "label": "readValue()",
    "kind": "Method",
    "detail": "Function (pos_ = NULL ; } int32_t)",
    "insertText": "readValue(const uint8_t *pos, int32_t leadByte)"
  },
  {
    "label": "skipValue()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "skipValue(const uint8_t *pos, int32_t leadByte)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + pos ; } else)",
    "insertText": "if(leadByte<(kFourByteValueLead<<1))"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (pos + = 2 ; } else {)",
    "insertText": "pos((leadByte>>1)&1)"
  },
  {
    "label": "skipValue()",
    "kind": "Method",
    "detail": "Function (} } return pos ; } const uint8_t*)",
    "insertText": "skipValue(const uint8_t *pos)"
  },
  {
    "label": "skipValue()",
    "kind": "Method",
    "detail": "Function (int32_t leadByte =* pos + + ; return)",
    "insertText": "skipValue(pos, leadByte)"
  },
  {
    "label": "jumpByDelta()",
    "kind": "Method",
    "detail": "Function (} const uint8_t*)",
    "insertText": "jumpByDelta(const uint8_t *pos)"
  },
  {
    "label": "skipDelta()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "skipDelta(const uint8_t *pos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32_t delta =* pos + + ;)",
    "insertText": "if(delta>=kMinTwoByteDeltaLead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + pos ; } else)",
    "insertText": "if(delta<kFourByteDeltaLead)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (pos + = 2 ; } else {)",
    "insertText": "pos(delta&1)"
  },
  {
    "label": "valueResult()",
    "kind": "Method",
    "detail": "Function (} } return pos ; } UStringTrieResult)",
    "insertText": "valueResult(int32_t node)"
  },
  {
    "label": "branchNext()",
    "kind": "Method",
    "detail": "Function (} UStringTrieResult)",
    "insertText": "branchNext(const uint8_t *pos, int32_t length, int32_t inByte)"
  },
  {
    "label": "nextImpl()",
    "kind": "Method",
    "detail": "Function (UStringTrieResult)",
    "insertText": "nextImpl(const uint8_t *pos, int32_t inByte)"
  },
  {
    "label": "findUniqueValueFromBranch()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "findUniqueValueFromBranch(const uint8_t *pos, int32_t length, UBool haveUniqueValue, int32_t &uniqueValue)"
  },
  {
    "label": "findUniqueValue()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "findUniqueValue(const uint8_t *pos, UBool haveUniqueValue, int32_t &uniqueValue)"
  },
  {
    "label": "getNextBranchBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNextBranchBytes(const uint8_t *pos, int32_t length, ByteSink &out)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "append(ByteSink &out, int c)"
  },
  {
    "label": "kMinTwoByteValueLead()",
    "kind": "Method",
    "detail": "Function (const int32_t kMaxBranchLinearSubNodeLength = 5 ; const int32_t kMinLinearMatch = 0 x10 ; const int32_t kMaxLinearMatchLength = 0 x10 ; const int32_t kMinValueLead = kMinLinearMatch + kMaxLinearMatchLength ; const int32_t kValueIsFinal = 1 ; const int32_t kMinOneByteValueLead = kMinValueLead / 2 ; const int32_t kMaxOneByteValue = 0 x40 ; const int32_t kMinTwoByteValueLead = kMinOneByteValueLead + kMaxOneByteValue + 1 ; const int32_t kMaxTwoByteValue = 0 x1aff ; const int32_t kMinThreeByteValueLead =)",
    "insertText": "kMinTwoByteValueLead(kMaxTwoByteValue>>8)"
  },
  {
    "label": "kMaxThreeByteValue()",
    "kind": "Method",
    "detail": "Function (const int32_t kFourByteValueLead = 0 x7e ; const int32_t)",
    "insertText": "kMaxThreeByteValue((kFourByteValueLead-kMinThreeByteValueLead)<<16)"
  },
  {
    "label": "kMaxTwoByteDelta()",
    "kind": "Method",
    "detail": "Function (const int32_t kFiveByteValueLead = 0 x7f ; const int32_t kMaxOneByteDelta = 0 xbf ; const int32_t kMinTwoByteDeltaLead = kMaxOneByteDelta + 1 ; const int32_t kMinThreeByteDeltaLead = 0 xf0 ; const int32_t kFourByteDeltaLead = 0 xfe ; const int32_t kFiveByteDeltaLead = 0 xff ; const int32_t)",
    "insertText": "kMaxTwoByteDelta((kMinThreeByteDeltaLead-kMinTwoByteDeltaLead)<<8)"
  },
  {
    "label": "kMaxThreeByteDelta()",
    "kind": "Method",
    "detail": "Function (const int32_t)",
    "insertText": "kMaxThreeByteDelta((kFourByteDeltaLead-kMinThreeByteDeltaLead)<<16)"
  }
]