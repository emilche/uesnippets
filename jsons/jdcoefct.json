[
  {
    "label": "jpeg_d_coef_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_d_coef_controller"
  },
  {
    "label": "LOCAL()",
    "kind": "Method",
    "detail": "Function (# define JPEG_INTERNALS # include \" jpeglib . h \" # ifndef D_PROGRESSIVE_SUPPORTED # undef BLOCK_SMOOTHING_SUPPORTED # endif typedef struct { struct jpeg_d_coef_controller pub ; JDIMENSION MCU_ctr ; int MCU_vert_offset ; int MCU_rows_per_iMCU_row ; JBLOCKROW MCU_buffer [ D_MAX_BLOCKS_IN_MCU ] ; JCOEF* workspace ; # ifdef D_MULTISCAN_FILES_SUPPORTED jvirt_barray_ptr whole_image [ MAX_COMPONENTS ] ; # endif # ifdef BLOCK_SMOOTHING_SUPPORTED int* coef_bits_latch ; # define SAVED_COEFS 1 0 # endif } my_coef_controller ; typedef my_coef_controller* my_coef_ptr ;)",
    "insertText": "LOCAL(void) start_iMCU_row(j_decompress_ptr cinfo)"
  },
  {
    "label": "coef()",
    "kind": "Method",
    "detail": "Function (coef)",
    "insertText": "coef(my_coef_ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor)",
    "insertText": "if(cinfo->input_iMCU_row < (cinfo->total_iMCU_rows - 1))"
  }
]