[
  {
    "label": "UNumberUnitWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberUnitWidth"
  },
  {
    "label": "UNumberGroupingStrategy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberGroupingStrategy"
  },
  {
    "label": "UNumberSignDisplay",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberSignDisplay"
  },
  {
    "label": "UNumberDecimalSeparatorDisplay",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UNumberDecimalSeparatorDisplay"
  },
  {
    "label": "UNumberFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UNumberFormatter"
  },
  {
    "label": "UFormattedNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UFormattedNumber"
  },
  {
    "label": "unumf_openForSkeletonAndLocale()",
    "kind": "Method",
    "detail": "Function (# include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # ifndef __UNUMBERFORMATTER_H__ # define __UNUMBERFORMATTER_H__ # include \" unicode / parseerr . h \" # include \" unicode / ufieldpositer . h \" # include \" unicode / umisc . h \" # include \" unicode / uformattedvalue . h \" # ifndef typedef enum UNumberUnitWidth { UNUM_UNIT_WIDTH_NARROW,UNUM_UNIT_WIDTH_SHORT,UNUM_UNIT_WIDTH_FULL_NAME,UNUM_UNIT_WIDTH_ISO_CODE,UNUM_UNIT_WIDTH_HIDDEN,UNUM_UNIT_WIDTH_COUNT } UNumberUnitWidth ; # endif # ifndef typedef enum UNumberGroupingStrategy { UNUM_GROUPING_OFF,UNUM_GROUPING_MIN2,UNUM_GROUPING_AUTO,UNUM_GROUPING_ON_ALIGNED,UNUM_GROUPING_THOUSANDS # ifndef,UNUM_GROUPING_COUNT # endif } UNumberGroupingStrategy ; # endif # ifndef typedef enum UNumberSignDisplay { UNUM_SIGN_AUTO,UNUM_SIGN_ALWAYS,UNUM_SIGN_NEVER,UNUM_SIGN_ACCOUNTING,UNUM_SIGN_ACCOUNTING_ALWAYS,UNUM_SIGN_EXCEPT_ZERO,UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO,UNUM_SIGN_COUNT } UNumberSignDisplay ; # endif # ifndef typedef enum UNumberDecimalSeparatorDisplay { UNUM_DECIMAL_SEPARATOR_AUTO,UNUM_DECIMAL_SEPARATOR_ALWAYS,UNUM_DECIMAL_SEPARATOR_COUNT } UNumberDecimalSeparatorDisplay ; # endif struct UNumberFormatter ; typedef struct UNumberFormatter UNumberFormatter ; struct UFormattedNumber ; typedef struct UFormattedNumber UFormattedNumber ; U_STABLE UNumberFormatter* U_EXPORT2)",
    "insertText": "unumf_openForSkeletonAndLocale(const UChar* skeleton, int32_t skeletonLen, const char* locale, UErrorCode* ec)"
  },
  {
    "label": "unumf_openForSkeletonAndLocaleWithError()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DRAFT UNumberFormatter* U_EXPORT2)",
    "insertText": "unumf_openForSkeletonAndLocaleWithError(const UChar* skeleton, int32_t skeletonLen, const char* locale, UParseError* perror, UErrorCode* ec)"
  },
  {
    "label": "unumf_openResult()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE UFormattedNumber* U_EXPORT2)",
    "insertText": "unumf_openResult(UErrorCode* ec)"
  },
  {
    "label": "unumf_formatInt()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unumf_formatInt(const UNumberFormatter* uformatter, int64_t value, UFormattedNumber* uresult, UErrorCode* ec)"
  },
  {
    "label": "unumf_formatDouble()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unumf_formatDouble(const UNumberFormatter* uformatter, double value, UFormattedNumber* uresult, UErrorCode* ec)"
  },
  {
    "label": "unumf_formatDecimal()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unumf_formatDecimal(const UNumberFormatter* uformatter, const char* value, int32_t valueLen, UFormattedNumber* uresult, UErrorCode* ec)"
  },
  {
    "label": "unumf_resultAsValue()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DRAFT const UFormattedValue* U_EXPORT2)",
    "insertText": "unumf_resultAsValue(const UFormattedNumber* uresult, UErrorCode* ec)"
  },
  {
    "label": "unumf_resultToString()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "unumf_resultToString(const UFormattedNumber* uresult, UChar* buffer, int32_t bufferCapacity, UErrorCode* ec)"
  },
  {
    "label": "unumf_resultNextFieldPosition()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "unumf_resultNextFieldPosition(const UFormattedNumber* uresult, UFieldPosition* ufpos, UErrorCode* ec)"
  },
  {
    "label": "unumf_resultGetAllFieldPositions()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unumf_resultGetAllFieldPositions(const UFormattedNumber* uresult, UFieldPositionIterator* ufpositer, UErrorCode* ec)"
  },
  {
    "label": "unumf_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unumf_close(UNumberFormatter* uformatter)"
  },
  {
    "label": "unumf_closeResult()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "unumf_closeResult(UFormattedNumber* uresult)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUNumberFormatterPointer, UNumberFormatter, unumf_close)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUFormattedNumberPointer, UFormattedNumber, unumf_closeResult)"
  }
]