[
  {
    "label": "FilterPacketLossMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FilterPacketLossMode"
  },
  {
    "label": "VCMProtectionParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VCMProtectionParameters"
  },
  {
    "label": "VCMProtectionMethodEnum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VCMProtectionMethodEnum"
  },
  {
    "label": "VCMLossProbabilitySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMLossProbabilitySample"
  },
  {
    "label": "VCMProtectionMethod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMProtectionMethod"
  },
  {
    "label": "VCMNackMethod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMNackMethod"
  },
  {
    "label": "VCMFecMethod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMFecMethod"
  },
  {
    "label": "VCMNackFecMethod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMNackFecMethod"
  },
  {
    "label": "VCMLossProtectionLogic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMLossProtectionLogic"
  },
  {
    "label": "VCMProtectionParameters()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_MEDIA_OPT_UTIL_H_ # define MODULES_VIDEO_CODING_MEDIA_OPT_UTIL_H_ # include<math . h> # include<stdlib . h> # include<memory> # include \" modules / video_coding / internal_defines . h \" # include \" rtc_base / experiments / rate_control_settings . h \" # include \" rtc_base / numerics / exp_filter . h \" namespace webrtc { namespace media_optimization { int kLossPrHistorySize = 1 0 ; int kLossPrShortFilterWinMs = 1 0 0 0 ; enum FilterPacketLossMode { kNoFilter,kAvgFilter,kMaxFilter } ; int64_t kLowRttNackMs = 2 0 ; int kMaxRttDelayThreshold = 5 0 0 ; struct VCMProtectionParameters {)",
    "insertText": "VCMProtectionParameters()"
  },
  {
    "label": "VCMLossProbabilitySample()",
    "kind": "Method",
    "detail": "Function (int64_t rtt ; float lossPr ; float bitRate ; float packetsPerFrame ; float packetsPerFrameKey ; float frameRate ; float keyFrameSize ; uint8_t fecRateDelta ; uint8_t fecRateKey ; uint16_t codecWidth ; uint16_t codecHeight ; int numLayers ; } ; enum VCMProtectionMethodEnum { kNack,kFec,kNackFec,kNone } ; class VCMLossProbabilitySample { public :)",
    "insertText": "VCMLossProbabilitySample() : lossPr255(0), timeMs(-1)"
  },
  {
    "label": "VCMProtectionMethod()",
    "kind": "Method",
    "detail": "Function (} uint8_t lossPr255 ; int64_t timeMs ; } ; class VCMProtectionMethod { public :)",
    "insertText": "VCMProtectionMethod()"
  },
  {
    "label": "UpdateParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateParameters(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (VCMProtectionMethodEnum)",
    "insertText": "Type()"
  },
  {
    "label": "RequiredPacketLossER()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "RequiredPacketLossER()"
  },
  {
    "label": "RequiredProtectionFactorK()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "RequiredProtectionFactorK()"
  },
  {
    "label": "RequiredProtectionFactorD()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "RequiredProtectionFactorD()"
  },
  {
    "label": "RequiredUepProtectionK()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiredUepProtectionK()"
  },
  {
    "label": "RequiredUepProtectionD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiredUepProtectionD()"
  },
  {
    "label": "MaxFramesFec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MaxFramesFec()"
  },
  {
    "label": "VCMNackMethod()",
    "kind": "Method",
    "detail": "Function (protected : uint8_t _effectivePacketLoss ; uint8_t _protectionFactorK ; uint8_t _protectionFactorD ; float _scaleProtKey ; int32_t _maxPayloadSize ; bool _useUepProtectionK ; bool _useUepProtectionD ; float _corrFecCost ; VCMProtectionMethodEnum _type ; } ; class VCMNackMethod : public VCMProtectionMethod { public :)",
    "insertText": "VCMNackMethod()"
  },
  {
    "label": "EffectivePacketLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EffectivePacketLoss(const VCMProtectionParameters* parameter)"
  },
  {
    "label": "VCMFecMethod()",
    "kind": "Method",
    "detail": "Function (} ; class VCMFecMethod : public VCMProtectionMethod { public :)",
    "insertText": "VCMFecMethod()"
  },
  {
    "label": "EffectivePacketLoss()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EffectivePacketLoss(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "ProtectionFactor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProtectionFactor(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "BoostCodeRateKey()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "BoostCodeRateKey(uint8_t packetFrameDelta, uint8_t packetFrameKey)"
  },
  {
    "label": "ConvertFECRate()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "ConvertFECRate(uint8_t codeRate)"
  },
  {
    "label": "AvgRecoveryFEC()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AvgRecoveryFEC(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "UpdateProtectionFactorD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProtectionFactorD(uint8_t protectionFactorD)"
  },
  {
    "label": "UpdateProtectionFactorK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProtectionFactorK(uint8_t protectionFactorK)"
  },
  {
    "label": "BitsPerFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BitsPerFrame(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "VCMNackFecMethod()",
    "kind": "Method",
    "detail": "Function (protected : int kUpperLimitFramesFec = 6 ; int kMaxBytesPerFrameForFec = 7 0 0 ; int kMaxBytesPerFrameForFecLow = 4 0 0 ; int kMaxBytesPerFrameForFecHigh = 1 0 0 0 ; const RateControlSettings rate_control_settings_ ; } ; class VCMNackFecMethod : public VCMFecMethod { public :)",
    "insertText": "VCMNackFecMethod(int64_t lowRttNackThresholdMs, int64_t highRttNackThresholdMs)"
  },
  {
    "label": "VCMNackFecMethod()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMNackFecMethod()"
  },
  {
    "label": "BitRateTooLowForFec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BitRateTooLowForFec(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "ComputeMaxFramesFec()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "ComputeMaxFramesFec(const VCMProtectionParameters* parameters)"
  },
  {
    "label": "VCMLossProtectionLogic()",
    "kind": "Method",
    "detail": "Function (int64_t _lowRttNackMs ; int64_t _highRttNackMs ; int _maxFramesFec ; } ; class VCMLossProtectionLogic { public :)",
    "insertText": "VCMLossProtectionLogic(int64_t nowMs)"
  },
  {
    "label": "VCMLossProtectionLogic()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMLossProtectionLogic()"
  },
  {
    "label": "SetMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMethod(VCMProtectionMethodEnum newMethodType)"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(int64_t rtt)"
  },
  {
    "label": "UpdateFilteredLossPr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilteredLossPr(uint8_t packetLossEnc)"
  },
  {
    "label": "UpdateBitRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBitRate(float bitRate)"
  },
  {
    "label": "UpdatePacketsPerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketsPerFrame(float nPackets, int64_t nowMs)"
  },
  {
    "label": "UpdatePacketsPerFrameKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketsPerFrameKey(float nPackets, int64_t nowMs)"
  },
  {
    "label": "UpdateKeyFrameSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeyFrameSize(float keyFrameSize)"
  },
  {
    "label": "UpdateFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFrameRate(float frameRate)"
  },
  {
    "label": "UpdateFrameSize()",
    "kind": "Method",
    "detail": "Function (_frameRate = frameRate ; } void)",
    "insertText": "UpdateFrameSize(size_t width, size_t height)"
  },
  {
    "label": "UpdateNumLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNumLayers(int numLayers)"
  },
  {
    "label": "UpdateFECRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFECRates(uint8_t fecRateKey, uint8_t fecRateDelta)"
  },
  {
    "label": "UpdateMethod()",
    "kind": "Method",
    "detail": "Function (_fecRateKey = fecRateKey ; _fecRateDelta = fecRateDelta ; } bool)",
    "insertText": "UpdateMethod()"
  },
  {
    "label": "SelectedMethod()",
    "kind": "Method",
    "detail": "Function (VCMProtectionMethod*)",
    "insertText": "SelectedMethod()"
  },
  {
    "label": "SelectedType()",
    "kind": "Method",
    "detail": "Function (VCMProtectionMethodEnum)",
    "insertText": "SelectedType()"
  },
  {
    "label": "FilteredLoss()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "FilteredLoss(int64_t nowMs, FilterPacketLossMode filter_mode, uint8_t lossPr255)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int64_t nowMs)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "UpdateMaxLossHistory()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateMaxLossHistory(uint8_t lossPr255, int64_t now)"
  },
  {
    "label": "MaxFilteredLossPr()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "MaxFilteredLossPr(int64_t nowMs)"
  }
]