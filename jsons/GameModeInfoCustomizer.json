[
  {
    "label": "FGameModeInfoCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameModeInfoCustomizer"
  },
  {
    "label": "GameModeCategory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealType . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Engine / Blueprint . h \" # include \" Editor . h \" # include \" DetailLayoutBuilder . h \" # include \" DetailCategoryBuilder . h \" # include \" Widgets / Text / STextBlock . h \" # include \" IDetailGroup . h \" # include \" IDetailPropertyRow . h \" # include \" UObject / ConstructorHelpers . h \" # include \" Widgets / Layout / SBox . h \" # include \" GameFramework / GameModeBase . h \" # include \" Engine / BlueprintGeneratedClass . h \" # include \" PropertyCustomizationHelpers . h \" # include \" IDocumentation . h \" # include \" Kismet2 / KismetEditorUtilities . h \" # include \" Kismet2 / BlueprintEditorUtils . h \" # include \" EditorClassUtils . h \" # include \" Subsystems / AssetEditorSubsystem . h \" # define LOCTEXT_NAMESPACE \" FGameModeInfoCustomizer \" FString)",
    "insertText": "GameModeCategory(LOCTEXT(\"GameModeCategory\", \"GameMode\").ToString())"
  },
  {
    "label": "FGameModeInfoCustomizer()",
    "kind": "Method",
    "detail": "Function (class FGameModeInfoCustomizer : public TSharedFromThis<FGameModeInfoCustomizer> { public :)",
    "insertText": "FGameModeInfoCustomizer(UObject* InOwningObject, FName InGameModePropertyName)"
  },
  {
    "label": "CreateGameModePropertyLabelWidget()",
    "kind": "Method",
    "detail": "Function (OwningObject = InOwningObject ; GameModePropertyName = InGameModePropertyName ; CachedGameModeClass = nullptr ; } TSharedRef<SWidget>)",
    "insertText": "CreateGameModePropertyLabelWidget(FName PropertyName)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (FProperty* Prop = FindFieldChecked<)",
    "insertText": "FProperty(AGameModeBase::StaticClass(), PropertyName)"
  },
  {
    "label": "GetDisplayNameText()",
    "kind": "Method",
    "detail": "Function (FString DisplayName = Prop ->)",
    "insertText": "GetDisplayNameText().ToString()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (DisplayName = Prop ->)",
    "insertText": "GetName()"
  },
  {
    "label": "NameToDisplayString()",
    "kind": "Method",
    "detail": "Function (} DisplayName =)",
    "insertText": "NameToDisplayString(DisplayName, false)"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeGameModeDefaultClass(IDetailGroup& Group, FName DefaultClassPropertyName)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (FClassProperty* ClassProp = FindFieldChecked<)",
    "insertText": "FClassProperty(AGameModeBase::StaticClass(), DefaultClassPropertyName)"
  },
  {
    "label": "bAllowNone()",
    "kind": "Method",
    "detail": "Function (UClass* MetaClass = ClassProp -> MetaClass ; const bool)",
    "insertText": "bAllowNone(ClassProp->PropertyFlags & CPF_NoClear)"
  },
  {
    "label": "AddWidgetRow()",
    "kind": "Method",
    "detail": "Function (Group .)",
    "insertText": "AddWidgetRow() .NameContent() [ CreateGameModePropertyLabelWidget(DefaultClassPropertyName) ] .ValueContent() .MaxDesiredWidth(0) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() [ SNew(SBox) .WidthOverride(125.0f) [ SNew(SClassPropertyEntryBox) .AllowNone(bAllowNone) .MetaClass(MetaClass) .IsEnabled(this, &FGameModeInfoCustomizer::AllowModifyGameMode) .SelectedClass(this, &FGameModeInfoCustomizer::OnGetDefaultClass, DefaultClassPropertyName) .OnSetClass(FOnSetClass::CreateSP(this, &FGameModeInfoCustomizer::OnSetDefaultClass, DefaultClassPropertyName)) ] ] +SHorizontalBox::Slot() .AutoWidth() [ PropertyCustomizationHelpers::MakeUseSelectedButton(FSimpleDelegate::CreateSP(this, &FGameModeInfoCustomizer::OnMakeSelectedDefaultClassClicked, DefaultClassPropertyName)) ] +SHorizontalBox::Slot() .AutoWidth() [ PropertyCustomizationHelpers::MakeBrowseButton(FSimpleDelegate::CreateSP(this, &FGameModeInfoCustomizer::OnBrowseDefaultClassClicked, DefaultClassPropertyName)) ] +SHorizontalBox::Slot() .AutoWidth() [ PropertyCustomizationHelpers::MakeNewBlueprintButton(FSimpleDelegate::CreateSP(this, &FGameModeInfoCustomizer::OnMakeNewDefaultClassClicked, DefaultClassPropertyName))"
  },
  {
    "label": "CustomizeGameModeSetting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeGameModeSetting(IDetailLayoutBuilder& LayoutBuilder, IDetailCategoryBuilder& CategoryBuilder)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (DefaultGameModeClassHandle = LayoutBuilder .)",
    "insertText": "GetProperty(GameModePropertyName)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow& DefaultGameModeRow = CategoryBuilder .)",
    "insertText": "AddProperty(DefaultGameModeClassHandle)"
  },
  {
    "label": "bAllowNone()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bAllowNone(DefaultGameModeClassHandle->GetProperty()->PropertyFlags & CPF_NoClear)"
  },
  {
    "label": "ShowPropertyButtons()",
    "kind": "Method",
    "detail": "Function (DefaultGameModeRow .)",
    "insertText": "ShowPropertyButtons(false) .CustomWidget() .NameContent() [ DefaultGameModeClassHandle->CreatePropertyNameWidget() ] .ValueContent() .MaxDesiredWidth(0) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() [ SNew(SBox) .WidthOverride(125.0f) [ SNew(SClassPropertyEntryBox) .AllowNone(bAllowNone) .MetaClass(AGameModeBase::StaticClass()) .SelectedClass(this, &FGameModeInfoCustomizer::GetCurrentGameModeClass) .OnSetClass(FOnSetClass::CreateSP(this, &FGameModeInfoCustomizer::SetCurrentGameModeClass)) ] ] +SHorizontalBox::Slot() .VAlign(VAlign_Center) .AutoWidth() [ PropertyCustomizationHelpers::MakeUseSelectedButton(FSimpleDelegate::CreateSP(this, &FGameModeInfoCustomizer::OnUseSelectedGameModeClicked)) ] +SHorizontalBox::Slot() .VAlign(VAlign_Center) .AutoWidth() [ PropertyCustomizationHelpers::MakeBrowseButton(FSimpleDelegate::CreateSP(this, &FGameModeInfoCustomizer::OnBrowseGameModeClicked)) ] +SHorizontalBox::Slot() .VAlign(VAlign_Center) .AutoWidth() [ PropertyCustomizationHelpers::MakeNewBlueprintButton(FSimpleDelegate::CreateSP(this, &FGameModeInfoCustomizer::OnClickNewGameMode))"
  },
  {
    "label": "SelectedGameModeDetailsName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SelectedGameModeDetailsName(TEXT(\"SelectedGameModeDetails\"))"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (IDetailGroup& Group = CategoryBuilder .)",
    "insertText": "AddGroup(SelectedGameModeDetailsName, LOCTEXT(\"SelectedGameModeDetails\", \"Selected GameMode\"))"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeGameModeDefaultClass(Group, GET_MEMBER_NAME_CHECKED(AGameModeBase, DefaultPawnClass))"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeGameModeDefaultClass(Group, GET_MEMBER_NAME_CHECKED(AGameModeBase, HUDClass))"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeGameModeDefaultClass(Group, GET_MEMBER_NAME_CHECKED(AGameModeBase, PlayerControllerClass))"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeGameModeDefaultClass(Group, GET_MEMBER_NAME_CHECKED(AGameModeBase, GameStateClass))"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeGameModeDefaultClass(Group, GET_MEMBER_NAME_CHECKED(AGameModeBase, PlayerStateClass))"
  },
  {
    "label": "CustomizeGameModeDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeGameModeDefaultClass(Group, GET_MEMBER_NAME_CHECKED(AGameModeBase, SpectatorClass))"
  },
  {
    "label": "GetCurrentGameModeClass()",
    "kind": "Method",
    "detail": "Function (} const UClass*)",
    "insertText": "GetCurrentGameModeClass()"
  },
  {
    "label": "GetValueAsFormattedString()",
    "kind": "Method",
    "detail": "Function (FString ClassName ; DefaultGameModeClassHandle ->)",
    "insertText": "GetValueAsFormattedString(ClassName)"
  },
  {
    "label": "StripObjectClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripObjectClass(ClassName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const UClass* GameModeClass = CachedGameModeClass .)",
    "insertText": "Get()"
  },
  {
    "label": "GetClassFromString()",
    "kind": "Method",
    "detail": "Function (GameModeClass =)",
    "insertText": "GetClassFromString(ClassName)"
  },
  {
    "label": "MakeWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (CachedGameModeClass =)",
    "insertText": "MakeWeakObjectPtr(const_cast<UClass*>(GameModeClass))"
  },
  {
    "label": "SetCurrentGameModeClass()",
    "kind": "Method",
    "detail": "Function (} return GameModeClass ; } void)",
    "insertText": "SetCurrentGameModeClass(const UClass* NewGameModeClass)"
  },
  {
    "label": "MakeWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (CachedGameModeClass =)",
    "insertText": "MakeWeakObjectPtr(const_cast<UClass*>(NewGameModeClass))"
  },
  {
    "label": "GetCurrentGameModeCDO()",
    "kind": "Method",
    "detail": "Function (} } AGameModeBase*)",
    "insertText": "GetCurrentGameModeCDO()"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (UClass* GameModeClass = const_cast<)",
    "insertText": "UClass(GetCurrentGameModeClass())"
  },
  {
    "label": "OnGetDefaultClass()",
    "kind": "Method",
    "detail": "Function (} else { return NULL ; } } const UClass*)",
    "insertText": "OnGetDefaultClass(FName ClassPropertyName)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (FClassProperty* ClassProp = FindFieldChecked<)",
    "insertText": "FClassProperty(GameModeClass, ClassPropertyName)"
  },
  {
    "label": "CurrentDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentDefaultClass(UClass*)ClassProp->GetObjectPropertyValue(ClassProp->ContainerPtrToValuePtr<void>(GetCurrentGameModeCDO()))"
  },
  {
    "label": "OnSetDefaultClass()",
    "kind": "Method",
    "detail": "Function (} return CurrentDefaultClass ; } void)",
    "insertText": "OnSetDefaultClass(const UClass* NewDefaultClass, FName ClassPropertyName)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (const UClass** DefaultClassPtr = ClassProp -> ContainerPtrToValuePtr<const)",
    "insertText": "UClass(GetCurrentGameModeCDO())"
  },
  {
    "label": "UBlueprint()",
    "kind": "Method",
    "detail": "Function (* DefaultClassPtr = NewDefaultClass ; UBlueprint* Blueprint = Cast<)",
    "insertText": "UBlueprint(GameModeClass->ClassGeneratedBy)"
  },
  {
    "label": "MarkBlueprintAsModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkBlueprintAsModified(Blueprint)"
  },
  {
    "label": "CanBrowseDefaultClass()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "CanBrowseDefaultClass(FName ClassPropertyName)"
  },
  {
    "label": "OnBrowseDefaultClassClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBrowseDefaultClassClicked(FName ClassPropertyName)"
  },
  {
    "label": "SyncBrowserToClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToClass(OnGetDefaultClass(ClassPropertyName))"
  },
  {
    "label": "OnMakeNewDefaultClassClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMakeNewDefaultClassClicked(FName ClassPropertyName)"
  },
  {
    "label": "FClassProperty()",
    "kind": "Method",
    "detail": "Function (FClassProperty* ClassProp = FindFieldChecked<)",
    "insertText": "FClassProperty(AGameModeBase::StaticClass(), ClassPropertyName)"
  },
  {
    "label": "CreateBlueprintFromClass()",
    "kind": "Method",
    "detail": "Function (UBlueprint* Blueprint =)",
    "insertText": "CreateBlueprintFromClass(LOCTEXT(\"CreateNewBlueprint\", \"Create New Blueprint\"), ClassProp->MetaClass, FString::Printf(TEXT(\"New%s\"),*ClassProp->MetaClass->GetName()))"
  },
  {
    "label": "OnSetDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetDefaultClass(Blueprint->GeneratedClass, ClassPropertyName)"
  },
  {
    "label": "UAssetEditorSubsystem()",
    "kind": "Method",
    "detail": "Function (GEditor -> GetEditorSubsystem<)",
    "insertText": "UAssetEditorSubsystem()->OpenEditorForAsset(Blueprint)"
  },
  {
    "label": "OnMakeSelectedDefaultClassClicked()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnMakeSelectedDefaultClassClicked(FName ClassPropertyName)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (FEditorDelegates::LoadSelectedAssetsIfNeeded .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "GetFirstSelectedClass()",
    "kind": "Method",
    "detail": "Function (const UClass* SelectedClass = GEditor ->)",
    "insertText": "GetFirstSelectedClass(ClassProp->MetaClass)"
  },
  {
    "label": "OnSetDefaultClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetDefaultClass(SelectedClass, ClassPropertyName)"
  },
  {
    "label": "CanBrowseGameMode()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CanBrowseGameMode()"
  },
  {
    "label": "OnBrowseGameModeClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBrowseGameModeClicked()"
  },
  {
    "label": "SyncBrowserToClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncBrowserToClass(GetCurrentGameModeClass())"
  },
  {
    "label": "CanSyncToClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSyncToClass(const UClass* Class)"
  },
  {
    "label": "SyncBrowserToClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SyncBrowserToClass(const UClass* Class)"
  },
  {
    "label": "UBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint* Blueprint = Cast<)",
    "insertText": "UBlueprint(Class->ClassGeneratedBy)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> SyncObjects ; SyncObjects .)",
    "insertText": "Add(Blueprint)"
  },
  {
    "label": "SyncBrowserToObjects()",
    "kind": "Method",
    "detail": "Function (GEditor ->)",
    "insertText": "SyncBrowserToObjects(SyncObjects)"
  },
  {
    "label": "OnUseSelectedGameModeClicked()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "OnUseSelectedGameModeClicked()"
  },
  {
    "label": "GetFirstSelectedClass()",
    "kind": "Method",
    "detail": "Function (const UClass* SelectedClass = GEditor ->)",
    "insertText": "GetFirstSelectedClass(AGameModeBase::StaticClass())"
  },
  {
    "label": "SetValueFromFormattedString()",
    "kind": "Method",
    "detail": "Function (DefaultGameModeClassHandle ->)",
    "insertText": "SetValueFromFormattedString(SelectedClass->GetPathName())"
  },
  {
    "label": "OnClickNewGameMode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnClickNewGameMode()"
  },
  {
    "label": "CreateBlueprintFromClass()",
    "kind": "Method",
    "detail": "Function (UBlueprint* Blueprint =)",
    "insertText": "CreateBlueprintFromClass(LOCTEXT(\"CreateNewGameMode\", \"Create New GameMode\"), AGameModeBase::StaticClass(), TEXT(\"NewGameMode\"))"
  },
  {
    "label": "SetValueFromFormattedString()",
    "kind": "Method",
    "detail": "Function (DefaultGameModeClassHandle ->)",
    "insertText": "SetValueFromFormattedString(Blueprint->GeneratedClass->GetPathName())"
  },
  {
    "label": "AllowModifyGameMode()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "AllowModifyGameMode()"
  },
  {
    "label": "UBlueprintGeneratedClass()",
    "kind": "Method",
    "detail": "Function (const UBlueprintGeneratedClass* GameModeBPClass = Cast<)",
    "insertText": "UBlueprintGeneratedClass(GetCurrentGameModeClass())"
  }
]