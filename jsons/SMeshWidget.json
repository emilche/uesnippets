[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "USlateVectorArtData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateVectorArtData"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SMeshWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMeshWidget"
  },
  {
    "label": "FRenderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderData"
  },
  {
    "label": "FRenderRun",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderRun"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Textures / SlateShaderResource . h \" # include \" Rendering / RenderingCommon . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; class UMaterialInstanceDynamic ; class USlateVectorArtData ; struct FSlateBrush ; class SMeshWidget : public SLeafWidget,public FGCObject { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMeshWidget) : _MeshData(nullptr)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(USlateVectorArtData*, MeshData) SLATE_END_ARGS() UMG_API void Construct(const FArguments& Args)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddMesh(USlateVectorArtData& InMeshData)"
  },
  {
    "label": "AddMeshWithInstancing()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddMeshWithInstancing(USlateVectorArtData& InMeshData, int32 InitialBufferSize = 1)"
  },
  {
    "label": "ConvertToMID()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceDynamic*)",
    "insertText": "ConvertToMID(uint32 MeshId)"
  },
  {
    "label": "ClearRuns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRuns(int32 NumRuns)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RenderRuns .)",
    "insertText": "Add(FRenderRun(InMeshIndex, InInstanceOffset, InNumInstances))"
  },
  {
    "label": "EnableInstancing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableInstancing(uint32 MeshId, int32 InitialSize)"
  },
  {
    "label": "UpdatePerInstanceBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePerInstanceBuffer(uint32 MeshId, FSlateInstanceBufferData& Data)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "PushUpdate()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PushUpdate(uint32 VectorArtId, SMeshWidget& Widget, const FVector2D& Position, float Scale, uint32 BaseAddress)"
  },
  {
    "label": "PushUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushUpdate(uint32 VectorArtId, SMeshWidget& Widget, const FVector2D& Position, float Scale, float OptionalFloat = 0)"
  },
  {
    "label": "FRenderRun()",
    "kind": "Method",
    "detail": "Function (struct FRenderData { TArray<FSlateVertex> VertexData ; TArray<SlateIndex> IndexData ; TSharedPtr<FSlateBrush> Brush ; FSlateResourceHandle RenderingResourceHandle ; TSharedPtr<ISlateUpdatableInstanceBuffer> PerInstanceBuffer ; } ; TArray<FRenderData,TInlineAllocator<3>> RenderData ; private : class FRenderRun { public :)",
    "insertText": "FRenderRun(uint32 InMeshIndex, uint32 InInstanceOffset, uint32 InNumInstances) : MeshIndex(InMeshIndex) , InstanceOffset(InInstanceOffset) , NumInstances(InNumInstances)"
  },
  {
    "label": "GetMeshIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMeshIndex()"
  }
]