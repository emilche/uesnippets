[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInstalledPlatformConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstalledPlatformConfiguration"
  },
  {
    "label": "DESKTOPPLATFORM_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DESKTOPPLATFORM_API"
  },
  {
    "label": "EProjectTypeFromString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMisc . h \" # include \" Misc / Optional . h \" template<FuncType> class TFunctionRef ; enum class EProjectType : uint8 { Unknown,Any,Code,Content,} ; EProjectType)",
    "insertText": "EProjectTypeFromString(const FString& ProjectTypeName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (enum class EInstalledPlatformState { Supported,Downloaded,} ; struct FInstalledPlatformConfiguration { EBuildConfiguration Configuration ; FString PlatformName ; EBuildTargetType PlatformType ; FString Architecture ; FString RequiredFile ; EProjectType ProjectType ; bool bCanBeDisplayed ; } ; class FInstalledPlatformInfo { public : FInstalledPlatformInfo&)",
    "insertText": "Get()"
  },
  {
    "label": "IsValidConfiguration()",
    "kind": "Method",
    "detail": "Function (FInstalledPlatformInfo InfoSingleton ; return InfoSingleton ; } bool)",
    "insertText": "IsValidConfiguration(const EBuildConfiguration Configuration, EProjectType ProjectType = EProjectType::Any)"
  },
  {
    "label": "IsValidPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPlatform(const FString& PlatformName, EProjectType ProjectType = EProjectType::Any)"
  },
  {
    "label": "IsValidPlatformAndConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPlatformAndConfiguration(const EBuildConfiguration Configuration, const FString& PlatformName, EProjectType ProjectType = EProjectType::Any)"
  },
  {
    "label": "CanDisplayPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDisplayPlatform(const FString& PlatformName, EProjectType ProjectType)"
  },
  {
    "label": "IsValidTargetType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTargetType(EBuildTargetType TargetType)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(TOptional<EBuildTargetType> TargetType, TOptional<FString> Platform, TOptional<EBuildConfiguration> Configuration, EProjectType ProjectType, EInstalledPlatformState State)"
  },
  {
    "label": "IsValidPlatformArchitecture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPlatformArchitecture(const FString& PlatformName, const FString& Architecture)"
  },
  {
    "label": "IsPlatformMissingRequiredFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformMissingRequiredFile(const FString& PlatformName)"
  },
  {
    "label": "OpenInstallerOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenInstallerOptions()"
  },
  {
    "label": "FInstalledPlatformInfo()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FInstalledPlatformInfo()"
  },
  {
    "label": "ParsePlatformConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParsePlatformConfiguration(FString PlatformConfiguration)"
  },
  {
    "label": "ContainsValidConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsValidConfiguration(TFunctionRef<bool(const FInstalledPlatformConfiguration)> ConfigFilter)"
  },
  {
    "label": "ContainsMatchingConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsMatchingConfiguration(TFunctionRef<bool(const FInstalledPlatformConfiguration)> ConfigFilter)"
  }
]