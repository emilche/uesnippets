[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EventParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EventParameters"
  },
  {
    "label": "FieldParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FieldParameters"
  },
  {
    "label": "EventEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventEncoder"
  },
  {
    "label": "EventEncoder()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_ENCODING_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_ENCODING_H_ # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" logging / rtc_event_log / encoder / rtc_event_log_encoder_common . h \" # include \" logging / rtc_event_log / events / fixed_length_encoding_parameters_v3 . h \" # include \" logging / rtc_event_log / events / rtc_event_field_extraction . h \" # include \" rtc_base / logging . h \" namespace webrtc { enum class FieldType : uint8_t { kFixed8 = 0,kFixed32 = 1,kFixed64 = 2,kVarInt = 3,kString = 4,} ; struct EventParameters { const char* const name ; const RtcEvent::Type id ; } ; struct FieldParameters { const char* const name ; const uint64_t field_id ; const FieldType field_type ; const uint64_t value_width ; uint64_t kTimestampField = 0 ; } ; class EventEncoder { public :)",
    "insertText": "EventEncoder(EventParameters params, rtc::ArrayView<const RtcEvent*> batch)"
  },
  {
    "label": "EncodeField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeField(const FieldParameters& params, const std::vector<uint64_t>& values, const std::vector<bool>* positions = nullptr)"
  },
  {
    "label": "EncodeField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeField(const FieldParameters& params, const ValuesWithPositions& values)"
  },
  {
    "label": "EncodeField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeField(const FieldParameters& params, const std::vector<absl::string_view>& values)"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "AsString()"
  },
  {
    "label": "EncodeSingleValue()",
    "kind": "Method",
    "detail": "Function (private : size_t batch_size_ ; uint32_t event_tag_ ; std::vector<std::string> encoded_fields_ ; } ; std::string)",
    "insertText": "EncodeSingleValue(uint64_t value, FieldType field_type)"
  },
  {
    "label": "EncodeDeltasV3()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "EncodeDeltasV3(FixedLengthEncodingParametersV3 params, uint64_t base, rtc::ArrayView<const uint64_t> values)"
  },
  {
    "label": "ExtractRtcEventMember()",
    "kind": "Method",
    "detail": "Function (template<T,E,std::enable_if_t<std::is_integral<T>::value,bool> = true> std::vector<uint64_t>)",
    "insertText": "ExtractRtcEventMember(rtc::ArrayView<const RtcEvent*> batch, const T E::*member)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::vector<uint64_t> values ; values .)",
    "insertText": "reserve(batch.size())"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(event->GetType(), E::kType)"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (*member)",
    "insertText": "E(event)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "push_back(EncodeAsUnsigned(value))"
  },
  {
    "label": "ExtractRtcEventMember()",
    "kind": "Method",
    "detail": "Function (} return values ; } template<T,E,std::enable_if_t<std::is_integral<T>::value,bool> = true> ValuesWithPositions)",
    "insertText": "ExtractRtcEventMember(rtc::ArrayView<const RtcEvent*> batch, const absl::optional<T> E::*member)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (result . position_mask .)",
    "insertText": "push_back(field.has_value())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (result . values .)",
    "insertText": "push_back(EncodeAsUnsigned(field.value()))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "push_back(RtcEventLogEnum<T>::Encode(value))"
  },
  {
    "label": "ExtractRtcEventMember()",
    "kind": "Method",
    "detail": "Function (} return values ; } template<E> std::vector<absl::string_view>)",
    "insertText": "ExtractRtcEventMember(rtc::ArrayView<const RtcEvent*> batch, const std::string E::*member)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "push_back(str)"
  }
]