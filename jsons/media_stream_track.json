[
  {
    "label": "MediaStreamTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaStreamTrack"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (# ifndef API_MEDIA_STREAM_TRACK_H_ # define API_MEDIA_STREAM_TRACK_H_ # include<string> # include \" absl / strings / string_view . h \" # include \" api / media_stream_interface . h \" # include \" api / notifier . h \" namespace webrtc { template<T> class MediaStreamTrack : public Notifier<T> { public : typedef T::TrackState TypedTrackState ; std::string)",
    "insertText": "id()"
  },
  {
    "label": "fire_on_change()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fire_on_change(enable != enabled_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (enabled_ = enable ;)",
    "insertText": "if(fire_on_change)"
  },
  {
    "label": "FireOnChanged()",
    "kind": "Method",
    "detail": "Function (Notifier<T)",
    "insertText": "FireOnChanged()"
  },
  {
    "label": "set_ended()",
    "kind": "Method",
    "detail": "Function (} return fire_on_change ; } void)",
    "insertText": "set_ended()"
  },
  {
    "label": "set_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_state(MediaStreamTrackInterface::TrackState::kEnded)"
  },
  {
    "label": "MediaStreamTrack()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "MediaStreamTrack(absl::string_view id) : enabled_(true), id_(id), state_(MediaStreamTrackInterface::kLive)"
  },
  {
    "label": "set_state()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "set_state(MediaStreamTrackInterface::TrackState new_state)"
  },
  {
    "label": "fire_on_change()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fire_on_change(state_ != new_state)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state_ = new_state ;)",
    "insertText": "if(fire_on_change) Notifier<T>::FireOnChanged()"
  }
]