[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FFactoryBaseNodeStaticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFactoryBaseNodeStaticData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UInterchangeFactoryBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeFactoryBaseNode"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_DELEGATE_BY_PROPERTYNAME()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Nodes / InterchangeBaseNode . h \" # include \" Nodes / InterchangeBaseNodeUtilities . h \" # include \" Types / AttributeStorage . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" InterchangeFactoryBaseNode . generated . h \" class UObject ; struct FFrame ; # define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_DELEGATE_BY_PROPERTYNAME(AttributeName, AttributeType, ObjectType, PropertyName) \\ bool ApplyCustom##AttributeName##ToAsset(UObject* Asset)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (\\ return ApplyAttributeToObject<)",
    "insertText": "AttributeType(Macro_Custom##AttributeName##Key.Key, Asset, PropertyName)"
  },
  {
    "label": "FromAsset()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ bool FillCustom # # AttributeName # #)",
    "insertText": "FromAsset(UObject* Asset)"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_SETTER()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_SETTER(NodeClassName, AttributeName, AttributeType, AssetType) \\ FString OperationName = GetTypeName() + TEXT(\".Set\" #AttributeName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(InterchangePrivateNodeBase::SetCustomAttribute<AttributeType>(*Attributes, Macro_Custom##AttributeName##Key, OperationName, AttributeValue))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(bAddApplyDelegate)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (\\ FName AttributeNameImpl =)",
    "insertText": "TEXT(\"\"#AttributeName)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (\\ AddApplyAndFillDelegates<)",
    "insertText": "AttributeType(Macro_Custom##AttributeName##Key.Key, AssetType::StaticClass(), AttributeNameImpl)"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_SETTER_WITH_CUSTOM_DELEGATE_WITH_CUSTOM_CLASS()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return true ; \\ } \\ return false ; # define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_SETTER_WITH_CUSTOM_DELEGATE_WITH_CUSTOM_CLASS(NodeClassName, AttributeName, AttributeType, AssetType) \\ FString OperationName = GetTypeName() + TEXT(\".Set\" #AttributeName)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "check(NodeClassName::StaticClass()->IsChildOf<UInterchangeFactoryBaseNode>())"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (\\ UClass* AssetClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (\\ TArray<UE::Interchange::FApplyAttributeToAsset>& Delegates = ApplyCustomAttributeDelegates .)",
    "insertText": "FindOrAdd(AssetClass)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ Delegates .)",
    "insertText": "Add(UE::Interchange::FApplyAttributeToAsset::CreateUObject(this, &NodeClassName::ApplyCustom##AttributeName##ToAsset))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ FillDelegates .)",
    "insertText": "Add(UE::Interchange::FFillAttributeToAsset::CreateUObject(this, &NodeClassName::FillCustom##AttributeName##FromAsset))"
  },
  {
    "label": "IMPLEMENT_NODE_ATTRIBUTE_SETTER_WITH_CUSTOM_DELEGATE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return true ; \\ } \\ return false ; # define)",
    "insertText": "IMPLEMENT_NODE_ATTRIBUTE_SETTER_WITH_CUSTOM_DELEGATE(NodeClassName, AttributeName, AttributeType) \\ FString OperationName = GetTypeName() + TEXT(\".Set\" #AttributeName)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (\\ TArray<UE::Interchange::FApplyAttributeToAsset>& Delegates = ApplyCustomAttributeDelegates .)",
    "insertText": "FindOrAdd(GetObjectClass())"
  },
  {
    "label": "COPY_NODE_DELEGATES()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return true ; \\ } \\ return false ; # define)",
    "insertText": "COPY_NODE_DELEGATES(SourceNode, AttributeName, AttributeType, AssetType)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (\\ const UE::Interchange::FAttributeKey& AttributeKey = Macro_Custom # # AttributeName # # Key ; \\ FString OperationName =)",
    "insertText": "GetTypeName() + TEXT(\".Get\" #AttributeName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ AttributeType AttributeValue ; \\)",
    "insertText": "if(InterchangePrivateNodeBase::GetCustomAttribute<AttributeType>(*SourceNode->Attributes, AttributeKey, OperationName, AttributeValue))"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (\\ AddApplyAndFillDelegates<)",
    "insertText": "AttributeType(AttributeKey.Key, AssetType::StaticClass(), PropertyName)"
  },
  {
    "label": "COPY_NODE_DELEGATES_WITH_CUSTOM_DELEGATE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "COPY_NODE_DELEGATES_WITH_CUSTOM_DELEGATE(SourceNode, NodeClassName, AttributeName, AttributeType, AssetClass)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } namespace UE::Interchange {)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FApplyAttributeToAsset, UObject*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FFillAttributeToAsset, UObject*)"
  },
  {
    "label": "FactoryDependenciesBaseKey()",
    "kind": "Method",
    "detail": "Function (struct FFactoryBaseNodeStaticData : public FBaseNodeStaticData { const FString&)",
    "insertText": "FactoryDependenciesBaseKey()"
  },
  {
    "label": "ReimportStrategyFlagsKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "ReimportStrategyFlagsKey()"
  },
  {
    "label": "SkipNodeImportKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "SkipNodeImportKey()"
  },
  {
    "label": "ForceNodeReimportKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey&)",
    "insertText": "ForceNodeReimportKey()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (ApplyNoProperties,ApplyPipelineProperties,ApplyEditorChangedProperties } ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERCHANGECORE_API UInterchangeFactoryBaseNode()"
  },
  {
    "label": "GetKeyDisplayName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FString)",
    "insertText": "GetKeyDisplayName(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "GetAttributeCategory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAttributeCategory(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "ShouldHideAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHideAttribute(const UE::Interchange::FAttributeKey& NodeAttributeKey)"
  },
  {
    "label": "GetObjectClass()",
    "kind": "Method",
    "detail": "Function (class UClass*)",
    "insertText": "GetObjectClass()"
  },
  {
    "label": "BuildFactoryNodeUid()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildFactoryNodeUid(const FString& TranslatedNodeUid)"
  },
  {
    "label": "AddApplyAndFillDelegates()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> void)",
    "insertText": "AddApplyAndFillDelegates(const FString& NodeAttributeKey, UClass* ObjectClass, const FName PropertyName)"
  },
  {
    "label": "ApplyAttributeToObject()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> bool)",
    "insertText": "ApplyAttributeToObject(const FString& NodeAttributeKey, UObject* Object, const FName PropertyName)"
  },
  {
    "label": "FillAttributeFromObject()",
    "kind": "Method",
    "detail": "Function (template<AttributeType> bool)",
    "insertText": "FillAttributeFromObject(const FString& NodeAttributeKey, UObject* Object, const FName PropertyName)"
  },
  {
    "label": "CopyWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyWithObject(const UInterchangeFactoryBaseNode* SourceNode, UObject* Object)"
  },
  {
    "label": "CopyStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStorage(SourceNode, this)"
  },
  {
    "label": "ApplyAllCustomAttributeToObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyAllCustomAttributeToObject(UObject* Object)"
  },
  {
    "label": "FillAllCustomAttributeFromObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAllCustomAttributeFromObject(UObject* Object)"
  },
  {
    "label": "RemoveCustomAttributesForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCustomAttributesForClass(UClass* Class)"
  },
  {
    "label": "DuplicateWithObject()",
    "kind": "Method",
    "detail": "Function (UInterchangeFactoryBaseNode*)",
    "insertText": "DuplicateWithObject(const UInterchangeFactoryBaseNode* SourceNode, UObject* Object)"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (const UE::Interchange::FAttributeKey Macro_CustomLevelUidKey = UE::)",
    "insertText": "FAttributeKey(TEXT(\"LevelUid\"))"
  },
  {
    "label": "FAttributeKey()",
    "kind": "Method",
    "detail": "Function (const UE::Interchange::FAttributeKey Macro_CustomReferenceObjectKey = UE::)",
    "insertText": "FAttributeKey(TEXT(\"ReferenceObject\"))"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TArray<UE::Interchange::FApplyAttributeToAsset>& ApplyDelegates = ApplyCustomAttributeDelegates .)",
    "insertText": "FindOrAdd(ObjectClass)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ApplyDelegates .)",
    "insertText": "Add(UE::Interchange::FApplyAttributeToAsset::CreateLambda( [NodeAttributeKey, PropertyName, this](UObject* Asset) { return ApplyAttributeToObject<AttributeType>(NodeAttributeKey, Asset, PropertyName); }))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FillDelegates .)",
    "insertText": "Add(UE::Interchange::FApplyAttributeToAsset::CreateLambda( [NodeAttributeKey, PropertyName, this](UObject* Asset) { return FillAttributeFromObject<AttributeType>(NodeAttributeKey, Asset, PropertyName); }))"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (TVariant<UObject*,uint8*> Container ; Container . Set<)",
    "insertText": "UObject(Object)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AttributeType* PropertyValueAddress ;)",
    "insertText": "if(Container.IsType<UObject*>())"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (PropertyValueAddress = Property -> ContainerPtrToValuePtr<)",
    "insertText": "AttributeType(Container.Get<UObject*>())"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (} else { PropertyValueAddress = Property -> ContainerPtrToValuePtr<)",
    "insertText": "AttributeType(Container.Get<uint8*>())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (}* PropertyValueAddress = ValueData ; } return true ; } return false ; } template<> bool UInterchangeFactoryBaseNode::ApplyAttributeToObject<)",
    "insertText": "FString(const FString& NodeAttributeKey, UObject* Object, const FName PropertyName)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (PropertyValueAddress = Property -> ContainerPtrToValuePtr<)",
    "insertText": "FString(Container.Get<UObject*>())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} else { PropertyValueAddress = Property -> ContainerPtrToValuePtr<)",
    "insertText": "FString(Container.Get<uint8*>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FObjectPropertyBase* ObjectProperty = CastField<FObjectPropertyBase>(Property))"
  },
  {
    "label": "SetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (ObjectProperty ->)",
    "insertText": "SetObjectPropertyValue(PropertyValueAddress, FSoftObjectPath(ValueData).TryLoad())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} else {* PropertyValueAddress = ValueData ; } } return true ; } return false ; } template<> bool UInterchangeFactoryBaseNode::ApplyAttributeToObject<)",
    "insertText": "bool(const FString& NodeAttributeKey, UObject* Object, const FName PropertyName)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (PropertyValueAddress = Property -> ContainerPtrToValuePtr<)",
    "insertText": "bool(Container.Get<UObject*>())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} else { PropertyValueAddress = Property -> ContainerPtrToValuePtr<)",
    "insertText": "bool(Container.Get<uint8*>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FBoolProperty* BoolProperty = CastField<FBoolProperty>(Property))"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (BoolProperty ->)",
    "insertText": "SetPropertyValue(PropertyValueAddress, bValueData)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (const bool bPropertyValue = BoolProperty ->)",
    "insertText": "GetPropertyValue(PropertyValueAddress)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SetAttribute(NodeAttributeKey, *PropertyValueAddress)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (UObject* ObjectValue = ObjectProperty ->)",
    "insertText": "GetObjectPropertyValue(PropertyValueAddress)"
  }
]