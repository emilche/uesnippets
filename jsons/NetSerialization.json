[
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "FExampleStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExampleStruct"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "TFixedCompressedFloatDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFixedCompressedFloatDetails"
  },
  {
    "label": "FVector_NetQuantize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector_NetQuantize"
  },
  {
    "label": "FVector_NetQuantize10",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector_NetQuantize10"
  },
  {
    "label": "FVector_NetQuantize100",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector_NetQuantize100"
  },
  {
    "label": "FVector_NetQuantizeNormal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVector_NetQuantizeNormal"
  },
  {
    "label": "SerializeOptionalValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Misc / NetworkVersion . h \" # include \" UObject / CoreNet . h \" # include \" EngineLogs . h \" # include \" Net / Core / Serialization / QuantizedVectorSerialization . h \" # include<type_traits> # include \" NetSerialization . generated . h \" template<ValueType> bool)",
    "insertText": "SerializeOptionalValue(const bool bIsSaving, FArchive& Ar, ValueType& Value, const ValueType& DefaultValue)"
  },
  {
    "label": "bNotDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bNotDefault(bIsSaving && (Value != DefaultValue))"
  },
  {
    "label": "SerializeBits()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializeBits(&bNotDefault, 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Value ; } else)",
    "insertText": "if(!bIsSaving)"
  },
  {
    "label": "NetSerializeOptionalValue()",
    "kind": "Method",
    "detail": "Function (Value = DefaultValue ; } return bNotDefault ; } template<ValueType> bool)",
    "insertText": "NetSerializeOptionalValue(const bool bIsSaving, FArchive& Ar, ValueType& Value, const ValueType& DefaultValue, class UPackageMap* PackageMap)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool bLocalSuccess = true ; Value .)",
    "insertText": "NetSerialize(Ar, PackageMap, bLocalSuccess)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Value = DefaultValue ; } return bNotDefault ; } # if 0)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() bool NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "SerializeInt()",
    "kind": "Method",
    "detail": "Function (uint32 Bits = 0 ; Ar .)",
    "insertText": "SerializeInt(Bits, MaxBitsPerComponent)"
  },
  {
    "label": "Bias()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Bias(Bits+1)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Max(Bits+2)"
  },
  {
    "label": "SerializeInt()",
    "kind": "Method",
    "detail": "Function (uint32 DX = 0 ; uint32 DY = 0 ; uint32 DZ = 0 ; Ar .)",
    "insertText": "SerializeInt(DX, Max)"
  },
  {
    "label": "SerializeInt()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializeInt(DY, Max)"
  },
  {
    "label": "SerializeInt()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializeInt(DZ, Max)"
  },
  {
    "label": "fact()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "fact(float)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "X(float)(static_cast<int32>(DX)-Bias)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Y(float)(static_cast<int32>(DY)-Bias)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Z(float)(static_cast<int32>(DZ)-Bias)"
  },
  {
    "label": "WritePackedVector()",
    "kind": "Method",
    "detail": "Function (} template<int32 ScaleFactor,int32 MaxBitsPerComponent> bool)",
    "insertText": "WritePackedVector(FVector3d Vector, FArchive& Ar)"
  },
  {
    "label": "ReadPackedVector()",
    "kind": "Method",
    "detail": "Function (} template<int32 ScaleFactor,int32 MaxBitsPerComponent> bool)",
    "insertText": "ReadPackedVector(FVector3f& Value, FArchive& Ar)"
  },
  {
    "label": "MaxBitsPerComponent()",
    "kind": "Method",
    "detail": "Function (} else { return UE::Net::Private::LegacyReadPackedVector<ScaleFactor,)",
    "insertText": "MaxBitsPerComponent(Value, Ar)"
  },
  {
    "label": "ReadPackedVector()",
    "kind": "Method",
    "detail": "Function (} } template<int32 ScaleFactor,int32 MaxBitsPerComponent> bool)",
    "insertText": "ReadPackedVector(FVector3d& Value, FArchive& Ar)"
  },
  {
    "label": "MaxBitsPerComponent()",
    "kind": "Method",
    "detail": "Function (} else { FVector3f AsFloat ; const bool bRet = UE::Net::Private::LegacyReadPackedVector<ScaleFactor,)",
    "insertText": "MaxBitsPerComponent(AsFloat, Ar)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "FVector3d(AsFloat)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FEngineNetworkCustomVersion::Guid)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Ar.IsLoading())"
  },
  {
    "label": "SerializePackedVector()",
    "kind": "Method",
    "detail": "Function (} } template<int32 ScaleFactor,int32 MaxBitsPerComponent> bool)",
    "insertText": "SerializePackedVector(FVector3d& Value, FArchive& Ar)"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "AsFloat(Value)"
  },
  {
    "label": "Bias()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Bias(1 << (NumBits - 1))"
  },
  {
    "label": "SerIntMax()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SerIntMax(1 << (NumBits - 0))"
  },
  {
    "label": "MaxDelta()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxDelta(1 << (NumBits - 0))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} ; template<int32 MaxValue,uint32 NumBits,T)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<T> && NumBits < 32)> bool WriteFixedCompressedFloat(const T Value, FArchive& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using Details = TFixedCompressedFloatDetails<MaxValue,NumBits> ; bool clamp = false ; int64 ScaledValue ;)",
    "insertText": "if(MaxValue > Details::MaxBitValue)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Scale =)",
    "insertText": "T(Details::MaxBitValue)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (ScaledValue =)",
    "insertText": "TruncToInt(Scale * Value)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (} else { int32 Scale = Details::MaxBitValue / MaxValue ; ScaledValue =)",
    "insertText": "RoundToInt(Scale * Value)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} uint32 Delta = static_cast<)",
    "insertText": "uint32(ScaledValue + Details::Bias)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (clamp = true ; Delta = static_cast<)",
    "insertText": "int32(Delta)"
  },
  {
    "label": "SerializeInt()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "SerializeInt(Delta, Details::SerIntMax)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T UnscaledValue = static_cast<)",
    "insertText": "T(static_cast<int32>(Delta) - Details::Bias)"
  },
  {
    "label": "MaxValue()",
    "kind": "Method",
    "detail": "Function (T InvScale =)",
    "insertText": "MaxValue(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Value = UnscaledValue* InvScale ; } else { int32 Scale = Details::MaxBitValue / MaxValue ; T InvScale =)",
    "insertText": "T(1) / (T)"
  },
  {
    "label": "SerializeFixedVector()",
    "kind": "Method",
    "detail": "Function (Value = UnscaledValue* InvScale ; } return true ; } template<int32 MaxValue,uint32 NumBits> bool)",
    "insertText": "SerializeFixedVector(FVector3f &Vector, FArchive& Ar)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (bool success = true ; success& = WriteFixedCompressedFloat<MaxValue,)",
    "insertText": "NumBits(Vector.X, Ar)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (success& = WriteFixedCompressedFloat<MaxValue,)",
    "insertText": "NumBits(Vector.Y, Ar)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (success& = WriteFixedCompressedFloat<MaxValue,)",
    "insertText": "NumBits(Vector.Z, Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FVector_NetQuantize()"
  },
  {
    "label": "FVector_NetQuantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVector_NetQuantize(EForceInit E) : FVector(E)"
  },
  {
    "label": "FVector_NetQuantize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize(double InX, double InY, double InZ) : FVector(InX, InY, InZ)"
  },
  {
    "label": "FVector_NetQuantize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize(const FVector &InVec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(InVec)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "SerializePackedVector()",
    "kind": "Method",
    "detail": "Function (bOutSuccess =)",
    "insertText": "SerializePackedVector(*this, Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FVector_NetQuantize10()"
  },
  {
    "label": "FVector_NetQuantize10()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVector_NetQuantize10(EForceInit E) : FVector(E)"
  },
  {
    "label": "FVector_NetQuantize10()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize10(double InX, double InY, double InZ) : FVector(InX, InY, InZ)"
  },
  {
    "label": "FVector_NetQuantize10()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize10(const FVector &InVec)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FVector_NetQuantize100()"
  },
  {
    "label": "FVector_NetQuantize100()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVector_NetQuantize100(EForceInit E) : FVector(E)"
  },
  {
    "label": "FVector_NetQuantize100()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize100(double InX, double InY, double InZ) : FVector(InX, InY, InZ)"
  },
  {
    "label": "FVector_NetQuantize100()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize100(const FVector3f& InVec) : FVector(InVec)"
  },
  {
    "label": "FVector_NetQuantize100()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantize100(const FVector3d& InVec) : FVector(InVec)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FVector_NetQuantizeNormal()"
  },
  {
    "label": "FVector_NetQuantizeNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVector_NetQuantizeNormal(EForceInit E) : FVector(E)"
  },
  {
    "label": "FVector_NetQuantizeNormal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantizeNormal(double InX, double InY, double InZ) : FVector(InX, InY, InZ)"
  },
  {
    "label": "FVector_NetQuantizeNormal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVector_NetQuantizeNormal(const FVector &InVec)"
  },
  {
    "label": "SerializeFixedVector()",
    "kind": "Method",
    "detail": "Function (bOutSuccess =)",
    "insertText": "SerializeFixedVector(*this, Ar)"
  },
  {
    "label": "CeilLogTwo()",
    "kind": "Method",
    "detail": "Function (const uint32 NumBits =)",
    "insertText": "CeilLogTwo(MaxNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ArrayNum = 0 ;)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ArrayNum = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "SerializeBits()",
    "kind": "Method",
    "detail": "Function (bOutSuccess = false ; ArrayNum = MaxNum ; } } Ar .)",
    "insertText": "SerializeBits(&ArrayNum, NumBits)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bOutSuccess = false ; ArrayNum = MaxNum ; } Array .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "AddDefaulted(ArrayNum)"
  },
  {
    "label": "SafeNetSerializeTArray_Default()",
    "kind": "Method",
    "detail": "Function (} return ArrayNum ; } template<int32 MaxNum,T,A> bool)",
    "insertText": "SafeNetSerializeTArray_Default(FArchive& Ar, TArray<T, A>& Array)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (bool bOutSuccess = true ; int32 ArrayNum = SafeNetSerializeTArray_HeaderOnly<MaxNum,T,)",
    "insertText": "A(Ar, Array, bOutSuccess)"
  },
  {
    "label": "IsError()",
    "kind": "Method",
    "detail": "Function (Ar<<Array [ idx ] ; } bOutSuccess& = ! Ar .)",
    "insertText": "IsError()"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (Array [ idx ] .)",
    "insertText": "NetSerialize(Ar, PackageMap, bOutSuccess)"
  }
]