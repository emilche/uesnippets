[
  {
    "label": "SAndroidWebBrowserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAndroidWebBrowserWidget"
  },
  {
    "label": "SWebBrowserView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWebBrowserView"
  },
  {
    "label": "FAndroidWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroidWebBrowserWindow"
  },
  {
    "label": "FWebBrowserSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserSingleton"
  },
  {
    "label": "FAndroidWebBrowserWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if USE_ANDROID_JNI # include \" IWebBrowserWindow . h \" # include \" Widgets / SWidget . h \" # include \" MobileJS / MobileJSScripting . h \" class SAndroidWebBrowserWidget ; class SWebBrowserView ; class FAndroidWebBrowserWindow : public IWebBrowserWindow,public TSharedFromThis<FAndroidWebBrowserWindow> { class FWebBrowserSingleton ; class SWebBrowserView ; class SAndroidWebBrowserWidget ; private :)",
    "insertText": "FAndroidWebBrowserWindow(FString Url, TOptional<FString> ContentsToLoad, bool bShowErrorMessage, bool bThumbMouseButtonNavigation, bool bUseTransparency, bool bJSBindingToLoweringEnabled, const FString& InUserAgentApplication)"
  },
  {
    "label": "CreateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateWidget()"
  },
  {
    "label": "FAndroidWebBrowserWindow()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FAndroidWebBrowserWindow()"
  },
  {
    "label": "LoadURL()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "LoadURL(FString NewURL)"
  },
  {
    "label": "LoadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadString(FString Contents, FString DummyURL)"
  },
  {
    "label": "SetViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSize(FIntPoint WindowSize, FIntPoint WindowPos)"
  },
  {
    "label": "GetViewportSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetViewportSize()"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResource*)",
    "insertText": "GetTexture(bool bIsPopup = false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "IsClosing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosing()"
  },
  {
    "label": "GetDocumentLoadingState()",
    "kind": "Method",
    "detail": "Function (EWebBrowserDocumentState)",
    "insertText": "GetDocumentLoadingState()"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTitle()"
  },
  {
    "label": "GetUrl()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUrl()"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSource(TFunction<void (const FString&)> Callback)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyDown(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyUp(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyChar(const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SetSupportsMouseWheel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportsMouseWheel(bool bValue)"
  },
  {
    "label": "GetSupportsMouseWheel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSupportsMouseWheel()"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent, bool bIsPopup)"
  },
  {
    "label": "OnFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocus(bool SetFocus, bool bIsPopup)"
  },
  {
    "label": "OnCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCaptureLost()"
  },
  {
    "label": "CanGoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoBack()"
  },
  {
    "label": "GoBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoBack()"
  },
  {
    "label": "CanGoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoForward()"
  },
  {
    "label": "GoForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoForward()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reload()"
  },
  {
    "label": "StopLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoad()"
  },
  {
    "label": "ExecuteJavascript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteJavascript(const FString& Script)"
  },
  {
    "label": "CloseBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseBrowser(bool bForce, bool bBlockTillClosed)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUObject(const FString& Name, UObject* Object, bool bIsPermanent = true)"
  },
  {
    "label": "UnbindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindUObject(const FString& Name, UObject* Object = nullptr, bool bIsPermanent = true)"
  },
  {
    "label": "GetLoadError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLoadError()"
  },
  {
    "label": "SetIsDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDisabled(bool bValue)"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "SetParentWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentWindow(TSharedPtr<SWindow> Window)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FAndroidWebBrowserWindow, IWebBrowserWindow::FOnDocumentStateChanged, FOnDocumentStateChanged)"
  },
  {
    "label": "OnDocumentStateChanged()",
    "kind": "Method",
    "detail": "Function (FOnDocumentStateChanged&)",
    "insertText": "OnDocumentStateChanged()"
  },
  {
    "label": "OnTitleChanged()",
    "kind": "Method",
    "detail": "Function (FOnTitleChanged&)",
    "insertText": "OnTitleChanged()"
  },
  {
    "label": "OnUrlChanged()",
    "kind": "Method",
    "detail": "Function (FOnUrlChanged&)",
    "insertText": "OnUrlChanged()"
  },
  {
    "label": "OnToolTip()",
    "kind": "Method",
    "detail": "Function (FOnToolTip&)",
    "insertText": "OnToolTip()"
  },
  {
    "label": "OnNeedsRedraw()",
    "kind": "Method",
    "detail": "Function (FOnNeedsRedraw&)",
    "insertText": "OnNeedsRedraw()"
  },
  {
    "label": "OnBeforePopup()",
    "kind": "Method",
    "detail": "Function (} FOnBeforePopupDelegate&)",
    "insertText": "OnBeforePopup()"
  },
  {
    "label": "OnShowPopup()",
    "kind": "Method",
    "detail": "Function (FOnShowPopup&)",
    "insertText": "OnShowPopup()"
  },
  {
    "label": "OnDismissPopup()",
    "kind": "Method",
    "detail": "Function (FOnDismissPopup&)",
    "insertText": "OnDismissPopup()"
  },
  {
    "label": "SetTickLastFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickLastFrame()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "SetTitle()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetTitle(const FString& InTitle)"
  },
  {
    "label": "OnTitleChanged()",
    "kind": "Method",
    "detail": "Function (Title = InTitle ;)",
    "insertText": "OnTitleChanged().Broadcast(Title)"
  },
  {
    "label": "NotifyDocumentError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyDocumentError(const FString& InCurrentUrl, int InErrorCode)"
  },
  {
    "label": "NotifyDocumentLoadingStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDocumentLoadingStateChange(const FString& InCurrentUrl, bool IsLoading)"
  },
  {
    "label": "OnJsMessageReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnJsMessageReceived(const FString& Command, const TArray<FString>& Params, const FString& Origin)"
  },
  {
    "label": "ConvertMouseEventToLocal()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ConvertMouseEventToLocal(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SAndroidWebBrowserWidget> BrowserWidget ; FString Title ; FString CurrentUrl ; TOptional<FString> ContentsToLoad ; FString UserAgentApplication ; bool bUseTransparency ; FOnDocumentStateChanged DocumentStateChangedEvent ; FOnTitleChanged TitleChangedEvent ; FOnUrlChanged UrlChangedEvent ; FOnToolTip ToolTipEvent ; FOnNeedsRedraw NeedsRedrawEvent ; FOnBeforeBrowse BeforeBrowseDelegate ; FOnLoadUrl LoadUrlDelegate ; FOnBeforePopupDelegate BeforePopupDelegate ; FOnBeforeResourceLoadDelegate BeforeResourceLoadDelegate ; FOnResourceLoadCompleteDelegate ResourceLoadCompleteDelegate ; FOnConsoleMessageDelegate ConsoleMessageDelegate ; FOnCreateWindow CreateWindowDelegate ; FOnCloseWindow CloseWindowDelegate ; FOnShowPopup ShowPopupEvent ; FOnDismissPopup DismissPopupEvent ; FOnShowDialog ShowDialogDelegate ; FOnDismissAllDialogs DismissAllDialogsDelegate ; FOnSuppressContextMenu SuppressContextMenuDelgate ; FOnUnhandledKeyDown UnhandledKeyDownDelegate ; FOnUnhandledKeyUp UnhandledKeyUpDelegate ; FOnUnhandledKeyChar UnhandledKeyCharDelegate ; FOnDragWindow DragWindowDelegate ; EWebBrowserDocumentState DocumentState ; int ErrorCode ; FMobileJSScriptingPtr Scripting ; TOptional<TFunction<)",
    "insertText": "void(const FString&)"
  }
]