[
  {
    "label": "FAsyncStatsWrite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncStatsWrite"
  },
  {
    "label": "FStatsReadFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsReadFile"
  },
  {
    "label": "TSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSet"
  },
  {
    "label": "TMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMap"
  },
  {
    "label": "EStatMagicNoHeader",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStatMagicNoHeader"
  },
  {
    "label": "EStatMagicWithHeader",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStatMagicWithHeader"
  },
  {
    "label": "EStatsFileConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatsFileConstants"
  },
  {
    "label": "FCompressedStatsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedStatsData"
  },
  {
    "label": "FStatsStreamHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsStreamHeader"
  },
  {
    "label": "FStatsFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsFrameInfo"
  },
  {
    "label": "FStatsWriteStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsWriteStream"
  },
  {
    "label": "IStatsWriteFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IStatsWriteFile"
  },
  {
    "label": "FStatsWriteFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsWriteFile"
  },
  {
    "label": "FRawStatsWriteFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawStatsWriteFile"
  },
  {
    "label": "FStatsLoadedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsLoadedState"
  },
  {
    "label": "FStatsReadStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsReadStream"
  },
  {
    "label": "FRawStatsFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawStatsFileInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncStatsFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncStatsFile"
  },
  {
    "label": "FStackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackState"
  },
  {
    "label": "FStatsReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatsReader"
  },
  {
    "label": "FCommandStatsFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommandStatsFile"
  },
  {
    "label": "FCompressedStatsData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" Containers / Array . h \" # include \" Containers / ChunkedArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / IDelegateInstance . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Misc / Compression . h \" # include \" Serialization / Archive . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Stats / StatsCommon . h \" # include \" Stats / StatsData . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FAsyncStatsWrite ; struct FStatsReadFile ; template<InElementType,KeyFuncs,Allocator> class TSet ; template<KeyType,ValueType,SetAllocator,KeyFuncs> class TMap ; # if STATS class FAsyncStatsWrite ; struct FStatsReadFile ; enum EStatMagicNoHeader : uint32 { MAGIC_NO_HEADER = 0 x7E1B83C1,MAGIC_NO_HEADER_SWAPPED = 0 xC1831B7E,NO_VERSION = 0,} ; enum EStatMagicWithHeader : uint32 { MAGIC = 0 x10293847,MAGIC_SWAPPED = 0 x47382910,VERSION_2 = 2,VERSION_3 = 3,VERSION_4 = 4,HAS_COMPRESSED_DATA_VER = VERSION_4,VERSION_5 = 5,VERSION_6 = 6,VERSION_LATEST = VERSION_6,} ; struct EStatsFileConstants { enum { MAX_COMPRESSED_SIZE = 1 0 2 4* 1 0 2 4,DUMMY_HEADER_SIZE = 1 0 2 4,END_OF_COMPRESSED_DATA = 0 xE0F0DA4A,NO_COMPRESSION = 0,} ; } ; struct FCompressedStatsData {)",
    "insertText": "FCompressedStatsData(TArray<uint8>& InSrcData, TArray<uint8>& InDestData ) : SrcData( InSrcData ) , DestData( InDestData ) , bEndOfCompressedData( false)"
  },
  {
    "label": "WriteEndOfCompressedData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteEndOfCompressedData(FArchive& Writer)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (int32 Marker = EStatsFileConstants::END_OF_COMPRESSED_DATA ;)",
    "insertText": "check(Writer.IsSaving())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Writer<<Marker<<Marker ; } protected : FArchive&)",
    "insertText": "operator(FArchive& Ar, FCompressedStatsData& Data)"
  },
  {
    "label": "WriteCompressed()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "WriteCompressed(Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "ReadCompressed()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "ReadCompressed(Ar)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(0)"
  },
  {
    "label": "WriteCompressed()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } void)",
    "insertText": "WriteCompressed(FArchive& Writer)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 UncompressedSize = SrcData .)",
    "insertText": "Num()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (int32 DisabledCompressionSize = EStatsFileConstants::NO_COMPRESSION ; Writer<<DisabledCompressionSize<<UncompressedSize ; Writer .)",
    "insertText": "Serialize(SrcData.GetData(), UncompressedSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} else { DestData .)",
    "insertText": "Reserve(EStatsFileConstants::MAX_COMPRESSED_SIZE)"
  },
  {
    "label": "CompressedSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompressedSize(int32)DestData.GetAllocatedSize()"
  },
  {
    "label": "CompressMemory()",
    "kind": "Method",
    "detail": "Function (const bool bResult =)",
    "insertText": "CompressMemory(NAME_Zlib, DestData.GetData(), CompressedSize, SrcData.GetData(), UncompressedSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Writer<<CompressedSize<<UncompressedSize ; Writer .)",
    "insertText": "Serialize(DestData.GetData(), CompressedSize)"
  },
  {
    "label": "ReadCompressed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReadCompressed(FArchive& Reader)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 CompressedSize = 0 ; int32 UncompressedSize = 0 ; Reader<<CompressedSize<<UncompressedSize ;)",
    "insertText": "if(CompressedSize == EStatsFileConstants::END_OF_COMPRESSED_DATA && UncompressedSize == EStatsFileConstants::END_OF_COMPRESSED_DATA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bEndOfCompressedData = true ; } else)",
    "insertText": "if(CompressedSize == 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (DestData .)",
    "insertText": "Reset(UncompressedSize)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (DestData .)",
    "insertText": "AddUninitialized(UncompressedSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "Serialize(DestData.GetData(), UncompressedSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { SrcData .)",
    "insertText": "Reset(CompressedSize)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (SrcData .)",
    "insertText": "AddUninitialized(CompressedSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "Serialize(SrcData.GetData(), CompressedSize)"
  },
  {
    "label": "UncompressMemory()",
    "kind": "Method",
    "detail": "Function (const bool bResult =)",
    "insertText": "UncompressMemory(NAME_Zlib, DestData.GetData(), UncompressedSize, SrcData.GetData(), CompressedSize)"
  },
  {
    "label": "HasReachedEndOfCompressedData()",
    "kind": "Method",
    "detail": "Function (} } public : const bool)",
    "insertText": "HasReachedEndOfCompressedData()"
  },
  {
    "label": "IsFinalized()",
    "kind": "Method",
    "detail": "Function (} uint32 Version ; FString PlatformName ; uint64 FrameTableOffset ; uint64 FNameTableOffset ; uint64 NumFNames ; uint64 MetadataMessagesOffset ; uint64 NumMetadataMessages ; bool bRawStatsFile ; bool)",
    "insertText": "IsFinalized()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . Version ;)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "SerializeAsANSICharArray()",
    "kind": "Method",
    "detail": "Function (Header . PlatformName .)",
    "insertText": "SerializeAsANSICharArray(Ar, 255)"
  },
  {
    "label": "FStatsFrameInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . PlatformName ; } Ar<<Header . FrameTableOffset ; Ar<<Header . FNameTableOffset<<Header . NumFNames ; Ar<<Header . MetadataMessagesOffset<<Header . NumMetadataMessages ; Ar<<Header . bRawStatsFile ; return Ar ; } } ; struct FStatsFrameInfo {)",
    "insertText": "FStatsFrameInfo() : FrameFileOffset(0)"
  },
  {
    "label": "FStatsFrameInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStatsFrameInfo(int64 InFrameFileOffset ) : FrameFileOffset(InFrameFileOffset)"
  },
  {
    "label": "FStatsFrameInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStatsFrameInfo(int64 InFrameFileOffset, TMap<uint32, int64>& InThreadCycles ) : FrameFileOffset(InFrameFileOffset) , ThreadCycles(InThreadCycles)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FStatsFrameInfo& Data)"
  },
  {
    "label": "WriteMetadata()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . ThreadCycles<<Data . FrameFileOffset ; return Ar ; } int64 FrameFileOffset ; TMap<uint32,int64> ThreadCycles ; } ; struct FStatsWriteStream { protected : void)",
    "insertText": "WriteMetadata(FArchive& Ar)"
  },
  {
    "label": "WriteCondensedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCondensedMessages(FArchive& Ar, int64 TargetFrame)"
  },
  {
    "label": "GetRawName()",
    "kind": "Method",
    "detail": "Function (FName RawName = NameAndInfo .)",
    "insertText": "GetRawName()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool bSendFName = ! FNamesSent .)",
    "insertText": "Contains(RawName.GetComparisonIndex())"
  },
  {
    "label": "GetComparisonIndex()",
    "kind": "Method",
    "detail": "Function (int32 ComparisonInt = RawName .)",
    "insertText": "GetComparisonIndex().ToUnstableInt()"
  },
  {
    "label": "GetRawNumber()",
    "kind": "Method",
    "detail": "Function (Ar<<ComparisonInt ; int32 Number = NameAndInfo .)",
    "insertText": "GetRawNumber()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FNamesSent .)",
    "insertText": "Add(RawName.GetComparisonIndex())"
  },
  {
    "label": "SendingFName()",
    "kind": "Method",
    "detail": "Function (Number | =)",
    "insertText": "SendingFName(EStatMetaFlags::Shift + EStatAllFields::StartShift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Ar<<Number ;)",
    "insertText": "if(bSendFName)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString Name = RawName .)",
    "insertText": "ToString()"
  },
  {
    "label": "WriteMessage()",
    "kind": "Method",
    "detail": "Function (Ar<<Name ; } } FORCEINLINE_STATS void)",
    "insertText": "WriteMessage(FArchive& Ar, FStatMessage const& Item)"
  },
  {
    "label": "WriteFName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFName(Ar, Item.NameAndInfo)"
  },
  {
    "label": "GetValue_double()",
    "kind": "Method",
    "detail": "Function (Ar<<Payload ; break ; } case EStatDataType::ST_double : { double Payload = Item .)",
    "insertText": "GetValue_double()"
  },
  {
    "label": "WriteFName()",
    "kind": "Method",
    "detail": "Function (Ar<<Payload ; break ; } case EStatDataType::ST_FName : {)",
    "insertText": "WriteFName(Ar, FStatNameAndInfo( Item.GetValue_FName(), false ))"
  },
  {
    "label": "GetValue_Ptr()",
    "kind": "Method",
    "detail": "Function (break ; } case EStatDataType::ST_Ptr : { uint64 Payload = Item .)",
    "insertText": "GetValue_Ptr()"
  },
  {
    "label": "IStatsWriteFile()",
    "kind": "Method",
    "detail": "Function (Ar<<Payload ; break ; } } } TSet<FNameEntryId> FNamesSent ; TArray<uint8> OutData ; } ; struct IStatsWriteFile : public FStatsWriteStream { class FAsyncStatsWrite ; protected : FArchive* File ; FString ArchiveFilename ; FStatsStreamHeader Header ; FAsyncTask<FAsyncStatsWrite>* AsyncTask ; TArray<uint8> CompressedData ; TArray<FStatsFrameInfo> FramesInfo ; FDelegateHandle DataDelegateHandle ; int64 FileSize ; double StartTime ; protected :)",
    "insertText": "IStatsWriteFile()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const FString& InFilename)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetFileMetaDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFileMetaDesc()"
  },
  {
    "label": "SetDataDelegate()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetDataDelegate(bool bSet)"
  },
  {
    "label": "FinalizeSavingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSavingData(int64 FrameFileOffset)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Finalize()"
  },
  {
    "label": "WaitTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitTask()"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTask()"
  },
  {
    "label": "FStatsWriteFile()",
    "kind": "Method",
    "detail": "Function (} ; struct FStatsWriteFile : public IStatsWriteFile { class FAsyncStatsWrite ; protected : TMap<uint32,int64> ThreadCycles ; public :)",
    "insertText": "FStatsWriteFile()"
  },
  {
    "label": "WriteFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFrame(int64 TargetFrame)"
  },
  {
    "label": "FRawStatsWriteFile()",
    "kind": "Method",
    "detail": "Function (} ; struct FRawStatsWriteFile : public IStatsWriteFile { bool bWrittenOffsetToData ; public :)",
    "insertText": "FRawStatsWriteFile() : bWrittenOffsetToData(false)"
  },
  {
    "label": "WriteRawStatPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRawStatPacket(const FStatPacket* StatPacket)"
  },
  {
    "label": "WriteStatPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStatPacket(FArchive& Ar, FStatPacket& StatPacket)"
  },
  {
    "label": "FStatsLoadedState()",
    "kind": "Method",
    "detail": "Function (} ; class FStatsLoadedState : public FStatsThreadState { struct FStatsReadFile ; public :)",
    "insertText": "FStatsLoadedState() : MaxFrameSeen( 0 ) , MinFrameSeen( -1)"
  },
  {
    "label": "ProcessMetaDataAndLeaveDataOnly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessMetaDataAndLeaveDataOnly(TArray<FStatMessage>& CondensedMessages)"
  },
  {
    "label": "AddFrameFromCondensedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFrameFromCondensedMessages(TArray<FStatMessage>& CondensedMessages)"
  },
  {
    "label": "GetOldestValidFrame()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetOldestValidFrame()"
  },
  {
    "label": "GetLatestValidFrame()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetLatestValidFrame()"
  },
  {
    "label": "AdvanceFrameForLoad()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AdvanceFrameForLoad(TArray<FStatMessage>& CondensedMessages)"
  },
  {
    "label": "ReadHeader()",
    "kind": "Method",
    "detail": "Function (int64 MaxFrameSeen ; int64 MinFrameSeen ; } ; struct FStatsReadStream { public : FStatsStreamHeader Header ; TMap<int32,FNameEntryId> FNamesIndexMap ; TArray<FStatsFrameInfo> FramesInfo ; bool)",
    "insertText": "ReadHeader(FArchive& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bStatWithHeader = false ; uint32 Magic = 0 ; Ar<<Magic ;)",
    "insertText": "if(Magic == EStatMagicNoHeader::MAGIC_NO_HEADER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Magic == EStatMagicNoHeader::MAGIC_NO_HEADER_SWAPPED)"
  },
  {
    "label": "SetByteSwapping()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetByteSwapping(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Magic == EStatMagicWithHeader::MAGIC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bStatWithHeader = true ; } else)",
    "insertText": "if(Magic == EStatMagicWithHeader::MAGIC_SWAPPED)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { return false ; })",
    "insertText": "if(bStatWithHeader)"
  },
  {
    "label": "ReadStatPacket()",
    "kind": "Method",
    "detail": "Function (Ar<<Header ; } return true ; } void)",
    "insertText": "ReadStatPacket(FArchive& Ar, FStatPacket& StatPacked)"
  },
  {
    "label": "ThreadType()",
    "kind": "Method",
    "detail": "Function (Ar<<StatPacked . Frame ; Ar<<StatPacked . ThreadId ; int32 MyThreadType = 0 ; Ar<<MyThreadType ; StatPacked .)",
    "insertText": "ThreadType(EThreadType::Type)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Ar<<StatPacked . bBrokenCallstacks ; int32 NumMessages = 0 ; Ar<<NumMessages ; StatPacked . StatMessages .)",
    "insertText": "Reserve(NumMessages)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(StatPacked.StatMessages) FStatMessage( ReadMessage( Ar, true ))"
  },
  {
    "label": "ReadFName()",
    "kind": "Method",
    "detail": "Function (} } FORCEINLINE_STATS FStatNameAndInfo)",
    "insertText": "ReadFName(FArchive& Ar, bool bHasFNameMap)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ; Ar<<Index ; int32 Number = 0 ; Ar<<Number ; FName TheFName ;)",
    "insertText": "if(!bHasFNameMap)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FString Name ; Ar<<Name ; TheFName =)",
    "insertText": "FName(*Name)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FNamesIndexMap .)",
    "insertText": "Add(Index, TheFName.GetComparisonIndex())"
  },
  {
    "label": "Number()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Number(EStatMetaFlags::SendingFName << (EStatMetaFlags::Shift + EStatAllFields::StartShift))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(FNamesIndexMap.Contains( Index ))"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (const FNameEntryId MyIndex = FNamesIndexMap .)",
    "insertText": "FindChecked(Index)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (TheFName =)",
    "insertText": "FName(MyIndex, MyIndex, 0)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} else { TheFName =)",
    "insertText": "FName(TEXT( \"Unknown FName\" ))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Number = 0 ;)",
    "insertText": "UE_LOG(LogTemp, Warning, TEXT( \"Missing FName Indexed: %d, %d\" ), Index, Number)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(Number & (EStatMetaFlags::SendingFName << (EStatMetaFlags::Shift + EStatAllFields::StartShift)))"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} } FStatNameAndInfo)",
    "insertText": "Result(TheFName, false)"
  },
  {
    "label": "SetNumberDirect()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetNumberDirect(Number)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FStatMessage)",
    "insertText": "Result(ReadFName( Ar, bHasFNameMap ))"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Clear()"
  },
  {
    "label": "Payload()",
    "kind": "Method",
    "detail": "Function (break ; } case EStatDataType::ST_FName : { FStatNameAndInfo)",
    "insertText": "Payload(ReadFName( Ar, bHasFNameMap ))"
  },
  {
    "label": "GetValue_FMinimalName()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "GetValue_FMinimalName() = NameToMinimalName( Payload.GetRawName())"
  },
  {
    "label": "ReadFramesOffsets()",
    "kind": "Method",
    "detail": "Function (break ; } } return Result ; } void)",
    "insertText": "ReadFramesOffsets(FArchive& Ar)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Seek(Header.FrameTableOffset)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Seek(Header.FNameTableOffset)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (out_MetadataMessages .)",
    "insertText": "Reserve((int32)Header.NumFNames)"
  },
  {
    "label": "ReadFName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFName(Ar, false)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "Seek(Header.MetadataMessagesOffset)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (out_MetadataMessages .)",
    "insertText": "Reserve((int32)Header.NumMetadataMessages)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (out_MetadataMessages .)",
    "insertText": "Add(ReadMessage( Ar, false ))"
  },
  {
    "label": "ReadFNamesAndMetadataMessages()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReadFNamesAndMetadataMessages(FArchive& Ar, TArray64<FStatMessage>& out_MetadataMessages)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (out_MetadataMessages .)",
    "insertText": "Reserve(Header.NumFNames)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (out_MetadataMessages .)",
    "insertText": "Reserve(Header.NumMetadataMessages)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (out_MetadataMessages .)",
    "insertText": "Add(ReadMessage(Ar, false))"
  },
  {
    "label": "FRawStatsFileInfo()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FRawStatsFileInfo {)",
    "insertText": "FRawStatsFileInfo() : TotalPacketsSize( 0 ) , TotalStatMessagesNum( 0 ) , MaximumPacketSize( 0 ) , TotalPacketsNum( 0)"
  },
  {
    "label": "FAsyncStatsFile()",
    "kind": "Method",
    "detail": "Function (} int32 TotalPacketsSize ; int32 TotalStatMessagesNum ; int32 MaximumPacketSize ; int32 TotalPacketsNum ; } ; enum class EStatsProcessingStage : int32 { SPS_Started = 0,SPS_ReadStats,SPS_PreProcessStats,SPS_ProcessStats,SPS_PostProcessStats,SPS_Finished,SPS_Stopped,SPS_Invalid,} ; class FAsyncStatsFile { FStatsReadFile* Owner ; public :)",
    "insertText": "FAsyncStatsFile(FStatsReadFile* InOwner)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "CanAbandon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanAbandon()"
  },
  {
    "label": "FStackState()",
    "kind": "Method",
    "detail": "Function (} ; struct FStackState {)",
    "insertText": "FStackState() : bIsBrokenCallstack( false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TArray<FName> Stack ; FName Current ; bool bIsBrokenCallstack ; } ; template<T> struct FStatsReader { T*)",
    "insertText": "Create(const TCHAR* Filename)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* StatsReadFile = new)",
    "insertText": "T(Filename)"
  },
  {
    "label": "PrepareLoading()",
    "kind": "Method",
    "detail": "Function (const bool bValid = StatsReadFile ->)",
    "insertText": "PrepareLoading()"
  },
  {
    "label": "ReadAndProcessSynchronously()",
    "kind": "Method",
    "detail": "Function (delete StatsReadFile ; } return bValid ? StatsReadFile : nullptr ; } } ; struct FStatsReadFile { class FAsyncStatsFile ; struct FStatsReader<FStatsReadFile> ; const double NumSecondsBetweenUpdates ; public : void)",
    "insertText": "ReadAndProcessSynchronously()"
  },
  {
    "label": "ReadAndProcessAsynchronously()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAndProcessAsynchronously()"
  },
  {
    "label": "SetHistoryFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHistoryFrames(int32 InHistoryFrames)"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "FStatsReadFile()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FStatsReadFile()"
  },
  {
    "label": "ReadStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadStats()"
  },
  {
    "label": "ReadRawStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadRawStats()"
  },
  {
    "label": "ReadRegularStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadRegularStats()"
  },
  {
    "label": "PreProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreProcessStats()"
  },
  {
    "label": "ProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessStats()"
  },
  {
    "label": "ReadStatsFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadStatsFrame(const TArray<FStatMessage>& CondensedMessages, const int64 Frame)"
  },
  {
    "label": "PostProcessStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostProcessStats()"
  },
  {
    "label": "ProcessAdvanceFrameEventGameThreadOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAdvanceFrameEventGameThreadOperation(const FStatMessage& Message, const FStackState& StackState)"
  },
  {
    "label": "ProcessAdvanceFrameEventRenderThreadOperation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessAdvanceFrameEventRenderThreadOperation(const FStatMessage& Message, const FStackState& StackState)"
  },
  {
    "label": "ProcessCycleScopeStartOperation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessCycleScopeStartOperation(const FStatMessage& Message, const FStackState& StackState)"
  },
  {
    "label": "ProcessCycleScopeEndOperation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessCycleScopeEndOperation(const FStatMessage& Message, const FStackState& StackState)"
  },
  {
    "label": "ProcessSpecialMessageMarkerOperation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessSpecialMessageMarkerOperation(const FStatMessage& Message, const FStackState& StackState)"
  },
  {
    "label": "ProcessMemoryOperation()",
    "kind": "Method",
    "detail": "Function (} # if UE_STATS_MEMORY_PROFILER_ENABLED void)",
    "insertText": "ProcessMemoryOperation(EMemoryOperation MemOp, uint64 Ptr, uint64 NewPtr, int64 Size, uint32 SequenceTag, const FStackState& StackState)"
  },
  {
    "label": "SetProcessingStage()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetProcessingStage(EStatsProcessingStage NewStage)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (ProcessingStage .)",
    "insertText": "Set(int32( NewStage ))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (StageProgress .)",
    "insertText": "Set(0)"
  },
  {
    "label": "GetProcessingStage()",
    "kind": "Method",
    "detail": "Function (} } public : const EStatsProcessingStage)",
    "insertText": "GetProcessingStage()"
  },
  {
    "label": "IsProcessingStopped()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsProcessingStopped()"
  },
  {
    "label": "GetProcessingStageAsString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetProcessingStageAsString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Result ;)",
    "insertText": "if(Stage== EStatsProcessingStage::SPS_Started)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_Started\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_ReadStats)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_ReadStats\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_PreProcessStats)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_PreProcessStats\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_ProcessStats)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_ProcessStats\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_PostProcessStats)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_PostProcessStats\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_Finished)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_Finished\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_Stopped)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_Stopped\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Stage == EStatsProcessingStage::SPS_Invalid)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TEXT(\"SPS_Invalid\")"
  },
  {
    "label": "GetStageProgress()",
    "kind": "Method",
    "detail": "Function (} return Result ; } int32)",
    "insertText": "GetStageProgress()"
  },
  {
    "label": "IsBusy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBusy()"
  },
  {
    "label": "RequestStop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestStop()"
  },
  {
    "label": "UpdateReadStageProgress()",
    "kind": "Method",
    "detail": "Function (bShouldStopProcessing = true ; } protected : void)",
    "insertText": "UpdateReadStageProgress()"
  },
  {
    "label": "UpdateCombinedHistoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCombinedHistoryStats()"
  },
  {
    "label": "UpdateProcessStageProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProcessStageProgress(const int32 CurrentStatMessageIndex, const int32 FrameIndex, const int32 PacketIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (protected : FStatsLoadedState State ; FStatsReadStream Stream ; FStatsStreamHeader& Header ; FArchive* Reader ; FAsyncTask<FAsyncStatsFile>* AsyncWork ; FRawStatsFileInfo FileInfo ; TMap<int32,FStatPacketArray> CombinedHistory ; TArray<int32> Frames ; TSet<FName> UObjectRawNames ; FThreadSafeCounter ProcessingStage ; FThreadSafeCounter StageProgress ; FThreadSafeBool bShouldStopProcessing ; double LastUpdateTime ; const FString Filename ; int32 NumFrames ; const bool bRawStatsFile ; } ; struct FCommandStatsFile { FCommandStatsFile&)",
    "insertText": "Get()"
  },
  {
    "label": "FCommandStatsFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCommandStatsFile() : FirstFrame(-1) , CurrentStatsFile(nullptr)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const FString& Filename)"
  },
  {
    "label": "StartRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRaw(const FString& Filename)"
  },
  {
    "label": "TestLastSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLastSaved()"
  },
  {
    "label": "IsStatFileActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStatFileActive()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FText()"
  }
]