[
  {
    "label": "LargerIntImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LargerIntImpl"
  },
  {
    "label": "LargerInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LargerInt"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "name"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_SAFE_COMPARE_H_ # define RTC_BASE_NUMERICS_SAFE_COMPARE_H_ # include<stddef . h> # include<stdint . h> # include<type_traits> # include<utility> # include \" rtc_base / type_traits . h \" namespace rtc { namespace safe_cmp_impl { template<size_t N> struct LargerIntImpl : std::false_type { } ; template<> struct LargerIntImpl<)",
    "insertText": "sizeof(int8_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using type = int16_t ; } ; template<> struct LargerIntImpl<)",
    "insertText": "sizeof(int16_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using type = int32_t ; } ; template<> struct LargerIntImpl<)",
    "insertText": "sizeof(int32_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using type = int64_t ; } ; template<T1,T2> struct LargerInt : LargerIntImpl<)",
    "insertText": "sizeof(T1) < sizeof(T2) || sizeof(T1) < sizeof(int*) ? sizeof(T1)"
  },
  {
    "label": "MakeUnsigned()",
    "kind": "Method",
    "detail": "Function (} ; template<T> std::make_unsigned<T>::type)",
    "insertText": "MakeUnsigned(T a)"
  },
  {
    "label": "Cmp()",
    "kind": "Method",
    "detail": "Function (} template<Op,T1,T2,std::enable_if<std::is_signed<T1>::value = = std::is_signed<T2>::value>::type* = nullptr> bool)",
    "insertText": "Cmp(T1 a, T2 b)"
  },
  {
    "label": "RTC_SAFECMP_MAKE_OP()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "RTC_SAFECMP_MAKE_OP(name, op)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ template<T1,T2> \\ bool)",
    "insertText": "Op(T1 a, T2 b)"
  },
  {
    "label": "RTC_SAFECMP_MAKE_OP()",
    "kind": "Method",
    "detail": "Function (\\ return a op b ; \\ } \\ } ;)",
    "insertText": "RTC_SAFECMP_MAKE_OP(EqOp, ==) RTC_SAFECMP_MAKE_OP(NeOp, !=) RTC_SAFECMP_MAKE_OP(LtOp, <) RTC_SAFECMP_MAKE_OP(LeOp, <=) RTC_SAFECMP_MAKE_OP(GtOp, >) RTC_SAFECMP_MAKE_OP(GeOp, >=) #undef RTC_SAFECMP_MAKE_OP } #define RTC_SAFECMP_MAKE_FUN(name) \\ template <typename T1, typename T2> \\ constexpr \\ typename std::enable_if<IsIntlike<T1>::value && IsIntlike<T2>::value, \\ bool>::type Safe##name(T1 a, T2 b)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ \\ return safe_cmp_impl::Cmp<safe_cmp_impl::name # #)",
    "insertText": "Op(+a, +b)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ template<T1,T2> \\ \\ std::enable_if<! IsIntlike<T1>::value | | ! IsIntlike<T2>::value,\\ bool>::type Safe # #)",
    "insertText": "name(const T1& a, \\ const T2& b)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ return safe_cmp_impl::name # #)",
    "insertText": "Op(a, b)"
  }
]