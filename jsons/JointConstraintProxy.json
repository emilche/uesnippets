[
  {
    "label": "FJointConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointConstraint"
  },
  {
    "label": "FPBDRigidsEvolutionGBF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionGBF"
  },
  {
    "label": "FDirtyJointConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyJointConstraintData"
  },
  {
    "label": "TThreadedJointConstraintPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TThreadedJointConstraintPhysicsProxyBase"
  },
  {
    "label": "FJointConstraintPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointConstraintPhysicsProxy"
  },
  {
    "label": "FJointConstraintPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / Framework / MultiBufferResource . h \" # include \" Chaos / Framework / PhysicsProxy . h \" # include \" Chaos / PBDJointConstraints . h \" # include \" Chaos / GeometryParticlesfwd . h \" # include \" Chaos / ParticleHandle . h \" # include \" PhysicsCoreTypes . h \" # include \" Chaos / Defines . h \" # include \" JointConstraintProxyFwd . h \" # include \" Framework / Threading . h \" # include \" Chaos / PBDJointConstraintData . h \" # include \" RewindData . h \" namespace Chaos { class FJointConstraint ; class FPBDRigidsEvolutionGBF ; struct FDirtyJointConstraintData ; template<bool bExternal> class TThreadedJointConstraintPhysicsProxyBase ; using FJointConstraintHandle_External = TThreadedJointConstraintPhysicsProxyBase<true> ; using FJointConstraintHandle_Internal = TThreadedJointConstraintPhysicsProxyBase<false> ; class FJointConstraintPhysicsProxy : public IPhysicsProxyBase { using Base = IPhysicsProxyBase ; public :)",
    "insertText": "FJointConstraintPhysicsProxy()"
  },
  {
    "label": "FJointConstraintPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJointConstraintPhysicsProxy(FJointConstraint* InConstraint, FPBDJointConstraintHandle* InHandle, UObject* InOwner = nullptr)"
  },
  {
    "label": "GetParticleHandleFromProxy()",
    "kind": "Method",
    "detail": "Function (FGeometryParticleHandle*)",
    "insertText": "GetParticleHandleFromProxy(IPhysicsProxyBase* ProxyBase)"
  },
  {
    "label": "InitializeOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOnPhysicsThread(FPBDRigidsSolver* InSolver, FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "PushStateOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateOnGameThread(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "PushStateOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateOnPhysicsThread(FPBDRigidsSolver* InSolver, const FDirtyPropertiesManager& Manager, int32 DataIdx, const FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "DestroyOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOnPhysicsThread(FPBDRigidsSolver* InSolver)"
  },
  {
    "label": "DestroyOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOnGameThread()"
  },
  {
    "label": "GetGameThreadAPI()",
    "kind": "Method",
    "detail": "Function (} const Chaos::FJointConstraintHandle_External&)",
    "insertText": "GetGameThreadAPI()"
  },
  {
    "label": "GetPhysicsThreadAPI()",
    "kind": "Method",
    "detail": "Function (} Chaos::FJointConstraintHandle_Internal*)",
    "insertText": "GetPhysicsThreadAPI()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FPBDJointConstraintHandle*)",
    "insertText": "GetHandle()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (Constraint_PT = InHandle ; } FJointConstraint*)",
    "insertText": "GetConstraint()"
  },
  {
    "label": "PullFromPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullFromPhysicsState(const FDirtyJointConstraintData& Buffer, const int32 SolverSyncTimestamp)"
  },
  {
    "label": "CHAOS_INNER_JOINT_PROPERTY()",
    "kind": "Method",
    "detail": "Function (private : FJointConstraint* Constraint_GT ; FPBDJointConstraintHandle* Constraint_PT ; FParticlePair OriginalParticleHandles_PT ; bool bInitialized = false ; } ; template<bool bExternal> class TThreadedJointConstraintPhysicsProxyBase : protected FJointConstraintPhysicsProxy { public : # define)",
    "insertText": "CHAOS_INNER_JOINT_PROPERTY(OuterProp, FuncName, Inner, InnerType)\\ const InnerType& Get##FuncName()"
  },
  {
    "label": "FuncName()",
    "kind": "Method",
    "detail": "Function (} \\ void Set # #)",
    "insertText": "FuncName(const InnerType& Val)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write([&Val](auto& Data){ Data.Inner = Val;})"
  },
  {
    "label": "VerifyContext()",
    "kind": "Method",
    "detail": "Function (} \\ # include \" Chaos / JointProperties . inl \" private : void)",
    "insertText": "VerifyContext()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PHYSICS_THREAD_CONTEXT)",
    "insertText": "if(bExternal)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "ensure(IsInPhysicsThreadContext())"
  },
  {
    "label": "ReadRef()",
    "kind": "Method",
    "detail": "Function (} # endif } template<TLambda> const auto&)",
    "insertText": "ReadRef(const TLambda& Lambda)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} template<TLambda> void)",
    "insertText": "Write(const TLambda& Lambda)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(GetConstraint())"
  },
  {
    "label": "GetSolverBase()",
    "kind": "Method",
    "detail": "Function (} else { FPhysicsSolverBase* SolverBase =)",
    "insertText": "GetSolverBase()"
  },
  {
    "label": "MarkDirtyJointFromPT()",
    "kind": "Method",
    "detail": "Function (RewindData ->)",
    "insertText": "MarkDirtyJointFromPT(*GetHandle())"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Lambda(GetHandle())"
  }
]