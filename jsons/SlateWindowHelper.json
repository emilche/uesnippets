[
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "FSlateWindowHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowHelper"
  },
  {
    "label": "ArrangeWindowToFront()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SWindow . h \" class FWidgetPath ; class FSlateWindowHelper { public : void)",
    "insertText": "ArrangeWindowToFront(TArray<TSharedRef<SWindow>>& Windows, const TSharedRef<SWindow>& WindowToBringToFront)"
  },
  {
    "label": "BringWindowToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringWindowToFront(TArray<TSharedRef<SWindow>>& Windows, const TSharedRef<SWindow>& BringMeToFront)"
  },
  {
    "label": "CheckWorkAreaForWindows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckWorkAreaForWindows(const TArray< TSharedRef<SWindow> >& WindowsToSearch, const FSlateRect& WorkAreaRect)"
  },
  {
    "label": "ContainsWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsWindow(const TArray<TSharedRef<SWindow>>& WindowsToSearch, const TSharedRef<SWindow>& WindowToFind)"
  },
  {
    "label": "FindPathToWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPathToWidget(const TArray<TSharedRef<SWindow>>& WindowsToSearch, TSharedRef<const SWidget> InWidget, FWidgetPath& OutWidgetPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "FindWindowByPlatformWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindWindowByPlatformWindow(const TArray<TSharedRef<SWindow>>& WindowsToSearch, const TSharedRef<FGenericWindow>& PlatformWindow)"
  },
  {
    "label": "RemoveWindowFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWindowFromList(TArray<TSharedRef<SWindow>>& Windows, const TSharedRef<SWindow>& WindowToRemove)"
  },
  {
    "label": "BringToFrontInParent()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWindow>)",
    "insertText": "BringToFrontInParent(const TSharedRef<SWindow>& WindowToBringToFront)"
  }
]