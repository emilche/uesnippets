[
  {
    "label": "FRHIResourceReplaceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIResourceReplaceInfo"
  },
  {
    "label": "TPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPair"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHIResourceReplaceBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIResourceReplaceBatcher"
  },
  {
    "label": "TPair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIFwd . h \" # include \" RHIResources . h \" # include \" Containers / Array . h \" # include \" Misc / TVariant . h \" class FRHIResourceReplaceInfo { public : template<TType> struct TPair { TType* Dst ; TType* Src ;)",
    "insertText": "TPair(TType* Dst, TType* Src) : Dst(Dst) , Src(Src)"
  },
  {
    "label": "FBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TPair<FRHIBuffer> FBuffer ; typedef TPair<FRHIRayTracingGeometry> FRTGeometry ; typedef TVariant<FBuffer,FRTGeometry> TStorage ; enum class EType : uint8 { Buffer = TStorage::IndexOfType<)",
    "insertText": "FBuffer(), RTGeometry = TStorage::IndexOfType<FRTGeometry>()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (} FBuffer const&)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "GetRTGeometry()",
    "kind": "Method",
    "detail": "Function (} FRTGeometry const&)",
    "insertText": "GetRTGeometry()"
  },
  {
    "label": "FRHIResourceReplaceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIResourceReplaceInfo(FRHIBuffer* Dst, FRHIBuffer* Src) : Storage(TInPlaceType<FBuffer>(), Dst, Src)"
  },
  {
    "label": "FRHIResourceReplaceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIResourceReplaceInfo(FRHIRayTracingGeometry* Dst, FRHIRayTracingGeometry* Src) : Storage(TInPlaceType<FRTGeometry>(), Dst, Src)"
  },
  {
    "label": "FRHIResourceReplaceBatcher()",
    "kind": "Method",
    "detail": "Function (} private : TStorage Storage ; } ; class FRHIResourceReplaceBatcher { FRHICommandListBase& RHICmdList ; TArray<FRHIResourceReplaceInfo> Infos ; public :)",
    "insertText": "FRHIResourceReplaceBatcher(FRHICommandListBase& RHICmdList, uint32 InitialCapacity = 0) : RHICmdList(RHICmdList)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Infos .)",
    "insertText": "Reserve(InitialCapacity)"
  },
  {
    "label": "FRHIResourceReplaceBatcher()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FRHIResourceReplaceBatcher()"
  },
  {
    "label": "EnqueueReplace()",
    "kind": "Method",
    "detail": "Function (template<. . . TArgs> void)",
    "insertText": "EnqueueReplace(TArgs&&... Args)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Infos .)",
    "insertText": "Emplace(Forward<TArgs>(Args)...)"
  }
]