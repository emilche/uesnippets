[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "FbxDualQuaternion()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_MATH_DUAL_QUATERNION_H_ # define _FBXSDK_CORE_MATH_DUAL_QUATERNION_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / math / fbxquaternion . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxDualQuaternion { public :)",
    "insertText": "FbxDualQuaternion()"
  },
  {
    "label": "FbxDualQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDualQuaternion(const FbxQuaternion& pV1, const FbxQuaternion& pV2)"
  },
  {
    "label": "FbxDualQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDualQuaternion(const FbxDualQuaternion& pV)"
  },
  {
    "label": "FbxDualQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDualQuaternion(const FbxQuaternion& pRotation, const FbxVector4& pTranslation)"
  },
  {
    "label": "FbxDualQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDualQuaternion(double pX1, double pY1, double pZ1, double pW1, double pX2, double pY2, double pZ2, double pW2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxDualQuaternion&)",
    "insertText": "operator(const FbxDualQuaternion& pDualQuaternion)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(double pX1, double pY1, double pZ1, double pW1, double pX2, double pY2, double pZ2, double pW2)"
  },
  {
    "label": "GetFirstQuaternion()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion&)",
    "insertText": "GetFirstQuaternion()"
  },
  {
    "label": "GetSecondQuaternion()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion&)",
    "insertText": "GetSecondQuaternion()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion)",
    "insertText": "GetRotation()"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxDualQuaternion)",
    "insertText": "operator(double pValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxDualQuaternion)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxDualQuaternion)",
    "insertText": "operator(const FbxVector4 pVector)"
  },
  {
    "label": "Product()",
    "kind": "Method",
    "detail": "Function (FbxDualQuaternion)",
    "insertText": "Product(const FbxDualQuaternion& pDualQuaternion)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Inverse()"
  },
  {
    "label": "Deform()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "Deform(FbxVector4& pPoint)"
  },
  {
    "label": "Conjugate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conjugate()"
  },
  {
    "label": "Dual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dual()"
  },
  {
    "label": "DualConjugate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DualConjugate()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FbxDualQuaternion & pV)"
  }
]