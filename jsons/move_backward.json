[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_BidirectionalIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator1"
  },
  {
    "label": "_BidirectionalIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MOVE_BACKWARD_H # define _LIBCPP___ALGORITHM_MOVE_BACKWARD_H # include<__algorithm / iterator_operations . h> # include<__algorithm / unwrap_iter . h> # include<__config> # include<__utility / move . h> # include<cstring> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _InputIterator, class _OutputIterator> inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 _OutputIterator __move_backward_constexpr(_InputIterator __first, _InputIterator __last, _OutputIterator __result)"
  },
  {
    "label": "__move_backward_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 enable_if<is_same<remove_const<_Tp>::type,_Up>::value&& is_trivially_move_assignable<_Up>::value,_Up*>::type)",
    "insertText": "__move_backward_impl(_Tp* __first, _Tp* __last, _Up* __result)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t __n = static_cast<)",
    "insertText": "size_t(__last - __first)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (__result - = __n ;)",
    "insertText": "memmove(__result, __first, __n * sizeof(_Up))"
  },
  {
    "label": "__move_backward()",
    "kind": "Method",
    "detail": "Function (} return __result ; } template<class _AlgPolicy,class _BidirectionalIterator1,class _BidirectionalIterator2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _BidirectionalIterator2)",
    "insertText": "__move_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result)"
  },
  {
    "label": "__rewrap_iter()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__rewrap_iter(__result, _VSTD::__move_backward_impl<_AlgPolicy>(_VSTD::__unwrap_iter(__first), _VSTD::__unwrap_iter(__last), _VSTD::__unwrap_iter(__result)))"
  },
  {
    "label": "move_backward()",
    "kind": "Method",
    "detail": "Function (} } template<class _BidirectionalIterator1,class _BidirectionalIterator2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _BidirectionalIterator2)",
    "insertText": "move_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last, _BidirectionalIterator2 __result)"
  }
]