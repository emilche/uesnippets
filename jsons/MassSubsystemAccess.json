[
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "FMassSubsystemAccess()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassEntityTypes . h \" # include \" MassRequirements . h \" # include \" Subsystems / EngineSubsystem . h \" # include \" Subsystems / GameInstanceSubsystem . h \" # include \" Subsystems / LocalPlayerSubsystem . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" Engine / LocalPlayer . h \" # include \" Engine / GameInstance . h \" # if WITH_EDITOR # include \" Editor . h \" # include \" EditorSubsystem . h \" # else # include \" Engine / Engine . h \" # endif struct FMassSubsystemAccess {)",
    "insertText": "FMassSubsystemAccess(UWorld* InWorld = nullptr)"
  },
  {
    "label": "GetMutableSubsystem()",
    "kind": "Method",
    "detail": "Function (template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T*)",
    "insertText": "GetMutableSubsystem()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const uint32 SystemIndex = FMassExternalSubsystemBitSet::GetTypeIndex<)",
    "insertText": "T()"
  },
  {
    "label": "GetMutableSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T&)",
    "insertText": "GetMutableSubsystemChecked()"
  },
  {
    "label": "GetSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> const T&)",
    "insertText": "GetSubsystemChecked()"
  },
  {
    "label": "GetTypeIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 SystemIndex =)",
    "insertText": "GetTypeIndex(**SubsystemClass)"
  },
  {
    "label": "GetMutableSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T&)",
    "insertText": "GetMutableSubsystemChecked(const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* InstancePtr = GetMutableSubsystem<)",
    "insertText": "T(SubsystemClass)"
  },
  {
    "label": "GetSubsystemChecked()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> const T&)",
    "insertText": "GetSubsystemChecked(const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "SetSubsystemRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubsystemRequirements(const FMassSubsystemRequirements& SubsystemRequirements)"
  },
  {
    "label": "GetSubsystemRequirementBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubsystemRequirementBits(FMassExternalSubsystemBitSet& OutConstSubsystemsBitSet, FMassExternalSubsystemBitSet& OutMutableSubsystemsBitSet)"
  },
  {
    "label": "SetSubsystemRequirementBits()",
    "kind": "Method",
    "detail": "Function (OutConstSubsystemsBitSet = ConstSubsystemsBitSet ; OutMutableSubsystemsBitSet = MutableSubsystemsBitSet ; } void)",
    "insertText": "SetSubsystemRequirementBits(const FMassExternalSubsystemBitSet& InConstSubsystemsBitSet, const FMassExternalSubsystemBitSet& InMutableSubsystemsBitSet)"
  },
  {
    "label": "DoesRequireWorld()",
    "kind": "Method",
    "detail": "Function (ConstSubsystemsBitSet = InConstSubsystemsBitSet ; MutableSubsystemsBitSet = InMutableSubsystemsBitSet ; } template<T> bool)",
    "insertText": "DoesRequireWorld()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bool bIsWorldSubsystem = TIsDerivedFrom<T,UWorldSubsystem>::IsDerived ; bool bIsGameInstanceSubsystem = TIsDerivedFrom<T,UGameInstanceSubsystem>::IsDerived ; bool bIsLocalPlayerSubsystem = TIsDerivedFrom<T,ULocalPlayerSubsystem>::IsDerived ;)",
    "insertText": "return(bIsWorldSubsystem || bIsGameInstanceSubsystem || bIsLocalPlayerSubsystem)"
  },
  {
    "label": "FetchSubsystemInstance()",
    "kind": "Method",
    "detail": "Function (} template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T*)",
    "insertText": "FetchSubsystemInstance(UWorld* World)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsDerivedFrom<T, UGameInstanceSubsystem>::IsDerived)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsDerivedFrom<T, ULocalPlayerSubsystem>::IsDerived)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(false, TEXT(\"FMassSubsystemAccess::FetchSubsystemInstance: Unhandled world-related USubsystem class %s\"), *T::StaticClass()->GetName())"
  },
  {
    "label": "FetchSubsystemInstance()",
    "kind": "Method",
    "detail": "Function (} } template<T,= TEnableIf<TIsDerivedFrom<T,USubsystem>::IsDerived>::Type> T*)",
    "insertText": "FetchSubsystemInstance()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR else if)",
    "insertText": "constexpr(TIsDerivedFrom<T, UEditorSubsystem>::IsDerived)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} # endif else {)",
    "insertText": "checkf(false, TEXT(\"FMassSubsystemAccess::FetchSubsystemInstance: Unhandled world-less USubsystem class %s\"), *T::StaticClass()->GetName())"
  },
  {
    "label": "FetchSubsystemInstance()",
    "kind": "Method",
    "detail": "Function (} } USubsystem*)",
    "insertText": "FetchSubsystemInstance(UWorld* World, TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "GetSubsystemInternal()",
    "kind": "Method",
    "detail": "Function (protected : template<T> T*)",
    "insertText": "GetSubsystemInternal(const uint32 SystemIndex)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Subsystems .)",
    "insertText": "AddZeroed(Subsystems.Num() - SystemIndex + 1)"
  },
  {
    "label": "SystemInstance()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "SystemInstance(T*)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (SystemInstance = FetchSubsystemInstance<std::remove_const_t<)",
    "insertText": "T(World.Get())"
  },
  {
    "label": "GetSubsystemInternal()",
    "kind": "Method",
    "detail": "Function (} Subsystems [ SystemIndex ] = SystemInstance ; } return SystemInstance ; } template<T> T*)",
    "insertText": "GetSubsystemInternal(const uint32 SystemIndex, const TSubclassOf<USubsystem> SubsystemClass)"
  },
  {
    "label": "FetchSubsystemInstance()",
    "kind": "Method",
    "detail": "Function (SystemInstance =)",
    "insertText": "FetchSubsystemInstance(World.Get(), SubsystemClass)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Subsystems [ SystemIndex ] = SystemInstance ; } return Cast<)",
    "insertText": "T(SystemInstance)"
  },
  {
    "label": "CacheSubsystem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CacheSubsystem(const uint32 SystemIndex)"
  }
]