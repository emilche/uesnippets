[
  {
    "label": "CefView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefView"
  },
  {
    "label": "CefViewDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefViewDelegate"
  },
  {
    "label": "GetPreferredSize()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_VIEWS_CEF_VIEW_DELEGATE_H_ # define CEF_INCLUDE_VIEWS_CEF_VIEW_DELEGATE_H_ # pragma once # include \" include / cef_base . h \" class CefView ; class CefViewDelegate : public CefBaseRefCounted { public : CefSize)",
    "insertText": "GetPreferredSize(CefRefPtr<CefView> view)"
  },
  {
    "label": "GetMinimumSize()",
    "kind": "Method",
    "detail": "Function (} CefSize)",
    "insertText": "GetMinimumSize(CefRefPtr<CefView> view)"
  },
  {
    "label": "GetMaximumSize()",
    "kind": "Method",
    "detail": "Function (} CefSize)",
    "insertText": "GetMaximumSize(CefRefPtr<CefView> view)"
  },
  {
    "label": "GetHeightForWidth()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetHeightForWidth(CefRefPtr<CefView> view, int width)"
  },
  {
    "label": "OnChildViewChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChildViewChanged(CefRefPtr<CefView> view, bool added, CefRefPtr<CefView> child)"
  },
  {
    "label": "OnWindowChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnWindowChanged(CefRefPtr<CefView> view, bool added)"
  },
  {
    "label": "OnFocus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFocus(CefRefPtr<CefView> view)"
  },
  {
    "label": "OnBlur()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBlur(CefRefPtr<CefView> view)"
  }
]