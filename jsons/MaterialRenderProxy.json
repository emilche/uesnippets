[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FMaterialVirtualTextureStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialVirtualTextureStack"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "FUniformExpressionCacheAsyncUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionCacheAsyncUpdater"
  },
  {
    "label": "FUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionSet"
  },
  {
    "label": "IAllocatedVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAllocatedVirtualTexture"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "USubsurfaceProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsurfaceProfile"
  },
  {
    "label": "USpecularProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpecularProfile"
  },
  {
    "label": "UNeuralProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNeuralProfile"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCollection"
  },
  {
    "label": "FMaterialParameterValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterValue"
  },
  {
    "label": "FMaterialRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialRenderContext"
  },
  {
    "label": "FMemoryImageMaterialParameterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageMaterialParameterInfo"
  },
  {
    "label": "FUniformExpressionCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformExpressionCache"
  },
  {
    "label": "FUniformExpressionCacheContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformExpressionCacheContainer"
  },
  {
    "label": "FUniformExpressionCacheAsyncUpdateScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionCacheAsyncUpdateScope"
  },
  {
    "label": "FColoredMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColoredMaterialRenderProxy"
  },
  {
    "label": "FColoredTexturedMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColoredTexturedMaterialRenderProxy"
  },
  {
    "label": "FOverrideSelectionColorMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOverrideSelectionColorMaterialRenderProxy"
  },
  {
    "label": "FLightingDensityMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightingDensityMaterialRenderProxy"
  },
  {
    "label": "FUniformExpressionCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" RenderResource . h \" # include \" RHIImmutableSamplerState . h \" # include \" Async / Mutex . h \" # include \" Tasks / Task . h \" # include \" Engine / BlendableInterface . h \" enum class EMaterialParameterType : uint8 ; class FMaterial ; class FMaterialRenderProxy ; class FMaterialShaderMap ; class FMaterialVirtualTextureStack ; class FRHIComputeCommandList ; class FUniformExpressionCacheAsyncUpdater ; class FUniformExpressionSet ; class IAllocatedVirtualTexture ; class UMaterialInterface ; class URuntimeVirtualTexture ; class USparseVolumeTexture ; class USubsurfaceProfile ; class USpecularProfile ; class UNeuralProfile ; class UTexture ; class UTextureCollection ; struct FMaterialParameterValue ; struct FMaterialRenderContext ; struct FMemoryImageMaterialParameterInfo ; using FHashedMaterialParameterInfo = FMemoryImageMaterialParameterInfo ; struct FUniformExpressionCache { FUniformBufferRHIRef UniformBuffer ; TArray<IAllocatedVirtualTexture*> AllocatedVTs ; TArray<IAllocatedVirtualTexture*> OwnedAllocatedVTs ; TArray<FGuid> ParameterCollections ; const FMaterialShaderMap* CachedUniformExpressionShaderMap = nullptr ; ~)",
    "insertText": "FUniformExpressionCache()"
  },
  {
    "label": "ResetAllocatedVTs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllocatedVTs()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FUniformExpressionCacheContainer { FUniformExpressionCache&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "FUniformExpressionCacheAsyncUpdateScope()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return Elements [ Index ] ; # else return Elements ; # endif } private : # if WITH_EDITOR FUniformExpressionCache Elements [ ERHIFeatureLevel::Num ] ; # else FUniformExpressionCache Elements ; # endif } ; class FUniformExpressionCacheAsyncUpdateScope { public :)",
    "insertText": "FUniformExpressionCacheAsyncUpdateScope()"
  },
  {
    "label": "WaitForTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTask()"
  },
  {
    "label": "FMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialRenderProxy : public FRenderResource,public FNoncopyable { public : FUniformExpressionCacheContainer UniformExpressionCache ; FImmutableSamplerState ImmutableSamplerState ;)",
    "insertText": "FMaterialRenderProxy(FString InMaterialName)"
  },
  {
    "label": "FMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMaterialRenderProxy()"
  },
  {
    "label": "EvaluateUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateUniformExpressions(FRHICommandListBase& RHICmdList, FUniformExpressionCache& OutUniformExpressionCache, const FMaterialRenderContext& Context, FUniformExpressionCacheAsyncUpdater* Updater = nullptr)"
  },
  {
    "label": "CacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheUniformExpressions(FRHICommandListBase& RHICmdList, bool bRecreateUniformBuffer)"
  },
  {
    "label": "CancelCacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCacheUniformExpressions()"
  },
  {
    "label": "CacheUniformExpressions_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheUniformExpressions_GameThread(bool bRecreateUniformBuffer)"
  },
  {
    "label": "InvalidateUniformExpressionCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateUniformExpressionCache(bool bRecreateUniformBuffer)"
  },
  {
    "label": "UpdateUniformExpressionCacheIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUniformExpressionCacheIfNeeded(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "UpdateUniformExpressionCacheIfNeeded()",
    "kind": "Method",
    "detail": "Function (const FMaterial*)",
    "insertText": "UpdateUniformExpressionCacheIfNeeded(FRHICommandListBase& RHICmdList, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetMaterialNoFallback()",
    "kind": "Method",
    "detail": "Function (const FMaterial*)",
    "insertText": "GetMaterialNoFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetFallback()",
    "kind": "Method",
    "detail": "Function (const FMaterialRenderProxy*)",
    "insertText": "GetFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetMaterialWithFallback()",
    "kind": "Method",
    "detail": "Function (const FMaterial&)",
    "insertText": "GetMaterialWithFallback(ERHIFeatureLevel::Type InFeatureLevel, const FMaterialRenderProxy*& OutFallbackMaterialRenderProxy)"
  },
  {
    "label": "GetIncompleteMaterialWithFallback()",
    "kind": "Method",
    "detail": "Function (const FMaterial&)",
    "insertText": "GetIncompleteMaterialWithFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetMaterialInterface()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialInterface()"
  },
  {
    "label": "GetScalarValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetScalarValue(const FHashedMaterialParameterInfo& ParameterInfo, float* OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureValue(const FHashedMaterialParameterInfo& ParameterInfo, const UTexture** OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureValue(const FHashedMaterialParameterInfo& ParameterInfo, const URuntimeVirtualTexture** OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureValue(const FHashedMaterialParameterInfo& ParameterInfo, const USparseVolumeTexture** OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetTextureCollectionValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureCollectionValue(const FHashedMaterialParameterInfo& ParameterInfo, const UTextureCollection** OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParameterValue(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, FMaterialParameterValue& OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetUserSceneTextureOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserSceneTextureOverride(FName& InOutValue)"
  },
  {
    "label": "GetBlendableLocation()",
    "kind": "Method",
    "detail": "Function (EBlendableLocation)",
    "insertText": "GetBlendableLocation(const FMaterial* Base)"
  },
  {
    "label": "GetBlendablePriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendablePriority(const FMaterial* Base)"
  },
  {
    "label": "IsDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeleted()"
  },
  {
    "label": "IsMarkedForGarbageCollection()",
    "kind": "Method",
    "detail": "Function (MarkedForGarbageCollection = - 1 ; } bool)",
    "insertText": "IsMarkedForGarbageCollection()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "GetMaterialRenderProxyMap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const TSet<FMaterialRenderProxy*>&)",
    "insertText": "GetMaterialRenderProxyMap()"
  },
  {
    "label": "GetSubsurfaceProfileRT()",
    "kind": "Method",
    "detail": "Function (SubsurfaceProfileRT = Ptr ; } const USubsurfaceProfile*)",
    "insertText": "GetSubsurfaceProfileRT()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubsurfaceProfilesRT .)",
    "insertText": "Add(Ptr)"
  },
  {
    "label": "GetSubsurfaceProfileRT()",
    "kind": "Method",
    "detail": "Function (} const USubsurfaceProfile*)",
    "insertText": "GetSubsurfaceProfileRT(uint32 Index)"
  },
  {
    "label": "AddSpecularProfileRT()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSpecularProfileRT(const USpecularProfile* Ptr)"
  },
  {
    "label": "GetSpecularProfileRT()",
    "kind": "Method",
    "detail": "Function (} const USpecularProfile*)",
    "insertText": "GetSpecularProfileRT(uint32 Index)"
  },
  {
    "label": "SetNeuralProfileRT()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNeuralProfileRT(const UNeuralProfile* Ptr)"
  },
  {
    "label": "GetNeuralProfileRT()",
    "kind": "Method",
    "detail": "Function (NeuralProfileRT = Ptr ; } const UNeuralProfile*)",
    "insertText": "GetNeuralProfileRT()"
  },
  {
    "label": "UpdateDeferredCachedUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeferredCachedUniformExpressions(FRHICommandListBase& RHICmdList, UE::Tasks::FTask* TaskIfAsync = nullptr)"
  },
  {
    "label": "HasDeferredUniformExpressionCacheRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDeferredUniformExpressionCacheRequests()"
  },
  {
    "label": "GetExpressionCacheSerialNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetExpressionCacheSerialNumber()"
  },
  {
    "label": "AllocateVTStack()",
    "kind": "Method",
    "detail": "Function (IAllocatedVirtualTexture*)",
    "insertText": "AllocateVTStack(FRHICommandListBase& RHICmdList, const FMaterialRenderContext& Context, const FUniformExpressionSet& UniformExpressionSet, const FMaterialVirtualTextureStack& VTStack)"
  },
  {
    "label": "StartCacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCacheUniformExpressions()"
  },
  {
    "label": "FinishCacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishCacheUniformExpressions()"
  },
  {
    "label": "FColoredMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} const USubsurfaceProfile* SubsurfaceProfileRT ; TArray<const USubsurfaceProfile*> SubsurfaceProfilesRT ; TArray<const USpecularProfile*> SpecularProfilesRT ; const UNeuralProfile* NeuralProfileRT ; FString MaterialName ; int32 UniformExpressionCacheSerialNumber = 0 ; uint8 MarkedForGarbageCollection : 1 ; uint8 DeletedFlag : 1 ; uint8 ReleaseResourceFlag : 1 ; uint8 HasVirtualTextureCallbacks : 1 ; UE::FMutex Mutex ; # if WITH_EDITOR TSet<FMaterialRenderProxy*> MaterialRenderProxyMap ; FCriticalSection MaterialRenderProxyMapLock ; # endif TSet<FMaterialRenderProxy*> DeferredUniformExpressionCacheRequests ; UE::FMutex DeferredUniformExpressionCacheRequestsMutex ; } ; class FColoredMaterialRenderProxy : public FMaterialRenderProxy { public : const FMaterialRenderProxy* const Parent ; const FLinearColor Color ; FName ColorParamName ;)",
    "insertText": "FColoredMaterialRenderProxy(const FMaterialRenderProxy* InParent, const FLinearColor& InColor, FName InColorParamName = NAME_Color)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} ; class FColoredTexturedMaterialRenderProxy : public FColoredMaterialRenderProxy { public : const UTexture* Texture ; FName TextureParamName ; float UVChannel = 0 ; FName UVChannelParamName =)",
    "insertText": "FName(\"None\")"
  },
  {
    "label": "FColoredTexturedMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColoredTexturedMaterialRenderProxy(const FMaterialRenderProxy* InParent, const FLinearColor& InColor, FName InColorParamName, const UTexture* InTexture, FName InTextureParamName)"
  },
  {
    "label": "FOverrideSelectionColorMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} ; class FOverrideSelectionColorMaterialRenderProxy : public FMaterialRenderProxy { public : const FMaterialRenderProxy* const Parent ; const FLinearColor SelectionColor ;)",
    "insertText": "FOverrideSelectionColorMaterialRenderProxy(const FMaterialRenderProxy* InParent, const FLinearColor& InSelectionColor)"
  },
  {
    "label": "FLightingDensityMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} ; class FLightingDensityMaterialRenderProxy : public FColoredMaterialRenderProxy { public : const FVector2D LightmapResolution ;)",
    "insertText": "FLightingDensityMaterialRenderProxy(const FMaterialRenderProxy* InParent, const FLinearColor& InColor, const FVector2D& InLightmapResolution)"
  }
]