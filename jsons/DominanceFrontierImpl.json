[
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "DFCalculateWorkObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DFCalculateWorkObject"
  },
  {
    "label": "DFCalculateWorkObject()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_DOMINANCEFRONTIERIMPL_H # define LLVM_ANALYSIS_DOMINANCEFRONTIERIMPL_H # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / Analysis / DominanceFrontier . h \" # include \" llvm / Support / Debug . h \" # include \" llvm / Support / GenericDomTree . h \" namespace llvm { template<class BlockT> class DFCalculateWorkObject { public : typedef DomTreeNodeBase<BlockT> DomTreeNodeT ;)",
    "insertText": "DFCalculateWorkObject(BlockT *B, BlockT *P, const DomTreeNodeT *N, const DomTreeNodeT *PN) : currentBB(B), parentBB(P), Node(N), parentNode(PN)"
  },
  {
    "label": "removeBlock()",
    "kind": "Method",
    "detail": "Function (} BlockT* currentBB ; BlockT* parentBB ; const DomTreeNodeT* Node ; const DomTreeNodeT* parentNode ; } ; template<class BlockT> void DominanceFrontierBase<BlockT)",
    "insertText": "removeBlock(BlockT *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(find(BB) != end() && \"Block is not in DominanceFrontier!\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Frontiers .)",
    "insertText": "erase(BB)"
  },
  {
    "label": "addToFrontier()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT> void DominanceFrontierBase<BlockT)",
    "insertText": "addToFrontier(iterator I, BlockT *Node)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != end() && \"BB is not in DominanceFrontier!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I->second.count(Node) && \"Node is not in DominanceFrontier of BB\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (I -> second .)",
    "insertText": "erase(Node)"
  },
  {
    "label": "removeFromFrontier()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT> void DominanceFrontierBase<BlockT)",
    "insertText": "removeFromFrontier(iterator I, BlockT *Node)"
  },
  {
    "label": "compareDomSet()",
    "kind": "Method",
    "detail": "Function (} template<class BlockT> bool DominanceFrontierBase<BlockT)",
    "insertText": "compareDomSet(DomSetType &DS1, const DomSetType &DS2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::set<BlockT*> tmpSet ;)",
    "insertText": "for(BlockT *BB : DS2) tmpSet.insert(BB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BlockT* Node =* I + + ;)",
    "insertText": "if(tmpSet.erase(Node) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!tmpSet.empty())"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (BlockT* Node = I -> first ; const_iterator DFI =)",
    "insertText": "find(Node)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!tmpFrontiers.empty())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OS<<\" DomFrontier for BB \" ;)",
    "insertText": "if(I->first) I->first->printAsOperand(OS, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OS<<' ' ;)",
    "insertText": "if(BB) BB->printAsOperand(OS, false)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(dbgs())"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (} # endif template<class BlockT> const ForwardDominanceFrontierBase<BlockT>::DomSetType& ForwardDominanceFrontierBase<BlockT)",
    "insertText": "calculate(const DomTreeT &DT, const DomTreeNodeT *Node)"
  },
  {
    "label": "getBlock()",
    "kind": "Method",
    "detail": "Function (BlockT* BB = Node ->)",
    "insertText": "getBlock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(currentW && \"Missing work object.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (BlockT* currentBB = currentW -> currentBB ; BlockT* parentBB = currentW -> parentBB ; const DomTreeNodeT* currentNode = currentW -> Node ; const DomTreeNodeT* parentNode = currentW -> parentNode ;)",
    "insertText": "assert(currentBB && \"Invalid work object. Missing current Basic Block\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(currentNode && \"Invalid work object. Missing current Node\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } bool visitChild = false ;)",
    "insertText": "for(typename DomTreeNodeT::const_iterator NI = currentNode->begin(), NE = currentNode->end(); NI != NE; ++NI)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (workList .)",
    "insertText": "push_back(DFCalculateWorkObject<BlockT>( childBB, currentBB, IDominee, currentNode))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (visitChild = true ; } })",
    "insertText": "if(!visitChild)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Result =& S ; break ; } DomSetType::const_iterator CDFI = S .)",
    "insertText": "begin(), CDFE = S.end()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (} workList .)",
    "insertText": "pop_back()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!workList.empty())"
  }
]