[
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef CUDAMATH_H # define CUDAMATH_H # include<float . h> __device__ __host__ float3)",
    "insertText": "operator(float3 a, float3 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ float3)",
    "insertText": "operator(float f, float3 v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ float3)",
    "insertText": "operator(float3 v, float f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ void)",
    "insertText": "operator(float3 & b, float3 a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (float inv = 1 . 0 f / f ; return v* inv ; } __device__ __host__ void)",
    "insertText": "operator(float3 & b, float f)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ float3)",
    "insertText": "clamp(float3 v, float a, float b)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ float3)",
    "insertText": "clamp(float3 v, float3 a, float3 b)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ float3)",
    "insertText": "normalize(float3 v)"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (float len = 1 . 0 f /)",
    "insertText": "sqrtf(dot(v, v))"
  },
  {
    "label": "firstEigenVector()",
    "kind": "Method",
    "detail": "Function (} __device__ __host__ float3)",
    "insertText": "firstEigenVector(float matrix[6])"
  },
  {
    "label": "make_float3()",
    "kind": "Method",
    "detail": "Function (float3 row0 =)",
    "insertText": "make_float3(matrix[0], matrix[1], matrix[2])"
  },
  {
    "label": "make_float3()",
    "kind": "Method",
    "detail": "Function (float3 row1 =)",
    "insertText": "make_float3(matrix[1], matrix[3], matrix[4])"
  },
  {
    "label": "make_float3()",
    "kind": "Method",
    "detail": "Function (float3 row2 =)",
    "insertText": "make_float3(matrix[2], matrix[4], matrix[5])"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (float r0 =)",
    "insertText": "dot(row0, row0)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (float r1 =)",
    "insertText": "dot(row1, row1)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (float r2 =)",
    "insertText": "dot(row2, row2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float3 v ;)",
    "insertText": "if(r0 > r1 && r0 > r2)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (float x = v . x* matrix [ 0 ] + v . y* matrix [ 1 ] + v . z* matrix [ 2 ] ; float y = v . x* matrix [ 1 ] + v . y* matrix [ 3 ] + v . z* matrix [ 4 ] ; float z = v . x* matrix [ 2 ] + v . y* matrix [ 4 ] + v . z* matrix [ 5 ] ; float m =)",
    "insertText": "max(max(x, y), z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float iv = 1 . 0 f / m ;)",
    "insertText": "if(m == 0.0f)"
  },
  {
    "label": "make_float3()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "make_float3(x*iv, y*iv, z*iv)"
  },
  {
    "label": "singleColor()",
    "kind": "Method",
    "detail": "Function (} return v ; } __device__ bool)",
    "insertText": "singleColor(const float3 * colors)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if __DEVICE_EMULATION__ bool sameColor = false ;)",
    "insertText": "for(int i = 0; i < 16; i++)"
  },
  {
    "label": "sameColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sameColor(colors[i] == colors[0])"
  },
  {
    "label": "idx()",
    "kind": "Method",
    "detail": "Function (} return sameColor ; # else __shared__ int sameColor [ 1 6 ] ; const int idx = threadIdx . x ; sameColor [)",
    "insertText": "idx(colors[idx] == colors[0])"
  },
  {
    "label": "colorSums()",
    "kind": "Method",
    "detail": "Function (sameColor [ idx ]& = sameColor [ idx ^ 8 ] ; sameColor [ idx ]& = sameColor [ idx ^ 4 ] ; sameColor [ idx ]& = sameColor [ idx ^ 2 ] ; sameColor [ idx ]& = sameColor [ idx ^ 1 ] ; return sameColor [ 0 ] ; # endif } __device__ void)",
    "insertText": "colorSums(const float3 * colors, float3 * sums)"
  },
  {
    "label": "make_float3()",
    "kind": "Method",
    "detail": "Function (# if __DEVICE_EMULATION__ float3 color_sum =)",
    "insertText": "make_float3(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "bestFitLine()",
    "kind": "Method",
    "detail": "Function (sums [ i ] = color_sum ; } # else const int idx = threadIdx . x ; sums [ idx ] = colors [ idx ] ; sums [ idx ] + = sums [ idx ^ 8 ] ; sums [ idx ] + = sums [ idx ^ 4 ] ; sums [ idx ] + = sums [ idx ^ 2 ] ; sums [ idx ] + = sums [ idx ^ 1 ] ; # endif } __device__ float3)",
    "insertText": "bestFitLine(const float3 * colors, float3 color_sum, float3 colorMetric)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (float3)",
    "insertText": "a(colors[i] - color_sum * (1.0f / 16.0f))"
  },
  {
    "label": "diff()",
    "kind": "Method",
    "detail": "Function (covariance [ 0 ] + = a . x* a . x ; covariance [ 1 ] + = a . x* a . y ; covariance [ 2 ] + = a . x* a . z ; covariance [ 3 ] + = a . y* a . y ; covariance [ 4 ] + = a . y* a . z ; covariance [ 5 ] + = a . z* a . z ; } # else const int idx = threadIdx . x ; float3)",
    "insertText": "diff(colors[idx] - color_sum * (1.0f / 16.0f))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__shared__ float covariance [ 1 6* 6 ] ; covariance [ 6* idx + 0 ] = diff . x* diff . x ; covariance [ 6* idx + 1 ] = diff . x* diff . y ; covariance [ 6* idx + 2 ] = diff . x* diff . z ; covariance [ 6* idx + 3 ] = diff . y* diff . y ; covariance [ 6* idx + 4 ] = diff . y* diff . z ; covariance [ 6* idx + 5 ] = diff . z* diff . z ;)",
    "insertText": "for(int d = 8; d > 0; d >>= 1)"
  },
  {
    "label": "covariance()",
    "kind": "Method",
    "detail": "Function (covariance [ 6* idx + 0 ] + =)",
    "insertText": "covariance(idx+d)"
  },
  {
    "label": "firstEigenVector()",
    "kind": "Method",
    "detail": "Function (} } # endif return)",
    "insertText": "firstEigenVector(covariance)"
  }
]