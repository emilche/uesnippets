[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LogSeverities()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_LOG_SEVERITY_H_ # define ABSL_BASE_LOG_SEVERITY_H_ # include<array> # include<ostream> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN enum class LogSeverity : int { kInfo = 0,kWarning = 1,kError = 2,kFatal = 3,} ; std::array<absl::LogSeverity,4>)",
    "insertText": "LogSeverities()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& os, absl::LogSeverity s)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum class LogSeverityAtLeast : int { kInfo = static_cast<)",
    "insertText": "int(absl::LogSeverity::kInfo), kWarning = static_cast<int>(absl::LogSeverity::kWarning), kError = static_cast<int>(absl::LogSeverity::kError), kFatal = static_cast<int>(absl::LogSeverity::kFatal)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, absl::LogSeverityAtLeast s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, absl::LogSeverityAtMost s)"
  },
  {
    "label": "COMPOP()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "COMPOP(op1, op2, T) \\ constexpr bool operator op1(absl::T lhs, absl::LogSeverity rhs)"
  },
  {
    "label": "LogSeverity()",
    "kind": "Method",
    "detail": "Function (\\ return static_cast<)",
    "insertText": "LogSeverity(lhs)"
  },
  {
    "label": "op2()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool operator)",
    "insertText": "op2(absl::LogSeverity lhs, absl::T rhs)"
  },
  {
    "label": "LogSeverity()",
    "kind": "Method",
    "detail": "Function (\\ return lhs op2 static_cast<)",
    "insertText": "LogSeverity(rhs)"
  }
]