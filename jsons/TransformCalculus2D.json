[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "TMatrix2x2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMatrix2x2"
  },
  {
    "label": "TScale2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScale2"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "TShear2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShear2"
  },
  {
    "label": "TQuat2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TQuat2"
  },
  {
    "label": "TMatrix2x2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMatrix2x2"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "TTransform2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTransform2"
  },
  {
    "label": "applies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "applies"
  },
  {
    "label": "simply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "simply"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsTransform2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTransform2"
  },
  {
    "label": "TIsTransform2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTransform2"
  },
  {
    "label": "TIsTransform2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTransform2"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TransformPoint(Vector)"
  },
  {
    "label": "TScale2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TScale2(Scale * RHS.Scale)"
  },
  {
    "label": "TScale2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TScale2(1.0f / Scale.X, 1.0f / Scale.Y)"
  },
  {
    "label": "TShear2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TShear2(ShearX, ShearY)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TransformPoint(Vector)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TransformPoint(Vector)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TransformPoint(Vector)"
  },
  {
    "label": "TTransform2()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TTransform2(InvM, InvTrans)"
  },
  {
    "label": "Vector2Type()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Vector2Type(Trans)"
  }
]