[
  {
    "label": "FOutOfWork",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutOfWork"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Delegates / Delegate . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" namespace LowLevelTasks {)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE(FOversubscriptionLimitReached)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (template<NodeType> using TAlignedArray = TArray<NodeType,TAlignedHeapAllocator<)",
    "insertText": "alignof(NodeType)"
  },
  {
    "label": "FOutOfWork()",
    "kind": "Method",
    "detail": "Function (namespace Private { class FOutOfWork { private : bool ActivelyLookingForWork = false ; # if CPUPROFILERTRACE_ENABLED bool bCpuBeginEventEmitted = false ; # endif public : ~)",
    "insertText": "FOutOfWork()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Start()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(CpuChannel)"
  },
  {
    "label": "OutputEventType()",
    "kind": "Method",
    "detail": "Function (uint32 WorkerLookingForWorkTraceId =)",
    "insertText": "OutputEventType(\"TaskWorkerIsLookingForWork\")"
  },
  {
    "label": "OutputBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginEvent(WorkerLookingForWorkTraceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(bCpuBeginEventEmitted)"
  },
  {
    "label": "OutputEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndEvent()"
  }
]