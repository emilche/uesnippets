[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeSliderController"
  },
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "FScrubRangeToScreen",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrubRangeToScreen"
  },
  {
    "label": "FDrawTickArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawTickArgs"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Layout / SScrollBar . h \" class FPaintArgs ; class FSlateWindowElementList ; class FTimeSliderController ; class SSimpleTimeSlider : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRangeChanged, TRange<double> ) DECLARE_DELEGATE_TwoParams( FOnScrubPositionChanged, double, bool ) SLATE_BEGIN_ARGS(SSimpleTimeSlider) : _MirrorLabels( false ) , _ScrubPosition(0) , _ViewRange(TRange<double>(0,10)) , _ClampRange(TRange<double>(0,10)) , _AllowZoom (true) , _AllowPan (true) , _CursorSize(0) , _ClampRangeHighlightColor(FLinearColor(0.05f,0.05f,0.05f,1.0f)) , _ClampRangeHighlightSize(1.0) , _DesiredSize(100,22)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, MirrorLabels ) SLATE_ATTRIBUTE(double, ScrubPosition)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(TRange<double>, ViewRange)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(TRange<double>, ClampRange)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(bool, AllowZoom)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(bool, AllowPan)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(float, CursorSize)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(FLinearColor, ClampRangeHighlightColor)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(float, ClampRangeHighlightSize)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(FVector2d, DesiredSize)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnScrubPositionChanged, OnScrubPositionChanged)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FSimpleDelegate, OnBeginScrubberMovement)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FSimpleDelegate, OnEndScrubberMovement)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnRangeChanged, OnViewRangeChanged)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (TRange<double>)",
    "insertText": "GetTimeRange()"
  },
  {
    "label": "SetTimeRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeRange(double MinValue, double MaxValue)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(double MinValue, double MaxValue)"
  },
  {
    "label": "IsPanning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPanning()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (WidgetSize = InWidgetSize ; ViewInput = InViewInput ; ViewInputRange = ViewInput . Size<)",
    "insertText": "double()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (PixelsPerInput = static_cast<)",
    "insertText": "float(ViewInputRange > 0 ? (WidgetSize.X / ViewInputRange) : 0)"
  },
  {
    "label": "LocalXToInput()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "LocalXToInput(const float ScreenX)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const float LocalX = ScreenX ;)",
    "insertText": "return(LocalX/PixelsPerInput) + static_cast<float>(ViewInput.GetLowerBoundValue())"
  },
  {
    "label": "InputToLocalX()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "InputToLocalX(const float Input)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (} } ; protected : struct FDrawTickArgs { FGeometry AllottedGeometry ; FSlateRect ClippingRect ; FLinearColor TickColor ; float TickOffset ; float MajorTickHeight ; int32 StartLayer ; ESlateDrawEffect DrawEffects ; bool bOnlyDrawMajorTicks ; bool bMirrorLabels ; } ; FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPaintTimeSlider()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintTimeSlider(bool bMirrorLabels, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "DrawTicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTicks(FSlateWindowElementList& OutDrawElements, const FScrubRangeToScreen& RangeToScreen, FDrawTickArgs& InArgs)"
  },
  {
    "label": "GetTimeAtCursorPosition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeAtCursorPosition(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CommitScrubPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitScrubPosition(float NewValue, bool bIsScrubbing)"
  }
]