[
  {
    "label": "internal_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal_state"
  },
  {
    "label": "z_stream_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "z_stream_s"
  },
  {
    "label": "gz_header_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gz_header_s"
  },
  {
    "label": "gzFile_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gzFile_s"
  },
  {
    "label": "voidpf()",
    "kind": "Method",
    "detail": "Function (# ifndef ZLIB_H # define ZLIB_H # include \" zconf . h \" # ifdef __cplusplus \" C \" { # endif # define ZLIB_VERSION \" 1 . 3 \" # define ZLIB_VERNUM 0 x1300 # define ZLIB_VER_MAJOR 1 # define ZLIB_VER_MINOR 3 # define ZLIB_VER_REVISION 0 # define ZLIB_VER_SUBREVISION 0 typedef)",
    "insertText": "voidpf(*alloc_func)(voidpf opaque, uInt items, uInt size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*free_func)(voidpf opaque, voidpf address)"
  },
  {
    "label": "Z_ERRNO()",
    "kind": "Method",
    "detail": "Function (struct internal_state ; typedef struct z_stream_s { z_const Bytef* next_in ; uInt avail_in ; uLong total_in ; Bytef* next_out ; uInt avail_out ; uLong total_out ; z_const char* msg ; struct internal_state FAR* state ; alloc_func zalloc ; free_func zfree ; voidpf opaque ; int data_type ; uLong adler ; uLong reserved ; } z_stream ; typedef z_stream FAR* z_streamp ; typedef struct gz_header_s { int text ; uLong time ; int xflags ; int os ; Bytef* extra ; uInt extra_len ; uInt extra_max ; Bytef* name ; uInt name_max ; Bytef* comment ; uInt comm_max ; int hcrc ; int done ; } gz_header ; typedef gz_header FAR* gz_headerp ; # define Z_NO_FLUSH 0 # define Z_PARTIAL_FLUSH 1 # define Z_SYNC_FLUSH 2 # define Z_FULL_FLUSH 3 # define Z_FINISH 4 # define Z_BLOCK 5 # define Z_TREES 6 # define Z_OK 0 # define Z_STREAM_END 1 # define Z_NEED_DICT 2 # define)",
    "insertText": "Z_ERRNO(-1) #define Z_STREAM_ERROR (-2) #define Z_DATA_ERROR (-3) #define Z_MEM_ERROR (-4) #define Z_BUF_ERROR (-5) #define Z_VERSION_ERROR (-6) #define Z_NO_COMPRESSION 0 #define Z_BEST_SPEED 1 #define Z_BEST_COMPRESSION 9 #define Z_DEFAULT_COMPRESSION (-1) #define Z_FILTERED 1 #define Z_HUFFMAN_ONLY 2 #define Z_RLE 3 #define Z_FIXED 4 #define Z_DEFAULT_STRATEGY 0 #define Z_BINARY 0 #define Z_TEXT 1 #define Z_ASCII Z_TEXT #define Z_UNKNOWN 2 #define Z_DEFLATED 8 #define Z_NULL 0 #define zlib_version zlibVersion() ZEXTERN const char * ZEXPORT zlibVersion(void)"
  },
  {
    "label": "deflate()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflate(z_streamp strm, int flush)"
  },
  {
    "label": "deflateEnd()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateEnd(z_streamp strm)"
  },
  {
    "label": "inflate()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflate(z_streamp strm, int flush)"
  },
  {
    "label": "inflateEnd()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateEnd(z_streamp strm)"
  },
  {
    "label": "deflateSetDictionary()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)"
  },
  {
    "label": "deflateGetDictionary()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)"
  },
  {
    "label": "deflateCopy()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateCopy(z_streamp dest, z_streamp source)"
  },
  {
    "label": "deflateReset()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateReset(z_streamp strm)"
  },
  {
    "label": "deflateParams()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateParams(z_streamp strm, int level, int strategy)"
  },
  {
    "label": "deflateTune()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)"
  },
  {
    "label": "deflateBound()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "deflateBound(z_streamp strm, uLong sourceLen)"
  },
  {
    "label": "deflatePending()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflatePending(z_streamp strm, unsigned *pending, int *bits)"
  },
  {
    "label": "deflatePrime()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflatePrime(z_streamp strm, int bits, int value)"
  },
  {
    "label": "deflateSetHeader()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateSetHeader(z_streamp strm, gz_headerp head)"
  },
  {
    "label": "inflateSetDictionary()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)"
  },
  {
    "label": "inflateGetDictionary()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)"
  },
  {
    "label": "inflateSync()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateSync(z_streamp strm)"
  },
  {
    "label": "inflateCopy()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateCopy(z_streamp dest, z_streamp source)"
  },
  {
    "label": "inflateReset()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateReset(z_streamp strm)"
  },
  {
    "label": "inflateReset2()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateReset2(z_streamp strm, int windowBits)"
  },
  {
    "label": "inflatePrime()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflatePrime(z_streamp strm, int bits, int value)"
  },
  {
    "label": "inflateMark()",
    "kind": "Method",
    "detail": "Function (ZEXTERN long ZEXPORT)",
    "insertText": "inflateMark(z_streamp strm)"
  },
  {
    "label": "inflateGetHeader()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateGetHeader(z_streamp strm, gz_headerp head)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "unsigned(*in_func)(void FAR *, z_const unsigned char FAR * FAR *)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*out_func)(void FAR *, unsigned char FAR *, unsigned)"
  },
  {
    "label": "inflateBack()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateBack(z_streamp strm, in_func in, void FAR *in_desc, out_func out, void FAR *out_desc)"
  },
  {
    "label": "inflateBackEnd()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateBackEnd(z_streamp strm)"
  },
  {
    "label": "zlibCompileFlags()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "zlibCompileFlags(void)"
  },
  {
    "label": "compress()",
    "kind": "Method",
    "detail": "Function (# ifndef Z_SOLO ZEXTERN int ZEXPORT)",
    "insertText": "compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)"
  },
  {
    "label": "compress2()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)"
  },
  {
    "label": "compressBound()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "compressBound(uLong sourceLen)"
  },
  {
    "label": "uncompress()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)"
  },
  {
    "label": "uncompress2()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "uncompress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong *sourceLen)"
  },
  {
    "label": "gzdopen()",
    "kind": "Method",
    "detail": "Function (typedef struct gzFile_s* gzFile ; ZEXTERN gzFile ZEXPORT)",
    "insertText": "gzdopen(int fd, const char *mode)"
  },
  {
    "label": "gzbuffer()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzbuffer(gzFile file, unsigned size)"
  },
  {
    "label": "gzsetparams()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzsetparams(gzFile file, int level, int strategy)"
  },
  {
    "label": "gzread()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzread(gzFile file, voidp buf, unsigned len)"
  },
  {
    "label": "gzfread()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_size_t ZEXPORT)",
    "insertText": "gzfread(voidp buf, z_size_t size, z_size_t nitems, gzFile file)"
  },
  {
    "label": "gzwrite()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzwrite(gzFile file, voidpc buf, unsigned len)"
  },
  {
    "label": "gzfwrite()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_size_t ZEXPORT)",
    "insertText": "gzfwrite(voidpc buf, z_size_t size, z_size_t nitems, gzFile file)"
  },
  {
    "label": "gzprintf()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORTVA)",
    "insertText": "gzprintf(gzFile file, const char *format, ...)"
  },
  {
    "label": "gzputs()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzputs(gzFile file, const char *s)"
  },
  {
    "label": "gzgets()",
    "kind": "Method",
    "detail": "Function (ZEXTERN char* ZEXPORT)",
    "insertText": "gzgets(gzFile file, char *buf, int len)"
  },
  {
    "label": "gzputc()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzputc(gzFile file, int c)"
  },
  {
    "label": "gzgetc()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzgetc(gzFile file)"
  },
  {
    "label": "gzungetc()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzungetc(int c, gzFile file)"
  },
  {
    "label": "gzflush()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzflush(gzFile file, int flush)"
  },
  {
    "label": "gzrewind()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzrewind(gzFile file)"
  },
  {
    "label": "gzeof()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzeof(gzFile file)"
  },
  {
    "label": "gzdirect()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzdirect(gzFile file)"
  },
  {
    "label": "gzclose()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzclose(gzFile file)"
  },
  {
    "label": "gzclose_r()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzclose_r(gzFile file)"
  },
  {
    "label": "gzclose_w()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "gzclose_w(gzFile file)"
  },
  {
    "label": "gzerror()",
    "kind": "Method",
    "detail": "Function (ZEXTERN const char* ZEXPORT)",
    "insertText": "gzerror(gzFile file, int *errnum)"
  },
  {
    "label": "gzclearerr()",
    "kind": "Method",
    "detail": "Function (ZEXTERN void ZEXPORT)",
    "insertText": "gzclearerr(gzFile file)"
  },
  {
    "label": "adler32()",
    "kind": "Method",
    "detail": "Function (# endif ZEXTERN uLong ZEXPORT)",
    "insertText": "adler32(uLong adler, const Bytef *buf, uInt len)"
  },
  {
    "label": "adler32_z()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "adler32_z(uLong adler, const Bytef *buf, z_size_t len)"
  },
  {
    "label": "crc32()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32(uLong crc, const Bytef *buf, uInt len)"
  },
  {
    "label": "crc32_z()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_z(uLong crc, const Bytef *buf, z_size_t len)"
  },
  {
    "label": "crc32_combine_op()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine_op(uLong crc1, uLong crc2, uLong op)"
  },
  {
    "label": "deflateInit_()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateInit_(z_streamp strm, int level, const char *version, int stream_size)"
  },
  {
    "label": "inflateInit_()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateInit_(z_streamp strm, const char *version, int stream_size)"
  },
  {
    "label": "deflateInit2_()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)"
  },
  {
    "label": "inflateInit2_()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)"
  },
  {
    "label": "inflateBackInit_()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateBackInit_(z_streamp strm, int windowBits, unsigned char FAR *window, const char *version, int stream_size)"
  },
  {
    "label": "z_deflateInit()",
    "kind": "Method",
    "detail": "Function (# ifdef Z_PREFIX_SET # define)",
    "insertText": "z_deflateInit(strm, level) \\ deflateInit_((strm), (level), ZLIB_VERSION, (int)sizeof(z_stream)) # define z_inflateInit(strm) \\ inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream)) # define z_deflateInit2(strm, level, method, windowBits, memLevel, strategy) \\ deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\\ (strategy), ZLIB_VERSION, (int)sizeof(z_stream)) # define z_inflateInit2(strm, windowBits) \\ inflateInit2_((strm), (windowBits), ZLIB_VERSION, \\ (int)sizeof(z_stream)) # define z_inflateBackInit(strm, windowBits, window) \\ inflateBackInit_((strm), (windowBits), (window), \\ ZLIB_VERSION, (int)sizeof(z_stream)) #else # define deflateInit(strm, level) \\ deflateInit_((strm), (level), ZLIB_VERSION, (int)sizeof(z_stream)) # define inflateInit(strm) \\ inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream)) # define deflateInit2(strm, level, method, windowBits, memLevel, strategy) \\ deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\\ (strategy), ZLIB_VERSION, (int)sizeof(z_stream)) # define inflateInit2(strm, windowBits) \\ inflateInit2_((strm), (windowBits), ZLIB_VERSION, \\ (int)sizeof(z_stream)) # define inflateBackInit(strm, windowBits, window) \\ inflateBackInit_((strm), (windowBits), (window), \\ ZLIB_VERSION, (int)sizeof(z_stream))"
  },
  {
    "label": "gzgetc_()",
    "kind": "Method",
    "detail": "Function (unsigned have ; unsigned char* next ; z_off64_t pos ; } ; ZEXTERN int ZEXPORT)",
    "insertText": "gzgetc_(gzFile file)"
  },
  {
    "label": "z_gzgetc()",
    "kind": "Method",
    "detail": "Function (# ifdef Z_PREFIX_SET # undef z_gzgetc # define)",
    "insertText": "z_gzgetc(g) \\ ((g)->have ? ((g)->have--, (g)->pos++, *((g)->next)++) : (gzgetc)(g)) #else # define gzgetc(g) \\ ((g)->have ? ((g)->have--, (g)->pos++, *((g)->next)++) : (gzgetc)(g)) #endif #ifdef Z_LARGE64 ZEXTERN gzFile ZEXPORT gzopen64(const char *, const char *)"
  },
  {
    "label": "gzseek64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off64_t ZEXPORT)",
    "insertText": "gzseek64(gzFile, z_off64_t, int)"
  },
  {
    "label": "gztell64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off64_t ZEXPORT)",
    "insertText": "gztell64(gzFile)"
  },
  {
    "label": "gzoffset64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off64_t ZEXPORT)",
    "insertText": "gzoffset64(gzFile)"
  },
  {
    "label": "adler32_combine64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "adler32_combine64(uLong, uLong, z_off64_t)"
  },
  {
    "label": "crc32_combine64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine64(uLong, uLong, z_off64_t)"
  },
  {
    "label": "crc32_combine_gen64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine_gen64(z_off64_t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if !)",
    "insertText": "defined(ZLIB_INTERNAL) && defined(Z_WANT64) # ifdef Z_PREFIX_SET # define z_gzopen z_gzopen64 # define z_gzseek z_gzseek64 # define z_gztell z_gztell64 # define z_gzoffset z_gzoffset64 # define z_adler32_combine z_adler32_combine64 # define z_crc32_combine z_crc32_combine64 # define z_crc32_combine_gen z_crc32_combine_gen64 # else # define gzopen gzopen64 # define gzseek gzseek64 # define gztell gztell64 # define gzoffset gzoffset64 # define adler32_combine adler32_combine64 # define crc32_combine crc32_combine64 # define crc32_combine_gen crc32_combine_gen64 # endif # ifndef Z_LARGE64 ZEXTERN gzFile ZEXPORT gzopen64(const char *, const char *)"
  },
  {
    "label": "gzseek64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off_t ZEXPORT)",
    "insertText": "gzseek64(gzFile, z_off_t, int)"
  },
  {
    "label": "adler32_combine64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "adler32_combine64(uLong, uLong, z_off_t)"
  },
  {
    "label": "crc32_combine64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine64(uLong, uLong, z_off_t)"
  },
  {
    "label": "crc32_combine_gen64()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine_gen64(z_off_t)"
  },
  {
    "label": "gzopen()",
    "kind": "Method",
    "detail": "Function (# endif # else ZEXTERN gzFile ZEXPORT)",
    "insertText": "gzopen(const char *, const char *)"
  },
  {
    "label": "gzseek()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off_t ZEXPORT)",
    "insertText": "gzseek(gzFile, z_off_t, int)"
  },
  {
    "label": "gztell()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off_t ZEXPORT)",
    "insertText": "gztell(gzFile)"
  },
  {
    "label": "gzoffset()",
    "kind": "Method",
    "detail": "Function (ZEXTERN z_off_t ZEXPORT)",
    "insertText": "gzoffset(gzFile)"
  },
  {
    "label": "adler32_combine()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "adler32_combine(uLong, uLong, z_off_t)"
  },
  {
    "label": "crc32_combine()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine(uLong, uLong, z_off_t)"
  },
  {
    "label": "crc32_combine_gen()",
    "kind": "Method",
    "detail": "Function (ZEXTERN uLong ZEXPORT)",
    "insertText": "crc32_combine_gen(z_off_t)"
  },
  {
    "label": "zError()",
    "kind": "Method",
    "detail": "Function (# endif ZEXTERN const char* ZEXPORT)",
    "insertText": "zError(int)"
  },
  {
    "label": "inflateSyncPoint()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateSyncPoint(z_streamp)"
  },
  {
    "label": "get_crc_table()",
    "kind": "Method",
    "detail": "Function (ZEXTERN const z_crc_t FAR* ZEXPORT)",
    "insertText": "get_crc_table(void)"
  },
  {
    "label": "inflateUndermine()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateUndermine(z_streamp, int)"
  },
  {
    "label": "inflateValidate()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateValidate(z_streamp, int)"
  },
  {
    "label": "inflateCodesUsed()",
    "kind": "Method",
    "detail": "Function (ZEXTERN unsigned long ZEXPORT)",
    "insertText": "inflateCodesUsed(z_streamp)"
  },
  {
    "label": "inflateResetKeep()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "inflateResetKeep(z_streamp)"
  },
  {
    "label": "deflateResetKeep()",
    "kind": "Method",
    "detail": "Function (ZEXTERN int ZEXPORT)",
    "insertText": "deflateResetKeep(z_streamp)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_WIN32) && !defined(Z_SOLO) ZEXTERN gzFile ZEXPORT gzopen_w(const wchar_t *path, const char *mode)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(STDC) || defined(Z_HAVE_STDARG_H) # ifndef Z_SOLO ZEXTERN int ZEXPORTVA gzvprintf(gzFile file, const char *format, va_list va)"
  }
]