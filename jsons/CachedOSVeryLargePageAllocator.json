[
  {
    "label": "FCachedOSVeryLargePageAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedOSVeryLargePageAllocator"
  },
  {
    "label": "FLargePage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLargePage"
  },
  {
    "label": "CACHEDOSVERYLARGEPAGEALLOCATOR_BYTE_LIMIT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / List . h \" # include \" CoreTypes . h \" # include \" HAL / Allocators / CachedOSPageAllocator . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformMemory . h \" # include \" HAL / UnrealMemory . h \" # if UE_USE_VERYLARGEPAGEALLOCATOR # if PLATFORM_64BITS # define)",
    "insertText": "CACHEDOSVERYLARGEPAGEALLOCATOR_BYTE_LIMIT(128*1024*1024) #else #define CACHEDOSVERYLARGEPAGEALLOCATOR_BYTE_LIMIT (16*1024*1024) #endif #define CACHEDOSVERYLARGEPAGEALLOCATOR_MAX_CACHED_OS_FREES (256)"
  },
  {
    "label": "AddressSpaceToReserve()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AddressSpaceToReserve((1024LL * 1024LL * 1024LL) * UE_VERYLARGEPAGEALLOCATOR_RESERVED_SIZE_IN_GB)"
  },
  {
    "label": "SizeOfLargePage()",
    "kind": "Method",
    "detail": "Function (uint64 AddressSpaceToReserveForSmallPool = AddressSpaceToReserve / 2 ; uint64)",
    "insertText": "SizeOfLargePage(UE_VERYLARGEPAGEALLOCATOR_PAGESIZE_KB * 1024)"
  },
  {
    "label": "SizeOfSubPage()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "SizeOfSubPage(1024 * 64)"
  },
  {
    "label": "NumberOfLargePages()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "NumberOfLargePages(AddressSpaceToReserve / SizeOfLargePage)"
  },
  {
    "label": "NumberOfSubPagesPerLargePage()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "NumberOfSubPagesPerLargePage(SizeOfLargePage / SizeOfSubPage)"
  },
  {
    "label": "FCachedOSVeryLargePageAllocator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCachedOSVeryLargePageAllocator() : bEnabled(true) , CachedFree(0) , ImmediatelyFreeable(0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "FCachedOSVeryLargePageAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCachedOSVeryLargePageAllocator()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate(SIZE_T Size, uint32 AllocationHint = 0, FCriticalSection* Mutex = nullptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr, SIZE_T Size, FCriticalSection* Mutex = nullptr, bool ThreadIsTimeCritical = false)"
  },
  {
    "label": "FreeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeAll(FCriticalSection* Mutex = nullptr)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "GetCachedFreeTotal()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCachedFreeTotal()"
  },
  {
    "label": "GetCachedImmediatelyFreeable()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetCachedImmediatelyFreeable()"
  },
  {
    "label": "IsSmallBlockAllocation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSmallBlockAllocation(const void* Ptr)"
  },
  {
    "label": "BaseAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BaseAddress(uintptr_t)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumberOfFreeSubPages = NumberOfSubPagesPerLargePage ; uintptr_t Ptr = BaseAddress ;)",
    "insertText": "for(int i = 0; i < NumberOfFreeSubPages; i++)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (FreeSubPages [ i ] = Ptr ; Ptr + = SizeOfSubPage ; } } void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "NumberOfFreeSubPages()",
    "kind": "Method",
    "detail": "Function (FreeSubPages [)",
    "insertText": "NumberOfFreeSubPages(uintptr_t)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* ret = nullptr ;)",
    "insertText": "if(NumberOfFreeSubPages)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ret(void*)"
  },
  {
    "label": "ShrinkEmptyBackStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkEmptyBackStore(int32 NewEmptyBackStoreSize, FMemory::AllocationHints AllocationHint)"
  },
  {
    "label": "GetOrAllocLargePage()",
    "kind": "Method",
    "detail": "Function (FLargePage*)",
    "insertText": "GetOrAllocLargePage(uint32 AllocationHint, FCriticalSection* Mutex)"
  },
  {
    "label": "AllocNewLargePage()",
    "kind": "Method",
    "detail": "Function (FLargePage*)",
    "insertText": "AllocNewLargePage(uint32 AllocationHint, FCriticalSection* Mutex, bool& bOutCommitFailure)"
  }
]