[
  {
    "label": "FWaveformTransformationWaveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveformTransformationWaveInfo"
  },
  {
    "label": "IWaveTransformation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWaveTransformation"
  },
  {
    "label": "FWaveTransformUObjectConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveTransformUObjectConfiguration"
  },
  {
    "label": "UWaveformTransformationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWaveformTransformationBase"
  },
  {
    "label": "UWaveformTransformationChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWaveformTransformationChain"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" DSP / BufferVectorOperations . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" IWaveformTransformation . generated . h \" namespace Audio { struct FWaveformTransformationWaveInfo { float SampleRate = 0 . f ; int32 NumChannels = 0 ; Audio::FAlignedFloatBuffer* Audio = nullptr ; uint32 StartFrameOffset = 0 ; uint32 NumEditedSamples = 0 ; } ; class IWaveTransformation { public : void)",
    "insertText": "ProcessAudio(FWaveformTransformationWaveInfo& InOutWaveInfo)"
  },
  {
    "label": "SupportsRealtimePreview()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SupportsRealtimePreview()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; } ; using FTransformationPtr = TUniquePtr<Audio::IWaveTransformation> ; } struct FWaveTransformUObjectConfiguration { int32 NumChannels = 0 ; float SampleRate = 0 ; float StartTime = 0 . f ; float EndTime = - 1 . f ; } ;)",
    "insertText": "UCLASS(Abstract, EditInlineNew, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual Audio::FTransformationPtr CreateTransformation()"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, Instanced, Category = \"Transformations\")"
  }
]