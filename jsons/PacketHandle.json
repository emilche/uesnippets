[
  {
    "label": "FPacketReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketReader"
  },
  {
    "label": "FPacketHandleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketHandleData"
  },
  {
    "label": "HORDE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HORDE_API"
  },
  {
    "label": "FPacketHandleData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SharedPointer . h \" # include \" Storage / Blob . h \" # include \" Storage / BlobHandle . h \" # include \" Storage / BlobType . h \" # include \" Storage / StorageClient . h \" class FPacketReader ; class FPacketHandleData ; typedef TBlobHandle<FPacketHandleData> FPacketHandle ; class FPacketHandleData final : public FBlobHandleData,public TSharedFromThis<FPacketHandleData,ESPMode::ThreadSafe> { public : const char Type [ ] ;)",
    "insertText": "FPacketHandleData(TSharedRef<FStorageClient> InStorageClient, FBlobHandle InBundle, size_t InPacketOffset, size_t InPacketLength)"
  },
  {
    "label": "FPacketHandleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPacketHandleData(TSharedRef<FStorageClient> InStorageClient, FBlobHandle InBundle, const FUtf8StringView& InFragment)"
  },
  {
    "label": "FPacketHandleData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPacketHandleData()"
  },
  {
    "label": "ReadExport()",
    "kind": "Method",
    "detail": "Function (FBlob)",
    "insertText": "ReadExport(size_t ExportIdx)"
  },
  {
    "label": "ReadExportBody()",
    "kind": "Method",
    "detail": "Function (FSharedBufferView)",
    "insertText": "ReadExportBody(size_t ExportIdx)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FBlobHandleData& Other)"
  },
  {
    "label": "GetHashCode()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHashCode()"
  },
  {
    "label": "GetOuter()",
    "kind": "Method",
    "detail": "Function (FBlobHandle)",
    "insertText": "GetOuter()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetType()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (FBlob)",
    "insertText": "Read()"
  },
  {
    "label": "TryAppendIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAppendIdentifier(FUtf8String& OutBuffer)"
  },
  {
    "label": "GetFragmentHandle()",
    "kind": "Method",
    "detail": "Function (FBlobHandle)",
    "insertText": "GetFragmentHandle(const FUtf8StringView& Fragment)"
  },
  {
    "label": "GetPacketReader()",
    "kind": "Method",
    "detail": "Function (private : const char FragmentPrefix [ ] ; const size_t FragmentPrefixLength ; TSharedRef<FStorageClient> StorageClient ; FBlobHandle Bundle ; size_t PacketOffset ; size_t PacketLength ; TSharedPtr<FPacketReader> PacketReader ; const FPacketReader&)",
    "insertText": "GetPacketReader()"
  },
  {
    "label": "TryParse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryParse(const FUtf8StringView& Fragment, size_t& OutPacketOffset, size_t& OutPacketLength)"
  }
]