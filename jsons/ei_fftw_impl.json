[
  {
    "label": "fftw_plan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fftw_plan"
  },
  {
    "label": "fftw_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fftw_impl"
  },
  {
    "label": "fftw_cast()",
    "kind": "Method",
    "detail": "Function (namespace Eigen { namespace internal { template<T> T*)",
    "insertText": "fftw_cast(const T* p)"
  },
  {
    "label": "fftw_cast()",
    "kind": "Method",
    "detail": "Function (} fftw_complex*)",
    "insertText": "fftw_cast(const std::complex<double> * p)"
  },
  {
    "label": "fftw_cast()",
    "kind": "Method",
    "detail": "Function (} fftwf_complex*)",
    "insertText": "fftw_cast(const std::complex<float> * p)"
  },
  {
    "label": "fftw_cast()",
    "kind": "Method",
    "detail": "Function (} fftwl_complex*)",
    "insertText": "fftw_cast(const std::complex<long double> * p)"
  },
  {
    "label": "fftw_plan()",
    "kind": "Method",
    "detail": "Function (} template<T> struct fftw_plan { } ; template<> struct fftw_plan<float> { typedef float scalar_type ; typedef fftwf_complex complex_type ; fftwf_plan m_plan ;)",
    "insertText": "fftw_plan() :m_plan(NULL)"
  },
  {
    "label": "fftw_plan()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "fftw_plan()"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd(complex_type * dst,complex_type * src,int nfft)"
  },
  {
    "label": "fftwf_execute_dft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftwf_execute_dft(m_plan, src,dst)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv(complex_type * dst,complex_type * src,int nfft)"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd(complex_type * dst,scalar_type * src,int nfft)"
  },
  {
    "label": "fftwf_execute_dft_r2c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftwf_execute_dft_r2c(m_plan,src,dst)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv(scalar_type * dst,complex_type * src,int nfft)"
  },
  {
    "label": "fftwf_execute_dft_c2r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftwf_execute_dft_c2r(m_plan, src,dst)"
  },
  {
    "label": "fwd2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd2(complex_type * dst,complex_type * src,int n0,int n1)"
  },
  {
    "label": "inv2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv2(complex_type * dst,complex_type * src,int n0,int n1)"
  },
  {
    "label": "fftw_execute_dft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftw_execute_dft(m_plan, src,dst)"
  },
  {
    "label": "fftw_execute_dft_r2c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftw_execute_dft_r2c(m_plan,src,dst)"
  },
  {
    "label": "fftw_execute_dft_c2r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftw_execute_dft_c2r(m_plan, src,dst)"
  },
  {
    "label": "fftwl_execute_dft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftwl_execute_dft(m_plan, src,dst)"
  },
  {
    "label": "fftwl_execute_dft_r2c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftwl_execute_dft_r2c(m_plan,src,dst)"
  },
  {
    "label": "fftwl_execute_dft_c2r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fftwl_execute_dft_c2r(m_plan, src,dst)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} } ; template<_Scalar> struct fftw_impl { typedef _Scalar Scalar ; typedef std::complex<Scalar> Complex ; void)",
    "insertText": "clear()"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd(Complex * dst,const Complex *src,int nfft)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(nfft,false,dst,src).fwd(fftw_cast(dst), fftw_cast(src),nfft)"
  },
  {
    "label": "fwd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd(Complex * dst,const Scalar * src,int nfft)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(nfft,false,dst,src).fwd(fftw_cast(dst), fftw_cast(src) ,nfft)"
  },
  {
    "label": "fwd2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fwd2(Complex * dst, const Complex * src, int n0,int n1)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(n0,n1,false,dst,src).fwd2(fftw_cast(dst), fftw_cast(src) ,n0,n1)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv(Complex * dst,const Complex *src,int nfft)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(nfft,true,dst,src).inv(fftw_cast(dst), fftw_cast(src),nfft)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv(Scalar * dst,const Complex * src,int nfft)"
  },
  {
    "label": "inv2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "inv2(Complex * dst, const Complex * src, int n0,int n1)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plan(n0,n1,true,dst,src).inv2(fftw_cast(dst), fftw_cast(src) ,n0,n1)"
  },
  {
    "label": "get_plan()",
    "kind": "Method",
    "detail": "Function (} protected : typedef fftw_plan<Scalar> PlanData ; typedef Eigen::numext::int64_t int64_t ; typedef std::map<int64_t,PlanData> PlanMap ; PlanMap m_plans ; PlanData&)",
    "insertText": "get_plan(int nfft,bool inverse,void * dst,const void * src)"
  },
  {
    "label": "inplace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "inplace(dst==src)"
  },
  {
    "label": "aligned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "aligned((reinterpret_cast<size_t>(src)&15) | (reinterpret_cast<size_t>(dst)&15))"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "key((nfft<<3 ) | (inverse<<2) | (inplace<<1) | aligned)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "key(( (((int64_t)n0) << 30)|(n1<<3 ) | (inverse<<2) | (inplace<<1) | aligned ) << 1)"
  }
]