[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorLayoutSwapOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorLayoutSwapOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_LAYOUT_SWAP_H # define EIGEN_CXX11_TENSOR_TENSOR_LAYOUT_SWAP_H namespace Eigen { namespace internal { template<XprType> struct traits<TensorLayoutSwapOp<XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = traits<XprType>::NumDimensions ; const int)",
    "insertText": "Layout(traits<XprType>::Layout == ColMajor)"
  },
  {
    "label": "TensorLayoutSwapOp()",
    "kind": "Method",
    "detail": "Function (typedef XprTraits::PointerType PointerType ; } ; template<XprType> struct eval<TensorLayoutSwapOp<XprType>,Eigen::Dense> { typedef const TensorLayoutSwapOp<XprType>& type ; } ; template<XprType> struct nested<TensorLayoutSwapOp<XprType>,1,eval<TensorLayoutSwapOp<XprType>>::type> { typedef TensorLayoutSwapOp<XprType> type ; } ; } template<XprType> class TensorLayoutSwapOp : public TensorBase<TensorLayoutSwapOp<XprType>,WriteAccessors> { public : typedef TensorBase<TensorLayoutSwapOp<XprType>,WriteAccessors> Base ; typedef Eigen::internal::traits<TensorLayoutSwapOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef internal::remove_const<XprType::CoeffReturnType>::type CoeffReturnType ; typedef Eigen::internal::nested<TensorLayoutSwapOp>::type Nested ; typedef Eigen::internal::traits<TensorLayoutSwapOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorLayoutSwapOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorLayoutSwapOp(const XprType& expr) : m_xpr(expr)"
  },
  {
    "label": "expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<XprType::Nested>::type&)",
    "insertText": "expression()"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (} ; template<ArgType,Device> struct TensorEvaluator<const TensorLayoutSwapOp<ArgType>,Device> { typedef TensorLayoutSwapOp<ArgType> XprType ; typedef XprType::Index Index ; const int NumDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; enum { IsAligned = TensorEvaluator<ArgType,Device>::IsAligned,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = false,PreferBlockAccess = TensorEvaluator<ArgType,Device>::PreferBlockAccess,)",
    "insertText": "Layout(static_cast<int>(TensorEvaluator<ArgType, Device>::Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} } # ifdef EIGEN_USE_SYCL EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "bind(cl::sycl::handler &cgh)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Storage::Type)",
    "insertText": "data()"
  },
  {
    "label": "impl()",
    "kind": "Method",
    "detail": "Function (} const TensorEvaluator<ArgType,Device>&)",
    "insertText": "impl()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (this -> m_impl . template writePacket<)",
    "insertText": "StoreMode(index, x)"
  }
]