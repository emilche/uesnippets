[
  {
    "label": "NtpTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NtpTime"
  },
  {
    "label": "NtpTime()",
    "kind": "Method",
    "detail": "Function (# ifndef SYSTEM_WRAPPERS_INCLUDE_NTP_TIME_H_ # define SYSTEM_WRAPPERS_INCLUDE_NTP_TIME_H_ # include<cmath> # include<cstdint> # include<limits> # include \" rtc_base / numerics / safe_conversions . h \" namespace webrtc { class NtpTime { public : uint64_t kFractionsPerSecond = 0 x100000000 ;)",
    "insertText": "NtpTime() : value_(0)"
  },
  {
    "label": "NtpTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NtpTime(uint64_t value) : value_(value)"
  },
  {
    "label": "NtpTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NtpTime(uint32_t seconds, uint32_t fractions) : value_(seconds * kFractionsPerSecond + fractions)"
  },
  {
    "label": "NtpTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NtpTime(const NtpTime&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NtpTime&)",
    "insertText": "operator(const NtpTime&)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "uint64_t()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (value_ = seconds* kFractionsPerSecond + fractions ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "ToMs()",
    "kind": "Method",
    "detail": "Function (value_ = 0 ; } int64_t)",
    "insertText": "ToMs()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (double kNtpFracPerMs = 4 . 2 9 4 9 6 7 2 9 6 E6 ; const double frac_ms = static_cast<)",
    "insertText": "double(fractions())"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Valid()"
  },
  {
    "label": "fractions()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "fractions()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : uint64_t value_ ; } ; bool)",
    "insertText": "operator(const NtpTime& n1, const NtpTime& n2)"
  },
  {
    "label": "Int64MsToQ32x32()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "Int64MsToQ32x32(int64_t milliseconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(result >= static_cast<double>(std::numeric_limits<int64_t>::max()))"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (} return rtc::dchecked_cast<)",
    "insertText": "int64_t(result)"
  },
  {
    "label": "Int64MsToUQ32x32()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "Int64MsToUQ32x32(int64_t milliseconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(result >= static_cast<double>(std::numeric_limits<uint64_t>::max()))"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (} return rtc::dchecked_cast<)",
    "insertText": "uint64_t(result)"
  },
  {
    "label": "Q32x32ToInt64Ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "Q32x32ToInt64Ms(int64_t q32x32)"
  },
  {
    "label": "UQ32x32ToInt64Ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "UQ32x32ToInt64Ms(uint64_t q32x32)"
  }
]