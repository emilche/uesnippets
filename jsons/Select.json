[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Select",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Select"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELECT_H # define EIGEN_SELECT_H namespace Eigen { namespace internal { template<ConditionMatrixType,ThenMatrixType,ElseMatrixType> struct traits<Select<ConditionMatrixType,ThenMatrixType,ElseMatrixType>> : traits<ThenMatrixType> { typedef traits<ThenMatrixType>::Scalar Scalar ; typedef Dense StorageKind ; typedef traits<ThenMatrixType>::XprKind XprKind ; typedef ConditionMatrixType::Nested ConditionMatrixNested ; typedef ThenMatrixType::Nested ThenMatrixNested ; typedef ElseMatrixType::Nested ElseMatrixNested ; enum { RowsAtCompileTime = ConditionMatrixType::RowsAtCompileTime,ColsAtCompileTime = ConditionMatrixType::ColsAtCompileTime,MaxRowsAtCompileTime = ConditionMatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = ConditionMatrixType::MaxColsAtCompileTime,)",
    "insertText": "Flags(unsigned int)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<ConditionMatrixType,ThenMatrixType,ElseMatrixType> class Select : public internal::dense_xpr_base<Select<ConditionMatrixType,ThenMatrixType,ElseMatrixType>>::type,internal::no_assignment_operator { public : typedef internal::dense_xpr_base<Select>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Select) inline EIGEN_DEVICE_FUNC Select(const ConditionMatrixType& a_conditionMatrix, const ThenMatrixType& a_thenMatrix, const ElseMatrixType& a_elseMatrix) : m_condition(a_conditionMatrix), m_then(a_thenMatrix), m_else(a_elseMatrix)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_condition.rows() == m_then.rows() && m_condition.rows() == m_else.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_condition.cols() == m_then.cols() && m_condition.cols() == m_else.cols())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar)",
    "insertText": "coeff(Index i, Index j)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "conditionMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const ConditionMatrixType&)",
    "insertText": "conditionMatrix()"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<ThenDerived> EIGEN_DEVICE_FUNC const Select<Derived,ThenDerived,ThenDerived::ConstantReturnType> DenseBase<Derived)",
    "insertText": "select(const DenseBase<ThenDerived>& thenMatrix, const typename ThenDerived::Scalar& elseScalar)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<ElseDerived> EIGEN_DEVICE_FUNC const Select<Derived,ElseDerived::ConstantReturnType,ElseDerived> DenseBase<Derived)",
    "insertText": "select(const typename ElseDerived::Scalar& thenScalar, const DenseBase<ElseDerived>& elseMatrix)"
  }
]