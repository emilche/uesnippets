[
  {
    "label": "FTestCommandBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTestCommandBuilder"
  },
  {
    "label": "TBaseTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseTest"
  },
  {
    "label": "FTestCommandBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Reverse . h \" # include \" Misc / AutomationTest . h \" # include \" Commands / TestCommands . h \" class FTestCommandBuilder { public :)",
    "insertText": "FTestCommandBuilder(FAutomationTestBase& InTestRunner) : TestRunner(InTestRunner)"
  },
  {
    "label": "FTestCommandBuilder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTestCommandBuilder()"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "Do(const TCHAR* Description, TFunction<void()> Action)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CommandQueue .)",
    "insertText": "Add(MakeShared<FExecute>(TestRunner, Action, Description))"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FTestCommandBuilder&)",
    "insertText": "Do(TFunction<void()> Action)"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "Then(TFunction<void()> Action)"
  },
  {
    "label": "Then()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "Then(const TCHAR* Description, TFunction<void()> Action)"
  },
  {
    "label": "Until()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "Until(const TCHAR* Description, TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CommandQueue .)",
    "insertText": "Add(MakeShared<FWaitUntil>(TestRunner, Query, Timeout, Description))"
  },
  {
    "label": "Until()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FTestCommandBuilder&)",
    "insertText": "Until(TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "StartWhen()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "StartWhen(TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "StartWhen()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "StartWhen(const TCHAR* Description, TFunction<bool()> Query, FTimespan Timeout = FTimespan::FromSeconds(10))"
  },
  {
    "label": "WaitDelay()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "WaitDelay(FTimespan Timeout)"
  },
  {
    "label": "WaitDelay()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "WaitDelay(const TCHAR* Description, FTimespan Timeout)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CommandQueue .)",
    "insertText": "Add(MakeShared<FWaitDelay>(TestRunner, Timeout, Description))"
  },
  {
    "label": "OnTearDown()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FTestCommandBuilder&)",
    "insertText": "OnTearDown(const TCHAR* Description, TFunction<void()> Action)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TearDownQueue .)",
    "insertText": "Add(MakeShared<FExecute>(TestRunner, Action, Description, ECQTestFailureBehavior::Run))"
  },
  {
    "label": "OnTearDown()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FTestCommandBuilder&)",
    "insertText": "OnTearDown(TFunction<void()> Action)"
  },
  {
    "label": "CleanUpWith()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "CleanUpWith(const TCHAR* Description, TFunction<void()> Action)"
  },
  {
    "label": "CleanUpWith()",
    "kind": "Method",
    "detail": "Function (} FTestCommandBuilder&)",
    "insertText": "CleanUpWith(TFunction<void()> Action)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IAutomationLatentCommand>)",
    "insertText": "Build()"
  },
  {
    "label": "BuildTearDown()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IAutomationLatentCommand>)",
    "insertText": "BuildTearDown()"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(TearDownQueue)"
  },
  {
    "label": "BuildQueue()",
    "kind": "Method",
    "detail": "Function (} private : TSharedPtr<IAutomationLatentCommand>)",
    "insertText": "BuildQueue(TArray<TSharedPtr<IAutomationLatentCommand>>& Queue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAutomationLatentCommand> Result = nullptr ;)",
    "insertText": "if(Queue.Num() == 0)"
  },
  {
    "label": "FRunSequence()",
    "kind": "Method",
    "detail": "Function (Result = Queue [ 0 ] ; } else { Result = MakeShared<)",
    "insertText": "FRunSequence(Queue)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} Queue .)",
    "insertText": "Empty()"
  }
]