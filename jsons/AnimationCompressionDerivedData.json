[
  {
    "label": "FCompressedAnimSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedAnimSequence"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FCacheGetValueResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheGetValueResponse"
  },
  {
    "label": "FCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheKey"
  },
  {
    "label": "FAnimationSequenceAsyncCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationSequenceAsyncCacheTask"
  },
  {
    "label": "FAnimationSequenceAsyncBuildWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationSequenceAsyncBuildWorker"
  },
  {
    "label": "FAnimationSequenceAsyncBuildTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationSequenceAsyncBuildTask"
  },
  {
    "label": "FAnimationSequenceAsyncBuildWorker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_EDITORONLY_DATA # include \" DerivedDataRequestOwner . h \" # include \" Containers / StringFwd . h \" # include \" Experimental / Misc / ExecutionResource . h \" # include \" Async / AsyncWork . h \" # include \" Animation / AnimCompressionTypes . h \" # include \" IO / IoHash . h \" # endif # include \" ProfilingDebugging / CookStats . h \" struct FCompressedAnimSequence ; class UAnimSequence ; namespace UE::DerivedData { struct FCacheGetValueResponse ; struct FCacheKey ; } namespace UE::Anim { # if ENABLE_COOK_STATS namespace AnimSequenceCookStats { FDerivedDataUsageStats UsageStats ; } # endif # if WITH_EDITOR class FAnimationSequenceAsyncCacheTask ; class FAnimationSequenceAsyncBuildWorker : public FNonAbandonableTask { FAnimationSequenceAsyncCacheTask* Owner ; FIoHash IoHash ; public :)",
    "insertText": "FAnimationSequenceAsyncBuildWorker(FAnimationSequenceAsyncCacheTask* InOwner, const FIoHash& InIoHash) : Owner(InOwner) , IoHash(InIoHash)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "FAnimationSequenceAsyncBuildTask()",
    "kind": "Method",
    "detail": "Function (} ; struct FAnimationSequenceAsyncBuildTask : public FAsyncTask<FAnimationSequenceAsyncBuildWorker> {)",
    "insertText": "FAnimationSequenceAsyncBuildTask(FAnimationSequenceAsyncCacheTask* InOwner, const FIoHash& InIoHash) : FAsyncTask<FAnimationSequenceAsyncBuildWorker>(InOwner, InIoHash)"
  },
  {
    "label": "FAnimationSequenceAsyncCacheTask()",
    "kind": "Method",
    "detail": "Function (} } ; class FAnimationSequenceAsyncCacheTask { public :)",
    "insertText": "FAnimationSequenceAsyncCacheTask(const FIoHash& InKeyHash, FCompressibleAnimPtr InCompressibleAnimPtr, FCompressedAnimSequence* InCompressedData, UAnimSequence& InAnimSequence, const ITargetPlatform* InTargetPlatform)"
  },
  {
    "label": "FAnimationSequenceAsyncCacheTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimationSequenceAsyncCacheTask()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait(bool bPerformWork = true)"
  },
  {
    "label": "WaitWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitWithTimeout(float TimeLimitSeconds)"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Poll()"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reschedule(FQueuedThreadPool* InThreadPool, EQueuedWorkPriority InPriority)"
  },
  {
    "label": "WasCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasCancelled()"
  },
  {
    "label": "GetTargetCompressedData()",
    "kind": "Method",
    "detail": "Function (} FCompressedAnimSequence*)",
    "insertText": "GetTargetCompressedData()"
  },
  {
    "label": "EndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCache(DerivedData::FCacheGetValueResponse&& Response)"
  },
  {
    "label": "BuildData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildData()"
  },
  {
    "label": "LaunchCompressionTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchCompressionTask(const FSharedString& Name, const DerivedData::FCacheKey& Key)"
  },
  {
    "label": "GetRequiredMemoryEstimate()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetRequiredMemoryEstimate()"
  }
]