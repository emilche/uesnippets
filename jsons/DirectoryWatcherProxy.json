[
  {
    "label": "FDirectoryWatcherProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirectoryWatcherProxy"
  },
  {
    "label": "FWatchCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWatchCallback"
  },
  {
    "label": "FDirectoryWatcherProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IDirectoryWatcher . h \" # include \" Containers / Map . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" class FDirectoryWatcherProxy : public IDirectoryWatcher { public :)",
    "insertText": "FDirectoryWatcherProxy()"
  },
  {
    "label": "RegisterDirectoryChangedCallback_Handle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDirectoryChangedCallback_Handle(const FString& Directory, const FDirectoryChanged& InDelegate, FDelegateHandle& OutHandle, uint32 Flags)"
  },
  {
    "label": "UnregisterDirectoryChangedCallback_Handle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDirectoryChangedCallback_Handle(const FString& Directory, FDelegateHandle InHandle)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DumpStats()"
  },
  {
    "label": "RegisterExternalChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalChanges(TArrayView<const FFileChangeData> FileChanges)"
  },
  {
    "label": "RegisterExternalChanges_GameThread()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterExternalChanges_GameThread(TArrayView<const FFileChangeData> FileChanges)"
  },
  {
    "label": "ProcessPendingChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingChanges()"
  }
]