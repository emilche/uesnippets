[
  {
    "label": "FChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannel"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FWaitingScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaitingScope"
  },
  {
    "label": "FTaskTimingEventScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaskTimingEventScope"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Trace / Config . h \" # include \" Trace / Trace . h \" # include \" Trace / Detail / Channel . h \" namespace UE { namespace Trace { class FChannel ; } } # if !)",
    "insertText": "defined(UE_TASK_TRACE_ENABLED)"
  },
  {
    "label": "UE_TRACE_CHANNEL_EXTERN()",
    "kind": "Method",
    "detail": "Function (enum Type : int32 ; } namespace TaskTrace {)",
    "insertText": "UE_TRACE_CHANNEL_EXTERN(TaskChannel)"
  },
  {
    "label": "FId()",
    "kind": "Method",
    "detail": "Function (using FId = uint64 ; const FId InvalidId = ~)",
    "insertText": "FId(0)"
  },
  {
    "label": "GenerateTaskId()",
    "kind": "Method",
    "detail": "Function (uint32 TaskTraceVersion = 1 ; FId)",
    "insertText": "GenerateTaskId()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Created()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Created(FId TaskId, uint64 TaskSize)"
  },
  {
    "label": "Launched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Launched(FId TaskId, const TCHAR* DebugName, bool bTracked, ENamedThreads::Type ThreadToExecuteOn, uint64 TaskSize)"
  },
  {
    "label": "Scheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduled(FId TaskId)"
  },
  {
    "label": "SubsequentAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubsequentAdded(FId TaskId, FId SubsequentId)"
  },
  {
    "label": "Started()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Started(FId TaskId)"
  },
  {
    "label": "Finished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finished(FId TaskId)"
  },
  {
    "label": "Completed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Completed(FId TaskId)"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed(FId TaskId)"
  },
  {
    "label": "FWaitingScope()",
    "kind": "Method",
    "detail": "Function (struct FWaitingScope {)",
    "insertText": "FWaitingScope(const TArray<FId>& Tasks)"
  },
  {
    "label": "FWaitingScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWaitingScope(FId TaskId)"
  },
  {
    "label": "FWaitingScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWaitingScope()"
  },
  {
    "label": "FTaskTimingEventScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FTaskTimingEventScope {)",
    "insertText": "FTaskTimingEventScope(TaskTrace::FId InTaskId)"
  },
  {
    "label": "FTaskTimingEventScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTaskTimingEventScope()"
  }
]