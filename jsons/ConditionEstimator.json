[
  {
    "label": "rcond_compute_sign",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcond_compute_sign"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CONDITIONESTIMATOR_H # define EIGEN_CONDITIONESTIMATOR_H namespace Eigen { namespace internal { template<Vector,RealVector,bool IsComplex> struct rcond_compute_sign { Vector)",
    "insertText": "run(const Vector& v)"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (const RealVector v_abs = v .)",
    "insertText": "cwiseAbs()"
  },
  {
    "label": "rcond_invmatrix_L1_norm_estimate()",
    "kind": "Method",
    "detail": "Function (} } ; template<Decomposition> Decomposition::RealScalar)",
    "insertText": "rcond_invmatrix_L1_norm_estimate(const Decomposition& dec)"
  },
  {
    "label": "is_complex()",
    "kind": "Method",
    "detail": "Function (typedef Decomposition::MatrixType MatrixType ; typedef Decomposition::Scalar Scalar ; typedef Decomposition::RealScalar RealScalar ; typedef internal::plain_col_type<MatrixType>::type Vector ; typedef internal::plain_col_type<MatrixType,RealScalar>::type RealVector ; const bool)",
    "insertText": "is_complex(NumTraits<Scalar>::IsComplex != 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dec.rows() == dec.cols())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index n = dec .)",
    "insertText": "rows()"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef __INTEL_COMPILER # pragma warning push # pragma)",
    "insertText": "warning(disable : 2259 ) #endif Vector v = dec.solve(Vector::Ones(n) / Scalar(n))"
  },
  {
    "label": "lpNorm()",
    "kind": "Method",
    "detail": "Function (# ifdef __INTEL_COMPILER # pragma warning pop # endif RealScalar lower_bound = v . template)",
    "insertText": "lpNorm()"
  },
  {
    "label": "sign_vector()",
    "kind": "Method",
    "detail": "Function (RealScalar old_lower_bound = lower_bound ; Vector)",
    "insertText": "sign_vector(n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vector old_sign_vector ; Index v_max_abs_index = - 1 ; Index old_v_max_abs_index = v_max_abs_index ;)",
    "insertText": "for(int k = 0; k < 4; ++k)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (sign_vector = internal::rcond_compute_sign<Vector,RealVector,is_complex)",
    "insertText": "run(v)"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (break ; } v = dec .)",
    "insertText": "adjoint().solve(sign_vector)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "real().cwiseAbs().maxCoeff(&v_max_abs_index)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (break ; } v = dec .)",
    "insertText": "solve(Vector::Unit(n, v_max_abs_index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(!is_complex)"
  },
  {
    "label": "alternating_sign()",
    "kind": "Method",
    "detail": "Function (old_sign_vector = sign_vector ; } old_v_max_abs_index = v_max_abs_index ; old_lower_bound = lower_bound ; } Scalar)",
    "insertText": "alternating_sign(RealScalar(1))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (v [ i ] = alternating_sign* static_cast<)",
    "insertText": "RealScalar(RealScalar(1) + (RealScalar(i) / (RealScalar(n - 1))))"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (alternating_sign = - alternating_sign ; } v = dec .)",
    "insertText": "solve(v)"
  },
  {
    "label": "alternate_lower_bound()",
    "kind": "Method",
    "detail": "Function (const RealScalar)",
    "insertText": "alternate_lower_bound(2 * v.template lpNorm<1>()) / (3 * RealScalar(n))"
  },
  {
    "label": "rcond_estimate_helper()",
    "kind": "Method",
    "detail": "Function (} template<Decomposition> Decomposition::RealScalar)",
    "insertText": "rcond_estimate_helper(typename Decomposition::RealScalar matrix_norm, const Decomposition& dec)"
  },
  {
    "label": "rcond_invmatrix_L1_norm_estimate()",
    "kind": "Method",
    "detail": "Function (const RealScalar inverse_matrix_norm =)",
    "insertText": "rcond_invmatrix_L1_norm_estimate(dec)"
  }
]