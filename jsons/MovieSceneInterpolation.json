[
  {
    "label": "FInvalidValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvalidValue"
  },
  {
    "label": "FConstantValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstantValue"
  },
  {
    "label": "FLinearInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearInterpolation"
  },
  {
    "label": "FQuadraticInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuadraticInterpolation"
  },
  {
    "label": "FCubicInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCubicInterpolation"
  },
  {
    "label": "FQuarticInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuarticInterpolation"
  },
  {
    "label": "FCubicBezierInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCubicBezierInterpolation"
  },
  {
    "label": "FWeightedCubicInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedCubicInterpolation"
  },
  {
    "label": "TInterpSolutions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInterpSolutions"
  },
  {
    "label": "FInterpolationExtents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterpolationExtents"
  },
  {
    "label": "FCachedInterpolationRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInterpolationRange"
  },
  {
    "label": "FCachedInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInterpolation"
  },
  {
    "label": "TInterpSolutions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameTime . h \" # include \" Misc / FrameRate . h \" # include \" Misc / TVariant . h \" namespace UE::MovieScene::Interpolation { struct FInvalidValue ; struct FConstantValue ; struct FLinearInterpolation ; struct FQuadraticInterpolation ; struct FCubicInterpolation ; struct FQuarticInterpolation ; struct FCubicBezierInterpolation ; struct FWeightedCubicInterpolation ; template<T,int MinN> struct TInterpSolutions { template<int N>)",
    "insertText": "TInterpSolutions(T (&In)[N]) requires (N >= MinN) : Array(In)"
  },
  {
    "label": "OtherN()",
    "kind": "Method",
    "detail": "Function (} template<int OtherN> operator TInterpSolutions<T,)",
    "insertText": "OtherN() const requires (OtherN <= MinN)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(int Index)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} T* Array ; } ; struct FInterpolationExtents { double MinValue = std::numeric_limits<double)",
    "insertText": "max()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (FFrameTime MinValueTime ; FFrameTime MaxValueTime ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(double Value, FFrameTime Time)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine(const FInterpolationExtents& Other)"
  },
  {
    "label": "FConstantValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstantValue(FFrameNumber InOrigin, double InValue) : Value(InValue) , Origin(InOrigin)"
  },
  {
    "label": "Derivative()",
    "kind": "Method",
    "detail": "Function (} FConstantValue)",
    "insertText": "Derivative()"
  },
  {
    "label": "Integral()",
    "kind": "Method",
    "detail": "Function (FLinearInterpolation)",
    "insertText": "Integral(double ConstantOffset = 0.0)"
  },
  {
    "label": "FLinearInterpolation()",
    "kind": "Method",
    "detail": "Function (} ; struct FLinearInterpolation { double Coefficient ; double Constant ; FFrameNumber Origin ;)",
    "insertText": "FLinearInterpolation(FFrameNumber InOrigin, double InCoefficient, double InConstant) : Coefficient(InCoefficient) , Constant(InConstant) , Origin(InOrigin)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Evaluate(FFrameTime InTime)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Solve(double Value, TInterpSolutions<FFrameTime, 1> OutResults)"
  },
  {
    "label": "SolveWithin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SolveWithin(FFrameTime Start, FFrameTime End, double Value, TInterpSolutions<FFrameTime, 1> OutResults)"
  },
  {
    "label": "FQuadraticInterpolation()",
    "kind": "Method",
    "detail": "Function (} ; struct FQuadraticInterpolation { double A,B ; double Constant ; FFrameNumber Origin ;)",
    "insertText": "FQuadraticInterpolation(FFrameNumber InOrigin, double InA, double InB, double InConstant) : A(InA), B(InB) , Constant(InConstant) , Origin(InOrigin)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Solve(double Value, TInterpSolutions<FFrameTime, 2> OutResults)"
  },
  {
    "label": "SolveWithin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SolveWithin(FFrameTime Start, FFrameTime End, double Value, TInterpSolutions<FFrameTime, 2> OutResults)"
  },
  {
    "label": "FCubicInterpolation()",
    "kind": "Method",
    "detail": "Function (} ; struct FCubicInterpolation { double A,B,C ; double Constant ; double DX ; FFrameNumber Origin ;)",
    "insertText": "FCubicInterpolation(FFrameNumber InOrigin, double InA, double InB, double InC, double InConstant, double InDX = 1.0) : A(InA), B(InB), C(InC) , Constant(InConstant) , DX(InDX) , Origin(InOrigin)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Solve(double Value, TInterpSolutions<FFrameTime, 3> OutResults)"
  },
  {
    "label": "SolveWithin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SolveWithin(FFrameTime Start, FFrameTime End, double Value, TInterpSolutions<FFrameTime, 3> OutResults)"
  },
  {
    "label": "FQuarticInterpolation()",
    "kind": "Method",
    "detail": "Function (} ; struct FQuarticInterpolation { double A,B,C,D ; double Constant ; double DX ; FFrameNumber Origin ;)",
    "insertText": "FQuarticInterpolation(FFrameNumber InOrigin, double InA, double InB, double InC, double InD, double InConstant, double InDX = 1.0) : A(InA), B(InB), C(InC), D(InD) , Constant(InConstant) , DX(InDX) , Origin(InOrigin)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Solve(double Value, TInterpSolutions<FFrameTime, 4> OutResults)"
  },
  {
    "label": "SolveWithin()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SolveWithin(FFrameTime Start, FFrameTime End, double Value, TInterpSolutions<FFrameTime, 4> OutResults)"
  },
  {
    "label": "FCubicBezierInterpolation()",
    "kind": "Method",
    "detail": "Function (} ; struct FCubicBezierInterpolation { double DX ; double P0,P1,P2,P3 ; FFrameNumber Origin ;)",
    "insertText": "FCubicBezierInterpolation(FFrameNumber InOrigin, double InDX, double InStartValue, double InEndValue, double InStartTangent, double InEndTangent)"
  },
  {
    "label": "AsCubic()",
    "kind": "Method",
    "detail": "Function (FCubicInterpolation)",
    "insertText": "AsCubic()"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Solve(double InValue, TInterpSolutions<FFrameTime, 4> OutResults)"
  },
  {
    "label": "FWeightedCubicInterpolation()",
    "kind": "Method",
    "detail": "Function (} ; struct FWeightedCubicInterpolation { double DX ; double StartKeyValue ; double NormalizedStartTanDX ; double StartKeyTanY ; double StartWeight ; double EndKeyValue ; double NormalizedEndTanDX ; double EndKeyTanY ; double EndWeight ; FFrameNumber Origin ;)",
    "insertText": "FWeightedCubicInterpolation(FFrameRate TickResolution, FFrameNumber InOrigin, FFrameNumber StartTime, double StartValue, double StartTangent, double StartTangentWeight, bool bStartIsWeighted, FFrameNumber EndTime, double EndValue, double EndTangent, double EndTangentWeight, bool bEndIsWeighted)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ; struct FCachedInterpolationRange { FCachedInterpolationRange)",
    "insertText": "Empty()"
  },
  {
    "label": "Finite()",
    "kind": "Method",
    "detail": "Function (FCachedInterpolationRange)",
    "insertText": "Finite(FFrameNumber InStart, FFrameNumber InEnd)"
  },
  {
    "label": "Infinite()",
    "kind": "Method",
    "detail": "Function (FCachedInterpolationRange)",
    "insertText": "Infinite()"
  },
  {
    "label": "Only()",
    "kind": "Method",
    "detail": "Function (FCachedInterpolationRange)",
    "insertText": "Only(FFrameNumber InTime)"
  },
  {
    "label": "From()",
    "kind": "Method",
    "detail": "Function (FCachedInterpolationRange)",
    "insertText": "From(FFrameNumber InStart)"
  },
  {
    "label": "Until()",
    "kind": "Method",
    "detail": "Function (FCachedInterpolationRange)",
    "insertText": "Until(FFrameNumber InEnd)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "Clamp(FFrameNumber In)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "Clamp(FFrameTime In)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FFrameNumber FrameNumber)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (FFrameNumber Start ; FFrameNumber End ; } ; struct FCachedInterpolation {)",
    "insertText": "FCachedInterpolation()"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FConstantValue& Constant)"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FLinearInterpolation& Linear)"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FQuadraticInterpolation& Quadratic)"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FCubicInterpolation& Cubic)"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FQuarticInterpolation& Quartic)"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FCubicBezierInterpolation& CubicBezier)"
  },
  {
    "label": "FCachedInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedInterpolation(const FCachedInterpolationRange& InRange, const FWeightedCubicInterpolation& WeightedCubic)"
  },
  {
    "label": "IsCacheValidForTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheValidForTime(FFrameNumber FrameNumber)"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (FCachedInterpolationRange)",
    "insertText": "GetRange()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(FFrameTime FrameTime, double& OutResult)"
  },
  {
    "label": "ComputeIntegral()",
    "kind": "Method",
    "detail": "Function (TOptional<FCachedInterpolation>)",
    "insertText": "ComputeIntegral(double ConstantOffset = 0.0)"
  },
  {
    "label": "ComputeDerivative()",
    "kind": "Method",
    "detail": "Function (TOptional<FCachedInterpolation>)",
    "insertText": "ComputeDerivative()"
  },
  {
    "label": "InverseEvaluate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "InverseEvaluate(double InValue, TInterpSolutions<FFrameTime, 4> OutResults)"
  },
  {
    "label": "ComputeExtents()",
    "kind": "Method",
    "detail": "Function (FInterpolationExtents)",
    "insertText": "ComputeExtents(FFrameTime From, FFrameTime To)"
  },
  {
    "label": "ComputeExtents()",
    "kind": "Method",
    "detail": "Function (FInterpolationExtents)",
    "insertText": "ComputeExtents()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(double Amount)"
  }
]