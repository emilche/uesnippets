[
  {
    "label": "AllocatorDispatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocatorDispatch"
  },
  {
    "label": "EnableBrpTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnableBrpTag"
  },
  {
    "label": "EnableBrpZappingTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnableBrpZappingTag"
  },
  {
    "label": "SplitMainPartitionTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SplitMainPartitionTag"
  },
  {
    "label": "UseDedicatedAlignedPartitionTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UseDedicatedAlignedPartitionTag"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_H_ # include<stddef . h> # include<stdint . h> # include \" base / allocator / buildflags . h \" # include \" base / allocator / partition_alloc_features . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / base_export . h \" # include \" base / types / strong_alias . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) && defined(PA_ALLOW_PCSCAN)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct AllocatorDispatch { using AllocFn =)",
    "insertText": "void(const AllocatorDispatch* self, size_t size, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AllocZeroInitializedFn =)",
    "insertText": "void(const AllocatorDispatch* self, size_t n, size_t size, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AllocAlignedFn =)",
    "insertText": "void(const AllocatorDispatch* self, size_t alignment, size_t size, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ReallocFn =)",
    "insertText": "void(const AllocatorDispatch* self, void* address, size_t size, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FreeFn =)",
    "insertText": "void(const AllocatorDispatch* self, void* address, void* context)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (using GetSizeEstimateFn =)",
    "insertText": "size_t(const AllocatorDispatch* self, void* address, void* context)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (using BatchMallocFn =)",
    "insertText": "unsigned(const AllocatorDispatch* self, size_t size, void** results, unsigned num_requested, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using BatchFreeFn =)",
    "insertText": "void(const AllocatorDispatch* self, void** to_be_freed, unsigned num_to_be_freed, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FreeDefiniteSizeFn =)",
    "insertText": "void(const AllocatorDispatch* self, void* ptr, size_t size, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AlignedMallocFn =)",
    "insertText": "void(const AllocatorDispatch* self, size_t size, size_t alignment, void* context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AlignedReallocFn =)",
    "insertText": "void(const AllocatorDispatch* self, void* address, size_t size, size_t alignment, void* context)"
  },
  {
    "label": "SetCallNewHandlerOnMallocFailure()",
    "kind": "Method",
    "detail": "Function (AllocFn* const alloc_function ; AllocUncheckedFn* const alloc_unchecked_function ; AllocZeroInitializedFn* const alloc_zero_initialized_function ; AllocAlignedFn* const alloc_aligned_function ; ReallocFn* const realloc_function ; FreeFn* const free_function ; GetSizeEstimateFn* const get_size_estimate_function ; BatchMallocFn* const batch_malloc_function ; BatchFreeFn* const batch_free_function ; FreeDefiniteSizeFn* const free_definite_size_function ; AlignedMallocFn* const aligned_malloc_function ; AlignedReallocFn* const aligned_realloc_function ; AlignedFreeFn* const aligned_free_function ; const AllocatorDispatch* next ; const AllocatorDispatch default_dispatch ; } ; BASE_EXPORT void)",
    "insertText": "SetCallNewHandlerOnMallocFailure(bool value)"
  },
  {
    "label": "UncheckedAlloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "UncheckedAlloc(size_t size)"
  },
  {
    "label": "UncheckedFree()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "UncheckedFree(void* ptr)"
  },
  {
    "label": "InsertAllocatorDispatch()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "InsertAllocatorDispatch(AllocatorDispatch* dispatch)"
  },
  {
    "label": "RemoveAllocatorDispatchForTesting()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "RemoveAllocatorDispatchForTesting(AllocatorDispatch* dispatch)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) && BUILDFLAG(IS_WIN) BASE_EXPORT void ConfigurePartitionAlloc()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE) #if BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) void InitializeDefaultAllocatorPartitionRoot()"
  },
  {
    "label": "InitializeAllocatorShim()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT void)",
    "insertText": "InitializeAllocatorShim()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) BASE_EXPORT void EnablePartitionAllocMemoryReclaimer()"
  },
  {
    "label": "ConfigurePartitions()",
    "kind": "Method",
    "detail": "Function (using EnableBrp = base::StrongAlias<class EnableBrpTag,bool> ; using EnableBrpZapping = base::StrongAlias<class EnableBrpZappingTag,bool> ; using SplitMainPartition = base::StrongAlias<class SplitMainPartitionTag,bool> ; using UseDedicatedAlignedPartition = base::StrongAlias<class UseDedicatedAlignedPartitionTag,bool> ; using AlternateBucketDistribution = base::features::AlternateBucketDistributionMode ; BASE_EXPORT void)",
    "insertText": "ConfigurePartitions(EnableBrp enable_brp, EnableBrpZapping enable_brp_zapping, SplitMainPartition split_main_partition, UseDedicatedAlignedPartition use_dedicated_aligned_partition, AlternateBucketDistribution use_alternate_bucket_distribution)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_ALLOW_PCSCAN) BASE_EXPORT void EnablePCScan(partition_alloc::internal::PCScan::InitConfig)"
  }
]