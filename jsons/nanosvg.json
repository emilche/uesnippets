[
  {
    "label": "NSVGpaintType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGpaintType"
  },
  {
    "label": "NSVGspreadType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGspreadType"
  },
  {
    "label": "NSVGlineJoin",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGlineJoin"
  },
  {
    "label": "NSVGlineCap",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGlineCap"
  },
  {
    "label": "NSVGfillRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGfillRule"
  },
  {
    "label": "NSVGflags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGflags"
  },
  {
    "label": "NSVGgradientStop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradientStop"
  },
  {
    "label": "NSVGgradient",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradient"
  },
  {
    "label": "NSVGpaint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGpaint"
  },
  {
    "label": "NSVGpath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGpath"
  },
  {
    "label": "NSVGshape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGshape"
  },
  {
    "label": "NSVGimage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGimage"
  },
  {
    "label": "NSVGgradientUnits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGgradientUnits"
  },
  {
    "label": "NSVGunits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGunits"
  },
  {
    "label": "NSVGcoordinate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGcoordinate"
  },
  {
    "label": "NSVGlinearData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGlinearData"
  },
  {
    "label": "NSVGradialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGradialData"
  },
  {
    "label": "NSVGgradientData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradientData"
  },
  {
    "label": "NSVGattrib",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGattrib"
  },
  {
    "label": "NSVGstyles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGstyles"
  },
  {
    "label": "NSVGparser",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGparser"
  },
  {
    "label": "NSVGNamedColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGNamedColor"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # if PLATFORM_WINDOWS # define NSVG_EXPORT)",
    "insertText": "__declspec(dllexport) #elif PLATFORM_MAC #define NSVG_EXPORT __attribute__((visibility(\"default\"))) #elif PLATFORM_LINUX #define NSVG_EXPORT __attribute__((visibility(\"default\"))) #elif PLATFORM_CONSOLE_DYNAMIC_LINK #define NSVG_EXPORT __declspec(dllexport)"
  },
  {
    "label": "nsvgParseFromFile()",
    "kind": "Method",
    "detail": "Function (# endif # endif enum NSVGpaintType { NSVG_PAINT_NONE = 0,NSVG_PAINT_COLOR = 1,NSVG_PAINT_LINEAR_GRADIENT = 2,NSVG_PAINT_RADIAL_GRADIENT = 3 } ; enum NSVGspreadType { NSVG_SPREAD_PAD = 0,NSVG_SPREAD_REFLECT = 1,NSVG_SPREAD_REPEAT = 2 } ; enum NSVGlineJoin { NSVG_JOIN_MITER = 0,NSVG_JOIN_ROUND = 1,NSVG_JOIN_BEVEL = 2 } ; enum NSVGlineCap { NSVG_CAP_BUTT = 0,NSVG_CAP_ROUND = 1,NSVG_CAP_SQUARE = 2 } ; enum NSVGfillRule { NSVG_FILLRULE_NONZERO = 0,NSVG_FILLRULE_EVENODD = 1 } ; enum NSVGflags { NSVG_FLAGS_VISIBLE = 0 x01 } ; typedef struct NSVGgradientStop { unsigned int color ; float offset ; } NSVGgradientStop ; typedef struct NSVGgradient { float xform [ 6 ] ; char spread ; float fx,fy ; int nstops ; NSVGgradientStop stops [ 1 ] ; } NSVGgradient ; typedef struct NSVGpaint { char type ; union { unsigned int color ; NSVGgradient* gradient ; } ; } NSVGpaint ; typedef struct NSVGpath { float* pts ; int npts ; char closed ; float bounds [ 4 ] ; struct NSVGpath* next ; } NSVGpath ; typedef struct NSVGshape { char id [ 6 4 ] ; NSVGpaint fill ; NSVGpaint stroke ; float opacity ; float strokeWidth ; float strokeDashOffset ; float strokeDashArray [ 8 ] ; char strokeDashCount ; char strokeLineJoin ; char strokeLineCap ; float miterLimit ; char fillRule ; unsigned char flags ; float bounds [ 4 ] ; NSVGpath* paths ; struct NSVGshape* next ; } NSVGshape ; typedef struct NSVGimage { float width ; float height ; NSVGshape* shapes ; } NSVGimage ; NSVG_EXPORT NSVGimage*)",
    "insertText": "nsvgParseFromFile(const char* filename, const char* units, float dpi)"
  },
  {
    "label": "nsvgParse()",
    "kind": "Method",
    "detail": "Function (NSVG_EXPORT NSVGimage*)",
    "insertText": "nsvgParse(char* input, const char* units, float dpi)"
  },
  {
    "label": "nsvgDuplicatePath()",
    "kind": "Method",
    "detail": "Function (NSVG_EXPORT NSVGpath*)",
    "insertText": "nsvgDuplicatePath(NSVGpath* p)"
  },
  {
    "label": "nsvgDelete()",
    "kind": "Method",
    "detail": "Function (NSVG_EXPORT void)",
    "insertText": "nsvgDelete(NSVGimage* image)"
  },
  {
    "label": "nsvgParseTransform()",
    "kind": "Method",
    "detail": "Function (NSVG_EXPORT void)",
    "insertText": "nsvgParseTransform(float* xform, const char* str)"
  },
  {
    "label": "NSVG_PI()",
    "kind": "Method",
    "detail": "Function (# ifndef NANOSVG_CPLUSPLUS # ifdef __cplusplus } # endif # endif # endif # ifdef NANOSVG_IMPLEMENTATION # include<string . h> # include<stdlib . h> # include<math . h> # define)",
    "insertText": "NSVG_PI(3.14159265358979323846264338327f) #define NSVG_KAPPA90 (0.5522847493f) #define NSVG_ALIGN_MIN 0 #define NSVG_ALIGN_MID 1 #define NSVG_ALIGN_MAX 2 #define NSVG_ALIGN_NONE 0 #define NSVG_ALIGN_MEET 1 #define NSVG_ALIGN_SLICE 2 #define NSVG_NOTUSED(v)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #if NSVG_USE_BGRA #define NSVG_RGB(r, g, b) (((unsigned int)b) | ((unsigned int)g << 8) | ((unsigned int)r << 16)) #else #define NSVG_RGB(r, g, b) (((unsigned int)r) | ((unsigned int)g << 8) | ((unsigned int)b << 16)) #endif #ifdef _MSC_VER #pragma warning(push) #pragma warning (disable: 4996) #pragma warning (disable: 4100) #pragma warning (disable: 6031) #pragma warning (disable: 6001) #ifdef __cplusplus #define NSVG_INLINE inline #else #define NSVG_INLINE #endif #else #define NSVG_INLINE inline #endif static int nsvg__isspace(char c)"
  },
  {
    "label": "nsvg__isdigit()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "nsvg__isdigit(char c)"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (} NSVG_INLINE float)",
    "insertText": "nsvg__minf(float a, float b)"
  },
  {
    "label": "nsvg__parseElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nsvg__parseElement(char* s, void (*startelCb)(NSVGparser* p, const char* el, const char** attr), void (*endelCb)(NSVGparser* p, const char* el), NSVGparser* p)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const char* attr [ NSVG_XML_MAX_ATTRIBS ] ; int nattr = 0 ; char* tagname ; int start = 0 ; int end = 0 ; char quote ;)",
    "insertText": "while(*s && nsvg__isspace(*s))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s + + ; end = 1 ; } else { start = 1 ; })",
    "insertText": "if(!*s || *s == '?' || *s == '!')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (tagname = s ;)",
    "insertText": "while(*s && !nsvg__isspace(*s))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (* s + + = ' \\ 0 ' ; })",
    "insertText": "while(!end && *s && nattr < NSVG_XML_MAX_ATTRIBS - 3)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (end = 1 ; break ; } name = s ;)",
    "insertText": "while(*s && !nsvg__isspace(*s) && *s != '=')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (* s + + = ' \\ 0 ' ; })",
    "insertText": "while(*s && *s != '\\\"' && *s != '\\'')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (quote =* s ; s + + ; value = s ;)",
    "insertText": "while(*s && *s != quote)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* s + + = ' \\ 0 ' ; })",
    "insertText": "if(name && value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (attr [ nattr + + ] = name ; attr [ nattr + + ] = value ; } } attr [ nattr + + ] = 0 ; attr [ nattr + + ] = 0 ;)",
    "insertText": "if(start && startelCb) (*startelCb)(p, tagname, attr)"
  },
  {
    "label": "nsvg__parseDefs()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "nsvg__parseDefs(char* input, void (*startelCb)(NSVGparser* p, const char* el, const char** attr), void (*endelCb)(NSVGparser* p, const char* el), void (*contentCb)(NSVGparser* p, const char* s), NSVGparser* p)"
  },
  {
    "label": "strstr()",
    "kind": "Method",
    "detail": "Function (char* defsTag =)",
    "insertText": "strstr(input, \"<defs\")"
  },
  {
    "label": "defsBuf()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "defsBuf(char*)malloc(strlen(defsTag)+1)"
  },
  {
    "label": "strcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strcpy(defsBuf, defsTag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (char* s = defsBuf ; char* mark = s ; int state = NSVG_XML_CONTENT ;)",
    "insertText": "while(p->parsedDefs == false)"
  },
  {
    "label": "nsvg__parseContent()",
    "kind": "Method",
    "detail": "Function (* s + + = ' \\ 0 ' ;)",
    "insertText": "nsvg__parseContent(mark, contentCb, p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mark = s ; state = NSVG_XML_TAG ; } else)",
    "insertText": "if(*s == '>' && state == NSVG_XML_TAG)"
  },
  {
    "label": "nsvg__parseElement()",
    "kind": "Method",
    "detail": "Function (* s + + = ' \\ 0 ' ;)",
    "insertText": "nsvg__parseElement(mark, startelCb, endelCb, p)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (mark = s ; state = NSVG_XML_CONTENT ; } else { s + + ; } })",
    "insertText": "free(defsBuf)"
  },
  {
    "label": "nsvg__parseXML()",
    "kind": "Method",
    "detail": "Function (} } return 1 ; } int)",
    "insertText": "nsvg__parseXML(char* input, void (*startelCb)(NSVGparser* p, const char* el, const char** attr), void (*endelCb)(NSVGparser* p, const char* el), void (*contentCb)(NSVGparser* p, const char* s), NSVGparser* p)"
  },
  {
    "label": "nsvg__parseDefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__parseDefs(input, startelCb, endelCb, contentCb, p)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (char* s = input ; char* mark = s ; int state = NSVG_XML_CONTENT ;)",
    "insertText": "while(*s)"
  },
  {
    "label": "nsvg__xformIdentity()",
    "kind": "Method",
    "detail": "Function (mark = s ; state = NSVG_XML_CONTENT ; } else { s + + ; } } return 1 ; } void)",
    "insertText": "nsvg__xformIdentity(float* t)"
  },
  {
    "label": "nsvg__xformSetTranslation()",
    "kind": "Method",
    "detail": "Function (t [ 0 ] = 1 . 0 f ; t [ 1 ] = 0 . 0 f ; t [ 2 ] = 0 . 0 f ; t [ 3 ] = 1 . 0 f ; t [ 4 ] = 0 . 0 f ; t [ 5 ] = 0 . 0 f ; } void)",
    "insertText": "nsvg__xformSetTranslation(float* t, float tx, float ty)"
  },
  {
    "label": "nsvg__xformSetScale()",
    "kind": "Method",
    "detail": "Function (t [ 0 ] = 1 . 0 f ; t [ 1 ] = 0 . 0 f ; t [ 2 ] = 0 . 0 f ; t [ 3 ] = 1 . 0 f ; t [ 4 ] = tx ; t [ 5 ] = ty ; } void)",
    "insertText": "nsvg__xformSetScale(float* t, float sx, float sy)"
  },
  {
    "label": "nsvg__xformSetSkewX()",
    "kind": "Method",
    "detail": "Function (t [ 0 ] = sx ; t [ 1 ] = 0 . 0 f ; t [ 2 ] = 0 . 0 f ; t [ 3 ] = sy ; t [ 4 ] = 0 . 0 f ; t [ 5 ] = 0 . 0 f ; } void)",
    "insertText": "nsvg__xformSetSkewX(float* t, float a)"
  },
  {
    "label": "tanf()",
    "kind": "Method",
    "detail": "Function (t [ 0 ] = 1 . 0 f ; t [ 1 ] = 0 . 0 f ; t [ 2 ] =)",
    "insertText": "tanf(a)"
  },
  {
    "label": "nsvg__xformSetSkewY()",
    "kind": "Method",
    "detail": "Function (t [ 3 ] = 1 . 0 f ; t [ 4 ] = 0 . 0 f ; t [ 5 ] = 0 . 0 f ; } void)",
    "insertText": "nsvg__xformSetSkewY(float* t, float a)"
  },
  {
    "label": "nsvg__xformSetRotation()",
    "kind": "Method",
    "detail": "Function (t [ 2 ] = 0 . 0 f ; t [ 3 ] = 1 . 0 f ; t [ 4 ] = 0 . 0 f ; t [ 5 ] = 0 . 0 f ; } void)",
    "insertText": "nsvg__xformSetRotation(float* t, float a)"
  },
  {
    "label": "cosf()",
    "kind": "Method",
    "detail": "Function (float cs =)",
    "insertText": "cosf(a), sn = sinf(a)"
  },
  {
    "label": "nsvg__xformMultiply()",
    "kind": "Method",
    "detail": "Function (t [ 0 ] = cs ; t [ 1 ] = sn ; t [ 2 ] = - sn ; t [ 3 ] = cs ; t [ 4 ] = 0 . 0 f ; t [ 5 ] = 0 . 0 f ; } void)",
    "insertText": "nsvg__xformMultiply(float* t, float* s)"
  },
  {
    "label": "nsvg__xformInverse()",
    "kind": "Method",
    "detail": "Function (float t0 = t [ 0 ]* s [ 0 ] + t [ 1 ]* s [ 2 ] ; float t2 = t [ 2 ]* s [ 0 ] + t [ 3 ]* s [ 2 ] ; float t4 = t [ 4 ]* s [ 0 ] + t [ 5 ]* s [ 2 ] + s [ 4 ] ; t [ 1 ] = t [ 0 ]* s [ 1 ] + t [ 1 ]* s [ 3 ] ; t [ 3 ] = t [ 2 ]* s [ 1 ] + t [ 3 ]* s [ 3 ] ; t [ 5 ] = t [ 4 ]* s [ 1 ] + t [ 5 ]* s [ 3 ] + s [ 5 ] ; t [ 0 ] = t0 ; t [ 2 ] = t2 ; t [ 4 ] = t4 ; } void)",
    "insertText": "nsvg__xformInverse(float* inv, float* t)"
  },
  {
    "label": "nsvg__xformIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformIdentity(t)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inv(float)(-t[2] * invdet)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inv(float)(((double)t[2] * t[5] - (double)t[3] * t[4]) * invdet)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inv(float)(-t[1] * invdet)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inv(float)(t[0] * invdet)"
  },
  {
    "label": "inv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inv(float)(((double)t[1] * t[4] - (double)t[0] * t[5]) * invdet)"
  },
  {
    "label": "nsvg__xformPremultiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nsvg__xformPremultiply(float* t, float* s)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (float s2 [ 6 ] ;)",
    "insertText": "memcpy(s2, s, sizeof(float) * 6)"
  },
  {
    "label": "nsvg__xformMultiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformMultiply(s2, t)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(t, s2, sizeof(float) * 6)"
  },
  {
    "label": "nsvg__xformPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nsvg__xformPoint(float* dx, float* dy, float x, float y, float* t)"
  },
  {
    "label": "nsvg__xformVec()",
    "kind": "Method",
    "detail": "Function (* dx = x* t [ 0 ] + y* t [ 2 ] + t [ 4 ] ;* dy = x* t [ 1 ] + y* t [ 3 ] + t [ 5 ] ; } void)",
    "insertText": "nsvg__xformVec(float* dx, float* dy, float x, float y, float* t)"
  },
  {
    "label": "NSVG_EPSILON()",
    "kind": "Method",
    "detail": "Function (* dx = x* t [ 0 ] + y* t [ 2 ] ;* dy = x* t [ 1 ] + y* t [ 3 ] ; } # define)",
    "insertText": "NSVG_EPSILON(1e-12) static int nsvg__ptInBounds(float* pt, float* bounds)"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (int i,j,count ; double roots [ 2 ],a,b,c,b2ac,t,v ; float* v0 =& curve [ 0 ] ; float* v1 =& curve [ 2 ] ; float* v2 =& curve [ 4 ] ; float* v3 =& curve [ 6 ] ; bounds [ 0 ] =)",
    "insertText": "nsvg__minf(v0[0], v3[0])"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (bounds [ 1 ] =)",
    "insertText": "nsvg__minf(v0[1], v3[1])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (bounds [ 2 ] =)",
    "insertText": "nsvg__maxf(v0[0], v3[0])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (bounds [ 3 ] =)",
    "insertText": "nsvg__maxf(v0[1], v3[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (a = - 3 . 0* v0 [ i ] + 9 . 0* v1 [ i ] - 9 . 0* v2 [ i ] + 3 . 0* v3 [ i ] ; b = 6 . 0* v0 [ i ] - 1 2 . 0* v1 [ i ] + 6 . 0* v2 [ i ] ; c = 3 . 0* v1 [ i ] - 3 . 0* v0 [ i ] ; count = 0 ;)",
    "insertText": "if(fabs(a) < NSVG_EPSILON)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (t = - c / b ;)",
    "insertText": "if(t > NSVG_EPSILON && t < 1.0 - NSVG_EPSILON)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { b2ac = b* b - 4 . 0* c* a ;)",
    "insertText": "if(b2ac > NSVG_EPSILON)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "t(-b + sqrt(b2ac)) / (2.0 * a)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "t(-b - sqrt(b2ac)) / (2.0 * a)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(j = 0; j < count; j++)"
  },
  {
    "label": "nsvg__evalBezier()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "nsvg__evalBezier(roots[j], v0[i], v1[i], v2[i], v3[i])"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (bounds [ 0 + i ] =)",
    "insertText": "nsvg__minf(bounds[0 + i], (float)v)"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (bounds [ 2 + i ] =)",
    "insertText": "nsvg__maxf(bounds[2 + i], (float)v)"
  },
  {
    "label": "nsvg__createParser()",
    "kind": "Method",
    "detail": "Function (} } } NSVGparser*)",
    "insertText": "nsvg__createParser()"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (NSVGparser* p ;)",
    "insertText": "p(NSVGparser*)malloc(sizeof(NSVGparser))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(p, 0, sizeof(NSVGparser))"
  },
  {
    "label": "image()",
    "kind": "Method",
    "detail": "Function (p ->)",
    "insertText": "image(NSVGimage*)malloc(sizeof(NSVGimage))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(p->image, 0, sizeof(NSVGimage))"
  },
  {
    "label": "nsvg__xformIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformIdentity(p->attr[0].xform)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(p->attr[0].id, 0, sizeof p->attr[0].id)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (p -> attr [ 0 ] . fillColor =)",
    "insertText": "NSVG_RGB(0, 0, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p -> attr [ 0 ] . opacity = 1 ; p -> attr [ 0 ] . fillOpacity = 1 ; p -> attr [ 0 ] . strokeOpacity = 1 ; p -> attr [ 0 ] . stopOpacity = 1 ; p -> attr [ 0 ] . strokeWidth = 1 ; p -> attr [ 0 ] . strokeLineJoin = NSVG_JOIN_MITER ; p -> attr [ 0 ] . strokeLineCap = NSVG_CAP_BUTT ; p -> attr [ 0 ] . miterLimit = 4 ; p -> attr [ 0 ] . fillRule = NSVG_FILLRULE_NONZERO ; p -> attr [ 0 ] . hasFill = 1 ; p -> attr [ 0 ] . visible = 1 ; return p ; error :)",
    "insertText": "if(p)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(p)"
  },
  {
    "label": "nsvg__deleteStyles()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } void)",
    "insertText": "nsvg__deleteStyles(NSVGstyles* style)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NSVGstyles* next = style -> next ;)",
    "insertText": "if(style->name != NULL) free(style->name)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(style)"
  },
  {
    "label": "nsvg__deletePaths()",
    "kind": "Method",
    "detail": "Function (style = next ; } } void)",
    "insertText": "nsvg__deletePaths(NSVGpath* path)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NSVGpath* next = path -> next ;)",
    "insertText": "if(path->pts != NULL) free(path->pts)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(path)"
  },
  {
    "label": "nsvg__deletePaint()",
    "kind": "Method",
    "detail": "Function (path = next ; } } void)",
    "insertText": "nsvg__deletePaint(NSVGpaint* paint)"
  },
  {
    "label": "nsvg__deleteGradientData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nsvg__deleteGradientData(NSVGgradientData* grad)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (NSVGgradientData* next = NULL ;)",
    "insertText": "while(grad != NULL)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (next = grad -> next ;)",
    "insertText": "free(grad->stops)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(grad)"
  },
  {
    "label": "nsvg__deleteParser()",
    "kind": "Method",
    "detail": "Function (grad = next ; } } void)",
    "insertText": "nsvg__deleteParser(NSVGparser* p)"
  },
  {
    "label": "nsvg__deleteStyles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__deleteStyles(p->styles)"
  },
  {
    "label": "nsvg__deletePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__deletePaths(p->plist)"
  },
  {
    "label": "nsvg__deleteGradientData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__deleteGradientData(p->gradients)"
  },
  {
    "label": "nsvgDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvgDelete(p->image)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(p->pts)"
  },
  {
    "label": "nsvg__resetPath()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "nsvg__resetPath(NSVGparser* p)"
  },
  {
    "label": "nsvg__addPoint()",
    "kind": "Method",
    "detail": "Function (p -> npts = 0 ; } void)",
    "insertText": "nsvg__addPoint(NSVGparser* p, float x, float y)"
  },
  {
    "label": "pts()",
    "kind": "Method",
    "detail": "Function (p -> cpts = p -> cpts ? p -> cpts* 2 : 8 ; p ->)",
    "insertText": "pts(float*)realloc(p->pts, p->cpts * 2 * sizeof(float))"
  },
  {
    "label": "nsvg__moveTo()",
    "kind": "Method",
    "detail": "Function (} p -> pts [ p -> npts* 2 + 0 ] = x ; p -> pts [ p -> npts* 2 + 1 ] = y ; p -> npts + + ; } void)",
    "insertText": "nsvg__moveTo(NSVGparser* p, float x, float y)"
  },
  {
    "label": "pts()",
    "kind": "Method",
    "detail": "Function (p ->)",
    "insertText": "pts(p->npts - 1)"
  },
  {
    "label": "nsvg__addPoint()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "nsvg__addPoint(p, x, y)"
  },
  {
    "label": "nsvg__lineTo()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "nsvg__lineTo(NSVGparser* p, float x, float y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float px,py,dx,dy ;)",
    "insertText": "if(p->npts > 0)"
  },
  {
    "label": "nsvg__addPoint()",
    "kind": "Method",
    "detail": "Function (dx = x - px ; dy = y - py ;)",
    "insertText": "nsvg__addPoint(p, px + dx / 3.0f, py + dy / 3.0f)"
  },
  {
    "label": "nsvg__addPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__addPoint(p, x - dx / 3.0f, y - dy / 3.0f)"
  },
  {
    "label": "nsvg__cubicBezTo()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "nsvg__cubicBezTo(NSVGparser* p, float cpx1, float cpy1, float cpx2, float cpy2, float x, float y)"
  },
  {
    "label": "nsvg__addPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__addPoint(p, cpx1, cpy1)"
  },
  {
    "label": "nsvg__addPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__addPoint(p, cpx2, cpy2)"
  },
  {
    "label": "nsvg__getAttr()",
    "kind": "Method",
    "detail": "Function (} NSVGattrib*)",
    "insertText": "nsvg__getAttr(NSVGparser* p)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (p -> attrHead + + ;)",
    "insertText": "memcpy(&p->attr[p->attrHead], &p->attr[p->attrHead - 1], sizeof(NSVGattrib))"
  },
  {
    "label": "nsvg__popAttr()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "nsvg__popAttr(NSVGparser* p)"
  },
  {
    "label": "nsvg__actualOrigX()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "nsvg__actualOrigX(NSVGparser* p)"
  },
  {
    "label": "nsvg__actualWidth()",
    "kind": "Method",
    "detail": "Function (float w =)",
    "insertText": "nsvg__actualWidth(p), h = nsvg__actualHeight(p)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "nsvg__convertToPixels(NSVGparser* p, NSVGcoordinate c, float orig, float length)"
  },
  {
    "label": "nsvg__getAttr()",
    "kind": "Method",
    "detail": "Function (NSVGattrib* attr =)",
    "insertText": "nsvg__getAttr(p)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (NSVGgradientData* grad = p -> gradients ;)",
    "insertText": "while(grad)"
  },
  {
    "label": "nsvg__createGradient()",
    "kind": "Method",
    "detail": "Function (grad = grad -> next ; } return NULL ; } NSVGgradient*)",
    "insertText": "nsvg__createGradient(NSVGparser* p, const char* id, const float* localBounds, char* paintType)"
  },
  {
    "label": "nsvg__findGradientData()",
    "kind": "Method",
    "detail": "Function (NSVGgradientData* data = NULL ; NSVGgradientData* ref = NULL ; NSVGgradientStop* stops = NULL ; NSVGgradient* grad = NULL ; float ox,oy,sw,sh,sl ; int nstops = 0 ; data =)",
    "insertText": "nsvg__findGradientData(p, id)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ref = data ;)",
    "insertText": "while(ref != NULL)"
  },
  {
    "label": "nsvg__findGradientData()",
    "kind": "Method",
    "detail": "Function (stops = ref -> stops ; nstops = ref -> nstops ; break ; } ref =)",
    "insertText": "nsvg__findGradientData(p, ref->ref)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(stops == NULL)"
  },
  {
    "label": "grad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "grad(NSVGgradient*)malloc(sizeof(NSVGgradient) + sizeof(NSVGgradientStop) * (nstops - 1))"
  },
  {
    "label": "nsvg__actualOrigX()",
    "kind": "Method",
    "detail": "Function (ox = localBounds [ 0 ] ; oy = localBounds [ 1 ] ; sw = localBounds [ 2 ] - localBounds [ 0 ] ; sh = localBounds [ 3 ] - localBounds [ 1 ] ; } else { ox =)",
    "insertText": "nsvg__actualOrigX(p)"
  },
  {
    "label": "nsvg__actualOrigY()",
    "kind": "Method",
    "detail": "Function (oy =)",
    "insertText": "nsvg__actualOrigY(p)"
  },
  {
    "label": "nsvg__actualWidth()",
    "kind": "Method",
    "detail": "Function (sw =)",
    "insertText": "nsvg__actualWidth(p)"
  },
  {
    "label": "nsvg__actualHeight()",
    "kind": "Method",
    "detail": "Function (sh =)",
    "insertText": "nsvg__actualHeight(p)"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (} sl =)",
    "insertText": "sqrtf(sw * sw + sh * sh) / sqrtf(2.0f)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (float x1,y1,x2,y2,dx,dy ; x1 =)",
    "insertText": "nsvg__convertToPixels(p, data->linear.x1, ox, sw)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "nsvg__convertToPixels(p, data->linear.y1, oy, sh)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (x2 =)",
    "insertText": "nsvg__convertToPixels(p, data->linear.x2, ox, sw)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "nsvg__convertToPixels(p, data->linear.y2, oy, sh)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (dx = x2 - x1 ; dy = y2 - y1 ; grad -> xform [ 0 ] = dy ; grad -> xform [ 1 ] = - dx ; grad -> xform [ 2 ] = dx ; grad -> xform [ 3 ] = dy ; grad -> xform [ 4 ] = x1 ; grad -> xform [ 5 ] = y1 ; } else { float cx,cy,fx,fy,r ; cx =)",
    "insertText": "nsvg__convertToPixels(p, data->radial.cx, ox, sw)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (cy =)",
    "insertText": "nsvg__convertToPixels(p, data->radial.cy, oy, sh)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (fx =)",
    "insertText": "nsvg__convertToPixels(p, data->radial.fx, ox, sw)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (fy =)",
    "insertText": "nsvg__convertToPixels(p, data->radial.fy, oy, sh)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "nsvg__convertToPixels(p, data->radial.r, 0, sl)"
  },
  {
    "label": "nsvg__xformMultiply()",
    "kind": "Method",
    "detail": "Function (grad -> xform [ 0 ] = r ; grad -> xform [ 1 ] = 0 ; grad -> xform [ 2 ] = 0 ; grad -> xform [ 3 ] = r ; grad -> xform [ 4 ] = cx ; grad -> xform [ 5 ] = cy ; grad -> fx = fx / r ; grad -> fy = fy / r ; })",
    "insertText": "nsvg__xformMultiply(grad->xform, data->xform)"
  },
  {
    "label": "nsvg__xformMultiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformMultiply(grad->xform, attr->xform)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (grad -> spread = data -> spread ;)",
    "insertText": "memcpy(grad->stops, stops, nstops * sizeof(NSVGgradientStop))"
  },
  {
    "label": "nsvg__getAverageScale()",
    "kind": "Method",
    "detail": "Function (grad -> nstops = nstops ;* paintType = data -> type ; return grad ; } float)",
    "insertText": "nsvg__getAverageScale(float* t)"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (float sx =)",
    "insertText": "sqrtf(t[0] * t[0] + t[2] * t[2])"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (float sy =)",
    "insertText": "sqrtf(t[1] * t[1] + t[3] * t[3])"
  },
  {
    "label": "nsvg__getLocalBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nsvg__getLocalBounds(float* bounds, NSVGshape* shape, float* xform)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NSVGpath* path ; float curve [ 4* 2 ],curveBounds [ 4 ] ; int i,first = 1 ;)",
    "insertText": "for(path = shape->paths; path != NULL; path = path->next)"
  },
  {
    "label": "nsvg__xformPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformPoint(&curve[0], &curve[1], path->pts[0], path->pts[1], xform)"
  },
  {
    "label": "nsvg__xformPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformPoint(&curve[2], &curve[3], path->pts[(i + 1) * 2], path->pts[(i + 1) * 2 + 1], xform)"
  },
  {
    "label": "nsvg__xformPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformPoint(&curve[4], &curve[5], path->pts[(i + 2) * 2], path->pts[(i + 2) * 2 + 1], xform)"
  },
  {
    "label": "nsvg__xformPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__xformPoint(&curve[6], &curve[7], path->pts[(i + 3) * 2], path->pts[(i + 3) * 2 + 1], xform)"
  },
  {
    "label": "nsvg__curveBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__curveBounds(curveBounds, curve)"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (bounds [ 0 ] = curveBounds [ 0 ] ; bounds [ 1 ] = curveBounds [ 1 ] ; bounds [ 2 ] = curveBounds [ 2 ] ; bounds [ 3 ] = curveBounds [ 3 ] ; first = 0 ; } else { bounds [ 0 ] =)",
    "insertText": "nsvg__minf(bounds[0], curveBounds[0])"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (bounds [ 1 ] =)",
    "insertText": "nsvg__minf(bounds[1], curveBounds[1])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (bounds [ 2 ] =)",
    "insertText": "nsvg__maxf(bounds[2], curveBounds[2])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (bounds [ 3 ] =)",
    "insertText": "nsvg__maxf(bounds[3], curveBounds[3])"
  },
  {
    "label": "nsvg__addShape()",
    "kind": "Method",
    "detail": "Function (} curve [ 0 ] = curve [ 6 ] ; curve [ 1 ] = curve [ 7 ] ; } } } void)",
    "insertText": "nsvg__addShape(NSVGparser* p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float scale = 1 . 0 f ; NSVGshape* shape ; NSVGpath* path ; int i ;)",
    "insertText": "if(p->plist == NULL)"
  },
  {
    "label": "shape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shape(NSVGshape*)malloc(sizeof(NSVGshape))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(shape, 0, sizeof(NSVGshape))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(shape->id, attr->id, sizeof shape->id)"
  },
  {
    "label": "nsvg__getAverageScale()",
    "kind": "Method",
    "detail": "Function (scale =)",
    "insertText": "nsvg__getAverageScale(attr->xform)"
  },
  {
    "label": "strokeDashCount()",
    "kind": "Method",
    "detail": "Function (strokeDashCount)",
    "insertText": "strokeDashCount(char)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (shape -> strokeLineJoin = attr -> strokeLineJoin ; shape -> strokeLineCap = attr -> strokeLineCap ; shape -> miterLimit = attr -> miterLimit ; shape -> fillRule = attr -> fillRule ; shape -> opacity = attr -> opacity ; shape -> paths = p -> plist ; p -> plist = NULL ; shape -> bounds [ 0 ] = shape -> paths -> bounds [ 0 ] ; shape -> bounds [ 1 ] = shape -> paths -> bounds [ 1 ] ; shape -> bounds [ 2 ] = shape -> paths -> bounds [ 2 ] ; shape -> bounds [ 3 ] = shape -> paths -> bounds [ 3 ] ;)",
    "insertText": "for(path = shape->paths->next; path != NULL; path = path->next)"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (shape -> bounds [ 0 ] =)",
    "insertText": "nsvg__minf(shape->bounds[0], path->bounds[0])"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (shape -> bounds [ 1 ] =)",
    "insertText": "nsvg__minf(shape->bounds[1], path->bounds[1])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (shape -> bounds [ 2 ] =)",
    "insertText": "nsvg__maxf(shape->bounds[2], path->bounds[2])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (shape -> bounds [ 3 ] =)",
    "insertText": "nsvg__maxf(shape->bounds[3], path->bounds[3])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(attr->hasFill == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (shape -> fill . type = NSVG_PAINT_NONE ; } else)",
    "insertText": "if(attr->hasFill == 1)"
  },
  {
    "label": "color()",
    "kind": "Method",
    "detail": "Function (shape -> fill . type = NSVG_PAINT_COLOR ; shape -> fill . color = attr -> fillColor ; shape -> fill .)",
    "insertText": "color(unsigned int)(attr->fillOpacity * 255)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(attr->hasFill == 2)"
  },
  {
    "label": "nsvg__xformInverse()",
    "kind": "Method",
    "detail": "Function (float inv [ 6 ],localBounds [ 4 ] ;)",
    "insertText": "nsvg__xformInverse(inv, attr->xform)"
  },
  {
    "label": "nsvg__getLocalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__getLocalBounds(localBounds, shape, inv)"
  },
  {
    "label": "nsvg__createGradient()",
    "kind": "Method",
    "detail": "Function (shape -> fill . gradient =)",
    "insertText": "nsvg__createGradient(p, attr->fillGradient, localBounds, &shape->fill.type)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (shape -> fill . type = NSVG_PAINT_NONE ; } })",
    "insertText": "if(attr->hasStroke == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (shape -> stroke . type = NSVG_PAINT_NONE ; } else)",
    "insertText": "if(attr->hasStroke == 1)"
  },
  {
    "label": "color()",
    "kind": "Method",
    "detail": "Function (shape -> stroke . type = NSVG_PAINT_COLOR ; shape -> stroke . color = attr -> strokeColor ; shape -> stroke .)",
    "insertText": "color(unsigned int)(attr->strokeOpacity * 255)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(attr->hasStroke == 2)"
  },
  {
    "label": "nsvg__createGradient()",
    "kind": "Method",
    "detail": "Function (shape -> stroke . gradient =)",
    "insertText": "nsvg__createGradient(p, attr->strokeGradient, localBounds, &shape->stroke.type)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (} shape ->)",
    "insertText": "flags(attr->visible ? NSVG_FLAGS_VISIBLE : 0x00)"
  },
  {
    "label": "nsvg__addPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "nsvg__addPath(NSVGparser* p, char closed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NSVGpath* path = NULL ; float bounds [ 4 ] ; float* curve ; int i ;)",
    "insertText": "if(p->npts < 4)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "path(NSVGpath*)malloc(sizeof(NSVGpath))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(path, 0, sizeof(NSVGpath))"
  },
  {
    "label": "pts()",
    "kind": "Method",
    "detail": "Function (path ->)",
    "insertText": "pts(float*)malloc(p->npts * 2 * sizeof(float))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (path -> closed = closed ; path -> npts = p -> npts ;)",
    "insertText": "for(i = 0; i < p->npts; ++i) nsvg__xformPoint(&path->pts[i * 2], &path->pts[i * 2 + 1], p->pts[i * 2], p->pts[i * 2 + 1], attr->xform)"
  },
  {
    "label": "nsvg__curveBounds()",
    "kind": "Method",
    "detail": "Function (curve =& path -> pts [ i* 2 ] ;)",
    "insertText": "nsvg__curveBounds(bounds, curve)"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (path -> bounds [ 0 ] = bounds [ 0 ] ; path -> bounds [ 1 ] = bounds [ 1 ] ; path -> bounds [ 2 ] = bounds [ 2 ] ; path -> bounds [ 3 ] = bounds [ 3 ] ; } else { path -> bounds [ 0 ] =)",
    "insertText": "nsvg__minf(path->bounds[0], bounds[0])"
  },
  {
    "label": "nsvg__minf()",
    "kind": "Method",
    "detail": "Function (path -> bounds [ 1 ] =)",
    "insertText": "nsvg__minf(path->bounds[1], bounds[1])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (path -> bounds [ 2 ] =)",
    "insertText": "nsvg__maxf(path->bounds[2], bounds[2])"
  },
  {
    "label": "nsvg__maxf()",
    "kind": "Method",
    "detail": "Function (path -> bounds [ 3 ] =)",
    "insertText": "nsvg__maxf(path->bounds[3], bounds[3])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } path -> next = p -> plist ; p -> plist = path ; return ; error :)",
    "insertText": "if(path != NULL)"
  },
  {
    "label": "nsvg__atof()",
    "kind": "Method",
    "detail": "Function (} } double)",
    "insertText": "nsvg__atof(const char* s)"
  },
  {
    "label": "cur()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "cur(char*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char* end = NULL ; double res = 0 . 0,sign = 1 . 0 ; long long intPart = 0,fracPart = 0 ; char hasIntPart = 0,hasFracPart = 0 ;)",
    "insertText": "if(*cur == '+')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cur + + ; } else)",
    "insertText": "if(*cur == '-')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sign = - 1 ; cur + + ; })",
    "insertText": "if(nsvg__isdigit(*cur))"
  },
  {
    "label": "strtoll()",
    "kind": "Method",
    "detail": "Function (intPart =)",
    "insertText": "strtoll(cur, &end, 10)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(double)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (hasIntPart = 1 ; cur = end ; } })",
    "insertText": "if(*cur == '.')"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(double)fracPart / pow(10.0, (double)(end - cur))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (hasFracPart = 1 ; cur = end ; } } })",
    "insertText": "if(!hasIntPart && !hasFracPart)"
  },
  {
    "label": "strtol()",
    "kind": "Method",
    "detail": "Function (long expPart = 0 ; cur + + ; expPart =)",
    "insertText": "strtol(cur, &end, 10)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (res* =)",
    "insertText": "pow(10.0, (double)expPart)"
  },
  {
    "label": "nsvg__parseNumber()",
    "kind": "Method",
    "detail": "Function (} } return res* sign ; } const char*)",
    "insertText": "nsvg__parseNumber(const char* s, char* it, const int size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int last = size - 1 ; int i = 0 ;)",
    "insertText": "if(*s == '-' || *s == '+')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (s + + ; })",
    "insertText": "while(*s && nsvg__isdigit(*s))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s + + ; })",
    "insertText": "if(*s == '.')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s + + ; } })",
    "insertText": "if((*s == 'e' || *s == 'E') && (s[1] != 'm' && s[1] != 'x'))"
  },
  {
    "label": "nsvg__getNextPathItem()",
    "kind": "Method",
    "detail": "Function (s + + ; } } it [ i ] = ' \\ 0 ' ; return s ; } const char*)",
    "insertText": "nsvg__getNextPathItem(const char* s, char* it)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (it [ 0 ] = ' \\ 0 ' ;)",
    "insertText": "while(*s && (nsvg__isspace(*s) || *s == ','))"
  },
  {
    "label": "nsvg__parseNumber()",
    "kind": "Method",
    "detail": "Function (s =)",
    "insertText": "nsvg__parseNumber(s, it, 64)"
  },
  {
    "label": "nsvg__parseColorHex()",
    "kind": "Method",
    "detail": "Function (} else { it [ 0 ] =* s + + ; it [ 1 ] = ' \\ 0 ' ; return s ; } return s ; } unsigned int)",
    "insertText": "nsvg__parseColorHex(const char* str)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (unsigned int c = 0,r = 0,g = 0,b = 0 ; int n = 0 ; str + + ;)",
    "insertText": "while(str[n] && !nsvg__isspace(str[n]))"
  },
  {
    "label": "sscanf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sscanf(str, \"%x\", &c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(n == 3)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c(c & 0xf) | ((c & 0xf0) << 4) | ((c & 0xf00) << 8)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (c | = c<<4 ; })",
    "insertText": "r(c >> 16)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g(c >> 8)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (b = c& 0 xff ; return)",
    "insertText": "NSVG_RGB(r, g, b)"
  },
  {
    "label": "nsvg__parseColorRGB()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "nsvg__parseColorRGB(const char* str)"
  },
  {
    "label": "sscanf()",
    "kind": "Method",
    "detail": "Function (int r = - 1,g = - 1,b = - 1 ; char s1 [ 3 2 ] = \" \",s2 [ 3 2 ] = \" \" ;)",
    "insertText": "sscanf(str + 4, \"%d%[%%, \\t]%d%[%%, \\t]%d\", &r, s1, &g, s2, &b)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (} } typedef struct NSVGNamedColor { const char* name ; unsigned int color ; } NSVGNamedColor ; NSVGNamedColor nsvg__colors [ ] = { { \" red \",)",
    "insertText": "NSVG_RGB(255, 0, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" green \",)",
    "insertText": "NSVG_RGB(0, 128, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" blue \",)",
    "insertText": "NSVG_RGB(0, 0, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" yellow \",)",
    "insertText": "NSVG_RGB(255, 255, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" cyan \",)",
    "insertText": "NSVG_RGB(0, 255, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" magenta \",)",
    "insertText": "NSVG_RGB(255, 0, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" grey \",)",
    "insertText": "NSVG_RGB(128, 128, 128)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" white \",)",
    "insertText": "NSVG_RGB(255, 255, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" aliceblue \",)",
    "insertText": "NSVG_RGB(240, 248, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" antiquewhite \",)",
    "insertText": "NSVG_RGB(250, 235, 215)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" aquamarine \",)",
    "insertText": "NSVG_RGB(127, 255, 212)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" azure \",)",
    "insertText": "NSVG_RGB(240, 255, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" beige \",)",
    "insertText": "NSVG_RGB(245, 245, 220)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" bisque \",)",
    "insertText": "NSVG_RGB(255, 228, 196)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" blanchedalmond \",)",
    "insertText": "NSVG_RGB(255, 235, 205)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" blueviolet \",)",
    "insertText": "NSVG_RGB(138, 43, 226)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" brown \",)",
    "insertText": "NSVG_RGB(165, 42, 42)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" burlywood \",)",
    "insertText": "NSVG_RGB(222, 184, 135)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" cadetblue \",)",
    "insertText": "NSVG_RGB(95, 158, 160)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" chartreuse \",)",
    "insertText": "NSVG_RGB(127, 255, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" chocolate \",)",
    "insertText": "NSVG_RGB(210, 105, 30)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" coral \",)",
    "insertText": "NSVG_RGB(255, 127, 80)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" cornflowerblue \",)",
    "insertText": "NSVG_RGB(100, 149, 237)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" cornsilk \",)",
    "insertText": "NSVG_RGB(255, 248, 220)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" crimson \",)",
    "insertText": "NSVG_RGB(220, 20, 60)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkblue \",)",
    "insertText": "NSVG_RGB(0, 0, 139)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkcyan \",)",
    "insertText": "NSVG_RGB(0, 139, 139)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkgoldenrod \",)",
    "insertText": "NSVG_RGB(184, 134, 11)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkgray \",)",
    "insertText": "NSVG_RGB(169, 169, 169)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkgreen \",)",
    "insertText": "NSVG_RGB(0, 100, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkkhaki \",)",
    "insertText": "NSVG_RGB(189, 183, 107)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkmagenta \",)",
    "insertText": "NSVG_RGB(139, 0, 139)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkolivegreen \",)",
    "insertText": "NSVG_RGB(85, 107, 47)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkorange \",)",
    "insertText": "NSVG_RGB(255, 140, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkorchid \",)",
    "insertText": "NSVG_RGB(153, 50, 204)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkred \",)",
    "insertText": "NSVG_RGB(139, 0, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darksalmon \",)",
    "insertText": "NSVG_RGB(233, 150, 122)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkseagreen \",)",
    "insertText": "NSVG_RGB(143, 188, 143)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkslateblue \",)",
    "insertText": "NSVG_RGB(72, 61, 139)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkslategray \",)",
    "insertText": "NSVG_RGB(47, 79, 79)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkturquoise \",)",
    "insertText": "NSVG_RGB(0, 206, 209)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" darkviolet \",)",
    "insertText": "NSVG_RGB(148, 0, 211)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" deeppink \",)",
    "insertText": "NSVG_RGB(255, 20, 147)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" deepskyblue \",)",
    "insertText": "NSVG_RGB(0, 191, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" dimgray \",)",
    "insertText": "NSVG_RGB(105, 105, 105)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" dodgerblue \",)",
    "insertText": "NSVG_RGB(30, 144, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" firebrick \",)",
    "insertText": "NSVG_RGB(178, 34, 34)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" floralwhite \",)",
    "insertText": "NSVG_RGB(255, 250, 240)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" forestgreen \",)",
    "insertText": "NSVG_RGB(34, 139, 34)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" gainsboro \",)",
    "insertText": "NSVG_RGB(220, 220, 220)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" ghostwhite \",)",
    "insertText": "NSVG_RGB(248, 248, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" gold \",)",
    "insertText": "NSVG_RGB(255, 215, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" goldenrod \",)",
    "insertText": "NSVG_RGB(218, 165, 32)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" greenyellow \",)",
    "insertText": "NSVG_RGB(173, 255, 47)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" honeydew \",)",
    "insertText": "NSVG_RGB(240, 255, 240)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" hotpink \",)",
    "insertText": "NSVG_RGB(255, 105, 180)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" indianred \",)",
    "insertText": "NSVG_RGB(205, 92, 92)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" indigo \",)",
    "insertText": "NSVG_RGB(75, 0, 130)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" ivory \",)",
    "insertText": "NSVG_RGB(255, 255, 240)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" khaki \",)",
    "insertText": "NSVG_RGB(240, 230, 140)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lavender \",)",
    "insertText": "NSVG_RGB(230, 230, 250)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lavenderblush \",)",
    "insertText": "NSVG_RGB(255, 240, 245)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lawngreen \",)",
    "insertText": "NSVG_RGB(124, 252, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lemonchiffon \",)",
    "insertText": "NSVG_RGB(255, 250, 205)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightblue \",)",
    "insertText": "NSVG_RGB(173, 216, 230)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightcoral \",)",
    "insertText": "NSVG_RGB(240, 128, 128)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightcyan \",)",
    "insertText": "NSVG_RGB(224, 255, 255)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightgoldenrodyellow \",)",
    "insertText": "NSVG_RGB(250, 250, 210)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightgray \",)",
    "insertText": "NSVG_RGB(211, 211, 211)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightgreen \",)",
    "insertText": "NSVG_RGB(144, 238, 144)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightpink \",)",
    "insertText": "NSVG_RGB(255, 182, 193)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightsalmon \",)",
    "insertText": "NSVG_RGB(255, 160, 122)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightseagreen \",)",
    "insertText": "NSVG_RGB(32, 178, 170)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightskyblue \",)",
    "insertText": "NSVG_RGB(135, 206, 250)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightslategray \",)",
    "insertText": "NSVG_RGB(119, 136, 153)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightsteelblue \",)",
    "insertText": "NSVG_RGB(176, 196, 222)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lightyellow \",)",
    "insertText": "NSVG_RGB(255, 255, 224)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" lime \",)",
    "insertText": "NSVG_RGB(0, 255, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" limegreen \",)",
    "insertText": "NSVG_RGB(50, 205, 50)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" linen \",)",
    "insertText": "NSVG_RGB(250, 240, 230)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" maroon \",)",
    "insertText": "NSVG_RGB(128, 0, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumaquamarine \",)",
    "insertText": "NSVG_RGB(102, 205, 170)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumblue \",)",
    "insertText": "NSVG_RGB(0, 0, 205)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumorchid \",)",
    "insertText": "NSVG_RGB(186, 85, 211)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumpurple \",)",
    "insertText": "NSVG_RGB(147, 112, 219)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumseagreen \",)",
    "insertText": "NSVG_RGB(60, 179, 113)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumslateblue \",)",
    "insertText": "NSVG_RGB(123, 104, 238)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumspringgreen \",)",
    "insertText": "NSVG_RGB(0, 250, 154)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumturquoise \",)",
    "insertText": "NSVG_RGB(72, 209, 204)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mediumvioletred \",)",
    "insertText": "NSVG_RGB(199, 21, 133)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" midnightblue \",)",
    "insertText": "NSVG_RGB(25, 25, 112)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mintcream \",)",
    "insertText": "NSVG_RGB(245, 255, 250)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" mistyrose \",)",
    "insertText": "NSVG_RGB(255, 228, 225)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" moccasin \",)",
    "insertText": "NSVG_RGB(255, 228, 181)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" navajowhite \",)",
    "insertText": "NSVG_RGB(255, 222, 173)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" navy \",)",
    "insertText": "NSVG_RGB(0, 0, 128)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" oldlace \",)",
    "insertText": "NSVG_RGB(253, 245, 230)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" olive \",)",
    "insertText": "NSVG_RGB(128, 128, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" olivedrab \",)",
    "insertText": "NSVG_RGB(107, 142, 35)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" orange \",)",
    "insertText": "NSVG_RGB(255, 165, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" orangered \",)",
    "insertText": "NSVG_RGB(255, 69, 0)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" orchid \",)",
    "insertText": "NSVG_RGB(218, 112, 214)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" palegoldenrod \",)",
    "insertText": "NSVG_RGB(238, 232, 170)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" palegreen \",)",
    "insertText": "NSVG_RGB(152, 251, 152)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" paleturquoise \",)",
    "insertText": "NSVG_RGB(175, 238, 238)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" palevioletred \",)",
    "insertText": "NSVG_RGB(219, 112, 147)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" papayawhip \",)",
    "insertText": "NSVG_RGB(255, 239, 213)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" peachpuff \",)",
    "insertText": "NSVG_RGB(255, 218, 185)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" peru \",)",
    "insertText": "NSVG_RGB(205, 133, 63)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" pink \",)",
    "insertText": "NSVG_RGB(255, 192, 203)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" plum \",)",
    "insertText": "NSVG_RGB(221, 160, 221)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" powderblue \",)",
    "insertText": "NSVG_RGB(176, 224, 230)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" purple \",)",
    "insertText": "NSVG_RGB(128, 0, 128)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" rosybrown \",)",
    "insertText": "NSVG_RGB(188, 143, 143)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" royalblue \",)",
    "insertText": "NSVG_RGB(65, 105, 225)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" saddlebrown \",)",
    "insertText": "NSVG_RGB(139, 69, 19)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" salmon \",)",
    "insertText": "NSVG_RGB(250, 128, 114)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" sandybrown \",)",
    "insertText": "NSVG_RGB(244, 164, 96)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" seagreen \",)",
    "insertText": "NSVG_RGB(46, 139, 87)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" seashell \",)",
    "insertText": "NSVG_RGB(255, 245, 238)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" sienna \",)",
    "insertText": "NSVG_RGB(160, 82, 45)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" silver \",)",
    "insertText": "NSVG_RGB(192, 192, 192)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" skyblue \",)",
    "insertText": "NSVG_RGB(135, 206, 235)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" slateblue \",)",
    "insertText": "NSVG_RGB(106, 90, 205)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" slategray \",)",
    "insertText": "NSVG_RGB(112, 128, 144)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" snow \",)",
    "insertText": "NSVG_RGB(255, 250, 250)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" springgreen \",)",
    "insertText": "NSVG_RGB(0, 255, 127)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" steelblue \",)",
    "insertText": "NSVG_RGB(70, 130, 180)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" tan \",)",
    "insertText": "NSVG_RGB(210, 180, 140)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" teal \",)",
    "insertText": "NSVG_RGB(0, 128, 128)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" thistle \",)",
    "insertText": "NSVG_RGB(216, 191, 216)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" tomato \",)",
    "insertText": "NSVG_RGB(255, 99, 71)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" turquoise \",)",
    "insertText": "NSVG_RGB(64, 224, 208)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" violet \",)",
    "insertText": "NSVG_RGB(238, 130, 238)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" wheat \",)",
    "insertText": "NSVG_RGB(245, 222, 179)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" whitesmoke \",)",
    "insertText": "NSVG_RGB(245, 245, 245)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (\" yellowgreen \",)",
    "insertText": "NSVG_RGB(154, 205, 50)"
  },
  {
    "label": "nsvg__parseColorName()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "nsvg__parseColorName(const char* str)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int i,ncolors =)",
    "insertText": "sizeof(nsvg__colors) / sizeof(NSVGNamedColor)"
  },
  {
    "label": "nsvg__parseColor()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "nsvg__parseColor(const char* str)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t len = 0 ;)",
    "insertText": "while(*str == ' ')"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (len =)",
    "insertText": "strlen(str)"
  },
  {
    "label": "nsvg__parseLineCap()",
    "kind": "Method",
    "detail": "Function (id [ i ] =* str + + ; i + + ; } id [ i ] = ' \\ 0 ' ; } char)",
    "insertText": "nsvg__parseLineCap(const char* str)"
  },
  {
    "label": "nsvg__parseStrokeDashArray()",
    "kind": "Method",
    "detail": "Function (s + + ; } it [ n + + ] = ' \\ 0 ' ; return s ; } int)",
    "insertText": "nsvg__parseStrokeDashArray(NSVGparser* p, const char* str, float* strokeDashArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char item [ 6 4 ] ; int count = 0,i ; float sum = 0 . 0 f ;)",
    "insertText": "if(str[0] == 'n')"
  },
  {
    "label": "nsvg__getNextDashItem()",
    "kind": "Method",
    "detail": "Function (str =)",
    "insertText": "nsvg__getNextDashItem(str, item)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(i = 0; i < count; i++)"
  },
  {
    "label": "nsvg__parseAttr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nsvg__parseAttr(NSVGparser* p, const char* name, const char* value)"
  },
  {
    "label": "nsvg__parseStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__parseStyle(p, value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(strcmp(name, \"display\") == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(strcmp(name, \"fill\") == 0)"
  }
]