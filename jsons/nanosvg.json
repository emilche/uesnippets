[
  {
    "label": "NSVGpaintType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGpaintType"
  },
  {
    "label": "NSVGspreadType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGspreadType"
  },
  {
    "label": "NSVGlineJoin",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGlineJoin"
  },
  {
    "label": "NSVGlineCap",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGlineCap"
  },
  {
    "label": "NSVGfillRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGfillRule"
  },
  {
    "label": "NSVGflags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGflags"
  },
  {
    "label": "NSVGgradientStop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradientStop"
  },
  {
    "label": "NSVGgradient",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradient"
  },
  {
    "label": "NSVGpaint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGpaint"
  },
  {
    "label": "NSVGpath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGpath"
  },
  {
    "label": "NSVGpath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGpath"
  },
  {
    "label": "NSVGshape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGshape"
  },
  {
    "label": "NSVGshape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGshape"
  },
  {
    "label": "NSVGimage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGimage"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "NSVGgradientUnits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGgradientUnits"
  },
  {
    "label": "NSVGunits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NSVGunits"
  },
  {
    "label": "NSVGcoordinate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGcoordinate"
  },
  {
    "label": "NSVGlinearData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGlinearData"
  },
  {
    "label": "NSVGradialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGradialData"
  },
  {
    "label": "NSVGgradientData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradientData"
  },
  {
    "label": "NSVGgradientData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGgradientData"
  },
  {
    "label": "NSVGattrib",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGattrib"
  },
  {
    "label": "NSVGstyles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGstyles"
  },
  {
    "label": "NSVGstyles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGstyles"
  },
  {
    "label": "NSVGparser",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGparser"
  },
  {
    "label": "NSVGNamedColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSVGNamedColor"
  },
  {
    "label": "nsvgDelete()",
    "kind": "Method",
    "detail": "Function (Delete)",
    "insertText": "nsvgDelete(image)"
  },
  {
    "label": "nsvgDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvgDelete(NSVGimage* image)"
  },
  {
    "label": "nsvgParseTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvgParseTransform(float* xform, const char* str)"
  },
  {
    "label": "nsvg__parseDefs()",
    "kind": "Method",
    "detail": "Function (this)",
    "insertText": "nsvg__parseDefs(input, startelCb, endelCb, contentCb, p)"
  },
  {
    "label": "nsvg__xformIdentity()",
    "kind": "Method",
    "detail": "Function (style)",
    "insertText": "nsvg__xformIdentity(p->attr[0].xform)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NSVG_RGB(r, g, b)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NSVG_RGB(r, g, b)"
  },
  {
    "label": "NSVG_RGB()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NSVG_RGB(128, 128, 128)"
  },
  {
    "label": "nsvg__parseColorHex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "nsvg__parseColorHex(str)"
  },
  {
    "label": "nsvg__parseColorRGB()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "nsvg__parseColorRGB(str)"
  },
  {
    "label": "nsvg__parseColorName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "nsvg__parseColorName(str)"
  },
  {
    "label": "nsvg__convertToPixels()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "nsvg__convertToPixels(p, coord, orig, length)"
  },
  {
    "label": "nsvg__parseStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nsvg__parseStyle(NSVGparser* p, const char* str)"
  },
  {
    "label": "nsvg__parseAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "nsvg__parseAttr(p, name, value)"
  },
  {
    "label": "nsvg__parseAttr()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "nsvg__parseAttr(p, attr[i], attr[i + 1])"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sqrtf(x * x + y * y)"
  },
  {
    "label": "nsvg__lineTo()",
    "kind": "Method",
    "detail": "Function (line)",
    "insertText": "nsvg__lineTo(p, x2, y2)"
  },
  {
    "label": "nsvg__xformVec()",
    "kind": "Method",
    "detail": "Function (position)",
    "insertText": "nsvg__xformVec(&tanx, &tany, -dy * rx * kappa, dx * ry * kappa, t)"
  },
  {
    "label": "nsvg__moveTo()",
    "kind": "Method",
    "detail": "Function (rectangle)",
    "insertText": "nsvg__moveTo(p, x + rx, y)"
  },
  {
    "label": "nsvg__lineTo()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "nsvg__lineTo(p, args[0], args[1])"
  },
  {
    "label": "nsvg__scaleToViewbox()",
    "kind": "Method",
    "detail": "Function (viewBox)",
    "insertText": "nsvg__scaleToViewbox(p, units)"
  }
]