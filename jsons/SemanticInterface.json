[
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "CInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointerSet . h \" # include \" uLang / Common / Containers / UniquePointer . h \" # include \" uLang / Common / Containers / UniquePointerArray . h \" # include \" uLang / Common / Text / Symbol . h \" # include \" uLang / Semantics / Definition . h \" # include \" uLang / Semantics / MemberOrigin . h \" # include \" uLang / Semantics / SemanticFunction . h \" # include \" uLang / Semantics / SemanticTypes . h \" # include \" uLang / Semantics / SemanticScope . h \" # include \" uLang / Semantics / Signature . h \" # include \" uLang / Semantics / SmallDefinitionArray . h \" # include \" uLang / Semantics / VisitStamp . h \" namespace uLang { class CInterface : public CDefinition,public CNominalType,public CLogicalScope { public : const ETypeKind StaticTypeKind = ETypeKind::Interface ; const CDefinition::EKind StaticDefinitionKind = CDefinition::EKind::Interface ; CAttributable _EffectAttributable ; TOptional<SAccessLevel> _ConstructorAccessLevel ; TArray<CInterface*> _SuperInterfaces ; CInterface* _GeneralizedInterface { this } ; TArray<STypeVariableSubstitution> _TypeVariableSubstitutions ; TURefArray<CInterface> _InstantiatedInterfaces ; TUPtr<CInterface> _OwnedNegativeInterface ; CInterface* _NegativeInterface ; bool _bHasCyclesBroken { false } ;)",
    "insertText": "CInterface(const CSymbol& Name, CScope& EnclosingScope, const TArray<CInterface*>& SuperInterfaces = {}) : CInterface(EnclosingScope, Name, SuperInterfaces, this, {}, false)"
  },
  {
    "label": "CInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CInterface(CScope& EnclosingScope, const CSymbol& Name, const TArray<CInterface*>& SuperInterfaces, CInterface* GeneralizedInterface, TArray<STypeVariableSubstitution> TypeVariableSubstitutions, bool bHasCyclesBroken) : CDefinition(StaticDefinitionKind, EnclosingScope, Name) , CNominalType(StaticTypeKind, EnclosingScope.GetProgram()) , CLogicalScope(CScope::EKind::Interface, &EnclosingScope, EnclosingScope.GetProgram()) , _SuperInterfaces(SuperInterfaces) , _GeneralizedInterface(GeneralizedInterface) , _TypeVariableSubstitutions(Move(TypeVariableSubstitutions)) , _OwnedNegativeInterface(TUPtr<CInterface>::New(this)) , _NegativeInterface(_OwnedNegativeInterface.Get()) , _bHasCyclesBroken(bHasCyclesBroken)"
  },
  {
    "label": "CInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CInterface(CInterface* PositiveInterface)"
  },
  {
    "label": "DerivedConstructorAccessLevel()",
    "kind": "Method",
    "detail": "Function (SAccessLevel)",
    "insertText": "DerivedConstructorAccessLevel()"
  },
  {
    "label": "AsCodeRecursive()",
    "kind": "Method",
    "detail": "Function (} using CTypeBase::GetProgram ; CUTF8String)",
    "insertText": "AsCodeRecursive(ETypeSyntaxPrecedence OuterPrecedence, TArray<const CFlowType*>& VisitedFlowTypes, bool bLinkable)"
  },
  {
    "label": "FindInstanceMember()",
    "kind": "Method",
    "detail": "Function (SmallDefinitionArray)",
    "insertText": "FindInstanceMember(const CSymbol& Name, EMemberOrigin Origin, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr, VisitStampType VisitStamp = CScope::GenerateNewVisitStamp())"
  },
  {
    "label": "GetComparability()",
    "kind": "Method",
    "detail": "Function (EComparability)",
    "insertText": "GetComparability()"
  },
  {
    "label": "GetComparability()",
    "kind": "Method",
    "detail": "Function (EComparability)",
    "insertText": "GetComparability(VisitStampType)"
  },
  {
    "label": "CanBeCustomAccessorDataType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeCustomAccessorDataType()"
  },
  {
    "label": "ScopeAsType()",
    "kind": "Method",
    "detail": "Function (} const CTypeBase*)",
    "insertText": "ScopeAsType()"
  },
  {
    "label": "FindDefinitions()",
    "kind": "Method",
    "detail": "Function (SmallDefinitionArray)",
    "insertText": "FindDefinitions(const CSymbol& Name, EMemberOrigin Origin = EMemberOrigin::InheritedOrOriginal, const SQualifier& Qualifier = SQualifier::Unknown(), const CAstPackage* ContextPackage = nullptr, VisitStampType VisitStamp = GenerateNewVisitStamp())"
  },
  {
    "label": "Definition()",
    "kind": "Method",
    "detail": "Function (const CDefinition*)",
    "insertText": "Definition()"
  },
  {
    "label": "SetAstNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAstNode(AstNode)"
  },
  {
    "label": "GetAstNode()",
    "kind": "Method",
    "detail": "Function (} CExprInterfaceDefinition*)",
    "insertText": "GetAstNode()"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIrNode(CExprInterfaceDefinition* AstNode)"
  },
  {
    "label": "SetIrNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIrNode(AstNode)"
  },
  {
    "label": "GetIrNode()",
    "kind": "Method",
    "detail": "Function (} CExprInterfaceDefinition*)",
    "insertText": "GetIrNode(bool bForce = false)"
  },
  {
    "label": "DefinitionAsLogicalScopeNullable()",
    "kind": "Method",
    "detail": "Function (} const CLogicalScope*)",
    "insertText": "DefinitionAsLogicalScopeNullable()"
  },
  {
    "label": "IsPersistenceCompatConstraint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPersistenceCompatConstraint()"
  },
  {
    "label": "CInstantiatedInterface()",
    "kind": "Method",
    "detail": "Function (} ; class CInstantiatedInterface : public CInstantiatedType { public :)",
    "insertText": "CInstantiatedInterface(CSemanticProgram& Program, const CInterface& Interface, ETypePolarity Polarity, TArray<STypeVariableSubstitution> Arguments) : CInstantiatedType(Program, Polarity, Move(Arguments)) , _Interface(&Interface)"
  },
  {
    "label": "InstantiateInterface()",
    "kind": "Method",
    "detail": "Function (private : const CInterface* _Interface ; } ; CInterface*)",
    "insertText": "InstantiateInterface(const CInterface&, ETypePolarity, const TArray<STypeVariableSubstitution>&)"
  },
  {
    "label": "InstantiatePositiveInterface()",
    "kind": "Method",
    "detail": "Function (CInterface*)",
    "insertText": "InstantiatePositiveInterface(const CInterface&, const TArray<STypeVariableSubstitution>&)"
  },
  {
    "label": "InstantiateTypeVariableSubstitutions()",
    "kind": "Method",
    "detail": "Function (TArray<STypeVariableSubstitution>)",
    "insertText": "InstantiateTypeVariableSubstitutions(const TArray<STypeVariableSubstitution>&, const TArray<STypeVariableSubstitution>&)"
  },
  {
    "label": "InstantiatePositiveInterfaces()",
    "kind": "Method",
    "detail": "Function (TArray<CInterface*>)",
    "insertText": "InstantiatePositiveInterfaces(const TArray<CInterface*>&, const TArray<STypeVariableSubstitution>&)"
  },
  {
    "label": "GetNegativeInterfaces()",
    "kind": "Method",
    "detail": "Function (TArray<CInterface*>)",
    "insertText": "GetNegativeInterfaces(const TArray<CInterface*>& Interfaces)"
  },
  {
    "label": "InstantiatePositiveFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiatePositiveFunction(CLogicalScope& InstScope, const CNormalType& InstType, const CFunction&, const TArray<STypeVariableSubstitution>& Substitutions)"
  },
  {
    "label": "SetInstantiatedOverriddenDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstantiatedOverriddenDefinition(CDefinition& InstDefinition, const CNormalType& InstType, const CDefinition&)"
  },
  {
    "label": "CreateNegativeMemberFunction()",
    "kind": "Method",
    "detail": "Function (TSRef<CFunction>)",
    "insertText": "CreateNegativeMemberFunction(CLogicalScope& NegativeScope, const CFunction& PositiveFunction)"
  },
  {
    "label": "SetNegativeInterfaceMemberDefinitionTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNegativeInterfaceMemberDefinitionTypes(const CInterface& PositiveInterface)"
  },
  {
    "label": "SetNegativeMemberDefinitionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNegativeMemberDefinitionType(CFunction& NegativeFunction, const CFunction& PositiveFunction)"
  }
]