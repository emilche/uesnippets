[
  {
    "label": "DeepImageLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeepImageLevel"
  },
  {
    "label": "IMFUTIL_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMFUTIL_EXPORT_TYPE"
  },
  {
    "label": "Edit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edit"
  },
  {
    "label": "pixelType()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_SAMPLE_COUNT_CHANNEL_H # define INCLUDED_IMF_SAMPLE_COUNT_CHANNEL_H # include \" ImfImageChannel . h \" # include \" ImfUtilExport . h \" OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class DeepImageLevel ; class IMFUTIL_EXPORT_TYPE SampleCountChannel : public ImageChannel { public : IMFUTIL_EXPORT PixelType)",
    "insertText": "pixelType()"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT Slice)",
    "insertText": "slice()"
  },
  {
    "label": "deepLevel()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT DeepImageLevel&)",
    "insertText": "deepLevel()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT const unsigned int&)",
    "insertText": "operator() (int x, int y)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT const unsigned int&)",
    "insertText": "at(int x, int y)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT const unsigned int*)",
    "insertText": "row(int r)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT void)",
    "insertText": "set(int x, int y, unsigned int newNumSamples)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT void)",
    "insertText": "set(int r, unsigned int newNumSamples[])"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT void)",
    "insertText": "clear()"
  },
  {
    "label": "beginEdit()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT unsigned int*)",
    "insertText": "beginEdit()"
  },
  {
    "label": "endEdit()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT void)",
    "insertText": "endEdit()"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (class Edit { public : IMFUTIL_EXPORT)",
    "insertText": "Edit(SampleCountChannel& level)"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT ~)",
    "insertText": "Edit()"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Edit(const Edit& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Edit&)",
    "insertText": "operator(const Edit& other)"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Edit(Edit&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Edit&)",
    "insertText": "operator(Edit&& other)"
  },
  {
    "label": "sampleCounts()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT unsigned int*)",
    "insertText": "sampleCounts()"
  },
  {
    "label": "numSamples()",
    "kind": "Method",
    "detail": "Function (private : SampleCountChannel& _channel ; unsigned int* _sampleCounts ; } ; IMFUTIL_EXPORT const unsigned int*)",
    "insertText": "numSamples()"
  },
  {
    "label": "sampleListSizes()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT const unsigned int*)",
    "insertText": "sampleListSizes()"
  },
  {
    "label": "sampleListPositions()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT const size_t*)",
    "insertText": "sampleListPositions()"
  },
  {
    "label": "sampleBufferSize()",
    "kind": "Method",
    "detail": "Function (IMFUTIL_EXPORT size_t)",
    "insertText": "sampleBufferSize()"
  },
  {
    "label": "SampleCountChannel()",
    "kind": "Method",
    "detail": "Function (private : class DeepImageLevel ;)",
    "insertText": "SampleCountChannel(DeepImageLevel& level)"
  },
  {
    "label": "SampleCountChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SampleCountChannel()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize()"
  },
  {
    "label": "resetBasePointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetBasePointer()"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (unsigned int* _numSamples ; unsigned int* _base ; unsigned int* _sampleListSizes ; size_t* _sampleListPositions ; size_t _totalNumSamples ; size_t _totalSamplesOccupied ; size_t _sampleBufferSize ; } ; SampleCountChannel::)",
    "insertText": "Edit(SampleCountChannel& channel) : _channel (channel), _sampleCounts (channel.beginEdit ())"
  },
  {
    "label": "boundsCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boundsCheck(x, y)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} const unsigned int*)",
    "insertText": "row(int n)"
  }
]