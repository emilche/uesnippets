[
  {
    "label": "LiveProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveProcess"
  },
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "ModuleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleCache"
  },
  {
    "label": "ProcessData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessData"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "FindSymbolData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindSymbolData"
  },
  {
    "label": "FindHookData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindHookData"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Symbols . h \" # include \" LC_Hook . h \" # include \" LC_CriticalSection . h \" # include \" LC_ProcessTypes . h \" class LiveProcess ; class DuplexPipe ; class ModuleCache { public : const size_t SEARCH_ALL_MODULES = static_cast<)",
    "insertText": "size_t(-1)"
  },
  {
    "label": "ModuleCache()",
    "kind": "Method",
    "detail": "Function (struct ProcessData { Process::Id processId ; Process::Handle processHandle ; const DuplexPipe* pipe ; void* moduleBase ; } ; struct Data { uint16_t index ; const symbols::SymbolDB* symbolDb ; const symbols::ContributionDB* contributionDb ; const symbols::CompilandDB* compilandDb ; const symbols::ThunkDB* thunkDb ; const symbols::ImageSectionDB* imageSectionDb ; uint64_t lastModificationTime ; types::vector<ProcessData> processes ; } ; struct FindSymbolData { const Data* data ; const symbols::Symbol* symbol ; } ; struct FindHookData { const Data* data ; uint32_t firstRva ; uint32_t lastRva ; } ;)",
    "insertText": "ModuleCache(void)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Insert(const symbols::SymbolDB* symbolDb, const symbols::ContributionDB* contributionDb, const symbols::CompilandDB* compilandDb, const symbols::ThunkDB* thunkDb, const symbols::ImageSectionDB* imageSectionDb, uint64_t lastModicationTime)"
  },
  {
    "label": "RegisterProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterProcess(size_t token, LiveProcess* liveProcess, void* moduleBase)"
  },
  {
    "label": "UnregisterProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterProcess(LiveProcess* liveProcess)"
  },
  {
    "label": "FindSymbolByName()",
    "kind": "Method",
    "detail": "Function (FindSymbolData)",
    "insertText": "FindSymbolByName(size_t ignoreToken, const ImmutableString& symbolName)"
  },
  {
    "label": "FindSymbolByNameBackwards()",
    "kind": "Method",
    "detail": "Function (FindSymbolData)",
    "insertText": "FindSymbolByNameBackwards(size_t ignoreToken, const ImmutableString& symbolName)"
  },
  {
    "label": "FindHooksInSectionBackwards()",
    "kind": "Method",
    "detail": "Function (FindHookData)",
    "insertText": "FindHooksInSectionBackwards(size_t ignoreToken, const ImmutableString& sectionName)"
  },
  {
    "label": "GatherModuleBases()",
    "kind": "Method",
    "detail": "Function (types::vector<void*>)",
    "insertText": "GatherModuleBases(Process::Id processId)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSize(void)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (} const Data&)",
    "insertText": "GetEntry(size_t i)"
  }
]