[
  {
    "label": "FPBDShapeConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDShapeConstraintsBase"
  },
  {
    "label": "FPBDShapeConstraintsBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / Array . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include<functional> namespace Chaos::Softs { class FPBDShapeConstraintsBase { public :)",
    "insertText": "FPBDShapeConstraintsBase(int32 InParticleOffset, int32 InParticleCount, const TArray<FSolverVec3>& StartPositions, const TArray<FSolverVec3>& InTargetPositions, const FSolverReal InStiffness ) : TargetPositions(InTargetPositions) , ParticleOffset(InParticleOffset) , Stiffness(InStiffness)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 NumConstraints = InParticleCount ; Dists .)",
    "insertText": "SetNumUninitialized(InParticleCount)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const int32 ParticleIndex = ParticleOffset + Index ; const FSolverVec3& P1 = StartPositions [ ParticleIndex ] ; const FSolverVec3& P2 = TargetPositions [ ParticleIndex ] ; Dists [)",
    "insertText": "Index(P1 - P2).Size()"
  },
  {
    "label": "FPBDShapeConstraintsBase()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPBDShapeConstraintsBase()"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (} FSolverVec3)",
    "insertText": "GetDelta(const FSolverParticles& InParticles, const int32 Index)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3& P1 = InParticles .)",
    "insertText": "P(Index)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = TargetPositions [ Index ] ; const FSolverVec3 Difference = P1 - P2 ; const FSolverReal Distance = Difference .)",
    "insertText": "Size()"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Direction = Difference / Distance ; const FSolverVec3)",
    "insertText": "Delta(Distance - Dists[Index - ParticleOffset])"
  }
]