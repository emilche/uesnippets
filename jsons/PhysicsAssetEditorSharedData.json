[
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UPhysicsAssetEditorSkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAssetEditorSkeletalMeshComponent"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "UPhysicsConstraintTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsConstraintTemplate"
  },
  {
    "label": "UPhysicsAssetEditorPhysicsHandleComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAssetEditorPhysicsHandleComponent"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "FBoneVertInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneVertInfo"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "FPhysicsAssetEditorSharedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsAssetEditorSharedData"
  },
  {
    "label": "FScopedBulkSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedBulkSelection"
  },
  {
    "label": "FBodyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyData"
  },
  {
    "label": "EPhysicsAssetEditorConstraintType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPhysicsAssetEditorConstraintType"
  },
  {
    "label": "FSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelection"
  },
  {
    "label": "UPhysicalAnimationComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalAnimationComponent"
  },
  {
    "label": "FPhysicsAssetRenderSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsAssetRenderSettings"
  },
  {
    "label": "FScopedBulkSelection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / Axis . h \" # include \" PreviewScene . h \" # include \" PhysicsAssetUtils . h \" # include \" PhysicsEngine / ConstraintInstance . h \" # include \" PhysicsEngine / ShapeElem . h \" # include \" Preferences / PhysicsAssetEditorOptions . h \" class UBodySetup ; class UPhysicsAssetEditorSkeletalMeshComponent ; class UPhysicsAsset ; class UPhysicsConstraintTemplate ; class UPhysicsAssetEditorPhysicsHandleComponent ; class USkeletalMesh ; class UStaticMeshComponent ; struct FBoneVertInfo ; class IPersonaPreviewScene ; class FPhysicsAssetEditorSharedData ; struct FScopedBulkSelection {)",
    "insertText": "FScopedBulkSelection(TSharedPtr<FPhysicsAssetEditorSharedData> InSharedData)"
  },
  {
    "label": "FScopedBulkSelection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedBulkSelection()"
  },
  {
    "label": "FBodyData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPhysicsAssetEditorSharedData> SharedData ; } ; struct FBodyData { public :)",
    "insertText": "FBodyData()"
  },
  {
    "label": "IsCoMAxisFixedInComponentSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCoMAxisFixedInComponentSpace(const EAxis::Type InAxis)"
  },
  {
    "label": "SetCoMAxisFixedInComponentSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoMAxisFixedInComponentSpace(const EAxis::Type InAxis, const bool bValue)"
  },
  {
    "label": "GetBitFlag()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetBitFlag(const EAxis::Type InAxis)"
  },
  {
    "label": "FPhysicsAssetEditorSharedData()",
    "kind": "Method",
    "detail": "Function (int32 CoMAxisFixedInComponentSpaceFlags ; } ; class FPhysicsAssetEditorSharedData { public :)",
    "insertText": "FPhysicsAssetEditorSharedData()"
  },
  {
    "label": "FSelection()",
    "kind": "Method",
    "detail": "Function (enum EPhysicsAssetEditorConstraintType { PCT_Swing1,PCT_Swing2,PCT_Twist,} ; struct FSelection { int32 Index ; EAggCollisionShape::Type PrimitiveType ; int32 PrimitiveIndex ; FTransform WidgetTM ; FTransform ManipulateTM ; FVector CoMPosition ;)",
    "insertText": "FSelection(int32 GivenBodyIndex, EAggCollisionShape::Type GivenPrimitiveType, int32 GivenPrimitiveIndex) : Index(GivenBodyIndex) , PrimitiveType(GivenPrimitiveType) , PrimitiveIndex(GivenPrimitiveIndex) , WidgetTM(FTransform::Identity) , ManipulateTM(FTransform::Identity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSelection& rhs)"
  },
  {
    "label": "CachePreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreviewMesh()"
  },
  {
    "label": "GetCurrentMeshViewMode()",
    "kind": "Method",
    "detail": "Function (EPhysicsAssetEditorMeshViewMode)",
    "insertText": "GetCurrentMeshViewMode(bool bSimulation)"
  },
  {
    "label": "GetCurrentCenterOfMassViewMode()",
    "kind": "Method",
    "detail": "Function (EPhysicsAssetEditorCenterOfMassViewMode)",
    "insertText": "GetCurrentCenterOfMassViewMode(const bool bSimulation)"
  },
  {
    "label": "GetCurrentCollisionViewMode()",
    "kind": "Method",
    "detail": "Function (EPhysicsAssetEditorCollisionViewMode)",
    "insertText": "GetCurrentCollisionViewMode(bool bSimulation)"
  },
  {
    "label": "GetCurrentConstraintViewMode()",
    "kind": "Method",
    "detail": "Function (EPhysicsAssetEditorConstraintViewMode)",
    "insertText": "GetCurrentConstraintViewMode(bool bSimulation)"
  },
  {
    "label": "ClearSelectedConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedConstraints()"
  },
  {
    "label": "SetSelectedConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedConstraint(int32 ConstraintIndex, bool bSelected)"
  },
  {
    "label": "SetSelectedConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedConstraints(const TArray<int32> ConstraintsIndices, bool bSelected)"
  },
  {
    "label": "IsConstraintSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintSelected(int32 ConstraintIndex)"
  },
  {
    "label": "GetConstraintWorldTM()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetConstraintWorldTM(const FSelection* Constraint, EConstraintFrame::Type Frame)"
  },
  {
    "label": "GetConstraintWorldTM()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetConstraintWorldTM(const UPhysicsConstraintTemplate* const ConstraintSetup, const EConstraintFrame::Type Frame, const float Scale = 1.0f)"
  },
  {
    "label": "GetConstraintMatrix()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetConstraintMatrix(int32 ConstraintIndex, EConstraintFrame::Type Frame, float Scale)"
  },
  {
    "label": "GetConstraintBodyTM()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetConstraintBodyTM(const UPhysicsConstraintTemplate* ConstraintSetup, EConstraintFrame::Type Frame)"
  },
  {
    "label": "SetConstraintRelTM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintRelTM(const FSelection* Constraint, const FTransform& RelTM)"
  },
  {
    "label": "SetSelectedConstraintRelTM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedConstraintRelTM(const FTransform& RelTM)"
  },
  {
    "label": "SetConstraintRelTM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintRelTM(GetSelectedConstraint(), RelTM)"
  },
  {
    "label": "SnapConstraintToBone()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SnapConstraintToBone(const int32 ConstraintIndex, const EConstraintTransformComponentFlags ComponentFlags = EConstraintTransformComponentFlags::All)"
  },
  {
    "label": "SnapConstraintToBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapConstraintToBone(FConstraintInstance& ConstraintInstance, const EConstraintTransformComponentFlags ComponentFlags = EConstraintTransformComponentFlags::All)"
  },
  {
    "label": "DeleteCurrentConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteCurrentConstraint()"
  },
  {
    "label": "PasteConstraintProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteConstraintProperties()"
  },
  {
    "label": "CycleCurrentConstraintOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleCurrentConstraintOrientation()"
  },
  {
    "label": "CycleCurrentConstraintActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleCurrentConstraintActive()"
  },
  {
    "label": "ToggleConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleConstraint(EPhysicsAssetEditorConstraintType Constraint)"
  },
  {
    "label": "IsAngularConstraintLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAngularConstraintLocked(EPhysicsAssetEditorConstraintType Constraint)"
  },
  {
    "label": "ClearSelectedCoMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedCoMs()"
  },
  {
    "label": "SetSelectedCoM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedCoM(const FSelection& InSelectedCoM, const bool bSelected)"
  },
  {
    "label": "SetSelectedCoMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedCoMs(const TArray<FSelection>& InSelectedElements, const bool bSelected)"
  },
  {
    "label": "IsCoMSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCoMSelected(const int32 BodyIndex)"
  },
  {
    "label": "ClearSelectedBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedBody()"
  },
  {
    "label": "SetSelectedBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBody(const FSelection& Body, bool bSelected)"
  },
  {
    "label": "SetSelectedBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBodies(const TArray<FSelection>& Bodies, bool bSelected)"
  },
  {
    "label": "IsBodySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBodySelected(const FSelection& Body)"
  },
  {
    "label": "IsBodySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBodySelected(const int32 BodyIndex)"
  },
  {
    "label": "ToggleSelectionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectionType(bool bIgnoreUserConstraints = true)"
  },
  {
    "label": "ToggleShowSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowSelected()"
  },
  {
    "label": "IsBodyHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBodyHidden(const int32 BodyIndex)"
  },
  {
    "label": "IsConstraintHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstraintHidden(const int32 ConstraintIndex)"
  },
  {
    "label": "HideBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideBody(const int32 BodyIndex)"
  },
  {
    "label": "ShowBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowBody(const int32 BodyIndex)"
  },
  {
    "label": "HideConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideConstraint(const int32 ConstraintIndex)"
  },
  {
    "label": "ShowConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowConstraint(const int32 ConstraintIndex)"
  },
  {
    "label": "ShowAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAll()"
  },
  {
    "label": "HideAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAll()"
  },
  {
    "label": "HideAllBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAllBodies()"
  },
  {
    "label": "HideAllConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideAllConstraints()"
  },
  {
    "label": "ToggleShowOnlyColliding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowOnlyColliding()"
  },
  {
    "label": "ToggleShowOnlyConstrained()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowOnlyConstrained()"
  },
  {
    "label": "ToggleShowOnlySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowOnlySelected()"
  },
  {
    "label": "ShowSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSelected()"
  },
  {
    "label": "HideSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideSelected()"
  },
  {
    "label": "SetSelectedBodyAnyPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBodyAnyPrimitive(int32 BodyIndex, bool bSelected)"
  },
  {
    "label": "SetSelectedBodiesAnyPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBodiesAnyPrimitive(const TArray<int32>& BodiesIndices, bool bSelected)"
  },
  {
    "label": "SetSelectedBodiesAllPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBodiesAllPrimitive(const TArray<int32>& BodiesIndices, bool bSelected)"
  },
  {
    "label": "SetSelectedBodiesPrimitivesWithCollisionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBodiesPrimitivesWithCollisionType(const TArray<int32>& BodiesIndices, const ECollisionEnabled::Type CollisionType, bool bSelected)"
  },
  {
    "label": "SetSelectedBodiesPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBodiesPrimitives(const TArray<int32>& BodiesIndices, bool bSelected, const TFunction<bool(const TArray<FSelection>&, const int32 BodyIndex, const FKShapeElem&)>& Predicate)"
  },
  {
    "label": "DeleteCurrentPrim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteCurrentPrim()"
  },
  {
    "label": "DeleteBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteBody(int32 DelBodyIndex, bool bRefreshComponent=true)"
  },
  {
    "label": "RefreshPhysicsAssetChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPhysicsAssetChange(const UPhysicsAsset* InPhysAsset, bool bFullClothRefresh = true)"
  },
  {
    "label": "MakeNewBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNewBody(int32 NewBoneIndex, bool bAutoSelect = true)"
  },
  {
    "label": "MakeNewConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNewConstraints(int32 ParentBodyIndex, const TArray<int32>& ChildBodyIndices)"
  },
  {
    "label": "MakeNewConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNewConstraint(int32 ParentBodyIndex, int32 ChildBodyIndex)"
  },
  {
    "label": "CopySelectedBodiesAndConstraintsToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedBodiesAndConstraintsToClipboard(int32& OutNumCopiedBodies, int32& OutNumCopiedConstraints)"
  },
  {
    "label": "CanPasteBodiesAndConstraintsFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteBodiesAndConstraintsFromClipboard()"
  },
  {
    "label": "PasteBodiesAndConstraintsFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteBodiesAndConstraintsFromClipboard(int32& OutNumPastedBodies, int32& OutNumPastedConstraints)"
  },
  {
    "label": "CopySelectedShapesToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedShapesToClipboard(int32& OutNumCopiedShapes, int32& OutNumBodiesCopiedFrom)"
  },
  {
    "label": "CanPasteShapesFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteShapesFromClipboard()"
  },
  {
    "label": "PasteShapesFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteShapesFromClipboard(int32& OutNumPastedShapes, int32& OutNumBodiesPastedInto)"
  },
  {
    "label": "CopyBodyProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBodyProperties()"
  },
  {
    "label": "CopyConstraintProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintProperties()"
  },
  {
    "label": "PasteBodyProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteBodyProperties()"
  },
  {
    "label": "CopyBodyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBodyName()"
  },
  {
    "label": "WeldSelectedBodies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WeldSelectedBodies(bool bWeld = true)"
  },
  {
    "label": "Mirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mirror()"
  },
  {
    "label": "AutoNamePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoNamePrimitive(int32 BodyIndex, EAggCollisionShape::Type PrimitiveType, int32 PrimitiveIndex = INDEX_NONE)"
  },
  {
    "label": "AutoNameAllPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoNameAllPrimitives(int32 BodyIndex, EAggCollisionShape::Type PrimitiveType)"
  },
  {
    "label": "AutoNameAllPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoNameAllPrimitives(int32 BodyIndex, EPhysAssetFitGeomType PrimitiveType)"
  },
  {
    "label": "ToggleSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSimulation()"
  },
  {
    "label": "OpenNewBodyDlg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenNewBodyDlg()"
  },
  {
    "label": "OpenNewBodyDlg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenNewBodyDlg(EAppReturnType::Type* NewBodyResponse)"
  },
  {
    "label": "CreateGenerateBodiesWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateGenerateBodiesWidget(const FSimpleDelegate& InOnCreate, const FSimpleDelegate& InOnCancel = FSimpleDelegate(), const TAttribute<bool>& InIsEnabled = TAttribute<bool>(), const TAttribute<FText>& InCreateButtonText = TAttribute<FText>(), bool bForNewAsset = false)"
  },
  {
    "label": "HitBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitBone(int32 BodyIndex, EAggCollisionShape::Type PrimType, int32 PrimIndex, bool bGroupSelect)"
  },
  {
    "label": "HitCoM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitCoM(const int32 BodyIndex, const bool bGroupSelect)"
  },
  {
    "label": "HitConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitConstraint(int32 ConstraintIndex, bool bGroupSelect)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "SetCollisionBetweenSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionBetweenSelected(bool bEnableCollision)"
  },
  {
    "label": "CanSetCollisionBetweenSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetCollisionBetweenSelected(bool bEnableCollision)"
  },
  {
    "label": "SetCollisionBetweenSelectedAndAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionBetweenSelectedAndAll(bool bEnableCollision)"
  },
  {
    "label": "CanSetCollisionBetweenSelectedAndAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetCollisionBetweenSelectedAndAll(bool bEnableCollision)"
  },
  {
    "label": "SetPrimitiveCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitiveCollision(ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "CanSetPrimitiveCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetPrimitiveCollision(ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "GetIsPrimitiveCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsPrimitiveCollisionEnabled(ECollisionEnabled::Type CollisionEnabled)"
  },
  {
    "label": "SetPrimitiveContributeToMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitiveContributeToMass(bool bContributeToMass)"
  },
  {
    "label": "CanSetPrimitiveContributeToMass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetPrimitiveContributeToMass()"
  },
  {
    "label": "GetPrimitiveContributeToMass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPrimitiveContributeToMass()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "EnableSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSimulation(bool bEnableSimulation)"
  },
  {
    "label": "ForceDisableSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceDisableSimulation()"
  },
  {
    "label": "UpdateClothPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothPhysics()"
  },
  {
    "label": "BroadcastSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastSelectionChanged()"
  },
  {
    "label": "BroadcastHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastHierarchyChanged()"
  },
  {
    "label": "BroadcastPreviewChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPreviewChanged()"
  },
  {
    "label": "ClipboardHasCompatibleData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClipboardHasCompatibleData()"
  },
  {
    "label": "ToggleShowCom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowCom()"
  },
  {
    "label": "SetShowCom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowCom(bool InValue)"
  },
  {
    "label": "GetShowCom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowCom()"
  },
  {
    "label": "GetCOMRenderPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCOMRenderPosition(const int32 BodyIndex)"
  },
  {
    "label": "IsCoMAxisFixedInComponentSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCoMAxisFixedInComponentSpace(const int32 BodyIndex, const EAxis::Type InAxis)"
  },
  {
    "label": "SetCoMAxisFixedInComponentSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoMAxisFixedInComponentSpace(const int32 BodyIndex, const EAxis::Type InAxis, const bool bValue)"
  },
  {
    "label": "InitConstraintSetup()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitConstraintSetup(UPhysicsConstraintTemplate* ConstraintSetup, int32 ChildBodyIndex, int32 ParentBodyIndex)"
  },
  {
    "label": "SetCollisionBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionBetween(int32 Body1Index, int32 Body2Index, bool bEnableCollision)"
  },
  {
    "label": "UpdateNoCollisionBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNoCollisionBodies()"
  },
  {
    "label": "CopyConstraintProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstraintProperties(const UPhysicsConstraintTemplate * FromConstraintSetup, UPhysicsConstraintTemplate * ToConstraintSetup, bool bKeepOldRotation = false)"
  },
  {
    "label": "CopyToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToClipboard(const FString& ObjectType, UObject* Object)"
  },
  {
    "label": "PasteFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteFromClipboard(const FString& InObjectType, UPhysicsAsset*& OutAsset, UObject*& OutObject)"
  },
  {
    "label": "ConditionalClearClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalClearClipboard(const FString& ObjectType, UObject* Object)"
  },
  {
    "label": "ParseClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseClipboard(UPhysicsAsset*& OutAsset, FString& OutObjectType, UObject*& OutObject)"
  },
  {
    "label": "MakeUniqueNewConstraintName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeUniqueNewConstraintName()"
  },
  {
    "label": "ClearSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelected()"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT_ThreeParams(FPhysicsAssetEditorSharedData, FSelectionChanged, const TArray<FSelection>&, const TArray<FSelection>&, const TArray<FSelection>&)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (FSelectionChanged SelectionChangedEvent ;)",
    "insertText": "DECLARE_EVENT(FPhysicsAssetEditorSharedData, FHierarchyChanged)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (FHierarchyChanged HierarchyChangedEvent ;)",
    "insertText": "DECLARE_EVENT(FPhysicsAssetEditorSharedData, FHierarchySelectionChangedEvent)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (FHierarchySelectionChangedEvent HierarchySelectionChangedEvent ;)",
    "insertText": "DECLARE_EVENT(FPhysicsAssetEditorSharedData, FPreviewChanged)"
  },
  {
    "label": "GetSelectedBody()",
    "kind": "Method",
    "detail": "Function (FPreviewChanged PreviewChangedEvent ; TObjectPtr<UPhysicsAsset> PhysicsAsset ; TObjectPtr<UPhysicsAssetEditorSkeletalMeshComponent> EditorSkelComp ; TObjectPtr<class UPhysicalAnimationComponent> PhysicalAnimationComponent ; TWeakPtr<IPersonaPreviewScene> PreviewScene ; TObjectPtr<UPhysicsAssetEditorOptions> EditorOptions ; EAppReturnType::Type NewBodyResponse ; TObjectPtr<UPhysicsAssetEditorPhysicsHandleComponent> MouseHandle ; const FColor COMRenderColor ; TArray<int32> NoCollisionBodies ; TArray<FSelection> SelectedCoMs ; TArray<FBoneVertInfo> DominantWeightBoneInfos ; TArray<FBoneVertInfo> AnyWeightBoneInfos ; TArray<FBodyData> EditorBodyData ; TArray<FSelection> SelectedBodies ; FSelection*)",
    "insertText": "GetSelectedBody()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Count = SelectedBodies .)",
    "insertText": "Num()"
  }
]