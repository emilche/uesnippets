[
  {
    "label": "SScrubControlPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrubControlPanel"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FAnimBlueprintDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBlueprintDebugData"
  },
  {
    "label": "SAnimationScrubPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimationScrubPanel"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" IPersonaPreviewScene . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" SScrubWidget . h \" # include \" ITransportControl . h \" class SScrubControlPanel ; class UAnimationAsset ; class UAnimInstance ; class UAnimSequenceBase ; struct FAnimBlueprintDebugData ; class SAnimationScrubPanel : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimationScrubPanel) : _LockedSequence()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UAnimSequenceBase*, LockedSequence) SLATE_ATTRIBUTE( float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_ARGUMENT( bool, bDisplayAnimScrubBarEditing) SLATE_EVENT( FOnSetInputViewRange, OnSetInputViewRange ) SLATE_EVENT( FOnCropAnimSequence, OnCropAnimSequence ) SLATE_EVENT( FSimpleDelegate, OnReZeroAnimSequence ) SLATE_ARGUMENT( bool, bAllowZoom ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<IPersonaPreviewScene>& InPreviewScene)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ReplaceLockedSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLockedSequence(class UAnimSequenceBase * NewLockedSequence)"
  },
  {
    "label": "OnClick_Forward_Step()",
    "kind": "Method",
    "detail": "Function (protected : TWeakPtr<IPersonaPreviewScene> PreviewScenePtr ; FOnSetInputViewRange OnSetInputViewRange ; bool bSliderBeingDragged ; FReply)",
    "insertText": "OnClick_Forward_Step()"
  },
  {
    "label": "OnClick_Forward_End()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_Forward_End()"
  },
  {
    "label": "OnClick_Backward_Step()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_Backward_Step()"
  },
  {
    "label": "OnClick_Backward_End()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_Backward_End()"
  },
  {
    "label": "OnClick_Forward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_Forward()"
  },
  {
    "label": "OnClick_Backward()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_Backward()"
  },
  {
    "label": "OnClick_ToggleLoop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_ToggleLoop()"
  },
  {
    "label": "OnClick_Record()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClick_Record()"
  },
  {
    "label": "AnimChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimChanged(UAnimationAsset * AnimAsset)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueChanged(float NewValue)"
  },
  {
    "label": "OnCropAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCropAnimSequence(bool bFromStart, float CurrentTime)"
  },
  {
    "label": "OnAppendAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAppendAnimSequence(bool bFromStart, int32 NumOfFrames)"
  },
  {
    "label": "OnInsertAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertAnimSequence(bool bBefore, int32 CurrentFrame)"
  },
  {
    "label": "OnReZeroAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReZeroAnimSequence(int32 FrameIndex)"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSliderMovement()"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(float NewValue)"
  },
  {
    "label": "GetPlaybackMode()",
    "kind": "Method",
    "detail": "Function (EPlaybackMode::Type)",
    "insertText": "GetPlaybackMode()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "IsLoopStatusOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoopStatusOn()"
  },
  {
    "label": "IsRealtimeStreamingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRealtimeStreamingMode()"
  },
  {
    "label": "GetScrubValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScrubValue()"
  },
  {
    "label": "GetPreviewInstance()",
    "kind": "Method",
    "detail": "Function (class UAnimSingleNodeInstance*)",
    "insertText": "GetPreviewInstance()"
  },
  {
    "label": "DoesSyncViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SScrubControlPanel> ScrubControlPanel ; class UAnimSequenceBase* LockedSequence ; bool)",
    "insertText": "DoesSyncViewport()"
  },
  {
    "label": "GetNumberOfKeys()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumberOfKeys()"
  },
  {
    "label": "GetSequenceLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSequenceLength()"
  },
  {
    "label": "GetAnimInstanceWithBlueprint()",
    "kind": "Method",
    "detail": "Function (UAnimInstance*)",
    "insertText": "GetAnimInstanceWithBlueprint()"
  },
  {
    "label": "GetAnimBlueprintDebugData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimBlueprintDebugData(UAnimInstance*& Instance, FAnimBlueprintDebugData*& DebugInfo)"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IPersonaPreviewScene>)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "GetDisplayDrag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDisplayDrag()"
  }
]