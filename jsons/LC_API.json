[
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<stddef . h> # include<stdint . h> # include \" . h \" # define)",
    "insertText": "LPP_DLL_API(_rv) _rv __cdecl LPP_DLL_API(void) LppStartup(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppShutdown(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(const char*) LppGetVersion(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(int) LppCheckVersion(const char* apiVersion)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppRegisterProcessGroup(const char* groupName)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppSyncPoint(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppWaitForToken(void* token)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(bool) LppTryWaitForToken(void* token)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppTriggerRecompile(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppLogMessage(const wchar_t* message)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppBuildPatch(const wchar_t* moduleNames[], const wchar_t* objPaths[], const wchar_t* amalgamatedObjPaths[], unsigned int count)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppInstallExceptionHandler(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppUseExternalBuildSystem(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppTriggerRestart(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(int) LppWantsRestart(void)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppRestart(lpp::RestartBehaviour behaviour, unsigned int exitCode)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppEnableModule(const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppEnableModules(const wchar_t* namesOfExeOrDll[], unsigned int count)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppEnableAllModules(const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppDisableModule(const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppDisableModules(const wchar_t* namesOfExeOrDll[], unsigned int count)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppDisableAllModules(const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppShowConsole()"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppSetVisible(bool visible)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppSetActive(bool active)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppSetBuildArguments(const wchar_t* arguments)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppEnableLazyLoadedModule(const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppSetReinstancingFlow(bool enable)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppDisableCompileFinishNotification()"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void*) LppEnableModulesEx(const wchar_t* moduleNames[], unsigned int moduleCount, const wchar_t* lazyLoadModuleNames[], unsigned int lazyLoadModuleCount, const uintptr_t* reservedPages, unsigned int reservedPagesCount)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppApplySettingBool(const char* settingName, int value)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppApplySettingInt(const char* settingName, int value)"
  },
  {
    "label": "LPP_DLL_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_DLL_API(void) LppApplySettingString(const char* settingName, const wchar_t* value)"
  }
]