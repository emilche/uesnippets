[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FNamePermissionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePermissionList"
  },
  {
    "label": "FMultiBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBox"
  },
  {
    "label": "FProxyTabmanager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProxyTabmanager"
  },
  {
    "label": "SDockingArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingArea"
  },
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "FLayoutExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutExtender"
  },
  {
    "label": "FTabMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabMatcher"
  },
  {
    "label": "FSidebarTabLists",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarTabLists"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTabId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabId"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "FMinorTabConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinorTabConfig"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTabSpawnerEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabSpawnerEntry"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FGlobalTabmanager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalTabmanager"
  },
  {
    "label": "FStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStack"
  },
  {
    "label": "FSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplitter"
  },
  {
    "label": "FArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArea"
  },
  {
    "label": "FLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayout"
  },
  {
    "label": "FLayoutNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutNode"
  },
  {
    "label": "FTab",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTab"
  },
  {
    "label": "EWindowPlacement",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWindowPlacement"
  },
  {
    "label": "FPrivateApi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrivateApi"
  },
  {
    "label": "FSearchPreference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSearchPreference"
  },
  {
    "label": "FRequireClosedTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequireClosedTab"
  },
  {
    "label": "FLiveTabSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLiveTabSearch"
  },
  {
    "label": "FLastMajorOrNomadTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLastMajorOrNomadTab"
  },
  {
    "label": "ESearchPreference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ESearchPreference"
  },
  {
    "label": "FPopulateTabSpawnerMenu_Args",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPopulateTabSpawnerMenu_Args"
  },
  {
    "label": "SDockingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingNode"
  },
  {
    "label": "SDockingSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingSplitter"
  },
  {
    "label": "FSubTabManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubTabManager"
  },
  {
    "label": "FindByTab",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindByTab"
  },
  {
    "label": "FindByManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindByManager"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Containers / Ticker . h \" # include \" Misc / Attribute . h \" # include \" Textures / SlateIcon . h \" # include \" Widgets / SWindow . h \" # include \" Framework / Docking / WorkspaceItem . h \" # include \" Framework / Commands / UIAction . h \" # include \" Templates / Function . h \" class FJsonObject ; class FMenuBuilder ; class FNamePermissionList ; class FMultiBox ; class FProxyTabmanager ; class SDockingArea ; class SDockingTabStack ; class FLayoutExtender ; struct FTabMatcher ; struct FSidebarTabLists ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnActiveTabChanged, TSharedPtr<SDockTab>, TSharedPtr<SDockTab>)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ESidebarLocation : uint8 { Left,Right,None,} ; enum class ETabIdFlags : uint8 { None = 0 x0,SaveLayout = 0 x1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETabIdFlags)"
  },
  {
    "label": "FTabId()",
    "kind": "Method",
    "detail": "Function (struct FTabId {)",
    "insertText": "FTabId() : InstanceId(INDEX_NONE) , Flags(ETabIdFlags::SaveLayout)"
  },
  {
    "label": "FTabId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTabId(const FName InTabType, const int32 InInstanceId) : TabType(InTabType) , InstanceId(InInstanceId) , Flags(ETabIdFlags::SaveLayout)"
  },
  {
    "label": "FTabId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTabId(const FName InTabType) : TabType(InTabType) , InstanceId(INDEX_NONE) , Flags(ETabIdFlags::SaveLayout)"
  },
  {
    "label": "FTabId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTabId(const FName InTabType, const ETabIdFlags InFlags) : TabType(InTabType) , InstanceId(INDEX_NONE) , Flags(InFlags)"
  },
  {
    "label": "IsTabPersistable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTabPersistable()"
  },
  {
    "label": "ShouldSaveLayout()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSaveLayout()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "ToText()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FFormatNamedArguments Args ; Args .)",
    "insertText": "Add(TEXT(\"TabType\"), FText::FromName( TabType ))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"InstanceIdNumber\"), FText::AsNumber( InstanceId ))"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FTabId& In)"
  },
  {
    "label": "FSpawnTabArgs()",
    "kind": "Method",
    "detail": "Function (} FName TabType ; int32 InstanceId ; private : ETabIdFlags Flags ; } ; class FSpawnTabArgs { public :)",
    "insertText": "FSpawnTabArgs(const TSharedPtr<SWindow>& InOwnerWindow, const FTabId& InTabBeingSpawenedId ) : TabIdBeingSpawned(InTabBeingSpawenedId) , OwnerWindow(InOwnerWindow)"
  },
  {
    "label": "GetOwnerWindow()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<SWindow>&)",
    "insertText": "GetOwnerWindow()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FCanSpawnTab, const FSpawnTabArgs&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedPtr<SDockTab>, FOnFindTabToReuse, const FTabId&)"
  },
  {
    "label": "FMinorTabConfig()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMinorTabConfig()"
  },
  {
    "label": "FMinorTabConfig()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMinorTabConfig(const FName& InTabID) : TabId(InTabID)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} FName TabId ; FText TabLabel ; FText TabTooltip ; FSlateIcon TabIcon ; FOnSpawnTab OnSpawnTab ; FCanSpawnTab CanSpawnTab ; FOnFindTabToReuse OnFindTabToReuse ; TSharedPtr<FWorkspaceItem> WorkspaceGroup ; } ; namespace ETabSpawnerMenuType { enum Type { Enabled,Disabled,Hidden,} ; } enum class ETabReadOnlyBehavior : int32 { Disabled,Hidden,Custom } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnReadOnlyModeChanged, bool)"
  },
  {
    "label": "FTabSpawnerEntry()",
    "kind": "Method",
    "detail": "Function (struct FTabSpawnerEntry : public FWorkspaceItem {)",
    "insertText": "FTabSpawnerEntry(const FName& InTabType, const FOnSpawnTab& InSpawnTabMethod, const FCanSpawnTab& InCanSpawnTab) : FWorkspaceItem(InTabType, FText(), FSlateIcon(), false) , TabType(InTabType) , OnSpawnTab(InSpawnTabMethod) , CanSpawnTab(InCanSpawnTab) , OnFindTabToReuse() , MenuType(ETabSpawnerMenuType::Enabled) , bAutoGenerateMenuEntry(true) , bCanSidebarTab(true) , SpawnedTabPtr() , ReadOnlyBehavior(ETabReadOnlyBehavior::Disabled)"
  },
  {
    "label": "SetReadOnlyBehavior()",
    "kind": "Method",
    "detail": "Function (} FTabSpawnerEntry&)",
    "insertText": "SetReadOnlyBehavior(const ETabReadOnlyBehavior& InReadOnlyBehavior)"
  },
  {
    "label": "SetIcon()",
    "kind": "Method",
    "detail": "Function (ReadOnlyBehavior = InReadOnlyBehavior ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetIcon(const FSlateIcon& InIcon)"
  },
  {
    "label": "SetDisplayNameAttribute()",
    "kind": "Method",
    "detail": "Function (Icon = InIcon ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetDisplayNameAttribute(const TAttribute<FText>& InLegibleName)"
  },
  {
    "label": "SetTooltipTextAttribute()",
    "kind": "Method",
    "detail": "Function (DisplayNameAttribute = InLegibleName ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetTooltipTextAttribute(const TAttribute<FText>& InTooltipText)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (TooltipTextAttribute = InTooltipText ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetDisplayName(const FText& InLegibleName)"
  },
  {
    "label": "SetTooltipText()",
    "kind": "Method",
    "detail": "Function (DisplayNameAttribute = InLegibleName ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetTooltipText(const FText& InTooltipText)"
  },
  {
    "label": "SetGroup()",
    "kind": "Method",
    "detail": "Function (TooltipTextAttribute = InTooltipText ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetGroup(const TSharedRef<FWorkspaceItem>& InGroup)"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (InGroup ->)",
    "insertText": "AddItem(SharedThis(this))"
  },
  {
    "label": "SetMenuType()",
    "kind": "Method",
    "detail": "Function (OnFindTabToReuse = InReuseTabMethod ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetMenuType(const TAttribute<ETabSpawnerMenuType::Type>& InMenuType)"
  },
  {
    "label": "SetAutoGenerateMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuType = InMenuType ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetAutoGenerateMenuEntry(bool bInAutoGenerateMenuEntry)"
  },
  {
    "label": "SetCanSidebarTab()",
    "kind": "Method",
    "detail": "Function (bAutoGenerateMenuEntry = bInAutoGenerateMenuEntry ; return* this ; } FTabSpawnerEntry&)",
    "insertText": "SetCanSidebarTab(bool bInCanSidebarTab)"
  },
  {
    "label": "CanSidebarTab()",
    "kind": "Method",
    "detail": "Function (bCanSidebarTab = bInCanSidebarTab ; return* this ; } bool)",
    "insertText": "CanSidebarTab()"
  },
  {
    "label": "GetTabType()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetTabType()"
  },
  {
    "label": "IsSoleTabInstanceSpawned()",
    "kind": "Method",
    "detail": "Function (} private : FName TabType ; FOnSpawnTab OnSpawnTab ; FCanSpawnTab CanSpawnTab ; FOnFindTabToReuse OnFindTabToReuse ; TAttribute<ETabSpawnerMenuType::Type> MenuType ; bool bAutoGenerateMenuEntry ; bool bCanSidebarTab ; TWeakPtr<SDockTab> SpawnedTabPtr ; ETabReadOnlyBehavior ReadOnlyBehavior ; FORCENOINLINE bool)",
    "insertText": "IsSoleTabInstanceSpawned()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} class FTabManager ; } ; namespace ETabState { enum Type { OpenedTab = 0 x1<<0,ClosedTab = 0 x1<<1,SidebarTab = 0 x1<<2,InvalidTab = 0 x1<<3 } ; } enum class EOutputCanBeNullptr { Never,IfNoTabValid,IfNoOpenTabValid } ; class FTabManager : public TSharedFromThis<FTabManager> { class FGlobalTabmanager ; public : class FStack ; class FSplitter ; class FArea ; class FLayout ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPersistLayout, const TSharedRef<FLayout>&)"
  },
  {
    "label": "FLayoutNode()",
    "kind": "Method",
    "detail": "Function (class FLayoutNode : public TSharedFromThis<FLayoutNode> { class FTabManager ; public : ~)",
    "insertText": "FLayoutNode()"
  },
  {
    "label": "AsStack()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FStack>)",
    "insertText": "AsStack()"
  },
  {
    "label": "AsSplitter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSplitter>)",
    "insertText": "AsSplitter()"
  },
  {
    "label": "AsArea()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArea>)",
    "insertText": "AsArea()"
  },
  {
    "label": "GetSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSizeCoefficient()"
  },
  {
    "label": "FTab()",
    "kind": "Method",
    "detail": "Function (} float SizeCoefficient ; } ; struct FTab {)",
    "insertText": "FTab(const FTabId& InTabId, ETabState::Type InTabState) : TabId(InTabId) , TabState(InTabState) , SidebarLocation(ESidebarLocation::None) , SidebarSizeCoefficient(0.0f) , bPinnedInSidebar(false)"
  },
  {
    "label": "FTab()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTab(const FTabId& InTabId, ETabState::Type InTabState, ESidebarLocation InSidebarLocation, float InSidebarSizeCoefficient, bool bInPinnedInSidebar) : TabId(InTabId) , TabState(InTabState) , SidebarLocation(InSidebarLocation) , SidebarSizeCoefficient(InSidebarSizeCoefficient) , bPinnedInSidebar(bInPinnedInSidebar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTab& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tabs .)",
    "insertText": "Add(FTab( FTabId(TabType), InTabState))"
  },
  {
    "label": "AddTab()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "AddTab(const FTabId TabId, ETabState::Type InTabState)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tabs .)",
    "insertText": "Add(FTab(TabId, InTabState))"
  },
  {
    "label": "AddTab()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "AddTab(const FName TabType, ETabState::Type InTabState, ESidebarLocation InSidebarLocation, float SidebarSizeCoefficient, bool bPinnedInSidebar=false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tabs .)",
    "insertText": "Add(FTab(FTabId(TabType), InTabState, InSidebarLocation, SidebarSizeCoefficient, bPinnedInSidebar))"
  },
  {
    "label": "AddTab()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "AddTab(const FTabId TabId, ETabState::Type InTabState, ESidebarLocation InSidebarLocation, float SidebarSizeCoefficient, bool bPinnedInSidebar=false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tabs .)",
    "insertText": "Add(FTab(TabId, InTabState, InSidebarLocation, SidebarSizeCoefficient, bPinnedInSidebar))"
  },
  {
    "label": "AddTab()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "AddTab(const FTab& Tab)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tabs .)",
    "insertText": "Add(Tab)"
  },
  {
    "label": "SetSizeCoefficient()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "SetSizeCoefficient(const float InSizeCoefficient)"
  },
  {
    "label": "SharedThis()",
    "kind": "Method",
    "detail": "Function (SizeCoefficient = InSizeCoefficient ; return)",
    "insertText": "SharedThis(this)"
  },
  {
    "label": "SetHideTabWell()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "SetHideTabWell(const bool InHideTabWell)"
  },
  {
    "label": "SetForegroundTab()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "SetForegroundTab(const FTabId& TabId)"
  },
  {
    "label": "FStack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStack()"
  },
  {
    "label": "SetExtensionId()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "SetExtensionId(FName InExtensionId)"
  },
  {
    "label": "GetExtensionId()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetExtensionId()"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (} TArray<FTab> Tabs ; bool bHideTabWell ; FTabId ForegroundTabId ; FName ExtensionId ; } ; class FSplitter : public FLayoutNode { class FTabManager ; class FLayoutExtender ; public : TSharedRef<FSplitter>)",
    "insertText": "Split(TSharedRef<FLayoutNode> InNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildNodes .)",
    "insertText": "Add(InNode)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FSplitter>)",
    "insertText": "InsertBefore(TSharedRef<FLayoutNode> NodeToInsertBefore, TSharedRef<FLayoutNode> NodeToInsert)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 InsertAtIndex = ChildNodes .)",
    "insertText": "Find(NodeToInsertBefore)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (ChildNodes .)",
    "insertText": "Insert(NodeToInsert, InsertAtIndex)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FSplitter>)",
    "insertText": "InsertAfter(TSharedRef<FLayoutNode> NodeToInsertAfter, TSharedRef<FLayoutNode> NodeToInsert)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 InsertAtIndex = ChildNodes .)",
    "insertText": "Find(NodeToInsertAfter)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (ChildNodes .)",
    "insertText": "Insert(NodeToInsert, InsertAtIndex + 1)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FSplitter>)",
    "insertText": "SetOrientation(const EOrientation InOrientation)"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (} EOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "FSplitter()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FSplitter() : Orientation(Orient_Horizontal)"
  },
  {
    "label": "SplitAt()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FArea>)",
    "insertText": "SplitAt(int32 Index, TSharedRef<FLayoutNode> InNode)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (ChildNodes .)",
    "insertText": "Insert(InNode, FMath::Min(Index, ChildNodes.Num()))"
  },
  {
    "label": "SetWindow()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FArea>)",
    "insertText": "SetWindow(FVector2D InPosition, bool IsMaximized)"
  },
  {
    "label": "FArea()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FArea()"
  },
  {
    "label": "DefinesPositionallySpecifiedFloatingWindow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DefinesPositionallySpecifiedFloatingWindow()"
  },
  {
    "label": "AddArea()",
    "kind": "Method",
    "detail": "Function (} EWindowPlacement WindowPlacement ; FVector2D UnscaledWindowPosition ; FVector2D UnscaledWindowSize ; bool bIsMaximized ; FName ExtensionId ; } ; class FLayout : public TSharedFromThis<FLayout> { class FTabManager ; public : const TSharedRef<FTabManager::FLayout> NullLayout ; TSharedRef<FLayout>)",
    "insertText": "AddArea(const TSharedRef<FArea>& InArea)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Areas .)",
    "insertText": "Add(InArea)"
  },
  {
    "label": "GetPrimaryArea()",
    "kind": "Method",
    "detail": "Function (} const TWeakPtr<FArea>&)",
    "insertText": "GetPrimaryArea()"
  },
  {
    "label": "NewFromJson()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FLayout>)",
    "insertText": "NewFromJson(const TSharedPtr<FJsonObject>& LayoutAsJson)"
  },
  {
    "label": "GetLayoutName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetLayoutName()"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FJsonObject>)",
    "insertText": "ToJson()"
  },
  {
    "label": "ProcessExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExtensions(const FLayoutExtender& Extender)"
  },
  {
    "label": "PersistToString_Helper()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<class FJsonObject>)",
    "insertText": "PersistToString_Helper(const TSharedRef<FLayoutNode>& NodeToPersist)"
  },
  {
    "label": "NewFromString_Helper()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLayoutNode>)",
    "insertText": "NewFromString_Helper(TSharedPtr<FJsonObject> JsonObject)"
  },
  {
    "label": "FLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLayout(const FName& InLayoutName) : LayoutName(InLayoutName)"
  },
  {
    "label": "FPrivateApi()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<FArea> PrimaryArea ; TArray<TSharedRef<FArea>> Areas ; FName LayoutName ; } ; class FPrivateApi ; class FPrivateApi { public :)",
    "insertText": "FPrivateApi(FTabManager& InTabManager ) : TabManager( InTabManager)"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "OnDockAreaCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDockAreaCreated(const TSharedRef<SDockingArea>& NewlyCreatedDockArea)"
  },
  {
    "label": "OnTabRelocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabRelocated(const TSharedRef<SDockTab>& RelocatedTab, const TSharedPtr<SWindow>& NewOwnerWindow)"
  },
  {
    "label": "OnTabOpening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabOpening(const TSharedRef<SDockTab>& TabBeingOpened)"
  },
  {
    "label": "OnTabClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabClosing(const TSharedRef<SDockTab>& TabBeingClosed)"
  },
  {
    "label": "OnDockAreaClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDockAreaClosing(const TSharedRef<SDockingArea>& DockAreaThatIsClosing)"
  },
  {
    "label": "OnTabManagerClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabManagerClosing()"
  },
  {
    "label": "CanTabLeaveTabWell()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTabLeaveTabWell(const TSharedRef<const SDockTab>& TabToTest)"
  },
  {
    "label": "GetLiveDockAreas()",
    "kind": "Method",
    "detail": "Function (const TArray<TWeakPtr<SDockingArea>>&)",
    "insertText": "GetLiveDockAreas()"
  },
  {
    "label": "OnTabForegrounded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabForegrounded(const TSharedPtr<SDockTab>& NewForegroundTab, const TSharedPtr<SDockTab>& BackgroundedTab)"
  },
  {
    "label": "ShowWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowWindows()"
  },
  {
    "label": "HideWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideWindows()"
  },
  {
    "label": "SetCanDoDeferredLayoutSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanDoDeferredLayoutSave(bool bInCanDoDeferredLayoutSave)"
  },
  {
    "label": "GetPrivateApi()",
    "kind": "Method",
    "detail": "Function (private : FTabManager& TabManager ; } ; FTabManager::FPrivateApi&)",
    "insertText": "GetPrivateApi()"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (public : class FSearchPreference { public : TSharedPtr<SDockTab>)",
    "insertText": "Search(const FTabManager& Manager, FName PlaceholderId, const TSharedRef<SDockTab>& UnmanagedTab)"
  },
  {
    "label": "FSearchPreference()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSearchPreference()"
  },
  {
    "label": "FLiveTabSearch()",
    "kind": "Method",
    "detail": "Function (} ; class FLiveTabSearch : public FSearchPreference { public :)",
    "insertText": "FLiveTabSearch(FName InSearchForTabId = NAME_None)"
  },
  {
    "label": "FLastMajorOrNomadTab()",
    "kind": "Method",
    "detail": "Function (private : FName SearchForTabId ; } ; class FLastMajorOrNomadTab : public FSearchPreference { public :)",
    "insertText": "FLastMajorOrNomadTab(FName InFallbackTabId)"
  },
  {
    "label": "NewLayout()",
    "kind": "Method",
    "detail": "Function (private : FName FallbackTabId ; } ; public : TSharedRef<FLayout>)",
    "insertText": "NewLayout(const FName LayoutName)"
  },
  {
    "label": "NewPrimaryArea()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FArea>)",
    "insertText": "NewPrimaryArea()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FArea> Area =)",
    "insertText": "MakeShareable(new FArea(0,0))"
  },
  {
    "label": "NewArea()",
    "kind": "Method",
    "detail": "Function (Area -> WindowPlacement = FArea::Placement_NoWindow ; return Area ; } TSharedRef<FArea>)",
    "insertText": "NewArea(const float Width, const float Height)"
  },
  {
    "label": "NewArea()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FArea>)",
    "insertText": "NewArea(const FVector2D& WindowSize)"
  },
  {
    "label": "NewStack()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FStack>)",
    "insertText": "NewStack()"
  },
  {
    "label": "NewSplitter()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FSplitter>)",
    "insertText": "NewSplitter()"
  },
  {
    "label": "RegisterDefaultTabWindowSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterDefaultTabWindowSize(const FTabId& TabName, const FVector2D DefaultSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DefaultTabWindowSizeMap .)",
    "insertText": "Add(TabName, DefaultSize)"
  },
  {
    "label": "UnregisterDefaultTabWindowSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterDefaultTabWindowSize(const FTabId& TabName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (DefaultTabWindowSizeMap .)",
    "insertText": "Remove(TabName)"
  },
  {
    "label": "SetOnPersistLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOnPersistLayout(const FOnPersistLayout& InHandler)"
  },
  {
    "label": "CloseAllAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllAreas()"
  },
  {
    "label": "PersistLayout()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTabManager::FLayout>)",
    "insertText": "PersistLayout()"
  },
  {
    "label": "SavePersistentLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePersistentLayout()"
  },
  {
    "label": "RequestSavePersistentLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSavePersistentLayout()"
  },
  {
    "label": "ClearPendingLayoutSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingLayoutSave()"
  },
  {
    "label": "RegisterTabSpawner()",
    "kind": "Method",
    "detail": "Function (FTabSpawnerEntry&)",
    "insertText": "RegisterTabSpawner(const FName TabId, const FOnSpawnTab& OnSpawnTab, const FCanSpawnTab& CanSpawnTab = FCanSpawnTab())"
  },
  {
    "label": "UnregisterTabSpawner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterTabSpawner(const FName TabId)"
  },
  {
    "label": "UnregisterAllTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAllTabSpawners()"
  },
  {
    "label": "RestoreFrom()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "RestoreFrom(const TSharedRef<FLayout>& Layout, const TSharedPtr<SWindow>& ParentWindow, const bool bEmbedTitleAreaContent = false, const EOutputCanBeNullptr RestoreAreaOutputCanBeNullptr = EOutputCanBeNullptr::Never)"
  },
  {
    "label": "PopulateLocalTabSpawnerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateLocalTabSpawnerMenu(FMenuBuilder& PopulateMe)"
  },
  {
    "label": "PopulateTabSpawnerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTabSpawnerMenu(FMenuBuilder& PopulateMe, TSharedRef<FWorkspaceItem> MenuStructure)"
  },
  {
    "label": "PopulateTabSpawnerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTabSpawnerMenu(FMenuBuilder& PopulateMe, TSharedRef<FWorkspaceItem> MenuStructure, bool bIncludeOrphanedMenus)"
  },
  {
    "label": "PopulateTabSpawnerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTabSpawnerMenu(FMenuBuilder &PopulateMe, const FName& TabType)"
  },
  {
    "label": "DrawAttention()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttention(const TSharedRef<SDockTab>& TabToHighlight)"
  },
  {
    "label": "InsertNewDocumentTab()",
    "kind": "Method",
    "detail": "Function (struct ESearchPreference { enum Type { PreferLiveTab,RequireClosedTab } ; } ; void)",
    "insertText": "InsertNewDocumentTab(FName PlaceholderId, FName NewTabId, const FSearchPreference& SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab)"
  },
  {
    "label": "InsertNewDocumentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewDocumentTab(FName PlaceholderId, const FSearchPreference& SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab)"
  },
  {
    "label": "InsertNewDocumentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewDocumentTab(FName PlaceholderId, ESearchPreference::Type SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab)"
  },
  {
    "label": "RestoreDocumentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreDocumentTab(FName PlaceholderId, ESearchPreference::Type SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab)"
  },
  {
    "label": "TryInvokeTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "TryInvokeTab(const FTabId& TabId, bool bInvokeAsInactive = false)"
  },
  {
    "label": "FindExistingLiveTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "FindExistingLiveTab(const FTabId& TabId)"
  },
  {
    "label": "FTabManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTabManager()"
  },
  {
    "label": "SetAllowWindowMenuBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowWindowMenuBar(bool bInAllowWindowMenuBar)"
  },
  {
    "label": "AllowsWindowMenuBar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsWindowMenuBar()"
  },
  {
    "label": "UpdateMainMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMainMenu(TSharedPtr<SDockTab> ForTab, const bool bForce)"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainTab(const TSharedRef<const SDockTab>& InTab)"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainTab(const FTabId& InMainTabID)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadOnly(bool bInReadOnly)"
  },
  {
    "label": "GetOnReadOnlyModeChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FOnReadOnlyModeChanged&)",
    "insertText": "GetOnReadOnlyModeChangedDelegate()"
  },
  {
    "label": "GetCanDoDragOperation()",
    "kind": "Method",
    "detail": "Function (bCanDoDragOperation = CanDoDragOperation ; } bool)",
    "insertText": "GetCanDoDragOperation()"
  },
  {
    "label": "IsTabAllowedInSidebar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabAllowedInSidebar(const FTabId TabId)"
  },
  {
    "label": "GetTabReadOnlyBehavior()",
    "kind": "Method",
    "detail": "Function (TOptional<ETabReadOnlyBehavior>)",
    "insertText": "GetTabReadOnlyBehavior(const FTabId& TabId)"
  },
  {
    "label": "ToggleSidebarOpenTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSidebarOpenTabs()"
  },
  {
    "label": "GetLocalWorkspaceMenuRoot()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FWorkspaceItem>)",
    "insertText": "GetLocalWorkspaceMenuRoot()"
  },
  {
    "label": "AddLocalWorkspaceMenuCategory()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FWorkspaceItem>)",
    "insertText": "AddLocalWorkspaceMenuCategory(const FText& CategoryTitle)"
  },
  {
    "label": "AddLocalWorkspaceMenuItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalWorkspaceMenuItem(const TSharedRef<FWorkspaceItem>& CategoryItem)"
  },
  {
    "label": "ClearLocalWorkspaceMenuCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLocalWorkspaceMenuCategories()"
  },
  {
    "label": "HasTabSpawner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTabSpawner(FName TabId)"
  },
  {
    "label": "GetOwnerTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetOwnerTab()"
  },
  {
    "label": "GetTabPermissionList()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FNamePermissionList>&)",
    "insertText": "GetTabPermissionList()"
  },
  {
    "label": "GetUIActionForTabSpawnerMenuEntry()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "GetUIActionForTabSpawnerMenuEntry(TSharedPtr<FTabSpawnerEntry> InTabMenuEntry)"
  },
  {
    "label": "CollectSpawners()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<FTabSpawnerEntry>>)",
    "insertText": "CollectSpawners()"
  },
  {
    "label": "FindTabSpawnerFor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabSpawnerEntry>)",
    "insertText": "FindTabSpawnerFor(FName TabId)"
  },
  {
    "label": "InvokeTabForMenu()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InvokeTabForMenu(FName TabId)"
  },
  {
    "label": "InsertDocumentTab()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InsertDocumentTab(FName PlaceholderId, const FSearchPreference& SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab, bool bPlaySpawnAnim)"
  },
  {
    "label": "InsertDocumentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertDocumentTab(FName PlaceholderId, FName NewTabId, const FSearchPreference& SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab, bool bPlaySpawnAnim)"
  },
  {
    "label": "OpenUnmanagedTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenUnmanagedTab(FName PlaceholderId, const FSearchPreference& SearchPreference, const TSharedRef<SDockTab>& UnmanagedTab)"
  },
  {
    "label": "PopulateTabSpawnerMenu_Helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTabSpawnerMenu_Helper(FMenuBuilder& PopulateMe, struct FPopulateTabSpawnerMenu_Args Args)"
  },
  {
    "label": "MakeSpawnerMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSpawnerMenuEntry(FMenuBuilder &PopulateMe, const TSharedPtr<FTabSpawnerEntry> &InSpawnerNode)"
  },
  {
    "label": "InvokeTab_Internal()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "InvokeTab_Internal(const FTabId& TabId, bool bInvokeAsInactive = false, bool bForceOpenWindowIfNeeded = false)"
  },
  {
    "label": "FindLastTabInWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "FindLastTabInWindow(TSharedPtr<SWindow> Window)"
  },
  {
    "label": "FindPotentiallyClosedTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingTabStack>)",
    "insertText": "FindPotentiallyClosedTab(const FTabId& ClosedTabId)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (typedef TMap<FName,TSharedRef<FTabSpawnerEntry>> FTabSpawner ; TSharedRef<FTabManager>)",
    "insertText": "New(const TSharedPtr<SDockTab>& InOwnerTab, const TSharedRef<FTabSpawner>& InNomadTabSpawner)"
  },
  {
    "label": "FTabManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTabManager(const TSharedPtr<SDockTab>& InOwnerTab, const TSharedRef<FTabManager::FTabSpawner> & InNomadTabSpawner)"
  },
  {
    "label": "RestoreArea()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingArea>)",
    "insertText": "RestoreArea(const TSharedRef<FArea>& AreaToRestore, const TSharedPtr<SWindow>& InParentWindow, const bool bEmbedTitleAreaContent = false, const EOutputCanBeNullptr OutputCanBeNullptr = EOutputCanBeNullptr::Never, bool bForceOpenWindowIfNeeded = false)"
  },
  {
    "label": "RestoreArea_Helper()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SDockingNode>)",
    "insertText": "RestoreArea_Helper(const TSharedRef<FLayoutNode>& LayoutNode, const TSharedPtr<SWindow>& ParentWindow, const bool bEmbedTitleAreaContent, FSidebarTabLists& OutSidebarTabs, const EOutputCanBeNullptr OutputCanBeNullptr = EOutputCanBeNullptr::Never, bool bForceOpenWindowIfNeeded = false)"
  },
  {
    "label": "CanRestoreSplitterContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRestoreSplitterContent(TArray<TSharedRef<class SDockingNode>>& DockingNodes, const TSharedRef<FSplitter>& SplitterNode, const TSharedPtr<SWindow>& ParentWindow, FSidebarTabLists& OutSidebarTabs, const EOutputCanBeNullptr OutputCanBeNullptr)"
  },
  {
    "label": "RestoreSplitterContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSplitterContent(const TArray<TSharedRef<class SDockingNode>>& DockingNodes, const TSharedRef<class SDockingSplitter>& SplitterWidget)"
  },
  {
    "label": "RestoreSplitterContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSplitterContent(const TSharedRef<FSplitter>& SplitterNode, const TSharedRef<class SDockingSplitter>& SplitterWidget, const TSharedPtr<SWindow>& ParentWindow, FSidebarTabLists& OutSidebarTabs)"
  },
  {
    "label": "IsValidTabForSpawning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTabForSpawning(const FTab& SomeTab)"
  },
  {
    "label": "IsAllowedTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedTab(const FTabId& TabId)"
  },
  {
    "label": "IsAllowedTabType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedTabType(const FName TabType)"
  },
  {
    "label": "SpawnTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "SpawnTab(const FTabId& TabId, const TSharedPtr<SWindow>& ParentWindow, const bool bCanOutputBeNullptr = false)"
  },
  {
    "label": "FindTabInLiveAreas()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SDockingTabStack>)",
    "insertText": "FindTabInLiveAreas(const FTabMatcher& TabMatcher)"
  },
  {
    "label": "FindTabInLiveArea()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SDockingTabStack>)",
    "insertText": "FindTabInLiveArea(const FTabMatcher& TabMatcher, const TSharedRef<SDockingArea>& InArea)"
  },
  {
    "label": "HasAnyMatchingTabs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyMatchingTabs(const TSharedRef<FTabManager::FLayoutNode>& SomeNode, const TFunctionRef<bool(const FTab&)>& Matcher)"
  },
  {
    "label": "HasValidOpenTabs()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasValidOpenTabs(const TSharedRef<FTabManager::FLayoutNode>& SomeNode)"
  },
  {
    "label": "GetAreaFromInitialLayoutWithTabType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FArea>)",
    "insertText": "GetAreaFromInitialLayoutWithTabType(const FTabId& InTabIdToMatch)"
  },
  {
    "label": "HasValidTabs()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "HasValidTabs(const TSharedRef<FTabManager::FLayoutNode>& SomeNode)"
  },
  {
    "label": "SetTabsTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabsTo(const TSharedRef<FTabManager::FLayoutNode>& SomeNode, const ETabState::Type NewTabState, const ETabState::Type OriginalTabState)"
  },
  {
    "label": "CanCloseManager()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseManager(const TSet< TSharedRef<SDockTab> >& TabsToIgnore = TSet< TSharedRef<SDockTab> >())"
  },
  {
    "label": "GetAllStacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllStacks(const TSharedRef<SDockingArea>& InDockArea, TArray< TSharedRef<SDockingTabStack> >& OutTabStacks)"
  },
  {
    "label": "FindTabUnderNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FStack>)",
    "insertText": "FindTabUnderNode(const FTabMatcher& Matcher, const TSharedRef<FTabManager::FLayoutNode>& NodeToSearchUnder)"
  },
  {
    "label": "FindTabInCollapsedAreas()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindTabInCollapsedAreas(const FTabMatcher& Matcher)"
  },
  {
    "label": "RemoveTabFromCollapsedAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTabFromCollapsedAreas(const FTabMatcher& Matcher)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "FinishRestore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRestore()"
  },
  {
    "label": "GetRecordableStats()",
    "kind": "Method",
    "detail": "Function (} ; private : void)",
    "insertText": "GetRecordableStats(int32& OutTabCount, TArray<TSharedPtr<SWindow>>& OutUniqueParentWindows)"
  },
  {
    "label": "AttemptToOpenTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingTabStack>)",
    "insertText": "AttemptToOpenTab(const FTabId& ClosedTabId, bool bForceOpenWindowIfNeeded = false)"
  },
  {
    "label": "HasAnyTabWithTabId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyTabWithTabId(const TSharedRef<FTabManager::FLayoutNode>& SomeNode, const FName& InTabTypeToMatch)"
  },
  {
    "label": "GetAreaForTabId()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FArea>)",
    "insertText": "GetAreaForTabId(const FTabId& TabId)"
  },
  {
    "label": "HasTabSpawnerFor()",
    "kind": "Method",
    "detail": "Function (protected : FTabSpawner TabSpawner ; TSharedRef<FTabSpawner> NomadTabSpawner ; bool)",
    "insertText": "HasTabSpawnerFor(FName TabId)"
  },
  {
    "label": "GetDefaultTabWindowSize()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakPtr<SDockingArea>> DockAreas ; TArray<TSharedRef<FTabManager::FArea>> CollapsedDockAreas ; TArray<TSharedRef<FTabManager::FArea>> InvalidDockAreas ; TSharedPtr<FWorkspaceItem> LocalWorkspaceMenuRoot ; TWeakPtr<SDockTab> OwnerTabPtr ; TSharedPtr<FMultiBox> MenuMultiBox ; TSharedPtr<SWidget> MenuWidget ; TSharedRef<FPrivateApi> PrivateApi ; FName ActiveLayoutName ; FOnPersistLayout OnPersistLayout_Handler ; int32 LastDocumentUID ; const FVector2D FallbackWindowSize ; TMap<FTabId,FVector2D> DefaultTabWindowSizeMap ; FVector2D)",
    "insertText": "GetDefaultTabWindowSize(const FTabId& TabId)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTabId MainNonCloseableTabID ; TSharedPtr<const SDockTab> PendingMainNonClosableTab ; bool bEnforceMainTab = false ; TWeakPtr<SWindow> LastMajorDockWindow ; bool bCanDoDragOperation = true ; bool bCanDoDeferredLayoutSave = true ; bool bAllowPerWindowMenu = false ; FTSTicker::FDelegateHandle PendingLayoutSaveHandle ; TSharedRef<FNamePermissionList> TabPermissionList ; TArray<TWeakPtr<SDockTab>> TemporarilySidebaredTabs ; bool bReadOnly = false ; FOnReadOnlyModeChanged OnReadOnlyModeChanged ; } ; class FProxyTabmanager ; class FGlobalTabmanager : public FTabManager { public : const TSharedRef<FGlobalTabmanager>&)",
    "insertText": "Get()"
  },
  {
    "label": "OnActiveTabChanged_Subscribe()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "OnActiveTabChanged_Subscribe(const FOnActiveTabChanged::FDelegate& InDelegate)"
  },
  {
    "label": "OnActiveTabChanged_Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveTabChanged_Unsubscribe(FDelegateHandle Handle)"
  },
  {
    "label": "OnTabForegrounded_Subscribe()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "OnTabForegrounded_Subscribe(const FOnActiveTabChanged::FDelegate& InDelegate)"
  },
  {
    "label": "OnTabForegrounded_Unsubscribe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabForegrounded_Unsubscribe(FDelegateHandle Handle)"
  },
  {
    "label": "GetActiveTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetActiveTab()"
  },
  {
    "label": "CanSetAsActiveTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetAsActiveTab(const TSharedPtr<SDockTab>& Tab)"
  },
  {
    "label": "SetActiveTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveTab(const TSharedPtr<SDockTab>& NewActiveTab)"
  },
  {
    "label": "RegisterNomadTabSpawner()",
    "kind": "Method",
    "detail": "Function (FTabSpawnerEntry&)",
    "insertText": "RegisterNomadTabSpawner(const FName TabId, const FOnSpawnTab& OnSpawnTab, const FCanSpawnTab& CanSpawnTab = FCanSpawnTab())"
  },
  {
    "label": "UnregisterNomadTabSpawner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNomadTabSpawner(const FName TabId)"
  },
  {
    "label": "SetApplicationTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplicationTitle(const FText& AppTitle)"
  },
  {
    "label": "GetApplicationTitle()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetApplicationTitle()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGlobalTabmanager>)",
    "insertText": "New()"
  },
  {
    "label": "GetMajorTabForTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetMajorTabForTabManager(const TSharedRef<FTabManager>& ChildManager)"
  },
  {
    "label": "GetTabManagerForMajorTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager>)",
    "insertText": "GetTabManagerForMajorTab(const TSharedPtr<SDockTab> DockTab)"
  },
  {
    "label": "DrawAttentionToTabManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAttentionToTabManager(const TSharedRef<FTabManager>& ChildManager)"
  },
  {
    "label": "NewTabManager()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTabManager>)",
    "insertText": "NewTabManager(const TSharedRef<SDockTab>& InOwnerTab)"
  },
  {
    "label": "UpdateMainMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMainMenu(const TSharedRef<SDockTab>& ForTab, bool const bForce)"
  },
  {
    "label": "SaveAllVisualState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAllVisualState()"
  },
  {
    "label": "SetRootWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootWindow(const TSharedRef<SWindow> InRootWindow)"
  },
  {
    "label": "GetRootWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetRootWindow()"
  },
  {
    "label": "AddLegacyTabType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLegacyTabType(FName InLegacyTabType, FName InNewTabType)"
  },
  {
    "label": "IsLegacyTabType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLegacyTabType(FName InTabType)"
  },
  {
    "label": "GetTabTypeForPotentiallyLegacyTab()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTabTypeForPotentiallyLegacyTab(FName InTabType)"
  },
  {
    "label": "GetMaximumTabCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaximumTabCount()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnOverrideDockableAreaRestore)"
  },
  {
    "label": "SetInitialLayoutSP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialLayoutSP(TSharedPtr<FTabManager::FLayout> InLayout)"
  },
  {
    "label": "GetInitialLayoutSP()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTabManager::FLayout>)",
    "insertText": "GetInitialLayoutSP()"
  },
  {
    "label": "FSubTabManager()",
    "kind": "Method",
    "detail": "Function (private : struct FSubTabManager {)",
    "insertText": "FSubTabManager(const TSharedRef<SDockTab>& InMajorTab, const TSharedRef<FTabManager>& InTabManager ) : MajorTab( InMajorTab ) , TabManager( InTabManager)"
  },
  {
    "label": "FindByTab()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<SDockTab> MajorTab ; TWeakPtr<FTabManager> TabManager ; } ; struct FindByTab {)",
    "insertText": "FindByTab(const TSharedRef<SDockTab>& InTabToFind) : TabToFind(InTabToFind)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const FGlobalTabmanager::FSubTabManager& TabManagerPair)"
  },
  {
    "label": "FindByManager()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<SDockTab>& TabToFind ; } ; struct FindByManager {)",
    "insertText": "FindByManager(const TSharedRef<FTabManager>& InManagerToFind) : ManagerToFind(InManagerToFind)"
  },
  {
    "label": "FGlobalTabmanager()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<FTabManager>& ManagerToFind ; } ;)",
    "insertText": "FGlobalTabmanager() : FTabManager( TSharedPtr<SDockTab>(), MakeShareable( new FTabSpawner() ) ) , AllTabsMaxCount(0) , AllAreasWindowMaxCount(0)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} TArray<FSubTabManager> SubTabManagers ; TWeakPtr<SDockTab> ActiveTabPtr ; FOnActiveTabChanged OnActiveTabChanged ; FOnActiveTabChanged TabForegrounded ; FText AppTitle ; TWeakPtr<SWindow> RootWindowPtr ; TMap<FName,FName> LegacyTabTypeRedirectionMap ; int32 AllTabsMaxCount ; int32 AllAreasWindowMaxCount ; TSharedPtr<FProxyTabmanager> ProxyTabManager ; TSharedPtr<FTabManager::FLayout> InitialLayoutSP ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FIsTabSupportedEvent, FTabId , bool&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnTabEvent, TSharedPtr<SDockTab>)"
  },
  {
    "label": "FProxyTabmanager()",
    "kind": "Method",
    "detail": "Function (class FProxyTabmanager : public FTabManager { public :)",
    "insertText": "FProxyTabmanager(TSharedRef<SWindow> InParentWindow) : FTabManager(TSharedPtr<SDockTab>(), MakeShareable(new FTabSpawner())) , ParentWindow(InParentWindow)"
  },
  {
    "label": "IsTabSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTabSupported(const FTabId TabId)"
  },
  {
    "label": "SetParentWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentWindow(TSharedRef<SWindow> InParentWindow)"
  }
]