[
  {
    "label": "bfloat16",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bfloat16"
  },
  {
    "label": "__bfloat16_raw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__bfloat16_raw"
  },
  {
    "label": "bfloat16_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bfloat16_base"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "numeric_limits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "numeric_limits"
  },
  {
    "label": "random_default_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "random_default_impl"
  },
  {
    "label": "is_arithmetic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_arithmetic"
  },
  {
    "label": "NumTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NumTraits"
  },
  {
    "label": "hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash"
  },
  {
    "label": "BF16_PACKET_FUNCTION()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BFLOAT16_H # define EIGEN_BFLOAT16_H # define)",
    "insertText": "BF16_PACKET_FUNCTION(PACKET_F, PACKET_BF16, METHOD) \\ template <> \\ EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED \\ PACKET_BF16 METHOD<PACKET_BF16>(const PACKET_BF16& _x)"
  },
  {
    "label": "F32ToBf16()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "F32ToBf16(METHOD<PACKET_F>(Bf16ToF32(_x)))"
  },
  {
    "label": "__bfloat16_raw()",
    "kind": "Method",
    "detail": "Function (\\ } namespace Eigen { struct bfloat16 ; namespace bfloat16_impl { struct __bfloat16_raw { EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "__bfloat16_raw() : value(0)"
  },
  {
    "label": "__bfloat16_raw()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "__bfloat16_raw(unsigned short raw) : value(raw)"
  },
  {
    "label": "raw_uint16_to_bfloat16()",
    "kind": "Method",
    "detail": "Function (} unsigned short value ; } ; EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR __bfloat16_raw)",
    "insertText": "raw_uint16_to_bfloat16(unsigned short value)"
  },
  {
    "label": "float_to_bfloat16_rtne()",
    "kind": "Method",
    "detail": "Function (template<bool AssumeArgumentIsNormalOrInfinityOrZero> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __bfloat16_raw)",
    "insertText": "float_to_bfloat16_rtne(float ff)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __bfloat16_raw float_to_bfloat16_rtne<)",
    "insertText": "false(float ff)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __bfloat16_raw float_to_bfloat16_rtne<)",
    "insertText": "true(float ff)"
  },
  {
    "label": "bfloat16_to_float()",
    "kind": "Method",
    "detail": "Function (EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC float)",
    "insertText": "bfloat16_to_float(__bfloat16_raw h)"
  },
  {
    "label": "bfloat16_base()",
    "kind": "Method",
    "detail": "Function (struct bfloat16_base : public __bfloat16_raw { EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16_base()"
  },
  {
    "label": "bfloat16_base()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16_base(const __bfloat16_raw& h) : __bfloat16_raw(h)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} } ; } struct bfloat16 : public bfloat16_impl::bfloat16_base { typedef bfloat16_impl::__bfloat16_raw __bfloat16_raw ; EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16()"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16(const __bfloat16_raw& h) : bfloat16_impl::bfloat16_base(h)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16(bool b) : bfloat16_impl::bfloat16_base(bfloat16_impl::raw_uint16_to_bfloat16(b ? 0x3f80 : 0))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} template<class T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16(T val) : bfloat16_impl::bfloat16_base(bfloat16_impl::float_to_bfloat16_rtne<internal::is_integral<T>::value>(static_cast<float>(val)))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "bfloat16(float f) : bfloat16_impl::bfloat16_base(bfloat16_impl::float_to_bfloat16_rtne<false>(f))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} template<RealScalar> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR)",
    "insertText": "bfloat16(const std::complex<RealScalar>& val) : bfloat16_impl::bfloat16_base(bfloat16_impl::float_to_bfloat16_rtne<false>(static_cast<float>(val.real())))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC operator)",
    "insertText": "float()"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace std { template<> struct numeric_limits<Eigen::bfloat16> { const bool is_specialized = true ; const bool is_signed = true ; const bool is_integer = false ; const bool is_exact = false ; const bool has_infinity = true ; const bool has_quiet_NaN = true ; const bool has_signaling_NaN = true ; const float_denorm_style has_denorm = std::denorm_absent ; const bool has_denorm_loss = false ; const std::float_round_style round_style = numeric_limits<float>::round_style ; const bool is_iec559 = false ; const bool is_bounded = true ; const bool is_modulo = false ; const int digits = 8 ; const int digits10 = 2 ; const int max_digits10 = 4 ; const int radix = 2 ; const int min_exponent = numeric_limits<float>::min_exponent ; const int min_exponent10 = numeric_limits<float>::min_exponent10 ; const int max_exponent = numeric_limits<float>::max_exponent ; const int max_exponent10 = numeric_limits<float>::max_exponent10 ; const bool traps = numeric_limits<float>::traps ; const bool tinyness_before = numeric_limits<float>::tinyness_before ;)",
    "insertText": "bfloat16(min)()"
  },
  {
    "label": "lowest()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "lowest()"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bfloat16(max)()"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "epsilon()"
  },
  {
    "label": "round_error()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "round_error()"
  },
  {
    "label": "infinity()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "infinity()"
  },
  {
    "label": "quiet_NaN()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "quiet_NaN()"
  },
  {
    "label": "signaling_NaN()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "signaling_NaN()"
  },
  {
    "label": "denorm_min()",
    "kind": "Method",
    "detail": "Function (} Eigen::bfloat16)",
    "insertText": "denorm_min()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct numeric_limits<const Eigen::bfloat16> : numeric_limits<Eigen::bfloat16> { } ; template<> struct numeric_limits<volatile Eigen::bfloat16> : numeric_limits<Eigen::bfloat16> { } ; template<> struct numeric_limits<const volatile Eigen::bfloat16> : numeric_limits<Eigen::bfloat16> { } ; } namespace Eigen { namespace bfloat16_impl { # if !)",
    "insertText": "defined(EIGEN_HAS_NATIVE_BF16) || (EIGEN_COMP_CLANG && !EIGEN_COMP_NVCC) #if EIGEN_COMP_CLANG && defined(EIGEN_CUDACC) #pragma push_macro(\"EIGEN_DEVICE_FUNC\") #undef EIGEN_DEVICE_FUNC #if defined(EIGEN_HAS_CUDA_BF16) && defined(EIGEN_HAS_NATIVE_BF16) #define EIGEN_DEVICE_FUNC __host__ #else #define EIGEN_DEVICE_FUNC __host__ __device__ #endif #endif EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16 operator + (const bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "operator(const bfloat16& a, const int& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "operator(const int& a, const bfloat16& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "operator(const bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "operator(const bfloat16& a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bfloat16 result ; result . value = a . value ^ 0 x8000 ; return result ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16&)",
    "insertText": "operator(bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "bfloat16(float(a) + float(b))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "bfloat16(float(a) * float(b))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "bfloat16(float(a) - float(b))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "bfloat16(float(a) / float(b))"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (a + =)",
    "insertText": "bfloat16(1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bfloat16 original_value = a ; + + a ; return original_value ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "operator(bfloat16& a, int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_COMP_CLANG&&)",
    "insertText": "defined(EIGEN_CUDACC) #pragma pop_macro(\"EIGEN_DEVICE_FUNC\") #endif #endif EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16 operator / (const bfloat16& a, Index b)"
  },
  {
    "label": "truncate_to_bfloat16()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC __bfloat16_raw)",
    "insertText": "truncate_to_bfloat16(const float v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__bfloat16_raw output ;)",
    "insertText": "if(Eigen::numext::isnan EIGEN_NOT_A_MACRO(v))"
  },
  {
    "label": "signbit()",
    "kind": "Method",
    "detail": "Function (output . value =)",
    "insertText": "signbit(v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__BYTE_ORDER__)"
  },
  {
    "label": "raw_uint16_to_bfloat16()",
    "kind": "Method",
    "detail": "Function (# else output . value = p [ 1 ] ; # endif return output ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR __bfloat16_raw)",
    "insertText": "raw_uint16_to_bfloat16(numext::uint16_t value)"
  },
  {
    "label": "raw_bfloat16_as_uint16()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR numext::uint16_t)",
    "insertText": "raw_bfloat16_as_uint16(const __bfloat16_raw& bf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(EIGEN_HAS_CUDA_BF16) && defined(EIGEN_HAS_HIP_BF16))"
  },
  {
    "label": "signbit()",
    "kind": "Method",
    "detail": "Function (output . value =)",
    "insertText": "signbit(ff)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (} else { output = float_to_bfloat16_rtne<)",
    "insertText": "true(ff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(EIGEN_HAS_CUDA_BF16) && defined(EIGEN_HAS_HIP_BF16)) #else numext::uint32_t input = numext::bit_cast<numext::uint32_t>(ff)"
  },
  {
    "label": "lsb()",
    "kind": "Method",
    "detail": "Function (__bfloat16_raw output ; numext::uint32_t)",
    "insertText": "lsb(input >> 16)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (numext::uint32_t rounding_bias = 0 x7fff + lsb ; input + = rounding_bias ; output . value = static_cast<)",
    "insertText": "uint16_t(input >> 16)"
  },
  {
    "label": "short()",
    "kind": "Method",
    "detail": "Function (float result = 0 ; unsigned short* q = reinterpret_cast<unsigned)",
    "insertText": "short(&result)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# else q [ 1 ] = h . value ; # endif return result ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC)",
    "insertText": "bool(isinf)(const bfloat16& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(isinf)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC)",
    "insertText": "bool(isnan)(const bfloat16& a)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(isnan)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC)",
    "insertText": "bool(isfinite)(const bfloat16& a)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "abs(const bfloat16& a)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (bfloat16 result ; result . value = a . value& 0 x7FFF ; return result ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "exp(const bfloat16& a)"
  },
  {
    "label": "expm1()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "expm1(const bfloat16& a)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "log(const bfloat16& a)"
  },
  {
    "label": "log1p()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "log1p(const bfloat16& a)"
  },
  {
    "label": "log10()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "log10(const bfloat16& a)"
  },
  {
    "label": "log2()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "log2(const bfloat16& a)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "sqrt(const bfloat16& a)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "pow(const bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "sin(const bfloat16& a)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "cos(const bfloat16& a)"
  },
  {
    "label": "tan()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "tan(const bfloat16& a)"
  },
  {
    "label": "asin()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "asin(const bfloat16& a)"
  },
  {
    "label": "acos()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "acos(const bfloat16& a)"
  },
  {
    "label": "atan()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "atan(const bfloat16& a)"
  },
  {
    "label": "sinh()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "sinh(const bfloat16& a)"
  },
  {
    "label": "cosh()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "cosh(const bfloat16& a)"
  },
  {
    "label": "tanh()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "tanh(const bfloat16& a)"
  },
  {
    "label": "asinh()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_CXX11_MATH EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "asinh(const bfloat16& a)"
  },
  {
    "label": "acosh()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "acosh(const bfloat16& a)"
  },
  {
    "label": "atanh()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "atanh(const bfloat16& a)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "floor(const bfloat16& a)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "ceil(const bfloat16& a)"
  },
  {
    "label": "rint()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "rint(const bfloat16& a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "round(const bfloat16& a)"
  },
  {
    "label": "fmod()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "fmod(const bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC)",
    "insertText": "bfloat16(min)(const bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float f1 = static_cast<)",
    "insertText": "float(a)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float f2 = static_cast<)",
    "insertText": "float(b)"
  },
  {
    "label": "fmax()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC bfloat16)",
    "insertText": "fmax(const bfloat16& a, const bfloat16& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_NO_IO EIGEN_ALWAYS_INLINE std::ostream&)",
    "insertText": "operator(std::ostream& os, const bfloat16& v)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (os<<static_cast<)",
    "insertText": "float(v)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} bfloat16)",
    "insertText": "run()"
  },
  {
    "label": "dummy_precision()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR EIGEN_STRONG_INLINE Eigen::bfloat16)",
    "insertText": "dummy_precision()"
  },
  {
    "label": "highest()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR EIGEN_STRONG_INLINE Eigen::bfloat16)",
    "insertText": "highest()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace Eigen { namespace numext { template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "bool(isnan)(const Eigen::bfloat16& h)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "bool(isinf)(const Eigen::bfloat16& h)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "bool(isfinite)(const Eigen::bfloat16& h)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Eigen::bfloat16 bit_cast<Eigen::bfloat16,)",
    "insertText": "uint16_t(const uint16_t& src)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC uint16_t bit_cast<uint16_t,)",
    "insertText": "bfloat16(const Eigen::bfloat16& src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } # if EIGEN_HAS_STD_HASH namespace std { template<> struct hash<Eigen::bfloat16> { EIGEN_STRONG_INLINE std::size_t)",
    "insertText": "operator()(const Eigen::bfloat16& a)"
  }
]