[
  {
    "label": "UnordSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnordSet"
  },
  {
    "label": "ModifiersTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModifiersTest"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "EraseFirst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EraseFirst"
  },
  {
    "label": "Map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Map"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_UNORDERED_SET_MODIFIERS_TEST_H_ # define ABSL_CONTAINER_INTERNAL_UNORDERED_SET_MODIFIERS_TEST_H_ # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / container / internal / hash_generator_testing . h \" # include \" absl / container / internal / hash_policy_testing . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class UnordSet> class ModifiersTest : public::testing::Test { } ;)",
    "insertText": "TYPED_TEST_SUITE_P(ModifiersTest)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TYPED_TEST_P(ModifiersTest, Clear)"
  },
  {
    "label": "generate_n()",
    "kind": "Method",
    "detail": "Function (using T = hash_internal::GeneratedType<TypeParam> ; std::vector<T> values ;)",
    "insertText": "generate_n(std::back_inserter(values), 10, hash_internal::Generator<T>())"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m(values.begin(), values.end())"
  },
  {
    "label": "ASSERT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_THAT(keys(m), ::testing::UnorderedElementsAreArray(values))"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "clear()"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m), ::testing::UnorderedElementsAre())"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(m.empty())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, Insert)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using T = hash_internal::GeneratedType<TypeParam> ; T val = hash_internal::Generator<)",
    "insertText": "T()()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (TypeParam m ; auto p = m .)",
    "insertText": "insert(val)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(p.second)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(val, *p.first)"
  },
  {
    "label": "EXPECT_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_FALSE(p.second)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, InsertHint)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (TypeParam m ; auto it = m .)",
    "insertText": "insert(m.end(), val)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(it != m.end())"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(val, *it)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (it = m .)",
    "insertText": "insert(it, val)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, InsertRange)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (TypeParam m ; m .)",
    "insertText": "insert(values.begin(), values.end())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, InsertWithinCapacity)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (TypeParam m ; m .)",
    "insertText": "reserve(10)"
  },
  {
    "label": "bucket_count()",
    "kind": "Method",
    "detail": "Function (const size_t original_capacity = m .)",
    "insertText": "bucket_count()"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(m.bucket_count(), original_capacity)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, InsertRangeWithinCapacity)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__GLIBCXX__)"
  },
  {
    "label": "generate_n()",
    "kind": "Method",
    "detail": "Function (std::vector<T> base_values ;)",
    "insertText": "generate_n(std::back_inserter(base_values), 10, hash_internal::Generator<T>())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (std::vector<T> values ;)",
    "insertText": "while(values.size() != 100)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "insert(values.end(), base_values.begin(), base_values.end())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "TYPED_TEST_P(ModifiersTest, Emplace)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (TypeParam m ; auto p = m .)",
    "insertText": "emplace(val)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, EmplaceHint)"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (TypeParam m ; auto it = m .)",
    "insertText": "emplace_hint(m.end(), val)"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (it = m .)",
    "insertText": "emplace_hint(it, val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class V> using IfNotVoid = std::enable_if<! std::is_void<V>::value,V>::type ; struct EraseFirst { template<class Map> auto)",
    "insertText": "operator()(Map* m, int) const -> IfNotVoid<decltype(m->erase(m->begin()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class Map> Map::iterator)",
    "insertText": "operator()(Map* m, ...)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto it = m ->)",
    "insertText": "begin()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (m ->)",
    "insertText": "erase(it++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<T> values2 ;)",
    "insertText": "for(const auto& val : values) if (val != *m.begin()) values2.push_back(val)"
  },
  {
    "label": "EraseFirst()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "EraseFirst()(&m, 0)"
  },
  {
    "label": "ASSERT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_TRUE(it != m.end())"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(1, std::count(values2.begin(), values2.end(), *it))"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m), ::testing::UnorderedElementsAreArray(values2.begin(), values2.end()))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, EraseRange)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (auto it = m .)",
    "insertText": "erase(m.begin(), m.end())"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(it == m.end())"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, EraseKey)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(1, m.erase(values[0]))"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(0, std::count(m.begin(), m.end(), values[0]))"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m), ::testing::UnorderedElementsAreArray(values.begin() + 1, values.end()))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(ModifiersTest, Swap)"
  },
  {
    "label": "generate_n()",
    "kind": "Method",
    "detail": "Function (using T = hash_internal::GeneratedType<TypeParam> ; std::vector<T> v1 ; std::vector<T> v2 ;)",
    "insertText": "generate_n(std::back_inserter(v1), 5, hash_internal::Generator<T>())"
  },
  {
    "label": "generate_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "generate_n(std::back_inserter(v2), 5, hash_internal::Generator<T>())"
  },
  {
    "label": "m1()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m1(v1.begin(), v1.end())"
  },
  {
    "label": "m2()",
    "kind": "Method",
    "detail": "Function (TypeParam)",
    "insertText": "m2(v2.begin(), v2.end())"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m1), ::testing::UnorderedElementsAreArray(v1))"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m2), ::testing::UnorderedElementsAreArray(v2))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (m1 .)",
    "insertText": "swap(m2)"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m1), ::testing::UnorderedElementsAreArray(v2))"
  },
  {
    "label": "EXPECT_THAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_THAT(keys(m2), ::testing::UnorderedElementsAreArray(v1))"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(ModifiersTest, Clear, Insert, InsertHint, InsertRange, InsertWithinCapacity, InsertRangeWithinCapacity, Emplace, EmplaceHint, Erase, EraseRange, EraseKey, Swap)"
  }
]