[
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSession"
  },
  {
    "label": "FModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModel"
  },
  {
    "label": "FCADKernelArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCADKernelArchive"
  },
  {
    "label": "FCADKernelArchive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" UI / Message . h \" # include \" HAL / FileManager . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryReader . h \" namespace UE::CADKernel { class FEntity ; class FSession ; class FModel ; class FCADKernelArchive { public : TUniquePtr<FMemoryReader> MemoryReader ; FArchive& Archive ; FSession& Session ; FModel* ArchiveModel = nullptr ;)",
    "insertText": "FCADKernelArchive(FSession& InSession, FArchive& InArchive) : Archive(InArchive) , Session(InSession)"
  },
  {
    "label": "FCADKernelArchive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCADKernelArchive(FSession& InSession, const TArray<uint8>& InRawData) : MemoryReader(MakeUnique<FMemoryReader>(InRawData, true)) , Archive(*MemoryReader) , Session(InSession)"
  },
  {
    "label": "CreateArchiveWriter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FCADKernelArchive>)",
    "insertText": "CreateArchiveWriter(FSession& InSession, const TCHAR* FileName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FArchive* Ar =)",
    "insertText": "Get().CreateFileWriter(FileName)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Printf(Log, TEXT(\"The archive file %s is corrupted\\n\"), FileName)"
  },
  {
    "label": "FCADKernelArchive()",
    "kind": "Method",
    "detail": "Function (} return MakeShared<)",
    "insertText": "FCADKernelArchive(InSession, *Ar)"
  },
  {
    "label": "CreateArchiveReader()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FCADKernelArchive>)",
    "insertText": "CreateArchiveReader(FSession& InSession, const TCHAR* FileName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FArchive* Ar =)",
    "insertText": "Get().CreateFileReader(FileName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "operator(EntityType& Entity)"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (Archive<<Entity ; } bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "IsSaving()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaving()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* Value, int64 Length)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "Serialize(Value, Length)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "Serialize(TArray<EntityType>& EntityArray)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (int32 ElementCount = 0 ; Archive<<ElementCount ; EntityArray .)",
    "insertText": "SetNum(ElementCount)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} else { int32 ElementCount = EntityArray .)",
    "insertText": "Num()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Archive<<ElementCount ; } Archive .)",
    "insertText": "Serialize((void*)EntityArray.GetData(), EntityArray.Num() * sizeof(EntityType))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} template<EntityType> void)",
    "insertText": "Serialize(EntityType& EntityArray)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "Serialize((void*)&EntityArray, sizeof(EntityType))"
  },
  {
    "label": "SetReferencedEntityOrAddToWaitingList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReferencedEntityOrAddToWaitingList(FIdent ArchiveId, FEntity** Entity)"
  },
  {
    "label": "SetReferencedEntityOrAddToWaitingList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferencedEntityOrAddToWaitingList(FIdent ArchiveId, TWeakPtr<FEntity>& Entity)"
  },
  {
    "label": "SetReferencedEntityOrAddToWaitingList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferencedEntityOrAddToWaitingList(FIdent ArchiveId, TSharedPtr<FEntity>& Entity)"
  },
  {
    "label": "AddEntityToSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntityToSave(FIdent Id)"
  },
  {
    "label": "AddEntityFromArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntityFromArchive(TSharedPtr<FEntity>& Entity)"
  },
  {
    "label": "AddEntityFromArchive()",
    "kind": "Method",
    "detail": "Function (template<EntityType> void)",
    "insertText": "AddEntityFromArchive(TSharedPtr<EntityType>& Entity)"
  },
  {
    "label": "AddEntityFromArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntityFromArchive((TSharedPtr<FEntity>&) Entity)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Tell()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close()"
  }
]