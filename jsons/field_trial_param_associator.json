[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DefaultSingletonTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSingletonTraits"
  },
  {
    "label": "FieldTrialParamAssociator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_FIELD_TRIAL_PARAM_ASSOCIATOR_H_ # define BASE_METRICS_FIELD_TRIAL_PARAM_ASSOCIATOR_H_ # include<map> # include<string> # include<utility> # include \" base / base_export . h \" # include \" base / memory / singleton . h \" # include \" base / metrics / field_trial . h \" # include \" base / metrics / field_trial_params . h \" # include \" base / synchronization / lock . h \" namespace base { class BASE_EXPORT FieldTrialParamAssociator { public :)",
    "insertText": "FieldTrialParamAssociator()"
  },
  {
    "label": "FieldTrialParamAssociator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldTrialParamAssociator(const FieldTrialParamAssociator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FieldTrialParamAssociator&)",
    "insertText": "operator(const FieldTrialParamAssociator&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (FieldTrialParamAssociator*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "AssociateFieldTrialParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssociateFieldTrialParams(const std::string& trial_name, const std::string& group_name, const FieldTrialParams& params)"
  },
  {
    "label": "GetFieldTrialParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFieldTrialParams(FieldTrial* field_trial, FieldTrialParams* params)"
  },
  {
    "label": "GetFieldTrialParamsWithoutFallback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFieldTrialParamsWithoutFallback(const std::string& trial_name, const std::string& group_name, FieldTrialParams* params)"
  },
  {
    "label": "ClearAllParamsForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllParamsForTesting()"
  },
  {
    "label": "ClearParamsForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearParamsForTesting(const std::string& trial_name, const std::string& group_name)"
  },
  {
    "label": "ClearAllCachedParamsForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCachedParamsForTesting()"
  }
]