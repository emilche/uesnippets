[
  {
    "label": "FMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawSingleShaderBindings"
  },
  {
    "label": "FSlateMaterialShaderVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMaterialShaderVS"
  },
  {
    "label": "FSlateMaterialShaderPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMaterialShaderPS"
  },
  {
    "label": "TSlateMaterialShaderVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlateMaterialShaderVS"
  },
  {
    "label": "TSlateMaterialShaderPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlateMaterialShaderPS"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Rendering / RenderingCommon . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" MaterialShaderType . h \" # include \" MaterialShader . h \" class FMeshDrawSingleShaderBindings ; class FSlateMaterialShaderVS : public FMaterialShader {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FSlateMaterialShaderVS, NonVirtual)"
  },
  {
    "label": "FSlateMaterialShaderVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSlateMaterialShaderVS()"
  },
  {
    "label": "FSlateMaterialShaderVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateMaterialShaderVS(const FMaterialShaderType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetMaterialShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialShaderParameters(FMeshDrawSingleShaderBindings& ShaderBindings, const FSceneInterface* Scene, const TUniformBufferRef<FViewUniformShaderParameters>& ViewUniformBuffer, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial* Material)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateMaterialShaderPS : public FMaterialShader {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FSlateMaterialShaderPS, NonVirtual)"
  },
  {
    "label": "FSlateMaterialShaderPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateMaterialShaderPS()"
  },
  {
    "label": "FSlateMaterialShaderPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateMaterialShaderPS(const FMaterialShaderType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetMaterialShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialShaderParameters(FMeshDrawSingleShaderBindings& ShaderBindings, const FSceneInterface* Scene, const TUniformBufferRef<FViewUniformShaderParameters>& ViewUniformBuffer, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial* Material, const FShaderParams& InShaderParams)"
  },
  {
    "label": "SetDisplayGammaAndContrast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayGammaAndContrast(FMeshDrawSingleShaderBindings& ShaderBindings, float InDisplayGamma, float InContrast)"
  },
  {
    "label": "SetAdditionalTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalTexture(FMeshDrawSingleShaderBindings& ShaderBindings, FRHITexture* InTexture, const FSamplerStateRHIRef SamplerState)"
  },
  {
    "label": "SetDrawFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawFlags(FMeshDrawSingleShaderBindings& ShaderBindings, bool bDrawDisabledEffect)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, GammaAndAlphaValues)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, DrawFlags)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShaderParams)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShaderParams2)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, TextureParameterSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, AdditionalTextureParameter)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<bool bUseInstancing> class TSlateMaterialShaderVS : public FSlateMaterialShaderVS { public :)",
    "insertText": "DECLARE_SHADER_TYPE(TSlateMaterialShaderVS,Material)"
  },
  {
    "label": "TSlateMaterialShaderVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSlateMaterialShaderVS()"
  },
  {
    "label": "TSlateMaterialShaderVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSlateMaterialShaderVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FSlateMaterialShaderVS( Initializer)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_SLATE_INSTANCING\"), (uint32)( bUseInstancing ? 1 : 0 ))"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; template<ESlateShader ShaderType> class TSlateMaterialShaderPS : public FSlateMaterialShaderPS { public :)",
    "insertText": "DECLARE_SHADER_TYPE(TSlateMaterialShaderPS,Material)"
  },
  {
    "label": "TSlateMaterialShaderPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSlateMaterialShaderPS()"
  },
  {
    "label": "TSlateMaterialShaderPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSlateMaterialShaderPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FSlateMaterialShaderPS( Initializer)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters,OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SHADER_TYPE\"), (uint32)ShaderType)"
  }
]