[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FBaseTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseTimingTrack"
  },
  {
    "label": "FTimingEventsTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventsTrack"
  },
  {
    "label": "ITimingEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITimeMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeMarker"
  },
  {
    "label": "ITimingViewSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingViewSession"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "Interactive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / Config . h \" class SWidget ; class FBaseTimingTrack ; class FTimingEventsTrack ; class ITimingEvent ; enum class ETimingTrackLocation : uint32 ; # if UE_INSIGHTS_BACKWARD_COMPATIBILITY_UE54 namespace Insights { enum class ETimeChangedFlags : int32 ; } namespace Insights { class ITimeMarker ; } namespace Insights { class ITimingViewSession ; } namespace UE::Insights { using ETimeChangedFlags =::Insights::ETimeChangedFlags ; } namespace UE::Insights { using ITimeMarker =::Insights::ITimeMarker ; } namespace UE::Insights { using ITimingViewSession =::Insights::ITimingViewSession ; } # endif namespace UE::Insights::Timing { enum class ETimeChangedFlags : int32 { None,)",
    "insertText": "Interactive(1 << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ETimeChangedFlags)"
  },
  {
    "label": "ITimeMarker()",
    "kind": "Method",
    "detail": "Function (class ITimeMarker { public : ~)",
    "insertText": "ITimeMarker()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTime()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTime(const double InTime)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FSelectionChangedDelegate, ETimeChangedFlags , double , double)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FTimeMarkerChangedDelegate, ETimeChangedFlags , double)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FCustomTimeMarkerChangedDelegate, ETimeChangedFlags , TSharedRef<ITimeMarker>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FHoveredTrackChangedDelegate, const TSharedPtr<FBaseTimingTrack>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FHoveredEventChangedDelegate, const TSharedPtr<const ITimingEvent>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FSelectedTrackChangedDelegate, const TSharedPtr<FBaseTimingTrack>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FSelectedEventChangedDelegate, const TSharedPtr<const ITimingEvent>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FTrackVisibilityChangedDelegate)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FTrackAddedDelegate, const TSharedPtr<const FBaseTimingTrack>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FTrackRemovedDelegate, const TSharedPtr<const FBaseTimingTrack>)"
  },
  {
    "label": "ITimingViewSession()",
    "kind": "Method",
    "detail": "Function (class ITimingViewSession { public : ~)",
    "insertText": "ITimingViewSession()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "AddTopDockedTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTopDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "RemoveTopDockedTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTopDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddBottomDockedTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBottomDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "RemoveBottomDockedTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveBottomDockedTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddScrollableTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScrollableTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "RemoveScrollableTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveScrollableTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "InvalidateScrollableTracksOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateScrollableTracksOrder()"
  },
  {
    "label": "AddForegroundTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForegroundTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "RemoveForegroundTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveForegroundTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrack(TSharedPtr<FBaseTimingTrack> Track, ETimingTrackLocation Location)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTrack(TSharedPtr<FBaseTimingTrack> Track)"
  },
  {
    "label": "FindTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBaseTimingTrack>)",
    "insertText": "FindTrack(uint64 InTrackId)"
  },
  {
    "label": "GetTimeMarker()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTimeMarker()"
  },
  {
    "label": "SetTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeMarker(double InTimeMarker)"
  },
  {
    "label": "SetAndCenterOnTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAndCenterOnTimeMarker(double InTimeMarker)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (FSelectionChangedDelegate&)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "OnTimeMarkerChanged()",
    "kind": "Method",
    "detail": "Function (FTimeMarkerChangedDelegate&)",
    "insertText": "OnTimeMarkerChanged()"
  },
  {
    "label": "OnCustomTimeMarkerChanged()",
    "kind": "Method",
    "detail": "Function (FCustomTimeMarkerChangedDelegate&)",
    "insertText": "OnCustomTimeMarkerChanged()"
  },
  {
    "label": "OnHoveredTrackChanged()",
    "kind": "Method",
    "detail": "Function (FHoveredTrackChangedDelegate&)",
    "insertText": "OnHoveredTrackChanged()"
  },
  {
    "label": "OnHoveredEventChanged()",
    "kind": "Method",
    "detail": "Function (FHoveredEventChangedDelegate&)",
    "insertText": "OnHoveredEventChanged()"
  },
  {
    "label": "OnSelectedTrackChanged()",
    "kind": "Method",
    "detail": "Function (FSelectedTrackChangedDelegate&)",
    "insertText": "OnSelectedTrackChanged()"
  },
  {
    "label": "OnSelectedEventChanged()",
    "kind": "Method",
    "detail": "Function (FSelectedEventChangedDelegate&)",
    "insertText": "OnSelectedEventChanged()"
  },
  {
    "label": "OnTrackVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (FTrackVisibilityChangedDelegate&)",
    "insertText": "OnTrackVisibilityChanged()"
  },
  {
    "label": "OnTrackAdded()",
    "kind": "Method",
    "detail": "Function (FTrackAddedDelegate&)",
    "insertText": "OnTrackAdded()"
  },
  {
    "label": "OnTrackRemoved()",
    "kind": "Method",
    "detail": "Function (FTrackRemovedDelegate&)",
    "insertText": "OnTrackRemoved()"
  },
  {
    "label": "ResetSelectedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSelectedEvent()"
  },
  {
    "label": "ResetEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEventFilter()"
  },
  {
    "label": "PreventThrottling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreventThrottling()"
  },
  {
    "label": "AddOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOverlayWidget(const TSharedRef<SWidget>& InWidget)"
  }
]