[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UDataStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataStream"
  },
  {
    "label": "FNetExports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExports"
  },
  {
    "label": "FDataStreamManagerInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataStreamManagerInitParams"
  },
  {
    "label": "UDataStreamManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataStreamManager"
  },
  {
    "label": "FImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImpl"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" DataStream . h \" # include \" Templates / PimplPtr . h \" # include \" DataStreamManager . generated . h \" enum class EDataStreamSendStatus : uint8 ; class UDataStream ; enum class ECreateDataStreamResult : uint8 { Success,Error_Duplicate,Error_MissingDefinition,Error_InvalidDefinition,Error_TooManyStreams,} ; namespace UE::Net::Private { class FNetExports ; } struct FDataStreamManagerInitParams { uint32 PacketWindowSize = 0 ; } ;)",
    "insertText": "UCLASS(transient, MinimalApi)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: IRISCORE_API virtual ~UDataStreamManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FDataStreamManagerInitParams& InitParams)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "BeginWrite()",
    "kind": "Method",
    "detail": "Function (EWriteResult)",
    "insertText": "BeginWrite(const FBeginWriteParameters& Params)"
  },
  {
    "label": "WriteData()",
    "kind": "Method",
    "detail": "Function (EWriteResult)",
    "insertText": "WriteData(UE::Net::FNetSerializationContext& context, FDataStreamRecord const*& OutRecord)"
  },
  {
    "label": "EndWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWrite()"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadData(UE::Net::FNetSerializationContext& context)"
  },
  {
    "label": "ProcessPacketDeliveryStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPacketDeliveryStatus(UE::Net::EPacketDeliveryStatus Status, FDataStreamRecord const* Record)"
  },
  {
    "label": "HasAcknowledgedAllReliableData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAcknowledgedAllReliableData()"
  },
  {
    "label": "CreateStream()",
    "kind": "Method",
    "detail": "Function (ECreateDataStreamResult)",
    "insertText": "CreateStream(const FName StreamName)"
  },
  {
    "label": "GetStream()",
    "kind": "Method",
    "detail": "Function (const UDataStream*)",
    "insertText": "GetStream(const FName StreamName)"
  },
  {
    "label": "SetSendStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendStatus(const FName StreamName, EDataStreamSendStatus Status)"
  },
  {
    "label": "GetSendStatus()",
    "kind": "Method",
    "detail": "Function (EDataStreamSendStatus)",
    "insertText": "GetSendStatus(const FName StreamName)"
  },
  {
    "label": "GetNetExports()",
    "kind": "Method",
    "detail": "Function (UE::Net::Private::FNetExports&)",
    "insertText": "GetNetExports()"
  },
  {
    "label": "UDataStreamManager()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UDataStreamManager()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* Object, FReferenceCollector& Collector)"
  }
]