[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FMeshNormals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshNormals"
  },
  {
    "label": "SetCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCount(int Count, bool bClearToZero)"
  },
  {
    "label": "SetDegenerateTriangleNormalsToNeighborNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDegenerateTriangleNormalsToNeighborNormal()"
  },
  {
    "label": "QuickComputeVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuickComputeVertexNormals(FDynamicMesh3& Mesh, bool bInvert = false)"
  },
  {
    "label": "SmoothVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothVertexNormals(FDynamicMesh3& Mesh, int32 SmoothingRounds, double SmoothingAlpha)"
  },
  {
    "label": "QuickComputeVertexNormalsForTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuickComputeVertexNormalsForTriangles(FDynamicMesh3& Mesh, const TArray<int32>& Triangles, bool bWeightByArea = true, bool bWeightByAngle = true, bool bInvert = false)"
  },
  {
    "label": "ComputeVertexNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "ComputeVertexNormal(const FDynamicMesh3& Mesh, int VertIdx, bool bWeightByArea = true, bool bWeightByAngle = true)"
  },
  {
    "label": "ComputeOverlayNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "ComputeOverlayNormal(const FDynamicMesh3& Mesh, const FDynamicMeshNormalOverlay* NormalOverlay, int ElemIdx, bool bWeightByArea = true, bool bWeightByAngle = true)"
  },
  {
    "label": "InitializeOverlayToPerVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOverlayToPerVertexNormals(FDynamicMeshNormalOverlay* NormalOverlay, bool bUseMeshVertexNormalsIfAvailable = true)"
  },
  {
    "label": "InitializeOverlayToPerTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOverlayToPerTriangleNormals(FDynamicMeshNormalOverlay* NormalOverlay)"
  },
  {
    "label": "InitializeOverlayTopologyFromOpeningAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOverlayTopologyFromOpeningAngle(const FDynamicMesh3* Mesh, FDynamicMeshNormalOverlay* NormalOverlay, \n\t\tdouble AngleThresholdDeg)"
  },
  {
    "label": "InitializeOverlayTopologyFromFaceGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOverlayTopologyFromFaceGroups(const FDynamicMesh3* Mesh, FDynamicMeshNormalOverlay* NormalOverlay)"
  },
  {
    "label": "InitializeMeshToPerTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMeshToPerTriangleNormals(FDynamicMesh3* Mesh)"
  },
  {
    "label": "InitializeOverlayRegionToPerVertexNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOverlayRegionToPerVertexNormals(FDynamicMeshNormalOverlay* NormalOverlay, const TArray<int32>& Triangles)"
  },
  {
    "label": "QuickRecomputeOverlayNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QuickRecomputeOverlayNormals(FDynamicMesh3& Mesh, bool bInvert = false, bool bWeightByArea = true, bool bWeightByAngle = true)"
  },
  {
    "label": "RecomputeOverlayTriNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecomputeOverlayTriNormals(FDynamicMesh3& Mesh, const TArray<int32>& Triangles, bool bWeightByArea = true, bool bWeightByAngle = true)"
  },
  {
    "label": "RecomputeOverlayElementNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecomputeOverlayElementNormals(FDynamicMesh3& Mesh, const TArray<int32>& ElementIDs, bool bWeightByArea = true, bool bWeightByAngle = true)"
  },
  {
    "label": "GetVertexWeightsOnTriangle()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetVertexWeightsOnTriangle(const FDynamicMesh3* Mesh, int TriID, double TriArea, bool bWeightByArea, bool bWeightByAngle)"
  },
  {
    "label": "Compute_FaceAvg_AreaWeighted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute_FaceAvg_AreaWeighted()"
  },
  {
    "label": "Compute_FaceAvg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute_FaceAvg(bool bWeightByArea, bool bWeightByAngle)"
  },
  {
    "label": "Compute_Triangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute_Triangle()"
  },
  {
    "label": "Compute_Overlay_FaceAvg_AreaWeighted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute_Overlay_FaceAvg_AreaWeighted(const FDynamicMeshNormalOverlay* NormalOverlay)"
  },
  {
    "label": "Compute_Overlay_FaceAvg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute_Overlay_FaceAvg(const FDynamicMeshNormalOverlay* NormalOverlay, bool bWeightByArea, bool bWeightByAngle)"
  }
]