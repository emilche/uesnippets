[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintGeneratedClass"
  },
  {
    "label": "UK2Node_FunctionEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_FunctionEntry"
  },
  {
    "label": "FNetNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetNameMapping"
  },
  {
    "label": "ETerminalSpecification",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETerminalSpecification"
  },
  {
    "label": "FKismetFunctionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKismetFunctionContext"
  },
  {
    "label": "FKismetFunctionContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" UObject / Class . h \" # include \" EdGraphSchema_K2 . h \" # include \" BPTerminal . h \" # include \" BlueprintCompiledStatement . h \" # include \" Kismet2 / CompilerResultsLog . h \" # include \" KismetCastingUtils . h \" class Error ; class UBlueprint ; class UBlueprintGeneratedClass ; class UK2Node_FunctionEntry ; struct FNetNameMapping ; namespace KismetCompilerDebugOptions { enum { DebuggingCompiler = 1 } ; enum { EmitNodeComments = DebuggingCompiler } ; } enum ETerminalSpecification { TS_Unspecified,TS_Literal,TS_ForcedShared,} ; struct FKismetFunctionContext { public : UBlueprint* Blueprint ; UEdGraph* SourceGraph ; UK2Node_FunctionEntry* EntryPoint ; UFunction* Function ; UBlueprintGeneratedClass* NewClass ; FField** LastFunctionPropertyStorageLocation ; TArray<UEdGraphNode*> LinearExecutionList ; FCompilerResultsLog& MessageLog ; const UEdGraphSchema_K2* Schema ; TArray<FBlueprintCompiledStatement*> AllGeneratedStatements ; TMap<UEdGraphNode*,TArray<FBlueprintCompiledStatement*>> StatementsPerNode ; TMap<FBlueprintCompiledStatement*,UEdGraphPin*> GotoFixupRequestMap ; TIndirectArray<FBPTerminal> Parameters ; TIndirectArray<FBPTerminal> Results ; TIndirectArray<FBPTerminal> VariableReferences ; TIndirectArray<FBPTerminal> PersistentFrameVariableReferences ; TIndirectArray<FBPTerminal> Literals ; TIndirectArray<FBPTerminal> Locals ; TIndirectArray<FBPTerminal> EventGraphLocals ; TIndirectArray<FBPTerminal> LevelActorReferences ; TIndirectArray<FBPTerminal> InlineGeneratedValues ; TMap<UEdGraphPin*,FBPTerminal*> NetMap ; TMap<UEdGraphPin*,FBPTerminal*> LiteralHackMap ; TMap<UEdGraphPin*,UE::KismetCompiler::CastingUtils::FImplicitCastParams> ImplicitCastMap ; bool bIsUbergraph ; bool bCannotBeCalledFromOtherKismet ; bool bIsInterfaceStub ; bool bIsConstFunction ; bool bEnforceConstCorrectness ; bool bCreateDebugData ; bool bIsSimpleStubGraphWithNoParams ; uint32 NetFlags ; FName DelegateSignatureName ; UEdGraphNode* SourceEventFromStubGraph ; struct FNetNameMapping* NetNameMap ; bool bAllocatedNetNameMap ; bool bUseFlowStack ; public :)",
    "insertText": "FKismetFunctionContext(FCompilerResultsLog& InMessageLog, const UEdGraphSchema_K2* InSchema, UBlueprintGeneratedClass* InNewClass, UBlueprint* InBlueprint)"
  },
  {
    "label": "FKismetFunctionContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FKismetFunctionContext()"
  },
  {
    "label": "SetExternalNetNameMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalNetNameMap(FNetNameMapping* NewMap)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsEventGraph()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEventGraph()"
  },
  {
    "label": "MarkAsInternalOrCppUseOnly()",
    "kind": "Method",
    "detail": "Function (bIsUbergraph = true ; } void)",
    "insertText": "MarkAsInternalOrCppUseOnly()"
  },
  {
    "label": "CanBeCalledByKismet()",
    "kind": "Method",
    "detail": "Function (bCannotBeCalledFromOtherKismet = true ; } bool)",
    "insertText": "CanBeCalledByKismet()"
  },
  {
    "label": "MarkAsConstFunction()",
    "kind": "Method",
    "detail": "Function (bIsInterfaceStub = true ; } void)",
    "insertText": "MarkAsConstFunction(bool bInEnforceConstCorrectness)"
  },
  {
    "label": "IsInterfaceStub()",
    "kind": "Method",
    "detail": "Function (bIsConstFunction = true ; bEnforceConstCorrectness = bInEnforceConstCorrectness ; } bool)",
    "insertText": "IsInterfaceStub()"
  },
  {
    "label": "IsDelegateSignature()",
    "kind": "Method",
    "detail": "Function (DelegateSignatureName = InName ; } bool)",
    "insertText": "IsDelegateSignature()"
  },
  {
    "label": "IsConstFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConstFunction()"
  },
  {
    "label": "InFunctionFlags()",
    "kind": "Method",
    "detail": "Function (NetFlags =)",
    "insertText": "InFunctionFlags(FUNC_NetFuncFlags)"
  },
  {
    "label": "IsDebuggingOrInstrumentationRequired()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDebuggingOrInstrumentationRequired()"
  },
  {
    "label": "FBPTerminal()",
    "kind": "Method",
    "detail": "Function (FBPTerminal* Term = new)",
    "insertText": "FBPTerminal()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Literals .)",
    "insertText": "Add(Term)"
  },
  {
    "label": "CopyFromPin()",
    "kind": "Method",
    "detail": "Function (Term ->)",
    "insertText": "CopyFromPin(Net, Net->DefaultValue)"
  },
  {
    "label": "GetScopeFromPinType()",
    "kind": "Method",
    "detail": "Function (Term -> ObjectLiteral = Net -> DefaultObject ; Term -> TextLiteral = Net -> DefaultTextValue ; Term -> bIsLiteral = true ; return Term ; } UStruct*)",
    "insertText": "GetScopeFromPinType(FEdGraphPinType& Type, UClass* SelfClass)"
  },
  {
    "label": "SubType()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "SubType(Type.PinSubCategory == UEdGraphSchema_K2::PSC_Self) ? SelfClass : Cast<UClass>(Type.PinSubCategoryObject.Get())"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct* SubType = Cast<)",
    "insertText": "UScriptStruct(Type.PinSubCategoryObject.Get())"
  },
  {
    "label": "FBlueprintCompiledStatement()",
    "kind": "Method",
    "detail": "Function (FBlueprintCompiledStatement* Result = new)",
    "insertText": "FBlueprintCompiledStatement()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllGeneratedStatements .)",
    "insertText": "Add(Result)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TArray<FBlueprintCompiledStatement*>& StatementList = StatementsPerNode .)",
    "insertText": "FindOrAdd(Node)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (StatementList .)",
    "insertText": "Insert(Result, 0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TArray<FBlueprintCompiledStatement*>* SourceStatementList = StatementsPerNode .)",
    "insertText": "Find(Source)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TMap<FBlueprintCompiledStatement*,int32> JumpTargetIndexTable ; TArray<FBlueprintCompiledStatement*>& TargetStatementList = StatementsPerNode .)",
    "insertText": "FindOrAdd(Destination)"
  },
  {
    "label": "InsertUninitialized()",
    "kind": "Method",
    "detail": "Function (TargetStatementList .)",
    "insertText": "InsertUninitialized(0, SourceStatementList->Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllGeneratedStatements .)",
    "insertText": "Add(CopiedStatement)"
  },
  {
    "label": "CopiedStatement()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "CopiedStatement((*SourceStatementList)[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TargetStatementList [ i ] = CopiedStatement ;)",
    "insertText": "if(CopiedStatement->bIsJumpTarget)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (JumpTargetIndexTable .)",
    "insertText": "Add((*SourceStatementList)[i], i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 i = 0; i < TargetStatementList.Num(); i++)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FBlueprintCompiledStatement* Statement = TargetStatementList [ i ] ; int32* JumpTargetIdx = JumpTargetIndexTable .)",
    "insertText": "Find(Statement->TargetLabel)"
  },
  {
    "label": "DidNodeGenerateCode()",
    "kind": "Method",
    "detail": "Function (Statement -> TargetLabel = TargetStatementList [* JumpTargetIdx ] ; } } } else { } } bool)",
    "insertText": "DidNodeGenerateCode(UEdGraphNode* Node)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TArray<FBlueprintCompiledStatement*>* SourceStatementList = StatementsPerNode .)",
    "insertText": "Find(Node)"
  },
  {
    "label": "MergeAdjacentStates()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "MergeAdjacentStates()"
  },
  {
    "label": "FinalSortLinearExecList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalSortLinearExecList()"
  },
  {
    "label": "ResolveGotoFixups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveGotoFixups()"
  },
  {
    "label": "DoesStatementRequiresFlowStack()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "DoesStatementRequiresFlowStack(const FBlueprintCompiledStatement* Statement)"
  },
  {
    "label": "ResolveStatements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveStatements()"
  },
  {
    "label": "InsertWireTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertWireTrace(FBlueprintCompiledStatement* GotoStatement, UEdGraphPin* AssociatedExecPin)"
  },
  {
    "label": "GetOwningNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode* PreJumpNode = AssociatedExecPin ->)",
    "insertText": "GetOwningNode()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TArray<FBlueprintCompiledStatement*>* NodeStatementList = StatementsPerNode .)",
    "insertText": "Find(PreJumpNode)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 GotoIndex = NodeStatementList ->)",
    "insertText": "Find(GotoStatement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FBlueprintCompiledStatement* PrevStatement = NULL ;)",
    "insertText": "if(GotoIndex > 0)"
  },
  {
    "label": "PrevStatement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrevStatement(*NodeStatementList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((PrevStatement != NULL) && PrevStatement->Type == GetWireTraceType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PrevStatement -> ExecContext = AssociatedExecPin ; } else)",
    "insertText": "if(PrevStatement != NULL)"
  },
  {
    "label": "GetWireTraceType()",
    "kind": "Method",
    "detail": "Function (TraceStatement -> Type =)",
    "insertText": "GetWireTraceType()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (NodeComment)",
    "insertText": "IsEmpty() ? PreJumpNode->GetName()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (TraceStatement -> ExecContext = AssociatedExecPin ; NodeStatementList ->)",
    "insertText": "Insert(TraceStatement, GotoIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllGeneratedStatements .)",
    "insertText": "Add(TraceStatement)"
  },
  {
    "label": "FindRequiredPinByName()",
    "kind": "Method",
    "detail": "Function (} } } } } UEdGraphPin*)",
    "insertText": "FindRequiredPinByName(const UEdGraphNode* Node, const FName PinName, EEdGraphPinDirection RequiredDirection = EGPD_MAX)"
  },
  {
    "label": "CreateLocalTerminal()",
    "kind": "Method",
    "detail": "Function (FBPTerminal*)",
    "insertText": "CreateLocalTerminal(ETerminalSpecification Spec = ETerminalSpecification::TS_Unspecified)"
  }
]