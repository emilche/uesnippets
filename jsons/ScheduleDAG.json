[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "MachineConstantPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineConstantPool"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MCSchedClassDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCSchedClassDesc"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "ScheduleDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAG"
  },
  {
    "label": "SDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDNode"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "MCInstrDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrDesc"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "Graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Graph"
  },
  {
    "label": "GraphWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphWriter"
  },
  {
    "label": "SDep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDep"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "OrderKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OrderKind"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "SchedulingPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedulingPriorityQueue"
  },
  {
    "label": "SUnitIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnitIterator"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "ScheduleDAGTopologicalSort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGTopologicalSort"
  },
  {
    "label": "SDep()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SCHEDULEDAG_H # define LLVM_CODEGEN_SCHEDULEDAG_H # include \" llvm / ADT / BitVector . h \" # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / CodeGen / MachineInstr . h \" # include \" llvm / Target / TargetLowering . h \" namespace llvm { class AliasAnalysis ; class SUnit ; class MachineConstantPool ; class MachineFunction ; class MachineRegisterInfo ; class MachineInstr ; struct MCSchedClassDesc ; class TargetRegisterInfo ; class ScheduleDAG ; class SDNode ; class TargetInstrInfo ; class MCInstrDesc ; class TargetMachine ; class TargetRegisterClass ; template<class Graph> class GraphWriter ; class SDep { public : enum Kind { Data,Anti,Output,Order } ; enum OrderKind { Barrier,MayAliasMem,MustAliasMem,Artificial,Weak,Cluster } ; private : PointerIntPair<SUnit*,2,Kind> Dep ; union { unsigned Reg ; unsigned OrdKind ; } Contents ; unsigned Latency ; public :)",
    "insertText": "SDep() : Dep(nullptr, Data)"
  },
  {
    "label": "SDep()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SDep(SUnit *S, Kind kind, unsigned Reg) : Dep(S, kind), Contents()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Reg given for non-register dependence!\")"
  },
  {
    "label": "SDep()",
    "kind": "Method",
    "detail": "Function (Contents . Reg = Reg ; Latency = 0 ; break ; case Data : Contents . Reg = Reg ; Latency = 1 ; break ; } })",
    "insertText": "SDep(SUnit *S, OrderKind kind) : Dep(S, Order), Contents(), Latency(0)"
  },
  {
    "label": "overlaps()",
    "kind": "Method",
    "detail": "Function (Contents . OrdKind = kind ; } bool)",
    "insertText": "overlaps(const SDep &Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const SDep &Other)"
  },
  {
    "label": "getLatency()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getLatency()"
  },
  {
    "label": "getSUnit()",
    "kind": "Method",
    "detail": "Function (Latency = Lat ; } SUnit*)",
    "insertText": "getSUnit()"
  },
  {
    "label": "setSUnit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSUnit(SUnit *SU)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (Dep .)",
    "insertText": "setPointer(SU)"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} Kind)",
    "insertText": "getKind()"
  },
  {
    "label": "isCtrl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCtrl()"
  },
  {
    "label": "isNormalMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNormalMemory()"
  },
  {
    "label": "isBarrier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBarrier()"
  },
  {
    "label": "isNormalMemoryOrBarrier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNormalMemoryOrBarrier()"
  },
  {
    "label": "isMustAlias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMustAlias()"
  },
  {
    "label": "isWeak()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWeak()"
  },
  {
    "label": "isArtificial()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isArtificial()"
  },
  {
    "label": "isCluster()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCluster()"
  },
  {
    "label": "isAssignedRegDep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAssignedRegDep()"
  },
  {
    "label": "getReg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getReg()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getKind() == Data || getKind() == Anti || getKind() == Output) && \"getReg called on non-register dependence edge!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getKind() == Data || getKind() == Anti || getKind() == Output) && \"setReg called on non-register dependence edge!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getKind() != Anti || Reg != 0) && \"SDep::Anti edge cannot use the zero register!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getKind() != Output || Reg != 0) && \"SDep::Output edge cannot use the zero register!\")"
  },
  {
    "label": "SUnit()",
    "kind": "Method",
    "detail": "Function (Contents . Reg = Reg ; } } ; template<> struct isPodLike<SDep> { const bool value = true ; } ; class SUnit { private : enum : unsigned { BoundaryID = ~ 0 u } ; SDNode* Node ; MachineInstr* Instr ; public : SUnit* OrigNode ; const MCSchedClassDesc* SchedClass ; SmallVector<SDep,4> Preds ; SmallVector<SDep,4> Succs ; typedef SmallVectorImpl<SDep>::iterator pred_iterator ; typedef SmallVectorImpl<SDep>::iterator succ_iterator ; typedef SmallVectorImpl<SDep>::const_iterator const_pred_iterator ; typedef SmallVectorImpl<SDep>::const_iterator const_succ_iterator ; unsigned NodeNum ; unsigned NodeQueueId ; unsigned NumPreds ; unsigned NumSuccs ; unsigned NumPredsLeft ; unsigned NumSuccsLeft ; unsigned WeakPredsLeft ; unsigned WeakSuccsLeft ; unsigned short NumRegDefsLeft ; unsigned short Latency ; bool isVRegCycle : 1 ; bool isCall : 1 ; bool isCallOp : 1 ; bool isTwoAddress : 1 ; bool isCommutable : 1 ; bool hasPhysRegUses : 1 ; bool hasPhysRegDefs : 1 ; bool hasPhysRegClobbers : 1 ; bool isPending : 1 ; bool isAvailable : 1 ; bool isScheduled : 1 ; bool isScheduleHigh : 1 ; bool isScheduleLow : 1 ; bool isCloned : 1 ; bool isUnbuffered : 1 ; bool hasReservedResource : 1 ; Sched::Preference SchedulingPref ; private : bool isDepthCurrent : 1 ; bool isHeightCurrent : 1 ; unsigned Depth ; unsigned Height ; public : unsigned TopReadyCycle ; unsigned BotReadyCycle ; const TargetRegisterClass* CopyDstRC ; const TargetRegisterClass* CopySrcRC ;)",
    "insertText": "SUnit(SDNode *node, unsigned nodenum) : Node(node), Instr(nullptr), OrigNode(nullptr), SchedClass(nullptr), NodeNum(nodenum), NodeQueueId(0), NumPreds(0), NumSuccs(0), NumPredsLeft(0), NumSuccsLeft(0), WeakPredsLeft(0), WeakSuccsLeft(0), NumRegDefsLeft(0), Latency(0), isVRegCycle(false), isCall(false), isCallOp(false), isTwoAddress(false), isCommutable(false), hasPhysRegUses(false), hasPhysRegDefs(false), hasPhysRegClobbers(false), isPending(false), isAvailable(false), isScheduled(false), isScheduleHigh(false), isScheduleLow(false), isCloned(false), isUnbuffered(false), hasReservedResource(false), SchedulingPref(Sched::None), isDepthCurrent(false), isHeightCurrent(false), Depth(0), Height(0), TopReadyCycle(0), BotReadyCycle(0), CopyDstRC(nullptr), CopySrcRC(nullptr)"
  },
  {
    "label": "SUnit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SUnit(MachineInstr *instr, unsigned nodenum) : Node(nullptr), Instr(instr), OrigNode(nullptr), SchedClass(nullptr), NodeNum(nodenum), NodeQueueId(0), NumPreds(0), NumSuccs(0), NumPredsLeft(0), NumSuccsLeft(0), WeakPredsLeft(0), WeakSuccsLeft(0), NumRegDefsLeft(0), Latency(0), isVRegCycle(false), isCall(false), isCallOp(false), isTwoAddress(false), isCommutable(false), hasPhysRegUses(false), hasPhysRegDefs(false), hasPhysRegClobbers(false), isPending(false), isAvailable(false), isScheduled(false), isScheduleHigh(false), isScheduleLow(false), isCloned(false), isUnbuffered(false), hasReservedResource(false), SchedulingPref(Sched::None), isDepthCurrent(false), isHeightCurrent(false), Depth(0), Height(0), TopReadyCycle(0), BotReadyCycle(0), CopyDstRC(nullptr), CopySrcRC(nullptr)"
  },
  {
    "label": "SUnit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SUnit() : Node(nullptr), Instr(nullptr), OrigNode(nullptr), SchedClass(nullptr), NodeNum(BoundaryID), NodeQueueId(0), NumPreds(0), NumSuccs(0), NumPredsLeft(0), NumSuccsLeft(0), WeakPredsLeft(0), WeakSuccsLeft(0), NumRegDefsLeft(0), Latency(0), isVRegCycle(false), isCall(false), isCallOp(false), isTwoAddress(false), isCommutable(false), hasPhysRegUses(false), hasPhysRegDefs(false), hasPhysRegClobbers(false), isPending(false), isAvailable(false), isScheduled(false), isScheduleHigh(false), isScheduleLow(false), isCloned(false), isUnbuffered(false), hasReservedResource(false), SchedulingPref(Sched::None), isDepthCurrent(false), isHeightCurrent(false), Depth(0), Height(0), TopReadyCycle(0), BotReadyCycle(0), CopyDstRC(nullptr), CopySrcRC(nullptr)"
  },
  {
    "label": "isBoundaryNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBoundaryNode()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Instr && \"Setting SDNode of SUnit with MachineInstr!\")"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (Node = N ; } SDNode*)",
    "insertText": "getNode()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Instr && \"Reading SDNode of SUnit with MachineInstr!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Node && \"Setting MachineInstr of SUnit with SDNode!\")"
  },
  {
    "label": "getInstr()",
    "kind": "Method",
    "detail": "Function (Instr = MI ; } MachineInstr*)",
    "insertText": "getInstr()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Node && \"Reading MachineInstr of SUnit with SDNode!\")"
  },
  {
    "label": "removePred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removePred(const SDep &D)"
  },
  {
    "label": "getDepth()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getDepth()"
  },
  {
    "label": "setHeightToAtLeast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHeightToAtLeast(unsigned NewHeight)"
  },
  {
    "label": "setDepthDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDepthDirty()"
  },
  {
    "label": "setHeightDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHeightDirty()"
  },
  {
    "label": "isPred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPred(SUnit *N)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(const ScheduleDAG *G)"
  },
  {
    "label": "dumpAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpAll(const ScheduleDAG *G)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &O, const ScheduleDAG *G)"
  },
  {
    "label": "ComputeDepth()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ComputeDepth()"
  },
  {
    "label": "ComputeHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHeight()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} ; class SchedulingPriorityQueue { void)",
    "insertText": "anchor()"
  },
  {
    "label": "SchedulingPriorityQueue()",
    "kind": "Method",
    "detail": "Function (unsigned CurCycle ; bool HasReadyFilter ; public :)",
    "insertText": "SchedulingPriorityQueue(bool rf = false): CurCycle(0), HasReadyFilter(rf)"
  },
  {
    "label": "SchedulingPriorityQueue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SchedulingPriorityQueue()"
  },
  {
    "label": "isBottomUp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBottomUp()"
  },
  {
    "label": "initNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initNodes(std::vector<SUnit> &SUnits)"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNode(const SUnit *SU)"
  },
  {
    "label": "updateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateNode(const SUnit *SU)"
  },
  {
    "label": "releaseState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseState()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "hasReadyFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasReadyFilter()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!HasReadyFilter && \"The ready filter must override isReady()\")"
  },
  {
    "label": "push_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_all(const std::vector<SUnit *> &Nodes)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} SUnit*)",
    "insertText": "pop()"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(SUnit *SU)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(ScheduleDAG *)"
  },
  {
    "label": "scheduledNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "scheduledNode(SUnit *)"
  },
  {
    "label": "unscheduledNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "unscheduledNode(SUnit *)"
  },
  {
    "label": "setCurCycle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCurCycle(unsigned Cycle)"
  },
  {
    "label": "getCurCycle()",
    "kind": "Method",
    "detail": "Function (CurCycle = Cycle ; } unsigned)",
    "insertText": "getCurCycle()"
  },
  {
    "label": "ScheduleDAG()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScheduleDAG()"
  },
  {
    "label": "clearDAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearDAG()"
  },
  {
    "label": "getInstrDesc()",
    "kind": "Method",
    "detail": "Function (const MCInstrDesc*)",
    "insertText": "getInstrDesc(const SUnit *SU)"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "viewGraph(const Twine &Name, const Twine &Title)"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewGraph()"
  },
  {
    "label": "dumpNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpNode(const SUnit *SU)"
  },
  {
    "label": "getGraphNodeLabel()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getGraphNodeLabel(const SUnit *SU)"
  },
  {
    "label": "getDAGName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getDAGName()"
  },
  {
    "label": "addCustomGraphFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCustomGraphFeatures(GraphWriter<ScheduleDAG*> &)"
  },
  {
    "label": "VerifyScheduledDAG()",
    "kind": "Method",
    "detail": "Function (} # ifndef NDEBUG unsigned)",
    "insertText": "VerifyScheduledDAG(bool isBottomUp)"
  },
  {
    "label": "getNodeDesc()",
    "kind": "Method",
    "detail": "Function (# endif private : const MCInstrDesc*)",
    "insertText": "getNodeDesc(const SDNode *Node)"
  },
  {
    "label": "SUnitIterator()",
    "kind": "Method",
    "detail": "Function (} ; class SUnitIterator { SUnit* Node ; unsigned Operand ;)",
    "insertText": "SUnitIterator(SUnit *N, unsigned Op) : Node(N), Operand(Op)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : using iterator_category = std::forward_iterator_tag ; using value_type = SUnit ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; bool)",
    "insertText": "operator(const SUnitIterator& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Operand ; return* this ; } SUnitIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (SUnitIterator tmp =* this ; + +* this ; return tmp ; } SUnitIterator)",
    "insertText": "begin(SUnit *N)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} SUnitIterator)",
    "insertText": "end(SUnit *N)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getOperand()"
  },
  {
    "label": "isArtificialDep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isArtificialDep()"
  },
  {
    "label": "getSDep()",
    "kind": "Method",
    "detail": "Function (} const SDep&)",
    "insertText": "getSDep()"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<ScheduleDAG*> : public GraphTraits<SUnit*> { typedef std::vector<SUnit>::iterator nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(ScheduleDAG *G)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(ScheduleDAG *G)"
  },
  {
    "label": "DFS()",
    "kind": "Method",
    "detail": "Function (} } ; class ScheduleDAGTopologicalSort { std::vector<SUnit>& SUnits ; SUnit* ExitSU ; std::vector<int> Index2Node ; std::vector<int> Node2Index ; BitVector Visited ; void)",
    "insertText": "DFS(const SUnit *SU, int UpperBound, bool& HasLoop)"
  },
  {
    "label": "Shift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shift(BitVector& Visited, int LowerBound, int UpperBound)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(int n, int index)"
  },
  {
    "label": "ScheduleDAGTopologicalSort()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScheduleDAGTopologicalSort(std::vector<SUnit> &SUnits, SUnit *ExitSU)"
  },
  {
    "label": "InitDAGTopologicalSorting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDAGTopologicalSorting()"
  },
  {
    "label": "IsReachable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReachable(const SUnit *SU, const SUnit *TargetSU)"
  },
  {
    "label": "WillCreateCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillCreateCycle(SUnit *TargetSU, SUnit *SU)"
  },
  {
    "label": "AddPred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPred(SUnit *Y, SUnit *X)"
  },
  {
    "label": "RemovePred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePred(SUnit *M, SUnit *N)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<int>::iterator iterator ; typedef std::vector<int>::const_iterator const_iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} typedef std::vector<int>::reverse_iterator reverse_iterator ; typedef std::vector<int>::const_reverse_iterator const_reverse_iterator ; reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  }
]