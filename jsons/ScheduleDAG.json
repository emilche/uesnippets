[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "MachineConstantPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineConstantPool"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MCSchedClassDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCSchedClassDesc"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "ScheduleDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAG"
  },
  {
    "label": "SDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDNode"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "MCInstrDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrDesc"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "Graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Graph"
  },
  {
    "label": "GraphWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphWriter"
  },
  {
    "label": "SDep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDep"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "OrderKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OrderKind"
  },
  {
    "label": "OrderKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OrderKind"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "SchedulingPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedulingPriorityQueue"
  },
  {
    "label": "ScheduleDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAG"
  },
  {
    "label": "SUnitIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnitIterator"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "ScheduleDAGTopologicalSort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGTopologicalSort"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"Reg given for non-register dependence!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Output:)",
    "insertText": "assert(Reg != 0 &&\n               \"SDep::Anti and SDep::Output must use a non-zero Reg!\")"
  },
  {
    "label": "addPred()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addPred(const SDep &D, bool Required = true)"
  },
  {
    "label": "removePred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removePred(const SDep &D)"
  },
  {
    "label": "setDepthToAtLeast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDepthToAtLeast(unsigned NewDepth)"
  },
  {
    "label": "setHeightToAtLeast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHeightToAtLeast(unsigned NewHeight)"
  },
  {
    "label": "setDepthDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDepthDirty()"
  },
  {
    "label": "setHeightDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHeightDirty()"
  },
  {
    "label": "biasCriticalPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "biasCriticalPath()"
  },
  {
    "label": "ComputeDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDepth()"
  },
  {
    "label": "ComputeHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHeight()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  },
  {
    "label": "ScheduleDAG()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScheduleDAG(MachineFunction &mf)"
  },
  {
    "label": "clearDAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearDAG()"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewGraph(const Twine &Name, const Twine &Title)"
  },
  {
    "label": "viewGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "viewGraph()"
  },
  {
    "label": "VerifyScheduledDAG()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "VerifyScheduledDAG(bool isBottomUp)"
  },
  {
    "label": "SUnitIterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SUnitIterator(N, 0)"
  },
  {
    "label": "DFS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DFS(const SUnit *SU, int UpperBound, bool& HasLoop)"
  },
  {
    "label": "Shift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shift(BitVector& Visited, int LowerBound, int UpperBound)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(int n, int index)"
  },
  {
    "label": "ScheduleDAGTopologicalSort()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScheduleDAGTopologicalSort(std::vector<SUnit> &SUnits, SUnit *ExitSU)"
  },
  {
    "label": "InitDAGTopologicalSorting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDAGTopologicalSorting()"
  },
  {
    "label": "IsReachable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReachable(const SUnit *SU, const SUnit *TargetSU)"
  },
  {
    "label": "WillCreateCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillCreateCycle(SUnit *TargetSU, SUnit *SU)"
  },
  {
    "label": "AddPred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPred(SUnit *Y, SUnit *X)"
  },
  {
    "label": "RemovePred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePred(SUnit *M, SUnit *N)"
  }
]