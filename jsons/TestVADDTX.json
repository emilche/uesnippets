[
  {
    "label": "MonitoringAudioPacketizationCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonitoringAudioPacketizationCallback"
  },
  {
    "label": "TestVadDtx",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestVadDtx"
  },
  {
    "label": "TestWebRtcVadDtx",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestWebRtcVadDtx"
  },
  {
    "label": "TestOpusDtx",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestOpusDtx"
  },
  {
    "label": "MonitoringAudioPacketizationCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_TEST_TESTVADDTX_H_ # define MODULES_AUDIO_CODING_TEST_TESTVADDTX_H_ # include<memory> # include \" absl / strings / string_view . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" common_audio / vad / include / vad . h \" # include \" modules / audio_coding / include / audio_coding_module . h \" # include \" modules / audio_coding / include / audio_coding_module_typedefs . h \" # include \" modules / audio_coding / test / Channel . h \" namespace webrtc { class MonitoringAudioPacketizationCallback : public AudioPacketizationCallback { public :)",
    "insertText": "MonitoringAudioPacketizationCallback(AudioPacketizationCallback* next)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendData(AudioFrameType frame_type, uint8_t payload_type, uint32_t timestamp, const uint8_t* payload_data, size_t payload_len_bytes, int64_t absolute_capture_timestamp_ms)"
  },
  {
    "label": "PrintStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintStatistics()"
  },
  {
    "label": "ResetStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStatistics()"
  },
  {
    "label": "GetStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStatistics(uint32_t* stats)"
  },
  {
    "label": "TestVadDtx()",
    "kind": "Method",
    "detail": "Function (private : uint32_t counter_ [ 3 ] ; AudioPacketizationCallback* const next_ ; } ; class TestVadDtx { public : const int kOutputFreqHz = 1 6 0 0 0 ;)",
    "insertText": "TestVadDtx()"
  },
  {
    "label": "RegisterCodec()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "RegisterCodec(const SdpAudioFormat& codec_format, absl::optional<Vad::Aggressiveness> vad_mode)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(absl::string_view in_filename, int frequency, int channels, absl::string_view out_filename, bool append, const int* expects)"
  },
  {
    "label": "TestWebRtcVadDtx()",
    "kind": "Method",
    "detail": "Function (const rtc::scoped_refptr<AudioEncoderFactory> encoder_factory_ ; const rtc::scoped_refptr<AudioDecoderFactory> decoder_factory_ ; std::unique_ptr<AudioCodingModule> acm_send_ ; std::unique_ptr<AudioCodingModule> acm_receive_ ; std::unique_ptr<Channel> channel_ ; std::unique_ptr<MonitoringAudioPacketizationCallback> packetization_callback_ ; uint32_t time_stamp_ = 0 x12345678 ; } ; class TestWebRtcVadDtx final : public TestVadDtx { public :)",
    "insertText": "TestWebRtcVadDtx()"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Perform()"
  },
  {
    "label": "RunTestCases()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RunTestCases(const SdpAudioFormat& codec_format)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Test(bool new_outfile, bool expect_dtx_enabled)"
  }
]