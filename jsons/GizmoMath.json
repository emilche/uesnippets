[
  {
    "label": "ProjectPointOntoLine()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BaseGizmos / GizmoInterfaces . h \" # include \" CoreMinimal . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector2D . h \" namespace GizmoMath { FVector)",
    "insertText": "ProjectPointOntoLine(const FVector& Point, const FVector& LineOrigin, const FVector& LineDirection)"
  },
  {
    "label": "NearestPointOnLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NearestPointOnLine(const FVector& LineOrigin, const FVector& LineDirection, const FVector& QueryPoint, FVector& NearestPointOut, float& LineParameterOut)"
  },
  {
    "label": "NearestPointOnLineToRay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NearestPointOnLineToRay(const FVector& LineOrigin, const FVector& LineDirection, const FVector& RayOrigin, const FVector& RayDirection, FVector& NearestLinePointOut, float& LineParameterOut, FVector& NearestRayPointOut, float& RayParameterOut)"
  },
  {
    "label": "RayPlaneIntersectionPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RayPlaneIntersectionPoint(const FVector& PlaneOrigin, const FVector& PlaneNormal, const FVector& RayOrigin, const FVector& RayDirection, bool& bIntersectsOut, FVector& PlaneIntersectionPointOut)"
  },
  {
    "label": "RaySphereIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaySphereIntersection(const FVector& SphereOrigin, const float SphereRadius, const FVector& RayOrigin, const FVector& RayDirection, bool& bIntersectsOut, FVector& SphereIntersectionPointOut)"
  },
  {
    "label": "RayCylinderIntersection()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "RayCylinderIntersection(const FVector& CylinderCenter, const FVector& CylinderAxis, RealType CylinderRadius, RealType CylinderHeight, const FVector& RayOrigin, const FVector& RayDirection, bool& bIntersectsOut, RealType& OutHitDepth)"
  },
  {
    "label": "RayConeIntersection()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "RayConeIntersection(const FVector& ConeCenter, const FVector& ConeDirection, RealType ConeCosAngle, RealType ConeHeight, const FVector& RayOrigin, const FVector& RayDirection, bool& bIntersectsOut, RealType& OutHitDepth)"
  },
  {
    "label": "IntervalIntervalIntersection()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "IntervalIntervalIntersection(const RealType Interval0[2], const RealType Interval1[2], int& OutNumIntersections, RealType& OutResult0, RealType& OutResult1)"
  },
  {
    "label": "ClosetPointOnCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosetPointOnCircle(const FVector& QueryPoint, const FVector& CircleOrigin, const FVector& CircleNormal, float CircleRadius, FVector& ClosestPointOut)"
  },
  {
    "label": "MakeNormalPlaneBasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNormalPlaneBasis(const FVector& PlaneNormal, FVector& BasisAxis1Out, FVector& BasisAxis2Out)"
  },
  {
    "label": "ComputeAngleInPlane()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeAngleInPlane(const FVector& Point, const FVector& PlaneOrigin, const FVector& PlaneNormal, const FVector& PlaneAxis1, const FVector& PlaneAxis2)"
  },
  {
    "label": "ComputeCoordinatesInPlane()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeCoordinatesInPlane(const FVector& Point, const FVector& PlaneOrigin, const FVector& PlaneNormal, const FVector& PlaneAxis1, const FVector& PlaneAxis2)"
  },
  {
    "label": "ProjectPointOntoPlane()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ProjectPointOntoPlane(const FVector& Point, const FVector& PlaneOrigin, const FVector& PlaneNormal)"
  },
  {
    "label": "SnapToIncrement()",
    "kind": "Method",
    "detail": "Function (template<RealType> RealType)",
    "insertText": "SnapToIncrement(RealType Value, RealType Increment)"
  },
  {
    "label": "GetOrthogonalVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetOrthogonalVector(const FVector& V)"
  }
]