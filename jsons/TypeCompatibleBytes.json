[
  {
    "label": "TAlignedBytes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlignedBytes"
  },
  {
    "label": "TTypeCompatibleBytes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeCompatibleBytes"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<string . h> # include<type_traits> template<int32 Size,uint32 Alignment> struct TAlignedBytes {)",
    "insertText": "alignas(Alignment)"
  },
  {
    "label": "GetTypedPtr()",
    "kind": "Method",
    "detail": "Function (} ; template<ElementType> struct TTypeCompatibleBytes { using ElementTypeAlias_NatVisHelper = ElementType ; ElementType*)",
    "insertText": "GetTypedPtr()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "alignas(ElementType) uint8 Pad[sizeof(ElementType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<ToType,FromType,std::enable_if_t<)",
    "insertText": "sizeof(ToType) == sizeof(FromType) && std::is_trivially_copyable_v<ToType> && std::is_trivially_copyable_v<FromType>>* = nullptr > inline ToType BitCast(const FromType& From)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang_analyzer__) && PLATFORM_COMPILER_SUPPORTS_BUILTIN_BITCAST return __builtin_bit_cast(ToType, From)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (# else TTypeCompatibleBytes<ToType> Result ;)",
    "insertText": "memcpy(&Result, &From, sizeof(ToType))"
  }
]