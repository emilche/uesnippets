[
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "IRepChangedPropertyTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRepChangedPropertyTracker"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FSimpleMemberReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleMemberReference"
  },
  {
    "label": "IPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPrimitiveComponent"
  },
  {
    "label": "FRegisterComponentContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisterComponentContext"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FMinimalViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalViewInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FActorComponentTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorComponentTickFunction"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickFunction"
  },
  {
    "label": "UHLODBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHLODBuilder"
  },
  {
    "label": "FMarkComponentEndOfFrameUpdateState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkComponentEndOfFrameUpdateState"
  },
  {
    "label": "FSetUCSSerializationIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetUCSSerializationIndex"
  },
  {
    "label": "FActorComponentDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorComponentDetails"
  },
  {
    "label": "FComponentReregisterContextBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentReregisterContextBase"
  },
  {
    "label": "FComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentRecreateRenderStateContext"
  },
  {
    "label": "FRegisterComponentContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" UObject / CoreNetTypes . h \" # include \" UObject / ScriptMacros . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" UObject / StructOnScope . h \" # include \" PropertyPairsMap . h \" # include \" ComponentInstanceDataCache . h \" # include \" Experimental / ConcurrentLinearAllocator . h \" # include \" Misc / TransactionallySafeRWScopeLock . h \" # include \" ActorComponent . generated . h \" struct FTypedElementHandle ; class AActor ; class IRepChangedPropertyTracker ; class UActorComponent ; class UAssetUserData ; class ULevel ; class UWorld ; class UPrimitiveComponent ; struct FSimpleMemberReference ; class IPrimitiveComponent ; int32 GEnableDeferredPhysicsCreation ; class FRegisterComponentContext { public :)",
    "insertText": "FRegisterComponentContext(UWorld* InWorld) : World(InWorld)"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPrimitive(UPrimitiveComponent* PrimitiveComponent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AddPrimitiveBatches .)",
    "insertText": "Add(PrimitiveComponent)"
  },
  {
    "label": "AddSendRenderDynamicData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSendRenderDynamicData(UPrimitiveComponent* PrimitiveComponent)"
  },
  {
    "label": "SendRenderDynamicData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendRenderDynamicData(FRegisterComponentContext* Context, UPrimitiveComponent* PrimitiveComponent)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Count()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Process()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : UWorld* World ; TArray<UPrimitiveComponent*,FConcurrentLinearArrayAllocator> AddPrimitiveBatches ; TArray<UPrimitiveComponent*,FConcurrentLinearArrayAllocator> SendRenderDynamicDataPrimitives ; } ; # if WITH_EDITOR class SWidget ; struct FMinimalViewInfo ; # endif enum class EUpdateTransformFlags : int32 { None = 0 x0,SkipPhysicsUpdate = 0 x1,PropagateFromParent = 0 x2,OnlyUpdateIfUsingSocket = 0 x4 } ; EUpdateTransformFlags)",
    "insertText": "operator(EUpdateTransformFlags Left, EUpdateTransformFlags Right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(EUpdateTransformFlags Value)"
  },
  {
    "label": "SkipPhysicsToEnum()",
    "kind": "Method",
    "detail": "Function (} EUpdateTransformFlags)",
    "insertText": "SkipPhysicsToEnum(bool bSkipPhysics)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfosForSingleComponentInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfosForSingleComponentInterface(IPrimitiveComponent* InComponent, TSet<FSceneInterface*>* InScenesToUpdateAllPrimitiveSceneInfosForBatching = nullptr)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfosForScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfosForScenes(TSet<FSceneInterface*> ScenesToUpdateAllPrimitiveSceneInfos)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (class UActorComponent ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FActorComponentActivatedSignature, UActorComponent, OnComponentActivated, UActorComponent*, Component, bool, bReset)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FActorComponentDeactivateSignature, UActorComponent, OnComponentDeactivated, UActorComponent*, Component)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FActorComponentGlobalCreatePhysicsSignature, UActorComponent*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FActorComponentGlobalDestroyPhysicsSignature, UActorComponent*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(DefaultToInstanced, BlueprintType, abstract, meta=(ShortTooltip=\"An ActorComponent is a reusable component that can be added to any actor.\"), config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UActorComponent()",
    "kind": "Method",
    "detail": "Function (FActorComponentGlobalDestroyPhysicsSignature GlobalDestroyPhysicsDelegate ;)",
    "insertText": "UActorComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "GetUCSSerializationIndex()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetUCSSerializationIndex()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(bNeedsUCSSerializationIndexEvaluted)"
  },
  {
    "label": "UActorComponent()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "UActorComponent(this)->DetermineUCSSerializationIndexForLegacyComponent()"
  },
  {
    "label": "DetermineUCSSerializationIndexForLegacyComponent()",
    "kind": "Method",
    "detail": "Function (} # endif return UCSSerializationIndex ; } private : void)",
    "insertText": "DetermineUCSSerializationIndexForLegacyComponent()"
  },
  {
    "label": "GetMarkedForEndOfFrameUpdateState()",
    "kind": "Method",
    "detail": "Function (public : uint32)",
    "insertText": "GetMarkedForEndOfFrameUpdateState()"
  },
  {
    "label": "GetUCSModifiedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUCSModifiedProperties(TSet<const FProperty*>& ModifiedProperties)"
  },
  {
    "label": "RemoveUCSModifiedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUCSModifiedProperties(const TArray<FProperty*>& Properties)"
  },
  {
    "label": "ClearUCSModifiedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUCSModifiedProperties()"
  },
  {
    "label": "IsEditableWhenInherited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditableWhenInherited()"
  },
  {
    "label": "HasBeenCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBeenCreated()"
  },
  {
    "label": "GetActorOwnerNoninline()",
    "kind": "Method",
    "detail": "Function (private : AActor*)",
    "insertText": "GetActorOwnerNoninline()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "CreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePhysicsState(bool bAllowDeferral = false)"
  },
  {
    "label": "DestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPhysicsState()"
  },
  {
    "label": "SetNetAddressable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetAddressable()"
  },
  {
    "label": "IsUsingRegisteredSubObjectList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingRegisteredSubObjectList()"
  },
  {
    "label": "PreReplication()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreReplication(IRepChangedPropertyTracker & ChangedPropertyTracker)"
  },
  {
    "label": "GetComponentClassCanReplicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetComponentClassCanReplicate()"
  },
  {
    "label": "AddReplicatedSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReplicatedSubObject(UObject* SubObject, ELifetimeCondition NetCondition = COND_None)"
  },
  {
    "label": "RemoveReplicatedSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReplicatedSubObject(UObject* SubObject)"
  },
  {
    "label": "DestroyReplicatedSubObjectOnRemotePeers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyReplicatedSubObjectOnRemotePeers(UObject* SubObject)"
  },
  {
    "label": "TearOffReplicatedSubObjectOnRemotePeers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearOffReplicatedSubObjectOnRemotePeers(UObject* SubObject)"
  },
  {
    "label": "IsReplicatedSubObjectRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplicatedSubObjectRegistered(const UObject* SubObject)"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "IsVisualizationComponent()",
    "kind": "Method",
    "detail": "Function (bIsEditorOnly = true ; bIsVisualizationComponent = true ; } bool)",
    "insertText": "IsVisualizationComponent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsVisualizationComponent = bInIsVisualizationComponent ;)",
    "insertText": "if(bIsVisualizationComponent)"
  },
  {
    "label": "IsNetSimulating()",
    "kind": "Method",
    "detail": "Function (bIsEditorOnly = true ; } } # endif bool)",
    "insertText": "IsNetSimulating()"
  },
  {
    "label": "GetOwnerRole()",
    "kind": "Method",
    "detail": "Function (ENetRole)",
    "insertText": "GetOwnerRole()"
  },
  {
    "label": "GetNetMode()",
    "kind": "Method",
    "detail": "Function (ENetMode)",
    "insertText": "GetNetMode()"
  },
  {
    "label": "IsNetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetMode(ENetMode Mode)"
  },
  {
    "label": "IsNetStartupComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetStartupComponent()"
  },
  {
    "label": "OnEndOfFrameUpdateDuringTick()",
    "kind": "Method",
    "detail": "Function (bIsNetStartupComponent = bInIsNetStartupComponent ; } void)",
    "insertText": "OnEndOfFrameUpdateDuringTick()"
  },
  {
    "label": "OnPreEndOfFrameSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreEndOfFrameSync()"
  },
  {
    "label": "RegisterReplicationFragments()",
    "kind": "Method",
    "detail": "Function (} # if UE_WITH_IRIS void)",
    "insertText": "RegisterReplicationFragments(UE::Net::FFragmentRegistrationContext& Context, UE::Net::EFragmentRegistrationFlags RegistrationFlags)"
  },
  {
    "label": "BeginReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplication()"
  },
  {
    "label": "EndReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplication()"
  },
  {
    "label": "GetWorld_Uncached()",
    "kind": "Method",
    "detail": "Function (# endif private : AActor* OwnerPrivate ; UWorld* WorldPrivate ; UWorld*)",
    "insertText": "GetWorld_Uncached()"
  },
  {
    "label": "InternalGetNetMode()",
    "kind": "Method",
    "detail": "Function (ENetMode)",
    "insertText": "InternalGetNetMode()"
  },
  {
    "label": "ShouldActivate()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldActivate()"
  },
  {
    "label": "ExecuteUnregisterEvents()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExecuteUnregisterEvents()"
  },
  {
    "label": "ExecuteRegisterEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteRegisterEvents(FRegisterComponentContext* Context = nullptr)"
  },
  {
    "label": "ConsolidatedPostEditChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsolidatedPostEditChange(const FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "PrecachePSOs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecachePSOs()"
  },
  {
    "label": "ShouldCreateRenderState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCreateRenderState()"
  },
  {
    "label": "SendRenderTransform_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransform_Concurrent()"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "SendRenderInstanceData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderInstanceData_Concurrent()"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "ReadyForReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadyForReplication()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "UninitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeComponent()"
  },
  {
    "label": "RegisterAllComponentTickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAllComponentTickFunctions(bool bRegister)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "AsyncPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncPhysicsTickComponent(float DeltaTime, float SimTime)"
  },
  {
    "label": "ReceiveAsyncPhysicsTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveAsyncPhysicsTick(DeltaTime, SimTime)"
  },
  {
    "label": "SetupActorComponentTickFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetupActorComponentTickFunction(struct FTickFunction* TickFunction)"
  },
  {
    "label": "SetComponentTickEnabledAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentTickEnabledAsync(bool bEnabled)"
  },
  {
    "label": "RegisterComponentWithWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentWithWorld(UWorld* InWorld, FRegisterComponentContext* Context = nullptr)"
  },
  {
    "label": "IsReadyForOwnerToAutoDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForOwnerToAutoDestroy()"
  },
  {
    "label": "IsRenderTransformDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderTransformDirty()"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCacheDetailed(true, false)"
  },
  {
    "label": "InvalidateLightingCacheDetailed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateLightingCacheDetailed(bool bInvalidateBuildEnqueuedLighting, bool bTranslationOnly)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "GetEditorPreviewInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEditorPreviewInfo(float DeltaTime, FMinimalViewInfo& ViewOut)"
  },
  {
    "label": "GetCustomHLODBuilderClass()",
    "kind": "Method",
    "detail": "Function (} TSubclassOf<class UHLODBuilder>)",
    "insertText": "GetCustomHLODBuilderClass()"
  },
  {
    "label": "DoDeferredRenderUpdates_Concurrent()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "DoDeferredRenderUpdates_Concurrent()"
  },
  {
    "label": "UpdateComponentToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentToWorld(EUpdateTransformFlags UpdateTransformFlags = EUpdateTransformFlags::None, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "MarkRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkRenderStateDirty()"
  },
  {
    "label": "MarkRenderDynamicDataDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRenderDynamicDataDirty()"
  },
  {
    "label": "MarkRenderTransformDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRenderTransformDirty()"
  },
  {
    "label": "MarkRenderInstancesDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRenderInstancesDirty()"
  },
  {
    "label": "MarkForNeededEndOfFrameUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkForNeededEndOfFrameUpdate()"
  },
  {
    "label": "MarkForNeededEndOfFrameRecreate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkForNeededEndOfFrameRecreate()"
  },
  {
    "label": "ClearNeedEndOfFrameUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNeedEndOfFrameUpdate()"
  },
  {
    "label": "RequiresGameThreadEndOfFrameUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresGameThreadEndOfFrameUpdates()"
  },
  {
    "label": "RequiresGameThreadEndOfFrameRecreate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresGameThreadEndOfFrameRecreate()"
  },
  {
    "label": "RequiresPreEndOfFrameSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresPreEndOfFrameSync()"
  },
  {
    "label": "RecreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateRenderState_Concurrent()"
  },
  {
    "label": "RecreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreatePhysicsState()"
  },
  {
    "label": "IsRenderStateCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderStateCreated()"
  },
  {
    "label": "GetComponentLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetComponentLevel()"
  },
  {
    "label": "ComponentIsInLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsInLevel(const class ULevel *TestLevel)"
  },
  {
    "label": "ComponentIsInPersistentLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsInPersistentLevel(bool bIncludeLevelStreamingPersistent)"
  },
  {
    "label": "OnActorVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorVisibilityChanged()"
  },
  {
    "label": "OnActorEnableCollisionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnActorEnableCollisionChanged()"
  },
  {
    "label": "GetReadableName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReadableName()"
  },
  {
    "label": "AdditionalStatObject()",
    "kind": "Method",
    "detail": "Function (UObject const*)",
    "insertText": "AdditionalStatObject()"
  },
  {
    "label": "PostApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostApplyToComponent()"
  },
  {
    "label": "GetComponentChildElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComponentChildElements(TArray<FTypedElementHandle>& OutElementHandles, const bool bAllowCreate = true)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "NeedsLoadForClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForClient()"
  },
  {
    "label": "NeedsLoadForServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForServer()"
  },
  {
    "label": "NeedsLoadForEditorGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForEditorGame()"
  },
  {
    "label": "IsNameStableForNetworking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameStableForNetworking()"
  },
  {
    "label": "IsSupportedForNetworking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedForNetworking()"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "GetFunctionCallspace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFunctionCallspace(UFunction* Function, FFrame* Stack)"
  },
  {
    "label": "CallRemoteFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CallRemoteFunction(UFunction* Function, void* Parameters, FOutParmRec* OutParms, FFrame* Stack)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(const TCHAR* NewName=NULL, UObject* NewOuter=NULL, ERenameFlags Flags=REN_None)"
  },
  {
    "label": "PostRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRename(UObject* OldOuter, const FName OldName)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditChange(FProperty* PropertyThatWillChange)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "IsSelectedInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedInEditor()"
  },
  {
    "label": "SetPackageExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageExternal(bool bExternal, bool bShouldDirty)"
  },
  {
    "label": "GetStreamingBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetStreamingBounds()"
  },
  {
    "label": "GetStreamingBoundsEditor()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetStreamingBoundsEditor()"
  },
  {
    "label": "ForceActorNonSpatiallyLoaded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ForceActorNonSpatiallyLoaded()"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  },
  {
    "label": "OnCreatedFromReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreatedFromReplication()"
  },
  {
    "label": "OnDestroyedFromReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyedFromReplication()"
  },
  {
    "label": "IsOwnerRunningUserConstructionScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwnerRunningUserConstructionScript()"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent()"
  },
  {
    "label": "DestroyComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyComponent(bool bPromoteChildren = false)"
  },
  {
    "label": "OnComponentCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentCreated()"
  },
  {
    "label": "OnComponentDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentDestroyed(bool bDestroyingHierarchy)"
  },
  {
    "label": "ReregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReregisterComponent()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "CanEverAffectNavigation()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "CanEverAffectNavigation()"
  },
  {
    "label": "SetCanEverAffectNavigation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanEverAffectNavigation(bool bRelevant)"
  },
  {
    "label": "IsNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationRelevant()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} # endif const FString ComponentTemplateNameSuffix ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnMarkRenderStateDirty, UActorComponent&)"
  },
  {
    "label": "HandleCanEverAffectNavigationChange()",
    "kind": "Method",
    "detail": "Function (FOnMarkRenderStateDirty MarkRenderStateDirtyEvent ; protected : void)",
    "insertText": "HandleCanEverAffectNavigationChange(bool bForceUpdate = false)"
  },
  {
    "label": "SetAsyncPhysicsTickEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncPhysicsTickEnabled(bool bEnabled)"
  },
  {
    "label": "DeferRemoveAsyncPhysicsTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferRemoveAsyncPhysicsTick()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (private : #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual void Tick( float DeltaTime)"
  },
  {
    "label": "ClearNeedEndOfFrameUpdate_Internal()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "ClearNeedEndOfFrameUpdate_Internal()"
  },
  {
    "label": "RegisterAsyncPhysicsTickEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsyncPhysicsTickEnabled(bool bRegister)"
  },
  {
    "label": "SetIsReplicatedByDefault()",
    "kind": "Method",
    "detail": "Function (struct FMarkComponentEndOfFrameUpdateState ; struct FSetUCSSerializationIndex ; class FActorComponentDetails ; class FComponentReregisterContextBase ; class FComponentRecreateRenderStateContext ; struct FActorComponentTickFunction ; protected : void)",
    "insertText": "SetIsReplicatedByDefault(const bool bNewReplicates)"
  },
  {
    "label": "GetReplicatesPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetReplicatesPropertyName()"
  },
  {
    "label": "SetActiveFlag()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetActiveFlag(const bool bNewIsActive)"
  },
  {
    "label": "OwnerNeedsInitialization()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "OwnerNeedsInitialization()"
  },
  {
    "label": "NeedsInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsInitialization()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(Mode == NM_DedicatedServer)"
  },
  {
    "label": "IsRunningDedicatedServer()",
    "kind": "Method",
    "detail": "Function (} else { return !)",
    "insertText": "IsRunningDedicatedServer() && (InternalGetNetMode() == Mode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "if(bCanUseCachedOwner)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "checkSlow(OwnerPrivate == GetActorOwnerNoninline())"
  }
]