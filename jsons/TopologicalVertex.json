[
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FVertexMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexMesh"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "FVertexLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexLink"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "SetBarycenter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / CADEntity . h \" # include \" Core / HaveStates . h \" # include \" Core / Types . h \" # include \" Math / Point . h \" # include \" Topo / Linkable . h \" # include \" Topo / TopologicalLink . h \" namespace UE::CADKernel { class FDatabase ; class FModelMesh ; class FTopologicalEdge ; class FVertexMesh ; class FTopologicalVertex ; class FVertexLink : public TTopologicalLink<FTopologicalVertex> { class FTopologicalVertex ; protected : FPoint Barycenter ; void)",
    "insertText": "SetBarycenter(const FPoint& Point)"
  },
  {
    "label": "FVertexLink()",
    "kind": "Method",
    "detail": "Function (Barycenter = Point ; } public :)",
    "insertText": "FVertexLink() : Barycenter(FPoint::ZeroPoint)"
  },
  {
    "label": "FVertexLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexLink(FTopologicalVertex& Entity) : TTopologicalLink<FTopologicalVertex>(Entity) , Barycenter(FPoint::ZeroPoint)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TTopologicalLink<FTopologicalVertex)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<Barycenter ; } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity& Info)"
  },
  {
    "label": "GetBarycenter()",
    "kind": "Method",
    "detail": "Function (# endif const FPoint&)",
    "insertText": "GetBarycenter()"
  },
  {
    "label": "ComputeBarycenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeBarycenter()"
  },
  {
    "label": "DefineActiveEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineActiveEntity()"
  },
  {
    "label": "FTopologicalVertex()",
    "kind": "Method",
    "detail": "Function (} ; class FTopologicalVertex : public TLinkable<FTopologicalVertex,FVertexLink> { class FEntity ; class FVertexLink ; protected : TArray<FTopologicalEdge*> ConnectedEdges ; FPoint Coordinates ; TSharedPtr<FVertexMesh> Mesh ;)",
    "insertText": "FTopologicalVertex(const FPoint& InCoordinates) : Coordinates(InCoordinates)"
  },
  {
    "label": "FTopologicalVertex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTopologicalVertex()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FTopologicalVertex>)",
    "insertText": "Make(const FPoint& InCoordinate)"
  },
  {
    "label": "FTopologicalVertex()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTopologicalVertex> Vertex = FEntity::MakeShared<)",
    "insertText": "FTopologicalVertex(InCoordinate)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (Vertex ->)",
    "insertText": "Finalize()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Coordinates)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, ConnectedEdges)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "GetCoordinates()",
    "kind": "Method",
    "detail": "Function (} return Coordinates ; } const FPoint&)",
    "insertText": "GetCoordinates()"
  },
  {
    "label": "GetLink()",
    "kind": "Method",
    "detail": "Function (FPoint BaryCenter =)",
    "insertText": "GetLink()->GetBarycenter() * (double)GetLink()->GetTwinEntityNum()"
  },
  {
    "label": "BaryCenter()",
    "kind": "Method",
    "detail": "Function (BaryCenter - = Coordinates ; BaryCenter + = NewCoordinates ;)",
    "insertText": "BaryCenter(double)GetLink()->GetTwinEntityNum()"
  },
  {
    "label": "GetLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLink()->SetBarycenter(BaryCenter)"
  },
  {
    "label": "GetLink()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetLink()->SetBarycenter(NewCoordinates)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (} Coordinates = NewCoordinates ; } double)",
    "insertText": "Distance(const FTopologicalVertex& OtherVertex)"
  },
  {
    "label": "SquareDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SquareDistance(const FTopologicalVertex& OtherVertex)"
  },
  {
    "label": "SquareDistanceBetweenBarycenters()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SquareDistanceBetweenBarycenters(const FTopologicalVertex& OtherVertex)"
  },
  {
    "label": "SquareDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SquareDistance(const FPoint& Point)"
  },
  {
    "label": "GetOrCreateMesh()",
    "kind": "Method",
    "detail": "Function (} FVertexMesh&)",
    "insertText": "GetOrCreateMesh(FModelMesh& MeshModel)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (const FVertexMesh*)",
    "insertText": "GetMesh()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Mesh.IsValid())"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "Link(FTopologicalVertex& InEntity)"
  },
  {
    "label": "UnlinkTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkTo(FTopologicalVertex& Entity)"
  },
  {
    "label": "RemoveFromLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromLink()"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (TopologicalLink ->)",
    "insertText": "RemoveEntity(*this)"
  },
  {
    "label": "ResetTopologicalLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTopologicalLink()"
  },
  {
    "label": "DeleteIfIsolated()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DeleteIfIsolated()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} TopologicalLink .)",
    "insertText": "Reset()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Delete()"
  },
  {
    "label": "IsBorderVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBorderVertex()"
  },
  {
    "label": "AddConnectedEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnectedEdge(FTopologicalEdge& Edge)"
  },
  {
    "label": "RemoveConnectedEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnectedEdge(FTopologicalEdge& Edge)"
  },
  {
    "label": "GetDirectConnectedEdges()",
    "kind": "Method",
    "detail": "Function (const TArray<FTopologicalEdge*>&)",
    "insertText": "GetDirectConnectedEdges()"
  },
  {
    "label": "GetConnectedEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConnectedEdges(TArray<FTopologicalEdge*>& OutConnectedEdges)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutConnectedEdges = ConnectedEdges ; } else { OutConnectedEdges .)",
    "insertText": "Reserve(100)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutConnectedEdges .)",
    "insertText": "Append(Vertex->ConnectedEdges)"
  },
  {
    "label": "ConnectedEdgeCount()",
    "kind": "Method",
    "detail": "Function (} } } const int32)",
    "insertText": "ConnectedEdgeCount()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { int32 Count = 0 ;)",
    "insertText": "for(const FTopologicalVertex* Vertex : GetLink()->GetTwinEntities())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Count + = Vertex -> ConnectedEdges .)",
    "insertText": "Num()"
  },
  {
    "label": "GetConnectedEdges()",
    "kind": "Method",
    "detail": "Function (} return Count ; } } void)",
    "insertText": "GetConnectedEdges(const FTopologicalVertex& OtherVertex, TArray<FTopologicalEdge*>& Edges)"
  }
]