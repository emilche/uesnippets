[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVariablePoleFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVariablePoleFilter"
  },
  {
    "label": "FVariablePoleFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Filter . h \" namespace Audio { enum class EFilterOrder : uint32 { TwoPole = 1,FourPole,SixPole,EightPole,} ; class FVariablePoleFilter { public : int32 NumFilters = 0 ; int32 NumChannels = 0 ; EBiquadFilter::Type Type = EBiquadFilter::Lowpass ;)",
    "insertText": "FVariablePoleFilter()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Init(EFilterOrder InOrder , const float InSampleRate , const int32 InNumChannels , const float InFrequency , const EBiquadFilter::Type InType , const float InBandwidth = 2.f , const float InGain = 0.f)"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParams(const EBiquadFilter::Type InFilterType, const float InCutoffFrequency, const float InBandwidth = 2.f, const float InGain = 0.f)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* InFrame, float* OutFrame)"
  },
  {
    "label": "ProcessAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioBuffer(const float* InFrame, float* OutFrame, const int32 NumSamples)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFilters()",
    "kind": "Method",
    "detail": "Function (const TArray<FBiquadFilter>&)",
    "insertText": "GetFilters()"
  }
]