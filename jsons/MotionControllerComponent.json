[
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "UXRDeviceVisualizationComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UXRDeviceVisualizationComponent"
  },
  {
    "label": "UMotionControllerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMotionControllerComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "IModularFeature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModularFeature"
  },
  {
    "label": "FViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewExtension"
  },
  {
    "label": "UMotionControllerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMotionControllerComponent"
  },
  {
    "label": "SetTrackingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackingSource(const EControllerHand NewSource)"
  },
  {
    "label": "SetTrackingMotionSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackingMotionSource(const FName NewSource)"
  },
  {
    "label": "GetTrackingMotionSource()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetTrackingMotionSource()"
  },
  {
    "label": "SetAssociatedPlayerIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedPlayerIndex(const int32 NewPlayer)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (XRDeviceVisualizationComponent)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FActivateVisualizationComponent, bool)"
  },
  {
    "label": "OnMotionControllerUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMotionControllerUpdated()"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetParameterValue(FName InName, bool& bValueFound)"
  },
  {
    "label": "GetHandJointPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetHandJointPosition(int jointIndex, bool& bValueFound)"
  },
  {
    "label": "PollControllerState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollControllerState(FVector& Position, FRotator& Orientation, float WorldToMetersScale)"
  },
  {
    "label": "PollControllerState_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollControllerState_GameThread(FVector& Position, FRotator& Orientation, bool& OutbProvidedLinearVelocity, FVector& OutLinearVelocity, bool& OutbProvidedAngularVelocity, FVector& OutAngularVelocityAsAxisAndLength, bool& OutbProvidedLinearAcceleration, FVector& OutLinearAcceleration, float WorldToMetersScale)"
  },
  {
    "label": "PollControllerState_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollControllerState_RenderThread(FVector& Position, FRotator& Orientation, float WorldToMetersScale)"
  },
  {
    "label": "OnModularFeatureUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModularFeatureUnregistered(const FName& Type, class IModularFeature* ModularFeature)"
  },
  {
    "label": "FViewExtension()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FViewExtension(const FAutoRegister& AutoRegister, UMotionControllerComponent* InMotionControllerComponent)"
  }
]