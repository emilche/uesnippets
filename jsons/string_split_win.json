[
  {
    "label": "SplitString()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_SPLIT_WIN_H_ # define BASE_STRINGS_STRING_SPLIT_WIN_H_ # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / string_split . h \" namespace base { [ [ nodiscard ] ] BASE_EXPORT std::vector<std::wstring>)",
    "insertText": "SplitString(WStringPiece input, WStringPiece separators, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringPiece()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<WStringPiece>)",
    "insertText": "SplitStringPiece(WStringPiece input, WStringPiece separators, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringUsingSubstr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<std::wstring>)",
    "insertText": "SplitStringUsingSubstr(WStringPiece input, WStringPiece delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "SplitStringPieceUsingSubstr()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::vector<WStringPiece>)",
    "insertText": "SplitStringPieceUsingSubstr(WStringPiece input, WStringPiece delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  }
]