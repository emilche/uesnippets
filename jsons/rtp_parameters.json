[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Filter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Filter"
  },
  {
    "label": "RtcpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcpParameters"
  },
  {
    "label": "DegradationPreferenceToString()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTP_PARAMETERS_H_ # define API_RTP_PARAMETERS_H_ # include<stdint . h> # include<map> # include<string> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / media_types . h \" # include \" api / priority . h \" # include \" api / rtp_transceiver_direction . h \" # include \" api / video / resolution . h \" # include \" api / video_codecs / scalability_mode . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { enum class FecMechanism { RED,RED_AND_ULPFEC,FLEXFEC,} ; enum class RtcpFeedbackType { CCM,LNTF,NACK,REMB,TRANSPORT_CC,} ; enum class RtcpFeedbackMessageType { GENERIC_NACK,PLI,FIR,} ; enum class DtxStatus { DISABLED,ENABLED,} ; enum class DegradationPreference { DISABLED,MAINTAIN_FRAMERATE,MAINTAIN_RESOLUTION,BALANCED,} ; RTC_EXPORT const char*)",
    "insertText": "DegradationPreferenceToString(DegradationPreference degradation_preference)"
  },
  {
    "label": "RtcpFeedback()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT const double kDefaultBitratePriority ; struct RTC_EXPORT RtcpFeedback { RtcpFeedbackType type = RtcpFeedbackType::CCM ; absl::optional<RtcpFeedbackMessageType> message_type ;)",
    "insertText": "RtcpFeedback()"
  },
  {
    "label": "RtcpFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpFeedback(RtcpFeedbackType type)"
  },
  {
    "label": "RtcpFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpFeedback(RtcpFeedbackType type, RtcpFeedbackMessageType message_type)"
  },
  {
    "label": "RtcpFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpFeedback(const RtcpFeedback&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RtcpFeedback& o)"
  },
  {
    "label": "RtpCodecCapability()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpCodecCapability {)",
    "insertText": "RtpCodecCapability()"
  },
  {
    "label": "mime_type()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "mime_type()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::string name ; cricket::MediaType kind = cricket::MEDIA_TYPE_AUDIO ; absl::optional<int> clock_rate ; absl::optional<int> preferred_payload_type ; absl::optional<int> max_ptime ; absl::optional<int> ptime ; absl::optional<int> num_channels ; std::vector<RtcpFeedback> rtcp_feedback ; std::map<std::string,std::string> parameters ; std::map<std::string,std::string> options ; int max_temporal_layer_extensions = 0 ; int max_spatial_layer_extensions = 0 ; bool svc_multi_stream_support = false ; absl::InlinedVector<ScalabilityMode,kScalabilityModeCount> scalability_modes ; bool)",
    "insertText": "operator(const RtpCodecCapability& o)"
  },
  {
    "label": "RtpHeaderExtensionCapability()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpHeaderExtensionCapability { std::string uri ; absl::optional<int> preferred_id ; bool preferred_encrypt = false ; RtpTransceiverDirection direction = RtpTransceiverDirection::kSendRecv ;)",
    "insertText": "RtpHeaderExtensionCapability()"
  },
  {
    "label": "RtpHeaderExtensionCapability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpHeaderExtensionCapability(absl::string_view uri)"
  },
  {
    "label": "RtpHeaderExtensionCapability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpHeaderExtensionCapability(absl::string_view uri, int preferred_id)"
  },
  {
    "label": "RtpHeaderExtensionCapability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpHeaderExtensionCapability(absl::string_view uri, int preferred_id, RtpTransceiverDirection direction)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RtpHeaderExtensionCapability& o)"
  },
  {
    "label": "RtpExtension()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpExtension { enum Filter { kDiscardEncryptedExtension,kPreferEncryptedExtension,kRequireEncryptedExtension,} ;)",
    "insertText": "RtpExtension()"
  },
  {
    "label": "RtpExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpExtension(absl::string_view uri, int id)"
  },
  {
    "label": "RtpExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpExtension(absl::string_view uri, int id, bool encrypt)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RtpExtension& rhs)"
  },
  {
    "label": "IsSupportedForVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedForVideo(absl::string_view uri)"
  },
  {
    "label": "IsEncryptionSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEncryptionSupported(absl::string_view uri)"
  },
  {
    "label": "FindHeaderExtensionByUri()",
    "kind": "Method",
    "detail": "Function (const RtpExtension*)",
    "insertText": "FindHeaderExtensionByUri(const std::vector<RtpExtension>& extensions, absl::string_view uri, Filter filter)"
  },
  {
    "label": "FindHeaderExtensionByUriAndEncryption()",
    "kind": "Method",
    "detail": "Function (const RtpExtension*)",
    "insertText": "FindHeaderExtensionByUriAndEncryption(const std::vector<RtpExtension>& extensions, absl::string_view uri, bool encrypt)"
  },
  {
    "label": "DeduplicateHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (const std::vector<RtpExtension>)",
    "insertText": "DeduplicateHeaderExtensions(const std::vector<RtpExtension>& extensions, Filter filter)"
  },
  {
    "label": "RtpFecParameters()",
    "kind": "Method",
    "detail": "Function (char kEncryptHeaderExtensionsUri [ ] = \" urn : ietf : params : rtp - hdrext : encrypt \" ; char kAudioLevelUri [ ] = \" urn : ietf : params : rtp - hdrext : ssrc - audio - level \" ; char kTimestampOffsetUri [ ] = \" urn : ietf : params : rtp - hdrext : toffset \" ; char kAbsSendTimeUri [ ] = \" http : char kAbsoluteCaptureTimeUri [ ] = \" http : char kVideoRotationUri [ ] = \" urn : 3 gpp : video - orientation \" ; char kVideoContentTypeUri [ ] = \" http : char kVideoTimingUri [ ] = \" http : char kGenericFrameDescriptorUri00 [ ] = \" http : \" generic - frame - descriptor - 0 0 \" ; char kDependencyDescriptorUri [ ] = \" https : \" # dependency - descriptor - rtp - header - extension \" ; char kVideoLayersAllocationUri [ ] = \" http : char kTransportSequenceNumberUri [ ] = \" http : \" draft - holmer - rmcat - transport - wide - cc - extensions - 0 1 \" ; char kTransportSequenceNumberV2Uri [ ] = \" http : char kPlayoutDelayUri [ ] = \" http : char kColorSpaceUri [ ] = \" http : char kMidUri [ ] = \" urn : ietf : params : rtp - hdrext : sdes : mid \" ; char kRidUri [ ] = \" urn : ietf : params : rtp - hdrext : sdes : rtp - stream - id \" ; char kRepairedRidUri [ ] = \" urn : ietf : params : rtp - hdrext : sdes : repaired - rtp - stream - id \" ; char kVideoFrameTrackingIdUri [ ] = \" http : char kCsrcAudioLevelsUri [ ] = \" urn : ietf : params : rtp - hdrext : csrc - audio - level \" ; int kMinId = 1 ; int kMaxId = 2 5 5 ; int kMaxValueSize = 2 5 5 ; int kOneByteHeaderExtensionMaxId = 1 4 ; int kOneByteHeaderExtensionMaxValueSize = 1 6 ; std::string uri ; int id = 0 ; bool encrypt = false ; } ; struct RTC_EXPORT RtpFecParameters { absl::optional<uint32_t> ssrc ; FecMechanism mechanism = FecMechanism::RED ;)",
    "insertText": "RtpFecParameters()"
  },
  {
    "label": "RtpFecParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpFecParameters(FecMechanism mechanism)"
  },
  {
    "label": "RtpFecParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpFecParameters(FecMechanism mechanism, uint32_t ssrc)"
  },
  {
    "label": "RtpFecParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpFecParameters(const RtpFecParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RtpFecParameters& o)"
  },
  {
    "label": "RtpRtxParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpRtxParameters { absl::optional<uint32_t> ssrc ;)",
    "insertText": "RtpRtxParameters()"
  },
  {
    "label": "RtpRtxParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpRtxParameters(uint32_t ssrc)"
  },
  {
    "label": "RtpRtxParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpRtxParameters(const RtpRtxParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RtpRtxParameters& o)"
  },
  {
    "label": "RtpEncodingParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpEncodingParameters {)",
    "insertText": "RtpEncodingParameters()"
  },
  {
    "label": "RtpEncodingParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpEncodingParameters(const RtpEncodingParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t> ssrc ; double bitrate_priority = kDefaultBitratePriority ; Priority network_priority = Priority::kLow ; absl::optional<int> max_bitrate_bps ; absl::optional<int> min_bitrate_bps ; absl::optional<double> max_framerate ; absl::optional<int> num_temporal_layers ; absl::optional<double> scale_resolution_down_by ; absl::optional<std::string> scalability_mode ; absl::optional<Resolution> requested_resolution ; bool active = true ; std::string rid ; bool adaptive_ptime = false ; bool)",
    "insertText": "operator(const RtpEncodingParameters& o)"
  },
  {
    "label": "RtpCodecParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpCodecParameters {)",
    "insertText": "RtpCodecParameters()"
  },
  {
    "label": "RtpCodecParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpCodecParameters(const RtpCodecParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::string name ; cricket::MediaType kind = cricket::MEDIA_TYPE_AUDIO ; int payload_type = 0 ; absl::optional<int> clock_rate ; absl::optional<int> num_channels ; absl::optional<int> max_ptime ; absl::optional<int> ptime ; std::vector<RtcpFeedback> rtcp_feedback ; std::map<std::string,std::string> parameters ; bool)",
    "insertText": "operator(const RtpCodecParameters& o)"
  },
  {
    "label": "RtpCapabilities()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpCapabilities {)",
    "insertText": "RtpCapabilities()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpCodecCapability> codecs ; std::vector<RtpHeaderExtensionCapability> header_extensions ; std::vector<FecMechanism> fec ; bool)",
    "insertText": "operator(const RtpCapabilities& o)"
  },
  {
    "label": "RtcpParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct RtcpParameters final {)",
    "insertText": "RtcpParameters()"
  },
  {
    "label": "RtcpParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpParameters(const RtcpParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t> ssrc ; std::string cname ; bool reduced_size = false ; bool mux = true ; bool)",
    "insertText": "operator(const RtcpParameters& o)"
  },
  {
    "label": "RtpParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct RTC_EXPORT RtpParameters {)",
    "insertText": "RtpParameters()"
  },
  {
    "label": "RtpParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpParameters(const RtpParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::string transaction_id ; std::string mid ; std::vector<RtpCodecParameters> codecs ; std::vector<RtpExtension> header_extensions ; std::vector<RtpEncodingParameters> encodings ; RtcpParameters rtcp ; absl::optional<DegradationPreference> degradation_preference ; bool)",
    "insertText": "operator(const RtpParameters& o)"
  }
]