[
  {
    "label": "_Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Predicate"
  },
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "_BidirectionalIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator"
  },
  {
    "label": "_IterCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IterCategory"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_PARTITION_H # define _LIBCPP___ALGORITHM_PARTITION_H # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _Predicate, class _AlgPolicy, class _ForwardIterator, class _Sentinel> _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_ForwardIterator, _ForwardIterator> __partition_impl(_ForwardIterator __first, _Sentinel __last, _Predicate __pred, forward_iterator_tag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } _ForwardIterator __p = __first ;)",
    "insertText": "while(++__p != __last)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "iter_swap(__first, __p)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } } return)",
    "insertText": "make_pair(std::move(__first), std::move(__p))"
  },
  {
    "label": "__partition_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _Predicate,class _AlgPolicy,class _BidirectionalIterator,class _Sentinel> _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_BidirectionalIterator,_BidirectionalIterator>)",
    "insertText": "__partition_impl(_BidirectionalIterator __first, _Sentinel __sentinel, _Predicate __pred, bidirectional_iterator_tag)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (_BidirectionalIterator __original_last = _IterOps<_AlgPolicy)",
    "insertText": "next(__first, __sentinel)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_BidirectionalIterator __last = __original_last ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } do {)",
    "insertText": "if(__first == --__last) return std::make_pair(std::move(__first), std::move(__original_last))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!__pred(*__last))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "iter_swap(__first, __last)"
  },
  {
    "label": "__partition()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } } template<class _AlgPolicy,class _ForwardIterator,class _Sentinel,class _Predicate,class _IterCategory> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_ForwardIterator,_ForwardIterator>)",
    "insertText": "__partition(_ForwardIterator __first, _Sentinel __last, _Predicate&& __pred, _IterCategory __iter_category)"
  },
  {
    "label": "partition()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Predicate> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (using _IterCategory = iterator_traits<_ForwardIterator>::iterator_category ; auto __result = std::__partition<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), __pred, _IterCategory())"
  }
]