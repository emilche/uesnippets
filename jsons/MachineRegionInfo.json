[
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "MachinePostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachinePostDominatorTree"
  },
  {
    "label": "MachineRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegion"
  },
  {
    "label": "MachineRegionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegionNode"
  },
  {
    "label": "MachineRegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegionInfo"
  },
  {
    "label": "RegionTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionTraits"
  },
  {
    "label": "MachineRegionInfoPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegionInfoPass"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "RegionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionBase"
  },
  {
    "label": "RegionNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNodeBase"
  },
  {
    "label": "RegionInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoBase"
  },
  {
    "label": "getNumSuccessors()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEREGIONINFO_H # define LLVM_CODEGEN_MACHINEREGIONINFO_H # include \" llvm / Analysis / RegionInfo . h \" # include \" llvm / Analysis / RegionIterator . h \" # include \" llvm / CodeGen / MachineDominanceFrontier . h \" # include \" llvm / CodeGen / MachineDominators . h \" # include \" llvm / CodeGen / MachineFunction . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / MachineLoopInfo . h \" namespace llvm { class MachineDominatorTree ; struct MachinePostDominatorTree ; class MachineRegion ; class MachineRegionNode ; class MachineRegionInfo ; template<> struct RegionTraits<MachineFunction> { typedef MachineFunction FuncT ; typedef MachineBasicBlock BlockT ; typedef MachineRegion RegionT ; typedef MachineRegionNode RegionNodeT ; typedef MachineRegionInfo RegionInfoT ; typedef MachineDominatorTree DomTreeT ; typedef MachineDomTreeNode DomTreeNodeT ; typedef MachinePostDominatorTree PostDomTreeT ; typedef MachineDominanceFrontier DomFrontierT ; typedef MachineInstr InstT ; typedef MachineLoop LoopT ; typedef MachineLoopInfo LoopInfoT ; unsigned)",
    "insertText": "getNumSuccessors(MachineBasicBlock *BB)"
  },
  {
    "label": "MachineRegionNode()",
    "kind": "Method",
    "detail": "Function (} } ; class MachineRegionNode : public RegionNodeBase<RegionTraits<MachineFunction>> { public :)",
    "insertText": "MachineRegionNode(MachineRegion *Parent, MachineBasicBlock *Entry, bool isSubRegion = false) : RegionNodeBase<RegionTraits<MachineFunction>>(Parent, Entry, isSubRegion)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const MachineRegion &RN)"
  },
  {
    "label": "MachineRegion()",
    "kind": "Method",
    "detail": "Function (} } ; class MachineRegion : public RegionBase<RegionTraits<MachineFunction>> { public :)",
    "insertText": "MachineRegion(MachineBasicBlock *Entry, MachineBasicBlock *Exit, MachineRegionInfo* RI, MachineDominatorTree *DT, MachineRegion *Parent = nullptr)"
  },
  {
    "label": "MachineRegion()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MachineRegion()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const MachineRegionNode &RN)"
  },
  {
    "label": "MachineRegionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class MachineRegionInfo : public RegionInfoBase<RegionTraits<MachineFunction>> { public :)",
    "insertText": "MachineRegionInfo()"
  },
  {
    "label": "updateStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStatistics(MachineRegion *R)"
  },
  {
    "label": "recalculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recalculate(MachineFunction &F, MachineDominatorTree *DT, MachinePostDominatorTree *PDT, MachineDominanceFrontier *DF)"
  },
  {
    "label": "MachineRegionInfoPass()",
    "kind": "Method",
    "detail": "Function (} ; class MachineRegionInfoPass : public MachineFunctionPass { MachineRegionInfo RI ; public : char ID ;)",
    "insertText": "MachineRegionInfoPass()"
  },
  {
    "label": "getRegionInfo()",
    "kind": "Method",
    "detail": "Function (MachineRegionInfo&)",
    "insertText": "getRegionInfo()"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, const Module *)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "MachineBasicBlock()",
    "kind": "Method",
    "detail": "Function (} ; template<> template<> MachineBasicBlock* RegionNodeBase<RegionTraits<MachineFunction>>::getNodeAs<)",
    "insertText": "MachineBasicBlock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isSubRegion() && \"This is not a MachineBasicBlock RegionNode!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isSubRegion() && \"This is not a subregion RegionNode!\")"
  },
  {
    "label": "MachineFunction()",
    "kind": "Method",
    "detail": "Function (auto Unconst = const_cast<RegionNodeBase<RegionTraits<)",
    "insertText": "MachineFunction(this)"
  },
  {
    "label": "RegionNodeGraphTraits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RegionNodeGraphTraits(MachineRegionNode, MachineBasicBlock, MachineRegion)"
  },
  {
    "label": "RegionNodeGraphTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionNodeGraphTraits(const MachineRegionNode, MachineBasicBlock, MachineRegion)"
  },
  {
    "label": "RegionGraphTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionGraphTraits(MachineRegion, MachineRegionNode)"
  },
  {
    "label": "RegionGraphTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionGraphTraits(const MachineRegion, const MachineRegionNode)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (template<> struct GraphTraits<MachineRegionInfo*> : public GraphTraits<FlatIt<MachineRegionNode*>> { typedef df_iterator<NodeType*,SmallPtrSet<NodeType*,8>,false,GraphTraits<FlatIt<NodeType*>>> nodes_iterator ; NodeType*)",
    "insertText": "getEntryNode(MachineRegionInfo *RI)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_begin(MachineRegionInfo* RI)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(MachineRegionInfo *RI)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<MachineRegionInfoPass*> : public GraphTraits<MachineRegionInfo*> { typedef df_iterator<NodeType*,SmallPtrSet<NodeType*,8>,false,GraphTraits<FlatIt<NodeType*>>> nodes_iterator ; NodeType*)",
    "insertText": "getEntryNode(MachineRegionInfoPass *RI)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_begin(MachineRegionInfoPass* RI)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(MachineRegionInfoPass *RI)"
  }
]