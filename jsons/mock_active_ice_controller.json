[
  {
    "label": "MockActiveIceController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockActiveIceController"
  },
  {
    "label": "MockActiveIceControllerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockActiveIceControllerFactory"
  },
  {
    "label": "MockActiveIceController()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_MOCK_ACTIVE_ICE_CONTROLLER_H_ # define P2P_BASE_MOCK_ACTIVE_ICE_CONTROLLER_H_ # include<memory> # include \" p2p / base / active_ice_controller_factory_interface . h \" # include \" p2p / base / active_ice_controller_interface . h \" # include \" test / gmock . h \" namespace cricket { class MockActiveIceController : public cricket::ActiveIceControllerInterface { public :)",
    "insertText": "MockActiveIceController(const cricket::ActiveIceControllerFactoryArgs& args)"
  },
  {
    "label": "MockActiveIceController()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockActiveIceController()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetIceConfig, (const cricket::IceConfig&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnectionAdded, (const cricket::Connection*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnectionSwitched, (const cricket::Connection*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnectionDestroyed, (const cricket::Connection*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnectionPinged, (const cricket::Connection*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnectionUpdated, (const cricket::Connection*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, GetUseCandidateAttribute, (const cricket::Connection*, cricket::NominationMode, cricket::IceMode), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnSortAndSwitchRequest, (cricket::IceSwitchReason), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnImmediateSortAndSwitchRequest, (cricket::IceSwitchReason), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, OnImmediateSwitchRequest, (cricket::IceSwitchReason, const cricket::Connection*), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(const cricket::Connection*, FindNextPingableConnection, (), (override))"
  },
  {
    "label": "MockActiveIceControllerFactory()",
    "kind": "Method",
    "detail": "Function (} ; class MockActiveIceControllerFactory : public cricket::ActiveIceControllerFactoryInterface { public : ~)",
    "insertText": "MockActiveIceControllerFactory()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<cricket::ActiveIceControllerInterface>)",
    "insertText": "Create(const cricket::ActiveIceControllerFactoryArgs& args)"
  },
  {
    "label": "RecordActiveIceControllerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordActiveIceControllerCreated()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(void, RecordActiveIceControllerCreated, ())"
  }
]