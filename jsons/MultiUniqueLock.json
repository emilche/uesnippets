[
  {
    "label": "TMultiUniqueLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMultiUniqueLock"
  },
  {
    "label": "TMultiUniqueLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Sort . h \" # include \" Containers / Array . h \" namespace UE { template<TLockType> class TMultiUniqueLock final { public :)",
    "insertText": "TMultiUniqueLock(const TArray<TLockType*>& Locks) : Locks(Locks)"
  },
  {
    "label": "SortAndLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAndLock()"
  },
  {
    "label": "TMultiUniqueLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMultiUniqueLock(TArray<TLockType*>&& Locks) : Locks(MoveTemp(Locks))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMultiUniqueLock&)",
    "insertText": "operator(const TArray<TLockType*>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TMultiUniqueLock&)",
    "insertText": "operator(TArray<TLockType*>&&)"
  },
  {
    "label": "TMultiUniqueLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TMultiUniqueLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (Lock ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(Locks)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (Lock ->)",
    "insertText": "Lock()"
  }
]