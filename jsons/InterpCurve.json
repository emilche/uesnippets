[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FInterpCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpCurve"
  },
  {
    "label": "Name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Name"
  },
  {
    "label": "TIsBitwiseConstructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsBitwiseConstructible"
  },
  {
    "label": "FInterpCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Algo / MinElement . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector . h \" # include \" Math / Quat . h \" # include \" Math / TwoVectors . h \" # include \" Math / InterpCurvePoint . h \" template<class T> class FInterpCurve { public : TArray<FInterpCurvePoint<T>> Points ; bool bIsLooped ; float LoopKeyOffset ; public :)",
    "insertText": "FInterpCurve() : bIsLooped(false) , LoopKeyOffset(0.f)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "AddPoint(const float InVal, const T &OutVal)"
  },
  {
    "label": "MovePoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MovePoint(int32 PointIndex, float NewInVal)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetLoopKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoopKey(float InLoopKey)"
  },
  {
    "label": "ClearLoopKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLoopKey()"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Eval(const float InVal, const T& Default = T(ForceInit))"
  },
  {
    "label": "EvalDerivative()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "EvalDerivative(const float InVal, const T& Default = T(ForceInit))"
  },
  {
    "label": "EvalSecondDerivative()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "EvalSecondDerivative(const float InVal, const T& Default = T(ForceInit))"
  },
  {
    "label": "FindNearest()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindNearest(const T &PointInSpace, float& OutDistanceSq)"
  },
  {
    "label": "InaccurateFindNearest()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InaccurateFindNearest(const T& PointInSpace, float& OutDistanceSq)"
  },
  {
    "label": "FindNearest()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindNearest(const T &PointInSpace, float& OutDistanceSq, float& OutSegment)"
  },
  {
    "label": "InaccurateFindNearest()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InaccurateFindNearest(const T& PointInSpace, float& OutDistanceSq, float& OutSegment)"
  },
  {
    "label": "FindNearestOnSegment()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindNearestOnSegment(const T &PointInSpace, int32 PtIdx, float& OutSquaredDistance)"
  },
  {
    "label": "InaccurateFindNearestOnSegment()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InaccurateFindNearestOnSegment(const T& PointInSpace, int32 PtIdx, float& OutSquaredDistance)"
  },
  {
    "label": "AutoSetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSetTangents(float Tension = 0.0f, bool bStationaryEndpoints = true)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcBounds(T& OutMin, T& OutMax, const T& Default = T(ForceInit))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : FArchive&)",
    "insertText": "operator(FArchive& Ar, FInterpCurve& Curve)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Curve . Points ;)",
    "insertText": "if(Ar.UEVer() >= VER_UE4_INTERPCURVE_SUPPORTS_LOOPING)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Curve . bIsLooped ; Ar<<Curve . LoopKeyOffset ; } return Ar ; } bool)",
    "insertText": "operator(const FInterpCurve& Curve1, const FInterpCurve& Curve2)"
  },
  {
    "label": "GetPointIndexForInputValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPointIndexForInputValue(const float InValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 i = 0 ;)",
    "insertText": "for(i=0; i<Points.Num() && Points[i].InVal < InVal; i++)"
  },
  {
    "label": "InsertUninitialized()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "InsertUninitialized(i)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Points [ i ] = FInterpCurvePoint<)",
    "insertText": "T(InVal, OutVal)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (const T OutVal = Points [ PointIndex ] . OutVal ; const EInterpCurveMode Mode = Points [ PointIndex ] . InterpMode ; const T ArriveTan = Points [ PointIndex ] . ArriveTangent ; const T LeaveTan = Points [ PointIndex ] . LeaveTangent ; Points .)",
    "insertText": "RemoveAt(PointIndex)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (const int32 NewPointIndex =)",
    "insertText": "AddPoint(NewInVal, OutVal)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "Empty()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (bIsLooped = false ; return ; } const float LastInKey = Points .)",
    "insertText": "Last()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumPoints = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 LastPoint = NumPoints - 1 ;)",
    "insertText": "check(NumPoints > 0)"
  },
  {
    "label": "MidIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MidIndex(MinIndex + MaxIndex)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (MinIndex = MidIndex ; } else { MaxIndex = MidIndex ; } } return MinIndex ; } template<class T> T FInterpCurve<T)",
    "insertText": "Eval(const float InVal, const T& Default)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 LastPoint = NumPoints - 1 ;)",
    "insertText": "if(NumPoints == 0)"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_NAN_DIAGNOSTIC)",
    "insertText": "logOrEnsureNanError(TEXT(\"FInterpCurve<T>::Eval has InVal == NaN\"))"
  },
  {
    "label": "GetPointIndexForInputValue()",
    "kind": "Method",
    "detail": "Function (# endif return Default ; } const int32 Index =)",
    "insertText": "GetPointIndexForInputValue(InVal)"
  },
  {
    "label": "bLoopSegment()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bLoopSegment(bIsLooped && Index == LastPoint)"
  },
  {
    "label": "bLoopSegment()",
    "kind": "Method",
    "detail": "Function (const int32 NextIndex =)",
    "insertText": "bLoopSegment(Index + 1)"
  },
  {
    "label": "LoopKeyOffset()",
    "kind": "Method",
    "detail": "Function (const auto& PrevPoint = Points [ Index ] ; const auto& NextPoint = Points [ NextIndex ] ; const float Diff = bLoopSegment ?)",
    "insertText": "LoopKeyOffset(NextPoint.InVal - PrevPoint.InVal)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Alpha(InVal - PrevPoint.InVal)"
  },
  {
    "label": "CubicInterp()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "CubicInterp(PrevPoint.OutVal, PrevPoint.LeaveTangent * Diff, NextPoint.OutVal, NextPoint.ArriveTangent * Diff, Alpha)"
  },
  {
    "label": "EvalDerivative()",
    "kind": "Method",
    "detail": "Function (} } else { return Points [ Index ] . OutVal ; } } template<class T> T FInterpCurve<T)",
    "insertText": "EvalDerivative(const float InVal, const T& Default)"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_NAN_DIAGNOSTIC)",
    "insertText": "logOrEnsureNanError(TEXT(\"FInterpCurve<T>::EvalDerivative has InVal == NaN\"))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} } else { return)",
    "insertText": "T(ForceInit)"
  },
  {
    "label": "EvalSecondDerivative()",
    "kind": "Method",
    "detail": "Function (} } template<class T> T FInterpCurve<T)",
    "insertText": "EvalSecondDerivative(const float InVal, const T& Default)"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_NAN_DIAGNOSTIC)",
    "insertText": "logOrEnsureNanError(TEXT(\"FInterpCurve<T>::EvalSecondDerivative has InVal == NaN\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Index == LastPoint)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "check(Index >= 0 && ((bIsLooped && Index < NumPoints) || (!bIsLooped && Index < LastPoint)))"
  },
  {
    "label": "FindNearest()",
    "kind": "Method",
    "detail": "Function (} } template<class T> float FInterpCurve<T)",
    "insertText": "FindNearest(const T& PointInSpace, float& OutDistanceSq)"
  },
  {
    "label": "FindNearest()",
    "kind": "Method",
    "detail": "Function (float OutSegment ; return)",
    "insertText": "FindNearest(PointInSpace, OutDistanceSq, OutSegment)"
  },
  {
    "label": "InaccurateFindNearest()",
    "kind": "Method",
    "detail": "Function (} template<class T> float FInterpCurve<T)",
    "insertText": "InaccurateFindNearest(const T &PointInSpace, float& OutDistanceSq)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 NumSegments = bIsLooped ? NumPoints : NumPoints - 1 ;)",
    "insertText": "if(NumPoints > 1)"
  },
  {
    "label": "FindNearestOnSegment()",
    "kind": "Method",
    "detail": "Function (float BestDistanceSq ; float BestResult =)",
    "insertText": "FindNearestOnSegment(PointInSpace, 0, BestDistanceSq)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float BestSegment = 0 ;)",
    "insertText": "for(int32 Segment = 1; Segment < NumSegments; ++Segment)"
  },
  {
    "label": "FindNearestOnSegment()",
    "kind": "Method",
    "detail": "Function (float LocalDistanceSq ; float LocalResult =)",
    "insertText": "FindNearestOnSegment(PointInSpace, Segment, LocalDistanceSq)"
  },
  {
    "label": "BestSegment()",
    "kind": "Method",
    "detail": "Function (BestDistanceSq = LocalDistanceSq ; BestResult = LocalResult ;)",
    "insertText": "BestSegment(float)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } OutDistanceSq = BestDistanceSq ; OutSegment = BestSegment ; return BestResult ; })",
    "insertText": "if(NumPoints == 1)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (OutDistanceSq = static_cast<)",
    "insertText": "float((PointInSpace - Points[0].OutVal).SizeSquared())"
  },
  {
    "label": "FindNearestOnSegment()",
    "kind": "Method",
    "detail": "Function (} template<class T> float FInterpCurve<T)",
    "insertText": "FindNearestOnSegment(const T& PointInSpace, int32 PtIdx, float& OutSquaredDistance)"
  },
  {
    "label": "NextPtIdx()",
    "kind": "Method",
    "detail": "Function (const int32 LastPoint = NumPoints - 1 ; const int32)",
    "insertText": "NextPtIdx(bIsLooped && PtIdx == LastPoint) ? 0 : (PtIdx + 1)"
  },
  {
    "label": "NextInVal()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "NextInVal(bIsLooped && PtIdx == LastPoint) ? (Points[LastPoint].InVal + LoopKeyOffset)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Distance1 = static_cast<)",
    "insertText": "float((Points[PtIdx].OutVal - PointInSpace).SizeSquared())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Distance2 = static_cast<)",
    "insertText": "float((Points[NextPtIdx].OutVal - PointInSpace).SizeSquared())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutSquaredDistance = Distance1 ; return Points [ PtIdx ] . InVal ; } OutSquaredDistance = Distance2 ; return NextInVal ; } const float Diff = NextInVal - Points [ PtIdx ] . InVal ;)",
    "insertText": "if(CIM_Linear == Points[PtIdx].InterpMode)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float A = static_cast<)",
    "insertText": "float((Points[PtIdx].OutVal - PointInSpace) | (Points[NextPtIdx].OutVal - Points[PtIdx].OutVal))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float B = static_cast<)",
    "insertText": "float((Points[NextPtIdx].OutVal - Points[PtIdx].OutVal).SizeSquared())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const float V =)",
    "insertText": "Clamp(-A / B, 0.f, 1.f)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (OutSquaredDistance = static_cast<)",
    "insertText": "float((FMath::Lerp(Points[PtIdx].OutVal, Points[NextPtIdx].OutVal, V) - PointInSpace).SizeSquared())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value = LastValue ; return true ; })",
    "insertText": "if(Value > MaxValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + NextValue ; MaxValue = StartValuesT [ NextValue> = NewtonIterationCount ? NewtonIterationCount - 1 : NextValue ] ; })",
    "insertText": "if(Value < MinValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T FoundPoint = Value> 0 . 5 ? PointsT [ NextPtIdx ] . OutVal : PointsT [ PtIdx ] . OutVal ;)",
    "insertText": "for(int32 Iter = 0; Iter < MaxIteration; ++Iter)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Value + = Move ; Value =)",
    "insertText": "Clamp(Value, 0.0f, 1.0f)"
  },
  {
    "label": "CubicInterp()",
    "kind": "Method",
    "detail": "Function (break ; } FoundPoint =)",
    "insertText": "CubicInterp(PointsT[PtIdx].OutVal, PointsT[PtIdx].LeaveTangent * Diff, PointsT[NextPtIdx].OutVal, PointsT[NextPtIdx].ArriveTangent * Diff, Value)"
  },
  {
    "label": "CubicInterpDerivative()",
    "kind": "Method",
    "detail": "Function (break ; } const T Tangent =)",
    "insertText": "CubicInterpDerivative(PointsT[PtIdx].OutVal, PointsT[PtIdx].LeaveTangent * Diff, PointsT[NextPtIdx].OutVal, PointsT[NextPtIdx].ArriveTangent * Diff, Value)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (const T)",
    "insertText": "Delta(PointInSpace - FoundPoint)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Move = static_cast<)",
    "insertText": "float(Tangent.Dot(Delta) / Tangent.SizeSquared())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "float((FoundPoint - PointInSpace).SizeSquared())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "for(int32 Index = 0; Index < NewtonIterationCount; ++Index)"
  },
  {
    "label": "Newton()",
    "kind": "Method",
    "detail": "Function (MinValue = StartValuesT [ Index = = 0 ? 0 : Index - 1 ] ; MaxValue = StartValuesT [ NextValue> = NewtonIterationCount ? Index : NextValue ] ; float& Value = ValuesT [ Index ] ; float& Move = NextMovesT [ Index ] ; DistancesSq [ Index ] =)",
    "insertText": "Newton(Value, Move, BreakIfConverged, NeverBreak, ToleranceStep1)"
  },
  {
    "label": "MinElement()",
    "kind": "Method",
    "detail": "Function (LastValue = UE_BIG_NUMBER ; } const float* MinValuePtr =)",
    "insertText": "MinElement(DistancesSq)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 IndexOfTheSmallest = MinValuePtr - DistancesSq ; float& Move = NextMovesT [ IndexOfTheSmallest ] ;)",
    "insertText": "if(!FMath::IsNearlyZero(Move, ToleranceToLaunchStep2))"
  },
  {
    "label": "Newton()",
    "kind": "Method",
    "detail": "Function (MinValue = 0 . f ; MaxValue = 1 . f ; float& Value = ValuesT [ IndexOfTheSmallest ] ; DistancesSq [ IndexOfTheSmallest ] =)",
    "insertText": "Newton(Value, Move, NeverBreak, BreakIfConverged, ToleranceStep2)"
  },
  {
    "label": "AutoSetTangents()",
    "kind": "Method",
    "detail": "Function (} template<class T> void FInterpCurve<T)",
    "insertText": "AutoSetTangents(float Tension, bool bStationaryEndpoints)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 LastPoint = NumPoints - 1 ;)",
    "insertText": "for(int32 PointIndex = 0; PointIndex < NumPoints; PointIndex++)"
  },
  {
    "label": "PrevIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "PrevIndex(PointIndex == 0) ? (bIsLooped ? LastPoint : 0) : (PointIndex - 1)"
  },
  {
    "label": "NextIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NextIndex(PointIndex == LastPoint) ? (bIsLooped ? 0 : LastPoint) : (PointIndex + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto& ThisPoint = Points [ PointIndex ] ; const auto& PrevPoint = Points [ PrevIndex ] ; const auto& NextPoint = Points [ NextIndex ] ;)",
    "insertText": "if(ThisPoint.InterpMode == CIM_CurveAuto || ThisPoint.InterpMode == CIM_CurveAutoClamped)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(PrevPoint.IsCurveKey())"
  },
  {
    "label": "bWantClamping()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bWantClamping(ThisPoint.InterpMode == CIM_CurveAutoClamped)"
  },
  {
    "label": "PrevTime()",
    "kind": "Method",
    "detail": "Function (T Tangent ; const float)",
    "insertText": "PrevTime(bIsLooped && PointIndex == 0) ? (ThisPoint.InVal - LoopKeyOffset)"
  },
  {
    "label": "NextTime()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "NextTime(bIsLooped && PointIndex == LastPoint) ? (ThisPoint.InVal + LoopKeyOffset)"
  },
  {
    "label": "ComputeCurveTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCurveTangent(PrevTime, PrevPoint.OutVal, ThisPoint.InVal, ThisPoint.OutVal, NextTime, NextPoint.OutVal, Tension, bWantClamping, Tangent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ThisPoint . ArriveTangent = Tangent ; ThisPoint . LeaveTangent = Tangent ; } else { ThisPoint . ArriveTangent = PrevPoint . ArriveTangent ; ThisPoint . LeaveTangent = PrevPoint . LeaveTangent ; } } else)",
    "insertText": "if(ThisPoint.InterpMode == CIM_Linear)"
  },
  {
    "label": "IsCurveKey()",
    "kind": "Method",
    "detail": "Function (ThisPoint . LeaveTangent = NextPoint . OutVal - ThisPoint . OutVal ; ThisPoint . ArriveTangent = PrevPoint .)",
    "insertText": "IsCurveKey()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ThisPoint.InterpMode == CIM_Constant)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (} } } template<class T> void FInterpCurve<T)",
    "insertText": "CalcBounds(T& OutMin, T& OutMax, const T& Default)"
  },
  {
    "label": "NumPoints()",
    "kind": "Method",
    "detail": "Function (OutMin = Points [ 0 ] . OutVal ; OutMax = Points [ 0 ] . OutVal ; } else { OutMin = Points [ 0 ] . OutVal ; OutMax = Points [ 0 ] . OutVal ; const int32 NumSegments = bIsLooped ?)",
    "insertText": "NumPoints(NumPoints - 1)"
  },
  {
    "label": "NextIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NextIndex(Index == NumPoints - 1) ? 0 : (Index + 1)"
  },
  {
    "label": "CurveFindIntervalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveFindIntervalBounds(Points[Index], Points[NextIndex], OutMin, OutMax, 0.0f)"
  },
  {
    "label": "DEFINE_INTERPCURVE_WRAPPER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} } } # define)",
    "insertText": "DEFINE_INTERPCURVE_WRAPPER_STRUCT(Name, ElementType)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ typedef FInterpCurve<ElementType> Super ; \\ \\ public : \\)",
    "insertText": "Name() \\ : Super()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\)",
    "insertText": "Name(const Super& Other) \\ : Super( Other)"
  }
]