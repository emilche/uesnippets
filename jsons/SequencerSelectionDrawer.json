[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ISidebarChannelExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarChannelExtension"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FCurveChannelSectionSidebarExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveChannelSectionSidebarExtension"
  },
  {
    "label": "FKeyEditData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEditData"
  },
  {
    "label": "FChannelGroupOutlinerModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelGroupOutlinerModel"
  },
  {
    "label": "FSequencerSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelection"
  },
  {
    "label": "FSequencerSelectionDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelectionDrawer"
  },
  {
    "label": "FSequencerSelectionDrawer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModelPtr . h \" # include \" Sidebar / ISidebarDrawerContent . h \" # include \" Templates / SharedPointerFwd . h \" class FMenuBuilder ; class FName ; class FSequencer ; class FText ; class ISidebarChannelExtension ; class SVerticalBox ; class SWidget ; struct FCurveChannelSectionSidebarExtension ; struct FKeyEditData ; namespace UE::Sequencer { class FChannelGroupOutlinerModel ; class FSequencerSelection ; } class FSequencerSelectionDrawer : public ISidebarDrawerContent { public : const FName UniqueId ;)",
    "insertText": "FSequencerSelectionDrawer(const TWeakPtr<FSequencer>& InWeakSequencer)"
  },
  {
    "label": "FSequencerSelectionDrawer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequencerSelectionDrawer()"
  },
  {
    "label": "GetUniqueId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniqueId()"
  },
  {
    "label": "GetSectionId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSectionId()"
  },
  {
    "label": "GetSectionDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionDisplayText()"
  },
  {
    "label": "CreateContentWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateContentWidget()"
  },
  {
    "label": "OnSequencerSelectionChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnSequencerSelectionChanged()"
  },
  {
    "label": "UpdateFromSelectionNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFromSelectionNextFrame()"
  },
  {
    "label": "BuildKeySelectionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildKeySelectionDetails(const TSharedRef<UE::Sequencer::FSequencerSelection>& InSelection, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildTrackAreaDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackAreaDetails(const TSharedRef<UE::Sequencer::FSequencerSelection>& InSelection, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildOutlinerDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOutlinerDetails(const TSharedRef<UE::Sequencer::FSequencerSelection>& InSelection, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildMarkedFrameDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMarkedFrameDetails(const TSharedRef<UE::Sequencer::FSequencerSelection>& InSelection, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildExtensionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildExtensionDetails(const TSet<UE::Sequencer::TViewModelPtr<UE::Sequencer::FChannelGroupOutlinerModel>>& InChannelGroups, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "CreateHintText()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateHintText(const FText& InMessage)"
  },
  {
    "label": "CreateNoSelectionHintText()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateNoSelectionHintText()"
  },
  {
    "label": "GetKeyEditData()",
    "kind": "Method",
    "detail": "Function (FKeyEditData)",
    "insertText": "GetKeyEditData()"
  },
  {
    "label": "CreateKeyFrameDetails()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateKeyFrameDetails(const TSharedRef<UE::Sequencer::FSequencerSelection>& InSequencerSelection)"
  },
  {
    "label": "ResetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetContent()"
  },
  {
    "label": "AreAllSameNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllSameNames(const TArray<FName>& InNames)"
  }
]