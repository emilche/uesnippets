[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Category",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Category"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FDiffResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffResults"
  },
  {
    "label": "FDiffSingleResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / StyleColors . h \" # include \" Styling / AppStyle . h \" namespace EDiffType { enum Type { NO_DIFFERENCE,OBJECT_REMOVED,OBJECT_ADDED,OBJECT_PROPERTY,OBJECT_REQUEST_DIFF,NODE_REMOVED,NODE_ADDED,PIN_LINKEDTO_NUM_DEC,PIN_LINKEDTO_NUM_INC,PIN_DEFAULT_VALUE,PIN_TYPE_CATEGORY,PIN_TYPE_SUBCATEGORY,PIN_TYPE_SUBCATEGORY_OBJECT,PIN_TYPE_IS_ARRAY,PIN_TYPE_IS_REF,PIN_LINKEDTO_NODE,PIN_LINKEDTO_PIN,NODE_MOVED,TIMELINE_LENGTH,TIMELINE_AUTOPLAY,TIMELINE_LOOP,TIMELINE_IGNOREDILATION,TIMELINE_NUM_TRACKS,TIMELINE_TRACK_MODIFIED,NODE_PIN_COUNT,NODE_COMMENT,NODE_PROPERTY,INFO_MESSAGE } ; enum Category { ADDITION,SUBTRACTION,MODIFICATION,MINOR,CONTROL,} ; } struct FDiffSingleResult {)",
    "insertText": "FDiffSingleResult()"
  },
  {
    "label": "GetDisplayColor()",
    "kind": "Method",
    "detail": "Function (Diff = EDiffType::NO_DIFFERENCE ; Node1 = nullptr ; Node2 = nullptr ; Pin1 = nullptr ; Pin2 = nullptr ; Object1 = nullptr ; Object2 = nullptr ; } EDiffType::Type Diff ; EDiffType::Category Category ; class UEdGraphNode* Node1 ; class UEdGraphNode* Node2 ; class UEdGraphPin* Pin1 ; class UEdGraphPin* Pin2 ; UObject* Object1 ; UObject* Object2 ; FText DisplayString ; FText ToolTip ; FLinearColor)",
    "insertText": "GetDisplayColor()"
  },
  {
    "label": "GetSpecifiedColor()",
    "kind": "Method",
    "detail": "Function (default : return FStyleColors::Foreground .)",
    "insertText": "GetSpecifiedColor()"
  },
  {
    "label": "IsRealDifference()",
    "kind": "Method",
    "detail": "Function (} } FString OwningObjectPath ; bool)",
    "insertText": "IsRealDifference()"
  },
  {
    "label": "FDiffResults()",
    "kind": "Method",
    "detail": "Function (} struct FDiffResults {)",
    "insertText": "FDiffResults(TArray<FDiffSingleResult>* InResultArray): ResultArray(InResultArray), bHasFoundDiffs(false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FDiffSingleResult& Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasFoundDiffs = true ;)",
    "insertText": "if(ResultArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResultArray ->)",
    "insertText": "Add(Result)"
  },
  {
    "label": "CanStoreResults()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "CanStoreResults()"
  },
  {
    "label": "HasFoundDiffs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFoundDiffs()"
  }
]