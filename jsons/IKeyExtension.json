[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FKeyDrawParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawParams"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "FCachedKeys",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedKeys"
  },
  {
    "label": "FCachedKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedKey"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Curves / KeyHandle . h \" # include \" Misc / FrameTime . h \" struct FGuid ; struct FPointerEvent ; struct FKeyDrawParams ; struct FGeometry ; class FCurveModel ; namespace UE::Sequencer { struct FCachedKeys { TArray<FKeyHandle> KeyHandles ; TArray<FFrameTime> KeyTimes ; struct FCachedKey { FFrameTime Time ; FKeyHandle Handle =)",
    "insertText": "Invalid()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetKeysInRange()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetKeysInRange(const TRange<FFrameTime>& Range, TArrayView<const FFrameTime>* OutKeyTimes, TArrayView<const FKeyHandle>* OutHandles)"
  },
  {
    "label": "GetKeysInRangeWithBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeysInRangeWithBounds(const TRange<FFrameTime>& Range, TArrayView<const FFrameTime>* OutKeyTimes, TArrayView<const FKeyHandle>* OutHandles, FCachedKey* OutLeadingKey, FCachedKey* OutTrailingKey)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} ; class IKeyExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IKeyExtension) virtual ~IKeyExtension()"
  },
  {
    "label": "UpdateCachedKeys()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateCachedKeys(TSharedPtr<FCachedKeys>& OutCachedKeys)"
  },
  {
    "label": "GetFixedExtents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFixedExtents(double& OutFixedMin, double& OutFixedMax)"
  },
  {
    "label": "DrawKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawKeys(TArrayView<const FKeyHandle> InKeyHandles, TArrayView<FKeyDrawParams> OutKeyDrawParams)"
  },
  {
    "label": "CreateCurveModel()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FCurveModel>)",
    "insertText": "CreateCurveModel()"
  }
]