[
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "RtpPacketizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketizer"
  },
  {
    "label": "PayloadSizeLimits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PayloadSizeLimits"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H_ # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" namespace webrtc { class RtpPacketToSend ; class RtpPacketizer { public : struct PayloadSizeLimits { int max_payload_len = 1 2 0 0 ; int first_packet_reduction_len = 0 ; int last_packet_reduction_len = 0 ; int single_packet_reduction_len = 0 ; } ; std::unique_ptr<RtpPacketizer>)",
    "insertText": "Create(absl::optional<VideoCodecType> type, rtc::ArrayView<const uint8_t> payload, PayloadSizeLimits limits, const RTPVideoHeader& rtp_video_header)"
  },
  {
    "label": "RtpPacketizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPacketizer()"
  },
  {
    "label": "NumPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumPackets()"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextPacket(RtpPacketToSend* packet)"
  },
  {
    "label": "SplitAboutEqually()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "SplitAboutEqually(int payload_len, const PayloadSizeLimits& limits)"
  }
]