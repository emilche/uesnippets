[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "WindowClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowClass"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_MESSAGE_WINDOW_H_ # define BASE_WIN_MESSAGE_WINDOW_H_ # include<string> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / compiler_specific . h \" # include \" base / threading / thread_checker . h \" # include \" base / win / windows_types . h \" # undef FindWindow namespace base { namespace win { class BASE_EXPORT MessageWindow { public : class WindowClass ; using MessageCallback = base::RepeatingCallback<)",
    "insertText": "bool(UINT message, WPARAM wparam, LPARAM lparam, LRESULT* result)"
  },
  {
    "label": "MessageWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageWindow()"
  },
  {
    "label": "MessageWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessageWindow(const MessageWindow&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessageWindow&)",
    "insertText": "operator(const MessageWindow&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(MessageCallback message_callback)"
  },
  {
    "label": "CreateNamed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateNamed(MessageCallback message_callback, const std::wstring& window_name)"
  },
  {
    "label": "hwnd()",
    "kind": "Method",
    "detail": "Function (HWND)",
    "insertText": "hwnd()"
  },
  {
    "label": "DoCreate()",
    "kind": "Method",
    "detail": "Function (private : class WindowClass ; bool)",
    "insertText": "DoCreate(MessageCallback message_callback, const wchar_t* window_name)"
  },
  {
    "label": "WindowProc()",
    "kind": "Method",
    "detail": "Function (LRESULT CALLBACK)",
    "insertText": "WindowProc(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam)"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (MessageCallback message_callback_ ; HWND window_ = nullptr ;)",
    "insertText": "THREAD_CHECKER(thread_checker_)"
  }
]