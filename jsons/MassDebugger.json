[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UMassProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassProcessor"
  },
  {
    "label": "FMassEntityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityQuery"
  },
  {
    "label": "FMassEntityManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityManager"
  },
  {
    "label": "FMassArchetypeHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeHandle"
  },
  {
    "label": "FMassFragmentRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassFragmentRequirements"
  },
  {
    "label": "FMassFragmentRequirementDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassFragmentRequirementDescription"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FArchetypeStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchetypeStats"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "FEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvironment"
  },
  {
    "label": "FMassArchetypeCompositionDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeCompositionDescriptor"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassProcessingTypes . h \" # if WITH_MASSENTITY_DEBUG # include \" Containers / ContainersFwd . h \" # include \" MassEntityQuery . h \" # include \" MassProcessor . h \" # include \" Misc / SpinLock . h \" # include \" StructUtils / InstancedStruct . h \" # include \" Logging / TokenizedMessage . h \" class FOutputDevice ; class UMassProcessor ; struct FMassEntityQuery ; struct FMassEntityManager ; struct FMassArchetypeHandle ; struct FMassFragmentRequirements ; struct FMassFragmentRequirementDescription ; enum class EMassFragmentAccess : uint8 ; enum class EMassFragmentPresence : uint8 ; # endif # include \" MassDebugger . generated . h \" namespace UE::Mass::Debug { struct FArchetypeStats { int32 EntitiesCount = 0 ; int32 EntitiesCountPerChunk = 0 ; int32 ChunksCount = 0 ; SIZE_T AllocatedSize = 0 ; SIZE_T WastedEntityMemory = 0 ; SIZE_T BytesPerEntity = 0 ; } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() explicit FMassGenericDebugEvent(const UObject* InContext = nullptr) #if WITH_EDITORONLY_DATA : Context(InContext)"
  },
  {
    "label": "MASS_IF_ENTITY_DEBUGGED()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA const UObject* Context = nullptr ; # endif } ; # if WITH_MASSENTITY_DEBUG namespace UE::Mass::Debug { bool bAllowProceduralDebuggedEntitySelection ; bool bAllowBreakOnDebuggedEntity ; bool bTestSelectedEntityAgainstProcessorQueries ; } # define)",
    "insertText": "MASS_IF_ENTITY_DEBUGGED(Manager, EntityHandle) (FMassDebugger::GetSelectedEntity(Manager) == EntityHandle) #define MASS_BREAK_IF_ENTITY_DEBUGGED(Manager, EntityHandle)"
  },
  {
    "label": "PLATFORM_BREAK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PLATFORM_BREAK()"
  },
  {
    "label": "MASS_BREAK_IF_ENTITY_INDEX()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "MASS_BREAK_IF_ENTITY_INDEX(EntityHandle, InIndex)"
  },
  {
    "label": "MASS_SET_ENTITY_DEBUGGED()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "MASS_SET_ENTITY_DEBUGGED(Manager, EntityHandle)"
  },
  {
    "label": "SelectEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectEntity(Manager, EntityHandle)"
  },
  {
    "label": "DebugGetFragmentAccessString()",
    "kind": "Method",
    "detail": "Function (} } enum class EMassDebugMessageSeverity : uint8 { Error,Warning,Info,Default,MAX = Default } ; namespace UE::Mass::Debug { struct FQueryRequirementsView { TConstArrayView<FMassFragmentRequirementDescription> FragmentRequirements ; TConstArrayView<FMassFragmentRequirementDescription> ChunkRequirements ; TConstArrayView<FMassFragmentRequirementDescription> ConstSharedRequirements ; TConstArrayView<FMassFragmentRequirementDescription> SharedRequirements ; const FMassTagBitSet& RequiredAllTags ; const FMassTagBitSet& RequiredAnyTags ; const FMassTagBitSet& RequiredNoneTags ; const FMassTagBitSet& RequiredOptionalTags ; const FMassExternalSubsystemBitSet& RequiredConstSubsystems ; const FMassExternalSubsystemBitSet& RequiredMutableSubsystems ; } ; FString)",
    "insertText": "DebugGetFragmentAccessString(EMassFragmentAccess Access)"
  },
  {
    "label": "DebugOutputDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugOutputDescription(TConstArrayView<UMassProcessor*> Processors, FOutputDevice& Ar)"
  },
  {
    "label": "HasDebugEntities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDebugEntities()"
  },
  {
    "label": "IsDebuggingSingleEntity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggingSingleEntity()"
  },
  {
    "label": "GetDebugEntitiesRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDebugEntitiesRange(int32& OutBegin, int32& OutEnd)"
  },
  {
    "label": "IsDebuggingEntity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebuggingEntity(FMassEntityHandle Entity, FColor* OutEntityColor = nullptr)"
  },
  {
    "label": "GetEntityDebugColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetEntityDebugColor(FMassEntityHandle Entity)"
  },
  {
    "label": "MassSeverityToMessageSeverity()",
    "kind": "Method",
    "detail": "Function (EMessageSeverity::Type)",
    "insertText": "MassSeverityToMessageSeverity(EMessageSeverity::Type OriginalSeverity, EMassDebugMessageSeverity MassSeverity)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (EMessageSeverity::Type ConversionMap [)",
    "insertText": "int(EMassDebugMessageSeverity::MAX)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (EMessageSeverity::Error,EMessageSeverity::Warning,EMessageSeverity::Info } ; return MassSeverity = = EMassDebugMessageSeverity::Default ? OriginalSeverity : ConversionMap [)",
    "insertText": "int(MassSeverity)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } struct FMassDebugger {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnEntitySelected, const FMassEntityManager&, const FMassEntityHandle)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnMassEntityManagerEvent, const FMassEntityManager&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnDebugEvent, const FName , FConstStructView , const EMassDebugMessageSeverity)"
  },
  {
    "label": "FEnvironment()",
    "kind": "Method",
    "detail": "Function (struct FEnvironment { TWeakPtr<const FMassEntityManager> EntityManager ; FMassEntityHandle SelectedEntity ;)",
    "insertText": "FEnvironment(const FMassEntityManager& InEntityManager) : EntityManager(InEntityManager.AsWeak())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetProcessorQueries()",
    "kind": "Method",
    "detail": "Function (} } ; TConstArrayView<FMassEntityQuery*>)",
    "insertText": "GetProcessorQueries(const UMassProcessor& Processor)"
  },
  {
    "label": "GetUpToDateProcessorQueries()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FMassEntityQuery*>)",
    "insertText": "GetUpToDateProcessorQueries(const FMassEntityManager& EntitySubsystem, UMassProcessor& Processor)"
  },
  {
    "label": "GetQueryRequirements()",
    "kind": "Method",
    "detail": "Function (UE::Mass::Debug::FQueryRequirementsView)",
    "insertText": "GetQueryRequirements(const FMassEntityQuery& Query)"
  },
  {
    "label": "GetQueryExecutionRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetQueryExecutionRequirements(const FMassEntityQuery& Query, FMassExecutionRequirements& OutExecutionRequirements)"
  },
  {
    "label": "GetAllArchetypes()",
    "kind": "Method",
    "detail": "Function (TArray<FMassArchetypeHandle>)",
    "insertText": "GetAllArchetypes(const FMassEntityManager& EntitySubsystem)"
  },
  {
    "label": "GetArchetypeComposition()",
    "kind": "Method",
    "detail": "Function (const FMassArchetypeCompositionDescriptor&)",
    "insertText": "GetArchetypeComposition(const FMassArchetypeHandle& ArchetypeHandle)"
  },
  {
    "label": "GetArchetypeEntityStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetArchetypeEntityStats(const FMassArchetypeHandle& ArchetypeHandle, UE::Mass::Debug::FArchetypeStats& OutStats)"
  },
  {
    "label": "GetArchetypeDebugNames()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<FName>)",
    "insertText": "GetArchetypeDebugNames(const FMassArchetypeHandle& ArchetypeHandle)"
  },
  {
    "label": "GetProcessingGraph()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<UMassCompositeProcessor::FDependencyNode>)",
    "insertText": "GetProcessingGraph(const UMassCompositeProcessor& GraphOwner)"
  },
  {
    "label": "GetHostedProcessors()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<TObjectPtr<UMassProcessor>>)",
    "insertText": "GetHostedProcessors(const UMassCompositeProcessor& GraphOwner)"
  },
  {
    "label": "GetSingleRequirementDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSingleRequirementDescription(const FMassFragmentRequirementDescription& Requirement)"
  },
  {
    "label": "GetRequirementsDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRequirementsDescription(const FMassFragmentRequirements& Requirements)"
  },
  {
    "label": "GetArchetypeRequirementCompatibilityDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchetypeRequirementCompatibilityDescription(const FMassFragmentRequirements& Requirements, const FMassArchetypeHandle& ArchetypeHandle)"
  },
  {
    "label": "GetArchetypeRequirementCompatibilityDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchetypeRequirementCompatibilityDescription(const FMassFragmentRequirements& Requirements, const FMassArchetypeCompositionDescriptor& ArchetypeComposition)"
  },
  {
    "label": "OutputArchetypeDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputArchetypeDescription(FOutputDevice& Ar, const FMassArchetypeHandle& Archetype)"
  },
  {
    "label": "OutputEntityDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEntityDescription(FOutputDevice& Ar, const FMassEntityManager& EntityManager, const int32 EntityIndex, const TCHAR* InPrefix = TEXT(\"\"))"
  },
  {
    "label": "OutputEntityDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEntityDescription(FOutputDevice& Ar, const FMassEntityManager& EntityManager, const FMassEntityHandle Entity, const TCHAR* InPrefix = TEXT(\"\"))"
  },
  {
    "label": "SelectEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectEntity(const FMassEntityManager& EntityManager, const FMassEntityHandle EntityHandle)"
  },
  {
    "label": "GetSelectedEntity()",
    "kind": "Method",
    "detail": "Function (FMassEntityHandle)",
    "insertText": "GetSelectedEntity(const FMassEntityManager& EntityManager)"
  },
  {
    "label": "DebugEvent()",
    "kind": "Method",
    "detail": "Function (FOnEntitySelected OnEntitySelectedDelegate ; FOnMassEntityManagerEvent OnEntityManagerInitialized ; FOnMassEntityManagerEvent OnEntityManagerDeinitialized ; FOnDebugEvent OnDebugEvent ; void)",
    "insertText": "DebugEvent(const FName EventName, FConstStructView Payload, const EMassDebugMessageSeverity SeverityOverride = EMassDebugMessageSeverity::Default)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnDebugEvent .)",
    "insertText": "Broadcast(EventName, Payload, SeverityOverride)"
  },
  {
    "label": "DebugEvent()",
    "kind": "Method",
    "detail": "Function (} template<TMessage,. . . TArgs> void)",
    "insertText": "DebugEvent(TArgs&&... InArgs)"
  },
  {
    "label": "DebugEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugEvent(TMessage::StaticStruct()->GetFName() , FConstStructView::Make(TMessage(Forward<TArgs>(InArgs)...)))"
  },
  {
    "label": "RegisterEntityManager()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterEntityManager(FMassEntityManager& EntityManager)"
  },
  {
    "label": "UnregisterEntityManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterEntityManager(FMassEntityManager& EntityManager)"
  },
  {
    "label": "GetEnvironments()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FEnvironment>)",
    "insertText": "GetEnvironments()"
  },
  {
    "label": "GetSingleRequirementDescription()",
    "kind": "Method",
    "detail": "Function (private : TArray<FEnvironment> ActiveEnvironments ; UE::FSpinLock EntityManagerRegistrationLock ; } ; # else struct FMassArchetypeHandle ; struct FMassFragmentRequirements ; struct FMassFragmentRequirementDescription ; struct FMassArchetypeCompositionDescriptor ; struct FMassDebugger { FString)",
    "insertText": "GetSingleRequirementDescription(const FMassFragmentRequirementDescription&)"
  },
  {
    "label": "GetRequirementsDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetRequirementsDescription(const FMassFragmentRequirements&)"
  },
  {
    "label": "GetArchetypeRequirementCompatibilityDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchetypeRequirementCompatibilityDescription(const FMassFragmentRequirements&, const FMassArchetypeHandle&)"
  },
  {
    "label": "GetArchetypeRequirementCompatibilityDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchetypeRequirementCompatibilityDescription(const FMassFragmentRequirements&, const FMassArchetypeCompositionDescriptor&)"
  }
]