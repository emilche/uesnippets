[
  {
    "label": "RegisterStateCheck",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterStateCheck"
  },
  {
    "label": "RegisterStateCheckMMX",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterStateCheckMMX"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_REGISTER_STATE_CHECK_H_ # define VPX_TEST_REGISTER_STATE_CHECK_H_ # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # if)",
    "insertText": "defined(_WIN64) && VPX_ARCH_X86_64 #undef NOMINMAX #define NOMINMAX #ifndef WIN32_LEAN_AND_MEAN #define WIN32_LEAN_AND_MEAN #endif #include <intrin.h> #include <windows.h> #include <winnt.h> inline bool operator==(const M128A &lhs, const M128A &rhs)"
  },
  {
    "label": "RegisterStateCheck()",
    "kind": "Method",
    "detail": "Function (} namespace libvpx_test { class RegisterStateCheck { public :)",
    "insertText": "RegisterStateCheck()"
  },
  {
    "label": "StoreRegisters()",
    "kind": "Method",
    "detail": "Function (initialized_ =)",
    "insertText": "StoreRegisters(&pre_context_)"
  },
  {
    "label": "StoreRegisters()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "StoreRegisters(CONTEXT *const context)"
  },
  {
    "label": "GetCurrentThread()",
    "kind": "Method",
    "detail": "Function (const HANDLE this_thread =)",
    "insertText": "GetCurrentThread()"
  },
  {
    "label": "EXPECT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_NE(this_thread, nullptr)"
  },
  {
    "label": "GetThreadContext()",
    "kind": "Method",
    "detail": "Function (context -> ContextFlags = CONTEXT_FLOATING_POINT ; const bool context_saved =)",
    "insertText": "GetThreadContext(this_thread, context)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(context_saved) << \"GetLastError: \" << GetLastError()"
  },
  {
    "label": "ASSERT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_TRUE(initialized_)"
  },
  {
    "label": "ASSERT_TRUE()",
    "kind": "Method",
    "detail": "Function (CONTEXT post_context ;)",
    "insertText": "ASSERT_TRUE(StoreRegisters(&post_context))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const M128A* xmm_pre =& pre_context_ . Xmm6 ; const M128A* xmm_post =& post_context . Xmm6 ;)",
    "insertText": "for(int i = 6; i <= 15; ++i)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(*xmm_pre, *xmm_post)"
  },
  {
    "label": "ASM_REGISTER_STATE_CHECK()",
    "kind": "Method",
    "detail": "Function (+ + xmm_pre ; + + xmm_post ; } } bool initialized_ ; CONTEXT pre_context_ ; } ; # define)",
    "insertText": "ASM_REGISTER_STATE_CHECK(statement)"
  },
  {
    "label": "_ReadWriteBarrier()",
    "kind": "Method",
    "detail": "Function (\\ { \\ libvpx_test::RegisterStateCheck reg_check ; \\ statement ; \\ } \\)",
    "insertText": "_ReadWriteBarrier()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) } #elif defined(CONFIG_SHARED) && defined(HAVE_NEON_ASM) && \\ defined(CONFIG_VP9)"
  },
  {
    "label": "vpx_push_neon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_push_neon(int64_t *store)"
  },
  {
    "label": "vpx_push_neon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_push_neon(pre_store_)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Check()"
  },
  {
    "label": "vpx_push_neon()",
    "kind": "Method",
    "detail": "Function (int64_t post_store [ 8 ] ;)",
    "insertText": "vpx_push_neon(post_store)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(pre_store_[i], post_store[i])"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } int64_t pre_store_ [ 8 ] ; } ; # if)",
    "insertText": "defined(__GNUC__) #define ASM_REGISTER_STATE_CHECK(statement)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ { \\ libvpx_test::RegisterStateCheck reg_check ; \\ statement ; \\ } \\ __asm__)",
    "insertText": "volatile(\"\" ::: \"memory\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) #else #define ASM_REGISTER_STATE_CHECK(statement)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ libvpx_test::RegisterStateCheck reg_check ; \\ statement ; \\ })",
    "insertText": "while(false)"
  },
  {
    "label": "ASM_REGISTER_STATE_CHECK()",
    "kind": "Method",
    "detail": "Function (class RegisterStateCheck { } ; # define)",
    "insertText": "ASM_REGISTER_STATE_CHECK(statement) statement } #endif #if VPX_ARCH_X86 || VPX_ARCH_X86_64 #if defined(__GNUC__)"
  },
  {
    "label": "RegisterStateCheckMMX()",
    "kind": "Method",
    "detail": "Function (class RegisterStateCheckMMX { public :)",
    "insertText": "RegisterStateCheckMMX()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "volatile(\"fstenv %0\" : \"=rm\"(pre_fpu_env_))"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(0xffff, pre_fpu_env_[4])"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (uint16_t post_fpu_env [ 1 4 ] ; __asm__)",
    "insertText": "volatile(\"fstenv %0\" : \"=rm\"(post_fpu_env))"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(0xffff, post_fpu_env[4])"
  },
  {
    "label": "API_REGISTER_STATE_CHECK()",
    "kind": "Method",
    "detail": "Function (} uint16_t pre_fpu_env_ [ 1 4 ] ; } ; # define)",
    "insertText": "API_REGISTER_STATE_CHECK(statement)"
  }
]