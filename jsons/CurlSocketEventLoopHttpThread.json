[
  {
    "label": "FHttpRequestCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestCommon"
  },
  {
    "label": "FCurlSocketEventLoopHttpThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlSocketEventLoopHttpThread"
  },
  {
    "label": "FCurlSocketData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurlSocketData"
  },
  {
    "label": "FCurlSocketEventLoopHttpThread()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # if WITH_CURL # if WITH_CURL_MULTISOCKET # include \" EventLoopHttpThread . h \" # include \" EventLoop / BSDSocket / EventLoopIOManagerBSDSocket . h \" # include \" EventLoop / EventLoop . h \" # include \" Templates / Function . h \" # if PLATFORM_MICROSOFT # include \" Microsoft / AllowMicrosoftPlatformTypes . h \" # endif # ifdef PLATFORM_CURL_INCLUDE # include PLATFORM_CURL_INCLUDE # else # include \" curl / curl . h \" # endif # if PLATFORM_MICROSOFT # include \" Microsoft / HideMicrosoftPlatformTypes . h \" # endif class FHttpRequestCommon ; class FCurlSocketEventLoopHttpThread : public FEventLoopHttpThread { public :)",
    "insertText": "FCurlSocketEventLoopHttpThread()"
  },
  {
    "label": "HttpThreadTick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "HttpThreadTick(float DeltaSeconds)"
  },
  {
    "label": "StartThreadedRequest()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "StartThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CompleteThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteThreadedRequest(FHttpRequestCommon* Request)"
  },
  {
    "label": "CreateEventLoop()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS protected : void)",
    "insertText": "CreateEventLoop()"
  },
  {
    "label": "DestroyEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEventLoop()"
  },
  {
    "label": "UpdateEventLoopConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventLoopConfigs()"
  },
  {
    "label": "GetEventLoop()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop*)",
    "insertText": "GetEventLoop()"
  },
  {
    "label": "GetEventLoopChecked()",
    "kind": "Method",
    "detail": "Function (UE::EventLoop::IEventLoop&)",
    "insertText": "GetEventLoopChecked()"
  },
  {
    "label": "CurlSocketCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CurlSocketCallback(CURL* CurlE, curl_socket_t Socket, int EventFlags, void* UserData, void* SocketData)"
  },
  {
    "label": "HandleCurlSocketCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HandleCurlSocketCallback(CURL* CurlE, curl_socket_t Socket, int EventFlags, void* SocketData)"
  },
  {
    "label": "CurlTimerCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CurlTimerCallback(CURLM* CurlM, long TimeoutMS, void* UserData)"
  },
  {
    "label": "HandleCurlTimerCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HandleCurlTimerCallback(CURLM* CurlM, long TimeoutMS)"
  },
  {
    "label": "ProcessCurlSocketActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCurlSocketActions(curl_socket_t Socket, int EventFlags)"
  },
  {
    "label": "ProcessCurlSocketEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCurlSocketEvent(curl_socket_t Socket, UE::EventLoop::ESocketIoRequestStatus Status, UE::EventLoop::EIOFlags Flags)"
  },
  {
    "label": "ProcessCurlRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCurlRequests()"
  }
]