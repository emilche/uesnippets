[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FDebugObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugObjectInfo"
  },
  {
    "label": "FRewindDebuggerTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRewindDebuggerTrack"
  },
  {
    "label": "FPropertiesTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertiesTrack"
  },
  {
    "label": "REWINDDEBUGGERINTERFACE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "REWINDDEBUGGERINTERFACE_API"
  },
  {
    "label": "SPropertiesDebugViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertiesDebugViewBase"
  },
  {
    "label": "FObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectInfo"
  },
  {
    "label": "IGameplayProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameplayProvider"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TraceServices / Model / Frames . h \" # include \" IRewindDebugger . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogRewindDebugger, Log, All)"
  },
  {
    "label": "FDebugObjectInfo()",
    "kind": "Method",
    "detail": "Function (namespace TraceServices { class IAnalysisSession ; } struct FDebugObjectInfo {)",
    "insertText": "FDebugObjectInfo(uint64 Id, const FString& Name): ObjectId(Id), ObjectName(Name), bExpanded(true)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} uint64 ObjectId ; FString ObjectName ; bool bExpanded ; TArray<TSharedPtr<FDebugObjectInfo>> Children ; } ; namespace RewindDebugger { class FRewindDebuggerTrack ; class FPropertiesTrack ; })",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "IRewindDebugger()",
    "kind": "Method",
    "detail": "Function (TArray<FName> TypeHierarchy ; TSharedPtr<RewindDebugger::FRewindDebuggerTrack> SelectedTrack ; } ; class SPropertiesDebugViewBase ; class IRewindDebugger { public :)",
    "insertText": "IRewindDebugger()"
  },
  {
    "label": "CurrentTraceTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CurrentTraceTime()"
  },
  {
    "label": "GetScrubTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetScrubTime()"
  },
  {
    "label": "GetCurrentTraceRange()",
    "kind": "Method",
    "detail": "Function (const TRange<double>&)",
    "insertText": "GetCurrentTraceRange()"
  },
  {
    "label": "GetCurrentViewRange()",
    "kind": "Method",
    "detail": "Function (const TRange<double>&)",
    "insertText": "GetCurrentViewRange()"
  },
  {
    "label": "GetAnalysisSession()",
    "kind": "Method",
    "detail": "Function (const TraceServices::IAnalysisSession*)",
    "insertText": "GetAnalysisSession()"
  },
  {
    "label": "GetTargetActorId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTargetActorId()"
  },
  {
    "label": "GetDebugComponents()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FDebugObjectInfo>>&)",
    "insertText": "GetDebugComponents()"
  },
  {
    "label": "GetSelectedComponent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDebugObjectInfo>)",
    "insertText": "GetSelectedComponent()"
  },
  {
    "label": "GetSelectedTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<RewindDebugger::FRewindDebuggerTrack>)",
    "insertText": "GetSelectedTrack()"
  },
  {
    "label": "GetTargetActorPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTargetActorPosition(FVector& OutPosition)"
  },
  {
    "label": "GetWorldToVisualize()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorldToVisualize()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "IsTraceFileLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTraceFileLoaded()"
  },
  {
    "label": "IsPIESimulating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPIESimulating()"
  },
  {
    "label": "GetRecordingDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetRecordingDuration()"
  },
  {
    "label": "OpenDetailsPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenDetailsPanel()"
  },
  {
    "label": "FindOwningActorInfo()",
    "kind": "Method",
    "detail": "Function (const struct FObjectInfo*)",
    "insertText": "FindOwningActorInfo(const class IGameplayProvider* GameplayProvider, uint64 ObjectId)"
  },
  {
    "label": "ShouldDisplayWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisplayWorld(uint64 WorldId)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (IRewindDebugger*)",
    "insertText": "Instance()"
  }
]