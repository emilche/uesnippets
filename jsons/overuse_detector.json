[
  {
    "label": "OveruseDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OveruseDetector"
  },
  {
    "label": "AdaptiveThresholdExperimentIsDisabled()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_OVERUSE_DETECTOR_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_OVERUSE_DETECTOR_H_ # include<stdint . h> # include \" api / field_trials_view . h \" # include \" api / network_state_predictor . h \" namespace webrtc { bool)",
    "insertText": "AdaptiveThresholdExperimentIsDisabled(const FieldTrialsView& key_value_config)"
  },
  {
    "label": "OveruseDetector()",
    "kind": "Method",
    "detail": "Function (class OveruseDetector { public :)",
    "insertText": "OveruseDetector(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "OveruseDetector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OveruseDetector()"
  },
  {
    "label": "OveruseDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OveruseDetector(const OveruseDetector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OveruseDetector&)",
    "insertText": "operator(const OveruseDetector&)"
  },
  {
    "label": "Detect()",
    "kind": "Method",
    "detail": "Function (BandwidthUsage)",
    "insertText": "Detect(double offset, double timestamp_delta, int num_of_deltas, int64_t now_ms)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (BandwidthUsage)",
    "insertText": "State()"
  },
  {
    "label": "UpdateThreshold()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateThreshold(double modified_offset, int64_t now_ms)"
  },
  {
    "label": "InitializeExperiment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeExperiment(const FieldTrialsView& key_value_config)"
  }
]