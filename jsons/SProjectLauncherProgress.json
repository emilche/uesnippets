[
  {
    "label": "SProjectLauncherProgress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherProgress"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" ILauncherWorker . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Misc / Paths . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformApplicationMisc . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / Layout / SSplitter . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" Misc / MessageDialog . h \" # include \" Misc / ScopeLock . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Widgets / Notifications / SProgressBar . h \" # include \" DesktopPlatformModule . h \" # include \" Widgets / Layout / SScrollBar . h \" # include \" Framework / Layout / Overscroll . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Layout / SGridPanel . h \" # include \" Widgets / Layout / SScrollBox . h \" # include \" Widgets / Progress / SProjectLauncherTaskListRow . h \" # include \" Widgets / Progress / SProjectLauncherMessageListRow . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherProgress \" class SProjectLauncherProgress : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherProgress)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnClicked, OnCloseClicked) SLATE_EVENT(FOnClicked, OnRerunClicked) SLATE_END_ARGS() public: ~SProjectLauncherProgress()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (OnCloseClicked = InArgs . _OnCloseClicked ; OnRerunClicked = InArgs . _OnRerunClicked ; TSharedRef<SScrollBar> HorizontalScrollBar =)",
    "insertText": "SNew(SScrollBar) .Orientation(EOrientation::Orient_Horizontal) .AlwaysShowScrollbar(true)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SScrollBar> VerticalScrollBar =)",
    "insertText": "SNew(SScrollBar) .Orientation(EOrientation::Orient_Vertical) .AlwaysShowScrollbar(true)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (MaxMessageListRowWidth = 0 . 0 f ; ChildSlot [)",
    "insertText": "SNew(SVerticalBox) + SVerticalBox::Slot() .AutoHeight() .Padding(8.0, 16.0, 16.0, 0.0) [ SNew(SVerticalBox) + SVerticalBox::Slot() .AutoHeight() [ SNew(STextBlock) .Font(FAppStyle::Get().GetFontStyle(\"NormalFontBold\")) .Text(this, &SProjectLauncherProgress::GetSelectedProfileNameText) ] + SVerticalBox::Slot() .AutoHeight() [ SNew(STextBlock) .Text(this, &SProjectLauncherProgress::HandleProgressTextBlockText) ] + SVerticalBox::Slot() .AutoHeight() .Padding(0.0, 4.0, 0.0, 0.0) [ SAssignNew(ProgressBar, SProgressBar) .Percent(this, &SProjectLauncherProgress::HandleProgressBarPercent) ] ] + SVerticalBox::Slot() .Padding(0.0, 8.0, 0.0, 0.0) [ SNew(SSplitter) .Orientation(Orient_Vertical) + SSplitter::Slot() .Value(0.33f) [ SNew(SBorder) .BorderImage(FAppStyle::GetBrush(\"ToolPanel.GroupBorder\")) .Padding(0.0f) [ SAssignNew(TaskListView, SListView<ILauncherTaskPtr>) .HeaderRow ( SNew(SHeaderRow) + SHeaderRow::Column(\"Icon\") .DefaultLabel(LOCTEXT(\"TaskListIconColumnHeader\", \" \")) .FixedWidth(20.0) + SHeaderRow::Column(\"Task\") .DefaultLabel(LOCTEXT(\"TaskListTaskColumnHeader\", \"Task\")) .FillWidth(1.0) + SHeaderRow::Column(\"Warnings\") .DefaultLabel(LOCTEXT(\"TaskListWarningsColumnHeader\", \"Warnings\")) .FixedWidth(64.0) + SHeaderRow::Column(\"Errors\") .DefaultLabel(LOCTEXT(\"TaskListErrorsColumnHeader\", \"Errors\")) .FixedWidth(64.0) + SHeaderRow::Column(\"Duration\") .DefaultLabel(LOCTEXT(\"TaskListDurationColumnHeader\", \"Duration\")) .FixedWidth(64.0) + SHeaderRow::Column(\"Status\") .DefaultLabel(LOCTEXT(\"TaskListStatusColumnHeader\", \"Status\")) .FixedWidth(80.0) ) .ListItemsSource(&TaskList) .OnGenerateRow(this, &SProjectLauncherProgress::HandleTaskListViewGenerateRow) .SelectionMode(ESelectionMode::Single) ] ] + SSplitter::Slot() .Value(0.66f) [ SNew(SBorder) .BorderImage(FAppStyle::GetBrush(\"ToolPanel.GroupBorder\")) .Padding(0.0f) [ SNew(SGridPanel) .FillColumn(0, 1.f) .FillRow(1, 1.f) + SGridPanel::Slot(0, 0) [ SNew(SHeaderRow) + SHeaderRow::Column(\"Status\") .DefaultLabel(LOCTEXT(\"TaskListOutputLogColumnHeader\", \"Output Log\")) .FillWidth(1.0) ] + SGridPanel::Slot(1, 0) [ SNew(SHeaderRow) ] + SGridPanel::Slot(0, 1) [ SAssignNew(HorizontalScrollBox, SScrollBox) .Orientation(EOrientation::Orient_Horizontal) .ExternalScrollbar(HorizontalScrollBar) + SScrollBox::Slot() [ SNew(SBox) .Padding(0.0f) .MinDesiredWidth_Lambda([this]() { MaxMessageListRowWidth = FMath::Max(MaxMessageListRowWidth, (float)MessageListView->GetDesiredSize().X); const float CurrentScrollWidth = (float)HorizontalScrollBox->GetTickSpaceGeometry().GetLocalSize().X; return FMath::Max(MaxMessageListRowWidth, CurrentScrollWidth); }) [ SAssignNew(MessageListView, SListView< TSharedPtr<FProjectLauncherMessage> >) .HeaderRow ( SNew(SHeaderRow) .Visibility(EVisibility::Collapsed) + SHeaderRow::Column(\"Status\") .DefaultLabel(LOCTEXT(\"TaskListOutputLogColumnHeader\", \"Output Log\")) ) .ListItemsSource(&MessageList) .OnGenerateRow(this, &SProjectLauncherProgress::HandleMessageListViewGenerateRow) .SelectionMode(ESelectionMode::Multi) .ExternalScrollbar(VerticalScrollBar) .AllowOverscroll(EAllowOverscroll::No) .ConsumeMouseWheel(EConsumeMouseWheel::Always) ] ] ] + SGridPanel::Slot(1, 1) [ SNew(SBox) .WidthOverride(FOptionalSize(16)) [ VerticalScrollBar ] ] + SGridPanel::Slot(0, 2) [ SNew(SBox) .HeightOverride(FOptionalSize(16)) [ HorizontalScrollBar ] ] ] ] ] + SVerticalBox::Slot() .AutoHeight() .Padding(0.0f, 5.0f, 0.0f, 0.0f) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() [ SAssignNew(CopyButton, SButton) .ContentPadding(FMargin(6.0f, 2.0f)) .IsEnabled(false) .Text(LOCTEXT(\"CopyButtonText\", \"Copy\")) .ToolTipText(LOCTEXT(\"CopyButtonTooltip\", \"Copy the selected log messages to the clipboard\")) .OnClicked(this, &SProjectLauncherProgress::HandleCopyButtonClicked) ] + SHorizontalBox::Slot() .AutoWidth() .Padding(4.0f, 0.0f, 0.0f, 0.0f) [ SAssignNew(ClearButton, SButton) .ContentPadding(FMargin(6.0f, 2.0f)) .IsEnabled(false) .Text(LOCTEXT(\"ClearButtonText\", \"Clear Log\")) .ToolTipText(LOCTEXT(\"ClearButtonTooltip\", \"Clear the log window\")) .OnClicked(this, &SProjectLauncherProgress::HandleClearButtonClicked) ] + SHorizontalBox::Slot() .AutoWidth() .Padding(4.0f, 0.0f, 0.0f, 0.0f) [ SAssignNew(SaveButton, SButton) .ContentPadding(FMargin(6.0f, 2.0f)) .IsEnabled(false) .Text(LOCTEXT(\"ExportButtonText\", \"Save Log...\")) .ToolTipText(LOCTEXT(\"SaveButtonTooltip\", \"Save the entire log to a file\")) .Visibility((FDesktopPlatformModule::Get() != NULL) ? EVisibility::Visible : EVisibility::Collapsed) .OnClicked(this, &SProjectLauncherProgress::HandleSaveButtonClicked) ] + SHorizontalBox::Slot() .AutoWidth() .Padding(4.0f, 0.0f, 0.0f, 0.0f) [ SNew(SButton) .ContentPadding(FMargin(6.0f, 2.0f)) .IsEnabled(this, &SProjectLauncherProgress::IsRerunButtonEnabled) .OnClicked(this, &SProjectLauncherProgress::HandleRerunButtonClicked) .ToolTipText(this, &SProjectLauncherProgress::GetRerunButtonToolTip) [ SNew(STextBlock) .Text(this, &SProjectLauncherProgress::GetRerunButtonText) ] ] + SHorizontalBox::Slot() .AutoWidth() .Padding(4.0f, 0.0f, 0.0f, 0.0f) [ SNew(SButton) .ContentPadding(FMargin(6.0f, 2.0f)) .IsEnabled(this, &SProjectLauncherProgress::IsDoneButtonEnabled) .OnClicked(this, &SProjectLauncherProgress::HandleDoneButtonClicked) .ToolTipText(this, &SProjectLauncherProgress::GetDoneButtonToolTip) [ SNew(STextBlock) .Text(this, &SProjectLauncherProgress::GetDoneButtonText)"
  },
  {
    "label": "SetLauncherWorker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLauncherWorker(const ILauncherWorkerRef& Worker)"
  },
  {
    "label": "GetTasks()",
    "kind": "Method",
    "detail": "Function (LauncherWorker = Worker ; Worker ->)",
    "insertText": "GetTasks(TaskList)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (TaskListView ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MessageList .)",
    "insertText": "Reset()"
  },
  {
    "label": "OnOutputReceived()",
    "kind": "Method",
    "detail": "Function (MaxMessageListRowWidth = 0 . 0 ; Worker ->)",
    "insertText": "OnOutputReceived().AddRaw(this, &SProjectLauncherProgress::HandleOutputReceived)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopedLock(&CriticalSection)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MessageList .)",
    "insertText": "Add(PendingMessages[Index])"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (MessageListView ->)",
    "insertText": "RequestScrollIntoView(MessageList.Last())"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} } SaveButton ->)",
    "insertText": "SetEnabled(MessageList.Num() > 0)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (CopyButton ->)",
    "insertText": "SetEnabled(MessageListView->GetNumItemsSelected() > 0)"
  },
  {
    "label": "HandleOutputReceived()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleOutputReceived(const FString& InMessage)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ELogVerbosity::Type Verbosity = ELogVerbosity::Log ;)",
    "insertText": "if(InMessage.Contains(TEXT(\"Automation.ParseCommandLine:\"), ESearchCase::CaseSensitive))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Verbosity = ELogVerbosity::Display ; } else)",
    "insertText": "if(InMessage.Contains(TEXT(\"Error:\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Verbosity = ELogVerbosity::Error ; } else)",
    "insertText": "if(InMessage.Contains(TEXT(\"Warning:\"), ESearchCase::IgnoreCase))"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (Verbosity = ELogVerbosity::Warning ; } TSharedPtr<FProjectLauncherMessage> Message =)",
    "insertText": "MakeShareable(new FProjectLauncherMessage(FText::FromString(InMessage), Verbosity))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PendingMessages .)",
    "insertText": "Add(Message)"
  },
  {
    "label": "HandleProgressBarPercent()",
    "kind": "Method",
    "detail": "Function (} TOptional<float>)",
    "insertText": "HandleProgressBarPercent()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (ILauncherWorkerPtr LauncherWorkerPtr = LauncherWorker .)",
    "insertText": "Pin()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumFinished = 0 ;)",
    "insertText": "for(int32 TaskIndex = 0; TaskIndex < TaskList.Num(); ++TaskIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (+ + NumFinished ; } })",
    "insertText": "return((float)NumFinished / TaskList.Num())"
  },
  {
    "label": "HandleProgressTextBlockText()",
    "kind": "Method",
    "detail": "Function (} } return 0 . 0 f ; } FText)",
    "insertText": "HandleProgressTextBlockText()"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (ELauncherTaskStatus::Type TaskStatus = TaskList [ TaskIndex ] ->)",
    "insertText": "GetStatus()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + NumCanceled ; } else)",
    "insertText": "if(TaskStatus == ELauncherTaskStatus::Completed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + NumCompleted ; } else)",
    "insertText": "if(TaskStatus == ELauncherTaskStatus::Failed)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (+ + NumFailed ; } } FFormatNamedArguments Args ; Args .)",
    "insertText": "Add(TEXT(\"NumCompleted\"), NumCompleted)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"NumFailed\"), NumFailed)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Args .)",
    "insertText": "Add(TEXT(\"NumCanceled\"), NumCanceled)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HandleTaskListViewGenerateRow()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ITableRow>)",
    "insertText": "HandleTaskListViewGenerateRow(ILauncherTaskPtr InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleMessageListViewGenerateRow()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ITableRow>)",
    "insertText": "HandleMessageListViewGenerateRow(TSharedPtr<FProjectLauncherMessage> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleClearButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleClearButtonClicked()"
  },
  {
    "label": "ClearLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLog()"
  },
  {
    "label": "HandleCopyButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleCopyButtonClicked()"
  },
  {
    "label": "CopyLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyLog()"
  },
  {
    "label": "HandleSaveButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "HandleSaveButtonClicked()"
  },
  {
    "label": "SaveLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveLog()"
  },
  {
    "label": "IsRerunButtonEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRerunButtonEnabled()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "GetRerunButtonToolTip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetRerunButtonToolTip()"
  },
  {
    "label": "GetRerunButtonText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetRerunButtonText()"
  },
  {
    "label": "IsDoneButtonEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDoneButtonEnabled()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (LauncherWorkerPtr ->)",
    "insertText": "Cancel()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LauncherWorkerPtr.IsValid() && LauncherWorkerPtr->GetStatus() == ELauncherWorkerStatus::Canceling)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(OnCloseClicked.IsBound())"
  },
  {
    "label": "GetDoneButtonToolTip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDoneButtonToolTip()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LauncherWorkerPtr->GetStatus() == ELauncherWorkerStatus::Canceling)"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "LOCTEXT(\"DoneButtonCloseTooltip\", \"Close this page.\")"
  },
  {
    "label": "GetDoneButtonText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDoneButtonText()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "LOCTEXT(\"DoneButtonDoneLabel\", \"Done\")"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FProjectLauncherMessage>> SelectedItems = MessageListView ->)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString SelectedText ;)",
    "insertText": "for(int32 Index = 0; Index < SelectedItems.Num(); ++Index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (SelectedText + = SelectedItems [ Index ] -> Message .)",
    "insertText": "ToString()"
  },
  {
    "label": "ClipboardCopy()",
    "kind": "Method",
    "detail": "Function (SelectedText + = LINE_TERMINATOR ; })",
    "insertText": "ClipboardCopy(*SelectedText)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IDesktopPlatform* DesktopPlatform =)",
    "insertText": "Get()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Filenames ; TSharedPtr<SWindow> ParentWindow =)",
    "insertText": "Get().FindWidgetWindow(AsShared())"
  },
  {
    "label": "ParentWindowHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ParentWindowHandle(ParentWindow.IsValid() && ParentWindow->GetNativeWindow().IsValid()) ? ParentWindow->GetNativeWindow()->GetOSWindowHandle()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (FString Filename = Filenames [ 0 ] ; LastLogFileSaveDirectory =)",
    "insertText": "GetPath(Filename)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Filename + = Filename +)",
    "insertText": "TEXT(\".log\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FArchive* LogFile =)",
    "insertText": "Get().CreateFileWriter(*Filename)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (LogFile ->)",
    "insertText": "Serialize(TCHAR_TO_ANSI(*LogEntry), LogEntry.Len())"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} LogFile ->)",
    "insertText": "Close()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (delete LogFile ; } else {)",
    "insertText": "Open(EAppMsgType::Ok, LOCTEXT(\"SaveLogDialogFileError\", \"Failed to open the specified file for saving!\"))"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "Open(EAppMsgType::Ok, LOCTEXT(\"SaveLogDialogUnsupportedError\", \"Saving is not supported on this platform!\"))"
  },
  {
    "label": "GetSelectedProfileNameText()",
    "kind": "Method",
    "detail": "Function (} } FText)",
    "insertText": "GetSelectedProfileNameText()"
  },
  {
    "label": "GetLauncherProfile()",
    "kind": "Method",
    "detail": "Function (const ILauncherProfilePtr& ProfilePtr = LauncherWorkerPtr ->)",
    "insertText": "GetLauncherProfile()"
  }
]