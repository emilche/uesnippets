[
  {
    "label": "FuzzDataHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuzzDataHelper"
  },
  {
    "label": "FuzzDataHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FUZZERS_FUZZ_DATA_HELPER_H_ # define TEST_FUZZERS_FUZZ_DATA_HELPER_H_ # include<limits> # include \" api / array_view . h \" # include \" modules / rtp_rtcp / source / byte_io . h \" namespace webrtc { namespace test { class FuzzDataHelper { public :)",
    "insertText": "FuzzDataHelper(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "CanReadBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReadBytes(size_t n)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "Read()"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(CanReadBytes(sizeof(T)))"
  },
  {
    "label": "ReadLittleEndian()",
    "kind": "Method",
    "detail": "Function (T x = ByteReader<T)",
    "insertText": "ReadLittleEndian(&data_[data_ix_])"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (data_ix_ + =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "ReadOrDefaultValueNotZero()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "ReadOrDefaultValueNotZero(T default_value)"
  },
  {
    "label": "ReadOrDefaultValue()",
    "kind": "Method",
    "detail": "Function (T x =)",
    "insertText": "ReadOrDefaultValue(default_value)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (uint8_t index = ReadOrDefaultValue<)",
    "insertText": "uint8_t(0)"
  },
  {
    "label": "subview()",
    "kind": "Method",
    "detail": "Function (} const size_t index_to_return = data_ix_ ; data_ix_ + = bytes ; return data_ .)",
    "insertText": "subview(index_to_return, bytes)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "CopyTo(T* object)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(object, 0, sizeof(T))"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t bytes_to_copy =)",
    "insertText": "min(BytesLeft(), sizeof(T))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(object, data_.data() + data_ix_, bytes_to_copy)"
  },
  {
    "label": "BytesRead()",
    "kind": "Method",
    "detail": "Function (data_ix_ + = bytes_to_copy ; } size_t)",
    "insertText": "BytesRead()"
  }
]