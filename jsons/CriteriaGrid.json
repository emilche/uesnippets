[
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FCriteriaGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriteriaGrid"
  },
  {
    "label": "GetCoordinateGrid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / Boundary . h \" # include \" Mesh / Structure / GridBase . h \" # include \" Geo / Sampling / SurfacicSampling . h \" namespace UE::CADKernel { class FTopologicalFace ; class FCriteriaGrid : public FGridBase { private : FCoordinateGrid CoordinateGrid ; FSurfacicBoundary FaceMinMax ; protected : const FCoordinateGrid&)",
    "insertText": "GetCoordinateGrid()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 TrueUIndex = UIndex* 2 ; int32 TrueVIndex = VIndex* 2 ;)",
    "insertText": "if(bIsInternalU)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + TrueUIndex ; })",
    "insertText": "if(bIsInternalV)"
  },
  {
    "label": "GetPoint()",
    "kind": "Method",
    "detail": "Function (+ + TrueVIndex ; } return TrueVIndex* CuttingCount [ EIso::IsoU ] + TrueUIndex ; } const FPoint&)",
    "insertText": "GetPoint(int32 UIndex, int32 VIndex, bool bIsInternalU, bool bIsInternalV)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int32 Index =)",
    "insertText": "GetIndex(UIndex, VIndex, bIsInternalU, bIsInternalV)"
  },
  {
    "label": "GetPoint()",
    "kind": "Method",
    "detail": "Function (const FPoint&)",
    "insertText": "GetPoint(int32 iU, int32 iV)"
  },
  {
    "label": "GetIntermediateU()",
    "kind": "Method",
    "detail": "Function (} const FPoint&)",
    "insertText": "GetIntermediateU(int32 iU, int32 iV)"
  },
  {
    "label": "GetIntermediateV()",
    "kind": "Method",
    "detail": "Function (} const FPoint&)",
    "insertText": "GetIntermediateV(int32 iU, int32 iV)"
  },
  {
    "label": "GetIntermediateUV()",
    "kind": "Method",
    "detail": "Function (} const FPoint&)",
    "insertText": "GetIntermediateUV(int32 iU, int32 iV)"
  },
  {
    "label": "ComputeFaceMinMaxThicknessAlongIso()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeFaceMinMaxThicknessAlongIso()"
  },
  {
    "label": "CheckIfIsDegenerate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckIfIsDegenerate()"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV void)",
    "insertText": "Display()"
  }
]