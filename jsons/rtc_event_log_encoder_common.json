[
  {
    "label": "ConvertPacketLossFractionToProtoFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_ENCODER_RTC_EVENT_LOG_ENCODER_COMMON_H_ # define LOGGING_RTC_EVENT_LOG_ENCODER_RTC_EVENT_LOG_ENCODER_COMMON_H_ # include<stdint . h> # include<limits> # include<type_traits> namespace webrtc { uint32_t)",
    "insertText": "ConvertPacketLossFractionToProtoFormat(float packet_loss_fraction)"
  },
  {
    "label": "ParsePacketLossFractionFromProtoFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParsePacketLossFractionFromProtoFormat(uint32_t proto_packet_loss_fraction, float* output)"
  },
  {
    "label": "ToUnsigned()",
    "kind": "Method",
    "detail": "Function (} namespace webrtc_event_logging { template<T> uint64_t)",
    "insertText": "ToUnsigned(T y)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (T MIN_T = std::numeric_limits<T)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (T MAX_T = std::numeric_limits<T)",
    "insertText": "max()"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "uint64_t(MAX_T) + 1 + static_cast<uint64_t>(y - MIN_T)"
  },
  {
    "label": "ToSigned()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool)",
    "insertText": "ToSigned(uint64_t x, T* y)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* y = static_cast<)",
    "insertText": "T(x)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (} else { const uint64_t neg_x = x - static_cast<)",
    "insertText": "uint64_t(MAX_T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* y = static_cast<)",
    "insertText": "T(neg_x)"
  }
]