[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSchemaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchemaView"
  },
  {
    "label": "FSchemaOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchemaOwner"
  },
  {
    "label": "FGCScopeGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGCScopeGuard"
  },
  {
    "label": "FGCObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGCObject"
  },
  {
    "label": "FGarbageReferenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGarbageReferenceInfo"
  },
  {
    "label": "FGCDirectReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGCDirectReference"
  },
  {
    "label": "GARBAGE_COLLECTION_KEEPFLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Logging / LogMacros . h \" # include \" Misc / AssertionMacros . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" UObject / ReferenceToken . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" class UObject ; # define)",
    "insertText": "GARBAGE_COLLECTION_KEEPFLAGS(GIsEditor ? RF_Standalone : RF_NoFlags) #ifndef ENABLE_GC_OBJECT_CHECKS #define ENABLE_GC_OBJECT_CHECKS (!(UE_BUILD_TEST || UE_BUILD_SHIPPING) || 0) #endif #define ENABLE_GC_HISTORY (!UE_BUILD_SHIPPING) COREUOBJECT_API DECLARE_LOG_CATEGORY_EXTERN(LogGarbage, Warning, All)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Garbage Collection\"), STATGROUP_GC, STATCAT_Advanced)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# define DO_POINTER_CHECKS_ON_GC 0 namespace UE::GC { enum class EAROFlags { None = 0,Unbalanced = 1<<0,ExtraSlow = 2<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAROFlags)"
  },
  {
    "label": "RegisterSlowImplementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSlowImplementation(void (*AddReferencedObjects)(UObject*, FReferenceCollector&), EAROFlags Flags = EAROFlags::None)"
  },
  {
    "label": "FSchemaOwner()",
    "kind": "Method",
    "detail": "Function (class FSchemaView ; class FSchemaOwner { public :)",
    "insertText": "FSchemaOwner()"
  },
  {
    "label": "FSchemaOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSchemaOwner(const FSchemaOwner&)"
  },
  {
    "label": "FSchemaOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSchemaOwner(FSchemaOwner&& In) : SchemaView(In.SchemaView)"
  },
  {
    "label": "FSchemaOwner()",
    "kind": "Method",
    "detail": "Function (In . SchemaView = 0 ; })",
    "insertText": "FSchemaOwner(FSchemaView In)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSchemaOwner&)",
    "insertText": "operator(const FSchemaOwner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSchemaOwner&)",
    "insertText": "operator(FSchemaOwner&& In)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(In.SchemaView, SchemaView)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FSchemaView&)",
    "insertText": "Get()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : uint64 SchemaView = 0 ; } ; # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__) COREUOBJECT_API void EnableFrankenGCMode(bool bEnable)"
  },
  {
    "label": "ShouldFrankenGCRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFrankenGCRun()"
  },
  {
    "label": "FGCScopeGuard()",
    "kind": "Method",
    "detail": "Function (bool GIsFrankenGCCollecting ; # endif } class FGCScopeGuard { public :)",
    "insertText": "FGCScopeGuard()"
  },
  {
    "label": "FGarbageReferenceInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FGCObject ; struct FGarbageReferenceInfo { UObject* GarbageObject ; union FReferencerUnion { const UObject* Object ; FGCObject* GCObject ; } Referencer ; bool bReferencerUObject ; FName PropertyName ;)",
    "insertText": "FGarbageReferenceInfo(const UObject* InReferencingObject, UObject* InGarbageObject, FName InPropertyName) : GarbageObject(InGarbageObject) , bReferencerUObject(true) , PropertyName(InPropertyName)"
  },
  {
    "label": "FGarbageReferenceInfo()",
    "kind": "Method",
    "detail": "Function (Referencer . Object = InReferencingObject ; })",
    "insertText": "FGarbageReferenceInfo(FGCObject* InReferencingObject, UObject* InGarbageObject) : GarbageObject(InGarbageObject) , bReferencerUObject(false)"
  },
  {
    "label": "GetReferencingObjectInfo()",
    "kind": "Method",
    "detail": "Function (Referencer . GCObject = InReferencingObject ; } FString)",
    "insertText": "GetReferencingObjectInfo()"
  },
  {
    "label": "FGCDirectReference()",
    "kind": "Method",
    "detail": "Function (} ; struct FGCDirectReference {)",
    "insertText": "FGCDirectReference(FReferenceToken InReference, FName Name = NAME_None) : ReferencerName(Name), Reference(InReference)"
  },
  {
    "label": "FGCDirectReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGCDirectReference(const UObject* Obj, FName Name = NAME_None) : ReferencerName(Name), Reference(Obj)"
  },
  {
    "label": "FGCDirectReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGCDirectReference(const Verse::VCell* Cell, FName Name = NAME_None) : ReferencerName(Name), Reference(Cell)"
  },
  {
    "label": "GetLastGCTime()",
    "kind": "Method",
    "detail": "Function (} FName ReferencerName ; FReferenceToken Reference ; } ; bool GIsGarbageCollecting ; double)",
    "insertText": "GetLastGCTime()"
  },
  {
    "label": "GetLastGCDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetLastGCDuration()"
  }
]