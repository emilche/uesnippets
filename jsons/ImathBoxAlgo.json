[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "S",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "S"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHBOXALGO_H # define INCLUDED_IMATHBOXALGO_H # include \" ImathNamespace . h \" # include \" ImathBox . h \" # include \" ImathLineAlgo . h \" # include \" ImathMatrix . h \" # include \" ImathPlane . h \" IMATH_INTERNAL_NAMESPACE_HEADER_ENTER template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 T)",
    "insertText": "clip(const T& p, const Box<T>& box)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T q ;)",
    "insertText": "for(int i = 0; i < int (box.min.dimensions()); i++)"
  },
  {
    "label": "closestPointOnBox()",
    "kind": "Method",
    "detail": "Function (} template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Vec3<T>)",
    "insertText": "closestPointOnBox(const Vec3<T>& p, const Box<Vec3<T>>& box)"
  },
  {
    "label": "closestPointInBox()",
    "kind": "Method",
    "detail": "Function (Vec3<T> q =)",
    "insertText": "closestPointInBox(p, box)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (Vec3<T> d1 = p - box . min ; Vec3<T> d2 = box . max - p ; Vec3<T>)",
    "insertText": "d((d1.x < d2.x) ? d1.x : d2.x, (d1.y < d2.y) ? d1.y : d2.y, (d1.z < d2.z) ? d1.z : d2.z)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (q .)",
    "insertText": "x(d1.x < d2.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(d.y < d.z)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (q .)",
    "insertText": "y(d1.y < d2.y)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (} else { q .)",
    "insertText": "z(d1.z < d2.z)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} } return q ; } template<class S,class T> IMATH_HOSTDEVICE Box<Vec3<S>>)",
    "insertText": "transform(const Box<Vec3<S>>& box, const Matrix44<T>& m)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Box<Vec3<S>> newBox ;)",
    "insertText": "for(int i = 0; i < 3; i++)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (newBox . min [ i ] = newBox . max [)",
    "insertText": "i(S)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (S a,b ;)",
    "insertText": "a(S)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "b(S)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (newBox . min [ i ] + = a ; newBox . max [ i ] + = b ; } else { newBox . min [ i ] + = b ; newBox . max [ i ] + = a ; } } } return newBox ; } Vec3<S> points [ 8 ] ; points [ 0 ] [ 0 ] = points [ 1 ] [ 0 ] = points [ 2 ] [ 0 ] = points [ 3 ] [ 0 ] = box . min [ 0 ] ; points [ 4 ] [ 0 ] = points [ 5 ] [ 0 ] = points [ 6 ] [ 0 ] = points [ 7 ] [ 0 ] = box . max [ 0 ] ; points [ 0 ] [ 1 ] = points [ 1 ] [ 1 ] = points [ 4 ] [ 1 ] = points [ 5 ] [ 1 ] = box . min [ 1 ] ; points [ 2 ] [ 1 ] = points [ 3 ] [ 1 ] = points [ 6 ] [ 1 ] = points [ 7 ] [ 1 ] = box . max [ 1 ] ; points [ 0 ] [ 2 ] = points [ 2 ] [ 2 ] = points [ 4 ] [ 2 ] = points [ 6 ] [ 2 ] = box . min [ 2 ] ; points [ 1 ] [ 2 ] = points [ 3 ] [ 2 ] = points [ 5 ] [ 2 ] = points [ 7 ] [ 2 ] = box . max [ 2 ] ; Box<Vec3<S>> newBox ;)",
    "insertText": "for(int i = 0; i < 8; i++) newBox.extendBy (points[i] * m)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result . min [ i ] + = a ; result . max [ i ] + = b ; } else { result . min [ i ] + = b ; result . max [ i ] + = a ; } } } return ; } Vec3<S> points [ 8 ] ; points [ 0 ] [ 0 ] = points [ 1 ] [ 0 ] = points [ 2 ] [ 0 ] = points [ 3 ] [ 0 ] = box . min [ 0 ] ; points [ 4 ] [ 0 ] = points [ 5 ] [ 0 ] = points [ 6 ] [ 0 ] = points [ 7 ] [ 0 ] = box . max [ 0 ] ; points [ 0 ] [ 1 ] = points [ 1 ] [ 1 ] = points [ 4 ] [ 1 ] = points [ 5 ] [ 1 ] = box . min [ 1 ] ; points [ 2 ] [ 1 ] = points [ 3 ] [ 1 ] = points [ 6 ] [ 1 ] = points [ 7 ] [ 1 ] = box . max [ 1 ] ; points [ 0 ] [ 2 ] = points [ 2 ] [ 2 ] = points [ 4 ] [ 2 ] = points [ 6 ] [ 2 ] = box . min [ 2 ] ; points [ 1 ] [ 2 ] = points [ 3 ] [ 2 ] = points [ 5 ] [ 2 ] = points [ 7 ] [ 2 ] = box . max [ 2 ] ;)",
    "insertText": "for(int i = 0; i < 8; i++) result.extendBy (points[i] * m)"
  },
  {
    "label": "affineTransform()",
    "kind": "Method",
    "detail": "Function (} template<class S,class T> IMATH_HOSTDEVICE Box<Vec3<S>>)",
    "insertText": "affineTransform(const Box<Vec3<S>>& box, const Matrix44<T>& m)"
  },
  {
    "label": "affineTransform()",
    "kind": "Method",
    "detail": "Function (newBox . min [ i ] + = a ; newBox . max [ i ] + = b ; } else { newBox . min [ i ] + = b ; newBox . max [ i ] + = a ; } } } return newBox ; } template<class S,class T> IMATH_HOSTDEVICE void)",
    "insertText": "affineTransform(const Box<Vec3<S>>& box, const Matrix44<T>& m, Box<Vec3<S>>& result)"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "makeInfinite()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "makeInfinite()"
  },
  {
    "label": "findEntryAndExitPoints()",
    "kind": "Method",
    "detail": "Function (result . min [ i ] + = a ; result . max [ i ] + = b ; } else { result . min [ i ] + = b ; result . max [ i ] + = a ; } } } } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "findEntryAndExitPoints(const Line3<T>& r, const Box<Vec3<T>>& b, Vec3<T>& entry, Vec3<T>& exit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T tFrontMax = - TMAX ; T tBackMin = TMAX ;)",
    "insertText": "if(r.dir.x >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d1 = b . max . x - r . pos . x ; T d2 = b . min . x - r . pos . x ;)",
    "insertText": "if(r.dir.x > 1 || (abs (d1) < TMAX * r.dir.x && abs (d2) < TMAX * r.dir.x))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T t1 = d1 / r . dir . x ; T t2 = d2 / r . dir . x ;)",
    "insertText": "if(tBackMin > t1)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (tBackMin = t1 ; exit . x = b . max . x ; exit . y =)",
    "insertText": "clamp(r.pos.y + t1 * r.dir.y, b.min.y, b.max.y)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (exit . z =)",
    "insertText": "clamp(r.pos.z + t1 * r.dir.z, b.min.z, b.max.z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(tFrontMax < t2)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (tFrontMax = t2 ; entry . x = b . min . x ; entry . y =)",
    "insertText": "clamp(r.pos.y + t2 * r.dir.y, b.min.y, b.max.y)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (entry . z =)",
    "insertText": "clamp(r.pos.z + t2 * r.dir.z, b.min.z, b.max.z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(r.pos.x < b.min.x || r.pos.x > b.max.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d1 = b . max . y - r . pos . y ; T d2 = b . min . y - r . pos . y ;)",
    "insertText": "if(r.dir.y > 1 || (abs (d1) < TMAX * r.dir.y && abs (d2) < TMAX * r.dir.y))"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (tBackMin = t1 ; exit . x =)",
    "insertText": "clamp(r.pos.x + t1 * r.dir.x, b.min.x, b.max.x)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (tFrontMax = t2 ; entry . x =)",
    "insertText": "clamp(r.pos.x + t2 * r.dir.x, b.min.x, b.max.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(r.pos.y < b.min.y || r.pos.y > b.max.y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d1 = b . max . z - r . pos . z ; T d2 = b . min . z - r . pos . z ;)",
    "insertText": "if(r.dir.z > 1 || (abs (d1) < TMAX * r.dir.z && abs (d2) < TMAX * r.dir.z))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (entry . z = b . min . z ; } } else)",
    "insertText": "if(r.pos.z < b.min.z || r.pos.z > b.max.z)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (ip = r . pos ; return true ; } const T TMAX = std::numeric_limits<T)",
    "insertText": "max()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T tFrontMax = - 1 ; T tBackMin = TMAX ;)",
    "insertText": "if(r.dir.x > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b . max . x - r . pos . x ;)",
    "insertText": "if(r.dir.x > 1 || d < TMAX * r.dir.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T t = d / r . dir . x ;)",
    "insertText": "if(tBackMin > t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.pos.x <= b.min.x)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T d = b . min . x - r . pos . x ; T)",
    "insertText": "t(r.dir.x > 1 || d < TMAX * r.dir.x)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (tFrontMax = t ; ip . x = b . min . x ; ip . y =)",
    "insertText": "clamp(r.pos.y + t * r.dir.y, b.min.y, b.max.y)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (ip . z =)",
    "insertText": "clamp(r.pos.z + t * r.dir.z, b.min.z, b.max.z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(r.dir.x < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b . min . x - r . pos . x ;)",
    "insertText": "if(r.dir.x < -1 || d > TMAX * r.dir.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.pos.x >= b.max.x)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T d = b . max . x - r . pos . x ; T)",
    "insertText": "t(r.dir.x < -1 || d > TMAX * r.dir.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.dir.y > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b . max . y - r . pos . y ;)",
    "insertText": "if(r.dir.y > 1 || d < TMAX * r.dir.y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.pos.y <= b.min.y)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T d = b . min . y - r . pos . y ; T)",
    "insertText": "t(r.dir.y > 1 || d < TMAX * r.dir.y)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (tFrontMax = t ; ip . x =)",
    "insertText": "clamp(r.pos.x + t * r.dir.x, b.min.x, b.max.x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(r.dir.y < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b . min . y - r . pos . y ;)",
    "insertText": "if(r.dir.y < -1 || d > TMAX * r.dir.y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.pos.y >= b.max.y)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T d = b . max . y - r . pos . y ; T)",
    "insertText": "t(r.dir.y < -1 || d > TMAX * r.dir.y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.dir.z > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b . max . z - r . pos . z ;)",
    "insertText": "if(r.dir.z > 1 || d < TMAX * r.dir.z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.pos.z <= b.min.z)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T d = b . min . z - r . pos . z ; T)",
    "insertText": "t(r.dir.z > 1 || d < TMAX * r.dir.z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ip . z = b . min . z ; } } } else)",
    "insertText": "if(r.dir.z < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T d = b . min . z - r . pos . z ;)",
    "insertText": "if(r.dir.z < -1 || d > TMAX * r.dir.z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r.pos.z >= b.max.z)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T d = b . max . z - r . pos . z ; T)",
    "insertText": "t(r.dir.z < -1 || d > TMAX * r.dir.z)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} return tFrontMax<= tBackMin ; } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "intersects(const Box<Vec3<T>>& box, const Line3<T>& ray)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (Vec3<T> ignored ; return)",
    "insertText": "intersects(box, ray, ignored)"
  }
]