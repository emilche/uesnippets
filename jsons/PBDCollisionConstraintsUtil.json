[
  {
    "label": "ComputeHashTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ExternalCollisionData . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" Chaos / CollisionResolutionTypes . h \" namespace Chaos { void)",
    "insertText": "ComputeHashTable(const TArray<Chaos::FPBDCollisionConstraint>& ConstraintsArray, const FBox& BoundingBox, TMultiMap<int32, int32>& HashTableMap, const Chaos::FReal SpatialHashRadius)"
  },
  {
    "label": "ComputeHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHashTable(const TArray<FCollidingData>& CollisionsArray, const FBox& BoundingBox, TMultiMap<int32, int32>& HashTableMap, const Chaos::FReal SpatialHashRadius)"
  },
  {
    "label": "ComputeHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHashTable(const TArray<FCollidingDataExt>& CollisionsArray, const FBox& BoundingBox, TMultiMap<int32, int32>& HashTableMap, const Chaos::FReal SpatialHashRadius)"
  },
  {
    "label": "ComputeHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHashTable(const TArray<FVector>& ParticleArray, const FBox& BoundingBox, TMultiMap<int32, int32>& HashTableMap, const float SpatialHashRadius)"
  },
  {
    "label": "ComputeHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHashTable(const TArray<FBreakingData>& BreakingsArray, const FBox& BoundingBox, TMultiMap<int32, int32>& HashTableMap, const Chaos::FReal SpatialHashRadius)"
  },
  {
    "label": "ComputeHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHashTable(const TArray<FBreakingDataExt>& BreakingsArray, const FBox& BoundingBox, TMultiMap<int32, int32>& HashTableMap, const Chaos::FReal SpatialHashRadius)"
  }
]