[
  {
    "label": "VP8_COMP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP8_COMP"
  },
  {
    "label": "macroblock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "macroblock"
  },
  {
    "label": "vp8_activity_masking()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_ENCODER_ENCODEFRAME_H_ # define VPX_VP8_ENCODER_ENCODEFRAME_H_ # include \" vp8 / encoder / tokenize . h \" # ifdef __cplusplus \" C \" { # endif struct VP8_COMP ; struct macroblock ; void)",
    "insertText": "vp8_activity_masking(struct VP8_COMP *cpi, MACROBLOCK *x)"
  },
  {
    "label": "vp8_build_block_offsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_build_block_offsets(struct macroblock *x)"
  },
  {
    "label": "vp8_setup_block_ptrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_setup_block_ptrs(struct macroblock *x)"
  },
  {
    "label": "vp8_encode_frame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_encode_frame(struct VP8_COMP *cpi)"
  },
  {
    "label": "vp8cx_encode_inter_macroblock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8cx_encode_inter_macroblock(struct VP8_COMP *cpi, struct macroblock *x, TOKENEXTRA **t, int recon_yoffset, int recon_uvoffset, int mb_row, int mb_col)"
  },
  {
    "label": "vp8cx_encode_intra_macroblock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8cx_encode_intra_macroblock(struct VP8_COMP *cpi, struct macroblock *x, TOKENEXTRA **t)"
  }
]