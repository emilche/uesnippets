[
  {
    "label": "BB_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BB_t"
  },
  {
    "label": "BB_i_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BB_i_t"
  },
  {
    "label": "BI_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BI_t"
  },
  {
    "label": "II_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "II_t"
  },
  {
    "label": "InstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstIterator"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "InstIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_INSTITERATOR_H # define LLVM_IR_INSTITERATOR_H # include \" llvm / IR / BasicBlock . h \" # include \" llvm / IR / Function . h \" namespace llvm { template<class BB_t,class BB_i_t,class BI_t,class II_t> class InstIterator { typedef BB_t BBty ; typedef BB_i_t BBIty ; typedef BI_t BIty ; typedef II_t IIty ; BB_t* BBs ; BB_i_t BB ; BI_t BI ; public : typedef std::bidirectional_iterator_tag iterator_category ; typedef IIty value_type ; typedef signed difference_type ; typedef IIty* pointer ; typedef IIty& reference ;)",
    "insertText": "InstIterator()"
  },
  {
    "label": "InstIterator()",
    "kind": "Method",
    "detail": "Function (} template<A,B,C,D>)",
    "insertText": "InstIterator(const InstIterator<A,B,C,D> &II) : BBs(II.BBs), BB(II.BB), BI(II.BI)"
  },
  {
    "label": "InstIterator()",
    "kind": "Method",
    "detail": "Function (} template<A,B,C,D>)",
    "insertText": "InstIterator(InstIterator<A,B,C,D> &II) : BBs(II.BBs), BB(II.BB), BI(II.BI)"
  },
  {
    "label": "InstIterator()",
    "kind": "Method",
    "detail": "Function (} template<class M>)",
    "insertText": "InstIterator(M &m) : BBs(&m.getBasicBlockList()), BB(BBs->begin())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (BI = BB ->)",
    "insertText": "begin()"
  },
  {
    "label": "advanceToNextBB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advanceToNextBB()"
  },
  {
    "label": "InstIterator()",
    "kind": "Method",
    "detail": "Function (} } template<class M>)",
    "insertText": "InstIterator(M &m, bool) : BBs(&m.getBasicBlockList()), BB(BBs->end())"
  },
  {
    "label": "getBasicBlockIterator()",
    "kind": "Method",
    "detail": "Function (} BBIty&)",
    "insertText": "getBasicBlockIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const InstIterator &y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const InstIterator& y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (- - BB ; BI = BB ->)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} - - BI ; return* this ; } InstIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "atEnd()",
    "kind": "Method",
    "detail": "Function (InstIterator tmp =* this ; - -* this ; return tmp ; } bool)",
    "insertText": "atEnd()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + BB ;)",
    "insertText": "if(BB == BBs->end())"
  },
  {
    "label": "inst_begin()",
    "kind": "Method",
    "detail": "Function (} } } ; typedef InstIterator<iplist<BasicBlock>,Function::iterator,BasicBlock::iterator,Instruction> inst_iterator ; typedef InstIterator<const iplist<BasicBlock>,Function::const_iterator,BasicBlock::const_iterator,const Instruction> const_inst_iterator ; inst_iterator)",
    "insertText": "inst_begin(Function *F)"
  },
  {
    "label": "inst_end()",
    "kind": "Method",
    "detail": "Function (} inst_iterator)",
    "insertText": "inst_end(Function *F)"
  },
  {
    "label": "inst_range()",
    "kind": "Method",
    "detail": "Function (} iterator_range<inst_iterator>)",
    "insertText": "inst_range(Function *F)"
  },
  {
    "label": "inst_begin()",
    "kind": "Method",
    "detail": "Function (} const_inst_iterator)",
    "insertText": "inst_begin(const Function *F)"
  },
  {
    "label": "inst_end()",
    "kind": "Method",
    "detail": "Function (} const_inst_iterator)",
    "insertText": "inst_end(const Function *F)"
  },
  {
    "label": "inst_range()",
    "kind": "Method",
    "detail": "Function (} iterator_range<const_inst_iterator>)",
    "insertText": "inst_range(const Function *F)"
  },
  {
    "label": "inst_begin()",
    "kind": "Method",
    "detail": "Function (} inst_iterator)",
    "insertText": "inst_begin(Function &F)"
  },
  {
    "label": "inst_end()",
    "kind": "Method",
    "detail": "Function (} inst_iterator)",
    "insertText": "inst_end(Function &F)"
  },
  {
    "label": "inst_range()",
    "kind": "Method",
    "detail": "Function (} iterator_range<inst_iterator>)",
    "insertText": "inst_range(Function &F)"
  },
  {
    "label": "inst_begin()",
    "kind": "Method",
    "detail": "Function (} const_inst_iterator)",
    "insertText": "inst_begin(const Function &F)"
  },
  {
    "label": "inst_end()",
    "kind": "Method",
    "detail": "Function (} const_inst_iterator)",
    "insertText": "inst_end(const Function &F)"
  },
  {
    "label": "inst_range()",
    "kind": "Method",
    "detail": "Function (} iterator_range<const_inst_iterator>)",
    "insertText": "inst_range(const Function &F)"
  }
]