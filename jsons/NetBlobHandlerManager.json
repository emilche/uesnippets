[
  {
    "label": "FNetBlobHandlerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBlobHandlerManager"
  },
  {
    "label": "FNetBlobHandlerManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / ReplicationSystem / NetBlob / NetBlobHandler . h \" namespace UE::Net::Private { class FNetBlobHandlerManager final : public INetBlobReceiver { public :)",
    "insertText": "FNetBlobHandlerManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterHandler(UNetBlobHandler* Handler)"
  },
  {
    "label": "CreateNetBlob()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FNetBlob>)",
    "insertText": "CreateNetBlob(const FNetBlobCreationInfo&)"
  },
  {
    "label": "OnNetBlobReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetBlobReceived(UE::Net::FNetSerializationContext& Context, const TRefCountPtr<FNetBlob>& Blob)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(uint32 ConnectionId)"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(uint32 ConnectionId)"
  }
]