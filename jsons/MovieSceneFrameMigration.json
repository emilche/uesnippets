[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "FMovieSceneFrameRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFrameRange"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Misc / FrameNumber . h \" # include \" MovieSceneFwd . h \" # include \" Serialization / StructuredArchive . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneFrameMigration . generated . h \" class FArchive ; class FOutputDevice ; class FString ; class UObject ; struct FPropertyTag ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FMovieSceneFrameRange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FFloatRange MigrationDefault ; # endif)",
    "insertText": "FMovieSceneFrameRange() : Value(TRange<FFrameNumber>::Empty())"
  },
  {
    "label": "FMovieSceneFrameRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneFrameRange(const TRange<FFrameNumber>& InValue) : Value(InValue)"
  },
  {
    "label": "FromFloatRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "FromFloatRange(const TRange<float>& InFloatRange)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(FPropertyTag const& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "GetLowerBound()",
    "kind": "Method",
    "detail": "Function (TRangeBound<FFrameNumber>)",
    "insertText": "GetLowerBound()"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (} TRangeBound<FFrameNumber>)",
    "insertText": "GetUpperBound()"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FMovieSceneFrameRange const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "operator(const FMovieSceneFrameRange& A, const FMovieSceneFrameRange& B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 PrevWhich = IndexAt - 1 ;)",
    "insertText": "if(NewFrame >= Times[PrevWhich])"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Times .)",
    "insertText": "Emplace(NewFrame)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Emplace(Value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "while(--PrevWhich >= 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Times .)",
    "insertText": "Insert(NewFrame, PrevWhich + 1)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Insert(Value, PrevWhich + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(PrevWhich < 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Times .)",
    "insertText": "Insert(NewFrame, 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Insert(Value, 0)"
  }
]