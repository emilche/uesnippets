[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IVoiceCapture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVoiceCapture"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VoicePackage . h \" # include \" DSP / MultithreadedPatching . h \" class Error ; namespace EVoiceCaptureState { enum Type { UnInitialized,NotCapturing,Ok,NoData,Stopping,BufferTooSmall,Error } ; const TCHAR*)",
    "insertText": "ToString(EVoiceCaptureState::Type VoiceCaptureState)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case NotCapturing : { return)",
    "insertText": "TEXT(\"Not Capturing\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Ok : { return)",
    "insertText": "TEXT(\"Ok\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case NoData : { return)",
    "insertText": "TEXT(\"No Data\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Stopping : { return)",
    "insertText": "TEXT(\"Stopping\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case BufferTooSmall : { return)",
    "insertText": "TEXT(\"BufferTooSmall\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} case Error : { return)",
    "insertText": "TEXT(\"Error\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "IVoiceCapture()",
    "kind": "Method",
    "detail": "Function (} } class IVoiceCapture : public TSharedFromThis<IVoiceCapture> { protected :)",
    "insertText": "IVoiceCapture()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init(const FString& DeviceName, int32 SampleRate, int32 NumChannels)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "ChangeDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChangeDevice(const FString& DeviceName, int32 SampleRate, int32 NumChannels)"
  },
  {
    "label": "IsCapturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturing()"
  },
  {
    "label": "GetCaptureState()",
    "kind": "Method",
    "detail": "Function (EVoiceCaptureState::Type)",
    "insertText": "GetCaptureState(uint32& OutAvailableVoiceData)"
  },
  {
    "label": "GetVoiceData()",
    "kind": "Method",
    "detail": "Function (EVoiceCaptureState::Type)",
    "insertText": "GetVoiceData(uint8* OutVoiceBuffer, uint32 InVoiceBufferSize, uint32& OutAvailableVoiceData)"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "DumpState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpState()"
  },
  {
    "label": "GetMicrophoneAudio()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "GetMicrophoneAudio(int32 MaxExpectedLatencyInSamples, float Gain)"
  },
  {
    "label": "GetCurrentAmplitude()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentAmplitude()"
  }
]