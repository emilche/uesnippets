[
  {
    "label": "FVectorVMCompilationOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMCompilationOutput"
  },
  {
    "label": "FVectorVMLanguageSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorVMLanguageSpec"
  },
  {
    "label": "ir_variable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_variable"
  },
  {
    "label": "FVectorVMCodeBackend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMCodeBackend"
  },
  {
    "label": "exec_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "exec_list"
  },
  {
    "label": "_mesa_glsl_parse_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mesa_glsl_parse_state"
  },
  {
    "label": "ir_call",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_call"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LowerSubToAddNeg()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" hlslcc . h \" # include \" LanguageSpec . h \" # include \" VectorVM . h \" struct FVectorVMCompilationOutput ; class FVectorVMLanguageSpec : public ILanguageSpec { protected : public : bool)",
    "insertText": "LowerSubToAddNeg()"
  },
  {
    "label": "SetupLanguageIntrinsics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupLanguageIntrinsics(_mesa_glsl_parse_state* State, exec_list* ir)"
  },
  {
    "label": "FVectorVMCodeBackend()",
    "kind": "Method",
    "detail": "Function (} ; class ir_variable ; struct FVectorVMCodeBackend : public FCodeBackend {)",
    "insertText": "FVectorVMCodeBackend(unsigned int InHlslCompileFlags, EHlslCompileTarget InTarget, FVectorVMCompilationOutput& InCompilerOutput) : FCodeBackend(InHlslCompileFlags, InTarget), CompilationOutput(InCompilerOutput)"
  },
  {
    "label": "GenerateMain()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GenerateMain(EHlslShaderFrequency Frequency, const char* EntryPoint, exec_list* Instructions, _mesa_glsl_parse_state* ParseState)"
  },
  {
    "label": "GenerateCode()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "GenerateCode(struct exec_list* ir, struct _mesa_glsl_parse_state* ParseState, EHlslShaderFrequency Frequency)"
  },
  {
    "label": "get_scalarize_mode()",
    "kind": "Method",
    "detail": "Function (FVectorVMCompilationOutput& CompilationOutput ; } ; class ir_call ; struct exec_list ; struct _mesa_glsl_parse_state ; enum class ECallScalarizeMode : uint8 { SplitCalls,SplitParams,None,Error,} ; ECallScalarizeMode)",
    "insertText": "get_scalarize_mode(ir_function_signature* in_sig)"
  },
  {
    "label": "get_special_vm_opcode()",
    "kind": "Method",
    "detail": "Function (EVectorVMOp)",
    "insertText": "get_special_vm_opcode(ir_function_signature* signature)"
  },
  {
    "label": "vm_remove_self_ref_assignments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_remove_self_ref_assignments(exec_list* instructions, _mesa_glsl_parse_state *state)"
  },
  {
    "label": "vm_matrices_to_vectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_matrices_to_vectors(exec_list* instructions, _mesa_glsl_parse_state *state)"
  },
  {
    "label": "do_vec_op_to_scalar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_vec_op_to_scalar(exec_list *instructions, _mesa_glsl_parse_state* parse_state)"
  },
  {
    "label": "vm_flatten_branches_to_selects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "vm_flatten_branches_to_selects(exec_list *instructions, _mesa_glsl_parse_state *state)"
  },
  {
    "label": "vm_to_single_op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_to_single_op(exec_list *ir, _mesa_glsl_parse_state *state)"
  },
  {
    "label": "vm_merge_ops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_merge_ops(exec_list *ir, _mesa_glsl_parse_state *state)"
  },
  {
    "label": "vm_scalarize_ops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_scalarize_ops(exec_list* ir, _mesa_glsl_parse_state* state)"
  },
  {
    "label": "vm_extract_scalar_ops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "vm_extract_scalar_ops(exec_list* ir, _mesa_glsl_parse_state* state)"
  },
  {
    "label": "vm_propagate_non_expressions_visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_propagate_non_expressions_visitor(exec_list* ir, _mesa_glsl_parse_state* state)"
  },
  {
    "label": "vm_gen_bytecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vm_gen_bytecode(exec_list *ir, _mesa_glsl_parse_state *state, FVectorVMCompilationOutput& InCompOutput)"
  },
  {
    "label": "DebugDumpIR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDumpIR(struct exec_list* ir, struct _mesa_glsl_parse_state* State)"
  },
  {
    "label": "vm_debug_dump()",
    "kind": "Method",
    "detail": "Function (# define VM_VERBOSE_LOGGING 0 # if VM_VERBOSE_LOGGING = = 2 # define)",
    "insertText": "vm_debug_dump(ir, state) DebugDumpIR(ir, state) #define vm_debug_print dprintf #elif VM_VERBOSE_LOGGING == 1 #define vm_debug_dump(ir, state) #define vm_debug_print dprintf #else #define vm_debug_dump(ir, state) #define vm_debug_print(...) #endif DECLARE_LOG_CATEGORY_EXTERN(LogVVMBackend, All, All)"
  }
]