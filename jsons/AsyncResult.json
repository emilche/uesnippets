[
  {
    "label": "IAsyncProgress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncProgress"
  },
  {
    "label": "IAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncTask"
  },
  {
    "label": "TAsyncResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAsyncResult"
  },
  {
    "label": "TAsyncResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / Future . h \" class IAsyncProgress ; class IAsyncTask ; template<ResultType> class TAsyncResult { public :)",
    "insertText": "TAsyncResult()"
  },
  {
    "label": "TAsyncResult()",
    "kind": "Method",
    "detail": "Function (} template<ArgType,= std::enable_if_t<std::is_same_v<ArgType,ResultType>&& std::is_reference_v<const ArgType&>>>)",
    "insertText": "TAsyncResult(const ArgType& Result)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (TPromise<ResultType> Promise ; Promise .)",
    "insertText": "SetValue(Result)"
  },
  {
    "label": "GetFuture()",
    "kind": "Method",
    "detail": "Function (Future = Promise .)",
    "insertText": "GetFuture()"
  },
  {
    "label": "TAsyncResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAsyncResult(TFuture<ResultType>&& InFuture, const TSharedPtr<IAsyncProgress>& InProgress, const TSharedPtr<IAsyncTask>& InTask) : Future(MoveTemp(InFuture)) , Progress(InProgress) , Task(InTask)"
  },
  {
    "label": "TAsyncResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAsyncResult(TAsyncResult&& Other) : Future(MoveTemp(Other.Future)) , Progress(Other.Progress) , Task(Other.Task)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Other . Progress .)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : TAsyncResult&)",
    "insertText": "operator(TAsyncResult&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Future =)",
    "insertText": "MoveTemp(Other.Future)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TAsyncResult&)",
    "insertText": "operator(const TAsyncResult&)"
  }
]