[
  {
    "label": "Node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Node"
  },
  {
    "label": "CAstNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAstNode"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "LocusDistanceResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocusDistanceResult"
  },
  {
    "label": "FTile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTile"
  },
  {
    "label": "Clause",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Clause"
  },
  {
    "label": "Snippet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Snippet"
  },
  {
    "label": "Identifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Identifier"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeInfo"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "VisitPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VisitPolicy"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "FVstContains_Visitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVstContains_Visitor"
  },
  {
    "label": "uLang",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uLang"
  },
  {
    "label": "SChildParent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SChildParent"
  },
  {
    "label": "Clause",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Clause"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CAtom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAtom"
  },
  {
    "label": "Comment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Comment"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Snippet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Snippet"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Module"
  },
  {
    "label": "Package",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Package"
  },
  {
    "label": "Project",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Project"
  },
  {
    "label": "Definition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Definition"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FlowIf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlowIf"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BinaryOpLogicalOr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpLogicalOr"
  },
  {
    "label": "BinaryOpLogicalAnd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpLogicalAnd"
  },
  {
    "label": "PrefixOpLogicalNot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrefixOpLogicalNot"
  },
  {
    "label": "BinaryOpCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpCompare"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Where",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Where"
  },
  {
    "label": "Mutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Mutation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TypeSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeSpec"
  },
  {
    "label": "Identifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Identifier"
  },
  {
    "label": "Operator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Operator"
  },
  {
    "label": "BinaryOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOp"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BinaryOpAddSub",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpAddSub"
  },
  {
    "label": "BinaryOpMulDivInfix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpMulDivInfix"
  },
  {
    "label": "BinaryOpRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpRange"
  },
  {
    "label": "BinaryOpArrow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryOpArrow"
  },
  {
    "label": "PrePostCall",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrePostCall"
  },
  {
    "label": "Op",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Op"
  },
  {
    "label": "IntLiteral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntLiteral"
  },
  {
    "label": "FloatLiteral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FloatLiteral"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CharLiteral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CharLiteral"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "StringLiteral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringLiteral"
  },
  {
    "label": "PathLiteral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PathLiteral"
  },
  {
    "label": "InterpolatedString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InterpolatedString"
  },
  {
    "label": "Lambda",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Lambda"
  },
  {
    "label": "Control",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Control"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Macro",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Macro"
  },
  {
    "label": "Parens",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Parens"
  },
  {
    "label": "Commas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Commas"
  },
  {
    "label": "Placeholder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Placeholder"
  },
  {
    "label": "ParseError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParseError"
  },
  {
    "label": "Escape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Escape"
  },
  {
    "label": "VisitPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VisitPolicy"
  },
  {
    "label": "SPathToNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPathToNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SLocus()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SLocus(0, 0, 0, 0)"
  },
  {
    "label": "SLocus()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SLocus()"
  },
  {
    "label": "PrependAux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependAux(const TSRef<Node>& AuxChild)"
  },
  {
    "label": "PrependAux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependAux(const NodeArray& AuxChildren)"
  },
  {
    "label": "AppendAux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAux(const TSRef<Node>& AuxChild)"
  },
  {
    "label": "AppendAux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAux(const NodeArray& AuxChildren)"
  },
  {
    "label": "AppendAuxAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAuxAt(const TSRef<Node>& AuxChild, int32_t Idx)"
  },
  {
    "label": "SetAux()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAux(const TSRef<Clause>& Aux)"
  },
  {
    "label": "AppendPrefixComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPrefixComment(const TSRef<Node>& CommentNode)"
  },
  {
    "label": "AppendPrefixComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPrefixComments(const NodeArray& CommentNodes)"
  },
  {
    "label": "AppendPostfixComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPostfixComment(const TSRef<Node>& CommentNode)"
  },
  {
    "label": "AppendPostfixComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPostfixComments(const NodeArray& CommentNodes)"
  },
  {
    "label": "VisitWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitWith(const TSRef<Vst::Node>& node, VisitPolicy& visit_policy)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Move(_Children)"
  },
  {
    "label": "SharedThis()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SharedThis(this)"
  },
  {
    "label": "ReplaceSelfWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSelfWith(const TSRef<Node>& replacement)"
  },
  {
    "label": "RemoveFromParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromParent(int32_t idx = uLang::IndexNone)"
  },
  {
    "label": "RemoveMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMapping( uLang::CAstNode* AstNode )"
  },
  {
    "label": "EnsureAuxAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureAuxAllocated()"
  },
  {
    "label": "MakeStub()",
    "kind": "Method",
    "detail": "Function (TSRef<Node>)",
    "insertText": "MakeStub(const SLocus& Whence)"
  },
  {
    "label": "FindModule()",
    "kind": "Method",
    "detail": "Function (uLang::TOptional<TSRef<Module>>)",
    "insertText": "FindModule(const Node& ModuleContainer, const CUTF8StringView& ModuleName)"
  },
  {
    "label": "FindModule()",
    "kind": "Method",
    "detail": "Function (uLang::TOptional<TSRef<Module>>)",
    "insertText": "FindModule(const Node& ModuleContainer, const CUTF8StringView& ModuleName)"
  },
  {
    "label": "ULANG_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ULANG_UNREACHABLE()"
  },
  {
    "label": "ULANG_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ULANG_UNREACHABLE()"
  },
  {
    "label": "ULANG_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ULANG_UNREACHABLE()"
  },
  {
    "label": "AppendAddOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAddOperation(const SLocus& AddWhence, const TSRef<Node>& RhsOperand)"
  },
  {
    "label": "AppendSubOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSubOperation(const SLocus& SubWhence, const TSRef<Node>& RhsOperand)"
  },
  {
    "label": "AppendMulOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMulOperation(const SLocus& MulWhence, const TSRef<Node>& RhsOperand)"
  },
  {
    "label": "AppendDivOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDivOperation(const SLocus& DivWhence, const TSRef<Node>& RhsOperand)"
  },
  {
    "label": "PrependQMark()",
    "kind": "Method",
    "detail": "Function (TSRef<Clause>)",
    "insertText": "PrependQMark(const SLocus& Whence)"
  },
  {
    "label": "PrependHat()",
    "kind": "Method",
    "detail": "Function (TSRef<Clause>)",
    "insertText": "PrependHat(const SLocus& Whence)"
  },
  {
    "label": "PrependCallArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependCallArgs(bool bCanFail, const TSRef<Clause>& Args)"
  },
  {
    "label": "AppendQMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendQMark(const SLocus& Whence)"
  },
  {
    "label": "AppendHat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHat(const SLocus& Whence)"
  },
  {
    "label": "AppendCallArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendCallArgs(bool bCanFail, const TSRef<Clause>& Args)"
  },
  {
    "label": "AppendDotIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDotIdent(const SLocus& Whence, const TSRef<Identifier>& Ident)"
  },
  {
    "label": "TakeLastArgs()",
    "kind": "Method",
    "detail": "Function (TSPtr<Clause>)",
    "insertText": "TakeLastArgs()"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ReturnType()"
  },
  {
    "label": "VstAsCodeSourceAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VstAsCodeSourceAppend(const TSRef<Vst::Node>& VstNode, CUTF8StringBuilder& Source)"
  },
  {
    "label": "VstAsCodeSourceAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VstAsCodeSourceAppend(const TSRef<Vst::Node>& VstNode, const EPrettyPrintBehaviour Flags, CUTF8StringBuilder& Source)"
  },
  {
    "label": "VstAsCodeSourceAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VstAsCodeSourceAppend(const TSRef<Vst::PrePostCall>& VstNode, CUTF8StringBuilder& OutSource, int32_t FirstChildIndex, int32_t LastChildIndex)"
  },
  {
    "label": "VstAsCodeSourceAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VstAsCodeSourceAppend(const TSRef<Vst::Clause>& VstClause, CUTF8StringBuilder& OutSource, int32_t InitialIndent, CUTF8String const& Separator)"
  },
  {
    "label": "GeneratePathToNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePathToNode(const TSRef<Vst::Node>& Node, const TSRef<Vst::Snippet>& VstSnippet, SPathToNode& PathToNode)"
  },
  {
    "label": "GetNodeFromPath()",
    "kind": "Method",
    "detail": "Function (TSPtr<Vst::Node>)",
    "insertText": "GetNodeFromPath(const TSRef<Vst::Snippet>& VstSnippet, const SPathToNode& Path, bool bReturnParent=false)"
  },
  {
    "label": "GetSignedDistanceBetweenPositionAndLocus()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetSignedDistanceBetweenPositionAndLocus(const SLocus& A, const SPosition& B, const CUTF8StringView& SourceText)"
  }
]