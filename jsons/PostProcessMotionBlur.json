[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVelocityFlattenTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVelocityFlattenTextures"
  },
  {
    "label": "FMotionBlurInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMotionBlurInputs"
  },
  {
    "label": "FMotionBlurOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMotionBlurOutputs"
  },
  {
    "label": "IsMotionBlurEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" TranslucentRendering . h \" # include \" PostProcess / LensDistortion . h \" bool)",
    "insertText": "IsMotionBlurEnabled(const FViewInfo& View)"
  },
  {
    "label": "IsVisualizeMotionBlurEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizeMotionBlurEnabled(const FViewInfo& View)"
  },
  {
    "label": "DoesMotionBlurNeedsHalfResInput()",
    "kind": "Method",
    "detail": "Function (enum class EMotionBlurQuality : uint32 { Low,Medium,High,VeryHigh,MAX } ; enum class EMotionBlurFilter : uint32 { Unified,Separable } ; bool)",
    "insertText": "DoesMotionBlurNeedsHalfResInput()"
  },
  {
    "label": "GetMotionBlurQuality()",
    "kind": "Method",
    "detail": "Function (EMotionBlurQuality)",
    "insertText": "GetMotionBlurQuality()"
  },
  {
    "label": "GetMotionBlurFilter()",
    "kind": "Method",
    "detail": "Function (EMotionBlurFilter)",
    "insertText": "GetMotionBlurFilter()"
  },
  {
    "label": "GetMotionBlurDirections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMotionBlurDirections()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FVelocityFlattenParameters, ) SHADER_PARAMETER(FVector2f, VelocityScale) SHADER_PARAMETER(float, VelocityMax) END_SHADER_PARAMETER_STRUCT() FVelocityFlattenParameters GetVelocityFlattenParameters(const FViewInfo& View)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FVelocityFlattenTextures { int32 kMaxVelocityTileTextureCount = 2 ; int32 kTileSize = 1 6 ; FScreenPassTexture VelocityFlatten ; FScreenPassTexture VelocityTileArray ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AllowExternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowExternal(const FViewInfo& View)"
  },
  {
    "label": "AddMotionBlurPass()",
    "kind": "Method",
    "detail": "Function (} ; struct FMotionBlurInputs { bool bOutputHalfRes = false ; bool bOutputQuarterRes = false ; FScreenPassRenderTarget OverrideOutput ; FScreenPassTextureSlice SceneColor ; FScreenPassTexture SceneDepth ; FScreenPassTexture SceneVelocity ; FTranslucencyPassResources PostMotionBlurTranslucency ; EMotionBlurQuality Quality = EMotionBlurQuality::VeryHigh ; EMotionBlurFilter Filter = EMotionBlurFilter::Separable ; FVelocityFlattenTextures VelocityFlattenTextures ; FLensDistortionLUT LensDistortionLUT ; } ; struct FMotionBlurOutputs { FScreenPassTextureSlice FullRes ; FScreenPassTexture HalfRes ; FScreenPassTexture QuarterRes ; } ; FMotionBlurOutputs)",
    "insertText": "AddMotionBlurPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMotionBlurInputs& Inputs)"
  },
  {
    "label": "AddVisualizeMotionBlurPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTextureSlice)",
    "insertText": "AddVisualizeMotionBlurPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMotionBlurInputs& Inputs)"
  }
]