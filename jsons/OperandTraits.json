[
  {
    "label": "FixedNumOperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedNumOperandTraits"
  },
  {
    "label": "OptionalOperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OptionalOperandTraits"
  },
  {
    "label": "VariadicOperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariadicOperandTraits"
  },
  {
    "label": "HungoffOperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HungoffOperandTraits"
  },
  {
    "label": "op_begin()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_OPERANDTRAITS_H # define LLVM_IR_OPERANDTRAITS_H # include \" llvm / IR / User . h \" namespace llvm { template<SubClass,unsigned ARITY> struct FixedNumOperandTraits { Use*)",
    "insertText": "op_begin(SubClass* U)"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (} Use*)",
    "insertText": "op_end(SubClass* U)"
  },
  {
    "label": "operands()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "operands(const User*)"
  },
  {
    "label": "operands()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "operands(const User *U)"
  },
  {
    "label": "op_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<unsigned MINARITY = 1> struct HungoffOperandTraits { Use*)",
    "insertText": "op_begin(User* U)"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (} Use*)",
    "insertText": "op_end(User* U)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(VALUECLASS) \\ public: \\ inline VALUECLASS *getOperand(unsigned)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "setOperand(unsigned, VALUECLASS*)"
  },
  {
    "label": "op_begin()",
    "kind": "Method",
    "detail": "Function (\\ op_iterator)",
    "insertText": "op_begin()"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (\\ op_iterator)",
    "insertText": "op_end()"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ protected : \\ template<int> Use&)",
    "insertText": "Op()"
  },
  {
    "label": "getNumOperands()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ unsigned)",
    "insertText": "getNumOperands() const #define DEFINE_TRANSPARENT_OPERAND_ACCESSORS(CLASS, VALUECLASS) \\ CLASS::op_iterator CLASS::op_begin()"
  },
  {
    "label": "op_begin()",
    "kind": "Method",
    "detail": "Function (\\ return OperandTraits<CLASS)",
    "insertText": "op_begin(this)"
  },
  {
    "label": "op_begin()",
    "kind": "Method",
    "detail": "Function (\\ return OperandTraits<CLASS)",
    "insertText": "op_begin(const_cast<CLASS*>(this))"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (\\ return OperandTraits<CLASS)",
    "insertText": "op_end(this)"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (\\ return OperandTraits<CLASS)",
    "insertText": "op_end(const_cast<CLASS*>(this))"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (\\ } \\ VALUECLASS*)",
    "insertText": "getOperand(unsigned i_nocapture)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(i_nocapture < OperandTraits<CLASS>::operands(this) \\ && \"getOperand() out of range!\")"
  },
  {
    "label": "VALUECLASS()",
    "kind": "Method",
    "detail": "Function (\\ return cast_or_null<)",
    "insertText": "VALUECLASS(\\ OperandTraits<CLASS>::op_begin(const_cast<CLASS*>(this))[i_nocapture].get())"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "setOperand(unsigned i_nocapture, VALUECLASS *Val_nocapture)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(i_nocapture < OperandTraits<CLASS>::operands(this) \\ && \"setOperand() out of range!\")"
  },
  {
    "label": "getNumOperands()",
    "kind": "Method",
    "detail": "Function (\\ } \\ unsigned)",
    "insertText": "getNumOperands()"
  },
  {
    "label": "operands()",
    "kind": "Method",
    "detail": "Function (\\ return OperandTraits<CLASS)",
    "insertText": "operands(this)"
  },
  {
    "label": "Idx_nocapture()",
    "kind": "Method",
    "detail": "Function (\\ return this -> OpFrom<)",
    "insertText": "Idx_nocapture(this)"
  }
]