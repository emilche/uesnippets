[
  {
    "label": "FAsyncEnumerateTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncEnumerateTaskData"
  },
  {
    "label": "EnumerateAsyncAlgoritm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnumerateAsyncAlgoritm"
  },
  {
    "label": "FEnumerationStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumerationStackEntry"
  },
  {
    "label": "FEnumerateAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEnumerateAsyncTask"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackEntry"
  },
  {
    "label": "FOutputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputEvent"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" Model / MonotonicTimelineData . h \" # include \" TraceServices / Containers / Timelines . h \" namespace TraceServices { template<InEventType,SettingsType> struct FAsyncEnumerateTaskData { uint32 TaskIndex ; uint32 NumTasks ; uint64 StartPageIndex ; uint64 EndPageIndex ; double StartTime ; double EndTime ; EEventSortOrder SortOrder ; const FDetailLevel<InEventType,SettingsType>* DetailLevel ; ITimeline<InEventType>::AsyncEventRangeCallback EventRangeCallback ; ITimeline<InEventType>::AsyncEventCallback EventCallback ; } ; template<InEventType,SettingsType> class EnumerateAsyncAlgoritm { public : struct FEnumerationStackEntry { double StartTime ; InEventType Event ; } ; typedef TFunctionRef<)",
    "insertText": "void(int32)"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsDownSampled(FAsyncEnumerateTaskData<InEventType, SettingsType>& Data, InitialStackCallback InitCallback, typename ITimeline<InEventType>::EventCallback Callback)"
  },
  {
    "label": "GetIteratorFromPage()",
    "kind": "Method",
    "detail": "Function (const FDetailLevel<InEventType,SettingsType>& DetailLevel =* Data . DetailLevel ; auto ScopeEntryIterator = DetailLevel . ScopeEntries .)",
    "insertText": "GetIteratorFromPage(Data.StartPageIndex)"
  },
  {
    "label": "GetCurrentPage()",
    "kind": "Method",
    "detail": "Function (const FEventScopeEntryPage* ScopePage = ScopeEntryIterator .)",
    "insertText": "GetCurrentPage()"
  },
  {
    "label": "GetIteratorFromItem()",
    "kind": "Method",
    "detail": "Function (const FEventScopeEntryPage* InitialPage = ScopePage ; auto EventsIterator = DetailLevel . Events .)",
    "insertText": "GetIteratorFromItem(ScopePage->BeginEventIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry EventStack [ SettingsType::MaxDepth ] ; int32 CurrentStackDepth = ScopePage -> InitialStackCount ;)",
    "insertText": "for(int32 InitialStackIndex = 0; InitialStackIndex < CurrentStackDepth; ++InitialStackIndex)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& EnumerationStackEntry = EventStack [ InitialStackIndex ] ; const FEventStackEntry& EventStackEntry = ScopePage -> InitialStack [ InitialStackIndex ] ; EnumerationStackEntry . StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(EventStackEntry.EnterScopeIndex)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (EnumerationStackEntry . Event = DetailLevel .)",
    "insertText": "GetEvent(EventStackEntry.EventIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Data.SortOrder == EEventSortOrder::ByEndTime || (Data.TaskIndex == 0 && Data.SortOrder == EEventSortOrder::ByStartTime))"
  },
  {
    "label": "InitCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCallback(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ StackIndex ] ;)",
    "insertText": "if(Callback(true, StackEntry.StartTime, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (} const FEventScopeEntry* ScopeEntry = ScopeEntryIterator .)",
    "insertText": "GetCurrentItem()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint64 CurrentPageIndex = Data . StartPageIndex ;)",
    "insertText": "while(ScopeEntry && CurrentPageIndex < Data.EndPageIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ CurrentStackDepth + + ] ; StackEntry . Event =* Event ; StackEntry . StartTime = - ScopeEntry -> Time ;)",
    "insertText": "if(Callback(true, -ScopeEntry->Time, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(CurrentStackDepth > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - CurrentStackDepth ; FEnumerationStackEntry& StackEntry = EventStack [ CurrentStackDepth ] ;)",
    "insertText": "if(Callback(false, ScopeEntry->Time, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "GetCurrentPageIndex()",
    "kind": "Method",
    "detail": "Function (CurrentPageIndex = ScopeEntryIterator .)",
    "insertText": "GetCurrentPageIndex()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Data.TaskIndex != Data.NumTasks - 1 && Data.SortOrder == EEventSortOrder::ByEndTime)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (- - CurrentStackDepth ; InEventType CurrentEvent = DetailLevel .)",
    "insertText": "GetEvent(CurrentScopePage->InitialStack[CurrentStackDepth].EventIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(CurrentStackDepth > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ - - CurrentStackDepth ] ;)",
    "insertText": "if(Callback(false, DetailLevel.InsertionState.LastTime, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "EnumerateOrderedByStartTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateOrderedByStartTime()"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (struct FStackEntry { uint64 OutputEventIndex ; } ; FStackEntry EventStack [ SettingsType::MaxDepth ] ; uint32 CurrentDepth = 0 ; uint32 MinimumDepth = 0 ; struct FOutputEvent { double StartTime ; double EndTime ; uint32 Depth ; EventType Event ; } ; TArray<FOutputEvent> OutputEvents ; EnumerateAsyncAlgoritm<InEventType,SettingsType)",
    "insertText": "EnumerateEventsDownSampled(Data, [&CurrentDepth, &MinimumDepth](int32 InInitialDepth) { MinimumDepth = InInitialDepth; CurrentDepth = InInitialDepth; }, [this, &EventStack, &OutputEvents, &CurrentDepth, &MinimumDepth](bool IsEnter, double Time, const EventType& Event) { if (IsEnter) { FStackEntry& StackEntry = EventStack[CurrentDepth]; StackEntry.OutputEventIndex = OutputEvents.Num(); FOutputEvent& OutputEvent = OutputEvents.AddDefaulted_GetRef(); OutputEvent.StartTime = Time; OutputEvent.EndTime = Time; OutputEvent.Depth = CurrentDepth; OutputEvent.Event = Event; ++CurrentDepth; } else { { FStackEntry& StackEntry = EventStack[--CurrentDepth]; if (CurrentDepth >= MinimumDepth) { FOutputEvent* OutputEvent = OutputEvents.GetData() + StackEntry.OutputEventIndex; OutputEvent->EndTime = Time; } } if (CurrentDepth <= MinimumDepth) { MinimumDepth = CurrentDepth; for (FOutputEvent& OutputEvent : OutputEvents) { if (OutputEvent.EndTime >= Data.StartTime && OutputEvent.StartTime <= Data.EndTime) { if (this->Data.EventRangeCallback(OutputEvent.StartTime, OutputEvent.EndTime, OutputEvent.Depth, OutputEvent.Event, Data.TaskIndex) == EEventEnumerate::Stop) { return EEventEnumerate::Stop; } } } OutputEvents.Empty(OutputEvents.Num()); } } return EEventEnumerate::Continue; })"
  },
  {
    "label": "EnumerateOrderedByEndTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateOrderedByEndTime()"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentDepth = 0 ; struct FStackEntry { double StartTime ; } ; FStackEntry EventStack [ SettingsType::MaxDepth ] ; EnumerateAsyncAlgoritm<InEventType,SettingsType)",
    "insertText": "EnumerateEventsDownSampled(Data, [&CurrentDepth](int32 InInitialDepth) { CurrentDepth = InInitialDepth; }, [this, &EventStack, &CurrentDepth](bool IsEnter, double Time, const EventType& Event) { if (IsEnter) { FStackEntry& StackEntry = EventStack[CurrentDepth]; StackEntry.StartTime = Time; ++CurrentDepth; } else { FStackEntry& StackEntry = EventStack[--CurrentDepth]; if (Time >= Data.StartTime && StackEntry.StartTime <= Data.EndTime) { if (this->Data.EventRangeCallback(StackEntry.StartTime, Time, CurrentDepth, Event, Data.TaskIndex) == EEventEnumerate::Stop) { return EEventEnumerate::Stop; } } } return EEventEnumerate::Continue; })"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Data.SortOrder == EEventSortOrder::ByStartTime)"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (} } else { EnumerateAsyncAlgoritm<InEventType,SettingsType)",
    "insertText": "EnumerateEventsDownSampled(Data, [](int32 InInitialDepth) { }, [this](bool IsEnter, double Time, const EventType& Event) { return this->Data.EventCallback(IsEnter, Time, Event, Data.TaskIndex); })"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} } TStatId)",
    "insertText": "GetStatId()"
  }
]