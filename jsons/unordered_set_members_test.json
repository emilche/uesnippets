[
  {
    "label": "UnordSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnordSet"
  },
  {
    "label": "MembersTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MembersTest"
  },
  {
    "label": "TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_UNORDERED_SET_MEMBERS_TEST_H_ # define ABSL_CONTAINER_INTERNAL_UNORDERED_SET_MEMBERS_TEST_H_ # include<type_traits> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class UnordSet> class MembersTest : public::testing::Test { } ;)",
    "insertText": "TYPED_TEST_SUITE_P(MembersTest)"
  },
  {
    "label": "UseType()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "UseType()"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(MembersTest, Typedefs)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_same<typename TypeParam::key_type, typename TypeParam::value_type>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((absl::conjunction< absl::negation<std::is_signed<typename TypeParam::size_type>>, std::is_integral<typename TypeParam::size_type>>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((absl::conjunction< std::is_signed<typename TypeParam::difference_type>, std::is_integral<typename TypeParam::difference_type>>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_convertible< decltype(std::declval<const typename TypeParam::hasher&>()( std::declval<const typename TypeParam::key_type&>())), size_t>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_convertible< decltype(std::declval<const typename TypeParam::key_equal&>()( std::declval<const typename TypeParam::key_type&>(), std::declval<const typename TypeParam::key_type&>())), bool>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_same<typename TypeParam::allocator_type::value_type, typename TypeParam::value_type>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_same<typename TypeParam::value_type&, typename TypeParam::reference>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_same<const typename TypeParam::value_type&, typename TypeParam::const_reference>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_same<typename std::allocator_traits< typename TypeParam::allocator_type>::pointer, typename TypeParam::pointer>()))"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE((std::is_same<typename std::allocator_traits< typename TypeParam::allocator_type>::const_pointer, typename TypeParam::const_pointer>()))"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(MembersTest, SimpleFunctions)"
  },
  {
    "label": "EXPECT_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_GT(TypeParam().max_size(), 0)"
  },
  {
    "label": "TYPED_TEST_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TYPED_TEST_P(MembersTest, BeginEnd)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (TypeParam t = { TypeParam::value_type { } } ;)",
    "insertText": "EXPECT_EQ(t.begin(), t.cbegin())"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(t.end(), t.cend())"
  },
  {
    "label": "EXPECT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_NE(t.begin(), t.end())"
  },
  {
    "label": "EXPECT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_NE(t.cbegin(), t.cend())"
  },
  {
    "label": "REGISTER_TYPED_TEST_SUITE_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "REGISTER_TYPED_TEST_SUITE_P(MembersTest, Typedefs, SimpleFunctions, BeginEnd)"
  }
]