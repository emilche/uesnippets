[
  {
    "label": "IEditorDataStorageProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorDataStorageProvider"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "FColumnBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColumnBase"
  },
  {
    "label": "TColumn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TColumn"
  },
  {
    "label": "IQueryConditionCompileContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQueryConditionCompileContext"
  },
  {
    "label": "FEditorStorageQueryConditionCompileContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorStorageQueryConditionCompileContext"
  },
  {
    "label": "FConditions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConditions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FColumnBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Common / TypedElementCommonTypes . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class IEditorDataStorageProvider ; class UScriptStruct ; namespace UE::Editor::DataStorage::Queries { struct FColumnBase { TWeakObjectPtr<const UScriptStruct> TypeInfo = nullptr ; FName Identifier = NAME_None ; protected :)",
    "insertText": "FColumnBase()"
  },
  {
    "label": "FColumnBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColumnBase(TWeakObjectPtr<const UScriptStruct> ColumnTypeInfo, const FName& InIdentifier) : TypeInfo(ColumnTypeInfo) , Identifier(InIdentifier)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} } ; template<T = void> struct TColumn final : public FColumnBase { template<U = T>)",
    "insertText": "requires(!std::is_same_v<U, void>) constexpr explicit TColumn(const FName& Identifier = NAME_None) : FColumnBase(T::StaticStruct(), Identifier)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} template<U = T>)",
    "insertText": "requires(std::is_same_v<U, void>) constexpr explicit TColumn(TWeakObjectPtr<const UScriptStruct> ColumnTypeInfo, const FName& Identifier = NAME_None) : FColumnBase(ColumnTypeInfo, Identifier)"
  },
  {
    "label": "IQueryConditionCompileContext()",
    "kind": "Method",
    "detail": "Function (} } ; class IQueryConditionCompileContext { public : ~)",
    "insertText": "IQueryConditionCompileContext()"
  },
  {
    "label": "GenerateDynamicColumn()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "GenerateDynamicColumn(const FDynamicColumnDescription&)"
  },
  {
    "label": "FEditorStorageQueryConditionCompileContext()",
    "kind": "Method",
    "detail": "Function (} ; class FEditorStorageQueryConditionCompileContext : public IQueryConditionCompileContext { public :)",
    "insertText": "FEditorStorageQueryConditionCompileContext(IEditorDataStorageProvider* InDataStorage)"
  },
  {
    "label": "GenerateDynamicColumn()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "GenerateDynamicColumn(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (private : IEditorDataStorageProvider* DataStorage ; } ; class FConditions final { public : using ContainsCallback = TFunctionRef<)",
    "insertText": "bool(uint8_t ColumnIndex, TWeakObjectPtr<const UScriptStruct> Column)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConditions)",
    "insertText": "operator(const FConditions& Lhs, FColumnBase Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConditions)",
    "insertText": "operator(const FConditions& Lhs, const FConditions& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConditions)",
    "insertText": "operator(FColumnBase Lhs, FColumnBase Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConditions)",
    "insertText": "operator(FColumnBase Lhs, const FConditions& Rhs)"
  },
  {
    "label": "FConditions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConditions()"
  },
  {
    "label": "FConditions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConditions(FColumnBase Column)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (FConditions&)",
    "insertText": "Compile(const IQueryConditionCompileContext& CompileContext)"
  },
  {
    "label": "IsCompiled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiled()"
  },
  {
    "label": "AppendToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendToString(FString& Output)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(TConstArrayView<FColumnBase> AvailableColumns)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(TArray<TWeakObjectPtr<const UScriptStruct>>& MatchedColumns, TConstArrayView<FColumnBase> AvailableColumns, bool AvailableColumnsAreSorted = false)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(TConstArrayView<TWeakObjectPtr<const UScriptStruct>> AvailableColumns, bool AvailableColumnsAreSorted = false)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(TArray<TWeakObjectPtr<const UScriptStruct>>& MatchedColumns, TConstArrayView<TWeakObjectPtr<const UScriptStruct>> AvailableColumns, bool AvailableColumnsAreSorted = false)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(TSet<TWeakObjectPtr<const UScriptStruct>> AvailableColumns)"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Verify(ContainsCallback Callback)"
  },
  {
    "label": "MinimumColumnMatchRequired()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "MinimumColumnMatchRequired()"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<TWeakObjectPtr<const UScriptStruct>>)",
    "insertText": "GetColumns()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "AppendName()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AppendName(FString& Output, TWeakObjectPtr<const UScriptStruct> TypeInfo)"
  },
  {
    "label": "EntersScopeNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EntersScopeNext(uint8_t Index)"
  },
  {
    "label": "EntersScope()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EntersScope(uint8_t Index)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(TWeakObjectPtr<const UScriptStruct> ColumnType, const TArray<FColumnBase>& AvailableColumns)"
  },
  {
    "label": "VerifyBootstrap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyBootstrap(ContainsCallback Contains)"
  },
  {
    "label": "VerifyRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyRange(uint8_t& TokenIndex, uint8_t& ColumnIndex, ContainsCallback Contains)"
  },
  {
    "label": "ConvertColumnBitToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertColumnBitToArray(TArray<TWeakObjectPtr<const UScriptStruct>>& MatchedColumns, uint64 ColumnBits)"
  },
  {
    "label": "MinimumColumnMatchRequiredRange()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "MinimumColumnMatchRequiredRange(uint8_t& Front)"
  },
  {
    "label": "AppendQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendQuery(FConditions& Target, const FConditions& Source)"
  }
]