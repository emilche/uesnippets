[
  {
    "label": "IndexMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexMapper"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorConvolutionOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorConvolutionOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "GetKernelSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetKernelSize"
  },
  {
    "label": "IndexMapper()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONVOLUTION_H # define EIGEN_CXX11_TENSOR_TENSOR_CONVOLUTION_H namespace Eigen { namespace internal { template<Index,InputDims,int NumKernelDims,int Layout> class IndexMapper { public :)",
    "insertText": "IndexMapper(const InputDims& input_dims, const array<Index, NumKernelDims>& kernel_dims, const array<Index, NumKernelDims>& indices)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (array<Index,NumDims> dimensions = input_dims ;)",
    "insertText": "for(int i = 0; i < NumKernelDims; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index index = indices [ i ] ; const Index input_dim = input_dims [ index ] ; const Index kernel_dim = kernel_dims [ i ] ; const Index result_dim = input_dim - kernel_dim + 1 ; dimensions [ index ] = result_dim ; } array<Index,NumDims> inputStrides ; array<Index,NumDims> outputStrides ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (inputStrides [ 0 ] = 1 ; outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (inputStrides [ i ] = inputStrides [ i - 1 ]* input_dims [ i - 1 ] ; outputStrides [ i ] = outputStrides [ i - 1 ]* dimensions [ i - 1 ] ; } } else { inputStrides [ NumDims - 1 ] = 1 ; outputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = static_cast<int>(NumDims) - 2; i >= 0; --i)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (inputStrides [ i ] = inputStrides [ i + 1 ]* input_dims [ i + 1 ] ; outputStrides [ i ] = outputStrides [ i + 1 ]* dimensions [ i + 1 ] ; } } array<Index,NumDims> gpuInputDimensions ; array<Index,NumDims> gpuOutputDimensions ; array<Index,NumDims> tmp = dimensions ; array<Index,NumDims> ordering ; const size_t offset = static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ordering [ written ] = i ; gpuInputDimensions [ written ] = input_dims [ i ] ; gpuOutputDimensions [ written ] = dimensions [ i ] ; + + written ; } })",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_gpuInputStrides [ i ] = m_gpuInputStrides [ i - 1 ]* gpuInputDimensions [ i - 1 ] ; m_gpuOutputStrides [ i ] = m_gpuOutputStrides [ i - 1 ]* gpuOutputDimensions [ i - 1 ] ; } else { m_gpuInputStrides [ i ] = 1 ; m_gpuOutputStrides [ i ] = 1 ; } } } else {)",
    "insertText": "for(int i = NumDims - 1; i >= 0; --i)"
  },
  {
    "label": "mapGpuInputPlaneToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (m_gpuInputStrides [ i ] = m_gpuInputStrides [ i + 1 ]* gpuInputDimensions [ i + 1 ] ; m_gpuOutputStrides [ i ] = m_gpuOutputStrides [ i + 1 ]* gpuOutputDimensions [ i + 1 ] ; } else { m_gpuInputStrides [ i ] = 1 ; m_gpuOutputStrides [ i ] = 1 ; } } } } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Index)",
    "insertText": "mapGpuInputPlaneToTensorInputOffset(Index p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx = p / m_gpuInputStrides [ d ] ; inputIndex + = idx* m_inputStrides [ d ] ; p - = idx* m_gpuInputStrides [ d ] ; } inputIndex + = p* m_inputStrides [ NumKernelDims ] ; } else { std::ptrdiff_t limit = 0 ;)",
    "insertText": "if(NumKernelDims < NumDims)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (limit = NumDims - NumKernelDims - 1 ; })",
    "insertText": "for(int d = 0; d < limit; ++d)"
  },
  {
    "label": "mapGpuOutputPlaneToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (const Index idx = p / m_gpuInputStrides [ d ] ; inputIndex + = idx* m_inputStrides [ d ] ; p - = idx* m_gpuInputStrides [ d ] ; } inputIndex + = p* m_inputStrides [ limit ] ; } return inputIndex ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Index)",
    "insertText": "mapGpuOutputPlaneToTensorOutputOffset(Index p)"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const Index idx = p / m_gpuOutputStrides [ d ] ; outputIndex + = idx* m_outputStrides [ d ] ; p - = idx* m_gpuOutputStrides [ d ] ; } outputIndex + = p* m_outputStrides [ limit ] ; } return outputIndex ; } EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Index)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(Index i)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Indices&)",
    "insertText": "indices()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_inputImpl(op.inputExpression(), device), m_kernelImpl(op.kernelExpression(), device), m_kernelArg(op.kernelExpression()), m_kernel(NULL), m_local_kernel(false), m_device(device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<InputArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<KernelArgType, Device>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<InputArgType,Device>::Dimensions& input_dims = m_inputImpl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_inputStride [ i ] = m_inputStride [ i - 1 ]* input_dims [ i - 1 ] ; } } else { m_inputStride [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index input_dim = input_dims [ index ] ; const Index kernel_dim = kernel_dims [ i ] ; const Index result_dim = input_dim - kernel_dim + 1 ; m_dimensions [ index ] = result_dim ;)",
    "insertText": "if(i > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStride [ i ] = m_outputStride [ i - 1 ]* m_dimensions [ i - 1 ] ; } } else {)",
    "insertText": "for(int i = NumKernelDims - 1; i >= 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index input_dim = input_dims [ index ] ; const Index kernel_dim = kernel_dims [ i ] ; const Index result_dim = input_dim - kernel_dim + 1 ; m_dimensions [ index ] = result_dim ;)",
    "insertText": "if(i < NumKernelDims - 1)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_inputImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "preloadKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preloadKernel()"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_inputImpl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate((void*)m_kernel)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (m_local_kernel = false ; } m_kernel = NULL ; } void)",
    "insertText": "evalTo(typename XprType::Scalar* buffer)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (buffer [ i ] + =)",
    "insertText": "coeff(i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "CoeffReturnType()",
    "kind": "Method",
    "detail": "Function (CoeffReturnType result =)",
    "insertText": "CoeffReturnType(0)"
  },
  {
    "label": "convolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolve(firstInput(index), 0, NumKernelDims-1, result)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index idx0 = indices [ 0 ] / m_outputStride [ i ] ; const Index idx1 = indices [ 1 ] / m_outputStride [ i ] ; startInputs [ 0 ] + = idx0* m_inputStride [ i ] ; startInputs [ 1 ] + = idx1* m_inputStride [ i ] ; indices [ 0 ] - = idx0* m_outputStride [ i ] ; indices [ 1 ] - = idx1* m_outputStride [ i ] ; } } else {)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx0 = indices [ 0 ] / m_outputStride [ i ] ; const Index idx1 = indices [ 1 ] / m_outputStride [ i ] ; startInputs [ 0 ] + = idx0* m_inputStride [ i ] ; startInputs [ 1 ] + = idx1* m_inputStride [ i ] ; indices [ 0 ] - = idx0* m_outputStride [ i ] ; indices [ 1 ] - = idx1* m_outputStride [ i ] ; } } startInputs [ 0 ] + = indices [ 0 ] ; startInputs [ 1 ] + = indices [ 1 ] ;)",
    "insertText": "if(startInputs[1]-startInputs[0] == PacketSize-1)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (PacketReturnType result = internal::pset1<)",
    "insertText": "PacketReturnType(0)"
  },
  {
    "label": "convolvePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolvePacket(startInputs[0], 0, NumKernelDims-1, result)"
  },
  {
    "label": "convolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolve(startInputs[0], 0, NumKernelDims-1, data[0])"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (data [ i ] =)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "convolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolve(firstInput(index+i), 0, NumKernelDims-1, data[i])"
  },
  {
    "label": "convolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolve(startInputs[1], 0, NumKernelDims-1, data[PacketSize-1])"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const double kernel_size = m_kernelImpl .)",
    "insertText": "dimensions().TotalSize()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const double convolve_compute_cost = TensorOpCost::AddCost<)",
    "insertText": "Scalar() + TensorOpCost::MulCost<Scalar>()"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (const double firstIndex_compute_cost =)",
    "insertText": "NumDims(2 * TensorOpCost::AddCost<Index>() + 2 * TensorOpCost::MulCost<Index>() + TensorOpCost::DivCost<Index>())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "convolve()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStride [ i ] ; startInput + = idx* m_inputStride [ i ] ; index - = idx* m_outputStride [ i ] ; } } startInput + = index ; return startInput ; } EIGEN_DEVICE_FUNC void)",
    "insertText": "convolve(Index firstIndex, Index firstKernel, int DimIndex, CoeffReturnType& accum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index input = firstIndex + j* m_indexStride [ DimIndex ] ; const Index kernel = firstKernel + j* m_kernelStride [ DimIndex ] ;)",
    "insertText": "if(DimIndex > 0)"
  },
  {
    "label": "convolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolve(input, kernel, DimIndex-1, accum)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { accum + = m_inputImpl .)",
    "insertText": "coeff(input)"
  },
  {
    "label": "convolvePacket()",
    "kind": "Method",
    "detail": "Function (} } } template<Packet> EIGEN_DEVICE_FUNC void)",
    "insertText": "convolvePacket(Index firstIndex, Index firstKernel, int DimIndex, Packet& accum)"
  },
  {
    "label": "convolvePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "convolvePacket(input, kernel, DimIndex-1, accum)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} else { accum = internal::pmadd<)",
    "insertText": "Packet(m_inputImpl.template packet<Unaligned>(input), internal::pset1<Packet>(m_kernel[kernel]), accum)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_kernel = in_place ; m_local_kernel = false ; } else { size_t kernel_sz = m_kernelImpl .)",
    "insertText": "dimensions().TotalSize() * sizeof(Scalar)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (Scalar*)",
    "insertText": "local(Scalar*)m_device.allocate_temp(kernel_sz)"
  },
  {
    "label": "evalToTmp()",
    "kind": "Method",
    "detail": "Function (typedef TensorEvalToOp<const KernelArgType> EvalTo ; EvalTo)",
    "insertText": "evalToTmp(local, m_kernelArg)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (const bool Vectorize = internal::IsVectorizable<Device,KernelArgType>::value ; internal::TensorExecutor<const EvalTo,Device,Vectorize)",
    "insertText": "run(evalToTmp, m_device)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (m_kernel = local ; m_local_kernel = true ; } } array<Index,NumDims> m_inputStride ; array<Index,NumDims> m_outputStride ; array<Index,NumKernelDims> m_indexStride ; array<Index,NumKernelDims> m_kernelStride ; TensorEvaluator<InputArgType,Device> m_inputImpl ; TensorEvaluator<KernelArgType,Device> m_kernelImpl ; Dimensions m_dimensions ; KernelArgType m_kernelArg ; const Scalar* m_kernel ; bool m_local_kernel ; const Device EIGEN_DEVICE_REF m_device ; } ; # if)",
    "insertText": "defined(EIGEN_USE_GPU) && defined(EIGEN_GPUCC)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE int)",
    "insertText": "operator() (const int)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HIPCC) HIP_DYNAMIC_SHARED(float, s)"
  },
  {
    "label": "last_x()",
    "kind": "Method",
    "detail": "Function (# endif const int first_x = blockIdx . x* maxX ; const int)",
    "insertText": "last_x(first_x + maxX < numX ? first_x + maxX : numX)"
  },
  {
    "label": "StaticKernelSize()",
    "kind": "Method",
    "detail": "Function (const int num_x_input = last_x - first_x + GetKernelSize<)",
    "insertText": "StaticKernelSize()(kernelSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int num_x_output = last_x - first_x + 1 ; const int first_plane = blockIdx . y* blockDim . y ; const int plane_stride = blockDim . y* gridDim . y ;)",
    "insertText": "for(int p = first_plane + threadIdx.y; p < numPlanes; p += plane_stride)"
  },
  {
    "label": "mapGpuInputPlaneToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const int plane_input_offset = indexMapper .)",
    "insertText": "mapGpuInputPlaneToTensorInputOffset(p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int plane_kernel_offset = threadIdx . y* num_x_input ; # pragma unroll)",
    "insertText": "for(int i = threadIdx.x; i < num_x_input; i += blockDim.x)"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const int tensor_index = plane_input_offset + indexMapper .)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(i+first_x)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (s [ i + plane_kernel_offset ] = eval .)",
    "insertText": "coeff(tensor_index)"
  },
  {
    "label": "__syncthreads()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__syncthreads()"
  },
  {
    "label": "mapGpuOutputPlaneToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (const int plane_output_offset = indexMapper .)",
    "insertText": "mapGpuOutputPlaneToTensorOutputOffset(p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# pragma unroll)",
    "insertText": "for(int i = threadIdx.x; i < num_x_output; i += blockDim.x)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int kernel_offset = plane_kernel_offset + i ; float result = 0 . 0 f ; # pragma unroll)",
    "insertText": "for(int k = 0; k < GetKernelSize<StaticKernelSize>()(kernelSize); ++k)"
  },
  {
    "label": "mapGpuOutputKernelToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (result + = s [ k + kernel_offset ]* kernel [ k ] ; } const int tensor_index = plane_output_offset + indexMapper .)",
    "insertText": "mapGpuOutputKernelToTensorOutputOffset(i+first_x)"
  },
  {
    "label": "EigenConvolutionKernel2D()",
    "kind": "Method",
    "detail": "Function (} } ; template<InputEvaluator,Index,InputDims,int StaticKernelSizeX,int StaticKernelSizeY> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "EigenConvolutionKernel2D(InputEvaluator eval, const internal::IndexMapper<Index, InputDims, 2, InputEvaluator::Layout> indexMapper, const float* __restrict kernel, const int numPlanes, const int numX, const int maxX, const int numY, const int maxY, const int kernelSizeX, const int kernelSizeY, float* buffer)"
  },
  {
    "label": "StaticKernelSizeX()",
    "kind": "Method",
    "detail": "Function (const int num_x_input = last_x - first_x + GetKernelSize<)",
    "insertText": "StaticKernelSizeX()(kernelSizeX)"
  },
  {
    "label": "last_y()",
    "kind": "Method",
    "detail": "Function (const int num_x_output = last_x - first_x + 1 ; const int first_y = blockIdx . y* maxY ; const int)",
    "insertText": "last_y(first_y + maxY < numY ? first_y + maxY : numY)"
  },
  {
    "label": "StaticKernelSizeY()",
    "kind": "Method",
    "detail": "Function (const int num_y_input = last_y - first_y + GetKernelSize<)",
    "insertText": "StaticKernelSizeY()(kernelSizeY)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int num_y_output = last_y - first_y + 1 ; const int first_plane = blockIdx . z* blockDim . z ; const int plane_stride = blockDim . z* gridDim . z ;)",
    "insertText": "for(int p = first_plane + threadIdx.z; p < numPlanes; p += plane_stride)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int plane_kernel_offset = threadIdx . z* num_y_input ; # pragma unroll)",
    "insertText": "for(int j = threadIdx.y; j < num_y_input; j += blockDim.y)"
  },
  {
    "label": "num_x_input()",
    "kind": "Method",
    "detail": "Function (const int input_offset =)",
    "insertText": "num_x_input(j + plane_kernel_offset)"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const int tensor_index = plane_input_offset + indexMapper .)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(i+first_x, j+first_y)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# pragma unroll)",
    "insertText": "for(int j = threadIdx.y; j < num_y_output; j += blockDim.y)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float result = 0 . 0 f ; # pragma unroll)",
    "insertText": "for(int l = 0; l < GetKernelSize<StaticKernelSizeY>()(kernelSizeY); ++l)"
  },
  {
    "label": "num_x_input()",
    "kind": "Method",
    "detail": "Function (const int kernel_offset = kernelSizeX* l ; const int input_offset = i +)",
    "insertText": "num_x_input(j + l + plane_kernel_offset)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# pragma unroll)",
    "insertText": "for(int k = 0; k < GetKernelSize<StaticKernelSizeX>()(kernelSizeX); ++k)"
  },
  {
    "label": "mapGpuOutputKernelToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (result + = s [ k + input_offset ]* kernel [ k + kernel_offset ] ; } } const int tensor_index = plane_output_offset + indexMapper .)",
    "insertText": "mapGpuOutputKernelToTensorOutputOffset(i+first_x, j+first_y)"
  },
  {
    "label": "EigenConvolutionKernel3D()",
    "kind": "Method",
    "detail": "Function (} } ; template<InputEvaluator,Index,InputDims> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void)",
    "insertText": "EigenConvolutionKernel3D(InputEvaluator eval, const internal::IndexMapper<Index, InputDims, 3, InputEvaluator::Layout> indexMapper, const float* __restrict kernel, const size_t numPlanes, const size_t numX, const size_t maxX, const size_t numY, const size_t maxY, const size_t numZ, const size_t maxZ, const size_t kernelSizeX, const size_t kernelSizeY, const size_t kernelSizeZ, float* buffer)"
  },
  {
    "label": "last_z()",
    "kind": "Method",
    "detail": "Function (const int num_y_input = last_y - first_y + kernelSizeY ; const int first_z = blockIdx . z* maxZ ; const int)",
    "insertText": "last_z(first_z + maxZ < numZ ? first_z + maxZ : numZ)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int num_z_input = last_z - first_z + kernelSizeZ ;)",
    "insertText": "for(int p = 0; p < numPlanes; ++p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int plane_kernel_offset = 0 ;)",
    "insertText": "for(int k = threadIdx.z; k < num_z_input; k += blockDim.z)"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const int tensor_index = plane_input_offset + indexMapper .)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(i+first_x, j+first_y, k+first_z)"
  },
  {
    "label": "num_x_input()",
    "kind": "Method",
    "detail": "Function (s [ i +)",
    "insertText": "num_x_input(j + num_y_input * (k + plane_kernel_offset))] = eval.coeff(tensor_index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float result = 0 . 0 f ;)",
    "insertText": "for(int n = 0; n < kernelSizeZ; ++n)"
  },
  {
    "label": "num_x_input()",
    "kind": "Method",
    "detail": "Function (result + = s [ i + l +)",
    "insertText": "num_x_input(j + m + num_y_input * (k + n + plane_kernel_offset))] * kernel[l + kernelSizeX * (m + kernelSizeY * n)"
  },
  {
    "label": "mapGpuOutputKernelToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (} } } const int tensor_index = plane_output_offset + indexMapper .)",
    "insertText": "mapGpuOutputKernelToTensorOutputOffset(i+first_x, j+first_y, k+first_z)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Indices,InputArgType,KernelArgType> struct TensorEvaluator<const TensorConvolutionOp<Indices,InputArgType,KernelArgType>,GpuDevice> { typedef TensorConvolutionOp<Indices,InputArgType,KernelArgType> XprType ; const int NumDims = internal::array_size<TensorEvaluator<InputArgType,GpuDevice>::Dimensions>::value ; const int NumKernelDims = internal::array_size<Indices>::value ; typedef XprType::Index Index ; typedef DSizes<Index,NumDims> Dimensions ; typedef TensorEvaluator<KernelArgType,GpuDevice>::Dimensions KernelDimensions ; enum { IsAligned = TensorEvaluator<InputArgType,GpuDevice>::IsAligned& TensorEvaluator<KernelArgType,GpuDevice>::IsAligned,PacketAccess = false,BlockAccess = false,PreferBlockAccess = false,Layout = TensorEvaluator<InputArgType,GpuDevice>::Layout,CoordAccess = false,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ;)",
    "insertText": "TensorEvaluator(const XprType& op, const GpuDevice& device) : m_inputImpl(op.inputExpression(), device), m_kernelImpl(op.kernelExpression(), device), m_kernelArg(op.kernelExpression()), m_indices(op.indices()), m_buf(NULL), m_kernel(NULL), m_local_kernel(false), m_device(device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<InputArgType, GpuDevice>::Layout) == static_cast<int>(TensorEvaluator<KernelArgType, GpuDevice>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "executeEval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "executeEval(data)"
  },
  {
    "label": "executeEval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "executeEval(m_buf)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate(m_buf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_buf = NULL ; })",
    "insertText": "if(m_local_kernel)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (Scalar*)",
    "insertText": "local(Scalar*)m_device.allocate(kernel_sz)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (m_kernel = local ; m_local_kernel = true ; } } unsigned int)",
    "insertText": "ceil(unsigned int num, unsigned int denom)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const unsigned int rounded_toward_zero = num / denom ;)",
    "insertText": "if(num > rounded_toward_zero * denom)"
  },
  {
    "label": "sharedMemPerBlock()",
    "kind": "Method",
    "detail": "Function (typedef TensorEvaluator<InputArgType,GpuDevice>::Dimensions InputDims ; const int maxSharedMem = m_device .)",
    "insertText": "sharedMemPerBlock()"
  },
  {
    "label": "maxGpuThreadsPerBlock()",
    "kind": "Method",
    "detail": "Function (const int maxThreadsPerBlock = m_device .)",
    "insertText": "maxGpuThreadsPerBlock()"
  },
  {
    "label": "maxGpuThreadsPerMultiProcessor()",
    "kind": "Method",
    "detail": "Function (const int maxBlocksPerProcessor = m_device .)",
    "insertText": "maxGpuThreadsPerMultiProcessor()"
  },
  {
    "label": "getNumGpuMultiProcessors()",
    "kind": "Method",
    "detail": "Function (const int numMultiProcessors = m_device .)",
    "insertText": "getNumGpuMultiProcessors()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const int warpSize = 3 2 ;)",
    "insertText": "switch(NumKernelDims)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int maxX ; dim3 block_size ; const int single_stride_dim = static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor) ? 0 : m_inputImpl.dimensions().rank()"
  },
  {
    "label": "inner_dim()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "inner_dim((maxSharedMem / (sizeof(Scalar)) - kernel_size + 1 + 31) / 32)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (maxX = numext::mini<)",
    "insertText": "int(inner_dim, numX)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxP = numext::mini<)",
    "insertText": "int(maxSharedMem / ((kernel_size - 1 + maxX) * sizeof(Scalar)), numP)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (block_size . x =)",
    "insertText": "mini(maxThreadsPerBlock, maxX)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (block_size . y = numext::mini<)",
    "insertText": "int(maxThreadsPerBlock / block_size.x, maxP)"
  },
  {
    "label": "maxSharedMem()",
    "kind": "Method",
    "detail": "Function (} else { const int inner_dim =)",
    "insertText": "maxSharedMem((warpSize + kernel_size) * sizeof(Scalar))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxP = numext::mini<)",
    "insertText": "int(inner_dim, numP)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (maxX = numext::mini<)",
    "insertText": "int(maxSharedMem / (inner_dim * sizeof(Scalar)) - kernel_size + 1, numX)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (block_size . x =)",
    "insertText": "mini(warpSize, maxX)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (block_size . y = numext::mini<)",
    "insertText": "int(maxThreadsPerBlock/block_size.x, maxP)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (} const int shared_mem = block_size .)",
    "insertText": "y(maxX + kernel_size - 1) * sizeof(Scalar)"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(shared_mem <= maxSharedMem)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (const int num_x_blocks =)",
    "insertText": "ceil(numX, maxX)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const int blocksPerProcessor =)",
    "insertText": "mini(maxBlocksPerProcessor, maxSharedMem / shared_mem)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (const int num_y_blocks =)",
    "insertText": "ceil(numMultiProcessors * blocksPerProcessor, num_x_blocks)"
  },
  {
    "label": "num_blocks()",
    "kind": "Method",
    "detail": "Function (dim3)",
    "insertText": "num_blocks(num_x_blocks, numext::mini<int>(num_y_blocks, ceil(numP, block_size.y)))"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (const array<Index,1>)",
    "insertText": "indices(m_indices[0])"
  },
  {
    "label": "kernel_dims()",
    "kind": "Method",
    "detail": "Function (const array<Index,1>)",
    "insertText": "kernel_dims(m_kernelImpl.dimensions()[0])"
  },
  {
    "label": "indexMapper()",
    "kind": "Method",
    "detail": "Function (internal::IndexMapper<Index,InputDims,1,Layout>)",
    "insertText": "indexMapper(m_inputImpl.dimensions(), kernel_dims, indices)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (break ; } case 7 : {)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenConvolutionKernel1D<TensorEvaluator<InputArgType, GpuDevice>, Index, InputDims, 7>), num_blocks, block_size, shared_mem, m_device, m_inputImpl, indexMapper, m_kernel, numP, numX, maxX, 7, data)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (break ; } default : {)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenConvolutionKernel1D<TensorEvaluator<InputArgType, GpuDevice>, Index, InputDims, Dynamic>), num_blocks, block_size, shared_mem, m_device, m_inputImpl, indexMapper, m_kernel, numP, numX, maxX, kernel_size, data)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const int numP =)",
    "insertText": "dimensions().TotalSize() / (numX*numY)"
  },
  {
    "label": "sqrtf()",
    "kind": "Method",
    "detail": "Function (const float scaling_factor =)",
    "insertText": "sqrtf(static_cast<float>(maxSharedMem) / (sizeof(Scalar) * kernel_size_y * kernel_size_x))"
  },
  {
    "label": "inner_dim()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "inner_dim((static_cast<int>(scaling_factor * kernel_size_x) - kernel_size_x + 1 + 32) / 32)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxY = numext::mini<)",
    "insertText": "int(maxSharedMem / (sizeof(Scalar) * (maxX + kernel_size_x - 1)) - kernel_size_y + 1, numY)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxP = numext::mini<)",
    "insertText": "int(maxSharedMem / ((kernel_size_x - 1 + maxX) * (kernel_size_y - 1 + maxY) * sizeof(Scalar)), numP)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (dim3 block_size ; block_size . x =)",
    "insertText": "mini(1024, maxX)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (block_size . y = numext::mini<)",
    "insertText": "int(1024/block_size.x, maxY)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (block_size . z = numext::mini<)",
    "insertText": "int(1024/(block_size.x*block_size.y), maxP)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (const int shared_mem = block_size .)",
    "insertText": "z(maxX + kernel_size_x - 1) * (maxY + kernel_size_y - 1) * sizeof(Scalar)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (const int num_y_blocks =)",
    "insertText": "ceil(numY, maxY)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (const int num_z_blocks =)",
    "insertText": "ceil(numMultiProcessors * blocksPerProcessor, num_x_blocks * num_y_blocks)"
  },
  {
    "label": "num_blocks()",
    "kind": "Method",
    "detail": "Function (dim3)",
    "insertText": "num_blocks(num_x_blocks, num_y_blocks, numext::mini<int>(num_z_blocks, ceil(numP, block_size.z)))"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (const array<Index,2>)",
    "insertText": "indices(m_indices[idxX], m_indices[idxY])"
  },
  {
    "label": "kernel_dims()",
    "kind": "Method",
    "detail": "Function (const array<Index,2>)",
    "insertText": "kernel_dims(m_kernelImpl.dimensions()[idxX], m_kernelImpl.dimensions()[idxY])"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (break ; } default : {)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenConvolutionKernel2D<TensorEvaluator<InputArgType, GpuDevice>, Index, InputDims, 4, Dynamic>), num_blocks, block_size, shared_mem, m_device, m_inputImpl, indexMapper, m_kernel, numP, numX, maxX, numY, maxY, 4, kernel_size_y, data)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (break ; } } break ; } case 7 : {)",
    "insertText": "switch(kernel_size_y)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (break ; } default : {)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenConvolutionKernel2D<TensorEvaluator<InputArgType, GpuDevice>, Index, InputDims, 7, Dynamic>), num_blocks, block_size, shared_mem, m_device, m_inputImpl, indexMapper, m_kernel, numP, numX, maxX, numY, maxY, 7, kernel_size_y, data)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (break ; } } break ; } default : {)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenConvolutionKernel2D<TensorEvaluator<InputArgType, GpuDevice>, Index, InputDims, Dynamic, Dynamic>), num_blocks, block_size, shared_mem, m_device, m_inputImpl, indexMapper, m_kernel, numP, numX, maxX, numY, maxY, kernel_size_x, kernel_size_y, data)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const int numP =)",
    "insertText": "dimensions().TotalSize() / (numX*numY*numZ)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxX = numext::mini<)",
    "insertText": "int(128, numext::mini<int>(maxSharedMem / (sizeof(Scalar) * kernel_size_y * kernel_size_z) - kernel_size_x + 1, numX))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxY = numext::mini<)",
    "insertText": "int(128, numext::mini<int>(maxSharedMem / (sizeof(Scalar) * (maxX + kernel_size_x - 1) * kernel_size_z) - kernel_size_y + 1, numY))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int maxZ = numext::mini<)",
    "insertText": "int(128, numext::mini<int>(maxSharedMem / (sizeof(Scalar) * (maxX + kernel_size_x - 1) * (maxY + kernel_size_y - 1)) - kernel_size_z + 1, numZ))"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (dim3 block_size ; block_size . x =)",
    "insertText": "mini(32, maxX)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (block_size . y =)",
    "insertText": "mini(32, maxY)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (block_size . z = numext::mini<)",
    "insertText": "int(1024/(block_size.x*block_size.y), maxZ)"
  },
  {
    "label": "num_blocks()",
    "kind": "Method",
    "detail": "Function (dim3)",
    "insertText": "num_blocks(ceil(numX, maxX), ceil(numY, maxY), ceil(numZ, maxZ))"
  },
  {
    "label": "shared_mem()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "shared_mem(maxX + kernel_size_x - 1) * (maxY + kernel_size_y - 1) * (maxZ + kernel_size_z - 1) * sizeof(Scalar)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (const array<Index,3>)",
    "insertText": "indices(m_indices[idxX], m_indices[idxY], m_indices[idxZ])"
  },
  {
    "label": "kernel_dims()",
    "kind": "Method",
    "detail": "Function (const array<Index,3>)",
    "insertText": "kernel_dims(m_kernelImpl.dimensions()[idxX], m_kernelImpl.dimensions()[idxY], m_kernelImpl.dimensions()[idxZ])"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenConvolutionKernel3D<TensorEvaluator<InputArgType, GpuDevice>, Index, InputDims>), num_blocks, block_size, shared_mem, m_device, m_inputImpl, indexMapper, m_kernel, numP, numX, maxX, numY, maxY, numZ, maxZ, kernel_size_x, kernel_size_y, kernel_size_z, data)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (break ; } default : {)",
    "insertText": "EIGEN_STATIC_ASSERT((NumKernelDims >= 1 && NumKernelDims <= 3), THIS_METHOD_IS_ONLY_FOR_OBJECTS_OF_A_SPECIFIC_SIZE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_buf)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < m_dimensions.TotalSize())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : TensorEvaluator&)",
    "insertText": "operator(const TensorEvaluator&)"
  }
]