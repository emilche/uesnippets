[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RTCErrorOr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCErrorOr"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTC_ERROR_H_ # define API_RTC_ERROR_H_ # ifdef WEBRTC_UNIT_TEST # include<ostream> # endif # include<string> # include<utility> # include \" absl / types / optional . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { enum class RTCErrorType { NONE,UNSUPPORTED_OPERATION,UNSUPPORTED_PARAMETER,INVALID_PARAMETER,INVALID_RANGE,SYNTAX_ERROR,INVALID_STATE,INVALID_MODIFICATION,NETWORK_ERROR,RESOURCE_EXHAUSTED,INTERNAL_ERROR,OPERATION_ERROR_WITH_DATA,} ; enum class RTCErrorDetailType { NONE,DATA_CHANNEL_FAILURE,DTLS_FAILURE,FINGERPRINT_FAILURE,SCTP_FAILURE,SDP_SYNTAX_ERROR,HARDWARE_ENCODER_NOT_AVAILABLE,HARDWARE_ENCODER_ERROR,} ; class RTC_EXPORT RTCError { public :)",
    "insertText": "RTCError()"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCError(RTCErrorType type) : type_(type)"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCError(RTCErrorType type, std::string message) : type_(type), message_(std::move(message))"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCError(const RTCError& other)"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCError(RTCError&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTCError&)",
    "insertText": "operator(const RTCError& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTCError&)",
    "insertText": "operator(RTCError&&)"
  },
  {
    "label": "OK()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "OK()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (RTCErrorType)",
    "insertText": "type()"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (type_ = type ; } const char*)",
    "insertText": "message()"
  },
  {
    "label": "set_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_message(std::string message)"
  },
  {
    "label": "error_detail()",
    "kind": "Method",
    "detail": "Function (RTCErrorDetailType)",
    "insertText": "error_detail()"
  },
  {
    "label": "sctp_cause_code()",
    "kind": "Method",
    "detail": "Function (error_detail_ = detail ; } absl::optional<uint16_t>)",
    "insertText": "sctp_cause_code()"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (sctp_cause_code_ = cause_code ; } bool)",
    "insertText": "ok()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT const char*)",
    "insertText": "ToString(RTCErrorDetailType error)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& stream, RTCErrorType error)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& stream, RTCErrorDetailType error)"
  },
  {
    "label": "LOG_AND_RETURN_ERROR_EX()",
    "kind": "Method",
    "detail": "Function (} # endif # define)",
    "insertText": "LOG_AND_RETURN_ERROR_EX(type, message, severity)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RTC_DCHECK(type != RTCErrorType::NONE)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RTC_LOG(severity) << message << \" (\" << ::webrtc::ToString(type) << \")"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (\\ return::)",
    "insertText": "RTCError(type, message)"
  },
  {
    "label": "LOG_AND_RETURN_ERROR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "LOG_AND_RETURN_ERROR(type, message) \\ LOG_AND_RETURN_ERROR_EX(type, message, LS_ERROR)"
  },
  {
    "label": "RTCErrorOr()",
    "kind": "Method",
    "detail": "Function (template<U> class RTCErrorOr ; public : typedef T element_type ;)",
    "insertText": "RTCErrorOr() : error_(RTCErrorType::INTERNAL_ERROR)"
  },
  {
    "label": "RTCErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCErrorOr(RTCError&& error) : error_(std::move(error))"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!error_.ok())"
  },
  {
    "label": "RTCErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCErrorOr(const T& value) : value_(value)"
  },
  {
    "label": "RTCErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCErrorOr(T&& value) : value_(std::move(value))"
  },
  {
    "label": "RTCErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTCErrorOr(const RTCErrorOr& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr&)",
    "insertText": "operator(const RTCErrorOr& other)"
  },
  {
    "label": "RTCErrorOr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCErrorOr(RTCErrorOr&& other) : error_(std::move(other.error_)), value_(std::move(other.value_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr&)",
    "insertText": "operator(RTCErrorOr&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (error_ =)",
    "insertText": "move(other.error_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (value_ =)",
    "insertText": "move(other.value_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U> RTCErrorOr&)",
    "insertText": "operator(RTCErrorOr<U> other)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "value()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(ok())"
  }
]