[
  {
    "label": "TickTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TickTimer"
  },
  {
    "label": "Stopwatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stopwatch"
  },
  {
    "label": "Countdown",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Countdown"
  },
  {
    "label": "Stopwatch()",
    "kind": "Method",
    "detail": "Function (# ifndef API_NETEQ_TICK_TIMER_H_ # define API_NETEQ_TICK_TIMER_H_ # include<stdint . h> # include<memory> # include \" rtc_base / checks . h \" namespace webrtc { class TickTimer { public : class Stopwatch { public :)",
    "insertText": "Stopwatch(const TickTimer& ticktimer)"
  },
  {
    "label": "ElapsedTicks()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ElapsedTicks()"
  },
  {
    "label": "ElapsedMs()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "ElapsedMs()"
  },
  {
    "label": "ticks()",
    "kind": "Method",
    "detail": "Function (const uint64_t elapsed_ticks = ticktimer_ .)",
    "insertText": "ticks()"
  },
  {
    "label": "ms_per_tick()",
    "kind": "Method",
    "detail": "Function (const int ms_per_tick = ticktimer_ .)",
    "insertText": "ms_per_tick()"
  },
  {
    "label": "Countdown()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Countdown()"
  },
  {
    "label": "Finished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finished()"
  },
  {
    "label": "TickTimer()",
    "kind": "Method",
    "detail": "Function (} private : const std::unique_ptr<Stopwatch> stopwatch_ ; const uint64_t ticks_to_count_ ; } ;)",
    "insertText": "TickTimer() : TickTimer(10)"
  },
  {
    "label": "TickTimer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TickTimer(int ms_per_tick) : ms_per_tick_(ms_per_tick)"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(ms_per_tick_, 0)"
  },
  {
    "label": "TickTimer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TickTimer(const TickTimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TickTimer&)",
    "insertText": "operator(const TickTimer&)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Increment()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (+ + ticks_ ; } void)",
    "insertText": "Increment(uint64_t x)"
  },
  {
    "label": "GetNewCountdown()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Countdown>)",
    "insertText": "GetNewCountdown(uint64_t ticks_to_count)"
  }
]