[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInstSOP2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstSOP2"
  },
  {
    "label": "FInstSOPK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstSOPK"
  },
  {
    "label": "FInstSOP1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstSOP1"
  },
  {
    "label": "FInstSOPC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstSOPC"
  },
  {
    "label": "FInstSOPP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstSOPP"
  },
  {
    "label": "FInstSMEM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstSMEM"
  },
  {
    "label": "FInstVOP2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOP2"
  },
  {
    "label": "FInstVOP3A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOP3A"
  },
  {
    "label": "FInstVOP3B",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOP3B"
  },
  {
    "label": "FInstVOP3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOP3"
  },
  {
    "label": "FInstVOP1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOP1"
  },
  {
    "label": "FInstVOPC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOPC"
  },
  {
    "label": "FInstVOP3P",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVOP3P"
  },
  {
    "label": "FInstVINTERP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstVINTERP"
  },
  {
    "label": "FInstLDSGDS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstLDSGDS"
  },
  {
    "label": "FInstMUBUF",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstMUBUF"
  },
  {
    "label": "FInstMTBUF",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstMTBUF"
  },
  {
    "label": "FInstMIMG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstMIMG"
  },
  {
    "label": "FInstEXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstEXPORT"
  },
  {
    "label": "FInstFSG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstFSG"
  },
  {
    "label": "FDPP16",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDPP16"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" const uint32 SOP2Header = 0 b10 ; const uint32 SOPKHeader = 0 b1011 ; const uint32 SOP1Header = 0 b101111101 ; const uint32 SOPCHeader = 0 b101111110 ; const uint32 SOPPHeader = 0 b101111111 ; const uint32 SMEMHeader = 0 b111101 ; const uint32 VOP2Header = 0 b0 ; const uint32 VOP1Header = 0 b0111111 ; const uint32 VOP3Header = 0 b110101 ; const uint32 VOPCHeader = 0 b0111110 ; const uint32 VOP3PHeader = 0 b110011 ; const uint32 VINTERPHeader = 0 b110010 ; const uint32 LDSGDSHeader = 0 b110110 ; const uint32 MUBUFHeader = 0 b111000 ; const uint32 MTBUFHeader = 0 b111010 ; const uint32 MIMGHeader = 0 b111100 ; const uint32 EXPORTHeader = 0 b111110 ; const uint32 FSGHeader = 0 b110111 ; const uint32 Operand_DPP8 = 2 3 3 ; const uint32 Operand_DPP8FI = 2 3 4 ; const uint32 Operand_DPP16 = 2 5 0 ; const uint32 Operand_SDWA = 2 4 9 ; const uint32 Operand_Literal = 2 5 5 ; enum class EInstructionType : uint8 { SOP2,SOPK,SOP1,SOPC,SOPP,SMEM,VOP2,VOP1,VOP3,VOPC,VOP3P,VINTERP,LDSGDS,MUBUF,MTBUF,MIMG,EXPORT,FSG,UNKNOWN,} ; struct FInstSOP2 { uint32 SSRC0 : 8 ; uint32 SSRC1 : 8 ; uint32 SDST : 7 ; uint32 OP : 7 ; uint32 ID : 2 ; } ; struct FInstSOPK { uint32 SIMM16 : 1 6 ; uint32 SDST : 7 ; uint32 OP : 5 ; uint32 ID : 4 ; } ; struct FInstSOP1 { uint32 SSRC0 : 8 ; uint32 OP : 8 ; uint32 SDST : 7 ; uint32 ID : 9 ; } ; struct FInstSOPC { uint32 SSRC0 : 8 ; uint32 SSRC1 : 8 ; uint32 OP : 7 ; uint32 ID : 9 ; } ; struct FInstSOPP { uint32 SIMM16 : 1 6 ; uint32 OP : 7 ; uint32 ID : 9 ; } ; struct FInstSMEM { uint32 SBASE : 6 ; uint32 SDATA : 7 ; uint32 UNUSED1 : 1 ; uint32 DLC : 1 ; uint32 UNUSED2 : 1 ; uint32 GLC : 1 ; uint32 UNUSED3 : 1 ; uint32 OP : 8 ; uint32 ID : 6 ; int32 OFFSET : 2 1 ; uint32 UNUSED4 : 4 ; uint32 SOFFSET : 7 ; } ; struct FInstVOP2 { uint32 SRC0 : 9 ; uint32 VSRC1 : 8 ; uint32 VDST : 8 ; uint32 OP : 6 ; uint32 ID : 1 ; } ; struct FInstVOP3A { uint32 VDST : 8 ; uint32 ABS : 3 ; uint32 OP_SEL : 4 ; uint32 CLMP : 1 ; uint32 OP : 1 0 ; uint32 ID : 6 ; uint32 SRC0 : 9 ; uint32 SRC1 : 9 ; uint32 SRC2 : 9 ; uint32 OMOD : 2 ; uint32 NEG : 3 ; } ; struct FInstVOP3B { uint32 VDST : 8 ; uint32 SDST : 7 ; uint32 CLMP : 1 ; uint32 OP : 1 0 ; uint32 ID : 6 ; uint32 SRC0 : 9 ; uint32 SRC1 : 9 ; uint32 SRC2 : 9 ; uint32 OMOD : 2 ; uint32 NEG : 3 ; } ; struct FInstVOP3 { union FEncoding { FInstVOP3A VOP3A ; FInstVOP3B VOP3B ; } Encoding ; } ; struct FInstVOP1 { uint32 SRC0 : 9 ; uint32 OP : 8 ; uint32 VDST : 8 ; uint32 ID : 7 ; } ; struct FInstVOPC { uint32 SRC0 : 9 ; uint32 VSRC : 8 ; uint32 OP : 8 ; uint32 ID : 7 ; } ; struct FInstVOP3P { uint32 VDST : 8 ; uint32 NEG_HI : 3 ; uint32 OP_SEL : 3 ; uint32 OP_SEL_HI : 1 ; uint32 CLMP : 1 ; uint32 OP : 7 ; uint32 Unused : 3 ; uint32 ID : 6 ; uint32 SRC0 : 9 ; uint32 SRC1 : 9 ; uint32 SRC2 : 9 ; uint32 OP_SEL_HI_2 : 2 ; uint32 NEG : 3 ; } ; struct FInstVINTERP { uint32 VSRC : 8 ; uint32 ATTR_CHAN : 2 ; uint32 ATTR : 6 ; uint32 OP : 2 ; uint32 VDST : 8 ; uint32 ID : 6 ; } ; struct FInstLDSGDS { uint32 OFFSET0 : 8 ; uint32 OFFSET1 : 8 ; uint32 UNUSED : 1 ; uint32 GDS : 1 ; uint32 OP : 8 ; uint32 ID : 6 ; uint32 ADDR : 8 ; uint32 DATA0 : 8 ; uint32 DATA1 : 8 ; uint32 VDST : 8 ; } ; struct FInstMUBUF { uint32 OFFSET : 1 2 ; uint32 OFFEN : 1 ; uint32 IDXEN : 1 ; uint32 GLC : 1 ; uint32 DLC : 1 ; uint32 LDS : 1 ; uint32 UNUSED0 : 1 ; uint32 OP : 7 ; uint32 OPM : 1 ; uint32 ID : 6 ; uint32 VADDR : 8 ; uint32 VDATA : 8 ; uint32 SRSRC : 5 ; uint32 UNUSED1 : 1 ; uint32 SLC : 1 ; uint32 TFE : 1 ; uint32 SOFFSET : 8 ; } ; struct FInstMTBUF { uint32 OFFSET : 1 2 ; uint32 OFFEN : 1 ; uint32 IDXEN : 1 ; uint32 GLC : 1 ; uint32 DLC : 1 ; uint32 OP : 3 ; uint32 FORMAT : 7 ; uint32 ID : 6 ; uint32 VADDR : 8 ; uint32 VDATA : 8 ; uint32 SRSRC : 5 ; uint32 OPM : 1 ; uint32 SLC : 1 ; uint32 TFE : 1 ; uint32 SOFFSET : 8 ; } ; struct FInstMIMG { uint32 OPM : 1 ; uint32 NSA : 2 ; uint32 DIM : 3 ; uint32 UNUSED0 : 1 ; uint32 DLC : 1 ; uint32 DMASK : 4 ; uint32 UNRM : 1 ; uint32 GLC : 1 ; uint32 UNUSED1 : 1 ; uint32 R128 : 1 ; uint32 TFE : 1 ; uint32 LWE : 1 ; uint32 OP : 7 ; uint32 SLC : 1 ; uint32 ID : 6 ; uint32 VADDR : 8 ; uint32 VDATA : 8 ; uint32 SRSRC : 5 ; uint32 SSAMP : 5 ; uint32 UNUSED2 : 4 ; uint32 A16 : 1 ; uint32 D16 : 1 ; uint32 ADDR1 : 8 ; uint32 ADDR2 : 8 ; uint32 ADDR3 : 8 ; uint32 ADDR4 : 8 ; uint32 ADDR5 : 8 ; uint32 ADDR6 : 8 ; uint32 ADDR7 : 8 ; uint32 ADDR8 : 8 ; uint32 ADDR9 : 8 ; uint32 ADDR10 : 8 ; uint32 ADDR11 : 8 ; uint32 ADDR12 : 8 ; } ; struct FInstEXPORT { uint32 EN : 4 ; uint32 TARGET : 6 ; uint32 COMPR : 1 ; uint32 DONE : 1 ; uint32 VM : 1 ; uint32 UNUSED : 1 3 ; uint32 ID : 6 ; uint32 VSRC0 : 8 ; uint32 VSRC1 : 8 ; uint32 VSRC2 : 8 ; uint32 VSRC3 : 8 ; } ; struct FInstFSG { uint32 OFFSET : 1 2 ; uint32 DLC : 1 ; uint32 LDS : 1 ; uint32 SEG : 2 ; uint32 GLC : 1 ; uint32 SLC : 1 ; uint32 OP : 7 ; uint32 UNUSED0 : 1 ; uint32 ID : 6 ; uint32 ADDR8 : 8 ; uint32 DATA : 8 ; uint32 SADDR : 7 ; uint32 UNUSED1 : 1 ; uint32 VDST : 8 ; } ; struct FDPP16 { uint32 SRC0 : 8 ; uint32 DPPCTRL : 9 ; uint32 UNUSED : 1 ; uint32 FI : 1 ; uint32 BC : 1 ; uint32 SRC0_NEG : 1 ; uint32 SRC0_ABS : 1 ; uint32 SRC1_NEG : 1 ; uint32 SRC1_ABS : 1 ; uint32 BANK_MASK : 4 ; uint32 ROW_MASK : 4 ; } ; uint32)",
    "insertText": "GetAdvanceAmount(EInstructionType InstructionType)"
  },
  {
    "label": "FInstSOP2()",
    "kind": "Method",
    "detail": "Function (const FInstSOP2& SOP2 =* reinterpret_cast<const)",
    "insertText": "FInstSOP2(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(SOP2.ID == SOP2Header)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::SOP2)"
  },
  {
    "label": "IsSOPK()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsSOPK(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstSOPK()",
    "kind": "Method",
    "detail": "Function (const FInstSOPK& SOPK =* reinterpret_cast<const)",
    "insertText": "FInstSOPK(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(SOPK.ID == SOPKHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::SOPK)"
  },
  {
    "label": "IsSOP1()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsSOP1(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstSOP1()",
    "kind": "Method",
    "detail": "Function (const FInstSOP1& SOP1 =* reinterpret_cast<const)",
    "insertText": "FInstSOP1(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(SOP1.ID == SOP1Header)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::SOP1)"
  },
  {
    "label": "IsSOPC()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsSOPC(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstSOPC()",
    "kind": "Method",
    "detail": "Function (const FInstSOPC& SOPC =* reinterpret_cast<const)",
    "insertText": "FInstSOPC(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(SOPC.ID == SOPCHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::SOPC)"
  },
  {
    "label": "IsSOPP()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsSOPP(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstSOPP()",
    "kind": "Method",
    "detail": "Function (const FInstSOPP& SOPP =* reinterpret_cast<const)",
    "insertText": "FInstSOPP(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(SOPP.ID == SOPPHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::SOPP)"
  },
  {
    "label": "IsSMEM()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsSMEM(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstSMEM()",
    "kind": "Method",
    "detail": "Function (const FInstSMEM& SMEM =* reinterpret_cast<const)",
    "insertText": "FInstSMEM(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(SMEM.ID == SMEMHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::SMEM)"
  },
  {
    "label": "IsVOP2()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsVOP2(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstVOP2()",
    "kind": "Method",
    "detail": "Function (const FInstVOP2& VOP2 =* reinterpret_cast<const)",
    "insertText": "FInstVOP2(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(VOP2.ID == VOP2Header)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::VOP2)"
  },
  {
    "label": "IsVOP3()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsVOP3(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstVOP3A()",
    "kind": "Method",
    "detail": "Function (const FInstVOP3A& VOP3 =* reinterpret_cast<const)",
    "insertText": "FInstVOP3A(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(VOP3.ID == VOP3Header)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::VOP3)"
  },
  {
    "label": "IsVOP1()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsVOP1(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstVOP1()",
    "kind": "Method",
    "detail": "Function (const FInstVOP1& VOP1 =* reinterpret_cast<const)",
    "insertText": "FInstVOP1(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(VOP1.ID == VOP1Header)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::VOP1)"
  },
  {
    "label": "IsVOPC()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsVOPC(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstVOPC()",
    "kind": "Method",
    "detail": "Function (const FInstVOPC& VOPC =* reinterpret_cast<const)",
    "insertText": "FInstVOPC(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(VOPC.ID == VOPCHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::VOPC)"
  },
  {
    "label": "IsVOP3P()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + + ; } } return bMatch ; } bool)",
    "insertText": "IsVOP3P(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstVOP3P()",
    "kind": "Method",
    "detail": "Function (const FInstVOP3P& VOP3P =* reinterpret_cast<const)",
    "insertText": "FInstVOP3P(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(VOP3P.ID == VOP3PHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::VOP3P)"
  },
  {
    "label": "IsVINTERP()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsVINTERP(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstVINTERP()",
    "kind": "Method",
    "detail": "Function (const FInstVINTERP& VINTERP =* reinterpret_cast<const)",
    "insertText": "FInstVINTERP(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(VINTERP.ID == VINTERPHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::VINTERP)"
  },
  {
    "label": "IsLDSGDS()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsLDSGDS(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstLDSGDS()",
    "kind": "Method",
    "detail": "Function (const FInstLDSGDS& LDSGDS =* reinterpret_cast<const)",
    "insertText": "FInstLDSGDS(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(LDSGDS.ID == LDSGDSHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::LDSGDS)"
  },
  {
    "label": "IsMUBUF()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsMUBUF(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstMUBUF()",
    "kind": "Method",
    "detail": "Function (const FInstMUBUF& MUBUF =* reinterpret_cast<const)",
    "insertText": "FInstMUBUF(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(MUBUF.ID == MUBUFHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::MUBUF)"
  },
  {
    "label": "IsMTBUF()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsMTBUF(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstMTBUF()",
    "kind": "Method",
    "detail": "Function (const FInstMTBUF& MTBUF =* reinterpret_cast<const)",
    "insertText": "FInstMTBUF(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(MTBUF.ID == MTBUFHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::MTBUF)"
  },
  {
    "label": "IsMIMG()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsMIMG(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstMIMG()",
    "kind": "Method",
    "detail": "Function (const FInstMIMG& MIMG =* reinterpret_cast<const)",
    "insertText": "FInstMIMG(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(MIMG.ID == MIMGHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::MIMG)"
  },
  {
    "label": "IsEXPORT()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount + = MIMG . NSA ; } return bMatch ; } bool)",
    "insertText": "IsEXPORT(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstEXPORT()",
    "kind": "Method",
    "detail": "Function (const FInstEXPORT& EXPORT =* reinterpret_cast<const)",
    "insertText": "FInstEXPORT(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(EXPORT.ID == EXPORTHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::EXPORT)"
  },
  {
    "label": "IsFSG()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } bool)",
    "insertText": "IsFSG(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "FInstFSG()",
    "kind": "Method",
    "detail": "Function (const FInstFSG& FSG =* reinterpret_cast<const)",
    "insertText": "FInstFSG(Code)"
  },
  {
    "label": "bMatch()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bMatch(FSG.ID == FSGHeader)"
  },
  {
    "label": "GetAdvanceAmount()",
    "kind": "Method",
    "detail": "Function (AdvanceAmount =)",
    "insertText": "GetAdvanceAmount(EInstructionType::FSG)"
  },
  {
    "label": "DecodeInstructionType()",
    "kind": "Method",
    "detail": "Function (} return bMatch ; } EInstructionType)",
    "insertText": "DecodeInstructionType(const uint32* Code, uint32& AdvanceAmount)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "OP_TO_STRING_CASE(x) case EInstructionType::x: return #x switch (Inst)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(SOP2)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(SOPK)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(SOP1)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(SOPC)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(SOPP)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(SMEM)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(VOP2)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(VOP1)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(VOP3)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(VOPC)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(VOP3P)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(VINTERP)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(LDSGDS)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(MUBUF)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(MTBUF)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(MIMG)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(EXPORT)"
  },
  {
    "label": "OP_TO_STRING_CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OP_TO_STRING_CASE(FSG)"
  }
]