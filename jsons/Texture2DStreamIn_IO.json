[
  {
    "label": "FBulkDataRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataRequest"
  },
  {
    "label": "FTexture2DStreamIn_IO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture2DStreamIn_IO"
  },
  {
    "label": "FCancelIORequestsTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCancelIORequestsTask"
  },
  {
    "label": "FTexture2DStreamIn_IO()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Texture2DStreamIn . h \" class FBulkDataRequest ; class FTexture2DStreamIn_IO : public FTexture2DStreamIn { public :)",
    "insertText": "FTexture2DStreamIn_IO(UTexture2D* InTexture, bool InPrioritizedIORequest)"
  },
  {
    "label": "FTexture2DStreamIn_IO()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTexture2DStreamIn_IO()"
  },
  {
    "label": "SetIORequests()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetIORequests(const FContext& Context)"
  },
  {
    "label": "ClearIORequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIORequests(const FContext& Context)"
  },
  {
    "label": "ReportIOError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportIOError(const FContext& Context)"
  },
  {
    "label": "SetAsyncFileCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncFileCallback()"
  },
  {
    "label": "CancelIORequests()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CancelIORequests()"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abort()"
  },
  {
    "label": "FCancelIORequestsTask()",
    "kind": "Method",
    "detail": "Function (private : class FCancelIORequestsTask : public FNonAbandonableTask { public :)",
    "insertText": "FCancelIORequestsTask(FTexture2DStreamIn_IO* InPendingUpdate) : PendingUpdate(InPendingUpdate)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  }
]