[
  {
    "label": "IDxcContainerReflection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxcContainerReflection"
  },
  {
    "label": "DxilContainerHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerHash"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DxilShaderHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilShaderHash"
  },
  {
    "label": "DxilContainerVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerVersion"
  },
  {
    "label": "DxilContainerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilContainerHeader"
  },
  {
    "label": "DxilPartHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilPartHeader"
  },
  {
    "label": "DxilFourCC",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DxilFourCC"
  },
  {
    "label": "DxilShaderFeatureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilShaderFeatureInfo"
  },
  {
    "label": "DxilBitcodeHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilBitcodeHeader"
  },
  {
    "label": "DxilProgramHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilProgramHeader"
  },
  {
    "label": "DxilProgramSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilProgramSignature"
  },
  {
    "label": "DxilProgramSignatureElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilProgramSignatureElement"
  },
  {
    "label": "DxilShaderDebugName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilShaderDebugName"
  },
  {
    "label": "DxilCompilerVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilCompilerVersion"
  },
  {
    "label": "DxilSourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfo"
  },
  {
    "label": "DxilSourceInfoSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfoSection"
  },
  {
    "label": "DxilSourceInfo_Args",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfo_Args"
  },
  {
    "label": "DxilSourceInfo_SourceNames",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfo_SourceNames"
  },
  {
    "label": "DxilSourceInfo_SourceNamesEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfo_SourceNamesEntry"
  },
  {
    "label": "DxilSourceInfo_SourceContents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfo_SourceContents"
  },
  {
    "label": "DxilSourceInfo_SourceContentsEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilSourceInfo_SourceContentsEntry"
  },
  {
    "label": "DxilShaderPDBInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilShaderPDBInfo"
  },
  {
    "label": "DxilPartIsType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilPartIsType"
  },
  {
    "label": "DxilPartIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilPartIterator"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef __DXC_CONTAINER__ # define __DXC_CONTAINER__ # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / WinAdapter . h \" # include<iterator> # include<stdint . h> struct IDxcContainerReflection ; namespace hlsl { # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "DXIL_FOURCC()",
    "kind": "Method",
    "detail": "Function (const uint16_t DxilContainerVersionMajor = 1 ; const uint16_t DxilContainerVersionMinor = 0 ; const uint32_t DxilContainerMaxSize = 0 x80000000 ; struct DxilContainerHash { uint8_t Digest [ DxilContainerHashSize ] ; } ; enum class DxilShaderHashFlags : uint32_t { None = 0,IncludesSource = 1,} ; typedef struct DxilShaderHash { uint32_t Flags ; uint8_t Digest [ DxilContainerHashSize ] ; } DxilShaderHash ; struct DxilContainerVersion { uint16_t Major ; uint16_t Minor ; } ; struct DxilContainerHeader { uint32_t HeaderFourCC ; DxilContainerHash Hash ; DxilContainerVersion Version ; uint32_t ContainerSizeInBytes ; uint32_t PartCount ; } ; struct DxilPartHeader { uint32_t PartFourCC ; uint32_t PartSize ; } ; # define)",
    "insertText": "DXIL_FOURCC(ch0, ch1, ch2, ch3) \\ ((uint32_t)(uint8_t)(ch0) | (uint32_t)(uint8_t)(ch1) << 8 | \\ (uint32_t)(uint8_t)(ch2) << 16 | (uint32_t)(uint8_t)(ch3) << 24)"
  },
  {
    "label": "DXIL_FOURCC()",
    "kind": "Method",
    "detail": "Function (DFCC_Container =)",
    "insertText": "DXIL_FOURCC('D', 'X', 'B', 'C'), DFCC_ResourceDef = DXIL_FOURCC('R', 'D', 'E', 'F'), DFCC_InputSignature = DXIL_FOURCC('I', 'S', 'G', '1'), DFCC_OutputSignature = DXIL_FOURCC('O', 'S', 'G', '1'), DFCC_PatchConstantSignature = DXIL_FOURCC('P', 'S', 'G', '1'), DFCC_ShaderStatistics = DXIL_FOURCC('S', 'T', 'A', 'T'), DFCC_ShaderDebugInfoDXIL = DXIL_FOURCC('I', 'L', 'D', 'B'), DFCC_ShaderDebugName = DXIL_FOURCC('I', 'L', 'D', 'N'), DFCC_FeatureInfo = DXIL_FOURCC('S', 'F', 'I', '0'), DFCC_PrivateData = DXIL_FOURCC('P', 'R', 'I', 'V'), DFCC_RootSignature = DXIL_FOURCC('R', 'T', 'S', '0'), DFCC_DXIL = DXIL_FOURCC('D', 'X', 'I', 'L'), DFCC_PipelineStateValidation = DXIL_FOURCC('P', 'S', 'V', '0'), DFCC_RuntimeData = DXIL_FOURCC('R', 'D', 'A', 'T'), DFCC_ShaderHash = DXIL_FOURCC('H', 'A', 'S', 'H'), DFCC_ShaderSourceInfo = DXIL_FOURCC('S', 'R', 'C', 'I'), DFCC_ShaderPDBInfo = DXIL_FOURCC('P', 'D', 'B', 'I'), DFCC_CompilerVersion = DXIL_FOURCC('V', 'E', 'R', 'S')"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# undef DXIL_FOURCC struct DxilShaderFeatureInfo { uint64_t FeatureFlags ; } ; struct DxilBitcodeHeader { uint32_t DxilMagic ; uint32_t DxilVersion ; uint32_t BitcodeOffset ; uint32_t BitcodeSize ; } ; const uint32_t DxilMagicValue = 0 x4C495844 ; struct DxilProgramHeader { uint32_t ProgramVersion ; uint32_t SizeInUint32 ; DxilBitcodeHeader BitcodeHeader ; } ; struct DxilProgramSignature { uint32_t ParamCount ; uint32_t ParamOffset ; } ; enum class DxilProgramSigMinPrecision : uint32_t { Default = 0,Float16 = 1,Float2_8 = 2,Reserved = 3,SInt16 = 4,UInt16 = 5,Any16 = 0 xf0,Any10 = 0 xf1 } ; enum class DxilProgramSigSemantic : uint32_t { Undefined = 0,Position = 1,ClipDistance = 2,CullDistance = 3,RenderTargetArrayIndex = 4,ViewPortArrayIndex = 5,VertexID = 6,PrimitiveID = 7,InstanceID = 8,IsFrontFace = 9,SampleIndex = 1 0,FinalQuadEdgeTessfactor = 1 1,FinalQuadInsideTessfactor = 1 2,FinalTriEdgeTessfactor = 1 3,FinalTriInsideTessfactor = 1 4,FinalLineDetailTessfactor = 1 5,FinalLineDensityTessfactor = 1 6,Barycentrics = 2 3,ShadingRate = 2 4,CullPrimitive = 2 5,Target = 6 4,Depth = 6 5,Coverage = 6 6,DepthGE = 6 7,DepthLE = 6 8,StencilRef = 6 9,InnerCoverage = 7 0,} ; enum class DxilProgramSigCompType : uint32_t { Unknown = 0,UInt32 = 1,SInt32 = 2,Float32 = 3,UInt16 = 4,SInt16 = 5,Float16 = 6,UInt64 = 7,SInt64 = 8,Float64 = 9,} ; struct DxilProgramSignatureElement { uint32_t Stream ; uint32_t SemanticName ; uint32_t SemanticIndex ; DxilProgramSigSemantic SystemValue ; DxilProgramSigCompType CompType ; uint32_t Register ; uint8_t Mask ; union { uint8_t NeverWrites_Mask ; uint8_t AlwaysReads_Mask ; } ; uint16_t Pad ; DxilProgramSigMinPrecision MinPrecision ; } ;)",
    "insertText": "static_assert(sizeof(DxilProgramSignatureElement) == 0x20, \"else DxilProgramSignatureElement is misaligned\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (struct DxilShaderDebugName { uint16_t Flags ; uint16_t NameLength ; } ; const size_t MinDxilShaderDebugNameSize =)",
    "insertText": "sizeof(DxilShaderDebugName)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (struct DxilCompilerVersion { uint16_t Major ; uint16_t Minor ; uint32_t VersionFlags ; uint32_t CommitCount ; uint32_t VersionStringListSizeInBytes ; } ; struct DxilSourceInfo { uint32_t AlignedSizeInBytes ; uint16_t Flags ; uint16_t SectionCount ; } ; enum class DxilSourceInfoSectionType : uint16_t { SourceContents = 0,SourceNames = 1,Args = 2,} ; struct DxilSourceInfoSection { uint32_t AlignedSizeInBytes ; uint16_t Flags ; DxilSourceInfoSectionType Type ; } ; struct DxilSourceInfo_Args { uint32_t Flags ; uint32_t SizeInBytes ; uint32_t Count ; } ; struct DxilSourceInfo_SourceNames { uint32_t Flags ; uint32_t Count ; uint16_t EntriesSizeInBytes ; } ; struct DxilSourceInfo_SourceNamesEntry { uint32_t AlignedSizeInBytes ; uint32_t Flags ; uint32_t NameSizeInBytes ; uint32_t ContentSizeInBytes ; } ; enum class DxilSourceInfo_SourceContentsCompressType : uint16_t { None,Zlib } ; struct DxilSourceInfo_SourceContents { uint32_t AlignedSizeInBytes ; uint16_t Flags ; DxilSourceInfo_SourceContentsCompressType CompressType ; uint32_t EntriesSizeInBytes ; uint32_t UncompressedEntriesSizeInBytes ; uint32_t Count ; } ; struct DxilSourceInfo_SourceContentsEntry { uint32_t AlignedSizeInBytes ; uint32_t Flags ; uint32_t ContentSizeInBytes ; } ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "GetDxilContainerPart()",
    "kind": "Method",
    "detail": "Function (Version_0 = 0,LatestPlus1,Latest = LatestPlus1 - 1 } ; enum class DxilShaderPDBInfoCompressionType : uint16_t { Uncompressed,Zlib,} ; struct DxilShaderPDBInfo { DxilShaderPDBInfoVersion Version ; DxilShaderPDBInfoCompressionType CompressionType ; uint32_t SizeInBytes ; uint32_t UncompressedSizeInBytes ; } ; const DxilPartHeader*)",
    "insertText": "GetDxilContainerPart(const DxilContainerHeader *pHeader, uint32_t index)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (const uint8_t* pLinearContainer = reinterpret_cast<const)",
    "insertText": "uint8_t(pHeader)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t* pPartOffsetTable = reinterpret_cast<const)",
    "insertText": "uint32_t(pHeader + 1)"
  },
  {
    "label": "GetDxilContainerPart()",
    "kind": "Method",
    "detail": "Function (} DxilPartHeader*)",
    "insertText": "GetDxilContainerPart(DxilContainerHeader *pHeader, uint32_t index)"
  },
  {
    "label": "GetDxilPartData()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetDxilPartData(const DxilPartHeader *pPart)"
  },
  {
    "label": "GetDxilPartData()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "GetDxilPartData(DxilPartHeader *pPart)"
  },
  {
    "label": "GetDxilPartByType()",
    "kind": "Method",
    "detail": "Function (} DxilPartHeader*)",
    "insertText": "GetDxilPartByType(DxilContainerHeader *pHeader, DxilFourCC fourCC)"
  },
  {
    "label": "GetDxilPartByType()",
    "kind": "Method",
    "detail": "Function (const DxilPartHeader*)",
    "insertText": "GetDxilPartByType(const DxilContainerHeader *pHeader, DxilFourCC fourCC)"
  },
  {
    "label": "GetDxilProgramHeader()",
    "kind": "Method",
    "detail": "Function (DxilProgramHeader*)",
    "insertText": "GetDxilProgramHeader(DxilContainerHeader *pHeader, DxilFourCC fourCC)"
  },
  {
    "label": "GetDxilProgramHeader()",
    "kind": "Method",
    "detail": "Function (const DxilProgramHeader*)",
    "insertText": "GetDxilProgramHeader(const DxilContainerHeader *pHeader, DxilFourCC fourCC)"
  },
  {
    "label": "InitDxilContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDxilContainer(DxilContainerHeader *pHeader, uint32_t partCount, uint32_t containerSizeInBytes)"
  },
  {
    "label": "IsDxilContainerLike()",
    "kind": "Method",
    "detail": "Function (const DxilContainerHeader*)",
    "insertText": "IsDxilContainerLike(const void *ptr, size_t length)"
  },
  {
    "label": "IsDxilContainerLike()",
    "kind": "Method",
    "detail": "Function (DxilContainerHeader*)",
    "insertText": "IsDxilContainerLike(void *ptr, size_t length)"
  },
  {
    "label": "IsValidDxilContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidDxilContainer(const DxilContainerHeader *pHeader, size_t length)"
  },
  {
    "label": "DxilPartIsType()",
    "kind": "Method",
    "detail": "Function (struct DxilPartIsType { uint32_t IsFourCC ;)",
    "insertText": "DxilPartIsType(uint32_t FourCC) : IsFourCC(FourCC)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const DxilPartHeader *pPart)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DxilPartIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + index ; return* this ; } DxilPartIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (DxilPartIterator)",
    "insertText": "result(pHeader, index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + index ; return result ; } bool)",
    "insertText": "operator(const DxilPartIterator &other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } ; DxilPartIterator)",
    "insertText": "begin(const DxilContainerHeader *pHeader)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (DxilPartIterator)",
    "insertText": "end(const DxilContainerHeader *pHeader)"
  },
  {
    "label": "IsValidDxilBitcodeHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidDxilBitcodeHeader(const DxilBitcodeHeader *pHeader, uint32_t length)"
  },
  {
    "label": "InitBitcodeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitBitcodeHeader(DxilBitcodeHeader &header, uint32_t dxilVersion, uint32_t bitcodeSize)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (header . DxilMagic = DxilMagicValue ; header . DxilVersion = dxilVersion ; header . BitcodeOffset =)",
    "insertText": "sizeof(DxilBitcodeHeader)"
  },
  {
    "label": "GetDxilProgramBitcode()",
    "kind": "Method",
    "detail": "Function (header . BitcodeSize = bitcodeSize ; } void)",
    "insertText": "GetDxilProgramBitcode(const DxilProgramHeader *pHeader, const char **pBitcode, uint32_t *pBitcodeLength)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (BitcodeHeader.BitcodeOffset)",
    "insertText": "char(&pHeader->BitcodeHeader)"
  },
  {
    "label": "IsValidDxilProgramHeader()",
    "kind": "Method",
    "detail": "Function (* pBitcodeLength = pHeader -> BitcodeHeader . BitcodeSize ; } bool)",
    "insertText": "IsValidDxilProgramHeader(const DxilProgramHeader *pHeader, uint32_t length)"
  },
  {
    "label": "InitProgramHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitProgramHeader(DxilProgramHeader &header, uint32_t shaderVersion, uint32_t dxilVersion, uint32_t bitcodeSize)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (header . ProgramVersion = shaderVersion ; header . SizeInUint32 =)",
    "insertText": "sizeof(DxilProgramHeader) / sizeof(uint32_t) + bitcodeSize / sizeof(uint32_t) + ((bitcodeSize % 4) ? 1 : 0)"
  },
  {
    "label": "InitBitcodeHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBitcodeHeader(header.BitcodeHeader, dxilVersion, bitcodeSize)"
  },
  {
    "label": "GetDxilBitcodeData()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetDxilBitcodeData(const DxilProgramHeader *pHeader)"
  },
  {
    "label": "pBCHdr()",
    "kind": "Method",
    "detail": "Function (const DxilBitcodeHeader*)",
    "insertText": "pBCHdr(pHeader->BitcodeHeader)"
  },
  {
    "label": "GetDxilBitcodeSize()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetDxilBitcodeSize(const DxilProgramHeader *pHeader)"
  },
  {
    "label": "GetVersionMajor()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetVersionMajor(uint32_t programVersion)"
  },
  {
    "label": "GetVersionMinor()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetVersionMinor(uint32_t programVersion)"
  },
  {
    "label": "EncodeVersion()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "EncodeVersion(DXIL::ShaderKind shaderType, uint32_t major, uint32_t minor)"
  },
  {
    "label": "IsDxilShaderDebugNameValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDxilShaderDebugNameValid(const DxilPartHeader *pPart)"
  },
  {
    "label": "DxilShaderDebugName()",
    "kind": "Method",
    "detail": "Function (const DxilShaderDebugName* pDebugNameContent = reinterpret_cast<const)",
    "insertText": "DxilShaderDebugName(GetDxilPartData(pPart))"
  },
  {
    "label": "ExpectedSize()",
    "kind": "Method",
    "detail": "Function (ExpectedSize + = 0 x4 ;)",
    "insertText": "ExpectedSize(0x3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pPart->PartSize != ExpectedSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* ppUtf8Name = nullptr ;)",
    "insertText": "if(!IsDxilShaderDebugNameValid(pDebugNamePart))"
  },
  {
    "label": "ppUtf8Name()",
    "kind": "Method",
    "detail": "Function (* pUtf8NameLen = pDebugNameContent -> NameLength ; }*)",
    "insertText": "ppUtf8Name(const char *)(pDebugNameContent + 1)"
  },
  {
    "label": "SerializeDxilFlags()",
    "kind": "Method",
    "detail": "Function (l = static_cast<)",
    "insertText": "SerializeDxilFlags(static_cast<int>(l) | static_cast<int>(r))"
  },
  {
    "label": "SerializeDxilFlags()",
    "kind": "Method",
    "detail": "Function (l = static_cast<)",
    "insertText": "SerializeDxilFlags(static_cast<int>(l) & static_cast<int>(r))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SerializeDxilFlags)",
    "insertText": "operator(SerializeDxilFlags l)"
  },
  {
    "label": "CreateDxcContainerReflection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateDxcContainerReflection(IDxcContainerReflection **ppResult)"
  },
  {
    "label": "PartKindToCharArray()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "PartKindToCharArray(uint32_t partKind, char *pText)"
  },
  {
    "label": "pText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pText(char)((partKind & 0x000000FF) >> 0)"
  },
  {
    "label": "pText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pText(char)((partKind & 0x0000FF00) >> 8)"
  },
  {
    "label": "pText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pText(char)((partKind & 0x00FF0000) >> 16)"
  },
  {
    "label": "pText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pText(char)((partKind & 0xFF000000) >> 24)"
  },
  {
    "label": "GetOffsetTableSize()",
    "kind": "Method",
    "detail": "Function (pText [ 4 ] = ' \\ 0 ' ; return pText ; } size_t)",
    "insertText": "GetOffsetTableSize(uint32_t partCount)"
  },
  {
    "label": "GetDxilContainerSizeFromParts()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetDxilContainerSizeFromParts(uint32_t partCount, uint32_t partsSize)"
  }
]