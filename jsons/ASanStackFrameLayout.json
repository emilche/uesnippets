[
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "ASanStackVariableDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASanStackVariableDescription"
  },
  {
    "label": "ASanStackFrameLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASanStackFrameLayout"
  },
  {
    "label": "ComputeASanStackFrameLayout()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_ASANSTACKFRAMELAYOUT_H # define LLVM_TRANSFORMS_UTILS_ASANSTACKFRAMELAYOUT_H # include \" llvm / ADT / SmallString . h \" # include \" llvm / ADT / SmallVector . h \" namespace llvm { class AllocaInst ; const int kAsanStackLeftRedzoneMagic = 0 xf1 ; const int kAsanStackMidRedzoneMagic = 0 xf2 ; const int kAsanStackRightRedzoneMagic = 0 xf3 ; struct ASanStackVariableDescription { const char* Name ; uint64_t Size ; size_t Alignment ; AllocaInst* AI ; size_t Offset ; } ; struct ASanStackFrameLayout { SmallString<6 4> DescriptionString ; SmallVector<uint8_t,6 4> ShadowBytes ; size_t FrameAlignment ; size_t FrameSize ; } ; void)",
    "insertText": "ComputeASanStackFrameLayout(SmallVectorImpl<ASanStackVariableDescription> &Vars, size_t Granularity, size_t MinHeaderSize, ASanStackFrameLayout *Layout)"
  }
]