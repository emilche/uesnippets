[
  {
    "label": "ETypeAdvanceAnim",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETypeAdvanceAnim"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "FAnimDataModelNotifPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimDataModelNotifPayload"
  },
  {
    "label": "UAnimDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimDataModel"
  },
  {
    "label": "IAnimationDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FAnimNotifyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyEvent"
  },
  {
    "label": "FRawCurveTracks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawCurveTracks"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimCurveTypes . h \" # include \" Animation / AnimNotifyQueue . h \" # include \" Animation / AnimData / AnimDataModelNotifyCollector . h \" # include \" Animation / AnimData / IAnimationDataController . h \" # include \" AnimSequenceBase . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (ETAA_Default,ETAA_Finished,ETAA_Looped } ; struct FAnimationPoseData ; struct FAnimDataModelNotifPayload ; class UAnimDataModel ; class IAnimationDataModel ; enum class EAnimDataModelNotifyType : uint8 ;)",
    "insertText": "UCLASS(abstract, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(EDuplicateMode::Type DuplicateMode)"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetPlayLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlayLength()"
  },
  {
    "label": "SortNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortNotifies()"
  },
  {
    "label": "RemoveNotifies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNotifies(const TArray<FName>& NotifiesToRemove)"
  },
  {
    "label": "RemoveNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNotifies()"
  },
  {
    "label": "RenameNotifies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RenameNotifies(FName InOldName, FName InNewName)"
  },
  {
    "label": "GetAnimNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimNotifies(const float& StartTime, const float& DeltaTime, FAnimNotifyContext& NotifyContext)"
  },
  {
    "label": "GetAnimNotifiesFromDeltaPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimNotifiesFromDeltaPositions(const float& PreviousPosition, const float & CurrentPosition, FAnimNotifyContext& NotifyContext)"
  },
  {
    "label": "EvaluateCurveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateCurveData(FBlendedCurve& OutCurve, float CurrentTime, bool bForceUseRawData = false)"
  },
  {
    "label": "GetCurveData()",
    "kind": "Method",
    "detail": "Function (const FRawCurveTracks&)",
    "insertText": "GetCurveData()"
  },
  {
    "label": "GetNumberOfSampledKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfSampledKeys()"
  },
  {
    "label": "GetSamplingFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetSamplingFrameRate()"
  },
  {
    "label": "GetFrameAtTime()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "GetFrameAtTime(const float Time)"
  },
  {
    "label": "GetTimeAtFrame()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeAtFrame(const int32 Frame)"
  },
  {
    "label": "InitializeNotifyTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNotifyTrack()"
  },
  {
    "label": "ClampNotifiesAtEndOfSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampNotifiesAtEndOfSequence()"
  },
  {
    "label": "CalculateOffsetForNotify()",
    "kind": "Method",
    "detail": "Function (EAnimEventTriggerOffsets::Type)",
    "insertText": "CalculateOffsetForNotify(float NotifyDisplayTime)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "FindNotifyPropertyData()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "FindNotifyPropertyData(int32 NotifyIndex, FArrayProperty*& ArrayProperty)"
  },
  {
    "label": "FindArrayProperty()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "FindArrayProperty(const TCHAR* PropName, FArrayProperty*& ArrayProperty, int32 ArrayIndex)"
  },
  {
    "label": "RefreshParentAssetData()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RefreshParentAssetData()"
  },
  {
    "label": "RefreshCacheData()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "RefreshCacheData()"
  },
  {
    "label": "TickAssetPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAssetPlayer(FAnimTickRecord& Instance, struct FAnimNotifyQueue& NotifyQueue, FAnimAssetTickContext& Context)"
  },
  {
    "label": "TickByMarkerAsFollower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickByMarkerAsFollower(FMarkerTickRecord &Instance, FMarkerTickContext &MarkerContext, float& CurrentTime, float& OutPreviousTime, const float MoveDelta, const bool bLooping, const UMirrorDataTable* MirrorTable = nullptr)"
  },
  {
    "label": "TickByMarkerAsLeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickByMarkerAsLeader(FMarkerTickRecord& Instance, FMarkerTickContext& MarkerContext, float& CurrentTime, float& OutPreviousTime, const float MoveDelta, const bool bLooping, const UMirrorDataTable* MirrorTable = nullptr)"
  },
  {
    "label": "GetAnimationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationPose(FAnimationPoseData& OutPoseData, const FAnimExtractContext& ExtractionContext) const PURE_VIRTUAL(UAnimSequenceBase::GetAnimationPose,)"
  },
  {
    "label": "HandleAssetPlayerTickedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAssetPlayerTickedInternal(FAnimAssetTickContext &Context, const float PreviousTime, const float MoveDelta, const FAnimTickRecord &Instance, struct FAnimNotifyQueue& NotifyQueue)"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "AdvanceMarkerPhaseAsLeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceMarkerPhaseAsLeader(bLooping, MoveDelta, ValidMarkerNames, CurrentTime, PrevMarker, NextMarker, MarkersPassed, nullptr)"
  },
  {
    "label": "AdvanceMarkerPhaseAsLeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceMarkerPhaseAsLeader(bool bLooping, float MoveDelta, const TArray<FName>& ValidMarkerNames, float& CurrentTime, FMarkerPair& PrevMarker, FMarkerPair& NextMarker, TArray<FPassedMarker>& MarkersPassed, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "AdvanceMarkerPhaseAsFollower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceMarkerPhaseAsFollower(Context, DeltaRemaining, bLooping, CurrentTime, PreviousMarker, NextMarker, nullptr)"
  },
  {
    "label": "AdvanceMarkerPhaseAsFollower()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceMarkerPhaseAsFollower(const FMarkerTickContext& Context, float DeltaRemaining, bool bLooping, float& CurrentTime, FMarkerPair& PreviousMarker, FMarkerPair& NextMarker, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "GetMarkerIndicesForTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMarkerIndicesForTime(float CurrentTime, bool bLooping, const TArray<FName>& ValidMarkerNames, FMarkerPair& OutPrevMarker, FMarkerPair& OutNextMarker)"
  },
  {
    "label": "GetMarkerSyncPositionFromMarkerIndicies()",
    "kind": "Method",
    "detail": "Function (} FMarkerSyncAnimPosition)",
    "insertText": "GetMarkerSyncPositionFromMarkerIndicies(int32 PrevMarker, int32 NextMarker, float CurrentTime, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "GetMarkerIndicesForPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMarkerIndicesForPosition(SyncPosition, bLooping, OutPrevMarker, OutNextMarker, CurrentTime, nullptr)"
  },
  {
    "label": "GetMarkerIndicesForPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMarkerIndicesForPosition(const FMarkerSyncAnimPosition& SyncPosition, bool bLooping, FMarkerPair& OutPrevMarker, FMarkerPair& OutNextMarker, float& CurrentTime, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "GetFirstMatchingPosFromMarkerSyncPos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetFirstMatchingPosFromMarkerSyncPos(const FMarkerSyncAnimPosition& InMarkerSyncGroupPosition)"
  },
  {
    "label": "GetEnableRootMotionSettingFromMontage()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetEnableRootMotionSettingFromMontage()"
  },
  {
    "label": "RegisterOnNotifyChanged()",
    "kind": "Method",
    "detail": "Function (FOnNotifyChangedMulticaster OnNotifyChanged ; public : typedef FOnNotifyChangedMulticaster::FDelegate FOnNotifyChanged ; void)",
    "insertText": "RegisterOnNotifyChanged(const FOnNotifyChanged& Delegate)"
  },
  {
    "label": "UnregisterOnNotifyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnNotifyChanged(void* Unregister)"
  },
  {
    "label": "IsValidToPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToPlay()"
  },
  {
    "label": "OnEndLoadPackage()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnEndLoadPackage(const FEndLoadPackageContext& Context)"
  },
  {
    "label": "OnAnimModelLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimModelLoaded()"
  },
  {
    "label": "GetDataModel()",
    "kind": "Method",
    "detail": "Function (public : IAnimationDataModel*)",
    "insertText": "GetDataModel()"
  },
  {
    "label": "GetDataModelInterface()",
    "kind": "Method",
    "detail": "Function (TScriptInterface<IAnimationDataModel>)",
    "insertText": "GetDataModelInterface()"
  },
  {
    "label": "GetController()",
    "kind": "Method",
    "detail": "Function (IAnimationDataController&)",
    "insertText": "GetController()"
  },
  {
    "label": "PopulateModel()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PopulateModel()"
  },
  {
    "label": "PopulateWithExistingModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateWithExistingModel(TScriptInterface<IAnimationDataModel> ExistingDataModel)"
  },
  {
    "label": "OnModelModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModelModified(const EAnimDataModelNotifyType& NotifyType, IAnimationDataModel* Model, const FAnimDataModelNotifPayload& Payload)"
  },
  {
    "label": "ValidateModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateModel()"
  },
  {
    "label": "BindToModelModificationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToModelModificationEvent()"
  },
  {
    "label": "CopyDataModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyDataModel(const TScriptInterface<IAnimationDataModel>& ModelToDuplicate)"
  },
  {
    "label": "CreateModel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateModel()"
  },
  {
    "label": "ShouldDataModelBeValid()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldDataModelBeValid()"
  },
  {
    "label": "IsDataModelValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataModelValid()"
  }
]