[
  {
    "label": "DesktopFrameProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopFrameProvider"
  },
  {
    "label": "DesktopFrameProvider()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_MAC_DESKTOP_FRAME_PROVIDER_H_ # define MODULES_DESKTOP_CAPTURE_MAC_DESKTOP_FRAME_PROVIDER_H_ # include<CoreGraphics / CoreGraphics . h> # include<IOSurface / IOSurface . h> # include<map> # include<memory> # include \" api / sequence_checker . h \" # include \" modules / desktop_capture / shared_desktop_frame . h \" # include \" sdk / objc / helpers / scoped_cftyperef . h \" namespace webrtc { class DesktopFrameProvider { public :)",
    "insertText": "DesktopFrameProvider(bool allow_iosurface)"
  },
  {
    "label": "DesktopFrameProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DesktopFrameProvider()"
  },
  {
    "label": "DesktopFrameProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopFrameProvider(const DesktopFrameProvider&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopFrameProvider&)",
    "insertText": "operator(const DesktopFrameProvider&)"
  },
  {
    "label": "TakeLatestFrameForDisplay()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopFrame>)",
    "insertText": "TakeLatestFrameForDisplay(CGDirectDisplayID display_id)"
  },
  {
    "label": "InvalidateIOSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateIOSurface(CGDirectDisplayID display_id, rtc::ScopedCFTypeRef<IOSurfaceRef> io_surface)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  }
]