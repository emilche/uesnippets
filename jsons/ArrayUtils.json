[
  {
    "label": "InsertInside()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / Boundary . h \" # include \" Utils / IndexOfCoordinateFinder . h \" namespace UE::CADKernel { namespace ArrayUtils { void)",
    "insertText": "InsertInside(TArray<double>& InitialArray, const TArray<double>& ValuesToInsert, double Epsilon)"
  },
  {
    "label": "Finder()",
    "kind": "Method",
    "detail": "Function (FDichotomyFinder)",
    "insertText": "Finder(InitialArray)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ;)",
    "insertText": "for(double Value : ValuesToInsert)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(Value > InitialArray.Last())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (break ; } Index = Finder .)",
    "insertText": "Find(Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(FMath::IsNearlyEqual(Value, InitialArray[Index + 1], Epsilon))"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (continue ; } InitialArray .)",
    "insertText": "EmplaceAt(Index + 1, Value)"
  },
  {
    "label": "Complete()",
    "kind": "Method",
    "detail": "Function (Finder . StartUpper + + ; } } void)",
    "insertText": "Complete(TArray<double>& InitialArray, TArray<double>& ValuesToInsert, double Epsilon)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(InitialArray, ValuesToInsert)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (InitialArray [ Index ] = Value ; } else { InitialArray .)",
    "insertText": "EmplaceAt(Index++, Value)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (InitialArray .)",
    "insertText": "Last()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} else { InitialArray .)",
    "insertText": "Emplace(Value)"
  },
  {
    "label": "RemoveDuplicates()",
    "kind": "Method",
    "detail": "Function (Finder . StartUpper + + ; } } void)",
    "insertText": "RemoveDuplicates(TArray<double>& ArrayToProcess, double Epsilon)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ArrayToProcess .)",
    "insertText": "RemoveAt(Index - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ArrayToProcess.Num() > 1)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ArrayToProcess .)",
    "insertText": "RemoveAt(1)"
  },
  {
    "label": "SubArrayWithoutBoundary()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SubArrayWithoutBoundary(const TArray<double>& InitialArray, const FLinearBoundary& Boundary, double Tolerance, TArray<double>& OutArray)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 InitialSize = InitialArray .)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Empty(InitialSize + 2)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 MinIndex = Finder .)",
    "insertText": "Find(Boundary.GetMin())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 MaxIndex = Finder .)",
    "insertText": "Find(Boundary.GetMax())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinIndex + + ; })",
    "insertText": "if(InitialArray[MaxIndex + 1] < Boundary.GetMax())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MaxIndex + + ; })",
    "insertText": "if(Boundary.GetMin() + 5 * Tolerance > InitialArray[MinIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinIndex + + ; })",
    "insertText": "if(Boundary.GetMax() - 5 * Tolerance < InitialArray[MaxIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MaxIndex - - ; } const int32 ElementCount = MaxIndex - MinIndex + 1 ;)",
    "insertText": "if(ElementCount > 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Append(InitialArray.GetData() + MinIndex, ElementCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(InitialSize == 1)"
  },
  {
    "label": "FindCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindCoordinateIndex(const TArray<double>& InCoordinates, double Coordinate, int32& OutIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OutIndex < 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (OutIndex = 0 ; })",
    "insertText": "while(OutIndex > 0 && Coordinate < InCoordinates[OutIndex])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OutIndex - - ; })",
    "insertText": "for(; OutIndex + 2 < InCoordinates.Num() && Coordinate > InCoordinates[OutIndex + 1]; ++OutIndex)"
  },
  {
    "label": "ensureCADKernel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensureCADKernel(InCoordinates.IsValidIndex(OutIndex))"
  }
]