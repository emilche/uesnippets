[
  {
    "label": "IStorageServerPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStorageServerPlatformFile"
  },
  {
    "label": "FScopeZenService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeZenService"
  },
  {
    "label": "FZenCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZenCookArtifactReader"
  },
  {
    "label": "FZenCookArtifactReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CookArtifactReaderCommon . h \" # include \" Templates / UniquePtr . h \" class IStorageServerPlatformFile ; namespace UE::Zen { class FScopeZenService ; } class FZenCookArtifactReader : public FCookArtifactReaderCommon { public :)",
    "insertText": "FZenCookArtifactReader(const FString& InputPath, const FString& MetadataDirectoryPath, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FZenCookArtifactReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FZenCookArtifactReader()"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "MakeStorageServerPath()",
    "kind": "Method",
    "detail": "Function (private : # if ! UE_BUILD_SHIPPING bool)",
    "insertText": "MakeStorageServerPath(const TCHAR* Filename, FString& OutFilename)"
  }
]