[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FJsonObjectConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObjectConverter"
  },
  {
    "label": "PrintPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintPolicy"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Dom / JsonObject . h \" # include \" Dom / JsonValue . h \" # include \" Internationalization / Text . h \" # include \" JsonGlobals . h \" # include \" JsonObjectWrapper . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Serialization / JsonReader . h \" # include \" Serialization / JsonSerializer . h \" # include \" Serialization / JsonTypes . h \" # include \" Serialization / JsonWriter . h \" # include \" Templates / SharedPointer . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / Class . h \" # include \" Templates / Models . h \" # include \" Concepts / StaticClassProvider . h \" # define LOCTEXT_NAMESPACE \" JsonObjectConverter \" enum class EJsonObjectConversionFlags { None = 0,SkipStandardizeCase = 1<<0,WriteTextAsComplexString = 1<<1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EJsonObjectConversionFlags)"
  },
  {
    "label": "StandardizeCase()",
    "kind": "Method",
    "detail": "Function (class UStruct ; class FJsonObjectConverter { public : FString)",
    "insertText": "StandardizeCase(const FString &StringIn)"
  },
  {
    "label": "GetTextFromObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextFromObject(const TSharedRef<FJsonObject>& Obj, FText& TextOut)"
  },
  {
    "label": "GetTextFromField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextFromField(const FString& FieldName, const TSharedPtr<FJsonValue>& FieldValue, FText& TextOut)"
  },
  {
    "label": "FJsonValue()",
    "kind": "Method",
    "detail": "Function (public : using CustomExportCallback = TDelegate<TSharedPtr<)",
    "insertText": "FJsonValue(FProperty* Property, const void* Value)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using CustomImportCallback = TDelegate<)",
    "insertText": "bool(const TSharedPtr<FJsonValue>& JsonValue, FProperty* Property, void* Value)"
  },
  {
    "label": "UStructToJsonObject()",
    "kind": "Method",
    "detail": "Function (const CustomExportCallback ExportCallback_WriteISO8601Dates ; template<InStructType> TSharedPtr<FJsonObject>)",
    "insertText": "UStructToJsonObject(const InStructType& InStruct, int64 CheckFlags = 0, int64 SkipFlags = 0, const CustomExportCallback* ExportCb = nullptr)"
  },
  {
    "label": "FJsonObject()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FJsonObject> JsonObject = MakeShared<)",
    "insertText": "FJsonObject()"
  },
  {
    "label": "UStructToJsonObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UStructToJsonObject(const UStruct* StructDefinition, const void* Struct, TSharedRef<FJsonObject> OutJsonObject, int64 CheckFlags = 0, int64 SkipFlags = 0, const CustomExportCallback* ExportCb = nullptr, EJsonObjectConversionFlags ConversionFlags = EJsonObjectConversionFlags::None)"
  },
  {
    "label": "UStructToJsonObjectString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UStructToJsonObjectString(const UStruct* StructDefinition, const void* Struct, FString& OutJsonString, int64 CheckFlags = 0, int64 SkipFlags = 0, int32 Indent = 0, const CustomExportCallback* ExportCb = nullptr, bool bPrettyPrint = true)"
  },
  {
    "label": "UStructToJsonObjectString()",
    "kind": "Method",
    "detail": "Function (template<InStructType> bool)",
    "insertText": "UStructToJsonObjectString(const InStructType& InStruct, FString& OutJsonString, int64 CheckFlags = 0, int64 SkipFlags = 0, int32 Indent = 0, const CustomExportCallback* ExportCb = nullptr, bool bPrettyPrint = true)"
  },
  {
    "label": "UStructToJsonObjectString()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "UStructToJsonObjectString(InStructType::StaticStruct(), &InStruct, OutJsonString, CheckFlags, SkipFlags, Indent, ExportCb, bPrettyPrint)"
  },
  {
    "label": "UStructToFormattedJsonObjectString()",
    "kind": "Method",
    "detail": "Function (} } template<CharType,template<> class PrintPolicy> bool)",
    "insertText": "UStructToFormattedJsonObjectString(const UStruct* StructDefinition, const void* Struct, FString& OutJsonString, int64 CheckFlags = 0, int64 SkipFlags = 0, int32 Indent = 0, const CustomExportCallback* ExportCb = nullptr, EJsonObjectConversionFlags ConversionFlags = EJsonObjectConversionFlags::None)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FJsonObject> JsonObject =)",
    "insertText": "MakeShareable(new FJsonObject())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TJsonWriter<CharType,PrintPolicy<CharType>>> JsonWriter = TJsonWriterFactory<CharType,PrintPolicy<CharType>)",
    "insertText": "Create(&OutJsonString, Indent)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (JsonWriter ->)",
    "insertText": "Close()"
  },
  {
    "label": "UStructToJsonAttributes()",
    "kind": "Method",
    "detail": "Function (} } return false ; } bool)",
    "insertText": "UStructToJsonAttributes(const UStruct* StructDefinition, const void* Struct, TMap< FString, TSharedPtr<FJsonValue> >& OutJsonAttributes, int64 CheckFlags = 0, int64 SkipFlags = 0, const CustomExportCallback* ExportCb = nullptr, EJsonObjectConversionFlags ConversionFlags = EJsonObjectConversionFlags::None)"
  },
  {
    "label": "UPropertyToJsonValue()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonValue>)",
    "insertText": "UPropertyToJsonValue(FProperty* Property, const void* Value, int64 CheckFlags = 0, int64 SkipFlags = 0, const CustomExportCallback* ExportCb = nullptr, FProperty* OuterProperty = nullptr, EJsonObjectConversionFlags ConversionFlags = EJsonObjectConversionFlags::None)"
  },
  {
    "label": "JsonObjectToUStruct()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "JsonObjectToUStruct(const TSharedRef<FJsonObject>& JsonObject, const UStruct* StructDefinition, void* OutStruct, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "JsonObjectToUStruct()",
    "kind": "Method",
    "detail": "Function (template<OutStructType> bool)",
    "insertText": "JsonObjectToUStruct(const TSharedRef<FJsonObject>& JsonObject, OutStructType* OutStruct, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "JsonObjectToUStruct()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "JsonObjectToUStruct(JsonObject, OutStructType::StaticStruct(), OutStruct, CheckFlags, SkipFlags, bStrictMode, OutFailReason, ImportCb)"
  },
  {
    "label": "JsonAttributesToUStruct()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "JsonAttributesToUStruct(const TMap< FString, TSharedPtr<FJsonValue> >& JsonAttributes, const UStruct* StructDefinition, void* OutStruct, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "JsonValueToUProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "JsonValueToUProperty(const TSharedPtr<FJsonValue>& JsonValue, FProperty* Property, void* OutValue, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "JsonObjectStringToUStruct()",
    "kind": "Method",
    "detail": "Function (template<OutStructType> bool)",
    "insertText": "JsonObjectStringToUStruct(const FString& JsonString, OutStructType* OutStruct, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject> JsonObject ; TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<)",
    "insertText": "Create(JsonString)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (* OutFailReason =)",
    "insertText": "Format(LOCTEXT(\"FailJsonObjectDeserialize\", \"JsonObjectStringToUStruct - Unable to parse. json=[{0}]\"), FText::FromString(*JsonString))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "if(!FJsonObjectConverter::JsonObjectToUStruct(JsonObject.ToSharedRef(), OutStruct, CheckFlags, SkipFlags, bStrictMode, OutFailReason, ImportCb))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (* OutFailReason =)",
    "insertText": "Format(LOCTEXT(\"FailJsonObjectConversion\", \"JsonObjectStringToUStruct - Unable to deserialize. json=[{0}]\\n{1}\"), FText::FromString(*JsonString), *OutFailReason)"
  },
  {
    "label": "JsonArrayStringToUStruct()",
    "kind": "Method",
    "detail": "Function (} return false ; } return true ; } template<OutStructType> bool)",
    "insertText": "JsonArrayStringToUStruct(const FString& JsonString, TArray<OutStructType>* OutStructArray, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (* OutFailReason =)",
    "insertText": "Format(LOCTEXT(\"FailJsonArrayDeserialize\", \"JsonArrayStringToUStruct - Unable to parse. json=[{0}]\"), FText::FromString(*JsonString))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "if(!JsonArrayToUStruct(JsonArray, OutStructArray, CheckFlags, SkipFlags, bStrictMode, OutFailReason, ImportCb))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (* OutFailReason =)",
    "insertText": "Format(LOCTEXT(\"FailJsonArrayConversion\", \"JsonArrayStringToUStruct - Error parsing one of the elements. json=[{0}]\\n{1}\"), FText::FromString(*JsonString), *OutFailReason)"
  },
  {
    "label": "JsonArrayToUStruct()",
    "kind": "Method",
    "detail": "Function (} return false ; } return true ; } template<OutStructType> bool)",
    "insertText": "JsonArrayToUStruct(const TArray<TSharedPtr<FJsonValue>>& JsonArray, TArray<OutStructType>* OutStructArray, int64 CheckFlags = 0, int64 SkipFlags = 0, const bool bStrictMode = false, FText* OutFailReason = nullptr, const CustomImportCallback* ImportCb = nullptr)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OutStructArray ->)",
    "insertText": "SetNum(JsonArray.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const auto& Value = JsonArray [ i ] ;)",
    "insertText": "if(Value->Type != EJson::Object)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (* OutFailReason =)",
    "insertText": "Format(LOCTEXT(\"FailJsonArrayElementObject\", \"JsonArrayToUStruct - Array element [{0}] was not an object.\"), i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "if(!FJsonObjectConverter::JsonObjectToUStruct(Value->AsObject().ToSharedRef(), OutStructType::StaticStruct(), &(*OutStructArray)[i], CheckFlags, SkipFlags, bStrictMode, OutFailReason, ImportCb))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (* OutFailReason =)",
    "insertText": "Format(LOCTEXT(\"FailJsonArrayElementConversion\", \"JsonArrayToUStruct - Unable to convert element [{0}].\\n{1}\"), i, *OutFailReason)"
  },
  {
    "label": "ParseTextArgumentsFromJson()",
    "kind": "Method",
    "detail": "Function (} return false ; } } return true ; } FFormatNamedArguments)",
    "insertText": "ParseTextArgumentsFromJson(const TSharedPtr<const FJsonObject>& JsonObject)"
  }
]