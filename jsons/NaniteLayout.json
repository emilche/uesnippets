[
  {
    "label": "IDetailCategoryBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCategoryBuilder"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IDetailGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailGroup"
  },
  {
    "label": "FSettingsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSettingsLayout"
  },
  {
    "label": "AddDefaultRow()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" NaniteDefinitions . h \" # include \" PropertyHandle . h \" # include \" IDetailGroup . h \" # include \" IDetailChildrenBuilder . h \" # include \" DetailWidgetRow . h \" # include \" DetailLayoutBuilder . h \" # include \" DetailCategoryBuilder . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Layout / SUniformWrapPanel . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Input / SFilePathPicker . h \" # include \" Widgets / Input / STextComboBox . h \" # include \" Widgets / Input / SVectorInputBox . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Engine / EngineTypes . h \" # include \" Misc / ScopedSlowTask . h \" # include \" EditorDirectories . h \" # include \" EngineAnalytics . h \" # include \" FbxMeshUtils . h \" class IDetailCategoryBuilder ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class IDetailGroup ; namespace Nanite { # define LOCTEXT_NAMESPACE \" NaniteLayout \" template<StructType,CopyFuncType> IDetailPropertyRow&)",
    "insertText": "AddDefaultRow(IDetailCategoryBuilder& CategoryBuilder, StructType& Struct, FName PropertyName, CopyFuncType CopyFunc)"
  },
  {
    "label": "FStructOnScope()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FStructOnScope> TempStruct = MakeShared<)",
    "insertText": "FStructOnScope(StructType::StaticStruct())"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticStruct()->CopyScriptStruct( TempStruct->GetStructMemory(), &Struct, 1)"
  },
  {
    "label": "AddExternalStructureProperty()",
    "kind": "Method",
    "detail": "Function (IDetailPropertyRow* PropertyRow = CategoryBuilder .)",
    "insertText": "AddExternalStructureProperty(TempStruct, PropertyName)"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (PropertyRow ->)",
    "insertText": "GetPropertyHandle()->SetOnPropertyValueChanged( FSimpleDelegate::CreateLambda( [ &Struct, TempStruct, CopyFunc ] { StructType* TempStruct2 = (StructType*)TempStruct->GetStructMemory(); CopyFunc( Struct, *TempStruct2 ); } ))"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (PropertyRow ->)",
    "insertText": "GetPropertyHandle()->SetOnChildPropertyValueChanged( FSimpleDelegate::CreateLambda( [ &Struct, TempStruct, CopyFunc ] { StructType* TempStruct2 = (StructType*)TempStruct->GetStructMemory(); CopyFunc( Struct, *TempStruct2 ); } ))"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "NANITE_ADD_DEFAULT_ROW(PropertyName) \\ AddDefaultRow( NaniteSettingsCategory, NaniteSettings, GET_MEMBER_NAME_CHECKED( FMeshNaniteSettings, PropertyName ), \\ []( FMeshNaniteSettings& Dst, FMeshNaniteSettings& Src ) \\ { \\ Dst.PropertyName = Src.PropertyName; \\ })"
  },
  {
    "label": "FSettingsLayout()",
    "kind": "Method",
    "detail": "Function (public : typedef TMeshType MeshType ; public :)",
    "insertText": "FSettingsLayout()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PositionPrecisionOptions .)",
    "insertText": "Add(MakeShared<FString>(LOCTEXT(\"PositionPrecisionAuto\", \"Auto\").ToString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PositionPrecisionOptions .)",
    "insertText": "Add(MakeShared<FString>(PositionPrecisionValueToDisplayString(i)))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} const FText NormalAutoText =)",
    "insertText": "Format(LOCTEXT(\"NormalPrecisionAuto\", \"Auto ({0} bits)\"), 8)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NormalPrecisionOptions .)",
    "insertText": "Add(MakeShared<FString>(NormalAutoText.ToString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NormalPrecisionOptions .)",
    "insertText": "Add(MakeShared<FString>(NormalPrecisionValueToDisplayString(i)))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} const FText TangentAutoText =)",
    "insertText": "Format(LOCTEXT(\"TangentPrecisionAuto\", \"Auto ({0} bits)\"), 7)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TangentPrecisionOptions .)",
    "insertText": "Add(MakeShared<FString>(TangentAutoText.ToString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TangentPrecisionOptions .)",
    "insertText": "Add(MakeShared<FString>(TangentPrecisionValueToDisplayString(i)))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} const FText ResidencyMinimalText =)",
    "insertText": "Format(LOCTEXT(\"ResidencyMinimum\", \"Minimal ({0}KB)\"), NANITE_ROOT_PAGE_GPU_SIZE >> 10)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResidencyOptions .)",
    "insertText": "Add(MakeShared<FString>(ResidencyMinimalText.ToString()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResidencyOptions .)",
    "insertText": "Add(MakeShared<FString>(MinimumResidencyValueToDisplayString(1 << i), false))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ResidencyOptions .)",
    "insertText": "Add(MakeShared<FString>(LOCTEXT(\"ResidencyFull\", \"Full\").ToString()))"
  },
  {
    "label": "PositionPrecisionIndexToValue()",
    "kind": "Method",
    "detail": "Function (} const int32 DisplayPositionPrecisionAuto = MIN_int32 ; const int32 DisplayPositionPrecisionMin = - 6 ; const int32 DisplayPositionPrecisionMax = 1 3 ; int32)",
    "insertText": "PositionPrecisionIndexToValue(int32 Index)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Min(Value, DisplayPositionPrecisionMax)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { const float fValue = static_cast<)",
    "insertText": "float(FMath::Exp2((double)-Value))"
  },
  {
    "label": "NormalPrecisionIndexToValue()",
    "kind": "Method",
    "detail": "Function (} } const int32 DisplayNormalPrecisionAuto = - 1 ; const int32 DisplayNormalPrecisionMin = 5 ; const int32 DisplayNormalPrecisionMax = 1 5 ; int32)",
    "insertText": "NormalPrecisionIndexToValue(int32 Index)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Min(Value, DisplayNormalPrecisionMax)"
  },
  {
    "label": "TangentPrecisionIndexToValue()",
    "kind": "Method",
    "detail": "Function (} const int32 DisplayTangentPrecisionAuto = - 1 ; const int32 DisplayTangentPrecisionMin = 4 ; const int32 DisplayTangentPrecisionMax = 1 2 ; int32)",
    "insertText": "TangentPrecisionIndexToValue(int32 Index)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Min(Value, DisplayTangentPrecisionMax)"
  },
  {
    "label": "MinimumResidencyIndexToValue()",
    "kind": "Method",
    "detail": "Function (} const int32 DisplayMinimumResidencyMinimalIndex = 0 ; const int32 DisplayMinimumResidencyExpRangeMin = 5 ; const int32 DisplayMinimumResidencyExpRangeMax = 1 5 ; const int32 DisplayMinimumResidencyFullIndex = DisplayMinimumResidencyExpRangeMax - DisplayMinimumResidencyExpRangeMin + 2 ; uint32)",
    "insertText": "MinimumResidencyIndexToValue(int32 Index)"
  },
  {
    "label": "MinimumResidencyValueToIndex()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "MinimumResidencyValueToIndex(uint32 Value)"
  },
  {
    "label": "MinimumResidencyValueToDisplayString()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "MinimumResidencyValueToDisplayString(uint32 Value)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Printf(TEXT(\"%dMB\"), Value >> 10)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (} } const FMeshNaniteSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "IsApplyNeeded()",
    "kind": "Method",
    "detail": "Function (NaniteSettings = InSettings ; } bool)",
    "insertText": "IsApplyNeeded()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (const MeshType* MeshAsset =)",
    "insertText": "GetMesh()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function ({ FFormatNamedArguments Args ; Args .)",
    "insertText": "Add(TEXT(\"MeshName\"), FText::FromString(MeshAsset->GetName()))"
  },
  {
    "label": "SlowTask()",
    "kind": "Method",
    "detail": "Function (FScopedSlowTask)",
    "insertText": "SlowTask(0, FText::Format(LOCTEXT(\"ApplyNaniteChanges\", \"Applying changes to {MeshName}...\"), Args), true)"
  },
  {
    "label": "MakeDialog()",
    "kind": "Method",
    "detail": "Function (SlowTask .)",
    "insertText": "MakeDialog()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (MeshAsset ->)",
    "insertText": "Modify()"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (MeshAsset -> NaniteSettings = NaniteSettings ; FProperty* ChangedProperty = FindFProperty<)",
    "insertText": "FProperty(TMeshType::StaticClass(), GET_MEMBER_NAME_CHECKED(TMeshType, NaniteSettings))"
  },
  {
    "label": "Event()",
    "kind": "Method",
    "detail": "Function (FPropertyChangedEvent)",
    "insertText": "Event(ChangedProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (MeshAsset ->)",
    "insertText": "PostEditChangeProperty(Event)"
  },
  {
    "label": "RefreshTool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefreshTool()"
  },
  {
    "label": "OnApply()",
    "kind": "Method",
    "detail": "Function (} protected : FReply)",
    "insertText": "OnApply()"
  },
  {
    "label": "ApplyChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyChanges()"
  },
  {
    "label": "IsEnabledChecked()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "IsEnabledChecked()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (bool bEnabled = NaniteSettings . bEnabled ; if)",
    "insertText": "constexpr(bSupportsForceEnable)"
  },
  {
    "label": "bEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEnabled(MeshAsset && MeshAsset->IsNaniteForceEnabled())"
  },
  {
    "label": "OnEnabledChanged()",
    "kind": "Method",
    "detail": "Function (} return bEnabled ? ECheckBoxState::Checked : ECheckBoxState::Unchecked ; } void)",
    "insertText": "OnEnabledChanged(ECheckBoxState NewState)"
  },
  {
    "label": "OnPositionPrecisionChanged()",
    "kind": "Method",
    "detail": "Function (NaniteSettings . bEnabled = NewState = = ECheckBoxState::Checked ? true : false ; } void)",
    "insertText": "OnPositionPrecisionChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "PositionPrecisionIndexToValue()",
    "kind": "Method",
    "detail": "Function (int32 NewValueInt =)",
    "insertText": "PositionPrecisionIndexToValue(PositionPrecisionOptions.Find(NewValue))"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProvider().RecordEvent(TEXT(\"Editor.Usage.NaniteSettings\"), TEXT(\"PositionPrecision\"), *NewValue.Get())"
  },
  {
    "label": "OnNormalPrecisionChanged()",
    "kind": "Method",
    "detail": "Function (} NaniteSettings . PositionPrecision = NewValueInt ; } } void)",
    "insertText": "OnNormalPrecisionChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "NormalPrecisionIndexToValue()",
    "kind": "Method",
    "detail": "Function (int32 NewValueInt =)",
    "insertText": "NormalPrecisionIndexToValue(NormalPrecisionOptions.Find(NewValue))"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProvider().RecordEvent(TEXT(\"Editor.Usage.NaniteSettings\"), TEXT(\"NormalPrecision\"), *NewValue.Get())"
  },
  {
    "label": "OnTangentPrecisionChanged()",
    "kind": "Method",
    "detail": "Function (} NaniteSettings . NormalPrecision = NewValueInt ; } } void)",
    "insertText": "OnTangentPrecisionChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "TangentPrecisionIndexToValue()",
    "kind": "Method",
    "detail": "Function (int32 NewValueInt =)",
    "insertText": "TangentPrecisionIndexToValue(TangentPrecisionOptions.Find(NewValue))"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProvider().RecordEvent(TEXT(\"Editor.Usage.NaniteSettings\"), TEXT(\"TangentPrecision\"), *NewValue.Get())"
  },
  {
    "label": "OnResidencyChanged()",
    "kind": "Method",
    "detail": "Function (} NaniteSettings . TangentPrecision = NewValueInt ; } } void)",
    "insertText": "OnResidencyChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "MinimumResidencyIndexToValue()",
    "kind": "Method",
    "detail": "Function (int32 NewValueInt =)",
    "insertText": "MinimumResidencyIndexToValue(ResidencyOptions.Find(NewValue))"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProvider().RecordEvent(TEXT(\"Editor.Usage.NaniteSettings\"), TEXT(\"MinimumResidency\"), *NewValue.Get())"
  },
  {
    "label": "GetKeepPercentTriangles()",
    "kind": "Method",
    "detail": "Function (} NaniteSettings . TargetMinimumResidencyInKB = NewValueInt ; } } float)",
    "insertText": "GetKeepPercentTriangles()"
  },
  {
    "label": "OnKeepPercentTrianglesCommitted()",
    "kind": "Method",
    "detail": "Function (NaniteSettings . KeepPercentTriangles = NewValue* 0 . 0 1 f ; } void)",
    "insertText": "OnKeepPercentTrianglesCommitted(float NewValue, ETextCommit::Type TextCommitType)"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProvider().RecordEvent(TEXT(\"Editor.Usage.NaniteSettings\"), TEXT(\"KeepPercentTriangles\"), FString::Printf(TEXT(\"%.1f\"), NewValue))"
  },
  {
    "label": "OnKeepPercentTrianglesChanged()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnKeepPercentTrianglesChanged(NewValue)"
  },
  {
    "label": "GetTrimRelativeError()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTrimRelativeError()"
  },
  {
    "label": "GetFallbackPercentTriangles()",
    "kind": "Method",
    "detail": "Function (NaniteSettings . TrimRelativeError = NewValue ; } float)",
    "insertText": "GetFallbackPercentTriangles()"
  },
  {
    "label": "OnFallbackPercentTrianglesCommitted()",
    "kind": "Method",
    "detail": "Function (NaniteSettings . FallbackPercentTriangles = NewValue* 0 . 0 1 f ; } void)",
    "insertText": "OnFallbackPercentTrianglesCommitted(float NewValue, ETextCommit::Type TextCommitType)"
  },
  {
    "label": "GetProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProvider().RecordEvent(TEXT(\"Editor.Usage.NaniteSettings\"), TEXT(\"FallbackPercentTriangles\"), FString::Printf(TEXT(\"%.1f\"), NewValue))"
  },
  {
    "label": "OnFallbackPercentTrianglesChanged()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnFallbackPercentTrianglesChanged(NewValue)"
  },
  {
    "label": "GetFallbackRelativeError()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetFallbackRelativeError()"
  },
  {
    "label": "GetDisplacementUVChannel()",
    "kind": "Method",
    "detail": "Function (NaniteSettings . FallbackRelativeError = NewValue ; } int32)",
    "insertText": "GetDisplacementUVChannel()"
  },
  {
    "label": "GetHiResSourceFilename()",
    "kind": "Method",
    "detail": "Function (NaniteSettings . DisplacementUVChannel = NewValue ; } FString)",
    "insertText": "GetHiResSourceFilename()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "FString()"
  },
  {
    "label": "SetHiResSourceFilename()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHiResSourceFilename(const FString& NewSourceFile)"
  },
  {
    "label": "ImportStaticMeshHiResSourceModelDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportStaticMeshHiResSourceModelDialog(MeshAsset)"
  },
  {
    "label": "DoesHiResDataExists()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "DoesHiResDataExists()"
  },
  {
    "label": "IsHiResDataEmpty()",
    "kind": "Method",
    "detail": "Function (} } return false ; } bool)",
    "insertText": "IsHiResDataEmpty()"
  },
  {
    "label": "OnImportHiRes()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnImportHiRes()"
  },
  {
    "label": "GetHiResSourceModel()",
    "kind": "Method",
    "detail": "Function (MeshAsset ->)",
    "insertText": "GetHiResSourceModel().SourceImportFilename = FString()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnRemoveHiRes()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnRemoveHiRes()"
  },
  {
    "label": "RemoveStaticMeshHiRes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStaticMeshHiRes(MeshAsset)"
  },
  {
    "label": "OnReimportHiRes()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnReimportHiRes()"
  },
  {
    "label": "OnReimportHiResWithNewFile()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnReimportHiResWithNewFile()"
  },
  {
    "label": "AddToDetailsPanel()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "AddToDetailsPanel(TWeakObjectPtr<TMeshType> WeakMeshPtr, IDetailLayoutBuilder& DetailBuilder, int32 SortOrder, bool bInitiallyCollapsed)"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (typedef FSettingsLayout<TMeshType,bSupportsForceEnable,bSupportsHighRes> TSettingsType ; const FText NaniteCategoryName =)",
    "insertText": "LOCTEXT(\"NaniteSettingsCategory\", \"Nanite Settings\")"
  },
  {
    "label": "EditCategory()",
    "kind": "Method",
    "detail": "Function (IDetailCategoryBuilder& NaniteSettingsCategory = DetailBuilder .)",
    "insertText": "EditCategory(\"NaniteSettings\", NaniteCategoryName, ECategoryPriority::Uncommon)"
  },
  {
    "label": "SetSortOrder()",
    "kind": "Method",
    "detail": "Function (NaniteSettingsCategory .)",
    "insertText": "SetSortOrder(SortOrder)"
  },
  {
    "label": "InitiallyCollapsed()",
    "kind": "Method",
    "detail": "Function (NaniteSettingsCategory .)",
    "insertText": "InitiallyCollapsed(bInitiallyCollapsed)"
  },
  {
    "label": "WeakMeshPtr()",
    "kind": "Method",
    "detail": "Function (auto CategoryContentLambda = [)",
    "insertText": "WeakMeshPtr()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TMeshType* MeshAsset = WeakMeshPtr .)",
    "insertText": "Get()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HeaderContent()",
    "kind": "Method",
    "detail": "Function (} ; NaniteSettingsCategory .)",
    "insertText": "HeaderContent(SNew( SHorizontalBox ) + SHorizontalBox::Slot() .AutoWidth() [ SNew(SBox) .Padding(FMargin(5.0f, 0.0f)) [ SNew(STextBlock) .Text_Lambda(CategoryContentLambda) .ToolTipText_Lambda(CategoryContentTooltipLambda) .Font(IDetailLayoutBuilder::GetDetailFontItalic()) ] ])"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SCheckBox> NaniteEnabledCheck ; { NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"Enabled\", \"Enabled\") ) .RowTag(\"EnabledNaniteSupport\") .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"EnabledNaniteSupport\", \"Enable Nanite Support\")) ] .ValueContent() [ SAssignNew(NaniteEnabledCheck, SCheckBox) .IsChecked(this, &TSettingsType::IsEnabledChecked) .OnCheckStateChanged(this, &TSettingsType::OnEnabledChanged)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TAttribute<bool> NaniteEnabledAttr = TAttribute<bool)",
    "insertText": "Create(TAttribute<bool>::FGetter::CreateLambda([NaniteEnabledCheck]() -> bool { return NaniteEnabledCheck->IsChecked(); }))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TAttribute<bool> NaniteEnabledAndNoHiResDataAttr = TAttribute<bool)",
    "insertText": "Create(TAttribute<bool>::FGetter::CreateLambda([this, NaniteEnabledCheck]() -> bool {return NaniteEnabledCheck->IsChecked() && IsHiResDataEmpty(); }))"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NANITE_ADD_DEFAULT_ROW(bPreserveArea ) .IsEnabled( NaniteEnabledAttr)"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NANITE_ADD_DEFAULT_ROW(bExplicitTangents ) .IsEnabled( NaniteEnabledAttr)"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NANITE_ADD_DEFAULT_ROW(bLerpUVs ) .IsEnabled( NaniteEnabledAttr)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function ({ TSharedPtr<STextComboBox> ComboBox ; NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"PositionPrecision\", \"Position Precision\")) .RowTag(\"PositionPrecision\") .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"PositionPrecision\", \"Position Precision\")) .ToolTipText(LOCTEXT(\"PositionPrecisionTooltip\", \"Precision of vertex positions.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SAssignNew(ComboBox, STextComboBox) .Font(IDetailLayoutBuilder::GetDetailFont()) .OptionsSource(&PositionPrecisionOptions) .InitiallySelectedItem(PositionPrecisionOptions[PositionPrecisionValueToIndex(NaniteSettings.PositionPrecision)]) .OnSelectionChanged(this, &TSettingsType::OnPositionPrecisionChanged)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { TSharedPtr<STextComboBox> ComboBox ; NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"NormalPrecision\", \"Normal Precision\")) .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"NormalPrecision\", \"Normal Precision\")) .ToolTipText(LOCTEXT(\"NormalPrecisionTooltip\", \"Precision of vertex normals.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SAssignNew(ComboBox, STextComboBox) .Font(IDetailLayoutBuilder::GetDetailFont()) .OptionsSource(&NormalPrecisionOptions) .InitiallySelectedItem(NormalPrecisionOptions[NormalPrecisionValueToIndex(NaniteSettings.NormalPrecision)]) .OnSelectionChanged(this, &TSettingsType::OnNormalPrecisionChanged)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { TSharedPtr<STextComboBox> ComboBox ; NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"TangentPrecision\", \"Tangent Precision\")) .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"TangentPrecision\", \"Tangent Precision\")) .ToolTipText(LOCTEXT(\"TangentPrecisionTooltip\", \"Precision of vertex tangents.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SAssignNew(ComboBox, STextComboBox) .Font(IDetailLayoutBuilder::GetDetailFont()) .OptionsSource(&TangentPrecisionOptions) .InitiallySelectedItem(TangentPrecisionOptions[TangentPrecisionValueToIndex(NaniteSettings.TangentPrecision)]) .OnSelectionChanged(this, &TSettingsType::OnTangentPrecisionChanged) ] .Visibility(TAttribute<EVisibility>::Create(TAttribute<EVisibility>::FGetter::CreateLambda([this]() { return NaniteSettings.bExplicitTangents ? EVisibility::Visible : EVisibility::Hidden; })))"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { TSharedPtr<STextComboBox> ComboBox ; NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"MinimumResidency\", \"Minimum Residency\")) .RowTag(\"MinimumResidency\") .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"MinimumResidencyRootGeometry\", \"Minimum Residency (Root Geometry)\")) .ToolTipText(LOCTEXT(\"ResidencyTooltip\", \"How much should always be in memory. The rest will be streamed. Higher values require more memory, but also mitigate streaming pop-in issues.\")) ] .ValueContent() [ SAssignNew(ComboBox, STextComboBox) .Font(IDetailLayoutBuilder::GetDetailFont()) .OptionsSource(&ResidencyOptions) .InitiallySelectedItem(ResidencyOptions[MinimumResidencyValueToIndex(NaniteSettings.TargetMinimumResidencyInKB)]) .OnSelectionChanged(this, &TSettingsType::OnResidencyChanged)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"KeepTrianglePercent\", \"Keep Triangle Percent\") ) .RowTag(\"KeepTrianglePercent\") .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"KeepTrianglePercent\", \"Keep Triangle Percent\")) .ToolTipText(LOCTEXT(\"KeepTrianglePercentTooltip\", \"Percentage of triangles to keep. Reduce to optimize for disk size.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SNew(SSpinBox<float>) .Font(IDetailLayoutBuilder::GetDetailFont()) .MinValue(0.0f) .MaxValue(100.0f) .Value(this, &TSettingsType::GetKeepPercentTriangles) .OnValueChanged(this, &TSettingsType::OnKeepPercentTrianglesChanged) .OnValueCommitted(this, &TSettingsType::OnKeepPercentTrianglesCommitted)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"TrimRelativeError\", \"Trim Relative Error\") ) .RowTag(\"TrimRelativeError\") .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"TrimRelativeError\", \"Trim Relative Error\")) .ToolTipText(LOCTEXT(\"TrimRelativeErrorTooltip\", \"Trim all detail with less than this relative error. Error is calculated relative to the mesh's size.\\nIncrease to optimize for disk size.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SNew(SSpinBox<float>) .Font(IDetailLayoutBuilder::GetDetailFont()) .MinValue(0.0f) .Value(this, &TSettingsType::GetTrimRelativeError) .OnValueChanged(this, &TSettingsType::OnTrimRelativeErrorChanged)"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NANITE_ADD_DEFAULT_ROW(FallbackTarget ) .IsEnabled( NaniteEnabledAndNoHiResDataAttr)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function ({ NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"FallbackTrianglePercent\", \"Fallback Triangle Percent\") ) .RowTag(\"FallbackTrianglePercent\") .IsEnabled( NaniteEnabledAndNoHiResDataAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"FallbackTrianglePercent\", \"Fallback Triangle Percent\")) .ToolTipText(LOCTEXT(\"FallbackTrianglePercentTooltip\", \"Reduce until no more than this percentage of triangles remain when generating a fallback\\nmesh that will be used anywhere the full detail Nanite data can't,\\nincluding platforms that don't support Nanite rendering.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SNew(SSpinBox<float>) .Font(IDetailLayoutBuilder::GetDetailFont()) .MinValue(0.0f) .MaxValue(100.0f) .Value(this, &TSettingsType::GetFallbackPercentTriangles) .OnValueChanged(this, &TSettingsType::OnFallbackPercentTrianglesChanged) .OnValueCommitted(this, &TSettingsType::OnFallbackPercentTrianglesCommitted) ] .Visibility(TAttribute<EVisibility>::Create( TAttribute<EVisibility>::FGetter::CreateLambda([this]() { return NaniteSettings.FallbackTarget == ENaniteFallbackTarget::PercentTriangles ? EVisibility::Visible : EVisibility::Hidden; } )))"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"FallbackRelativeError\", \"Fallback Relative Error\") ) .RowTag(\"FallbackRelativeError\") .IsEnabled( NaniteEnabledAndNoHiResDataAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"FallbackRelativeError\", \"Fallback Relative Error\")) .ToolTipText(LOCTEXT(\"FallbackRelativeErrorTooltip\", \"Reduce until at least this amount of error is reached relative to its size\\nwhen generating a fallback mesh that will be used anywhere the full detail Nanite data can't,\\nincluding platforms that don't support Nanite rendering.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SNew(SSpinBox<float>) .Font(IDetailLayoutBuilder::GetDetailFont()) .MinValue(0.0f) .Value(this, &TSettingsType::GetFallbackRelativeError) .OnValueChanged(this, &TSettingsType::OnFallbackRelativeErrorChanged) ] .Visibility(TAttribute<EVisibility>::Create( TAttribute<EVisibility>::FGetter::CreateLambda([this]() { return NaniteSettings.FallbackTarget == ENaniteFallbackTarget::RelativeError ? EVisibility::Visible : EVisibility::Hidden; } )))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} { FString FileFilterText =)",
    "insertText": "TEXT(\"Filmbox (*.fbx)|*.fbx|All files (*.*)|*.*\")"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"NANITE_SourceImportFilename\", \"Source Import Filename\") ) .RowTag(\"NANITE_SourceImportFilename\") .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"NANITE_SourceImportFilename\", \"Source Import Filename\")) .ToolTipText(LOCTEXT(\"NANITE_SourceImportFilenameTooltip\", \"The file path that was used to import this hi res nanite mesh.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SNew(SFilePathPicker) .BrowseButtonImage(FAppStyle::GetBrush(\"PropertyWindow.Button_Ellipsis\")) .BrowseButtonStyle(FAppStyle::Get(), \"HoverHintOnly\") .BrowseButtonToolTip(LOCTEXT(\"NaniteSourceImportFilenamePathLabel_Tooltip\", \"Choose a nanite hi res source import file\")) .BrowseDirectory(FEditorDirectories::Get().GetLastDirectory(ELastDirectory::GENERIC_OPEN)) .BrowseTitle(LOCTEXT(\"NaniteSourceImportFilenameBrowseTitle\", \"Nanite hi res source import file picker...\")) .FilePath(this, &TSettingsType::GetHiResSourceFilename) .FileTypeFilter(FileFilterText) .OnPathPicked(this, &TSettingsType::SetHiResSourceFilename)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (} { NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"DisplacementUVChannel\", \"Displacement UV Channel\") ) .IsEnabled( NaniteEnabledAttr ) .NameContent() [ SNew(STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(LOCTEXT(\"DisplacementUVChannel\", \"Displacement UV Channel\")) .ToolTipText(LOCTEXT(\"DisplacementUVChannelTooltip\", \"UV channel to use when sampling displacement maps.\")) ] .ValueContent() .VAlign(VAlign_Center) [ SNew(SSpinBox<int32>) .Font(IDetailLayoutBuilder::GetDetailFont()) .MinValue(0) .MaxValue(4) .Value(this, &TSettingsType::GetDisplacementUVChannel) .OnValueChanged(this, &TSettingsType::OnDisplacementUVChannelChanged)"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NANITE_ADD_DEFAULT_ROW(DisplacementMaps ) .IsEnabled( NaniteEnabledAttr)"
  },
  {
    "label": "NANITE_ADD_DEFAULT_ROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NANITE_ADD_DEFAULT_ROW(MaxEdgeLengthFactor ) .IsEnabled( NaniteEnabledAttr)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function ({ NaniteSettingsCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"NaniteHiResButtons\", \"Nanite Hi Res buttons\")) .RowTag(\"NaniteHiResButtons\") .ValueContent() .HAlign(HAlign_Fill) [ SNew(SUniformWrapPanel) + SUniformWrapPanel::Slot() [ SNew(SButton) .OnClicked(this, &TSettingsType::OnApply) .IsEnabled(this, &TSettingsType::IsApplyNeeded) .VAlign(VAlign_Center) .HAlign(HAlign_Center) [ SNew(STextBlock) .Text(LOCTEXT(\"ApplyChanges\", \"Apply Changes\")) .Font(DetailBuilder.GetDetailFont()) ] ] + SUniformWrapPanel::Slot() [ SNew(SButton) .OnClicked(this, &TSettingsType::OnImportHiRes) .IsEnabled(this, &TSettingsType::IsHiResDataEmpty) .VAlign(VAlign_Center) .HAlign(HAlign_Center) [ SNew(STextBlock) .Text(LOCTEXT(\"NaniteImportHiRes\", \"Import\")) .Font(DetailBuilder.GetDetailFont()) ] ] + SUniformWrapPanel::Slot() [ SNew(SButton) .OnClicked(this, &TSettingsType::OnRemoveHiRes) .IsEnabled(this, &TSettingsType::DoesHiResDataExists) .VAlign(VAlign_Center) .HAlign(HAlign_Center) [ SNew(STextBlock) .Text(LOCTEXT(\"NaniteRemoveHiRes\", \"Remove\")) .Font(DetailBuilder.GetDetailFont()) ] ] + SUniformWrapPanel::Slot() [ SNew(SButton) .OnClicked(this, &TSettingsType::OnReimportHiRes) .IsEnabled(this, &TSettingsType::DoesHiResDataExists) .VAlign(VAlign_Center) .HAlign(HAlign_Center) [ SNew(STextBlock) .Text(LOCTEXT(\"NaniteReimportHiRes\", \"Reimport\")) .Font(DetailBuilder.GetDetailFont()) ] ] + SUniformWrapPanel::Slot() [ SNew(SButton) .OnClicked(this, &TSettingsType::OnReimportHiResWithNewFile) .IsEnabled(this, &TSettingsType::DoesHiResDataExists) .VAlign(VAlign_Center) .HAlign(HAlign_Center) [ SNew(STextBlock) .Text(LOCTEXT(\"NaniteReimportHiResWithNewFile\", \"Reimport New File\")) .Font(DetailBuilder.GetDetailFont())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnRefreshTool .)",
    "insertText": "Execute()"
  },
  {
    "label": "MeshType()",
    "kind": "Method",
    "detail": "Function (} } TDelegate<)",
    "insertText": "MeshType()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TDelegate<)",
    "insertText": "void()"
  }
]