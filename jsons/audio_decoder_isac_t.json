[
  {
    "label": "AudioDecoderIsacT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderIsacT"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_DECODER_ISAC_T_H_ # define MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_DECODER_ISAC_T_H_ # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_decoder . h \" # include \" api / scoped_refptr . h \" namespace webrtc { template<T> class AudioDecoderIsacT final : public AudioDecoder { public : struct Config { bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "AudioDecoderIsacT()",
    "kind": "Method",
    "detail": "Function (int sample_rate_hz = 1 6 0 0 0 ; } ;)",
    "insertText": "AudioDecoderIsacT(const Config& config)"
  },
  {
    "label": "AudioDecoderIsacT()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioDecoderIsacT()"
  },
  {
    "label": "AudioDecoderIsacT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDecoderIsacT(const AudioDecoderIsacT&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDecoderIsacT&)",
    "insertText": "operator(const AudioDecoderIsacT&)"
  },
  {
    "label": "HasDecodePlc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDecodePlc()"
  },
  {
    "label": "DecodePlc()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DecodePlc(size_t num_frames, int16_t* decoded)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ErrorCode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ErrorCode()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "DecodeInternal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  }
]