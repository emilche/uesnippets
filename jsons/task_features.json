[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_TASK_FEATURES_H_ # define BASE_TASK_TASK_FEATURES_H_ # include \" base / base_export . h \" # include \" base / feature_list . h \" # include \" base / metrics / field_trial_params . h \" # include \" build / build_config . h \" namespace base { # if)",
    "insertText": "BUILDFLAG(IS_WIN) || BUILDFLAG(IS_APPLE) #define HAS_NATIVE_THREAD_POOL() 1 #else #define HAS_NATIVE_THREAD_POOL() 0 #endif #if HAS_NATIVE_THREAD_POOL() BASE_EXPORT BASE_DECLARE_FEATURE(kUseNativeThreadPool)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kUseBackgroundNativeThreadPool)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kNoWorkerThreadReclaim)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kNoWakeUpsForCanceledTasks)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kRemoveCanceledTasksInTaskQueue)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kAlwaysAbandonScheduledTask)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kDelayFirstWorkerWake)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kAddTaskLeewayFeature)"
  },
  {
    "label": "Milliseconds()",
    "kind": "Method",
    "detail": "Function (TimeDelta kDefaultLeeway =)",
    "insertText": "Milliseconds(8)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (const BASE_EXPORT base::FeatureParam<TimeDelta> kTaskLeewayParam ; BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kAlignWakeUps)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kExplicitHighResolutionTimerWin)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kRunTasksByBatches)"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kBrowserPeriodicYieldingToNative)"
  },
  {
    "label": "InitializeTaskLeeway()",
    "kind": "Method",
    "detail": "Function (const BASE_EXPORT base::FeatureParam<TimeDelta> kBrowserPeriodicYieldingToNativeNormalInputAfterMsParam ; const BASE_EXPORT base::FeatureParam<TimeDelta> kBrowserPeriodicYieldingToNativeFlingInputAfterMsParam ; const BASE_EXPORT base::FeatureParam<TimeDelta> kBrowserPeriodicYieldingToNativeNoInputAfterMsParam ; const BASE_EXPORT base::FeatureParam<TimeDelta> kBrowserPeriodicYieldingToNativeDelay ; BASE_EXPORT void)",
    "insertText": "InitializeTaskLeeway()"
  },
  {
    "label": "GetTaskLeeway()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT TimeDelta)",
    "insertText": "GetTaskLeeway()"
  }
]