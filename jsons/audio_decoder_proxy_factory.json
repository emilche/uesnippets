[
  {
    "label": "AudioDecoderProxyFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderProxyFactory"
  },
  {
    "label": "DecoderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecoderProxy"
  },
  {
    "label": "AudioDecoderProxyFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_AUDIO_DECODER_PROXY_FACTORY_H_ # define TEST_AUDIO_DECODER_PROXY_FACTORY_H_ # include<memory> # include<utility> # include<vector> # include \" api / audio_codecs / audio_decoder . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" namespace webrtc { namespace test { class AudioDecoderProxyFactory : public AudioDecoderFactory { public :)",
    "insertText": "AudioDecoderProxyFactory(AudioDecoder* decoder) : decoder_(decoder)"
  },
  {
    "label": "GetSupportedDecoders()",
    "kind": "Method",
    "detail": "Function (} std::vector<AudioCodecSpec>)",
    "insertText": "GetSupportedDecoders()"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "DecoderProxy()",
    "kind": "Method",
    "detail": "Function (} private : class DecoderProxy final : public AudioDecoder { public :)",
    "insertText": "DecoderProxy(AudioDecoder* decoder) : decoder_(decoder)"
  },
  {
    "label": "ParsePayload()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<ParseResult>)",
    "insertText": "ParsePayload(rtc::Buffer&& payload, uint32_t timestamp)"
  },
  {
    "label": "HasDecodePlc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDecodePlc()"
  },
  {
    "label": "ErrorCode()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ErrorCode()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "DecodeInternal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "DecodeInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "PacketDuration()",
    "kind": "Method",
    "detail": "Function (size_t max_decoded_bytes = decoder_ ->)",
    "insertText": "PacketDuration(encoded, encoded_len) * decoder_->Channels() * sizeof(int16_t)"
  },
  {
    "label": "GeneratePlc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GeneratePlc(size_t requested_samples_per_channel, rtc::BufferT<int16_t>* concealment_audio)"
  },
  {
    "label": "GeneratePlc()",
    "kind": "Method",
    "detail": "Function (decoder_ ->)",
    "insertText": "GeneratePlc(requested_samples_per_channel, concealment_audio)"
  }
]