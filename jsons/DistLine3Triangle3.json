[
  {
    "label": "TDistLine3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistLine3Triangle3"
  },
  {
    "label": "TDistLine3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" SegmentTypes . h \" # include \" DistLine3Segment3 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistLine3Triangle3 { public : TLine3<Real> Line ; TTriangle3<Real> Triangle ; Real DistanceSquared = - 1 . 0 ; Real LineParam ; TVector<Real> LineClosest,TriangleClosest,TriangleBaryCoords ;)",
    "insertText": "TDistLine3Triangle3(const TLine3<Real>& LineIn, const TTriangle3<Real>& TriangleIn) : Line(LineIn), Triangle(TriangleIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(normal)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real NdD = normal .)",
    "insertText": "Dot(Line.Direction)"
  },
  {
    "label": "MakePerpVectors()",
    "kind": "Method",
    "detail": "Function (TVector<Real> diff = Line . Origin - Triangle . V [ 0 ] ; TVector<Real> U,V ;)",
    "insertText": "MakePerpVectors(Line.Direction, U, V)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real UdE0 = U .)",
    "insertText": "Dot(edge0)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real UdE1 = U .)",
    "insertText": "Dot(edge1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real UdDiff = U .)",
    "insertText": "Dot(diff)"
  },
  {
    "label": "invDet()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "invDet(1) / (UdE0 * VdE1 - UdE1 * VdE0)"
  },
  {
    "label": "b1()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "b1(VdE1 * UdDiff - UdE1 * VdDiff)"
  },
  {
    "label": "b2()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "b2(UdE0 * VdDiff - VdE0 * UdDiff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real b0 = 1 - b1 - b2 ;)",
    "insertText": "if(b0 >= 0 && b1 >= 0 && b2 >= 0)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (LineParam = b1* DdE0 + b2* DdE1 - DdDiff ; TriangleBaryCoords = TVector<)",
    "insertText": "Real(b0, b1, b2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LineClosest = Line . Origin + LineParam* Line . Direction ; TriangleClosest = Triangle . V [ 0 ] + b1* edge0 + b2* edge1 ; DistanceSquared = 0 ; return 0 ; } } Real sqrDist = TMathUtil<Real>::MaxReal ;)",
    "insertText": "for(int i0 = 2, i1 = 0; i1 < 3; i0 = i1++)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (TSegment3<Real>)",
    "insertText": "segment(Triangle.V[i0], Triangle.V[i1])"
  },
  {
    "label": "queryLS()",
    "kind": "Method",
    "detail": "Function (TDistLine3Segment3<Real>)",
    "insertText": "queryLS(Line, segment)"
  },
  {
    "label": "i0()",
    "kind": "Method",
    "detail": "Function (LineClosest = queryLS . LineClosest ; TriangleClosest = queryLS . SegmentClosest ; sqrDist = sqrDistTmp ; LineParam = queryLS . LineParameter ; Real ratio = queryLS . SegmentParameter / segment . Extent ; TriangleBaryCoords [)",
    "insertText": "i0(0.5) * (1 - ratio)"
  }
]