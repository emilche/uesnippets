[
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "UExponentialHeightFogComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExponentialHeightFogComponent"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "FLightPrimitiveInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightPrimitiveInteraction"
  },
  {
    "label": "FShouldCreateResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShouldCreateResult"
  },
  {
    "label": "FExponentialHeightFogSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExponentialHeightFogSceneInfo"
  },
  {
    "label": "FExponentialHeightFogSceneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExponentialHeightFogSceneData"
  },
  {
    "label": "InitializeMemoryPool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Math / Color . h \" # include \" RHIFwd . h \" class FLightSceneInfo ; class FPrimitiveSceneInfo ; class FScene ; class UExponentialHeightFogComponent ; class UTextureCube ; class FLightPrimitiveInteraction { public : void)",
    "insertText": "InitializeMemoryPool()"
  },
  {
    "label": "ShouldCreate()",
    "kind": "Method",
    "detail": "Function (struct FShouldCreateResult { bool bShouldCreate = false ; bool bDynamic = true ; bool bRelevant = false ; bool bIsLightMapped = true ; bool bShadowMapped = false ; bool bTranslucentObjectShadow = false ; bool bInsetObjectShadow = false ; } ; FShouldCreateResult)",
    "insertText": "ShouldCreate(FLightSceneInfo* LightSceneInfo,FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(FLightSceneInfo* LightSceneInfo,FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(FLightPrimitiveInteraction* LightPrimitiveInteraction)"
  },
  {
    "label": "GetMemoryPoolSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryPoolSize()"
  },
  {
    "label": "HasShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasShadow()"
  },
  {
    "label": "FlushCachedShadowMapData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushCachedShadowMapData()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* RawMemory)"
  },
  {
    "label": "FLightPrimitiveInteraction()",
    "kind": "Method",
    "detail": "Function (private : FLightSceneInfo* LightSceneInfo ; FPrimitiveSceneInfo* PrimitiveSceneInfo ; FLightPrimitiveInteraction** PrevPrimitiveLink ; FLightPrimitiveInteraction* NextPrimitive ; FLightPrimitiveInteraction** PrevLightLink ; FLightPrimitiveInteraction* NextLight ; int32 LightId ; uint32 bCastShadow : 1 ; uint32 bLightMapped : 1 ; uint32 bIsDynamic : 1 ; uint32 bIsShadowMapped : 1 ; uint32 bUncachedStaticLighting : 1 ; uint32 bHasTranslucentObjectShadow : 1 ; uint32 bHasInsetObjectShadow : 1 ; uint32 bSelfShadowOnly : 1 ; uint32 bMobileDynamicLocalLight : 1 ; uint32 bNaniteMeshProxy : 1 ; uint32 bProxySupportsGPUScene : 1 ;)",
    "insertText": "FLightPrimitiveInteraction(FLightSceneInfo* InLightSceneInfo,FPrimitiveSceneInfo* InPrimitiveSceneInfo, bool bIsDynamic,bool bInLightMapped,bool bInIsShadowMapped, bool bInHasTranslucentObjectShadow, bool bInHasInsetObjectShadow)"
  },
  {
    "label": "FLightPrimitiveInteraction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLightPrimitiveInteraction()"
  },
  {
    "label": "FExponentialHeightFogSceneInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FExponentialHeightFogSceneInfo { public : struct FExponentialHeightFogSceneData { float Height ; float Density ; float HeightFalloff ; } ; int NumFogs = 2 ; const UExponentialHeightFogComponent* Component ; FExponentialHeightFogSceneData FogData [ NumFogs ] ; float FogMaxOpacity ; float StartDistance ; float EndDistance ; float FogCutoffDistance ; FLinearColor FogColor ; float DirectionalInscatteringExponent ; float DirectionalInscatteringStartDistance ; FLinearColor DirectionalInscatteringColor ; UTextureCube* InscatteringColorCubemap ; float InscatteringColorCubemapAngle ; float FullyDirectionalInscatteringColorDistance ; float NonDirectionalInscatteringColorDistance ; bool bEnableVolumetricFog ; float VolumetricFogScatteringDistribution ; FLinearColor VolumetricFogAlbedo ; FLinearColor VolumetricFogEmissive ; float VolumetricFogExtinctionScale ; float VolumetricFogDistance ; float VolumetricFogStaticLightingScatteringIntensity ; bool bOverrideLightColorsWithFogInscatteringColors ; bool bHoldout ; bool bRenderInMainPass ; float VolumetricFogStartDistance ; float VolumetricFogNearFadeInDistance ; FLinearColor SkyAtmosphereAmbientContributionColorScale ;)",
    "insertText": "FExponentialHeightFogSceneInfo(const UExponentialHeightFogComponent* InComponent)"
  },
  {
    "label": "IsIndirectLightingCacheAllowed()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsIndirectLightingCacheAllowed(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "CanIndirectLightingCacheUseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanIndirectLightingCacheUseVolumeTexture(ERHIFeatureLevel::Type InFeatureLevel)"
  }
]