[
  {
    "label": "FExpressionInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionInput"
  },
  {
    "label": "FExtraShaderCompilerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtraShaderCompilerSettings"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMaterialShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderType"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FMaterialUniformExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpression"
  },
  {
    "label": "FMaterialUniformExpressionTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTexture"
  },
  {
    "label": "FUniformExpressionCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformExpressionCache"
  },
  {
    "label": "FUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionSet"
  },
  {
    "label": "FMeshMaterialShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShaderType"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVirtualTexture2DResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTexture2DResource"
  },
  {
    "label": "IAllocatedVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAllocatedVirtualTexture"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpression"
  },
  {
    "label": "UMaterialExpressionMaterialFunctionCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionMaterialFunctionCall"
  },
  {
    "label": "UMaterialInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstance"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "USubsurfaceProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsurfaceProfile"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FMaterialTextureParameterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialTextureParameterInfo"
  },
  {
    "label": "FMaterialExternalTextureParameterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialExternalTextureParameterInfo"
  },
  {
    "label": "FMeshMaterialShaderMapLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShaderMapLayout"
  },
  {
    "label": "FMaterialShaderTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderTypes"
  },
  {
    "label": "FMaterialShaders",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaders"
  },
  {
    "label": "FMaterialCachedExpressionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCachedExpressionData"
  },
  {
    "label": "FMaterialHLSLGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLGenerator"
  },
  {
    "label": "FShaderMapLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapLayout"
  },
  {
    "label": "FMaterialCachedHLSLTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCachedHLSLTree"
  },
  {
    "label": "FMaterialKeyGeneratorContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialKeyGeneratorContext"
  },
  {
    "label": "EMaterialDomain",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialDomain"
  },
  {
    "label": "FEmitContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitContext"
  },
  {
    "label": "FExpressionStaticTerrainLayerWeight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionStaticTerrainLayerWeight"
  },
  {
    "label": "FEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitter"
  },
  {
    "label": "FODSCClientData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCClientData"
  },
  {
    "label": "ElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementType"
  },
  {
    "label": "TLinkedList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLinkedList"
  },
  {
    "label": "EMaterialCommonBasis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialCommonBasis"
  },
  {
    "label": "struct",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "struct"
  },
  {
    "label": "FMaterialCompileTargetParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCompileTargetParameters"
  },
  {
    "label": "FMaterialRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialRenderContext"
  },
  {
    "label": "FMaterialVirtualTextureStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialVirtualTextureStack"
  },
  {
    "label": "FMaterialUniformPreshaderField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformPreshaderField"
  },
  {
    "label": "FMaterialUniformPreshaderHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformPreshaderHeader"
  },
  {
    "label": "FMaterialNumericParameterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialNumericParameterInfo"
  },
  {
    "label": "FMaterialTextureCollectionParameterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialTextureCollectionParameterInfo"
  },
  {
    "label": "FUniformParameterOverrides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformParameterOverrides"
  },
  {
    "label": "FNumericParameterKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericParameterKey"
  },
  {
    "label": "FTextureParameterKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureParameterKey"
  },
  {
    "label": "UMaterialParameterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollection"
  },
  {
    "label": "FHLSLMaterialTranslator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLSLMaterialTranslator"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShader"
  },
  {
    "label": "FDebugUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugUniformExpressionSet"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FMaterialCompilationOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompilationOutput"
  },
  {
    "label": "FDebugShaderPipelineInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugShaderPipelineInfo"
  },
  {
    "label": "FDebugShaderTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugShaderTypeInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMaterialShaderMapId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapId"
  },
  {
    "label": "FMeshMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShaderMap"
  },
  {
    "label": "FMaterialProcessedSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialProcessedSource"
  },
  {
    "label": "FMaterialShaderMapContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapContent"
  },
  {
    "label": "FProjectMeshShaderMapToKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectMeshShaderMapToKey"
  },
  {
    "label": "FAsyncLoadContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncLoadContext"
  },
  {
    "label": "FStableShaderKeyAndValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStableShaderKeyAndValue"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "ECompiledMaterialProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECompiledMaterialProperty"
  },
  {
    "label": "ECompiledPartialDerivativeVariation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECompiledPartialDerivativeVariation"
  },
  {
    "label": "FMaterialExpressionKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialExpressionKey"
  },
  {
    "label": "FMaterialFunctionCompileState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialFunctionCompileState"
  },
  {
    "label": "EMaterialFloatPrecisionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialFloatPrecisionMode"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "ERefractionMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERefractionMode"
  },
  {
    "label": "ETranslucencyLightingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETranslucencyLightingMode"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "UMaterialExpressionCustomOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustomOutput"
  },
  {
    "label": "FMaterialHLSLErrorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLErrorHandler"
  },
  {
    "label": "FMaterialResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResource"
  },
  {
    "label": "FMaterialUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUpdateContext"
  },
  {
    "label": "FGlobalComponentReregisterContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalComponentReregisterContext"
  },
  {
    "label": "FGlobalComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalComponentRecreateRenderStateContext"
  },
  {
    "label": "EOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EOptions"
  },
  {
    "label": "FMaterialResourceLocOnDisk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialResourceLocOnDisk"
  },
  {
    "label": "FMaterialResourceMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResourceMemoryWriter"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMaterialResourceWriteScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResourceWriteScope"
  },
  {
    "label": "FMaterialResourceProxyReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResourceProxyReader"
  },
  {
    "label": "FMaterialResourceForCooking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialResourceForCooking"
  },
  {
    "label": "ALLOW_SHADERMAP_DEBUG_DATA()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" Containers / ArrayView . h \" # include \" Misc / Guid . h \" # include \" Engine / EngineTypes . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" Misc / SecureHash . h \" # include \" RHIDefinitions . h \" # include \" RHIUniformBufferLayoutInitializer . h \" # include \" RenderResource . h \" # include \" RenderDeferredCleanup . h \" # include \" UniformBuffer . h \" # include \" Shader . h \" # include \" VertexFactory . h \" # include \" SceneTypes . h \" # include \" StaticParameterSet . h \" # include \" Misc / Optional . h \" # include \" Serialization / MemoryWriter . h \" # include \" Serialization / ArchiveProxy . h \" # include \" MaterialRecursionGuard . h \" # include \" MaterialSceneTextureId . h \" # include \" MaterialShaderPrecompileMode . h \" # include \" MaterialValueType . h \" # include \" VirtualTexturing . h \" # include \" Templates / UnrealTemplate . h \" # include \" ShaderCompilerCore . h \" # include \" PSOPrecache . h \" # include \" UObject / ObjectMacros . h \" # include \" Rendering / SubstrateMaterialShared . h \" # include \" Shader / Preshader . h \" # include<atomic> # include \" MaterialShared . generated . h \" struct FExpressionInput ; struct FExtraShaderCompilerSettings ; class FCbFieldView ; class FCbWriter ; class FMaterial ; class FMaterialCompiler ; class FMaterialRenderProxy ; class FMaterialShaderType ; struct FMaterialShaderParameters ; class FMaterialUniformExpression ; class FMaterialUniformExpressionTexture ; struct FUniformExpressionCache ; class FUniformExpressionSet ; class FMeshMaterialShaderType ; class FSceneView ; class FShaderCommonCompileJob ; class FShaderKeyGenerator ; enum class EShaderCompileJobPriority : uint8 ; class FVirtualTexture2DResource ; class IAllocatedVirtualTexture ; class UMaterial ; class UMaterialExpression ; class UMaterialExpressionMaterialFunctionCall ; class UMaterialInstance ; class UMaterialInterface ; class URuntimeVirtualTexture ; class USparseVolumeTexture ; class USubsurfaceProfile ; class UTexture ; class UTexture2D ; class FMaterialTextureParameterInfo ; class FMaterialExternalTextureParameterInfo ; class FMeshMaterialShaderMapLayout ; struct FMaterialShaderTypes ; struct FMaterialShaders ; struct FMaterialCachedExpressionData ; class FMaterialHLSLGenerator ; class FShaderMapLayout ; # if WITH_EDITOR class FMaterialCachedHLSLTree ; class FMaterialKeyGeneratorContext ; # endif enum EMaterialDomain : int ; namespace UE { namespace HLSLTree { class FEmitContext ; namespace Material { class FExpressionStaticTerrainLayerWeight ; } } } namespace UE::MIR { class FEmitter ; } namespace UE::Cook { class FODSCClientData ; } template<class ElementType> class TLinkedList ; # define ME_CAPTION_HEIGHT 1 8 # define ME_STD_VPADDING 1 6 # define ME_STD_HPADDING 3 2 # define ME_STD_BORDER 8 # define ME_STD_THUMBNAIL_SZ 9 6 # define ME_PREV_THUMBNAIL_SZ 2 5 6 # define ME_STD_LABEL_PAD 1 6 # define ME_STD_TAB_HEIGHT 2 1 # define HANDLE_CUSTOM_OUTPUTS_AS_MATERIAL_ATTRIBUTES 0 # define)",
    "insertText": "ALLOW_SHADERMAP_DEBUG_DATA(!(UE_BUILD_SHIPPING || (UE_BUILD_TEST && !PLATFORM_DESKTOP))) #define UE_CHECK_FMATERIAL_LIFETIME PLATFORM_WINDOWS DECLARE_LOG_CATEGORY_EXTERN(LogMaterial, Log, All)"
  },
  {
    "label": "GetMaterialQualityLevelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialQualityLevelName(EMaterialQualityLevel::Type InMaterialQualityLevel, FString& OutName)"
  },
  {
    "label": "GetMaterialQualityLevelFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMaterialQualityLevelFName(EMaterialQualityLevel::Type InMaterialQualityLevel)"
  },
  {
    "label": "IsSubsurfaceShadingModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubsurfaceShadingModel(FMaterialShadingModelField ShadingModel)"
  },
  {
    "label": "UseSubsurfaceProfile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseSubsurfaceProfile(FMaterialShadingModelField ShadingModel)"
  },
  {
    "label": "GetUseSubsurfaceProfileShadingModelMask()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetUseSubsurfaceProfileShadingModelMask()"
  },
  {
    "label": "AllowDitheredLODTransition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowDitheredLODTransition(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "IsOpaqueBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsOpaqueBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsOpaqueBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsOpaqueBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsOpaqueOrMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueOrMaskedBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsOpaqueOrMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueOrMaskedBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsOpaqueOrMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueOrMaskedBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsOpaqueOrMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpaqueOrMaskedBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaskedBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaskedBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaskedBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsMaskedBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaskedBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsTranslucentOnlyBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentOnlyBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsTranslucentOnlyBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentOnlyBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsTranslucentOnlyBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentOnlyBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsTranslucentOnlyBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentOnlyBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsTranslucentBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsTranslucentBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsTranslucentBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsTranslucentBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucentBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsAlphaHoldoutBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaHoldoutBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsAlphaHoldoutBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaHoldoutBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsAlphaHoldoutBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaHoldoutBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsAlphaHoldoutBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaHoldoutBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsModulateBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModulateBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsModulateBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModulateBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsModulateBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModulateBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsModulateBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModulateBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsAdditiveBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdditiveBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsAdditiveBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdditiveBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsAdditiveBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdditiveBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsAdditiveBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdditiveBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsAlphaCompositeBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaCompositeBlendMode(EBlendMode BlendMode)"
  },
  {
    "label": "IsAlphaCompositeBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaCompositeBlendMode(const FMaterial& In)"
  },
  {
    "label": "IsAlphaCompositeBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaCompositeBlendMode(const UMaterialInterface& In)"
  },
  {
    "label": "IsAlphaCompositeBlendMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAlphaCompositeBlendMode(const FMaterialShaderParameters& In)"
  },
  {
    "label": "IsUsingNewMaterialTranslatorPrototype()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingNewMaterialTranslatorPrototype()"
  },
  {
    "label": "GetCmdLineFilterShaderFormats()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetCmdLineFilterShaderFormats(TArray<FName>& InOutShderFormats)"
  },
  {
    "label": "GetCmdLineMaterialQualityToCache()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCmdLineMaterialQualityToCache()"
  },
  {
    "label": "GetNumComponents()",
    "kind": "Method",
    "detail": "Function (# endif uint32)",
    "insertText": "GetNumComponents(EMaterialValueType Type)"
  },
  {
    "label": "IsLWCType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLWCType(EMaterialValueType InType)"
  },
  {
    "label": "IsFloatNumericType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFloatNumericType(EMaterialValueType InType)"
  },
  {
    "label": "IsUIntNumericType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUIntNumericType(EMaterialValueType InType)"
  },
  {
    "label": "IsNumericType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericType(EMaterialValueType InType)"
  },
  {
    "label": "IsPrimitiveType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPrimitiveType(EMaterialValueType InType)"
  },
  {
    "label": "MakeNonLWCType()",
    "kind": "Method",
    "detail": "Function (} EMaterialValueType)",
    "insertText": "MakeNonLWCType(EMaterialValueType Type)"
  },
  {
    "label": "FMaterialCompileTargetParameters()",
    "kind": "Method",
    "detail": "Function (Constructor,Promote,Demote,Add,Subtract,Divide,MultiplyVectorVector,MultiplyVectorMatrix,MultiplyMatrixMatrix,Other,Max } ; enum EMaterialCommonBasis { MCB_Tangent,MCB_Local,MCB_TranslatedWorld,MCB_World,MCB_View,MCB_Camera,MCB_MeshParticle,MCB_Instance,MCB_MAX,} ; enum struct EDeferredParamStrictness { ELoose,EStrict,} ; struct FMaterialCompileTargetParameters {)",
    "insertText": "FMaterialCompileTargetParameters(EShaderPlatform InShaderPlatform, ERHIFeatureLevel::Type InFeatureLevel, const ITargetPlatform* InTargetPlatform) : ShaderPlatform(InShaderPlatform), FeatureLevel(InFeatureLevel), TargetPlatform(InTargetPlatform)"
  },
  {
    "label": "FMaterialRenderContext()",
    "kind": "Method",
    "detail": "Function (} EShaderPlatform ShaderPlatform ; ERHIFeatureLevel::Type FeatureLevel ; const ITargetPlatform* TargetPlatform ; } ; struct FMaterialRenderContext { const FMaterialRenderProxy* MaterialRenderProxy ; const FMaterial& Material ; bool bShowSelection ;)",
    "insertText": "FMaterialRenderContext(const FMaterialRenderProxy* InMaterialRenderProxy, const FMaterial& InMaterial, const FSceneView* InView)"
  },
  {
    "label": "FMaterialRenderContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialRenderContext(const FMaterialRenderProxy* InMaterialRenderProxy, const FMaterial& InMaterial, bool bInShowSelection) : MaterialRenderProxy(InMaterialRenderProxy) , Material(InMaterial) , bShowSelection(bInShowSelection)"
  },
  {
    "label": "GetTextureParameterValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTextureParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, int32 TextureIndex, const UTexture*& OutValue)"
  },
  {
    "label": "GetTextureParameterValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, int32 TextureIndex, const URuntimeVirtualTexture*& OutValue)"
  },
  {
    "label": "GetTextureParameterValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, int32 TextureIndex, const USparseVolumeTexture*& OutValue)"
  },
  {
    "label": "GetTextureCollectionParameterValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureCollectionParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, int32 TextureCollectionIndex, const UTextureCollection*& OutValue)"
  },
  {
    "label": "GetExternalTextureGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetExternalTextureGuid(const FGuid& ExternalTextureGuid, const FName& ParameterName, int32 SourceTextureIndex)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialVirtualTextureStack {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialVirtualTextureStack, NonVirtual)"
  },
  {
    "label": "FMaterialVirtualTextureStack()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialVirtualTextureStack()"
  },
  {
    "label": "FMaterialVirtualTextureStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialVirtualTextureStack(int32 InPreallocatedStackTextureIndex)"
  },
  {
    "label": "AddLayer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddLayer()"
  },
  {
    "label": "SetLayer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SetLayer(int32 LayerIndex, int32 UniformExpressionIndex)"
  },
  {
    "label": "GetNumLayers()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumLayers()"
  },
  {
    "label": "IsPreallocatedStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreallocatedStack()"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureValue(const FMaterialRenderContext& Context, const FUniformExpressionSet& UniformExpressionSet, const URuntimeVirtualTexture*& OutValue)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureValue(const FMaterialRenderContext& Context, const FUniformExpressionSet& UniformExpressionSet, const USparseVolumeTexture * &OutValue)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMaterialVirtualTextureStack& Stack)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(uint32, NumLayers)"
  },
  {
    "label": "LAYOUT_ARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_ARRAY(int32, LayerUniformExpressionIndices, VIRTUALTEXTURE_SPACE_MAXLAYERS)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(int32, PreallocatedStackTextureIndex)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialUniformPreshaderField {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialUniformPreshaderField, NonVirtual)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LAYOUT_FIELD(uint32, BufferOffset)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, ComponentIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(UE::Shader::EValueType, Type)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialUniformPreshaderHeader {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialUniformPreshaderHeader, NonVirtual)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMaterialUniformPreshaderHeader& Lhs, const FMaterialUniformPreshaderHeader& Rhs)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(uint32, OpcodeOffset)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, OpcodeSize)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, FieldIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, NumFields)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialNumericParameterInfo {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialNumericParameterInfo, NonVirtual)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMaterialNumericParameterInfo& Lhs, const FMaterialNumericParameterInfo& Rhs)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(FHashedMaterialParameterInfo, ParameterInfo)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(EMaterialParameterType, ParameterType)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, DefaultValueOffset)"
  },
  {
    "label": "NumMaterialTextureParameterTypes()",
    "kind": "Method",
    "detail": "Function (} ; enum class EMaterialTextureParameterType : uint32 { Standard2D,Cube,Array2D,ArrayCube,Volume,,SparseVolume,Count,} ; const uint32)",
    "insertText": "NumMaterialTextureParameterTypes(uint32)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (class FMaterialTextureParameterInfo {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialTextureParameterInfo, NonVirtual)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMaterialTextureParameterInfo& Lhs, const FMaterialTextureParameterInfo& Rhs)"
  },
  {
    "label": "GetParameterName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetParameterName()"
  },
  {
    "label": "GetGameThreadTextureValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetGameThreadTextureValue(const UMaterialInterface* MaterialInterface, const FMaterial& Material, UTexture*& OutValue)"
  },
  {
    "label": "GetGameThreadTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGameThreadTextureValue(const UMaterialInterface* MaterialInterface, const FMaterial& Material, USparseVolumeTexture*& OutValue)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(int32, TextureIndex, INDEX_NONE)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TEnumAsByte<ESamplerSourceMode>, SamplerSource)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(uint8, VirtualTextureLayerIndex, 0u)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialTextureCollectionParameterInfo {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialTextureCollectionParameterInfo, NonVirtual)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMaterialTextureCollectionParameterInfo& Lhs, const FMaterialTextureCollectionParameterInfo& Rhs)"
  },
  {
    "label": "GetTextureCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTextureCollection(const FMaterialRenderContext& Context, const UTextureCollection*& OutTextureCollection)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(int32, TextureCollectionIndex)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialExternalTextureParameterInfo {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialExternalTextureParameterInfo, NonVirtual)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMaterialExternalTextureParameterInfo& Lhs, const FMaterialExternalTextureParameterInfo& Rhs)"
  },
  {
    "label": "GetExternalTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetExternalTexture(const FMaterialRenderContext& Context, FTextureRHIRef& OutTextureRHI, FSamplerStateRHIRef& OutSamplerStateRHI)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FScriptName, ParameterName)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FGuid, ExternalTextureGuid)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(int32, SourceTextureIndex)"
  },
  {
    "label": "SetNumericOverride()",
    "kind": "Method",
    "detail": "Function (} ; class FUniformParameterOverrides { public : void)",
    "insertText": "SetNumericOverride(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, const UE::Shader::FValue& Value, bool bOverride)"
  },
  {
    "label": "GetNumericOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNumericOverride(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, UE::Shader::FValue& OutValue)"
  },
  {
    "label": "SetTextureOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureOverride(EMaterialTextureParameterType Type, const FMaterialTextureParameterInfo& ParameterInfo, UTexture* Texture)"
  },
  {
    "label": "GetTextureOverride_GameThread()",
    "kind": "Method",
    "detail": "Function (UTexture*)",
    "insertText": "GetTextureOverride_GameThread(EMaterialTextureParameterType Type, const FMaterialTextureParameterInfo& ParameterInfo)"
  },
  {
    "label": "GetTextureOverride_RenderThread()",
    "kind": "Method",
    "detail": "Function (UTexture*)",
    "insertText": "GetTextureOverride_RenderThread(EMaterialTextureParameterType Type, const FMaterialTextureParameterInfo& ParameterInfo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct FNumericParameterKey { FHashedMaterialParameterInfo ParameterInfo ; EMaterialParameterType ParameterType ; bool)",
    "insertText": "operator(const FNumericParameterKey& Lhs, const FNumericParameterKey& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FNumericParameterKey& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<FNumericParameterKey,UE::Shader::FValue> NumericOverrides ; struct FTextureParameterKey { FHashedMaterialParameterInfo ParameterInfo ; int32 TextureIndex ; bool)",
    "insertText": "operator(const FTextureParameterKey& Lhs, const FTextureParameterKey& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FTextureParameterKey& Value)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<FTextureParameterKey,UTexture*> GameThreadTextureOverides [ NumMaterialTextureParameterTypes ] ; TMap<FTextureParameterKey,UTexture*> RenderThreadTextureOverrides [ NumMaterialTextureParameterTypes ] ; } ; class FUniformExpressionSet {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FUniformExpressionSet, NonVirtual)"
  },
  {
    "label": "FUniformExpressionSet()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FUniformExpressionSet() : UniformPreshaderBufferSize(0u)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FUniformExpressionSet& ReferenceSet)"
  },
  {
    "label": "GetSummaryString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSummaryString()"
  },
  {
    "label": "CreateBufferStruct()",
    "kind": "Method",
    "detail": "Function (FShaderParametersMetadata*)",
    "insertText": "CreateBufferStruct()"
  },
  {
    "label": "SetParameterCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameterCollections(TConstArrayView<const class UMaterialParameterCollection*> Collections)"
  },
  {
    "label": "FillUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillUniformBuffer(const FMaterialRenderContext& MaterialRenderContext, const FUniformExpressionCache& UniformExpressionCache, const FRHIUniformBufferLayout* UniformBufferLayout, uint8* TempBuffer, int TempBufferSize)"
  },
  {
    "label": "FillUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillUniformBuffer(const FMaterialRenderContext& MaterialRenderContext, TConstArrayView<IAllocatedVirtualTexture*> AllocatedVTs, const FRHIUniformBufferLayout* UniformBufferLayout, uint8* TempBuffer, int TempBufferSize)"
  },
  {
    "label": "GetReferencedTexture2DRHIHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetReferencedTexture2DRHIHash(const FMaterialRenderContext& MaterialRenderContext)"
  },
  {
    "label": "HasExternalTextureExpressions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExternalTextureExpressions()"
  },
  {
    "label": "GetUniformBufferLayoutInitializer()",
    "kind": "Method",
    "detail": "Function (} const FRHIUniformBufferLayoutInitializer&)",
    "insertText": "GetUniformBufferLayoutInitializer()"
  },
  {
    "label": "GetDefaultParameterData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "GetDefaultParameterData(uint32 Offset)"
  },
  {
    "label": "GetNumericParameter()",
    "kind": "Method",
    "detail": "Function (} const FMaterialNumericParameterInfo&)",
    "insertText": "GetNumericParameter(uint32 Index)"
  },
  {
    "label": "GetNumTextures()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumTextures(EMaterialTextureParameterType Type)"
  },
  {
    "label": "GetGameThreadTextureValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetGameThreadTextureValue(EMaterialTextureParameterType Type, int32 Index, const UMaterialInterface* MaterialInterface, const FMaterial& Material, UTexture*& OutValue, bool bAllowOverride = true)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureValue(EMaterialTextureParameterType Type, int32 Index, const FMaterialRenderContext& Context, const FMaterial& Material, const UTexture*& OutValue)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureValue(int32 Index, const FMaterialRenderContext& Context, const FMaterial& Material, const URuntimeVirtualTexture*& OutValue)"
  },
  {
    "label": "GetTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureValue(int32 Index, const FMaterialRenderContext& Context, const FMaterial& Material, const USparseVolumeTexture*& OutValue)"
  },
  {
    "label": "FindOrAddTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddTextureParameter(EMaterialTextureParameterType Type, const FMaterialTextureParameterInfo& Info)"
  },
  {
    "label": "FindOrAddTextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddTextureCollectionParameter(const FMaterialTextureCollectionParameterInfo& Info)"
  },
  {
    "label": "FindOrAddExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddExternalTextureParameter(const FMaterialExternalTextureParameterInfo& Info)"
  },
  {
    "label": "FindOrAddNumericParameter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddNumericParameter(EMaterialParameterType Type, const FMaterialParameterInfo& ParameterInfo, uint32 DefaultValueOffset)"
  },
  {
    "label": "AddDefaultParameterValue()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddDefaultParameterValue(const UE::Shader::FValue& Value)"
  },
  {
    "label": "GetVTStacks()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FMaterialVirtualTextureStack>)",
    "insertText": "GetVTStacks()"
  },
  {
    "label": "AddVTLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVTLayer(int32 StackIndex, int32 TextureIndex)"
  },
  {
    "label": "SetVTLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVTLayer(int32 StackIndex, int32 VTLayerIndex, int32 TextureIndex)"
  },
  {
    "label": "FVTPackedStackAndLayerIndex()",
    "kind": "Method",
    "detail": "Function (protected : union FVTPackedStackAndLayerIndex {)",
    "insertText": "FVTPackedStackAndLayerIndex(uint16 InStackIndex, uint16 InLayerIndex) : StackIndex(InStackIndex), LayerIndex(InLayerIndex)"
  },
  {
    "label": "GetVTStackAndLayerIndex()",
    "kind": "Method",
    "detail": "Function (} uint32 PackedValue ; struct { uint16 StackIndex ; uint16 LayerIndex ; } ; } ; FVTPackedStackAndLayerIndex)",
    "insertText": "GetVTStackAndLayerIndex(int32 UniformExpressionIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (class FMaterial ; class FHLSLMaterialTranslator ; class FMaterialShaderMap ; class FMaterialShader ; class FMaterialRenderProxy ; class FMaterialVirtualTextureStack ; class FDebugUniformExpressionSet ; class UE::HLSLTree::FEmitContext ; class UE::HLSLTree::Material::FExpressionStaticTerrainLayerWeight ;)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FMaterialUniformPreshaderHeader>, UniformPreshaders)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FMaterialUniformPreshaderField>, UniformPreshaderFields)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FMaterialNumericParameterInfo>, UniformNumericParameters)"
  },
  {
    "label": "LAYOUT_ARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_ARRAY(TMemoryImageArray<FMaterialTextureParameterInfo>, UniformTextureParameters, NumMaterialTextureParameterTypes)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FMaterialExternalTextureParameterInfo>, UniformExternalTextureParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FMaterialTextureCollectionParameterInfo>, UniformTextureCollectionParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, UniformPreshaderBufferSize)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(UE::Shader::FPreshaderData, UniformPreshaderData)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<uint8>, DefaultValues)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FMaterialVirtualTextureStack>, VTStacks)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FGuid>, ParameterCollections)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FRHIUniformBufferLayoutInitializer, UniformBufferLayoutInitializer)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialCompilationOutput {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialCompilationOutput, NonVirtual)"
  },
  {
    "label": "FMaterialCompilationOutput()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialCompilationOutput() : UsedSceneTextures(0), UsedPathTracingBufferTextures(0), #if WITH_EDITOR EstimatedNumTextureSamplesVS(0), EstimatedNumTextureSamplesPS(0), EstimatedNumVirtualTextureLookups(0), NumUsedUVScalars(0), NumUsedCustomInterpolatorScalars(0), #endif SubstrateMaterialCompilationOutput(), UsedDBufferTextures(0), RuntimeVirtualTextureOutputAttributeMask(0), bNeedsSceneTextures(false), bUsesDBufferTextureLookup(false), bUsesEyeAdaptation(false), bModifiesMeshPosition(false), bUsesWorldPositionOffset(false), bUsesGlobalDistanceField(false), bUsesPixelDepthOffset(false), bUsesDistanceCullFade(false), bUsesPerInstanceCustomData(false), bUsesVertexInterpolator(false), bHasRuntimeVirtualTextureOutputNode(false), bUsesAnisotropy(false), bIsLightFunctionAtlasCompatible(false), bUsesDisplacement(false), bUsedWithNeuralNetworks(false), bUsesCustomizedUVs(false)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "Memzero(EstimatedLWCFuncUsagesVS)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(EstimatedLWCFuncUsagesPS)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(EstimatedLWCFuncUsagesCS)"
  },
  {
    "label": "IsSceneTextureUsed()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "IsSceneTextureUsed(ESceneTextureId TexId)"
  },
  {
    "label": "SetIsSceneTextureUsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsSceneTextureUsed(ESceneTextureId TexId)"
  },
  {
    "label": "UsedSceneTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsedSceneTextures(1 << TexId)"
  },
  {
    "label": "FindOrAddUserSceneTexture()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_EDITOR int32)",
    "insertText": "FindOrAddUserSceneTexture(FName UserSceneTexture)"
  },
  {
    "label": "GetNumPostProcessInputsUsed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPostProcessInputsUsed()"
  },
  {
    "label": "SetIsDBufferTextureUsed()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetIsDBufferTextureUsed(int32 TextureIndex)"
  },
  {
    "label": "UsedDBufferTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsedDBufferTextures(1 << TextureIndex)"
  },
  {
    "label": "SetIsDBufferTextureLookupUsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsDBufferTextureLookupUsed(bool bValue)"
  },
  {
    "label": "SetIsPathTracingBufferTextureUsed()",
    "kind": "Method",
    "detail": "Function (bUsesDBufferTextureLookup = bValue ; } void)",
    "insertText": "SetIsPathTracingBufferTextureUsed(int32 TexId)"
  },
  {
    "label": "UsedPathTracingBufferTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsedPathTracingBufferTextures(1 << TexId)"
  },
  {
    "label": "RequiresSceneColorCopy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresSceneColorCopy()"
  },
  {
    "label": "NeedsGBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsGBuffer()"
  },
  {
    "label": "UsesSceneDepthLookup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesSceneDepthLookup()"
  },
  {
    "label": "UsesVelocitySceneTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesVelocitySceneTexture()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(FUniformExpressionSet, UniformExpressionSet)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FScriptName>, UserSceneTextureInputs)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint32, UsedSceneTextures)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint8, UsedPathTracingBufferTextures)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(uint16, EstimatedNumTextureSamplesVS)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(uint16, EstimatedNumTextureSamplesPS)"
  },
  {
    "label": "LAYOUT_ARRAY_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_ARRAY_EDITORONLY(uint16, EstimatedLWCFuncUsagesVS, (int)ELWCFunctionKind::Max) LAYOUT_ARRAY_EDITORONLY(uint16, EstimatedLWCFuncUsagesPS, (int)ELWCFunctionKind::Max) LAYOUT_ARRAY_EDITORONLY(uint16, EstimatedLWCFuncUsagesCS, (int)ELWCFunctionKind::Max) LAYOUT_FIELD_EDITORONLY(uint16, EstimatedNumVirtualTextureLookups)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(uint8, NumUsedUVScalars)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(uint8, NumUsedCustomInterpolatorScalars)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FSubstrateMaterialCompilationOutput, SubstrateMaterialCompilationOutput)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint8, UsedDBufferTextures)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(uint8, RuntimeVirtualTextureOutputAttributeMask)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bNeedsSceneTextures, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesDBufferTextureLookup, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesEyeAdaptation, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bModifiesMeshPosition, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesWorldPositionOffset, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesGlobalDistanceField, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesPixelDepthOffset, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesDistanceCullFade, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesPerInstanceCustomData, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesVertexInterpolator, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bHasRuntimeVirtualTextureOutputNode, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesAnisotropy, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bIsLightFunctionAtlasCompatible, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesDisplacement, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsedWithNeuralNetworks, 1)"
  },
  {
    "label": "LAYOUT_BITFIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_BITFIELD(uint8, bUsesCustomizedUVs, 1)"
  },
  {
    "label": "FMaterialShaderParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct FDebugShaderPipelineInfo { const FShaderPipelineType* Pipeline = nullptr ; TArray<FShaderType*> ShaderTypes ; } ; struct FDebugShaderTypeInfo { FVertexFactoryType* VFType = nullptr ; TArray<FShaderType*> ShaderTypes ; TArray<FDebugShaderPipelineInfo> Pipelines ; } ; namespace EMaterialShaderMapUsage { enum Type { Default,LightmassExportEmissive,LightmassExportDiffuse,LightmassExportOpacity,LightmassExportNormal,MaterialExportBaseColor,MaterialExportSpecular,MaterialExportNormal,MaterialExportTangent,MaterialExportMetallic,MaterialExportRoughness,MaterialExportAnisotropy,MaterialExportAO,MaterialExportEmissive,MaterialExportOpacity,MaterialExportOpacityMask,MaterialExportSubSurfaceColor,MaterialExportClearCoat,MaterialExportClearCoatRoughness,MaterialExportCustomOutput,MaterialExportShadingModel,MaterialExportRefraction,} ; } struct FMaterialShaderParameters { EMaterialDomain MaterialDomain ; FMaterialShadingModelField ShadingModels ; EBlendMode BlendMode ; ERHIFeatureLevel::Type FeatureLevel ; EMaterialQualityLevel::Type QualityLevel ; uint16 PreshaderGap ; int32 BlendableLocation ; int32 NumCustomizedUVs ; uint32 StencilCompare ; union { uint64 PackedFlags ; struct { uint64 bIsDefaultMaterial : 1 ; uint64 bIsSpecialEngineMaterial : 1 ; uint64 bIsMasked : 1 ; uint64 bIsDitherMasked : 1 ; uint64 bIsTwoSided : 1 ; uint64 bIsThinSurface : 1 ; uint64 bIsDistorted : 1 ; uint64 bShouldCastDynamicShadows : 1 ; uint64 bWritesEveryPixel : 1 ; uint64 bWritesEveryPixelShadowPass : 1 ; uint64 bHasDiffuseAlbedoConnected : 1 ; uint64 bHasF0Connected : 1 ; uint64 bHasBaseColorConnected : 1 ; uint64 bHasNormalConnected : 1 ; uint64 bHasRoughnessConnected : 1 ; uint64 bHasSpecularConnected : 1 ; uint64 bHasMetallicConnected : 1 ; uint64 bHasEmissiveColorConnected : 1 ; uint64 bHasAmbientOcclusionConnected : 1 ; uint64 bHasAnisotropyConnected : 1 ; uint64 bIsTessellationEnabled : 1 ; uint64 bHasDisplacementConnected : 1 ; uint64 bHasVertexPositionOffsetConnected : 1 ; uint64 bHasPixelDepthOffsetConnected : 1 ; uint64 bMaterialMayModifyMeshPosition : 1 ; uint64 bIsUsedWithStaticLighting : 1 ; uint64 bIsUsedWithParticleSprites : 1 ; uint64 bIsUsedWithMeshParticles : 1 ; uint64 bIsUsedWithNiagaraSprites : 1 ; uint64 bIsUsedWithNiagaraMeshParticles : 1 ; uint64 bIsUsedWithNiagaraRibbons : 1 ; uint64 bIsUsedWithLandscape : 1 ; uint64 bIsUsedWithBeamTrails : 1 ; uint64 bIsUsedWithSplineMeshes : 1 ; uint64 bIsUsedWithSkeletalMesh : 1 ; uint64 bIsUsedWithMorphTargets : 1 ; uint64 bIsUsedWithAPEXCloth : 1 ; uint64 bIsUsedWithGeometryCache : 1 ; uint64 bIsUsedWithGeometryCollections : 1 ; uint64 bIsUsedWithHairStrands : 1 ; uint64 bIsUsedWithWater : 1 ; uint64 bIsTranslucencyWritingVelocity : 1 ; uint64 bIsTranslucencyWritingCustomDepth : 1 ; uint64 bIsDitheredLODTransition : 1 ; uint64 bIsUsedWithInstancedStaticMeshes : 1 ; uint64 bHasPerInstanceCustomData : 1 ; uint64 bHasPerInstanceRandom : 1 ; uint64 bHasVertexInterpolator : 1 ; uint64 bHasRuntimeVirtualTextureOutput : 1 ; uint64 bIsUsedWithLidarPointCloud : 1 ; uint64 bIsUsedWithVirtualHeightfieldMesh : 1 ; uint64 bIsUsedWithNeuralNetworks : 1 ; uint64 bIsUsedWithNanite : 1 ; uint64 bIsStencilTestEnabled : 1 ; uint64 bIsTranslucencySurface : 1 ; uint64 bShouldDisableDepthTest : 1 ; uint64 bHasRenderTracePhysicalMaterialOutput : 1 ; uint64 bIsUsedWithVolumetricCloud : 1 ; uint64 bIsUsedWithHeterogeneousVolumes : 1 ; uint64 bIsMobileSeparateTranslucencyEnabled : 1 ; uint64 bAlwaysEvaluateWorldPositionOffset : 1 ; uint64 bDisablePreExposureScale : 1 ; uint64 bAllowVariableRateShading : 1 ; } ; } ;)",
    "insertText": "FMaterialShaderParameters(const FMaterial* InMaterial=nullptr)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "Save(FCbWriter& Writer)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoad(FCbFieldView Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FMaterialShaderParameters& Value)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Save(Writer)"
  },
  {
    "label": "FMaterialShaderMapId()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FMaterialShaderMapId { public : FSHAHash CookedShaderMapIdHash ; # if WITH_EDITOR FGuid BaseMaterialId ; # endif EMaterialQualityLevel::Type QualityLevel ; ERHIFeatureLevel::Type FeatureLevel ; # if WITH_EDITOR EMaterialShaderMapUsage::Type Usage ; FString UsageCustomOutput ; private : bool bIsCookedId ; TArray<FStaticSwitchParameter> StaticSwitchParameters ; TArray<FStaticComponentMaskParameter> StaticComponentMaskParameters ; TArray<FStaticTerrainLayerWeightParameter> TerrainLayerWeightParameters ; TOptional<FMaterialLayersFunctions::ID> MaterialLayersId ; public : TArray<FGuid> ReferencedFunctions ; TArray<FGuid> ReferencedParameterCollections ; TArray<FShaderTypeDependency> ShaderTypeDependencies ; TArray<FShaderPipelineTypeDependency> ShaderPipelineTypeDependencies ; TArray<FVertexFactoryTypeDependency> VertexFactoryTypeDependencies ; FSHAHash TextureReferencesHash ; FSHAHash ExpressionIncludesHash ; FSHAHash BasePropertyOverridesHash ; bool bUsingNewHLSLGenerator ; FSubstrateCompilationConfig SubstrateCompilationConfig ; # endif FPlatformTypeLayoutParameters LayoutParams ;)",
    "insertText": "FMaterialShaderMapId() : QualityLevel(EMaterialQualityLevel::High) , FeatureLevel(ERHIFeatureLevel::SM5) #if WITH_EDITOR , Usage(EMaterialShaderMapUsage::Default) , bIsCookedId(false) , bUsingNewHLSLGenerator(false) , SubstrateCompilationConfig()"
  },
  {
    "label": "FMaterialShaderMapId()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialShaderMapId()"
  },
  {
    "label": "SetShaderDependencies()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "SetShaderDependencies(const TArray<FShaderType*>& ShaderTypes, const TArray<const FShaderPipelineType*>& ShaderPipelineTypes, const TArray<FVertexFactoryType*>& VFTypes, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar, bool bLoadingCooked)"
  },
  {
    "label": "IsCookedId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookedId()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return bIsCookedId ; # else return true ; # endif } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsCookedId()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return !)",
    "insertText": "IsCookedId() ? BaseMaterialId.IsValid() : (CookedShaderMapIdHash != FSHAHash())"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(CookedShaderMapIdHash != FSHAHash())"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# endif } uint32)",
    "insertText": "GetTypeHash(const FMaterialShaderMapId& Ref)"
  },
  {
    "label": "IsCookedId()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return ! Ref .)",
    "insertText": "IsCookedId() ? Ref.BaseMaterialId.A : (*(uint32*)&Ref.CookedShaderMapIdHash.Hash[0])"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(uint32*)"
  },
  {
    "label": "GetSizeBytes()",
    "kind": "Method",
    "detail": "Function (# endif } SIZE_T)",
    "insertText": "GetSizeBytes()"
  },
  {
    "label": "GetMaterialHash()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "GetMaterialHash(FSHAHash& OutHash, bool bWithStaticParameters)"
  },
  {
    "label": "GetMaterialHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialHash(FSHAHash& OutHash)"
  },
  {
    "label": "GetMaterialHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialHash(OutHash, true)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "Equals(const FMaterialShaderMapId& ReferenceSet, bool bWithStaticParameters)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMaterialShaderMapId& ReferenceSet)"
  },
  {
    "label": "IsContentValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsContentValid()"
  },
  {
    "label": "GetPermutationFlags()",
    "kind": "Method",
    "detail": "Function (EShaderPermutationFlags)",
    "insertText": "GetPermutationFlags()"
  },
  {
    "label": "UpdateFromParameterSet()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "UpdateFromParameterSet(const FStaticParameterSet& StaticParameters)"
  },
  {
    "label": "AppendKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyString(FString& KeyString, bool bIncludeSourceAndMaterialState = true, bool bIncludeKeyStringShaderDependencies = true)"
  },
  {
    "label": "RecordAndEmit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordAndEmit(FMaterialKeyGeneratorContext& Context)"
  },
  {
    "label": "GetStaticSwitchParameters()",
    "kind": "Method",
    "detail": "Function (const TArray<FStaticSwitchParameter>&)",
    "insertText": "GetStaticSwitchParameters()"
  },
  {
    "label": "ContainsShaderPipelineType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsShaderPipelineType(const FShaderPipelineType* ShaderPipelineType)"
  },
  {
    "label": "ContainsVertexFactoryType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsVertexFactoryType(const FVertexFactoryType* VFType)"
  },
  {
    "label": "AppendStaticParameters()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITOR void)",
    "insertText": "AppendStaticParameters(FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FMeshMaterialShaderMap : public FShaderMapContent {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMeshMaterialShaderMap, NonVirtual)"
  },
  {
    "label": "FMeshMaterialShaderMap()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMeshMaterialShaderMap(EShaderPlatform InPlatform, const FHashedName& InVertexFactoryTypeName) : FShaderMapContent(InPlatform) , VertexFactoryTypeName(InVertexFactoryTypeName)"
  },
  {
    "label": "LoadMissingShadersFromMemory()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "LoadMissingShadersFromMemory(const FSHAHash& MaterialShaderMapHash, const FMaterial* Material, EShaderPlatform Platform)"
  },
  {
    "label": "GetVertexFactoryTypeName()",
    "kind": "Method",
    "detail": "Function (# endif const FHashedName&)",
    "insertText": "GetVertexFactoryTypeName()"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; struct FMaterialProcessedSource {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialProcessedSource, NonVirtual)"
  },
  {
    "label": "FMaterialProcessedSource()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialProcessedSource()"
  },
  {
    "label": "FMaterialProcessedSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialProcessedSource(const FHashedName& InName, const TCHAR* InSource) : Name(InName), Source(InSource)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(FHashedName, Name)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FMemoryImageString, Source)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialShaderMapContent : public FShaderMapContent { class FMaterialShaderMap ;)",
    "insertText": "DECLARE_TYPE_LAYOUT(FMaterialShaderMapContent, NonVirtual)"
  },
  {
    "label": "FMaterialShaderMapContent()",
    "kind": "Method",
    "detail": "Function (public : using Super = FShaderMapContent ;)",
    "insertText": "FMaterialShaderMapContent(EShaderPlatform InPlatform = EShaderPlatform::SP_NumPlatforms) : FShaderMapContent(InPlatform)"
  },
  {
    "label": "FMaterialShaderMapContent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialShaderMapContent()"
  },
  {
    "label": "GetNumShaders()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumShaders()"
  },
  {
    "label": "GetNumShaderPipelines()",
    "kind": "Method",
    "detail": "Function (} return NumShaders ; } uint32)",
    "insertText": "GetNumShaderPipelines()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} return NumPipelines ; } void)",
    "insertText": "Finalize(const FShaderMapResourceCode* Code)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct FProjectMeshShaderMapToKey { const FHashedName&)",
    "insertText": "operator()(const FMeshMaterialShaderMap* InShaderMap)"
  },
  {
    "label": "GetMeshShaderMap()",
    "kind": "Method",
    "detail": "Function (} } ; const FMeshMaterialShaderMap*)",
    "insertText": "GetMeshShaderMap(const FHashedName& VertexFactoryTypeName)"
  },
  {
    "label": "AcquireMeshShaderMap()",
    "kind": "Method",
    "detail": "Function (FMeshMaterialShaderMap*)",
    "insertText": "AcquireMeshShaderMap(const FHashedName& VertexFactoryTypeName)"
  },
  {
    "label": "AddMeshShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshShaderMap(const FHashedName& VertexFactoryTypeName, FMeshMaterialShaderMap* MeshShaderMap)"
  },
  {
    "label": "RemoveMeshShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMeshShaderMap(const FHashedName& VertexFactoryTypeName)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<TMemoryImagePtr<FMeshMaterialShaderMap>>, OrderedMeshShaderMaps)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FMaterialCompilationOutput, MaterialCompilationOutput)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FSHAHash, ShaderContentHash)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FScriptName, UserSceneTextureOutput)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(int32, UserTextureDivisorX, 0)"
  },
  {
    "label": "LAYOUT_FIELD_INITIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_INITIALIZED(int32, UserTextureDivisorY, 0)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FScriptName, ResolutionRelativeToInput)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(TMemoryImageArray<FMaterialProcessedSource>, ShaderProcessedSource)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FMemoryImageString, FriendlyName)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FMemoryImageString, DebugDescription)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FMemoryImageString, MaterialPath)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialShaderMap : public TShaderMap<FMaterialShaderMapContent,FShaderMapPointerTable>,public FDeferredCleanupInterface { public : using Super = TShaderMap<FMaterialShaderMapContent,FShaderMapPointerTable> ; TRefCountPtr<FMaterialShaderMap>)",
    "insertText": "FindId(const FMaterialShaderMapId& ShaderMapId, EShaderPlatform Platform)"
  },
  {
    "label": "FindCompilingShaderMap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FMaterialShaderMap*)",
    "insertText": "FindCompilingShaderMap(uint32 CompilingId)"
  },
  {
    "label": "GetAllOutdatedTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllOutdatedTypes(TArray<const FShaderType*>& OutdatedShaderTypes, TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, TArray<const FVertexFactoryType*>& OutdatedFactoryTypes)"
  },
  {
    "label": "LoadFromDerivedDataCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFromDerivedDataCache(const FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, TRefCountPtr<FMaterialShaderMap>& InOutShaderMap, FString& OutDDCKeyDesc)"
  },
  {
    "label": "FAsyncLoadContext()",
    "kind": "Method",
    "detail": "Function (struct FAsyncLoadContext { ~)",
    "insertText": "FAsyncLoadContext()"
  },
  {
    "label": "IsReady()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsReady()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FMaterialShaderMap>)",
    "insertText": "Get()"
  },
  {
    "label": "BeginLoadFromDerivedDataCache()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<FAsyncLoadContext>)",
    "insertText": "BeginLoadFromDerivedDataCache(const FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, TRefCountPtr<FMaterialShaderMap>& InOutShaderMap, FString& OutDDCKeyDesc)"
  },
  {
    "label": "FMaterialShaderMap()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FMaterialShaderMap()"
  },
  {
    "label": "AcquireFinalizedClone()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FMaterialShaderMap*)",
    "insertText": "AcquireFinalizedClone()"
  },
  {
    "label": "GetFinalizedClone()",
    "kind": "Method",
    "detail": "Function (FMaterialShaderMap*)",
    "insertText": "GetFinalizedClone()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (# endif TShaderRef<FShader>)",
    "insertText": "GetShader(FShaderType* ShaderType, int32 PermutationId = 0)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (FShader* Shader =)",
    "insertText": "GetContent()->GetShader(ShaderType, PermutationId)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader(int32 PermutationId = 0)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader(const typename ShaderType::FPermutationDomain& PermutationVector)"
  },
  {
    "label": "GetMaxNumInstructionsForShader()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMaxNumInstructionsForShader(FShaderType* ShaderType)"
  },
  {
    "label": "SubmitCompileJobs()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR int32)",
    "insertText": "SubmitCompileJobs(uint32 CompilingShaderMapId, const FMaterial* Material, const TRefCountPtr<FSharedShaderCompilerEnvironment>& MaterialEnvironment, EShaderCompileJobPriority Priority)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile(FMaterial* Material, const FMaterialShaderMapId& ShaderMapId, const TRefCountPtr<FSharedShaderCompilerEnvironment>& MaterialEnvironment, const FMaterialCompilationOutput& InMaterialCompilationOutput, EShaderPlatform Platform, EMaterialShaderPrecompileMode PrecompileMode)"
  },
  {
    "label": "ProcessCompilationResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCompilationResults(const TArray<TRefCountPtr<FShaderCommonCompileJob>>& ICompilationResults, int32& InOutJobIndex, float& TimeBudget)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsComplete(const FMaterial* Material, bool bSilent)"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (FPSOPrecacheDataArray)",
    "insertText": "CollectPSOPrecacheData(const FMaterialPSOPrecacheParams& PrecacheParams)"
  },
  {
    "label": "LoadMissingShadersFromMemory()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "LoadMissingShadersFromMemory(const FMaterial* Material)"
  },
  {
    "label": "GetShaderSource()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR const FMemoryImageString*)",
    "insertText": "GetShaderSource(const FVertexFactoryType* VertexFactoryType, const FShaderType* ShaderType, int32 PermutationId)"
  },
  {
    "label": "GetShaderList()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetShaderList(TMap<FShaderId, TShaderRef<FShader>>& OutShaders)"
  },
  {
    "label": "GetShaderList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderList(TMap<FHashedName, TShaderRef<FShader>>& OutShaders)"
  },
  {
    "label": "GetShaderPipelineList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderPipelineList(TArray<FShaderPipelineRef>& OutShaderPipelines)"
  },
  {
    "label": "GetShaderNum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShaderNum()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "RegisterForODSC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForODSC(EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Ctx()",
    "kind": "Method",
    "detail": "Function (FShaderSerializeContext)",
    "insertText": "Ctx(Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ctx . bLoadingCooked = bLoadingCooked ; Ctx . SerializingAsset = SerializingAsset ; return)",
    "insertText": "Serialize(Ctx)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FShaderSerializeContext& Ctx)"
  },
  {
    "label": "SaveToDerivedDataCache()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SaveToDerivedDataCache(const FMaterialShaderParameters& ShaderParameters)"
  },
  {
    "label": "SaveForRemoteRecompile()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SaveForRemoteRecompile(FArchive& Ar, const TMap<FString, TArray<TRefCountPtr<FMaterialShaderMap> > >& CompiledShaderMaps)"
  },
  {
    "label": "LoadForRemoteRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadForRemoteRecompile(FArchive& Ar, EShaderPlatform ShaderPlatform, TArray<UMaterialInterface*>& OutLoadedMaterials)"
  },
  {
    "label": "GetMaxTextureSamplers()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR uint32)",
    "insertText": "GetMaxTextureSamplers()"
  },
  {
    "label": "GetOutdatedTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutdatedTypes(TArray<const FShaderType*>& OutdatedShaderTypes, TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, TArray<const FVertexFactoryType*>& OutdatedFactoryTypes)"
  },
  {
    "label": "SaveShaderStableKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderStableKeys(EShaderPlatform TargetShaderPlatform, const struct FStableShaderKeyAndValue& SaveKeyVal)"
  },
  {
    "label": "GetMeshShaderMap()",
    "kind": "Method",
    "detail": "Function (# endif const FMeshMaterialShaderMap*)",
    "insertText": "GetMeshShaderMap(const FVertexFactoryType* VertexFactoryType)"
  },
  {
    "label": "AcquireMeshShaderMap()",
    "kind": "Method",
    "detail": "Function (} FMeshMaterialShaderMap*)",
    "insertText": "AcquireMeshShaderMap(const FVertexFactoryType* VertexFactoryType)"
  },
  {
    "label": "GetShaderMapId()",
    "kind": "Method",
    "detail": "Function (} const FMaterialShaderMapId&)",
    "insertText": "GetShaderMapId()"
  },
  {
    "label": "AcquireCompilingId()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR uint32)",
    "insertText": "AcquireCompilingId(const TRefCountPtr<FSharedShaderCompilerEnvironment>& InMaterialEnvironment)"
  },
  {
    "label": "ReleaseCompilingId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCompilingId()"
  },
  {
    "label": "GetCompilingId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCompilingId()"
  },
  {
    "label": "AddCompilingDependency()",
    "kind": "Method",
    "detail": "Function (bCompiledSuccessfully = bSuccess ; } void)",
    "insertText": "AddCompilingDependency(FMaterial* Material)"
  },
  {
    "label": "RemoveCompilingDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompilingDependency(FMaterial* Material)"
  },
  {
    "label": "IsFromODSC()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_ODSC bool)",
    "insertText": "IsFromODSC()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (bIsFromODSC = bInIsFromODSC ; } # endif # if WITH_EDITORONLY_DATA const TCHAR*)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetDebugDescription()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDebugDescription()"
  },
  {
    "label": "GetMaterialPath()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetMaterialPath()"
  },
  {
    "label": "NeedsSceneTextures()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsSceneTextures()"
  },
  {
    "label": "UsesGlobalDistanceField()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesGlobalDistanceField()"
  },
  {
    "label": "UsesWorldPositionOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesWorldPositionOffset()"
  },
  {
    "label": "UsesDisplacement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesDisplacement()"
  },
  {
    "label": "UsesEyeAdaptation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesEyeAdaptation()"
  },
  {
    "label": "ModifiesMeshPosition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ModifiesMeshPosition()"
  },
  {
    "label": "UsesPixelDepthOffset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesPixelDepthOffset()"
  },
  {
    "label": "UsesDistanceCullFade()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesDistanceCullFade()"
  },
  {
    "label": "UsesAnisotropy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesAnisotropy()"
  },
  {
    "label": "IsLightFunctionAtlasCompatible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLightFunctionAtlasCompatible()"
  },
  {
    "label": "GetSubstrateMaterialCompilationOutput()",
    "kind": "Method",
    "detail": "Function (} const FSubstrateMaterialCompilationOutput&)",
    "insertText": "GetSubstrateMaterialCompilationOutput()"
  },
  {
    "label": "GetSubstrateMaterialType()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetSubstrateMaterialType()"
  },
  {
    "label": "GetSubstrateClosureCount()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetSubstrateClosureCount()"
  },
  {
    "label": "GetSubstrateUintPerPixel()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetSubstrateUintPerPixel()"
  },
  {
    "label": "GetSubstrateUsesComplexSpecialRenderPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSubstrateUsesComplexSpecialRenderPath()"
  },
  {
    "label": "GetNumUsedUVScalars()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR uint32)",
    "insertText": "GetNumUsedUVScalars()"
  },
  {
    "label": "GetNumUsedCustomInterpolatorScalars()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumUsedCustomInterpolatorScalars()"
  },
  {
    "label": "GetEstimatedNumTextureSamples()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetEstimatedNumTextureSamples(uint32& VSSamples, uint32& PSSamples)"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (MaterialCompilationOutput.EstimatedNumTextureSamplesVS)",
    "insertText": "GetContent()"
  },
  {
    "label": "GetEstimatedNumVirtualTextureLookups()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetEstimatedNumVirtualTextureLookups()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} using FLWCUsagesArray = TStaticArray<)",
    "insertText": "uint16(int)"
  },
  {
    "label": "GetEstimatedLWCFuncUsages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEstimatedLWCFuncUsages(FLWCUsagesArray& UsagesVS, FLWCUsagesArray& UsagesPS, FLWCUsagesArray& UsagesCS)"
  },
  {
    "label": "CopyAssignItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssignItems(UsagesVS.GetData(), GetContent()->MaterialCompilationOutput.EstimatedLWCFuncUsagesVS, (int)ELWCFunctionKind::Max)"
  },
  {
    "label": "CopyAssignItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssignItems(UsagesPS.GetData(), GetContent()->MaterialCompilationOutput.EstimatedLWCFuncUsagesPS, (int)ELWCFunctionKind::Max)"
  },
  {
    "label": "CopyAssignItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssignItems(UsagesCS.GetData(), GetContent()->MaterialCompilationOutput.EstimatedLWCFuncUsagesCS, (int)ELWCFunctionKind::Max)"
  },
  {
    "label": "GetEstimatedLWCFuncUsageComplexity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetEstimatedLWCFuncUsageComplexity(uint32& LWCComplexityVS, uint32& LWCComplexityPS, uint32& LWCComplexityCS)"
  },
  {
    "label": "GetNumPreshaders()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumPreshaders()"
  },
  {
    "label": "GetNumVirtualTextureStacks()",
    "kind": "Method",
    "detail": "Function (} # endif uint32)",
    "insertText": "GetNumVirtualTextureStacks()"
  },
  {
    "label": "GetRuntimeVirtualTextureOutputAttributeMask()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetRuntimeVirtualTextureOutputAttributeMask()"
  },
  {
    "label": "UsesSceneTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesSceneTexture(uint32 TexId)"
  },
  {
    "label": "GetUserSceneTextureInputs()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FScriptName>)",
    "insertText": "GetUserSceneTextureInputs()"
  },
  {
    "label": "GetUserSceneTextureOutput()",
    "kind": "Method",
    "detail": "Function (} FScriptName)",
    "insertText": "GetUserSceneTextureOutput()"
  },
  {
    "label": "GetUserTextureDivisor()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetUserTextureDivisor()"
  },
  {
    "label": "GetResolutionRelativeToInput()",
    "kind": "Method",
    "detail": "Function (} FScriptName)",
    "insertText": "GetResolutionRelativeToInput()"
  },
  {
    "label": "UsesPathTracingBufferTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesPathTracingBufferTexture(uint32 TexId)"
  },
  {
    "label": "IsValidForRendering()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidForRendering(bool bFailOnInvalid = false)"
  },
  {
    "label": "GetFrozenContentSize()",
    "kind": "Method",
    "detail": "Function (# if 0 const bool bValid = bCompiledSuccessfully&&)",
    "insertText": "GetFrozenContentSize()"
  },
  {
    "label": "GetUniformBufferLayout()",
    "kind": "Method",
    "detail": "Function (} const FRHIUniformBufferLayout*)",
    "insertText": "GetUniformBufferLayout()"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (NumShaders =)",
    "insertText": "GetContent()->GetNumShaders()"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (NumPipelines =)",
    "insertText": "GetContent()->GetNumShaderPipelines()"
  },
  {
    "label": "DumpDebugInfo()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DumpDebugInfo(FOutputDevice& OutputDevice)"
  },
  {
    "label": "InitalizeForODSC()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "InitalizeForODSC(EShaderPlatform TargetShaderPlatform, const FMaterialCompilationOutput& NewCompilationOutput)"
  },
  {
    "label": "AddCompilingMaterialExternalDependency()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if WITH_EDITOR void)",
    "insertText": "AddCompilingMaterialExternalDependency()"
  },
  {
    "label": "RemoveCompilingMaterialExternalDependency()",
    "kind": "Method",
    "detail": "Function (+ + CompilingMaterialNumExternalDependencies ; } void)",
    "insertText": "RemoveCompilingMaterialExternalDependency()"
  },
  {
    "label": "CheckReleaseCompilingId()",
    "kind": "Method",
    "detail": "Function (- - CompilingMaterialNumExternalDependencies ;)",
    "insertText": "CheckReleaseCompilingId()"
  },
  {
    "label": "PostFinalizeContent()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostFinalizeContent()"
  },
  {
    "label": "ProcessCompilationResultsForSingleJob()",
    "kind": "Method",
    "detail": "Function (private : TMap<FMaterialShaderMapId,FMaterialShaderMap*> GIdToMaterialShaderMap [ SP_NumPlatforms ] ; FCriticalSection GIdToMaterialShaderMapCS ; # if ALLOW_SHADERMAP_DEBUG_DATA TArray<FMaterialShaderMap*> AllMaterialShaderMaps ; FCriticalSection AllMaterialShaderMapsGuard ; # endif # if WITH_EDITOR TRefCountPtr<FMaterialShaderMap> FinalizedClone ; TRefCountPtr<FSharedShaderCompilerEnvironment> PendingCompilerEnvironment ; TArray<TRefCountPtr<FMaterial>> CompilingMaterialDependencies ; int32 CompilingMaterialNumExternalDependencies = 0 ; # endif FUniformBufferLayoutRHIRef UniformBufferLayout ; # if ALLOW_SHADERMAP_DEBUG_DATA float CompileTime ; # endif FMaterialShaderMapId ShaderMapId ; # if WITH_EDITOR uint32 CompilingId = 0 ; # endif int32 NumRefs ; bool bDeletedThroughDeferredCleanup ; uint32 bRegistered : 1 ; uint32 bCompilationFinalized : 1 ; uint32 bCompiledSuccessfully : 1 ; uint32 bIsPersistent : 1 ; uint32 bIsFromODSC : 1 ; # if WITH_EDITOR FShader*)",
    "insertText": "ProcessCompilationResultsForSingleJob(class FShaderCompileJob* SingleJob, const FShaderPipelineType* ShaderPipeline, const FSHAHash& MaterialShaderMapHash)"
  },
  {
    "label": "ShaderMapResourceExplicitRelease()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ShaderMapResourceExplicitRelease(const FShaderMapResource* ShaderMapResource)"
  },
  {
    "label": "DumpMaterialStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMaterialStats(EShaderPlatform Platform)"
  },
  {
    "label": "FMaterialExpressionKey()",
    "kind": "Method",
    "detail": "Function (class FShaderCompilingManager ; class UE::Cook::FODSCClientData ; } ; enum ECompiledMaterialProperty { CompiledMP_EmissiveColorCS = MP_MAX,CompiledMP_PrevWorldPositionOffset,CompiledMP_MAX } ; enum ECompiledPartialDerivativeVariation { CompiledPDV_FiniteDifferences,CompiledPDV_Analytic,CompiledPDV_MAX } ; class FMaterialExpressionKey { public : UMaterialExpression* Expression ; int32 OutputIndex ; FGuid MaterialAttributeID ; bool bCompilingPreviousFrameKey ;)",
    "insertText": "FMaterialExpressionKey(UMaterialExpression* InExpression, int32 InOutputIndex) : Expression(InExpression), OutputIndex(InOutputIndex), MaterialAttributeID(FGuid(0,0,0,0)), bCompilingPreviousFrameKey(false)"
  },
  {
    "label": "FMaterialExpressionKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialExpressionKey(UMaterialExpression* InExpression, int32 InOutputIndex, const FGuid& InMaterialAttributeID, bool bInCompilingPreviousFrameKey) : Expression(InExpression), OutputIndex(InOutputIndex), MaterialAttributeID(InMaterialAttributeID), bCompilingPreviousFrameKey(bInCompilingPreviousFrameKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMaterialExpressionKey& X, const FMaterialExpressionKey& Y)"
  },
  {
    "label": "FMaterialFunctionCompileState()",
    "kind": "Method",
    "detail": "Function (} } ; class FMaterialFunctionCompileState { public :)",
    "insertText": "FMaterialFunctionCompileState(UMaterialExpressionMaterialFunctionCall* InFunctionCall) : FunctionCall(InFunctionCall)"
  },
  {
    "label": "FMaterialFunctionCompileState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialFunctionCompileState()"
  },
  {
    "label": "ClearSharedFunctionStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSharedFunctionStates()"
  },
  {
    "label": "FindOrAddSharedFunctionState()",
    "kind": "Method",
    "detail": "Function (} FMaterialFunctionCompileState*)",
    "insertText": "FindOrAddSharedFunctionState(FMaterialExpressionKey& ExpressionKey, class UMaterialExpressionMaterialFunctionCall* SharedFunctionCall)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FMaterialFunctionCompileState* SavedState = SavedStateIt .)",
    "insertText": "Value()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (delete SavedState ; } SharedFunctionStates .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsAllowedExpressionType()",
    "kind": "Method",
    "detail": "Function (} class UMaterialExpressionMaterialFunctionCall* FunctionCall ; TArray<FMaterialExpressionKey> ExpressionStack ; TMap<FMaterialExpressionKey,int32> ExpressionCodeMap ; TMap<UMaterialExpression*,int32> ExecExpressionCodeMap ; private : TMap<FMaterialExpressionKey,FMaterialFunctionCompileState*> SharedFunctionStates ; } ; bool)",
    "insertText": "IsAllowedExpressionType(const UClass* const Class, const bool bMaterialFunction)"
  },
  {
    "label": "ConvertToMultilineToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToMultilineToolTip(const FString& InToolTip, const int32 TargetLineLength, TArray<FString>& OutToolTip)"
  },
  {
    "label": "GetMaterialValueTypeDescriptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialValueTypeDescriptions(const uint32 MaterialValueType, TArray<FText>& OutDescriptions)"
  },
  {
    "label": "CanConnectMaterialValueTypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConnectMaterialValueTypes(const uint32 InputType, const uint32 OutputType)"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "DeferredDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredDelete(FMaterial* Material)"
  },
  {
    "label": "DeleteMaterialsOnRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMaterialsOnRenderThread(TArray<TRefCountPtr<FMaterial>>& MaterialsRenderThread)"
  },
  {
    "label": "DeferredDeleteArray()",
    "kind": "Method",
    "detail": "Function (template<TMaterial> void)",
    "insertText": "DeferredDeleteArray(TArray<TRefCountPtr<TMaterial>>& Materials)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FMaterial>> MaterialsRenderThread ;)",
    "insertText": "for(TRefCountPtr<TMaterial>& Material : Materials)"
  },
  {
    "label": "GetReference()",
    "kind": "Method",
    "detail": "Function (FMaterial* MaterialToDestroy = Material .)",
    "insertText": "GetReference()"
  },
  {
    "label": "PrepareDestroy_GameThread()",
    "kind": "Method",
    "detail": "Function (MaterialToDestroy ->)",
    "insertText": "PrepareDestroy_GameThread()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (MaterialsRenderThread .)",
    "insertText": "Emplace(MoveTemp(Material))"
  },
  {
    "label": "DeleteMaterialsOnRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMaterialsOnRenderThread(MaterialsRenderThread)"
  },
  {
    "label": "DeferredDeleteArray()",
    "kind": "Method",
    "detail": "Function (} } template<TMaterial> void)",
    "insertText": "DeferredDeleteArray(TArray<TMaterial*>& Materials)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FMaterial>> MaterialsRenderThread ;)",
    "insertText": "for(FMaterial* Material : Materials)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (MaterialsRenderThread .)",
    "insertText": "Emplace(Material)"
  },
  {
    "label": "FMaterial()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FMaterial(): RenderingThreadShaderMap(NULL), QualityLevel(EMaterialQualityLevel::Num), FeatureLevel(ERHIFeatureLevel::Num), bContainsInlineShaders(false), bLoadedCookedShaderMapId(false), bGameThreadShaderMapIsComplete(false), bRenderingThreadShaderMapIsComplete(false), bAllowPixelDepthOffset(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TConsoleVariableData<int32>* CVarStencilDitheredLOD ;)",
    "insertText": "if(CVarStencilDitheredLOD == nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CVarStencilDitheredLOD =)",
    "insertText": "Get().FindTConsoleVariableDataInt(TEXT(\"r.StencilForLODDither\"))"
  },
  {
    "label": "bStencilDitheredLOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bStencilDitheredLOD(CVarStencilDitheredLOD->GetValueOnAnyThread() != 0)"
  },
  {
    "label": "FMaterial()",
    "kind": "Method",
    "detail": "Function (# if UE_CHECK_FMATERIAL_LIFETIME bOwnerBeginDestroyed = false ; # endif } ~)",
    "insertText": "FMaterial()"
  },
  {
    "label": "PrepareDestroy_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDestroy_RenderThread()"
  },
  {
    "label": "CacheShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheShaders(EShaderPlatform Platform, EMaterialShaderPrecompileMode PrecompileMode = EMaterialShaderPrecompileMode::Default, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "CacheShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheShaders(const FMaterialShaderMapId& ShaderMapId, EShaderPlatform Platform, EMaterialShaderPrecompileMode PrecompileMode = EMaterialShaderPrecompileMode::Default, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "BeginCacheShaders()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BeginCacheShaders(EShaderPlatform Platform, EMaterialShaderPrecompileMode PrecompileMode = EMaterialShaderPrecompileMode::Default, const ITargetPlatform* TargetPlatform = nullptr, TUniqueFunction<void(bool bSuccess)>&& CompletionCallback = nullptr)"
  },
  {
    "label": "BeginCacheShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCacheShaders(const FMaterialShaderMapId& ShaderMapId, EShaderPlatform Platform, EMaterialShaderPrecompileMode PrecompileMode = EMaterialShaderPrecompileMode::Default, const ITargetPlatform* TargetPlatform = nullptr, TUniqueFunction<void(bool bSuccess)>&& CompletionCallback = nullptr)"
  },
  {
    "label": "IsCachingShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachingShaders()"
  },
  {
    "label": "FinishCacheShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishCacheShaders()"
  },
  {
    "label": "CacheGivenTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheGivenTypes(EShaderPlatform ShaderPlatform, const TArray<const FVertexFactoryType*>& VFTypes, const TArray<const FShaderPipelineType*>& PipelineTypes, const TArray<const FShaderType*>& ShaderTypes)"
  },
  {
    "label": "CollectPSOs()",
    "kind": "Method",
    "detail": "Function (# endif FGraphEventArray)",
    "insertText": "CollectPSOs(ERHIFeatureLevel::Type InFeatureLevel, const FPSOPrecacheVertexFactoryDataList& VertexFactoryDataList, const FPSOPrecacheParams& PreCacheParams, EPSOPrecachePriority Priority, TArray<FMaterialPSOPrecacheRequestID>& OutMaterialPSORequestIDs)"
  },
  {
    "label": "GetMaterialPSOPrecacheRequestIDs()",
    "kind": "Method",
    "detail": "Function (TArray<FMaterialPSOPrecacheRequestID>)",
    "insertText": "GetMaterialPSOPrecacheRequestIDs()"
  },
  {
    "label": "ClearPrecachedPSORequestIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPrecachedPSORequestIDs()"
  },
  {
    "label": "ShouldCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCache(EShaderPlatform Platform, const FShaderType* ShaderType, const FVertexFactoryType* VertexFactoryType)"
  },
  {
    "label": "ShouldCachePipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCachePipeline(EShaderPlatform Platform, const FShaderPipelineType* PipelineType, const FVertexFactoryType* VertexFactoryType)"
  },
  {
    "label": "LegacySerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacySerialize(FArchive& Ar)"
  },
  {
    "label": "SerializeInlineShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeInlineShaderMap(FArchive& Ar, const FName& SerializingAsset = NAME_None)"
  },
  {
    "label": "RegisterInlineShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInlineShaderMap(bool bLoadingCooked)"
  },
  {
    "label": "ReleaseShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseShaderMap()"
  },
  {
    "label": "DiscardShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardShaderMap()"
  },
  {
    "label": "GetShaderMapId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderMapId(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, FMaterialShaderMapId& OutId)"
  },
  {
    "label": "GetStaticParameterSet()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "GetStaticParameterSet(EShaderPlatform Platform, FStaticParameterSet& OutSet)"
  },
  {
    "label": "GetMaterialDomain()",
    "kind": "Method",
    "detail": "Function (# endif EMaterialDomain)",
    "insertText": "GetMaterialDomain()"
  },
  {
    "label": "IsTwoSided()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTwoSided()"
  },
  {
    "label": "IsThinSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThinSurface()"
  },
  {
    "label": "IsDitheredLODTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDitheredLODTransition()"
  },
  {
    "label": "IsTranslucencyWritingCustomDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyWritingCustomDepth()"
  },
  {
    "label": "IsUsedWithEditorCompositing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithEditorCompositing()"
  },
  {
    "label": "IsUIMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUIMaterial()"
  },
  {
    "label": "IsVolumetricPrimitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVolumetricPrimitive()"
  },
  {
    "label": "IsWireframe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWireframe()"
  },
  {
    "label": "IsPostProcessMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostProcessMaterial()"
  },
  {
    "label": "IsUsedWithSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithSkeletalMesh()"
  },
  {
    "label": "IsDitherMasked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDitherMasked()"
  },
  {
    "label": "GetRefractionMode()",
    "kind": "Method",
    "detail": "Function (enum ERefractionMode)",
    "insertText": "GetRefractionMode()"
  },
  {
    "label": "GetRootNodeOverridesDefaultRefraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRootNodeOverridesDefaultRefraction()"
  },
  {
    "label": "GetShadingModels()",
    "kind": "Method",
    "detail": "Function (FMaterialShadingModelField)",
    "insertText": "GetShadingModels()"
  },
  {
    "label": "IsShadingModelFromMaterialExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShadingModelFromMaterialExpression()"
  },
  {
    "label": "GetTranslucencyLightingMode()",
    "kind": "Method",
    "detail": "Function (enum ETranslucencyLightingMode)",
    "insertText": "GetTranslucencyLightingMode()"
  },
  {
    "label": "GetCastDynamicShadowAsMasked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCastDynamicShadowAsMasked()"
  },
  {
    "label": "IsDistorted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDistorted()"
  },
  {
    "label": "IsDisplacementFadeEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDisplacementFadeEnabled()"
  },
  {
    "label": "IsTranslucencyAfterDOFEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTranslucencyAfterDOFEnabled()"
  },
  {
    "label": "GetAssetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetName()"
  },
  {
    "label": "GetUniqueAssetName()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR FString)",
    "insertText": "GetUniqueAssetName(EShaderPlatform Platform, const FMaterialShaderMapId& ShaderMapId)"
  },
  {
    "label": "HasVertexPositionOffsetConnected()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "HasVertexPositionOffsetConnected()"
  },
  {
    "label": "GetMaterialInterface()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialInterface()"
  },
  {
    "label": "IsPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreview()"
  },
  {
    "label": "IsRequiredComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRequiredComplete()"
  },
  {
    "label": "NotifyCompilationFinished()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "NotifyCompilationFinished()"
  },
  {
    "label": "CancelCompilation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CancelCompilation()"
  },
  {
    "label": "FinishCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCompilation()"
  },
  {
    "label": "FinishCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCompilation(const TCHAR* MaterialName, const TArray<FMaterial*>& MaterialsToCompile)"
  },
  {
    "label": "IsCompilationFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompilationFinished()"
  },
  {
    "label": "GetCachedHLSLTree()",
    "kind": "Method",
    "detail": "Function (const FMaterialCachedHLSLTree*)",
    "insertText": "GetCachedHLSLTree()"
  },
  {
    "label": "IsUsingControlFlow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingControlFlow()"
  },
  {
    "label": "IsUsingNewHLSLGenerator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingNewHLSLGenerator()"
  },
  {
    "label": "GetSubstrateCompilationConfig()",
    "kind": "Method",
    "detail": "Function (const FSubstrateCompilationConfig&)",
    "insertText": "GetSubstrateCompilationConfig()"
  },
  {
    "label": "SetSubstrateCompilationConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubstrateCompilationConfig(FSubstrateCompilationConfig& SubstrateCompilationConfig)"
  },
  {
    "label": "HasValidGameThreadShaderMap()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HasValidGameThreadShaderMap()"
  },
  {
    "label": "ShouldCastDynamicShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCastDynamicShadows()"
  },
  {
    "label": "GetBlendMode()",
    "kind": "Method",
    "detail": "Function (const EBlendMode BlendMode =)",
    "insertText": "GetBlendMode()"
  },
  {
    "label": "GetQualityLevel()",
    "kind": "Method",
    "detail": "Function (} EMaterialQualityLevel::Type)",
    "insertText": "GetQualityLevel()"
  },
  {
    "label": "GetUniformTextureExpressions()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniformTextureExpressions(EMaterialTextureParameterType Type)"
  },
  {
    "label": "GetUniformNumericParameterExpressions()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FMaterialNumericParameterInfo>)",
    "insertText": "GetUniformNumericParameterExpressions()"
  },
  {
    "label": "GetUniform2DTextureExpressions()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniform2DTextureExpressions()"
  },
  {
    "label": "GetUniformCubeTextureExpressions()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniformCubeTextureExpressions()"
  },
  {
    "label": "GetUniform2DArrayTextureExpressions()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniform2DArrayTextureExpressions()"
  },
  {
    "label": "GetUniformVolumeTextureExpressions()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniformVolumeTextureExpressions()"
  },
  {
    "label": "GetUniformVirtualTextureExpressions()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniformVirtualTextureExpressions()"
  },
  {
    "label": "GetUniformSparseVolumeTextureExpressions()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMaterialTextureParameterInfo>)",
    "insertText": "GetUniformSparseVolumeTextureExpressions()"
  },
  {
    "label": "GetCompileErrors()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR const TArray<FString>&)",
    "insertText": "GetCompileErrors()"
  },
  {
    "label": "GetErrorExpressions()",
    "kind": "Method",
    "detail": "Function (CompileErrors = InCompileErrors ; } const TArray<UMaterialExpression*>&)",
    "insertText": "GetErrorExpressions()"
  },
  {
    "label": "GetLegacyId()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetLegacyId()"
  },
  {
    "label": "RequiresSceneColorCopy_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresSceneColorCopy_RenderThread()"
  },
  {
    "label": "UsesGlobalDistanceField_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesGlobalDistanceField_GameThread()"
  },
  {
    "label": "MaterialUsesWorldPositionOffset_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesWorldPositionOffset_RenderThread()"
  },
  {
    "label": "MaterialUsesWorldPositionOffset_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesWorldPositionOffset_GameThread()"
  },
  {
    "label": "MaterialUsesDisplacement_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesDisplacement_RenderThread()"
  },
  {
    "label": "MaterialUsesDisplacement_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesDisplacement_GameThread()"
  },
  {
    "label": "MaterialUsesPixelDepthOffset_RenderThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MaterialUsesPixelDepthOffset_RenderThread()"
  },
  {
    "label": "MaterialUsesPixelDepthOffset_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesPixelDepthOffset_GameThread()"
  },
  {
    "label": "MaterialModifiesMeshPosition_RenderThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MaterialModifiesMeshPosition_RenderThread()"
  },
  {
    "label": "MaterialModifiesMeshPosition_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialModifiesMeshPosition_GameThread()"
  },
  {
    "label": "MaterialUsesDistanceCullFade_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesDistanceCullFade_GameThread()"
  },
  {
    "label": "MaterialUsesSceneDepthLookup_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesSceneDepthLookup_RenderThread()"
  },
  {
    "label": "MaterialUsesSceneDepthLookup_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesSceneDepthLookup_GameThread()"
  },
  {
    "label": "GetCustomDepthStencilUsageMask_GameThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCustomDepthStencilUsageMask_GameThread()"
  },
  {
    "label": "MaterialMayModifyMeshPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialMayModifyMeshPosition()"
  },
  {
    "label": "GetRuntimeVirtualTextureOutputAttibuteMask_GameThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetRuntimeVirtualTextureOutputAttibuteMask_GameThread()"
  },
  {
    "label": "GetRuntimeVirtualTextureOutputAttibuteMask_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetRuntimeVirtualTextureOutputAttibuteMask_RenderThread()"
  },
  {
    "label": "MaterialUsesAnisotropy_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesAnisotropy_GameThread()"
  },
  {
    "label": "MaterialUsesAnisotropy_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialUsesAnisotropy_RenderThread()"
  },
  {
    "label": "MaterialIsLightFunctionAtlasCompatible_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialIsLightFunctionAtlasCompatible_GameThread()"
  },
  {
    "label": "MaterialIsLightFunctionAtlasCompatible_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialIsLightFunctionAtlasCompatible_RenderThread()"
  },
  {
    "label": "MaterialGetSubstrateMaterialType_GameThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MaterialGetSubstrateMaterialType_GameThread()"
  },
  {
    "label": "MaterialGetSubstrateMaterialType_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MaterialGetSubstrateMaterialType_RenderThread()"
  },
  {
    "label": "MaterialGetSubstrateClosureCount_GameThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MaterialGetSubstrateClosureCount_GameThread()"
  },
  {
    "label": "MaterialGetSubstrateClosureCount_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MaterialGetSubstrateClosureCount_RenderThread()"
  },
  {
    "label": "MaterialGetSubstrateUintPerPixel_GameThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MaterialGetSubstrateUintPerPixel_GameThread()"
  },
  {
    "label": "MaterialGetSubstrateUintPerPixel_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "MaterialGetSubstrateUintPerPixel_RenderThread()"
  },
  {
    "label": "MaterialGetSubstrateUsesComplexSpecialRenderPath_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialGetSubstrateUsesComplexSpecialRenderPath_GameThread()"
  },
  {
    "label": "MaterialGetSubstrateUsesComplexSpecialRenderPath_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialGetSubstrateUsesComplexSpecialRenderPath_RenderThread()"
  },
  {
    "label": "GetGameThreadShaderMap()",
    "kind": "Method",
    "detail": "Function (class FMaterialShaderMap*)",
    "insertText": "GetGameThreadShaderMap()"
  },
  {
    "label": "SetInlineShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInlineShaderMap(FMaterialShaderMap* InMaterialShaderMap)"
  },
  {
    "label": "UpdateInlineShaderMapIsComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInlineShaderMapIsComplete()"
  },
  {
    "label": "GetRenderingThreadShaderMap()",
    "kind": "Method",
    "detail": "Function (class FMaterialShaderMap*)",
    "insertText": "GetRenderingThreadShaderMap()"
  },
  {
    "label": "IsGameThreadShaderMapComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameThreadShaderMapComplete()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencedTextures()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TObjectPtr<UObject>>)",
    "insertText": "GetReferencedTextures()"
  },
  {
    "label": "GetReferencedTextureCollections()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<TObjectPtr<UTextureCollection>>)",
    "insertText": "GetReferencedTextureCollections()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader(FVertexFactoryType* VertexFactoryType, const typename ShaderType::FPermutationDomain& PermutationVector, bool bFatalIfMissing = true)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} template<ShaderType> TShaderRef<ShaderType>)",
    "insertText": "GetShader(FVertexFactoryType* VertexFactoryType, int32 PermutationId = 0, bool bFatalIfMissing = true)"
  },
  {
    "label": "GetShaderPipeline()",
    "kind": "Method",
    "detail": "Function (} FShaderPipelineRef)",
    "insertText": "GetShaderPipeline(class FShaderPipelineType* ShaderPipelineType, FVertexFactoryType* VertexFactoryType, bool bFatalIfNotFound = true)"
  },
  {
    "label": "TryGetShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetShaders(const FMaterialShaderTypes& InTypes, const FVertexFactoryType* InVertexFactoryType, FMaterialShaders& OutShaders)"
  },
  {
    "label": "HasShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasShaders(const FMaterialShaderTypes& InTypes, const FVertexFactoryType* InVertexFactoryType)"
  },
  {
    "label": "ShouldCacheShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCacheShaders(const EShaderPlatform ShaderPlatform, const FMaterialShaderTypes& InTypes, const FVertexFactoryType* InVertexFactoryType)"
  },
  {
    "label": "SubmitCompileJobs_GameThread()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SubmitCompileJobs_GameThread(EShaderCompileJobPriority Priority)"
  },
  {
    "label": "SubmitCompileJobs_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitCompileJobs_RenderThread(EShaderCompileJobPriority Priority)"
  },
  {
    "label": "GetMaterialUsageDescription()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetMaterialUsageDescription()"
  },
  {
    "label": "GetAllowDevelopmentShaderCompile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowDevelopmentShaderCompile()"
  },
  {
    "label": "GetPreshaderStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreshaderStats(uint32& TotalParameters, uint32& TotalOps)"
  },
  {
    "label": "WritesEveryPixel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritesEveryPixel(bool bShadowPass = false)"
  },
  {
    "label": "WritesEveryPixel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritesEveryPixel(bool bShadowPass, bool bVFTypeSupportsNullPixelShader)"
  },
  {
    "label": "SetupExtraCompilationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupExtraCompilationSettings(const EShaderPlatform Platform, FExtraShaderCompilerSettings& Settings)"
  },
  {
    "label": "SaveShaderStableKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveShaderStableKeys(EShaderPlatform TargetShaderPlatform, struct FStableShaderKeyAndValue& SaveKeyVal)"
  },
  {
    "label": "GetShaderTypes()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetShaderTypes(EShaderPlatform Platform, const FPlatformTypeLayoutParameters& LayoutParams, TArray<FDebugShaderTypeInfo>& OutShaderInfo)"
  },
  {
    "label": "GetShaderTypesForLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderTypesForLayout(EShaderPlatform Platform, const FShaderMapLayout& Layout, FVertexFactoryType* VertexFactory, TArray<FDebugShaderTypeInfo>& OutShaderInfo)"
  },
  {
    "label": "AddEditorLoadedMaterialResource()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "AddEditorLoadedMaterialResource(FMaterial* Material)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EditorLoadedMaterialResources .)",
    "insertText": "Add(Material)"
  },
  {
    "label": "UpdateEditorLoadedMaterialResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateEditorLoadedMaterialResources(EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAssetPath()"
  },
  {
    "label": "BeginAllowCachingStaticParameterValues()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR void)",
    "insertText": "BeginAllowCachingStaticParameterValues()"
  },
  {
    "label": "EndAllowCachingStaticParameterValues()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EndAllowCachingStaticParameterValues()"
  },
  {
    "label": "SetOwnerBeginDestroyed()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if UE_CHECK_FMATERIAL_LIFETIME void)",
    "insertText": "SetOwnerBeginDestroyed()"
  },
  {
    "label": "IsOwnerBeginDestroyed()",
    "kind": "Method",
    "detail": "Function (bOwnerBeginDestroyed = true ; } bool)",
    "insertText": "IsOwnerBeginDestroyed()"
  },
  {
    "label": "GatherExpressionsForCustomInterpolators()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherExpressionsForCustomInterpolators(TArray<class UMaterialExpression*>& OutExpressions)"
  },
  {
    "label": "GetODSCMetaData()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_ODSC uint8)",
    "insertText": "GetODSCMetaData()"
  },
  {
    "label": "SetODSCMetaData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetODSCMetaData(uint8 InODSCMetaData)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (ODSCMetaData .)",
    "insertText": "store(InODSCMetaData, std::memory_order_relaxed)"
  },
  {
    "label": "GetShaderMapToUse()",
    "kind": "Method",
    "detail": "Function (} ; # endif protected : const FMaterialShaderMap*)",
    "insertText": "GetShaderMapToUse()"
  },
  {
    "label": "AddShaderMapIDsWithUnfinishedCompilation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "AddShaderMapIDsWithUnfinishedCompilation(TArray<int32>& ShaderMapIds)"
  },
  {
    "label": "GetGameThreadCompilingShaderMapId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetGameThreadCompilingShaderMapId()"
  },
  {
    "label": "CompileCustomAttribute()",
    "kind": "Method",
    "detail": "Function (# if HANDLE_CUSTOM_OUTPUTS_AS_MATERIAL_ATTRIBUTES int32)",
    "insertText": "CompileCustomAttribute(const FGuid& AttributeID, class FMaterialCompiler* Compiler)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "SetQualityLevelProperties()",
    "kind": "Method",
    "detail": "Function (QualityLevel = InQualityLevel ; FeatureLevel = InFeatureLevel ; } void)",
    "insertText": "SetQualityLevelProperties(ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type InQualityLevel = EMaterialQualityLevel::Num)"
  },
  {
    "label": "GetShaderMapUsage()",
    "kind": "Method",
    "detail": "Function (QualityLevel = InQualityLevel ; FeatureLevel = InFeatureLevel ; } EMaterialShaderMapUsage::Type)",
    "insertText": "GetShaderMapUsage()"
  },
  {
    "label": "GetDependentShaderAndVFTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependentShaderAndVFTypes(EShaderPlatform Platform, const FPlatformTypeLayoutParameters& LayoutParams, TArray<FShaderType*>& OutShaderTypes, TArray<const FShaderPipelineType*>& OutShaderPipelineTypes, TArray<FVertexFactoryType*>& OutVFTypes)"
  },
  {
    "label": "GetLoadedCookedShaderMapId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLoadedCookedShaderMapId()"
  },
  {
    "label": "GetMaterialGraphNodePreviewExpression()",
    "kind": "Method",
    "detail": "Function (UMaterialExpression*)",
    "insertText": "GetMaterialGraphNodePreviewExpression()"
  },
  {
    "label": "AllowPixelDepthOffset()",
    "kind": "Method",
    "detail": "Function (bAllowPixelDepthOffset = bEnable ; } bool)",
    "insertText": "AllowPixelDepthOffset()"
  },
  {
    "label": "ReleaseRenderThreadCompilingShaderMap()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ReleaseRenderThreadCompilingShaderMap()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TSet<FMaterial*> EditorLoadedMaterialResources ; TArray<FString> CompileErrors ; TArray<TObjectPtr<UMaterialExpression>> ErrorExpressions ; TSharedPtr<FMaterialShaderMap::FAsyncLoadContext> CacheShadersPending ; TUniqueFunction<)",
    "insertText": "bool()"
  },
  {
    "label": "BeginCompileShaderMap()",
    "kind": "Method",
    "detail": "Function (uint32 GameThreadCompilingShaderMapId = 0 ; uint32 RenderingThreadCompilingShaderMapId = 0 ; TRefCountPtr<FSharedShaderCompilerEnvironment> GameThreadPendingCompilerEnvironment ; TRefCountPtr<FSharedShaderCompilerEnvironment> RenderingThreadPendingCompilerEnvironment ; FString DebugGroupName ; # endif std::atomic<int8> RenderingThreadShaderMapSubmittedPriority { - 1 } ; EShaderCompileJobPriority GameThreadShaderMapSubmittedPriority = EShaderCompileJobPriority::None ; TRefCountPtr<FMaterialShaderMap> GameThreadShaderMap ; TRefCountPtr<FMaterialShaderMap> RenderingThreadShaderMap ; # if WITH_EDITOR FGuid Id_DEPRECATED ; # endif EMaterialQualityLevel::Type QualityLevel ; # if WITH_ODSC std::atomic<uint8> ODSCMetaData = { } ; # endif ERHIFeatureLevel::Type FeatureLevel ; uint32 bStencilDitheredLOD : 1 ; uint32 bContainsInlineShaders : 1 ; uint32 bLoadedCookedShaderMapId : 1 ; uint32 bGameThreadShaderMapIsComplete : 1 ; uint32 bRenderingThreadShaderMapIsComplete : 1 ; uint32 bAllowPixelDepthOffset : 1 ; # if UE_CHECK_FMATERIAL_LIFETIME uint32 bOwnerBeginDestroyed : 1 ; # endif TArray<FMaterialPSOPrecacheRequestID> PrecachedPSORequestIDs ; FCriticalSection PrecachedPSORequestIDsCS ; # if WITH_EDITOR bool)",
    "insertText": "BeginCompileShaderMap(const FMaterialShaderMapId& ShaderMapId, const FStaticParameterSet &StaticParameterSet, EShaderPlatform Platform, EMaterialShaderPrecompileMode PrecompileMode, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "Translate_Legacy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Translate_Legacy(const FMaterialShaderMapId& InShaderMapId, const FStaticParameterSet& InStaticParameters, EShaderPlatform InPlatform, const ITargetPlatform* InTargetPlatform, FMaterialCompilationOutput& OutCompilationOutput, TRefCountPtr<FSharedShaderCompilerEnvironment>& OutMaterialEnvironment)"
  },
  {
    "label": "Translate_New()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Translate_New(const FMaterialShaderMapId& InShaderMapId, const FStaticParameterSet& InStaticParameters, EShaderPlatform InPlatform, const ITargetPlatform* InTargetPlatform, FMaterialCompilationOutput& OutCompilationOutput, TRefCountPtr<FSharedShaderCompilerEnvironment>& OutMaterialEnvironment)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Translate(const FMaterialShaderMapId& InShaderMapId, const FStaticParameterSet& InStaticParameters, EShaderPlatform InPlatform, const ITargetPlatform* InTargetPlatform, FMaterialCompilationOutput& OutCompilationOutput, TRefCountPtr<FSharedShaderCompilerEnvironment>& OutMaterialEnvironment)"
  },
  {
    "label": "SetupMaterialEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMaterialEnvironment(EShaderPlatform Platform, const FShaderParametersMetadata& InUniformBufferStruct, const FUniformExpressionSet& InUniformExpressionSet, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetOutputPrecision()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetOutputPrecision(EMaterialFloatPrecisionMode FloatPrecisionMode, bool& bFullPrecisionInPS, bool& bFullPrecisionInMaterial)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (TShaderRef<FShader>)",
    "insertText": "GetShader(class FMeshMaterialShaderType* ShaderType, FVertexFactoryType* VertexFactoryType, int32 PermutationId, bool bFatalIfMissing = true)"
  },
  {
    "label": "GetReferencedTexturesHash()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetReferencedTexturesHash(EShaderPlatform Platform, FSHAHash& OutHash)"
  },
  {
    "label": "GetExpressionIncludesHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExpressionIncludesHash(EShaderPlatform Platform, FSHAHash& OutHash)"
  },
  {
    "label": "FMaterialResource()",
    "kind": "Method",
    "detail": "Function (# endif class FMaterialShaderMap ; class FShaderCompilingManager ; class FHLSLMaterialTranslator ; class FMaterialHLSLErrorHandler ; class UE::Cook::FODSCClientData ; } ; class FMaterialResource : public FMaterial { public :)",
    "insertText": "FMaterialResource()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(UMaterial* InMaterial, UMaterialInstance* InInstance, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type InQualityLevel = EMaterialQualityLevel::Num)"
  },
  {
    "label": "SetQualityLevelProperties()",
    "kind": "Method",
    "detail": "Function (Material = InMaterial ; MaterialInstance = InInstance ;)",
    "insertText": "SetQualityLevelProperties(InFeatureLevel, InQualityLevel)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(InMaterial, InInstance, InFeatureLevel, InQualityLevel)"
  },
  {
    "label": "GetSamplerUsage()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR int32)",
    "insertText": "GetSamplerUsage()"
  },
  {
    "label": "GetUserInterpolatorUsage()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "GetUserInterpolatorUsage(uint32& NumUsedUVScalars, uint32& NumUsedCustomInterpolatorScalars)"
  },
  {
    "label": "IsTranslucencyWritingVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyWritingVelocity()"
  },
  {
    "label": "IsTranslucencyWritingFrontLayerTransparency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyWritingFrontLayerTransparency()"
  },
  {
    "label": "IsTangentSpaceNormal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentSpaceNormal()"
  },
  {
    "label": "ShouldGenerateSphericalParticleNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGenerateSphericalParticleNormals()"
  },
  {
    "label": "ShouldDisableDepthTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisableDepthTest()"
  },
  {
    "label": "ShouldWriteOnlyAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteOnlyAlpha()"
  },
  {
    "label": "ShouldEnableResponsiveAA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEnableResponsiveAA()"
  },
  {
    "label": "ShouldDoSSR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDoSSR()"
  },
  {
    "label": "ShouldDoContactShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDoContactShadows()"
  },
  {
    "label": "HasPixelAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPixelAnimation()"
  },
  {
    "label": "IsLightFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightFunction()"
  },
  {
    "label": "IsDeferredDecal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeferredDecal()"
  },
  {
    "label": "IsVariableRateShadingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVariableRateShadingAllowed()"
  },
  {
    "label": "GetShadingRate()",
    "kind": "Method",
    "detail": "Function (EMaterialShadingRate)",
    "insertText": "GetShadingRate()"
  },
  {
    "label": "IsSpecialEngineMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpecialEngineMaterial()"
  },
  {
    "label": "IsUsedWithLandscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithLandscape()"
  },
  {
    "label": "IsUsedWithParticleSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithParticleSystem()"
  },
  {
    "label": "IsUsedWithParticleSprites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithParticleSprites()"
  },
  {
    "label": "IsUsedWithBeamTrails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithBeamTrails()"
  },
  {
    "label": "IsUsedWithMeshParticles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithMeshParticles()"
  },
  {
    "label": "IsUsedWithNiagaraSprites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithNiagaraSprites()"
  },
  {
    "label": "IsUsedWithNiagaraRibbons()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithNiagaraRibbons()"
  },
  {
    "label": "IsUsedWithNiagaraMeshParticles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithNiagaraMeshParticles()"
  },
  {
    "label": "IsUsedWithStaticLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithStaticLighting()"
  },
  {
    "label": "IsUsedWithMorphTargets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithMorphTargets()"
  },
  {
    "label": "IsUsedWithSplineMeshes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithSplineMeshes()"
  },
  {
    "label": "IsUsedWithInstancedStaticMeshes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithInstancedStaticMeshes()"
  },
  {
    "label": "IsUsedWithGeometryCollections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithGeometryCollections()"
  },
  {
    "label": "IsUsedWithAPEXCloth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithAPEXCloth()"
  },
  {
    "label": "IsUsedWithGeometryCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithGeometryCache()"
  },
  {
    "label": "IsUsedWithWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithWater()"
  },
  {
    "label": "IsUsedWithHairStrands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithHairStrands()"
  },
  {
    "label": "IsUsedWithLidarPointCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithLidarPointCloud()"
  },
  {
    "label": "IsUsedWithVirtualHeightfieldMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithVirtualHeightfieldMesh()"
  },
  {
    "label": "IsUsedWithNeuralNetworks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithNeuralNetworks()"
  },
  {
    "label": "IsUsedWithNanite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithNanite()"
  },
  {
    "label": "IsUsedWithVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithVolumetricCloud()"
  },
  {
    "label": "IsUsedWithHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsedWithHeterogeneousVolumes()"
  },
  {
    "label": "IsFullyRough()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyRough()"
  },
  {
    "label": "GetForceCompatibleWithLightFunctionAtlas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceCompatibleWithLightFunctionAtlas()"
  },
  {
    "label": "UseNormalCurvatureToRoughness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseNormalCurvatureToRoughness()"
  },
  {
    "label": "GetMaterialFloatPrecisionMode()",
    "kind": "Method",
    "detail": "Function (enum EMaterialFloatPrecisionMode)",
    "insertText": "GetMaterialFloatPrecisionMode()"
  },
  {
    "label": "IsUsingAlphaToCoverage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingAlphaToCoverage()"
  },
  {
    "label": "IsUsingPreintegratedGFForSimpleIBL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingPreintegratedGFForSimpleIBL()"
  },
  {
    "label": "IsUsingHQForwardReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHQForwardReflections()"
  },
  {
    "label": "GetForwardBlendsSkyLightCubemaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForwardBlendsSkyLightCubemaps()"
  },
  {
    "label": "IsUsingPlanarForwardReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingPlanarForwardReflections()"
  },
  {
    "label": "IsNonmetal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonmetal()"
  },
  {
    "label": "UseLmDirectionality()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLmDirectionality()"
  },
  {
    "label": "IsMobileHighQualityBRDFEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileHighQualityBRDFEnabled()"
  },
  {
    "label": "GetMaterialDecalResponse()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaterialDecalResponse()"
  },
  {
    "label": "HasBaseColorConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBaseColorConnected()"
  },
  {
    "label": "HasNormalConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNormalConnected()"
  },
  {
    "label": "HasRoughnessConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRoughnessConnected()"
  },
  {
    "label": "HasSpecularConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSpecularConnected()"
  },
  {
    "label": "HasMetallicConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetallicConnected()"
  },
  {
    "label": "HasEmissiveColorConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEmissiveColorConnected()"
  },
  {
    "label": "HasAnisotropyConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnisotropyConnected()"
  },
  {
    "label": "HasAmbientOcclusionConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAmbientOcclusionConnected()"
  },
  {
    "label": "HasDisplacementConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDisplacementConnected()"
  },
  {
    "label": "IsSubstrateMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubstrateMaterial()"
  },
  {
    "label": "HasMaterialPropertyConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMaterialPropertyConnected(EMaterialProperty In)"
  },
  {
    "label": "GetOpacityMaskClipValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOpacityMaskClipValue()"
  },
  {
    "label": "GetRefractionCoverageMode()",
    "kind": "Method",
    "detail": "Function (ERefractionCoverageMode)",
    "insertText": "GetRefractionCoverageMode()"
  },
  {
    "label": "GetPixelDepthOffsetMode()",
    "kind": "Method",
    "detail": "Function (EPixelDepthOffsetMode)",
    "insertText": "GetPixelDepthOffsetMode()"
  },
  {
    "label": "GetTranslucencyDirectionalLightingIntensity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucencyDirectionalLightingIntensity()"
  },
  {
    "label": "GetTranslucentShadowDensityScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucentShadowDensityScale()"
  },
  {
    "label": "GetTranslucentSelfShadowDensityScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucentSelfShadowDensityScale()"
  },
  {
    "label": "GetTranslucentSelfShadowSecondDensityScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucentSelfShadowSecondDensityScale()"
  },
  {
    "label": "GetTranslucentSelfShadowSecondOpacity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucentSelfShadowSecondOpacity()"
  },
  {
    "label": "GetTranslucentBackscatteringExponent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucentBackscatteringExponent()"
  },
  {
    "label": "IsTranslucencyAfterMotionBlurEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTranslucencyAfterMotionBlurEnabled()"
  },
  {
    "label": "IsDualBlendingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDualBlendingEnabled(EShaderPlatform Platform)"
  },
  {
    "label": "IsMobileSeparateTranslucencyEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileSeparateTranslucencyEnabled()"
  },
  {
    "label": "GetDisplacementScaling()",
    "kind": "Method",
    "detail": "Function (FDisplacementScaling)",
    "insertText": "GetDisplacementScaling()"
  },
  {
    "label": "GetDisplacementFadeRange()",
    "kind": "Method",
    "detail": "Function (FDisplacementFadeRange)",
    "insertText": "GetDisplacementFadeRange()"
  },
  {
    "label": "GetTranslucentMultipleScatteringExtinction()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetTranslucentMultipleScatteringExtinction()"
  },
  {
    "label": "GetTranslucentShadowStartOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTranslucentShadowStartOffset()"
  },
  {
    "label": "IsMasked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMasked()"
  },
  {
    "label": "AllowNegativeEmissiveColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowNegativeEmissiveColor()"
  },
  {
    "label": "RequiresSynchronousCompilation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresSynchronousCompilation()"
  },
  {
    "label": "IsDefaultMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultMaterial()"
  },
  {
    "label": "GetNumCustomizedUVs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCustomizedUVs()"
  },
  {
    "label": "GetBlendableLocation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendableLocation()"
  },
  {
    "label": "GetBlendablePriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendablePriority()"
  },
  {
    "label": "GetBlendableOutputAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBlendableOutputAlpha()"
  },
  {
    "label": "GetDisablePreExposureScale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDisablePreExposureScale()"
  },
  {
    "label": "IsStencilTestEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStencilTestEnabled()"
  },
  {
    "label": "GetStencilRefValue()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStencilRefValue()"
  },
  {
    "label": "GetStencilCompare()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStencilCompare()"
  },
  {
    "label": "GetRefractionDepthBiasValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRefractionDepthBiasValue()"
  },
  {
    "label": "ShouldApplyFogging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyFogging()"
  },
  {
    "label": "ShouldApplyCloudFogging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyCloudFogging()"
  },
  {
    "label": "ShouldAlwaysEvaluateWorldPositionOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAlwaysEvaluateWorldPositionOffset()"
  },
  {
    "label": "IsSky()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSky()"
  },
  {
    "label": "ComputeFogPerPixel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeFogPerPixel()"
  },
  {
    "label": "HasPerInstanceCustomData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPerInstanceCustomData()"
  },
  {
    "label": "HasPerInstanceRandom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPerInstanceRandom()"
  },
  {
    "label": "HasVertexInterpolator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexInterpolator()"
  },
  {
    "label": "HasRuntimeVirtualTextureOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRuntimeVirtualTextureOutput()"
  },
  {
    "label": "HasFirstPersonOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFirstPersonOutput()"
  },
  {
    "label": "CastsRayTracedShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CastsRayTracedShadows()"
  },
  {
    "label": "IsTessellationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTessellationEnabled()"
  },
  {
    "label": "HasRenderTracePhysicalMaterialOutputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRenderTracePhysicalMaterialOutputs()"
  },
  {
    "label": "GetPreshaderGap()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetPreshaderGap()"
  },
  {
    "label": "GetNeuralProfileId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNeuralProfileId()"
  },
  {
    "label": "IsPersistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPersistent()"
  },
  {
    "label": "GetMaterialId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetMaterialId()"
  },
  {
    "label": "CheckInValidStateForCompilation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckInValidStateForCompilation(FMaterialCompiler* Compiler)"
  },
  {
    "label": "GetFullPath()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetFullPath()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (const UMaterial*)",
    "insertText": "GetMaterial()"
  },
  {
    "label": "SetMaterialInstance()",
    "kind": "Method",
    "detail": "Function (Material = InMaterial ; } void)",
    "insertText": "SetMaterialInstance(UMaterialInstance* InMaterialInstance)"
  },
  {
    "label": "CompilePropertyAndSetMaterialProperty()",
    "kind": "Method",
    "detail": "Function (MaterialInstance = InMaterialInstance ; } protected : TObjectPtr<UMaterial> Material ; TObjectPtr<UMaterialInstance> MaterialInstance ; int32)",
    "insertText": "CompilePropertyAndSetMaterialProperty(EMaterialProperty Property, class FMaterialCompiler* Compiler, EShaderFrequency OverrideShaderFrequency, bool bUsePreviousFrameTime)"
  },
  {
    "label": "CompileCustomAttribute()",
    "kind": "Method",
    "detail": "Function (# if HANDLE_CUSTOM_OUTPUTS_AS_MATERIAL_ATTRIBUTES int32)",
    "insertText": "CompileCustomAttribute(const FGuid& AttributeID, FMaterialCompiler* Compiler)"
  },
  {
    "label": "GatherCustomOutputExpressions()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA void)",
    "insertText": "GatherCustomOutputExpressions(TArray<class UMaterialExpressionCustomOutput*>& OutCustomOutputs)"
  },
  {
    "label": "HasPixelDepthOffsetConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPixelDepthOffsetConnected()"
  },
  {
    "label": "HasMaterialAttributesConnected()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "HasMaterialAttributesConnected()"
  },
  {
    "label": "GetBaseMaterialPathName()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetBaseMaterialPathName()"
  },
  {
    "label": "FMaterialUpdateContext()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialUpdateContext { TSet<UMaterial*> UpdatedMaterials ; TSet<UMaterialInterface*> UpdatedMaterialInterfaces ; TUniquePtr<class FGlobalComponentReregisterContext> ComponentReregisterContext ; TUniquePtr<class FGlobalComponentRecreateRenderStateContext> ComponentRecreateRenderStateContext ; EShaderPlatform ShaderPlatform ; bool bSyncWithRenderingThread ; public : struct EOptions { enum Type { ReregisterComponents = 0 x1,SyncWithRenderingThread = 0 x2,RecreateRenderStates = 0 x4,Default = RecreateRenderStates | SyncWithRenderingThread,} ; } ;)",
    "insertText": "FMaterialUpdateContext(uint32 Options = EOptions::Default, EShaderPlatform InShaderPlatform = GMaxRHIShaderPlatform)"
  },
  {
    "label": "FMaterialUpdateContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMaterialUpdateContext()"
  },
  {
    "label": "AddMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterial(UMaterial* Material)"
  },
  {
    "label": "AddMaterialInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterialInstance(UMaterialInstance* Instance)"
  },
  {
    "label": "AddMaterialInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterialInterface(UMaterialInterface* Instance)"
  },
  {
    "label": "GetUpdatedMaterials()",
    "kind": "Method",
    "detail": "Function (const TSet<UMaterialInterface*>&)",
    "insertText": "GetUpdatedMaterials()"
  },
  {
    "label": "DoMaterialAttributeReorder()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DoMaterialAttributeReorder(FExpressionInput* Input, const FPackageFileVersion&, int32 RenderObjVer, int32 UE5MainVer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif struct FMaterialResourceLocOnDisk { uint32 Offset ; uint8 FeatureLevel ; uint8 QualityLevel ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMaterialResourceLocOnDisk& Loc)"
  },
  {
    "label": "FMaterialResourceMemoryWriter()",
    "kind": "Method",
    "detail": "Function (Ar<<Loc . Offset ; Ar<<Loc . FeatureLevel ; Ar<<Loc . QualityLevel ; return Ar ; } class FMaterialResourceMemoryWriter final : public FMemoryWriter { public :)",
    "insertText": "FMaterialResourceMemoryWriter(FArchive& Ar)"
  },
  {
    "label": "FMaterialResourceMemoryWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMaterialResourceMemoryWriter()"
  },
  {
    "label": "FMaterialResourceMemoryWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialResourceMemoryWriter(const FMaterialResourceMemoryWriter&)"
  },
  {
    "label": "FMaterialResourceMemoryWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialResourceMemoryWriter(FMaterialResourceMemoryWriter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialResourceMemoryWriter&)",
    "insertText": "operator(const FMaterialResourceMemoryWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialResourceMemoryWriter&)",
    "insertText": "operator(FMaterialResourceMemoryWriter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(class FName& Name)"
  },
  {
    "label": "GetCustomVersions()",
    "kind": "Method",
    "detail": "Function (const FCustomVersionContainer&)",
    "insertText": "GetCustomVersions()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "BeginSerializingMaterialResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginSerializingMaterialResource()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Locs .)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64 ResourceOffset = this ->)",
    "insertText": "Tell()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (Locs .)",
    "insertText": "Last().Offset = IntCastChecked<uint32>(ResourceOffset)"
  },
  {
    "label": "EndSerializingMaterialResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndSerializingMaterialResource(const FMaterialResource& Resource)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (Locs .)",
    "insertText": "Last().FeatureLevel = uint8(Resource.GetFeatureLevel())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (Locs .)",
    "insertText": "Last().QualityLevel = uint8(Resource.GetQualityLevel())"
  },
  {
    "label": "SerializeToParentArchive()",
    "kind": "Method",
    "detail": "Function (} private : TArray<uint8> Bytes ; TArray<FMaterialResourceLocOnDisk> Locs ; TMap<FNameEntryId,int32> Name2Indices ; FArchive* ParentAr ; void)",
    "insertText": "SerializeToParentArchive()"
  },
  {
    "label": "FMaterialResourceWriteScope()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialResourceWriteScope final { public :)",
    "insertText": "FMaterialResourceWriteScope(FMaterialResourceMemoryWriter* InAr, const FMaterialResource& InResource) : Ar(InAr), Resource(InResource)"
  },
  {
    "label": "FMaterialResourceWriteScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialResourceWriteScope()"
  },
  {
    "label": "EndSerializingMaterialResource()",
    "kind": "Method",
    "detail": "Function (Ar ->)",
    "insertText": "EndSerializingMaterialResource(Resource)"
  },
  {
    "label": "FMaterialResourceProxyReader()",
    "kind": "Method",
    "detail": "Function (} private : FMaterialResourceMemoryWriter* Ar ; const FMaterialResource& Resource ; } ; class FMaterialResourceProxyReader final : private TUniquePtr<FArchive>,public FArchiveProxy { public :)",
    "insertText": "FMaterialResourceProxyReader(FArchive& Ar, ERHIFeatureLevel::Type FeatureLevel = ERHIFeatureLevel::Num, EMaterialQualityLevel::Type QualityLevel = EMaterialQualityLevel::Num)"
  },
  {
    "label": "FMaterialResourceProxyReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialResourceProxyReader(const TCHAR* Filename, uint32 NameMapOffset, ERHIFeatureLevel::Type FeatureLevel = ERHIFeatureLevel::Num, EMaterialQualityLevel::Type QualityLevel = EMaterialQualityLevel::Num)"
  },
  {
    "label": "FMaterialResourceProxyReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMaterialResourceProxyReader()"
  },
  {
    "label": "FMaterialResourceProxyReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialResourceProxyReader(const FMaterialResourceProxyReader&)"
  },
  {
    "label": "FMaterialResourceProxyReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialResourceProxyReader(FMaterialResourceProxyReader&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialResourceProxyReader&)",
    "insertText": "operator(const FMaterialResourceProxyReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialResourceProxyReader&)",
    "insertText": "operator(FMaterialResourceProxyReader&&)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (InnerArchive .)",
    "insertText": "Seek(OffsetToFirstResource + InPos)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FName> Names ; int64 OffsetToFirstResource ; int64 OffsetToEnd ; void)",
    "insertText": "Initialize(ERHIFeatureLevel::Type FeatureLevel, EMaterialQualityLevel::Type QualityLevel, bool bSeekToEnd = false)"
  },
  {
    "label": "GetRayTracingMaskFromMaterial()",
    "kind": "Method",
    "detail": "Function (} ; uint8)",
    "insertText": "GetRayTracingMaskFromMaterial(const EBlendMode BlendMode)"
  },
  {
    "label": "ShouldIncludeMaterialInDefaultOpaquePass()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR struct FMaterialResourceForCooking { TRefCountPtr<FMaterialResource> Resource ; EShaderPlatform Platform ; } ; # endif bool)",
    "insertText": "ShouldIncludeMaterialInDefaultOpaquePass(const FMaterial& Material)"
  },
  {
    "label": "AllowMaterialControlFlow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowMaterialControlFlow()"
  }
]