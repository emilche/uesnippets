[
  {
    "label": "TraceEventMemoryOverhead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventMemoryOverhead"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TracedValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TracedValue"
  },
  {
    "label": "Array",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Array"
  },
  {
    "label": "Dictionary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dictionary"
  },
  {
    "label": "ValueHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueHolder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ArrayItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayItem"
  },
  {
    "label": "DictionaryItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DictionaryItem"
  },
  {
    "label": "TracedValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACED_VALUE_H_ # define BASE_TRACE_EVENT_TRACED_VALUE_H_ # include<stddef . h> # include<memory> # include<sstream> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" # include \" base / trace_event / trace_arguments . h \" namespace base { class TraceEventMemoryOverhead ; class Value ; namespace trace_event { class BASE_EXPORT TracedValue : public ConvertableToTraceFormat { public :)",
    "insertText": "TracedValue(size_t capacity = 0)"
  },
  {
    "label": "TracedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TracedValue(const TracedValue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TracedValue&)",
    "insertText": "operator(const TracedValue&)"
  },
  {
    "label": "TracedValue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TracedValue()"
  },
  {
    "label": "EndDictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDictionary()"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndArray()"
  },
  {
    "label": "SetInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInteger(const char* name, int value)"
  },
  {
    "label": "SetDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDouble(const char* name, double value)"
  },
  {
    "label": "SetBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoolean(const char* name, bool value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(const char* name, base::StringPiece value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(const char* name, TracedValue* value)"
  },
  {
    "label": "SetPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPointer(const char* name, void* value)"
  },
  {
    "label": "BeginDictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDictionary(const char* name)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginArray(const char* name)"
  },
  {
    "label": "SetIntegerWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIntegerWithCopiedName(base::StringPiece name, int value)"
  },
  {
    "label": "SetDoubleWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoubleWithCopiedName(base::StringPiece name, double value)"
  },
  {
    "label": "SetBooleanWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBooleanWithCopiedName(base::StringPiece name, bool value)"
  },
  {
    "label": "SetStringWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringWithCopiedName(base::StringPiece name, base::StringPiece value)"
  },
  {
    "label": "SetValueWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueWithCopiedName(base::StringPiece name, TracedValue* value)"
  },
  {
    "label": "SetPointerWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPointerWithCopiedName(base::StringPiece name, void* value)"
  },
  {
    "label": "BeginDictionaryWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDictionaryWithCopiedName(base::StringPiece name)"
  },
  {
    "label": "BeginArrayWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginArrayWithCopiedName(base::StringPiece name)"
  },
  {
    "label": "AppendInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendInteger(int)"
  },
  {
    "label": "AppendDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDouble(double)"
  },
  {
    "label": "AppendBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBoolean(bool)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(base::StringPiece)"
  },
  {
    "label": "AppendPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPointer(void*)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginArray()"
  },
  {
    "label": "BeginDictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDictionary()"
  },
  {
    "label": "AppendAsTraceFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAsTraceFormat(std::string* out)"
  },
  {
    "label": "AppendToProto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendToProto(ProtoAppender* appender)"
  },
  {
    "label": "EstimateTraceMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateTraceMemoryOverhead(TraceEventMemoryOverhead* overhead)"
  },
  {
    "label": "ArrayScope()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ArrayScope { public :)",
    "insertText": "ArrayScope(const ArrayScope&)"
  },
  {
    "label": "ArrayScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayScope(ArrayScope&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArrayScope&)",
    "insertText": "operator(const ArrayScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ArrayScope&)",
    "insertText": "operator(ArrayScope&&)"
  },
  {
    "label": "ArrayScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ArrayScope()"
  },
  {
    "label": "ArrayScope()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ArrayScope(TracedValue* value)"
  },
  {
    "label": "AppendArrayScoped()",
    "kind": "Method",
    "detail": "Function (raw_ptr<TracedValue> value_ ; class TracedValue ; } ; [ [ nodiscard ] ] ArrayScope)",
    "insertText": "AppendArrayScoped()"
  },
  {
    "label": "BeginArrayScoped()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ArrayScope)",
    "insertText": "BeginArrayScoped(const char* name)"
  },
  {
    "label": "BeginArrayScopedWithCopiedName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ArrayScope)",
    "insertText": "BeginArrayScopedWithCopiedName(base::StringPiece name)"
  },
  {
    "label": "DictionaryScope()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT DictionaryScope { public :)",
    "insertText": "DictionaryScope(const DictionaryScope&)"
  },
  {
    "label": "DictionaryScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DictionaryScope(DictionaryScope&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DictionaryScope&)",
    "insertText": "operator(const DictionaryScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DictionaryScope&)",
    "insertText": "operator(DictionaryScope&&)"
  },
  {
    "label": "DictionaryScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DictionaryScope()"
  },
  {
    "label": "DictionaryScope()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "DictionaryScope(TracedValue* value)"
  },
  {
    "label": "AppendDictionaryScoped()",
    "kind": "Method",
    "detail": "Function (raw_ptr<TracedValue> value_ ; class TracedValue ; } ; [ [ nodiscard ] ] DictionaryScope)",
    "insertText": "AppendDictionaryScoped()"
  },
  {
    "label": "BeginDictionaryScoped()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] DictionaryScope)",
    "insertText": "BeginDictionaryScoped(const char* name)"
  },
  {
    "label": "BeginDictionaryScopedWithCopiedName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] DictionaryScope)",
    "insertText": "BeginDictionaryScopedWithCopiedName(base::StringPiece name)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Array ; class BASE_EXPORT Dictionary ; class BASE_EXPORT ValueHolder ; class BASE_EXPORT ArrayItem ; class BASE_EXPORT DictionaryItem ; std::unique_ptr<TracedValue>)",
    "insertText": "Build(const std::initializer_list<DictionaryItem> items)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (class Array { public :)",
    "insertText": "Array(const std::initializer_list<ArrayItem> items)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array(Array&&)"
  },
  {
    "label": "WriteToValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToValue(TracedValue* value)"
  },
  {
    "label": "Dictionary()",
    "kind": "Method",
    "detail": "Function (private : std::initializer_list<ArrayItem> items_ ; } ; class Dictionary { public :)",
    "insertText": "Dictionary(const std::initializer_list<DictionaryItem> items)"
  },
  {
    "label": "Dictionary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dictionary(Dictionary&&)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (private : std::initializer_list<DictionaryItem> items_ ; } ; class ValueHolder { public :)",
    "insertText": "ValueHolder(int value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(double value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(bool value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(void* value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(base::StringPiece value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(std::string value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(const char* value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(Array& value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(Dictionary& value)"
  },
  {
    "label": "ValueHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueHolder(ValueHolder&&)"
  },
  {
    "label": "WriteToValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToValue(const char* name, TracedValue* value)"
  },
  {
    "label": "KeptValue()",
    "kind": "Method",
    "detail": "Function (private : union KeptValue { int int_value ; double double_value ; bool bool_value ; base::StringPiece string_piece_value ; std::string std_string_value ; void* void_ptr_value ; Array array_value ; Dictionary dictionary_value ;)",
    "insertText": "KeptValue()"
  },
  {
    "label": "ArrayItem()",
    "kind": "Method",
    "detail": "Function (} } ; enum class KeptValueType { kIntType,kDoubleType,kBoolType,kStringPieceType,kStdStringType,kVoidPtrType,kArrayType,kDictionaryType,} ; KeptValue kept_value_ ; KeptValueType kept_value_type_ ; } ; class ArrayItem : public ValueHolder { public : template<T>)",
    "insertText": "ArrayItem(T value) : ValueHolder(value)"
  },
  {
    "label": "DictionaryItem()",
    "kind": "Method",
    "detail": "Function (} ; class DictionaryItem : public ValueHolder { public : template<T>)",
    "insertText": "DictionaryItem(const char* name, T value) : ValueHolder(value), name_(name)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (private : const char* name_ ; } ; class BASE_EXPORT Writer { public : ~)",
    "insertText": "Writer()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(const char* name, Writer* value)"
  },
  {
    "label": "SetValueWithCopiedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueWithCopiedName(base::StringPiece name, Writer* value)"
  },
  {
    "label": "IsPickleWriter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPickleWriter()"
  },
  {
    "label": "IsProtoWriter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProtoWriter()"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::unique_ptr<)",
    "insertText": "Writer(*WriterFactoryCallback)(size_t capacity)"
  },
  {
    "label": "SetWriterFactoryCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWriterFactoryCallback(WriterFactoryCallback callback)"
  },
  {
    "label": "TracedValue()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TracedValue(size_t capacity, bool forced_json)"
  },
  {
    "label": "ToBaseValue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::Value>)",
    "insertText": "ToBaseValue()"
  },
  {
    "label": "TracedValueJSON()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<Writer> writer_ ; # ifndef NDEBUG std::vector<bool> nesting_stack_ ; # endif } ; class BASE_EXPORT TracedValueJSON : public TracedValue { public :)",
    "insertText": "TracedValueJSON(size_t capacity = 0) : TracedValue(capacity, true)"
  },
  {
    "label": "ToJSON()",
    "kind": "Method",
    "detail": "Function (} using TracedValue::ToBaseValue ; std::string)",
    "insertText": "ToJSON()"
  },
  {
    "label": "ToFormattedJSON()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToFormattedJSON()"
  }
]