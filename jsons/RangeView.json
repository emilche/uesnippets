[
  {
    "label": "TRangeView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRangeView"
  },
  {
    "label": "TRangeView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Templates / References . h \" namespace uLang { template<TFirst,TLast> struct TRangeView { TFirst First ; TLast Last ;)",
    "insertText": "TRangeView() : First() , Last()"
  },
  {
    "label": "TRangeView()",
    "kind": "Method",
    "detail": "Function (} template<TRange>)",
    "insertText": "TRangeView(TRange&& Arg) : TRangeView(Arg.begin(), Arg.end())"
  },
  {
    "label": "TRangeView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRangeView(TFirst InFirst, TLast InLast) : First(InFirst) , Last(InLast)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TFirst)",
    "insertText": "begin()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<TArg>)",
    "insertText": "decltype(auto) operator[](TArg&& Arg)"
  },
  {
    "label": "TRangeView()",
    "kind": "Method",
    "detail": "Function (} } ; template<T>)",
    "insertText": "TRangeView(T&& Arg) -> TRangeView<decltype(Arg.begin()), decltype(Arg.end())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (template<TFirst,TLast> TFirst)",
    "insertText": "begin(TRangeView<TFirst, TLast> const& Range)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} template<TFirst,TLast> TLast)",
    "insertText": "end(TRangeView<TFirst, TLast> const& Range)"
  },
  {
    "label": "SingletonRangeView()",
    "kind": "Method",
    "detail": "Function (} template<T> TRangeView<T*,T*>)",
    "insertText": "SingletonRangeView(T& Arg)"
  }
]