[
  {
    "label": "FMarkStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarkStack"
  },
  {
    "label": "TagOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TagOf"
  },
  {
    "label": "TPtrVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPtrVariant"
  },
  {
    "label": "FTransactionLog",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionLog"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "FTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransaction"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (struct FMarkStack ; template<T,. . . Ts> struct TagOf ; template<T,. . . Ts> struct TagOf<T,T,Ts . . .> { uintptr_t Value = 0 ; } ; template<T,U,. . . Ts> struct TagOf<T,U,Ts . . .> { uintptr_t Value = 1 + TagOf<T,Ts . . .>::Value ; } ; template<. . . Ts> struct TPtrVariant {)",
    "insertText": "static_assert(((sizeof(Ts) == sizeof(uintptr_t)) && ...))"
  },
  {
    "label": "bit_ceil()",
    "kind": "Method",
    "detail": "Function (uintptr_t Mask =)",
    "insertText": "bit_ceil(sizeof...(Ts))"
  },
  {
    "label": "TPtrVariant()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "TPtrVariant(T InT)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t IncomingPtr = BitCast<)",
    "insertText": "uintptr_t(InT)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (uintptr_t TTag = TagOf<T,Ts . . .>::Value ;)",
    "insertText": "checkSlow(!(IncomingPtr & Mask))"
  },
  {
    "label": "Is()",
    "kind": "Method",
    "detail": "Function (Ptr = IncomingPtr | TTag ; } template<T> bool)",
    "insertText": "Is()"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "As()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TPtrVariant Other)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} using FAuxOrCell = TPtrVariant<VCell*,UObject*,TAux<void>> ; struct FTransactionLog { public : struct FEntry { uintptr_t)",
    "insertText": "Key()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} using FSlot = TPtrVariant<TWriteBarrier<VValue>*,TWriteBarrier<TAux<void>>*> ; FAuxOrCell Owner ; FSlot Slot ; uint64 OldValue ;)",
    "insertText": "static_assert(sizeof(OldValue) == sizeof(VValue))"
  },
  {
    "label": "FEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntry(FAuxOrCell Owner, TWriteBarrier<VValue>& InSlot, VValue OldValue) : Owner(Owner) , Slot(&InSlot) , OldValue(OldValue.GetEncodedBits())"
  },
  {
    "label": "FEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntry(FAuxOrCell Owner, TWriteBarrier<TAux<void>>& InSlot, TAux<void> OldValue) : Owner(Owner) , Slot(&InSlot) , OldValue(BitCast<uint64>(OldValue.GetPtr()))"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Abort(FAccessContext Context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TWriteBarrier<TAux<void>>* AuxSlot = Slot . As<TWriteBarrier<TAux<)",
    "insertText": "void()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (AuxSlot ->)",
    "insertText": "Set(Context, TAux<void>(BitCast<void*>(OldValue)))"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (} else { TWriteBarrier<VValue>* ValueSlot = Slot . As<TWriteBarrier<)",
    "insertText": "VValue()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (ValueSlot ->)",
    "insertText": "Set(Context, VValue::Decode(OldValue))"
  },
  {
    "label": "MarkReferencedCells()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MarkReferencedCells(FMarkStack&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; TSet<uintptr_t> IsInLog ; TSet<FAuxOrCell> Roots ; TArray<FEntry> Log ; public : void)",
    "insertText": "Add(FEntry Entry)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (bool AlreadyHasEntry ; IsInLog .)",
    "insertText": "FindOrAdd(Entry.Key(), &AlreadyHasEntry)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Log .)",
    "insertText": "Add(MoveTemp(Entry))"
  },
  {
    "label": "AddImpl()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "AddImpl(FAuxOrCell Owner, TWriteBarrier<T>& Slot)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (bool AlreadyHasEntry ; IsInLog .)",
    "insertText": "FindOrAdd(FEntry::FSlot(&Slot).RawPtr(), &AlreadyHasEntry)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Log .)",
    "insertText": "Add(FEntry{Owner, Slot, Slot.Get()})"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "Add(VCell* Owner, TWriteBarrier<T>& Slot)"
  },
  {
    "label": "AddImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpl(FAuxOrCell(Owner), Slot)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(UObject* Owner, TWriteBarrier<VValue>& Slot)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Add(TAux<T> Owner, TWriteBarrier<VValue>& Slot)"
  },
  {
    "label": "AddImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpl(FAuxOrCell(BitCast<TAux<void>>(Owner)), Slot)"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRoot(FAuxOrCell Root)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Roots .)",
    "insertText": "Add(Root)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Join(FTransactionLog& Child)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (Entry .)",
    "insertText": "Abort(Context)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} ; struct FTransaction { FTransactionLog Log ; FTransaction* Parent { nullptr } ; bool bHasStarted { false } ; bool bHasCommitted { false } ; bool bHasAborted { false } ; void)",
    "insertText": "Start(FRunningContext Context)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(bHasCommitted)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(bHasStarted)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(Parent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasStarted = true ;)",
    "insertText": "if(!bHasAborted)"
  },
  {
    "label": "StartTransaction()",
    "kind": "Method",
    "detail": "Function (AutoRTFM::)",
    "insertText": "StartTransaction()"
  },
  {
    "label": "CurrentTransaction()",
    "kind": "Method",
    "detail": "Function (Parent = Context .)",
    "insertText": "CurrentTransaction()"
  },
  {
    "label": "SetCurrentTransaction()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetCurrentTransaction(this)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Commit(FRunningContext Context)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(bHasStarted)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(bHasAborted)"
  },
  {
    "label": "CommitTransaction()",
    "kind": "Method",
    "detail": "Function (bHasCommitted = true ; AutoRTFM::)",
    "insertText": "CommitTransaction()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (Parent -> Log .)",
    "insertText": "Join(Log)"
  },
  {
    "label": "SetCurrentTransaction()",
    "kind": "Method",
    "detail": "Function (} Context .)",
    "insertText": "SetCurrentTransaction(Parent)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Abort(FRunningContext Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasAborted = true ;)",
    "insertText": "if(bHasStarted)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Context.CurrentTransaction() == this)"
  },
  {
    "label": "AbortTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortTransaction()"
  },
  {
    "label": "ClearTransactionStatus()",
    "kind": "Method",
    "detail": "Function (AutoRTFM::)",
    "insertText": "ClearTransactionStatus()"
  },
  {
    "label": "LogBeforeWrite()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "LogBeforeWrite(FAccessContext Context, VCell* Owner, TWriteBarrier<T>& Slot)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Log .)",
    "insertText": "Add(Owner, Slot)"
  },
  {
    "label": "LogBeforeWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogBeforeWrite(FAccessContext Context, UObject* Owner, TWriteBarrier<VValue>& Slot)"
  },
  {
    "label": "LogBeforeWrite()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "LogBeforeWrite(FAccessContext Context, TAux<T> Owner, TWriteBarrier<VValue>& Slot)"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRoot(FAccessContext Context, VCell* Root)"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (Log .)",
    "insertText": "AddRoot(FAuxOrCell(Root))"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRoot(FAccessContext Context, UObject* Root)"
  },
  {
    "label": "AddAuxRoot()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AddAuxRoot(FAccessContext Context, TAux<T> Root)"
  },
  {
    "label": "AddRoot()",
    "kind": "Method",
    "detail": "Function (Log .)",
    "insertText": "AddRoot(FAuxOrCell(BitCast<TAux<void>>(Root)))"
  },
  {
    "label": "MarkReferencedCells()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkReferencedCells(FTransaction&, FMarkStack&)"
  }
]