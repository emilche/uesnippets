[
  {
    "label": "DML_TENSOR_DATA_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_TENSOR_DATA_TYPE"
  },
  {
    "label": "DML_TENSOR_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_TENSOR_TYPE"
  },
  {
    "label": "DML_TENSOR_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_TENSOR_FLAGS"
  },
  {
    "label": "DML_BUFFER_TENSOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BUFFER_TENSOR_DESC"
  },
  {
    "label": "DML_TENSOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_TENSOR_DESC"
  },
  {
    "label": "DML_OPERATOR_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_OPERATOR_TYPE"
  },
  {
    "label": "DML_REDUCE_FUNCTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_REDUCE_FUNCTION"
  },
  {
    "label": "DML_MATRIX_TRANSFORM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_MATRIX_TRANSFORM"
  },
  {
    "label": "DML_CONVOLUTION_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_CONVOLUTION_MODE"
  },
  {
    "label": "DML_CONVOLUTION_DIRECTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_CONVOLUTION_DIRECTION"
  },
  {
    "label": "DML_PADDING_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_PADDING_MODE"
  },
  {
    "label": "DML_INTERPOLATION_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_INTERPOLATION_MODE"
  },
  {
    "label": "DML_SCALE_BIAS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SCALE_BIAS"
  },
  {
    "label": "DML_SIZE_2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SIZE_2D"
  },
  {
    "label": "DML_RECURRENT_NETWORK_DIRECTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_RECURRENT_NETWORK_DIRECTION"
  },
  {
    "label": "DML_ROUNDING_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_ROUNDING_MODE"
  },
  {
    "label": "DML_IS_INFINITY_MODE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_IS_INFINITY_MODE"
  },
  {
    "label": "DML_AXIS_DIRECTION",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_AXIS_DIRECTION"
  },
  {
    "label": "DML_DEPTH_SPACE_ORDER",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_DEPTH_SPACE_ORDER"
  },
  {
    "label": "DML_RANDOM_GENERATOR_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_RANDOM_GENERATOR_TYPE"
  },
  {
    "label": "DML_MULTIHEAD_ATTENTION_MASK_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_MULTIHEAD_ATTENTION_MASK_TYPE"
  },
  {
    "label": "DML_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_IDENTITY_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_IDENTITY_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ABS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ABS_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ACOS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ACOS_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ADD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ADD_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ADD1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ADD1_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ASIN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ASIN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ATAN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ATAN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_CEIL_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_CEIL_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_CLIP_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_CLIP_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_COS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_COS_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_DIVIDE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_DIVIDE_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_EXP_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_EXP_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_FLOOR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_FLOOR_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOG_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOG_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_AND_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_AND_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_EQUALS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_EQUALS_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_NOT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_NOT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_OR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_OR_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_XOR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_XOR_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_MAX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_MAX_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_MEAN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_MEAN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_MIN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_MIN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_MULTIPLY_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_MULTIPLY_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_POW_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_POW_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_CONSTANT_POW_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_CONSTANT_POW_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_RECIP_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_RECIP_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_SIN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_SIN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_SQRT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_SQRT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_SUBTRACT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_SUBTRACT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_TAN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_TAN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_THRESHOLD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_THRESHOLD_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_QUANTIZE_LINEAR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_QUANTIZE_LINEAR_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_DEQUANTIZE_LINEAR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_DEQUANTIZE_LINEAR_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_ELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_ELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_HARDMAX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_HARDMAX_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_HARD_SIGMOID_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_HARD_SIGMOID_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_IDENTITY_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_IDENTITY_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_LEAKY_RELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_LEAKY_RELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_LINEAR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_LINEAR_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_LOG_SOFTMAX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_LOG_SOFTMAX_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_PARAMETERIZED_RELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_PARAMETERIZED_RELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_PARAMETRIC_SOFTPLUS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_PARAMETRIC_SOFTPLUS_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_RELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_RELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SCALED_ELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SCALED_ELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SCALED_TANH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SCALED_TANH_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SIGMOID_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SIGMOID_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SOFTMAX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SOFTMAX_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SOFTPLUS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SOFTPLUS_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SOFTSIGN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SOFTSIGN_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_TANH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_TANH_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_THRESHOLDED_RELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_THRESHOLDED_RELU_OPERATOR_DESC"
  },
  {
    "label": "DML_CONVOLUTION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_CONVOLUTION_OPERATOR_DESC"
  },
  {
    "label": "DML_GEMM_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GEMM_OPERATOR_DESC"
  },
  {
    "label": "DML_REDUCE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_REDUCE_OPERATOR_DESC"
  },
  {
    "label": "DML_AVERAGE_POOLING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_AVERAGE_POOLING_OPERATOR_DESC"
  },
  {
    "label": "DML_LP_POOLING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_LP_POOLING_OPERATOR_DESC"
  },
  {
    "label": "DML_MAX_POOLING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MAX_POOLING_OPERATOR_DESC"
  },
  {
    "label": "DML_ROI_POOLING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ROI_POOLING_OPERATOR_DESC"
  },
  {
    "label": "DML_SLICE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SLICE_OPERATOR_DESC"
  },
  {
    "label": "DML_CAST_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_CAST_OPERATOR_DESC"
  },
  {
    "label": "DML_SPLIT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SPLIT_OPERATOR_DESC"
  },
  {
    "label": "DML_JOIN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_JOIN_OPERATOR_DESC"
  },
  {
    "label": "DML_PADDING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_PADDING_OPERATOR_DESC"
  },
  {
    "label": "DML_VALUE_SCALE_2D_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_VALUE_SCALE_2D_OPERATOR_DESC"
  },
  {
    "label": "DML_UPSAMPLE_2D_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_UPSAMPLE_2D_OPERATOR_DESC"
  },
  {
    "label": "DML_GATHER_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GATHER_OPERATOR_DESC"
  },
  {
    "label": "DML_SPACE_TO_DEPTH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SPACE_TO_DEPTH_OPERATOR_DESC"
  },
  {
    "label": "DML_DEPTH_TO_SPACE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_DEPTH_TO_SPACE_OPERATOR_DESC"
  },
  {
    "label": "DML_TILE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_TILE_OPERATOR_DESC"
  },
  {
    "label": "DML_TOP_K_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_TOP_K_OPERATOR_DESC"
  },
  {
    "label": "DML_BATCH_NORMALIZATION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BATCH_NORMALIZATION_OPERATOR_DESC"
  },
  {
    "label": "DML_MEAN_VARIANCE_NORMALIZATION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MEAN_VARIANCE_NORMALIZATION_OPERATOR_DESC"
  },
  {
    "label": "DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC"
  },
  {
    "label": "DML_LP_NORMALIZATION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_LP_NORMALIZATION_OPERATOR_DESC"
  },
  {
    "label": "DML_RNN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RNN_OPERATOR_DESC"
  },
  {
    "label": "DML_LSTM_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_LSTM_OPERATOR_DESC"
  },
  {
    "label": "DML_GRU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GRU_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_SIGN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_SIGN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_IS_NAN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_IS_NAN_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ERF_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ERF_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_SINH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_SINH_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_COSH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_COSH_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_TANH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_TANH_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ASINH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ASINH_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ACOSH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ACOSH_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ATANH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ATANH_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_IF_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_IF_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SHRINK_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SHRINK_OPERATOR_DESC"
  },
  {
    "label": "DML_MAX_POOLING1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MAX_POOLING1_OPERATOR_DESC"
  },
  {
    "label": "DML_MAX_UNPOOLING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MAX_UNPOOLING_OPERATOR_DESC"
  },
  {
    "label": "DML_DIAGONAL_MATRIX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_DIAGONAL_MATRIX_OPERATOR_DESC"
  },
  {
    "label": "DML_SCATTER_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SCATTER_OPERATOR_DESC"
  },
  {
    "label": "DML_ONE_HOT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ONE_HOT_OPERATOR_DESC"
  },
  {
    "label": "DML_RESAMPLE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RESAMPLE_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_SHIFT_LEFT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_SHIFT_LEFT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_SHIFT_RIGHT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_SHIFT_RIGHT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ROUND_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ROUND_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_IS_INFINITY_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_IS_INFINITY_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_MODULUS_TRUNCATE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_MODULUS_TRUNCATE_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_MODULUS_FLOOR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_MODULUS_FLOOR_OPERATOR_DESC"
  },
  {
    "label": "DML_FILL_VALUE_CONSTANT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_FILL_VALUE_CONSTANT_OPERATOR_DESC"
  },
  {
    "label": "DML_FILL_VALUE_SEQUENCE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_FILL_VALUE_SEQUENCE_OPERATOR_DESC"
  },
  {
    "label": "DML_CUMULATIVE_SUMMATION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_CUMULATIVE_SUMMATION_OPERATOR_DESC"
  },
  {
    "label": "DML_REVERSE_SUBSEQUENCES_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_REVERSE_SUBSEQUENCES_OPERATOR_DESC"
  },
  {
    "label": "DML_GATHER_ELEMENTS_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GATHER_ELEMENTS_OPERATOR_DESC"
  },
  {
    "label": "DML_GATHER_ND_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GATHER_ND_OPERATOR_DESC"
  },
  {
    "label": "DML_SCATTER_ND_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SCATTER_ND_OPERATOR_DESC"
  },
  {
    "label": "DML_MAX_POOLING2_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MAX_POOLING2_OPERATOR_DESC"
  },
  {
    "label": "DML_SLICE1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SLICE1_OPERATOR_DESC"
  },
  {
    "label": "DML_TOP_K1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_TOP_K1_OPERATOR_DESC"
  },
  {
    "label": "DML_DEPTH_TO_SPACE1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_DEPTH_TO_SPACE1_OPERATOR_DESC"
  },
  {
    "label": "DML_SPACE_TO_DEPTH1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SPACE_TO_DEPTH1_OPERATOR_DESC"
  },
  {
    "label": "DML_MEAN_VARIANCE_NORMALIZATION1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MEAN_VARIANCE_NORMALIZATION1_OPERATOR_DESC"
  },
  {
    "label": "DML_RESAMPLE1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RESAMPLE1_OPERATOR_DESC"
  },
  {
    "label": "DML_MATRIX_MULTIPLY_INTEGER_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MATRIX_MULTIPLY_INTEGER_OPERATOR_DESC"
  },
  {
    "label": "DML_QUANTIZED_LINEAR_MATRIX_MULTIPLY_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_QUANTIZED_LINEAR_MATRIX_MULTIPLY_OPERATOR_DESC"
  },
  {
    "label": "DML_CONVOLUTION_INTEGER_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_CONVOLUTION_INTEGER_OPERATOR_DESC"
  },
  {
    "label": "DML_QUANTIZED_LINEAR_CONVOLUTION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_QUANTIZED_LINEAR_CONVOLUTION_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_AND_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_AND_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_OR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_OR_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_XOR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_XOR_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_NOT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_NOT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_BIT_COUNT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_BIT_COUNT_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OR_EQUAL_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_GREATER_THAN_OR_EQUAL_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OR_EQUAL_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_LOGICAL_LESS_THAN_OR_EQUAL_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_CELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_CELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_RELU_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_RELU_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_AVERAGE_POOLING_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_AVERAGE_POOLING_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_MAX_POOLING_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MAX_POOLING_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_RANDOM_GENERATOR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RANDOM_GENERATOR_OPERATOR_DESC"
  },
  {
    "label": "DML_NONZERO_COORDINATES_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_NONZERO_COORDINATES_OPERATOR_DESC"
  },
  {
    "label": "DML_RESAMPLE_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RESAMPLE_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_SLICE_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_SLICE_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_ADAM_OPTIMIZER_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ADAM_OPTIMIZER_OPERATOR_DESC"
  },
  {
    "label": "DML_ARGMIN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ARGMIN_OPERATOR_DESC"
  },
  {
    "label": "DML_ARGMAX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ARGMAX_OPERATOR_DESC"
  },
  {
    "label": "DML_ROI_ALIGN_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ROI_ALIGN_OPERATOR_DESC"
  },
  {
    "label": "DML_GATHER_ND1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GATHER_ND1_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_ATAN_YX_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_ATAN_YX_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_CLIP_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_CLIP_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_DIFFERENCE_SQUARE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_DIFFERENCE_SQUARE_OPERATOR_DESC"
  },
  {
    "label": "DML_LOCAL_RESPONSE_NORMALIZATION_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_LOCAL_RESPONSE_NORMALIZATION_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_CUMULATIVE_PRODUCT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_CUMULATIVE_PRODUCT_OPERATOR_DESC"
  },
  {
    "label": "DML_BATCH_NORMALIZATION_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BATCH_NORMALIZATION_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_QUANTIZED_LINEAR_ADD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_QUANTIZED_LINEAR_ADD_OPERATOR_DESC"
  },
  {
    "label": "DML_DYNAMIC_QUANTIZE_LINEAR_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_DYNAMIC_QUANTIZE_LINEAR_OPERATOR_DESC"
  },
  {
    "label": "DML_ROI_ALIGN1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ROI_ALIGN1_OPERATOR_DESC"
  },
  {
    "label": "DML_ROI_ALIGN_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ROI_ALIGN_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_BATCH_NORMALIZATION_TRAINING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BATCH_NORMALIZATION_TRAINING_OPERATOR_DESC"
  },
  {
    "label": "DML_BATCH_NORMALIZATION_TRAINING_GRAD_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BATCH_NORMALIZATION_TRAINING_GRAD_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_CLIP1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_CLIP1_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_CLIP_GRAD1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_CLIP_GRAD1_OPERATOR_DESC"
  },
  {
    "label": "DML_PADDING1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_PADDING1_OPERATOR_DESC"
  },
  {
    "label": "DML_ELEMENT_WISE_NEGATE_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ELEMENT_WISE_NEGATE_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_GELU_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_GELU_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SOFTMAX1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SOFTMAX1_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_LOG_SOFTMAX1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_LOG_SOFTMAX1_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_HARDMAX1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_HARDMAX1_OPERATOR_DESC"
  },
  {
    "label": "DML_RESAMPLE2_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RESAMPLE2_OPERATOR_DESC"
  },
  {
    "label": "DML_RESAMPLE_GRAD1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_RESAMPLE_GRAD1_OPERATOR_DESC"
  },
  {
    "label": "DML_DIAGONAL_MATRIX1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_DIAGONAL_MATRIX1_OPERATOR_DESC"
  },
  {
    "label": "DML_MULTIHEAD_ATTENTION_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MULTIHEAD_ATTENTION_OPERATOR_DESC"
  },
  {
    "label": "DML_LP_POOLING1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_LP_POOLING1_OPERATOR_DESC"
  },
  {
    "label": "DML_AVERAGE_POOLING1_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_AVERAGE_POOLING1_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_SWISH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_SWISH_OPERATOR_DESC"
  },
  {
    "label": "DML_ACTIVATION_HARD_SWISH_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_ACTIVATION_HARD_SWISH_OPERATOR_DESC"
  },
  {
    "label": "DML_QUANTIZED_LINEAR_AVERAGE_POOLING_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_QUANTIZED_LINEAR_AVERAGE_POOLING_OPERATOR_DESC"
  },
  {
    "label": "DML_MATRIX_MULTIPLY_INTEGER_TO_FLOAT_OPERATOR_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_MATRIX_MULTIPLY_INTEGER_TO_FLOAT_OPERATOR_DESC"
  },
  {
    "label": "DML_FEATURE_LEVEL",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_FEATURE_LEVEL"
  },
  {
    "label": "DML_FEATURE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_FEATURE"
  },
  {
    "label": "DML_FEATURE_QUERY_TENSOR_DATA_TYPE_SUPPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_FEATURE_QUERY_TENSOR_DATA_TYPE_SUPPORT"
  },
  {
    "label": "DML_FEATURE_DATA_TENSOR_DATA_TYPE_SUPPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_FEATURE_DATA_TENSOR_DATA_TYPE_SUPPORT"
  },
  {
    "label": "DML_FEATURE_QUERY_FEATURE_LEVELS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_FEATURE_QUERY_FEATURE_LEVELS"
  },
  {
    "label": "DML_FEATURE_DATA_FEATURE_LEVELS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_FEATURE_DATA_FEATURE_LEVELS"
  },
  {
    "label": "DML_BINDING_TABLE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BINDING_TABLE_DESC"
  },
  {
    "label": "DML_EXECUTION_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_EXECUTION_FLAGS"
  },
  {
    "label": "DML_CREATE_DEVICE_FLAGS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_CREATE_DEVICE_FLAGS"
  },
  {
    "label": "DML_BINDING_PROPERTIES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BINDING_PROPERTIES"
  },
  {
    "label": "DML_BINDING_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_BINDING_TYPE"
  },
  {
    "label": "DML_BINDING_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BINDING_DESC"
  },
  {
    "label": "DML_BUFFER_BINDING",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BUFFER_BINDING"
  },
  {
    "label": "DML_BUFFER_ARRAY_BINDING",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_BUFFER_ARRAY_BINDING"
  },
  {
    "label": "DML_GRAPH_EDGE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_GRAPH_EDGE_TYPE"
  },
  {
    "label": "DML_GRAPH_EDGE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GRAPH_EDGE_DESC"
  },
  {
    "label": "DML_INPUT_GRAPH_EDGE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_INPUT_GRAPH_EDGE_DESC"
  },
  {
    "label": "DML_OUTPUT_GRAPH_EDGE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_OUTPUT_GRAPH_EDGE_DESC"
  },
  {
    "label": "DML_INTERMEDIATE_GRAPH_EDGE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_INTERMEDIATE_GRAPH_EDGE_DESC"
  },
  {
    "label": "DML_GRAPH_NODE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DML_GRAPH_NODE_TYPE"
  },
  {
    "label": "DML_GRAPH_NODE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GRAPH_NODE_DESC"
  },
  {
    "label": "DML_OPERATOR_GRAPH_NODE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_OPERATOR_GRAPH_NODE_DESC"
  },
  {
    "label": "DML_CONSTANT_DATA_GRAPH_NODE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_CONSTANT_DATA_GRAPH_NODE_DESC"
  },
  {
    "label": "DML_GRAPH_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DML_GRAPH_DESC"
  },
  {
    "label": "WINAPI_FAMILY_PARTITION()",
    "kind": "Method",
    "detail": "Function (# ifndef DIRECTML_H # define DIRECTML_H # pragma once # ifdef _GAMING_XBOX_SCARLETT # include \" d3d12_xs . h \" # elif _GAMING_XBOX_XBOXONE # include \" d3d12_x . h \" # else # include \" d3d12 . h \" # endif # if)",
    "insertText": "WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES) #ifndef DML_DECLARE_INTERFACE #define DML_DECLARE_INTERFACE(iid) DECLSPEC_UUID(iid) DECLSPEC_NOVTABLE #endif #ifndef DML_TARGET_VERSION #if !defined(NTDDI_VERSION) || defined(DML_TARGET_VERSION_USE_LATEST) #define DML_TARGET_VERSION 0x6200 #elif defined(NTDDI_WIN10_ZN) && NTDDI_VERSION >= NTDDI_WIN10_ZN #define DML_TARGET_VERSION 0x6000 #elif defined(NTDDI_WIN10_NI) && NTDDI_VERSION >= NTDDI_WIN10_NI #define DML_TARGET_VERSION 0x5000 #elif defined(NTDDI_WIN10_CO) && NTDDI_VERSION >= NTDDI_WIN10_CO #define DML_TARGET_VERSION 0x4000 #elif defined(NTDDI_WIN10_FE) && NTDDI_VERSION >= NTDDI_WIN10_FE #define DML_TARGET_VERSION 0x3000 #elif defined(NTDDI_WIN10_VB)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (# if DML_TARGET_VERSION> = 0 x3000 const UINT DML_TENSOR_DIMENSION_COUNT_MAX1 = 8 ; # endif const UINT DML_TEMPORARY_BUFFER_ALIGNMENT = 2 5 6 ; const UINT DML_PERSISTENT_BUFFER_ALIGNMENT = 2 5 6 ; const UINT DML_MINIMUM_BUFFER_TENSOR_ALIGNMENT = 1 6 ; interface IDMLObject ; interface IDMLDevice ; interface IDMLDeviceChild ; interface IDMLPageable ; interface IDMLDispatchable ; interface IDMLOperator ; interface IDMLCompiledOperator ; interface IDMLOperatorInitializer ; interface IDMLBindingTable ; interface IDMLCommandRecorder ; enum DML_TENSOR_DATA_TYPE { DML_TENSOR_DATA_TYPE_UNKNOWN,DML_TENSOR_DATA_TYPE_FLOAT32,DML_TENSOR_DATA_TYPE_FLOAT16,DML_TENSOR_DATA_TYPE_UINT32,DML_TENSOR_DATA_TYPE_UINT16,DML_TENSOR_DATA_TYPE_UINT8,DML_TENSOR_DATA_TYPE_INT32,DML_TENSOR_DATA_TYPE_INT16,DML_TENSOR_DATA_TYPE_INT8,DML_TENSOR_DATA_TYPE_FLOAT64,DML_TENSOR_DATA_TYPE_UINT64,DML_TENSOR_DATA_TYPE_INT64,} ; enum DML_TENSOR_TYPE { DML_TENSOR_TYPE_INVALID,DML_TENSOR_TYPE_BUFFER,} ; enum DML_TENSOR_FLAGS { DML_TENSOR_FLAG_NONE = 0 x0,DML_TENSOR_FLAG_OWNED_BY_DML = 0 x1,} ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(DML_TENSOR_FLAGS)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (struct DML_BUFFER_TENSOR_DESC { DML_TENSOR_DATA_TYPE DataType ; DML_TENSOR_FLAGS Flags ; UINT DimensionCount ;)",
    "insertText": "_Field_size_(DimensionCount)"
  },
  {
    "label": "_Field_size_opt_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Field_size_opt_(DimensionCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (UINT64 TotalTensorSizeInBytes ; UINT GuaranteedBaseOffsetAlignment ; } ; struct DML_TENSOR_DESC { DML_TENSOR_TYPE Type ;)",
    "insertText": "_Field_size_(_Inexpressible_(\"Dependent on tensor type\"))"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; enum DML_OPERATOR_TYPE { DML_OPERATOR_INVALID,DML_OPERATOR_ELEMENT_WISE_IDENTITY,DML_OPERATOR_ELEMENT_WISE_ABS,DML_OPERATOR_ELEMENT_WISE_ACOS,DML_OPERATOR_ELEMENT_WISE_ADD,DML_OPERATOR_ELEMENT_WISE_ASIN,DML_OPERATOR_ELEMENT_WISE_ATAN,DML_OPERATOR_ELEMENT_WISE_CEIL,DML_OPERATOR_ELEMENT_WISE_CLIP,DML_OPERATOR_ELEMENT_WISE_COS,DML_OPERATOR_ELEMENT_WISE_DIVIDE,DML_OPERATOR_ELEMENT_WISE_EXP,DML_OPERATOR_ELEMENT_WISE_FLOOR,DML_OPERATOR_ELEMENT_WISE_LOG,DML_OPERATOR_ELEMENT_WISE_LOGICAL_AND,DML_OPERATOR_ELEMENT_WISE_LOGICAL_EQUALS,DML_OPERATOR_ELEMENT_WISE_LOGICAL_GREATER_THAN,DML_OPERATOR_ELEMENT_WISE_LOGICAL_LESS_THAN,DML_OPERATOR_ELEMENT_WISE_LOGICAL_NOT,DML_OPERATOR_ELEMENT_WISE_LOGICAL_OR,DML_OPERATOR_ELEMENT_WISE_LOGICAL_XOR,DML_OPERATOR_ELEMENT_WISE_MAX,DML_OPERATOR_ELEMENT_WISE_MEAN,DML_OPERATOR_ELEMENT_WISE_MIN,DML_OPERATOR_ELEMENT_WISE_MULTIPLY,DML_OPERATOR_ELEMENT_WISE_POW,DML_OPERATOR_ELEMENT_WISE_CONSTANT_POW,DML_OPERATOR_ELEMENT_WISE_RECIP,DML_OPERATOR_ELEMENT_WISE_SIN,DML_OPERATOR_ELEMENT_WISE_SQRT,DML_OPERATOR_ELEMENT_WISE_SUBTRACT,DML_OPERATOR_ELEMENT_WISE_TAN,DML_OPERATOR_ELEMENT_WISE_THRESHOLD,DML_OPERATOR_ELEMENT_WISE_QUANTIZE_LINEAR,DML_OPERATOR_ELEMENT_WISE_DEQUANTIZE_LINEAR,DML_OPERATOR_ACTIVATION_ELU,DML_OPERATOR_ACTIVATION_HARDMAX,DML_OPERATOR_ACTIVATION_HARD_SIGMOID,DML_OPERATOR_ACTIVATION_IDENTITY,DML_OPERATOR_ACTIVATION_LEAKY_RELU,DML_OPERATOR_ACTIVATION_LINEAR,DML_OPERATOR_ACTIVATION_LOG_SOFTMAX,DML_OPERATOR_ACTIVATION_PARAMETERIZED_RELU,DML_OPERATOR_ACTIVATION_PARAMETRIC_SOFTPLUS,DML_OPERATOR_ACTIVATION_RELU,DML_OPERATOR_ACTIVATION_SCALED_ELU,DML_OPERATOR_ACTIVATION_SCALED_TANH,DML_OPERATOR_ACTIVATION_SIGMOID,DML_OPERATOR_ACTIVATION_SOFTMAX,DML_OPERATOR_ACTIVATION_SOFTPLUS,DML_OPERATOR_ACTIVATION_SOFTSIGN,DML_OPERATOR_ACTIVATION_TANH,DML_OPERATOR_ACTIVATION_THRESHOLDED_RELU,DML_OPERATOR_CONVOLUTION,DML_OPERATOR_GEMM,DML_OPERATOR_REDUCE,DML_OPERATOR_AVERAGE_POOLING,DML_OPERATOR_LP_POOLING,DML_OPERATOR_MAX_POOLING,DML_OPERATOR_ROI_POOLING,DML_OPERATOR_SLICE,DML_OPERATOR_CAST,DML_OPERATOR_SPLIT,DML_OPERATOR_JOIN,DML_OPERATOR_PADDING,DML_OPERATOR_VALUE_SCALE_2D,DML_OPERATOR_UPSAMPLE_2D,DML_OPERATOR_GATHER,DML_OPERATOR_SPACE_TO_DEPTH,DML_OPERATOR_DEPTH_TO_SPACE,DML_OPERATOR_TILE,DML_OPERATOR_TOP_K,DML_OPERATOR_BATCH_NORMALIZATION,DML_OPERATOR_MEAN_VARIANCE_NORMALIZATION,DML_OPERATOR_LOCAL_RESPONSE_NORMALIZATION,DML_OPERATOR_LP_NORMALIZATION,DML_OPERATOR_RNN,DML_OPERATOR_LSTM,DML_OPERATOR_GRU,# if DML_TARGET_VERSION> = 0 x2000 DML_OPERATOR_ELEMENT_WISE_SIGN,DML_OPERATOR_ELEMENT_WISE_IS_NAN,DML_OPERATOR_ELEMENT_WISE_ERF,DML_OPERATOR_ELEMENT_WISE_SINH,DML_OPERATOR_ELEMENT_WISE_COSH,DML_OPERATOR_ELEMENT_WISE_TANH,DML_OPERATOR_ELEMENT_WISE_ASINH,DML_OPERATOR_ELEMENT_WISE_ACOSH,DML_OPERATOR_ELEMENT_WISE_ATANH,DML_OPERATOR_ELEMENT_WISE_IF,DML_OPERATOR_ELEMENT_WISE_ADD1,DML_OPERATOR_ACTIVATION_SHRINK,DML_OPERATOR_MAX_POOLING1,DML_OPERATOR_MAX_UNPOOLING,DML_OPERATOR_DIAGONAL_MATRIX,DML_OPERATOR_SCATTER_ELEMENTS,DML_OPERATOR_SCATTER = DML_OPERATOR_SCATTER_ELEMENTS,DML_OPERATOR_ONE_HOT,DML_OPERATOR_RESAMPLE,# endif # if DML_TARGET_VERSION> = 0 x2100 DML_OPERATOR_ELEMENT_WISE_BIT_SHIFT_LEFT,DML_OPERATOR_ELEMENT_WISE_BIT_SHIFT_RIGHT,DML_OPERATOR_ELEMENT_WISE_ROUND,DML_OPERATOR_ELEMENT_WISE_IS_INFINITY,DML_OPERATOR_ELEMENT_WISE_MODULUS_TRUNCATE,DML_OPERATOR_ELEMENT_WISE_MODULUS_FLOOR,DML_OPERATOR_FILL_VALUE_CONSTANT,DML_OPERATOR_FILL_VALUE_SEQUENCE,DML_OPERATOR_CUMULATIVE_SUMMATION,DML_OPERATOR_REVERSE_SUBSEQUENCES,DML_OPERATOR_GATHER_ELEMENTS,DML_OPERATOR_GATHER_ND,DML_OPERATOR_SCATTER_ND,DML_OPERATOR_MAX_POOLING2,DML_OPERATOR_SLICE1,DML_OPERATOR_TOP_K1,DML_OPERATOR_DEPTH_TO_SPACE1,DML_OPERATOR_SPACE_TO_DEPTH1,DML_OPERATOR_MEAN_VARIANCE_NORMALIZATION1,DML_OPERATOR_RESAMPLE1,DML_OPERATOR_MATRIX_MULTIPLY_INTEGER,DML_OPERATOR_QUANTIZED_LINEAR_MATRIX_MULTIPLY,DML_OPERATOR_CONVOLUTION_INTEGER,DML_OPERATOR_QUANTIZED_LINEAR_CONVOLUTION,# endif # if DML_TARGET_VERSION> = 0 x3000 DML_OPERATOR_ELEMENT_WISE_BIT_AND,DML_OPERATOR_ELEMENT_WISE_BIT_OR,DML_OPERATOR_ELEMENT_WISE_BIT_XOR,DML_OPERATOR_ELEMENT_WISE_BIT_NOT,DML_OPERATOR_ELEMENT_WISE_BIT_COUNT,DML_OPERATOR_ELEMENT_WISE_LOGICAL_GREATER_THAN_OR_EQUAL,DML_OPERATOR_ELEMENT_WISE_LOGICAL_LESS_THAN_OR_EQUAL,DML_OPERATOR_ACTIVATION_CELU,DML_OPERATOR_ACTIVATION_RELU_GRAD,DML_OPERATOR_AVERAGE_POOLING_GRAD,DML_OPERATOR_MAX_POOLING_GRAD,DML_OPERATOR_RANDOM_GENERATOR,DML_OPERATOR_NONZERO_COORDINATES,DML_OPERATOR_RESAMPLE_GRAD,DML_OPERATOR_SLICE_GRAD,DML_OPERATOR_ADAM_OPTIMIZER,DML_OPERATOR_ARGMIN,DML_OPERATOR_ARGMAX,DML_OPERATOR_ROI_ALIGN,DML_OPERATOR_GATHER_ND1,# endif # if DML_TARGET_VERSION> = 0 x3100 DML_OPERATOR_ELEMENT_WISE_ATAN_YX,DML_OPERATOR_ELEMENT_WISE_CLIP_GRAD,DML_OPERATOR_ELEMENT_WISE_DIFFERENCE_SQUARE,DML_OPERATOR_LOCAL_RESPONSE_NORMALIZATION_GRAD,DML_OPERATOR_CUMULATIVE_PRODUCT,DML_OPERATOR_BATCH_NORMALIZATION_GRAD,# endif # if DML_TARGET_VERSION> = 0 x4000 DML_OPERATOR_ELEMENT_WISE_QUANTIZED_LINEAR_ADD,DML_OPERATOR_DYNAMIC_QUANTIZE_LINEAR,DML_OPERATOR_ROI_ALIGN1,# endif # if DML_TARGET_VERSION> = 0 x4100 DML_OPERATOR_ROI_ALIGN_GRAD,DML_OPERATOR_BATCH_NORMALIZATION_TRAINING,DML_OPERATOR_BATCH_NORMALIZATION_TRAINING_GRAD,# endif # if DML_TARGET_VERSION> = 0 x5000 DML_OPERATOR_ELEMENT_WISE_CLIP1,DML_OPERATOR_ELEMENT_WISE_CLIP_GRAD1,DML_OPERATOR_PADDING1,DML_OPERATOR_ELEMENT_WISE_NEGATE,# endif # if DML_TARGET_VERSION> = 0 x5100 DML_OPERATOR_ACTIVATION_GELU,DML_OPERATOR_ACTIVATION_SOFTMAX1,DML_OPERATOR_ACTIVATION_LOG_SOFTMAX1,DML_OPERATOR_ACTIVATION_HARDMAX1,DML_OPERATOR_RESAMPLE2,DML_OPERATOR_RESAMPLE_GRAD1,DML_OPERATOR_DIAGONAL_MATRIX1,# endif # if DML_TARGET_VERSION> = 0 x6100 DML_OPERATOR_MULTIHEAD_ATTENTION,# endif # if DML_TARGET_VERSION> = 0 x6200 DML_OPERATOR_LP_POOLING1,DML_OPERATOR_AVERAGE_POOLING1,DML_OPERATOR_ACTIVATION_SWISH,DML_OPERATOR_ACTIVATION_HARD_SWISH,DML_OPERATOR_QUANTIZED_LINEAR_AVERAGE_POOLING,DML_OPERATOR_MATRIX_MULTIPLY_INTEGER_TO_FLOAT,# endif } ; enum DML_REDUCE_FUNCTION { DML_REDUCE_FUNCTION_ARGMAX,DML_REDUCE_FUNCTION_ARGMIN,DML_REDUCE_FUNCTION_AVERAGE,DML_REDUCE_FUNCTION_L1,DML_REDUCE_FUNCTION_L2,DML_REDUCE_FUNCTION_LOG_SUM,DML_REDUCE_FUNCTION_LOG_SUM_EXP,DML_REDUCE_FUNCTION_MAX,DML_REDUCE_FUNCTION_MIN,DML_REDUCE_FUNCTION_MULTIPLY,DML_REDUCE_FUNCTION_SUM,DML_REDUCE_FUNCTION_SUM_SQUARE,} ; enum DML_MATRIX_TRANSFORM { DML_MATRIX_TRANSFORM_NONE,DML_MATRIX_TRANSFORM_TRANSPOSE,} ; enum DML_CONVOLUTION_MODE { DML_CONVOLUTION_MODE_CONVOLUTION,DML_CONVOLUTION_MODE_CROSS_CORRELATION,} ; enum DML_CONVOLUTION_DIRECTION { DML_CONVOLUTION_DIRECTION_FORWARD,DML_CONVOLUTION_DIRECTION_BACKWARD,} ; enum DML_PADDING_MODE { DML_PADDING_MODE_CONSTANT,DML_PADDING_MODE_EDGE,DML_PADDING_MODE_REFLECTION,# if DML_TARGET_VERSION> = 0 x3000 DML_PADDING_MODE_SYMMETRIC,# endif } ; enum DML_INTERPOLATION_MODE { DML_INTERPOLATION_MODE_NEAREST_NEIGHBOR,DML_INTERPOLATION_MODE_LINEAR,} ; struct DML_SCALE_BIAS { FLOAT Scale ; FLOAT Bias ; } ; struct DML_SIZE_2D { UINT Width ; UINT Height ; } ; enum DML_RECURRENT_NETWORK_DIRECTION { DML_RECURRENT_NETWORK_DIRECTION_FORWARD,DML_RECURRENT_NETWORK_DIRECTION_BACKWARD,DML_RECURRENT_NETWORK_DIRECTION_BIDIRECTIONAL,} ; # if DML_TARGET_VERSION> = 0 x2100 enum DML_ROUNDING_MODE { DML_ROUNDING_MODE_HALVES_TO_NEAREST_EVEN,DML_ROUNDING_MODE_TOWARD_ZERO,DML_ROUNDING_MODE_TOWARD_INFINITY,} ; enum DML_IS_INFINITY_MODE { DML_IS_INFINITY_MODE_EITHER = 0,DML_IS_INFINITY_MODE_POSITIVE = 1,DML_IS_INFINITY_MODE_NEGATIVE = 2,} ; enum DML_AXIS_DIRECTION { DML_AXIS_DIRECTION_INCREASING = 0,DML_AXIS_DIRECTION_DECREASING = 1,} ; enum DML_DEPTH_SPACE_ORDER { DML_DEPTH_SPACE_ORDER_DEPTH_COLUMN_ROW,DML_DEPTH_SPACE_ORDER_COLUMN_ROW_DEPTH,} ; union DML_SCALAR_UNION { BYTE Bytes [ 8 ] ; INT8 Int8 ; UINT8 UInt8 ; INT16 Int16 ; UINT16 UInt16 ; INT32 Int32 ; UINT32 UInt32 ; INT64 Int64 ; UINT64 UInt64 ; FLOAT Float32 ; DOUBLE Float64 ; } ; # endif # if DML_TARGET_VERSION> = 0 x3000 enum DML_RANDOM_GENERATOR_TYPE { DML_RANDOM_GENERATOR_TYPE_PHILOX_4X32_10 } ; # endif # if DML_TARGET_VERSION> = 0 x6100 enum DML_MULTIHEAD_ATTENTION_MASK_TYPE { DML_MULTIHEAD_ATTENTION_MASK_TYPE_NONE,DML_MULTIHEAD_ATTENTION_MASK_TYPE_KEY_SEQUENCE_LENGTH,DML_MULTIHEAD_ATTENTION_MASK_TYPE_KEY_SEQUENCE_END_START,DML_MULTIHEAD_ATTENTION_MASK_TYPE_KEY_QUERY_SEQUENCE_LENGTH_START_END,DML_MULTIHEAD_ATTENTION_MASK_TYPE_BOOLEAN,} ; # endif struct DML_OPERATOR_DESC { DML_OPERATOR_TYPE Type ;)",
    "insertText": "_Field_size_(_Inexpressible_(\"Dependent on operator type\"))"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (UINT GroupCount ; _Maybenull_ const DML_OPERATOR_DESC* FusedActivation ; } ; struct DML_GEMM_OPERATOR_DESC { const DML_TENSOR_DESC* ATensor ; const DML_TENSOR_DESC* BTensor ; _Maybenull_ const DML_TENSOR_DESC* CTensor ; const DML_TENSOR_DESC* OutputTensor ; DML_MATRIX_TRANSFORM TransA ; DML_MATRIX_TRANSFORM TransB ; FLOAT Alpha ; FLOAT Beta ; _Maybenull_ const DML_OPERATOR_DESC* FusedActivation ; } ; struct DML_REDUCE_OPERATOR_DESC { DML_REDUCE_FUNCTION Function ; const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT AxisCount ;)",
    "insertText": "_Field_size_(AxisCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_CAST_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; } ; struct DML_SPLIT_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; UINT OutputCount ;)",
    "insertText": "_Field_size_(OutputCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (UINT Axis ; } ; struct DML_JOIN_OPERATOR_DESC { UINT InputCount ;)",
    "insertText": "_Field_size_(InputCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_VALUE_SCALE_2D_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; FLOAT Scale ; UINT ChannelCount ;)",
    "insertText": "_Field_size_(ChannelCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_UPSAMPLE_2D_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; DML_SIZE_2D ScaleSize ; DML_INTERPOLATION_MODE InterpolationMode ; } ; struct DML_GATHER_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* IndicesTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT Axis ; UINT IndexDimensions ; } ; struct DML_SPACE_TO_DEPTH_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT BlockSize ; } ; struct DML_DEPTH_TO_SPACE_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT BlockSize ; } ; struct DML_TILE_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT RepeatsCount ;)",
    "insertText": "_Field_size_(RepeatsCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_TOP_K_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputValueTensor ; const DML_TENSOR_DESC* OutputIndexTensor ; UINT Axis ; UINT K ; } ; struct DML_BATCH_NORMALIZATION_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* MeanTensor ; const DML_TENSOR_DESC* VarianceTensor ; const DML_TENSOR_DESC* ScaleTensor ; const DML_TENSOR_DESC* BiasTensor ; const DML_TENSOR_DESC* OutputTensor ; BOOL Spatial ; FLOAT Epsilon ; _Maybenull_ const DML_OPERATOR_DESC* FusedActivation ; } ; struct DML_MEAN_VARIANCE_NORMALIZATION_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; _Maybenull_ const DML_TENSOR_DESC* ScaleTensor ; _Maybenull_ const DML_TENSOR_DESC* BiasTensor ; const DML_TENSOR_DESC* OutputTensor ; BOOL CrossChannel ; BOOL NormalizeVariance ; FLOAT Epsilon ; _Maybenull_ const DML_OPERATOR_DESC* FusedActivation ; } ; struct DML_LOCAL_RESPONSE_NORMALIZATION_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; BOOL CrossChannel ; UINT LocalSize ; FLOAT Alpha ; FLOAT Beta ; FLOAT Bias ; } ; struct DML_LP_NORMALIZATION_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT Axis ; FLOAT Epsilon ; UINT P ; } ; struct DML_RNN_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* WeightTensor ; const DML_TENSOR_DESC* RecurrenceTensor ; _Maybenull_ const DML_TENSOR_DESC* BiasTensor ; _Maybenull_ const DML_TENSOR_DESC* HiddenInitTensor ; _Maybenull_ const DML_TENSOR_DESC* SequenceLengthsTensor ; _Maybenull_ const DML_TENSOR_DESC* OutputSequenceTensor ; _Maybenull_ const DML_TENSOR_DESC* OutputSingleTensor ; UINT ActivationDescCount ;)",
    "insertText": "_Field_size_(ActivationDescCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_MAX_UNPOOLING_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* IndicesTensor ; const DML_TENSOR_DESC* OutputTensor ; } ; struct DML_DIAGONAL_MATRIX_OPERATOR_DESC { const DML_TENSOR_DESC* OutputTensor ; INT Offset ; FLOAT Value ; } ; struct DML_SCATTER_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* IndicesTensor ; const DML_TENSOR_DESC* UpdatesTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT Axis ; } ; struct DML_ONE_HOT_OPERATOR_DESC { const DML_TENSOR_DESC* IndicesTensor ; const DML_TENSOR_DESC* ValuesTensor ; const DML_TENSOR_DESC* OutputTensor ; UINT Axis ; } ; struct DML_RESAMPLE_OPERATOR_DESC { const DML_TENSOR_DESC* InputTensor ; const DML_TENSOR_DESC* OutputTensor ; DML_INTERPOLATION_MODE InterpolationMode ; UINT ScaleCount ;)",
    "insertText": "_Field_size_(ScaleCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (BOOL IncludePadding ; } ; struct DML_MATRIX_MULTIPLY_INTEGER_TO_FLOAT_OPERATOR_DESC { const DML_TENSOR_DESC* ATensor ; const DML_TENSOR_DESC* AScaleTensor ; _Maybenull_ const DML_TENSOR_DESC* AZeroPointTensor ; const DML_TENSOR_DESC* BTensor ; const DML_TENSOR_DESC* BScaleTensor ; _Maybenull_ const DML_TENSOR_DESC* BZeroPointTensor ; _Maybenull_ const DML_TENSOR_DESC* BiasTensor ; const DML_TENSOR_DESC* OutputTensor ; } ; # endif # if DML_TARGET_VERSION> = 0 x2000 enum DML_FEATURE_LEVEL { DML_FEATURE_LEVEL_1_0 = 0 x1000,DML_FEATURE_LEVEL_2_0 = 0 x2000,DML_FEATURE_LEVEL_2_1 = 0 x2100,DML_FEATURE_LEVEL_3_0 = 0 x3000,DML_FEATURE_LEVEL_3_1 = 0 x3100,DML_FEATURE_LEVEL_4_0 = 0 x4000,DML_FEATURE_LEVEL_4_1 = 0 x4100,DML_FEATURE_LEVEL_5_0 = 0 x5000,DML_FEATURE_LEVEL_5_1 = 0 x5100,DML_FEATURE_LEVEL_5_2 = 0 x5200,DML_FEATURE_LEVEL_6_0 = 0 x6000,DML_FEATURE_LEVEL_6_1 = 0 x6100,DML_FEATURE_LEVEL_6_2 = 0 x6200,} ; # endif enum DML_FEATURE { DML_FEATURE_TENSOR_DATA_TYPE_SUPPORT,# if DML_TARGET_VERSION> = 0 x2000 DML_FEATURE_FEATURE_LEVELS,# endif } ; struct DML_FEATURE_QUERY_TENSOR_DATA_TYPE_SUPPORT { DML_TENSOR_DATA_TYPE DataType ; } ; struct DML_FEATURE_DATA_TENSOR_DATA_TYPE_SUPPORT { BOOL IsSupported ; } ; # if DML_TARGET_VERSION> = 0 x2000 struct DML_FEATURE_QUERY_FEATURE_LEVELS { UINT RequestedFeatureLevelCount ;)",
    "insertText": "_Field_size_(RequestedFeatureLevelCount)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_FEATURE_DATA_FEATURE_LEVELS { DML_FEATURE_LEVEL MaxSupportedFeatureLevel ; } ; # endif struct DML_BINDING_TABLE_DESC { IDMLDispatchable* Dispatchable ; D3D12_CPU_DESCRIPTOR_HANDLE CPUDescriptorHandle ; D3D12_GPU_DESCRIPTOR_HANDLE GPUDescriptorHandle ; UINT SizeInDescriptors ; } ; enum DML_EXECUTION_FLAGS { DML_EXECUTION_FLAG_NONE = 0,DML_EXECUTION_FLAG_ALLOW_HALF_PRECISION_COMPUTATION = 0 x1,DML_EXECUTION_FLAG_DISABLE_META_COMMANDS = 0 x2,DML_EXECUTION_FLAG_DESCRIPTORS_VOLATILE = 0 x4,} ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(DML_EXECUTION_FLAGS)"
  },
  {
    "label": "DEFINE_ENUM_FLAG_OPERATORS()",
    "kind": "Method",
    "detail": "Function (enum DML_CREATE_DEVICE_FLAGS { DML_CREATE_DEVICE_FLAG_NONE = 0,DML_CREATE_DEVICE_FLAG_DEBUG = 0 x1,} ;)",
    "insertText": "DEFINE_ENUM_FLAG_OPERATORS(DML_CREATE_DEVICE_FLAGS)"
  },
  {
    "label": "DMLCreateDevice()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "DMLCreateDevice(ID3D12Device* d3d12Device, DML_CREATE_DEVICE_FLAGS flags, REFIID riid, _COM_Outptr_opt_ void** ppv)"
  },
  {
    "label": "DMLCreateDevice1()",
    "kind": "Method",
    "detail": "Function (# if DML_TARGET_VERSION> = 0 x2000 STDAPI)",
    "insertText": "DMLCreateDevice1(ID3D12Device* d3d12Device, DML_CREATE_DEVICE_FLAGS flags, DML_FEATURE_LEVEL minimumFeatureLevel, REFIID riid, _COM_Outptr_opt_ void** ppv)"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# endif interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"c8263aac-9e0c-4a2d-9b8e-007521a3317c\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"6dbd6437-96fd-423f-a98c-ae5e7c2a573f\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"27e83142-8165-49e3-974e-2fd66e4cb69d\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"b1ab0825-4542-4a4b-8617-6dde6e8f6201\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"26caae7a-3081-4633-9581-226fbe57695d\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_BINDING_PROPERTIES { UINT RequiredDescriptorCount ; UINT64 TemporaryResourceSize ; UINT64 PersistentResourceSize ; } ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"dcb821a8-1039-441e-9f1c-b1759c2f3cec\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"6b15e56a-bf5c-4902-92d8-da3a650afea4\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"427c1113-435c-469c-8676-4d5dd072f813\")"
  },
  {
    "label": "_Field_size_opt_()",
    "kind": "Method",
    "detail": "Function (} ; enum DML_BINDING_TYPE { DML_BINDING_TYPE_NONE,DML_BINDING_TYPE_BUFFER,DML_BINDING_TYPE_BUFFER_ARRAY,} ; struct DML_BINDING_DESC { DML_BINDING_TYPE Type ;)",
    "insertText": "_Field_size_opt_(_Inexpressible_(\"Dependent on binding type\"))"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_BUFFER_BINDING { _Maybenull_ ID3D12Resource* Buffer ; UINT64 Offset ; UINT64 SizeInBytes ; } ; struct DML_BUFFER_ARRAY_BINDING { UINT BindingCount ;)",
    "insertText": "_Field_size_(BindingCount)"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"29c687dc-de74-4e3b-ab00-1168f2fc3cfc\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"e6857a76-2e3e-4fdd-bff4-5d2ba10fb453\")"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"7d6f3ac9-394a-4ac3-92a7-390cc57a8217\")"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; # if DML_TARGET_VERSION> = 0 x2100 enum DML_GRAPH_EDGE_TYPE { DML_GRAPH_EDGE_TYPE_INVALID,DML_GRAPH_EDGE_TYPE_INPUT,DML_GRAPH_EDGE_TYPE_OUTPUT,DML_GRAPH_EDGE_TYPE_INTERMEDIATE,} ; struct DML_GRAPH_EDGE_DESC { DML_GRAPH_EDGE_TYPE Type ;)",
    "insertText": "_Field_size_(_Inexpressible_(\"Dependent on edge type\"))"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_INPUT_GRAPH_EDGE_DESC { UINT GraphInputIndex ; UINT ToNodeIndex ; UINT ToNodeInputIndex ; _Field_z_ _Maybenull_ const char* Name ; } ; struct DML_OUTPUT_GRAPH_EDGE_DESC { UINT FromNodeIndex ; UINT FromNodeOutputIndex ; UINT GraphOutputIndex ; _Field_z_ _Maybenull_ const char* Name ; } ; struct DML_INTERMEDIATE_GRAPH_EDGE_DESC { UINT FromNodeIndex ; UINT FromNodeOutputIndex ; UINT ToNodeIndex ; UINT ToNodeInputIndex ; _Field_z_ _Maybenull_ const char* Name ; } ; enum DML_GRAPH_NODE_TYPE { DML_GRAPH_NODE_TYPE_INVALID,DML_GRAPH_NODE_TYPE_OPERATOR,DML_GRAPH_NODE_TYPE_CONSTANT } ; struct DML_GRAPH_NODE_DESC { DML_GRAPH_NODE_TYPE Type ;)",
    "insertText": "_Field_size_(_Inexpressible_(\"Dependent on node type\"))"
  },
  {
    "label": "_Field_size_bytes_()",
    "kind": "Method",
    "detail": "Function (} ; struct DML_OPERATOR_GRAPH_NODE_DESC { IDMLOperator* Operator ; _Field_z_ _Maybenull_ const char* Name ; } ; struct DML_CONSTANT_DATA_GRAPH_NODE_DESC {)",
    "insertText": "_Field_size_bytes_(DataSize)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (SIZE_T DataSize ; _Field_z_ _Maybenull_ const char* Name ; } ; struct DML_GRAPH_DESC { UINT InputCount ; UINT OutputCount ; UINT NodeCount ;)",
    "insertText": "_Field_size_(NodeCount)"
  },
  {
    "label": "_Field_size_opt_()",
    "kind": "Method",
    "detail": "Function (UINT InputEdgeCount ;)",
    "insertText": "_Field_size_opt_(InputEdgeCount)"
  },
  {
    "label": "_Field_size_()",
    "kind": "Method",
    "detail": "Function (UINT OutputEdgeCount ;)",
    "insertText": "_Field_size_(OutputEdgeCount)"
  },
  {
    "label": "_Field_size_opt_()",
    "kind": "Method",
    "detail": "Function (UINT IntermediateEdgeCount ;)",
    "insertText": "_Field_size_opt_(IntermediateEdgeCount)"
  },
  {
    "label": "DML_DECLARE_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; interface)",
    "insertText": "DML_DECLARE_INTERFACE(\"a0884f9a-d2be-4355-aa5d-5901281ad1d2\")"
  }
]