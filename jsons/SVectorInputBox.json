[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SNumericVectorInputBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNumericVectorInputBox"
  },
  {
    "label": "FArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArguments"
  },
  {
    "label": "FVectorXArgumentsEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorXArgumentsEmpty"
  },
  {
    "label": "FVectorXArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorXArguments"
  },
  {
    "label": "FVectorYArgumentsEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorYArgumentsEmpty"
  },
  {
    "label": "FVectorYArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorYArguments"
  },
  {
    "label": "FVectorZArgumentsEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorZArgumentsEmpty"
  },
  {
    "label": "FVectorZArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorZArguments"
  },
  {
    "label": "FVectorWArgumentsEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorWArgumentsEmpty"
  },
  {
    "label": "FVectorWArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorWArguments"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include<type_traits> class FArrangedChildren ; class SHorizontalBox ; template<NumericType,VectorType = UE::Math::TVector<NumericType>,int32 NumberOfComponents = 3> class SNumericVectorInputBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnNumericValueChanged, NumericType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnNumericValueCommitted, NumericType, ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnVectorValueChanged, VectorType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnVectorValueCommitted, VectorType, ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnConstrainVector, int32 , VectorType , VectorType&)"
  },
  {
    "label": "FVectorXArguments()",
    "kind": "Method",
    "detail": "Function (struct FArguments ; private : using ThisClass = SNumericVectorInputBox<NumericType,VectorType,NumberOfComponents> ; struct FVectorXArgumentsEmpty { } ; template<ArgumentType> struct FVectorXArguments : FVectorXArgumentsEmpty { using WidgetArgsType = ArgumentType ; FORCENOINLINE)",
    "insertText": "FVectorXArguments() : _ToggleXChecked(ECheckBoxState::Checked)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<NumericType>, X) SLATE_EVENT(FOnNumericValueChanged, OnXChanged) SLATE_EVENT(FOnNumericValueCommitted, OnXCommitted) SLATE_ATTRIBUTE( ECheckBoxState, ToggleXChecked ) SLATE_EVENT( FOnCheckStateChanged, OnToggleXChanged ) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtenderX) SLATE_EVENT(FSimpleDelegate, OnXBeginSliderMovement) SLATE_EVENT(FOnNumericValueChanged, OnXEndSliderMovement)"
  },
  {
    "label": "FVectorYArguments()",
    "kind": "Method",
    "detail": "Function (struct FVectorYArgumentsEmpty { } ; template<ArgumentType> struct FVectorYArguments : FVectorYArgumentsEmpty { using WidgetArgsType = ArgumentType ; FORCENOINLINE)",
    "insertText": "FVectorYArguments() : _ToggleYChecked(ECheckBoxState::Checked)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<NumericType>, Y) SLATE_EVENT(FOnNumericValueChanged, OnYChanged) SLATE_EVENT(FOnNumericValueCommitted, OnYCommitted) SLATE_ATTRIBUTE( ECheckBoxState, ToggleYChecked ) SLATE_EVENT( FOnCheckStateChanged, OnToggleYChanged ) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtenderY) SLATE_EVENT(FSimpleDelegate, OnYBeginSliderMovement) SLATE_EVENT(FOnNumericValueChanged, OnYEndSliderMovement)"
  },
  {
    "label": "FVectorZArguments()",
    "kind": "Method",
    "detail": "Function (struct FVectorZArgumentsEmpty { } ; template<ArgumentType> struct FVectorZArguments : FVectorZArgumentsEmpty { using WidgetArgsType = ArgumentType ; FORCENOINLINE)",
    "insertText": "FVectorZArguments() : _ToggleZChecked(ECheckBoxState::Checked)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<NumericType>, Z) SLATE_EVENT(FOnNumericValueChanged, OnZChanged) SLATE_EVENT(FOnNumericValueCommitted, OnZCommitted) SLATE_ATTRIBUTE( ECheckBoxState, ToggleZChecked ) SLATE_EVENT( FOnCheckStateChanged, OnToggleZChanged ) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtenderZ) SLATE_EVENT(FSimpleDelegate, OnZBeginSliderMovement) SLATE_EVENT(FOnNumericValueChanged, OnZEndSliderMovement)"
  },
  {
    "label": "FVectorWArguments()",
    "kind": "Method",
    "detail": "Function (struct FVectorWArgumentsEmpty { } ; template<ArgumentType> struct FVectorWArguments : FVectorWArgumentsEmpty { using WidgetArgsType = ArgumentType ; FORCENOINLINE)",
    "insertText": "FVectorWArguments() : _ToggleWChecked(ECheckBoxState::Checked)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<NumericType>, W) SLATE_EVENT(FOnNumericValueChanged, OnWChanged) SLATE_EVENT(FOnNumericValueCommitted, OnWCommitted) SLATE_ATTRIBUTE( ECheckBoxState, ToggleWChecked ) SLATE_EVENT( FOnCheckStateChanged, OnToggleWChanged ) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtenderW) SLATE_EVENT(FSimpleDelegate, OnWBeginSliderMovement) SLATE_EVENT(FOnNumericValueChanged, OnWEndSliderMovement)"
  },
  {
    "label": "FArguments()",
    "kind": "Method",
    "detail": "Function (public : struct FArguments : public TSlateBaseNamedArgs<ThisClass>,std::conditional<NumberOfComponents> = 1,FVectorXArguments<FArguments>,FVectorXArgumentsEmpty>::type,std::conditional<NumberOfComponents> = 2,FVectorYArguments<FArguments>,FVectorYArgumentsEmpty>::type,std::conditional<NumberOfComponents> = 3,FVectorZArguments<FArguments>,FVectorZArgumentsEmpty>::type,std::conditional<NumberOfComponents> = 4,FVectorWArguments<FArguments>,FVectorWArgumentsEmpty>::type { typedef FArguments WidgetArgsType ; FORCENOINLINE)",
    "insertText": "FArguments() : _EditableTextBoxStyle( &FAppStyle::Get().GetWidgetStyle<FEditableTextBoxStyle>(\"NormalEditableTextBox\") ) , _SpinBoxStyle(&FAppStyle::Get().GetWidgetStyle<FSpinBoxStyle>(\"NumericEntrySpinBox\") ) , _Font(FAppStyle::Get().GetFontStyle(\"NormalFont\")) , _AllowSpin(false) , _SpinDelta(1) , _LinearDeltaSensitivity(1) , _bColorAxisLabels(false) , _DisplayToggle(false) , _TogglePadding(FMargin(1.f,0.f,1.f,0.f))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<VectorType>, Vector) SLATE_ATTRIBUTE(TOptional<VectorType>, MinVector) SLATE_ATTRIBUTE(TOptional<VectorType>, MaxVector) SLATE_ATTRIBUTE(TOptional<VectorType>, MinSliderVector) SLATE_ATTRIBUTE(TOptional<VectorType>, MaxSliderVector) SLATE_EVENT(FOnVectorValueChanged, OnVectorChanged) SLATE_EVENT(FOnVectorValueCommitted, OnVectorCommitted) SLATE_STYLE_ARGUMENT( FEditableTextBoxStyle, EditableTextBoxStyle ) SLATE_STYLE_ARGUMENT( FSpinBoxStyle, SpinBoxStyle ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ARGUMENT( bool, AllowSpin ) SLATE_ATTRIBUTE( NumericType, SpinDelta ) SLATE_ATTRIBUTE( int32, LinearDeltaSensitivity ) SLATE_ARGUMENT( bool, bColorAxisLabels ) SLATE_EVENT( FSimpleDelegate, OnBeginSliderMovement ) SLATE_EVENT( FOnNumericValueChanged, OnEndSliderMovement ) SLATE_ARGUMENT( TSharedPtr< INumericTypeInterface<NumericType> >, TypeInterface ) SLATE_ARGUMENT( bool, DisplayToggle ) SLATE_ARGUMENT( FMargin, TogglePadding ) SLATE_ARGUMENT( FOnConstrainVector, ConstrainVector ) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (bUseVectorGetter = true ; TSharedRef<SHorizontalBox> HorizontalBox =)",
    "insertText": "SNew(SHorizontalBox)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChildSlot [ HorizontalBox ] ; VectorAttribute = InArgs . _Vector ; OnVectorValueChanged = InArgs . _OnVectorChanged ; OnVectorValueCommitted = InArgs . _OnVectorCommitted ;)",
    "insertText": "if(!VectorAttribute.IsBound() && !VectorAttribute.IsSet())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (bUseVectorGetter = false ; VectorAttribute = TAttribute<TOptional<VectorType>)",
    "insertText": "CreateLambda([InArgs]() -> TOptional<VectorType> { if constexpr (NumberOfComponents == 2) { TOptional<NumericType> X = InArgs._X.Get(); TOptional<NumericType> Y = InArgs._Y.Get(); if(X.IsSet() && Y.IsSet()) { return VectorType(X.GetValue(), Y.GetValue()); } } if constexpr (NumberOfComponents == 3) { TOptional<NumericType> X = InArgs._X.Get(); TOptional<NumericType> Y = InArgs._Y.Get(); TOptional<NumericType> Z = InArgs._Z.Get(); if(X.IsSet() && Y.IsSet() && Z.IsSet()) { return VectorType(X.GetValue(), Y.GetValue(), Z.GetValue()); } } if constexpr (NumberOfComponents == 4) { TOptional<NumericType> X = InArgs._X.Get(); TOptional<NumericType> Y = InArgs._Y.Get(); TOptional<NumericType> Z = InArgs._Z.Get(); TOptional<NumericType> W = InArgs._W.Get(); if(X.IsSet() && Y.IsSet() && Z.IsSet() && W.IsSet()) { return VectorType(X.GetValue(), Y.GetValue(), Z.GetValue(), W.GetValue()); } } return TOptional<VectorType>(); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!OnVectorValueChanged.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (OnVectorValueChanged =)",
    "insertText": "CreateLambda([InArgs](VectorType Vector) { if constexpr (NumberOfComponents >= 1) { InArgs._OnXChanged.ExecuteIfBound(Vector.X); } if constexpr (NumberOfComponents >= 2) { InArgs._OnYChanged.ExecuteIfBound(Vector.Y); } if constexpr (NumberOfComponents >= 3) { InArgs._OnZChanged.ExecuteIfBound(Vector.Z); } if constexpr (NumberOfComponents >= 4) { InArgs._OnWChanged.ExecuteIfBound(Vector.W); } })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!OnVectorValueCommitted.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (OnVectorValueCommitted =)",
    "insertText": "CreateLambda([InArgs](VectorType Vector, ETextCommit::Type CommitType) { if constexpr (NumberOfComponents >= 1) { InArgs._OnXCommitted.ExecuteIfBound(Vector.X, CommitType); } if constexpr (NumberOfComponents >= 2) { InArgs._OnYCommitted.ExecuteIfBound(Vector.Y, CommitType); } if constexpr (NumberOfComponents >= 3) { InArgs._OnZCommitted.ExecuteIfBound(Vector.Z, CommitType); } if constexpr (NumberOfComponents >= 4) { InArgs._OnWCommitted.ExecuteIfBound(Vector.W, CommitType); } })"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(NumberOfComponents >= 1)"
  },
  {
    "label": "ConstructX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructX(InArgs, HorizontalBox)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(NumberOfComponents >= 2)"
  },
  {
    "label": "ConstructY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructY(InArgs, HorizontalBox)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(NumberOfComponents >= 3)"
  },
  {
    "label": "ConstructZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructZ(InArgs, HorizontalBox)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(NumberOfComponents >= 4)"
  },
  {
    "label": "ConstructW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructW(InArgs, HorizontalBox)"
  },
  {
    "label": "ConstructComponent()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "ConstructComponent(int32 ComponentIndex, const FArguments& InArgs, const FLinearColor& LabelColor, const FText& TooltipText, TSharedRef<SHorizontalBox>& HorizontalBox, const TAttribute<TOptional<NumericType>>& Component, const FOnNumericValueChanged& OnComponentChanged, const FOnNumericValueCommitted& OnComponentCommitted, const TAttribute<ECheckBoxState> ToggleChecked, const FOnCheckStateChanged& OnToggleChanged, const FMenuExtensionDelegate& OnContextMenuExtenderComponent, const FSimpleDelegate& OnComponentBeginSliderMovement, const FOnNumericValueChanged& OnComponentEndSliderMovement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget> LabelWidget = SNullWidget::NullWidget ;)",
    "insertText": "if(InArgs._bColorAxisLabels)"
  },
  {
    "label": "BuildNarrowColorLabel()",
    "kind": "Method",
    "detail": "Function (LabelWidget = SNumericEntryBox<NumericType)",
    "insertText": "BuildNarrowColorLabel(LabelColor)"
  },
  {
    "label": "CreatePerComponentGetter()",
    "kind": "Method",
    "detail": "Function (} TAttribute<TOptional<NumericType>> Value =)",
    "insertText": "CreatePerComponentGetter(ComponentIndex, Component, VectorAttribute)"
  },
  {
    "label": "UseVectorGetterGuard()",
    "kind": "Method",
    "detail": "Function (TGuardValue<bool>)",
    "insertText": "UseVectorGetterGuard(bUseVectorGetter, true)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() [ SNew(SNumericEntryBox<NumericType>) .AllowSpin(InArgs._AllowSpin) .EditableTextBoxStyle(InArgs._EditableTextBoxStyle) .SpinBoxStyle(InArgs._SpinBoxStyle) .Font(InArgs._Font) .Value(Value) .OnValueChanged(CreatePerComponentChanged(ComponentIndex, OnComponentChanged, InArgs._ConstrainVector)) .OnValueCommitted(CreatePerComponentCommitted(ComponentIndex, OnComponentCommitted, InArgs._ConstrainVector)) .ToolTipText(MakeAttributeLambda([Value, TooltipText] { if (Value.Get().IsSet()) { return FText::Format(TooltipText, Value.Get().GetValue()); } return NSLOCTEXT(\"SVectorInputBox\", \"MultipleValues\", \"Multiple Values\"); })) .UndeterminedString(NSLOCTEXT(\"SVectorInputBox\", \"MultipleValues\", \"Multiple Values\")) .ContextMenuExtender(OnContextMenuExtenderComponent) .TypeInterface(InArgs._TypeInterface) .MinValue(CreatePerComponentGetter(ComponentIndex, TOptional<NumericType>(), InArgs._MinVector)) .MaxValue(CreatePerComponentGetter(ComponentIndex, TOptional<NumericType>(), InArgs._MaxVector)) .MinSliderValue(CreatePerComponentGetter(ComponentIndex, TOptional<NumericType>(), InArgs._MinSliderVector)) .MaxSliderValue(CreatePerComponentGetter(ComponentIndex, TOptional<NumericType>(), InArgs._MaxSliderVector)) .LinearDeltaSensitivity(InArgs._LinearDeltaSensitivity) .Delta(InArgs._SpinDelta) .OnBeginSliderMovement(CreatePerComponentSliderMovementEvent(InArgs._OnBeginSliderMovement, OnComponentBeginSliderMovement)) .OnEndSliderMovement(CreatePerComponentSliderMovementEvent<FOnNumericValueChanged, NumericType>(InArgs._OnEndSliderMovement, OnComponentEndSliderMovement)) .LabelPadding(FMargin(3.f)) .LabelLocation(SNumericEntryBox<NumericType>::ELabelLocation::Inside) .Label() [ LabelWidget ] .DisplayToggle(InArgs._DisplayToggle) .TogglePadding(InArgs._TogglePadding) .ToggleChecked(ToggleChecked) .OnToggleChanged(OnToggleChanged)"
  },
  {
    "label": "ConstructX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructX(const FArguments& InArgs, TSharedRef<SHorizontalBox> HorizontalBox)"
  },
  {
    "label": "ConstructComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructComponent(0, InArgs, SNumericEntryBox<NumericType>::RedLabelBackgroundColor, NSLOCTEXT(\"SVectorInputBox\", \"X_ToolTip\", \"X: {0}\"), HorizontalBox, InArgs._X, InArgs._OnXChanged, InArgs._OnXCommitted, InArgs._ToggleXChecked, InArgs._OnToggleXChanged, InArgs._ContextMenuExtenderX, InArgs._OnXBeginSliderMovement, InArgs._OnXEndSliderMovement)"
  },
  {
    "label": "ConstructY()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructY(const FArguments& InArgs, TSharedRef<SHorizontalBox> HorizontalBox)"
  },
  {
    "label": "ConstructComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructComponent(1, InArgs, SNumericEntryBox<NumericType>::GreenLabelBackgroundColor, NSLOCTEXT(\"SVectorInputBox\", \"Y_ToolTip\", \"Y: {0}\"), HorizontalBox, InArgs._Y, InArgs._OnYChanged, InArgs._OnYCommitted, InArgs._ToggleYChecked, InArgs._OnToggleYChanged, InArgs._ContextMenuExtenderY, InArgs._OnYBeginSliderMovement, InArgs._OnYEndSliderMovement)"
  },
  {
    "label": "ConstructZ()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructZ(const FArguments& InArgs, TSharedRef<SHorizontalBox> HorizontalBox)"
  },
  {
    "label": "ConstructComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructComponent(2, InArgs, SNumericEntryBox<NumericType>::BlueLabelBackgroundColor, NSLOCTEXT(\"SVectorInputBox\", \"Z_ToolTip\", \"Z: {0}\"), HorizontalBox, InArgs._Z, InArgs._OnZChanged, InArgs._OnZCommitted, InArgs._ToggleZChecked, InArgs._OnToggleZChanged, InArgs._ContextMenuExtenderZ, InArgs._OnZBeginSliderMovement, InArgs._OnZEndSliderMovement)"
  },
  {
    "label": "ConstructW()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructW(const FArguments& InArgs, TSharedRef<SHorizontalBox> HorizontalBox)"
  },
  {
    "label": "ConstructComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructComponent(3, InArgs, SNumericEntryBox<NumericType>::LilacLabelBackgroundColor, NSLOCTEXT(\"SVectorInputBox\", \"W_ToolTip\", \"W: {0}\"), HorizontalBox, InArgs._W, InArgs._OnWChanged, InArgs._OnWCommitted, InArgs._ToggleWChecked, InArgs._OnToggleWChanged, InArgs._ContextMenuExtenderW, InArgs._OnWBeginSliderMovement, InArgs._OnWEndSliderMovement)"
  },
  {
    "label": "CreatePerComponentGetter()",
    "kind": "Method",
    "detail": "Function (} TAttribute<TOptional<NumericType>>)",
    "insertText": "CreatePerComponentGetter(int32 ComponentIndex, const TAttribute<TOptional<NumericType>>& Component, const TAttribute<TOptional<VectorType>>& Vector)"
  },
  {
    "label": "CreatePerComponentChanged()",
    "kind": "Method",
    "detail": "Function (} return Component ; } FOnNumericValueChanged)",
    "insertText": "CreatePerComponentChanged(int32 ComponentIndex, const FOnNumericValueChanged OnComponentChanged, const FOnConstrainVector ConstrainVector)"
  },
  {
    "label": "CreatePerComponentCommitted()",
    "kind": "Method",
    "detail": "Function (} return OnComponentChanged ; } FOnNumericValueCommitted)",
    "insertText": "CreatePerComponentCommitted(int32 ComponentIndex, const FOnNumericValueCommitted OnComponentCommitted, const FOnConstrainVector ConstrainVector)"
  },
  {
    "label": "CreatePerComponentSliderMovementEvent()",
    "kind": "Method",
    "detail": "Function (} return OnComponentCommitted ; } template<EventType,. . . ArgsType> EventType)",
    "insertText": "CreatePerComponentSliderMovementEvent(const EventType OnSliderMovement, const EventType OnComponentSliderMovement)"
  }
]