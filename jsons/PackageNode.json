[
  {
    "label": "FPackageNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageNode"
  },
  {
    "label": "FTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskNode"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsCore / Table / ViewModels / TableTreeNode . h \" # include \" Insights / CookProfiler / ViewModels / PackageTable . h \" # include \" Insights / CookProfiler / ViewModels / PackageEntry . h \" namespace UE::Insights::CookProfiler { class FPackageNode ; typedef TSharedPtr<class FPackageNode> FPackageNodePtr ; typedef TSharedRef<class FPackageNode> FPackageNodeRef ; typedef TSharedRef<const class FPackageNode> FPackageNodeRefConst ; typedef TWeakPtr<class FTaskNode> FPackageNodeWeak ; class FPackageNode : public FTableTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FPackageNode, FTableTreeNode) public: explicit FPackageNode(const FName InName, TWeakPtr<FPackageTable> InParentTable, int32 InRowIndex) : FTableTreeNode(InName, InParentTable, InRowIndex)"
  },
  {
    "label": "FPackageNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPackageNode(const FName InGroupName, TWeakPtr<FPackageTable> InParentTable) : FTableTreeNode(InGroupName, InParentTable)"
  },
  {
    "label": "GetPackageTableChecked()",
    "kind": "Method",
    "detail": "Function (} FPackageTable&)",
    "insertText": "GetPackageTableChecked()"
  },
  {
    "label": "GetParentTable()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FTable>& TablePin =)",
    "insertText": "GetParentTable().Pin()"
  },
  {
    "label": "IsValidPackage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidPackage()"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} const FPackageEntry*)",
    "insertText": "GetPackage()"
  },
  {
    "label": "GetPackageChecked()",
    "kind": "Method",
    "detail": "Function (} const FPackageEntry&)",
    "insertText": "GetPackageChecked()"
  }
]