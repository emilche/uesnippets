[
  {
    "label": "FGenericWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericWindow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITextInputMethodSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodSystem"
  },
  {
    "label": "FForceFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackValues"
  },
  {
    "label": "FHapticFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHapticFeedbackValues"
  },
  {
    "label": "FWindowsWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsWindow"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTaskbarList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskbarList"
  },
  {
    "label": "FDeferredWindowsMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredWindowsMessage"
  },
  {
    "label": "FDragDropOLEData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDragDropOLEData"
  },
  {
    "label": "EWindowsOLEDataType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWindowsOLEDataType"
  },
  {
    "label": "FDeferredWindowsDragDropOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredWindowsDragDropOperation"
  },
  {
    "label": "IWindowsMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWindowsMessageHandler"
  },
  {
    "label": "FWindowsApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsApplication"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "EModifierKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EModifierKey"
  },
  {
    "label": "FWindowsUIAManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsUIAManager"
  },
  {
    "label": "TouchInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TouchInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" HAL / IConsoleManager . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" Windows / AllowWindowsPlatformTypes . h \" # include<Ole2 . h> # include<oleidl . h> # include<ShObjIdl . h> # include \" Windows / HideWindowsPlatformTypes . h \" # include \" Windows / WindowsTextInputMethodSystem . h \" class FGenericWindow ; enum class EWindowTransparency ; class ITextInputMethodSystem ; enum class FForceFeedbackChannelType ; struct FForceFeedbackValues ; struct FHapticFeedbackValues ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogWindowsDesktop, Log, All)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (class FWindowsWindow ; class FGenericApplicationMessageHandler ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWindowsApplication_OnWindowCreated, HWND)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (namespace ETaskbarProgressState { enum Type { NoProgress = 0 x0,Indeterminate = 0 x1,Normal = 0 x2,Error = 0 x4,Paused = 0 x8,} ; } class FTaskbarList { public : TSharedRef<FTaskbarList>)",
    "insertText": "Create()"
  },
  {
    "label": "SetOverlayIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlayIcon(HWND WindowHandle, HICON Icon, FText Description)"
  },
  {
    "label": "SetProgressState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgressState(HWND WindowHandle, ETaskbarProgressState::Type State)"
  },
  {
    "label": "SetProgressValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgressValue(HWND WindowHandle, uint64 Current, uint64 Total)"
  },
  {
    "label": "FTaskbarList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTaskbarList()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "FDeferredWindowsMessage()",
    "kind": "Method",
    "detail": "Function (private : ITaskbarList3* TaskBarList3 ; } ; struct FDeferredWindowsMessage {)",
    "insertText": "FDeferredWindowsMessage(const TSharedPtr<FWindowsWindow>& InNativeWindow, HWND InHWnd, uint32 InMessage, WPARAM InWParam, LPARAM InLParam, int32 InX=0, int32 InY=0, uint32 InRawInputFlags = 0 ) : NativeWindow( InNativeWindow ) , hWND( InHWnd ) , Message( InMessage ) , wParam( InWParam ) , lParam( InLParam ) , X( InX ) , Y( InY ) , RawInputFlags( InRawInputFlags)"
  },
  {
    "label": "FDragDropOLEData()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<FWindowsWindow> NativeWindow ; HWND hWND ; uint32 Message ; WPARAM wParam ; LPARAM lParam ; int32 X ; int32 Y ; uint32 RawInputFlags ; } ; namespace EWindowsDragDropOperationType { enum Type { DragEnter,DragOver,DragLeave,Drop } ; } struct FDragDropOLEData { enum EWindowsOLEDataType { None = 0,Text = 1<<0,Files = 1<<1,} ;)",
    "insertText": "FDragDropOLEData() : Type(None)"
  },
  {
    "label": "FDeferredWindowsDragDropOperation()",
    "kind": "Method",
    "detail": "Function (} FString OperationText ; TArray<FString> OperationFilenames ; uint8 Type ; } ; struct FDeferredWindowsDragDropOperation { private :)",
    "insertText": "FDeferredWindowsDragDropOperation() : HWnd(NULL) , KeyState(0)"
  },
  {
    "label": "MakeDragEnter()",
    "kind": "Method",
    "detail": "Function (CursorPosition . x = 0 ; CursorPosition . y = 0 ; } public : FDeferredWindowsDragDropOperation)",
    "insertText": "MakeDragEnter(HWND InHwnd, const FDragDropOLEData& InOLEData, ::DWORD InKeyState, POINTL InCursorPosition)"
  },
  {
    "label": "MakeDragOver()",
    "kind": "Method",
    "detail": "Function (FDeferredWindowsDragDropOperation NewOperation ; NewOperation . OperationType = EWindowsDragDropOperationType::DragEnter ; NewOperation . HWnd = InHwnd ; NewOperation . OLEData = InOLEData ; NewOperation . KeyState = InKeyState ; NewOperation . CursorPosition = InCursorPosition ; return NewOperation ; } FDeferredWindowsDragDropOperation)",
    "insertText": "MakeDragOver(HWND InHwnd, ::DWORD InKeyState, POINTL InCursorPosition)"
  },
  {
    "label": "MakeDragLeave()",
    "kind": "Method",
    "detail": "Function (FDeferredWindowsDragDropOperation NewOperation ; NewOperation . OperationType = EWindowsDragDropOperationType::DragOver ; NewOperation . HWnd = InHwnd ; NewOperation . KeyState = InKeyState ; NewOperation . CursorPosition = InCursorPosition ; return NewOperation ; } FDeferredWindowsDragDropOperation)",
    "insertText": "MakeDragLeave(HWND InHwnd)"
  },
  {
    "label": "MakeDrop()",
    "kind": "Method",
    "detail": "Function (FDeferredWindowsDragDropOperation NewOperation ; NewOperation . OperationType = EWindowsDragDropOperationType::DragLeave ; NewOperation . HWnd = InHwnd ; return NewOperation ; } FDeferredWindowsDragDropOperation)",
    "insertText": "MakeDrop(HWND InHwnd, const FDragDropOLEData& InOLEData, ::DWORD InKeyState, POINTL InCursorPosition)"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (FDeferredWindowsDragDropOperation NewOperation ; NewOperation . OperationType = EWindowsDragDropOperationType::Drop ; NewOperation . HWnd = InHwnd ; NewOperation . OLEData = InOLEData ; NewOperation . KeyState = InKeyState ; NewOperation . CursorPosition = InCursorPosition ; return NewOperation ; } EWindowsDragDropOperationType::Type OperationType ; HWND HWnd ; FDragDropOLEData OLEData ;::DWORD KeyState ; POINTL CursorPosition ; } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class IWindowsMessageHandler { public : bool)",
    "insertText": "ProcessMessage(HWND hwnd, uint32 msg, WPARAM wParam, LPARAM lParam, int32& OutResult)"
  },
  {
    "label": "CreateWindowsApplication()",
    "kind": "Method",
    "detail": "Function (} ; class FWindowsApplication : public GenericApplication,public IInputInterface { public : FWindowsApplication*)",
    "insertText": "CreateWindowsApplication(const HINSTANCE InstanceHandle, const HICON IconHandle)"
  },
  {
    "label": "FWindowsApplication()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWindowsApplication()"
  },
  {
    "label": "DeferDragDropOperation()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DeferDragDropOperation(const FDeferredWindowsDragDropOperation& DeferredDragDropOperation)"
  },
  {
    "label": "GetTaskbarList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTaskbarList>)",
    "insertText": "GetTaskbarList()"
  },
  {
    "label": "OnOLEDragEnter()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "OnOLEDragEnter(const HWND HWnd, const FDragDropOLEData& OLEData, ::DWORD KeyState, POINTL CursorPosition, ::DWORD *CursorEffect)"
  },
  {
    "label": "OnOLEDragOver()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "OnOLEDragOver(const HWND HWnd, ::DWORD KeyState, POINTL CursorPosition, ::DWORD *CursorEffect)"
  },
  {
    "label": "OnOLEDragOut()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "OnOLEDragOut(const HWND HWnd)"
  },
  {
    "label": "OnOLEDrop()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "OnOLEDrop(const HWND HWnd, const FDragDropOLEData& OLEData, ::DWORD KeyState, POINTL CursorPosition, ::DWORD *CursorEffect)"
  },
  {
    "label": "AddMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessageHandler(IWindowsMessageHandler& InMessageHandler)"
  },
  {
    "label": "RemoveMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMessageHandler(IWindowsMessageHandler& InMessageHandler)"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetMessageHandler(const TSharedRef< class FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "SetAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY void)",
    "insertText": "SetAccessibleMessageHandler(const TSharedRef<FGenericAccessibleMessageHandler>& InAccessibleMessageHandler)"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PollGameDeviceState(const float TimeDelta)"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages(const float TimeDelta)"
  },
  {
    "label": "ProcessDeferredEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredEvents(const float TimeDelta)"
  },
  {
    "label": "MakeWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGenericWindow>)",
    "insertText": "MakeWindow()"
  },
  {
    "label": "InitializeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWindow(const TSharedRef< FGenericWindow >& Window, const TSharedRef< FGenericWindowDefinition >& InDefinition, const TSharedPtr< FGenericWindow >& InParent, const bool bShowImmediately)"
  },
  {
    "label": "SetCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCapture(const TSharedPtr< FGenericWindow >& InWindow)"
  },
  {
    "label": "GetCapture()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCapture(void)"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "IsUsingHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHighPrecisionMouseMode()"
  },
  {
    "label": "GetModifierKeys()",
    "kind": "Method",
    "detail": "Function (FModifierKeysState)",
    "insertText": "GetModifierKeys()"
  },
  {
    "label": "IsCursorDirectlyOverSlateWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCursorDirectlyOverSlateWindow()"
  },
  {
    "label": "GetWorkArea()",
    "kind": "Method",
    "detail": "Function (FPlatformRect)",
    "insertText": "GetWorkArea(const FPlatformRect& CurrentWindow)"
  },
  {
    "label": "GetInitialDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInitialDisplayMetrics(FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "GetWindowTitleAlignment()",
    "kind": "Method",
    "detail": "Function (EWindowTitleAlignment::Type)",
    "insertText": "GetWindowTitleAlignment()"
  },
  {
    "label": "GetWindowTransparencySupport()",
    "kind": "Method",
    "detail": "Function (EWindowTransparency)",
    "insertText": "GetWindowTransparencySupport()"
  },
  {
    "label": "DestroyApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyApplication()"
  },
  {
    "label": "GetInputInterface()",
    "kind": "Method",
    "detail": "Function (IInputInterface*)",
    "insertText": "GetInputInterface()"
  },
  {
    "label": "AddExternalInputDevice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExternalInputDevice(TSharedPtr<class IInputDevice> InputDevice)"
  },
  {
    "label": "FinishedInputThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedInputThisFrame()"
  },
  {
    "label": "SetForceFeedbackChannelValue()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetForceFeedbackChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value)"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &Values)"
  },
  {
    "label": "SetHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticFeedbackValues(int32 ControllerId, int32 Hand, const FHapticFeedbackValues& Values)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  },
  {
    "label": "SetDeviceProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDeviceProperty(int32 ControllerId, const FInputDeviceProperty* Property)"
  },
  {
    "label": "WindowsApplication_WndProc()",
    "kind": "Method",
    "detail": "Function (protected : LRESULT)",
    "insertText": "WindowsApplication_WndProc(HWND hwnd, uint32 msg, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "AppWndProc()",
    "kind": "Method",
    "detail": "Function (LRESULT CALLBACK)",
    "insertText": "AppWndProc(HWND hwnd, uint32 msg, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessMessage(HWND hwnd, uint32 msg, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "ProcessDeferredMessage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessDeferredMessage(const FDeferredWindowsMessage& DeferredMessage)"
  },
  {
    "label": "ProcessDeferredDragDropOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredDragDropOperation(const FDeferredWindowsDragDropOperation& Op)"
  },
  {
    "label": "FWindowsApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWindowsApplication(const HINSTANCE HInstance, const HICON IconHandle)"
  },
  {
    "label": "ApplyLowLevelMouseFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLowLevelMouseFilter()"
  },
  {
    "label": "RemoveLowLevelMouseFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLowLevelMouseFilter()"
  },
  {
    "label": "HandleLowLevelMouseFilterHook()",
    "kind": "Method",
    "detail": "Function (LRESULT CALLBACK)",
    "insertText": "HandleLowLevelMouseFilterHook(int nCode, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "RegisterClass()",
    "kind": "Method",
    "detail": "Function (HHOOK LowLevelMouseFilterHook ; bool bLowLevelMouseFilterIsApplied = false ; private : bool)",
    "insertText": "RegisterClass(const HINSTANCE HInstance, const HICON HIcon)"
  },
  {
    "label": "IsKeyboardInputMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyboardInputMessage(uint32 msg)"
  },
  {
    "label": "IsMouseInputMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMouseInputMessage(uint32 msg)"
  },
  {
    "label": "IsFakeMouseInputMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFakeMouseInputMessage(uint32 msg)"
  },
  {
    "label": "IsInputMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputMessage(uint32 msg)"
  },
  {
    "label": "DeferMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferMessage(TSharedPtr<FWindowsWindow>& NativeWindow, HWND InHWnd, uint32 InMessage, WPARAM InWParam, LPARAM InLParam, int32 MouseX = 0, int32 MouseY = 0, uint32 RawInputFlags = 0)"
  },
  {
    "label": "CheckForShiftUpEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForShiftUpEvents(const int32 KeyCode)"
  },
  {
    "label": "ShutDownAfterError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutDownAfterError()"
  },
  {
    "label": "AllowAccessibilityShortcutKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowAccessibilityShortcutKeys(const bool bAllowKeys)"
  },
  {
    "label": "QueryConnectedMice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryConnectedMice()"
  },
  {
    "label": "GetTouchIndexForID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTouchIndexForID(int32 TouchID)"
  },
  {
    "label": "GetFirstFreeTouchIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFirstFreeTouchIndex()"
  },
  {
    "label": "UpdateAllModifierKeyStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllModifierKeyStates()"
  },
  {
    "label": "GetWorkAreaFromOS()",
    "kind": "Method",
    "detail": "Function (FPlatformRect)",
    "insertText": "GetWorkAreaFromOS(const FPlatformRect& CurrentWindow)"
  },
  {
    "label": "TouchInfo()",
    "kind": "Method",
    "detail": "Function (private : const FIntPoint MinimizedWindowPosition ; HINSTANCE InstanceHandle ; bool bMinimized ; bool bUsingHighPrecisionMouseInput ; bool bIsMouseAttached ; bool bForceActivateByMouse ; bool bForceNoGamepads ; bool bConsumeAltSpace ; TArray<FDeferredWindowsMessage> DeferredMessages ; TArray<FDeferredWindowsDragDropOperation> DeferredDragDropOperations ; TArray<IWindowsMessageHandler*> MessageHandlers ; TArray<TSharedRef<FWindowsWindow>> Windows ; TArray<TSharedPtr<class IInputDevice>> ExternalInputDevices ; bool bHasLoadedInputPlugins ; struct EModifierKey { enum Type { LeftShift,RightShift,LeftControl,RightControl,LeftAlt,RightAlt,CapsLock,Count,} ; } ; bool ModifierKeyState [ EModifierKey::Count ] ; int32 bAllowedToDeferMessageProcessing ; FAutoConsoleVariableRef CVarDeferMessageProcessing ; bool bInModalSizeLoop ; FDisplayMetrics InitialDisplayMetrics ; TSharedPtr<FWindowsTextInputMethodSystem> TextInputMethodSystem ; TSharedPtr<FTaskbarList> TaskbarList ; # if WITH_ACCESSIBILITY&& UE_WINDOWS_USING_UIA TUniquePtr<class FWindowsUIAManager> UIAManager ; # endif STICKYKEYS StartupStickyKeys ; TOGGLEKEYS StartupToggleKeys ; FILTERKEYS StartupFilterKeys ; struct TouchInfo { bool HasMoved ; FVector2D PreviousLocation ; TOptional<int32> TouchID ;)",
    "insertText": "TouchInfo() : HasMoved(false) , PreviousLocation(0.f, 0.f)"
  }
]