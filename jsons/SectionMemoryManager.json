[
  {
    "label": "SectionMemoryManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SectionMemoryManager"
  },
  {
    "label": "MemoryGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryGroup"
  },
  {
    "label": "SectionMemoryManager()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_SECTIONMEMORYMANAGER_H # define LLVM_EXECUTIONENGINE_SECTIONMEMORYMANAGER_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ExecutionEngine / RTDyldMemoryManager . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / Memory . h \" namespace llvm { class SectionMemoryManager : public RTDyldMemoryManager {)",
    "insertText": "SectionMemoryManager(const SectionMemoryManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const SectionMemoryManager&)"
  },
  {
    "label": "SectionMemoryManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SectionMemoryManager()"
  },
  {
    "label": "allocateCodeSection()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "allocateCodeSection(uintptr_t Size, unsigned Alignment, unsigned SectionID, StringRef SectionName)"
  },
  {
    "label": "allocateDataSection()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "allocateDataSection(uintptr_t Size, unsigned Alignment, unsigned SectionID, StringRef SectionName, bool isReadOnly)"
  },
  {
    "label": "finalizeMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "finalizeMemory(std::string *ErrMsg = nullptr)"
  },
  {
    "label": "invalidateInstructionCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidateInstructionCache()"
  },
  {
    "label": "allocateSection()",
    "kind": "Method",
    "detail": "Function (private : struct MemoryGroup { SmallVector<sys::MemoryBlock,1 6> AllocatedMem ; SmallVector<sys::MemoryBlock,1 6> FreeMem ; sys::MemoryBlock Near ; } ; uint8_t*)",
    "insertText": "allocateSection(MemoryGroup &MemGroup, uintptr_t Size, unsigned Alignment)"
  },
  {
    "label": "applyMemoryGroupPermissions()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "applyMemoryGroupPermissions(MemoryGroup &MemGroup, unsigned Permissions)"
  }
]