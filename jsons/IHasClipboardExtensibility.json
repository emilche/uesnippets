[
  {
    "label": "FExportObjectInnerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExportObjectInnerContext"
  },
  {
    "label": "UExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExporter"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "FExportArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportArgs"
  },
  {
    "label": "IHasClipboardExtensibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHasClipboardExtensibility"
  },
  {
    "label": "AppendToClipboard()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Misc / OutputDevice . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / PropertyPortFlags . h \" class FExportObjectInnerContext ; class UExporter ; class UWidget ; class UWidgetBlueprint ; class IClipboardExtension { public : struct FExportArgs { const FExportObjectInnerContext* Context = nullptr ; UExporter* Exporter = nullptr ; FOutputDevice* Out = nullptr ; const TCHAR* FileType = nullptr ; int32 Indent = 0 ; uint32 PortFlags = PPF_None ; bool bSelectedOnly = false ; UObject* ExportRootScope = nullptr ; } ; void)",
    "insertText": "AppendToClipboard(const UWidget* Widget, const FExportArgs& ExportArgs)"
  },
  {
    "label": "CanAppendToClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAppendToClipboard(const UWidget* Widget)"
  },
  {
    "label": "ProcessImportedText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessImportedText(const UWidgetBlueprint* WidgetBlueprint, const FString& TextToImport, UPackage*& TempPackage)"
  },
  {
    "label": "CanImportFromClipboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImportFromClipboard(const UWidget* Widget)"
  },
  {
    "label": "ImportDataToWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportDataToWidget(const UWidget* Widget, FName OldWidgetName)"
  },
  {
    "label": "CanWidgetAcceptPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanWidgetAcceptPaste(const UWidget* Widget)"
  },
  {
    "label": "IClipboardExtension()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IClipboardExtension()"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (} } ; class FClipboardExtensibilityManager { public : void)",
    "insertText": "AddExtension(const TSharedRef<IClipboardExtension>& Extension)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Extensions .)",
    "insertText": "Add(Extension)"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveExtension(const TSharedRef<IClipboardExtension>& Extension)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (int32 NumRemoved = Extensions .)",
    "insertText": "RemoveSingleSwap(Extension)"
  },
  {
    "label": "GetExtensions()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<const TSharedPtr<IClipboardExtension>>)",
    "insertText": "GetExtensions()"
  }
]