[
  {
    "label": "FContiguousSparse2DKernelTransform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContiguousSparse2DKernelTransform"
  },
  {
    "label": "FRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRow"
  },
  {
    "label": "ArraySum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySum(TArrayView<const float> InValues, float& OutSum)"
  },
  {
    "label": "ArraySum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySum(TArrayView<const float> InFloatBuffer1, TArrayView<const float> InFloatBuffer2, TArrayView<float> OutputBuffer)"
  },
  {
    "label": "ArrayCumulativeSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayCumulativeSum(TArrayView<const float> InView, TArray<float>& OutData)"
  },
  {
    "label": "ArrayMean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMean(TArrayView<const float> InView, float& OutMean)"
  },
  {
    "label": "ArrayMeanSquared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMeanSquared(TArrayView<const float> InView, float& OutMean)"
  },
  {
    "label": "ArrayGetMagnitude()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ArrayGetMagnitude(TArrayView<const float> Buffer)"
  },
  {
    "label": "ArrayGetAverageValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ArrayGetAverageValue(TArrayView<const float> Buffer)"
  },
  {
    "label": "ArrayGetAverageAbsValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ArrayGetAverageAbsValue(TArrayView<const float> Buffer)"
  },
  {
    "label": "ArrayMeanFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMeanFilter(TArrayView<const float> InView, int32 WindowSize, int32 WindowOrigin, TArray<float>& OutData)"
  },
  {
    "label": "ArrayMaxFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMaxFilter(TArrayView<const float> InView, int32 WindowSize, int32 WindowOrigin, TArray<float>& OutData)"
  },
  {
    "label": "ArrayGetEuclideanNorm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayGetEuclideanNorm(TArrayView<const float> InView, float& OutEuclideanNorm)"
  },
  {
    "label": "ArrayAbs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayAbs(TArrayView<const float> InBuffer, TArrayView<float> OutBuffer)"
  },
  {
    "label": "ArrayAbsInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayAbsInPlace(TArrayView<float> InBuffer)"
  },
  {
    "label": "ArrayClampMinInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayClampMinInPlace(TArrayView<float> InView, float InMin)"
  },
  {
    "label": "ArrayClampMaxInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayClampMaxInPlace(TArrayView<float> InView, float InMax)"
  },
  {
    "label": "ArrayClampInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayClampInPlace(TArrayView<float> InView, float InMin, float InMax)"
  },
  {
    "label": "ArrayMinMaxNormalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMinMaxNormalize(TArrayView<const float> InView, TArray<float>& OutArray)"
  },
  {
    "label": "ArrayMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMax(const TArrayView<const float>& InView1, const TArrayView<const float>& InView2, const TArrayView<float>& OutView)"
  },
  {
    "label": "ArrayMaxAbsValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ArrayMaxAbsValue(const TArrayView<const float> InView)"
  },
  {
    "label": "ArrayMultiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMultiply(TArrayView<const float> InFloatBufferA, TArrayView<const float> InFloatBufferB, TArrayView<float> OutBuffer)"
  },
  {
    "label": "ArrayMultiplyInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMultiplyInPlace(TArrayView<const float> InFloatBuffer, TArrayView<float> BufferToMultiply)"
  },
  {
    "label": "ArrayComplexMultiplyInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayComplexMultiplyInPlace(TArrayView<const float> InValues1, TArrayView<float> InValues2)"
  },
  {
    "label": "ArrayComplexMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayComplexMultiplyAdd(TArrayView<const float> InValues1, TArrayView<const float> InValues2, TArrayView<float> OutArray)"
  },
  {
    "label": "ArrayMultiplyByConstant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMultiplyByConstant(TArrayView<const float> InFloatBuffer, float InValue, TArrayView<float> OutFloatBuffer)"
  },
  {
    "label": "ArrayMultiplyByConstantInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMultiplyByConstantInPlace(TArrayView<float> InOutBuffer, float InGain)"
  },
  {
    "label": "ArrayAddInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayAddInPlace(TArrayView<const float> InValues, TArrayView<float> InAccumulateValues)"
  },
  {
    "label": "ArrayAddConstantInplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayAddConstantInplace(TArrayView<float> InOutBuffer, float InConstant)"
  },
  {
    "label": "ArrayMultiplyAddInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMultiplyAddInPlace(TArrayView<const float> InValues, float InMultiplier, TArrayView<float> InAccumulateValues)"
  },
  {
    "label": "ArrayLerpAddInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayLerpAddInPlace(TArrayView<const float> InValues, float InStartMultiplier, float InEndMultiplier, TArrayView<float> InAccumulateValues)"
  },
  {
    "label": "ArraySubtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySubtract(TArrayView<const float> InMinuend, TArrayView<const float> InSubtrahend, TArrayView<float> OutBuffer)"
  },
  {
    "label": "ArraySubtractInPlace1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySubtractInPlace1(TArrayView<const float> InMinuend, TArrayView<float> InOutSubtrahend)"
  },
  {
    "label": "ArraySubtractInPlace2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySubtractInPlace2(TArrayView<float> InOutMinuend, TArrayView<const float> InSubtrahend)"
  },
  {
    "label": "ArraySubtractByConstantInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySubtractByConstantInPlace(TArrayView<float> InValues, float InSubtrahend)"
  },
  {
    "label": "ArraySquare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySquare(TArrayView<const float> InValues, TArrayView<float> OutValues)"
  },
  {
    "label": "ArraySquareInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySquareInPlace(TArrayView<float> InValues)"
  },
  {
    "label": "ArraySqrtInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySqrtInPlace(TArrayView<float> InValues)"
  },
  {
    "label": "ArrayComplexConjugate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayComplexConjugate(TArrayView<const float> InValues, TArrayView<float> OutValues)"
  },
  {
    "label": "ArrayComplexConjugateInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayComplexConjugateInPlace(TArrayView<float> InValues)"
  },
  {
    "label": "ArrayMagnitudeToDecibelInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMagnitudeToDecibelInPlace(TArrayView<float> InValues, float InMinimumDb)"
  },
  {
    "label": "ArrayPowerToDecibelInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayPowerToDecibelInPlace(TArrayView<float> InValues, float InMinimumDb)"
  },
  {
    "label": "ArrayComplexToPower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayComplexToPower(TArrayView<const float> InComplexSamples, TArrayView<float> OutPowerSamples)"
  },
  {
    "label": "ArrayComplexToPower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayComplexToPower(TArrayView<const float> InRealSamples, TArrayView<const float> InImaginarySamples, TArrayView<float> OutPowerSamples)"
  },
  {
    "label": "ArrayUnderflowClamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayUnderflowClamp(TArrayView<float> InOutBuffer)"
  },
  {
    "label": "ArrayRangeClamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayRangeClamp(TArrayView<float> InOutBuffer, float InMinValue, float InMaxValue)"
  },
  {
    "label": "ArraySetToConstantInplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArraySetToConstantInplace(TArrayView<float> InOutBuffer, float InConstant)"
  },
  {
    "label": "ArrayWeightedSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayWeightedSum(TArrayView<const float> InBuffer1, float InGain1, TArrayView<const float> InBuffer2, float InGain2, TArrayView<float> OutBuffer)"
  },
  {
    "label": "ArrayWeightedSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayWeightedSum(TArrayView<const float> InBuffer1, float InGain1, TArrayView<const float> InBuffer2, TArrayView<float> OutBuffer)"
  },
  {
    "label": "ArrayFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFade(TArrayView<float> InOutBuffer, const float StartValue, const float EndValue)"
  },
  {
    "label": "ArrayFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFade(TArrayView<const float> InBuffer, const float InStartValue, const float InEndValue, TArrayView<float> OutBuffer)"
  },
  {
    "label": "ArrayMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMixIn(TArrayView<const float> InFloatBuffer, TArrayView<float> BufferToSumTo, const float Gain)"
  },
  {
    "label": "ArrayMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMixIn(TArrayView<const float> InFloatBuffer, TArrayView<float> BufferToSumTo)"
  },
  {
    "label": "ArrayMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMixIn(TArrayView<const int16> InPcm16Buffer, TArrayView<float> BufferToSumTo, const float Gain = 1.0f)"
  },
  {
    "label": "ArrayMixIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayMixIn(TArrayView<const float> InFloatBuffer, TArrayView<float> BufferToSumTo, const float StartGain, const float EndGain)"
  },
  {
    "label": "ArrayFloatToPcm16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatToPcm16(TArrayView<const float> InView, TArrayView<int16> OutView)"
  },
  {
    "label": "ArrayPcm16ToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayPcm16ToFloat(TArrayView<const int16> InView, TArrayView<float> OutView)"
  },
  {
    "label": "ArrayFloatToPcm24()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatToPcm24(TArrayView<const float> InView, TArrayView<int8> OutView)"
  },
  {
    "label": "AssignPcm24Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignPcm24Value(int8* OutPtr, const int32 InValue, const bool bIsOutputLittleEndian)"
  },
  {
    "label": "ArrayFloatToPcm32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatToPcm32(TArrayView<const float> InView, TArrayView<int32> OutView)"
  },
  {
    "label": "ArrayFloatToPcmDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatToPcmDouble(TArrayView<const float> InView, TArrayView<double> OutView)"
  },
  {
    "label": "ArrayInterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayInterleave(const TArray<FAlignedFloatBuffer>& InBuffers, FAlignedFloatBuffer& OutBuffer)"
  },
  {
    "label": "ArrayInterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayInterleave(const float* const* RESTRICT InBuffers, float* RESTRICT OutBuffer, const int32 InFrames, const int32 InChannels)"
  },
  {
    "label": "ArrayDeinterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayDeinterleave(const FAlignedFloatBuffer& InBuffer, TArray<FAlignedFloatBuffer>& OutBuffers, const int32 InChannels)"
  },
  {
    "label": "ArrayDeinterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayDeinterleave(const TArrayView<const float> InView, TArray<FAlignedFloatBuffer>& OutBuffers, const int32 InChannels)"
  },
  {
    "label": "ArrayDeinterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayDeinterleave(const float* RESTRICT InBuffer, float* const* RESTRICT OutBuffers, const int32 InFrames, const int32 InChannels)"
  },
  {
    "label": "ArrayInterpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayInterpolate(const float* RESTRICT InBuffer, float* RESTRICT OutBuffer, const int32 NumInSamples, const int32 NumOutSamples)"
  },
  {
    "label": "ArrayInt16SwapBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayInt16SwapBytes(TArrayView<int16> InView)"
  },
  {
    "label": "ArrayInt24SwapBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayInt24SwapBytes(TArrayView<int8> InView)"
  },
  {
    "label": "ArrayInt32SwapBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayInt32SwapBytes(TArrayView<int32> InView)"
  },
  {
    "label": "ArrayFloatSwapBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatSwapBytes(TArrayView<float> InView)"
  },
  {
    "label": "ArrayDoubleSwapBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayDoubleSwapBytes(TArrayView<double> InView)"
  },
  {
    "label": "ArrayAPFLongDelayProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayAPFLongDelayProcess(const float* InSamples, const float* InDelaySamples, const int32 InNum, float* OutSamples, float* OutDelaySamples, const float Gain)"
  },
  {
    "label": "ArrayLerpFractionalDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayLerpFractionalDelay(const float* InSamples, const float* InDelays, const float* DelayData, const int* IntegerDelays, int* UpperDelayPos, int* LowerDelayPos, const int32 InNum, float* OutSamples, const float MaxDelay)"
  },
  {
    "label": "ArrayScaledComplexConjugate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayScaledComplexConjugate(const float* RESTRICT InValues, const int32 Num, float* RESTRICT OutValues, const float Scale)"
  },
  {
    "label": "FContiguousSparse2DKernelTransform()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FContiguousSparse2DKernelTransform(const int32 NumInElements, const int32 NumOutElements)"
  },
  {
    "label": "SetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRow(const int32 RowIndex, const int32 StartIndex, TArrayView<const float> OffsetValues)"
  }
]