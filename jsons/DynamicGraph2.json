[
  {
    "label": "FDynamicGraph2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicGraph2"
  },
  {
    "label": "InvalidVertex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" BoxTypes . h \" # include \" DynamicGraph . h \" # include \" SegmentTypes . h \" # include \" Util / DynamicVector . h \" # include \" Util / IndexUtil . h \" # include \" Util / IteratorUtil . h \" # include \" Util / RefCountVector . h \" # include \" Util / SmallListSet . h \" # include \" VectorTypes . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> class FDynamicGraph2 : public FDynamicGraph { TAxisAlignedBox2<T> cached_bounds ; int cached_bounds_timestamp = - 1 ; TDynamicVectorN<T,2> vertices ; public : TVector2<T>)",
    "insertText": "InvalidVertex()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "GetVertex(int VID)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertex(int VID, TVector2<T> VNewPos)"
  },
  {
    "label": "SetVector2()",
    "kind": "Method",
    "detail": "Function (vertices .)",
    "insertText": "SetVector2(VID, VNewPos)"
  },
  {
    "label": "updateTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateTimeStamp(true)"
  },
  {
    "label": "GetEdgeV()",
    "kind": "Method",
    "detail": "Function (} } using FDynamicGraph::GetEdgeV ; bool)",
    "insertText": "GetEdgeV(int EID, UE::Math::TVector2<T>& A, UE::Math::TVector2<T>& B)"
  },
  {
    "label": "AsVector2()",
    "kind": "Method",
    "detail": "Function (A = vertices .)",
    "insertText": "AsVector2(edges[EID].A)"
  },
  {
    "label": "AsVector2()",
    "kind": "Method",
    "detail": "Function (B = vertices .)",
    "insertText": "AsVector2(edges[EID].B)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const FEdge& e = edges [ EID ] ; return TSegment2<)",
    "insertText": "T(vertices.AsVector2(e.A), vertices.AsVector2(e.B))"
  },
  {
    "label": "GetEdgeCenter()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "GetEdgeCenter(int EID)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FEdge& e = edges [ EID ] ;)",
    "insertText": "return(vertices.AsVector2(e.A) + vertices.AsVector2(e.B))"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AppendVertex(TVector2<T> V)"
  },
  {
    "label": "append_vertex_internal()",
    "kind": "Method",
    "detail": "Function (int vid =)",
    "insertText": "append_vertex_internal()"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (vertices .)",
    "insertText": "InsertAt({{V.X, V.Y}}, vid)"
  },
  {
    "label": "SortedVtxEdges()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SortedVtxEdges(int VID, TArray<int>& Sorted)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Sorted .)",
    "insertText": "Reserve(vertex_edges.GetCount(VID))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sorted .)",
    "insertText": "Add(EID)"
  },
  {
    "label": "AsVector2()",
    "kind": "Method",
    "detail": "Function (} TVector2<T> V = vertices .)",
    "insertText": "AsVector2(VID)"
  },
  {
    "label": "SortBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortBy(Sorted, [&](int EID) { int NbrVID = edge_other_v(EID, VID); TVector2<T> D = vertices.AsVector2(NbrVID) - V; return TMathUtil<T>::Atan2Positive(D.Y, D.X); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox2<T> AABB ;)",
    "insertText": "for(const TVector2<T>& V : Vertices())"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (AABB .)",
    "insertText": "Contain(V)"
  },
  {
    "label": "CachedBounds()",
    "kind": "Method",
    "detail": "Function (} return AABB ; } TAxisAlignedBox2<T>)",
    "insertText": "CachedBounds()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (cached_bounds =)",
    "insertText": "GetBounds()"
  },
  {
    "label": "Timestamp()",
    "kind": "Method",
    "detail": "Function (cached_bounds_timestamp =)",
    "insertText": "Timestamp()"
  },
  {
    "label": "OpeningAngle()",
    "kind": "Method",
    "detail": "Function (} return cached_bounds ; } double)",
    "insertText": "OpeningAngle(int VID, double InvalidValue = TNumericLimits<T>::Max())"
  },
  {
    "label": "edge_other_v()",
    "kind": "Method",
    "detail": "Function (int nbra =)",
    "insertText": "edge_other_v(*ValueIterate, VID)"
  },
  {
    "label": "edge_other_v()",
    "kind": "Method",
    "detail": "Function (int nbrb =)",
    "insertText": "edge_other_v(*++ValueIterate, VID)"
  },
  {
    "label": "AsVector2()",
    "kind": "Method",
    "detail": "Function (TVector2<T> A = vertices .)",
    "insertText": "AsVector2(nbra)"
  },
  {
    "label": "AsVector2()",
    "kind": "Method",
    "detail": "Function (TVector2<T> B = vertices .)",
    "insertText": "AsVector2(nbrb)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (A - = V ;)",
    "insertText": "if(Normalize(A) == 0)"
  },
  {
    "label": "append_new_split_vertex()",
    "kind": "Method",
    "detail": "Function (} protected : int)",
    "insertText": "append_new_split_vertex(int A, int B)"
  },
  {
    "label": "vNew()",
    "kind": "Method",
    "detail": "Function (TVector2<T>)",
    "insertText": "vNew(GetVertex(A) + GetVertex(B))"
  },
  {
    "label": "AppendVertex()",
    "kind": "Method",
    "detail": "Function (int f =)",
    "insertText": "AppendVertex(vNew)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (TVector2<T> V =)",
    "insertText": "GetVertex(VID)"
  }
]