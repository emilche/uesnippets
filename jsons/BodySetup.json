[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "UPhysicalMaterialMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterialMask"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FShapeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapeData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FTriangleMeshImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMeshImplicitObject"
  },
  {
    "label": "FCookHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookHelper"
  },
  {
    "label": "FChaosDerivedDataReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosDerivedDataReader"
  },
  {
    "label": "FBodySetupUVInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodySetupUVInfo"
  },
  {
    "label": "FCookBodySetupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookBodySetupInfo"
  },
  {
    "label": "FPhysXCookHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysXCookHelper"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FKAggregateGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKAggregateGeom"
  },
  {
    "label": "FWalkableSlopeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWalkableSlopeOverride"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "FBodySetupTryCookResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodySetupTryCookResult"
  },
  {
    "label": "UMRMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMRMeshComponent"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FIterateBodySetupHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterateBodySetupHelper"
  },
  {
    "label": "FBodySetupObjectTextFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBodySetupObjectTextFactory"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" EngineDefines . h \" # include \" PhysicsEngine / BodyInstance . h \" # include \" Serialization / BulkData . h \" # include \" BodySetupEnums . h \" # include \" PhysicsEngine / AggregateGeom . h \" # include \" Interfaces / Interface_CollisionDataProvider . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" BodySetupCore . h \" # if WITH_EDITOR # include \" Factories . h \" # endif # include \" BodySetup . generated . h \" class ITargetPlatform ; class UPhysicalMaterial ; class UPhysicalMaterialMask ; class UPrimitiveComponent ; struct FShapeData ; enum class EPhysXMeshCookFlags : uint8 ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAsyncPhysicsCookFinished, bool)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (namespace Chaos { class FImplicitObject ; class FTriangleMeshImplicitObject ; struct FCookHelper ; } template<T,int d> class FChaosDerivedDataReader ;)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"BodySetup Cooking\"), STAT_PhysXCooking, STATGROUP_Physics,)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FBodySetupUVInfo { TArray<int32> IndexBuffer ; TArray<FVector> VertPositions ; TArray<TArray<FVector2D>> VertUVs ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBodySetupUVInfo& UVInfo)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (Ar<<UVInfo . IndexBuffer ; Ar<<UVInfo . VertPositions ; Ar<<UVInfo . VertUVs ; return Ar ; } void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "FillFromTriMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFromTriMesh(const FTriMeshCollisionData& TriMeshCollisionData)"
  },
  {
    "label": "FCookBodySetupInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FCookBodySetupInfo {)",
    "insertText": "FCookBodySetupInfo()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FTriMeshCollisionData TriangleMeshDesc ; EPhysXMeshCookFlags TriMeshCookFlags ; EPhysXMeshCookFlags ConvexCookFlags ; TArray<TArray<FVector>> NonMirroredConvexVertices ; TArray<TArray<FVector>> MirroredConvexVertices ; FString OuterDebugName ; bool bCookNonMirroredConvex ; bool bCookMirroredConvex ; bool bConvexDeformableMesh ; bool bCookTriMesh ; bool bSupportUVFromHitResults ; bool bSupportFaceRemap ; bool bTriMeshError ; } ; struct FPhysXCookHelper ;)",
    "insertText": "UCLASS(collapseCategories, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UBodySetup(FVTableHelper& Helper)"
  },
  {
    "label": "UBodySetup()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UBodySetup()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (EDataValidationResult)",
    "insertText": "IsDataValid(class FDataValidationContext& Context)"
  },
  {
    "label": "CopyBodyPropertiesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBodyPropertiesFrom(const UBodySetup* FromSetup)"
  },
  {
    "label": "AddCollisionFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCollisionFrom(class UBodySetup* FromSetup)"
  },
  {
    "label": "AddCollisionFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCollisionFrom(const FKAggregateGeom& FromAggGeom)"
  },
  {
    "label": "AddCollisionElemFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCollisionElemFrom(const FKAggregateGeom& FromAggGeom, const EAggCollisionShape::Type ShapeType, const int32 ElemIndex)"
  },
  {
    "label": "CreatePhysicsMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePhysicsMeshes()"
  },
  {
    "label": "CreatePhysicsMeshesAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePhysicsMeshesAsync(FOnAsyncPhysicsCookFinished OnAsyncPhysicsCookFinished)"
  },
  {
    "label": "AbortPhysicsMeshAsyncCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortPhysicsMeshAsyncCreation()"
  },
  {
    "label": "GetCookedFormatData()",
    "kind": "Method",
    "detail": "Function (enum class EBodySetupCookResult { NoError,FailedToLock,FailedToCook } ; struct FBodySetupTryCookResult { FByteBulkData* Data ; EBodySetupCookResult CookResult ; } ; private : FByteBulkData*)",
    "insertText": "GetCookedFormatData()"
  },
  {
    "label": "GetCookedData()",
    "kind": "Method",
    "detail": "Function (FByteBulkData*)",
    "insertText": "GetCookedData(FName Format)"
  },
  {
    "label": "TryGetCookedData()",
    "kind": "Method",
    "detail": "Function (FBodySetupTryCookResult)",
    "insertText": "TryGetCookedData(FName Format)"
  },
  {
    "label": "ProcessFormatData_Chaos()",
    "kind": "Method",
    "detail": "Function (class UMRMeshComponent ; bool)",
    "insertText": "ProcessFormatData_Chaos(FByteBulkData* FormatData)"
  },
  {
    "label": "ProcessFormatData_Chaos()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessFormatData_Chaos(FChaosDerivedDataReader<float, 3>& Reader)"
  },
  {
    "label": "RuntimeCookPhysics_Chaos()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RuntimeCookPhysics_Chaos()"
  },
  {
    "label": "FinishCreatingPhysicsMeshes_Chaos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCreatingPhysicsMeshes_Chaos(FChaosDerivedDataReader<float, 3>& InReader)"
  },
  {
    "label": "FinishCreatingPhysicsMeshes_Chaos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCreatingPhysicsMeshes_Chaos(Chaos::FCookHelper& InHelper)"
  },
  {
    "label": "FinishCreatingPhysicsMeshes_Chaos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCreatingPhysicsMeshes_Chaos(TArray<Chaos::FConvexPtr>& InConvexImplicits, TArray<Chaos::FTriangleMeshImplicitObjectPtr>& InTrimeshImplicits, FBodySetupUVInfo& InUvInfo, TArray<int32>& InFaceRemap)"
  },
  {
    "label": "FinishCreatePhysicsMeshesAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCreatePhysicsMeshesAsync(FAsyncCookHelper* AsyncPhysicsCookHelper, FOnAsyncPhysicsCookFinished OnAsyncPhysicsCookFinished)"
  },
  {
    "label": "GetGeometryDDCKey()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetGeometryDDCKey(FString& OutString)"
  },
  {
    "label": "GetScaledVolume()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetScaledVolume(const FVector& Scale)"
  },
  {
    "label": "ClearPhysicsMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPhysicsMeshes()"
  },
  {
    "label": "CalculateMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateMass(const UPrimitiveComponent* Component = nullptr)"
  },
  {
    "label": "GetPhysMaterial()",
    "kind": "Method",
    "detail": "Function (class UPhysicalMaterial*)",
    "insertText": "GetPhysMaterial()"
  },
  {
    "label": "RemoveSimpleCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSimpleCollision()"
  },
  {
    "label": "RescaleSimpleCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RescaleSimpleCollision(FVector BuildScale)"
  },
  {
    "label": "InvalidatePhysicsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePhysicsData()"
  },
  {
    "label": "CreateFromModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateFromModel(class UModel* InModel, bool bRemoveExisting)"
  },
  {
    "label": "UpdateTriMeshVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTriMeshVertices(const TArray<FVector> & NewPositions)"
  },
  {
    "label": "GetShortestDistanceToPoint()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShortestDistanceToPoint(const FVector& WorldPosition, const FTransform& BodyToWorldTM, bool bUseConvexShapes = false)"
  },
  {
    "label": "GetClosestPointAndNormal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClosestPointAndNormal(const FVector& WorldPosition, const FTransform& BodyToWorldTM, FVector& ClosestWorldPosition, FVector& FeatureNormal, bool bUseConvexShapes = false)"
  },
  {
    "label": "GetCookInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCookInfo(FCookBodySetupInfo& OutCookInfo, EPhysXMeshCookFlags InCookFlags)"
  },
  {
    "label": "CalcUVAtLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalcUVAtLocation(const FVector& BodySpaceLocation, int32 FaceIndex, int32 UVChannel, FVector2D& UV)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BeginCacheForCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedCookedPlatformDataLoaded(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "CopyBodySetupProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBodySetupProperty(const UBodySetup* Other)"
  },
  {
    "label": "AddShapesToRigidActor_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddShapesToRigidActor_AssumesLocked(FBodyInstance* OwningInstance, FVector& Scale3D, UPhysicalMaterial* SimpleMaterial, TArray<UPhysicalMaterial*>& ComplexMaterials, TArray<FPhysicalMaterialMaskParams>& ComplexMaterialMasks, const FBodyCollisionData& BodyCollisionData, const FTransform& RelativeTM = FTransform::Identity, TArray<FPhysicsShapeHandle>* NewShapes = NULL)"
  },
  {
    "label": "FBodySetupObjectTextFactory()",
    "kind": "Method",
    "detail": "Function (struct FIterateBodySetupHelper ; } ; # if WITH_EDITOR class FBodySetupObjectTextFactory : public FCustomizableTextObjectFactory { public :)",
    "insertText": "FBodySetupObjectTextFactory() : FCustomizableTextObjectFactory(GWarn)"
  },
  {
    "label": "CanCreateClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCreateClass(UClass* InObjectClass, bool& bOmitSubObjs)"
  },
  {
    "label": "ProcessConstructedObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessConstructedObject(UObject* NewObject)"
  }
]