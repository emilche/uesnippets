[
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlotBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlotBase"
  },
  {
    "label": "FSlotArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlotArguments"
  },
  {
    "label": "TSlotBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlotBase"
  },
  {
    "label": "EConstructSlotIsFChildren",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstructSlotIsFChildren"
  },
  {
    "label": "FSlotBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / InvalidateWidgetReason . h \" class FChildren ; class SWidget ; class FSlotBase { public :)",
    "insertText": "FSlotBase()"
  },
  {
    "label": "FSlotBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlotBase(const FChildren& InParent)"
  },
  {
    "label": "FSlotBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlotBase(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlotBase&)",
    "insertText": "operator(const FSlotBase&)"
  },
  {
    "label": "FSlotBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlotBase(const FSlotBase&)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (public : struct FSlotArguments { } ; public : const FChildren*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(const FChildren& Children)"
  },
  {
    "label": "DetatchParentFromContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetatchParentFromContent()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Widget =)",
    "insertText": "MoveTemp(InWidget)"
  },
  {
    "label": "AfterContentOrOwnerAssigned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterContentOrOwnerAssigned()"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AttachWidget(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<SWidget>&)",
    "insertText": "GetWidget()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (protected : template<TargetValueType,SourceValueType> bool)",
    "insertText": "SetAttribute(TAttribute<TargetValueType>& TargetValue, const TAttribute<SourceValueType>& SourceValue, EInvalidateWidgetReason BaseInvalidationReason)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (const bool bWasBound = TargetValue .)",
    "insertText": "IsBound()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TargetValue = SourceValue ; EInvalidateWidgetReason InvalidateReason = BaseInvalidationReason ;)",
    "insertText": "if(bBoundnessChanged)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (InvalidateReason | = EInvalidateWidgetReason::Volatility ; })",
    "insertText": "Invalidate(InvalidateReason)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : const FChildren* Owner ; TSharedRef<SWidget> Widget ; } ; template<SlotType> class TSlotBase : public FSlotBase { public : using FSlotBase::FSlotBase ; SlotType&)",
    "insertText": "operator(TSharedRef<SWidget>&& InChildWidget)"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AttachWidget(MoveTemp(InChildWidget))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SlotType&)",
    "insertText": "operator(const TSharedRef<SWidget>& InChildWidget)"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AttachWidget(InChildWidget)"
  },
  {
    "label": "Expose()",
    "kind": "Method",
    "detail": "Function (} SlotType&)",
    "insertText": "Expose(SlotType*& OutVarToInit)"
  },
  {
    "label": "SlotType()",
    "kind": "Method",
    "detail": "Function (OutVarToInit = static_cast<)",
    "insertText": "SlotType(this)"
  },
  {
    "label": "FSlotArguments()",
    "kind": "Method",
    "detail": "Function (} enum EConstructSlotIsFChildren { ConstructSlotIsFChildren } ; struct FSlotArguments : public FSlotBase::FSlotArguments { public :)",
    "insertText": "FSlotArguments(EConstructSlotIsFChildren)"
  },
  {
    "label": "FSlotArguments()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlotArguments(TUniquePtr<SlotType> InSlot) : Slot(MoveTemp(InSlot))"
  },
  {
    "label": "FSlotArguments()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlotArguments(const FSlotArguments&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlotArguments&)",
    "insertText": "operator(const FSlotArguments&)"
  },
  {
    "label": "FSlotArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlotArguments(FSlotArguments&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlotArguments&)",
    "insertText": "operator(FSlotArguments&&)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ChildWidget =)",
    "insertText": "MoveTemp(InChildWidget)"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (ChildWidget = InChildWidget ; return)",
    "insertText": "Me()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (OutVarToInit = Slot .)",
    "insertText": "Get()"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AttachWidget(const TSharedRef<SWidget>& InChildWidget)"
  },
  {
    "label": "GetAttachedWidget()",
    "kind": "Method",
    "detail": "Function (ChildWidget = InChildWidget ; } const TSharedPtr<SWidget>&)",
    "insertText": "GetAttachedWidget()"
  },
  {
    "label": "StealSlot()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<SlotType>)",
    "insertText": "StealSlot()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} private : TUniquePtr<SlotType> Slot ; TSharedPtr<SWidget> ChildWidget ; } ; void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "AttachWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachWidget(InArgs.GetAttachedWidget().ToSharedRef())"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetOwner(SlotOwner)"
  }
]