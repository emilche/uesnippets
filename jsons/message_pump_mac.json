[
  {
    "label": "RunLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunLoop"
  },
  {
    "label": "AutoreleasePoolType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoreleasePoolType"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MessagePumpScopedAutoreleasePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpScopedAutoreleasePool"
  },
  {
    "label": "TestMessagePumpCFRunLoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestMessagePumpCFRunLoopBase"
  },
  {
    "label": "ScopedModeEnabler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedModeEnabler"
  },
  {
    "label": "MessagePumpUIApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpUIApplication"
  },
  {
    "label": "MessagePumpNSApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpNSApplication"
  },
  {
    "label": "ScopedPumpMessagesInPrivateModes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedPumpMessagesInPrivateModes"
  },
  {
    "label": "MessagePumpCrApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpCrApplication"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_MAC_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_MAC_H_ # include \" base / memory / raw_ptr . h \" # include \" base / message_loop / message_pump . h \" # include<CoreFoundation / CoreFoundation . h> # include<memory> # include \" base / containers / stack . h \" # include \" base / message_loop / timer_slack . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # if)",
    "insertText": "defined(__OBJC__) #if BUILDFLAG(IS_IOS) #import <Foundation/Foundation.h> #else #import <AppKit/AppKit.h> @protocol CrAppProtocol - (BOOL)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (@ end # endif # endif namespace base { class RunLoop ; # if !)",
    "insertText": "defined(__OBJC__) || __has_feature(objc_arc)"
  },
  {
    "label": "MessagePumpCFRunLoopBase()",
    "kind": "Method",
    "detail": "Function (# else typedef NSAutoreleasePool AutoreleasePoolType ; # endif class BASE_EXPORT MessagePumpCFRunLoopBase : public MessagePump { public :)",
    "insertText": "MessagePumpCFRunLoopBase(const MessagePumpCFRunLoopBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpCFRunLoopBase&)",
    "insertText": "operator(const MessagePumpCFRunLoopBase&)"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "SetTimerSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerSlack(TimerSlack timer_slack)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_IOS) virtual void Attach(Delegate* delegate)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach()"
  },
  {
    "label": "MessagePumpCFRunLoopBase()",
    "kind": "Method",
    "detail": "Function (# endif protected : class MessagePumpScopedAutoreleasePool ; class TestMessagePumpCFRunLoopBase ;)",
    "insertText": "MessagePumpCFRunLoopBase(int initial_mode_mask)"
  },
  {
    "label": "MessagePumpCFRunLoopBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MessagePumpCFRunLoopBase()"
  },
  {
    "label": "DoRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRun(Delegate* delegate)"
  },
  {
    "label": "DoQuit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoQuit()"
  },
  {
    "label": "OnDidQuit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDidQuit()"
  },
  {
    "label": "run_loop()",
    "kind": "Method",
    "detail": "Function (CFRunLoopRef)",
    "insertText": "run_loop()"
  },
  {
    "label": "OnDetach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDetach()"
  },
  {
    "label": "SetDelegate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetDelegate(Delegate* delegate)"
  },
  {
    "label": "CreateAutoreleasePool()",
    "kind": "Method",
    "detail": "Function (AutoreleasePoolType*)",
    "insertText": "CreateAutoreleasePool()"
  },
  {
    "label": "SetModeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModeMask(int mode_mask)"
  },
  {
    "label": "GetModeMask()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetModeMask()"
  },
  {
    "label": "RunDelayedWorkTimer()",
    "kind": "Method",
    "detail": "Function (private : class ScopedModeEnabler ; int kNumModes = 4 ; void)",
    "insertText": "RunDelayedWorkTimer(CFRunLoopTimerRef timer, void* info)"
  },
  {
    "label": "RunWorkSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunWorkSource(void* info)"
  },
  {
    "label": "RunWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunWork()"
  },
  {
    "label": "RunIdleWorkSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunIdleWorkSource(void* info)"
  },
  {
    "label": "RunIdleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunIdleWork()"
  },
  {
    "label": "RunNestingDeferredWorkSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNestingDeferredWorkSource(void* info)"
  },
  {
    "label": "RunNestingDeferredWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNestingDeferredWork()"
  },
  {
    "label": "BeforeWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeforeWait()"
  },
  {
    "label": "MaybeScheduleNestingDeferredWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeScheduleNestingDeferredWork()"
  },
  {
    "label": "PreWaitObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreWaitObserver(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void* info)"
  },
  {
    "label": "AfterWaitObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterWaitObserver(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void* info)"
  },
  {
    "label": "PreSourceObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSourceObserver(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void* info)"
  },
  {
    "label": "EnterExitObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterExitObserver(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void* info)"
  },
  {
    "label": "EnterExitRunLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterExitRunLoop(CFRunLoopActivity activity)"
  },
  {
    "label": "PopWorkItemScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopWorkItemScope()"
  },
  {
    "label": "PushWorkItemScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushWorkItemScope()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (CFRunLoopRef run_loop_ ; std::unique_ptr<ScopedModeEnabler> enabled_modes_ [ kNumModes ] ; CFRunLoopTimerRef delayed_work_timer_ ; CFRunLoopSourceRef work_source_ ; CFRunLoopSourceRef idle_work_source_ ; CFRunLoopSourceRef nesting_deferred_work_source_ ; CFRunLoopObserverRef pre_wait_observer_ ; CFRunLoopObserverRef after_wait_observer_ ; CFRunLoopObserverRef pre_source_observer_ ; CFRunLoopObserverRef enter_exit_observer_ ; raw_ptr<Delegate> delegate_ ; base::TimerSlack timer_slack_ ; base::TimeTicks delayed_work_scheduled_at_ = base::)",
    "insertText": "Max()"
  },
  {
    "label": "MessagePumpCFRunLoop()",
    "kind": "Method",
    "detail": "Function (int nesting_level_ ; int run_nesting_level_ ; int deepest_nesting_level_ ; bool keep_running_ ; bool delegateless_work_ ; bool delegateless_idle_work_ ; base::stack<absl::optional<base::MessagePump::Delegate::ScopedDoWorkItem>> stack_ ; } ; class BASE_EXPORT MessagePumpCFRunLoop : public MessagePumpCFRunLoopBase { public :)",
    "insertText": "MessagePumpCFRunLoop()"
  },
  {
    "label": "MessagePumpCFRunLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpCFRunLoop(const MessagePumpCFRunLoop&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpCFRunLoop&)",
    "insertText": "operator(const MessagePumpCFRunLoop&)"
  },
  {
    "label": "MessagePumpNSRunLoop()",
    "kind": "Method",
    "detail": "Function (bool quit_pending_ ; } ; class BASE_EXPORT MessagePumpNSRunLoop : public MessagePumpCFRunLoopBase { public :)",
    "insertText": "MessagePumpNSRunLoop()"
  },
  {
    "label": "MessagePumpNSRunLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpNSRunLoop(const MessagePumpNSRunLoop&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpNSRunLoop&)",
    "insertText": "operator(const MessagePumpNSRunLoop&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : CFRunLoopSourceRef quit_source_ ; } ; # if)",
    "insertText": "BUILDFLAG(IS_IOS)"
  },
  {
    "label": "MessagePumpUIApplication()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MessagePumpUIApplication()"
  },
  {
    "label": "MessagePumpUIApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpUIApplication(const MessagePumpUIApplication&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpUIApplication&)",
    "insertText": "operator(const MessagePumpUIApplication&)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Attach(Delegate* delegate)"
  },
  {
    "label": "ScopedPumpMessagesInPrivateModes()",
    "kind": "Method",
    "detail": "Function (private : RunLoop* run_loop_ ; } ; # else class BASE_EXPORT ScopedPumpMessagesInPrivateModes { public :)",
    "insertText": "ScopedPumpMessagesInPrivateModes()"
  },
  {
    "label": "ScopedPumpMessagesInPrivateModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedPumpMessagesInPrivateModes(const ScopedPumpMessagesInPrivateModes&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedPumpMessagesInPrivateModes&)",
    "insertText": "operator(const ScopedPumpMessagesInPrivateModes&)"
  },
  {
    "label": "GetModeMaskForTest()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetModeMaskForTest()"
  },
  {
    "label": "MessagePumpNSApplication()",
    "kind": "Method",
    "detail": "Function (} ; class MessagePumpNSApplication : public MessagePumpCFRunLoopBase { public :)",
    "insertText": "MessagePumpNSApplication()"
  },
  {
    "label": "MessagePumpNSApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpNSApplication(const MessagePumpNSApplication&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpNSApplication&)",
    "insertText": "operator(const MessagePumpNSApplication&)"
  },
  {
    "label": "MessagePumpCrApplication()",
    "kind": "Method",
    "detail": "Function (bool running_own_loop_ ; bool quit_pending_ ; } ; class MessagePumpCrApplication : public MessagePumpNSApplication { public :)",
    "insertText": "MessagePumpCrApplication()"
  },
  {
    "label": "MessagePumpCrApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpCrApplication(const MessagePumpCrApplication&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpCrApplication&)",
    "insertText": "operator(const MessagePumpCrApplication&)"
  },
  {
    "label": "MessagePumpMac()",
    "kind": "Method",
    "detail": "Function (} ; # endif class BASE_EXPORT MessagePumpMac { public :)",
    "insertText": "MessagePumpMac()"
  },
  {
    "label": "MessagePumpMac()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MessagePumpMac(const MessagePumpMac&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpMac&)",
    "insertText": "operator(const MessagePumpMac&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MessagePump>)",
    "insertText": "Create()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_IOS) static bool UsingCrApp()"
  },
  {
    "label": "IsHandlingSendEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHandlingSendEvent()"
  }
]