[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetExports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetExports"
  },
  {
    "label": "FExportScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExportScope"
  },
  {
    "label": "FExportInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportInfo"
  },
  {
    "label": "FExportScope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / Misc / ResizableCircularQueue . h \" # include \" Iris / Serialization / NetExportContext . h \" namespace UE::Net { enum class EPacketDeliveryStatus : uint8 ; } namespace UE::Net::Private { class FNetExports { public : class FExportScope { public : ~)",
    "insertText": "FExportScope()"
  },
  {
    "label": "FExportScope()",
    "kind": "Method",
    "detail": "Function (private : class FNetExports ;)",
    "insertText": "FExportScope(FNetSerializationContext& InContext, const FNetExportContext::FAcknowledgedExports& InAcknowledgedExports, FNetExportContext::FBatchExports& BatchExports)"
  },
  {
    "label": "InitExportRecordForPacket()",
    "kind": "Method",
    "detail": "Function (FNetExportContext ExportContext ; FNetSerializationContext& Context ; FNetExportContext* OldExportContext ; } ; public : void)",
    "insertText": "InitExportRecordForPacket()"
  },
  {
    "label": "CommitExportsToRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitExportsToRecord(FExportScope& ExportScope)"
  },
  {
    "label": "PushExportRecordForPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushExportRecordForPacket()"
  },
  {
    "label": "ProcessPacketDeliveryStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPacketDeliveryStatus(UE::Net::EPacketDeliveryStatus Status)"
  },
  {
    "label": "AcknowledgeBatchExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcknowledgeBatchExports(const FNetExportContext::FBatchExports& BatchExports)"
  },
  {
    "label": "MakeExportScope()",
    "kind": "Method",
    "detail": "Function (FExportScope)",
    "insertText": "MakeExportScope(UE::Net::FNetSerializationContext& Context, FNetExportContext::FBatchExports& BatchExports)"
  },
  {
    "label": "PopExportRecord()",
    "kind": "Method",
    "detail": "Function (} private : struct FExportInfo { uint32 NetHandleExportCount ; uint32 NetTokenExportCount ; } ; FExportInfo)",
    "insertText": "PopExportRecord()"
  },
  {
    "label": "FExportScope()",
    "kind": "Method",
    "detail": "Function (private : TResizableCircularQueue<FExportInfo> ExportRecord ; TResizableCircularQueue<FNetRefHandle> NetHandleExports ; TResizableCircularQueue<FNetToken> NetTokenExports ; FExportInfo CurrentExportInfo ; FNetExportContext::FAcknowledgedExports AcknowledgedExports ; } ; FNetExports::)",
    "insertText": "FExportScope(FNetSerializationContext& InContext, const FNetExportContext::FAcknowledgedExports& AcknowledgedExports, FNetExportContext::FBatchExports& BatchExports) : ExportContext(AcknowledgedExports, BatchExports) , Context(InContext) , OldExportContext(InContext.GetExportContext())"
  },
  {
    "label": "SetExportContext()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetExportContext(&ExportContext)"
  },
  {
    "label": "SetExportContext()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetExportContext(OldExportContext)"
  }
]