[
  {
    "label": "PhysicsParallelForRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Function . h \" namespace Chaos { void)",
    "insertText": "PhysicsParallelForRange(int32 InNum, TFunctionRef<void(int32, int32)> InCallable, const int32 MinBatchSize, bool bForceSingleThreaded = false)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(int32 InNum, TFunctionRef<void(int32)> InCallable, bool bForceSingleThreaded = false)"
  },
  {
    "label": "InnerPhysicsParallelForRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InnerPhysicsParallelForRange(int32 InNum, TFunctionRef<void(int32, int32)> InCallable, const int32 MinBatchSize, bool bForceSingleThreaded = false)"
  },
  {
    "label": "InnerPhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InnerPhysicsParallelFor(int32 InNum, TFunctionRef<void(int32)> InCallable, bool bForceSingleThreaded = false)"
  },
  {
    "label": "PhysicsParallelForWithContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelForWithContext(int32 InNum, TFunctionRef<int32 (int32, int32)> InContextCreator, TFunctionRef<void(int32, int32)> InCallable, bool bForceSingleThreaded = false)"
  }
]