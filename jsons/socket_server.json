[
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "NetworkBinderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkBinderInterface"
  },
  {
    "label": "SocketServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketServer"
  },
  {
    "label": "CreateDefault()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SOCKET_SERVER_H_ # define RTC_BASE_SOCKET_SERVER_H_ # include<memory> # include \" api / units / time_delta . h \" # include \" rtc_base / event . h \" # include \" rtc_base / socket_factory . h \" namespace rtc { class Thread ; class NetworkBinderInterface ; class SocketServer : public SocketFactory { public : webrtc::TimeDelta kForever = rtc::Event::kForever ; std::unique_ptr<SocketServer>)",
    "insertText": "CreateDefault()"
  },
  {
    "label": "SetMessageQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageQueue(Thread* queue)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Wait(webrtc::TimeDelta max_wait_duration, bool process_io)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "set_network_binder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_network_binder(NetworkBinderInterface* binder)"
  },
  {
    "label": "network_binder()",
    "kind": "Method",
    "detail": "Function (network_binder_ = binder ; } NetworkBinderInterface*)",
    "insertText": "network_binder()"
  }
]