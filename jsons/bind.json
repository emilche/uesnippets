[
  {
    "label": "UntypedFormatSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UntypedFormatSpec"
  },
  {
    "label": "BoundConversion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoundConversion"
  },
  {
    "label": "UntypedFormatSpecImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UntypedFormatSpecImpl"
  },
  {
    "label": "MakeDependent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeDependent"
  },
  {
    "label": "FormatSpecTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatSpecTemplate"
  },
  {
    "label": "ErrorMaker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ErrorMaker"
  },
  {
    "label": "Streamable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Streamable"
  },
  {
    "label": "StreamedWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamedWrapper"
  },
  {
    "label": "arg()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_FORMAT_BIND_H_ # define ABSL_STRINGS_INTERNAL_STR_FORMAT_BIND_H_ # include<array> # include<cstdio> # include<sstream> # include<string> # include \" absl / base / port . h \" # include \" absl / strings / internal / str_format / arg . h \" # include \" absl / strings / internal / str_format / checker . h \" # include \" absl / strings / internal / str_format / parser . h \" # include \" absl / types / span . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN class UntypedFormatSpec ; namespace str_format_internal { class BoundConversion : public FormatConversionSpecImpl { public : const FormatArgImpl*)",
    "insertText": "arg()"
  },
  {
    "label": "UntypedFormatSpecImpl()",
    "kind": "Method",
    "detail": "Function (arg_ = a ; } private : const FormatArgImpl* arg_ ; } ; class UntypedFormatSpecImpl { public :)",
    "insertText": "UntypedFormatSpecImpl()"
  },
  {
    "label": "UntypedFormatSpecImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UntypedFormatSpecImpl(string_view s) : data_(s.data()), size_(s.size())"
  },
  {
    "label": "UntypedFormatSpecImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UntypedFormatSpecImpl(const str_format_internal::ParsedFormatBase* pc) : data_(pc), size_(~size_t{})"
  },
  {
    "label": "has_parsed_conversion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_parsed_conversion()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!has_parsed_conversion())"
  },
  {
    "label": "parsed_conversion()",
    "kind": "Method",
    "detail": "Function (} const str_format_internal::ParsedFormatBase*)",
    "insertText": "parsed_conversion()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(has_parsed_conversion())"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (} template<T> const UntypedFormatSpecImpl&)",
    "insertText": "Extract(const T& s)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (bool res [ ] = { true,CheckMatch<Args,C,)",
    "insertText": "I()"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (template<= void>)",
    "insertText": "FormatSpecTemplate(const char* s) __attribute__(( enable_if(str_format_internal::EnsureConstexpr(s), \"constexpr trap\"), unavailable( \"Format specified does not match the arguments passed.\")))"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (template<T = void>)",
    "insertText": "FormatSpecTemplate(string_view s) __attribute__((enable_if(str_format_internal::EnsureConstexpr(s), \"constexpr trap\"))) : Base(\"to avoid noise in the compiler error\")"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormatSpecTemplate(const char* s) __attribute__((enable_if(ValidFormatImpl<Args...>(s), \"bad format trap\"))) : Base(s)"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormatSpecTemplate(string_view s) __attribute__((enable_if(ValidFormatImpl<Args...>(s), \"bad format trap\"))) : Base(s)"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FormatSpecTemplate(const char* s) : Base(s)"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormatSpecTemplate(string_view s) : Base(s)"
  },
  {
    "label": "FormatSpecTemplate()",
    "kind": "Method",
    "detail": "Function (} # endif template<FormatConversionCharSet . . . C>)",
    "insertText": "FormatSpecTemplate(const ExtendedParsedFormat<C...>& pc) : Base(&pc)"
  },
  {
    "label": "Streamable()",
    "kind": "Method",
    "detail": "Function (} } ; class Streamable { public :)",
    "insertText": "Streamable(const UntypedFormatSpecImpl& format, absl::Span<const FormatArgImpl> args) : format_(format)"
  },
  {
    "label": "MakeSpan()",
    "kind": "Method",
    "detail": "Function (few_args_ [ i ] = args [ i ] ; } args_ =)",
    "insertText": "MakeSpan(few_args_, args.size())"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} else { many_args_ .)",
    "insertText": "assign(args.begin(), args.end())"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (args_ = many_args_ ; } } std::ostream&)",
    "insertText": "Print(std::ostream& os)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, const Streamable& l)"
  },
  {
    "label": "FormatArgImpl()",
    "kind": "Method",
    "detail": "Function (} private : const UntypedFormatSpecImpl& format_ ; absl::Span<const FormatArgImpl> args_ ; FormatArgImpl few_args_ [ 4 ] = {)",
    "insertText": "FormatArgImpl(0), FormatArgImpl(0), FormatArgImpl(0), FormatArgImpl(0)"
  },
  {
    "label": "Summarize()",
    "kind": "Method",
    "detail": "Function (std::vector<FormatArgImpl> many_args_ ; } ; std::string)",
    "insertText": "Summarize(UntypedFormatSpecImpl format, absl::Span<const FormatArgImpl> args)"
  },
  {
    "label": "BindWithPack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BindWithPack(const UnboundConversion* props, absl::Span<const FormatArgImpl> pack, BoundConversion* bound)"
  },
  {
    "label": "FormatUntyped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FormatUntyped(FormatRawSinkImpl raw_sink, UntypedFormatSpecImpl format, absl::Span<const FormatArgImpl> args)"
  },
  {
    "label": "AppendPack()",
    "kind": "Method",
    "detail": "Function (std::string&)",
    "insertText": "AppendPack(std::string* out, UntypedFormatSpecImpl format, absl::Span<const FormatArgImpl> args)"
  },
  {
    "label": "FormatPack()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatPack(const UntypedFormatSpecImpl format, absl::Span<const FormatArgImpl> args)"
  },
  {
    "label": "FprintF()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FprintF(std::FILE* output, UntypedFormatSpecImpl format, absl::Span<const FormatArgImpl> args)"
  },
  {
    "label": "SnprintF()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SnprintF(char* output, size_t size, UntypedFormatSpecImpl format, absl::Span<const FormatArgImpl> args)"
  },
  {
    "label": "StreamedWrapper()",
    "kind": "Method",
    "detail": "Function (template<T> class StreamedWrapper { public :)",
    "insertText": "StreamedWrapper(const T& v) : v_(v)"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (} private : template<S> ArgConvertResult<)",
    "insertText": "FormatConversionCharSetUnion(FormatConversionCharSetInternal::s, FormatConversionCharSetInternal::v)> FormatConvertImpl(const StreamedWrapper<S>& v, FormatConversionSpecImpl conv, FormatSinkImpl* out)"
  }
]