[
  {
    "label": "FNetRefHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandleManager"
  },
  {
    "label": "FDirtyObjectsAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirtyObjectsAccessor"
  },
  {
    "label": "FDirtyNetObjectTrackerInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyNetObjectTrackerInitParams"
  },
  {
    "label": "FDirtyNetObjectTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirtyNetObjectTracker"
  },
  {
    "label": "MarkNetObjectStateDirty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / NetBitArray . h \" # include \" Net / Core / DirtyNetObjectTracker / GlobalDirtyNetObjectTracker . h \" # include \" Iris / IrisConfig . h \" # include \" Iris / Core / IrisCsv . h \" namespace UE::Net::Private { class FNetRefHandleManager ; class FDirtyObjectsAccessor ; typedef uint32 FInternalNetRefIndex ; } namespace UE::Net::Private { void)",
    "insertText": "MarkNetObjectStateDirty(uint32 ReplicationSystemId, FInternalNetRefIndex NetObjectIndex)"
  },
  {
    "label": "ForceNetUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNetUpdate(uint32 ReplicationSystemId, FInternalNetRefIndex NetObjectIndex)"
  },
  {
    "label": "FDirtyNetObjectTracker()",
    "kind": "Method",
    "detail": "Function (struct FDirtyNetObjectTrackerInitParams { const FNetRefHandleManager* NetRefHandleManager = nullptr ; uint32 ReplicationSystemId = 0 ; uint32 MaxInternalNetRefIndex = 0 ; } ; class FDirtyNetObjectTracker { public :)",
    "insertText": "FDirtyNetObjectTracker()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FDirtyNetObjectTrackerInitParams& Params)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "IsInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInit()"
  },
  {
    "label": "UpdateAndLockDirtyNetObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAndLockDirtyNetObjects()"
  },
  {
    "label": "UpdateAccumulatedDirtyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAccumulatedDirtyList()"
  },
  {
    "label": "LockExternalAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockExternalAccess()"
  },
  {
    "label": "AllowExternalAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowExternalAccess()"
  },
  {
    "label": "ReconcilePolledList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconcilePolledList(const FNetBitArrayView& ObjectsPolled)"
  },
  {
    "label": "ReportCSVStats()",
    "kind": "Method",
    "detail": "Function (# if UE_NET_IRIS_CSV_STATS void)",
    "insertText": "ReportCSVStats()"
  },
  {
    "label": "GetAccumulatedDirtyNetObjects()",
    "kind": "Method",
    "detail": "Function (# endif const FNetBitArrayView)",
    "insertText": "GetAccumulatedDirtyNetObjects()"
  },
  {
    "label": "GetForceNetUpdateObjects()",
    "kind": "Method",
    "detail": "Function (} FNetBitArrayView)",
    "insertText": "GetForceNetUpdateObjects()"
  },
  {
    "label": "SetNetObjectListsSize()",
    "kind": "Method",
    "detail": "Function (FDirtyObjectsAccessor ; using StorageType = FNetBitArrayView::StorageWordType ; uint32 StorageTypeBitCount = FNetBitArrayView::WordBitCount ; void)",
    "insertText": "SetNetObjectListsSize(FInternalNetRefIndex NewMaxInternalIndex)"
  },
  {
    "label": "OnMaxInternalNetRefIndexIncreased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaxInternalNetRefIndexIncreased(FInternalNetRefIndex NewMaxInternalIndex)"
  },
  {
    "label": "MarkNetObjectDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNetObjectDirty(FInternalNetRefIndex NetObjectIndex)"
  },
  {
    "label": "ForceNetUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNetUpdate(FInternalNetRefIndex NetObjectIndex)"
  },
  {
    "label": "GrabAndApplyGlobalDirtyObjectList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrabAndApplyGlobalDirtyObjectList()"
  },
  {
    "label": "GetDirtyNetObjectsThisFrame()",
    "kind": "Method",
    "detail": "Function (FNetBitArrayView)",
    "insertText": "GetDirtyNetObjectsThisFrame()"
  },
  {
    "label": "FDirtyObjectsAccessor()",
    "kind": "Method",
    "detail": "Function (private : FNetBitArray AccumulatedDirtyNetObjects ; FNetBitArray ForceNetUpdateObjects ; FNetBitArray DirtyNetObjects ; const FNetRefHandleManager* NetRefHandleManager = nullptr ; FGlobalDirtyNetObjectTracker::FPollHandle GlobalDirtyTrackerPollHandle ; uint32 ReplicationSystemId ; uint32 NetObjectIdCount = 0 ; bool bShouldResetPolledGlobalDirtyTracker = false ; # if UE_NET_THREAD_SAFETY_CHECK std::atomic_bool bIsExternalAccessAllowed = false ; # endif # if UE_NET_IRIS_CSV_STATS int32 PushModelDirtyObjectsCount = 0 ; int32 ForceNetUpdateObjectsCount = 0 ; # endif } ; class FDirtyObjectsAccessor { public :)",
    "insertText": "FDirtyObjectsAccessor(FDirtyNetObjectTracker& InDirtyNetObjectTracker) : DirtyNetObjectTracker(InDirtyNetObjectTracker)"
  },
  {
    "label": "FDirtyObjectsAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDirtyObjectsAccessor()"
  },
  {
    "label": "GetDirtyNetObjects()",
    "kind": "Method",
    "detail": "Function (} FNetBitArrayView)",
    "insertText": "GetDirtyNetObjects()"
  }
]