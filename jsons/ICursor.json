[
  {
    "label": "tagRECT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagRECT"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ICursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICursor"
  },
  {
    "label": "ICursor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector2D . h \" struct tagRECT ; typedef struct tagRECT RECT ; namespace EMouseCursor { enum Type : int { None,Default,TextEditBeam,ResizeLeftRight,ResizeUpDown,ResizeSouthEast,ResizeSouthWest,CardinalCross,Crosshairs,Hand,GrabHand,GrabHandClosed,SlashedCircle,EyeDropper,Custom,TotalCursorCount } ; } class ICursor { public : ~)",
    "insertText": "ICursor()"
  },
  {
    "label": "CreateCursorFromFile()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CreateCursorFromFile(const FString& InPathToCursorWithoutExtension, FVector2D HotSpot)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosition(const int32 X, const int32 Y)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const EMouseCursor::Type InNewCursor)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetType()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSize(int32& Width, int32& Height)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(bool bShow)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(const RECT* const Bounds)"
  },
  {
    "label": "SetTypeShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTypeShape(EMouseCursor::Type InCursorType, void* CursorHandle)"
  }
]