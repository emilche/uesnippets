[
  {
    "label": "VA_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # define Local_GetLongPathNameW uba::GetLongPathNameW # include \" UbaBinaryReaderWriter . h \" # include \" UbaCompactTables . h \" # include \" UbaFileAccessor . h \" # include \" UbaPathUtils . h \" # include \" UbaPlatform . h \" # include \" UbaProcessUtils . h \" # include \" UbaEvent . h \" # include \" UbaFile . h \" # include \" UbaLogger . h \" # include \" UbaRootPaths . h \" # include \" UbaThread . h \" # include \" UbaTimer . h \" # include \" UbaDirectoryIterator . h \" # if PLATFORM_WINDOWS # include \" UbaWinBinDependencyParser . h \" # elif PLATFORM_MAC # include \" UbaMacBinDependencyParser . h \" # endif # define)",
    "insertText": "VA_ARGS(...) , ##__VA_ARGS__ #define UBA_TEST_CHECK(expr, fmt, ...) if (!(expr)) return logger.Error(TC(fmt) VA_ARGS(__VA_ARGS__))"
  },
  {
    "label": "TestTime()",
    "kind": "Method",
    "detail": "Function (namespace uba { bool)",
    "insertText": "TestTime(Logger& logger, const StringBufferBase& rootDir)"
  },
  {
    "label": "consoleLogger()",
    "kind": "Method",
    "detail": "Function (# if 0 LoggerWithWriter)",
    "insertText": "consoleLogger(g_consoleLogWriter)"
  },
  {
    "label": "GetSystemTimeUs()",
    "kind": "Method",
    "detail": "Function (u64 time1 =)",
    "insertText": "GetSystemTimeUs()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(1000)"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "ms(time2 - time1)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (consoleLogger .)",
    "insertText": "Info(TC(\"Slept ms: %llu\"), ms)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (time1 =)",
    "insertText": "GetTime()"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ms(time2 * 1000 / GetFrequency()) - (time1 * 1000 / GetFrequency())"
  },
  {
    "label": "GetSecondsAsFileTime()",
    "kind": "Method",
    "detail": "Function (# endif u64 seconds = 1 5 ; u64 fileTime =)",
    "insertText": "GetSecondsAsFileTime(seconds)"
  },
  {
    "label": "GetFileTimeAsSeconds()",
    "kind": "Method",
    "detail": "Function (u64 seconds2 =)",
    "insertText": "GetFileTimeAsSeconds(fileTime)"
  },
  {
    "label": "UBA_TEST_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_TEST_CHECK(seconds == seconds2, \"GetSecondsAsFileTime does not match GetFileTimeAsSeconds\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Event ev ;)",
    "insertText": "if(!ev.Create(true, i == 1)) return logger.Error(TC(\"Failed to create event\"))"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (Thread)",
    "insertText": "t([&]() { Sleep(500); ev.Set(); Sleep(500); return true; })"
  },
  {
    "label": "ev2()",
    "kind": "Method",
    "detail": "Function (Event)",
    "insertText": "ev2(true)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (ev2 .)",
    "insertText": "IsSet(10 * 60 * 1000)"
  },
  {
    "label": "TestPaths()",
    "kind": "Method",
    "detail": "Function (# endif } return true ; } bool)",
    "insertText": "TestPaths(Logger& logger, const StringBufferBase& rootDir)"
  },
  {
    "label": "TC()",
    "kind": "Method",
    "detail": "Function (const tchar* workingDir = IsWindows ?)",
    "insertText": "TC(\"e:\\\\dev\\\\\") : TC(\"/dev/bar/\")"
  },
  {
    "label": "TestPath()",
    "kind": "Method",
    "detail": "Function (tchar buffer [ 1 0 2 4 ] ; u32 lengthResult ; auto)",
    "insertText": "TestPath(const tchar* path)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; # if PLATFORM_WINDOWS)",
    "insertText": "if(!FixPath2(TC(\"\\\"e:\\\\temp\\\"\"), workingDir, TStrlen(workingDir), buffer, sizeof_array(buffer), &lengthResult)) return logger.Error(TC(\"FixPath2 (1) failed\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(!TestPath(TC(\"/..\"))) return logger.Error(TC(\"FixPath2 should have failed\"))"
  },
  {
    "label": "UBA_TEST_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_TEST_CHECK(Equals(buffer, TC(\"/\")), \"Should not contain ..\")"
  },
  {
    "label": "UBA_TEST_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_TEST_CHECK(Equals(buffer, TC(\"/Foo\")), \"Should not contain ..\")"
  }
]