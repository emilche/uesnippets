[
  {
    "label": "TRotationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRotationMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TRotationMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector . h \" # include \" Math / Rotator . h \" # include \" Math / Matrix . h \" # include \" Math / RotationTranslationMatrix . h \" # include \" Math / QuatRotationTranslationMatrix . h \" namespace UE { namespace Math { template<T> struct TRotationMatrix : public TRotationTranslationMatrix<T> { public : using TRotationTranslationMatrix<T>::M ;)",
    "insertText": "TRotationMatrix(const TRotator<T>& Rot) : TRotationTranslationMatrix<T>(Rot, TVector<T>::ZeroVector)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(TRotator<T> const& Rot)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(TQuat<T> const& Rot)"
  },
  {
    "label": "MakeFromX()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromX(TVector<T> const& XAxis)"
  },
  {
    "label": "MakeFromY()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromY(TVector<T> const& YAxis)"
  },
  {
    "label": "MakeFromZ()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromZ(TVector<T> const& ZAxis)"
  },
  {
    "label": "MakeFromXY()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromXY(TVector<T> const& XAxis, TVector<T> const& YAxis)"
  },
  {
    "label": "MakeFromXZ()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromXZ(TVector<T> const& XAxis, TVector<T> const& ZAxis)"
  },
  {
    "label": "MakeFromYX()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromYX(TVector<T> const& YAxis, TVector<T> const& XAxis)"
  },
  {
    "label": "MakeFromYZ()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromYZ(TVector<T> const& YAxis, TVector<T> const& ZAxis)"
  },
  {
    "label": "MakeFromZX()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromZX(TVector<T> const& ZAxis, TVector<T> const& XAxis)"
  },
  {
    "label": "MakeFromZY()",
    "kind": "Method",
    "detail": "Function (TMatrix<T>)",
    "insertText": "MakeFromZY(TVector<T> const& ZAxis, TVector<T> const& YAxis)"
  },
  {
    "label": "GetSafeNormal()",
    "kind": "Method",
    "detail": "Function (TVector<T> const NewX = XAxis .)",
    "insertText": "GetSafeNormal()"
  },
  {
    "label": "UpVector()",
    "kind": "Method",
    "detail": "Function (TVector<T> const)",
    "insertText": "UpVector(FMath::Abs(NewX.Z) < (1.f - UE_KINDA_SMALL_NUMBER)) ? TVector<T>(0, 0, 1.f) : TVector<T>(1.f, 0, 0)"
  },
  {
    "label": "NewY()",
    "kind": "Method",
    "detail": "Function (const TVector<T>)",
    "insertText": "NewY(UpVector ^ NewX).GetSafeNormal()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TVector<T> NewZ = NewX ^ NewY ; return TMatrix<)",
    "insertText": "T(NewX, NewY, NewZ, TVector<T>::ZeroVector)"
  },
  {
    "label": "UpVector()",
    "kind": "Method",
    "detail": "Function (TVector<T> const)",
    "insertText": "UpVector(FMath::Abs(NewY.Z) < (1.f - UE_KINDA_SMALL_NUMBER)) ? TVector<T>(0, 0, 1.f) : TVector<T>(1.f, 0, 0)"
  },
  {
    "label": "NewZ()",
    "kind": "Method",
    "detail": "Function (const TVector<T>)",
    "insertText": "NewZ(UpVector ^ NewY).GetSafeNormal()"
  },
  {
    "label": "UpVector()",
    "kind": "Method",
    "detail": "Function (TVector<T> const)",
    "insertText": "UpVector(FMath::Abs(NewZ.Z) < (1.f - UE_KINDA_SMALL_NUMBER)) ? TVector<T>(0, 0, 1.f) : TVector<T>(1.f, 0, 0)"
  },
  {
    "label": "NewX()",
    "kind": "Method",
    "detail": "Function (const TVector<T>)",
    "insertText": "NewX(UpVector ^ NewZ).GetSafeNormal()"
  },
  {
    "label": "Norm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Norm(FMath::Abs(NewX.Z) < (1.f - UE_KINDA_SMALL_NUMBER)) ? TVector<T>(0, 0, 1.f) : TVector<T>(1.f, 0, 0)"
  },
  {
    "label": "NewZ()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>)",
    "insertText": "NewZ(NewX ^ Norm).GetSafeNormal()"
  },
  {
    "label": "NewY()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>)",
    "insertText": "NewY(Norm ^ NewX).GetSafeNormal()"
  },
  {
    "label": "Norm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Norm(FMath::Abs(NewY.Z) < (1.f - UE_KINDA_SMALL_NUMBER)) ? TVector<T>(0, 0, 1.f) : TVector<T>(1.f, 0, 0)"
  },
  {
    "label": "NewZ()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>)",
    "insertText": "NewZ(Norm ^ NewY).GetSafeNormal()"
  },
  {
    "label": "NewX()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>)",
    "insertText": "NewX(NewY ^ Norm).GetSafeNormal()"
  },
  {
    "label": "Norm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Norm(FMath::Abs(NewZ.Z) < (1.f - UE_KINDA_SMALL_NUMBER)) ? TVector<T>(0, 0, 1.f) : TVector<T>(1.f, 0, 0)"
  },
  {
    "label": "NewY()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>)",
    "insertText": "NewY(NewZ ^ Norm).GetSafeNormal()"
  },
  {
    "label": "NewX()",
    "kind": "Method",
    "detail": "Function (} const TVector<T>)",
    "insertText": "NewX(Norm ^ NewZ).GetSafeNormal()"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_DECLARE_LWC_TYPE(RotationMatrix, 44)"
  }
]