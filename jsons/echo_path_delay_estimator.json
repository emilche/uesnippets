[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "DownsampledRenderBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DownsampledRenderBuffer"
  },
  {
    "label": "EchoCanceller3Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EchoCanceller3Config"
  },
  {
    "label": "EchoPathDelayEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EchoPathDelayEstimator"
  },
  {
    "label": "EchoPathDelayEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_ECHO_PATH_DELAY_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_ECHO_PATH_DELAY_ESTIMATOR_H_ # include<stddef . h> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / alignment_mixer . h \" # include \" modules / audio_processing / aec3 / block . h \" # include \" modules / audio_processing / aec3 / clockdrift_detector . h \" # include \" modules / audio_processing / aec3 / decimator . h \" # include \" modules / audio_processing / aec3 / delay_estimate . h \" # include \" modules / audio_processing / aec3 / matched_filter . h \" # include \" modules / audio_processing / aec3 / matched_filter_lag_aggregator . h \" namespace webrtc { class ApmDataDumper ; struct DownsampledRenderBuffer ; struct EchoCanceller3Config ; class EchoPathDelayEstimator { public :)",
    "insertText": "EchoPathDelayEstimator(ApmDataDumper* data_dumper, const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "EchoPathDelayEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EchoPathDelayEstimator()"
  },
  {
    "label": "EchoPathDelayEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EchoPathDelayEstimator(const EchoPathDelayEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EchoPathDelayEstimator&)",
    "insertText": "operator(const EchoPathDelayEstimator&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool reset_delay_confidence)"
  },
  {
    "label": "EstimateDelay()",
    "kind": "Method",
    "detail": "Function (absl::optional<DelayEstimate>)",
    "insertText": "EstimateDelay(const DownsampledRenderBuffer& render_buffer, const Block& capture)"
  },
  {
    "label": "LogDelayEstimationProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDelayEstimationProperties(int sample_rate_hz, size_t shift)"
  },
  {
    "label": "LogFilterProperties()",
    "kind": "Method",
    "detail": "Function (matched_filter_ .)",
    "insertText": "LogFilterProperties(sample_rate_hz, shift, down_sampling_factor_)"
  },
  {
    "label": "Clockdrift()",
    "kind": "Method",
    "detail": "Function (} ClockdriftDetector::Level)",
    "insertText": "Clockdrift()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} private : ApmDataDumper* const data_dumper_ ; const size_t down_sampling_factor_ ; const size_t sub_block_size_ ; AlignmentMixer capture_mixer_ ; Decimator capture_decimator_ ; MatchedFilter matched_filter_ ; MatchedFilterLagAggregator matched_filter_lag_aggregator_ ; absl::optional<DelayEstimate> old_aggregated_lag_ ; size_t consistent_estimate_counter_ = 0 ; ClockdriftDetector clockdrift_detector_ ; void)",
    "insertText": "Reset(bool reset_lag_aggregator, bool reset_delay_confidence)"
  }
]