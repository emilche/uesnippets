[
  {
    "label": "FHttpThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpThread"
  },
  {
    "label": "Curl_multi",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Curl_multi"
  },
  {
    "label": "FCurlHttpManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurlHttpManager"
  },
  {
    "label": "FCurlRequestOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurlRequestOptions"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HttpManager . h \" class FHttpThread ; # if WITH_CURL # if ! WITH_CURL_XCURL typedef void CURLSH ; # endif # if)",
    "insertText": "defined(CURL_NO_OLDIES)"
  },
  {
    "label": "InitCurl()",
    "kind": "Method",
    "detail": "Function (# else typedef void CURLM ; # endif class FCurlHttpManager : public FHttpManager { public : void)",
    "insertText": "InitCurl()"
  },
  {
    "label": "ShutdownCurl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownCurl()"
  },
  {
    "label": "IsInit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInit()"
  },
  {
    "label": "FCurlRequestOptions()",
    "kind": "Method",
    "detail": "Function (# if ! WITH_CURL_XCURL CURLSH* GShareHandle ; # endif CURLM* GMultiHandle ; struct FCurlRequestOptions {)",
    "insertText": "FCurlRequestOptions() : bVerifyPeer(true) , bDontReuseConnections(false) , bAcceptCompressedContent(true) , MaxHostConnections(0) , BufferSize(64*1024)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Log()"
  },
  {
    "label": "OnBeforeFork()",
    "kind": "Method",
    "detail": "Function (bool bVerifyPeer ; bool bDontReuseConnections ; bool bAcceptCompressedContent ; int32 MaxHostConnections ; FString LocalHostAddr ; int32 BufferSize ; bool bAllowSeekFunction = false ; } CurlRequestOptions ; void)",
    "insertText": "OnBeforeFork()"
  },
  {
    "label": "OnAfterFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterFork()"
  },
  {
    "label": "OnEndFramePostFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndFramePostFork()"
  },
  {
    "label": "UpdateConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfigs()"
  },
  {
    "label": "SupportsDynamicProxy()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "SupportsDynamicProxy()"
  },
  {
    "label": "CreateHttpThread()",
    "kind": "Method",
    "detail": "Function (protected : FHttpThreadBase*)",
    "insertText": "CreateHttpThread()"
  }
]