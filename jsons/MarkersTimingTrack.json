[
  {
    "label": "FSlateFontMeasure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontMeasure"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FLogCategoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryInfo"
  },
  {
    "label": "FLogMessageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogMessageInfo"
  },
  {
    "label": "ILogProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILogProvider"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "FTimeMarkerBoxInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeMarkerBoxInfo"
  },
  {
    "label": "FTimeMarkerTextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeMarkerTextInfo"
  },
  {
    "label": "FMarkersTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarkersTimingTrack"
  },
  {
    "label": "FTimeMarkerTrackBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeMarkerTrackBuilder"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Insights / ViewModels / BaseTimingTrack . h \" # include \" Insights / ViewModels / TrackHeader . h \" class FSlateFontMeasure ; struct FSlateBrush ; namespace TraceServices { struct FLogCategoryInfo ; struct FLogMessageInfo ; class ILogProvider ; } namespace UE::Insights { class FDrawContext ; } class FTimingTrackViewport ; namespace UE::Insights::TimingProfiler { struct FTimeMarkerBoxInfo { float X ; float W ; FLinearColor Color ; } ; struct FTimeMarkerTextInfo { float X ; FLinearColor Color ; FString Category ; FString Message ; uint64 LogIndex ; } ; class FMarkersTimingTrack : public FBaseTimingTrack { class FTimeMarkerTrackBuilder ;)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FMarkersTimingTrack, FBaseTimingTrack) public: FMarkersTimingTrack()"
  },
  {
    "label": "FMarkersTimingTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMarkersTimingTrack()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsCollapsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollapsed()"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Expand()"
  },
  {
    "label": "SetIsCollapsed()",
    "kind": "Method",
    "detail": "Function (Header .)",
    "insertText": "SetIsCollapsed(false)"
  },
  {
    "label": "Collapse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Collapse()"
  },
  {
    "label": "SetIsCollapsed()",
    "kind": "Method",
    "detail": "Function (Header .)",
    "insertText": "SetIsCollapsed(true)"
  },
  {
    "label": "ToggleCollapsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleCollapsed()"
  },
  {
    "label": "IsBookmarksTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBookmarksTrack()"
  },
  {
    "label": "UpdateTrackNameAndHeight()",
    "kind": "Method",
    "detail": "Function (bUseOnlyBookmarks = bInUseOnlyBookmarks ;)",
    "insertText": "UpdateTrackNameAndHeight()"
  },
  {
    "label": "SetBookmarksTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBookmarksTrack()"
  },
  {
    "label": "SetBookmarksTrackFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBookmarksTrackFlag(true)"
  },
  {
    "label": "SetDirtyFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirtyFlag()"
  },
  {
    "label": "SetLogsTrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLogsTrack()"
  },
  {
    "label": "SetBookmarksTrackFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBookmarksTrackFlag(false)"
  },
  {
    "label": "SaveScreenshot_CanExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SaveScreenshot_CanExecute()"
  },
  {
    "label": "SaveScreenshot_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveScreenshot_Execute()"
  },
  {
    "label": "GetNumLogMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumLogMessages()"
  },
  {
    "label": "GetNumTexts()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumTexts()"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdate(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "PostDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetEvent(float InPosX, float InPosY, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "ResetCache()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetCache()"
  },
  {
    "label": "UpdateDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDrawState(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "UpdateCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCategory(const TraceServices::FLogCategoryInfo*& InOutCategory, const TCHAR* CategoryName)"
  },
  {
    "label": "TryGetHoveredEventScreenshotId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetHoveredEventScreenshotId(uint32& OutScreenshotId)"
  },
  {
    "label": "FTimeMarkerTrackBuilder()",
    "kind": "Method",
    "detail": "Function (private : TArray<FTimeMarkerBoxInfo> TimeMarkerBoxes ; TArray<FTimeMarkerTextInfo> TimeMarkerTexts ; bool bUseOnlyBookmarks ; const TraceServices::FLogCategoryInfo* BookmarkCategory ; const TraceServices::FLogCategoryInfo* ScreenshotCategory ; FTrackHeader Header ; int32 NumLogMessages ; int32 NumDrawBoxes ; int32 NumDrawTexts ; const FSlateBrush* WhiteBrush ; const FSlateFontInfo Font ; uint32 LastScreenshotId ; } ; class FTimeMarkerTrackBuilder { public :)",
    "insertText": "FTimeMarkerTrackBuilder(FMarkersTimingTrack& InTrack, const FTimingTrackViewport& InViewport, float InFontScale)"
  },
  {
    "label": "FTimeMarkerTrackBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimeMarkerTrackBuilder(const FTimeMarkerTrackBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTimeMarkerTrackBuilder&)",
    "insertText": "operator(const FTimeMarkerTrackBuilder&)"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (const FTimingTrackViewport&)",
    "insertText": "GetViewport()"
  },
  {
    "label": "AddLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLogMessage(const TraceServices::FLogMessageInfo& Message)"
  },
  {
    "label": "EndLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLog()"
  },
  {
    "label": "GetColorByCategory()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorByCategory(const TCHAR* const Category)"
  },
  {
    "label": "GetColorByVerbosity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorByVerbosity(const ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Flush(float AvailableTextW)"
  },
  {
    "label": "AddTimeMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeMarker(const float X, const uint64 LogIndex, const ELogVerbosity::Type Verbosity, const TCHAR* const Category, const TCHAR* Message)"
  }
]