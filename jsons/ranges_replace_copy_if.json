[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REPLACE_COPY_IF_H # define _LIBCPP___ALGORITHM_RANGES_REPLACE_COPY_IF_H # include<__algorithm / in_out_result . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__replace_copy_if_impl()",
    "kind": "Method",
    "detail": "Function (template<class _InIter,class _OutIter> using replace_copy_if_result = in_out_result<_InIter,_OutIter> ; template<class _InIter,class _Sent,class _OutIter,class _Pred,class _Type,class _Proj> _LIBCPP_HIDE_FROM_ABI replace_copy_if_result<_InIter,_OutIter>)",
    "insertText": "__replace_copy_if_impl(_InIter __first, _Sent __last, _OutIter __result, _Pred& __pred, const _Type& __new_value, _Proj& __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} namespace __replace_copy_if { struct __fn { template<input_iterator _InIter,sentinel_for<_InIter> _Sent,class _Type,output_iterator<const _Type&> _OutIter,class _Proj = identity,indirect_unary_predicate<projected<_InIter,_Proj>> _Pred> requires indirectly_copyable<_InIter,_OutIter> _LIBCPP_HIDE_FROM_ABI replace_copy_if_result<_InIter,_OutIter>)",
    "insertText": "operator()( _InIter __first, _Sent __last, _OutIter __result, _Pred __pred, const _Type& __new_value, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,class _Type,output_iterator<const _Type&> _OutIter,class _Proj = identity,indirect_unary_predicate<projected<iterator_t<_Range>,_Proj>> _Pred> requires indirectly_copyable<iterator_t<_Range>,_OutIter> _LIBCPP_HIDE_FROM_ABI replace_copy_if_result<borrowed_iterator_t<_Range>,_OutIter>)",
    "insertText": "operator()(_Range&& __range, _OutIter __result, _Pred __pred, const _Type& __new_value, _Proj __proj = {})"
  }
]