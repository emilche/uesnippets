[
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12CommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContext"
  },
  {
    "label": "FD3D12Queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Queue"
  },
  {
    "label": "FD3D12ManualFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ManualFence"
  },
  {
    "label": "FD3D12ManualFence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" D3D12ThirdParty . h \" # include \" Templates / RefCounting . h \" class FD3D12Adapter ; class FD3D12CommandContext ; class FD3D12Queue ; int32 GEmitRgpFrameMarkers ; class FD3D12ManualFence final { FD3D12Adapter* const Parent ; TMap<FD3D12Queue*,TRefCountPtr<ID3D12Fence>> Fences ; FThreadSafeCounter NextFenceValueTOP = 0 ; uint64 NextFenceValueBOP = 0 ; uint64 CompletedFenceValue = 0 ;)",
    "insertText": "FD3D12ManualFence(FD3D12ManualFence const&)"
  },
  {
    "label": "FD3D12ManualFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ManualFence(FD3D12ManualFence&&)"
  },
  {
    "label": "FD3D12ManualFence()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FD3D12ManualFence(FD3D12Adapter* InParent)"
  },
  {
    "label": "GetCompletedFenceValue()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCompletedFenceValue(bool bUpdateCachedFenceValue)"
  },
  {
    "label": "IsFenceComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFenceComplete(uint64 FenceValue, bool bUpdateCachedFenceValue)"
  },
  {
    "label": "GetNextFenceToSignal()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetNextFenceToSignal()"
  },
  {
    "label": "AdvanceTOP()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceTOP()"
  },
  {
    "label": "AdvanceBOP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceBOP()"
  }
]