[
  {
    "label": "FAutomationPerformanceSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationPerformanceSnapshot"
  },
  {
    "label": "IAutomationWorkerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationWorkerModule"
  },
  {
    "label": "FAutomationTestExecutionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestExecutionInfo"
  },
  {
    "label": "ToCommaDelimetedString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" struct FAutomationPerformanceSnapshot { FString Changelist ; FString BuildConfiguration ; FString MapName ; FString SequenceName ; FString AverageFPS ; FString AverageFrameTime ; FString AverageGameThreadTime ; FString AverageRenderThreadTime ; FString AverageGPUTime ; FString PercentOfFramesAtLeast30FPS ; FString PercentOfFramesAtLeast60FPS ; FString)",
    "insertText": "ToCommaDelimetedString()"
  },
  {
    "label": "FromCommaDelimitedString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromCommaDelimitedString(const FString& CommaDelimitedString)"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Values ; const bool bCullEmpty = false ; CommaDelimitedString .)",
    "insertText": "ParseIntoArray(Values, TEXT( \",\" ), bCullEmpty)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (int32 NextValue = 0 ; Changelist = Values [ NextValue + + ] ; BuildConfiguration = Values [ NextValue + + ] ; MapName = Values [ NextValue + + ] ; SequenceName = Values [ NextValue + + ] ; AverageFPS = Values [ NextValue + + ] ; AverageFrameTime = Values [ NextValue + + ] ; AverageGameThreadTime = Values [ NextValue + + ] ; AverageRenderThreadTime = Values [ NextValue + + ] ; AverageGPUTime = Values [ NextValue + + ] ; PercentOfFramesAtLeast30FPS = Values [ NextValue + + ] ; PercentOfFramesAtLeast60FPS = Values [ NextValue + + ] ; } } ; class IAutomationWorkerModule : public IModuleInterface { public :)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FStopTestEvent, bool, FString, class FAutomationTestExecutionInfo const &)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "IAutomationWorkerModule()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "IAutomationWorkerModule()"
  }
]