[
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FSequenceBindingNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceBindingNode"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "FSequenceIDStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceIDStack"
  },
  {
    "label": "FSequenceBindingNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Misc / Guid . h \" # include \" MovieSceneObjectBindingID . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / SharedPointer . h \" # include \" Textures / SlateIcon . h \" # include \" UObject / ObjectKey . h \" class UMovieScene ; class UMovieSceneSequence ; struct FSequenceBindingNode {)",
    "insertText": "FSequenceBindingNode(FText InDisplayString, const UE::MovieScene::FFixedObjectBindingID& InBindingID, FSlateIcon InIcon) : BindingID(InBindingID) , ParentID(FGuid(), MovieSceneSequenceID::Invalid) , DisplayString(InDisplayString) , Icon(InIcon) , bIsSpawnable(false)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(TSharedRef<FSequenceBindingNode> Child)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Child -> ParentID = BindingID ; Children .)",
    "insertText": "Add(Child)"
  },
  {
    "label": "ConditionalRebuild()",
    "kind": "Method",
    "detail": "Function (} UE::MovieScene::FFixedObjectBindingID BindingID,ParentID ; FText DisplayString ; FSlateIcon Icon ; bool bIsSpawnable ; TArray<TSharedRef<FSequenceBindingNode>> Children ; } ; struct FSequenceBindingTree { bool)",
    "insertText": "ConditionalRebuild(UMovieSceneSequence* InSequence, FObjectKey InActiveSequence, FMovieSceneSequenceID InActiveSequenceID)"
  },
  {
    "label": "ForceRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRebuild(UMovieSceneSequence* InSequence, FObjectKey InActiveSequence, FMovieSceneSequenceID InActiveSequenceID)"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSequenceBindingNode>)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FSequenceBindingNode>)",
    "insertText": "FindNode(UE::MovieScene::FFixedObjectBindingID BindingID)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(UMovieSceneSequence* InSequence, FSequenceIDStack& SequenceIDStack)"
  },
  {
    "label": "EnsureParent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSequenceBindingNode>)",
    "insertText": "EnsureParent(const FGuid& InParentGuid, UMovieScene* InMovieScene, FMovieSceneSequenceID SequenceID)"
  }
]