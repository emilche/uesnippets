[
  {
    "label": "FConfigFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigFile"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FInstigator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstigator"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FWorkerRequestsLocal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerRequestsLocal"
  },
  {
    "label": "HasExternalRequests()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CookOnTheSide / CookOnTheFlyServer . h \" # include \" CookRequests . h \" # include \" Cooker / CookTypes . h \" # include \" HAL / Platform . h \" # include \" IWorkerRequests . h \" class FConfigFile ; class ITargetPlatform ; namespace UE::Cook { struct FInstigator ; struct FPackageData ; class FWorkerRequestsLocal : public IWorkerRequests { public : bool)",
    "insertText": "HasExternalRequests()"
  },
  {
    "label": "GetNumExternalRequests()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumExternalRequests()"
  },
  {
    "label": "DequeueNextCluster()",
    "kind": "Method",
    "detail": "Function (EExternalRequestType)",
    "insertText": "DequeueNextCluster(TArray<FSchedulerCallback>& OutCallbacks, TArray<FFilePlatformRequest>& OutBuildRequests)"
  },
  {
    "label": "DequeueSchedulerCallbacks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DequeueSchedulerCallbacks(TArray<FSchedulerCallback>& OutCallbacks)"
  },
  {
    "label": "DequeueAllExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DequeueAllExternal(TArray<FSchedulerCallback>& OutCallbacks, TArray<FFilePlatformRequest>& OutCookRequests)"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTargetPlatforms(const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "OnRemoveSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveSessionPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "QueueDiscoveredPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueDiscoveredPackage(UCookOnTheFlyServer& COTFS, FPackageData& PackageData, FInstigator&& Instigator, FDiscoveredPlatformSet&& ReachablePlatforms, EUrgency Urgency, FGenerationHelper* ParentGenerationHelper)"
  },
  {
    "label": "EndQueueGeneratedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndQueueGeneratedPackages(UCookOnTheFlyServer& COTFS, FGenerationHelper& GenerationHelper)"
  },
  {
    "label": "AddStartCookByTheBookRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStartCookByTheBookRequest(FFilePlatformRequest&& Request)"
  },
  {
    "label": "InitializeCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCookOnTheFly()"
  },
  {
    "label": "AddCookOnTheFlyRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookOnTheFlyRequest(FFilePlatformRequest&& Request)"
  },
  {
    "label": "AddCookOnTheFlyCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookOnTheFlyCallback(FSchedulerCallback&& Callback)"
  },
  {
    "label": "WaitForCookOnTheFlyEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCookOnTheFlyEvents(int TimeoutMs)"
  },
  {
    "label": "AddEditorActionCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEditorActionCallback(FSchedulerCallback&& Callback)"
  },
  {
    "label": "AddPublicInterfaceRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPublicInterfaceRequest(FFilePlatformRequest&& Request, bool bForceFrontOfQueue)"
  },
  {
    "label": "ReportDemoteToIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportDemoteToIdle(UE::Cook::FPackageData& PackageData, ESuppressCookReason Reason)"
  },
  {
    "label": "ReportPromoteToSaveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPromoteToSaveComplete(UE::Cook::FPackageData& PackageData)"
  },
  {
    "label": "GetInitializeConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInitializeConfigSettings(UCookOnTheFlyServer& COTFS, const FString& OutputOverrideDirectory, UE::Cook::FInitializeConfigSettings& Settings)"
  },
  {
    "label": "GetBeginCookConfigSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBeginCookConfigSettings(UCookOnTheFlyServer& COTFS, FBeginCookContext& BeginContext, UE::Cook::FBeginCookConfigSettings& Settings)"
  },
  {
    "label": "GetBeginCookIterativeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBeginCookIterativeFlags(UCookOnTheFlyServer& COTFS, FBeginCookContext& BeginContext)"
  },
  {
    "label": "GetDirectorCookMode()",
    "kind": "Method",
    "detail": "Function (ECookMode::Type)",
    "insertText": "GetDirectorCookMode(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "LogAllRequestedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAllRequestedFiles()"
  }
]