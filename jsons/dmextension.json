[
  {
    "label": "FileSys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileSys"
  },
  {
    "label": "ExtensionCallerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtensionCallerData"
  },
  {
    "label": "Extension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Extension"
  },
  {
    "label": "extImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "extImpl"
  },
  {
    "label": "extImpl53",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "extImpl53"
  },
  {
    "label": "ExtensionCallerData()",
    "kind": "Method",
    "detail": "Function (# ifdef HAS_EXTENSIONS # include<map> # include<p4_any . h> # include<tuple> # include<string> # include<vector> # include<p4_optional . h> # include<functional> # include<unordered_map> # include<unordered_set> # include<p4script . h> class FileSys ; struct ExtensionCallerData { ~)",
    "insertText": "ExtensionCallerData()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void(const char* msg ) > SetClientMsg = []( const char* msg)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; std::function<)",
    "insertText": "bool(const char *desc, const long total, const long position ) > ProgressSet = []( const char *desc, const long total, const long position)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; std::function<)",
    "insertText": "bool(const long pos ) > ProgressIncrement = []( const long pos)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (} ; std::function<std::tuple<bool,)",
    "insertText": "string(const int level, const char* msg ) > ReportError = []( const int level, const char* msg)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (} ; std::function<std::tuple<bool,)",
    "insertText": "string(std::map< std::string, std::string > tagmsg ) > FstatInfo = []( std::map< std::string, std::string > tagmsg)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; std::function<)",
    "insertText": "bool(const char* user, const char *path, int perm ) > CheckPermission = []( const char* user, const char *path, int perm)"
  },
  {
    "label": "Extension()",
    "kind": "Method",
    "detail": "Function (} ; StrBuf archDir,dataDir ; std::string defaultLocale ; std::string userLocale,userCharset,userLanguage ; std::vector<std::string> supportedLocales ; std::string setLocale ; std::unordered_map<std::string,std::unordered_map<std::string,std::string>> translationMap ; int apiVersion = 0 ; } ; class Extension : public p4script { public :)",
    "insertText": "Extension(const SCR_VERSION v, const int apiVersion, p4_std_optional::optional< std::unique_ptr< ExtensionCallerData > > ecd, Error* e, const bool alloc = false)"
  },
  {
    "label": "Extension()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Extension()"
  },
  {
    "label": "LoadFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadFile(const char* file, Error *e)"
  },
  {
    "label": "doBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doBindings(Error* e)"
  },
  {
    "label": "GetECD()",
    "kind": "Method",
    "detail": "Function (ExtensionCallerData*)",
    "insertText": "GetECD()"
  },
  {
    "label": "RunCallBack()",
    "kind": "Method",
    "detail": "Function (p4_std_any::p4_any)",
    "insertText": "RunCallBack(const char* name, Error* e)"
  },
  {
    "label": "extImpl()",
    "kind": "Method",
    "detail": "Function (protected : class extImpl ; class extImpl53 ; std::unique_ptr<extImpl> rhePimpl ; private : p4_std_optional::optional<std::unique_ptr<ExtensionCallerData>> ecd ; } ; class Extension::extImpl { public :)",
    "insertText": "extImpl(Extension& p, Error *e)"
  },
  {
    "label": "extImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "extImpl()"
  },
  {
    "label": "extImpl53()",
    "kind": "Method",
    "detail": "Function (protected : Extension& parent ; } ; class Extension::extImpl53 : public Extension::extImpl { public :)",
    "insertText": "extImpl53(Extension& p, Error *e)"
  },
  {
    "label": "extImpl53()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "extImpl53()"
  }
]