[
  {
    "label": "FODSCThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCThread"
  },
  {
    "label": "UMaterialInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstance"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FMaterialShaderMapId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapId"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FODSCManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCManager"
  },
  {
    "label": "FODSCManagerAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FODSCManagerAccess"
  },
  {
    "label": "FODSCPrimitiveSceneInfoScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCPrimitiveSceneInfoScope"
  },
  {
    "label": "FODSCSuspendForceRecompileScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCSuspendForceRecompileScope"
  },
  {
    "label": "FODSCManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Ticker . h \" # include \" RHIDefinitions . h \" # include \" Containers / Ticker . h \" # include \" ShaderCompiler . h \" class FODSCThread ; class UMaterialInstance ; class FMaterialShaderMap ; class FMaterialShaderMapId ; class FPrimitiveSceneInfo ; class FODSCManager : public FTSTickerObjectBase { public :)",
    "insertText": "FODSCManager()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "AddThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddThreadedRequest(const TArray<FString>& MaterialsToCompile, const FString& ShaderTypesToLoad, EShaderPlatform ShaderPlatform, ERHIFeatureLevel::Type FeatureLevel, EMaterialQualityLevel::Type QualityLevel, ODSCRecompileCommand RecompileCommandType, const FString& RequestedMaterialName = FString())"
  },
  {
    "label": "AddThreadedShaderPipelineRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddThreadedShaderPipelineRequest(EShaderPlatform ShaderPlatform, ERHIFeatureLevel::Type FeatureLevel, EMaterialQualityLevel::Type QualityLevel, const FMaterial* Material, const FString& VertexFactoryName, const FString& PipelineName, const TArray<FString>& ShaderTypeNames, int32 PermutationId, const TArray<FShaderId>& RequestShaderIds)"
  },
  {
    "label": "IsHandlingRequests()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHandlingRequests()"
  },
  {
    "label": "UnregisterMaterialInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMaterialInstance(const UMaterialInstance* MI)"
  },
  {
    "label": "IsODSCActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsODSCActive()"
  },
  {
    "label": "ShouldForceRecompile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForceRecompile(const FMaterialShaderMap* MaterialShaderMap, const FMaterial* Material)"
  },
  {
    "label": "SuspendODSCForceRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendODSCForceRecompile()"
  },
  {
    "label": "ResumeODSCForceRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeODSCForceRecompile()"
  },
  {
    "label": "TryLoadGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryLoadGlobalShaders(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ReportODSCError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportODSCError(const FString& InErrorMessage)"
  },
  {
    "label": "CheckIfRequestAlreadySent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfRequestAlreadySent(const TArray<FShaderId>& RequestShaderIds, const FMaterial* Material)"
  },
  {
    "label": "UnregisterMaterialName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMaterialName(const FMaterial* Material)"
  },
  {
    "label": "RegisterMaterialShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMaterialShaderMaps(const FString& MaterialName, const TArray<TRefCountPtr<FMaterialShaderMap>>& LoadedShaderMaps)"
  },
  {
    "label": "FindMaterialShaderMap()",
    "kind": "Method",
    "detail": "Function (FMaterialShaderMap*)",
    "insertText": "FindMaterialShaderMap(const FString& MaterialName, const FMaterialShaderMapId& ShaderMapId)"
  },
  {
    "label": "SetCurrentPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentPrimitiveSceneInfo(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "ResetCurrentPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCurrentPrimitiveSceneInfo()"
  },
  {
    "label": "OnEnginePreExit()",
    "kind": "Method",
    "detail": "Function (private : class FODSCManagerAccess ; void)",
    "insertText": "OnEnginePreExit()"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThread()"
  },
  {
    "label": "HasAsyncLoadingInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAsyncLoadingInstances()"
  },
  {
    "label": "ShouldForceRecompileInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForceRecompileInternal(const FMaterialShaderMap* MaterialShaderMap, const FMaterial* Material)"
  },
  {
    "label": "RetrieveErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveErrorMessage(FString& OutErrorMessage)"
  },
  {
    "label": "ClearErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearErrorMessage()"
  },
  {
    "label": "FODSCPrimitiveSceneInfoScope()",
    "kind": "Method",
    "detail": "Function (FODSCThread* Thread = nullptr ; FDelegateHandle OnScreenMessagesHandle ; FCriticalSection MaterialInstancesCachedUniformExpressionsCS ; TMap<const void*,TWeakObjectPtr<const UMaterialInstance>> MaterialInstancesCachedUniformExpressions ; FCriticalSection ErrorMessageCS ; FString ErrorMessage ; FName MaterialNameToRecompile ; } ; struct FODSCPrimitiveSceneInfoScope {)",
    "insertText": "FODSCPrimitiveSceneInfoScope(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "SetCurrentPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentPrimitiveSceneInfo(PrimitiveSceneInfo)"
  },
  {
    "label": "FODSCPrimitiveSceneInfoScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FODSCPrimitiveSceneInfoScope()"
  },
  {
    "label": "FODSCSuspendForceRecompileScope()",
    "kind": "Method",
    "detail": "Function (} } ; struct FODSCSuspendForceRecompileScope {)",
    "insertText": "FODSCSuspendForceRecompileScope()"
  }
]