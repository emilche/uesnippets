[
  {
    "label": "FSkeletonTreeSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeSelection"
  },
  {
    "label": "FSkeletonTreeSelection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / AnyOf . h \" # include \" ISkeletonTreeItem . h \" class FSkeletonTreeSelection { public : TArrayView<TSharedPtr<ISkeletonTreeItem>> SelectedItems ;)",
    "insertText": "FSkeletonTreeSelection(TArray<TSharedPtr<ISkeletonTreeItem>>& InSelectedItems) : SelectedItems(InSelectedItems)"
  },
  {
    "label": "FSkeletonTreeSelection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSkeletonTreeSelection(const TArrayView<TSharedPtr<ISkeletonTreeItem>>& InSelectedItems) : SelectedItems(InSelectedItems)"
  },
  {
    "label": "IsMultipleItemsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMultipleItemsSelected()"
  },
  {
    "label": "IsSingleItemSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSingleItemSelected()"
  },
  {
    "label": "IsSingleOfTypeSelected()",
    "kind": "Method",
    "detail": "Function (} template<ItemType> bool)",
    "insertText": "IsSingleOfTypeSelected()"
  },
  {
    "label": "IsSingleOfTypesSelected()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<. . . ItemTypes> bool)",
    "insertText": "IsSingleOfTypesSelected()"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (const bool bTypeResults [ ] = {)",
    "insertText": "false(SelectedItems[0]->IsOfType<ItemTypes>())"
  },
  {
    "label": "GetSingleSelectedItem()",
    "kind": "Method",
    "detail": "Function (} return false ; } TSharedPtr<ISkeletonTreeItem>)",
    "insertText": "GetSingleSelectedItem()"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (const bool bTypeResults [ ] = {)",
    "insertText": "false(SelectedItem->IsOfType<ItemTypes>())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ItemType>> Items ;)",
    "insertText": "for(const TSharedPtr<ISkeletonTreeItem>& SelectedItem : SelectedItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Add(StaticCastSharedPtr<ItemType>(SelectedItem))"
  },
  {
    "label": "GetSelectedItemsOfTypes()",
    "kind": "Method",
    "detail": "Function (} } return Items ; } template<. . . ItemTypes> TArray<TSharedPtr<ISkeletonTreeItem>>)",
    "insertText": "GetSelectedItemsOfTypes()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Add(SelectedItem)"
  },
  {
    "label": "GetSelectedItemsByTypeId()",
    "kind": "Method",
    "detail": "Function (} } return Items ; } TArray<TSharedPtr<ISkeletonTreeItem>>)",
    "insertText": "GetSelectedItemsByTypeId(const FName& InTypeId)"
  }
]