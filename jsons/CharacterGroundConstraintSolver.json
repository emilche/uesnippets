[
  {
    "label": "FCharacterGroundConstraintSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintSolver"
  },
  {
    "label": "FBodyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyData"
  },
  {
    "label": "FImpulseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImpulseData"
  },
  {
    "label": "FConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintData"
  },
  {
    "label": "SetBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBodies(FSolverBody* CharacterSolverBody, FSolverBody* GroundSolverBody = nullptr)"
  },
  {
    "label": "GatherInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInput(FReal Dt, const FCharacterGroundConstraintSettings& Settings, const FCharacterGroundConstraintDynamicData& Data)"
  },
  {
    "label": "SolvePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolvePosition()"
  },
  {
    "label": "ScatterOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterOutput(const FReal Dt, FVec3& OutSolverAppliedForce, FVec3& OutSolverAppliedTorque)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ProjectOntoPlane()",
    "kind": "Method",
    "detail": "Function (FSolverVec3)",
    "insertText": "ProjectOntoPlane(const FSolverVec3& Vector, const FSolverVec3& PlaneNormal)"
  },
  {
    "label": "ClampMagnitude()",
    "kind": "Method",
    "detail": "Function (FSolverVec3)",
    "insertText": "ClampMagnitude(const FSolverVec3& Vector, const FSolverReal& Max)"
  },
  {
    "label": "ClampAbs()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "ClampAbs(const FSolverReal& Value, const FSolverReal& Max)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FSolverBody* InCharacterBody, FSolverBody* InGroundBody)"
  },
  {
    "label": "IsTwoBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTwoBody()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SolveCorrectionSingleBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolveCorrectionSingleBody(const FConstraintData& ConstraintData, FBodyData& BodyData, FImpulseData& ImpulseData)"
  },
  {
    "label": "SolvePositionSingleBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolvePositionSingleBody(const FConstraintData& ConstraintData, FBodyData& BodyData, FImpulseData& ImpulseData)"
  },
  {
    "label": "SolvePositionTwoBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SolvePositionTwoBody(const FConstraintData& ConstraintData, FBodyData& BodyData, FImpulseData& ImpulseData)"
  },
  {
    "label": "MinNormalImpulse()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinNormalImpulse(0.0f)"
  },
  {
    "label": "MinNormalImpulse()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinNormalImpulse(0.0f)"
  }
]