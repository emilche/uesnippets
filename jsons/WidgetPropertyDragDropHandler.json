[
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FWidgetPropertyDragDropHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPropertyDragDropHandler"
  },
  {
    "label": "FWidgetPropertyDragDropHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DragAndDrop / DecoratedDragDropOp . h \" # include \" IDetailDragDropHandler . h \" # include \" Input / DragAndDrop . h \" class IPropertyHandle ; class UWidget ; class UWidgetBlueprint ; class FWidgetPropertyDragDropHandler : public IDetailDragDropHandler { public :)",
    "insertText": "FWidgetPropertyDragDropHandler(UWidget* InWidget, TSharedPtr<IPropertyHandle> InPropertyHandle, UWidgetBlueprint* InWidgetBP)"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragDropOperation>)",
    "insertText": "CreateDragDropOperation()"
  },
  {
    "label": "ComputeNewIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeNewIndex(int32 OriginalIndex, int32 DropOntoIndex, EItemDropZone DropZone)"
  },
  {
    "label": "AcceptDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone)"
  },
  {
    "label": "CanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "CanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone)"
  }
]