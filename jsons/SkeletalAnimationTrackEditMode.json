[
  {
    "label": "HMovieSceneSkeletalAnimationRootHitProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HMovieSceneSkeletalAnimationRootHitProxy"
  },
  {
    "label": "FSelectedRootData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedRootData"
  },
  {
    "label": "FSkeletalAnimationTrackEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalAnimationTrackEditMode"
  },
  {
    "label": "FSelectedRootData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" EditorModeTools . h \" # include \" EdMode . h \" # include \" ISequencer . h \" # include \" Components / SkeletalMeshComponent . h \" # include \" Sections / MovieSceneSkeletalAnimationSection . h \" # include \" EntitySystem / Interrogation / MovieSceneInterrogationLinker . h \" struct HMovieSceneSkeletalAnimationRootHitProxy ; struct FSelectedRootData {)",
    "insertText": "FSelectedRootData(UMovieSceneSkeletalAnimationSection* InSection, USkeletalMeshComponent* InComp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSelectedRootData& InData)"
  },
  {
    "label": "CalcTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalcTransform(const FFrameTime& Frametime, FTransform& OutTransform, FTransform& OutParentTransform)"
  },
  {
    "label": "FSkeletalAnimationTrackEditMode()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UMovieSceneSkeletalAnimationSection> SelectedSection ; TWeakObjectPtr<USkeletalMeshComponent> SelectedMeshComp ; } ; class FSkeletalAnimationTrackEditMode : public FEdMode { public : FName ModeName ;)",
    "insertText": "FSkeletalAnimationTrackEditMode()"
  },
  {
    "label": "UsesToolkits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesToolkits()"
  },
  {
    "label": "Enter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enter()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "GetPivotForOrbit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotForOrbit(FVector& OutPivot)"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& OutMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& OutMatrix, void* InData)"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "OnKeySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeySelected(FViewport* Viewport, HMovieSceneSkeletalAnimationRootHitProxy* KeyProxy)"
  },
  {
    "label": "SetSequencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequencer(const TSharedPtr<ISequencer>& InSequencer)"
  },
  {
    "label": "IsSomethingSelected()",
    "kind": "Method",
    "detail": "Function (WeakSequencer = InSequencer ; } protected : bool)",
    "insertText": "IsSomethingSelected()"
  },
  {
    "label": "GetTransformAtFirstSectionStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTransformAtFirstSectionStart(FTransform& OutWorld, FTransform& OutParent)"
  },
  {
    "label": "IsRootSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootSelected(UMovieSceneSkeletalAnimationSection* Section)"
  }
]