[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "FTypedElementCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypedElementCounter"
  },
  {
    "label": "ICounterCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICounterCategory"
  },
  {
    "label": "TCounterCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCounterCategory"
  },
  {
    "label": "UTypedElementCounterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementCounterInterface"
  },
  {
    "label": "ITypedElementCounterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedElementCounterInterface"
  },
  {
    "label": "TTypedElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElement"
  },
  {
    "label": "GetTypedElementCounterKeyName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Function . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / Interface . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include<type_traits> # include \" TypedElementCounter . generated . h \" class UObject ; class UTypedElementRegistry ; template<KeyType> FName)",
    "insertText": "GetTypedElementCounterKeyName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} else { const FName KeyTypeName = TNameOf<KeyType)",
    "insertText": "GetName()"
  },
  {
    "label": "FTypedElementCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementCounter(UTypedElementRegistry* InRegistry)"
  },
  {
    "label": "FTypedElementCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementCounter(const FTypedElementCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementCounter&)",
    "insertText": "operator(const FTypedElementCounter&)"
  },
  {
    "label": "FTypedElementCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementCounter(FTypedElementCounter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementCounter&)",
    "insertText": "operator(FTypedElementCounter&&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UTypedElementRegistry* InRegistry)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "IncrementCounter()",
    "kind": "Method",
    "detail": "Function (template<KeyType> void)",
    "insertText": "IncrementCounter(const FName InCategory, const KeyType& InKey)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ICounterCategory>& CounterCategory = CounterCategories .)",
    "insertText": "FindOrAdd(InCategory)"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (CounterCategory = MakeUnique<TCounterCategory<)",
    "insertText": "KeyType()"
  },
  {
    "label": "IncrementCounter()",
    "kind": "Method",
    "detail": "Function (} CounterCategory ->)",
    "insertText": "IncrementCounter(InKey)"
  },
  {
    "label": "DecrementCounter()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "DecrementCounter(const FName InCategory, const KeyType& InKey)"
  },
  {
    "label": "GetCounterValue()",
    "kind": "Method",
    "detail": "Function (} } template<KeyType> FCounterValue)",
    "insertText": "GetCounterValue(const FName InCategory, const KeyType& InKey)"
  },
  {
    "label": "ForEachCounterValue()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } template<KeyType> void)",
    "insertText": "ForEachCounterValue(const FName InCategory, TFunctionRef<bool(const KeyType&, FCounterValue)> InCallback)"
  },
  {
    "label": "ClearCounter()",
    "kind": "Method",
    "detail": "Function (} } template<KeyType> void)",
    "insertText": "ClearCounter(const FName InCategory, const KeyType& InKey)"
  },
  {
    "label": "ClearCounters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearCounters(const FName InCategory)"
  },
  {
    "label": "ClearCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCounters()"
  },
  {
    "label": "GetElementTypeCategoryName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetElementTypeCategoryName()"
  },
  {
    "label": "ICounterCategory()",
    "kind": "Method",
    "detail": "Function (private : class ICounterCategory { public : ~)",
    "insertText": "ICounterCategory()"
  },
  {
    "label": "GetCounterValue()",
    "kind": "Method",
    "detail": "Function (template<KeyType> FCounterValue)",
    "insertText": "GetCounterValue(const KeyType& InKey)"
  },
  {
    "label": "ForEachCounterValue()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "ForEachCounterValue(TFunctionRef<bool(const KeyType&, FCounterValue)> InCallback)"
  },
  {
    "label": "IncrementCounter()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "IncrementCounter(const KeyType& InKey)"
  },
  {
    "label": "IncrementCounterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementCounterImpl(&InKey, GetTypedElementCounterKeyName<KeyType>())"
  },
  {
    "label": "DecrementCounter()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "DecrementCounter(const KeyType& InKey)"
  },
  {
    "label": "DecrementCounterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementCounterImpl(&InKey, GetTypedElementCounterKeyName<KeyType>())"
  },
  {
    "label": "ClearCounter()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> void)",
    "insertText": "ClearCounter(const KeyType& InKey)"
  },
  {
    "label": "ClearCounterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCounterImpl(&InKey, GetTypedElementCounterKeyName<KeyType>())"
  },
  {
    "label": "ClearCountersImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCountersImpl()"
  },
  {
    "label": "GetCounterValueImpl()",
    "kind": "Method",
    "detail": "Function (} protected : FCounterValue)",
    "insertText": "GetCounterValueImpl(const void* InKey, const FName InKeyTypeName)"
  },
  {
    "label": "ForEachCounterValueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachCounterValueImpl(const void* InCallback, const FName InKeyTypeName)"
  },
  {
    "label": "IncrementCounterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementCounterImpl(const void* InKey, const FName InKeyTypeName)"
  },
  {
    "label": "DecrementCounterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementCounterImpl(const void* InKey, const FName InKeyTypeName)"
  },
  {
    "label": "ClearCounterImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCounterImpl(const void* InKey, const FName InKeyTypeName)"
  },
  {
    "label": "TCounterCategory()",
    "kind": "Method",
    "detail": "Function (} ; template<KeyType> class TCounterCategory : public ICounterCategory { public :)",
    "insertText": "TCounterCategory() : KeyTypeName(GetTypedElementCounterKeyName<KeyType>())"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (const KeyType* KeyPtr = static_cast<const)",
    "insertText": "KeyType(InKey)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const TFunctionRef<)",
    "insertText": "bool(const KeyType&, FCounterValue)>* CallbackPtr = static_cast<const TFunctionRef<bool(const KeyType&, FCounterValue)>*>(InCallback)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FCounterValue& CounterValue = Counters .)",
    "insertText": "FindOrAdd(*KeyPtr)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Counters .)",
    "insertText": "Remove(*KeyPtr)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Counters .)",
    "insertText": "Empty()"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} private : FName KeyTypeName ; TMap<KeyType,FCounterValue> Counters ; } ; TWeakObjectPtr<UTypedElementRegistry> Registry ; TSortedMap<FName,TUniquePtr<ICounterCategory>,FDefaultAllocator,FNameFastLess> CounterCategories ; } ;)",
    "insertText": "UINTERFACE(MinimalAPI, meta = (CannotImplementInterfaceInBlueprint))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ITypedElementCounterInterface {)",
    "insertText": "GENERATED_BODY() public: virtual void IncrementCountersForElement(const FTypedElementHandle& InElementHandle, FTypedElementCounter& InOutCounter)"
  },
  {
    "label": "DecrementCountersForElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecrementCountersForElement(const FTypedElementHandle& InElementHandle, FTypedElementCounter& InOutCounter)"
  },
  {
    "label": "IncrementCountersForElement()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TTypedElement<ITypedElementCounterInterface> : public TTypedElementBase<ITypedElementCounterInterface> { void)",
    "insertText": "IncrementCountersForElement(FTypedElementCounter& InOutCounter)"
  },
  {
    "label": "IncrementCountersForElement()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "IncrementCountersForElement(*this, InOutCounter)"
  },
  {
    "label": "DecrementCountersForElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecrementCountersForElement(FTypedElementCounter& InOutCounter)"
  },
  {
    "label": "DecrementCountersForElement()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "DecrementCountersForElement(*this, InOutCounter)"
  }
]