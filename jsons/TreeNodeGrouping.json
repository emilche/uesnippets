[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "TTreeNodeGroupingByUniqueValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTreeNodeGroupingByUniqueValue"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI_BASE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" InsightsCore / Common / AsyncOperationProgress . h \" # include \" InsightsCore / Common / SimpleRtti . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" # include \" InsightsCore / Table / ViewModels / TableColumn . h \" # include \" InsightsCore / Table / ViewModels / TableTreeNode . h \" # include<atomic> struct FSlateBrush ; namespace UE::Insights { class FTable ; class ITreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI_BASE(ITreeNodeGrouping) public: virtual FText GetShortName()"
  },
  {
    "label": "GetTitleName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTitleName()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetBrushName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetBrushName()"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIcon()"
  },
  {
    "label": "GetColumnId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetColumnId()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} ; struct FTreeNodeGroupInfo { FName Name ; bool IsExpanded ; } ; class FTreeNodeGrouping : public ITreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTreeNodeGrouping, ITreeNodeGrouping) public: FTreeNodeGrouping(const FText& InShortName, const FText& InTitleName, const FText& InDescription, const FName InBrushName, const FSlateBrush* InIcon)"
  },
  {
    "label": "FTreeNodeGrouping()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTreeNodeGrouping()"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetShortName()"
  },
  {
    "label": "GroupNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GroupNodes(const TArray<FTableTreeNodePtr>& Nodes, FTableTreeNode& ParentGroup, TWeakPtr<FTable> InParentTable, IAsyncOperationProgress& InAsyncOperationProgress)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (protected : FText ShortName ; FText TitleName ; FText Description ; FName BrushName ; const FSlateBrush* Icon ; } ; class FTreeNodeGroupingFlat : public FTreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTreeNodeGroupingFlat, FTreeNodeGrouping) public: FTreeNodeGroupingFlat()"
  },
  {
    "label": "FTreeNodeGroupingFlat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTreeNodeGroupingFlat()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} ; class FTreeNodeGroupingByUniqueValue : public FTreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTreeNodeGroupingByUniqueValue, FTreeNodeGrouping)"
  },
  {
    "label": "FTreeNodeGroupingByUniqueValue()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTreeNodeGroupingByUniqueValue(TSharedRef<FTableColumn> InColumnRef)"
  },
  {
    "label": "FTreeNodeGroupingByUniqueValue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTreeNodeGroupingByUniqueValue()"
  },
  {
    "label": "GetGroupForNode()",
    "kind": "Method",
    "detail": "Function (} FTreeNodeGroupInfo)",
    "insertText": "GetGroupForNode(const FBaseTreeNodePtr InNode)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FTableColumn>)",
    "insertText": "GetColumn()"
  },
  {
    "label": "TTreeNodeGroupingByUniqueValue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TTreeNodeGroupingByUniqueValue()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (private : Type)",
    "insertText": "GetValue(const FTableCellValue& CellValue)"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGroupName(const FTableColumn& Column, const FTableTreeNode& Node)"
  },
  {
    "label": "GetValueAsGroupingText()",
    "kind": "Method",
    "detail": "Function (FText ValueAsText = Column .)",
    "insertText": "GetValueAsGroupingText(Node)"
  },
  {
    "label": "EmptyGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "EmptyGroupName(TEXT(\"N/A\"))"
  },
  {
    "label": "FStringView()",
    "kind": "Method",
    "detail": "Function (StringView =)",
    "insertText": "FStringView(StringView.GetData(), NAME_SIZE - 1)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FName(StringView, 0)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (TMap<Type,FTableTreeNodePtr> GroupMap ; FTableTreeNodePtr UnsetGroupPtr = nullptr ; ParentGroup .)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "AddChildAndSetParent()",
    "kind": "Method",
    "detail": "Function (ParentGroup .)",
    "insertText": "AddChildAndSetParent(NodePtr)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const TOptional<FTableCellValue> CellValue = Column .)",
    "insertText": "GetValue(*NodePtr)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const Type Value =)",
    "insertText": "GetValue(CellValue.GetValue())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FTableTreeNodePtr* GroupPtrPtr = GroupMap .)",
    "insertText": "Find(Value)"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (const FName GroupName =)",
    "insertText": "GetGroupName(Column, *NodePtr)"
  },
  {
    "label": "FTableTreeNode()",
    "kind": "Method",
    "detail": "Function (GroupPtr = MakeShared<)",
    "insertText": "FTableTreeNode(GroupName, InParentTable)"
  },
  {
    "label": "SetExpansion()",
    "kind": "Method",
    "detail": "Function (GroupPtr ->)",
    "insertText": "SetExpansion(false)"
  },
  {
    "label": "AddChildAndSetParent()",
    "kind": "Method",
    "detail": "Function (ParentGroup .)",
    "insertText": "AddChildAndSetParent(GroupPtr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GroupMap .)",
    "insertText": "Add(Value, GroupPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { GroupPtr =* GroupPtrPtr ; } } else {)",
    "insertText": "if(!UnsetGroupPtr)"
  },
  {
    "label": "FTableTreeNode()",
    "kind": "Method",
    "detail": "Function (UnsetGroupPtr = MakeShared<)",
    "insertText": "FTableTreeNode(FName(TEXT(\"<unset>\")), InParentTable)"
  },
  {
    "label": "AddChildAndSetParent()",
    "kind": "Method",
    "detail": "Function (ParentGroup .)",
    "insertText": "AddChildAndSetParent(UnsetGroupPtr)"
  },
  {
    "label": "FTreeNodeGroupingByUniqueValueCString()",
    "kind": "Method",
    "detail": "Function (} } typedef TTreeNodeGroupingByUniqueValue<bool> FTreeNodeGroupingByUniqueValueBool ; typedef TTreeNodeGroupingByUniqueValue<int64> FTreeNodeGroupingByUniqueValueInt64 ; typedef TTreeNodeGroupingByUniqueValue<float> FTreeNodeGroupingByUniqueValueFloat ; typedef TTreeNodeGroupingByUniqueValue<double> FTreeNodeGroupingByUniqueValueDouble ; class FTreeNodeGroupingByUniqueValueCString : public FTreeNodeGroupingByUniqueValue { public :)",
    "insertText": "FTreeNodeGroupingByUniqueValueCString(TSharedRef<FTableColumn> InColumnRef) : FTreeNodeGroupingByUniqueValue(InColumnRef)"
  },
  {
    "label": "FTreeNodeGroupingByUniqueValueCString()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTreeNodeGroupingByUniqueValueCString()"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (private : FName)",
    "insertText": "GetGroupName(const TCHAR* Value)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} ; class FTreeNodeGroupingByNameFirstLetter : public FTreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTreeNodeGroupingByNameFirstLetter, FTreeNodeGrouping)"
  },
  {
    "label": "FTreeNodeGroupingByNameFirstLetter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTreeNodeGroupingByNameFirstLetter()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} ; class FTreeNodeGroupingByType : public FTreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTreeNodeGroupingByType, FTreeNodeGrouping)"
  },
  {
    "label": "FTreeNodeGroupingByType()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTreeNodeGroupingByType()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (} ; class FTreeNodeGroupingByPathBreakdown : public FTreeNodeGrouping {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTreeNodeGroupingByPathBreakdown, FTreeNodeGrouping)"
  },
  {
    "label": "FTreeNodeGroupingByPathBreakdown()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTreeNodeGroupingByPathBreakdown(TSharedRef<FTableColumn> InColumnRef)"
  },
  {
    "label": "FTreeNodeGroupingByPathBreakdown()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTreeNodeGroupingByPathBreakdown()"
  }
]