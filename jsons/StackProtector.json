[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "StackProtector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackProtector"
  },
  {
    "label": "SSPLayoutKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSPLayoutKind"
  },
  {
    "label": "InsertStackProtectors()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_STACKPROTECTOR_H # define LLVM_CODEGEN_STACKPROTECTOR_H # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / Triple . h \" # include \" llvm / IR / Dominators . h \" # include \" llvm / IR / ValueMap . h \" # include \" llvm / Pass . h \" # include \" llvm / Target / TargetLowering . h \" namespace llvm { class Function ; class Module ; class PHINode ; class StackProtector : public FunctionPass { public : enum SSPLayoutKind { SSPLK_None,SSPLK_LargeArray,SSPLK_SmallArray,SSPLK_AddrOf } ; typedef ValueMap<const AllocaInst*,SSPLayoutKind> SSPLayoutMap ; private : const TargetMachine* TM ; const TargetLoweringBase* TLI ; const Triple Trip ; Function* F ; Module* M ; DominatorTree* DT ; SSPLayoutMap Layout ; unsigned SSPBufferSize ; SmallPtrSet<const PHINode*,1 6> VisitedPHIs ; bool)",
    "insertText": "InsertStackProtectors()"
  },
  {
    "label": "CreateFailBB()",
    "kind": "Method",
    "detail": "Function (BasicBlock*)",
    "insertText": "CreateFailBB()"
  },
  {
    "label": "ContainsProtectableArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsProtectableArray(Type *Ty, bool &IsLarge, bool Strong = false, bool InStruct = false)"
  },
  {
    "label": "HasAddressTaken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAddressTaken(const Instruction *AI)"
  },
  {
    "label": "RequiresStackProtector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresStackProtector()"
  },
  {
    "label": "StackProtector()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "StackProtector() : FunctionPass(ID), TM(nullptr), TLI(nullptr), SSPBufferSize(0)"
  },
  {
    "label": "initializeStackProtectorPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeStackProtectorPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "StackProtector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StackProtector(const TargetMachine *TM) : FunctionPass(ID), TM(TM), TLI(nullptr), Trip(TM->getTargetTriple()), SSPBufferSize(8)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "DominatorTreeWrapperPass()",
    "kind": "Method",
    "detail": "Function (AU . addPreserved<)",
    "insertText": "DominatorTreeWrapperPass()"
  },
  {
    "label": "getSSPLayout()",
    "kind": "Method",
    "detail": "Function (} SSPLayoutKind)",
    "insertText": "getSSPLayout(const AllocaInst *AI)"
  },
  {
    "label": "adjustForColoring()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adjustForColoring(const AllocaInst *From, const AllocaInst *To)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &Fn)"
  }
]