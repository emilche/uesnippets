[
  {
    "label": "default_digits10_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "default_digits10_impl"
  },
  {
    "label": "default_digits_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "default_digits_impl"
  },
  {
    "label": "GenericNumTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenericNumTraits"
  },
  {
    "label": "NumTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NumTraits"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NUMTRAITS_H # define EIGEN_NUMTRAITS_H namespace Eigen { namespace internal { template<T,bool use_numeric_limits = std::numeric_limits<T>::is_specialized,bool is_integer = NumTraits<T>::IsInteger> struct default_digits10_impl { EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR int)",
    "insertText": "run()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (using std::log10 ; using std::ceil ; typedef NumTraits<T>::Real Real ; return)",
    "insertText": "int(ceil(-log10(NumTraits<Real>::epsilon())))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (using std::log ; using std::ceil ; typedef NumTraits<T>::Real Real ; return)",
    "insertText": "int(ceil(-log(NumTraits<Real>::epsilon())/log(static_cast<Real>(2))))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_HAS_TYPE_TRAITS)",
    "insertText": "EIGEN_STATIC_ASSERT(std::is_trivially_copyable<Src>::value, THIS_TYPE_IS_NOT_SUPPORTED)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(std::is_trivially_copyable<Tgt>::value && std::is_default_constructible<Tgt>::value, THIS_TYPE_IS_NOT_SUPPORTED)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof(Src) == sizeof(Tgt), THIS_TYPE_IS_NOT_SUPPORTED)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (Tgt tgt ;)",
    "insertText": "EIGEN_USING_STD(memcpy) memcpy(&tgt, &src, sizeof(Tgt))"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (typedef T Nested ; typedef T Literal ; EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Real)",
    "insertText": "epsilon()"
  },
  {
    "label": "digits10()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR int)",
    "insertText": "digits10()"
  },
  {
    "label": "digits()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR int)",
    "insertText": "digits()"
  },
  {
    "label": "min_exponent()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR int)",
    "insertText": "min_exponent()"
  },
  {
    "label": "highest()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR T)",
    "insertText": "highest()"
  },
  {
    "label": "lowest()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR T)",
    "insertText": "lowest()"
  },
  {
    "label": "infinity()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR T)",
    "insertText": "infinity()"
  },
  {
    "label": "quiet_NaN()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR T)",
    "insertText": "quiet_NaN()"
  },
  {
    "label": "dummy_precision()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct NumTraits : GenericNumTraits<T> { } ; template<> struct NumTraits<float> : GenericNumTraits<float> { EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR float)",
    "insertText": "dummy_precision()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,int Rows,int Cols,int Options,int MaxRows,int MaxCols> struct NumTraits<Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols>> { typedef Array<Scalar,Rows,Cols,Options,MaxRows,MaxCols> ArrayType ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Array<RealScalar,Rows,Cols,Options,MaxRows,MaxCols> Real ; typedef NumTraits<Scalar>::NonInteger NonIntegerScalar ; typedef Array<NonIntegerScalar,Rows,Cols,Options,MaxRows,MaxCols> NonInteger ; typedef ArrayType& Nested ; typedef NumTraits<Scalar>::Literal Literal ; enum { IsComplex = NumTraits<Scalar>::IsComplex,IsInteger = NumTraits<Scalar>::IsInteger,IsSigned = NumTraits<Scalar>::IsSigned,RequireInitialization = 1,ReadCost = ArrayType::SizeAtCompileTime = = Dynamic ? HugeCost : ArrayType::SizeAtCompileTime*)",
    "insertText": "int(NumTraits<Scalar>::ReadCost), AddCost = ArrayType::SizeAtCompileTime==Dynamic ? HugeCost : ArrayType::SizeAtCompileTime * int(NumTraits<Scalar>::AddCost), MulCost = ArrayType::SizeAtCompileTime==Dynamic ? HugeCost : ArrayType::SizeAtCompileTime * int(NumTraits<Scalar>::MulCost)"
  }
]