[
  {
    "label": "PeerConnectionWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionWrapper"
  },
  {
    "label": "PeerConnectionWrapper()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_PEER_CONNECTION_WRAPPER_H_ # define PC_PEER_CONNECTION_WRAPPER_H_ # include<memory> # include<string> # include<vector> # include \" api / data_channel_interface . h \" # include \" api / function_view . h \" # include \" api / jsep . h \" # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtp_sender_interface . h \" # include \" api / rtp_transceiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / stats / rtc_stats_report . h \" # include \" pc / test / mock_peer_connection_observers . h \" namespace webrtc { class PeerConnectionWrapper { public :)",
    "insertText": "PeerConnectionWrapper(rtc::scoped_refptr<PeerConnectionFactoryInterface> pc_factory, rtc::scoped_refptr<PeerConnectionInterface> pc, std::unique_ptr<MockPeerConnectionObserver> observer)"
  },
  {
    "label": "PeerConnectionWrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnectionWrapper()"
  },
  {
    "label": "pc_factory()",
    "kind": "Method",
    "detail": "Function (PeerConnectionFactoryInterface*)",
    "insertText": "pc_factory()"
  },
  {
    "label": "pc()",
    "kind": "Method",
    "detail": "Function (PeerConnectionInterface*)",
    "insertText": "pc()"
  },
  {
    "label": "observer()",
    "kind": "Method",
    "detail": "Function (MockPeerConnectionObserver*)",
    "insertText": "observer()"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateOffer(const PeerConnectionInterface::RTCOfferAnswerOptions& options, std::string* error_out = nullptr)"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateOffer()"
  },
  {
    "label": "CreateOfferAndSetAsLocal()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateOfferAndSetAsLocal(const PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateOfferAndSetAsLocal()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateOfferAndSetAsLocal()"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateAnswer(const PeerConnectionInterface::RTCOfferAnswerOptions& options, std::string* error_out = nullptr)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateAnswer()"
  },
  {
    "label": "CreateAnswerAndSetAsLocal()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateAnswerAndSetAsLocal(const PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateAnswerAndSetAsLocal()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateAnswerAndSetAsLocal()"
  },
  {
    "label": "CreateRollback()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateRollback()"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalDescription(std::unique_ptr<SessionDescriptionInterface> desc, std::string* error_out = nullptr)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, std::string* error_out = nullptr)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, RTCError* error_out)"
  },
  {
    "label": "ExchangeOfferAnswerWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExchangeOfferAnswerWith(PeerConnectionWrapper* answerer)"
  },
  {
    "label": "ExchangeOfferAnswerWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExchangeOfferAnswerWith(PeerConnectionWrapper* answerer, const PeerConnectionInterface::RTCOfferAnswerOptions& offer_options, const PeerConnectionInterface::RTCOfferAnswerOptions& answer_options)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverInterface>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverInterface>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type, const RtpTransceiverInit& init)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverInterface>)",
    "insertText": "AddTransceiver(rtc::scoped_refptr<MediaStreamTrackInterface> track)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverInterface>)",
    "insertText": "AddTransceiver(rtc::scoped_refptr<MediaStreamTrackInterface> track, const RtpTransceiverInit& init)"
  },
  {
    "label": "CreateAudioTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioTrackInterface>)",
    "insertText": "CreateAudioTrack(const std::string& label)"
  },
  {
    "label": "CreateVideoTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<VideoTrackInterface>)",
    "insertText": "CreateVideoTrack(const std::string& label)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids = {})"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>& init_send_encodings)"
  },
  {
    "label": "AddAudioTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "AddAudioTrack(const std::string& track_label, const std::vector<std::string>& stream_ids = {})"
  },
  {
    "label": "AddVideoTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "AddVideoTrack(const std::string& track_label, const std::vector<std::string>& stream_ids = {})"
  },
  {
    "label": "CreateDataChannel()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DataChannelInterface>)",
    "insertText": "CreateDataChannel(const std::string& label)"
  },
  {
    "label": "signaling_state()",
    "kind": "Method",
    "detail": "Function (PeerConnectionInterface::SignalingState)",
    "insertText": "signaling_state()"
  },
  {
    "label": "IsIceGatheringDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIceGatheringDone()"
  },
  {
    "label": "IsIceConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIceConnected()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<const RTCStatsReport>)",
    "insertText": "GetStats()"
  },
  {
    "label": "CreateSdp()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<SessionDescriptionInterface>)",
    "insertText": "CreateSdp(rtc::FunctionView<void(CreateSessionDescriptionObserver*)> fn, std::string* error_out)"
  },
  {
    "label": "SetSdp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSdp(rtc::FunctionView<void(SetSessionDescriptionObserver*)> fn, std::string* error_out)"
  }
]