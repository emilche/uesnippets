[
  {
    "label": "UDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerManager"
  },
  {
    "label": "FDataLayerInstanceDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayerInstanceDesc"
  },
  {
    "label": "FWorldDataLayersActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldDataLayersActorDesc"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "FDataLayerUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataLayerUtils"
  },
  {
    "label": "FWorldPartitionActorDescView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDescView"
  },
  {
    "label": "GetDataLayerIconName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" WorldPartition / DataLayer / DataLayerType . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # include \" WorldPartition / DataLayer / DataLayerInstanceNames . h \" # include \" WorldPartition / WorldPartitionStreamingGeneration . h \" class UDataLayerManager ; class FDataLayerInstanceDesc ; class FWorldDataLayersActorDesc ; class FWorldPartitionActorDesc ; class UActorDescContainer ; class AWorldDataLayers ; class FDataLayerUtils { public : # if WITH_EDITOR const TCHAR*)",
    "insertText": "GetDataLayerIconName(EDataLayerType DataLayerType)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const TCHAR* IconNameByType [ static_cast<)",
    "insertText": "int(EDataLayerType::Size)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEXT(\"DataLayer.Runtime\") , TEXT(\"DataLayer.Editor\"), TEXT(\"\")"
  },
  {
    "label": "ResolveDataLayerInstanceNames()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS FDataLayerInstanceNames)",
    "insertText": "ResolveDataLayerInstanceNames(const UDataLayerManager* InDataLayerManager, const FWorldPartitionActorDesc* InActorDesc, const TArray<const FWorldDataLayersActorDesc*>& InWorldDataLayersActorDescs = TArray<const FWorldDataLayersActorDesc*>())"
  },
  {
    "label": "ResolveRuntimeDataLayerInstanceNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveRuntimeDataLayerInstanceNames(const UDataLayerManager* InDataLayerManager, const IWorldPartitionActorDescInstanceView& InActorDescView, const TArray<const FWorldDataLayersActorDesc*>& InWorldDataLayersActorDescs, FDataLayerInstanceNames& OutRuntimeDataLayerInstanceNames)"
  },
  {
    "label": "GetDataLayerInstanceDescFromInstanceName()",
    "kind": "Method",
    "detail": "Function (const FDataLayerInstanceDesc*)",
    "insertText": "GetDataLayerInstanceDescFromInstanceName(const TArray<const FWorldDataLayersActorDesc*>& InWorldDataLayersActorDescs, const FName& DataLayerInstanceName)"
  },
  {
    "label": "GetDataLayerInstanceDescFromAssetPath()",
    "kind": "Method",
    "detail": "Function (const FDataLayerInstanceDesc*)",
    "insertText": "GetDataLayerInstanceDescFromAssetPath(const TArray<const FWorldDataLayersActorDesc*>& InWorldDataLayersActorDescs, const FName& DataLayerAssetPath)"
  },
  {
    "label": "AreWorldDataLayersActorDescsSane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreWorldDataLayersActorDescsSane(const TArray<const FWorldDataLayersActorDesc*>& InWorldDataLayersActorDescs)"
  },
  {
    "label": "GenerateUniqueDataLayerShortName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateUniqueDataLayerShortName(const UDataLayerManager* InDataLayerManager, const FString& InNewShortName)"
  },
  {
    "label": "SetDataLayerShortName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDataLayerShortName(UDataLayerInstance* InDataLayerInstance, const FString& InNewShortName)"
  },
  {
    "label": "FindDataLayerByShortName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDataLayerByShortName(const UDataLayerManager* InDataLayerManager, const FString& InShortName, TSet<UDataLayerInstance*>& OutDataLayerInstances)"
  },
  {
    "label": "AreDataLayerTypesCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDataLayerTypesCompatible(EDataLayerType ParentDataLayerType, EDataLayerType ChildDataLayerType, bool bIsParentExternalDataLayer, FText* OutReason = nullptr)"
  },
  {
    "label": "GetSanitizedDataLayerShortName()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetSanitizedDataLayerShortName(FString InShortName)"
  }
]