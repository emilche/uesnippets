[
  {
    "label": "FMeshContactGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshContactGenerator"
  },
  {
    "label": "FMTDInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMTDInfo"
  },
  {
    "label": "FTriangleMeshOverlapVisitorNoMTD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleMeshOverlapVisitorNoMTD"
  },
  {
    "label": "FTriangleMeshImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMeshImplicitObject"
  },
  {
    "label": "FTrimeshBVH",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrimeshBVH"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "FTrimeshIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrimeshIndexBuffer"
  },
  {
    "label": "FBvEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBvEntry"
  },
  {
    "label": "FTriangleMeshSweepVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleMeshSweepVisitor"
  },
  {
    "label": "FTriangleMeshSweepVisitorCCD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleMeshSweepVisitorCCD"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / GeometryParticles . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ImplicitObjectScaled . h \" # include \" Chaos / OBBVectorized . h \" # include \" Chaos / SegmentMesh . h \" # include \" Chaos / Triangle . h \" # include \" AABBTree . h \" # include \" BoundingVolume . h \" # include \" BoundingVolumeHierarchy . h \" # include \" Box . h \" # include \" ChaosArchive . h \" # include \" ImplicitObject . h \" # include \" UObject / ExternalPhysicsCustomObjectVersion . h \" # include \" UObject / PhysicsObjectVersion . h \" # include<type_traits> namespace Chaos::Private { class FMeshContactGenerator ; } namespace Chaos { bool TriMeshPerPolySupport ; struct FMTDInfo ; template<QueryGeomType> struct FTriangleMeshOverlapVisitorNoMTD ; class FTriangleMeshImplicitObject ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FAABBVectorized& Bounds)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (struct FTrimeshBVH { using FAABBType = TAABB<FRealSingle,3> ; enum class EVisitorResult { Stop = 0,Continue,} ; enum class EFilterResult { Skip = 0,Keep,} ; struct)",
    "insertText": "alignas(16)"
  },
  {
    "label": "FChildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChildData()"
  },
  {
    "label": "GetChildOrFaceIndex()",
    "kind": "Method",
    "detail": "Function (INDEX_NONE,INDEX_NONE },FaceCount { 0,0 } { } int32)",
    "insertText": "GetChildOrFaceIndex(int ChildIndex)"
  },
  {
    "label": "SetFaceCount()",
    "kind": "Method",
    "detail": "Function (ChildOrFaceIndex [ ChildIndex ] = InChildOrFaceIndex ; } void)",
    "insertText": "SetFaceCount(int ChildIndex, int32 InFaceCount)"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (FaceCount [ ChildIndex ] = InFaceCount ; } void)",
    "insertText": "SetBounds(int ChildIndex, const FAABB3& AABB)"
  },
  {
    "label": "FAABBVectorized()",
    "kind": "Method",
    "detail": "Function (Bounds [ ChildIndex ] =)",
    "insertText": "FAABBVectorized(AABB)"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBounds(int ChildIndex, const TAABB<FRealSingle, 3>& AABB)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} const FAABBVectorized&)",
    "insertText": "GetBounds(int ChildIndex)"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (Ar<<Bounds [ 0 ] ; Ar<<ChildOrFaceIndex [ 0 ] ; Ar<<FaceCount [ 0 ] ; Ar<<Bounds [ 1 ] ; Ar<<ChildOrFaceIndex [ 1 ] ; Ar<<FaceCount [ 1 ] ; } private : FAABBVectorized Bounds [ 2 ] ; int32 ChildOrFaceIndex [ 2 ] ; int32 FaceCount [ 2 ] ; } ; struct FNode {)",
    "insertText": "FNode()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} FChildData Children ; } ; template<SQVisitor> void)",
    "insertText": "Raycast(const FVec3& Start, const FVec3& Dir, const FReal Length, SQVisitor& Visitor)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (FRealSingle CurrentLength = static_cast<)",
    "insertText": "FRealSingle(Length)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float StartSimd =)",
    "insertText": "MakeVectorRegisterFloatFromDouble(MakeVectorRegisterDouble(Start.X, Start.Y, Start.Z, 0.0))"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float DirSimd =)",
    "insertText": "MakeVectorRegisterFloatFromDouble(MakeVectorRegisterDouble(Dir.X, Dir.Y, Dir.Z, 0.0))"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float Parallel =)",
    "insertText": "VectorCompareGT(GlobalVectorConstants::SmallNumber, VectorAbs(DirSimd))"
  },
  {
    "label": "VectorBitwiseNotAnd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float InvDirSimd =)",
    "insertText": "VectorBitwiseNotAnd(Parallel, VectorDivide(VectorOne(), DirSimd))"
  },
  {
    "label": "CurrentLength()",
    "kind": "Method",
    "detail": "Function (EFilterResult)",
    "insertText": "CurrentLength(const FAABBVectorized& Bounds)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float CurDataLength =)",
    "insertText": "VectorLoadFloat1(&CurrentLength)"
  },
  {
    "label": "RaycastFast()",
    "kind": "Method",
    "detail": "Function (const bool bHit = Bounds .)",
    "insertText": "RaycastFast(StartSimd, InvDirSimd, Parallel, CurDataLength)"
  },
  {
    "label": "VisitRaycast()",
    "kind": "Method",
    "detail": "Function (const bool bContinueVisiting = Visitor .)",
    "insertText": "VisitRaycast(FaceIndex, CurrentLength)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (} template<SQVisitor> void)",
    "insertText": "Sweep(const FVec3& Start, const FVec3& Dir, const FReal Length, const FVec3& QueryHalfExtents, SQVisitor& Visitor)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float QueryHalfExtentsSimd =)",
    "insertText": "MakeVectorRegisterFloatFromDouble(MakeVectorRegisterDouble(QueryHalfExtents.X, QueryHalfExtents.Y, QueryHalfExtents.Z, 0.0))"
  },
  {
    "label": "QueryHalfExtentsSimd()",
    "kind": "Method",
    "detail": "Function (EFilterResult)",
    "insertText": "QueryHalfExtentsSimd(const FAABBVectorized& Bounds)"
  },
  {
    "label": "SweepBounds()",
    "kind": "Method",
    "detail": "Function (const FAABBVectorized)",
    "insertText": "SweepBounds(VectorSubtract(Bounds.GetMin(), QueryHalfExtentsSimd), VectorAdd(Bounds.GetMax(), QueryHalfExtentsSimd))"
  },
  {
    "label": "VisitSweep()",
    "kind": "Method",
    "detail": "Function (const bool bContinueVisiting = Visitor .)",
    "insertText": "VisitSweep(FaceIndex, CurrentLength)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (} template<SQVisitor> void)",
    "insertText": "Overlap(const FAABBVectorized& AABB, SQVisitor& Visitor)"
  },
  {
    "label": "AABB()",
    "kind": "Method",
    "detail": "Function (EFilterResult)",
    "insertText": "AABB(const FAABBVectorized& Bounds)"
  },
  {
    "label": "Intersects()",
    "kind": "Method",
    "detail": "Function (const bool bHit = Bounds .)",
    "insertText": "Intersects(AABB)"
  },
  {
    "label": "VisitOverlap()",
    "kind": "Method",
    "detail": "Function (const bool bContinueVisiting = Visitor .)",
    "insertText": "VisitOverlap(FaceIndex)"
  },
  {
    "label": "OverlapOBB()",
    "kind": "Method",
    "detail": "Function (} template<SQVisitor> void)",
    "insertText": "OverlapOBB(const Private::FOBBVectorized& Obb, SQVisitor& Visitor)"
  },
  {
    "label": "Obb()",
    "kind": "Method",
    "detail": "Function (EFilterResult)",
    "insertText": "Obb(const FAABBVectorized& Bounds)"
  },
  {
    "label": "IntersectAABB()",
    "kind": "Method",
    "detail": "Function (const bool bHit = Obb .)",
    "insertText": "IntersectAABB(Bounds)"
  },
  {
    "label": "FindAllIntersectionsNoMTD()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType> bool)",
    "insertText": "FindAllIntersectionsNoMTD(const Private::FOBBVectorized& Intersection, const TRigidTransform<FReal, 3>& Transform, const QueryGeomType& QueryGeom, FReal Thickness, const FVec3& TriMeshScale, const FTriangleMeshImplicitObject* TriMesh)"
  },
  {
    "label": "FindAllIntersectionsNoMTD()",
    "kind": "Method",
    "detail": "Function (template<QueryGeomType> bool)",
    "insertText": "FindAllIntersectionsNoMTD(const FAABB3& Intersection, const TRigidTransform<FReal, 3>& Transform, const QueryGeomType& QueryGeom, FReal Thickness, const FVec3& TriMeshScale, const FTriangleMeshImplicitObject* TriMesh)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "FindAllIntersections(const FAABB3& Intersection)"
  },
  {
    "label": "VisitFaces()",
    "kind": "Method",
    "detail": "Function (template<BoundsFilterType,FaceVisitorType> EVisitorResult)",
    "insertText": "VisitFaces(int32 StartIndex, int32 IndexCount, BoundsFilterType& BoundsFilter, FaceVisitorType& FaceVisitor)"
  },
  {
    "label": "EndIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "EndIndex(StartIndex + IndexCount)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (NodeIndexStack .)",
    "insertText": "Push(0)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const int32 NodeIndex = NodeIndexStack .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FNode& Node = Nodes [ NodeIndex ] ;)",
    "insertText": "for(int32 ChildIndex = 0; ChildIndex < 2; ++ChildIndex)"
  },
  {
    "label": "GetChildOrFaceIndex()",
    "kind": "Method",
    "detail": "Function (const FChildData& ChildData = Node . Children ; const int32 FaceIndex = ChildData .)",
    "insertText": "GetChildOrFaceIndex(ChildIndex)"
  },
  {
    "label": "GetFaceCount()",
    "kind": "Method",
    "detail": "Function (const uint32 FaceCount = ChildData .)",
    "insertText": "GetFaceCount(ChildIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } } } } } void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FUE5MainStreamObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Nodes ; Ar<<FaceBounds ;)",
    "insertText": "if(Ar.CustomVer(FUE5MainStreamObjectVersion::GUID) < FUE5MainStreamObjectVersion::RemoveTriangleMeshBVHFaces)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<int32> TmpFaces ; Ar<<TmpFaces ; } } TArray<FNode> Nodes ; TArray<FAABBVectorized> FaceBounds ; } ; FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, FTrimeshBVH::FChildData& ChildData)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (TBox<FRealSingle,3)",
    "insertText": "SerializeAsAABB(Ar, Bounds)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Bounds.GetMin(), Floats)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (TVector<FRealSingle,3>)",
    "insertText": "Min(Floats[0], Floats[1], Floats[2])"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Bounds.GetMax(), Floats)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (TVector<FRealSingle,3>)",
    "insertText": "Max(Floats[0], Floats[1], Floats[2])"
  },
  {
    "label": "BoundsToSerialize()",
    "kind": "Method",
    "detail": "Function (FTrimeshBVH::FAABBType)",
    "insertText": "BoundsToSerialize(Min, Max)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (TBox<FRealSingle,3)",
    "insertText": "SerializeAsAABB(Ar, BoundsToSerialize)"
  },
  {
    "label": "FAABBVectorized()",
    "kind": "Method",
    "detail": "Function (Bounds =)",
    "insertText": "FAABBVectorized(BoundsToSerialize)"
  },
  {
    "label": "FTrimeshIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTrimeshIndexBuffer(TArray<TVec3<LargeIdxType>>&& Elements) : LargeIdxBuffer(MoveTemp(Elements)) , bRequiresLargeIndices(true)"
  },
  {
    "label": "FTrimeshIndexBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTrimeshIndexBuffer(TArray<TVec3<SmallIdxType>>&& Elements) : SmallIdxBuffer(MoveTemp(Elements)) , bRequiresLargeIndices(false)"
  },
  {
    "label": "FTrimeshIndexBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTrimeshIndexBuffer(const FTrimeshIndexBuffer& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTrimeshIndexBuffer&)",
    "insertText": "operator(const FTrimeshIndexBuffer& Other)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reinitialize(TArray<TVec3<LargeIdxType>>&& Elements)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (LargeIdxBuffer .)",
    "insertText": "Empty()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (bRequiresLargeIndices = true ; LargeIdxBuffer =)",
    "insertText": "MoveTemp(Elements)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reinitialize(TArray<TVec3<SmallIdxType>>&& Elements)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<LargeIdxBuffer ; bRequiresLargeIndices = true ; } else { Ar<<bRequiresLargeIndices ;)",
    "insertText": "if(bRequiresLargeIndices)"
  },
  {
    "label": "RequiresLargeIndices()",
    "kind": "Method",
    "detail": "Function (Ar<<LargeIdxBuffer ; } else { Ar<<SmallIdxBuffer ; } } } bool)",
    "insertText": "RequiresLargeIndices()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return SmallIdxBuffer .)",
    "insertText": "Num()"
  },
  {
    "label": "GetIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} template<ExpectedType> const TArray<TVec3<ExpectedType>>&)",
    "insertText": "GetIndexBuffer()"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (OutA = Particles .)",
    "insertText": "GetX(Elements[TriIdx][0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (OutB = Particles .)",
    "insertText": "GetX(Elements[TriIdx][1])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (OutC = Particles .)",
    "insertText": "GetX(Elements[TriIdx][2])"
  },
  {
    "label": "TriangleMeshTransformVertsHelper()",
    "kind": "Method",
    "detail": "Function (} template<IdxType,ParticlesType> void)",
    "insertText": "TriangleMeshTransformVertsHelper(const FRigidTransform3& Transform, int32 TriIdx, const ParticlesType& Particles, const TArray<TVector<IdxType, 3>>& Elements, FVec3& OutA, FVec3& OutB, FVec3& OutC, int32& OutVertexIndexA, int32& OutVertexIndexB, int32& OutVertexIndexC)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (const int32 VertexIndexA = Elements [ TriIdx ] [ 0 ] ; const int32 VertexIndexB = Elements [ TriIdx ] [ 1 ] ; const int32 VertexIndexC = Elements [ TriIdx ] [ 2 ] ; OutA = Transform .)",
    "insertText": "TransformPosition(FVector(Particles.GetX(VertexIndexA)))"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (OutB = Transform .)",
    "insertText": "TransformPosition(FVector(Particles.GetX(VertexIndexB)))"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (OutC = Transform .)",
    "insertText": "TransformPosition(FVector(Particles.GetX(VertexIndexC)))"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (OutVertexIndexA = VertexIndexA ; OutVertexIndexB = VertexIndexB ; OutVertexIndexC = VertexIndexC ; } class FTriangleMeshImplicitObject final : public FImplicitObject { public : using FImplicitObject::GetTypeName ; using ParticlesType = TParticles<FRealSingle,3> ; using ParticleVecType = TVec3<FRealSingle> ; template<IdxType>)",
    "insertText": "FTriangleMeshImplicitObject(ParticlesType&& Particles, TArray<TVec3<IdxType>>&& Elements, TArray<uint16>&& InMaterialIndices, TUniquePtr<TArray<int32>>&& InExternalFaceIndexMap = nullptr, TUniquePtr<TArray<int32>>&& InExternalVertexIndexMap = nullptr, const bool bInCullsBackFaceRaycast = false) : FImplicitObject(EImplicitObject::HasBoundingBox | EImplicitObject::DisableCollisions, ImplicitObjectType::TriangleMesh) , MParticles(MoveTemp(Particles)) , MElements(MoveTemp(Elements)) , MLocalBoundingBox(FVec3(0), FVec3(0)) , MaterialIndices(MoveTemp(InMaterialIndices)) , ExternalFaceIndexMap(MoveTemp(InExternalFaceIndexMap)) , ExternalVertexIndexMap(MoveTemp(InExternalVertexIndexMap)) , bCullsBackFaceRaycast(bInCullsBackFaceRaycast)"
  },
  {
    "label": "GetNumTriangles()",
    "kind": "Method",
    "detail": "Function (const int32 NumTriangles = MElements .)",
    "insertText": "GetNumTriangles()"
  },
  {
    "label": "IdxType()",
    "kind": "Method",
    "detail": "Function (const TArray<TVec3<IdxType>>& Tris = MElements . GetIndexBuffer<)",
    "insertText": "IdxType()"
  },
  {
    "label": "FAABB3()",
    "kind": "Method",
    "detail": "Function (const TVec3<IdxType>& FirstTri = Tris [ 0 ] ; MLocalBoundingBox =)",
    "insertText": "FAABB3(MParticles.GetX(FirstTri[0]), MParticles.GetX(FirstTri[0]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "GrowToInclude(MParticles.GetX(FirstTri[1]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "GrowToInclude(MParticles.GetX(FirstTri[2]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (const TVec3<IdxType>& Tri = Tris [ TriangleIndex ] ; MLocalBoundingBox .)",
    "insertText": "GrowToInclude(MParticles.GetX(Tri[0]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "GrowToInclude(MParticles.GetX(Tri[1]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "GrowToInclude(MParticles.GetX(Tri[2]))"
  },
  {
    "label": "RebuildFastBVH()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "RebuildFastBVH()"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangleMeshImplicitObject(const FTriangleMeshImplicitObject& Other)"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTriangleMeshImplicitObject(FTriangleMeshImplicitObject&& Other)"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTriangleMeshImplicitObject()"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetRadius()"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Raycast(const FVec3& StartPoint, const FVec3& Dir, const FReal Length, const FReal Thickness, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Overlap(const FVec3& Point, const FReal Thickness)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TSphere<FReal, 3>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TBox<FReal, 3>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const FCapsule& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const FConvex& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<TSphere<FReal, 3>>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<TBox<FReal, 3>>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<FCapsule>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<FConvex>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TSphere<FReal, 3>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TBox<FReal, 3>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const FCapsule& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const FConvex& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<TSphere<FReal, 3>>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<TBox<FReal, 3>>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<FCapsule>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<FConvex>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness = 0, const bool bComputeMTD = false, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const TSphere<FReal, 3>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const TBox<FReal, 3>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const FCapsule& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const FConvex& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const TImplicitObjectScaled<TSphere<FReal, 3>>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const TImplicitObjectScaled<TBox<FReal, 3>>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const TImplicitObjectScaled<FCapsule>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeomCCD(const TImplicitObjectScaled<FConvex>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const TSphere<FReal, 3>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex)"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const TBox<FReal, 3>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex)"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const FCapsule& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex)"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const FConvex& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex)"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const TImplicitObjectScaled < TSphere<FReal, 3> >& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const TImplicitObjectScaled < TBox<FReal, 3> >& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const TImplicitObjectScaled < FCapsule >& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GJKContactPoint(const TImplicitObjectScaled < FConvex >& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "GetExternalFaceIndexFromInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetExternalFaceIndexFromInternal(int32 InternalFaceIndex)"
  },
  {
    "label": "GetCullsBackFaceRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCullsBackFaceRaycast()"
  },
  {
    "label": "SetCullsBackFaceRaycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCullsBackFaceRaycast(const bool bInCullsBackFace)"
  },
  {
    "label": "FindMostOpposingFace()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindMostOpposingFace(const FVec3& Position, const FVec3& UnitDir, int32 HintFaceIndex, FReal SearchDistance)"
  },
  {
    "label": "FindMostOpposingFaceScaled()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindMostOpposingFaceScaled(const FVec3& Position, const FVec3& UnitDir, int32 HintFaceIndex, FReal SearchDist, const FVec3& Scale)"
  },
  {
    "label": "FindGeometryOpposingNormal()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "FindGeometryOpposingNormal(const FVec3& DenormDir, int32 FaceIndex, const FVec3& OriginalNormal)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "DeepCopyGeometry()",
    "kind": "Method",
    "detail": "Function (Chaos::FImplicitObjectPtr)",
    "insertText": "DeepCopyGeometry()"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(FChaosArchive& Ar)"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(Ar)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (Ar<<MParticles ; Ar<<MElements ; TBox<FReal,3)",
    "insertText": "SerializeAsAABB(Ar, MLocalBoundingBox)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<TGeometryParticles<FReal,3>> ConvexHulls ; Ar<<ConvexHulls ; })",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) < FExternalPhysicsCustomObjectVersion::TrimeshSerializesBV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) < FExternalPhysicsCustomObjectVersion::TrimeshSerializesAABBTree)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Ar.CustomVer(FUE5MainStreamObjectVersion::GUID) < FUE5MainStreamObjectVersion::UseTriangleMeshBVH)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BVHType BVH ; Ar<<BVH ;)",
    "insertText": "if(BVH.GetNodes().IsEmpty())"
  },
  {
    "label": "RebuildFastBVHFromTree()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RebuildFastBVHFromTree(BVH)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) >= FExternalPhysicsCustomObjectVersion::AddTrimeshMaterialIndices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<MaterialIndices ; })",
    "insertText": "if(Ar.CustomVer(FExternalPhysicsCustomObjectVersion::GUID) >= FExternalPhysicsCustomObjectVersion::TriangleMeshHasFaceIndexMap)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<TArray<int32>> ExternalFaceIndexMapTemp = MakeUnique<TArray<)",
    "insertText": "int32(TArray<int32>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<* ExternalFaceIndexMapTemp ;)",
    "insertText": "if(!ExternalFaceIndexMapTemp->IsEmpty())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ExternalFaceIndexMap =)",
    "insertText": "MoveTemp(ExternalFaceIndexMapTemp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(ExternalFaceIndexMap == nullptr)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (TArray<int32> EmptyArray ; Ar<<EmptyArray ; } else { Ar<<* ExternalFaceIndexMap ; } } } Ar .)",
    "insertText": "UsingCustomVersion(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<* ExternalVertexIndexMap ; } else {)",
    "insertText": "if(ExternalVertexIndexMap == nullptr)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetFaceNormal()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetFaceNormal(const int32 FaceIdx)"
  },
  {
    "label": "GetMaterialIndex()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetMaterialIndex(uint32 HintIndex)"
  },
  {
    "label": "Particles()",
    "kind": "Method",
    "detail": "Function (const ParticlesType&)",
    "insertText": "Particles()"
  },
  {
    "label": "Elements()",
    "kind": "Method",
    "detail": "Function (const FTrimeshIndexBuffer&)",
    "insertText": "Elements()"
  },
  {
    "label": "UpdateVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertices(const TArray<FVector>& Positions)"
  },
  {
    "label": "GetTransformedTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTransformedTriangle(const int32 TriangleIndex, const FRigidTransform3& Transform, FTriangle& OutTriangle, int32& OutVertexIndex0, int32& OutVertexIndex1, int32& OutVertexIndex2)"
  },
  {
    "label": "TriangleMeshTransformVertsHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleMeshTransformVertsHelper(Transform, TriangleIndex, MParticles, MElements.GetLargeIndexBuffer(), OutTriangle[0], OutTriangle[1], OutTriangle[2], OutVertexIndex0, OutVertexIndex1, OutVertexIndex2)"
  },
  {
    "label": "TriangleMeshTransformVertsHelper()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "TriangleMeshTransformVertsHelper(Transform, TriangleIndex, MParticles, MElements.GetSmallIndexBuffer(), OutTriangle[0], OutTriangle[1], OutTriangle[2], OutVertexIndex0, OutVertexIndex1, OutVertexIndex2)"
  },
  {
    "label": "FindOverlappingTriangles()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindOverlappingTriangles(const FAABB3& QueryBounds, TArray<int32>& OutTriangleIndices)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (OutTriangleIndices = FastBVH .)",
    "insertText": "FindAllIntersections(QueryBounds)"
  },
  {
    "label": "VisitTriangles()",
    "kind": "Method",
    "detail": "Function (} template<TriangleVisitor> void)",
    "insertText": "VisitTriangles(const FAABB3& QueryBounds, const FRigidTransform3& QueryTransform, const TriangleVisitor& Visitor)"
  },
  {
    "label": "FindOverlappingTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<int32> OverlapIndices ;)",
    "insertText": "FindOverlappingTriangles(QueryBounds, OverlapIndices)"
  },
  {
    "label": "bStandardWinding()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bStandardWinding((QueryTransform.GetScale3D().X * QueryTransform.GetScale3D().Y * QueryTransform.GetScale3D().Z) >= FReal(0))"
  },
  {
    "label": "GetTransformedTriangle()",
    "kind": "Method",
    "detail": "Function (const int32 TriangleIndex = OverlapIndices [ OverlapIndex ] ; FTriangle Triangle ; int32 VertexIndex0,VertexIndex1,VertexIndex2 ;)",
    "insertText": "GetTransformedTriangle(TriangleIndex, QueryTransform, Triangle, VertexIndex0, VertexIndex1, VertexIndex2)"
  },
  {
    "label": "ReverseWinding()",
    "kind": "Method",
    "detail": "Function (Triangle .)",
    "insertText": "ReverseWinding()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(VertexIndex1, VertexIndex2)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Visitor(Triangle, TriangleIndex, VertexIndex0, VertexIndex1, VertexIndex2)"
  },
  {
    "label": "CollectTriangles()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CollectTriangles(const FAABB3& MeshQueryBounds, const FRigidTransform3& MeshToObjectTransform, const FAABB3& ObjectBounds, Private::FMeshContactGenerator& Collector)"
  },
  {
    "label": "RebuildFastBVHFromTree()",
    "kind": "Method",
    "detail": "Function (private : using BVHType = TAABBTree<int32,TAABBTreeLeafArray<int32,false,FRealSingle>,false,FRealSingle> ; void)",
    "insertText": "RebuildFastBVHFromTree(const BVHType& BVH)"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (ParticlesType MParticles ; FTrimeshIndexBuffer MElements ; FAABB3 MLocalBoundingBox ; TArray<uint16> MaterialIndices ; TUniquePtr<TArray<int32>> ExternalFaceIndexMap ; TUniquePtr<TArray<int32>> ExternalVertexIndexMap ; bool bCullsBackFaceRaycast ; template<IdxType>)",
    "insertText": "FTriangleMeshImplicitObject(ParticlesType&& Particles, TArray<TVec3<IdxType>>&& Elements, TArray<uint16>&& InMaterialIndices, const BVHType& InBvhToCopy, TUniquePtr<TArray<int32>>&& InExternalFaceIndexMap = nullptr, TUniquePtr<TArray<int32>>&& InExternalVertexIndexMap = nullptr, const bool bInCullsBackFaceRaycast = false) : FImplicitObject(EImplicitObject::HasBoundingBox | EImplicitObject::DisableCollisions, ImplicitObjectType::TriangleMesh) , MParticles(MoveTemp(Particles)) , MElements(MoveTemp(Elements)) , MLocalBoundingBox(MParticles.GetX(0), MParticles.GetX(0)) , MaterialIndices(MoveTemp(InMaterialIndices)) , ExternalFaceIndexMap(MoveTemp(InExternalFaceIndexMap)) , ExternalVertexIndexMap(MoveTemp(InExternalVertexIndexMap)) , bCullsBackFaceRaycast(bInCullsBackFaceRaycast)"
  },
  {
    "label": "RebuildFastBVHFromTree()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "RebuildFastBVHFromTree(InBvhToCopy)"
  },
  {
    "label": "HasBoundingBox()",
    "kind": "Method",
    "detail": "Function (} template<InStorageType,InRealType> struct FBvEntry ; template<QueryGeomType> struct FTriangleMeshOverlapVisitorNoMTD ; template<bool bRequiresLargeIndex> struct FBvEntry { FTriangleMeshImplicitObject* TmData ; int32 Index ; bool)",
    "insertText": "HasBoundingBox()"
  },
  {
    "label": "LambdaHelper()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "LambdaHelper(const auto& Elements)"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (TAABB<FRealSingle,3>)",
    "insertText": "Bounds(TmData->MParticles.GetX(Elements[Index][0]), TmData->MParticles.GetX(Elements[Index][0]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (Bounds .)",
    "insertText": "GrowToInclude(TmData->MParticles.GetX(Elements[Index][1]))"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (Bounds .)",
    "insertText": "GrowToInclude(TmData->MParticles.GetX(Elements[Index][2]))"
  },
  {
    "label": "LambdaHelper()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "LambdaHelper(TmData->MElements.GetSmallIndexBuffer())"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (} } template<TPayloadType> int32)",
    "insertText": "GetPayload(int32 Idx)"
  },
  {
    "label": "FTriangleMeshImplicitObject()",
    "kind": "Method",
    "detail": "Function (} } ; FTrimeshBVH FastBVH ; template<Geom,IdxType> struct FTriangleMeshSweepVisitor ; template<Geom,IdxType> struct FTriangleMeshSweepVisitorCCD ; class FImplicitObject ;)",
    "insertText": "FTriangleMeshImplicitObject() : FImplicitObject(EImplicitObject::HasBoundingBox, ImplicitObjectType::TriangleMesh)"
  },
  {
    "label": "GJKContactPointImp()",
    "kind": "Method",
    "detail": "Function (} ; template<QueryGeomType> bool)",
    "insertText": "GJKContactPointImp(const QueryGeomType& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex, FVec3 TriMeshScale = FVec3(1.0))"
  },
  {
    "label": "OverlapGeomImp()",
    "kind": "Method",
    "detail": "Function (template<bool IsSpherical,QueryGeomType> bool)",
    "insertText": "OverlapGeomImp(const QueryGeomType& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomImp()",
    "kind": "Method",
    "detail": "Function (template<QueryGeomType> bool)",
    "insertText": "SweepGeomImp(const QueryGeomType& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FReal Thickness, const bool bComputeMTD, FVec3 TriMeshScale = FVec3(1.0f))"
  },
  {
    "label": "SweepGeomCCDImp()",
    "kind": "Method",
    "detail": "Function (template<QueryGeomType> bool)",
    "insertText": "SweepGeomCCDImp(const QueryGeomType& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, FVec3& OutFaceNormal, const FVec3& TriMeshScale)"
  },
  {
    "label": "RaycastImp()",
    "kind": "Method",
    "detail": "Function (template<IdxType> bool)",
    "insertText": "RaycastImp(const TArray<TVec3<IdxType>>& Elements, const FVec3& StartPoint, const FVec3& Dir, const FReal Length, const FReal Thickness, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex)"
  },
  {
    "label": "OverlapImp()",
    "kind": "Method",
    "detail": "Function (template<IdxType> bool)",
    "insertText": "OverlapImp(const TArray<TVec3<IdxType>>& Elements, const FVec3& Point, const FReal Thickness)"
  },
  {
    "label": "FindMostOpposingFace()",
    "kind": "Method",
    "detail": "Function (template<IdxType> int32)",
    "insertText": "FindMostOpposingFace(const TArray<TVec3<IdxType>>& Elements, const FVec3& Position, const FVec3& UnitDir, int32 HintFaceIndex, FReal SearchDist, const FVec3& Scale)"
  },
  {
    "label": "RebuildBVImp()",
    "kind": "Method",
    "detail": "Function (template<IdxType> void)",
    "insertText": "RebuildBVImp(const TArray<TVec3<IdxType>>& Elements, BVHType& BVH)"
  },
  {
    "label": "CopySlowImpl()",
    "kind": "Method",
    "detail": "Function (template<IdxType> FImplicitObjectPtr)",
    "insertText": "CopySlowImpl(const TArray < TVector<IdxType, 3>>& InElements)"
  }
]