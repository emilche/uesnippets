[
  {
    "label": "UParticleModuleTypeDataBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataBase"
  },
  {
    "label": "FParticleEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEmitterInstance"
  },
  {
    "label": "FParticleEvent_GenerateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEvent_GenerateInfo"
  },
  {
    "label": "UParticleModuleEventSendToGame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleEventSendToGame"
  },
  {
    "label": "UParticleModuleEventGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleEventGenerator"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Particles / ParticleSystemComponent . h \" # include \" Particles / Event / ParticleModuleEventBase . h \" # include \" ParticleModuleEventGenerator . generated . h \" class UParticleModuleTypeDataBase ; struct FParticleEmitterInstance ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=ParticleEvent_GenerateInfo)"
  },
  {
    "label": "FParticleEvent_GenerateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParticleEvent_GenerateInfo() : Type(0) , Frequency(0) , ParticleFrequency(0) , FirstTimeOnly(false) , LastTimeOnly(false) , UseReflectedImpactVector(false) , bUseOrbitOffset(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(editinlinenew, hidecategories=Object, MinimalAPI, meta=(DisplayName = \"Event Generator\"))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, export, noclear, Category=Events)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Spawn()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Spawn(FParticleEmitterInstance* Owner, int32 Offset, float SpawnTime, FBaseParticle* ParticleBase)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FParticleEmitterInstance* Owner, int32 Offset, float DeltaTime)"
  },
  {
    "label": "RequiredBytes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RequiredBytes(UParticleModuleTypeDataBase* TypeData)"
  },
  {
    "label": "RequiredBytesPerInstance()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RequiredBytesPerInstance()"
  },
  {
    "label": "PrepPerInstanceBlock()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PrepPerInstanceBlock(FParticleEmitterInstance* Owner, void* InstData)"
  },
  {
    "label": "HandleParticleSpawned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleParticleSpawned(FParticleEmitterInstance* Owner, FParticleEventInstancePayload* EventPayload, FBaseParticle* NewParticle)"
  },
  {
    "label": "HandleParticleKilled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleParticleKilled(FParticleEmitterInstance* Owner, FParticleEventInstancePayload* EventPayload, FBaseParticle* DeadParticle)"
  },
  {
    "label": "HandleParticleCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleParticleCollision(FParticleEmitterInstance* Owner, FParticleEventInstancePayload* EventPayload, FParticleCollisionPayload* CollidePayload, FHitResult* Hit, FBaseParticle* CollideParticle, FVector& CollideDirection)"
  },
  {
    "label": "HandleParticleBurst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleParticleBurst(FParticleEmitterInstance* Owner, FParticleEventInstancePayload* EventPayload, const int32 ParticleCount)"
  }
]