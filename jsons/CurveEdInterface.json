[
  {
    "label": "FCurveEdInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEdInterface"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Math / InterpCurvePoint . h \" class FCurveEdInterface { public : int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "GetKeyIn()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetKeyIn(int32 KeyIndex)"
  },
  {
    "label": "GetInRange()",
    "kind": "Method",
    "detail": "Function (ArriveTangent = 0 . f ; LeaveTangent = 0 . f ; } void)",
    "insertText": "GetInRange(float& MinIn, float& MaxIn)"
  },
  {
    "label": "GetOutRange()",
    "kind": "Method",
    "detail": "Function (MinIn = 0 . f ; MaxIn = 0 . f ; } void)",
    "insertText": "GetOutRange(float& MinOut, float& MaxOut)"
  },
  {
    "label": "CreateNewKey()",
    "kind": "Method",
    "detail": "Function (MinOut = 0 . f ; MaxOut = 0 . f ; } int32)",
    "insertText": "CreateNewKey(float KeyIn)"
  },
  {
    "label": "SetKeyIn()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SetKeyIn(int32 KeyIndex, float NewInVal)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyInterpMode(int32 KeyIndex, EInterpCurveMode NewMode)"
  },
  {
    "label": "SetTangents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTangents(int32 SubIndex, int32 KeyIndex, float ArriveTangent, float LeaveTangent)"
  }
]