[
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(size_t)"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (bool>)",
    "insertText": "insert(const key_type&)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (bool>)",
    "insertText": "insert(key_type&&)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(InputIterator first, InputIterator last)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert(const_iterator hint, const key_type&)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert(const_iterator hint, key_type&&)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (bool>)",
    "insertText": "emplace(Args&&...)"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "emplace_hint(const_iterator, Args&&...)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replace(container_type&&)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(const_iterator)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(const_iterator first, const_iterator& last)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "erase(const K& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(const K&)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (iterator>)",
    "insertText": "equal_range(K&)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "lower_bound(const K&)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "upper_bound(const K&)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(flat_set&)"
  }
]