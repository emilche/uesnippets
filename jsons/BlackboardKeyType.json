[
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "FBlackboardInstancedKeyMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlackboardInstancedKeyMemory"
  },
  {
    "label": "UBlackboardKeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardKeyType"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" BehaviorTree / BehaviorTreeTypes . h \" # include \" BlackboardKeyEnums . h \" # include \" BlackboardKeyType . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBlackboard, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class UBlackboardComponent ; struct FBlackboardInstancedKeyMemory { int32 KeyIdx ; } ;)",
    "insertText": "UCLASS(EditInlineNew, Abstract, CollapseCategories, AutoExpandCategories=(Blackboard), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual void PreInitialize(UBlackboardComponent& OwnerComp)"
  },
  {
    "label": "InitializeKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeKey(UBlackboardComponent& OwnerComp, FBlackboard::FKey KeyID)"
  },
  {
    "label": "IsAllowedByFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedByFilter(UBlackboardKeyType* FilterOb)"
  },
  {
    "label": "WrappedGetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedGetLocation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, FVector& Location)"
  },
  {
    "label": "WrappedGetRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedGetRotation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, FRotator& Rotation)"
  },
  {
    "label": "WrappedFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappedFree(UBlackboardComponent& OwnerComp, uint8* MemoryBlock)"
  },
  {
    "label": "WrappedClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappedClear(const UBlackboardComponent& OwnerComp, uint8* MemoryBlock)"
  },
  {
    "label": "WrappedIsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedIsEmpty(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock)"
  },
  {
    "label": "WrappedTestBasicOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedTestBasicOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, EBasicKeyOperation::Type Op)"
  },
  {
    "label": "WrappedTestArithmeticOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedTestArithmeticOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, EArithmeticKeyOperation::Type Op, int32 OtherIntValue, float OtherFloatValue)"
  },
  {
    "label": "WrappedTestTextOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedTestTextOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, ETextKeyOperation::Type Op, const FString& OtherString)"
  },
  {
    "label": "DescribeArithmeticParam()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeArithmeticParam(int32 IntValue, float FloatValue)"
  },
  {
    "label": "WrappedDescribeValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "WrappedDescribeValue(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock)"
  },
  {
    "label": "DescribeSelf()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeSelf()"
  },
  {
    "label": "UpdateDeprecatedKey()",
    "kind": "Method",
    "detail": "Function (UBlackboardKeyType*)",
    "insertText": "UpdateDeprecatedKey()"
  },
  {
    "label": "GetKeyInstance()",
    "kind": "Method",
    "detail": "Function (const UBlackboardKeyType*)",
    "insertText": "GetKeyInstance(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock)"
  },
  {
    "label": "GetKeyInstance()",
    "kind": "Method",
    "detail": "Function (UBlackboardKeyType*)",
    "insertText": "GetKeyInstance(UBlackboardComponent& OwnerComp, const uint8* MemoryBlock)"
  },
  {
    "label": "CompareValues()",
    "kind": "Method",
    "detail": "Function (EBlackboardCompare::Type)",
    "insertText": "CompareValues(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, const UBlackboardKeyType* OtherKeyOb, const uint8* OtherMemoryBlock)"
  },
  {
    "label": "HasInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInstance()"
  },
  {
    "label": "IsInstanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanced()"
  },
  {
    "label": "GetValueSize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetValueSize()"
  },
  {
    "label": "GetTestOperation()",
    "kind": "Method",
    "detail": "Function (EBlackboardKeyOperation::Type)",
    "insertText": "GetTestOperation()"
  },
  {
    "label": "GetValueFromMemory()",
    "kind": "Method",
    "detail": "Function (protected : uint16 ValueSize ; TEnumAsByte<EBlackboardKeyOperation::Type> SupportedOp ; uint8 bIsInstanced : 1 ; uint8 bCreateKeyInstance : 1 ; template<T> T)",
    "insertText": "GetValueFromMemory(const uint8* MemoryBlock)"
  },
  {
    "label": "SetValueInMemory()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "SetValueInMemory(uint8* MemoryBlock, const T& Value)"
  },
  {
    "label": "bChanged()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bChanged((T*)MemoryBlock)"
  },
  {
    "label": "PrevValue()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<T>*)",
    "insertText": "PrevValue(TWeakObjectPtr<T>*)"
  },
  {
    "label": "bChanged()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bChanged(Value.IsValid(false, true) != PrevValue->IsValid(false, true)) || (Value.IsStale(false, true) != PrevValue->IsStale(false, true)) || (*PrevValue)"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMemory(UBlackboardComponent& OwnerComp, uint8* MemoryBlock)"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMemory(UBlackboardComponent& OwnerComp, uint8* MemoryBlock)"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLocation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, FVector& Location)"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRotation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, FRotator& Rotation)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(UBlackboardComponent& OwnerComp, uint8* MemoryBlock)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock)"
  },
  {
    "label": "TestBasicOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestBasicOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, EBasicKeyOperation::Type Op)"
  },
  {
    "label": "TestArithmeticOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestArithmeticOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, EArithmeticKeyOperation::Type Op, int32 OtherIntValue, float OtherFloatValue)"
  },
  {
    "label": "TestTextOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestTextOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, ETextKeyOperation::Type Op, const FString& OtherString)"
  },
  {
    "label": "DescribeValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeValue(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock)"
  }
]