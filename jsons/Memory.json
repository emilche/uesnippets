[
  {
    "label": "MakeUniqueResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeUniqueResult"
  },
  {
    "label": "Extract",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Extract"
  },
  {
    "label": "ExtractOr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtractOr"
  },
  {
    "label": "GetFirstArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetFirstArg"
  },
  {
    "label": "Class",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Class"
  },
  {
    "label": "ElementType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ElementType"
  },
  {
    "label": "RebindFirstArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RebindFirstArg"
  },
  {
    "label": "RebindPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RebindPtr"
  },
  {
    "label": "RebindAlloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RebindAlloc"
  },
  {
    "label": "pointer_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pointer_traits"
  },
  {
    "label": "allocator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "allocator_traits"
  },
  {
    "label": "allocator_is_nothrow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "allocator_is_nothrow"
  },
  {
    "label": "default_allocator_is_nothrow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "default_allocator_is_nothrow"
  },
  {
    "label": "WrapUnique()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_MEMORY_MEMORY_H_ # define ABSL_MEMORY_MEMORY_H_ # include<cstddef> # include<limits> # include<memory> # include<new> # include<type_traits> # include<utility> # include \" absl / base / macros . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<T> std::unique_ptr<T>)",
    "insertText": "WrapUnique(T* ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} namespace memory_internal { template<T> struct MakeUniqueResult { using scalar = std::unique_ptr<T> ; } ; template<T> struct MakeUniqueResult<T [ ]> { using array = std::unique_ptr<T [ ]> ; } ; template<T,size_t N> struct MakeUniqueResult<T [ N ]> { using invalid = void ; } ; } #)",
    "insertText": "if(__cplusplus > 201103L || defined(_MSC_VER)) && \\ !(defined(__GLIBCXX__) && !defined(__cpp_lib_make_unique))"
  },
  {
    "label": "make_unique()",
    "kind": "Method",
    "detail": "Function (# else template<T,. . . Args> memory_internal::MakeUniqueResult<T>::scalar)",
    "insertText": "make_unique(Args&&... args)"
  },
  {
    "label": "make_unique()",
    "kind": "Method",
    "detail": "Function (} template<T> memory_internal::MakeUniqueResult<T>::array)",
    "insertText": "make_unique(size_t n)"
  },
  {
    "label": "make_unique()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . Args> memory_internal::MakeUniqueResult<T>::invalid)",
    "insertText": "make_unique(Args&&...)"
  },
  {
    "label": "RawPtr()",
    "kind": "Method",
    "detail": "Function (# endif template<T> auto)",
    "insertText": "RawPtr(T&& ptr) -> decltype(std::addressof(*ptr))"
  },
  {
    "label": "RawPtr()",
    "kind": "Method",
    "detail": "Function (} std::nullptr_t)",
    "insertText": "RawPtr(std::nullptr_t)"
  },
  {
    "label": "WeakenPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> std::weak_ptr<T>)",
    "insertText": "WeakenPtr(const std::shared_ptr<T>& ptr)"
  },
  {
    "label": "HasRebindAlloc()",
    "kind": "Method",
    "detail": "Function (} namespace memory_internal { template<template<> class Extract,Obj,Default,> struct ExtractOr { using type = Default ; } ; template<template<> class Extract,Obj,Default> struct ExtractOr<Extract,Obj,Default,void_t<Extract<Obj>>> { using type = Extract<Obj> ; } ; template<template<> class Extract,Obj,Default> using ExtractOrT = ExtractOr<Extract,Obj,Default,void>::type ; template<T> using GetPointer = T::pointer ; template<T> using GetConstPointer = T::const_pointer ; template<T> using GetVoidPointer = T::void_pointer ; template<T> using GetConstVoidPointer = T::const_void_pointer ; template<T> using GetDifferenceType = T::difference_type ; template<T> using GetSizeType = T::size_type ; template<T> using GetPropagateOnContainerCopyAssignment = T::propagate_on_container_copy_assignment ; template<T> using GetPropagateOnContainerMoveAssignment = T::propagate_on_container_move_assignment ; template<T> using GetPropagateOnContainerSwap = T::propagate_on_container_swap ; template<T> using GetIsAlwaysEqual = T::is_always_equal ; template<T> struct GetFirstArg ; template<template<. . .> class Class,T,. . . Args> struct GetFirstArg<Class<T,Args . . .>> { using type = T ; } ; template<Ptr,= void> struct ElementType { using type = GetFirstArg<Ptr>::type ; } ; template<T> struct ElementType<T,void_t<T::element_type>> { using type = T::element_type ; } ; template<T,U> struct RebindFirstArg ; template<template<. . .> class Class,T,. . . Args,U> struct RebindFirstArg<Class<T,Args . . .>,U> { using type = Class<U,Args . . .> ; } ; template<T,U,= void> struct RebindPtr { using type = RebindFirstArg<T,U>::type ; } ; template<T,U> struct RebindPtr<T,U,void_t<T::template rebind<U>>> { using type = T::template rebind<U> ; } ; template<T,U> bool)",
    "insertText": "HasRebindAlloc(...)"
  },
  {
    "label": "pointer_to()",
    "kind": "Method",
    "detail": "Function (using type = RebindFirstArg<T,U>::type ; } ; template<T,U> struct RebindAlloc<T,U,true> { using type = T::template rebind<U>::other ; } ; } template<Ptr> struct pointer_traits { using pointer = Ptr ; using element_type = memory_internal::ElementType<Ptr>::type ; using difference_type = memory_internal::ExtractOrT<memory_internal::GetDifferenceType,Ptr,std::ptrdiff_t> ; template<U> using rebind = memory_internal::RebindPtr<Ptr,U>::type ; pointer)",
    "insertText": "pointer_to(element_type& r)"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (} } ; # if __cplusplus> = 2 0 1 7 0 3)",
    "insertText": "L(defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (# else template<Alloc> struct allocator_traits { using allocator_type = Alloc ; using value_type = Alloc::value_type ; using pointer = memory_internal::ExtractOrT<memory_internal::GetPointer,Alloc,value_type*> ; using const_pointer = memory_internal::ExtractOrT<memory_internal::GetConstPointer,Alloc,absl::pointer_traits<pointer>::template rebind<const value_type>> ; using void_pointer = memory_internal::ExtractOrT<memory_internal::GetVoidPointer,Alloc,absl::pointer_traits<pointer>::template rebind<void>> ; using const_void_pointer = memory_internal::ExtractOrT<memory_internal::GetConstVoidPointer,Alloc,absl::pointer_traits<pointer>::template rebind<const void>> ; using difference_type = memory_internal::ExtractOrT<memory_internal::GetDifferenceType,Alloc,absl::pointer_traits<pointer>::difference_type> ; using size_type = memory_internal::ExtractOrT<memory_internal::GetSizeType,Alloc,std::make_unsigned<difference_type>::type> ; using propagate_on_container_copy_assignment = memory_internal::ExtractOrT<memory_internal::GetPropagateOnContainerCopyAssignment,Alloc,std::false_type> ; using propagate_on_container_move_assignment = memory_internal::ExtractOrT<memory_internal::GetPropagateOnContainerMoveAssignment,Alloc,std::false_type> ; using propagate_on_container_swap = memory_internal::ExtractOrT<memory_internal::GetPropagateOnContainerSwap,Alloc,std::false_type> ; using is_always_equal = memory_internal::ExtractOrT<memory_internal::GetIsAlwaysEqual,Alloc,std::is_empty<Alloc>::type> ; template<T> using rebind_alloc = memory_internal::RebindAlloc<Alloc,T>::type ; template<T> using rebind_traits = absl::allocator_traits<rebind_alloc<T>> ; pointer)",
    "insertText": "allocate(Alloc& a, size_type n)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "allocate(Alloc& a, size_type n, const_void_pointer hint)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(Alloc& a, pointer p, size_type n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "deallocate(p, n)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . Args> void)",
    "insertText": "construct(Alloc& a, T* p, Args&&... args)"
  },
  {
    "label": "construct_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct_impl(0, a, p, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "destroy(Alloc& a, T* p)"
  },
  {
    "label": "destroy_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy_impl(0, a, p)"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size(const Alloc& a)"
  },
  {
    "label": "select_on_container_copy_construction()",
    "kind": "Method",
    "detail": "Function (} Alloc)",
    "insertText": "select_on_container_copy_construction(const Alloc& a)"
  },
  {
    "label": "allocate_impl()",
    "kind": "Method",
    "detail": "Function (} private : template<A> auto)",
    "insertText": "allocate_impl(int, A& a, size_type n, const_void_pointer hint) -> decltype(a.allocate(n, hint))"
  },
  {
    "label": "allocate_impl()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "allocate_impl(char, Alloc& a, size_type n, const_void_pointer)"
  },
  {
    "label": "construct_impl()",
    "kind": "Method",
    "detail": "Function (} template<A,. . . Args> auto)",
    "insertText": "construct_impl(int, A& a, Args&&... args) -> decltype(a.construct(std::forward<Args>(args)...))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "construct(std::forward<Args>(args)...)"
  },
  {
    "label": "construct_impl()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . Args> void)",
    "insertText": "construct_impl(char, Alloc&, T* p, Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(p)) T(std::forward<Args>(args)...)"
  },
  {
    "label": "destroy_impl()",
    "kind": "Method",
    "detail": "Function (} template<A,T> auto)",
    "insertText": "destroy_impl(int, A& a, T* p) -> decltype(a.destroy(p))"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "destroy(p)"
  },
  {
    "label": "destroy_impl()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "destroy_impl(char, Alloc&, T* p)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (p -> ~)",
    "insertText": "T()"
  },
  {
    "label": "max_size_impl()",
    "kind": "Method",
    "detail": "Function (} template<A> auto)",
    "insertText": "max_size_impl(int, const A& a) -> decltype(a.max_size())"
  },
  {
    "label": "max_size_impl()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size_impl(char, const Alloc&)"
  },
  {
    "label": "select_on_container_copy_construction_impl()",
    "kind": "Method",
    "detail": "Function (} template<A> auto)",
    "insertText": "select_on_container_copy_construction_impl(int, const A& a) -> decltype(a.select_on_container_copy_construction())"
  },
  {
    "label": "select_on_container_copy_construction_impl()",
    "kind": "Method",
    "detail": "Function (} Alloc)",
    "insertText": "select_on_container_copy_construction_impl(char, const Alloc& a)"
  },
  {
    "label": "ConstructRange()",
    "kind": "Method",
    "detail": "Function (} ; struct default_allocator_is_nothrow : std::true_type { } ; # else struct default_allocator_is_nothrow : std::false_type { } ; # endif namespace memory_internal { template<Allocator,Iterator,. . . Args> void)",
    "insertText": "ConstructRange(Allocator& alloc, Iterator first, Iterator last, const Args&... args)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_TRY { std::allocator_traits<Allocator)",
    "insertText": "construct(alloc, std::addressof(*cur), args...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} ABSL_INTERNAL_CATCH_ANY {)",
    "insertText": "while(cur != first)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (- - cur ; std::allocator_traits<Allocator)",
    "insertText": "destroy(alloc, std::addressof(*cur))"
  },
  {
    "label": "CopyRange()",
    "kind": "Method",
    "detail": "Function (} ABSL_INTERNAL_RETHROW ; } } } template<Allocator,Iterator,InputIterator> void)",
    "insertText": "CopyRange(Allocator& alloc, Iterator destination, InputIterator first, InputIterator last)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_TRY { std::allocator_traits<Allocator)",
    "insertText": "construct(alloc, std::addressof(*cur), *first)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} ABSL_INTERNAL_CATCH_ANY {)",
    "insertText": "while(cur != destination)"
  }
]