[
  {
    "label": "FSoftSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftSkinVertex"
  },
  {
    "label": "FSkelMeshSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshSection"
  },
  {
    "label": "FSkelMeshSourceSectionUserData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshSourceSectionUserData"
  },
  {
    "label": "FSkeletalMeshLODModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODModel"
  },
  {
    "label": "FSkeletalMeshSourceModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshSourceModel"
  },
  {
    "label": "FSkelMeshImportedMeshInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkelMeshImportedMeshInfo"
  },
  {
    "label": "FThreadSafeBuildStringID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeBuildStringID"
  },
  {
    "label": "GetRigidWeightBone()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / SkeletalMeshVertexAttribute . h \" # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" PackedNormal . h \" # include \" Components . h \" # include \" GPUSkinPublicDefs . h \" # include \" BoneIndices . h \" # include \" Serialization / BulkData . h \" # include \" SkeletalMeshTypes . h \" # include \" Rendering / SkeletalMeshLODImporterData . h \" # include \" Animation / SkinWeightProfile . h \" # include \" CoreTypes . h \" # include \" Async / Mutex . h \" # include \" Async / UniqueLock . h \" # include \" HAL / CriticalSection . h \" struct FSoftSkinVertex { FVector3f Position ; FVector3f TangentX ; FVector3f TangentY ; FVector4f TangentZ ; FVector2f UVs [ MAX_TEXCOORDS ] ; FColor Color ; FBoneIndexType InfluenceBones [ MAX_TOTAL_INFLUENCES ] ; uint16 InfluenceWeights [ MAX_TOTAL_INFLUENCES ] ; bool)",
    "insertText": "GetRigidWeightBone(FBoneIndexType& OutBoneIndex)"
  },
  {
    "label": "GetMaximumWeight()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetMaximumWeight()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSoftSkinVertex& V)"
  },
  {
    "label": "FSkelMeshSection()",
    "kind": "Method",
    "detail": "Function (} ; struct FSkelMeshSection { uint16 MaterialIndex ; uint32 BaseIndex ; uint32 NumTriangles ; uint8 bSelected : 1 ; bool bRecomputeTangent ; ESkinVertexColorChannel RecomputeTangentsVertexMaskChannel ; bool bCastShadow ; bool bVisibleInRayTracing ; bool bLegacyClothingSection_DEPRECATED ; int16 CorrespondClothSectionIndex_DEPRECATED ; uint32 BaseVertexIndex ; TArray<FSoftSkinVertex> SoftVertices ; TArray<TArray<FMeshToMeshVertData>> ClothMappingDataLODs ; TArray<FBoneIndexType> BoneMap ; int32 NumVertices ; int32 MaxBoneInfluences ; bool bUse16BitBoneIndex ; int16 CorrespondClothAssetIndex ; FClothingSectionData ClothingData ; TMap<int32,TArray<int32>> OverlappingVertices ; bool bDisabled ; int32 GenerateUpToLodIndex ; int32 OriginalDataSectionIndex ; int32 ChunkedParentSectionIndex ;)",
    "insertText": "FSkelMeshSection() : MaterialIndex(0) , BaseIndex(0) , NumTriangles(0) , bSelected(false) , bRecomputeTangent(false) , RecomputeTangentsVertexMaskChannel(ESkinVertexColorChannel::None) , bCastShadow(true) , bVisibleInRayTracing(true) , bLegacyClothingSection_DEPRECATED(false) , CorrespondClothSectionIndex_DEPRECATED(-1) , BaseVertexIndex(0) , NumVertices(0) , MaxBoneInfluences(4) , bUse16BitBoneIndex(false) , CorrespondClothAssetIndex(INDEX_NONE) , bDisabled(false) , GenerateUpToLodIndex(INDEX_NONE) , OriginalDataSectionIndex(INDEX_NONE) , ChunkedParentSectionIndex(INDEX_NONE)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 ClothLODBias = 0 ; return ClothMappingDataLODs .)",
    "insertText": "Num() && ClothMappingDataLODs[ClothLODBias].Num()"
  },
  {
    "label": "CalcMaxBoneInfluences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalcMaxBoneInfluences()"
  },
  {
    "label": "DeclareCustomVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeclareCustomVersions(FArchive& Ar)"
  },
  {
    "label": "FSkelMeshSourceSectionUserData()",
    "kind": "Method",
    "detail": "Function (} ; struct FSkelMeshSourceSectionUserData { bool bRecomputeTangent ; ESkinVertexColorChannel RecomputeTangentsVertexMaskChannel ; bool bCastShadow ; bool bVisibleInRayTracing ; int16 CorrespondClothAssetIndex ; FClothingSectionData ClothingData ; bool bDisabled ; int32 GenerateUpToLodIndex ;)",
    "insertText": "FSkelMeshSourceSectionUserData() : bRecomputeTangent(false) , RecomputeTangentsVertexMaskChannel(ESkinVertexColorChannel::None) , bCastShadow(true) , bVisibleInRayTracing(true) , CorrespondClothAssetIndex(INDEX_NONE) , bDisabled(false) , GenerateUpToLodIndex(INDEX_NONE)"
  },
  {
    "label": "HasClothingData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasClothingData()"
  },
  {
    "label": "GetSourceSectionUserData()",
    "kind": "Method",
    "detail": "Function (} FSkelMeshSourceSectionUserData&)",
    "insertText": "GetSourceSectionUserData(TMap<int32, FSkelMeshSourceSectionUserData>& UserSectionsData, const FSkelMeshSection& Section)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FSkelMeshSourceSectionUserData* UserSectionData = UserSectionsData .)",
    "insertText": "Find(Section.OriginalDataSectionIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UserSectionData =& UserSectionsData .)",
    "insertText": "Add(Section.OriginalDataSectionIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (UserSectionData -> bCastShadow = Section . bCastShadow ; UserSectionData -> bVisibleInRayTracing = Section . bVisibleInRayTracing ; UserSectionData -> bDisabled = Section . bDisabled ; UserSectionData -> bRecomputeTangent = Section . bRecomputeTangent ; UserSectionData -> RecomputeTangentsVertexMaskChannel = Section . RecomputeTangentsVertexMaskChannel ; UserSectionData -> GenerateUpToLodIndex = Section . GenerateUpToLodIndex ; UserSectionData -> CorrespondClothAssetIndex = Section . CorrespondClothAssetIndex ; UserSectionData -> ClothingData . AssetGuid = Section . ClothingData . AssetGuid ; UserSectionData -> ClothingData . AssetLodIndex = Section . ClothingData . AssetLodIndex ; })",
    "insertText": "check(UserSectionData)"
  },
  {
    "label": "GetRawPointIndices()",
    "kind": "Method",
    "detail": "Function (} ; class FSkeletalMeshLODModel { public : TArray<FSkelMeshSection> Sections ; TMap<int32,FSkelMeshSourceSectionUserData> UserSectionsData ; uint32 NumVertices ; uint32 NumTexCoords ; TArray<uint32> IndexBuffer ; TArray<FBoneIndexType> ActiveBoneIndices ; TArray<FBoneIndexType> RequiredBones ; TMap<FName,FImportedSkinWeightProfileData> SkinWeightProfiles ; TMap<FName,FSkeletalMeshModelVertexAttribute> VertexAttributes ; TArray<int32> MeshToImportVertexMap ; int32 MaxImportVertex ; const TArray<uint32>&)",
    "insertText": "GetRawPointIndices()"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (RawSkeletalMeshBulkDataID =)",
    "insertText": "FGuid().ToString()"
  },
  {
    "label": "FCriticalSection()",
    "kind": "Method",
    "detail": "Function (BulkDataReadMutex = new)",
    "insertText": "FCriticalSection()"
  },
  {
    "label": "FSkeletalMeshLODModel()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSkeletalMeshLODModel()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (delete BulkDataReadMutex ; BulkDataReadMutex = nullptr ; } } void)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (BulkDataReadMutex = BackupBulkDataReadMutex ; } private : struct FSkeletalMeshSourceModel ; struct FSkelMeshImportedMeshInfo { FName Name ; int32 NumVertices ; int32 StartImportedVertex ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Name ; Ar<<NumVertices ; Ar<<StartImportedVertex ; } } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FSkelMeshImportedMeshInfo& Info)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Info .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "FSkeletalMeshLODModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletalMeshLODModel(const FSkeletalMeshLODModel& Other)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, int32 Idx)"
  },
  {
    "label": "GetVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertices(TArray<FSoftSkinVertex>& Vertices)"
  },
  {
    "label": "GetClothMappingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClothMappingData(TArray<FMeshToMeshVertData>& MappingData, TArray<FClothBufferIndexMapping>& OutClothIndexMapping)"
  },
  {
    "label": "GetSectionFromVertexIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSectionFromVertexIndex(int32 InVertIndex, int32& OutSectionIndex, int32& OutVertIndex)"
  },
  {
    "label": "HasClothData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClothData()"
  },
  {
    "label": "NumNonClothingSections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumNonClothingSections()"
  },
  {
    "label": "GetNumNonClothingVertices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumNonClothingVertices()"
  },
  {
    "label": "GetNonClothVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNonClothVertices(TArray<FSoftSkinVertex>& OutVertices)"
  },
  {
    "label": "GetMaxBoneInfluences()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxBoneInfluences()"
  },
  {
    "label": "DoSectionsUse16BitBoneIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSectionsUse16BitBoneIndex()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "SyncronizeUserSectionsDataArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncronizeUserSectionsDataArray(bool bResetNonUsedSection = false)"
  },
  {
    "label": "FThreadSafeBuildStringID()",
    "kind": "Method",
    "detail": "Function (struct FThreadSafeBuildStringID { private : FString BuildStringID ; UE::FMutex Mutex ; public :)",
    "insertText": "FThreadSafeBuildStringID()"
  },
  {
    "label": "FThreadSafeBuildStringID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FThreadSafeBuildStringID(const TCHAR* InText) : BuildStringID(InText)"
  },
  {
    "label": "FThreadSafeBuildStringID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FThreadSafeBuildStringID(const FThreadSafeBuildStringID& Other)"
  },
  {
    "label": "OtherLock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "OtherLock(Other.Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BuildStringID = Other . BuildStringID ; } FThreadSafeBuildStringID&)",
    "insertText": "operator(const FThreadSafeBuildStringID& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BuildStringID = Other . BuildStringID ; } return* this ; } bool)",
    "insertText": "operator(const FString& Other)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (BuildStringID = Other ; } operator)",
    "insertText": "FString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FThreadSafeBuildStringID&)",
    "insertText": "operator(FThreadSafeBuildStringID&&)"
  },
  {
    "label": "GetLODModelDeriveDataKey()",
    "kind": "Method",
    "detail": "Function (} ; FThreadSafeBuildStringID BuildStringID ; FString)",
    "insertText": "GetLODModelDeriveDataKey()"
  },
  {
    "label": "UpdateChunkedSectionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChunkedSectionInfo(const FString& SkeletalMeshName)"
  },
  {
    "label": "CopyStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStructure(FSkeletalMeshLODModel* Destination, const FSkeletalMeshLODModel* Source)"
  },
  {
    "label": "CreateCopy()",
    "kind": "Method",
    "detail": "Function (FSkeletalMeshLODModel*)",
    "insertText": "CreateCopy(const FSkeletalMeshLODModel* Other)"
  },
  {
    "label": "CopyStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyStructure(Destination, Other)"
  }
]