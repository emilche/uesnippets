[
  {
    "label": "btree_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_container"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "btree_access",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "btree_access"
  },
  {
    "label": "btree_set_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_set_container"
  },
  {
    "label": "BtreeNodePeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BtreeNodePeer"
  },
  {
    "label": "InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIterator"
  },
  {
    "label": "btree_map_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_map_container"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "btree_multiset_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_multiset_container"
  },
  {
    "label": "btree_multimap_container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_multimap_container"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_BTREE_CONTAINER_H_ # define ABSL_CONTAINER_INTERNAL_BTREE_CONTAINER_H_ # include<algorithm> # include<initializer_list> # include<iterator> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / base / internal / throw_delegate . h \" # include \" absl / container / internal / btree . h \" # include \" absl / container / internal / common . h \" # include \" absl / memory / memory . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<Tree> class btree_container { using params_type = Tree::params_type ; protected : template<class K> using key_arg = KeyArg<params_type::kIsKeyCompareTransparent>::template type<K,Tree::key_type> ; public : using key_type = Tree::key_type ; using value_type = Tree::value_type ; using size_type = Tree::size_type ; using difference_type = Tree::difference_type ; using key_compare = Tree::original_key_compare ; using value_compare = Tree::value_compare ; using allocator_type = Tree::allocator_type ; using reference = Tree::reference ; using const_reference = Tree::const_reference ; using pointer = Tree::pointer ; using const_pointer = Tree::const_pointer ; using iterator = Tree::iterator ; using const_iterator = Tree::const_iterator ; using reverse_iterator = Tree::reverse_iterator ; using const_reverse_iterator = Tree::const_reverse_iterator ; using node_type = Tree::node_handle_type ;)",
    "insertText": "btree_container() : tree_(key_compare(), allocator_type())"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_container(const key_compare &comp, const allocator_type &alloc = allocator_type()) : tree_(comp, alloc)"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_container(const allocator_type &alloc) : tree_(key_compare(), alloc)"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_container(const btree_container &other) : btree_container(other, absl::allocator_traits<allocator_type>:: select_on_container_copy_construction( other.get_allocator()))"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_container(const btree_container &other, const allocator_type &alloc) : tree_(other.tree_, alloc)"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_container(btree_container &&other) noexcept( std::is_nothrow_move_constructible<Tree>::value)"
  },
  {
    "label": "btree_container()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "btree_container(btree_container &&other, const allocator_type &alloc) : tree_(std::move(other.tree_), alloc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} btree_container&)",
    "insertText": "operator(const btree_container &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (btree_container&)",
    "insertText": "operator(btree_container &&other) noexcept( std::is_nothrow_move_assignable<Tree>::value)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> size_type)",
    "insertText": "count(const key_arg<K> &key)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (auto equal_range = this ->)",
    "insertText": "equal_range(key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> const_iterator)",
    "insertText": "find(const key_arg<K> &key)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> bool)",
    "insertText": "contains(const key_arg<K> &key)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> iterator)",
    "insertText": "lower_bound(const key_arg<K> &key)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> iterator)",
    "insertText": "upper_bound(const key_arg<K> &key)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> std::pair<iterator,iterator>)",
    "insertText": "equal_range(const key_arg<K> &key)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(const_iterator iter)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator iter)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(const_iterator first, const_iterator last)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> size_type)",
    "insertText": "erase(const key_arg<K> &key)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} node_type)",
    "insertText": "extract(iterator position)"
  },
  {
    "label": "node_type()",
    "kind": "Method",
    "detail": "Function (auto node = CommonAccess::Construct<)",
    "insertText": "node_type(get_allocator(), position.slot())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(position)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} ABSL_ATTRIBUTE_REINITIALIZES void)",
    "insertText": "clear()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(btree_container &other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (tree_ .)",
    "insertText": "swap(other.tree_)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "verify()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const btree_container &x, const btree_container &y)"
  },
  {
    "label": "get_allocator()",
    "kind": "Method",
    "detail": "Function (} allocator_type)",
    "insertText": "get_allocator()"
  },
  {
    "label": "key_comp()",
    "kind": "Method",
    "detail": "Function (} key_compare)",
    "insertText": "key_comp()"
  },
  {
    "label": "value_comp()",
    "kind": "Method",
    "detail": "Function (} value_compare)",
    "insertText": "value_comp()"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<State> State)",
    "insertText": "AbslHashValue(State h, const btree_container &b)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (h =)",
    "insertText": "combine(std::move(h), v)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(h), b.size())"
  },
  {
    "label": "btree_set_container()",
    "kind": "Method",
    "detail": "Function (} protected : struct btree_access ; Tree tree_ ; } ; template<Tree> class btree_set_container : public btree_container<Tree> { using super_type = btree_container<Tree> ; using params_type = Tree::params_type ; using init_type = params_type::init_type ; using is_key_compare_to = params_type::is_key_compare_to ; class BtreeNodePeer ; protected : template<class K> using key_arg = super_type::template key_arg<K> ; public : using key_type = Tree::key_type ; using value_type = Tree::value_type ; using size_type = Tree::size_type ; using key_compare = Tree::original_key_compare ; using allocator_type = Tree::allocator_type ; using iterator = Tree::iterator ; using const_iterator = Tree::const_iterator ; using node_type = super_type::node_type ; using insert_return_type = InsertReturnType<iterator,node_type> ; using super_type::super_type ;)",
    "insertText": "btree_set_container()"
  },
  {
    "label": "btree_set_container()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator>)",
    "insertText": "btree_set_container(InputIterator b, InputIterator e, const key_compare &comp = key_compare(), const allocator_type &alloc = allocator_type()) : super_type(comp, alloc)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(b, e)"
  },
  {
    "label": "btree_set_container()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator>)",
    "insertText": "btree_set_container(InputIterator b, InputIterator e, const allocator_type &alloc) : btree_set_container(b, e, key_compare(), alloc)"
  },
  {
    "label": "btree_set_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_set_container(std::initializer_list<init_type> init, const key_compare &comp = key_compare(), const allocator_type &alloc = allocator_type()) : btree_set_container(init.begin(), init.end(), comp, alloc)"
  },
  {
    "label": "btree_set_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_set_container(std::initializer_list<init_type> init, const allocator_type &alloc) : btree_set_container(init.begin(), init.end(), alloc)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(const value_type &v)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(value_type &&v)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> std::pair<iterator,bool>)",
    "insertText": "emplace(Args &&... args)"
  },
  {
    "label": "node_type()",
    "kind": "Method",
    "detail": "Function (auto node = CommonAccess::Construct<)",
    "insertText": "node_type(this->get_allocator(), std::forward<Args>(args)...)"
  },
  {
    "label": "GetSlot()",
    "kind": "Method",
    "detail": "Function (auto* slot =)",
    "insertText": "GetSlot(node)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(const_iterator hint, const value_type &v)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(const_iterator hint, value_type &&v)"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> iterator)",
    "insertText": "emplace_hint(const_iterator hint, Args &&... args)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<InputIterator> void)",
    "insertText": "insert(InputIterator b, InputIterator e)"
  },
  {
    "label": "insert_iterator_unique()",
    "kind": "Method",
    "detail": "Function (this -> tree_ .)",
    "insertText": "insert_iterator_unique(b, e, 0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(std::initializer_list<init_type> init)"
  },
  {
    "label": "insert_iterator_unique()",
    "kind": "Method",
    "detail": "Function (this -> tree_ .)",
    "insertText": "insert_iterator_unique(init.begin(), init.end(), 0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} insert_return_type)",
    "insertText": "insert(node_type &&node)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "end(), false, node_type()"
  },
  {
    "label": "insert_unique()",
    "kind": "Method",
    "detail": "Function (std::pair<iterator,bool> res = this -> tree_ .)",
    "insertText": "insert_unique(params_type::key(CommonAccess::GetSlot(node)), CommonAccess::GetSlot(node))"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(&node)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} else { return { res . first,false,)",
    "insertText": "move(node)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} } iterator)",
    "insertText": "insert(const_iterator hint, node_type &&node)"
  },
  {
    "label": "insert_hint_unique()",
    "kind": "Method",
    "detail": "Function (std::pair<iterator,bool> res = this -> tree_ .)",
    "insertText": "insert_hint_unique(iterator(hint), params_type::key(CommonAccess::GetSlot(node)), CommonAccess::GetSlot(node))"
  },
  {
    "label": "lower_bound_equal()",
    "kind": "Method",
    "detail": "Function (const std::pair<iterator,bool> lower_and_equal = this -> tree_ .)",
    "insertText": "lower_bound_equal(key)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} using super_type::extract ; template<T,absl::enable_if_t<absl::conjunction<std::is_same<value_type,T::value_type>,std::is_same<allocator_type,T::allocator_type>,std::is_same<params_type::is_map_container,T::params_type::is_map_container>>::value,int> = 0> void)",
    "insertText": "merge(btree_container<T> &src)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (src_it = src .)",
    "insertText": "erase(src_it)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} else { + + src_it ; } } } template<T,absl::enable_if_t<absl::conjunction<std::is_same<value_type,T::value_type>,std::is_same<allocator_type,T::allocator_type>,std::is_same<params_type::is_map_container,T::params_type::is_map_container>>::value,int> = 0> void)",
    "insertText": "merge(btree_container<T> &&src)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(src)"
  },
  {
    "label": "btree_map_container()",
    "kind": "Method",
    "detail": "Function (} } ; template<Tree> class btree_map_container : public btree_set_container<Tree> { using super_type = btree_set_container<Tree> ; using params_type = Tree::params_type ; class BtreeNodePeer ; private : template<class K> using key_arg = super_type::template key_arg<K> ; public : using key_type = Tree::key_type ; using mapped_type = params_type::mapped_type ; using value_type = Tree::value_type ; using key_compare = Tree::original_key_compare ; using allocator_type = Tree::allocator_type ; using iterator = Tree::iterator ; using const_iterator = Tree::const_iterator ; using super_type::super_type ;)",
    "insertText": "btree_map_container()"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(const key_arg<K> &k, const M &obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M,K* = nullptr> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(key_arg<K> &&k, const M &obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M,M* = nullptr> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(const key_arg<K> &k, M &&obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M,K* = nullptr,M* = nullptr> std::pair<iterator,bool>)",
    "insertText": "insert_or_assign(key_arg<K> &&k, M &&obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M> iterator)",
    "insertText": "insert_or_assign(const_iterator hint, const key_arg<K> &k, const M &obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M,K* = nullptr> iterator)",
    "insertText": "insert_or_assign(const_iterator hint, key_arg<K> &&k, const M &obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M,M* = nullptr> iterator)",
    "insertText": "insert_or_assign(const_iterator hint, const key_arg<K> &k, M &&obj)"
  },
  {
    "label": "insert_or_assign()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,class M,K* = nullptr,M* = nullptr> iterator)",
    "insertText": "insert_or_assign(const_iterator hint, key_arg<K> &&k, M &&obj)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,. . . Args,absl::enable_if_t<! std::is_convertible<K,const_iterator>::value,int> = 0> std::pair<iterator,bool>)",
    "insertText": "try_emplace(const key_arg<K> &k, Args &&... args)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,. . . Args,absl::enable_if_t<! std::is_convertible<K,const_iterator>::value,int> = 0> std::pair<iterator,bool>)",
    "insertText": "try_emplace(key_arg<K> &&k, Args &&... args)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,. . . Args> iterator)",
    "insertText": "try_emplace(const_iterator hint, const key_arg<K> &k, Args &&... args)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type,. . . Args> iterator)",
    "insertText": "try_emplace(const_iterator hint, key_arg<K> &&k, Args &&... args)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> mapped_type&)",
    "insertText": "operator(const key_arg<K> &k)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> mapped_type&)",
    "insertText": "operator(key_arg<K> &&k)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} template<K = key_type> mapped_type&)",
    "insertText": "at(const key_arg<K> &key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = this ->)",
    "insertText": "find(key)"
  },
  {
    "label": "insert_unique()",
    "kind": "Method",
    "detail": "Function (const std::pair<iterator,bool> ret = this -> tree_ .)",
    "insertText": "insert_unique(k, std::forward<K>(k), std::forward<M>(obj))"
  },
  {
    "label": "insert_hint_unique()",
    "kind": "Method",
    "detail": "Function (const std::pair<iterator,bool> ret = this -> tree_ .)",
    "insertText": "insert_hint_unique(iterator(hint), k, std::forward<K>(k), std::forward<M>(obj))"
  },
  {
    "label": "try_emplace_hint_impl()",
    "kind": "Method",
    "detail": "Function (} template<class K,class . . . Args> iterator)",
    "insertText": "try_emplace_hint_impl(const_iterator hint, K &&k, Args &&... args)"
  },
  {
    "label": "btree_multiset_container()",
    "kind": "Method",
    "detail": "Function (} } ; template<Tree> class btree_multiset_container : public btree_container<Tree> { using super_type = btree_container<Tree> ; using params_type = Tree::params_type ; using init_type = params_type::init_type ; using is_key_compare_to = params_type::is_key_compare_to ; class BtreeNodePeer ; template<class K> using key_arg = super_type::template key_arg<K> ; public : using key_type = Tree::key_type ; using value_type = Tree::value_type ; using size_type = Tree::size_type ; using key_compare = Tree::original_key_compare ; using allocator_type = Tree::allocator_type ; using iterator = Tree::iterator ; using const_iterator = Tree::const_iterator ; using node_type = super_type::node_type ; using super_type::super_type ;)",
    "insertText": "btree_multiset_container()"
  },
  {
    "label": "btree_multiset_container()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator>)",
    "insertText": "btree_multiset_container(InputIterator b, InputIterator e, const key_compare &comp = key_compare(), const allocator_type &alloc = allocator_type()) : super_type(comp, alloc)"
  },
  {
    "label": "btree_multiset_container()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator>)",
    "insertText": "btree_multiset_container(InputIterator b, InputIterator e, const allocator_type &alloc) : btree_multiset_container(b, e, key_compare(), alloc)"
  },
  {
    "label": "btree_multiset_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_multiset_container(std::initializer_list<init_type> init, const key_compare &comp = key_compare(), const allocator_type &alloc = allocator_type()) : btree_multiset_container(init.begin(), init.end(), comp, alloc)"
  },
  {
    "label": "btree_multiset_container()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "btree_multiset_container(std::initializer_list<init_type> init, const allocator_type &alloc) : btree_multiset_container(init.begin(), init.end(), alloc)"
  },
  {
    "label": "insert_iterator_multi()",
    "kind": "Method",
    "detail": "Function (this -> tree_ .)",
    "insertText": "insert_iterator_multi(b, e)"
  },
  {
    "label": "insert_iterator_multi()",
    "kind": "Method",
    "detail": "Function (this -> tree_ .)",
    "insertText": "insert_iterator_multi(init.begin(), init.end())"
  },
  {
    "label": "insert_multi()",
    "kind": "Method",
    "detail": "Function (iterator res = this -> tree_ .)",
    "insertText": "insert_multi(params_type::key(CommonAccess::GetSlot(node)), CommonAccess::GetSlot(node))"
  },
  {
    "label": "insert_hint_multi()",
    "kind": "Method",
    "detail": "Function (iterator res = this -> tree_ .)",
    "insertText": "insert_hint_multi(iterator(hint), std::move(params_type::element(CommonAccess::GetSlot(node))))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(std::move(params_type::element(src_it.slot())))"
  },
  {
    "label": "btree_multimap_container()",
    "kind": "Method",
    "detail": "Function (} } ; template<Tree> class btree_multimap_container : public btree_multiset_container<Tree> { using super_type = btree_multiset_container<Tree> ; using params_type = Tree::params_type ; class BtreeNodePeer ; public : using mapped_type = params_type::mapped_type ; using super_type::super_type ;)",
    "insertText": "btree_multimap_container()"
  }
]