[
  {
    "label": "FParticleEdgeCollisionPruner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleEdgeCollisionPruner"
  },
  {
    "label": "FParticleMeshCollisionPruner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleMeshCollisionPruner"
  },
  {
    "label": "FParticleSubSurfaceCollisionPruner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleSubSurfaceCollisionPruner"
  },
  {
    "label": "FParticleEdgeCollisionPruner()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Collision / PBDCollisionConstraint . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { class FParticleEdgeCollisionPruner { public :)",
    "insertText": "FParticleEdgeCollisionPruner(FGeometryParticleHandle* InParticle) : Particle(InParticle)"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Prune()"
  },
  {
    "label": "FParticleMeshCollisionPruner()",
    "kind": "Method",
    "detail": "Function (private : FGeometryParticleHandle* Particle ; } ; class FParticleMeshCollisionPruner { public :)",
    "insertText": "FParticleMeshCollisionPruner(FGeometryParticleHandle* InParticle) : Particle(InParticle)"
  },
  {
    "label": "FParticleSubSurfaceCollisionPruner()",
    "kind": "Method",
    "detail": "Function (private : FGeometryParticleHandle* Particle ; } ; class FParticleSubSurfaceCollisionPruner { public :)",
    "insertText": "FParticleSubSurfaceCollisionPruner(FGeometryParticleHandle* InParticle) : Particle(InParticle)"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Prune(const FVec3& UpVector)"
  }
]