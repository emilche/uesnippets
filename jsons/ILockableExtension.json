[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / Extensions / HierarchicalCacheExtension . h \" namespace UE { namespace Sequencer { enum class ELockableLockState { None,Locked,PartiallyLocked,} ; class ILockableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ILockableExtension) virtual ~ILockableExtension()"
  },
  {
    "label": "GetLockState()",
    "kind": "Method",
    "detail": "Function (} ELockableLockState)",
    "insertText": "GetLockState()"
  },
  {
    "label": "SetIsLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsLocked(bool bIsLocked)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ECachedLockState { None = 0,Lockable = 1<<0,LockableChildren = 1<<1,Locked = 1<<2,PartiallyLockedChildren = 1<<3,ImplicitlyLockedByParent = 1<<4,InheritedFromChildren = LockableChildren | PartiallyLockedChildren,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECachedLockState)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FLockStateCacheExtension)"
  },
  {
    "label": "ComputeFlagsForModel()",
    "kind": "Method",
    "detail": "Function (private : ECachedLockState)",
    "insertText": "ComputeFlagsForModel(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "PostComputeChildrenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostComputeChildrenFlags(const FViewModelPtr& ViewModel, ECachedLockState& OutThisModelFlags, ECachedLockState& OutPropagateToParentFlags)"
  }
]