[
  {
    "label": "FScenePreUpdateChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePreUpdateChangeSet"
  },
  {
    "label": "FScenePostUpdateChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePostUpdateChangeSet"
  },
  {
    "label": "TSpatialHashMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpatialHashMap"
  },
  {
    "label": "FElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElement"
  },
  {
    "label": "FElementId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementId"
  },
  {
    "label": "FConstIteratorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstIteratorType"
  },
  {
    "label": "THierarchicalSpatialHashGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THierarchicalSpatialHashGrid"
  },
  {
    "label": "TFootprint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFootprint"
  },
  {
    "label": "FCellBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellBlock"
  },
  {
    "label": "FHasher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHasher"
  },
  {
    "label": "FElementId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" SceneCullingDefinitions . h \" # include \" Rendering / RenderingSpatialHash . h \" # include \" SpanAllocator . h \" # include \" Tasks / Task . h \" class FScenePreUpdateChangeSet ; class FScenePostUpdateChangeSet ; # define USE_STATIC_HASH_TABLE 0 # if USE_STATIC_HASH_TABLE template<InKeyType,InValueType> class TSpatialHashMap { public : using KeyType = InKeyType ; using ValueType = InValueType ; struct FElement { KeyType Key ; ValueType Value ; } ; struct FElementId {)",
    "insertText": "FElementId(int32 InIndex = INDEX_NONE) : Index(InIndex)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32 Index = INDEX_NONE ; int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reset()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Clear()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Reserve(Num)"
  },
  {
    "label": "FindIdByHash()",
    "kind": "Method",
    "detail": "Function (} FElementId)",
    "insertText": "FindIdByHash(uint16 Hash, const KeyType& Location)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (} } return FElementId { } ; } FElementId)",
    "insertText": "FindId(const KeyType& Location)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (uint16 Hash =)",
    "insertText": "uint16(Hasher::GetKeyHash(Location))"
  },
  {
    "label": "FindOrAddId()",
    "kind": "Method",
    "detail": "Function (} FElementId)",
    "insertText": "FindOrAddId(const KeyType& Location, const ValueType& Value)"
  },
  {
    "label": "FindIdByHash()",
    "kind": "Method",
    "detail": "Function (FElementId Id =)",
    "insertText": "FindIdByHash(Hash, Location)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = Elements .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(FElement{ Location, Value })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Add(Hash, NewIndex)"
  },
  {
    "label": "GetMaxIndex()",
    "kind": "Method",
    "detail": "Function (Id = FElementId { NewIndex } ; } return Id ; } int32)",
    "insertText": "GetMaxIndex()"
  },
  {
    "label": "GetByElementId()",
    "kind": "Method",
    "detail": "Function (} FElement&)",
    "insertText": "GetByElementId(FElementId Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } public : bool)",
    "insertText": "operator(const FConstIteratorType& Rhs)"
  },
  {
    "label": "GetElementId()",
    "kind": "Method",
    "detail": "Function (+ + Index ; return* this ; } FElementId)",
    "insertText": "GetElementId()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FConstIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "FloorToInt64Vector()",
    "kind": "Method",
    "detail": "Function (} TArray<FElement> Elements ; TStaticHashTable<3 2 u* 1 0 2 4 u,3 2 u* 1 0 2 4 u> HashTable ; } ; # endif FInt64Vector)",
    "insertText": "FloorToInt64Vector(const FVector& Vector)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} ; template<BlockTraitsType> class THierarchicalSpatialHashGrid { public : using FBlockLoc = BlockTraitsType::FBlockLoc ; int32 CellBlockDimLog2 = BlockTraitsType::CellBlockDimLog2 ; int32 kMaxLevel = 6 4 ; int32 NumCellsPerBlockLog2 = CellBlockDimLog2* 3 ; int32 CellBlockDim = 1<<CellBlockDimLog2 ; uint32 LocalCellCoordMask =)",
    "insertText": "uint32(CellBlockDim)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (int32 CellBlockSize = CellBlockDim* CellBlockDim* CellBlockDim ; using FLocation64 = RenderingSpatialHash::TLocation<int64> ; using FLocation32 = RenderingSpatialHash::TLocation<int32> ; using FLocation8 = RenderingSpatialHash::TLocation<int8> ; using FInt8Vector3 = UE::Math::TIntVector3<int8> ; template<ScalarType> struct TFootprint { using FIntVector3 = UE::Math::TIntVector3<ScalarType> ; template<LambdaType> void)",
    "insertText": "ForEach(LambdaType Lambda)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (RenderingSpatialHash::TLocation<ScalarType> L ; L . Coord = RenderingSpatialHash::TLocation<ScalarType>::FIntVector3 { X,Y,Z } ; L . Level = Level ;)",
    "insertText": "Lambda(L)"
  },
  {
    "label": "CoarseCellMaskCoordMask()",
    "kind": "Method",
    "detail": "Function (} } } } FIntVector3 Min ; FIntVector3 Max ; int32 Level ; } ; using FFootprint64 = TFootprint<int64> ; using FFootprint32 = TFootprint<int32> ; using FFootprint8 = TFootprint<int8> ; struct FCellBlock { uint32 CoarseCellMaskDimLog2 = 2 U ; uint32 CoarseCellMaskDim = 1 U<<CoarseCellMaskDimLog2 ; uint32)",
    "insertText": "CoarseCellMaskCoordMask(1U << CoarseCellMaskDimLog2)"
  },
  {
    "label": "CalcCellOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalcCellOffset(const FInt8Vector3& Loc)"
  },
  {
    "label": "GetCellGridOffset()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "GetCellGridOffset(const FInt8Vector3& Loc)"
  },
  {
    "label": "CalcCellMaskOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CalcCellMaskOffset(const FInt8Vector3& MaskLoc)"
  },
  {
    "label": "CalcCellMask()",
    "kind": "Method",
    "detail": "Function (} ; uint64)",
    "insertText": "CalcCellMask(const FInt8Vector3& Loc)"
  },
  {
    "label": "Loc()",
    "kind": "Method",
    "detail": "Function (FInt8Vector3 MaskLoc =)",
    "insertText": "Loc(CellBlockDimLog2 - CoarseCellMaskDimLog2)"
  },
  {
    "label": "BuildFootPrintMask()",
    "kind": "Method",
    "detail": "Function (} ; uint64)",
    "insertText": "BuildFootPrintMask(const FFootprint8& FootprintInBlock)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FFootprint8 FootprintInCoarse = FootprintInBlock ; FootprintInCoarse . Min = FootprintInCoarse .)",
    "insertText": "Min(CellBlockDimLog2 - CoarseCellMaskDimLog2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FootprintInCoarse . Max = FootprintInCoarse .)",
    "insertText": "Max(CellBlockDimLog2 - CoarseCellMaskDimLog2)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (uint64 Result = 0 ULL ; FootprintInCoarse .)",
    "insertText": "ForEach([&](const FLocation8& Loc) { Result |= (1ULL << CalcCellMaskOffset(Loc.Coord)); })"
  },
  {
    "label": "THierarchicalSpatialHashGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THierarchicalSpatialHashGrid(double MinCellSize, double MaxCellSize)"
  },
  {
    "label": "CalcLevel()",
    "kind": "Method",
    "detail": "Function (FirstLevel =)",
    "insertText": "CalcLevel(MinCellSize - 1.0)"
  },
  {
    "label": "CalcLevel()",
    "kind": "Method",
    "detail": "Function (LastLevel =)",
    "insertText": "CalcLevel(MaxCellSize - 1.0)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (LastLevelCellSize =)",
    "insertText": "GetCellSize(LastLevel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MaxCullingDistance = WORLD_MAX ;)",
    "insertText": "for(int32 Level = 0; Level < kMaxLevel; ++Level)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (RecCellSizes [ Level ] = 1 . 0 /)",
    "insertText": "GetCellSize(Level)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetMaxNumBlocks()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxNumBlocks()"
  },
  {
    "label": "CalcLevel()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CalcLevel(float Size)"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "CalcLevelFromRadius(float Radius)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (} ; double)",
    "insertText": "GetCellSize(int32 Level)"
  },
  {
    "label": "GetRecCellSize()",
    "kind": "Method",
    "detail": "Function (} ; double)",
    "insertText": "GetRecCellSize(int32 Level)"
  },
  {
    "label": "GetRecCellSize()",
    "kind": "Method",
    "detail": "Function (FLocation64 Result ; double RecLevelCellSize =)",
    "insertText": "GetRecCellSize(Level)"
  },
  {
    "label": "FloorToInt64Vector()",
    "kind": "Method",
    "detail": "Function (Result . Level = Level ; Result . Coord =)",
    "insertText": "FloorToInt64Vector(WorldPos * RecLevelCellSize)"
  },
  {
    "label": "FloorToInt64Vector()",
    "kind": "Method",
    "detail": "Function (Footprint . Level = Level ; Footprint . Min =)",
    "insertText": "FloorToInt64Vector((Origin - FVector(Radius, Radius, Radius)) * RecLevelCellSize)"
  },
  {
    "label": "FloorToInt64Vector()",
    "kind": "Method",
    "detail": "Function (Footprint . Max =)",
    "insertText": "FloorToInt64Vector((Origin + FVector(Radius, Radius, Radius)) * RecLevelCellSize)"
  },
  {
    "label": "CalcLevelAndFootprint()",
    "kind": "Method",
    "detail": "Function (FFootprint64 BlockFootprint ; BlockFootprint . Min = Footprint . Min>> CellBlockDimLog2 ; BlockFootprint . Max = Footprint . Max>> CellBlockDimLog2 ; BlockFootprint . Level = Footprint . Level + CellBlockDimLog2 ; return BlockFootprint ; } ; FFootprint64)",
    "insertText": "CalcLevelAndFootprint(const FBoxSphereBounds& BoxSphereBounds)"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (int32 Level =)",
    "insertText": "CalcLevelFromRadius(BoxSphereBounds.SphereRadius)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Level =)",
    "insertText": "Max(FirstLevel, Level)"
  },
  {
    "label": "FloorToInt64Vector()",
    "kind": "Method",
    "detail": "Function (FFootprint64 Footprint ; Footprint . Level = Level ; Footprint . Min =)",
    "insertText": "FloorToInt64Vector((BoxSphereBounds.Origin - BoxSphereBounds.BoxExtent) * RecLevelCellSize)"
  },
  {
    "label": "FloorToInt64Vector()",
    "kind": "Method",
    "detail": "Function (Footprint . Max =)",
    "insertText": "FloorToInt64Vector((BoxSphereBounds.Origin + BoxSphereBounds.BoxExtent) * RecLevelCellSize)"
  },
  {
    "label": "CalcLevelAndLocation()",
    "kind": "Method",
    "detail": "Function (} ; FLocation64)",
    "insertText": "CalcLevelAndLocation(const FVector4d& Sphere)"
  },
  {
    "label": "CalcLevelFromRadius()",
    "kind": "Method",
    "detail": "Function (int32 Level =)",
    "insertText": "CalcLevelFromRadius(Sphere.W)"
  },
  {
    "label": "IsValidLevel()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsValidLevel(int32 Level)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (FBox Box ; double LevelCellSize =)",
    "insertText": "GetCellSize(CellLoc.Level)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Box . Min =)",
    "insertText": "FVector(CellLoc.Coord)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Box . Max = Box . Min + LevelCellSize ; Box . Min - =)",
    "insertText": "FVector(LevelCellSize * 0.5)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (FBox Box ; double BlockLevelSize =)",
    "insertText": "GetCellSize(BlockLoc.Level)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Box . Min =)",
    "insertText": "FVector(BlockLoc.Coord)"
  },
  {
    "label": "GetCellSize()",
    "kind": "Method",
    "detail": "Function (Box . Max = Box . Min + BlockLevelSize ; double LevelCellSize =)",
    "insertText": "GetCellSize(BlockLoc.Level - CellBlockDimLog2)"
  },
  {
    "label": "CalcBlockWorldPosition()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "CalcBlockWorldPosition(const FBlockLoc& BlockLoc)"
  },
  {
    "label": "GetFirstLevel()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFirstLevel()"
  },
  {
    "label": "GetBlockById()",
    "kind": "Method",
    "detail": "Function (} } ; using FSpatialHashMap = Experimental::TRobinHoodHashMap<FBlockLoc,FCellBlock,FHasher> ; using FBlockId = Experimental::FHashElementId ; using FHashElementId = Experimental::FHashElementId ; # endif FCellBlock&)",
    "insertText": "GetBlockById(const FBlockId &BlockId)"
  },
  {
    "label": "GetBlockLocById()",
    "kind": "Method",
    "detail": "Function (} FBlockLoc)",
    "insertText": "GetBlockLocById(const FBlockId &BlockId)"
  },
  {
    "label": "GetHashMap()",
    "kind": "Method",
    "detail": "Function (} const FSpatialHashMap&)",
    "insertText": "GetHashMap()"
  }
]