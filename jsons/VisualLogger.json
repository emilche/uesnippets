[
  {
    "label": "FVisualLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogger"
  },
  {
    "label": "FVisualLogDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogDevice"
  },
  {
    "label": "FVisualLogExtensionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogExtensionInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "FVisualLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogger"
  },
  {
    "label": "convention",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "convention"
  },
  {
    "label": "isn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isn"
  },
  {
    "label": "allow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "allow"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVisual, Display, All)"
  },
  {
    "label": "CategorizedLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategorizedLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TCHAR* Fmt, ...)"
  },
  {
    "label": "SegmentLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const uint16 Thickness, const TCHAR* Fmt, ...)"
  },
  {
    "label": "LocationLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocationLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, uint16 Thickness, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "SphereLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SphereLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, float Radius, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "BoxLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoxLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FBox& Box, const FMatrix& Matrix, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "ConeLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConeLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Origin, const FVector& Direction, const float Length, const float Angle, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CylinderLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CylinderLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const float Radius, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CapsuleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Base, float HalfHeight, float Radius, const FQuat& Rotation, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "PulledConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PulledConvexLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& ConvexPoints, float MinZ, float MaxZ, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "MeshLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& Vertices, const TArray<int32>& Indices, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "ConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvexLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& Points, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "HistogramDataLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramDataLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, FName GraphName, FName DataName, const FVector2D& Data, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "ArrowLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrowLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CircleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CircleLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, const FVector& UpAxis, const float Radius, const FColor& Color, const uint16 Thickness, const TCHAR* Fmt, ...)"
  },
  {
    "label": "NavigationDataDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigationDataDump(const UObject* LogOwner, const FLogCategoryBase& Category, const ELogVerbosity::Type Verbosity, const FBox& Box)"
  },
  {
    "label": "NavigationDataDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigationDataDump(const UObject* LogOwner, const FName& CategoryName, const ELogVerbosity::Type Verbosity, const FBox& Box)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FName EventTag2 = NAME_None, const FName EventTag3 = NAME_None, const FName EventTag4 = NAME_None, const FName EventTag5 = NAME_None, const FName EventTag6 = NAME_None)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3, const FVisualLogEventBase& Event4)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3, const FVisualLogEventBase& Event4, const FVisualLogEventBase& Event5)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3, const FVisualLogEventBase& Event4, const FVisualLogEventBase& Event5, const FVisualLogEventBase& Event6)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FVisualLogEventBase& Event1, const FName EventTag1 = NAME_None, const FName EventTag2 = NAME_None, const FName EventTag3 = NAME_None, const FName EventTag4 = NAME_None, const FName EventTag5 = NAME_None, const FName EventTag6 = NAME_None)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(UWorld* OldWorld, bool bReleaseMemory = false)"
  },
  {
    "label": "OnDataReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataReset()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FTransactionallySafeWriteScopeLock)",
    "insertText": "Lock(Logger.RedirectRWLock)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FTransactionallySafeReadScopeLock)",
    "insertText": "Lock(Logger.RedirectRWLock)"
  },
  {
    "label": "GetUniqueId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUniqueId(double Timestamp)"
  },
  {
    "label": "SetIsRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecording(const bool bInIsRecording)"
  },
  {
    "label": "SetIsRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecordingToFile(bool InIsRecording)"
  },
  {
    "label": "DiscardRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardRecordingToFile()"
  },
  {
    "label": "SetIsRecordingToTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecordingToTrace(const bool bInIsRecording)"
  },
  {
    "label": "SetUseUniqueNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseUniqueNames(const bool bEnable)"
  },
  {
    "label": "FlushThreadsEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushThreadsEntries()"
  },
  {
    "label": "CheckVisualLogInputInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVisualLogInputInternal(const UObject* Object, const FName& CategoryName, ELogVerbosity::Type Verbosity, UWorld **OutWorld, FVisualLogEntry **OutCurrentEntry)"
  },
  {
    "label": "AddClassToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClassToAllowList(UClass& InClass)"
  },
  {
    "label": "AddObjectToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectToAllowList(const UObject& InObject)"
  },
  {
    "label": "ClearObjectAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectAllowList()"
  },
  {
    "label": "FVisualLogger()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVisualLogger()"
  },
  {
    "label": "CleanupRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupRedirects()"
  },
  {
    "label": "CalculateEntryAllowLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateEntryAllowLogging(FVisualLogEntry* CurrentEntry, const UObject* LogOwner, const UObject* Object)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "FlushEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushEntry(FVisualLogEntry& Entry, const FObjectKey& ObjectKey)"
  }
]