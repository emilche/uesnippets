[
  {
    "label": "FVisualLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogger"
  },
  {
    "label": "FVisualLogDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogDevice"
  },
  {
    "label": "FVisualLogExtensionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLogExtensionInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "convention",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "convention"
  },
  {
    "label": "isn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isn"
  },
  {
    "label": "REDIRECT_TO_VLOG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / Object . h \" # include \" Engine / EngineTypes . h \" # include \" EngineDefines . h \" # include \" VisualLogger / VisualLoggerTypes . h \" # include \" Templates / IsValidVariadicFunctionArg . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" UObject / ObjectKey . h \" # include \" Containers / Ticker . h \" # include \" Misc / TransactionallySafeRWLock . h \" # include \" Misc / TransactionallySafeRWScopeLock . h \" # if ENABLE_VISUAL_LOG # define)",
    "insertText": "REDIRECT_TO_VLOG(Dest) FVisualLogger::Redirect(this, Dest) #define REDIRECT_OBJECT_TO_VLOG(Src, Dest) FVisualLogger::Redirect(Src, Dest) #define CONNECT_WITH_VLOG(Dest) #define CONNECT_OBJECT_WITH_VLOG(Src, Dest) #define UE_VLOG(LogOwner, CategoryName, Verbosity, Format, ...) if( FVisualLogger::IsRecording() ) FVisualLogger::CategorizedLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Format, ##__VA_ARGS__) #define UE_CVLOG(Condition, LogOwner, CategoryName, Verbosity, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG(LogOwner, CategoryName, Verbosity, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_UELOG()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_UELOG(LogOwner, CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "UE_CVLOG_UELOG()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_CVLOG_UELOG(Condition, LogOwner, CategoryName, Verbosity, Format, ...) if(Condition)"
  },
  {
    "label": "UE_VLOG_UELOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_UELOG(LogOwner, CategoryName, Verbosity, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_ALWAYS_UELOG()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_ALWAYS_UELOG(LogOwner, CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "UE_VLOG_SEGMENT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_SEGMENT(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::SegmentLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, SegmentStart, SegmentEnd, Color, 0, Format, ##__VA_ARGS__) #define UE_CVLOG_SEGMENT(Condition, LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_SEGMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_SEGMENT(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_SEGMENT_THICK()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_SEGMENT_THICK(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Thickness, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::SegmentLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, SegmentStart, SegmentEnd, Color, Thickness, Format, ##__VA_ARGS__) #define UE_CVLOG_SEGMENT_THICK(Condition, LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Thickness, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_SEGMENT_THICK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_SEGMENT_THICK(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Thickness, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_LOCATION()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_LOCATION(LogOwner, CategoryName, Verbosity, Location, Thickness, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::LocationLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Location, Thickness, Color, Format, ##__VA_ARGS__) #define UE_CVLOG_LOCATION(Condition, LogOwner, CategoryName, Verbosity, Location, Thickness, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_LOCATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_LOCATION(LogOwner, CategoryName, Verbosity, Location, Thickness, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_SPHERE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_SPHERE(LogOwner, CategoryName, Verbosity, Location, Radius, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::SphereLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Location, Radius, Color, false, Format, ##__VA_ARGS__) #define UE_CVLOG_SPHERE(Condition, LogOwner, CategoryName, Verbosity, Location, Radius, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_SPHERE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_SPHERE(LogOwner, CategoryName, Verbosity, Location, Radius, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_WIRESPHERE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_WIRESPHERE(LogOwner, CategoryName, Verbosity, Location, Radius, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::SphereLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Location, Radius, Color, true, Format, ##__VA_ARGS__) #define UE_CVLOG_WIRESPHERE(Condition, LogOwner, CategoryName, Verbosity, Location, Radius, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_WIRESPHERE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_WIRESPHERE(LogOwner, CategoryName, Verbosity, Location, Radius, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_BOX()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_BOX(LogOwner, CategoryName, Verbosity, Box, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::BoxLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Box, FMatrix::Identity, Color, false, Format, ##__VA_ARGS__) #define UE_CVLOG_BOX(Condition, LogOwner, CategoryName, Verbosity, Box, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_BOX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_BOX(LogOwner, CategoryName, Verbosity, Box, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_WIREBOX()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_WIREBOX(LogOwner, CategoryName, Verbosity, Box, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::BoxLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Box, FMatrix::Identity, Color, true, Format, ##__VA_ARGS__) #define UE_CVLOG_WIREBOX(Condition, LogOwner, CategoryName, Verbosity, Box, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_OBOX()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_OBOX(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::BoxLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Box, Matrix, Color, false, Format, ##__VA_ARGS__) #define UE_CVLOG_OBOX(Condition, LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_OBOX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_OBOX(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_WIREOBOX()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_WIREOBOX(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::BoxLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Box, Matrix, Color, true, Format, ##__VA_ARGS__) #define UE_CVLOG_WIREOBOX(Condition, LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CONE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_CONE(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::ConeLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Origin, Direction, Length, Angle, Color, false, Format, ##__VA_ARGS__) #define UE_CVLOG_CONE(Condition, LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CONE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_CONE(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_WIRECONE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_WIRECONE(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::ConeLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Origin, Direction, Length, Angle, Color, true, Format, ##__VA_ARGS__) #define UE_CVLOG_WIRECONE(Condition, LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CYLINDER()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_CYLINDER(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::CylinderLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Start, End, Radius, Color, false, Format, ##__VA_ARGS__) #define UE_CVLOG_CYLINDER(Condition, LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CYLINDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_CYLINDER(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_WIRECYLINDER()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_WIRECYLINDER(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::CylinderLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Start, End, Radius, Color, true, Format, ##__VA_ARGS__) #define UE_CVLOG_WIRECYLINDER(Condition, LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CAPSULE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_CAPSULE(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::CapsuleLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Base, HalfHeight, Radius, Rotation, Color, false, Format, ##__VA_ARGS__) #define UE_CVLOG_CAPSULE(Condition, LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CAPSULE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_CAPSULE(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_WIRECAPSULE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_WIRECAPSULE(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::CapsuleLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Base, HalfHeight, Radius, Rotation, Color, true, Format, ##__VA_ARGS__) #define UE_CVLOG_WIRECAPSULE(Condition, LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_HISTOGRAM()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_HISTOGRAM(LogOwner, CategoryName, Verbosity, GraphName, DataName, Data) if(FVisualLogger::IsRecording()) FVisualLogger::HistogramDataLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, GraphName, DataName, Data, FColor::White, TEXT(\"\")) #define UE_CVLOG_HISTOGRAM(Condition, LogOwner, CategoryName, Verbosity, GraphName, DataName, Data) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_HISTOGRAM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_HISTOGRAM(LogOwner, CategoryName, Verbosity, GraphName, DataName, Data)"
  },
  {
    "label": "UE_VLOG_PULLEDCONVEX()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_PULLEDCONVEX(LogOwner, CategoryName, Verbosity, ConvexPoints, MinZ, MaxZ, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::PulledConvexLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, ConvexPoints, MinZ, MaxZ, Color, Format, ##__VA_ARGS__) #define UE_CVLOG_PULLEDCONVEX(Condition, LogOwner, CategoryName, Verbosity, ConvexPoints, MinZ, MaxZ, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_PULLEDCONVEX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_PULLEDCONVEX(LogOwner, CategoryName, Verbosity, ConvexPoints, MinZ, MaxZ, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_MESH()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_MESH(LogOwner, CategoryName, Verbosity, Vertices, Indices, Color, Format, ...) if (FVisualLogger::IsRecording()) FVisualLogger::MeshLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Vertices, Indices, Color, Format, ##__VA_ARGS__) #define UE_CVLOG_MESH(Condition, LogOwner, CategoryName, Verbosity, Vertices, Indices, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_MESH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_MESH(LogOwner, CategoryName, Verbosity, Vertices, Indices, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_CONVEXPOLY()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_CONVEXPOLY(LogOwner, CategoryName, Verbosity, Points, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::ConvexLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Points, Color, Format, ##__VA_ARGS__) #define UE_CVLOG_CONVEXPOLY(Condition, LogOwner, CategoryName, Verbosity, Points, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CONVEXPOLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_CONVEXPOLY(LogOwner, CategoryName, Verbosity, Points, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_ARROW()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_ARROW(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::ArrowLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, SegmentStart, SegmentEnd, Color, Format, ##__VA_ARGS__) #define UE_CVLOG_ARROW(Condition, LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_ARROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_ARROW(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_CIRCLE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_CIRCLE(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::CircleLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Center, UpAxis, Radius, Color, 0, Format, ##__VA_ARGS__) #define UE_CVLOG_CIRCLE(Condition, LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CIRCLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_CIRCLE(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Format, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_CIRCLE_THICK()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_CIRCLE_THICK(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Thickness, Format, ...) if(FVisualLogger::IsRecording()) FVisualLogger::CircleLogf(LogOwner, CategoryName, ELogVerbosity::Verbosity, Center, UpAxis, Radius, Color, Thickness, Format, ##__VA_ARGS__) #define UE_CVLOG_CIRCLE_THICK(Condition, LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Thickness, Format, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_CIRCLE_THICK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_CIRCLE_THICK(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Thickness, Format, ##__VA_ARGS__)"
  },
  {
    "label": "DECLARE_VLOG_EVENT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DECLARE_VLOG_EVENT(EventName)"
  },
  {
    "label": "DEFINE_VLOG_EVENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DEFINE_VLOG_EVENT(EventName, Verbosity, UserFriendlyDesc) FVisualLogEventBase EventName(TEXT(#EventName), TEXT(UserFriendlyDesc), ELogVerbosity::Verbosity)"
  },
  {
    "label": "UE_VLOG_EVENTS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_VLOG_EVENTS(LogOwner, TagNameToLog, ...) if(FVisualLogger::IsRecording()) FVisualLogger::EventLog(LogOwner, TagNameToLog, ##__VA_ARGS__) #define UE_CVLOG_EVENTS(Condition, LogOwner, TagNameToLog, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_EVENTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_EVENTS(LogOwner, TagNameToLog, ##__VA_ARGS__)"
  },
  {
    "label": "UE_VLOG_EVENT_WITH_DATA()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_VLOG_EVENT_WITH_DATA(LogOwner, LogEvent, ...) if(FVisualLogger::IsRecording()) FVisualLogger::EventLog(LogOwner, LogEvent, ##__VA_ARGS__) #define UE_CVLOG_EVENT_WITH_DATA(Condition, LogOwner, LogEvent, ...) if(FVisualLogger::IsRecording() && Condition)"
  },
  {
    "label": "UE_VLOG_EVENT_WITH_DATA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_EVENT_WITH_DATA(LogOwner, LogEvent, ##__VA_ARGS__)"
  },
  {
    "label": "UE_IFVLOG()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_IFVLOG(__code_block__) if( FVisualLogger::IsRecording())"
  },
  {
    "label": "REDIRECT_TO_VLOG()",
    "kind": "Method",
    "detail": "Function (__code_block__ ; } # else # define)",
    "insertText": "REDIRECT_TO_VLOG(Dest) #define REDIRECT_OBJECT_TO_VLOG(Src, Dest) #define CONNECT_WITH_VLOG(Dest) #define CONNECT_OBJECT_WITH_VLOG(Src, Dest) #define UE_VLOG(LogOwner, CategoryName, Verbosity, Format, ...) #define UE_CVLOG(Condition, LogOwner, CategoryName, Verbosity, Format, ...) #define UE_VLOG_UELOG(LogOwner, CategoryName, Verbosity, Format, ...) #define UE_VLOG_ALWAYS_UELOG(LogOwner, CategoryName, Verbosity, Format, ...)"
  },
  {
    "label": "UE_CVLOG_UELOG()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_CVLOG_UELOG(Condition, LogOwner, CategoryName, Verbosity, Format, ...) #define UE_VLOG_SEGMENT(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, DescriptionFormat, ...) #define UE_CVLOG_SEGMENT(Condition, LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, DescriptionFormat, ...) #define UE_VLOG_SEGMENT_THICK(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Thickness, DescriptionFormat, ...) #define UE_CVLOG_SEGMENT_THICK(Condition, LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Thickness, DescriptionFormat, ...) #define UE_VLOG_LOCATION(LogOwner, CategoryName, Verbosity, Location, Thickness, Color, DescriptionFormat, ...) #define UE_CVLOG_LOCATION(Condition, LogOwner, CategoryName, Verbosity, Location, Thickness, Color, DescriptionFormat, ...) #define UE_VLOG_SPHERE(LogOwner, CategoryName, Verbosity, Location, Radius, Color, DescriptionFormat, ...) #define UE_CVLOG_SPHERE(Condition, LogOwner, CategoryName, Verbosity, Location, Radius, Color, DescriptionFormat, ...) #define UE_VLOG_WIRESPHERE(LogOwner, CategoryName, Verbosity, Location, Radius, Color, DescriptionFormat, ...) #define UE_CVLOG_WIRESPHERE(Condition, LogOwner, CategoryName, Verbosity, Location, Radius, Color, DescriptionFormat, ...) #define UE_VLOG_BOX(LogOwner, CategoryName, Verbosity, Box, Color, DescriptionFormat, ...) #define UE_CVLOG_BOX(Condition, LogOwner, CategoryName, Verbosity, Box, Color, DescriptionFormat, ...) #define UE_VLOG_WIREBOX(LogOwner, CategoryName, Verbosity, Box, Color, DescriptionFormat, ...) #define UE_CVLOG_WIREBOX(Condition, LogOwner, CategoryName, Verbosity, Box, Color, DescriptionFormat, ...) #define UE_VLOG_OBOX(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) #define UE_CVLOG_OBOX(Condition, LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) #define UE_VLOG_WIREOBOX(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) #define UE_CVLOG_WIREOBOX(Condition, LogOwner, CategoryName, Verbosity, Box, Matrix, Color, Format, ...) #define UE_VLOG_CONE(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, DescriptionFormat, ...) #define UE_CVLOG_CONE(Condition, LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, DescriptionFormat, ...) #define UE_VLOG_WIRECONE(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, DescriptionFormat, ...) #define UE_CVLOG_WIRECONE(Condition, LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, DescriptionFormat, ...) #define UE_VLOG_CYLINDER(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, DescriptionFormat, ...) #define UE_CVLOG_CYLINDER(Condition, LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, DescriptionFormat, ...) #define UE_VLOG_WIRECYLINDER(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, DescriptionFormat, ...) #define UE_CVLOG_WIRECYLINDER(Condition, LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, DescriptionFormat, ...) #define UE_VLOG_CAPSULE(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, DescriptionFormat, ...) #define UE_CVLOG_CAPSULE(Condition, LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, DescriptionFormat, ...) #define UE_VLOG_WIRECAPSULE(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, DescriptionFormat, ...) #define UE_CVLOG_WIRECAPSULE(Condition, LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, DescriptionFormat, ...) #define UE_VLOG_HISTOGRAM(LogOwner, CategoryName, Verbosity, GraphName, DataName, Data) #define UE_CVLOG_HISTOGRAM(Condition, LogOwner, CategoryName, Verbosity, GraphName, DataName, Data) #define UE_VLOG_PULLEDCONVEX(LogOwner, CategoryName, Verbosity, ConvexPoints, MinZ, MaxZ, Color, Format, ...) #define UE_CVLOG_PULLEDCONVEX(Condition, LogOwner, CategoryName, Verbosity, ConvexPoints, MinZ, MaxZ, Color, Format, ...) #define UE_VLOG_MESH(LogOwner, CategoryName, Verbosity, Vertices, Indexes, Color, Format, ...) #define UE_CVLOG_MESH(Condition, LogOwner, CategoryName, Verbosity, Vertices, Indexes, Color, Format, ...) #define UE_VLOG_CONVEXPOLY(LogOwner, CategoryName, Verbosity, Points, Color, Format, ...) #define UE_CVLOG_CONVEXPOLY(Condition, LogOwner, CategoryName, Verbosity, Points, Color, Format, ...) #define UE_VLOG_ARROW(LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ...) #define UE_CVLOG_ARROW(Condition, LogOwner, CategoryName, Verbosity, SegmentStart, SegmentEnd, Color, Format, ...) #define UE_VLOG_CIRCLE(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Format, ...) #define UE_CVLOG_CIRCLE(Condition, LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Format, ...) #define UE_VLOG_CIRCLE_THICK(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Thickness, Format, ...) #define UE_CVLOG_CIRCLE_THICK(Condition, LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Thickness, Format, ...) #define DECLARE_VLOG_EVENT(EventName) #define DEFINE_VLOG_EVENT(EventName, Verbosity, UserFriendlyDesc) #define UE_VLOG_EVENTS(LogOwner, TagNameToLog, ...) #define UE_CVLOG_EVENTS(Condition, LogOwner, TagNameToLog, ...) #define UE_VLOG_EVENT_WITH_DATA(LogOwner, LogEvent, ...) #define UE_CVLOG_EVENT_WITH_DATA(Condition, LogOwner, LogEvent, ...) #define UE_IFVLOG(__code_block__) #endif #define UE_CVLOG_ALWAYS_UELOG(Condition, LogOwner, CategoryName, Verbosity, Format, ...) if (Condition)"
  },
  {
    "label": "UE_VLOG_ALWAYS_UELOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_ALWAYS_UELOG(LogOwner, CategoryName, Verbosity, Format, ##__VA_ARGS__)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} # define TEXT_EMPTY)",
    "insertText": "TEXT(\"\") #define TEXT_NULL TEXT(\"NULL\") #define TEXT_TRUE TEXT(\"TRUE\") #define TEXT_FALSE TEXT(\"FALSE\") #define TEXT_CONDITION(Condition) ((Condition) ? TEXT_TRUE : TEXT_FALSE)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVisual, Display, All)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG class FVisualLogDevice ; class FVisualLogExtensionInterface ; class UObject ; class UWorld ; struct FLogCategoryBase ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(FString, FVisualLogFilenameGetterDelegate)"
  },
  {
    "label": "CategorizedLogfImpl()",
    "kind": "Method",
    "detail": "Function (class FVisualLogger : public FOutputDevice { void)",
    "insertText": "CategorizedLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TCHAR* Fmt, ...)"
  },
  {
    "label": "SegmentLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const uint16 Thickness, const TCHAR* Fmt, ...)"
  },
  {
    "label": "LocationLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocationLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, uint16 Thickness, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "SphereLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SphereLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, float Radius, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "BoxLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoxLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FBox& Box, const FMatrix& Matrix, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "ConeLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConeLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Origin, const FVector& Direction, const float Length, const float Angle, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CylinderLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CylinderLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const float Radius, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CapsuleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Base, float HalfHeight, float Radius, const FQuat& Rotation, const FColor& Color, bool bWireframe, const TCHAR* Fmt, ...)"
  },
  {
    "label": "PulledConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PulledConvexLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& ConvexPoints, float MinZ, float MaxZ, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "MeshLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& Vertices, const TArray<int32>& Indices, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "ConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvexLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& Points, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "HistogramDataLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramDataLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, FName GraphName, FName DataName, const FVector2D& Data, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "ArrowLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrowLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CircleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CircleLogfImpl(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, const FVector& UpAxis, const float Radius, const FColor& Color, const uint16 Thickness, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CategorizedLogf()",
    "kind": "Method",
    "detail": "Function (public : template<FmtType,. . . Types> void)",
    "insertText": "CategorizedLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CategorizedLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategorizedLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CategorizedLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CategorizedLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CategorizedLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategorizedLogfImpl(LogOwner, CategoryName, Verbosity, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "SegmentLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Start, End, Color, Thickness, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "SegmentLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentLogfImpl(LogOwner, CategoryName, Verbosity, Start, End, Color, Thickness, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "SegmentLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "SegmentLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const uint16 Thickness, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "SegmentLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "SegmentLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const uint16 Thickness, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ArrowLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ArrowLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ArrowLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrowLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Start, End, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ArrowLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ArrowLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ArrowLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrowLogfImpl(LogOwner, CategoryName, Verbosity, Start, End, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CircleLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CircleLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Center, const FVector& UpAxis, const float Radius, const FColor& Color, const uint16 Thickness, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CircleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CircleLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Center, UpAxis, Radius, Color, Thickness, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CircleLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CircleLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Center, const FVector& UpAxis, const float Radius, const FColor& Color, const uint16 Thickness, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CircleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CircleLogfImpl(LogOwner, CategoryName, Verbosity, Center, UpAxis, Radius, Color, Thickness, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "LocationLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocationLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Location, static_cast<uint16>(Radius), Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "LocationLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocationLogfImpl(LogOwner, CategoryName, Verbosity, Location, static_cast<uint16>(Radius), Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "LocationLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "LocationLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Location, const uint16 Thickness, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "LocationLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocationLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Location, Thickness, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "LocationLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "LocationLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Location, const uint16 Thickness, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "LocationLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocationLogfImpl(LogOwner, CategoryName, Verbosity, Location, Thickness, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "SphereLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "SphereLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Location, float Radius, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "SphereLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SphereLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Location, Radius, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "SphereLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "SphereLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Location, float Radius, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "SphereLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SphereLogfImpl(LogOwner, CategoryName, Verbosity, Location, Radius, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "BoxLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoxLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Box, Matrix, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "BoxLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoxLogfImpl(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "BoxLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "BoxLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FBox& Box, const FMatrix& Matrix, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "BoxLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoxLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Box, Matrix, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "BoxLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "BoxLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FBox& Box, const FMatrix& Matrix, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "BoxLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoxLogfImpl(LogOwner, CategoryName, Verbosity, Box, Matrix, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ConeLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConeLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Origin, Direction, Length, Angle, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ConeLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConeLogfImpl(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ConeLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ConeLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Origin, const FVector& Direction, const float Length, const float Angle, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ConeLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConeLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Origin, Direction, Length, Angle, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ConeLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ConeLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Origin, const FVector& Direction, const float Length, const float Angle, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ConeLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConeLogfImpl(LogOwner, CategoryName, Verbosity, Origin, Direction, Length, Angle, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CylinderLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CylinderLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Start, End, Radius, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CylinderLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CylinderLogfImpl(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CylinderLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CylinderLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const float Radius, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CylinderLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CylinderLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Start, End, Radius, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CylinderLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CylinderLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Start, const FVector& End, const float Radius, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CylinderLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CylinderLogfImpl(LogOwner, CategoryName, Verbosity, Start, End, Radius, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CapsuleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Base, HalfHeight, Radius, Rotation, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CapsuleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleLogfImpl(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, false, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CapsuleLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CapsuleLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const FVector& Base, float HalfHeight, float Radius, const FQuat & Rotation, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CapsuleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Base, HalfHeight, Radius, Rotation, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CapsuleLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CapsuleLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const FVector& Base, float HalfHeight, float Radius, const FQuat & Rotation, const FColor& Color, bool bWireframe, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CapsuleLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapsuleLogfImpl(LogOwner, CategoryName, Verbosity, Base, HalfHeight, Radius, Rotation, Color, bWireframe, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PulledConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PulledConvexLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, ConvexPoints, MinZ, MaxZ, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PulledConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PulledConvexLogfImpl(LogOwner, CategoryName, Verbosity, ConvexPoints, MinZ, MaxZ, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PulledConvexLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "PulledConvexLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const TArray<FVector>& ConvexPoints, float MinZ, float MaxZ, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PulledConvexLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "PulledConvexLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& ConvexPoints, float MinZ, float MaxZ, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "MeshLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Vertices, Indices, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "MeshLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshLogfImpl(LogOwner, CategoryName, Verbosity, Vertices, Indices, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "MeshLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "MeshLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const TArray<FVector>& Vertices, const TArray<int32>& Indices, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "MeshLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "MeshLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& Vertices, const TArray<int32>& Indices, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvexLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, Points, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ConvexLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvexLogfImpl(LogOwner, CategoryName, Verbosity, Points, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "ConvexLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ConvexLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, const TArray<FVector>& Points, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "ConvexLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "ConvexLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, const TArray<FVector>& Points, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "HistogramDataLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "HistogramDataLogf(const UObject* LogOwner, const FLogCategoryBase& Category, ELogVerbosity::Type Verbosity, FName GraphName, FName DataName, const FVector2D& Data, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "HistogramDataLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramDataLogfImpl(LogOwner, Category.GetCategoryName(), Verbosity, GraphName, DataName, Data, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "HistogramDataLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "HistogramDataLogf(const UObject* LogOwner, const FName& CategoryName, ELogVerbosity::Type Verbosity, FName GraphName, FName DataName, const FVector2D& Data, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "HistogramDataLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramDataLogfImpl(LogOwner, CategoryName, Verbosity, GraphName, DataName, Data, Color, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "NavigationDataDump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NavigationDataDump(const UObject* LogOwner, const FLogCategoryBase& Category, const ELogVerbosity::Type Verbosity, const FBox& Box)"
  },
  {
    "label": "NavigationDataDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigationDataDump(const UObject* LogOwner, const FName& CategoryName, const ELogVerbosity::Type Verbosity, const FBox& Box)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_SixParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_SixParams(FNavigationDataDump, const UObject* , const FName& , const ELogVerbosity::Type , const FBox& , const UWorld& , FVisualLogEntry&)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (FNavigationDataDump NavigationDataDumpDelegate ; void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FName EventTag2 = NAME_None, const FName EventTag3 = NAME_None, const FName EventTag4 = NAME_None, const FName EventTag5 = NAME_None, const FName EventTag6 = NAME_None)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3, const FVisualLogEventBase& Event4)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3, const FVisualLogEventBase& Event4, const FVisualLogEventBase& Event5)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FName EventTag1, const FVisualLogEventBase& Event1, const FVisualLogEventBase& Event2, const FVisualLogEventBase& Event3, const FVisualLogEventBase& Event4, const FVisualLogEventBase& Event5, const FVisualLogEventBase& Event6)"
  },
  {
    "label": "EventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLog(const UObject* LogOwner, const FVisualLogEventBase& Event1, const FName EventTag1 = NAME_None, const FName EventTag2 = NAME_None, const FName EventTag3 = NAME_None, const FName EventTag4 = NAME_None, const FName EventTag5 = NAME_None, const FName EventTag6 = NAME_None)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FVisualLogger&)",
    "insertText": "Get()"
  },
  {
    "label": "FVisualLogger()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVisualLogger()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TearDown()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(UWorld* OldWorld, bool bReleaseMemory = false)"
  },
  {
    "label": "OnDataReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataReset()"
  },
  {
    "label": "Redirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redirect(const UObject* FromObject, const UObject* ToObject)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UObject* NewRedirection = nullptr ; { FTransactionallySafeWriteScopeLock)",
    "insertText": "Lock(Logger.RedirectRWLock)"
  },
  {
    "label": "RedirectInternal()",
    "kind": "Method",
    "detail": "Function (NewRedirection = Logger .)",
    "insertText": "RedirectInternal(FromObject, ToObject)"
  },
  {
    "label": "UE_CVLOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_CVLOG(FromObject != nullptr && NewRedirection != nullptr, FromObject, LogVisual, Log, TEXT(\"Redirected '%s' to '%s'\"), *FromObject->GetName(), *NewRedirection->GetName())"
  },
  {
    "label": "FindRedirection()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "FindRedirection(const UObject* Object)"
  },
  {
    "label": "BlockAllCategories()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlockAllCategories(const bool bInBlock)"
  },
  {
    "label": "IsBlockedForAllCategories()",
    "kind": "Method",
    "detail": "Function (bBlockedAllCategories = bInBlock ; } bool)",
    "insertText": "IsBlockedForAllCategories()"
  },
  {
    "label": "AddCategoryToAllowList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCategoryToAllowList(FName Category)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (CategoryAllowList .)",
    "insertText": "AddUnique(Category)"
  },
  {
    "label": "ClearCategoryAllowList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCategoryAllowList()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CategoryAllowList .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetUniqueId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetUniqueId(double Timestamp)"
  },
  {
    "label": "SetIsRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecording(const bool bInIsRecording)"
  },
  {
    "label": "IsRecordingToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordingToFile()"
  },
  {
    "label": "SetIsRecordingToTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecordingToTrace(const bool bInIsRecording)"
  },
  {
    "label": "SetIsRecordingOnServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsRecordingOnServer(const bool bInIsRecording)"
  },
  {
    "label": "IsRecordingOnServer()",
    "kind": "Method",
    "detail": "Function (bIsRecordingOnServer = bInIsRecording ; } bool)",
    "insertText": "IsRecordingOnServer()"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDevice(FVisualLogDevice* InDevice)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutputDevices .)",
    "insertText": "AddUnique(InDevice)"
  },
  {
    "label": "RemoveDevice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDevice(FVisualLogDevice* InDevice)"
  },
  {
    "label": "RemoveSwap()",
    "kind": "Method",
    "detail": "Function (OutputDevices .)",
    "insertText": "RemoveSwap(InDevice)"
  },
  {
    "label": "GetDevices()",
    "kind": "Method",
    "detail": "Function (} const TArray<FVisualLogDevice*>&)",
    "insertText": "GetDevices()"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.4, \"Use the static GetEntryToWrite instead because this TimeStamp is inconsistent across multiple instances (or threads in Editor). This function will be made private/protected.\") ENGINE_API FVisualLogEntry* GetEntryToWrite(const UObject* Object, double TimeStamp, ECreateIfNeeded ShouldCreate = ECreateIfNeeded::Create)"
  },
  {
    "label": "GetEntryToWrite()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FVisualLogEntry*)",
    "insertText": "GetEntryToWrite(const UObject* LogOwner, const FLogCategoryBase& LogCategory)"
  },
  {
    "label": "GetLastEntryForObject()",
    "kind": "Method",
    "detail": "Function (FVisualLogEntry*)",
    "insertText": "GetLastEntryForObject(const UObject* Object)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "FlushThreadsEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushThreadsEntries()"
  },
  {
    "label": "SetLogFileNameGetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLogFileNameGetter(const FVisualLogFilenameGetterDelegate& InLogFileNameGetter)"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (LogFileNameGetter = InLogFileNameGetter ; } void)",
    "insertText": "RegisterExtension(FName TagName, FVisualLogExtensionInterface* ExtensionInterface)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllExtensions .)",
    "insertText": "Add(TagName, ExtensionInterface)"
  },
  {
    "label": "UnregisterExtension()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterExtension(FName TagName, FVisualLogExtensionInterface* ExtensionInterface)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (AllExtensions .)",
    "insertText": "Remove(TagName)"
  },
  {
    "label": "GetExtensionForTag()",
    "kind": "Method",
    "detail": "Function (} FVisualLogExtensionInterface*)",
    "insertText": "GetExtensionForTag(const FName TagName)"
  },
  {
    "label": "GetAllExtensions()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,FVisualLogExtensionInterface*>&)",
    "insertText": "GetAllExtensions()"
  },
  {
    "label": "GetTimeStampForObject()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTimeStampForObject(const UObject* Object)"
  },
  {
    "label": "SetGetTimeStampFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGetTimeStampFunc(TFunction<double(const UObject*)> Function)"
  },
  {
    "label": "GetRedirectionMap()",
    "kind": "Method",
    "detail": "Function (typedef TMap<FObjectKey,TArray<TWeakObjectPtr<const UObject>>> FOwnerToChildrenRedirectionMap ; FOwnerToChildrenRedirectionMap&)",
    "insertText": "GetRedirectionMap(const UObject* InObject)"
  },
  {
    "label": "GetChildToOwnerRedirectionMap()",
    "kind": "Method",
    "detail": "Function (typedef TMap<FObjectKey,TWeakObjectPtr<const UObject>> FChildToOwnerRedirectionMap ; FChildToOwnerRedirectionMap&)",
    "insertText": "GetChildToOwnerRedirectionMap()"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassAllowed(const UClass& InClass)"
  },
  {
    "label": "AddObjectToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectToAllowList(const UObject& InObject)"
  },
  {
    "label": "ClearObjectAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectAllowList()"
  },
  {
    "label": "IsObjectAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectAllowed(const UObject* InObject)"
  },
  {
    "label": "AddCategoryToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCategoryToAllowList(Category)"
  },
  {
    "label": "AddClassToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClassToAllowList(InClass)"
  },
  {
    "label": "AddObjectToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjectToAllowList(InObject)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "GetThreadCurrentEntryMap()",
    "kind": "Method",
    "detail": "Function (} FVisualLoggerObjectEntryMap&)",
    "insertText": "GetThreadCurrentEntryMap()"
  },
  {
    "label": "GetEntryToWriteInternal()",
    "kind": "Method",
    "detail": "Function (FVisualLogEntry*)",
    "insertText": "GetEntryToWriteInternal(const UObject* Object, double TimeStamp, ECreateIfNeeded ShouldCreate)"
  },
  {
    "label": "RedirectInternal()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "RedirectInternal(const UObject* FromObject, const UObject* ToObject)"
  },
  {
    "label": "FindRedirectionInternal()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindRedirectionInternal(const UObject* Object)"
  },
  {
    "label": "CleanupRedirects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupRedirects()"
  },
  {
    "label": "CalculateEntryAllowLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateEntryAllowLogging(FVisualLogEntry* CurrentEntry, const UObject* LogOwner, const UObject* Object)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "FlushEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushEntry(FVisualLogEntry& Entry, const FObjectKey& ObjectKey)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (FTSTicker::FDelegateHandle TickerHandle ; TArray<FVisualLogDevice*> OutputDevices ; TMap<const UWorld*,FOwnerToChildrenRedirectionMap> WorldToRedirectionMap ; TArray<UClass*> ClassAllowList ; TSet<FObjectKey> ObjectAllowList ; TArray<FName> CategoryAllowList ; TMap<FName,FVisualLogExtensionInterface*> AllExtensions ; TMap<double,int32> LastUniqueIds ; FVisualLoggerObjectEntryMap CurrentEntryPerObject ; TArray<FVisualLoggerObjectEntryMap*> ThreadCurrentEntryMaps ; FRWLock EntryRWLock ; TMap<FObjectKey,FName> ObjectToNameMap ; TMap<FObjectKey,FName> ObjectToClassNameMap ; FObjectToWorldMapType ObjectToWorldMap ; FChildToOwnerRedirectionMap ChildToOwnerMap ; FTransactionallySafeRWLock RedirectRWLock ; bool bBlockedAllCategories : 1 ; bool bIsRecordingToFile : 1 ; bool bIsRecordingToTrace : 1 ; bool bIsRecordingOnServer : 1 ; bool bForceUniqueLogNames : 1 ; bool bIsFlushRequired : 1 ; bool bContainsInvalidRedirects : 1 ; double StartRecordingToFileTime ; FVisualLogFilenameGetterDelegate LogFileNameGetter ; TFunction<)",
    "insertText": "double(const UObject*)"
  }
]