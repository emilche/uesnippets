[
  {
    "label": "IElementLocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IElementLocator"
  },
  {
    "label": "TAsyncResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAsyncResult"
  },
  {
    "label": "IAsyncActionSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncActionSequence"
  },
  {
    "label": "IAsyncDriverSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncDriverSequence"
  },
  {
    "label": "IActionSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IActionSequence"
  },
  {
    "label": "IDriverSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDriverSequence"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" WaitUntil . h \" # include \" Misc / Timespan . h \" # include \" InputCoreTypes . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" class IElementLocator ; template<ResultType> class TAsyncResult ; class IAsyncActionSequence { public : IAsyncActionSequence&)",
    "insertText": "Wait(FTimespan Timespan)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Wait(const FDriverWaitDelegate& Delegate)"
  },
  {
    "label": "MoveToElement()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "MoveToElement(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, int32 XOffset, int32 YOffset)"
  },
  {
    "label": "MoveToElement()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "MoveToElement(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "MoveByOffset()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "MoveByOffset(int32 XOffset, int32 YOffset)"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollBy(float Delta)"
  },
  {
    "label": "ScrollBy()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollBy(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, float Delta)"
  },
  {
    "label": "ScrollToBeginning()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToBeginning(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "ScrollToBeginning()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToBeginning(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, float Amount)"
  },
  {
    "label": "ScrollToBeginningUntil()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToBeginningUntil(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "ScrollToBeginningUntil()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToBeginningUntil(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ScrollableElementLocator, const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "ScrollToEnd()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "ScrollToEnd()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, float Delta)"
  },
  {
    "label": "ScrollToEndUntil()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToEndUntil(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "ScrollToEndUntil()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ScrollToEndUntil(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ScrollableElementLocator, const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "Click()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Click(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "Click()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Click(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, EMouseButtons::Type MouseButton)"
  },
  {
    "label": "Click()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Click(EMouseButtons::Type MouseButton)"
  },
  {
    "label": "Click()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Click()"
  },
  {
    "label": "DoubleClick()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "DoubleClick(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "DoubleClick()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "DoubleClick(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, EMouseButtons::Type MouseButton)"
  },
  {
    "label": "DoubleClick()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "DoubleClick(EMouseButtons::Type MouseButton)"
  },
  {
    "label": "DoubleClick()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "DoubleClick()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TCHAR* Text)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(FString Text)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(FKey Key)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(TCHAR Character)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TArray<FKey>& Keys)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, const TCHAR* Text)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FString Text)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, TCHAR Character)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Type(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, const TArray<FKey>& Keys)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(FKey Key1, FKey Key2)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(FKey Key1, TCHAR Character)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(FKey Key1, FKey Key2, FKey Key3)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(FKey Key1, FKey Key2, TCHAR Character)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, TCHAR Character)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2, FKey Key3)"
  },
  {
    "label": "TypeChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "TypeChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2, TCHAR Character)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Press(TCHAR Character)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Press(FKey Key)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Press(EMouseButtons::Type MouseButton)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Press(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, TCHAR Character)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Press(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key)"
  },
  {
    "label": "Press()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Press(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, EMouseButtons::Type MouseButton)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(FKey Key1, FKey Key2)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(FKey Key1, TCHAR Character)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(FKey Key1, FKey Key2, FKey Key3)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(FKey Key1, FKey Key2, TCHAR Character)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, TCHAR Character)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2, FKey Key3)"
  },
  {
    "label": "PressChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "PressChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2, TCHAR Character)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Release(TCHAR Character)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Release(FKey Key)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Release(EMouseButtons::Type MouseButton)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Release(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, TCHAR Character)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Release(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Release(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, EMouseButtons::Type MouseButton)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(FKey Key1, FKey Key2)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(FKey Key1, TCHAR Character)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(FKey Key1, FKey Key2, FKey Key3)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(FKey Key1, FKey Key2, TCHAR Character)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, TCHAR Character)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2, FKey Key3)"
  },
  {
    "label": "ReleaseChord()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "ReleaseChord(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key1, FKey Key2, TCHAR Character)"
  },
  {
    "label": "Focus()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Focus(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator)"
  },
  {
    "label": "Focus()",
    "kind": "Method",
    "detail": "Function (IAsyncActionSequence&)",
    "insertText": "Focus(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, uint32 UserFocus)"
  },
  {
    "label": "Actions()",
    "kind": "Method",
    "detail": "Function (} ; class IAsyncDriverSequence { public : IAsyncActionSequence&)",
    "insertText": "Actions()"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (TAsyncResult<bool>)",
    "insertText": "Perform()"
  },
  {
    "label": "ScrollToEnd()",
    "kind": "Method",
    "detail": "Function (IActionSequence&)",
    "insertText": "ScrollToEnd(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, float Amount)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (IActionSequence&)",
    "insertText": "Type(const TSharedRef<IElementLocator, ESPMode::ThreadSafe>& ElementLocator, FKey Key)"
  }
]