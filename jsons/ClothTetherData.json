[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FClothTetherData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothTetherData"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / Tuple . h \" # include \" UObject / Class . h \" # include \" UObject / ObjectMacros . h \" # include \" ClothTetherData . generated . h \" class FArchive ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GenerateTethers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTethers(const TConstArrayView<FVector3f>& Points, const TConstArrayView<uint32>& Indices, const TConstArrayView<float>& MaxDistances, bool bUseGeodesicDistance)"
  },
  {
    "label": "GenerateTethers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTethers(const TConstArrayView<FVector3f>& Points, const TConstArrayView<uint32>& Indices, const TSet<int32>& KinematicNodes, bool bUseGeodesicDistance)"
  },
  {
    "label": "GenerateTethers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTethers(TArray<TArray<TPair<float, int32>>>&& PerDynamicNodeTethers)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]