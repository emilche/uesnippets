[
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "ARecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARecastNavMesh"
  },
  {
    "label": "FNavigationOctree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationOctree"
  },
  {
    "label": "FNavMeshBuildContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavMeshBuildContext"
  },
  {
    "label": "FRecastNavMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRecastNavMeshGenerator"
  },
  {
    "label": "FTileRasterizationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileRasterizationContext"
  },
  {
    "label": "BuildContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildContext"
  },
  {
    "label": "dtTileCacheLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheLayer"
  },
  {
    "label": "FKAggregateGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKAggregateGeom"
  },
  {
    "label": "FTileCacheCompressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileCacheCompressor"
  },
  {
    "label": "FTileCacheAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileCacheAllocator"
  },
  {
    "label": "FTileGenerationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileGenerationContext"
  },
  {
    "label": "dtLinkBuilderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtLinkBuilderData"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "dtNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtNavMesh"
  },
  {
    "label": "FNavRegenTimeSliceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavRegenTimeSliceManager"
  },
  {
    "label": "UNavigationSystemV1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemV1"
  },
  {
    "label": "FRecastBuildConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastBuildConfig"
  },
  {
    "label": "FRecastVoxelCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastVoxelCache"
  },
  {
    "label": "FTileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileInfo"
  },
  {
    "label": "FRecastGeometryCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastGeometryCache"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FWalkableSlopeOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWalkableSlopeOverride"
  },
  {
    "label": "FRecastRawGeometryElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastRawGeometryElement"
  },
  {
    "label": "FRecastAreaNavModifierElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastAreaNavModifierElement"
  },
  {
    "label": "FRcTileBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRcTileBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRecastTileTimeSliceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastTileTimeSliceSettings"
  },
  {
    "label": "FGeneratedNavigationLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeneratedNavigationLink"
  },
  {
    "label": "FRecastTileGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRecastTileGenerator"
  },
  {
    "label": "dtTileCacheAlloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheAlloc"
  },
  {
    "label": "dtTileCacheContourSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheContourSet"
  },
  {
    "label": "rcHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfield"
  },
  {
    "label": "FRecastTileGeneratorWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastTileGeneratorWrapper"
  },
  {
    "label": "FPendingTileElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingTileElement"
  },
  {
    "label": "TRunningTileElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRunningTileElement"
  },
  {
    "label": "FTileTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileTimestamp"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FNavigationDirtyAreaPerTileDebugInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyAreaPerTileDebugInformation"
  },
  {
    "label": "FSyncTimeSlicedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyncTimeSlicedData"
  },
  {
    "label": "FRecastBuildConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_5 # include \" Stats / Stats . h \" # endif # include \" AI / NavDataGenerator . h \" # include \" AI / Navigation / NavigationDirtyArea . h \" # include \" AI / Navigation / NavigationInvokerPriority . h \" # include \" AI / Navigation / NavigationRelevantData . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / NavigationModifier . h \" # include \" AI / NavigationSystemBase . h \" # include \" Async / AsyncWork . h \" # include \" EngineDefines . h \" # include \" NavDebugTypes . h \" # include \" NavigationOctree . h \" # include \" NavMesh / RecastHelpers . h \" # include \" NavMesh / RecastNavMesh . h \" # include \" UObject / GCObject . h \" # if WITH_RECAST # include \" Recast / Recast . h \" # include \" Detour / DetourNavMesh . h \" # include \" Detour / DetourNavLinkBuilderConfig . h \" # if RECAST_INTERNAL_DEBUG_DATA # include \" NavMesh / RecastInternalDebugData . h \" # endif class UBodySetup ; class ARecastNavMesh ; class FNavigationOctree ; class FNavMeshBuildContext ; class FRecastNavMeshGenerator ; struct FTileRasterizationContext ; struct BuildContext ; struct dtTileCacheLayer ; struct FKAggregateGeom ; struct FTileCacheCompressor ; struct FTileCacheAllocator ; struct FTileGenerationContext ; struct dtLinkBuilderData ; struct FNavigationElement ; class dtNavMesh ; class FNavRegenTimeSliceManager ; class UNavigationSystemV1 ; # define MAX_VERTS_PER_POLY 6 PRAGMA_DISABLE_DEPRECATION_WARNINGS struct FRecastBuildConfig : public rcConfig { uint32 bPerformVoxelFiltering : 1 ; uint32 bGenerateDetailedMesh : 1 ; uint32 bGenerateBVTree : 1 ; uint32 bMarkLowHeightAreas : 1 ; uint32 bUseExtraTopCellWhenMarkingAreas : 1 ; uint32 bFilterLowSpanSequences : 1 ; uint32 bFilterLowSpanFromTileCache : 1 ; uint32 bGenerateLinks : 1 ; int32 TileCachePartitionType ; int32 TileCacheChunkSize ; int32 MaxPolysPerTile ; dtNavLinkBuilderJumpDownConfig JumpDownConfig ; dtNavLinkBuilderJumpOverConfig JumpOverConfig ; float AgentHeight ; float AgentMaxClimb ; float AgentRadius ; int32 AgentIndex ; ENavigationDataResolution TileResolution ; ENavigationLedgeSlopeFilterMode LedgeSlopeFilterMode ; bool bIsTileSetupConfigCompleted ; float LinkSpillDistance ;)",
    "insertText": "FRecastBuildConfig()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "dtNavLinkBuilderJumpDownConfig()",
    "kind": "Method",
    "detail": "Function (bPerformVoxelFiltering = true ; bGenerateDetailedMesh = true ; bGenerateBVTree = true ; bMarkLowHeightAreas = false ; bUseExtraTopCellWhenMarkingAreas = true ; bFilterLowSpanSequences = false ; bFilterLowSpanFromTileCache = false ; bGenerateLinks = false ; MaxPolysPerTile = - 1 ; JumpDownConfig =)",
    "insertText": "dtNavLinkBuilderJumpDownConfig()"
  },
  {
    "label": "dtNavLinkBuilderJumpOverConfig()",
    "kind": "Method",
    "detail": "Function (JumpOverConfig =)",
    "insertText": "dtNavLinkBuilderJumpOverConfig()"
  },
  {
    "label": "GetTileSizeUU()",
    "kind": "Method",
    "detail": "Function (AgentIndex = 0 ; TileResolution = ENavigationDataResolution::Default ; LedgeSlopeFilterMode = ENavigationLedgeSlopeFilterMode::Recast ; bIsTileSetupConfigCompleted = false ; LinkSpillDistance = 0 . f ; } rcReal)",
    "insertText": "GetTileSizeUU()"
  },
  {
    "label": "FRecastVoxelCache()",
    "kind": "Method",
    "detail": "Function (} ; PRAGMA_ENABLE_DEPRECATION_WARNINGS struct FRecastVoxelCache { struct FTileInfo { int32 TileX ; int32 TileY ; int32 NumSpans ; FTileInfo* NextTile ; rcSpanCache* SpanData ; } ; int32 NumTiles ; FTileInfo* Tiles ;)",
    "insertText": "FRecastVoxelCache()"
  },
  {
    "label": "FRecastVoxelCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRecastVoxelCache(const uint8* Memory)"
  },
  {
    "label": "FRecastGeometryCache()",
    "kind": "Method",
    "detail": "Function (} ; struct FRecastGeometryCache { struct FHeader { FNavigationRelevantData::FCollisionDataHeader Validation ; int32 NumVerts ; int32 NumFaces ; struct FWalkableSlopeOverride SlopeOverride ; uint32 StaticMagicNumber ; } ; FHeader Header ; FVector::FReal* Verts ; int32* Indices ;)",
    "insertText": "FRecastGeometryCache()"
  },
  {
    "label": "FRecastGeometryCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRecastGeometryCache(const uint8* Memory)"
  },
  {
    "label": "FRcTileBox()",
    "kind": "Method",
    "detail": "Function (} ; struct FRecastRawGeometryElement { TArray<FVector::FReal> GeomCoords ; TArray<int32> GeomIndices ; TArray<FTransform> PerInstanceTransform ; rcRasterizationFlags RasterizationFlags ; } ; struct FRecastAreaNavModifierElement { TArray<FAreaNavModifier> Areas ; TArray<FTransform> PerInstanceTransform ; ENavigationDataResolution NavMeshResolution = ENavigationDataResolution::Invalid ; bool bMaskFillCollisionUnderneathForNavmesh = false ; } ; struct FRcTileBox { int32 XMin,XMax,YMin,YMax ;)",
    "insertText": "FRcTileBox(const FBox& UnrealBounds, const FVector& RcNavMeshOrigin, const FVector::FReal TileSizeInWorldUnits)"
  },
  {
    "label": "CalcMaxCoordExclusive()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalcMaxCoordExclusive(const FVector::FReal MaxAsFloat, const int32 MinCoord)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector::FReal UnusedIntPart ;)",
    "insertText": "if(FMath::Modf(MaxAsFloat, &UnusedIntPart) == 0)"
  },
  {
    "label": "ClampToInt32()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ClampToInt32(FMath::FloorToInt(MaxAsFloat))"
  },
  {
    "label": "Unreal2RecastBox()",
    "kind": "Method",
    "detail": "Function (} ; const FBox RcAreaBounds =)",
    "insertText": "Unreal2RecastBox(UnrealBounds)"
  },
  {
    "label": "ClampToInt32()",
    "kind": "Method",
    "detail": "Function (XMin =)",
    "insertText": "ClampToInt32(FMath::FloorToInt((RcAreaBounds.Min.X - RcNavMeshOrigin.X) / TileSizeInWorldUnits))"
  },
  {
    "label": "CalcMaxCoordExclusive()",
    "kind": "Method",
    "detail": "Function (XMax =)",
    "insertText": "CalcMaxCoordExclusive((RcAreaBounds.Max.X - RcNavMeshOrigin.X) / TileSizeInWorldUnits, XMin)"
  },
  {
    "label": "ClampToInt32()",
    "kind": "Method",
    "detail": "Function (YMin =)",
    "insertText": "ClampToInt32(FMath::FloorToInt((RcAreaBounds.Min.Z - RcNavMeshOrigin.Z) / TileSizeInWorldUnits))"
  },
  {
    "label": "CalcMaxCoordExclusive()",
    "kind": "Method",
    "detail": "Function (YMax =)",
    "insertText": "CalcMaxCoordExclusive((RcAreaBounds.Max.Z - RcNavMeshOrigin.Z) / TileSizeInWorldUnits, YMin)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const FIntPoint& Point)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (# if ! NO_LOGGING)",
    "insertText": "UE_CLOG(!IntFitsIn<int32>(Value), LogNavigation, Warning, TEXT(\"FRcTileBox clamped a NavMesh transform value to fit in int32. Old value: %\" UINT64_FMT), Value)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (# endif return static_cast<)",
    "insertText": "int32(FMath::Clamp(Value, MIN_int32, MAX_int32))"
  },
  {
    "label": "FRecastTileGenerator()",
    "kind": "Method",
    "detail": "Function (enum class EGenerateRecastFilterTimeSlicedState : uint8 { FilterLowHangingWalkableObstacles,FilterLedgeSpans,FilterWalkableLowHeightSpans,} ; enum class EDoWorkTimeSlicedState : uint8 { Invalid,GatherGeometryFromSources,GenerateTile,} ; enum class EGenerateTileTimeSlicedState : uint8 { Invalid,GenerateCompressedLayers,GenerateNavigationData,} ; enum class EGenerateNavDataTimeSlicedState : uint8 { Invalid,Init,GenerateLayers,} ; struct FRecastTileTimeSliceSettings { int32 FilterLedgeSpansMaxYProcess = 1 3 ; } ; struct FGeneratedNavigationLink : public FNavigationLink { unsigned short generatedLinkPolyFlag = 0 ; unsigned char generatedLinkArea = 0 ; } ; class FRecastTileGenerator : public FNoncopyable,public FGCObject { FRecastNavMeshGenerator ; public :)",
    "insertText": "FRecastTileGenerator(FRecastNavMeshGenerator& ParentGenerator, const FIntPoint& Location, const double PendingTileCreationTime)"
  },
  {
    "label": "FRecastTileGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRecastTileGenerator()"
  },
  {
    "label": "DoWorkTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "DoWorkTimeSliced()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetCompressedLayers()",
    "kind": "Method",
    "detail": "Function (const TArray<FNavMeshTileData>&)",
    "insertText": "GetCompressedLayers()"
  },
  {
    "label": "GetNavigationData()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FNavMeshTileData>&)",
    "insertText": "GetNavigationData()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (uint32 UsedMemoryOnStartup ; void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetDebugData()",
    "kind": "Method",
    "detail": "Function (# if RECAST_INTERNAL_DEBUG_DATA const FRecastInternalDebugData&)",
    "insertText": "GetDebugData()"
  },
  {
    "label": "GenerateTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTile()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(const FRecastNavMeshGenerator& ParentGenerator, const TArray<FBox>& DirtyAreas)"
  },
  {
    "label": "SetupTileConfigFromHighestResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTileConfigFromHighestResolution(const FRecastNavMeshGenerator& ParentGenerator)"
  },
  {
    "label": "GatherGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherGeometry(const FRecastNavMeshGenerator& ParentGenerator, bool bGeometryChanged)"
  },
  {
    "label": "PrepareGeometrySources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareGeometrySources(const FRecastNavMeshGenerator& ParentGenerator, bool bGeometryChanged)"
  },
  {
    "label": "GatherGeometryFromSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherGeometryFromSources()"
  },
  {
    "label": "GatherGeometryFromSourcesTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "GatherGeometryFromSourcesTimeSliced()"
  },
  {
    "label": "GatherNavigationDataGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherNavigationDataGeometry(const TSharedRef<FNavigationRelevantData, ESPMode::ThreadSafe>& ElementData, UNavigationSystemV1& NavSys, const FNavDataConfig& OwnerNavDataConfig, bool bGeometryChanged)"
  },
  {
    "label": "CreateHeightField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateHeightField(FNavMeshBuildContext& BuildContext)"
  },
  {
    "label": "RasterizeTrianglesTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "RasterizeTrianglesTimeSliced(FNavMeshBuildContext& BuildContext, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "RasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeTriangles(FNavMeshBuildContext& BuildContext, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "RasterizeGeometryRecastTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "RasterizeGeometryRecastTimeSliced(FNavMeshBuildContext& BuildContext, const TArray<FVector::FReal>& Coords, const TArray<int32>& Indices, const rcRasterizationFlags RasterizationFlags, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "RasterizeGeometryRecast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeGeometryRecast(FNavMeshBuildContext& BuildContext, const TArray<FVector::FReal>& Coords, const TArray<int32>& Indices, const rcRasterizationFlags RasterizationFlags, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "RasterizeGeometryTransformCoordsAndFlipIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeGeometryTransformCoordsAndFlipIndices(const TArray<FVector::FReal>& Coords, const TArray<int32>& Indices, const FTransform& LocalToWorld)"
  },
  {
    "label": "RasterizeGeometryTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "RasterizeGeometryTimeSliced(FNavMeshBuildContext& BuildContext, const TArray<FVector::FReal>& Coords, const TArray<int32>& Indices, const FTransform& LocalToWorld, const rcRasterizationFlags RasterizationFlags, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "RasterizeGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeGeometry(FNavMeshBuildContext& BuildContext, const TArray<FVector::FReal>& Coords, const TArray<int32>& Indices, const FTransform& LocalToWorld, const rcRasterizationFlags RasterizationFlags, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "GenerateRecastFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRecastFilter(FNavMeshBuildContext& BuildContext)"
  },
  {
    "label": "GenerateRecastFilterTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "GenerateRecastFilterTimeSliced(FNavMeshBuildContext& BuildContext)"
  },
  {
    "label": "BuildCompactHeightField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildCompactHeightField(FNavMeshBuildContext& BuildContext)"
  },
  {
    "label": "RecastErodeWalkable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecastErodeWalkable(FNavMeshBuildContext& BuildContext)"
  },
  {
    "label": "RecastBuildLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecastBuildLayers(FNavMeshBuildContext& BuildContext, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "RecastBuildTileCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecastBuildTileCache(FNavMeshBuildContext& BuildContext, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "GenerateCompressedLayersTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "GenerateCompressedLayersTimeSliced(FNavMeshBuildContext& BuildContext)"
  },
  {
    "label": "GenerateCompressedLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCompressedLayers(FNavMeshBuildContext& BuildContext, const dtLinkBuilderData& InLinkBuilderData)"
  },
  {
    "label": "GenerateNavigationDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateNavigationDataLayer(FNavMeshBuildContext& BuildContext, FTileCacheCompressor& TileCompressor, FTileCacheAllocator& GenNavAllocator, FTileGenerationContext& GenerationContext, const dtLinkBuilderData& InLinkBuilderData, int32 LayerIdx)"
  },
  {
    "label": "GenerateNavigationDataTimeSliced()",
    "kind": "Method",
    "detail": "Function (ETimeSliceWorkResult)",
    "insertText": "GenerateNavigationDataTimeSliced(FNavMeshBuildContext& BuildContext, const dtLinkBuilderData& InLinkBuilderData)"
  },
  {
    "label": "GenerateNavigationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateNavigationData(FNavMeshBuildContext& BuildContext, const dtLinkBuilderData& InLinkBuilderData)"
  },
  {
    "label": "BuildTileCacheLinks()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "BuildTileCacheLinks(FNavMeshBuildContext& BuildContext, struct dtTileCacheAlloc* alloc, const dtTileCacheLayer& layer, const struct dtTileCacheContourSet& lcset, TArray<FGeneratedNavigationLink>& OutGeneratedLinks)"
  },
  {
    "label": "ApplyVoxelFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVoxelFilter(struct rcHeightfield* SolidHF, FVector::FReal WalkableRadius)"
  },
  {
    "label": "InitRasterizationMaskArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRasterizationMaskArray(const rcHeightfield* InSolidHF, TInlineMaskArray& OutRasterizationMasks)"
  },
  {
    "label": "ComputeRasterizationMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeRasterizationMasks(FNavMeshBuildContext& BuildContext, FTileRasterizationContext& RasterContext)"
  },
  {
    "label": "MarkRasterizationMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRasterizationMask(rcContext* , rcHeightfield* InSolidHF, const FAreaNavModifier& Modifier, const FTransform& LocalToWorld, const int32 Mask, TInlineMaskArray& OutMaskArray)"
  },
  {
    "label": "MarkDynamicAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDynamicAreas(dtTileCacheLayer& Layer)"
  },
  {
    "label": "MarkDynamicArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDynamicArea(const FAreaNavModifier& Modifier, const FTransform& LocalToWorld, dtTileCacheLayer& Layer)"
  },
  {
    "label": "MarkDynamicArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDynamicArea(const FAreaNavModifier& Modifier, const FTransform& LocalToWorld, dtTileCacheLayer& Layer, const int32 AreaId, const int32* ReplaceAreaIdPtr)"
  },
  {
    "label": "AppendModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendModifier(const FCompositeNavModifier& Modifier, const FNavDataPerInstanceTransformDelegate& InTransformsDelegate)"
  },
  {
    "label": "ValidateAndAppendGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAndAppendGeometry(const FNavigationRelevantData& ElementData, const FCompositeNavModifier& InModifier)"
  },
  {
    "label": "AppendGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendGeometry(const FNavigationRelevantData& ElementData, const FCompositeNavModifier& InModifier, const FNavDataPerInstanceTransformDelegate& InTransformsDelegate)"
  },
  {
    "label": "PrepareVoxelCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareVoxelCache(const TNavStatArray<uint8>& RawCollisionCache, const FCompositeNavModifier& InModifier, TNavStatArray<rcSpanCache>& SpanData)"
  },
  {
    "label": "HasVoxelCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVoxelCache(const TNavStatArray<uint8>& RawVoxelCache, rcSpanCache*& CachedVoxels, int32& NumCachedVoxels)"
  },
  {
    "label": "AddVoxelCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVoxelCache(TNavStatArray<uint8>& RawVoxelCache, const rcSpanCache* CachedVoxels, const int32 NumCachedVoxels)"
  },
  {
    "label": "DumpAsyncData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAsyncData()"
  },
  {
    "label": "DumpSyncData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpSyncData()"
  },
  {
    "label": "IsTileDebugActive()",
    "kind": "Method",
    "detail": "Function (# if RECAST_INTERNAL_DEBUG_DATA bool)",
    "insertText": "IsTileDebugActive()"
  },
  {
    "label": "IsTileDebugAllowingGeneration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTileDebugAllowingGeneration()"
  },
  {
    "label": "FRecastTileGeneratorWrapper()",
    "kind": "Method",
    "detail": "Function (# endif protected : uint32 bRegenerateCompressedLayers : 1 ; uint32 bFullyEncapsulatedByInclusionBounds : 1 ; uint32 bUpdateGeometry : 1 ; uint32 bHasLowAreaModifiers : 1 ; ERasterizeGeomRecastTimeSlicedState RasterizeGeomRecastState ; ERasterizeGeomTimeSlicedState RasterizeGeomState ; EGenerateRecastFilterTimeSlicedState GenerateRecastFilterState ; int32 GenRecastFilterLedgeSpansYStart ; EDoWorkTimeSlicedState DoWorkTimeSlicedState ; EGenerateTileTimeSlicedState GenerateTileTimeSlicedState ; EGenerateNavDataTimeSlicedState GenerateNavDataTimeSlicedState ; int32 GenNavDataLayerTimeSlicedIdx ; EGenerateCompressedLayersTimeSliced GenCompressedLayersTimeSlicedState ; int32 RasterizeTrianglesTimeSlicedRawGeomIdx ; int32 RasterizeTrianglesTimeSlicedInstTransformIdx ; TNavStatArray<uint8> RasterizeGeomRecastTriAreas ; const FNavRegenTimeSliceManager* TimeSliceManager ; TUniquePtr<struct FTileCacheAllocator> GenNavDataTimeSlicedAllocator ; TUniquePtr<struct FTileGenerationContext> GenNavDataTimeSlicedGenerationContext ; TUniquePtr<struct FTileRasterizationContext> GenCompressedlayersTimeSlicedRasterContext ; FRecastTileTimeSliceSettings TileTimeSliceSettings ; int32 TileX ; int32 TileY ; uint32 Version ; double TileCreationTime = 0 . ; FBox TileBB ; FBox TileBBExpandedForAgent ; TBitArray<> DirtyLayers ; FRecastBuildConfig TileConfig ; TNavStatArray<FBox> InclusionBounds ; FRecastNavMeshCachedData AdditionalCachedData ; TArray<FNavMeshTileData> CompressedLayers ; TArray<FNavMeshTileData> NavigationData ; TArray<FVector::FReal> RasterizeGeometryWorldRecastCoords ; TArray<int32> RasterizeGeometryFlippedIndices ; uint8 bRasterizeGeometryUseFlippedIndices : 1 ; TArray<FRecastRawGeometryElement> RawGeometry ; TArray<FRecastAreaNavModifierElement> Modifiers ; TArray<FSimpleLinkNavModifier> OffmeshLinks ; TWeakPtr<FNavDataGenerator,ESPMode::ThreadSafe> ParentGeneratorWeakPtr ; TNavStatArray<TSharedRef<FNavigationRelevantData,ESPMode::ThreadSafe>> NavigationRelevantData ; TWeakObjectPtr<UNavigationSystemV1> NavSystem ; FNavDataConfig NavDataConfig ; rcHeightfield* SolidHF ; rcCompactHeightfield* CompactHF ; FRecastNavMeshTileGenerationDebug TileDebugSettings ; # if RECAST_INTERNAL_DEBUG_DATA FRecastInternalDebugData DebugData ; # endif } ; struct FRecastTileGeneratorWrapper : public FNonAbandonableTask { TSharedRef<FRecastTileGenerator> TileGenerator ;)",
    "insertText": "FRecastTileGeneratorWrapper(TSharedRef<FRecastTileGenerator> InTileGenerator) : TileGenerator(InTileGenerator)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} } ; typedef FAsyncTask<FRecastTileGeneratorWrapper> FRecastTileGeneratorTask ; struct FPendingTileElement { FIntPoint Coord ; FVector::FReal SeedDistance ; double CreationTime ; # if ! UE_BUILD_SHIPPING FVector::FReal DebugInvokerDistanceSquared = TNumericLimits<FVector::FReal)",
    "insertText": "Max()"
  },
  {
    "label": "FPendingTileElement()",
    "kind": "Method",
    "detail": "Function (ENavigationInvokerPriority DebugInvokerPriority = ENavigationInvokerPriority::Default ; # endif ENavigationInvokerPriority SortingPriority = ENavigationInvokerPriority::Default ; bool bRebuildGeometry ; TArray<FBox> DirtyAreas ;)",
    "insertText": "FPendingTileElement() : Coord(FIntPoint::NoneValue) , SeedDistance(TNumericLimits<FVector::FReal>::Max()) , CreationTime(-1.) , bRebuildGeometry(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIntPoint& Location)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPendingTileElement& Element)"
  },
  {
    "label": "TRunningTileElement()",
    "kind": "Method",
    "detail": "Function (} } ; template<TTileGeneratorTask> struct TRunningTileElement {)",
    "insertText": "TRunningTileElement() : Coord(FIntPoint::NoneValue) , bShouldDiscard(false) , AsyncTask(nullptr)"
  },
  {
    "label": "TRunningTileElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRunningTileElement(FIntPoint InCoord) : Coord(InCoord) , bShouldDiscard(false) , AsyncTask(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TRunningTileElement& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FTileTimestamp { FNavTileRef NavTileRef ; double Timestamp ; bool)",
    "insertText": "operator(const FTileTimestamp& Other)"
  },
  {
    "label": "FRecastNavMeshGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRecastNavMeshGenerator()"
  },
  {
    "label": "FRecastNavMeshGenerator()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRecastNavMeshGenerator(FRecastNavMeshGenerator const& NoCopy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FRecastNavMeshGenerator&)",
    "insertText": "operator(FRecastNavMeshGenerator const& NoCopy)"
  },
  {
    "label": "EnsureBuildCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBuildCompletion()"
  },
  {
    "label": "CancelBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBuild()"
  },
  {
    "label": "TickAsyncBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAsyncBuild(float DeltaSeconds)"
  },
  {
    "label": "OnNavigationBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsChanged()"
  },
  {
    "label": "RebuildDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildDirtyAreas(const TArray<FNavigationDirtyArea>& DirtyAreas)"
  },
  {
    "label": "IsBuildInProgressCheckDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildInProgressCheckDirty()"
  },
  {
    "label": "GetTimeSliceData()",
    "kind": "Method",
    "detail": "Function (# if ! RECAST_ASYNC_REBUILDING bool)",
    "insertText": "GetTimeSliceData(int32& OutNumRemainingBuildTasks, double& OutCurrentBuildTaskDuration)"
  },
  {
    "label": "GetNumRemaningBuildTasksHelper()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetNumRemaningBuildTasksHelper()"
  },
  {
    "label": "GetNumRemaningBuildTasks()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumRemaningBuildTasks()"
  },
  {
    "label": "GetNumRunningBuildTasks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumRunningBuildTasks()"
  },
  {
    "label": "IsTileChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTileChanged(const FNavTileRef InTileRef)"
  },
  {
    "label": "OnAreaRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAreaRemoved(const UClass* AreaClass)"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (} const FRecastBuildConfig&)",
    "insertText": "GetConfig()"
  },
  {
    "label": "GetTotalBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetTotalBounds()"
  },
  {
    "label": "HasDirtyTiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDirtyTiles(const FBox& AreaBounds)"
  },
  {
    "label": "GetDirtyTilesCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDirtyTilesCount(const FBox& AreaBounds)"
  },
  {
    "label": "GatherGeometryOnGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherGeometryOnGameThread()"
  },
  {
    "label": "IsTimeSliceRegenActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimeSliceRegenActive()"
  },
  {
    "label": "GrowBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GrowBoundingBox(const FBox& BBox, bool bIncludeAgentHeight)"
  },
  {
    "label": "ShouldGenerateGeometryForOctreeElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGenerateGeometryForOctreeElement(const FNavigationOctreeElement& Element, const FNavDataConfig& NavDataConfig)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && ENABLE_VISUAL_LOG NAVIGATIONSYSTEM_API virtual void ExportNavigationData(const FString& FileName)"
  },
  {
    "label": "GrabDebugSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrabDebugSnapshot(struct FVisualLogEntry* Snapshot, const FBox& BoundingBox, const FName& CategoryName, ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "GetDebugGeometry()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING void)",
    "insertText": "GetDebugGeometry(const FNavigationRelevantData& EncodedData, FNavDebugMeshData& DebugMeshData)"
  },
  {
    "label": "GetTimeSliceManager()",
    "kind": "Method",
    "detail": "Function (# endif const FNavRegenTimeSliceManager*)",
    "insertText": "GetTimeSliceManager()"
  },
  {
    "label": "SetupTileConfig()",
    "kind": "Method",
    "detail": "Function (SyncTimeSlicedData . bNextTimeSliceRegenActive = bRegenState ; } void)",
    "insertText": "SetupTileConfig(const ENavigationDataResolution TileResolution, FRecastBuildConfig& OutConfig)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Init()"
  },
  {
    "label": "ConfigureBuildProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureBuildProperties(FRecastBuildConfig& OutConfig)"
  },
  {
    "label": "UpdateNavigationBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationBounds()"
  },
  {
    "label": "SortPendingBuildTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortPendingBuildTiles()"
  },
  {
    "label": "GetSeedLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSeedLocations(UWorld& World, TArray<FVector2D>& OutSeedLocations)"
  },
  {
    "label": "ConstructTiledNavMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConstructTiledNavMesh()"
  },
  {
    "label": "CalcNavMeshProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcNavMeshProperties(int32& MaxTiles, int32& MaxPolys)"
  },
  {
    "label": "MarkDirtyTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirtyTiles(const TArray<FNavigationDirtyArea>& DirtyAreas)"
  },
  {
    "label": "ShouldDirtyTilesRequestedByElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDirtyTilesRequestedByElement(const UNavigationSystemV1& NavSys, const FNavigationOctree& NavOctreeInstance, FNavigationElementHandle SourceElement, const FNavDataConfig& NavDataConfig)"
  },
  {
    "label": "MarkNavBoundsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MarkNavBoundsDirty()"
  },
  {
    "label": "RemoveLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLayers(const FIntPoint& Tile, TArray<FNavTileRef>& UpdatedTiles)"
  },
  {
    "label": "StoreCompressedTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreCompressedTileCacheLayers(const FRecastTileGenerator& TileGenerator, int32 TileX, int32 TileY)"
  },
  {
    "label": "StoreDebugData()",
    "kind": "Method",
    "detail": "Function (# if RECAST_INTERNAL_DEBUG_DATA void)",
    "insertText": "StoreDebugData(const FRecastTileGenerator& TileGenerator, int32 TileX, int32 TileY)"
  },
  {
    "label": "ProcessTileTasksAsyncAndGetUpdatedTiles()",
    "kind": "Method",
    "detail": "Function (# endif # if RECAST_ASYNC_REBUILDING TArray<FNavTileRef>)",
    "insertText": "ProcessTileTasksAsyncAndGetUpdatedTiles(const int32 NumTasksToProcess)"
  },
  {
    "label": "CreateTileGeneratorFromPendingElement()",
    "kind": "Method",
    "detail": "Function (# else TSharedRef<FRecastTileGenerator>)",
    "insertText": "CreateTileGeneratorFromPendingElement(FIntPoint &OutTileLocation, const int32 ForcedPendingTileIdx = INDEX_NONE)"
  },
  {
    "label": "ProcessTileTasksSyncTimeSlicedAndGetUpdatedTiles()",
    "kind": "Method",
    "detail": "Function (TArray<FNavTileRef>)",
    "insertText": "ProcessTileTasksSyncTimeSlicedAndGetUpdatedTiles()"
  },
  {
    "label": "ProcessTileTasksSyncAndGetUpdatedTiles()",
    "kind": "Method",
    "detail": "Function (TArray<FNavTileRef>)",
    "insertText": "ProcessTileTasksSyncAndGetUpdatedTiles(const int32 NumTasksToProcess)"
  },
  {
    "label": "GetNextPendingDirtyTileToBuild()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextPendingDirtyTileToBuild()"
  },
  {
    "label": "ProcessTileTasksAndGetUpdatedTiles()",
    "kind": "Method",
    "detail": "Function (# endif TArray<FNavTileRef>)",
    "insertText": "ProcessTileTasksAndGetUpdatedTiles(const int32 NumTasksToProcess)"
  },
  {
    "label": "ResetTimeSlicedTileGeneratorSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimeSlicedTileGeneratorSync()"
  },
  {
    "label": "AddGeneratedTilesTimeSliced()",
    "kind": "Method",
    "detail": "Function (public : ETimeSliceWorkResult)",
    "insertText": "AddGeneratedTilesTimeSliced(FRecastTileGenerator& TileGenerator, TArray<FNavTileRef>& OutResultTileRefs)"
  },
  {
    "label": "AddGeneratedTilesAndGetUpdatedTiles()",
    "kind": "Method",
    "detail": "Function (TArray<FNavTileRef>)",
    "insertText": "AddGeneratedTilesAndGetUpdatedTiles(FRecastTileGenerator& TileGenerator)"
  },
  {
    "label": "RemoveTileLayersAndGetUpdatedTiles()",
    "kind": "Method",
    "detail": "Function (public : TArray<FNavTileRef>)",
    "insertText": "RemoveTileLayersAndGetUpdatedTiles(const int32 TileX, const int32 TileY, TMap<int32, dtPolyRef>* OldLayerTileIdMap = nullptr)"
  },
  {
    "label": "RemoveTileLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTileLayers(dtNavMesh* DetourMesh, const int32 TileX, const int32 TileY)"
  },
  {
    "label": "RemoveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTiles(const TArray<FIntPoint>& Tiles)"
  },
  {
    "label": "ReAddTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReAddTiles(const TArray<FNavMeshDirtyTileElement>& Tiles)"
  },
  {
    "label": "IsBuildingRestrictedToActiveTiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildingRestrictedToActiveTiles()"
  },
  {
    "label": "SetMaxTileGeneratorTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxTileGeneratorTasks(int32 NewLimit)"
  },
  {
    "label": "SetSortPendingTileMethod()",
    "kind": "Method",
    "detail": "Function (MaxTileGeneratorTasks = NewLimit ; } void)",
    "insertText": "SetSortPendingTileMethod(const ENavigationSortPendingTilesMethod InMethod)"
  },
  {
    "label": "CalcPolyRefBits()",
    "kind": "Method",
    "detail": "Function (SortPendingTilesMethod = InMethod ; } void)",
    "insertText": "CalcPolyRefBits(ARecastNavMesh* NavMeshOwner, int32& MaxTileBits, int32& MaxPolyBits)"
  },
  {
    "label": "IsGeneratingLinks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGeneratingLinks()"
  },
  {
    "label": "ResolveGeneratedLinkAreas()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ResolveGeneratedLinkAreas(FRecastBuildConfig& OutConfig)"
  },
  {
    "label": "RestrictBuildingToActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestrictBuildingToActiveTiles(bool InRestrictBuildingToActiveTiles)"
  },
  {
    "label": "DiscardCurrentBuildingTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardCurrentBuildingTasks()"
  },
  {
    "label": "CreateTileGenerator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FRecastTileGenerator>)",
    "insertText": "CreateTileGenerator(const FIntPoint& Coord, const TArray<FBox>& DirtyAreas, const double PendingTileCreationTime = 0.)"
  },
  {
    "label": "ConstructTileGeneratorImpl()",
    "kind": "Method",
    "detail": "Function (template<T> TSharedRef<T>)",
    "insertText": "ConstructTileGeneratorImpl(const FIntPoint& Coord, const TArray<FBox>& DirtyAreas, const double PendingTileCreationTime)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<T> TileGenerator =)",
    "insertText": "MakeShareable(new T(*this, Coord, PendingTileCreationTime))"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (TileGenerator ->)",
    "insertText": "Setup(*this, DirtyAreas)"
  },
  {
    "label": "GrowDirtyBounds()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS BBoxGrowth = InBBox ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } FBox)",
    "insertText": "GrowDirtyBounds(const FBox& BBox, bool bIncludeAgentHeight)"
  },
  {
    "label": "LogMemUsed()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "LogMemUsed()"
  },
  {
    "label": "IsAllowedToAddTileLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedToAddTileLayers(const FIntPoint Tile)"
  },
  {
    "label": "AddGeneratedTileLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGeneratedTileLayer(int32 LayerIndex, FRecastTileGenerator& TileGenerator, const TMap<int32, dtPolyRef>& OldLayerTileIdMap, TArray<FNavTileRef>& OutResultTileRefs)"
  },
  {
    "label": "LogDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogDirtyAreas(const UObject& OwnerNav, const TMap<FPendingTileElement, TArray<FNavigationDirtyAreaPerTileDebugInformation>>& DirtyAreasDebuggingInformation)"
  },
  {
    "label": "FSyncTimeSlicedData()",
    "kind": "Method",
    "detail": "Function (# endif TSet<FIntPoint> ActiveTileSet ; FRecastNavMeshCachedData AdditionalCachedData ; FVector RcNavMeshOrigin ; double RebuildAllStartTime = 0 ; uint32 bInitialized : 1 ; uint32 bRestrictBuildingToActiveTiles : 1 ; uint32 Version ; ENavigationSortPendingTilesMethod SortPendingTilesMethod = ENavigationSortPendingTilesMethod::SortWithSeedLocations ; struct FSyncTimeSlicedData {)",
    "insertText": "FSyncTimeSlicedData()"
  }
]