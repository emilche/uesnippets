[
  {
    "label": "FakePeerConnectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePeerConnectionBase"
  },
  {
    "label": "local_streams()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_FAKE_PEER_CONNECTION_BASE_H_ # define PC_TEST_FAKE_PEER_CONNECTION_BASE_H_ # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" api / field_trials_view . h \" # include \" api / sctp_transport_interface . h \" # include \" pc / peer_connection_internal . h \" # include \" test / scoped_key_value_config . h \" namespace webrtc { class FakePeerConnectionBase : public PeerConnectionInternal { public : rtc::scoped_refptr<StreamCollectionInterface>)",
    "insertText": "local_streams()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>& init_send_encodings)"
  },
  {
    "label": "RemoveTrackOrError()",
    "kind": "Method",
    "detail": "Function (} RTCError)",
    "insertText": "RemoveTrackOrError(rtc::scoped_refptr<RtpSenderInterface> sender)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(rtc::scoped_refptr<MediaStreamTrackInterface> track)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(rtc::scoped_refptr<MediaStreamTrackInterface> track, const RtpTransceiverInit& init)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type)"
  },
  {
    "label": "AddTransceiver()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpTransceiverInterface>>)",
    "insertText": "AddTransceiver(cricket::MediaType media_type, const RtpTransceiverInit& init)"
  },
  {
    "label": "CreateSender()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<RtpSenderInterface>)",
    "insertText": "CreateSender(const std::string& kind, const std::string& stream_id)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetStats(rtc::scoped_refptr<RtpSenderInterface> selector, rtc::scoped_refptr<RTCStatsCollectorCallback> callback)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetStats(rtc::scoped_refptr<RtpReceiverInterface> selector, rtc::scoped_refptr<RTCStatsCollectorCallback> callback)"
  },
  {
    "label": "ClearStatsCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearStatsCache()"
  },
  {
    "label": "GetSctpTransport()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<SctpTransportInterface>)",
    "insertText": "GetSctpTransport()"
  },
  {
    "label": "local_description()",
    "kind": "Method",
    "detail": "Function (} const SessionDescriptionInterface*)",
    "insertText": "local_description()"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateOffer(CreateSessionDescriptionObserver* observer, const RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateAnswer(CreateSessionDescriptionObserver* observer, const RTCOfferAnswerOptions& options)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalDescription(SetSessionDescriptionObserver* observer, SessionDescriptionInterface* desc)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRemoteDescription(SetSessionDescriptionObserver* observer, SessionDescriptionInterface* desc)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, rtc::scoped_refptr<SetRemoteDescriptionObserverInterface> observer)"
  },
  {
    "label": "GetConfiguration()",
    "kind": "Method",
    "detail": "Function (} RTCConfiguration)",
    "insertText": "GetConfiguration()"
  },
  {
    "label": "SetConfiguration()",
    "kind": "Method",
    "detail": "Function (} RTCError)",
    "insertText": "SetConfiguration(const PeerConnectionInterface::RTCConfiguration& config)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddIceCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "SetAudioPlayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAudioPlayout(bool playout)"
  },
  {
    "label": "SetAudioRecording()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAudioRecording(bool recording)"
  },
  {
    "label": "LookupDtlsTransportByMid()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<DtlsTransportInterface>)",
    "insertText": "LookupDtlsTransportByMid(const std::string& mid)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "GetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetLocalCertificate(const std::string& transport_name, rtc::scoped_refptr<rtc::RTCCertificate>* certificate)"
  },
  {
    "label": "message_handler()",
    "kind": "Method",
    "detail": "Function (} PeerConnectionMessageHandler*)",
    "insertText": "message_handler()"
  },
  {
    "label": "transport_controller_s()",
    "kind": "Method",
    "detail": "Function (} JsepTransportController*)",
    "insertText": "transport_controller_s()"
  },
  {
    "label": "NoteUsageEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NoteUsageEvent(UsageEvent event)"
  },
  {
    "label": "IsClosed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClosed()"
  },
  {
    "label": "StartSctpTransport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartSctpTransport(int local_port, int remote_port, int max_message_size)"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRemoteCandidate(const std::string& mid, const cricket::Candidate& candidate)"
  },
  {
    "label": "call_ptr()",
    "kind": "Method",
    "detail": "Function (} Call*)",
    "insertText": "call_ptr()"
  },
  {
    "label": "SetSctpDataMid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSctpDataMid(const std::string& mid)"
  },
  {
    "label": "ResetSctpDataMid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetSctpDataMid()"
  },
  {
    "label": "trials()",
    "kind": "Method",
    "detail": "Function (} const FieldTrialsView&)",
    "insertText": "trials()"
  }
]