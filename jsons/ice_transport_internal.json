[
  {
    "label": "IceTransportStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceTransportStats"
  },
  {
    "label": "IceConnectionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IceConnectionState"
  },
  {
    "label": "IceGatheringState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IceGatheringState"
  },
  {
    "label": "ContinualGatheringPolicy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ContinualGatheringPolicy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceConfig"
  },
  {
    "label": "IceProtocolType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IceProtocolType"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "VerifyCandidate()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_ICE_TRANSPORT_INTERNAL_H_ # define P2P_BASE_ICE_TRANSPORT_INTERNAL_H_ # include<stdint . h> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / candidate . h \" # include \" api / rtc_error . h \" # include \" api / transport / enums . h \" # include \" p2p / base / connection . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" p2p / base / port . h \" # include \" p2p / base / transport_description . h \" # include \" rtc_base / network_constants . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / time_utils . h \" namespace cricket { struct IceTransportStats { CandidateStatsList candidate_stats_list ; ConnectionInfos connection_infos ; uint32_t selected_candidate_pair_changes = 0 ; uint64_t bytes_sent = 0 ; uint64_t bytes_received = 0 ; uint64_t packets_sent = 0 ; uint64_t packets_received = 0 ; IceRole ice_role = ICEROLE_UNKNOWN ; std::string ice_local_username_fragment ; webrtc::IceTransportState ice_state = webrtc::IceTransportState::kNew ; } ; typedef std::vector<Candidate> Candidates ; enum IceConnectionState { kIceConnectionConnecting = 0,kIceConnectionFailed,kIceConnectionConnected,kIceConnectionCompleted,} ; enum IceGatheringState { kIceGatheringNew = 0,kIceGatheringGathering,kIceGatheringComplete,} ; enum ContinualGatheringPolicy { GATHER_ONCE = 0,GATHER_CONTINUALLY,} ; enum class NominationMode { REGULAR,AGGRESSIVE,SEMI_AGGRESSIVE } ; webrtc::RTCError)",
    "insertText": "VerifyCandidate(const Candidate& cand)"
  },
  {
    "label": "VerifyCandidates()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "VerifyCandidates(const Candidates& candidates)"
  },
  {
    "label": "gather_continually()",
    "kind": "Method",
    "detail": "Function (struct IceConfig { absl::optional<int> receiving_timeout ; absl::optional<int> backup_connection_ping_interval ; ContinualGatheringPolicy continual_gathering_policy = GATHER_ONCE ; bool)",
    "insertText": "gather_continually()"
  },
  {
    "label": "IceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IceConfig(int receiving_timeout_ms, int backup_connection_ping_interval, ContinualGatheringPolicy gathering_policy, bool prioritize_most_likely_candidate_pairs, int stable_writable_connection_ping_interval_ms, bool presume_writable_when_fully_relayed, int regather_on_failed_networks_interval_ms, int receiving_switching_delay_ms)"
  },
  {
    "label": "IceConfig()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IceConfig()"
  },
  {
    "label": "receiving_timeout_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "receiving_timeout_or_default()"
  },
  {
    "label": "backup_connection_ping_interval_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "backup_connection_ping_interval_or_default()"
  },
  {
    "label": "stable_writable_connection_ping_interval_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stable_writable_connection_ping_interval_or_default()"
  },
  {
    "label": "regather_on_failed_networks_interval_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "regather_on_failed_networks_interval_or_default()"
  },
  {
    "label": "receiving_switching_delay_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "receiving_switching_delay_or_default()"
  },
  {
    "label": "ice_check_interval_strong_connectivity_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ice_check_interval_strong_connectivity_or_default()"
  },
  {
    "label": "ice_check_interval_weak_connectivity_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ice_check_interval_weak_connectivity_or_default()"
  },
  {
    "label": "ice_check_min_interval_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ice_check_min_interval_or_default()"
  },
  {
    "label": "ice_unwritable_timeout_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ice_unwritable_timeout_or_default()"
  },
  {
    "label": "ice_unwritable_min_checks_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ice_unwritable_min_checks_or_default()"
  },
  {
    "label": "ice_inactive_timeout_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ice_inactive_timeout_or_default()"
  },
  {
    "label": "stun_keepalive_interval_or_default()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stun_keepalive_interval_or_default()"
  },
  {
    "label": "IceTransportInternal()",
    "kind": "Method",
    "detail": "Function (} ; enum class IceTransportState { STATE_INIT,STATE_CONNECTING,STATE_COMPLETED,STATE_FAILED } ; enum IceProtocolType { ICEPROTO_RFC5245 } ; class RTC_EXPORT IceTransportInternal : public rtc::PacketTransportInternal { public :)",
    "insertText": "IceTransportInternal()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (IceTransportState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetIceTransportState()",
    "kind": "Method",
    "detail": "Function (webrtc::IceTransportState)",
    "insertText": "GetIceTransportState()"
  },
  {
    "label": "component()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "component()"
  },
  {
    "label": "GetIceRole()",
    "kind": "Method",
    "detail": "Function (IceRole)",
    "insertText": "GetIceRole()"
  },
  {
    "label": "SetIceRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceRole(IceRole role)"
  },
  {
    "label": "SetIceTiebreaker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceTiebreaker(uint64_t tiebreaker)"
  },
  {
    "label": "SetIceProtocolType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceProtocolType(IceProtocolType type)"
  },
  {
    "label": "SetIceCredentials()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIceCredentials(absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "SetRemoteIceCredentials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteIceCredentials(absl::string_view ice_ufrag, absl::string_view ice_pwd)"
  },
  {
    "label": "SetIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteIceParameters(const IceParameters& ice_params)"
  },
  {
    "label": "SetRemoteIceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteIceMode(IceMode mode)"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConfig(const IceConfig& config)"
  },
  {
    "label": "MaybeStartGathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeStartGathering()"
  },
  {
    "label": "AddRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RemoveRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRemoteCandidate(const Candidate& candidate)"
  },
  {
    "label": "RemoveAllRemoteCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllRemoteCandidates()"
  },
  {
    "label": "gathering_state()",
    "kind": "Method",
    "detail": "Function (IceGatheringState)",
    "insertText": "gathering_state()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(IceTransportStats* ice_transport_stats)"
  },
  {
    "label": "GetRttEstimate()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetRttEstimate()"
  },
  {
    "label": "selected_connection()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "selected_connection()"
  },
  {
    "label": "GetSelectedCandidatePair()",
    "kind": "Method",
    "detail": "Function (absl::optional<const CandidatePair>)",
    "insertText": "GetSelectedCandidatePair()"
  }
]