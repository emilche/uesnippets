[
  {
    "label": "Scope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scope"
  },
  {
    "label": "Accumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Accumulator"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_CriticalSection . h \" # include<chrono> namespace telemetry { class Scope { public :)",
    "insertText": "Scope(const char* name)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Scope(void)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(void)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(void)"
  },
  {
    "label": "Accumulator()",
    "kind": "Method",
    "detail": "Function (private : const char* m_name ; uint64_t m_start ; CriticalSection m_cs ; } ; class Accumulator { public :)",
    "insertText": "Accumulator(const char* name)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(uint64_t value)"
  },
  {
    "label": "ResetCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCurrent(void)"
  },
  {
    "label": "ReadCurrent()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ReadCurrent(void)"
  },
  {
    "label": "ReadAccumulated()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ReadAccumulated(void)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(void)"
  }
]