[
  {
    "label": "NumericalDiffMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NumericalDiffMode"
  },
  {
    "label": "NumericalDiff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumericalDiff"
  },
  {
    "label": "NumericalDiff()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NUMERICAL_DIFF_H # define EIGEN_NUMERICAL_DIFF_H namespace Eigen { enum NumericalDiffMode { Forward,Central } ; template<_Functor,NumericalDiffMode mode = Forward> class NumericalDiff : public _Functor { public : typedef _Functor Functor ; typedef Functor::Scalar Scalar ; typedef Functor::InputType InputType ; typedef Functor::ValueType ValueType ; typedef Functor::JacobianType JacobianType ;)",
    "insertText": "NumericalDiff(Scalar _epsfcn=0.) : Functor(), epsfcn(_epsfcn)"
  },
  {
    "label": "NumericalDiff()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NumericalDiff(const Functor& f, Scalar _epsfcn=0.) : Functor(f), epsfcn(_epsfcn)"
  },
  {
    "label": "NumericalDiff()",
    "kind": "Method",
    "detail": "Function (} template<T0>)",
    "insertText": "NumericalDiff(const T0& a0) : Functor(a0), epsfcn(0)"
  },
  {
    "label": "NumericalDiff()",
    "kind": "Method",
    "detail": "Function (} template<T0,T1>)",
    "insertText": "NumericalDiff(const T0& a0, const T1& a1) : Functor(a0, a1), epsfcn(0)"
  },
  {
    "label": "NumericalDiff()",
    "kind": "Method",
    "detail": "Function (} template<T0,T1,T2>)",
    "insertText": "NumericalDiff(const T0& a0, const T1& a1, const T2& a2) : Functor(a0, a1, a2), epsfcn(0)"
  },
  {
    "label": "df()",
    "kind": "Method",
    "detail": "Function (} enum { InputsAtCompileTime = Functor::InputsAtCompileTime,ValuesAtCompileTime = Functor::ValuesAtCompileTime } ; int)",
    "insertText": "df(const InputType& _x, JacobianType &jac)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; Scalar h ; int nfev = 0 ; const InputType::Index n = _x .)",
    "insertText": "size()"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const Scalar eps =)",
    "insertText": "sqrt(((std::max)(epsfcn,NumTraits<Scalar>::epsilon() )))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (ValueType val1,val2 ; InputType x = _x ; val1 .)",
    "insertText": "resize(Functor::values())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (nfev + + ; break ; case Central : break ; default :)",
    "insertText": "eigen_assert(false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "for(int j = 0; j < n; ++j)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (h = eps*)",
    "insertText": "abs(x[j])"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (h = eps ; })",
    "insertText": "switch(mode)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (nfev + + ; x [ j ] = _x [ j ] ; jac .)",
    "insertText": "col(j) = (val2-val1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (break ; case Central : x [ j ] + = h ;)",
    "insertText": "operator()(x, val2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (nfev + + ; x [ j ] - = 2* h ;)",
    "insertText": "operator()(x, val1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (nfev + + ; x [ j ] = _x [ j ] ; jac .)",
    "insertText": "col(j) = (val2-val1)/(2*h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; } return nfev ; } private : Scalar epsfcn ; NumericalDiff&)",
    "insertText": "operator(const NumericalDiff&)"
  }
]