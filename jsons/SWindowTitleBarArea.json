[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "SWindowTitleBarArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindowTitleBarArea"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / SBoxPanel . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Input / SButton . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; class SWindow ; template<ObjectType> class TAttribute ; class SWindowTitleBarArea : public SPanel { public : using FSlot = FSingleWidgetChildrenWithBasicLayoutSlot ;)",
    "insertText": "SLATE_BEGIN_ARGS(SWindowTitleBarArea) : _HAlign( HAlign_Fill ) , _VAlign( VAlign_Fill ) , _Padding( 0.0f ) , _Content()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EHorizontalAlignment, HAlign ) SLATE_ARGUMENT( EVerticalAlignment, VAlign ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_DEFAULT_SLOT( FArguments, Content ) SLATE_EVENT( FSimpleDelegate, RequestToggleFullscreen ) SLATE_END_ARGS() SLATE_API SWindowTitleBarArea()"
  },
  {
    "label": "SWindowTitleBarArea()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SWindowTitleBarArea()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetWindowZoneOverride()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetWindowZoneOverride()"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContent(const TSharedRef< SWidget >& InContent)"
  },
  {
    "label": "SetHAlign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHAlign(EHorizontalAlignment HAlign)"
  },
  {
    "label": "SetVAlign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVAlign(EVerticalAlignment VAlign)"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(TAttribute<FMargin> InPadding)"
  },
  {
    "label": "SetGameWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameWindow(TSharedPtr<SWindow> Window)"
  },
  {
    "label": "SetRequestToggleFullscreenCallback()",
    "kind": "Method",
    "detail": "Function (GameWindow = Window ; } void)",
    "insertText": "SetRequestToggleFullscreenCallback(FSimpleDelegate InRequestToggleFullscreen)"
  },
  {
    "label": "SetOnCloseButtonClickedDelegate()",
    "kind": "Method",
    "detail": "Function (RequestToggleFullscreen = InRequestToggleFullscreen ; } void)",
    "insertText": "SetOnCloseButtonClickedDelegate(FSimpleDelegate InOnCloseCuttonClicked)"
  },
  {
    "label": "SetIsCloseButtonActive()",
    "kind": "Method",
    "detail": "Function (OnCloseButtonClicked = InOnCloseCuttonClicked ; } void)",
    "insertText": "SetIsCloseButtonActive(bool bIsAcive)"
  },
  {
    "label": "SetWindowButtonsVisibility()",
    "kind": "Method",
    "detail": "Function (bIsCloseButtonActive = bIsAcive ; } void)",
    "insertText": "SetWindowButtonsVisibility(bool bIsVisible)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (WindowButtonsBox ->)",
    "insertText": "SetVisibility(bIsVisible && PLATFORM_DESKTOP ? EVisibility::Visible : EVisibility::Collapsed)"
  },
  {
    "label": "SetCustomStyleForWindowButtons()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomStyleForWindowButtons(const FButtonStyle& InMinimizeButtonStyle, const FButtonStyle& InMaximizeButtonStyle, const FButtonStyle& InRestoreButtonStyle, const FButtonStyle& InCloseButtonStyle)"
  },
  {
    "label": "MinimizeButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (MinimizeButtonStyle = InMinimizeButtonStyle ; MaximizeButtonStyle = InMaximizeButtonStyle ; RestoreButtonStyle = InRestoreButtonStyle ; CloseButtonStyle = InCloseButtonStyle ; } protected : FSlot ChildSlot ; private : TSharedPtr<SWindow> GameWindow ; FSimpleDelegate RequestToggleFullscreen ; FSimpleDelegate OnCloseButtonClicked ; bool bIsCloseButtonActive ; FButtonStyle MinimizeButtonStyle ; FButtonStyle MaximizeButtonStyle ; FButtonStyle RestoreButtonStyle ; FButtonStyle CloseButtonStyle ; bool bIsMinimizeButtonEnabled ; bool bIsMaximizeRestoreButtonEnabled ; bool bIsCloseButtonEnabled ; FReply)",
    "insertText": "MinimizeButton_OnClicked()"
  },
  {
    "label": "MaximizeRestoreButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "MaximizeRestoreButton_OnClicked()"
  },
  {
    "label": "CloseButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "CloseButton_OnClicked()"
  },
  {
    "label": "GetMinimizeImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetMinimizeImage()"
  },
  {
    "label": "GetMaximizeRestoreImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetMaximizeRestoreImage()"
  },
  {
    "label": "GetCloseImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCloseImage()"
  }
]