[
  {
    "label": "FakeEncodedFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeEncodedFrame"
  },
  {
    "label": "FakeFrameBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeFrameBuilder"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FAKE_ENCODED_FRAME_H_ # define TEST_FAKE_ENCODED_FRAME_H_ # include<memory> # include<ostream> # include<vector> # include \" api / rtp_packet_infos . h \" # include \" api / video / encoded_frame . h \" # include \" api / video / video_rotation . h \" # include \" test / gmock . h \" namespace webrtc { void)",
    "insertText": "PrintTo(const EncodedFrame& frame, std::ostream* os)"
  },
  {
    "label": "ReceivedTime()",
    "kind": "Method",
    "detail": "Function (namespace test { class FakeEncodedFrame : public EncodedFrame { public : int64_t)",
    "insertText": "ReceivedTime()"
  },
  {
    "label": "RenderTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "RenderTime()"
  },
  {
    "label": "SetReceivedTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceivedTime(int64_t received_time)"
  },
  {
    "label": "SetPayloadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadType(int payload_type)"
  },
  {
    "label": "MATCHER_P()",
    "kind": "Method",
    "detail": "Function (private : int64_t received_time_ ; } ;)",
    "insertText": "MATCHER_P(WithId, id, \"\")"
  },
  {
    "label": "MATCHER_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MATCHER_P(FrameWithSize, id, \"\")"
  },
  {
    "label": "MATCHER_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MATCHER_P(RtpTimestamp, ts, \"\")"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (} class FakeFrameBuilder { public : FakeFrameBuilder&)",
    "insertText": "Time(uint32_t rtp_timestamp)"
  },
  {
    "label": "Id()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "Id(int64_t frame_id)"
  },
  {
    "label": "AsLast()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "AsLast()"
  },
  {
    "label": "Refs()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "Refs(const std::vector<int64_t>& references)"
  },
  {
    "label": "PlayoutDelay()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "PlayoutDelay(VideoPlayoutDelay playout_delay)"
  },
  {
    "label": "SpatialLayer()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "SpatialLayer(int spatial_layer)"
  },
  {
    "label": "ReceivedTime()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "ReceivedTime(Timestamp receive_time)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "Size(size_t size)"
  },
  {
    "label": "PayloadType()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "PayloadType(int payload_type)"
  },
  {
    "label": "NtpTime()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "NtpTime(Timestamp ntp_time)"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "Rotation(VideoRotation rotation)"
  },
  {
    "label": "PacketInfos()",
    "kind": "Method",
    "detail": "Function (FakeFrameBuilder&)",
    "insertText": "PacketInfos(RtpPacketInfos packet_infos)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FakeEncodedFrame>)",
    "insertText": "Build()"
  }
]