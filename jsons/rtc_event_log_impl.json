[
  {
    "label": "RtcEventLogImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogImpl"
  },
  {
    "label": "RtcEventLogImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_IMPL_H_ # define LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_IMPL_H_ # include<cstddef> # include<cstdint> # include<deque> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / rtc_event_log_output . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" logging / rtc_event_log / encoder / rtc_event_log_encoder . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RtcEventLogImpl final : public RtcEventLog { public :)",
    "insertText": "RtcEventLogImpl(EncodingType encoding_type, TaskQueueFactory* task_queue_factory)"
  },
  {
    "label": "RtcEventLogImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcEventLogImpl(const RtcEventLogImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtcEventLogImpl&)",
    "insertText": "operator(const RtcEventLogImpl&)"
  },
  {
    "label": "RtcEventLogImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventLogImpl()"
  },
  {
    "label": "StartLogging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartLogging(std::unique_ptr<RtcEventLogOutput> output, int64_t output_period_ms)"
  },
  {
    "label": "StopLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLogging()"
  },
  {
    "label": "StopLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLogging(std::function<void()> callback)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(std::unique_ptr<RtcEvent> event)"
  },
  {
    "label": "LogToMemory()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "LogToMemory(std::unique_ptr<RtcEvent> event) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "LogEventsFromMemoryToOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogEventsFromMemoryToOutput() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "StopOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopOutput() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "WriteConfigsAndHistoryToOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteConfigsAndHistoryToOutput(absl::string_view encoded_configs, absl::string_view encoded_history) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "WriteToOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToOutput(absl::string_view output_string) RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "StopLoggingInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoggingInternal() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "ScheduleOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleOutput() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::deque<std::unique_ptr<RtcEvent>> config_history_)",
    "insertText": "RTC_GUARDED_BY(*task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker logging_state_checker_ ; bool logging_state_started_)",
    "insertText": "RTC_GUARDED_BY(logging_state_checker_)"
  }
]