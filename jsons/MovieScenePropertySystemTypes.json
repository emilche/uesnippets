[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "TPropertyMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyMetaData"
  },
  {
    "label": "FCustomPropertyIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyIndex"
  },
  {
    "label": "FCompositePropertyTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositePropertyTypeID"
  },
  {
    "label": "FPropertyRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyRegistry"
  },
  {
    "label": "TCompositePropertyTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCompositePropertyTypeID"
  },
  {
    "label": "TCustomPropertyAccessorStorageTypeImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomPropertyAccessorStorageTypeImpl"
  },
  {
    "label": "TCustomPropertyAccessorStorageType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomPropertyAccessorStorageType"
  },
  {
    "label": "TestNormal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestNormal"
  },
  {
    "label": "TestCustom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TestCustom"
  },
  {
    "label": "TCustomPropertyAccessorFunctionsImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomPropertyAccessorFunctionsImpl"
  },
  {
    "label": "FCustomPropertyAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyAccessor"
  },
  {
    "label": "TCustomPropertyAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomPropertyAccessor"
  },
  {
    "label": "FCustomAccessorView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomAccessorView"
  },
  {
    "label": "ICustomPropertyRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICustomPropertyRegistration"
  },
  {
    "label": "TCustomPropertyRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomPropertyRegistration"
  },
  {
    "label": "TPropertyMetaDataComponentsImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyMetaDataComponentsImpl"
  },
  {
    "label": "TPropertyMetaDataComponents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyMetaDataComponents"
  },
  {
    "label": "TPropertyComponents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyComponents"
  },
  {
    "label": "TSetPropertyValuesImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSetPropertyValuesImpl"
  },
  {
    "label": "TSetPropertyValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSetPropertyValues"
  },
  {
    "label": "TGetPropertyValuesImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetPropertyValuesImpl"
  },
  {
    "label": "TGetPropertyValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetPropertyValues"
  },
  {
    "label": "TSetCompositePropertyValuesImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSetCompositePropertyValuesImpl"
  },
  {
    "label": "FCompositePropertyTypeID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / NameTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / StringView . h \" # include \" EntitySystem / MovieSceneComponentAccessors . h \" class UClass ; class FTrackInstancePropertyBindings ; namespace UE { namespace MovieScene { template<. . .> struct TPropertyMetaData ; struct FCustomPropertyIndex { uint16 Value ; } ; struct FCompositePropertyTypeID {)",
    "insertText": "FCompositePropertyTypeID() : TypeIndex(INDEX_NONE)"
  },
  {
    "label": "FromIndex()",
    "kind": "Method",
    "detail": "Function (} FCompositePropertyTypeID)",
    "insertText": "FromIndex(int32 Index)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} class FPropertyRegistry ; int32 TypeIndex ; } ; template<PropertyTraits> struct TCompositePropertyTypeID : FCompositePropertyTypeID { } ; namespace Private { template<,= void> bool PropertyTraitsHaveCustomAccessorStorageType = false ; template<T> bool PropertyTraitsHaveCustomAccessorStorageType<T,std::void_t<)",
    "insertText": "decltype(sizeof(typename T::CustomAccessorStorageType))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<PropertyTraits,bool Custom> struct TCustomPropertyAccessorStorageTypeImpl ; template<PropertyTraits> struct TCustomPropertyAccessorStorageTypeImpl<PropertyTraits,false> { using Value = PropertyTraits::StorageType ; } ; template<PropertyTraits> struct TCustomPropertyAccessorStorageTypeImpl<PropertyTraits,true> { using Value = PropertyTraits::CustomAccessorStorageType ; } ; template<PropertyTraits> struct TCustomPropertyAccessorStorageType : TCustomPropertyAccessorStorageTypeImpl<PropertyTraits,PropertyTraitsHaveCustomAccessorStorageType<PropertyTraits>> { } ; namespace Tests { struct TestNormal { using StorageType = bool ; } ;)",
    "insertText": "static_assert(PropertyTraitsHaveCustomAccessorStorageType<TestNormal> == false, \"Normal has no custom storage type\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (struct TestCustom { using StorageType = bool ; using CustomAccessorStorageType = int ; } ;)",
    "insertText": "static_assert(PropertyTraitsHaveCustomAccessorStorageType<TestCustom> == true, \"Custom does have custom storage type\")"
  },
  {
    "label": "StorageType()",
    "kind": "Method",
    "detail": "Function (} } template<PropertyTraits,MetaDataType> struct TCustomPropertyAccessorFunctionsImpl ; template<PropertyTraits,. . . MetaDataTypes> struct TCustomPropertyAccessorFunctionsImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>> { using StorageType = Private::TCustomPropertyAccessorStorageType<PropertyTraits>::Value ; using ParamType = TCallTraits<StorageType>::ParamType ; using GetterFunc =)",
    "insertText": "StorageType(*)(const UObject* Object, MetaDataTypes...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using SetterFunc =)",
    "insertText": "void(*)(UObject* Object, MetaDataTypes..., ParamType Value)"
  },
  {
    "label": "TCustomPropertyAccessor()",
    "kind": "Method",
    "detail": "Function (GetterFunc Getter ; SetterFunc Setter ; } ; template<PropertyTraits> using TCustomPropertyAccessorFunctions = TCustomPropertyAccessorFunctionsImpl<PropertyTraits,PropertyTraits::MetaDataType> ; struct FCustomPropertyAccessor { UClass* Class ; FName PropertyPath ; FComponentTypeID AdditionalTag ; } ; template<PropertyTraits> struct TCustomPropertyAccessor : FCustomPropertyAccessor {)",
    "insertText": "TCustomPropertyAccessor(UClass* InClass, FName InPropertyPath, const TCustomPropertyAccessorFunctions<PropertyTraits>& InFunctions)"
  },
  {
    "label": "Functions()",
    "kind": "Method",
    "detail": "Function (InClass,InPropertyPath },)",
    "insertText": "Functions(InFunctions)"
  },
  {
    "label": "FCustomAccessorView()",
    "kind": "Method",
    "detail": "Function (} TCustomPropertyAccessorFunctions<PropertyTraits> Functions ; } ; struct FCustomAccessorView {)",
    "insertText": "FCustomAccessorView() : Base(nullptr) , ViewNum(0) , Stride(0)"
  },
  {
    "label": "FCustomAccessorView()",
    "kind": "Method",
    "detail": "Function (} template<T,Allocator>)",
    "insertText": "FCustomAccessorView(const TArray<T, Allocator>& InArray) : Base(reinterpret_cast<const uint8*>(InArray.GetData())) , ViewNum(InArray.Num()) , Stride(sizeof(T))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FCustomPropertyAccessor&)",
    "insertText": "operator(int32 InIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UClass* StopIterationAt =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "Accessor()",
    "kind": "Method",
    "detail": "Function (const FCustomPropertyAccessor&)",
    "insertText": "Accessor(*this)"
  },
  {
    "label": "ICustomPropertyRegistration()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } private : const uint8* Base ; int32 ViewNum ; int32 Stride ; } ; struct ICustomPropertyRegistration { ~)",
    "insertText": "ICustomPropertyRegistration()"
  },
  {
    "label": "GetAccessors()",
    "kind": "Method",
    "detail": "Function (} FCustomAccessorView)",
    "insertText": "GetAccessors()"
  },
  {
    "label": "AddGlobalCustomAccessor()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR void)",
    "insertText": "AddGlobalCustomAccessor(const UClass* ClassType, FName PropertyPath)"
  },
  {
    "label": "RemoveGlobalCustomAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGlobalCustomAccessor(const UClass* ClassType, FName PropertyPath)"
  },
  {
    "label": "GlobalCustomAccessorExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GlobalCustomAccessorExists(const UClass* ClassType, TStringView<WIDECHAR> PropertyPath)"
  },
  {
    "label": "GlobalCustomAccessorExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GlobalCustomAccessorExists(const UClass* ClassType, TStringView<ANSICHAR> PropertyPath)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(UClass* ClassType, FName PropertyName, GetterFunc Getter, SetterFunc Setter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CustomAccessors .)",
    "insertText": "Add(TCustomPropertyAccessor<PropertyTraits>{ ClassType, PropertyName, { Getter, Setter } })"
  },
  {
    "label": "AddGlobalCustomAccessor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "AddGlobalCustomAccessor(ClassType, PropertyName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Remove(UClass* ClassType, FName PropertyName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TCustomPropertyAccessor<PropertyTraits>& Accessor = CustomAccessors [ Index ] ;)",
    "insertText": "if(Accessor.Class == ClassType && Accessor.PropertyPath == PropertyName)"
  },
  {
    "label": "RemoveGlobalCustomAccessor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "RemoveGlobalCustomAccessor(Accessor.Class, Accessor.PropertyPath)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (# endif Accessor . Class = nullptr ; Accessor . PropertyPath = NAME_None ; } } } void)",
    "insertText": "RemoveAll(UClass* ClassType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TCustomPropertyAccessor<PropertyTraits>& Accessor = CustomAccessors [ Index ] ;)",
    "insertText": "if(Accessor.Class == ClassType)"
  },
  {
    "label": "TSetPropertyValuesImpl()",
    "kind": "Method",
    "detail": "Function (# endif Accessor . Class = nullptr ; Accessor . PropertyPath = NAME_None ; } } } protected : TArray<TCustomPropertyAccessor<PropertyTraits>,TInlineAllocator<InlineSize>> CustomAccessors ; } ; template<,> struct TPropertyMetaDataComponentsImpl ; template<> struct TPropertyMetaDataComponents ; template<PropertyTraits> struct TPropertyComponents { FComponentTypeID PropertyTag ; TComponentTypeID<PropertyTraits::StorageType> InitialValue ; TPropertyMetaDataComponents<PropertyTraits::MetaDataType> MetaDataComponents ; TCompositePropertyTypeID<PropertyTraits> CompositeID ; } ; template<PropertyTraits,MetaDataType> struct TSetPropertyValuesImpl { } ; template<PropertyTraits,. . . MetaDataTypes> struct TSetPropertyValuesImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>> { using StorageType = PropertyTraits::StorageType ; using InParamType = TCallTraits<PropertyTraits::StorageType>::ParamType ;)",
    "insertText": "TSetPropertyValuesImpl(ICustomPropertyRegistration* InCustomProperties) : CustomProperties(InCustomProperties)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachEntity(UObject* InObject, FCustomPropertyIndex CustomIndex, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, InParamType ValueToSet)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntity(UObject* InObject, uint16 PropertyOffset, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, InParamType ValueToSet)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntity(UObject* InObject, const TSharedPtr<FTrackInstancePropertyBindings>& PropertyBindings, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, InParamType ValueToSet)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (public : using FThreeWayAccessor = TMultiReadOptional<FCustomPropertyIndex,uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; using FTwoWayAccessor = TMultiReadOptional<uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FThreeWayAccessor ResolvedPropertyComponents, TRead<MetaDataTypes>... MetaDataComponents, TRead<StorageType> PropertyValueComponents)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FTwoWayAccessor ResolvedPropertyComponents, TRead<MetaDataTypes>... MetaDataComponents, TRead<StorageType> PropertyValueComponents)"
  },
  {
    "label": "TSetPropertyValues()",
    "kind": "Method",
    "detail": "Function (private : ICustomPropertyRegistration* CustomProperties ; FCustomAccessorView CustomAccessors ; } ; template<PropertyTraits> struct TSetPropertyValues : TSetPropertyValuesImpl<PropertyTraits,PropertyTraits::MetaDataType> { using ParamType = TCallTraits<PropertyTraits::StorageType>::ParamType ;)",
    "insertText": "TSetPropertyValues(ICustomPropertyRegistration* InCustomProperties) : TSetPropertyValuesImpl<PropertyTraits, typename PropertyTraits::MetaDataType>(InCustomProperties)"
  },
  {
    "label": "TGetPropertyValuesImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<PropertyTraits,MetaDataType> struct TGetPropertyValuesImpl { } ; template<PropertyTraits,. . . MetaDataTypes> struct TGetPropertyValuesImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>> { using StorageType = PropertyTraits::StorageType ;)",
    "insertText": "TGetPropertyValuesImpl(ICustomPropertyRegistration* InCustomProperties) : CustomProperties(InCustomProperties)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachEntity(UObject* InObject, FCustomPropertyIndex CustomPropertyIndex, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, StorageType& OutValue)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntity(UObject* InObject, uint16 PropertyOffset, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, StorageType& OutValue)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntity(UObject* InObject, const TSharedPtr<FTrackInstancePropertyBindings>& PropertyBindings, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, StorageType& OutValue)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (public : using FThreeWayAccessor = TMultiReadOptional<FCustomPropertyIndex,uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; using FTwoWayAccessor = TMultiReadOptional<uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FThreeWayAccessor ResolvedPropertyComponents, TRead<MetaDataTypes>... MetaDataComponents, TWrite<StorageType> OutValueComponents)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FTwoWayAccessor ResolvedPropertyComponents, TRead<MetaDataTypes>... MetaDataComponents, TWrite<StorageType> OutValueComponents)"
  },
  {
    "label": "TGetPropertyValues()",
    "kind": "Method",
    "detail": "Function (private : ICustomPropertyRegistration* CustomProperties ; FCustomAccessorView CustomAccessors ; } ; template<PropertyTraits> struct TGetPropertyValues : TGetPropertyValuesImpl<PropertyTraits,PropertyTraits::MetaDataType> {)",
    "insertText": "TGetPropertyValues(ICustomPropertyRegistration* InCustomProperties) : TGetPropertyValuesImpl<PropertyTraits, typename PropertyTraits::MetaDataType>(InCustomProperties)"
  },
  {
    "label": "TSetCompositePropertyValuesImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<PropertyTraits,MetaDataType,. . . CompositeTypes> struct TSetCompositePropertyValuesImpl ; template<PropertyTraits,. . . MetaDataTypes,. . . CompositeTypes> struct TSetCompositePropertyValuesImpl<PropertyTraits,TPropertyMetaData<MetaDataTypes . . .>,CompositeTypes . . .> { using StorageType = PropertyTraits::StorageType ;)",
    "insertText": "TSetCompositePropertyValuesImpl(ICustomPropertyRegistration* InCustomProperties) : CustomProperties(InCustomProperties)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachEntity(UObject* InObject, FCustomPropertyIndex CustomPropertyIndex, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, typename TCallTraits<CompositeTypes>::ParamType... CompositeResults)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntity(UObject* InObject, uint16 PropertyOffset, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, typename TCallTraits<CompositeTypes>::ParamType... CompositeResults)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachEntity(UObject* InObject, const TSharedPtr<FTrackInstancePropertyBindings>& PropertyBindings, typename TCallTraits<MetaDataTypes>::ParamType... MetaData, typename TCallTraits<CompositeTypes>::ParamType... CompositeResults)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (public : using FThreeWayAccessor = TMultiReadOptional<FCustomPropertyIndex,uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; using FTwoWayAccessor = TMultiReadOptional<uint16,TSharedPtr<FTrackInstancePropertyBindings>> ; void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FThreeWayAccessor ResolvedPropertyComponents, TRead<MetaDataTypes>... InMetaData, TRead<CompositeTypes>... VariadicComponents)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAllocation(const FEntityAllocation* Allocation, TRead<UObject*> BoundObjectComponents, FTwoWayAccessor ResolvedPropertyComponents, TRead<MetaDataTypes>... InMetaData, TRead<CompositeTypes>... VariadicComponents)"
  }
]