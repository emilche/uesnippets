[
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "HSizeChanged()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Insights / ViewModels / TimingViewLayout . h \" class SScrollBar ; enum class ETimingTrackViewportDirtyFlags : uint32 { None = 0,)",
    "insertText": "HSizeChanged(1 << 0), HPositionChanged = (1 << 1), HScaleChanged = (1 << 2), HClippedSessionTimeChanged = (1 << 3), HInvalidated = (1 << 4), VSizeChanged = (1 << 5), VPositionChanged = (1 << 6), VLayoutChanged = (1 << 7), VInvalidated = (1 << 8)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ETimingTrackViewportDirtyFlags)"
  },
  {
    "label": "FTimingTrackViewport()",
    "kind": "Method",
    "detail": "Function (class FTimingTrackViewport { public :)",
    "insertText": "FTimingTrackViewport()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "MinScaleX()",
    "kind": "Method",
    "detail": "Function (Width = 0 . 0 f ; Height = 0 . 0 f ; MinValidTime = 0 . 0 ; MaxValidTime = 0 . 0 ; StartTime = 0 . 0 ; EndTime = 0 . 0 ;)",
    "insertText": "MinScaleX(5 * 20)"
  },
  {
    "label": "ScaleX()",
    "kind": "Method",
    "detail": "Function (MaxScaleX = 1 . 0 E10 ;)",
    "insertText": "ScaleX(5 * 20)"
  },
  {
    "label": "ForceNormalMode()",
    "kind": "Method",
    "detail": "Function (PosY = 0 . 0 f ; TopOffset = 0 . 0 f ; BottomOffset = 0 . 0 f ; ScrollHeight = 1 . 0 f ; ScrollPosY = 0 . 0 f ; Layout .)",
    "insertText": "ForceNormalMode()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (DirtyFlags = ETimingTrackViewportDirtyFlags::All ; } float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (MaxValidTime = InMaxValidTime ; } double)",
    "insertText": "GetStartTime()"
  },
  {
    "label": "TimeToSlateUnitsRounded()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "TimeToSlateUnitsRounded(const double Time)"
  },
  {
    "label": "GetViewportDXForDuration()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetViewportDXForDuration(const double DT)"
  },
  {
    "label": "GetDurationForViewportDX()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetDurationForViewportDX(const float DX)"
  },
  {
    "label": "SlateUnitsToTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SlateUnitsToTime(const float X)"
  },
  {
    "label": "AlignTimeToPixel()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "AlignTimeToPixel(const double InTime, const double InScaleX)"
  },
  {
    "label": "AlignTimeToPixel()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "AlignTimeToPixel(const double Time)"
  },
  {
    "label": "RestrictEndTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "RestrictEndTime(const double InEndTime)"
  },
  {
    "label": "ScrollAtTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScrollAtTime(const double Time)"
  },
  {
    "label": "CenterOnTimeInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CenterOnTimeInterval(const double Time, const double Duration)"
  },
  {
    "label": "GetHorizontalScrollLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHorizontalScrollLimits(double& OutMinT, double& OutMaxT)"
  },
  {
    "label": "EnforceHorizontalScrollLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnforceHorizontalScrollLimits(const double U)"
  },
  {
    "label": "ZoomOnTimeInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomOnTimeInterval(const double Time, const double Duration)"
  },
  {
    "label": "RelativeZoomWithFixedX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RelativeZoomWithFixedX(const float Delta, const float X)"
  },
  {
    "label": "ZoomWithFixedX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomWithFixedX(const double NewScaleX, const float X)"
  },
  {
    "label": "SetScaleX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetScaleX(const double NewScaleX)"
  },
  {
    "label": "GetPosY()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPosY()"
  },
  {
    "label": "GetTopOffset()",
    "kind": "Method",
    "detail": "Function (PosY = InPosY ; } float)",
    "insertText": "GetTopOffset()"
  },
  {
    "label": "GetBottomOffset()",
    "kind": "Method",
    "detail": "Function (TopOffset = InTopOffset ; } float)",
    "insertText": "GetBottomOffset()"
  },
  {
    "label": "GetScrollableAreaHeight()",
    "kind": "Method",
    "detail": "Function (BottomOffset = InBottomOffset ; } float)",
    "insertText": "GetScrollableAreaHeight()"
  },
  {
    "label": "GetScrollPosY()",
    "kind": "Method",
    "detail": "Function (ScrollHeight = InScrollHeight ; } float)",
    "insertText": "GetScrollPosY()"
  },
  {
    "label": "GetViewportY()",
    "kind": "Method",
    "detail": "Function (ScrollPosY = InScrollPosY ; } float)",
    "insertText": "GetViewportY(const float Y)"
  },
  {
    "label": "IsLayoutCompactModeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayoutCompactModeEnabled()"
  },
  {
    "label": "AddDirtyFlags()",
    "kind": "Method",
    "detail": "Function (Layout . bIsCompactMode = ! Layout . bIsCompactMode ;)",
    "insertText": "AddDirtyFlags(ETimingTrackViewportDirtyFlags::VLayoutChanged)"
  },
  {
    "label": "ToggleLayoutMinTrackHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleLayoutMinTrackHeight()"
  },
  {
    "label": "OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnUserScrolled(TSharedPtr<SScrollBar> ScrollBar, float ScrollOffset)"
  },
  {
    "label": "UpdateScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollBar(TSharedPtr<SScrollBar> ScrollBar)"
  },
  {
    "label": "OnUserScrolledY()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnUserScrolledY(TSharedPtr<SScrollBar> ScrollBar, float ScrollOffset)"
  },
  {
    "label": "UpdateScrollBarY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollBarY(TSharedPtr<SScrollBar> ScrollBar)"
  },
  {
    "label": "GetDirtyFlags()",
    "kind": "Method",
    "detail": "Function (ETimingTrackViewportDirtyFlags)",
    "insertText": "GetDirtyFlags()"
  },
  {
    "label": "IsHorizontalViewportDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHorizontalViewportDirty()"
  },
  {
    "label": "IsVerticalViewportDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVerticalViewportDirty()"
  },
  {
    "label": "AddDirtyFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDirtyFlags(ETimingTrackViewportDirtyFlags InFlags)"
  },
  {
    "label": "ResetDirtyFlags()",
    "kind": "Method",
    "detail": "Function (DirtyFlags | = InFlags ; } void)",
    "insertText": "ResetDirtyFlags()"
  }
]