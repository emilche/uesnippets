[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MAKE_HEAP_H # define _LIBCPP___ALGORITHM_MAKE_HEAP_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / sift_down . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _RandomAccessIterator> inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using _CompRef = __comp_ref_type<_Compare>::type ; _CompRef __comp_ref = __comp ; using difference_type = iterator_traits<_RandomAccessIterator>::difference_type ; difference_type __n = __last - __first ;)",
    "insertText": "if(__n > 1)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__sift_down<)",
    "insertText": "_AlgPolicy(__first, __comp_ref, __n, __first + __start)"
  },
  {
    "label": "make_heap()",
    "kind": "Method",
    "detail": "Function (} } } template<class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__make_heap<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), __comp)"
  },
  {
    "label": "make_heap()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)"
  },
  {
    "label": "make_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_heap(std::move(__first), std::move(__last), __less<typename iterator_traits<_RandomAccessIterator>::value_type>())"
  }
]