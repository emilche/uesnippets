[
  {
    "label": "IErrorReportingWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IErrorReportingWidget"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Misc / Attribute . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SEditableText . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Framework / SlateDelegates . h \" class IErrorReportingWidget ; class SBox ; class SHorizontalBox ; enum class ETextFlowDirection : uint8 ; enum class ETextShapingMethod : uint8 ; class SEditableTextBox : public SBorder { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SEditableTextBox ) : _Style(&FCoreStyle::Get().GetWidgetStyle< FEditableTextBoxStyle >(\"NormalEditableTextBox\")) , _Text() , _HintText() , _SearchText() , _Font() , _ForegroundColor() , _ReadOnlyForegroundColor() , _FocusedForegroundColor() , _IsReadOnly( false ) , _IsPassword( false ) , _IsCaretMovedWhenGainFocus ( true ) , _SelectAllTextWhenFocused( false ) , _RevertTextOnEscape( false ) , _ClearKeyboardFocusOnCommit( true ) , _Justification(ETextJustify::Left) , _AllowContextMenu(true) , _MinDesiredWidth( 0.0f ) , _SelectAllTextOnCommit( false ) , _SelectWordOnMouseDoubleClick(true) , _BackgroundColor() , _Padding() , _ErrorReporting() , _VirtualKeyboardOptions(FVirtualKeyboardOptions()) , _VirtualKeyboardTrigger(EVirtualKeyboardTrigger::OnFocusByPointer) , _VirtualKeyboardDismissAction(EVirtualKeyboardDismissAction::TextChangeOnDismiss) , _OverflowPolicy()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FEditableTextBoxStyle, Style ) SLATE_ATTRIBUTE( FText, Text ) SLATE_ATTRIBUTE( FText, HintText ) SLATE_ATTRIBUTE( FText, SearchText ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ATTRIBUTE( FSlateColor, ForegroundColor ) SLATE_ATTRIBUTE( FSlateColor, ReadOnlyForegroundColor ) SLATE_ATTRIBUTE(FSlateColor, FocusedForegroundColor) SLATE_ATTRIBUTE( bool, IsReadOnly ) SLATE_ATTRIBUTE( bool, IsPassword ) SLATE_ATTRIBUTE( bool, IsCaretMovedWhenGainFocus ) SLATE_ATTRIBUTE( bool, SelectAllTextWhenFocused ) SLATE_ATTRIBUTE( bool, RevertTextOnEscape ) SLATE_ATTRIBUTE( bool, ClearKeyboardFocusOnCommit ) SLATE_ATTRIBUTE(ETextJustify::Type, Justification) SLATE_ATTRIBUTE(bool, AllowContextMenu) SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtender) SLATE_EVENT( FOnTextChanged, OnTextChanged ) SLATE_EVENT( FOnTextCommitted, OnTextCommitted ) SLATE_EVENT( FOnVerifyTextChanged, OnVerifyTextChanged ) SLATE_ATTRIBUTE( float, MinDesiredWidth ) SLATE_ATTRIBUTE( bool, SelectAllTextOnCommit ) SLATE_ATTRIBUTE(bool, SelectWordOnMouseDoubleClick) SLATE_EVENT(FOnKeyChar, OnKeyCharHandler) SLATE_EVENT(FOnKeyDown, OnKeyDownHandler) SLATE_ATTRIBUTE( FSlateColor, BackgroundColor ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_ARGUMENT( TSharedPtr<class IErrorReportingWidget>, ErrorReporting ) SLATE_ATTRIBUTE(EKeyboardType, VirtualKeyboardType) SLATE_ARGUMENT(FVirtualKeyboardOptions, VirtualKeyboardOptions) SLATE_ATTRIBUTE(EVirtualKeyboardTrigger, VirtualKeyboardTrigger) SLATE_ATTRIBUTE(EVirtualKeyboardDismissAction, VirtualKeyboardDismissAction) SLATE_ARGUMENT(TOptional<ETextShapingMethod>, TextShapingMethod) SLATE_ARGUMENT(TOptional<ETextFlowDirection>, TextFlowDirection) SLATE_ARGUMENT(TOptional<ETextOverflowPolicy>, OverflowPolicy) SLATE_END_ARGS() SLATE_API SEditableTextBox()"
  },
  {
    "label": "SEditableTextBox()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SEditableTextBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStyle(const FEditableTextBoxStyle* InStyle)"
  },
  {
    "label": "SetTextBlockStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBlockStyle(const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHintText(const TAttribute< FText >& InHintText)"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "SetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsReadOnly(TAttribute< bool > InIsReadOnly)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "SetIsPassword()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsPassword(TAttribute< bool > InIsPassword)"
  },
  {
    "label": "IsPassword()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPassword()"
  },
  {
    "label": "SetAllowContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllowContextMenu(TAttribute< bool > InAllowContextMenu)"
  },
  {
    "label": "SetVirtualKeyboardDismissAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualKeyboardDismissAction(TAttribute< EVirtualKeyboardDismissAction > InVirtualKeyboardDismissAction)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(const TAttribute<FSlateFontInfo>& InFont)"
  },
  {
    "label": "SetTextBoxForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBoxForegroundColor(const TAttribute<FSlateColor>& InForegroundColor)"
  },
  {
    "label": "SetTextBoxBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextBoxBackgroundColor(const TAttribute<FSlateColor>& InBackgroundColor)"
  },
  {
    "label": "SetReadOnlyForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadOnlyForegroundColor(const TAttribute<FSlateColor>& InReadOnlyForegroundColor)"
  },
  {
    "label": "SetFocusedForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocusedForegroundColor(const TAttribute<FSlateColor>& InFocusedForegroundColor)"
  },
  {
    "label": "SetMinimumDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinimumDesiredWidth(const TAttribute<float>& InMinimumDesiredWidth)"
  },
  {
    "label": "SetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCaretMovedWhenGainFocus(const TAttribute<bool>& InIsCaretMovedWhenGainFocus)"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(const TAttribute<bool>& InSelectAllTextWhenFocused)"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(const TAttribute<bool>& InRevertTextOnEscape)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(const TAttribute<bool>& InClearKeyboardFocusOnCommit)"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextOnCommit(const TAttribute<bool>& InSelectAllTextOnCommit)"
  },
  {
    "label": "SetSelectWordOnMouseDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectWordOnMouseDoubleClick(const TAttribute<bool>& InSelectWordOnMouseDoubleClick)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FText& InError)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FString& InError)"
  },
  {
    "label": "SetOnKeyCharHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnKeyCharHandler(FOnKeyChar InOnKeyCharHandler)"
  },
  {
    "label": "SetOnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnKeyDownHandler(FOnKeyDown InOnKeyDownHandler)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "AnyTextSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyTextSelected()"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedText()"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "GoTo(NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "EnableTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTextInputMethodContext()"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasError()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "GetDefaultAccessibleText()",
    "kind": "Method",
    "detail": "Function (TOptional<FText>)",
    "insertText": "GetDefaultAccessibleText(EAccessibleType AccessibleType = EAccessibleType::Main)"
  },
  {
    "label": "OnEditableTextChanged()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnEditableTextChanged(const FText& InText)"
  },
  {
    "label": "OnEditableTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditableTextCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "DeterminePadding()",
    "kind": "Method",
    "detail": "Function (const FEditableTextBoxStyle* Style ; TSharedPtr<SBox> PaddingBox ; TSharedPtr<SEditableText> EditableText ; TAttribute<FMargin> PaddingOverride ; TAttribute<FSlateFontInfo> FontOverride ; TAttribute<FSlateColor> ForegroundColorOverride ; TAttribute<FSlateColor> BackgroundColorOverride ; TAttribute<FSlateColor> ReadOnlyForegroundColorOverride ; TAttribute<FSlateColor> FocusedForegroundColorOverride ; TSharedPtr<SHorizontalBox> Box ; TSharedPtr<class IErrorReportingWidget> ErrorReporting ; FOnTextChanged OnTextChanged ; FOnTextCommitted OnTextCommitted ; FOnVerifyTextChanged OnVerifyTextChanged ; private : FMargin)",
    "insertText": "DeterminePadding()"
  },
  {
    "label": "DetermineFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "DetermineFont()"
  },
  {
    "label": "DetermineBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "DetermineBackgroundColor()"
  },
  {
    "label": "DetermineForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "DetermineForegroundColor()"
  },
  {
    "label": "GetBorderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* BorderImageNormal ; const FSlateBrush* BorderImageHovered ; const FSlateBrush* BorderImageFocused ; const FSlateBrush* BorderImageReadOnly ; const FSlateBrush*)",
    "insertText": "GetBorderImage()"
  }
]