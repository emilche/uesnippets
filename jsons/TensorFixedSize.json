[
  {
    "label": "TensorFixedSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorFixedSize"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_FIXED_SIZE_H # define EIGEN_CXX11_TENSOR_TENSOR_FIXED_SIZE_H namespace Eigen { template<Scalar_,Dimensions_,int Options_,IndexType> class TensorFixedSize : public TensorBase<TensorFixedSize<Scalar_,Dimensions_,Options_,IndexType>> { public : typedef TensorFixedSize<Scalar_,Dimensions_,Options_,IndexType> Self ; typedef TensorBase<TensorFixedSize<Scalar_,Dimensions_,Options_,IndexType>> Base ; typedef Eigen::internal::nested<Self>::type Nested ; typedef internal::traits<Self>::StorageKind StorageKind ; typedef internal::traits<Self>::Index Index ; typedef Scalar_ Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Base::CoeffReturnType CoeffReturnType ; const int Options = Options_ ; enum { IsAligned =)",
    "insertText": "bool(EIGEN_MAX_ALIGN_BYTES>0), PacketAccess = (internal::packet_traits<Scalar>::size > 1)"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; typedef Dimensions_ Dimensions ; const std::size_t NumIndices = Dimensions::count ; protected : TensorStorage<Scalar,Dimensions,Options> m_storage ; public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rank()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "size()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar*)",
    "insertText": "data()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} Self&)",
    "insertText": "base()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return coeff(array<Index, NumIndices>{{firstIndex, otherIndices...}})"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeff(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(checkIndexRange(indices))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(index >= 0 && index < size())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "coeff()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 0, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . IndexTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index firstIndex, IndexTypes... otherIndices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return coeffRef(array<Index, NumIndices>{{firstIndex, otherIndices...}})"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . IndexTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index firstIndex, IndexTypes... otherIndices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return this->operator()(array<Index, NumIndices>{{firstIndex, otherIndices...}})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # else EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1, Index i2)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const Index index = i2 + m_storage .)",
    "insertText": "dimensions()[2] * (i1 + m_storage.dimensions()[1] * i0)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} else { const Index index = i0 + m_storage .)",
    "insertText": "dimensions()[0] * (i1 + m_storage.dimensions()[1] * i2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1, Index i2, Index i3)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const Index index = i3 + m_storage .)",
    "insertText": "dimensions()[3] * (i2 + m_storage.dimensions()[2] * (i1 + m_storage.dimensions()[1] * i0))"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} else { const Index index = i0 + m_storage .)",
    "insertText": "dimensions()[0] * (i1 + m_storage.dimensions()[1] * (i2 + m_storage.dimensions()[2] * i3))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index i0, Index i1, Index i2, Index i3, Index i4)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const Index index = i4 + m_storage .)",
    "insertText": "dimensions()[4] * (i3 + m_storage.dimensions()[3] * (i2 + m_storage.dimensions()[2] * (i1 + m_storage.dimensions()[1] * i0)))"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} else { const Index index = i0 + m_storage .)",
    "insertText": "dimensions()[0] * (i1 + m_storage.dimensions()[1] * (i2 + m_storage.dimensions()[2] * (i3 + m_storage.dimensions()[3] * i4)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(checkIndexRange(indices))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()(Index index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator()()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar&)",
    "insertText": "operator(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 1, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof...(otherIndices) + 1 == NumIndices, YOU_MADE_A_PROGRAMMING_MISTAKE) return operator()(array<Index, NumIndices>{{firstIndex, otherIndices...}})"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index >= 0 && index < size())"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumIndices == 1, YOU_MADE_A_PROGRAMMING_MISTAKE) return coeffRef(index)"
  },
  {
    "label": "TensorFixedSize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorFixedSize() : m_storage()"
  },
  {
    "label": "TensorFixedSize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorFixedSize(const Self& other) : m_storage(other.m_storage)"
  },
  {
    "label": "TensorFixedSize()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_RVALUE_REFERENCES EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorFixedSize(Self&& other) : m_storage(other.m_storage)"
  },
  {
    "label": "TensorFixedSize()",
    "kind": "Method",
    "detail": "Function (} # endif template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorFixedSize(const TensorBase<OtherDerived, ReadOnlyAccessors>& other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef TensorAssignOp<TensorFixedSize,const OtherDerived> Assign ; Assign)",
    "insertText": "assign(*this, other.derived())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::TensorExecutor<const Assign,DefaultDevice)",
    "insertText": "run(assign, DefaultDevice())"
  },
  {
    "label": "TensorFixedSize()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorFixedSize(const TensorBase<OtherDerived, WriteAccessors>& other)"
  },
  {
    "label": "EIGEN_TENSOR_INHERIT_ASSIGNMENT_EQUAL_OPERATOR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_TENSOR_INHERIT_ASSIGNMENT_EQUAL_OPERATOR(TensorFixedSize) protected: EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool checkIndexRange(const array<Index, NumIndices>&)"
  },
  {
    "label": "linearizedIndex()",
    "kind": "Method",
    "detail": "Function (using internal::array_apply_and_reduce ; using internal::array_zip_and_reduce ; using internal::greater_equal_zero_op ; using internal::logical_and_op ; using internal::lesser_op ; return true ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "linearizedIndex(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} else { return m_storage .)",
    "insertText": "dimensions().IndexOfColMajor(indices)"
  }
]