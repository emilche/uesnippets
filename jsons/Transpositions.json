[
  {
    "label": "TranspositionsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TranspositionsBase"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Transpositions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transpositions"
  },
  {
    "label": "Map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Map"
  },
  {
    "label": "TranspositionsWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TranspositionsWrapper"
  },
  {
    "label": "Transpose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transpose"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRANSPOSITIONS_H # define EIGEN_TRANSPOSITIONS_H namespace Eigen { template<Derived> class TranspositionsBase { typedef internal::traits<Derived> Traits ; public : typedef Traits::IndicesType IndicesType ; typedef IndicesType::Scalar StorageIndex ; typedef Eigen::Index Index ; EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> Derived&)",
    "insertText": "operator(const TranspositionsBase<OtherDerived>& other)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "indices() = other.indices()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "size()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "cols()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const StorageIndex&)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} StorageIndex&)",
    "insertText": "coeffRef(Index i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex&)",
    "insertText": "operator()(Index i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex&)",
    "insertText": "operator(Index i)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const IndicesType&)",
    "insertText": "indices()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(Index newSize)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "indices().resize(newSize)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIdentity()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} Transpose<TranspositionsBase>)",
    "insertText": "inverse()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} Transpose<TranspositionsBase>)",
    "insertText": "transpose()"
  },
  {
    "label": "Transpositions()",
    "kind": "Method",
    "detail": "Function (} protected : } ; namespace internal { template<int SizeAtCompileTime,int MaxSizeAtCompileTime,_StorageIndex> struct traits<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,_StorageIndex>> : traits<PermutationMatrix<SizeAtCompileTime,MaxSizeAtCompileTime,_StorageIndex>> { typedef Matrix<_StorageIndex,SizeAtCompileTime,1,0,MaxSizeAtCompileTime,1> IndicesType ; typedef TranspositionsStorage StorageKind ; } ; } template<int SizeAtCompileTime,int MaxSizeAtCompileTime,_StorageIndex> class Transpositions : public TranspositionsBase<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,_StorageIndex>> { typedef internal::traits<Transpositions> Traits ; public : typedef TranspositionsBase<Transpositions> Base ; typedef Traits::IndicesType IndicesType ; typedef IndicesType::Scalar StorageIndex ;)",
    "insertText": "Transpositions()"
  },
  {
    "label": "Transpositions()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived>)",
    "insertText": "Transpositions(const TranspositionsBase<OtherDerived>& other) : m_indices(other.indices())"
  },
  {
    "label": "Transpositions()",
    "kind": "Method",
    "detail": "Function (} template<Other>)",
    "insertText": "Transpositions(const MatrixBase<Other>& indices) : m_indices(indices)"
  },
  {
    "label": "Transpositions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Transpositions(Index size) : m_indices(size)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Map(const StorageIndex* indicesPtr, Index size) : m_indices(indicesPtr,size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN Map&)",
    "insertText": "operator(const Map& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TranspositionsDerived,MatrixDerived> EIGEN_DEVICE_FUNC const Product<TranspositionsDerived,MatrixDerived,AliasFreeProduct>)",
    "insertText": "operator(const TranspositionsBase<TranspositionsDerived> &transpositions, const MatrixBase<MatrixDerived>& matrix)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Derived> struct traits<Transpose<TranspositionsBase<Derived>>> : traits<Derived> { } ; } template<TranspositionsDerived> class Transpose<TranspositionsBase<TranspositionsDerived>> { typedef TranspositionsDerived TranspositionType ; typedef TranspositionType::IndicesType IndicesType ; public :)",
    "insertText": "Transpose(const TranspositionType& t) : m_transpositions(t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> const Product<OtherDerived,Transpose,AliasFreeProduct>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& matrix, const Transpose& trt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> const Product<Transpose,OtherDerived,AliasFreeProduct>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& matrix)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const TranspositionType&)",
    "insertText": "nestedExpression()"
  }
]