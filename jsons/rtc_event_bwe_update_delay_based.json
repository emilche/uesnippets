[
  {
    "label": "RtcEventLogEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogEnum"
  },
  {
    "label": "LoggedBweDelayBasedUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedBweDelayBasedUpdate"
  },
  {
    "label": "RtcEventBweUpdateDelayBased",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventBweUpdateDelayBased"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_BWE_UPDATE_DELAY_BASED_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_BWE_UPDATE_DELAY_BASED_H_ # include<stdint . h> # include<limits> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / network_state_predictor . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_definition . h \" namespace webrtc { template<> class RtcEventLogEnum<BandwidthUsage> { uint64_t kBwNormal = 0 ; uint64_t kBwUnderusing = 1 ; uint64_t kBwOverusing = 2 ; public : uint64_t)",
    "insertText": "Encode(BandwidthUsage x)"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatusOr<BandwidthUsage>)",
    "insertText": "Decode(uint64_t x)"
  },
  {
    "label": "LoggedBweDelayBasedUpdate()",
    "kind": "Method",
    "detail": "Function (} } ; struct LoggedBweDelayBasedUpdate {)",
    "insertText": "LoggedBweDelayBasedUpdate()"
  },
  {
    "label": "LoggedBweDelayBasedUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedBweDelayBasedUpdate(Timestamp timestamp, int32_t bitrate_bps, BandwidthUsage detector_state) : timestamp(timestamp), bitrate_bps(bitrate_bps), detector_state(detector_state)"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "RtcEventBweUpdateDelayBased()",
    "kind": "Method",
    "detail": "Function (int32_t bitrate_bps ; BandwidthUsage detector_state ; } ; class RtcEventBweUpdateDelayBased final : public RtcEvent { public : Type kType = Type::BweUpdateDelayBased ;)",
    "insertText": "RtcEventBweUpdateDelayBased(int32_t bitrate_bps, BandwidthUsage detector_state)"
  },
  {
    "label": "RtcEventBweUpdateDelayBased()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventBweUpdateDelayBased()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "bitrate_bps()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "bitrate_bps()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "Parse(absl::string_view encoded_bytes, bool batched, std::vector<LoggedBweDelayBasedUpdate>& output)"
  },
  {
    "label": "RtcEventBweUpdateDelayBased()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventBweUpdateDelayBased(const RtcEventBweUpdateDelayBased& other)"
  }
]