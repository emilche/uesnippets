[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_Sentinel1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel1"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_Sentinel2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel2"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_PARTIAL_SORT_COPY_H # define _LIBCPP___ALGORITHM_PARTIAL_SORT_COPY_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / make_heap . h> # include<__algorithm / make_projected . h> # include<__algorithm / sift_down . h> # include<__algorithm / sort_heap . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / iterator_traits . h> # include<__type_traits / is_callable . h> # include<__utility / move . h> # include<__utility / pair . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _InputIterator, class _Sentinel1, class _RandomAccessIterator, class _Sentinel2, class _Proj1, class _Proj2> _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_InputIterator, _RandomAccessIterator> __partial_sort_copy(_InputIterator __first, _Sentinel1 __last, _RandomAccessIterator __result_first, _Sentinel2 __result_last, _Compare&& __comp, _Proj1&& __proj1, _Proj2&& __proj2)"
  },
  {
    "label": "__make_projected()",
    "kind": "Method",
    "detail": "Function (_RandomAccessIterator __r = __result_first ; auto&& __projected_comp =)",
    "insertText": "__make_projected(__comp, __proj2)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__make_heap<)",
    "insertText": "_AlgPolicy(__result_first, __r, __projected_comp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_RandomAccessIterator>::difference_type __len = __r - __result_first ;)",
    "insertText": "for(; __first != __last; ++__first) if (std::__invoke(__comp, std::__invoke(__proj1, *__first), std::__invoke(__proj2, *__result_first)))"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (* __result_first =* __first ; std::__sift_down<)",
    "insertText": "_AlgPolicy(__result_first, __projected_comp, __len, __result_first)"
  },
  {
    "label": "_RandomAccessIterator()",
    "kind": "Method",
    "detail": "Function (} return pair<_InputIterator,)",
    "insertText": "_RandomAccessIterator(_IterOps<_AlgPolicy>::next(std::move(__first), std::move(__last)), std::move(__r))"
  },
  {
    "label": "partial_sort_copy()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _RandomAccessIterator,class _Compare> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _RandomAccessIterator)",
    "insertText": "partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (using _Comp_ref = __comp_ref_type<_Compare>::type ; auto __result = std::__partial_sort_copy<)",
    "insertText": "_ClassicAlgPolicy(__first, __last, __result_first, __result_last, static_cast<_Comp_ref>(__comp), __identity(), __identity())"
  }
]