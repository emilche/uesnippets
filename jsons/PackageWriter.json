[
  {
    "label": "FAssetRegistryState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryState"
  },
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FLargeMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLargeMemoryWriter"
  },
  {
    "label": "ICookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookedPackageWriter"
  },
  {
    "label": "IPackageStoreWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageStoreWriter"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "IDeterminismHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDeterminismHelper"
  },
  {
    "label": "FPackageStoreEntryResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageStoreEntryResource"
  },
  {
    "label": "FSavePackageArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageArgs"
  },
  {
    "label": "FSavePackageResultStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageResultStruct"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageWriter"
  },
  {
    "label": "FCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapabilities"
  },
  {
    "label": "FBeginPackageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginPackageInfo"
  },
  {
    "label": "FCommitAttachmentInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommitAttachmentInfo"
  },
  {
    "label": "FCommitPackageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommitPackageInfo"
  },
  {
    "label": "FPackageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageInfo"
  },
  {
    "label": "FBulkDataInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBulkDataInfo"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FAdditionalFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdditionalFileInfo"
  },
  {
    "label": "FLinkerAdditionalDataInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkerAdditionalDataInfo"
  },
  {
    "label": "FPackageTrailerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageTrailerInfo"
  },
  {
    "label": "FPackageHashes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageHashes"
  },
  {
    "label": "FCookCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookCapabilities"
  },
  {
    "label": "FCookInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookInfo"
  },
  {
    "label": "ECookMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECookMode"
  },
  {
    "label": "FDeleteByFree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeleteByFree"
  },
  {
    "label": "FPreviousCookedBytesData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreviousCookedBytesData"
  },
  {
    "label": "FBeginCacheForCookedPlatformDataInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBeginCacheForCookedPlatformDataInfo"
  },
  {
    "label": "IPackageWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Containers / StringView . h \" # include \" IO / IoDispatcher . h \" # include \" IO / IoHash . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / SecureHash . h \" # include \" Serialization / CompactBinary . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" class FAssetRegistryState ; class FCbObject ; class FCbObjectView ; class FLargeMemoryWriter ; class ICookedPackageWriter ; class IPackageStoreWriter ; class UObject ; namespace UE::Cook { class IDeterminismHelper ; } struct FPackageStoreEntryResource ; struct FSavePackageArgs ; struct FSavePackageResultStruct ; enum class EPackageWriterResult : uint8 { Success,Error,Timeout,} ; class IPackageWriter { public : ~)",
    "insertText": "IPackageWriter()"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (struct FCapabilities { bool bDeclareRegionForEachAdditionalFile = false ; bool bIgnoreHeaderDiffs = false ; bool bDeterminismDebug = false ; } ; FCapabilities)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (} struct FBeginPackageInfo { FName PackageName ; FString LooseFilePath ; } ; void)",
    "insertText": "BeginPackage(const FBeginPackageInfo& Info)"
  },
  {
    "label": "FCommitPackageInfo()",
    "kind": "Method",
    "detail": "Function (TArray<FCommitAttachmentInfo> Attachments ; ECommitStatus Status ; EWriteOptions WriteOptions ; PRAGMA_DISABLE_DEPRECATION_WARNINGS ;)",
    "insertText": "FCommitPackageInfo()"
  },
  {
    "label": "FCommitPackageInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCommitPackageInfo(const FCommitPackageInfo&)"
  },
  {
    "label": "FCommitPackageInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCommitPackageInfo(FCommitPackageInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCommitPackageInfo&)",
    "insertText": "operator(FCommitPackageInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCommitPackageInfo&)",
    "insertText": "operator(FCommitPackageInfo&&)"
  },
  {
    "label": "CommitPackage()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS ; } ; void)",
    "insertText": "CommitPackage(FCommitPackageInfo&& Info)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (struct FPackageInfo { FName PackageName ; FString LooseFilePath ; uint64 HeaderSize = 0 ; FIoChunkId ChunkId = FIoChunkId::InvalidChunkId ; uint16 MultiOutputIndex = 0 ; } ; void)",
    "insertText": "WritePackageData(const FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (struct FBulkDataInfo { enum EType { AppendToExports,BulkSegment,Mmap,Optional,NumTypes,} ; FName PackageName ; EType BulkDataType = BulkSegment ; FString LooseFilePath ; FIoChunkId ChunkId = FIoChunkId::InvalidChunkId ; uint16 MultiOutputIndex = 0 ; } ; void)",
    "insertText": "WriteBulkData(const FBulkDataInfo& Info, const FIoBuffer& BulkData, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (struct FAdditionalFileInfo { FName PackageName ; FString Filename ; FIoChunkId ChunkId = FIoChunkId::InvalidChunkId ; uint16 MultiOutputIndex = 0 ; } ; void)",
    "insertText": "WriteAdditionalFile(const FAdditionalFileInfo& Info, const FIoBuffer& FileData)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (struct FLinkerAdditionalDataInfo { FName PackageName ; uint16 MultiOutputIndex = 0 ; } ; void)",
    "insertText": "WriteLinkerAdditionalData(const FLinkerAdditionalDataInfo& Info, const FIoBuffer& Data, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "GetExportsFooterSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetExportsFooterSize()"
  },
  {
    "label": "CreateLinkerArchive()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FLargeMemoryWriter>)",
    "insertText": "CreateLinkerArchive(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "CreateLinkerExportsArchive()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FLargeMemoryWriter>)",
    "insertText": "CreateLinkerExportsArchive(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "RegisterDeterminismHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDeterminismHelper(UObject* SourceObject, const TRefCountPtr<UE::Cook::IDeterminismHelper>& DeterminismHelper)"
  },
  {
    "label": "IsPreSaveCompleted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPreSaveCompleted()"
  },
  {
    "label": "ICookedPackageWriter()",
    "kind": "Method",
    "detail": "Function (struct FPackageHashes : FThreadSafeRefCountedObject { TMap<FIoChunkId,FIoHash> ChunkHashes ; FMD5Hash PackageHash ; TFuture<int> CompletionFuture ; } ; class ICookedPackageWriter : public IPackageWriter { public : ~)",
    "insertText": "ICookedPackageWriter()"
  },
  {
    "label": "GetCookCapabilities()",
    "kind": "Method",
    "detail": "Function (enum class EPackageHeaderFormat { PackageFileSummary,ZenPackageSummary } ; struct FCookCapabilities { bool bDiffModeSupported = false ; bool bReadOnly = false ; bool bOverridesPackageModificationStatus = false ; bool bOplogAttachments = false ; EPackageHeaderFormat HeaderFormat = EPackageHeaderFormat::PackageFileSummary ; } ; FCookCapabilities)",
    "insertText": "GetCookCapabilities()"
  },
  {
    "label": "GetPreviousCookTime()",
    "kind": "Method",
    "detail": "Function (} FDateTime)",
    "insertText": "GetPreviousCookTime()"
  },
  {
    "label": "AsCookedPackageWriter()",
    "kind": "Method",
    "detail": "Function (} ICookedPackageWriter*)",
    "insertText": "AsCookedPackageWriter()"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCook(const FCookInfo& Info)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCook(const FCookInfo& Info)"
  },
  {
    "label": "LoadPreviousAssetRegistry()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FAssetRegistryState>)",
    "insertText": "LoadPreviousAssetRegistry()"
  },
  {
    "label": "GetOplogAttachment()",
    "kind": "Method",
    "detail": "Function (FCbObject)",
    "insertText": "GetOplogAttachment(FName PackageName, FUtf8StringView AttachmentKey)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackages(TArrayView<const FName> PackageNamesToRemove)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackages()"
  },
  {
    "label": "UpdatePackageModificationStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePackageModificationStatus(FName PackageName, bool bIterativelyUnmodified, bool& bInOutShouldIterativelySkip)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FDeleteByFree { void)",
    "insertText": "operator()(void* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "GetPreviousCookedBytes()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPreviousCookedBytesData { TUniquePtr<uint8,FDeleteByFree> Data ; int64 Size ; int64 HeaderSize ; int64 StartOffset ; } ; bool)",
    "insertText": "GetPreviousCookedBytes(const FPackageInfo& Info, FPreviousCookedBytesData& OutData)"
  },
  {
    "label": "unimplemented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unimplemented()"
  },
  {
    "label": "EPackageWriterResult()",
    "kind": "Method",
    "detail": "Function (} struct FBeginCacheForCookedPlatformDataInfo { FName PackageName ; const ITargetPlatform* TargetPlatform ; TConstArrayView<UObject*> SaveableObjects ; uint32 SaveFlags ; } ; using FBeginCacheCallback = TUniqueFunction<)",
    "insertText": "EPackageWriterResult(FBeginCacheForCookedPlatformDataInfo& Info)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FRegisterDeterminismHelperCallback = TUniqueFunction<)",
    "insertText": "void(UObject* SourceObject, const TRefCountPtr<UE::Cook::IDeterminismHelper>& DeterminismHelper)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (EPackageWriterResult)",
    "insertText": "BeginCacheForCookedPlatformData(FBeginCacheForCookedPlatformDataInfo& Info)"
  },
  {
    "label": "IsAnotherSaveNeeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnotherSaveNeeded(FSavePackageResultStruct& PreviousResult, FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "TryReadMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReadMPCookMessageForPackage(FName PackageName, FCbObjectView Message)"
  },
  {
    "label": "AsPackageStoreWriter()",
    "kind": "Method",
    "detail": "Function (IPackageStoreWriter*)",
    "insertText": "AsPackageStoreWriter()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; const ANSICHAR*)",
    "insertText": "LexToString(IPackageWriter::FBulkDataInfo::EType Value)"
  }
]