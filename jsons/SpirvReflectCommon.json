[
  {
    "label": "SHADERCOMPILERCOMMON_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SHADERCOMPILERCOMMON_API"
  },
  {
    "label": "AddDescriptorBinding()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # if PLATFORM_MAC | | PLATFORM_WINDOWS | | PLATFORM_LINUX THIRD_PARTY_INCLUDES_START # include<spirv / unified1 / spirv . h> # include \" spirv_reflect . h \" THIRD_PARTY_INCLUDES_END # endif struct FSpirvReflectBindings { TArray<SpvReflectInterfaceVariable*> InputAttributes ; TArray<SpvReflectInterfaceVariable*> OutputAttributes ; TSet<SpvReflectDescriptorBinding*> AtomicCounters ; TArray<SpvReflectDescriptorBinding*> InputAttachments ; TArray<SpvReflectDescriptorBinding*> UniformBuffers ; TArray<SpvReflectDescriptorBinding*> Samplers ; TArray<SpvReflectDescriptorBinding*> TextureSRVs ; TArray<SpvReflectDescriptorBinding*> TextureUAVs ; TArray<SpvReflectDescriptorBinding*> TBufferSRVs ; TArray<SpvReflectDescriptorBinding*> TBufferUAVs ; TArray<SpvReflectDescriptorBinding*> SBufferSRVs ; TArray<SpvReflectDescriptorBinding*> SBufferUAVs ; TArray<SpvReflectDescriptorBinding*> AccelerationStructures ; void)",
    "insertText": "AddDescriptorBinding(SpvReflectDescriptorBinding* InBinding)"
  },
  {
    "label": "GatherDescriptorBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDescriptorBindings(const spv_reflect::ShaderModule& SpirvReflection)"
  },
  {
    "label": "GatherInputAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInputAttributes(const spv_reflect::ShaderModule& SpirvReflection)"
  },
  {
    "label": "GatherOutputAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherOutputAttributes(const spv_reflect::ShaderModule& SpirvReflection)"
  },
  {
    "label": "AssignInputAttributeLocationsBySemanticIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignInputAttributeLocationsBySemanticIndex(spv_reflect::ShaderModule& SpirvReflection, const ANSICHAR* SemanticName)"
  }
]