[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericWindow"
  },
  {
    "label": "IAccessibleWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleWidget"
  },
  {
    "label": "FGenericAccessibleUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleUser"
  },
  {
    "label": "FGenericAccessibleUserRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleUserRegistry"
  },
  {
    "label": "IAccessibleWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleWindow"
  },
  {
    "label": "IAccessibleActivatable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleActivatable"
  },
  {
    "label": "IAccessibleProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleProperty"
  },
  {
    "label": "IAccessibleText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleText"
  },
  {
    "label": "IAccessibleTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleTable"
  },
  {
    "label": "IAccessibleTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleTableRow"
  },
  {
    "label": "FAccessibleEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessibleEventArgs"
  },
  {
    "label": "FGenericAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleMessageHandler"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Math / Box2D . h \" # include \" Misc / Variant . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" enum class EAccessibleBehavior : uint8 { NotAccessible,Auto,Summary,Custom,ToolTip } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAccessibility, Log, All)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY class FGenericWindow ; class IAccessibleWidget ;)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Accessibility\"), STATGROUP_Accessibility, STATCAT_Advanced)"
  },
  {
    "label": "FGenericAccessibleUser()",
    "kind": "Method",
    "detail": "Function (enum class EAccessibleWidgetType : uint8 { Unknown,Button,CheckBox,ComboBox,Hyperlink,Image,Layout,ScrollBar,Slider,Text,TextEdit,Window,List,ListItem } ; enum class EAccessibleEvent : uint8 { FocusChange,Activate,Notification,ParentChanged,WidgetRemoved } ; typedef int32 FAccessibleUserIndex ; class FGenericAccessibleUser { class FGenericAccessibleUserRegistry ; public :)",
    "insertText": "FGenericAccessibleUser(const FAccessibleUserIndex InUserIndex) : UserIndex(InUserIndex)"
  },
  {
    "label": "FGenericAccessibleUser()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGenericAccessibleUser()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (FAccessibleUserIndex)",
    "insertText": "GetIndex()"
  },
  {
    "label": "SetFocusedAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetFocusedAccessibleWidget(const TSharedRef<IAccessibleWidget>& InWidget)"
  },
  {
    "label": "ClearFocusedAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (FocusedAccessibleWidget = InWidget ; return true ; } void)",
    "insertText": "ClearFocusedAccessibleWidget()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FocusedAccessibleWidget .)",
    "insertText": "Reset()"
  },
  {
    "label": "OnRegistered()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "OnRegistered()"
  },
  {
    "label": "OnUnregistered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnUnregistered()"
  },
  {
    "label": "FGenericAccessibleUserRegistry()",
    "kind": "Method",
    "detail": "Function (} private : FAccessibleUserIndex UserIndex ; TWeakPtr<IAccessibleWidget> FocusedAccessibleWidget ; } ; class FGenericAccessibleUserRegistry { public : ~)",
    "insertText": "FGenericAccessibleUserRegistry()"
  },
  {
    "label": "RegisterUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterUser(const TSharedRef<FGenericAccessibleUser>& User)"
  },
  {
    "label": "UnregisterUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterUser(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "UnregisterAllUsers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAllUsers()"
  },
  {
    "label": "IsUserRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserRegistered(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "GetUser()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericAccessibleUser>)",
    "insertText": "GetUser(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "GetNumberofUsers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberofUsers()"
  },
  {
    "label": "GetAllUsers()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FGenericAccessibleUser>>)",
    "insertText": "GetAllUsers()"
  },
  {
    "label": "GetPrimaryUserIndex()",
    "kind": "Method",
    "detail": "Function (FAccessibleUserIndex)",
    "insertText": "GetPrimaryUserIndex()"
  },
  {
    "label": "GetNativeWindow()",
    "kind": "Method",
    "detail": "Function (const FAccessibleUserIndex PrimaryUserIndex = 0 ; return PrimaryUserIndex ; } protected : TMap<FAccessibleUserIndex,TSharedRef<FGenericAccessibleUser>> UsersMap ; } ; class IAccessibleWindow { public : enum class EWindowDisplayState { Normal,Minimize,Maximize } ; TSharedPtr<FGenericWindow>)",
    "insertText": "GetNativeWindow()"
  },
  {
    "label": "GetChildAtPosition()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetChildAtPosition(int32 X, int32 Y)"
  },
  {
    "label": "GetUserFocusedWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetUserFocusedWidget(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "SupportsDisplayState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDisplayState(EWindowDisplayState State)"
  },
  {
    "label": "GetDisplayState()",
    "kind": "Method",
    "detail": "Function (EWindowDisplayState)",
    "insertText": "GetDisplayState()"
  },
  {
    "label": "SetDisplayState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayState(EWindowDisplayState State)"
  },
  {
    "label": "IsModal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModal()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (} ; class IAccessibleActivatable { public : void)",
    "insertText": "Activate()"
  },
  {
    "label": "IsCheckable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckable()"
  },
  {
    "label": "GetValueAsVariant()",
    "kind": "Method",
    "detail": "Function (FVariant)",
    "insertText": "GetValueAsVariant()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const FString& Value)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (} } ; class IAccessibleText { public : const FString&)",
    "insertText": "GetText()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (} ; class IAccessibleTable { public : TArray<TSharedPtr<IAccessibleWidget>>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "CanSupportMultiSelection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSupportMultiSelection()"
  },
  {
    "label": "AddToSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToSelection()"
  },
  {
    "label": "RemoveFromSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromSelection()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "IAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IAccessibleWidget()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} const AccessibleWidgetId InvalidAccessibleWidgetId = - 1 ; AccessibleWidgetId)",
    "insertText": "GetId()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetWindow()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBox2D)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetParent()"
  },
  {
    "label": "SearchForAncestorFrom()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> TSharedPtr<IAccessibleWidget>)",
    "insertText": "SearchForAncestorFrom(const TSharedRef<IAccessibleWidget>& Source, PredicateType Predicate)"
  },
  {
    "label": "GetNextSibling()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetNextSibling()"
  },
  {
    "label": "SearchForNextSiblingFrom()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> TSharedPtr<IAccessibleWidget>)",
    "insertText": "SearchForNextSiblingFrom(const TSharedRef<IAccessibleWidget>& Source, PredicateType Predicate)"
  },
  {
    "label": "GetPreviousSibling()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetPreviousSibling()"
  },
  {
    "label": "SearchForPreviousSiblingFrom()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> TSharedPtr<IAccessibleWidget>)",
    "insertText": "SearchForPreviousSiblingFrom(const TSharedRef<IAccessibleWidget>& Source, PredicateType Predicate)"
  },
  {
    "label": "GetNextWidgetInHierarchy()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetNextWidgetInHierarchy()"
  },
  {
    "label": "SearchForNextWidgetInHierarchyFrom()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> TSharedPtr<IAccessibleWidget>)",
    "insertText": "SearchForNextWidgetInHierarchyFrom(const TSharedRef<IAccessibleWidget>& Source, PredicateType Predicate)"
  },
  {
    "label": "GetPreviousWidgetInHierarchy()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetPreviousWidgetInHierarchy()"
  },
  {
    "label": "SearchForPreviousWidgetInHierarchyFrom()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> TSharedPtr<IAccessibleWidget>)",
    "insertText": "SearchForPreviousWidgetInHierarchyFrom(const TSharedRef<IAccessibleWidget>& Source, PredicateType Predicate)"
  },
  {
    "label": "GetChildAt()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetChildAt(int32 Index)"
  },
  {
    "label": "GetNumberOfChildren()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfChildren()"
  },
  {
    "label": "SearchForFirstChildFrom()",
    "kind": "Method",
    "detail": "Function (template<PredicateType> TSharedPtr<IAccessibleWidget>)",
    "insertText": "SearchForFirstChildFrom(const TSharedRef<IAccessibleWidget>& Source, PredicateType Predicate)"
  },
  {
    "label": "GetChildAt()",
    "kind": "Method",
    "detail": "Function (Child = Source ->)",
    "insertText": "GetChildAt(ChildIndex)"
  },
  {
    "label": "GetClassName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClassName()"
  },
  {
    "label": "GetWidgetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWidgetName()"
  },
  {
    "label": "GetHelpText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHelpText()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<2 5 6> Builder ; Builder .)",
    "insertText": "Appendf(TEXT(\"Label: %s. Role: %s.\"), *GetWidgetName(), *GetClassName())"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "SupportsFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsFocus()"
  },
  {
    "label": "SupportsAccessibleFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsAccessibleFocus()"
  },
  {
    "label": "CanCurrentlyAcceptAccessibleFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCurrentlyAcceptAccessibleFocus()"
  },
  {
    "label": "HasUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserFocus(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "AsWindow()",
    "kind": "Method",
    "detail": "Function (IAccessibleWindow*)",
    "insertText": "AsWindow()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IAccessibleWidget> Widget ; EAccessibleEvent Event ; FVariant OldValue ; FVariant NewValue ; FAccessibleUserIndex UserIndex ; } ; class FGenericAccessibleMessageHandler { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FAccessibleEvent, const FAccessibleEventArgs&)"
  },
  {
    "label": "FGenericAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGenericAccessibleMessageHandler()"
  },
  {
    "label": "UnbindAccessibleEventDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindAccessibleEventDelegate()"
  },
  {
    "label": "ApplicationIsAccessible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ApplicationIsAccessible()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "GetAccessibleWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetAccessibleWindow(const TSharedRef<FGenericWindow>& InWindow)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (AccessibleEventDelegate .)",
    "insertText": "ExecuteIfBound(Args)"
  },
  {
    "label": "SetAccessibleEventDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAccessibleEventDelegate(const FAccessibleEvent& Delegate)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (AccessibleEventDelegate .)",
    "insertText": "Unbind()"
  },
  {
    "label": "RunInThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunInThread(const TFunction<void()>& Function, bool bWaitForCompletion = true, ENamedThreads::Type Thread = ENamedThreads::GameThread)"
  },
  {
    "label": "MakeAccessibleAnnouncement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeAccessibleAnnouncement(const FString& AnnouncementString)"
  },
  {
    "label": "GetAccessibleUserRegistry()",
    "kind": "Method",
    "detail": "Function (} FGenericAccessibleUserRegistry&)",
    "insertText": "GetAccessibleUserRegistry()"
  },
  {
    "label": "OnActivate()",
    "kind": "Method",
    "detail": "Function (AccessibleUserRegistry = InAccessibleUserRegistry ; } protected : void)",
    "insertText": "OnActivate()"
  },
  {
    "label": "OnDeactivate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeactivate()"
  }
]