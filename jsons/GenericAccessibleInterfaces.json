[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericWindow"
  },
  {
    "label": "IAccessibleWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FGenericAccessibleUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleUser"
  },
  {
    "label": "FGenericAccessibleUserRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleUserRegistry"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FGenericAccessibleUserRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleUserRegistry"
  },
  {
    "label": "IAccessibleWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleWindow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IAccessibleActivatable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleActivatable"
  },
  {
    "label": "IAccessibleProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleProperty"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "IAccessibleText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleText"
  },
  {
    "label": "IAccessibleTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleTable"
  },
  {
    "label": "IAccessibleTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleTableRow"
  },
  {
    "label": "IAccessibleWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAccessibleWidget"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "and"
  },
  {
    "label": "FAccessibleEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccessibleEventArgs"
  },
  {
    "label": "FGenericAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleMessageHandler"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (APPLICATIONCORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAccessibility, Log, All)"
  },
  {
    "label": "RegisterUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterUser(const TSharedRef<FGenericAccessibleUser>& User)"
  },
  {
    "label": "UnregisterUser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterUser(const FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "UnregisterAllUsers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAllUsers()"
  },
  {
    "label": "FVariant()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVariant()"
  },
  {
    "label": "FGenericAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (APPLICATIONCORE_API)",
    "insertText": "FGenericAccessibleMessageHandler()"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(bool bActive)"
  }
]