[
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FFaceAnalyzerChronos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFaceAnalyzerChronos"
  },
  {
    "label": "FEdgeSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeSegment"
  },
  {
    "label": "FThinFaceContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThinFaceContext"
  },
  {
    "label": "FFaceAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFaceAnalyzer"
  },
  {
    "label": "FEdgeSegment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Chrono . h \" # include \" Core / HaveStates . h \" # include \" Core / Factory . h \" # include \" Core / Types . h \" # include \" Math / Point . h \" # include \" Math / Geometry . h \" namespace UE::CADKernel { class FTopologicalFace ; class FTopologicalEdge ; class FTopologicalLoop ; namespace Topo { struct FFaceAnalyzerChronos { FDuration BuildLoopSegmentsTime ; FDuration FindClosedSegmentTime ; FDuration AnalyzeClosedSegmentTime ; } ; class FEdgeSegment : public FHaveStates { private : const FTopologicalEdge* Edge = nullptr ; double Coordinates [ 2 ] = { 0 .,0 . } ; FPoint Points [ 2 ] ; FPoint Middle ; FPoint Vector ; FEdgeSegment* ClosedSegment = nullptr ; double MiddleAxis = 0 . ; double SquareDistanceToClosedSegment = 0 . ; double Length ; bool bIsThinZone = false ; # ifdef CADKERNEL_DEV FIdent Id ; FIdent LastId ; # endif public :)",
    "insertText": "FEdgeSegment()"
  },
  {
    "label": "SetBoundarySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundarySegment(const FTopologicalEdge* InEdge, double InStartU, double InEndU, const FPoint& InStartPoint, const FPoint& InEndPoint)"
  },
  {
    "label": "Middle()",
    "kind": "Method",
    "detail": "Function (Edge = InEdge ; Coordinates [ ELimit::Start ] = InStartU ; Coordinates [ ELimit::End ] = InEndU ; Points [ ELimit::Start ] = InStartPoint ; Points [ ELimit::End ] = InEndPoint ; Middle = Points [ ELimit::Start ] .)",
    "insertText": "Middle(Points[ELimit::End])"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (Vector = Points [ ELimit::End ] - Points [ ELimit::Start ] ; ClosedSegment = nullptr ; SquareDistanceToClosedSegment = - 1 . ; Length = Points [ ELimit::Start ] .)",
    "insertText": "Distance(Points[ELimit::End])"
  },
  {
    "label": "DiagonalAxisCoordinate()",
    "kind": "Method",
    "detail": "Function (MiddleAxis = Middle .)",
    "insertText": "DiagonalAxisCoordinate()"
  },
  {
    "label": "GetVector()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV Id = LastId + + ; # endif } ; const FPoint)",
    "insertText": "GetVector()"
  },
  {
    "label": "GetClosedSegment()",
    "kind": "Method",
    "detail": "Function (} FEdgeSegment*)",
    "insertText": "GetClosedSegment()"
  },
  {
    "label": "GetClosedSquareDistance()",
    "kind": "Method",
    "detail": "Function (ClosedSegment = InSegmentA ; SquareDistanceToClosedSegment = InSquareDistance ; } double)",
    "insertText": "GetClosedSquareDistance()"
  },
  {
    "label": "IsThinZone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsThinZone()"
  },
  {
    "label": "FThinFaceContext()",
    "kind": "Method",
    "detail": "Function (bIsThinZone = true ; } } ; struct FThinFaceContext { const FTopologicalLoop& Loop ; TArray<Topo::FEdgeSegment*> LoopSegments ; double ExternalLoopLength = 0 . 0 ; TFactory<Topo::FEdgeSegment> SegmentFatory ; TArray<double> EdgeSquareDistance ; TArray<double> EdgeMaxSquareDistance ; double MaxSquareDistance = 0 ; double ThinSideEdgeLength = 0 ; double OppositSideEdgeLength = 0 ;)",
    "insertText": "FThinFaceContext(const FTopologicalLoop& InLoop) : Loop(InLoop)"
  },
  {
    "label": "FFaceAnalyzer()",
    "kind": "Method",
    "detail": "Function (} } ; } class FFaceAnalyzer { public : Topo::FFaceAnalyzerChronos Chronos ; protected : const double Tolerance ; const double SquareTolerance ; const double MaxOppositSideLength ; FTopologicalFace& Face ; public :)",
    "insertText": "FFaceAnalyzer(FTopologicalFace& InFace, double InTol) : Tolerance(InTol) , SquareTolerance(FMath::Square(InTol)) , MaxOppositSideLength(4. * InTol) , Face(InFace)"
  },
  {
    "label": "IsThinFace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsThinFace(double& OutGapSize)"
  },
  {
    "label": "BuildLoopSegments()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildLoopSegments(Topo::FThinFaceContext& Context)"
  },
  {
    "label": "FindClosedSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindClosedSegments(Topo::FThinFaceContext& Context)"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Analyze(Topo::FThinFaceContext& Context)"
  },
  {
    "label": "DisplayCloseSegments()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV void)",
    "insertText": "DisplayCloseSegments(Topo::FThinFaceContext& Context)"
  },
  {
    "label": "DisplayLoopSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayLoopSegments(Topo::FThinFaceContext& Context)"
  }
]