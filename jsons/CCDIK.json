[
  {
    "label": "FCCDIKChainLink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCCDIKChainLink"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoneIndices . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Transform . h \" # include \" UObject / ObjectMacros . h \" # include \" CCDIK . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FCCDIKChainLink()",
    "kind": "Method",
    "detail": "Function (FTransform LocalTransform ; int32 TransformIndex ; TArray<int32> ChildZeroLengthTransformIndices ; double CurrentAngleDelta ;)",
    "insertText": "FCCDIKChainLink() : TransformIndex(INDEX_NONE) , CurrentAngleDelta(0.0)"
  },
  {
    "label": "FCCDIKChainLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCCDIKChainLink(const FTransform& InTransform, const FTransform& InLocalTransform, const int32& InTransformIndex) : Transform(InTransform) , LocalTransform(InLocalTransform) , TransformIndex(InTransformIndex) , CurrentAngleDelta(0.0)"
  },
  {
    "label": "SolveCCDIK()",
    "kind": "Method",
    "detail": "Function (} } ; namespace AnimationCore { bool)",
    "insertText": "SolveCCDIK(TArray<FCCDIKChainLink>& InOutChain, const FVector& TargetPosition, float Precision, int32 MaxIteration, bool bStartFromTail, bool bEnableRotationLimit, const TArray<float>& RotationLimitPerJoints)"
  }
]