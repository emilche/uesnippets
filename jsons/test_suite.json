[
  {
    "label": "ScopedLogAssertHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedLogAssertHandler"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "XmlUnitTestResultPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XmlUnitTestResultPrinter"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_SUITE_H_ # define BASE_TEST_TEST_SUITE_H_ # include<memory> # include \" base / at_exit . h \" # include \" base / check . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" # include \" base / tracing_buildflags . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(ENABLE_BASE_TRACING)"
  },
  {
    "label": "RunUnitTestsUsingBaseTestSuite()",
    "kind": "Method",
    "detail": "Function (class ScopedLogAssertHandler ; } namespace testing { class TestInfo ; } namespace base { class XmlUnitTestResultPrinter ; int)",
    "insertText": "RunUnitTestsUsingBaseTestSuite(int argc, char** argv)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (class TestSuite { public : typedef)",
    "insertText": "bool(*TestMatch)(const testing::TestInfo&)"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestSuite(int argc, char** argv)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) TestSuite(int argc, wchar_t** argv)"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "TestSuite(const TestSuite&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestSuite&)",
    "insertText": "operator(const TestSuite&)"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestSuite()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Run()"
  },
  {
    "label": "DisableCheckForThreadAndProcessPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCheckForThreadAndProcessPriority()"
  },
  {
    "label": "DisableCheckForLeakedGlobals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCheckForLeakedGlobals()"
  },
  {
    "label": "UnitTestAssertHandler()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UnitTestAssertHandler(const char* file, int line, const base::StringPiece summary, const base::StringPiece stack_trace)"
  },
  {
    "label": "SuppressErrorDialogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressErrorDialogs()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "AddTestLauncherResultPrinter()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::AtExitManager> at_exit_manager_ ; private : void)",
    "insertText": "AddTestLauncherResultPrinter()"
  },
  {
    "label": "InitializeFromCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromCommandLine(int argc, char** argv)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) void InitializeFromCommandLine(int argc, wchar_t** argv)"
  },
  {
    "label": "PreInitialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PreInitialize()"
  }
]