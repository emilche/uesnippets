[
  {
    "label": "RtcpMuxFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpMuxFilter"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "RtcpMuxFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_RTCP_MUX_FILTER_H_ # define PC_RTCP_MUX_FILTER_H_ # include \" pc / session_description . h \" namespace cricket { class RtcpMuxFilter { public :)",
    "insertText": "RtcpMuxFilter()"
  },
  {
    "label": "IsFullyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyActive()"
  },
  {
    "label": "IsProvisionallyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProvisionallyActive()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive()"
  },
  {
    "label": "SetOffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOffer(bool offer_enable, ContentSource src)"
  },
  {
    "label": "SetProvisionalAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProvisionalAnswer(bool answer_enable, ContentSource src)"
  },
  {
    "label": "SetAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAnswer(bool answer_enable, ContentSource src)"
  },
  {
    "label": "ExpectOffer()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ExpectOffer(bool offer_enable, ContentSource source)"
  },
  {
    "label": "ExpectAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectAnswer(ContentSource source)"
  }
]