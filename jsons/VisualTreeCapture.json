[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateDrawElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawElement"
  },
  {
    "label": "FSlateClippingState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateClippingState"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateInvalidationRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRoot"
  },
  {
    "label": "FSlateDebuggingElementTypeAddedEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDebuggingElementTypeAddedEventArgs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVisualEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualEntry"
  },
  {
    "label": "FVisualTreeSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualTreeSnapshot"
  },
  {
    "label": "FVisualTreeCapture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualTreeCapture"
  },
  {
    "label": "FVisualEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class SWindow ; class SWidget ; class FSlateDrawElement ; class FSlateClippingState ; class FSlateWindowElementList ; class FPaintArgs ; struct FGeometry ; class FSlateRect ; class FSlateInvalidationRoot ; struct FSlateDebuggingElementTypeAddedEventArgs ; enum class EElementType : uint8 ; class FVisualEntry { public : FVector2f TopLeft ; FVector2f TopRight ; FVector2f BottomLeft ; FVector2f BottomRight ; int32 LayerId ; int32 ClippingIndex ; int32 ElementIndex ; EElementType ElementType ; bool bFromCache ; TWeakPtr<const SWidget> Widget ;)",
    "insertText": "FVisualEntry(const TWeakPtr<const SWidget>& Widget, int32 InElementIndex, EElementType InElementType)"
  },
  {
    "label": "FVisualEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVisualEntry(const TSharedRef<const SWidget>& Widget, const FSlateDrawElement& InElement)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resolve(const FSlateWindowElementList& ElementList)"
  },
  {
    "label": "IsPointInside()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInside(const FVector2f& Point)"
  },
  {
    "label": "Pick()",
    "kind": "Method",
    "detail": "Function (} ; class FVisualTreeSnapshot : public TSharedFromThis<FVisualTreeSnapshot> { public : TSharedPtr<const SWidget>)",
    "insertText": "Pick(FVector2f Point)"
  },
  {
    "label": "FVisualTreeCapture()",
    "kind": "Method",
    "detail": "Function (public : TArray<FVisualEntry> Entries ; TArray<FSlateClippingState> ClippingStates ; TArray<FSlateClippingState> CachedClippingStates ; TArray<TWeakPtr<const SWidget>> WidgetStack ; } ; class FVisualTreeCapture { public :)",
    "insertText": "FVisualTreeCapture()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetVisualTreeForWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FVisualTreeSnapshot>)",
    "insertText": "GetVisualTreeForWindow(SWindow* InWindow)"
  },
  {
    "label": "AddInvalidationRootCachedEntries()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddInvalidationRootCachedEntries(TSharedRef<FVisualTreeSnapshot> Tree, const FSlateInvalidationRoot* Entries)"
  },
  {
    "label": "BeginWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginWindow(const FSlateWindowElementList& ElementList)"
  },
  {
    "label": "EndWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWindow(const FSlateWindowElementList& ElementList)"
  },
  {
    "label": "BeginWidgetPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginWidgetPaint(const SWidget* Widget, const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, const FSlateWindowElementList& ElementList, int32 LayerId)"
  },
  {
    "label": "EndWidgetPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWidgetPaint(const SWidget* Widget, const FSlateWindowElementList& ElementList, int32 LayerId)"
  },
  {
    "label": "ElementTypeAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementTypeAdded(const FSlateDebuggingElementTypeAddedEventArgs& ElementTypeAddedArgs)"
  },
  {
    "label": "OnWindowBeingDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowBeingDestroyed(const SWindow& WindowBeingDestoyed)"
  }
]