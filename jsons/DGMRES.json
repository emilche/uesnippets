[
  {
    "label": "DGMRES",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DGMRES"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "sortWithPermutation()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_DGMRES_H # define EIGEN_DGMRES_H # include \" . . / . . / . . / . . / Eigen / Eigenvalues \" namespace Eigen { template<_MatrixType,_Preconditioner = DiagonalPreconditioner<_MatrixType::Scalar>> class DGMRES ; namespace internal { template<_MatrixType,_Preconditioner> struct traits<DGMRES<_MatrixType,_Preconditioner>> { typedef _MatrixType MatrixType ; typedef _Preconditioner Preconditioner ; } ; template<VectorType,IndexType> void)",
    "insertText": "sortWithPermutation(VectorType& vec, IndexType& perm, typename IndexType::Scalar& ncut)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(vec.size() == perm.size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool flag ;)",
    "insertText": "for(Index k = 0; k < ncut; k++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (flag = false ;)",
    "insertText": "for(Index j = 0; j < vec.size()-1; j++)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(perm(j),perm(j+1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (flag = true ; })",
    "insertText": "if(!flag)"
  },
  {
    "label": "DGMRES()",
    "kind": "Method",
    "detail": "Function (} } } } template<_MatrixType,_Preconditioner> class DGMRES : public IterativeSolverBase<DGMRES<_MatrixType,_Preconditioner>> { typedef IterativeSolverBase<DGMRES> Base ; using Base::matrix ; using Base::m_error ; using Base::m_iterations ; using Base::m_info ; using Base::m_isInitialized ; using Base::m_tolerance ; public : using Base::_solve_impl ; using Base::_solve_with_guess_impl ; typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef MatrixType::RealScalar RealScalar ; typedef _Preconditioner Preconditioner ; typedef Matrix<Scalar,Dynamic,Dynamic> DenseMatrix ; typedef Matrix<RealScalar,Dynamic,Dynamic> DenseRealMatrix ; typedef Matrix<Scalar,Dynamic,1> DenseVector ; typedef Matrix<RealScalar,Dynamic,1> DenseRealVector ; typedef Matrix<std::complex<RealScalar>,Dynamic,1> ComplexVector ;)",
    "insertText": "DGMRES() : Base(),m_restart(30),m_neig(0),m_r(0),m_maxNeig(5),m_isDeflAllocated(false),m_isDeflInitialized(false)"
  },
  {
    "label": "DGMRES()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "DGMRES(const EigenBase<MatrixDerived>& A) : Base(A.derived()), m_restart(30),m_neig(0),m_r(0),m_maxNeig(5),m_isDeflAllocated(false),m_isDeflInitialized(false)"
  },
  {
    "label": "DGMRES()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DGMRES()"
  },
  {
    "label": "_solve_vector_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_vector_with_guess_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(Rhs::ColsAtCompileTime==1 || Dest::ColsAtCompileTime==1, YOU_TRIED_CALLING_A_VECTOR_METHOD_ON_A_MATRIX)"
  },
  {
    "label": "maxIterations()",
    "kind": "Method",
    "detail": "Function (m_iterations =)",
    "insertText": "maxIterations()"
  },
  {
    "label": "dgmres()",
    "kind": "Method",
    "detail": "Function (m_error = Base::m_tolerance ;)",
    "insertText": "dgmres(matrix(), b, x, Base::m_preconditioner)"
  },
  {
    "label": "restart()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "restart()"
  },
  {
    "label": "setEigenv()",
    "kind": "Method",
    "detail": "Function (m_restart = restart ; } void)",
    "insertText": "setEigenv(const Index neig)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_neig = neig ;)",
    "insertText": "if(neig+1 > m_maxNeig)"
  },
  {
    "label": "deflSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "deflSize()"
  },
  {
    "label": "dgmres()",
    "kind": "Method",
    "detail": "Function (m_maxNeig = maxNeig ; } protected : template<Rhs,Dest> void)",
    "insertText": "dgmres(const MatrixType& mat,const Rhs& rhs, Dest& x, const Preconditioner& precond)"
  },
  {
    "label": "dgmresCycle()",
    "kind": "Method",
    "detail": "Function (template<Dest> Index)",
    "insertText": "dgmresCycle(const MatrixType& mat, const Preconditioner& precond, Dest& x, DenseVector& r0, RealScalar& beta, const RealScalar& normRhs, Index& nbIts)"
  },
  {
    "label": "dgmresComputeDeflationData()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "dgmresComputeDeflationData(const MatrixType& mat, const Preconditioner& precond, const Index& it, StorageIndex& neig)"
  },
  {
    "label": "dgmresApplyDeflation()",
    "kind": "Method",
    "detail": "Function (template<RhsType,DestType> Index)",
    "insertText": "dgmresApplyDeflation(const RhsType& In, DestType& Out)"
  },
  {
    "label": "schurValues()",
    "kind": "Method",
    "detail": "Function (ComplexVector)",
    "insertText": "schurValues(const ComplexSchur<DenseMatrix>& schurofH)"
  },
  {
    "label": "schurValues()",
    "kind": "Method",
    "detail": "Function (ComplexVector)",
    "insertText": "schurValues(const RealSchur<DenseMatrix>& schurofH)"
  },
  {
    "label": "dgmresInitDeflation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dgmresInitDeflation(Index& rows)"
  },
  {
    "label": "considerAsZero()",
    "kind": "Method",
    "detail": "Function (const RealScalar)",
    "insertText": "considerAsZero(std::numeric_limits<RealScalar>::min)()"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (RealScalar normRhs = rhs .)",
    "insertText": "norm()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (m_error = 0 ; return ; } m_isDeflInitialized = false ; Index n = mat .)",
    "insertText": "rows()"
  },
  {
    "label": "r0()",
    "kind": "Method",
    "detail": "Function (DenseVector)",
    "insertText": "r0(n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Index nbIts = 0 ; m_H .)",
    "insertText": "resize(m_restart+1, m_restart)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_Hes .)",
    "insertText": "resize(m_restart, m_restart)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_V .)",
    "insertText": "resize(n,m_restart+1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_error = beta / normRhs ;)",
    "insertText": "if(m_error < m_tolerance)"
  },
  {
    "label": "dgmresCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dgmresCycle(mat, precond, x, r0, beta, normRhs, nbIts)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (DenseVector)",
    "insertText": "g(m_restart+1)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g(0) = Scalar(beta)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_V .)",
    "insertText": "col(0)"
  },
  {
    "label": "gr()",
    "kind": "Method",
    "detail": "Function (m_info = NoConvergence ; std::vector<JacobiRotation<Scalar>>)",
    "insertText": "gr(m_restart)"
  },
  {
    "label": "tv1()",
    "kind": "Method",
    "detail": "Function (DenseVector)",
    "insertText": "tv1(n), tv2(n)"
  },
  {
    "label": "dgmresApplyDeflation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dgmresApplyDeflation(m_V.col(it), tv1)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (tv2 = precond .)",
    "insertText": "solve(tv1)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} else { tv2 = precond .)",
    "insertText": "solve(m_V.col(it))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} tv1 = mat* tv2 ; Scalar coef ;)",
    "insertText": "for(Index i = 0; i <= it; ++i)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (coef = tv1 .)",
    "insertText": "dot(m_V.col(i))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tv1 = tv1 - coef* m_V .)",
    "insertText": "col(i)"
  },
  {
    "label": "m_H()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_H(i,it)"
  },
  {
    "label": "m_Hes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_Hes(i,it)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_V .)",
    "insertText": "col(it+1)"
  },
  {
    "label": "m_H()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_H(it+1, it)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_H .)",
    "insertText": "col(it).applyOnTheLeft(i-1,i,gr[i-1].adjoint())"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (} gr [ it ] .)",
    "insertText": "makeGivens(m_H(it, it), m_H(it+1,it))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_H .)",
    "insertText": "col(it).applyOnTheLeft(it,it+1,gr[it].adjoint())"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (g .)",
    "insertText": "applyOnTheLeft(it,it+1, gr[it].adjoint())"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (beta =)",
    "insertText": "abs(g(it+1))"
  },
  {
    "label": "nrs()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; break ; } } DenseVector)",
    "insertText": "nrs(m_restart)"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (nrs = m_H .)",
    "insertText": "topLeftCorner(it,it).template triangularView<Upper>().solve(g.head(it))"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (tv1 = m_V .)",
    "insertText": "leftCols(it)"
  },
  {
    "label": "dgmresApplyDeflation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dgmresApplyDeflation(tv1, tv2)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (x = x + precond .)",
    "insertText": "solve(tv2)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} else x = x + precond .)",
    "insertText": "solve(m_V.leftCols(it) * nrs)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_U .)",
    "insertText": "resize(rows, m_maxNeig)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "resize(m_maxNeig, m_maxNeig)"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (const DenseMatrix& T = schurofH .)",
    "insertText": "matrixT()"
  },
  {
    "label": "eig()",
    "kind": "Method",
    "detail": "Function (ComplexVector)",
    "insertText": "eig(it)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index j = 0 ;)",
    "insertText": "while(j < it-1)"
  },
  {
    "label": "eig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eig(j) = std::complex<RealScalar>(T(j,j),RealScalar(0))"
  },
  {
    "label": "eig()",
    "kind": "Method",
    "detail": "Function (j + + ; } else {)",
    "insertText": "eig(j) = std::complex<RealScalar>(T(j,j),T(j+1,j))"
  },
  {
    "label": "eig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eig(j+1) = std::complex<RealScalar>(T(j,j+1),T(j+1,j+1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (j + + ; } })",
    "insertText": "if(j < it-1) eig(j) = std::complex<RealScalar>(T(j,j),RealScalar(0))"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (internal::conditional<NumTraits<Scalar>::IsComplex,ComplexSchur<DenseMatrix>,RealSchur<DenseMatrix>>::type schurofH ; bool computeU = true ; DenseMatrix)",
    "insertText": "matrixQ(it,it)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (matrixQ .)",
    "insertText": "setIdentity()"
  },
  {
    "label": "computeFromHessenberg()",
    "kind": "Method",
    "detail": "Function (schurofH .)",
    "insertText": "computeFromHessenberg(m_Hes.topLeftCorner(it,it), matrixQ, computeU)"
  },
  {
    "label": "perm()",
    "kind": "Method",
    "detail": "Function (Matrix<StorageIndex,Dynamic,1>)",
    "insertText": "perm(it)"
  },
  {
    "label": "schurValues()",
    "kind": "Method",
    "detail": "Function (eig = this ->)",
    "insertText": "schurValues(schurofH)"
  },
  {
    "label": "modulEig()",
    "kind": "Method",
    "detail": "Function (DenseRealVector)",
    "insertText": "modulEig(it)"
  },
  {
    "label": "setLinSpaced()",
    "kind": "Method",
    "detail": "Function (perm .)",
    "insertText": "setLinSpaced(it,0,internal::convert_index<StorageIndex>(it-1))"
  },
  {
    "label": "sortWithPermutation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sortWithPermutation(modulEig, perm, neig)"
  },
  {
    "label": "m_lambdaN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_lambdaN(std::max)(modulEig.maxCoeff(), m_lambdaN)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} Index nbrEig = 0 ;)",
    "insertText": "while(nbrEig < neig)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Sr .)",
    "insertText": "col(j) = schurofH.matrixU().col(perm(it-j-1))"
  },
  {
    "label": "MX()",
    "kind": "Method",
    "detail": "Function (DenseMatrix)",
    "insertText": "MX(m, nbrEig)"
  },
  {
    "label": "tv1()",
    "kind": "Method",
    "detail": "Function (DenseVector)",
    "insertText": "tv1(m)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tv1 = mat* X .)",
    "insertText": "col(j)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (MX .)",
    "insertText": "col(j) = precond.solve(tv1)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} m_T .)",
    "insertText": "block(m_r, m_r, nbrEig, nbrEig) = X.transpose()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "block(0, m_r, m_r, nbrEig) = m_U.leftCols(m_r).transpose()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (m_T .)",
    "insertText": "block(m_r, 0, nbrEig, m_r) = X.transpose() * m_MU.leftCols(m_r)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index j = 0; j < nbrEig; j++) m_U.col(m_r+j) = X.col(j)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_r + = nbrEig ; m_luT .)",
    "insertText": "compute(m_T.topLeftCorner(m_r, m_r))"
  },
  {
    "label": "dgmresApplyDeflation()",
    "kind": "Method",
    "detail": "Function (m_isDeflInitialized = true ; return 0 ; } template<_MatrixType,_Preconditioner> template<RhsType,DestType> Index DGMRES<_MatrixType,_Preconditioner)",
    "insertText": "dgmresApplyDeflation(const RhsType &x, DestType &y)"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (DenseVector x1 = m_U .)",
    "insertText": "leftCols(m_r).transpose()"
  },
  {
    "label": "leftCols()",
    "kind": "Method",
    "detail": "Function (y = x + m_U .)",
    "insertText": "leftCols(m_r) * ( m_lambdaN * m_luT.solve(x1) - x1)"
  }
]