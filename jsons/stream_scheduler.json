[
  {
    "label": "StreamScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamScheduler"
  },
  {
    "label": "VirtualTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualTime"
  },
  {
    "label": "VirtualTimeTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualTimeTag"
  },
  {
    "label": "InverseWeight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InverseWeight"
  },
  {
    "label": "InverseWeightTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InverseWeightTag"
  },
  {
    "label": "StreamProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamProducer"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stream"
  },
  {
    "label": "ActiveStreamComparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActiveStreamComparator"
  },
  {
    "label": "VirtualTime()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TX_STREAM_SCHEDULER_H_ # define NET_DCSCTP_TX_STREAM_SCHEDULER_H_ # include<algorithm> # include<cstdint> # include<deque> # include<map> # include<memory> # include<queue> # include<set> # include<string> # include<utility> # include \" absl / algorithm / container . h \" # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / idata_chunk . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_message . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / public / types . h \" # include \" net / dcsctp / tx / send_queue . h \" # include \" rtc_base / containers / flat_set . h \" # include \" rtc_base / strong_alias . h \" namespace dcsctp { class StreamScheduler { private : class VirtualTime : public webrtc::StrongAlias<class VirtualTimeTag,double> { public :)",
    "insertText": "VirtualTime(const UnderlyingType& v) : webrtc::StrongAlias<class VirtualTimeTag, double>(v)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} VirtualTime)",
    "insertText": "Zero()"
  },
  {
    "label": "InverseWeight()",
    "kind": "Method",
    "detail": "Function (} } ; class InverseWeight : public webrtc::StrongAlias<class InverseWeightTag,double> { public :)",
    "insertText": "InverseWeight(StreamPriority priority) : webrtc::StrongAlias<class InverseWeightTag, double>( 1.0 / std::max(static_cast<double>(*priority), 0.000001))"
  },
  {
    "label": "StreamProducer()",
    "kind": "Method",
    "detail": "Function (} } ; public : class StreamProducer { public : ~)",
    "insertText": "StreamProducer()"
  },
  {
    "label": "Produce()",
    "kind": "Method",
    "detail": "Function (absl::optional<SendQueue::DataToSend>)",
    "insertText": "Produce(TimeMs now, size_t max_size)"
  },
  {
    "label": "bytes_to_send_in_next_message()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytes_to_send_in_next_message()"
  },
  {
    "label": "stream_id()",
    "kind": "Method",
    "detail": "Function (} ; class Stream { public : StreamID)",
    "insertText": "stream_id()"
  },
  {
    "label": "MaybeMakeActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeMakeActive()"
  },
  {
    "label": "MakeInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeInactive()"
  },
  {
    "label": "ForceReschedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceReschedule()"
  },
  {
    "label": "Stream()",
    "kind": "Method",
    "detail": "Function (} private : class StreamScheduler ;)",
    "insertText": "Stream(StreamScheduler* parent, StreamProducer* producer, StreamID stream_id, StreamPriority priority) : parent_(*parent), producer_(*producer), stream_id_(stream_id), priority_(priority), inverse_weight_(priority)"
  },
  {
    "label": "MakeActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeActive(size_t bytes_to_send_next)"
  },
  {
    "label": "ForceMarkInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceMarkInactive()"
  },
  {
    "label": "current_time()",
    "kind": "Method",
    "detail": "Function (VirtualTime)",
    "insertText": "current_time()"
  },
  {
    "label": "CalculateFinishTime()",
    "kind": "Method",
    "detail": "Function (} VirtualTime)",
    "insertText": "CalculateFinishTime(size_t bytes_to_send_next)"
  },
  {
    "label": "StreamScheduler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "StreamScheduler(size_t mtu) : max_payload_bytes_(mtu - SctpPacket::kHeaderSize - IDataChunk::kHeaderSize)"
  },
  {
    "label": "CreateStream()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Stream>)",
    "insertText": "CreateStream(StreamProducer* producer, StreamID stream_id, StreamPriority priority)"
  },
  {
    "label": "EnableMessageInterleaving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableMessageInterleaving(bool enabled)"
  },
  {
    "label": "ActiveStreamsForTesting()",
    "kind": "Method",
    "detail": "Function (std::set<StreamID>)",
    "insertText": "ActiveStreamsForTesting()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct ActiveStreamComparator { bool)",
    "insertText": "operator()(Stream* a, Stream* b)"
  },
  {
    "label": "next_finish_time()",
    "kind": "Method",
    "detail": "Function (VirtualTime a_vft = a ->)",
    "insertText": "next_finish_time()"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (} return a_vft<b_vft ; } } ; bool)",
    "insertText": "IsConsistent()"
  }
]