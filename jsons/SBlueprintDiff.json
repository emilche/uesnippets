[
  {
    "label": "FAsyncDetailViewDiff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncDetailViewDiff"
  },
  {
    "label": "SLinkableScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLinkableScrollBar"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IDiffControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDiffControl"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SMyBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMyBlueprint"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplitter"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGraphToDiff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphToDiff"
  },
  {
    "label": "SListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SListView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDiffResultItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffResultItem"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "SKismetInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKismetInspector"
  },
  {
    "label": "SGraphEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphEditor"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "FDiffControl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffControl"
  },
  {
    "label": "FListItemGraphToDiff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListItemGraphToDiff"
  },
  {
    "label": "FScopedCategorySortChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCategorySortChange"
  },
  {
    "label": "FDiffResultItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" DiffResults . h \" # include \" DiffUtils . h \" # include \" GraphEditor . h \" # include \" HAL / Platform . h \" # include \" IAssetTypeActions . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" SKismetInspector . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Textures / SlateIcon . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FAsyncDetailViewDiff ; class SLinkableScrollBar ; class FBlueprintDifferenceTreeEntry ; class FSpawnTabArgs ; class FTabManager ; class FText ; class FUICommandList ; class IDiffControl ; class SBox ; class SMyBlueprint ; class SOverlay ; class SSplitter ; class SWidget ; class SWindow ; class UBlueprint ; class UEdGraph ; class UEdGraphNode ; class UEdGraphPin ; class UObject ; struct FGraphToDiff ; template<ItemType> class SListView ; enum class EAssetEditorCloseReason : uint8 ; struct FDiffResultItem : public TSharedFromThis<FDiffResultItem> {)",
    "insertText": "FDiffResultItem(FDiffSingleResult InResult) : Result(InResult)"
  },
  {
    "label": "GenerateWidget()",
    "kind": "Method",
    "detail": "Function (} FDiffSingleResult Result ; TSharedRef<SWidget>)",
    "insertText": "GenerateWidget()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnMyBlueprintActionSelected, UObject*)"
  },
  {
    "label": "SelectNextRow()",
    "kind": "Method",
    "detail": "Function (namespace DiffWidgetUtils { void)",
    "insertText": "SelectNextRow(SListView< TSharedPtr< struct FDiffSingleResult> >& ListView, const TArray< TSharedPtr< struct FDiffSingleResult > >& ListViewSource)"
  },
  {
    "label": "SelectPrevRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectPrevRow(SListView< TSharedPtr< struct FDiffSingleResult> >& ListView, const TArray< TSharedPtr< struct FDiffSingleResult > >& ListViewSource)"
  },
  {
    "label": "HasNextDifference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNextDifference(SListView< TSharedPtr< struct FDiffSingleResult> >& ListView, const TArray< TSharedPtr< struct FDiffSingleResult > >& ListViewSource)"
  },
  {
    "label": "HasPrevDifference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrevDifference(SListView< TSharedPtr< struct FDiffSingleResult> >& ListView, const TArray< TSharedPtr< struct FDiffSingleResult > >& ListViewSource)"
  },
  {
    "label": "FDiffPanel()",
    "kind": "Method",
    "detail": "Function (} struct FDiffPanel {)",
    "insertText": "FDiffPanel()"
  },
  {
    "label": "InitializeDiffPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDiffPanel()"
  },
  {
    "label": "GeneratePanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePanel(UEdGraph* NewGraph, UEdGraph* OldGraph)"
  },
  {
    "label": "GeneratePanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePanel(UEdGraph* Graph, TSharedPtr<TArray<FDiffSingleResult>> DiffResults, TAttribute<int32> FocusedDiffResult)"
  },
  {
    "label": "GenerateMyBlueprintWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "GenerateMyBlueprintWidget()"
  },
  {
    "label": "CopySelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedNodes()"
  },
  {
    "label": "GetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (FGraphPanelSelectionSet)",
    "insertText": "GetSelectedNodes()"
  },
  {
    "label": "CanCopyNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyNodes()"
  },
  {
    "label": "FocusDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusDiff(UEdGraphPin& Pin)"
  },
  {
    "label": "FocusDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusDiff(UEdGraphNode& Node)"
  },
  {
    "label": "GetMyBlueprintWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetMyBlueprintWidget()"
  },
  {
    "label": "GetDetailsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetDetailsWidget()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (const UBlueprint* Blueprint ; TSharedPtr<SBox> GraphEditorBox ; TSharedPtr<class SMyBlueprint> MyBlueprint ; TSharedPtr<class SKismetInspector> DetailsView ; TWeakPtr<class SGraphEditor> GraphEditor ; FRevisionInfo RevisionInfo ; bool bShowAssetName ; TSharedPtr<SWidget> OverlayGraphRevisionInfo ; TSharedPtr<SLinkableScrollBar> DetailScrollbar ; private : TSharedPtr<FUICommandList> GraphEditorCommands ; } ; class SBlueprintDiff : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOpenInDefaults, const class UBlueprint* , const class UBlueprint*)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SBlueprintDiff)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(const class UBlueprint*, BlueprintOld ) SLATE_ARGUMENT( const class UBlueprint*, BlueprintNew ) SLATE_ARGUMENT( struct FRevisionInfo, OldRevision ) SLATE_ARGUMENT( struct FRevisionInfo, NewRevision ) SLATE_ARGUMENT( bool, ShowAssetNames ) SLATE_ARGUMENT(TSharedPtr<SWindow>, ParentWindow) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SBlueprintDiff()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SBlueprintDiff()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphChanged(FGraphToDiff* Diff)"
  },
  {
    "label": "OnBlueprintChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintChanged(UBlueprint* InBlueprint)"
  },
  {
    "label": "OnGraphSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphSelectionChanged(TSharedPtr<FGraphToDiff> Item, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "OnDiffListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDiffListSelectionChanged(TSharedPtr<struct FDiffResultItem> TheDiff)"
  },
  {
    "label": "DefaultEmptyPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "DefaultEmptyPanel()"
  },
  {
    "label": "CreateDiffWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "CreateDiffWindow(FText WindowTitle, const UBlueprint* OldBlueprint, const UBlueprint* NewBlueprint, const struct FRevisionInfo& OldRevision, const struct FRevisionInfo& NewRevision)"
  },
  {
    "label": "CreateDiffWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "CreateDiffWindow(const UBlueprint* OldBlueprint, const UBlueprint* NewBlueprint, const FRevisionInfo& OldRevision, const FRevisionInfo& NewRevision, const UClass* BlueprintClass)"
  },
  {
    "label": "NextDiff()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NextDiff()"
  },
  {
    "label": "PrevDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrevDiff()"
  },
  {
    "label": "HasNextDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNextDiff()"
  },
  {
    "label": "HasPrevDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrevDiff()"
  },
  {
    "label": "FindGraphToDiffEntry()",
    "kind": "Method",
    "detail": "Function (FGraphToDiff*)",
    "insertText": "FindGraphToDiffEntry(const FString& GraphPath)"
  },
  {
    "label": "FocusOnGraphRevisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusOnGraphRevisions(FGraphToDiff* Diff)"
  },
  {
    "label": "CreateGraphEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGraphEntry(class UEdGraph* GraphOld, class UEdGraph* GraphNew)"
  },
  {
    "label": "DisablePinDiffFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisablePinDiffFocus()"
  },
  {
    "label": "OnToggleLockView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleLockView()"
  },
  {
    "label": "OnToggleSplitViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSplitViewMode()"
  },
  {
    "label": "ResetGraphEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGraphEditors()"
  },
  {
    "label": "GetLockViewImage()",
    "kind": "Method",
    "detail": "Function (FSlateIcon)",
    "insertText": "GetLockViewImage()"
  },
  {
    "label": "GetSplitViewModeImage()",
    "kind": "Method",
    "detail": "Function (FSlateIcon)",
    "insertText": "GetSplitViewModeImage()"
  },
  {
    "label": "GetDiffPanelForNode()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FGraphToDiff>> Graphs ; FDiffPanel&)",
    "insertText": "GetDiffPanelForNode(UEdGraphNode& Node)"
  },
  {
    "label": "HandleGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGraphChanged(FGraphToDiff* Diff)"
  },
  {
    "label": "GenerateDifferencesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDifferencesList()"
  },
  {
    "label": "IsGraphDiffNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphDiffNeeded(class UEdGraph* InGraph)"
  },
  {
    "label": "OnCloseAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseAssetEditor(UObject* Asset, EAssetEditorCloseReason CloseReason)"
  },
  {
    "label": "FDiffControl()",
    "kind": "Method",
    "detail": "Function (struct FDiffControl {)",
    "insertText": "FDiffControl() : Widget() , DiffControl(nullptr)"
  },
  {
    "label": "GenerateBlueprintTypePanel()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget> Widget ; TSharedPtr<class IDiffControl> DiffControl ; } ; FDiffControl)",
    "insertText": "GenerateBlueprintTypePanel()"
  },
  {
    "label": "GenerateMyBlueprintPanel()",
    "kind": "Method",
    "detail": "Function (FDiffControl)",
    "insertText": "GenerateMyBlueprintPanel()"
  },
  {
    "label": "GenerateGraphPanel()",
    "kind": "Method",
    "detail": "Function (FDiffControl)",
    "insertText": "GenerateGraphPanel()"
  },
  {
    "label": "GenerateDefaultsPanel()",
    "kind": "Method",
    "detail": "Function (FDiffControl)",
    "insertText": "GenerateDefaultsPanel()"
  },
  {
    "label": "GenerateClassSettingsPanel()",
    "kind": "Method",
    "detail": "Function (FDiffControl)",
    "insertText": "GenerateClassSettingsPanel()"
  },
  {
    "label": "GenerateComponentsPanel()",
    "kind": "Method",
    "detail": "Function (FDiffControl)",
    "insertText": "GenerateComponentsPanel()"
  },
  {
    "label": "GenerateGeneralFileCommentEntries()",
    "kind": "Method",
    "detail": "Function (FDiffControl)",
    "insertText": "GenerateGeneralFileCommentEntries()"
  },
  {
    "label": "GenerateGraphWidgetForPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SOverlay>)",
    "insertText": "GenerateGraphWidgetForPanel(FDiffPanel& OutDiffPanel)"
  },
  {
    "label": "GenerateRevisionInfoWidgetForPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SBox>)",
    "insertText": "GenerateRevisionInfoWidgetForPanel(TSharedPtr<SWidget>& OutGeneratedWidget,const FText& InRevisionText)"
  },
  {
    "label": "SetCurrentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentMode(FName NewMode)"
  },
  {
    "label": "GetCurrentMode()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCurrentMode()"
  },
  {
    "label": "UpdateTopSectionVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTopSectionVisibility(const FName& InNewViewMode)"
  },
  {
    "label": "FScopedCategorySortChange()",
    "kind": "Method",
    "detail": "Function (FName CurrentMode ; FDiffPanel PanelOld,PanelNew ; TSharedPtr<FAsyncDetailViewDiff> GraphDetailDiff ; bool bLockViews ; bool bVerticalSplitGraphMode = true ; TSharedPtr<SBox> ModeContents ; TSharedPtr<SSplitter> TopRevisionInfoWidget ; TSharedPtr<SSplitter> DiffGraphSplitter ; TSharedPtr<SSplitter> GraphToolBarWidget ; struct FListItemGraphToDiff ; TSharedPtr<FTabManager> TabManager ; TArray<TSharedPtr<class FBlueprintDifferenceTreeEntry>> PrimaryDifferencesList ; TArray<TSharedPtr<class FBlueprintDifferenceTreeEntry>> RealDifferences ; TSharedPtr<STreeView<TSharedPtr<FBlueprintDifferenceTreeEntry>>> DifferencesTreeView ; TMap<FName,FDiffControl> ModePanels ; TWeakPtr<SWindow> WeakParentWindow ; FDelegateHandle AssetEditorCloseDelegate ; class FScopedCategorySortChange { public : ~)",
    "insertText": "FScopedCategorySortChange()"
  },
  {
    "label": "SetBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlueprint(UBlueprint* Blueprint)"
  }
]