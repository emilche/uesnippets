[
  {
    "label": "TDistLine3Segment3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistLine3Segment3"
  },
  {
    "label": "TDistLine3Segment3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" SegmentTypes . h \" # include \" LineTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistLine3Segment3 { public : TLine3<Real> Line ; TSegment3<Real> Segment ; Real DistanceSquared = - 1 . 0 ; Real LineParameter,SegmentParameter ; TVector<Real> LineClosest,SegmentClosest ;)",
    "insertText": "TDistLine3Segment3(const TLine3<Real>& LineIn, const TSegment3<Real>& SegmentIn) : Line(LineIn), Segment(SegmentIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real b0 = diff .)",
    "insertText": "Dot(Line.Direction)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (Real c = diff .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Real det = TMathUtil<Real)",
    "insertText": "Abs(1 - a01 * a01)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real b1,s0,s1,sqrDist,extDet ;)",
    "insertText": "if(det >= TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (b1 = - diff .)",
    "insertText": "Dot(Segment.Direction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s1 = a01* b0 - b1 ; extDet = Segment . Extent* det ;)",
    "insertText": "if(s1 >= -extDet)"
  },
  {
    "label": "invDet()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "invDet(1)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s0(a01 * b1 - b0)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (s1* = invDet ; sqrDist =)",
    "insertText": "s0(s0 + a01 * s1 + (2) * b0) + s1 * (a01 * s0 + s1 + (2) * b1)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (} else { s1 = Segment . Extent ;)",
    "insertText": "s0(a01 * s1 + b0)"
  },
  {
    "label": "s1()",
    "kind": "Method",
    "detail": "Function (sqrDist = - s0* s0 +)",
    "insertText": "s1(s1 + (2) * b1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { s1 = 0 ; s0 = - b0 ; sqrDist = b0* s0 + c ; } LineClosest = Line . Origin + s0* Line . Direction ; SegmentClosest = Segment . Center + s1* Segment . Direction ; LineParameter = s0 ; SegmentParameter = s1 ;)",
    "insertText": "if(sqrDist < 0)"
  },
  {
    "label": "SquaredDistanceFromLineIntegratedAlongSegment()",
    "kind": "Method",
    "detail": "Function (sqrDist = 0 ; } DistanceSquared = sqrDist ; return DistanceSquared ; } } ; typedef TDistLine3Segment3<float> FDistLine3Segment3f ; typedef TDistLine3Segment3<double> FDistLine3Segment3d ; template<Real> double)",
    "insertText": "SquaredDistanceFromLineIntegratedAlongSegment(const TLine3<Real>& Line, const TSegment3<Real>& Segment)"
  },
  {
    "label": "StartPoint()",
    "kind": "Method",
    "detail": "Function (TVector<Real> SegmentStart = Segment .)",
    "insertText": "StartPoint()"
  },
  {
    "label": "Origin()",
    "kind": "Method",
    "detail": "Function (TVector<Real> ProjectedSegmentStart = Line .)",
    "insertText": "Origin(SegmentStart - Line.Origin).Dot(Line.Direction)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (TVector<Real> P_0 = SegmentStart - ProjectedSegmentStart ; TVector<Real> P_v = Segment . Direction - ProjectedSegmentDirection ;)",
    "insertText": "return((P_v.Dot(P_v) * SegmentLength / 3.0 + P_0.Dot(P_v)) * SegmentLength + P_0.Dot(P_0))"
  }
]