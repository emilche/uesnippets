[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "OnlyObservedThreadsTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnlyObservedThreadsTag"
  },
  {
    "label": "ScopedBlockingCall()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SCOPED_BLOCKING_CALL_H_ # define BASE_THREADING_SCOPED_BLOCKING_CALL_H_ # include \" base / base_export . h \" # include \" base / callback_forward . h \" # include \" base / location . h \" # include \" base / strings / string_piece . h \" # include \" base / threading / scoped_blocking_call_internal . h \" # include \" base / types / strong_alias . h \" namespace base { enum class BlockingType { MAY_BLOCK,WILL_BLOCK } ; class BASE_EXPORT ScopedBlockingCall : public internal::UncheckedScopedBlockingCall { public :)",
    "insertText": "ScopedBlockingCall(const Location& from_here, BlockingType blocking_type)"
  },
  {
    "label": "ScopedBlockingCall()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedBlockingCall()"
  },
  {
    "label": "ScopedBlockingCallWithBaseSyncPrimitives()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { class BASE_EXPORT ScopedBlockingCallWithBaseSyncPrimitives : public UncheckedScopedBlockingCall { public :)",
    "insertText": "ScopedBlockingCallWithBaseSyncPrimitives(const Location& from_here, BlockingType blocking_type)"
  },
  {
    "label": "ScopedBlockingCallWithBaseSyncPrimitives()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedBlockingCallWithBaseSyncPrimitives()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; } using IOJankReportingCallback = RepeatingCallback<)",
    "insertText": "void(int janky_intervals_per_minute, int total_janks_per_minute)"
  },
  {
    "label": "EnableIOJankMonitoringForProcess()",
    "kind": "Method",
    "detail": "Function (using OnlyObservedThreadsForTest = StrongAlias<class OnlyObservedThreadsTag,bool> ; void BASE_EXPORT)",
    "insertText": "EnableIOJankMonitoringForProcess(IOJankReportingCallback reporting_callback, OnlyObservedThreadsForTest only_observed_threads = OnlyObservedThreadsForTest(false))"
  }
]