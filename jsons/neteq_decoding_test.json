[
  {
    "label": "NetEqDecodingTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqDecodingTest"
  },
  {
    "label": "NetEqDecodingTestTwoInstances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqDecodingTestTwoInstances"
  },
  {
    "label": "NetEqDecodingTest()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TEST_NETEQ_DECODING_TEST_H_ # define MODULES_AUDIO_CODING_NETEQ_TEST_NETEQ_DECODING_TEST_H_ # include<memory> # include<set> # include<string> # include \" absl / strings / string_view . h \" # include \" api / audio / audio_frame . h \" # include \" api / neteq / neteq . h \" # include \" api / rtp_headers . h \" # include \" modules / audio_coding / neteq / tools / packet . h \" # include \" modules / audio_coding / neteq / tools / rtp_file_source . h \" # include \" system_wrappers / include / clock . h \" # include \" test / gtest . h \" namespace webrtc { class NetEqDecodingTest : public::testing::Test { protected : int kTimeStepMs = 1 0 ; size_t kBlockSize8kHz = kTimeStepMs* 8 ; size_t kBlockSize16kHz = kTimeStepMs* 1 6 ; size_t kBlockSize32kHz = kTimeStepMs* 3 2 ; size_t kBlockSize48kHz = kTimeStepMs* 4 8 ; int kInitSampleRateHz = 8 0 0 0 ;)",
    "insertText": "NetEqDecodingTest()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUp()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "OpenInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenInputFile(absl::string_view rtp_file)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  },
  {
    "label": "DecodeAndCompare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeAndCompare(absl::string_view rtp_file, absl::string_view output_checksum, absl::string_view network_stats_checksum, bool gen_ref)"
  },
  {
    "label": "PopulateRtpInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateRtpInfo(int frame_index, int timestamp, RTPHeader* rtp_info)"
  },
  {
    "label": "PopulateCng()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCng(int frame_index, int timestamp, RTPHeader* rtp_info, uint8_t* payload, size_t* payload_len)"
  },
  {
    "label": "WrapTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrapTest(uint16_t start_seq_no, uint32_t start_timestamp, const std::set<uint16_t>& drop_seq_numbers, bool expect_seq_no_wrap, bool expect_timestamp_wrap)"
  },
  {
    "label": "LongCngWithClockDrift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LongCngWithClockDrift(double drift_factor, double network_freeze_ms, bool pull_audio_during_freeze, int delay_tolerance_ms, int max_time_to_speech_ms)"
  },
  {
    "label": "NetEqDecodingTestTwoInstances()",
    "kind": "Method",
    "detail": "Function (SimulatedClock clock_ ; std::unique_ptr<NetEq> neteq_ ; NetEq::Config config_ ; std::unique_ptr<test::RtpFileSource> rtp_source_ ; std::unique_ptr<test::Packet> packet_ ; AudioFrame out_frame_ ; int output_sample_rate_ ; int algorithmic_delay_ms_ ; } ; class NetEqDecodingTestTwoInstances : public NetEqDecodingTest { public :)",
    "insertText": "NetEqDecodingTestTwoInstances() : NetEqDecodingTest()"
  },
  {
    "label": "CreateSecondInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSecondInstance()"
  }
]