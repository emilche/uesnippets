[
  {
    "label": "FStackSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackSample"
  },
  {
    "label": "IStackSamplesProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStackSamplesProvider"
  },
  {
    "label": "IStackSamplesProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / PagedArray . h \" # include \" HAL / Platform . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { struct FStackSample { double Time ; uint32 Count ; uint64* Addresses ; } ; class IStackSamplesProvider : public IProvider { public : ~)",
    "insertText": "IStackSamplesProvider()"
  },
  {
    "label": "GetStackSamples()",
    "kind": "Method",
    "detail": "Function (const TPagedArray<FStackSample>*)",
    "insertText": "GetStackSamples(uint32 ThreadId)"
  },
  {
    "label": "GetStackSamplesProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetStackSamplesProviderName()"
  },
  {
    "label": "ReadStackSamplesProvider()",
    "kind": "Method",
    "detail": "Function (const IStackSamplesProvider&)",
    "insertText": "ReadStackSamplesProvider(const IAnalysisSession& Session)"
  }
]