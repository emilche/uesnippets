[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ILiveCodingServerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILiveCodingServerModule"
  },
  {
    "label": "FModuleFiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleFiles"
  },
  {
    "label": "ILiveCodingServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILiveCodingServer"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Map . h \" # include \" Features / IModularFeature . h \" # include \" Modules / ModuleInterface . h \" # include \" Delegates / Delegate . h \" # define LIVE_CODING_SERVER_FEATURE_NAME \" LiveCodingServer \" enum class ELiveCodingResult { Success,Error } ; enum class ELiveCodingLogVerbosity { Info,Success,Warning,Failure,} ; enum class ELiveCodingCompileReason { Initial,Retry,} ; enum class ELiveCodingCompileResult { Success,Canceled,Failure,Retry,} ; class ILiveCodingServerModule : public IModuleInterface { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} ; struct FModuleFiles { TArray<FString> Objects ; TArray<FString> Libraries ; } ; typedef TMap<FString,FModuleFiles> FModuleToModuleFiles ; class ILiveCodingServer : public IModularFeature { public : void)",
    "insertText": "Start(const wchar_t* ProcessGroupName)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "RestartTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartTargets()"
  },
  {
    "label": "SetLinkerPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinkerPath(const wchar_t* LinkerPath, const TMap<FString, FString>& LinkerEnvironment)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FBringToFrontDelegate)"
  },
  {
    "label": "GetBringToFrontDelegate()",
    "kind": "Method",
    "detail": "Function (FBringToFrontDelegate&)",
    "insertText": "GetBringToFrontDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FClearOutputDelegate)"
  },
  {
    "label": "GetClearOutputDelegate()",
    "kind": "Method",
    "detail": "Function (FClearOutputDelegate&)",
    "insertText": "GetClearOutputDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FStatusChangeDelegate, const wchar_t*)"
  },
  {
    "label": "GetStatusChangeDelegate()",
    "kind": "Method",
    "detail": "Function (FStatusChangeDelegate&)",
    "insertText": "GetStatusChangeDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FLogOutputDelegate, ELiveCodingLogVerbosity, const wchar_t*)"
  },
  {
    "label": "GetLogOutputDelegate()",
    "kind": "Method",
    "detail": "Function (FLogOutputDelegate&)",
    "insertText": "GetLogOutputDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_SixParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_SixParams(ELiveCodingCompileResult, FCompileDelegate, const TArray<FString>&, const TArray<FString>&, const TSet<FString>&, TArray<FString>&, FModuleToModuleFiles&, ELiveCodingCompileReason)"
  },
  {
    "label": "GetCompileDelegate()",
    "kind": "Method",
    "detail": "Function (FCompileDelegate&)",
    "insertText": "GetCompileDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FCompileStartedDelegate)"
  },
  {
    "label": "GetCompileStartedDelegate()",
    "kind": "Method",
    "detail": "Function (FCompileStartedDelegate&)",
    "insertText": "GetCompileStartedDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FCompileFinishedDelegate, ELiveCodingResult, const wchar_t*)"
  },
  {
    "label": "GetCompileFinishedDelegate()",
    "kind": "Method",
    "detail": "Function (FCompileFinishedDelegate&)",
    "insertText": "GetCompileFinishedDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FShowConsoleDelegate)"
  },
  {
    "label": "GetShowConsoleDelegate()",
    "kind": "Method",
    "detail": "Function (FShowConsoleDelegate&)",
    "insertText": "GetShowConsoleDelegate()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSetVisibleDelegate, bool)"
  },
  {
    "label": "GetSetVisibleDelegate()",
    "kind": "Method",
    "detail": "Function (FSetVisibleDelegate&)",
    "insertText": "GetSetVisibleDelegate()"
  },
  {
    "label": "HasReinstancingProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReinstancingProcess()"
  },
  {
    "label": "ShowCompileFinishNotification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowCompileFinishNotification()"
  }
]