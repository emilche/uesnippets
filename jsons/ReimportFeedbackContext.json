[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FReimportFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReimportFeedbackContext"
  },
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "SReimportFeedback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SReimportFeedback"
  },
  {
    "label": "FReimportFeedbackContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" Logging / LogVerbosity . h \" # include \" Logging / MessageLog . h \" # include \" Logging / TokenizedMessage . h \" # include \" Misc / FeedbackContext . h \" # include \" Misc / ScopedSlowTask . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / Notifications / INotificationWidget . h \" # include \" Widgets / Notifications / SNotificationList . h \" class FText ; class SWidget ; class FReimportFeedbackContext : public FFeedbackContext,public INotificationWidget,public TSharedFromThis<FReimportFeedbackContext> { public :)",
    "insertText": "FReimportFeedbackContext(const FSimpleDelegate& InOnPauseClicked, const FSimpleDelegate& InOnAbortClicked)"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show(int32 TotalWork)"
  },
  {
    "label": "GetMessageLog()",
    "kind": "Method",
    "detail": "Function (FMessageLog&)",
    "insertText": "GetMessageLog()"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidget(const TSharedRef<SWidget>& Widget)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "OnSetCompletionState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSetCompletionState(SNotificationItem::ECompletionState State)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "StartSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSlowTask(const FText& Task, bool bShowCancelButton=false)"
  },
  {
    "label": "ProgressReported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgressReported(const float TotalProgressInterp, FText DisplayMessage)"
  },
  {
    "label": "FinalizeSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSlowTask()"
  },
  {
    "label": "OnNotificationExpired()",
    "kind": "Method",
    "detail": "Function (bool bSuppressSlowTaskMessages ; TUniquePtr<FScopedSlowTask> MainTask ; private : void)",
    "insertText": "OnNotificationExpired()"
  }
]