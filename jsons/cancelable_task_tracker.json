[
  {
    "label": "Location",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Location"
  },
  {
    "label": "ScopedClosureRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedClosureRunner"
  },
  {
    "label": "TaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_CANCELABLE_TASK_TRACKER_H_ # define BASE_TASK_CANCELABLE_TASK_TRACKER_H_ # include<stdint . h> # include<memory> # include<utility> # include \" base / base_export . h \" # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / callback_helpers . h \" # include \" base / containers / small_map . h \" # include \" base / memory / ref_counted . h \" # include \" base / memory / weak_ptr . h \" # include \" base / sequence_checker . h \" # include \" base / synchronization / atomic_flag . h \" # include \" base / task / post_task_and_reply_with_result_internal . h \" namespace base { class Location ; class ScopedClosureRunner ; class TaskRunner ; class BASE_EXPORT CancelableTaskTracker { public : typedef int64_t TaskId ; const TaskId kBadTaskId ; using IsCanceledCallback = RepeatingCallback<)",
    "insertText": "bool()"
  },
  {
    "label": "CancelableTaskTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableTaskTracker()"
  },
  {
    "label": "CancelableTaskTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableTaskTracker(const CancelableTaskTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CancelableTaskTracker&)",
    "insertText": "operator(const CancelableTaskTracker&)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (TaskId)",
    "insertText": "PostTask(TaskRunner* task_runner, const Location& from_here, OnceClosure task)"
  },
  {
    "label": "PostTaskAndReply()",
    "kind": "Method",
    "detail": "Function (TaskId)",
    "insertText": "PostTaskAndReply(TaskRunner* task_runner, const Location& from_here, OnceClosure task, OnceClosure reply)"
  },
  {
    "label": "PostTaskAndReplyWithResult()",
    "kind": "Method",
    "detail": "Function (template<TaskReturnType,ReplyArgType> TaskId)",
    "insertText": "PostTaskAndReplyWithResult(TaskRunner* task_runner, const Location& from_here, OnceCallback<TaskReturnType()> task, OnceCallback<void(ReplyArgType)> reply)"
  },
  {
    "label": "TaskReturnType()",
    "kind": "Method",
    "detail": "Function (auto* result = new std::unique_ptr<)",
    "insertText": "TaskReturnType()"
  },
  {
    "label": "NewTrackedTaskId()",
    "kind": "Method",
    "detail": "Function (} TaskId)",
    "insertText": "NewTrackedTaskId(IsCanceledCallback* is_canceled_cb)"
  },
  {
    "label": "TryCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryCancel(TaskId id)"
  },
  {
    "label": "TryCancelAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryCancelAll()"
  },
  {
    "label": "HasTrackedTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTrackedTasks()"
  },
  {
    "label": "RunIfNotCanceled()",
    "kind": "Method",
    "detail": "Function (private : using TaskCancellationFlag = RefCountedData<AtomicFlag> ; void)",
    "insertText": "RunIfNotCanceled(const scoped_refptr<SequencedTaskRunner>& origin_task_runner, const scoped_refptr<TaskCancellationFlag>& flag, OnceClosure task)"
  },
  {
    "label": "RunThenUntrackIfNotCanceled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunThenUntrackIfNotCanceled(const scoped_refptr<SequencedTaskRunner>& origin_task_runner, const scoped_refptr<TaskCancellationFlag>& flag, OnceClosure task, OnceClosure untrack)"
  },
  {
    "label": "IsCanceled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCanceled(const scoped_refptr<SequencedTaskRunner>& origin_task_runner, const scoped_refptr<TaskCancellationFlag>& flag, const ScopedClosureRunner& cleanup_runner)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Track(TaskId id, scoped_refptr<TaskCancellationFlag> flag)"
  },
  {
    "label": "Untrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Untrack(TaskId id)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (small_map<std::map<TaskId,scoped_refptr<TaskCancellationFlag>>,4> task_flags_ ; TaskId next_id_ = 1 ;)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]