[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_CLAMP_H # define _LIBCPP___ALGORITHM_RANGES_CLAMP_H # include<__assert> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__utility / forward . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __clamp { struct __fn { template<class _Type,class _Proj = identity,indirect_strict_weak_order<projected<const _Type*,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI const _Type&)",
    "insertText": "operator()(const _Type& __value, const _Type& __low, const _Type& __high, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!bool(std::invoke(__comp, std::invoke(__proj, __high), std::invoke(__proj, __low))), \"Bad bounds passed to std::ranges::clamp\")"
  }
]