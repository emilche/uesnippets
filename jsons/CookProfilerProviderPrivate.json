[
  {
    "label": "FPackageScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageScope"
  },
  {
    "label": "FCookProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookProfilerProvider"
  },
  {
    "label": "FPackageScope()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / PagedArray . h \" # include \" Common / ProviderLock . h \" # include \" Containers / Map . h \" # include \" TraceServices / Model / CookProfilerProvider . h \" namespace TraceServices { thread_local FProviderLock::FThreadLocalState GCookProviderLockState ; struct FPackageScope {)",
    "insertText": "FPackageScope()"
  },
  {
    "label": "FPackageScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPackageScope(uint64 InPackageId, double InTimestamp, EPackageEventStatType InType, bool InIsEnterScope) : PackageId(InPackageId) , Timestamp(InTimestamp) , Type(InType) , bIsEnterScope(InIsEnterScope)"
  },
  {
    "label": "FCookProfilerProvider()",
    "kind": "Method",
    "detail": "Function (} uint64 PackageId ; double Timestamp ; EPackageEventStatType Type ; bool bIsEnterScope ; } ; class FCookProfilerProvider : public ICookProfilerProvider,public IEditableCookProfilerProvider { public :)",
    "insertText": "FCookProfilerProvider(IAnalysisSession& Session)"
  },
  {
    "label": "FCookProfilerProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCookProfilerProvider()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "BeginRead(GCookProviderLockState)"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "EndRead(GCookProviderLockState)"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "ReadAccessCheck(GCookProviderLockState)"
  },
  {
    "label": "GetNumPackages()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumPackages()"
  },
  {
    "label": "EnumeratePackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumeratePackages(double StartTime, double EndTime, EnumeratePackagesCallback Callback)"
  },
  {
    "label": "CreateAggregation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAggregation(TArray64<FPackageData>& OutPackages)"
  },
  {
    "label": "BeginEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEdit()"
  },
  {
    "label": "BeginWrite()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "BeginWrite(GCookProviderLockState)"
  },
  {
    "label": "EndEdit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndEdit()"
  },
  {
    "label": "EndWrite()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "EndWrite(GCookProviderLockState)"
  },
  {
    "label": "EditAccessCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EditAccessCheck()"
  },
  {
    "label": "WriteAccessCheck()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "WriteAccessCheck(GCookProviderLockState)"
  },
  {
    "label": "EditPackage()",
    "kind": "Method",
    "detail": "Function (} FPackageData*)",
    "insertText": "EditPackage(uint64 Id)"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScopeEntry(uint32 ThreadId, uint64 InPackageId, double Timestamp, EPackageEventStatType InType, bool InIsEnterScope)"
  },
  {
    "label": "FindOrAddPackage()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "FindOrAddPackage(uint64 Id)"
  },
  {
    "label": "FindOrAddScopeEntries()",
    "kind": "Method",
    "detail": "Function (TPagedArray<FPackageScope>&)",
    "insertText": "FindOrAddScopeEntries(uint32 ThreadId)"
  }
]