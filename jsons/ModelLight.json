[
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UModelComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModelComponent"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "FBSPSurfaceStaticLighting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBSPSurfaceStaticLighting"
  },
  {
    "label": "FLightmassExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassExporter"
  },
  {
    "label": "FBSPSurfaceStaticLighting()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" StaticLighting . h \" # include \" Model . h \" class FShadowMapData2D ; class ULevel ; class ULightComponent ; class UModelComponent ; struct FQuantizedLightmapData ; class FBSPSurfaceStaticLighting : public FStaticLightingTextureMapping,public FStaticLightingMesh { public : const FNodeGroup* NodeGroup ; bool bComplete ; TMap<ULightComponent*,FShadowMapData2D*> ShadowMapData ; FQuantizedLightmapData* QuantizedData ; FIntRect MappedRect ;)",
    "insertText": "FBSPSurfaceStaticLighting(const FNodeGroup* InNodeGroup, UModel* Model, UModelComponent* Component)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriangle(int32 TriangleIndex,FStaticLightingVertex& OutV0,FStaticLightingVertex& OutV1,FStaticLightingVertex& OutV2)"
  },
  {
    "label": "GetTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriangleIndices(int32 TriangleIndex,int32& OutI0,int32& OutI1,int32& OutI2)"
  },
  {
    "label": "IntersectLightRay()",
    "kind": "Method",
    "detail": "Function (FLightRayIntersection)",
    "insertText": "IntersectLightRay(const FVector& Start,const FVector& End,bool bFindNearestIntersection)"
  },
  {
    "label": "IsInstancedMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstancedMesh()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "Apply(FQuantizedLightmapData* QuantizedData, const TMap<ULightComponent*,FShadowMapData2D*>& ShadowMapData, const FStaticLightingBuildContext* LightingContext)"
  },
  {
    "label": "DebugThisMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DebugThisMapping()"
  },
  {
    "label": "ExportMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportMapping(class FLightmassExporter* Exporter)"
  },
  {
    "label": "GetLightingGuid()",
    "kind": "Method",
    "detail": "Function (# endif const FGuid&)",
    "insertText": "GetLightingGuid()"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (} const UModel*)",
    "insertText": "GetModel()"
  },
  {
    "label": "GetMappedObject()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR UObject*)",
    "insertText": "GetMappedObject()"
  }
]