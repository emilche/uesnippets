[
  {
    "label": "FRenderCommandPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderCommandPipe"
  },
  {
    "label": "FRDGPooledBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGPooledBuffer"
  },
  {
    "label": "FResourceArrayInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceArrayInterface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRenderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderResource"
  },
  {
    "label": "EMipFadeSettings",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMipFadeSettings"
  },
  {
    "label": "FMipFadeSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipFadeSettings"
  },
  {
    "label": "FMipBiasFade",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipBiasFade"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FTextureWithSRV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureWithSRV"
  },
  {
    "label": "FTextureReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureReference"
  },
  {
    "label": "FVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexBuffer"
  },
  {
    "label": "FVertexBufferWithSRV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexBufferWithSRV"
  },
  {
    "label": "FIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndexBuffer"
  },
  {
    "label": "FBufferWithRDG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferWithRDG"
  },
  {
    "label": "ResourceType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourceType"
  },
  {
    "label": "TGlobalResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGlobalResource"
  },
  {
    "label": "ReleaseRHIForAllResources()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIFwd . h \" # include \" RHIShaderPlatform . h \" # include \" RHIFeatureLevel . h \" # include \" RenderTimer . h \" # include \" CoreGlobals . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Containers / Array . h \" # include \" Containers / ResourceArray . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" Containers / EnumAsByte . h \" # include \" Containers / List . h \" # include \" Containers / ResourceArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" PixelFormat . h \" # include \" RenderCore . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" RenderingThread . h \" # include \" Serialization / MemoryLayout . h \" # include \" DataDrivenShaderPlatformInfo . h \" # endif class FRenderCommandPipe ; class FRDGPooledBuffer ; class FResourceArrayInterface ; enum class ERenderResourceState : uint8 { Default,BatchReleased,Deleted,} ; enum class ERayTracingMode : uint8 { Disabled,Enabled,Dynamic } ; class FRenderResource { public : enum class EInitPhase : uint8 { Pre,Default,MAX } ; void)",
    "insertText": "ReleaseRHIForAllResources()"
  },
  {
    "label": "InitPreRHIResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPreRHIResources()"
  },
  {
    "label": "ChangeFeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFeatureLevel(ERHIFeatureLevel::Type NewFeatureLevel)"
  },
  {
    "label": "FRenderResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderResource()"
  },
  {
    "label": "FRenderResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderResource(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "FRenderResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderResource(const FRenderResource&)"
  },
  {
    "label": "FRenderResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRenderResource(FRenderResource&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRenderResource&)",
    "insertText": "operator(const FRenderResource& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRenderResource&)",
    "insertText": "operator(FRenderResource&& Other)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitResource(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResource(GetImmediateCommandList())"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "UpdateRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetOwnerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetOwnerName()"
  },
  {
    "label": "SetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetFeatureLevel(const FStaticFeatureLevel InFeatureLevel)"
  },
  {
    "label": "FeatureLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FeatureLevel(ERHIFeatureLevel::Type)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} const FStaticFeatureLevel)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "HasValidFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidFeatureLevel()"
  },
  {
    "label": "GetResourceArray()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef Buffer ; FResourceArrayInterface* RESTRICT ResourceArray = InOutResourceObject ? InOutResourceObject ->)",
    "insertText": "GetResourceArray()"
  },
  {
    "label": "CreateRHIBufferInternal()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "CreateRHIBufferInternal(RHICmdList, InDebugName, GetOwnerName(), ResourceCount, InBufferUsageFlags, ResourceArray, InOutResourceObject == nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ShouldFreeResourceObject(InOutResourceObject, ResourceArray))"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (delete InOutResourceObject ; InOutResourceObject = nullptr ; } return Buffer ; } FRHICommandListBase&)",
    "insertText": "GetImmediateCommandList()"
  },
  {
    "label": "SetInitPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitPhase(EInitPhase InInitPhase)"
  },
  {
    "label": "ShouldFreeResourceObject()",
    "kind": "Method",
    "detail": "Function (InitPhase = InInitPhase ; } private : bool)",
    "insertText": "ShouldFreeResourceObject(void* ResourceObject, FResourceArrayInterface* ResourceArray)"
  },
  {
    "label": "CreateRHIBufferInternal()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "CreateRHIBufferInternal(FRHICommandListBase& RHICmdList, const TCHAR* InDebugName, const FName& InOwnerName, uint32 ResourceCount, EBufferUsageFlags InBufferUsageFlags, FResourceArrayInterface* ResourceArray, bool bWithoutNativeResource)"
  },
  {
    "label": "BeginInitResource()",
    "kind": "Method",
    "detail": "Function (# if RHI_ENABLE_RESOURCE_INFO FName OwnerName ; # endif int32 ListIndex ; TEnumAsByte<ERHIFeatureLevel::Type> FeatureLevel ; EInitPhase InitPhase = EInitPhase::Default ; public : ERenderResourceState ResourceState = ERenderResourceState::Default ; } ; void)",
    "insertText": "BeginInitResource(FRenderResource* Resource, FRenderCommandPipe* RenderCommandPipe = nullptr)"
  },
  {
    "label": "BeginUpdateResourceRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUpdateResourceRHI(FRenderResource* Resource, FRenderCommandPipe* RenderCommandPipe = nullptr)"
  },
  {
    "label": "BeginReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReleaseResource(FRenderResource* Resource, FRenderCommandPipe* RenderCommandPipe = nullptr)"
  },
  {
    "label": "StartBatchedRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartBatchedRelease()"
  },
  {
    "label": "EndBatchedRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBatchedRelease()"
  },
  {
    "label": "ReleaseResourceAndFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResourceAndFlush(FRenderResource* Resource)"
  },
  {
    "label": "FMipFadeSettings()",
    "kind": "Method",
    "detail": "Function (enum EMipFadeSettings { MipFade_Normal = 0,MipFade_Slow,MipFade_NumSettings,} ; struct FMipFadeSettings {)",
    "insertText": "FMipFadeSettings(float InFadeInSpeed, float InFadeOutSpeed ) : FadeInSpeed( InFadeInSpeed ) , FadeOutSpeed( InFadeOutSpeed)"
  },
  {
    "label": "FMipBiasFade()",
    "kind": "Method",
    "detail": "Function (} float FadeInSpeed ; float FadeOutSpeed ; } ; float GEnableMipLevelFading ; FMipFadeSettings GMipFadeSettings [ MipFade_NumSettings ] ; struct FMipBiasFade {)",
    "insertText": "FMipBiasFade() : TotalMipCount(0.0f) , MipCountDelta(0.0f) , StartTime(0.0f) , MipCountFadingRate(0.0f) , BiasOffset(0.0f)"
  },
  {
    "label": "SetNewMipCount()",
    "kind": "Method",
    "detail": "Function (} float TotalMipCount ; float MipCountDelta ; float StartTime ; float MipCountFadingRate ; float BiasOffset ; void)",
    "insertText": "SetNewMipCount(float ActualMipCount, float TargetMipCount, double LastRenderTime, EMipFadeSettings FadeSetting)"
  },
  {
    "label": "CalcMipBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcMipBias()"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (float DeltaTime = GRenderingRealtimeClock .)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float TimeFactor = FMath::Min<)",
    "insertText": "float(DeltaTime * MipCountFadingRate, 1.0f)"
  },
  {
    "label": "FloatSelect()",
    "kind": "Method",
    "detail": "Function (float MipBias = BiasOffset - MipCountDelta* TimeFactor ; return)",
    "insertText": "FloatSelect(GEnableMipLevelFading, MipBias, 0.0f)"
  },
  {
    "label": "IsFading()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFading()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (float TimeFactor = DeltaTime* MipCountFadingRate ;)",
    "insertText": "return(FMath::Abs<float>(MipCountDelta) > UE_SMALL_NUMBER && TimeFactor < 1.0f)"
  },
  {
    "label": "FTexture()",
    "kind": "Method",
    "detail": "Function (} } ; class FTexture : public FRenderResource { public : FTextureRHIRef TextureRHI ; FSamplerStateRHIRef SamplerStateRHI ; FSamplerStateRHIRef DeferredPassSamplerStateRHI ; double LastRenderTime = - FLT_MAX ; FMipBiasFade MipBiasFade ; bool bGreyScaleFormat = false ; bool bIgnoreGammaConversions = false ; bool bSRGB = false ;)",
    "insertText": "FTexture()"
  },
  {
    "label": "FTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTexture(const FTexture&)"
  },
  {
    "label": "FTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTexture(FTexture&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTexture&)",
    "insertText": "operator(const FTexture& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTexture&)",
    "insertText": "operator(FTexture&& Other)"
  },
  {
    "label": "GetTextureRHI()",
    "kind": "Method",
    "detail": "Function (const FTextureRHIRef&)",
    "insertText": "GetTextureRHI()"
  },
  {
    "label": "GetSizeY()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeY()"
  },
  {
    "label": "GetSizeZ()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeZ()"
  },
  {
    "label": "GetOrCreateSamplerState()",
    "kind": "Method",
    "detail": "Function (protected : FRHISamplerState*)",
    "insertText": "GetOrCreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "FTextureWithSRV()",
    "kind": "Method",
    "detail": "Function (} ; class FTextureWithSRV : public FTexture { public :)",
    "insertText": "FTextureWithSRV()"
  },
  {
    "label": "FTextureReference()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef ShaderResourceViewRHI ; } ; class FTextureReference : public FRenderResource { public : FTextureReferenceRHIRef TextureReferenceRHI ; private : bool bInitialized_GameThread ; public :)",
    "insertText": "FTextureReference()"
  },
  {
    "label": "GetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetLastRenderTime()"
  },
  {
    "label": "InvalidateLastRenderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLastRenderTime()"
  },
  {
    "label": "IsInitialized_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized_GameThread()"
  },
  {
    "label": "BeginRelease_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRelease_GameThread()"
  },
  {
    "label": "FVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FVertexBuffer : public FRenderResource { public :)",
    "insertText": "FVertexBuffer()"
  },
  {
    "label": "FVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVertexBuffer(const FVertexBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVertexBuffer&)",
    "insertText": "operator(const FVertexBuffer& Other)"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (const FBufferRHIRef&)",
    "insertText": "GetRHI()"
  },
  {
    "label": "FVertexBufferWithSRV()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef VertexBufferRHI ; } ; class FVertexBufferWithSRV : public FVertexBuffer { public :)",
    "insertText": "FVertexBufferWithSRV()"
  },
  {
    "label": "FIndexBuffer()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef ShaderResourceViewRHI ; FUnorderedAccessViewRHIRef UnorderedAccessViewRHI ; } ; class FIndexBuffer : public FRenderResource { public :)",
    "insertText": "FIndexBuffer()"
  },
  {
    "label": "FIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIndexBuffer(const FIndexBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIndexBuffer&)",
    "insertText": "operator(const FIndexBuffer& Other)"
  },
  {
    "label": "FBufferWithRDG()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef IndexBufferRHI ; } ; class FBufferWithRDG : public FRenderResource { public :)",
    "insertText": "FBufferWithRDG()"
  },
  {
    "label": "FBufferWithRDG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBufferWithRDG(const FBufferWithRDG& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBufferWithRDG&)",
    "insertText": "operator(const FBufferWithRDG& Other)"
  },
  {
    "label": "TGlobalResource()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer> Buffer ; } ; template<class ResourceType,FRenderResource::EInitPhase InInitPhase = FRenderResource::EInitPhase::Default> class TGlobalResource : public ResourceType { public :)",
    "insertText": "TGlobalResource()"
  },
  {
    "label": "InitGlobalResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGlobalResource()"
  },
  {
    "label": "TGlobalResource()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "TGlobalResource(Args... InArgs) : ResourceType(InArgs...)"
  },
  {
    "label": "ReleaseGlobalResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseGlobalResource()"
  },
  {
    "label": "SetInitPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitPhase(InInitPhase)"
  },
  {
    "label": "BeginInitResource()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BeginInitResource((ResourceType*)this)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "check(IsInRenderingThread())"
  },
  {
    "label": "endif()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "endif((ResourceType*)this)->ReleaseResource()"
  }
]