[
  {
    "label": "WhitespaceHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WhitespaceHelper"
  },
  {
    "label": "StringToNumberParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringToNumberParser"
  },
  {
    "label": "Result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Result"
  },
  {
    "label": "Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base"
  },
  {
    "label": "Positive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Positive"
  },
  {
    "label": "Negative",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Negative"
  },
  {
    "label": "IntToStringT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_NUMBER_CONVERSIONS_INTERNAL_H_ # define BASE_STRINGS_STRING_NUMBER_CONVERSIONS_INTERNAL_H_ # include<ctype . h> # include<errno . h> # include<stdlib . h> # include<wctype . h> # include<limits> # include \" base / check . h \" # include \" base / logging . h \" # include \" base / numerics / safe_math . h \" # include \" base / strings / string_util . h \" # include \" base / third_party / double_conversion / double - conversion / double - conversion . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace internal { template<STR,INT> STR)",
    "insertText": "IntToStringT(INT value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t kOutputBufSize = 3*)",
    "insertText": "sizeof(INT)"
  },
  {
    "label": "INT()",
    "kind": "Method",
    "detail": "Function (using CHR = STR::value_type ; CHR outbuf [ kOutputBufSize ] ; std::make_unsigned_t<INT> res = CheckedNumeric<)",
    "insertText": "INT(value).UnsignedAbs().ValueOrDie()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (CHR* end = outbuf + kOutputBufSize ; CHR* i = end ; do { - - i ;)",
    "insertText": "DCHECK(i != outbuf)"
  },
  {
    "label": "CHR()",
    "kind": "Method",
    "detail": "Function (* i = static_cast<)",
    "insertText": "CHR((res % 10) + '0')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (res / = 1 0 ; })",
    "insertText": "while(res != 0)"
  },
  {
    "label": "CHR()",
    "kind": "Method",
    "detail": "Function (* i = static_cast<)",
    "insertText": "CHR('-')"
  },
  {
    "label": "STR()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "STR(i, end)"
  },
  {
    "label": "CharToDigit()",
    "kind": "Method",
    "detail": "Function (} template<int BASE,CHAR> absl::optional<uint8_t>)",
    "insertText": "CharToDigit(CHAR c)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class WhitespaceHelper<char16_t> { public : bool)",
    "insertText": "Invoke(char16_t c)"
  },
  {
    "label": "LocalIsWhitespace()",
    "kind": "Method",
    "detail": "Function (} } ; template<CHAR> bool)",
    "insertText": "LocalIsWhitespace(CHAR c)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} template<Number,int kBase> class StringToNumberParser { public : struct Result { Number value = 0 ; bool valid = false ; } ; Number kMin = std::numeric_limits<Number)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (Number kMax = std::numeric_limits<Number)",
    "insertText": "max()"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (template<Sign> class Base { public : template<Iter> Result)",
    "insertText": "Invoke(Iter begin, Iter end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Number value = 0 ;)",
    "insertText": "if(begin == end)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (begin + = 2 ; })",
    "insertText": "for(Iter current = begin; current != end; ++current)"
  },
  {
    "label": "kBase()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint8_t> new_digit = CharToDigit<)",
    "insertText": "kBase(*current)"
  },
  {
    "label": "CheckBounds()",
    "kind": "Method",
    "detail": "Function (Result result =)",
    "insertText": "CheckBounds(value, *new_digit)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (value* = kBase ; } value =)",
    "insertText": "Increment(value, *new_digit)"
  },
  {
    "label": "CheckBounds()",
    "kind": "Method",
    "detail": "Function (} return { value,true } ; } } ; class Positive : public Base<Positive> { public : Result)",
    "insertText": "CheckBounds(Number value, uint8_t new_digit)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (using Parser = StringToNumberParser<Number,kBase> ; using Result = Parser::Result ; bool has_leading_whitespace = false ; auto begin = input .)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (auto end = input .)",
    "insertText": "end()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (has_leading_whitespace = true ; + + begin ; })",
    "insertText": "if(begin != end && *begin == '-')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result . valid& = ! has_leading_whitespace ; return result ; })",
    "insertText": "if(begin != end && *begin == '+')"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (+ + begin ; } Result result = Parser::)",
    "insertText": "Invoke(begin, end)"
  },
  {
    "label": "StringToIntImpl()",
    "kind": "Method",
    "detail": "Function (result . valid& = ! has_leading_whitespace ; return result ; } template<T,VALUE,CharT = T::value_type> bool)",
    "insertText": "StringToIntImpl(T input, VALUE& output)"
  },
  {
    "label": "CharT()",
    "kind": "Method",
    "detail": "Function (auto result = StringToNumber<VALUE,1 0,)",
    "insertText": "CharT(input)"
  },
  {
    "label": "HexStringToIntImpl()",
    "kind": "Method",
    "detail": "Function (output = result . value ; return result . valid ; } template<T,VALUE,CharT = T::value_type> bool)",
    "insertText": "HexStringToIntImpl(T input, VALUE& output)"
  },
  {
    "label": "GetDoubleToStringConverter()",
    "kind": "Method",
    "detail": "Function (output = result . value ; return result . valid ; } const double_conversion::DoubleToStringConverter*)",
    "insertText": "GetDoubleToStringConverter()"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (double_conversion::DoubleToStringConverter)",
    "insertText": "converter(double_conversion::DoubleToStringConverter::EMIT_POSITIVE_EXPONENT_SIGN, nullptr, nullptr, 'e', -6, 12, 0, 0)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<StringT,CharT> StringT)",
    "insertText": "ToString(const CharT* data, size_t size)"
  },
  {
    "label": "DoubleToStringT()",
    "kind": "Method",
    "detail": "Function (} template<StringT> StringT)",
    "insertText": "DoubleToStringT(double value)"
  },
  {
    "label": "builder()",
    "kind": "Method",
    "detail": "Function (char buffer [ 3 2 ] ; double_conversion::StringBuilder)",
    "insertText": "builder(buffer, sizeof(buffer))"
  },
  {
    "label": "GetDoubleToStringConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDoubleToStringConverter()->ToShortest(value, &builder)"
  },
  {
    "label": "StringToDoubleImpl()",
    "kind": "Method",
    "detail": "Function (} template<STRING,CHAR> bool)",
    "insertText": "StringToDoubleImpl(STRING input, const CHAR* data, double& output)"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (double_conversion::StringToDoubleConverter)",
    "insertText": "converter(double_conversion::StringToDoubleConverter::ALLOW_LEADING_SPACES | double_conversion::StringToDoubleConverter::ALLOW_TRAILING_JUNK, 0.0, 0, nullptr, nullptr)"
  },
  {
    "label": "StringToDouble()",
    "kind": "Method",
    "detail": "Function (int processed_characters_count ; output = converter .)",
    "insertText": "StringToDouble(data, checked_cast<int>(input.size()), &processed_characters_count)"
  },
  {
    "label": "HexStringToByteContainer()",
    "kind": "Method",
    "detail": "Function (} template<Char,OutIter> bool)",
    "insertText": "HexStringToByteContainer(StringPiece input, OutIter output)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t count = input .)",
    "insertText": "size()"
  },
  {
    "label": "CharToDigit()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint8_t> msb =)",
    "insertText": "CharToDigit(input[i * 2])"
  },
  {
    "label": "CharToDigit()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint8_t> lsb =)",
    "insertText": "CharToDigit(input[i * 2 + 1])"
  }
]