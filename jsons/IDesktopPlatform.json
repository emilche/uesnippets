[
  {
    "label": "FEngineVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEngineVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedSystemModalMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSystemModalMode"
  },
  {
    "label": "FTargetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetInfo"
  },
  {
    "label": "IDesktopPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDesktopPlatform"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / CoreDelegates . h \" # include \" Misc / CompilationResult . h \" # include \" HAL / PlatformProcess . h \" class FEngineVersion ; namespace EFileDialogFlags { enum Type { None = 0 x00,Multiple = 0 x01 } ; } enum class EFontImportFlags { None = 0 x0,EnableAntialiasing = 0 x1,EnableBold = 0 x2,EnableItalic = 0 x4,EnableUnderline = 0 x8,AlphaOnly = 0 x10,CreatePrintableOnly = 0 x20,IncludeASCIIRange = 0 x40,EnableDropShadow = 0 x80,EnableLegacyMode = 0 x100,UseDistanceFieldAlpha = 0 x200 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFontImportFlags)"
  },
  {
    "label": "FScopedSystemModalMode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FScopedSystemModalMode()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FCoreDelegates::PreModal .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "IDesktopPlatform()",
    "kind": "Method",
    "detail": "Function (# endif } } ; struct FTargetInfo { FString Name ; FString Path ; EBuildTargetType Type ; TOptional<bool> DefaultTarget ; } ; class IDesktopPlatform { public : ~)",
    "insertText": "IDesktopPlatform()"
  },
  {
    "label": "OpenFileDialog()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OpenFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames)"
  },
  {
    "label": "OpenFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames, int32& outFilterIndex)"
  },
  {
    "label": "SaveFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveFileDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, const FString& DefaultFile, const FString& FileTypes, uint32 Flags, TArray<FString>& OutFilenames)"
  },
  {
    "label": "OpenDirectoryDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenDirectoryDialog(const void* ParentWindowHandle, const FString& DialogTitle, const FString& DefaultPath, FString& OutFolderName)"
  },
  {
    "label": "OpenFontDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFontDialog(const void* ParentWindowHandle, FString& OutFontName, float& OutHeight, EFontImportFlags& OutFlags)"
  },
  {
    "label": "GetEngineDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEngineDescription(const FString& Identifier)"
  },
  {
    "label": "GetCurrentEngineIdentifier()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentEngineIdentifier()"
  },
  {
    "label": "RegisterEngineInstallation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterEngineInstallation(const FString& RootDir, FString& OutIdentifier)"
  },
  {
    "label": "EnumerateEngineInstallations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEngineInstallations(TMap<FString, FString>& OutInstallations)"
  },
  {
    "label": "EnumerateLauncherEngineInstallations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateLauncherEngineInstallations(TMap<FString, FString>& OutInstallations)"
  },
  {
    "label": "EnumerateLauncherSampleInstallations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateLauncherSampleInstallations(TArray<FString>& OutInstallations)"
  },
  {
    "label": "EnumerateLauncherSampleProjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateLauncherSampleProjects(TArray<FString>& OutFileNames)"
  },
  {
    "label": "GetEngineRootDirFromIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEngineRootDirFromIdentifier(const FString& Identifier, FString& OutRootDir)"
  },
  {
    "label": "GetEngineIdentifierFromRootDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEngineIdentifierFromRootDir(const FString& RootDir, FString& OutIdentifier)"
  },
  {
    "label": "GetDefaultEngineIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultEngineIdentifier(FString& OutIdentifier)"
  },
  {
    "label": "IsPreferredEngineIdentifier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreferredEngineIdentifier(const FString& Identifier, const FString& OtherIdentifier)"
  },
  {
    "label": "GetDefaultEngineRootDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultEngineRootDir(FString& OutRootDir)"
  },
  {
    "label": "GetEngineSavedConfigDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEngineSavedConfigDirectory(const FString& Identifier)"
  },
  {
    "label": "TryGetEngineVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetEngineVersion(const FString& RootDir, FEngineVersion& OutVersion)"
  },
  {
    "label": "IsStockEngineRelease()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStockEngineRelease(const FString& Identifier)"
  },
  {
    "label": "TryParseStockEngineVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryParseStockEngineVersion(const FString& Identifier, FEngineVersion& OutVersion)"
  },
  {
    "label": "IsSourceDistribution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceDistribution(const FString& RootDir)"
  },
  {
    "label": "IsPerforceBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPerforceBuild(const FString& RootDir)"
  },
  {
    "label": "IsValidRootDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRootDirectory(const FString& RootDir)"
  },
  {
    "label": "VerifyFileAssociations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyFileAssociations()"
  },
  {
    "label": "UpdateFileAssociations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateFileAssociations()"
  },
  {
    "label": "SetEngineIdentifierForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEngineIdentifierForProject(const FString& ProjectFileName, const FString& Identifier)"
  },
  {
    "label": "GetEngineIdentifierForProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEngineIdentifierForProject(const FString& ProjectFileName, FString& OutIdentifier)"
  },
  {
    "label": "OpenProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenProject(const FString& ProjectFileName)"
  },
  {
    "label": "CleanGameProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanGameProject(const FString& ProjectDir, FString& OutFailPath, FFeedbackContext* Warn)"
  },
  {
    "label": "CompileGameProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompileGameProject(const FString& RootDir, const FString& ProjectFileName, FFeedbackContext* Warn, ECompilationResult::Type* OutResult = nullptr)"
  },
  {
    "label": "GenerateProjectFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateProjectFiles(const FString& RootDir, const FString& ProjectFileName, FFeedbackContext* Warn, FString LogFilePath = FString())"
  },
  {
    "label": "IsUnrealBuildToolAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnrealBuildToolAvailable()"
  },
  {
    "label": "InvokeUnrealBuildToolSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InvokeUnrealBuildToolSync(const FString& InCmdLineParams, FOutputDevice& Ar, bool bSkipBuildUBT, int32& OutReturnCode, FString& OutProcOutput)"
  },
  {
    "label": "InvokeUnrealBuildToolAsync()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "InvokeUnrealBuildToolAsync(const FString& InCmdLineParams, FOutputDevice& Ar, void*& OutReadPipe, void*& OutWritePipe, bool bSkipBuildUBT = false)"
  },
  {
    "label": "RunUnrealBuildTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunUnrealBuildTool(const FText& Description, const FString& RootDir, const FString& Arguments, FFeedbackContext* Warn)"
  },
  {
    "label": "RunUnrealBuildTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunUnrealBuildTool(const FText& Description, const FString& RootDir, const FString& Arguments, FFeedbackContext* Warn, int32& OutExitCode)"
  },
  {
    "label": "IsUnrealBuildToolRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnrealBuildToolRunning()"
  },
  {
    "label": "GetTargetsForProject()",
    "kind": "Method",
    "detail": "Function (const TArray<FTargetInfo>&)",
    "insertText": "GetTargetsForProject(const FString& ProjectFile)"
  },
  {
    "label": "GetTargetsForCurrentProject()",
    "kind": "Method",
    "detail": "Function (const TArray<FTargetInfo>&)",
    "insertText": "GetTargetsForCurrentProject()"
  },
  {
    "label": "GetUserTempPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUserTempPath()"
  },
  {
    "label": "GetNativeFeedbackContext()",
    "kind": "Method",
    "detail": "Function (FFeedbackContext*)",
    "insertText": "GetNativeFeedbackContext()"
  },
  {
    "label": "EnumerateProjectsKnownByEngine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateProjectsKnownByEngine(const FString& Identifier, bool bIncludeNativeProjects, TArray<FString>& OutProjectFileNames)"
  },
  {
    "label": "GetDefaultProjectCreationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultProjectCreationPath()"
  },
  {
    "label": "GetOidcAccessToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOidcAccessToken(const FString& RootDir, const FString& ProjectFileName, const FString& ProviderIdentifier, bool bUnattended, FFeedbackContext* Warn, FString& OutToken, FDateTime& OutTokenExpiresAt, bool& bOutWasInteractiveLogin)"
  },
  {
    "label": "GetOidcTokenStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOidcTokenStatus(const FString& RootDir, const FString& ProjectFileName, const FString& ProviderIdentifier, FFeedbackContext* Warn, int& OutStatus)"
  },
  {
    "label": "GetHordeUrl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHordeUrl(FString& OutHordeUrl, FString* OutHordeUrlConfigSource = nullptr)"
  },
  {
    "label": "SetHordeUrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHordeUrl(const FString& HordeUrl)"
  },
  {
    "label": "GetHordeAccessToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHordeAccessToken(const FString& HordeUrl, bool bUnattended, FFeedbackContext* Warn, FString& OutToken, FDateTime& OutTokenExpiresAt, bool& bOutWasInteractiveLogin)"
  }
]