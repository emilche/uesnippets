[
  {
    "label": "FMutualInclusivityGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualInclusivityGraph"
  },
  {
    "label": "IMutualComponentInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMutualComponentInitializer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMutuallyInclusiveComponentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutuallyInclusiveComponentParams"
  },
  {
    "label": "FComplexInclusivityFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComplexInclusivityFilter"
  },
  {
    "label": "FMutualComponentInitializers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualComponentInitializers"
  },
  {
    "label": "FMutualInclusivityGraphCommandBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualInclusivityGraphCommandBuffer"
  },
  {
    "label": "FSimpleCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleCommand"
  },
  {
    "label": "FTypeCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeCommand"
  },
  {
    "label": "FMatchCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMatchCommand"
  },
  {
    "label": "FShortCircuitCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShortCircuitCommand"
  },
  {
    "label": "FIncludeCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncludeCommand"
  },
  {
    "label": "FInitializeCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializeCommand"
  },
  {
    "label": "FCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommand"
  },
  {
    "label": "FIncludes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncludes"
  },
  {
    "label": "FIncludePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncludePair"
  },
  {
    "label": "FMutuallyInclusiveComponentParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneMutualComponentInitializer . h \" # include \" EntitySystem / MovieSceneEntitySystemDirectedGraph . h \" # include<initializer_list> namespace UE::MovieScene { struct FMutualInclusivityGraph ; struct IMutualComponentInitializer ; enum class EComplexInclusivityFilterMode { AllOf,AnyOf } ; struct FMutuallyInclusiveComponentParams {)",
    "insertText": "FMutuallyInclusiveComponentParams()"
  },
  {
    "label": "FComplexInclusivityFilter()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<IMutualComponentInitializer> CustomInitializer ; EMutuallyInclusiveComponentType Type = EMutuallyInclusiveComponentType::Optional ; } ; struct FComplexInclusivityFilter { FComponentMask Mask ; EComplexInclusivityFilterMode Mode ;)",
    "insertText": "FComplexInclusivityFilter(const FComponentMask& InMask, EComplexInclusivityFilterMode InMode) : Mask(InMask), Mode(InMode)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FComplexInclusivityFilter& Filter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FComplexInclusivityFilter& A, const FComplexInclusivityFilter& B)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (} FComplexInclusivityFilter)",
    "insertText": "Any(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "checkf(false, TEXT(\"Not implemented\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(IMutualComponentInitializer* InitializerToAdd)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ComputeMutuallyInclusiveComponents()",
    "kind": "Method",
    "detail": "Function (private : TArray<IMutualComponentInitializer*,TInlineAllocator<2>> Initializers ; } ; struct FMutualInclusivityGraphCommandBuffer { int32)",
    "insertText": "ComputeMutuallyInclusiveComponents(EMutuallyInclusiveComponentType TypesToCompute, const FComponentMask& InMask, FComponentMask& OutMask, FMutualComponentInitializers& OutInitializers)"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (private : FMutualInclusivityGraph ; enum class ECommandType { Simple,Type,MatchAny,MatchAll,ShortCircuit,Include,Initialize,} ; struct FSimpleCommand { FComponentTypeID MatchID ; FComponentTypeID IncludeID ; } ; struct FTypeCommand { uint16 ShortCircuitIndex ; EMutuallyInclusiveComponentType Type ; } ; struct FMatchCommand { FComponentTypeID ComponentTypeID ; uint16 ShortCircuitIndex ; } ; struct FShortCircuitCommand { uint16 ShortCircuitIndex ; } ; struct FIncludeCommand { FComponentTypeID ComponentTypeID ; } ; struct FInitializeCommand { IMutualComponentInitializer* Initializer ; } ; struct FCommand {)",
    "insertText": "FCommand(FSimpleCommand InSimple) : Simple(InSimple), CommandType(ECommandType::Simple)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCommand(FTypeCommand InType) : Type(InType), CommandType(ECommandType::Type)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCommand(FMatchCommand InMatch, EComplexInclusivityFilterMode Mode) : Match(InMatch), CommandType(Mode == EComplexInclusivityFilterMode::AllOf ? ECommandType::MatchAll : ECommandType::MatchAny)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCommand(FShortCircuitCommand InShortCircuit) : ShortCircuit(InShortCircuit), CommandType(ECommandType::ShortCircuit)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCommand(FIncludeCommand InInclude) : Include(InInclude), CommandType(ECommandType::Include)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCommand(FInitializeCommand InInitialize) : Initialize(InInitialize), CommandType(ECommandType::Initialize)"
  },
  {
    "label": "DefineMutualInclusionRule()",
    "kind": "Method",
    "detail": "Function (} union { FTypeCommand Type ; FSimpleCommand Simple ; FMatchCommand Match ; FShortCircuitCommand ShortCircuit ; FIncludeCommand Include ; FInitializeCommand Initialize ; } ; ECommandType CommandType ; } ; TArray<FCommand> Commands ; } ; struct FMutualInclusivityGraph { void)",
    "insertText": "DefineMutualInclusionRule(FComponentTypeID Predicate, std::initializer_list<FComponentTypeID> Dependents)"
  },
  {
    "label": "DefineMutualInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineMutualInclusionRule(FComponentTypeID Predicate, std::initializer_list<FComponentTypeID> Dependents, FMutuallyInclusiveComponentParams&& InParams)"
  },
  {
    "label": "DefineComplexInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComplexInclusionRule(const FComplexInclusivityFilter& InFilter, std::initializer_list<FComponentTypeID> Dependents)"
  },
  {
    "label": "DefineComplexInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComplexInclusionRule(const FComplexInclusivityFilter& InFilter, std::initializer_list<FComponentTypeID> Dependents, FMutuallyInclusiveComponentParams&& InParams)"
  },
  {
    "label": "FindPrerequisiteChainLength()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "FindPrerequisiteChainLength(const FDirectedGraph& Graph, FComponentTypeID Component, TMap<FComponentTypeID, int32>& InOutCache)"
  },
  {
    "label": "ReconstructCommandBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconstructCommandBuffer()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (private : struct FIncludes { void)",
    "insertText": "Add(FComponentTypeID Component)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Includes .)",
    "insertText": "AddUnique(Component)"
  }
]