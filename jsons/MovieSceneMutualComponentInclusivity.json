[
  {
    "label": "FMutualInclusivityGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualInclusivityGraph"
  },
  {
    "label": "IMutualComponentInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMutualComponentInitializer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMutuallyInclusiveComponentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutuallyInclusiveComponentParams"
  },
  {
    "label": "FComplexInclusivityFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComplexInclusivityFilter"
  },
  {
    "label": "FMutualComponentInitializers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualComponentInitializers"
  },
  {
    "label": "FMutualInclusivityGraphCommandBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualInclusivityGraphCommandBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSimpleCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleCommand"
  },
  {
    "label": "FTypeCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeCommand"
  },
  {
    "label": "FMatchCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMatchCommand"
  },
  {
    "label": "FShortCircuitCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShortCircuitCommand"
  },
  {
    "label": "FIncludeCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncludeCommand"
  },
  {
    "label": "FInitializeCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializeCommand"
  },
  {
    "label": "FCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommand"
  },
  {
    "label": "FMutualInclusivityGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualInclusivityGraph"
  },
  {
    "label": "FIncludes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncludes"
  },
  {
    "label": "FIncludePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIncludePair"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(IMutualComponentInitializer* InitializerToAdd)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "DefineMutualInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineMutualInclusionRule(FComponentTypeID Predicate, std::initializer_list<FComponentTypeID> Dependents)"
  },
  {
    "label": "DefineMutualInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineMutualInclusionRule(FComponentTypeID Predicate, std::initializer_list<FComponentTypeID> Dependents, FMutuallyInclusiveComponentParams&& InParams)"
  },
  {
    "label": "DefineComplexInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComplexInclusionRule(const FComplexInclusivityFilter& InFilter, std::initializer_list<FComponentTypeID> Dependents)"
  },
  {
    "label": "DefineComplexInclusionRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComplexInclusionRule(const FComplexInclusivityFilter& InFilter, std::initializer_list<FComponentTypeID> Dependents, FMutuallyInclusiveComponentParams&& InParams)"
  },
  {
    "label": "FindPrerequisiteChainLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindPrerequisiteChainLength(const FDirectedGraph& Graph, FComponentTypeID Component, TMap<FComponentTypeID, int32>& InOutCache)"
  }
]