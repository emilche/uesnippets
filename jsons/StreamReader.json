[
  {
    "label": "FStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamReader"
  },
  {
    "label": "FMark",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMark"
  },
  {
    "label": "FStreamBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamBuffer"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTemplate . h \" namespace UE { namespace Trace { class FStreamReader { public : template<Type> Type const*)",
    "insertText": "GetPointer()"
  },
  {
    "label": "GetPointerUnchecked()",
    "kind": "Method",
    "detail": "Function (template<Type> Type const*)",
    "insertText": "GetPointerUnchecked()"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetPointer(uint32 Size)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(uint32 Size)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "CanMeetDemand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMeetDemand()"
  },
  {
    "label": "GetRemaining()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRemaining()"
  },
  {
    "label": "GetBacktrackSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBacktrackSize(const uint8* To)"
  },
  {
    "label": "Backtrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Backtrack(const uint8* To)"
  },
  {
    "label": "SaveMark()",
    "kind": "Method",
    "detail": "Function (struct FMark*)",
    "insertText": "SaveMark()"
  },
  {
    "label": "RestoreMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreMark(struct FMark* Mark)"
  },
  {
    "label": "FStreamBuffer()",
    "kind": "Method",
    "detail": "Function (} class FStreamBuffer : public FStreamReader { public :)",
    "insertText": "FStreamBuffer()"
  },
  {
    "label": "FStreamBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStreamBuffer(uint32_t InitalBufferSize)"
  },
  {
    "label": "FStreamBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStreamBuffer(FStreamBuffer&& Rhs)"
  },
  {
    "label": "FStreamBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStreamBuffer(const FStreamBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStreamBuffer&)",
    "insertText": "operator(FStreamBuffer&& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStreamBuffer&)",
    "insertText": "operator(const FStreamBuffer&)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (template<Lambda> int32)",
    "insertText": "Fill(Lambda&& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const uint8* Data, uint32 Size)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "Append(uint32 Size)"
  },
  {
    "label": "GetBufferSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBufferSize()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Buffer)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(BufferSize, Rhs.BufferSize)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Buffer, Rhs.Buffer)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Cursor, Rhs.Cursor)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(End, Rhs.End)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(DemandHint, Rhs.DemandHint)"
  },
  {
    "label": "Consolidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consolidate()"
  },
  {
    "label": "Source()",
    "kind": "Method",
    "detail": "Function (uint8* Dest = Buffer + End ; int32 ReadSize =)",
    "insertText": "Source(Dest, BufferSize - End)"
  }
]