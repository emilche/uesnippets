[
  {
    "label": "PredIteratorCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredIteratorCache"
  },
  {
    "label": "GetPreds()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_PREDITERATORCACHE_H # define LLVM_IR_PREDITERATORCACHE_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / IR / CFG . h \" # include \" llvm / Support / Allocator . h \" namespace llvm { class PredIteratorCache { DenseMap<BasicBlock*,BasicBlock**> BlockToPredsMap ; DenseMap<BasicBlock*,unsigned> BlockToPredCountMap ; BumpPtrAllocator Memory ; private : BasicBlock**)",
    "insertText": "GetPreds(BasicBlock *BB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BasicBlock**& Entry = BlockToPredsMap [ BB ] ;)",
    "insertText": "if(Entry)"
  },
  {
    "label": "PredCache()",
    "kind": "Method",
    "detail": "Function (SmallVector<BasicBlock*,3 2>)",
    "insertText": "PredCache(pred_begin(BB), pred_end(BB))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (PredCache .)",
    "insertText": "push_back(nullptr)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (BlockToPredCountMap [ BB ] = PredCache .)",
    "insertText": "size()"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (Entry = Memory . Allocate<)",
    "insertText": "BasicBlock(PredCache.size())"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(PredCache.begin(), PredCache.end(), Entry)"
  },
  {
    "label": "GetPreds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreds(BB)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<BasicBlock*>)",
    "insertText": "get(BasicBlock *BB)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Memory .)",
    "insertText": "Reset()"
  }
]