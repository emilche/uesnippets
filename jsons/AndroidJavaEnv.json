[
  {
    "label": "FScopedJavaObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedJavaObject"
  },
  {
    "label": "FJavaHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJavaHelper"
  },
  {
    "label": "InitializeJavaEnv()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include<jni . h> namespace AndroidJavaEnv { void)",
    "insertText": "InitializeJavaEnv(JavaVM* VM, jint Version, jobject GlobalThis)"
  },
  {
    "label": "GetGameActivityThis()",
    "kind": "Method",
    "detail": "Function (jobject)",
    "insertText": "GetGameActivityThis()"
  },
  {
    "label": "GetClassLoader()",
    "kind": "Method",
    "detail": "Function (jobject)",
    "insertText": "GetClassLoader()"
  },
  {
    "label": "GetJavaEnv()",
    "kind": "Method",
    "detail": "Function (JNIEnv*)",
    "insertText": "GetJavaEnv(bool bRequireGlobalThis = true)"
  },
  {
    "label": "FindJavaClass()",
    "kind": "Method",
    "detail": "Function (jclass)",
    "insertText": "FindJavaClass(const char* name)"
  },
  {
    "label": "FindJavaClassGlobalRef()",
    "kind": "Method",
    "detail": "Function (jclass)",
    "insertText": "FindJavaClassGlobalRef(const char* name)"
  },
  {
    "label": "DetachJavaEnv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachJavaEnv()"
  },
  {
    "label": "CheckJavaException()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckJavaException()"
  },
  {
    "label": "FScopedJavaObject()",
    "kind": "Method",
    "detail": "Function (} template<T> class FScopedJavaObject { public :)",
    "insertText": "FScopedJavaObject()"
  },
  {
    "label": "FScopedJavaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedJavaObject(JNIEnv* InEnv, const T& InObjRef) : Env(InEnv), ObjRef(InObjRef)"
  },
  {
    "label": "FScopedJavaObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedJavaObject(FScopedJavaObject&& Other) : Env(Other.Env), ObjRef(Other.ObjRef)"
  },
  {
    "label": "FScopedJavaObject()",
    "kind": "Method",
    "detail": "Function (Other . Env = nullptr ; Other . ObjRef = nullptr ; })",
    "insertText": "FScopedJavaObject(const FScopedJavaObject& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedJavaObject&)",
    "insertText": "operator(const FScopedJavaObject& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedJavaObject&)",
    "insertText": "operator(FScopedJavaObject&& Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Env, Other.Env)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ObjRef, Other.ObjRef)"
  },
  {
    "label": "GetArrayLength()",
    "kind": "Method",
    "detail": "Function (const jsize Length = Env ->)",
    "insertText": "GetArrayLength(ObjRef)"
  },
  {
    "label": "GetObjectArrayElement()",
    "kind": "Method",
    "detail": "Function (jobject Element = Env ->)",
    "insertText": "GetObjectArrayElement(ObjRef, Idx)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (Env ->)",
    "insertText": "DeleteLocalRef(Element)"
  },
  {
    "label": "DeleteLocalRef()",
    "kind": "Method",
    "detail": "Function (} } } Env ->)",
    "insertText": "DeleteLocalRef(ObjRef)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } T)",
    "insertText": "operator()"
  },
  {
    "label": "FStringFromLocalRef()",
    "kind": "Method",
    "detail": "Function (} class FJavaHelper { public : FString)",
    "insertText": "FStringFromLocalRef(JNIEnv* Env, jstring JavaString)"
  },
  {
    "label": "FStringFromGlobalRef()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FStringFromGlobalRef(JNIEnv* Env, jstring JavaString)"
  },
  {
    "label": "FStringFromParam()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FStringFromParam(JNIEnv* Env, jstring JavaString)"
  },
  {
    "label": "ToJavaString()",
    "kind": "Method",
    "detail": "Function (FScopedJavaObject<jstring>)",
    "insertText": "ToJavaString(JNIEnv* Env, const FString& UnrealString)"
  },
  {
    "label": "ToJavaStringArray()",
    "kind": "Method",
    "detail": "Function (FScopedJavaObject<jobjectArray>)",
    "insertText": "ToJavaStringArray(JNIEnv* Env, const TArray<FStringView>& UnrealStrings)"
  },
  {
    "label": "ObjectArrayToFStringTArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "ObjectArrayToFStringTArray(JNIEnv* Env, jobjectArray ObjectArray)"
  }
]