[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "IAssetViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetViewport"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "StartPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SViewport . h \" class FEditorViewportClient ; class FViewport ; class FSceneViewport ; class IAssetViewport { public : void)",
    "insertText": "StartPlayInEditorSession(class UGameViewportClient* PlayClient, const bool bInSimulateInEditor)"
  },
  {
    "label": "EndPlayInEditorSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlayInEditorSession()"
  },
  {
    "label": "SwapViewportsForSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapViewportsForSimulateInEditor()"
  },
  {
    "label": "SwapViewportsForPlayInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapViewportsForPlayInEditor()"
  },
  {
    "label": "OnSimulateSessionStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSimulateSessionStarted()"
  },
  {
    "label": "OnSimulateSessionFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSimulateSessionFinished()"
  },
  {
    "label": "RegisterGameViewportIfPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGameViewportIfPIE()"
  },
  {
    "label": "HasPlayInEditorViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPlayInEditorViewport()"
  },
  {
    "label": "GetSharedActiveViewport()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSceneViewport>)",
    "insertText": "GetSharedActiveViewport()"
  },
  {
    "label": "GetAssetViewportClient()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient&)",
    "insertText": "GetAssetViewportClient()"
  },
  {
    "label": "GetActiveViewport()",
    "kind": "Method",
    "detail": "Function (FViewport*)",
    "insertText": "GetActiveViewport()"
  },
  {
    "label": "MakeImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeImmersive(const bool bWantImmersive, const bool bAllowAnimation)"
  },
  {
    "label": "IsImmersive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImmersive()"
  },
  {
    "label": "ToggleGameView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGameView()"
  },
  {
    "label": "IsInGameView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInGameView()"
  },
  {
    "label": "AddOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOverlayWidget(TSharedRef<SWidget> OverlaidWidget, int32 ZOrder=INDEX_NONE)"
  },
  {
    "label": "RemoveOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlayWidget(TSharedRef<SWidget> OverlaidWidget)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "GetViewportWidget()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class SViewport>)",
    "insertText": "GetViewportWidget()"
  }
]