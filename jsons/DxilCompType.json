[
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "CompType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompType"
  },
  {
    "label": "CompType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilConstants . h \" namespace llvm { class Type ; class PointerType ; class LLVMContext ; } namespace hlsl { class CompType { public : using Kind = DXIL::ComponentType ;)",
    "insertText": "CompType()"
  },
  {
    "label": "CompType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompType(Kind K)"
  },
  {
    "label": "CompType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompType(unsigned int K)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const CompType &o)"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (Kind)",
    "insertText": "GetKind()"
  },
  {
    "label": "GetSizeInBits()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetSizeInBits()"
  },
  {
    "label": "getInvalid()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getInvalid()"
  },
  {
    "label": "getF16()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getF16()"
  },
  {
    "label": "getF32()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getF32()"
  },
  {
    "label": "getF64()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getF64()"
  },
  {
    "label": "getI16()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getI16()"
  },
  {
    "label": "getI32()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getI32()"
  },
  {
    "label": "getI64()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getI64()"
  },
  {
    "label": "getU16()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getU16()"
  },
  {
    "label": "getU32()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getU32()"
  },
  {
    "label": "getU64()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getU64()"
  },
  {
    "label": "getI1()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getI1()"
  },
  {
    "label": "getSNormF16()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getSNormF16()"
  },
  {
    "label": "getUNormF16()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getUNormF16()"
  },
  {
    "label": "getSNormF32()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getSNormF32()"
  },
  {
    "label": "getUNormF32()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getUNormF32()"
  },
  {
    "label": "getSNormF64()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getSNormF64()"
  },
  {
    "label": "getUNormF64()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "getUNormF64()"
  },
  {
    "label": "IsInvalid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalid()"
  },
  {
    "label": "IsFloatTy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloatTy()"
  },
  {
    "label": "IsIntTy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntTy()"
  },
  {
    "label": "IsSIntTy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSIntTy()"
  },
  {
    "label": "IsUIntTy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUIntTy()"
  },
  {
    "label": "IsBoolTy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoolTy()"
  },
  {
    "label": "IsSNorm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSNorm()"
  },
  {
    "label": "IsUNorm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUNorm()"
  },
  {
    "label": "Is64Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Is64Bit()"
  },
  {
    "label": "Is16Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Is16Bit()"
  },
  {
    "label": "GetBaseCompType()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "GetBaseCompType()"
  },
  {
    "label": "HasMinPrec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMinPrec()"
  },
  {
    "label": "GetLLVMType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetLLVMType(llvm::LLVMContext &Ctx)"
  },
  {
    "label": "GetLLVMPtrType()",
    "kind": "Method",
    "detail": "Function (llvm::PointerType*)",
    "insertText": "GetLLVMPtrType(llvm::LLVMContext &Ctx, const unsigned AddrSpace = 0)"
  },
  {
    "label": "GetLLVMBaseType()",
    "kind": "Method",
    "detail": "Function (llvm::Type*)",
    "insertText": "GetLLVMBaseType(llvm::LLVMContext &Ctx)"
  },
  {
    "label": "GetCompType()",
    "kind": "Method",
    "detail": "Function (CompType)",
    "insertText": "GetCompType(llvm::Type *type)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetHLSLName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetHLSLName(bool MinPrecision)"
  }
]