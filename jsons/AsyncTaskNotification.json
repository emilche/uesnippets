[
  {
    "label": "IAsyncTaskNotificationImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncTaskNotificationImpl"
  },
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FAsyncTaskNotificationConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncTaskNotificationConfig"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncNotificationStateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncNotificationStateData"
  },
  {
    "label": "FAsyncTaskNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTaskNotification"
  },
  {
    "label": "FAsyncNotificationStateData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogCategory . h \" # include \" Misc / Attribute . h \" # include \" Templates / SharedPointer . h \" class IAsyncTaskNotificationImpl ; struct FLogCategoryBase ; struct FSlateBrush ; struct FAsyncTaskNotificationConfig { FText TitleText ; FText ProgressText ; float FadeInDuration = 0 . 5 f ; float FadeOutDuration = 2 . 0 f ; float ExpireDuration = 1 . 0 f ; bool bIsHeadless = false ; TAttribute<bool> bCanCancel = false ; TAttribute<bool> bKeepOpenOnSuccess = false ; TAttribute<bool> bKeepOpenOnFailure = false ; const FSlateBrush* Icon = nullptr ; const FLogCategoryBase* LogCategory = nullptr ; } ; enum class EAsyncTaskNotificationState : uint8 { None = 0,Pending,Success,Failure,Prompt,} ; enum class EAsyncTaskNotificationPromptAction : uint8 { None = 0,Continue,Cancel,Unattended } ; struct FAsyncNotificationStateData {)",
    "insertText": "FAsyncNotificationStateData() : State(EAsyncTaskNotificationState::Pending)"
  },
  {
    "label": "FAsyncNotificationStateData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAsyncNotificationStateData(const FText& InTitleText, const FText& InProgressText, EAsyncTaskNotificationState InState) : State(InState) , TitleText(InTitleText) , ProgressText(InProgressText)"
  },
  {
    "label": "FAsyncTaskNotification()",
    "kind": "Method",
    "detail": "Function (} EAsyncTaskNotificationState State ; FText TitleText ; FText ProgressText ; FText PromptText ; FText HyperlinkText ; FSimpleDelegate Hyperlink ; } ; class FAsyncTaskNotification { public :)",
    "insertText": "FAsyncTaskNotification(const FAsyncTaskNotificationConfig& InConfig)"
  },
  {
    "label": "FAsyncTaskNotification()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncTaskNotification()"
  },
  {
    "label": "FAsyncTaskNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncTaskNotification(const FAsyncTaskNotification&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAsyncTaskNotification&)",
    "insertText": "operator(const FAsyncTaskNotification&)"
  },
  {
    "label": "FAsyncTaskNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncTaskNotification(FAsyncTaskNotification&& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAsyncTaskNotification&)",
    "insertText": "operator(FAsyncTaskNotification&& InOther)"
  },
  {
    "label": "SetTitleText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitleText(const FText& InTitleText, const bool bClearProgressText = true)"
  },
  {
    "label": "SetProgressText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgressText(const FText& InProgressText)"
  },
  {
    "label": "SetPromptText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPromptText(const FText& InPromptText)"
  },
  {
    "label": "SetHyperlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHyperlink(const FSimpleDelegate& InHyperlink, const FText& InHyperlinkText = FText())"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComplete(const bool bSuccess = true)"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComplete(const FText& InTitleText, const FText& InProgressText, const bool bSuccess = true)"
  },
  {
    "label": "SetNotificationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotificationState(const FAsyncNotificationStateData& InState)"
  },
  {
    "label": "SetCanCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanCancel(const TAttribute<bool>& InCanCancel)"
  },
  {
    "label": "SetKeepOpenOnSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepOpenOnSuccess(const TAttribute<bool>& InKeepOpenOnSuccess)"
  },
  {
    "label": "SetKeepOpenOnFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepOpenOnFailure(const TAttribute<bool>& InKeepOpenOnFailure)"
  },
  {
    "label": "GetPromptAction()",
    "kind": "Method",
    "detail": "Function (EAsyncTaskNotificationPromptAction)",
    "insertText": "GetPromptAction()"
  }
]