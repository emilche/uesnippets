[
  {
    "label": "CordRepRing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepRing"
  },
  {
    "label": "Position",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Position"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Filler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Filler"
  },
  {
    "label": "Transaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transaction"
  },
  {
    "label": "CreateTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CreateTransaction"
  },
  {
    "label": "CordRep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRep"
  },
  {
    "label": "kMaxCapacity()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_RING_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_RING_H_ # include<cassert> # include<cstddef> # include<cstdint> # include<iosfwd> # include<limits> # include<memory> # include \" absl / container / internal / layout . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cord_rep_flat . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class CordRepRing : public CordRep { public : using pos_type = size_t ; using index_type = uint32_t ; using offset_type = uint32_t ; struct Position { index_type index ; size_t offset ; } ; size_t)",
    "insertText": "kMaxCapacity(std::numeric_limits<uint32_t>::max)()"
  },
  {
    "label": "CordRepRing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordRepRing()"
  },
  {
    "label": "CordRepRing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordRepRing(const CordRepRing&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CordRepRing&)",
    "insertText": "operator(const CordRepRing&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(std::ostream& output)"
  },
  {
    "label": "AllocSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "AllocSize(size_t capacity)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Distance(pos_type pos, pos_type end_pos)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Create(CordRep* child, size_t extra = 0)"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (index_type)",
    "insertText": "head()"
  },
  {
    "label": "begin_pos()",
    "kind": "Method",
    "detail": "Function (} pos_type)",
    "insertText": "begin_pos()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(head < capacity_ && tail < capacity_)"
  },
  {
    "label": "entry_end_pos()",
    "kind": "Method",
    "detail": "Function (} pos_type const&)",
    "insertText": "entry_end_pos(index_type index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsValidIndex(index))"
  },
  {
    "label": "entry_child()",
    "kind": "Method",
    "detail": "Function (} CordRep* const&)",
    "insertText": "entry_child(index_type index)"
  },
  {
    "label": "entry_data_offset()",
    "kind": "Method",
    "detail": "Function (} offset_type const&)",
    "insertText": "entry_data_offset(index_type index)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} CordRepRing*)",
    "insertText": "Append(CordRepRing* rep, CordRep* child)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Append(CordRepRing* rep, string_view data, size_t extra = 0)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Prepend(CordRepRing* rep, CordRep* child)"
  },
  {
    "label": "Prepend()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Prepend(CordRepRing* rep, string_view data, size_t extra = 0)"
  },
  {
    "label": "GetAppendBuffer()",
    "kind": "Method",
    "detail": "Function (Span<char>)",
    "insertText": "GetAppendBuffer(size_t size)"
  },
  {
    "label": "GetPrependBuffer()",
    "kind": "Method",
    "detail": "Function (Span<char>)",
    "insertText": "GetPrependBuffer(size_t size)"
  },
  {
    "label": "SubRing()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "SubRing(CordRepRing* r, size_t offset, size_t len, size_t extra = 0)"
  },
  {
    "label": "RemoveSuffix()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "RemoveSuffix(CordRepRing* r, size_t len, size_t extra = 0)"
  },
  {
    "label": "RemovePrefix()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "RemovePrefix(CordRepRing* r, size_t len, size_t extra = 0)"
  },
  {
    "label": "GetCharacter()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "GetCharacter(size_t offset)"
  },
  {
    "label": "IsFlat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlat(absl::string_view* fragment)"
  },
  {
    "label": "IsFlat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlat(size_t offset, size_t len, absl::string_view* fragment)"
  },
  {
    "label": "SetCapacityForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCapacityForTesting(size_t capacity)"
  },
  {
    "label": "GetLeafData()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLeafData(const CordRep* rep)"
  },
  {
    "label": "GetRepData()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetRepData(const CordRep* rep)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (index_type)",
    "insertText": "advance(index_type index)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (index_type)",
    "insertText": "advance(index_type index, index_type n)"
  },
  {
    "label": "retreat()",
    "kind": "Method",
    "detail": "Function (index_type)",
    "insertText": "retreat(index_type index)"
  },
  {
    "label": "retreat()",
    "kind": "Method",
    "detail": "Function (index_type)",
    "insertText": "retreat(index_type index, index_type n)"
  },
  {
    "label": "entry_begin_pos()",
    "kind": "Method",
    "detail": "Function (pos_type const&)",
    "insertText": "entry_begin_pos(index_type index)"
  },
  {
    "label": "entry_start_offset()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "entry_start_offset(index_type index)"
  },
  {
    "label": "entry_end_offset()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "entry_end_offset(index_type index)"
  },
  {
    "label": "entry_length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "entry_length(index_type index)"
  },
  {
    "label": "entry_data()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "entry_data(index_type index)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "Find(size_t offset)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "Find(index_type head, size_t offset)"
  },
  {
    "label": "FindTail()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "FindTail(size_t offset)"
  },
  {
    "label": "FindTail()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "FindTail(index_type head, size_t offset)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (template<F> void)",
    "insertText": "ForEach(index_type head, index_type tail, F&& f)"
  },
  {
    "label": "n1()",
    "kind": "Method",
    "detail": "Function (index_type)",
    "insertText": "n1(tail > head)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (} } template<F> void)",
    "insertText": "ForEach(F&& f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& s, const CordRepRing& rep)"
  },
  {
    "label": "Partial()",
    "kind": "Method",
    "detail": "Function (private : enum class AddMode { kAppend,kPrepend } ; using Layout = container_internal::Layout<pos_type,CordRep*,offset_type> ; class Filler ; class Transaction ; class CreateTransaction ; size_t kLayoutAlignment =)",
    "insertText": "Partial().Alignment()"
  },
  {
    "label": "CordRepRing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordRepRing(index_type capacity) : capacity_(capacity)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(index_type index)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Validate(CordRepRing* rep, const char* file = nullptr, int line = 0)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "New(size_t capacity, size_t extra)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(CordRepRing* rep)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(CordRepRing* rep)"
  },
  {
    "label": "entry_end_pos()",
    "kind": "Method",
    "detail": "Function (pos_type*)",
    "insertText": "entry_end_pos()"
  },
  {
    "label": "entry_child()",
    "kind": "Method",
    "detail": "Function (} CordRep**)",
    "insertText": "entry_child()"
  },
  {
    "label": "entry_data_offset()",
    "kind": "Method",
    "detail": "Function (} offset_type*)",
    "insertText": "entry_data_offset()"
  },
  {
    "label": "FindSlow()",
    "kind": "Method",
    "detail": "Function (} Position)",
    "insertText": "FindSlow(index_type head, size_t offset)"
  },
  {
    "label": "FindTailSlow()",
    "kind": "Method",
    "detail": "Function (Position)",
    "insertText": "FindTailSlow(index_type head, size_t offset)"
  },
  {
    "label": "FindBinary()",
    "kind": "Method",
    "detail": "Function (template<bool wrap> index_type)",
    "insertText": "FindBinary(index_type head, index_type tail, size_t offset)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (template<bool ref> void)",
    "insertText": "Fill(const CordRepRing* src, index_type head, index_type tail)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Copy(CordRepRing* rep, index_type head, index_type tail, size_t extra = 0)"
  },
  {
    "label": "Mutable()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "Mutable(CordRepRing* rep, size_t extra)"
  },
  {
    "label": "AppendSlow()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "AppendSlow(CordRepRing* rep, CordRep* child)"
  },
  {
    "label": "AppendLeaf()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "AppendLeaf(CordRepRing* rep, CordRep* child, size_t offset, size_t length)"
  },
  {
    "label": "PrependLeaf()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "PrependLeaf(CordRepRing* rep, CordRep* child, size_t offset, size_t length)"
  },
  {
    "label": "PrependSlow()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "PrependSlow(CordRepRing* rep, CordRep* child)"
  },
  {
    "label": "CreateSlow()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "CreateSlow(CordRep* child, size_t extra)"
  },
  {
    "label": "CreateFromLeaf()",
    "kind": "Method",
    "detail": "Function (CordRepRing*)",
    "insertText": "CreateFromLeaf(CordRep* child, size_t offset, size_t length, size_t extra)"
  },
  {
    "label": "AddRing()",
    "kind": "Method",
    "detail": "Function (template<AddMode mode> CordRepRing*)",
    "insertText": "AddRing(CordRepRing* rep, CordRepRing* ring, size_t offset, size_t len)"
  },
  {
    "label": "AddDataOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDataOffset(index_type index, size_t n)"
  },
  {
    "label": "SubLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubLength(index_type index, size_t n)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (index_type head_ ; index_type tail_ ; index_type capacity_ ; pos_type begin_pos_ ;)",
    "insertText": "alignas(kLayoutAlignment)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(index < capacity_)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(index < capacity_ && n <= capacity_)"
  },
  {
    "label": "entry_data_offset()",
    "kind": "Method",
    "detail": "Function (size_t data_offset =)",
    "insertText": "entry_data_offset(index)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} # ifndef EXTRA_CORD_RING_VALIDATION CordRepRing*)",
    "insertText": "Validate(CordRepRing* rep, const char* , int)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset < length)"
  },
  {
    "label": "FindSlow()",
    "kind": "Method",
    "detail": "Function (head_,0 } :)",
    "insertText": "FindSlow(head_, offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsValidIndex(head) && offset >= entry_start_offset(head))"
  },
  {
    "label": "FindSlow()",
    "kind": "Method",
    "detail": "Function (head_,0 } :)",
    "insertText": "FindSlow(head, offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset > 0 && offset <= length)"
  },
  {
    "label": "FindTailSlow()",
    "kind": "Method",
    "detail": "Function (tail_,0 } :)",
    "insertText": "FindTailSlow(head_, offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsValidIndex(head) && offset >= entry_start_offset(head) + 1)"
  },
  {
    "label": "FindTailSlow()",
    "kind": "Method",
    "detail": "Function (tail_,0 } :)",
    "insertText": "FindTailSlow(head, offset)"
  },
  {
    "label": "ring()",
    "kind": "Method",
    "detail": "Function (} CordRepRing*)",
    "insertText": "ring()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsRing())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const Position pos =)",
    "insertText": "Find(offset)"
  },
  {
    "label": "entry_data()",
    "kind": "Method",
    "detail": "Function (const absl::string_view data =)",
    "insertText": "entry_data(pos.index)"
  }
]