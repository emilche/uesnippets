[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "FTrackEditorThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorThumbnailPool"
  },
  {
    "label": "FCameraCutSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraCutSection"
  },
  {
    "label": "FCameraCutSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Sections / ThumbnailSection . h \" class AActor ; class FMenuBuilder ; class FSequencerSectionPainter ; class FTrackEditorThumbnailPool ; class FCameraCutSection : public FViewportThumbnailSection { public :)",
    "insertText": "FCameraCutSection(TSharedPtr<ISequencer> InSequencer, TSharedPtr<FTrackEditorThumbnailPool> InThumbnailPool, UMovieSceneSection& InSection)"
  },
  {
    "label": "FCameraCutSection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCameraCutSection()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const FGeometry& ClippedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "BuildSectionContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSectionContextMenu(FMenuBuilder& MenuBuilder, const FGuid& ObjectBinding)"
  },
  {
    "label": "GetSectionTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionTitle()"
  },
  {
    "label": "GetSectionHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionHeight(const UE::Sequencer::FViewDensityInfo& ViewDensity)"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "GetContentPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetContentPadding()"
  },
  {
    "label": "SetSingleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSingleTime(double GlobalTime)"
  },
  {
    "label": "HandleThumbnailTextBlockText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleThumbnailTextBlockText()"
  },
  {
    "label": "GetViewCamera()",
    "kind": "Method",
    "detail": "Function (UCameraComponent*)",
    "insertText": "GetViewCamera()"
  },
  {
    "label": "GetCameraForFrame()",
    "kind": "Method",
    "detail": "Function (private : AActor*)",
    "insertText": "GetCameraForFrame(FFrameNumber Time)"
  },
  {
    "label": "HandleSelectCameraMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectCameraMenuEntryExecute(AActor* InCamera)"
  },
  {
    "label": "CanSelectCameraActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectCameraActor(AActor* InCamera)"
  },
  {
    "label": "HandleSetCameraMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSetCameraMenuEntryExecute(AActor* InCamera)"
  }
]