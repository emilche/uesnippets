[
  {
    "label": "FMockChunkEvictionPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockChunkEvictionPolicy"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / ChunkEvictionPolicy . h \" # include \" Common / StatsCollector . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockChunkEvictionPolicy : public IChunkEvictionPolicy { public : typedef TTuple<double,TSet<FGuid>,int32,TSet<FGuid>,TSet<FGuid>> FQuery ; public : void)",
    "insertText": "Query(const TMap<FGuid, TUniquePtr<IChunkDataAccess>>& CurrentMap, int32 DesiredMax, TSet<FGuid>& OutCleanable, TSet<FGuid>& OutBootable)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutCleanable = Cleanable ; OutBootable = Bootable ; RxQuery .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), CurrentMapToKeySet(CurrentMap), DesiredMax, OutCleanable, OutBootable)"
  },
  {
    "label": "CurrentMapToKeySet()",
    "kind": "Method",
    "detail": "Function (} public : TSet<FGuid>)",
    "insertText": "CurrentMapToKeySet(const TMap<FGuid, TUniquePtr<IChunkDataAccess>>& CurrentMap)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid> Result ; CurrentMap .)",
    "insertText": "GetKeys(Result)"
  }
]