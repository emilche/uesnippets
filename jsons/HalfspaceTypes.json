[
  {
    "label": "THalfspace3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THalfspace3"
  },
  {
    "label": "UnitY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> struct THalfspace3 { public : TVector<T> Normal = TVector<T)",
    "insertText": "UnitY()"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Constant(T)"
  },
  {
    "label": "THalfspace3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THalfspace3()"
  },
  {
    "label": "THalfspace3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THalfspace3(const TVector<T>& PlaneNormalIn, T ConstantIn) : Normal(PlaneNormalIn), Constant(ConstantIn)"
  },
  {
    "label": "THalfspace3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THalfspace3(T NormalX, T NormalY, T NormalZ, T ConstantIn) : Normal(NormalX,NormalY,NormalZ), Constant(ConstantIn)"
  },
  {
    "label": "THalfspace3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THalfspace3(const TVector<T>& PlaneNormalIn, const TVector<T>& PlanePoint) : Normal(PlaneNormalIn), Constant(Normal.Dot(PlanePoint))"
  },
  {
    "label": "THalfspace3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "THalfspace3(const TVector<T>& P0, const TVector<T>& P1, const TVector<T>& P2)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (Normal =)",
    "insertText": "Normal(P0, P1, P2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Constant = Normal .)",
    "insertText": "Dot(P0)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TVector<T>& Point)"
  }
]