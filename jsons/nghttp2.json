[
  {
    "label": "nghttp2_session",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_session"
  },
  {
    "label": "nghttp2_rcbuf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_rcbuf"
  },
  {
    "label": "nghttp2_session_callbacks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_session_callbacks"
  },
  {
    "label": "nghttp2_option",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_option"
  },
  {
    "label": "nghttp2_hd_deflater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_hd_deflater"
  },
  {
    "label": "nghttp2_hd_inflater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_hd_inflater"
  },
  {
    "label": "nghttp2_stream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nghttp2_stream"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef NGHTTP2_H # define NGHTTP2_H #)",
    "insertText": "if(defined(_WIN32) || defined(__WIN32__)) && !defined(WIN32) # define WIN32 #endif #ifndef __has_declspec_attribute # define __has_declspec_attribute(x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # include<stdlib . h> # if)",
    "insertText": "defined(_MSC_VER) && (_MSC_VER < 1800) # include <stdint.h> #else # include <inttypes.h> #endif #include <sys/types.h> #include <stdarg.h> #include <nghttp2/nghttp2ver.h> #ifdef NGHTTP2_STATICLIB # define NGHTTP2_EXTERN #elif defined(WIN32) || (__has_declspec_attribute(dllexport) && \\ __has_declspec_attribute(dllimport)) # ifdef BUILDING_NGHTTP2 # define NGHTTP2_EXTERN __declspec(dllexport) # else # define NGHTTP2_EXTERN __declspec(dllimport) # endif #else # ifdef BUILDING_NGHTTP2 # define NGHTTP2_EXTERN __attribute__((visibility(\"default\"))) # else # define NGHTTP2_EXTERN # endif #endif #define NGHTTP2_PROTO_VERSION_ID \"h2\" #define NGHTTP2_PROTO_VERSION_ID_LEN 2 #define NGHTTP2_PROTO_ALPN \"\\x2h2\" #define NGHTTP2_PROTO_ALPN_LEN (sizeof(NGHTTP2_PROTO_ALPN) - 1)"
  },
  {
    "label": "NGHTTP2_MAX_WINDOW_SIZE()",
    "kind": "Method",
    "detail": "Function (typedef struct nghttp2_session nghttp2_session ; # define NGHTTP2_VERSION_AGE 1 typedef struct { int age ; int version_num ; const char* version_str ; const char* proto_str ; } nghttp2_info ; # define NGHTTP2_DEFAULT_WEIGHT 1 6 # define NGHTTP2_MAX_WEIGHT 2 5 6 # define NGHTTP2_MIN_WEIGHT 1 # define)",
    "insertText": "NGHTTP2_MAX_WINDOW_SIZE((int32_t)((1U << 31) - 1)) #define NGHTTP2_INITIAL_WINDOW_SIZE ((1 << 16) - 1) #define NGHTTP2_INITIAL_CONNECTION_WINDOW_SIZE ((1 << 16) - 1) #define NGHTTP2_DEFAULT_HEADER_TABLE_SIZE (1 << 12)"
  },
  {
    "label": "nghttp2_rcbuf_incref()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_ERR_INVALID_ARGUMENT = - 5 0 1,NGHTTP2_ERR_BUFFER_ERROR = - 5 0 2,NGHTTP2_ERR_UNSUPPORTED_VERSION = - 5 0 3,NGHTTP2_ERR_WOULDBLOCK = - 5 0 4,NGHTTP2_ERR_PROTO = - 5 0 5,NGHTTP2_ERR_INVALID_FRAME = - 5 0 6,NGHTTP2_ERR_EOF = - 5 0 7,NGHTTP2_ERR_DEFERRED = - 5 0 8,NGHTTP2_ERR_STREAM_ID_NOT_AVAILABLE = - 5 0 9,NGHTTP2_ERR_STREAM_CLOSED = - 5 1 0,NGHTTP2_ERR_STREAM_CLOSING = - 5 1 1,NGHTTP2_ERR_STREAM_SHUT_WR = - 5 1 2,NGHTTP2_ERR_INVALID_STREAM_ID = - 5 1 3,NGHTTP2_ERR_INVALID_STREAM_STATE = - 5 1 4,NGHTTP2_ERR_DEFERRED_DATA_EXIST = - 5 1 5,NGHTTP2_ERR_START_STREAM_NOT_ALLOWED = - 5 1 6,NGHTTP2_ERR_GOAWAY_ALREADY_SENT = - 5 1 7,NGHTTP2_ERR_INVALID_HEADER_BLOCK = - 5 1 8,NGHTTP2_ERR_INVALID_STATE = - 5 1 9,NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE = - 5 2 1,NGHTTP2_ERR_FRAME_SIZE_ERROR = - 5 2 2,NGHTTP2_ERR_HEADER_COMP = - 5 2 3,NGHTTP2_ERR_FLOW_CONTROL = - 5 2 4,NGHTTP2_ERR_INSUFF_BUFSIZE = - 5 2 5,NGHTTP2_ERR_PAUSE = - 5 2 6,NGHTTP2_ERR_TOO_MANY_INFLIGHT_SETTINGS = - 5 2 7,NGHTTP2_ERR_PUSH_DISABLED = - 5 2 8,NGHTTP2_ERR_DATA_EXIST = - 5 2 9,NGHTTP2_ERR_SESSION_CLOSING = - 5 3 0,NGHTTP2_ERR_HTTP_HEADER = - 5 3 1,NGHTTP2_ERR_HTTP_MESSAGING = - 5 3 2,NGHTTP2_ERR_REFUSED_STREAM = - 5 3 3,NGHTTP2_ERR_INTERNAL = - 5 3 4,NGHTTP2_ERR_CANCEL = - 5 3 5,NGHTTP2_ERR_SETTINGS_EXPECTED = - 5 3 6,NGHTTP2_ERR_TOO_MANY_SETTINGS = - 5 3 7,NGHTTP2_ERR_FATAL = - 9 0 0,NGHTTP2_ERR_NOMEM = - 9 0 1,NGHTTP2_ERR_CALLBACK_FAILURE = - 9 0 2,NGHTTP2_ERR_BAD_CLIENT_MAGIC = - 9 0 3,NGHTTP2_ERR_FLOODED = - 9 0 4 } nghttp2_error ; typedef struct { uint8_t* base ; size_t len ; } nghttp2_vec ; struct nghttp2_rcbuf ; typedef struct nghttp2_rcbuf nghttp2_rcbuf ; NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_rcbuf_incref(nghttp2_rcbuf *rcbuf)"
  },
  {
    "label": "nghttp2_rcbuf_decref()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_rcbuf_decref(nghttp2_rcbuf *rcbuf)"
  },
  {
    "label": "nghttp2_rcbuf_get_buf()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_vec)",
    "insertText": "nghttp2_rcbuf_get_buf(nghttp2_rcbuf *rcbuf)"
  },
  {
    "label": "nghttp2_rcbuf_is_static()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_rcbuf_is_static(const nghttp2_rcbuf *rcbuf)"
  },
  {
    "label": "NGHTTP2_INITIAL_MAX_CONCURRENT_STREAMS()",
    "kind": "Method",
    "detail": "Function (typedef enum { NGHTTP2_NV_FLAG_NONE = 0,NGHTTP2_NV_FLAG_NO_INDEX = 0 x01,NGHTTP2_NV_FLAG_NO_COPY_NAME = 0 x02,NGHTTP2_NV_FLAG_NO_COPY_VALUE = 0 x04 } nghttp2_nv_flag ; typedef struct { uint8_t* name ; uint8_t* value ; size_t namelen ; size_t valuelen ; uint8_t flags ; } nghttp2_nv ; typedef enum { NGHTTP2_DATA = 0,NGHTTP2_HEADERS = 0 x01,NGHTTP2_PRIORITY = 0 x02,NGHTTP2_RST_STREAM = 0 x03,NGHTTP2_SETTINGS = 0 x04,NGHTTP2_PUSH_PROMISE = 0 x05,NGHTTP2_PING = 0 x06,NGHTTP2_GOAWAY = 0 x07,NGHTTP2_WINDOW_UPDATE = 0 x08,NGHTTP2_CONTINUATION = 0 x09,NGHTTP2_ALTSVC = 0 x0a,NGHTTP2_ORIGIN = 0 x0c } nghttp2_frame_type ; typedef enum { NGHTTP2_FLAG_NONE = 0,NGHTTP2_FLAG_END_STREAM = 0 x01,NGHTTP2_FLAG_END_HEADERS = 0 x04,NGHTTP2_FLAG_ACK = 0 x01,NGHTTP2_FLAG_PADDED = 0 x08,NGHTTP2_FLAG_PRIORITY = 0 x20 } nghttp2_flag ; typedef enum { NGHTTP2_SETTINGS_HEADER_TABLE_SIZE = 0 x01,NGHTTP2_SETTINGS_ENABLE_PUSH = 0 x02,NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS = 0 x03,NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE = 0 x04,NGHTTP2_SETTINGS_MAX_FRAME_SIZE = 0 x05,NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE = 0 x06,NGHTTP2_SETTINGS_ENABLE_CONNECT_PROTOCOL = 0 x08 } nghttp2_settings_id ; # define)",
    "insertText": "NGHTTP2_INITIAL_MAX_CONCURRENT_STREAMS((1U << 31) - 1)"
  },
  {
    "label": "ssize_t()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_NO_ERROR = 0 x00,NGHTTP2_PROTOCOL_ERROR = 0 x01,NGHTTP2_INTERNAL_ERROR = 0 x02,NGHTTP2_FLOW_CONTROL_ERROR = 0 x03,NGHTTP2_SETTINGS_TIMEOUT = 0 x04,NGHTTP2_STREAM_CLOSED = 0 x05,NGHTTP2_FRAME_SIZE_ERROR = 0 x06,NGHTTP2_REFUSED_STREAM = 0 x07,NGHTTP2_CANCEL = 0 x08,NGHTTP2_COMPRESSION_ERROR = 0 x09,NGHTTP2_CONNECT_ERROR = 0 x0a,NGHTTP2_ENHANCE_YOUR_CALM = 0 x0b,NGHTTP2_INADEQUATE_SECURITY = 0 x0c,NGHTTP2_HTTP_1_1_REQUIRED = 0 x0d } nghttp2_error_code ; typedef struct { size_t length ; int32_t stream_id ; uint8_t type ; uint8_t flags ; uint8_t reserved ; } nghttp2_frame_hd ; typedef union { int fd ; void* ptr ; } nghttp2_data_source ; typedef enum { NGHTTP2_DATA_FLAG_NONE = 0,NGHTTP2_DATA_FLAG_EOF = 0 x01,NGHTTP2_DATA_FLAG_NO_END_STREAM = 0 x02,NGHTTP2_DATA_FLAG_NO_COPY = 0 x04 } nghttp2_data_flag ; typedef)",
    "insertText": "ssize_t(*nghttp2_data_source_read_callback)( nghttp2_session *session, int32_t stream_id, uint8_t *buf, size_t length, uint32_t *data_flags, nghttp2_data_source *source, void *user_data)"
  },
  {
    "label": "ssize_t()",
    "kind": "Method",
    "detail": "Function (typedef struct { nghttp2_data_source source ; nghttp2_data_source_read_callback read_callback ; } nghttp2_data_provider ; typedef struct { nghttp2_frame_hd hd ; size_t padlen ; } nghttp2_data ; typedef enum { NGHTTP2_HCAT_REQUEST = 0,NGHTTP2_HCAT_RESPONSE = 1,NGHTTP2_HCAT_PUSH_RESPONSE = 2,NGHTTP2_HCAT_HEADERS = 3 } nghttp2_headers_category ; typedef struct { int32_t stream_id ; int32_t weight ; uint8_t exclusive ; } nghttp2_priority_spec ; typedef struct { nghttp2_frame_hd hd ; size_t padlen ; nghttp2_priority_spec pri_spec ; nghttp2_nv* nva ; size_t nvlen ; nghttp2_headers_category cat ; } nghttp2_headers ; typedef struct { nghttp2_frame_hd hd ; nghttp2_priority_spec pri_spec ; } nghttp2_priority ; typedef struct { nghttp2_frame_hd hd ; uint32_t error_code ; } nghttp2_rst_stream ; typedef struct { int32_t settings_id ; uint32_t value ; } nghttp2_settings_entry ; typedef struct { nghttp2_frame_hd hd ; size_t niv ; nghttp2_settings_entry* iv ; } nghttp2_settings ; typedef struct { nghttp2_frame_hd hd ; size_t padlen ; nghttp2_nv* nva ; size_t nvlen ; int32_t promised_stream_id ; uint8_t reserved ; } nghttp2_push_promise ; typedef struct { nghttp2_frame_hd hd ; uint8_t opaque_data [ 8 ] ; } nghttp2_ping ; typedef struct { nghttp2_frame_hd hd ; int32_t last_stream_id ; uint32_t error_code ; uint8_t* opaque_data ; size_t opaque_data_len ; uint8_t reserved ; } nghttp2_goaway ; typedef struct { nghttp2_frame_hd hd ; int32_t window_size_increment ; uint8_t reserved ; } nghttp2_window_update ; typedef struct { nghttp2_frame_hd hd ; void* payload ; } nghttp2_extension ; typedef union { nghttp2_frame_hd hd ; nghttp2_data data ; nghttp2_headers headers ; nghttp2_priority priority ; nghttp2_rst_stream rst_stream ; nghttp2_settings settings ; nghttp2_push_promise push_promise ; nghttp2_ping ping ; nghttp2_goaway goaway ; nghttp2_window_update window_update ; nghttp2_extension ext ; } nghttp2_frame ; typedef)",
    "insertText": "ssize_t(*nghttp2_send_callback)(nghttp2_session *session, const uint8_t *data, size_t length, int flags, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_send_data_callback)(nghttp2_session *session, nghttp2_frame *frame, const uint8_t *framehd, size_t length, nghttp2_data_source *source, void *user_data)"
  },
  {
    "label": "ssize_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "ssize_t(*nghttp2_recv_callback)(nghttp2_session *session, uint8_t *buf, size_t length, int flags, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_frame_recv_callback)(nghttp2_session *session, const nghttp2_frame *frame, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_invalid_frame_recv_callback)( nghttp2_session *session, const nghttp2_frame *frame, int lib_error_code, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_data_chunk_recv_callback)(nghttp2_session *session, uint8_t flags, int32_t stream_id, const uint8_t *data, size_t len, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_before_frame_send_callback)(nghttp2_session *session, const nghttp2_frame *frame, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_frame_send_callback)(nghttp2_session *session, const nghttp2_frame *frame, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_frame_not_send_callback)(nghttp2_session *session, const nghttp2_frame *frame, int lib_error_code, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_stream_close_callback)(nghttp2_session *session, int32_t stream_id, uint32_t error_code, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_begin_headers_callback)(nghttp2_session *session, const nghttp2_frame *frame, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_header_callback)(nghttp2_session *session, const nghttp2_frame *frame, const uint8_t *name, size_t namelen, const uint8_t *value, size_t valuelen, uint8_t flags, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_header_callback2)(nghttp2_session *session, const nghttp2_frame *frame, nghttp2_rcbuf *name, nghttp2_rcbuf *value, uint8_t flags, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_invalid_header_callback)( nghttp2_session *session, const nghttp2_frame *frame, const uint8_t *name, size_t namelen, const uint8_t *value, size_t valuelen, uint8_t flags, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_invalid_header_callback2)( nghttp2_session *session, const nghttp2_frame *frame, nghttp2_rcbuf *name, nghttp2_rcbuf *value, uint8_t flags, void *user_data)"
  },
  {
    "label": "ssize_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "ssize_t(*nghttp2_select_padding_callback)(nghttp2_session *session, const nghttp2_frame *frame, size_t max_payloadlen, void *user_data)"
  },
  {
    "label": "ssize_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "ssize_t(*nghttp2_data_source_read_length_callback)( nghttp2_session *session, uint8_t frame_type, int32_t stream_id, int32_t session_remote_window_size, int32_t stream_remote_window_size, uint32_t remote_max_frame_size, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_begin_frame_callback)(nghttp2_session *session, const nghttp2_frame_hd *hd, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_on_extension_chunk_recv_callback)( nghttp2_session *session, const nghttp2_frame_hd *hd, const uint8_t *data, size_t len, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_unpack_extension_callback)(nghttp2_session *session, void **payload, const nghttp2_frame_hd *hd, void *user_data)"
  },
  {
    "label": "ssize_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "ssize_t(*nghttp2_pack_extension_callback)(nghttp2_session *session, uint8_t *buf, size_t len, const nghttp2_frame *frame, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_error_callback)(nghttp2_session *session, const char *msg, size_t len, void *user_data)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*nghttp2_error_callback2)(nghttp2_session *session, int lib_error_code, const char *msg, size_t len, void *user_data)"
  },
  {
    "label": "nghttp2_session_callbacks_new()",
    "kind": "Method",
    "detail": "Function (struct nghttp2_session_callbacks ; typedef struct nghttp2_session_callbacks nghttp2_session_callbacks ; NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_callbacks_new(nghttp2_session_callbacks **callbacks_ptr)"
  },
  {
    "label": "nghttp2_session_callbacks_del()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_del(nghttp2_session_callbacks *callbacks)"
  },
  {
    "label": "nghttp2_session_callbacks_set_send_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_send_callback(nghttp2_session_callbacks *cbs, nghttp2_send_callback send_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_recv_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_recv_callback(nghttp2_session_callbacks *cbs, nghttp2_recv_callback recv_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_frame_recv_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_frame_recv_callback(nghttp2_session_callbacks *cbs, nghttp2_on_frame_recv_callback on_frame_recv_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_invalid_frame_recv_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_invalid_frame_recv_callback(nghttp2_session_callbacks *cbs, nghttp2_on_invalid_frame_recv_callback on_invalid_frame_recv_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_data_chunk_recv_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_data_chunk_recv_callback(nghttp2_session_callbacks *cbs, nghttp2_on_data_chunk_recv_callback on_data_chunk_recv_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_before_frame_send_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_before_frame_send_callback(nghttp2_session_callbacks *cbs, nghttp2_before_frame_send_callback before_frame_send_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_frame_send_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_frame_send_callback(nghttp2_session_callbacks *cbs, nghttp2_on_frame_send_callback on_frame_send_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_frame_not_send_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_frame_not_send_callback(nghttp2_session_callbacks *cbs, nghttp2_on_frame_not_send_callback on_frame_not_send_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_stream_close_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_stream_close_callback(nghttp2_session_callbacks *cbs, nghttp2_on_stream_close_callback on_stream_close_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_begin_headers_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_begin_headers_callback(nghttp2_session_callbacks *cbs, nghttp2_on_begin_headers_callback on_begin_headers_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_header_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_header_callback(nghttp2_session_callbacks *cbs, nghttp2_on_header_callback on_header_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_header_callback2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_header_callback2(nghttp2_session_callbacks *cbs, nghttp2_on_header_callback2 on_header_callback2)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_invalid_header_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_invalid_header_callback(nghttp2_session_callbacks *cbs, nghttp2_on_invalid_header_callback on_invalid_header_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_invalid_header_callback2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_invalid_header_callback2(nghttp2_session_callbacks *cbs, nghttp2_on_invalid_header_callback2 on_invalid_header_callback2)"
  },
  {
    "label": "nghttp2_session_callbacks_set_select_padding_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_select_padding_callback(nghttp2_session_callbacks *cbs, nghttp2_select_padding_callback select_padding_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_data_source_read_length_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_data_source_read_length_callback(nghttp2_session_callbacks *cbs, nghttp2_data_source_read_length_callback data_source_read_length_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_begin_frame_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_begin_frame_callback(nghttp2_session_callbacks *cbs, nghttp2_on_begin_frame_callback on_begin_frame_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_send_data_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_send_data_callback(nghttp2_session_callbacks *cbs, nghttp2_send_data_callback send_data_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_pack_extension_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_pack_extension_callback(nghttp2_session_callbacks *cbs, nghttp2_pack_extension_callback pack_extension_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_unpack_extension_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_unpack_extension_callback(nghttp2_session_callbacks *cbs, nghttp2_unpack_extension_callback unpack_extension_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_on_extension_chunk_recv_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_on_extension_chunk_recv_callback(nghttp2_session_callbacks *cbs, nghttp2_on_extension_chunk_recv_callback on_extension_chunk_recv_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_error_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_error_callback(nghttp2_session_callbacks *cbs, nghttp2_error_callback error_callback)"
  },
  {
    "label": "nghttp2_session_callbacks_set_error_callback2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_callbacks_set_error_callback2(nghttp2_session_callbacks *cbs, nghttp2_error_callback2 error_callback2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*nghttp2_malloc)(size_t size, void *mem_user_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*nghttp2_free)(void *ptr, void *mem_user_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*nghttp2_calloc)(size_t nmemb, size_t size, void *mem_user_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*nghttp2_realloc)(void *ptr, size_t size, void *mem_user_data)"
  },
  {
    "label": "nghttp2_option_new()",
    "kind": "Method",
    "detail": "Function (typedef struct { void* mem_user_data ; nghttp2_malloc malloc ; nghttp2_free free ; nghttp2_calloc calloc ; nghttp2_realloc realloc ; } nghttp2_mem ; struct nghttp2_option ; typedef struct nghttp2_option nghttp2_option ; NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_option_new(nghttp2_option **option_ptr)"
  },
  {
    "label": "nghttp2_option_del()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_del(nghttp2_option *option)"
  },
  {
    "label": "nghttp2_option_set_no_auto_window_update()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_no_auto_window_update(nghttp2_option *option, int val)"
  },
  {
    "label": "nghttp2_option_set_peer_max_concurrent_streams()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_peer_max_concurrent_streams(nghttp2_option *option, uint32_t val)"
  },
  {
    "label": "nghttp2_option_set_no_recv_client_magic()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_no_recv_client_magic(nghttp2_option *option, int val)"
  },
  {
    "label": "nghttp2_option_set_no_http_messaging()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_no_http_messaging(nghttp2_option *option, int val)"
  },
  {
    "label": "nghttp2_option_set_max_reserved_remote_streams()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_max_reserved_remote_streams(nghttp2_option *option, uint32_t val)"
  },
  {
    "label": "nghttp2_option_set_user_recv_extension_type()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_user_recv_extension_type(nghttp2_option *option, uint8_t type)"
  },
  {
    "label": "nghttp2_option_set_builtin_recv_extension_type()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_builtin_recv_extension_type(nghttp2_option *option, uint8_t type)"
  },
  {
    "label": "nghttp2_option_set_no_auto_ping_ack()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_no_auto_ping_ack(nghttp2_option *option, int val)"
  },
  {
    "label": "nghttp2_option_set_max_send_header_block_length()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_max_send_header_block_length(nghttp2_option *option, size_t val)"
  },
  {
    "label": "nghttp2_option_set_max_deflate_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_max_deflate_dynamic_table_size(nghttp2_option *option, size_t val)"
  },
  {
    "label": "nghttp2_option_set_no_closed_streams()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_no_closed_streams(nghttp2_option *option, int val)"
  },
  {
    "label": "nghttp2_option_set_max_outbound_ack()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_max_outbound_ack(nghttp2_option *option, size_t val)"
  },
  {
    "label": "nghttp2_option_set_max_settings()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_option_set_max_settings(nghttp2_option *option, size_t val)"
  },
  {
    "label": "nghttp2_session_client_new()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_client_new(nghttp2_session **session_ptr, const nghttp2_session_callbacks *callbacks, void *user_data)"
  },
  {
    "label": "nghttp2_session_server_new()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_server_new(nghttp2_session **session_ptr, const nghttp2_session_callbacks *callbacks, void *user_data)"
  },
  {
    "label": "nghttp2_session_client_new2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_client_new2(nghttp2_session **session_ptr, const nghttp2_session_callbacks *callbacks, void *user_data, const nghttp2_option *option)"
  },
  {
    "label": "nghttp2_session_server_new2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_server_new2(nghttp2_session **session_ptr, const nghttp2_session_callbacks *callbacks, void *user_data, const nghttp2_option *option)"
  },
  {
    "label": "nghttp2_session_client_new3()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_client_new3(nghttp2_session **session_ptr, const nghttp2_session_callbacks *callbacks, void *user_data, const nghttp2_option *option, nghttp2_mem *mem)"
  },
  {
    "label": "nghttp2_session_server_new3()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_server_new3(nghttp2_session **session_ptr, const nghttp2_session_callbacks *callbacks, void *user_data, const nghttp2_option *option, nghttp2_mem *mem)"
  },
  {
    "label": "nghttp2_session_del()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_del(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_send()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_send(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_mem_send()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_session_mem_send(nghttp2_session *session, const uint8_t **data_ptr)"
  },
  {
    "label": "nghttp2_session_recv()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_recv(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_mem_recv()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_session_mem_recv(nghttp2_session *session, const uint8_t *in, size_t inlen)"
  },
  {
    "label": "nghttp2_session_resume_data()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_resume_data(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_want_read()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_want_read(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_want_write()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_want_write(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_stream_user_data()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void*)",
    "insertText": "nghttp2_session_get_stream_user_data(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_set_stream_user_data()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_set_stream_user_data(nghttp2_session *session, int32_t stream_id, void *stream_user_data)"
  },
  {
    "label": "nghttp2_session_set_user_data()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_session_set_user_data(nghttp2_session *session, void *user_data)"
  },
  {
    "label": "nghttp2_session_get_outbound_queue_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_session_get_outbound_queue_size(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_stream_effective_recv_data_length()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_stream_effective_recv_data_length(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_get_stream_effective_local_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_stream_effective_local_window_size(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_get_stream_local_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_stream_local_window_size(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_get_effective_recv_data_length()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_effective_recv_data_length(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_effective_local_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_effective_local_window_size(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_local_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_local_window_size(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_stream_remote_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_stream_remote_window_size(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_get_remote_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_remote_window_size(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_stream_local_close()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_get_stream_local_close(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_get_stream_remote_close()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_get_stream_remote_close(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_session_get_hd_inflate_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_session_get_hd_inflate_dynamic_table_size(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_hd_deflate_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_session_get_hd_deflate_dynamic_table_size(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_terminate_session()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_terminate_session(nghttp2_session *session, uint32_t error_code)"
  },
  {
    "label": "nghttp2_session_terminate_session2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_terminate_session2(nghttp2_session *session, int32_t last_stream_id, uint32_t error_code)"
  },
  {
    "label": "nghttp2_submit_shutdown_notice()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_shutdown_notice(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_get_remote_settings()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN uint32_t)",
    "insertText": "nghttp2_session_get_remote_settings(nghttp2_session *session, nghttp2_settings_id id)"
  },
  {
    "label": "nghttp2_session_get_local_settings()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN uint32_t)",
    "insertText": "nghttp2_session_get_local_settings(nghttp2_session *session, nghttp2_settings_id id)"
  },
  {
    "label": "nghttp2_session_set_next_stream_id()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_set_next_stream_id(nghttp2_session *session, int32_t next_stream_id)"
  },
  {
    "label": "nghttp2_session_get_next_stream_id()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN uint32_t)",
    "insertText": "nghttp2_session_get_next_stream_id(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_consume()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_consume(nghttp2_session *session, int32_t stream_id, size_t size)"
  },
  {
    "label": "nghttp2_session_consume_connection()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_consume_connection(nghttp2_session *session, size_t size)"
  },
  {
    "label": "nghttp2_session_consume_stream()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_consume_stream(nghttp2_session *session, int32_t stream_id, size_t size)"
  },
  {
    "label": "nghttp2_session_change_stream_priority()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_change_stream_priority(nghttp2_session *session, int32_t stream_id, const nghttp2_priority_spec *pri_spec)"
  },
  {
    "label": "nghttp2_session_create_idle_stream()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_create_idle_stream(nghttp2_session *session, int32_t stream_id, const nghttp2_priority_spec *pri_spec)"
  },
  {
    "label": "nghttp2_session_upgrade()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_upgrade(nghttp2_session *session, const uint8_t *settings_payload, size_t settings_payloadlen, void *stream_user_data)"
  },
  {
    "label": "nghttp2_session_upgrade2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_upgrade2(nghttp2_session *session, const uint8_t *settings_payload, size_t settings_payloadlen, int head_request, void *stream_user_data)"
  },
  {
    "label": "nghttp2_pack_settings_payload()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_pack_settings_payload(uint8_t *buf, size_t buflen, const nghttp2_settings_entry *iv, size_t niv)"
  },
  {
    "label": "nghttp2_strerror()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN const char*)",
    "insertText": "nghttp2_strerror(int lib_error_code)"
  },
  {
    "label": "nghttp2_http2_strerror()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN const char*)",
    "insertText": "nghttp2_http2_strerror(uint32_t error_code)"
  },
  {
    "label": "nghttp2_priority_spec_init()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_priority_spec_init(nghttp2_priority_spec *pri_spec, int32_t stream_id, int32_t weight, int exclusive)"
  },
  {
    "label": "nghttp2_priority_spec_default_init()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_priority_spec_default_init(nghttp2_priority_spec *pri_spec)"
  },
  {
    "label": "nghttp2_priority_spec_check_default()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_priority_spec_check_default(const nghttp2_priority_spec *pri_spec)"
  },
  {
    "label": "nghttp2_submit_request()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_submit_request(nghttp2_session *session, const nghttp2_priority_spec *pri_spec, const nghttp2_nv *nva, size_t nvlen, const nghttp2_data_provider *data_prd, void *stream_user_data)"
  },
  {
    "label": "nghttp2_submit_response()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_response(nghttp2_session *session, int32_t stream_id, const nghttp2_nv *nva, size_t nvlen, const nghttp2_data_provider *data_prd)"
  },
  {
    "label": "nghttp2_submit_trailer()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_trailer(nghttp2_session *session, int32_t stream_id, const nghttp2_nv *nva, size_t nvlen)"
  },
  {
    "label": "nghttp2_submit_headers()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_submit_headers(nghttp2_session *session, uint8_t flags, int32_t stream_id, const nghttp2_priority_spec *pri_spec, const nghttp2_nv *nva, size_t nvlen, void *stream_user_data)"
  },
  {
    "label": "nghttp2_submit_data()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_data(nghttp2_session *session, uint8_t flags, int32_t stream_id, const nghttp2_data_provider *data_prd)"
  },
  {
    "label": "nghttp2_submit_priority()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_priority(nghttp2_session *session, uint8_t flags, int32_t stream_id, const nghttp2_priority_spec *pri_spec)"
  },
  {
    "label": "nghttp2_submit_rst_stream()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_rst_stream(nghttp2_session *session, uint8_t flags, int32_t stream_id, uint32_t error_code)"
  },
  {
    "label": "nghttp2_submit_settings()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_settings(nghttp2_session *session, uint8_t flags, const nghttp2_settings_entry *iv, size_t niv)"
  },
  {
    "label": "nghttp2_submit_push_promise()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_submit_push_promise(nghttp2_session *session, uint8_t flags, int32_t stream_id, const nghttp2_nv *nva, size_t nvlen, void *promised_stream_user_data)"
  },
  {
    "label": "nghttp2_submit_ping()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_ping(nghttp2_session *session, uint8_t flags, const uint8_t *opaque_data)"
  },
  {
    "label": "nghttp2_submit_goaway()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_goaway(nghttp2_session *session, uint8_t flags, int32_t last_stream_id, uint32_t error_code, const uint8_t *opaque_data, size_t opaque_data_len)"
  },
  {
    "label": "nghttp2_session_get_last_proc_stream_id()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_session_get_last_proc_stream_id(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_check_request_allowed()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_check_request_allowed(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_session_check_server_session()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_check_server_session(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_submit_window_update()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_window_update(nghttp2_session *session, uint8_t flags, int32_t stream_id, int32_t window_size_increment)"
  },
  {
    "label": "nghttp2_session_set_local_window_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_session_set_local_window_size(nghttp2_session *session, uint8_t flags, int32_t stream_id, int32_t window_size)"
  },
  {
    "label": "nghttp2_submit_extension()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_extension(nghttp2_session *session, uint8_t type, uint8_t flags, int32_t stream_id, void *payload)"
  },
  {
    "label": "nghttp2_submit_altsvc()",
    "kind": "Method",
    "detail": "Function (typedef struct { uint8_t* origin ; size_t origin_len ; uint8_t* field_value ; size_t field_value_len ; } nghttp2_ext_altsvc ; NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_altsvc(nghttp2_session *session, uint8_t flags, int32_t stream_id, const uint8_t *origin, size_t origin_len, const uint8_t *field_value, size_t field_value_len)"
  },
  {
    "label": "nghttp2_submit_origin()",
    "kind": "Method",
    "detail": "Function (typedef struct { uint8_t* origin ; size_t origin_len ; } nghttp2_origin_entry ; typedef struct { size_t nov ; nghttp2_origin_entry* ov ; } nghttp2_ext_origin ; NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_submit_origin(nghttp2_session *session, uint8_t flags, const nghttp2_origin_entry *ov, size_t nov)"
  },
  {
    "label": "nghttp2_nv_compare_name()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_nv_compare_name(const nghttp2_nv *lhs, const nghttp2_nv *rhs)"
  },
  {
    "label": "nghttp2_select_next_protocol()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_select_next_protocol(unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen)"
  },
  {
    "label": "nghttp2_version()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_info*)",
    "insertText": "nghttp2_version(int least_version)"
  },
  {
    "label": "nghttp2_is_fatal()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_is_fatal(int lib_error_code)"
  },
  {
    "label": "nghttp2_check_header_name()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_check_header_name(const uint8_t *name, size_t len)"
  },
  {
    "label": "nghttp2_check_header_value()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_check_header_value(const uint8_t *value, size_t len)"
  },
  {
    "label": "nghttp2_check_method()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_check_method(const uint8_t *value, size_t len)"
  },
  {
    "label": "nghttp2_check_path()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_check_path(const uint8_t *value, size_t len)"
  },
  {
    "label": "nghttp2_check_authority()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_check_authority(const uint8_t *value, size_t len)"
  },
  {
    "label": "nghttp2_hd_deflate_new()",
    "kind": "Method",
    "detail": "Function (struct nghttp2_hd_deflater ; typedef struct nghttp2_hd_deflater nghttp2_hd_deflater ; NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_deflate_new(nghttp2_hd_deflater **deflater_ptr, size_t max_deflate_dynamic_table_size)"
  },
  {
    "label": "nghttp2_hd_deflate_new2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_deflate_new2(nghttp2_hd_deflater **deflater_ptr, size_t max_deflate_dynamic_table_size, nghttp2_mem *mem)"
  },
  {
    "label": "nghttp2_hd_deflate_del()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_hd_deflate_del(nghttp2_hd_deflater *deflater)"
  },
  {
    "label": "nghttp2_hd_deflate_change_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_deflate_change_table_size(nghttp2_hd_deflater *deflater, size_t settings_max_dynamic_table_size)"
  },
  {
    "label": "nghttp2_hd_deflate_hd()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_hd_deflate_hd(nghttp2_hd_deflater *deflater, uint8_t *buf, size_t buflen, const nghttp2_nv *nva, size_t nvlen)"
  },
  {
    "label": "nghttp2_hd_deflate_hd_vec()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_hd_deflate_hd_vec(nghttp2_hd_deflater *deflater, const nghttp2_vec *vec, size_t veclen, const nghttp2_nv *nva, size_t nvlen)"
  },
  {
    "label": "nghttp2_hd_deflate_bound()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_deflate_bound(nghttp2_hd_deflater *deflater, const nghttp2_nv *nva, size_t nvlen)"
  },
  {
    "label": "nghttp2_hd_deflate_get_num_table_entries()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_deflate_get_num_table_entries(nghttp2_hd_deflater *deflater)"
  },
  {
    "label": "nghttp2_hd_deflate_get_table_entry()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN const nghttp2_nv*)",
    "insertText": "nghttp2_hd_deflate_get_table_entry(nghttp2_hd_deflater *deflater, size_t idx)"
  },
  {
    "label": "nghttp2_hd_deflate_get_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_deflate_get_dynamic_table_size(nghttp2_hd_deflater *deflater)"
  },
  {
    "label": "nghttp2_hd_deflate_get_max_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_deflate_get_max_dynamic_table_size(nghttp2_hd_deflater *deflater)"
  },
  {
    "label": "nghttp2_hd_inflate_new()",
    "kind": "Method",
    "detail": "Function (struct nghttp2_hd_inflater ; typedef struct nghttp2_hd_inflater nghttp2_hd_inflater ; NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_inflate_new(nghttp2_hd_inflater **inflater_ptr)"
  },
  {
    "label": "nghttp2_hd_inflate_new2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_inflate_new2(nghttp2_hd_inflater **inflater_ptr, nghttp2_mem *mem)"
  },
  {
    "label": "nghttp2_hd_inflate_del()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_hd_inflate_del(nghttp2_hd_inflater *inflater)"
  },
  {
    "label": "nghttp2_hd_inflate_change_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_inflate_change_table_size(nghttp2_hd_inflater *inflater, size_t settings_max_dynamic_table_size)"
  },
  {
    "label": "nghttp2_hd_inflate_hd()",
    "kind": "Method",
    "detail": "Function (typedef enum { NGHTTP2_HD_INFLATE_NONE = 0,NGHTTP2_HD_INFLATE_FINAL = 0 x01,NGHTTP2_HD_INFLATE_EMIT = 0 x02 } nghttp2_hd_inflate_flag ; NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_hd_inflate_hd(nghttp2_hd_inflater *inflater, nghttp2_nv *nv_out, int *inflate_flags, uint8_t *in, size_t inlen, int in_final)"
  },
  {
    "label": "nghttp2_hd_inflate_hd2()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN ssize_t)",
    "insertText": "nghttp2_hd_inflate_hd2(nghttp2_hd_inflater *inflater, nghttp2_nv *nv_out, int *inflate_flags, const uint8_t *in, size_t inlen, int in_final)"
  },
  {
    "label": "nghttp2_hd_inflate_end_headers()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int)",
    "insertText": "nghttp2_hd_inflate_end_headers(nghttp2_hd_inflater *inflater)"
  },
  {
    "label": "nghttp2_hd_inflate_get_num_table_entries()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_inflate_get_num_table_entries(nghttp2_hd_inflater *inflater)"
  },
  {
    "label": "nghttp2_hd_inflate_get_table_entry()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN const nghttp2_nv*)",
    "insertText": "nghttp2_hd_inflate_get_table_entry(nghttp2_hd_inflater *inflater, size_t idx)"
  },
  {
    "label": "nghttp2_hd_inflate_get_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_inflate_get_dynamic_table_size(nghttp2_hd_inflater *inflater)"
  },
  {
    "label": "nghttp2_hd_inflate_get_max_dynamic_table_size()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN size_t)",
    "insertText": "nghttp2_hd_inflate_get_max_dynamic_table_size(nghttp2_hd_inflater *inflater)"
  },
  {
    "label": "nghttp2_session_find_stream()",
    "kind": "Method",
    "detail": "Function (struct nghttp2_stream ; typedef struct nghttp2_stream nghttp2_stream ; NGHTTP2_EXTERN nghttp2_stream*)",
    "insertText": "nghttp2_session_find_stream(nghttp2_session *session, int32_t stream_id)"
  },
  {
    "label": "nghttp2_stream_get_state()",
    "kind": "Method",
    "detail": "Function (typedef enum { NGHTTP2_STREAM_STATE_IDLE = 1,NGHTTP2_STREAM_STATE_OPEN,NGHTTP2_STREAM_STATE_RESERVED_LOCAL,NGHTTP2_STREAM_STATE_RESERVED_REMOTE,NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL,NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE,NGHTTP2_STREAM_STATE_CLOSED } nghttp2_stream_proto_state ; NGHTTP2_EXTERN nghttp2_stream_proto_state)",
    "insertText": "nghttp2_stream_get_state(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_session_get_root_stream()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_stream*)",
    "insertText": "nghttp2_session_get_root_stream(nghttp2_session *session)"
  },
  {
    "label": "nghttp2_stream_get_parent()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_stream*)",
    "insertText": "nghttp2_stream_get_parent(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_stream_get_stream_id()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_stream_get_stream_id(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_stream_get_next_sibling()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_stream*)",
    "insertText": "nghttp2_stream_get_next_sibling(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_stream_get_previous_sibling()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_stream*)",
    "insertText": "nghttp2_stream_get_previous_sibling(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_stream_get_first_child()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN nghttp2_stream*)",
    "insertText": "nghttp2_stream_get_first_child(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_stream_get_weight()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_stream_get_weight(nghttp2_stream *stream)"
  },
  {
    "label": "nghttp2_stream_get_sum_dependency_weight()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN int32_t)",
    "insertText": "nghttp2_stream_get_sum_dependency_weight(nghttp2_stream *stream)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*nghttp2_debug_vprintf_callback)(const char *format, va_list args)"
  },
  {
    "label": "nghttp2_set_debug_vprintf_callback()",
    "kind": "Method",
    "detail": "Function (NGHTTP2_EXTERN void)",
    "insertText": "nghttp2_set_debug_vprintf_callback(nghttp2_debug_vprintf_callback debug_vprintf_callback)"
  }
]