[
  {
    "label": "AMF_CHANNEL_ORDER",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_CHANNEL_ORDER"
  },
  {
    "label": "AMF_CHANNEL_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_CHANNEL_TYPE"
  },
  {
    "label": "AMF_ARGUMENT_ACCESS_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_ARGUMENT_ACCESS_TYPE"
  },
  {
    "label": "AMF_NO_VTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AMF_NO_VTABLE"
  },
  {
    "label": "AMFComputeKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFComputeKernel"
  },
  {
    "label": "AMFComputeKernelVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFComputeKernelVtbl"
  },
  {
    "label": "AMF_RESULT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_RESULT"
  },
  {
    "label": "AMFGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFGuid"
  },
  {
    "label": "AMFComputeSyncPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFComputeSyncPoint"
  },
  {
    "label": "AMFComputeSyncPointVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFComputeSyncPointVtbl"
  },
  {
    "label": "AMFCompute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFCompute"
  },
  {
    "label": "AMFComputeVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFComputeVtbl"
  },
  {
    "label": "AMFPrograms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPrograms"
  },
  {
    "label": "AMFProgramsVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFProgramsVtbl"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef AMF_Compute_h # define AMF_Compute_h # pragma once # include \" Buffer . h \" # include \" Surface . h \" # if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif typedef amf_uint64 AMF_KERNEL_ID ; typedef enum AMF_CHANNEL_ORDER { AMF_CHANNEL_ORDER_INVALID = 0,AMF_CHANNEL_ORDER_R = 1,AMF_CHANNEL_ORDER_RG = 2,AMF_CHANNEL_ORDER_BGRA = 3,AMF_CHANNEL_ORDER_RGBA = 4,AMF_CHANNEL_ORDER_ARGB = 5,AMF_CHANNEL_ORDER_YUY2 = 6,} AMF_CHANNEL_ORDER ; typedef enum AMF_CHANNEL_TYPE { AMF_CHANNEL_INVALID = 0,AMF_CHANNEL_UNSIGNED_INT8 = 1,AMF_CHANNEL_UNSIGNED_INT32 = 2,AMF_CHANNEL_UNORM_INT8 = 3,AMF_CHANNEL_UNORM_INT16 = 4,AMF_CHANNEL_SNORM_INT16 = 5,AMF_CHANNEL_FLOAT = 6,AMF_CHANNEL_FLOAT16 = 7,AMF_CHANNEL_UNSIGNED_INT16 = 8,AMF_CHANNEL_UNORM_INT_101010 = 9,} AMF_CHANNEL_TYPE ; # define AMF_STRUCTURED_BUFFER_FORMAT L \" StructuredBufferFormat \" # if)",
    "insertText": "defined(_WIN32)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AMF_DECLARE_IID(0x94815701, 0x6c84, 0x4ba6, 0xa9, 0xfe, 0xe9, 0xad, 0x40, 0xf8, 0x8, 0x8) virtual void* AMF_STD_CALL GetNative()"
  },
  {
    "label": "GetIDName()",
    "kind": "Method",
    "detail": "Function (const wchar_t* AMF_STD_CALL)",
    "insertText": "GetIDName()"
  },
  {
    "label": "SetArgPlaneNative()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgPlaneNative(amf_size index, void* pPlane, AMF_ARGUMENT_ACCESS_TYPE eAccess)"
  },
  {
    "label": "SetArgBufferNative()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgBufferNative(amf_size index, void* pBuffer, AMF_ARGUMENT_ACCESS_TYPE eAccess)"
  },
  {
    "label": "SetArgPlane()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgPlane(amf_size index, AMFPlane* pPlane, AMF_ARGUMENT_ACCESS_TYPE eAccess)"
  },
  {
    "label": "SetArgBuffer()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgBuffer(amf_size index, AMFBuffer* pBuffer, AMF_ARGUMENT_ACCESS_TYPE eAccess)"
  },
  {
    "label": "SetArgInt32()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgInt32(amf_size index, amf_int32 data)"
  },
  {
    "label": "SetArgInt64()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgInt64(amf_size index, amf_int64 data)"
  },
  {
    "label": "SetArgFloat()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgFloat(amf_size index, amf_float data)"
  },
  {
    "label": "SetArgBlob()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetArgBlob(amf_size index, amf_size dataSize, const void* pData)"
  },
  {
    "label": "GetCompileWorkgroupSize()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetCompileWorkgroupSize(amf_size workgroupSize[3])"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "Enqueue(amf_size dimension, amf_size globalOffset[3], amf_size globalSize[3], amf_size localSize[3])"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (} ; typedef AMFInterfacePtr_T<AMFComputeKernel> AMFComputeKernelPtr ; # else)",
    "insertText": "AMF_DECLARE_IID(AMFComputeKernel, 0x94815701, 0x6c84, 0x4ba6, 0xa9, 0xfe, 0xe9, 0xad, 0x40, 0xf8, 0x8, 0x8)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (typedef struct AMFComputeKernelVtbl {)",
    "insertText": "amf_long(AMF_STD_CALL *Acquire)(AMFComputeKernel* pThis)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_long(AMF_STD_CALL *Release)(AMFComputeKernel* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *QueryInterface)(AMFComputeKernel* pThis, const struct AMFGuid *interfaceID, void** ppInterface)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AMF_DECLARE_IID(0x66f33fe6, 0xaae, 0x4e65, 0xba, 0x3, 0xea, 0x8b, 0xa3, 0x60, 0x11, 0x2) virtual amf_bool AMF_STD_CALL IsCompleted()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void AMF_STD_CALL)",
    "insertText": "Wait()"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (} ; typedef AMFInterfacePtr_T<AMFComputeSyncPoint> AMFComputeSyncPointPtr ; # else)",
    "insertText": "AMF_DECLARE_IID(AMFComputeSyncPoint, 0x66f33fe6, 0xaae, 0x4e65, 0xba, 0x3, 0xea, 0x8b, 0xa3, 0x60, 0x11, 0x2)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (typedef struct AMFComputeSyncPointVtbl {)",
    "insertText": "amf_long(AMF_STD_CALL *Acquire)(AMFComputeSyncPoint* pThis)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_long(AMF_STD_CALL *Release)(AMFComputeSyncPoint* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *QueryInterface)(AMFComputeSyncPoint* pThis, const struct AMFGuid *interfaceID, void** ppInterface)"
  },
  {
    "label": "amf_bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_bool(AMF_STD_CALL *IsCompleted)(AMFComputeSyncPoint* pThis)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *Wait)(AMFComputeSyncPoint* pThis)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AMF_DECLARE_IID(0x3846233a, 0x3f43, 0x443f, 0x8a, 0x45, 0x75, 0x22, 0x11, 0xa9, 0xfb, 0xd5) virtual AMF_MEMORY_TYPE AMF_STD_CALL GetMemoryType()"
  },
  {
    "label": "GetNativeContext()",
    "kind": "Method",
    "detail": "Function (void* AMF_STD_CALL)",
    "insertText": "GetNativeContext()"
  },
  {
    "label": "GetNativeDeviceID()",
    "kind": "Method",
    "detail": "Function (void* AMF_STD_CALL)",
    "insertText": "GetNativeDeviceID()"
  },
  {
    "label": "GetNativeCommandQueue()",
    "kind": "Method",
    "detail": "Function (void* AMF_STD_CALL)",
    "insertText": "GetNativeCommandQueue()"
  },
  {
    "label": "GetKernel()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetKernel(AMF_KERNEL_ID kernelID, AMFComputeKernel** kernel)"
  },
  {
    "label": "PutSyncPoint()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "PutSyncPoint(AMFComputeSyncPoint** ppSyncPoint)"
  },
  {
    "label": "FinishQueue()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "FinishQueue()"
  },
  {
    "label": "FlushQueue()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "FlushQueue()"
  },
  {
    "label": "FillPlane()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "FillPlane(AMFPlane *pPlane, const amf_size origin[3], const amf_size region[3], const void* pColor)"
  },
  {
    "label": "FillBuffer()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "FillBuffer(AMFBuffer* pBuffer, amf_size dstOffset, amf_size dstSize, const void* pSourcePattern, amf_size patternSize)"
  },
  {
    "label": "ConvertPlaneToBuffer()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "ConvertPlaneToBuffer(AMFPlane *pSrcPlane, AMFBuffer** ppDstBuffer)"
  },
  {
    "label": "CopyBuffer()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyBuffer(AMFBuffer* pSrcBuffer, amf_size srcOffset, amf_size size, AMFBuffer* pDstBuffer, amf_size dstOffset)"
  },
  {
    "label": "CopyPlane()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyPlane(AMFPlane *pSrcPlane, const amf_size srcOrigin[3], const amf_size region[3], AMFPlane *pDstPlane, const amf_size dstOrigin[3])"
  },
  {
    "label": "CopyBufferToHost()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyBufferToHost(AMFBuffer* pSrcBuffer, amf_size srcOffset, amf_size size, void* pDest, amf_bool blocking)"
  },
  {
    "label": "CopyBufferFromHost()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyBufferFromHost(const void* pSource, amf_size size, AMFBuffer* pDstBuffer, amf_size dstOffsetInBytes, amf_bool blocking)"
  },
  {
    "label": "CopyPlaneToHost()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyPlaneToHost(AMFPlane *pSrcPlane, const amf_size origin[3], const amf_size region[3], void* pDest, amf_size dstPitch, amf_bool blocking)"
  },
  {
    "label": "CopyPlaneFromHost()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyPlaneFromHost(void* pSource, const amf_size origin[3], const amf_size region[3], amf_size srcPitch, AMFPlane *pDstPlane, amf_bool blocking)"
  },
  {
    "label": "ConvertPlaneToPlane()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "ConvertPlaneToPlane(AMFPlane* pSrcPlane, AMFPlane** ppDstPlane, AMF_CHANNEL_ORDER order, AMF_CHANNEL_TYPE type)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (} ; typedef AMFInterfacePtr_T<AMFCompute> AMFComputePtr ; # else)",
    "insertText": "AMF_DECLARE_IID(AMFCompute, 0x3846233a, 0x3f43, 0x443f, 0x8a, 0x45, 0x75, 0x22, 0x11, 0xa9, 0xfb, 0xd5)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (typedef struct AMFComputeVtbl {)",
    "insertText": "amf_long(AMF_STD_CALL *Acquire)(AMFCompute* pThis)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_long(AMF_STD_CALL *Release)(AMFCompute* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *QueryInterface)(AMFCompute* pThis, const struct AMFGuid *interfaceID, void** ppInterface)"
  },
  {
    "label": "AMF_MEMORY_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_MEMORY_TYPE(AMF_STD_CALL *GetMemoryType)(AMFCompute* pThis)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *GetNativeContext)(AMFCompute* pThis)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *GetNativeDeviceID)(AMFCompute* pThis)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *GetNativeCommandQueue)(AMFCompute* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetKernel)(AMFCompute* pThis, AMF_KERNEL_ID kernelID, AMFComputeKernel** kernel)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *PutSyncPoint)(AMFCompute* pThis, AMFComputeSyncPoint** ppSyncPoint)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *FinishQueue)(AMFCompute* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *FlushQueue)(AMFCompute* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *FillPlane)(AMFCompute* pThis, AMFPlane *pPlane, const amf_size origin[3], const amf_size region[3], const void* pColor)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *FillBuffer)(AMFCompute* pThis, AMFBuffer* pBuffer, amf_size dstOffset, amf_size dstSize, const void* pSourcePattern, amf_size patternSize)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *ConvertPlaneToBuffer)(AMFCompute* pThis, AMFPlane *pSrcPlane, AMFBuffer** ppDstBuffer)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyBuffer)(AMFCompute* pThis, AMFBuffer* pSrcBuffer, amf_size srcOffset, amf_size size, AMFBuffer* pDstBuffer, amf_size dstOffset)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyPlane)(AMFCompute* pThis, AMFPlane *pSrcPlane, const amf_size srcOrigin[3], const amf_size region[3], AMFPlane *pDstPlane, const amf_size dstOrigin[3])"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyBufferToHost)(AMFCompute* pThis, AMFBuffer* pSrcBuffer, amf_size srcOffset, amf_size size, void* pDest, amf_bool blocking)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyBufferFromHost)(AMFCompute* pThis, const void* pSource, amf_size size, AMFBuffer* pDstBuffer, amf_size dstOffsetInBytes, amf_bool blocking)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyPlaneToHost)(AMFCompute* pThis, AMFPlane *pSrcPlane, const amf_size origin[3], const amf_size region[3], void* pDest, amf_size dstPitch, amf_bool blocking)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyPlaneFromHost)(AMFCompute* pThis, void* pSource, const amf_size origin[3], const amf_size region[3], amf_size srcPitch, AMFPlane *pDstPlane, amf_bool blocking)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *ConvertPlaneToPlane)(AMFCompute* pThis, AMFPlane* pSrcPlane, AMFPlane** ppDstPlane, AMF_CHANNEL_ORDER order, AMF_CHANNEL_TYPE type)"
  },
  {
    "label": "RegisterKernelSourceFile()",
    "kind": "Method",
    "detail": "Function (public : AMF_RESULT AMF_STD_CALL)",
    "insertText": "RegisterKernelSourceFile(AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, const wchar_t* filepath, const char* options)"
  },
  {
    "label": "RegisterKernelSource()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "RegisterKernelSource(AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "RegisterKernelBinary()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "RegisterKernelBinary(AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "RegisterKernelSource1()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "RegisterKernelSource1(AMF_MEMORY_TYPE eMemoryType, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "RegisterKernelBinary1()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "RegisterKernelBinary1(AMF_MEMORY_TYPE eMemoryType, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (} ; # else typedef struct AMFPrograms AMFPrograms ; typedef struct AMFProgramsVtbl {)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *RegisterKernelSourceFile)(AMFPrograms* pThis, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, const wchar_t* filepath, const char* options)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *RegisterKernelSource)(AMFPrograms* pThis, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *RegisterKernelBinary)(AMFPrograms* pThis, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *RegisterKernelSource1)(AMFPrograms* pThis, AMF_MEMORY_TYPE eMemoryType, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *RegisterKernelBinary1)(AMFPrograms* pThis, AMF_MEMORY_TYPE eMemoryType, AMF_KERNEL_ID* pKernelID, const wchar_t* kernelid_name, const char* kernelName, amf_size dataSize, const amf_uint8* data, const char* options)"
  }
]