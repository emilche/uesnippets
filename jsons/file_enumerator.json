[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FileEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileEnumerator"
  },
  {
    "label": "FileType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_ENUMERATOR_H_ # define BASE_FILES_FILE_ENUMERATOR_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" base / base_export . h \" # include \" base / containers / stack . h \" # include \" base / files / file . h \" # include \" base / files / file_path . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/windows_types.h\" #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "FileInfo()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT FileEnumerator { public : class BASE_EXPORT FileInfo { public :)",
    "insertText": "FileInfo()"
  },
  {
    "label": "IsDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirectory()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "GetName()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetLastModifiedTime()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "GetLastModifiedTime()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) const WIN32_FIND_DATA& find_data()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) const stat_wrapper_t& stat()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "FileEnumerator()",
    "kind": "Method",
    "detail": "Function (enum class FolderSearchPolicy { MATCH_ONLY,ALL,} ; enum class ErrorPolicy { IGNORE_ERRORS,STOP_ENUMERATION,} ;)",
    "insertText": "FileEnumerator(const FilePath& root_path, bool recursive, int file_type)"
  },
  {
    "label": "FileEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileEnumerator(const FilePath& root_path, bool recursive, int file_type, const FilePath::StringType& pattern)"
  },
  {
    "label": "FileEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileEnumerator(const FilePath& root_path, bool recursive, int file_type, const FilePath::StringType& pattern, FolderSearchPolicy folder_search_policy)"
  },
  {
    "label": "FileEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileEnumerator(const FilePath& root_path, bool recursive, int file_type, const FilePath::StringType& pattern, FolderSearchPolicy folder_search_policy, ErrorPolicy error_policy)"
  },
  {
    "label": "FileEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileEnumerator(const FileEnumerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileEnumerator&)",
    "insertText": "operator(const FileEnumerator&)"
  },
  {
    "label": "FileEnumerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileEnumerator()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "Next()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (FileInfo)",
    "insertText": "GetInfo()"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (File::Error)",
    "insertText": "GetError()"
  },
  {
    "label": "IsTypeMatched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTypeMatched(bool is_dir)"
  },
  {
    "label": "IsPatternMatched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPatternMatched(const FilePath& src)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (std::unordered_set<)",
    "insertText": "decltype(stat_wrapper_t::st_ino)"
  }
]