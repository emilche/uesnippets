[
  {
    "label": "FEntityOutputAggregate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityOutputAggregate"
  },
  {
    "label": "FGarbageTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGarbageTraits"
  },
  {
    "label": "TGarbageTraitsImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGarbageTraitsImpl"
  },
  {
    "label": "TOverlappingEntityInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOverlappingEntityInput"
  },
  {
    "label": "TOverlappingEntityTrackerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOverlappingEntityTrackerImpl"
  },
  {
    "label": "FOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutput"
  },
  {
    "label": "TOverlappingEntityTracker_NoGarbage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOverlappingEntityTracker_NoGarbage"
  },
  {
    "label": "TOverlappingEntityTracker_WithGarbage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOverlappingEntityTracker_WithGarbage"
  },
  {
    "label": "IsGarbage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Map . h \" # include \" Containers / SparseArray . h \" # include \" Algo / AnyOf . h \" # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" EntitySystem / MovieSceneComponentAccessors . h \" # include \" EntitySystem / MovieSceneEntitySystemTask . h \" # include \" EntitySystem / MovieSceneEntitySystemLinker . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / MovieSceneComponentTypeInfo . h \" namespace UE { namespace MovieScene { struct FEntityOutputAggregate { bool bNeedsRestoration = false ; } ; struct FGarbageTraits { bool)",
    "insertText": "IsGarbage(...)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (bool bTypeDependentFalse = ! std::is_same_v<T,T> ;)",
    "insertText": "static_assert(bTypeDependentFalse, \"Raw object pointers are no longer supported. Please use TObjectPtr<T> instead.\")"
  },
  {
    "label": "IsGarbage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGarbage(FObjectKey InObject)"
  },
  {
    "label": "IsGarbage()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "IsGarbage(TObjectPtr<T>& InObject)"
  },
  {
    "label": "IsGarbage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGarbage(FObjectComponent& InComponent)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& ReferenceCollector, T* In)"
  },
  {
    "label": "AddReferencedObjectForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjectForComponent(&ReferenceCollector, In)"
  },
  {
    "label": "IsGarbage()",
    "kind": "Method",
    "detail": "Function (} } } ; template<. . . T> struct TGarbageTraitsImpl ; template<. . . T> struct TOverlappingEntityInput ; template<. . . T,int . . . Indices> struct TGarbageTraitsImpl<TIntegerSequence<int,Indices . . .>,T . . .> { bool)",
    "insertText": "IsGarbage(TOverlappingEntityInput<T...>& InParam)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& ReferenceCollector, TOverlappingEntityInput<T...>& InParam)"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (} template<CallbackType> void)",
    "insertText": "Unpack(const TTuple<T...>& InTuple, CallbackType&& Callback)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(InTuple.template Get<Indices>()...)"
  },
  {
    "label": "CollectGarbageForOutput()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "CollectGarbageForOutput(void*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> struct TOverlappingEntityInput { using GarbageTraits = TGarbageTraitsImpl<TMakeIntegerSequence<int,)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "TOverlappingEntityInput()",
    "kind": "Method",
    "detail": "Function (TTuple<T . . .> Key ; template<. . . ArgTypes>)",
    "insertText": "TOverlappingEntityInput(ArgTypes&&... InArgs) : Key(Forward<ArgTypes>(InArgs)...)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const TOverlappingEntityInput<T...>& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TOverlappingEntityInput<T...>& A, const TOverlappingEntityInput<T...>& B)"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unpack(Key, MoveTemp(Callback))"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} } ; template<OutputType,. . . InputKeyTypes> struct TOverlappingEntityTrackerImpl { using KeyType = TOverlappingEntityInput<InputKeyTypes . . .> ; using ParamType = TCallTraits<KeyType>::ParamType ; bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "UpdateFromComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFromComponents(Linker, InFilter, InKeyComponents...)"
  },
  {
    "label": "UpdateFromComponents()",
    "kind": "Method",
    "detail": "Function (} template<. . . ComponentTypes> void)",
    "insertText": "UpdateFromComponents(UMovieSceneEntitySystemLinker* Linker, const FEntityComponentFilter& InFilter, TComponentTypeID<ComponentTypes>... InKeyComponents)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FBuiltInComponentTypes* BuiltInComponents =)",
    "insertText": "Get()"
  },
  {
    "label": "TFilteredEntityTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFilteredEntityTask(TEntityTaskComponents<>()) .CombineFilter(InFilter) .FilterAll({ BuiltInComponents->Tags.NeedsUnlink, FComponentTypeID(InKeyComponents)... }) .Iterate_PerAllocation(&Linker->EntityManager, [this](const FEntityAllocation* Allocation){ this->VisitUnlinkedAllocation(Allocation); })"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityTaskBuilder() .ReadAllOf(InKeyComponents...) .CombineFilter(InFilter) .FilterAll({ BuiltInComponents->Tags.NeedsLink }) .Iterate_PerAllocation(&Linker->EntityManager, [this](const FEntityAllocation* Allocation, TRead<ComponentTypes>... ReadKeys){ this->VisitLinkedAllocation(Allocation, ReadKeys...); })"
  },
  {
    "label": "UpdateUnlinkedOnly()",
    "kind": "Method",
    "detail": "Function (} template<. . . ComponentTypes> void)",
    "insertText": "UpdateUnlinkedOnly(UMovieSceneEntitySystemLinker* Linker, TComponentTypeID<ComponentTypes>... InKeyComponent, const FEntityComponentFilter& InFilter)"
  },
  {
    "label": "TFilteredEntityTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFilteredEntityTask(TEntityTaskComponents<>()) .CombineFilter(InFilter) .FilterAll({ BuiltInComponents->Tags.NeedsUnlink, InKeyComponent... }) .Iterate_PerAllocation(&Linker->EntityManager, [this](const FEntityAllocation* Allocation){ this->VisitUnlinkedAllocation(Allocation); })"
  },
  {
    "label": "VisitActiveAllocation()",
    "kind": "Method",
    "detail": "Function (} template<. . . ComponentTypes> void)",
    "insertText": "VisitActiveAllocation(const FEntityAllocation* Allocation, TComponentPtr<const ComponentTypes>... ReadKeys)"
  },
  {
    "label": "VisitActiveAllocationImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitActiveAllocationImpl(Allocation, ReadKeys...)"
  },
  {
    "label": "VisitLinkedAllocation()",
    "kind": "Method",
    "detail": "Function (} template<. . . ComponentTypes> void)",
    "insertText": "VisitLinkedAllocation(const FEntityAllocation* Allocation, TComponentPtr<const ComponentTypes>... ReadKeys)"
  },
  {
    "label": "VisitUnlinkedAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitUnlinkedAllocation(const FEntityAllocation* Allocation)"
  },
  {
    "label": "VisitUnlinkedAllocationImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitUnlinkedAllocationImpl(Allocation)"
  },
  {
    "label": "ProcessInvalidatedOutputs()",
    "kind": "Method",
    "detail": "Function (} template<HandlerType> void)",
    "insertText": "ProcessInvalidatedOutputs(UMovieSceneEntitySystemLinker* Linker, HandlerType&& InHandler)"
  },
  {
    "label": "RestoreStateTag()",
    "kind": "Method",
    "detail": "Function (int32 NumRemoved = 0 ; auto RestoreStatePredicate = [ Linker,)",
    "insertText": "RestoreStateTag(FMovieSceneEntityID InEntityID)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "check(InvalidatedOutputs.Num() < NO_OUTPUT)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (const uint16 OutputIndex = static_cast<)",
    "insertText": "uint16(InvalidOutput.GetIndex())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InputArray .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InputArray .)",
    "insertText": "Add(Inputs.Value())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { EntityToOutput .)",
    "insertText": "Remove(Inputs.Value())"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (Inputs .)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } FOutput& Output = Outputs [ OutputIndex ] ;)",
    "insertText": "if(InputArray.Num() > 0)"
  },
  {
    "label": "AnyOf()",
    "kind": "Method",
    "detail": "Function (Output . Aggregate . bNeedsRestoration =)",
    "insertText": "AnyOf(InputArray, RestoreStatePredicate)"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (Output . Key .)",
    "insertText": "Unpack([&InHandler, &InputArray, &Output](typename TCallTraits<InputKeyTypes>::ParamType... InKeys){ InHandler.InitializeOutput(InKeys..., InputArray, &Output.OutputData, Output.Aggregate); })"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (} else { Output . Key .)",
    "insertText": "Unpack([&InHandler, &InputArray, &Output](typename TCallTraits<InputKeyTypes>::ParamType... InKeys){ InHandler.UpdateOutput(InKeys..., InputArray, &Output.OutputData, Output.Aggregate); })"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (} } else { Output . Key .)",
    "insertText": "Unpack([&InHandler, &Output](typename TCallTraits<InputKeyTypes>::ParamType... InKeys){ InHandler.DestroyOutput(InKeys..., &Output.OutputData, Output.Aggregate); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InputArray.Num() == 0)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KeyToOutput .)",
    "insertText": "Remove(Outputs[OutputIndex].Key)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Outputs .)",
    "insertText": "RemoveAt(OutputIndex, 1)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } } InvalidatedOutputs .)",
    "insertText": "Empty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} template<HandlerType> void)",
    "insertText": "Destroy(HandlerType&& InHandler)"
  },
  {
    "label": "FindEntityIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindEntityIDs(ParamType Key, TArray<FMovieSceneEntityID>& OutEntityIDs)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (OutputToEntity .)",
    "insertText": "MultiFind(*OutputIndex, OutEntityIDs)"
  },
  {
    "label": "FindOutput()",
    "kind": "Method",
    "detail": "Function (} } const OutputType*)",
    "insertText": "FindOutput(FMovieSceneEntityID EntityID)"
  },
  {
    "label": "FindOutputByKey()",
    "kind": "Method",
    "detail": "Function (const uint16 ExistingOutput =)",
    "insertText": "FindOutputByKey(Key)"
  },
  {
    "label": "IsOutputValid()",
    "kind": "Method",
    "detail": "Function (const bool bIsOutputValid =)",
    "insertText": "IsOutputValid(ExistingOutput)"
  },
  {
    "label": "VisitActiveAllocationImpl()",
    "kind": "Method",
    "detail": "Function (Outputs [ ExistingOutput ] . Aggregate . bNeedsRestoration = bNeedsRestoration ; } } protected : template<. . . ComponentTypes> void)",
    "insertText": "VisitActiveAllocationImpl(const FEntityAllocation* Allocation, TComponentPtr<const ComponentTypes>... Keys)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Allocation ->)",
    "insertText": "Num()"
  },
  {
    "label": "GetRawEntityIDs()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneEntityID* EntityIDs = Allocation ->)",
    "insertText": "GetRawEntityIDs()"
  },
  {
    "label": "HasComponent()",
    "kind": "Method",
    "detail": "Function (const bool bNeedsLink = Allocation ->)",
    "insertText": "HasComponent(FBuiltInComponentTypes::Get()->Tags.NeedsLink)"
  },
  {
    "label": "MakeOutput()",
    "kind": "Method",
    "detail": "Function (const uint16 OutputIndex =)",
    "insertText": "MakeOutput(EntityIDs[Index], TOverlappingEntityInput<InputKeyTypes...>(Keys[Index]...), bNeedsLink)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Outputs [ OutputIndex ] . Aggregate . bNeedsRestoration = true ; } } else {)",
    "insertText": "for(int32 Index = 0; Index < Num; ++Index)"
  },
  {
    "label": "VisitUnlinkedAllocationImpl()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "VisitUnlinkedAllocationImpl(const FEntityAllocation* Allocation)"
  },
  {
    "label": "ClearOutputByEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearOutputByEntity(EntityIDs[Index])"
  },
  {
    "label": "MakeOutput()",
    "kind": "Method",
    "detail": "Function (} } uint16)",
    "insertText": "MakeOutput(FMovieSceneEntityID EntityID, ParamType InKey, bool bAlwaysInvalidate)"
  },
  {
    "label": "FindOutputByEntity()",
    "kind": "Method",
    "detail": "Function (const uint16 PreviousOutputIndex =)",
    "insertText": "FindOutputByEntity(EntityID)"
  },
  {
    "label": "CreateOutputByKey()",
    "kind": "Method",
    "detail": "Function (const uint16 DesiredOutputIndex =)",
    "insertText": "CreateOutputByKey(InKey)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs .)",
    "insertText": "PadToNum(DesiredOutputIndex + 1, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs [ DesiredOutputIndex ] = true ; } return DesiredOutputIndex ; })",
    "insertText": "if(PreviousOutputIndex != NO_OUTPUT)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs .)",
    "insertText": "PadToNum(PreviousOutputIndex + 1, false)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs [ PreviousOutputIndex ] = true ; OutputToEntity .)",
    "insertText": "Remove(PreviousOutputIndex, EntityID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (EntityToOutput .)",
    "insertText": "Remove(EntityID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs [ DesiredOutputIndex ] = true ; EntityToOutput .)",
    "insertText": "Add(EntityID, DesiredOutputIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutputToEntity .)",
    "insertText": "Add(DesiredOutputIndex, EntityID)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (const uint16 NewOutput = static_cast<)",
    "insertText": "uint16(Index)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (NewOutputs .)",
    "insertText": "PadToNum(NewOutput + 1, false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewOutputs [ NewOutput ] = true ; KeyToOutput .)",
    "insertText": "Add(Key, NewOutput)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const uint16* OutputIndex = KeyToOutput .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const uint16* OutputIndex = EntityToOutput .)",
    "insertText": "Find(EntityID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OutputToEntity .)",
    "insertText": "Remove(OutputIndex, EntityID)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs .)",
    "insertText": "PadToNum(OutputIndex + 1, false)"
  },
  {
    "label": "IsOutputValid()",
    "kind": "Method",
    "detail": "Function (InvalidatedOutputs [ OutputIndex ] = true ; } } bool)",
    "insertText": "IsOutputValid(uint16 OutputIndex)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} struct FOutput { KeyType Key ; OutputType OutputData ; FEntityOutputAggregate Aggregate ; } ; TMap<FMovieSceneEntityID,uint16> EntityToOutput ; TMultiMap<uint16,FMovieSceneEntityID> OutputToEntity ; TMap<KeyType,uint16> KeyToOutput ; TSparseArray<FOutput> Outputs ; TBitArray<> InvalidatedOutputs,NewOutputs ; bool bIsInitialized = false ; uint16 NO_OUTPUT = MAX_uint16 ; } ; template<OutputType,. . . InputTypes> struct TOverlappingEntityTracker_NoGarbage : TOverlappingEntityTrackerImpl<OutputType,InputTypes . . .> { void)",
    "insertText": "Initialize(UMovieSceneEntitySystem* OwningSystem)"
  },
  {
    "label": "TOverlappingEntityTracker_WithGarbage()",
    "kind": "Method",
    "detail": "Function (this -> bIsInitialized = true ; } } ; template<OutputType,. . . InputTypes> struct TOverlappingEntityTracker_WithGarbage : TOverlappingEntityTrackerImpl<OutputType,InputTypes . . .> { using ThisType = TOverlappingEntityTracker_WithGarbage<OutputType,InputTypes . . .> ; using Super = TOverlappingEntityTrackerImpl<OutputType,InputTypes . . .> ; using Super::FOutput ; using Super::KeyType ; ~)",
    "insertText": "TOverlappingEntityTracker_WithGarbage()"
  },
  {
    "label": "GetEvenIfUnreachable()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystem* OwningSystem = WeakOwningSystem .)",
    "insertText": "GetEvenIfUnreachable()"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystemLinker* Linker = OwningSystem ? OwningSystem ->)",
    "insertText": "GetLinker()"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (Linker -> Events . TagGarbage .)",
    "insertText": "RemoveAll(this)"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (OwningSystem ->)",
    "insertText": "GetLinker()->Events.CleanTaggedGarbage.AddRaw(this, &ThisType::CleanTaggedGarbage)"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (OwningSystem ->)",
    "insertText": "GetLinker()->Events.AddReferencedObjects.AddRaw(this, &ThisType::AddReferencedObjects)"
  },
  {
    "label": "TagGarbage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TagGarbage(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FOutput& Output = this -> Outputs [ Index ] ;)",
    "insertText": "if(KeyType::GarbageTraits::IsGarbage(Output.Key))"
  },
  {
    "label": "CollectGarbageForOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectGarbageForOutput(&this->Outputs[Index].OutputData)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (this -> Outputs .)",
    "insertText": "RemoveAt(Index, 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (this -> InvalidatedOutputs [ OutputIndex ] = false ; })",
    "insertText": "for(auto It = this->OutputToEntity.CreateKeyIterator(OutputIndex); It; ++It)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (this -> EntityToOutput .)",
    "insertText": "Remove(It.Value())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(auto It = this->KeyToOutput.CreateIterator(); It; ++It)"
  },
  {
    "label": "CleanTaggedGarbage()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CleanTaggedGarbage(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneEntityID EntityID = EntityToOutputIt .)",
    "insertText": "Key()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const uint16 OutputIndex = EntityToOutputIt .)",
    "insertText": "Value()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "AddReferencedObjects(UMovieSceneEntitySystemLinker* Linker, FReferenceCollector& ReferenceCollector)"
  },
  {
    "label": "bKeyCanBeGarbage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bKeyCanBeGarbage(THasAddReferencedObjectForComponent<InputTypes>::Value || ...)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (bool bOutputCanBeGarbage = THasAddReferencedObjectForComponent<OutputType>::Value ; if)",
    "insertText": "constexpr(bKeyCanBeGarbage)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (KeyType::)",
    "insertText": "AddReferencedObjects(ReferenceCollector, Pair.Key)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(FOutput& Output : this->Outputs)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (KeyType::)",
    "insertText": "AddReferencedObjects(ReferenceCollector, Output.Key)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(bOutputCanBeGarbage)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(ReferenceCollector, Output.OutputData)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (} } } protected : TWeakObjectPtr<UMovieSceneEntitySystem> WeakOwningSystem ; } ; template<OutputType,. . . KeyType> using TOverlappingEntityTracker =)",
    "insertText": "conditional_t(THasAddReferencedObjectForComponent<KeyType>::Value || ...)"
  }
]