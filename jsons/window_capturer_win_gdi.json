[
  {
    "label": "WindowCapturerWinGdi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowCapturerWinGdi"
  },
  {
    "label": "CaptureResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CaptureResults"
  },
  {
    "label": "WindowCapturerWinGdi()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_WIN_WINDOW_CAPTURER_WIN_GDI_H_ # define MODULES_DESKTOP_CAPTURE_WIN_WINDOW_CAPTURER_WIN_GDI_H_ # include<map> # include<memory> # include<vector> # include \" modules / desktop_capture / desktop_capture_options . h \" # include \" modules / desktop_capture / desktop_capturer . h \" # include \" modules / desktop_capture / win / window_capture_utils . h \" # include \" modules / desktop_capture / window_finder_win . h \" namespace webrtc { class WindowCapturerWinGdi : public DesktopCapturer { public :)",
    "insertText": "WindowCapturerWinGdi(bool enumerate_current_process_windows)"
  },
  {
    "label": "WindowCapturerWinGdi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WindowCapturerWinGdi(const WindowCapturerWinGdi&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WindowCapturerWinGdi&)",
    "insertText": "operator(const WindowCapturerWinGdi&)"
  },
  {
    "label": "WindowCapturerWinGdi()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WindowCapturerWinGdi()"
  },
  {
    "label": "CreateRawWindowCapturer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopCapturer>)",
    "insertText": "CreateRawWindowCapturer(const DesktopCaptureOptions& options)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(Callback* callback)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* sources)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "FocusOnSelectedSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FocusOnSelectedSource()"
  },
  {
    "label": "IsOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOccluded(const DesktopVector& pos)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (private : struct CaptureResults { Result result ; std::unique_ptr<DesktopFrame> frame ; } ; CaptureResults)",
    "insertText": "CaptureFrame(bool capture_owned_windows)"
  }
]