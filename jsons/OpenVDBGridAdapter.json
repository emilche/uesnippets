[
  {
    "label": "IOpenVDBGridAdapterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOpenVDBGridAdapterBase"
  },
  {
    "label": "TOpenVDBGridAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOpenVDBGridAdapter"
  },
  {
    "label": "GetOpenVDBValueNumComponents()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" SparseVolumeTextureOpenVDB . h \" # if OPENVDB_AVAILABLE # include \" CoreMinimal . h \" template<ValueType> uint32)",
    "insertText": "GetOpenVDBValueNumComponents()"
  },
  {
    "label": "FOpenVDBHalf()",
    "kind": "Method",
    "detail": "Function (} template<> uint32 GetOpenVDBValueNumComponents<)",
    "insertText": "FOpenVDBHalf()"
  },
  {
    "label": "FOpenVDBHalf()",
    "kind": "Method",
    "detail": "Function (} template<> float GetOpenVDBValueComponent<)",
    "insertText": "FOpenVDBHalf(const FOpenVDBHalf& Value, uint32 ComponentIndex)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> float GetOpenVDBValueComponent<)",
    "insertText": "float(const float& Value, uint32 ComponentIndex)"
  },
  {
    "label": "GetOpenVDBMaxComponent()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType)",
    "insertText": "GetOpenVDBMaxComponent(const ValueType& ValueA, const ValueType& ValueB)"
  },
  {
    "label": "FOpenVDBHalf()",
    "kind": "Method",
    "detail": "Function (} template<> FOpenVDBHalf GetOpenVDBMaxComponent<)",
    "insertText": "FOpenVDBHalf(const FOpenVDBHalf& ValueA, const FOpenVDBHalf& ValueB)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> float GetOpenVDBMaxComponent<)",
    "insertText": "float(const float& ValueA, const float& ValueB)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> double GetOpenVDBMaxComponent<)",
    "insertText": "double(const double& ValueA, const double& ValueB)"
  },
  {
    "label": "GetOpenVDBMinComponent()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType)",
    "insertText": "GetOpenVDBMinComponent(const ValueType& ValueA, const ValueType& ValueB)"
  },
  {
    "label": "IteratePhysical()",
    "kind": "Method",
    "detail": "Function (} class IOpenVDBGridAdapterBase { public : void)",
    "insertText": "IteratePhysical(TFunctionRef<void(const FIntVector3& Coord, uint32 NumComponents, float* VoxelValues)> OnVisit)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Sample(const FIntVector3& VoxelCoord, uint32 ComponentIndex)"
  },
  {
    "label": "GetMinMaxValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMinMaxValue(uint32 ComponentIndex, float* OutMinVal, float* OutMaxVal)"
  },
  {
    "label": "GetBackgroundValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBackgroundValue(uint32 ComponentIndex)"
  },
  {
    "label": "IOpenVDBGridAdapterBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IOpenVDBGridAdapterBase()"
  },
  {
    "label": "TOpenVDBGridAdapter()",
    "kind": "Method",
    "detail": "Function (} ; template<GridType> class TOpenVDBGridAdapter : public IOpenVDBGridAdapterBase { using ValueType = GridType::ValueType ; public :)",
    "insertText": "TOpenVDBGridAdapter(openvdb::SharedPtr<GridType> Grid) : Grid(Grid), Accessor(Grid->getConstAccessor())"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (uint32 NumComponents = GetOpenVDBValueNumComponents<)",
    "insertText": "ValueType()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ValueType VoxelValue = ValueIt .)",
    "insertText": "getValue()"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const openvdb::Coord CoordVDB = ValueIt .)",
    "insertText": "getCoord()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float VoxelValueComponents [ 4 ] { } ;)",
    "insertText": "for(uint32 ComponentIdx = 0; ComponentIdx < NumComponents; ++ComponentIdx)"
  },
  {
    "label": "GetOpenVDBValueComponent()",
    "kind": "Method",
    "detail": "Function (VoxelValueComponents [ ComponentIdx ] =)",
    "insertText": "GetOpenVDBValueComponent(VoxelValue, ComponentIdx)"
  },
  {
    "label": "Coord()",
    "kind": "Method",
    "detail": "Function (} const FIntVector3)",
    "insertText": "Coord(CoordVDB[0], CoordVDB[1], CoordVDB[2])"
  },
  {
    "label": "OnVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVisit(Coord, NumComponents, VoxelValueComponents)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (} else { openvdb::CoordBBox TileAABB ; ValueIt .)",
    "insertText": "getBoundingBox(TileAABB)"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (const openvdb::Coord AABBDimVDB = TileAABB .)",
    "insertText": "dim()"
  },
  {
    "label": "FIntVector3()",
    "kind": "Method",
    "detail": "Function (const FIntVector3 AABBDim =)",
    "insertText": "FIntVector3(AABBDimVDB.x(), AABBDimVDB.y(), AABBDimVDB.z())"
  },
  {
    "label": "TileLocalCoord()",
    "kind": "Method",
    "detail": "Function (const FIntVector3)",
    "insertText": "TileLocalCoord(Coord.X + X, Coord.Y + Y, Coord.Z + Z)"
  },
  {
    "label": "OnVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVisit(TileLocalCoord, NumComponents, VoxelValueComponents)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (ValueType VoxelValue = Accessor .)",
    "insertText": "getValue(openvdb::Coord(VoxelCoord.X, VoxelCoord.Y, VoxelCoord.Z))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* OutMinVal = FLT_MAX ;* OutMaxVal = - FLT_MAX ;)",
    "insertText": "if(auto Iter = Grid->tree().cbeginValueOn())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueType MinVal =* Iter ; ValueType MaxVal = MinVal ;)",
    "insertText": "for(++Iter; Iter; ++Iter)"
  },
  {
    "label": "GetOpenVDBMinComponent()",
    "kind": "Method",
    "detail": "Function (ValueType Value =* Iter ; MinVal =)",
    "insertText": "GetOpenVDBMinComponent(MinVal, Value)"
  },
  {
    "label": "GetOpenVDBMaxComponent()",
    "kind": "Method",
    "detail": "Function (MaxVal =)",
    "insertText": "GetOpenVDBMaxComponent(MaxVal, Value)"
  },
  {
    "label": "GetOpenVDBValueComponent()",
    "kind": "Method",
    "detail": "Function (}* OutMinVal =)",
    "insertText": "GetOpenVDBValueComponent(MinVal, ComponentIndex)"
  },
  {
    "label": "GetOpenVDBValueComponent()",
    "kind": "Method",
    "detail": "Function (* OutMaxVal =)",
    "insertText": "GetOpenVDBValueComponent(MaxVal, ComponentIndex)"
  },
  {
    "label": "CreateOpenVDBGridAdapterInternal()",
    "kind": "Method",
    "detail": "Function (} private : GridType::Ptr Grid ; GridType::ConstAccessor Accessor ; } ; template<GridType> TSharedPtr<IOpenVDBGridAdapterBase>)",
    "insertText": "CreateOpenVDBGridAdapterInternal(openvdb::GridBase::Ptr Grid)"
  },
  {
    "label": "CreateOpenVDBGridAdapter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IOpenVDBGridAdapterBase>)",
    "insertText": "CreateOpenVDBGridAdapter(openvdb::GridBase::Ptr Grid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBHalf2Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBHalf3Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBHalf4Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBFloat1Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBFloat2Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBFloat3Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBFloat4Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBDouble1Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBDouble2Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBDouble3Grid>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Grid->isType<FOpenVDBDouble4Grid>())"
  }
]