[
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundSubmixGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixGraphNode"
  },
  {
    "label": "USoundSubmixGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixGraph"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" EdGraph / EdGraph . h \" # include \" HAL / Platform . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" SoundSubmixGraph . generated . h \" class UEdGraphPin ; class UObject ; class USoundSubmixBase ; class USoundSubmixGraphNode ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: AUDIOEDITOR_API void SetRootSoundSubmix(USoundSubmixBase* InSoundSubmix)"
  },
  {
    "label": "GetRootSoundSubmix()",
    "kind": "Method",
    "detail": "Function (USoundSubmixBase*)",
    "insertText": "GetRootSoundSubmix()"
  },
  {
    "label": "RebuildGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildGraph()"
  },
  {
    "label": "AddDroppedSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDroppedSoundSubmixes(const TSet<USoundSubmixBase*>& SoundSubmixes, int32 NodePosX, int32 NodePosY)"
  },
  {
    "label": "AddNewSoundSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewSoundSubmix(UEdGraphPin* FromPin, USoundSubmixBase* SoundSubmix, int32 NodePosX, int32 NodePosY, bool bSelectNewNode = true)"
  },
  {
    "label": "IsSubmixDisplayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubmixDisplayed(USoundSubmixBase* SoundSubmix)"
  },
  {
    "label": "LinkSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkSoundSubmixes()"
  },
  {
    "label": "RefreshGraphLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshGraphLinks()"
  },
  {
    "label": "RecursivelyRemoveNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursivelyRemoveNodes(const TSet<UObject*> NodesToRemove)"
  },
  {
    "label": "FindExistingNode()",
    "kind": "Method",
    "detail": "Function (USoundSubmixGraphNode*)",
    "insertText": "FindExistingNode(USoundSubmixBase* SoundSubmix)"
  },
  {
    "label": "ConstructNodes()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "ConstructNodes(USoundSubmixBase* SoundSubmix, int32 NodePosX, int32 NodePosY, bool bSelectNewNode = true)"
  },
  {
    "label": "RecursivelyGatherChildCounts()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RecursivelyGatherChildCounts(USoundSubmixBase* ParentSubmix, TMap<USoundSubmixBase*, int32>& OutChildCounts)"
  },
  {
    "label": "RecursivelyConstructChildNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RecursivelyConstructChildNodes(USoundSubmixGraphNode* ParentNode, const TMap<USoundSubmixBase*, int32>& InChildCounts, bool bSelectNewNode = true)"
  },
  {
    "label": "RecursivelyRemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursivelyRemoveNode(USoundSubmixGraphNode* ParentNode)"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (USoundSubmixGraphNode*)",
    "insertText": "CreateNode(USoundSubmixBase* SoundSubmix, int32 NodePosX, int32 NodePosY, bool bSelectNewNode = true)"
  }
]