[
  {
    "label": "FakeMediaEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMediaEngine"
  },
  {
    "label": "FakeVideoEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoEngine"
  },
  {
    "label": "FakeVoiceEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVoiceEngine"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base"
  },
  {
    "label": "RtpHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpHelper"
  },
  {
    "label": "FakeVoiceMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVoiceMediaChannel"
  },
  {
    "label": "DtmfInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DtmfInfo"
  },
  {
    "label": "VoiceChannelAudioSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceChannelAudioSink"
  },
  {
    "label": "FakeVideoMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoMediaChannel"
  },
  {
    "label": "FakeVoiceEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVoiceEngine"
  },
  {
    "label": "FakeMediaEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMediaEngine"
  },
  {
    "label": "FakeVideoEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoEngine"
  },
  {
    "label": "FakeMediaEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMediaEngine"
  },
  {
    "label": "FakeMediaEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMediaEngine"
  },
  {
    "label": "RemoveStreamBySsrc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveStreamBySsrc(&send_streams_, ssrc)"
  },
  {
    "label": "RemoveStreamBySsrc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveStreamBySsrc(&receive_streams_, ssrc)"
  },
  {
    "label": "GetOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputVolume(uint32_t ssrc, double* volume)"
  },
  {
    "label": "VoiceChannelAudioSink()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "VoiceChannelAudioSink(AudioSource* source)"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetMaxSendBandwidth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaxSendBandwidth(int bps)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOptions(const AudioOptions& options)"
  },
  {
    "label": "SetLocalSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalSource(uint32_t ssrc, AudioSource* source)"
  },
  {
    "label": "CompareDtmfInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareDtmfInfo(const FakeVoiceMediaChannel::DtmfInfo& info,\n                     uint32_t ssrc,\n                     int event_code,\n                     int duration)"
  },
  {
    "label": "FakeVideoMediaChannel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FakeVideoMediaChannel(FakeVideoEngine* engine,\n                        const VideoOptions& options,\n                        webrtc::TaskQueueBase* network_thread)"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOptions(const VideoOptions& options)"
  },
  {
    "label": "SetMaxSendBandwidth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaxSendBandwidth(int bps)"
  },
  {
    "label": "FakeVoiceEngine()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FakeVoiceEngine()"
  },
  {
    "label": "UnregisterChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterChannel(VoiceMediaChannel* channel)"
  },
  {
    "label": "SetCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "GetInputLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetInputLevel()"
  },
  {
    "label": "SetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpHeaderExtensions(\n      std::vector<webrtc::RtpHeaderExtensionCapability> header_extensions)"
  },
  {
    "label": "FakeVideoEngine()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FakeVideoEngine()"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOptions(const VideoOptions& options)"
  },
  {
    "label": "UnregisterChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterChannel(VideoMediaChannel* channel)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "send_codecs(true)"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "recv_codecs(true)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SetCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCapture(bool capture)"
  },
  {
    "label": "SetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpHeaderExtensions(\n      std::vector<webrtc::RtpHeaderExtensionCapability> header_extensions)"
  },
  {
    "label": "FakeMediaEngine()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FakeMediaEngine()"
  },
  {
    "label": "SetAudioCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetAudioRecvCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioRecvCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetAudioSendCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioSendCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetVideoCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "set_fail_create_channel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_fail_create_channel(bool fail)"
  }
]