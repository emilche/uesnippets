[
  {
    "label": "FakeMediaEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMediaEngine"
  },
  {
    "label": "FakeVideoEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoEngine"
  },
  {
    "label": "FakeVoiceEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVoiceEngine"
  },
  {
    "label": "Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base"
  },
  {
    "label": "RtpHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpHelper"
  },
  {
    "label": "FakeVoiceMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVoiceMediaChannel"
  },
  {
    "label": "DtmfInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DtmfInfo"
  },
  {
    "label": "VoiceChannelAudioSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceChannelAudioSink"
  },
  {
    "label": "FakeVideoMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoMediaChannel"
  },
  {
    "label": "RtpHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_FAKE_MEDIA_ENGINE_H_ # define MEDIA_BASE_FAKE_MEDIA_ENGINE_H_ # include<atomic> # include<list> # include<map> # include<memory> # include<set> # include<string> # include<tuple> # include<vector> # include \" absl / algorithm / container . h \" # include \" api / call / audio_sink . h \" # include \" media / base / audio_source . h \" # include \" media / base / media_engine . h \" # include \" media / base / rtp_utils . h \" # include \" media / base / stream_params . h \" # include \" media / engine / webrtc_video_engine . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / network_route . h \" using webrtc::RtpExtension ; namespace cricket { class FakeMediaEngine ; class FakeVideoEngine ; class FakeVoiceEngine ; template<class Base> class RtpHelper : public Base { public :)",
    "insertText": "RtpHelper(webrtc::TaskQueueBase* network_thread) : Base(network_thread), sending_(false), playout_(false), fail_set_send_codecs_(false), fail_set_recv_codecs_(false), send_ssrc_(0), ready_to_send_(false), transport_overhead_per_packet_(0), num_network_route_changes_(0)"
  },
  {
    "label": "RtpHelper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RtpHelper()"
  },
  {
    "label": "recv_extensions()",
    "kind": "Method",
    "detail": "Function (const std::vector<RtpExtension>&)",
    "insertText": "recv_extensions()"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendRtcp(const void* data, size_t len)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (rtc::CopyOnWriteBuffer)",
    "insertText": "packet(reinterpret_cast<const uint8_t*>(data), len, kMaxRtpPacketLen)"
  },
  {
    "label": "CheckRtp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckRtp(const void* data, size_t len)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool success = ! rtp_packets_ .)",
    "insertText": "empty()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (std::string packet = rtp_packets_ .)",
    "insertText": "front()"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (rtp_packets_ .)",
    "insertText": "pop_front()"
  },
  {
    "label": "success()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "success(packet == std::string(static_cast<const char*>(data), len))"
  },
  {
    "label": "CheckRtcp()",
    "kind": "Method",
    "detail": "Function (} return success ; } bool)",
    "insertText": "CheckRtcp(const void* data, size_t len)"
  },
  {
    "label": "CheckNoRtp()",
    "kind": "Method",
    "detail": "Function (} return success ; } bool)",
    "insertText": "CheckNoRtp()"
  },
  {
    "label": "CheckNoRtcp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckNoRtcp()"
  },
  {
    "label": "set_fail_set_send_codecs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_fail_set_send_codecs(bool fail)"
  },
  {
    "label": "set_fail_set_recv_codecs()",
    "kind": "Method",
    "detail": "Function (fail_set_send_codecs_ = fail ; } void)",
    "insertText": "set_fail_set_recv_codecs(bool fail)"
  },
  {
    "label": "AddSendStream()",
    "kind": "Method",
    "detail": "Function (fail_set_recv_codecs_ = fail ; } bool)",
    "insertText": "AddSendStream(const StreamParams& sp)"
  },
  {
    "label": "first_ssrc()",
    "kind": "Method",
    "detail": "Function (rtp_send_parameters_ [ sp .)",
    "insertText": "first_ssrc()] = CreateRtpParametersWithEncodings(sp)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto parameters_iterator = rtp_send_parameters_ .)",
    "insertText": "find(ssrc)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (rtp_send_parameters_ .)",
    "insertText": "erase(parameters_iterator)"
  },
  {
    "label": "RemoveStreamBySsrc()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "RemoveStreamBySsrc(&send_streams_, ssrc)"
  },
  {
    "label": "ResetUnsignaledRecvStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetUnsignaledRecvStream()"
  },
  {
    "label": "OnDemuxerCriteriaUpdatePending()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDemuxerCriteriaUpdatePending()"
  },
  {
    "label": "OnDemuxerCriteriaUpdateComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDemuxerCriteriaUpdateComplete()"
  },
  {
    "label": "AddRecvStream()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddRecvStream(const StreamParams& sp)"
  },
  {
    "label": "RemoveStreamBySsrc()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "RemoveStreamBySsrc(&receive_streams_, ssrc)"
  },
  {
    "label": "GetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (} webrtc::RtpParameters)",
    "insertText": "GetRtpSendParameters(uint32_t ssrc)"
  },
  {
    "label": "SetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (} webrtc::RTCError)",
    "insertText": "SetRtpSendParameters(uint32_t ssrc, const webrtc::RtpParameters& parameters)"
  },
  {
    "label": "CheckRtpParametersInvalidModificationAndValues()",
    "kind": "Method",
    "detail": "Function (auto result =)",
    "insertText": "CheckRtpParametersInvalidModificationAndValues(parameters_iterator->second, parameters)"
  },
  {
    "label": "OK()",
    "kind": "Method",
    "detail": "Function (parameters_iterator -> second = parameters ; return webrtc::)",
    "insertText": "OK()"
  },
  {
    "label": "RTCError()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "RTCError(webrtc::RTCErrorType::INTERNAL_ERROR)"
  },
  {
    "label": "GetRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (} webrtc::RtpParameters)",
    "insertText": "GetRtpReceiveParameters(uint32_t ssrc)"
  },
  {
    "label": "GetDefaultRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (} webrtc::RtpParameters)",
    "insertText": "GetDefaultRtpReceiveParameters()"
  },
  {
    "label": "IsStreamMuted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStreamMuted(uint32_t ssrc)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (bool ret = muted_streams_ .)",
    "insertText": "find(ssrc) != muted_streams_.end()"
  },
  {
    "label": "send_streams()",
    "kind": "Method",
    "detail": "Function (} return ret ; } const std::vector<StreamParams>&)",
    "insertText": "send_streams()"
  },
  {
    "label": "HasSendStream()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSendStream(uint32_t ssrc)"
  },
  {
    "label": "send_ssrc()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "send_ssrc()"
  },
  {
    "label": "rtcp_cname()",
    "kind": "Method",
    "detail": "Function (} const std::string)",
    "insertText": "rtcp_cname()"
  },
  {
    "label": "OnRtcpPacketReceived()",
    "kind": "Method",
    "detail": "Function (num_network_route_changes_ = changes ; } void)",
    "insertText": "OnRtcpPacketReceived(rtc::CopyOnWriteBuffer* packet, int64_t packet_time_us)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (rtcp_packets_ .)",
    "insertText": "push_back(std::string(packet->cdata<char>(), packet->size()))"
  },
  {
    "label": "MuteStream()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "MuteStream(uint32_t ssrc, bool mute)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (muted_streams_ .)",
    "insertText": "insert(ssrc)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} else { muted_streams_ .)",
    "insertText": "erase(ssrc)"
  },
  {
    "label": "set_sending()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "set_sending(bool send)"
  },
  {
    "label": "set_playout()",
    "kind": "Method",
    "detail": "Function (sending_ = send ; return true ; } void)",
    "insertText": "set_playout(bool playout)"
  },
  {
    "label": "SetRecvRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (playout_ = playout ; } bool)",
    "insertText": "SetRecvRtpHeaderExtensions(const std::vector<RtpExtension>& extensions)"
  },
  {
    "label": "SetSendExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (recv_extensions_ = extensions ; return true ; } bool)",
    "insertText": "SetSendExtmapAllowMixed(bool extmap_allow_mixed)"
  },
  {
    "label": "SetExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtmapAllowMixed(extmap_allow_mixed)"
  },
  {
    "label": "SetSendRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "SetSendRtpHeaderExtensions(const std::vector<RtpExtension>& extensions)"
  },
  {
    "label": "set_send_rtcp_parameters()",
    "kind": "Method",
    "detail": "Function (send_extensions_ = extensions ; return true ; } void)",
    "insertText": "set_send_rtcp_parameters(const RtcpParameters& params)"
  },
  {
    "label": "set_recv_rtcp_parameters()",
    "kind": "Method",
    "detail": "Function (send_rtcp_parameters_ = params ; } void)",
    "insertText": "set_recv_rtcp_parameters(const RtcpParameters& params)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (recv_rtcp_parameters_ = params ; } void)",
    "insertText": "OnPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (rtp_packets_ .)",
    "insertText": "push_back(std::string(packet.cdata<char>(), packet.size()))"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPacketSent(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReadyToSend(bool ready)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (ready_to_send_ = ready ; } void)",
    "insertText": "OnNetworkRouteChanged(absl::string_view transport_name, const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "fail_set_send_codecs()",
    "kind": "Method",
    "detail": "Function (last_network_route_ = network_route ; + + num_network_route_changes_ ; transport_overhead_per_packet_ = network_route . packet_overhead ; } bool)",
    "insertText": "fail_set_send_codecs()"
  },
  {
    "label": "FakeVoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (uint32_t ssrc ; int event_code ; int duration ; } ;)",
    "insertText": "FakeVoiceMediaChannel(FakeVoiceEngine* engine, const AudioOptions& options, webrtc::TaskQueueBase* network_thread)"
  },
  {
    "label": "FakeVoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeVoiceMediaChannel()"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "recv_codecs()"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "send_codecs()"
  },
  {
    "label": "codecs()",
    "kind": "Method",
    "detail": "Function (const std::vector<AudioCodec>&)",
    "insertText": "codecs()"
  },
  {
    "label": "dtmf_info_queue()",
    "kind": "Method",
    "detail": "Function (const std::vector<DtmfInfo>&)",
    "insertText": "dtmf_info_queue()"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (const AudioOptions&)",
    "insertText": "options()"
  },
  {
    "label": "max_bps()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "max_bps()"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendParameters(const AudioSendParameters& params)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvParameters(const AudioRecvParameters& params)"
  },
  {
    "label": "SetPlayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayout(bool playout)"
  },
  {
    "label": "SetSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSend(bool send)"
  },
  {
    "label": "SetAudioSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAudioSend(uint32_t ssrc, bool enable, const AudioOptions* options, AudioSource* source)"
  },
  {
    "label": "HasSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSource(uint32_t ssrc)"
  },
  {
    "label": "RemoveRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRecvStream(uint32_t ssrc)"
  },
  {
    "label": "CanInsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertDtmf()"
  },
  {
    "label": "InsertDtmf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InsertDtmf(uint32_t ssrc, int event_code, int duration)"
  },
  {
    "label": "SetOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOutputVolume(uint32_t ssrc, double volume)"
  },
  {
    "label": "SetDefaultOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDefaultOutputVolume(double volume)"
  },
  {
    "label": "GetOutputVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputVolume(uint32_t ssrc, double* volume)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(uint32_t ssrc, int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetBaseMinimumPlayoutDelayMs(uint32_t ssrc)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(VoiceMediaInfo* info, bool get_and_clear_legacy_stats)"
  },
  {
    "label": "SetRawAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawAudioSink(uint32_t ssrc, std::unique_ptr<webrtc::AudioSinkInterface> sink)"
  },
  {
    "label": "SetDefaultRawAudioSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultRawAudioSink(std::unique_ptr<webrtc::AudioSinkInterface> sink)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources(uint32_t ssrc)"
  },
  {
    "label": "VoiceChannelAudioSink()",
    "kind": "Method",
    "detail": "Function (private : class VoiceChannelAudioSink : public AudioSource::Sink { public :)",
    "insertText": "VoiceChannelAudioSink(AudioSource* source)"
  },
  {
    "label": "VoiceChannelAudioSink()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VoiceChannelAudioSink()"
  },
  {
    "label": "OnData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnData(const void* audio_data, int bits_per_sample, int sample_rate, size_t number_of_channels, size_t number_of_frames, absl::optional<int64_t> absolute_capture_timestamp_ms)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClose()"
  },
  {
    "label": "NumPreferredChannels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumPreferredChannels()"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (private : AudioSource* source_ ; } ; bool)",
    "insertText": "SetRecvCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetMaxSendBandwidth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaxSendBandwidth(int bps)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOptions(const AudioOptions& options)"
  },
  {
    "label": "SetLocalSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalSource(uint32_t ssrc, AudioSource* source)"
  },
  {
    "label": "CompareDtmfInfo()",
    "kind": "Method",
    "detail": "Function (FakeVoiceEngine* engine_ ; std::vector<AudioCodec> recv_codecs_ ; std::vector<AudioCodec> send_codecs_ ; std::map<uint32_t,double> output_scalings_ ; std::map<uint32_t,int> output_delays_ ; std::vector<DtmfInfo> dtmf_info_queue_ ; AudioOptions options_ ; std::map<uint32_t,std::unique_ptr<VoiceChannelAudioSink>> local_sinks_ ; std::unique_ptr<webrtc::AudioSinkInterface> sink_ ; int max_bps_ ; } ; bool)",
    "insertText": "CompareDtmfInfo(const FakeVoiceMediaChannel::DtmfInfo& info, uint32_t ssrc, int event_code, int duration)"
  },
  {
    "label": "FakeVideoMediaChannel()",
    "kind": "Method",
    "detail": "Function (class FakeVideoMediaChannel : public RtpHelper<VideoMediaChannel> { public :)",
    "insertText": "FakeVideoMediaChannel(FakeVideoEngine* engine, const VideoOptions& options, webrtc::TaskQueueBase* network_thread)"
  },
  {
    "label": "FakeVideoMediaChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeVideoMediaChannel()"
  },
  {
    "label": "rendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rendering()"
  },
  {
    "label": "sinks()",
    "kind": "Method",
    "detail": "Function (const std::map<uint32_t,rtc::VideoSinkInterface<webrtc::VideoFrame>*>&)",
    "insertText": "sinks()"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendParameters(const VideoSendParameters& params)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvParameters(const VideoRecvParameters& params)"
  },
  {
    "label": "RemoveSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSendStream(uint32_t ssrc)"
  },
  {
    "label": "GetSendCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSendCodec(VideoCodec* send_codec)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSink(uint32_t ssrc, rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "SetDefaultSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "HasSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSink(uint32_t ssrc)"
  },
  {
    "label": "SetVideoSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoSend(uint32_t ssrc, const VideoOptions* options, rtc::VideoSourceInterface<webrtc::VideoFrame>* source)"
  },
  {
    "label": "FillBitrateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBitrateInfo(BandwidthEstimationInfo* bwe_info)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(VideoMediaInfo* info)"
  },
  {
    "label": "SetRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordableEncodedFrameCallback(uint32_t ssrc, std::function<void(const webrtc::RecordableEncodedFrame&)> callback)"
  },
  {
    "label": "ClearRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRecordableEncodedFrameCallback(uint32_t ssrc)"
  },
  {
    "label": "RequestRecvKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRecvKeyFrame(uint32_t ssrc)"
  },
  {
    "label": "GenerateSendKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSendKeyFrame(uint32_t ssrc, const std::vector<std::string>& rids)"
  },
  {
    "label": "SetRecvCodecs()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SetRecvCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SetSendCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SetOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOptions(const VideoOptions& options)"
  },
  {
    "label": "FakeVoiceEngine()",
    "kind": "Method",
    "detail": "Function (FakeVideoEngine* engine_ ; std::vector<VideoCodec> recv_codecs_ ; std::vector<VideoCodec> send_codecs_ ; std::map<uint32_t,rtc::VideoSinkInterface<webrtc::VideoFrame>*> sinks_ ; std::map<uint32_t,rtc::VideoSourceInterface<webrtc::VideoFrame>*> sources_ ; std::map<uint32_t,int> output_delays_ ; VideoOptions options_ ; int max_bps_ ; } ; class FakeVoiceEngine : public VoiceEngineInterface { public :)",
    "insertText": "FakeVoiceEngine()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "GetAudioState()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::AudioState>)",
    "insertText": "GetAudioState()"
  },
  {
    "label": "CreateMediaChannel()",
    "kind": "Method",
    "detail": "Function (VoiceMediaChannel*)",
    "insertText": "CreateMediaChannel(webrtc::Call* call, const MediaConfig& config, const AudioOptions& options, const webrtc::CryptoOptions& crypto_options)"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (FakeVoiceMediaChannel*)",
    "insertText": "GetChannel(size_t index)"
  },
  {
    "label": "UnregisterChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterChannel(VoiceMediaChannel* channel)"
  },
  {
    "label": "SetCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "GetInputLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetInputLevel()"
  },
  {
    "label": "StartAecDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAecDump(webrtc::FileWrapper file, int64_t max_size_bytes)"
  },
  {
    "label": "StopAecDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAecDump()"
  },
  {
    "label": "GetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpHeaderExtensionCapability>)",
    "insertText": "GetRtpHeaderExtensions()"
  },
  {
    "label": "SetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpHeaderExtensions(std::vector<webrtc::RtpHeaderExtensionCapability> header_extensions)"
  },
  {
    "label": "FakeVideoEngine()",
    "kind": "Method",
    "detail": "Function (private : std::vector<FakeVoiceMediaChannel*> channels_ ; std::vector<AudioCodec> recv_codecs_ ; std::vector<AudioCodec> send_codecs_ ; bool fail_create_channel_ ; std::vector<webrtc::RtpHeaderExtensionCapability> header_extensions_ ; class FakeMediaEngine ; } ; class FakeVideoEngine : public VideoEngineInterface { public :)",
    "insertText": "FakeVideoEngine()"
  },
  {
    "label": "CreateMediaChannel()",
    "kind": "Method",
    "detail": "Function (VideoMediaChannel*)",
    "insertText": "CreateMediaChannel(webrtc::Call* call, const MediaConfig& config, const VideoOptions& options, const webrtc::CryptoOptions& crypto_options, webrtc::VideoBitrateAllocatorFactory* video_bitrate_allocator_factory)"
  },
  {
    "label": "UnregisterChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterChannel(VideoMediaChannel* channel)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (} std::vector<VideoCodec>)",
    "insertText": "send_codecs(bool include_rtx)"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodec>)",
    "insertText": "recv_codecs(bool include_rtx)"
  },
  {
    "label": "SetCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCapture(bool capture)"
  },
  {
    "label": "FakeMediaEngine()",
    "kind": "Method",
    "detail": "Function (private : std::vector<FakeVideoMediaChannel*> channels_ ; std::vector<VideoCodec> send_codecs_ ; std::vector<VideoCodec> recv_codecs_ ; bool capture_ ; VideoOptions options_ ; bool fail_create_channel_ ; std::vector<webrtc::RtpHeaderExtensionCapability> header_extensions_ ; class FakeMediaEngine ; } ; class FakeMediaEngine : public CompositeMediaEngine { public :)",
    "insertText": "FakeMediaEngine()"
  },
  {
    "label": "SetAudioCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetAudioRecvCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioRecvCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetAudioSendCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioSendCodecs(const std::vector<AudioCodec>& codecs)"
  },
  {
    "label": "SetVideoCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "GetVoiceChannel()",
    "kind": "Method",
    "detail": "Function (FakeVoiceMediaChannel*)",
    "insertText": "GetVoiceChannel(size_t index)"
  },
  {
    "label": "GetVideoChannel()",
    "kind": "Method",
    "detail": "Function (FakeVideoMediaChannel*)",
    "insertText": "GetVideoChannel(size_t index)"
  },
  {
    "label": "set_fail_create_channel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_fail_create_channel(bool fail)"
  }
]