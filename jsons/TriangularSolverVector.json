[
  {
    "label": "triangular_solve_vector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_vector"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULAR_SOLVER_VECTOR_H # define EIGEN_TRIANGULAR_SOLVER_VECTOR_H namespace Eigen { namespace internal { template<LhsScalar,RhsScalar,Index,int Mode,bool Conjugate,int StorageOrder> struct triangular_solve_vector<LhsScalar,RhsScalar,Index,OnTheRight,Mode,Conjugate,StorageOrder> { void)",
    "insertText": "run(Index size, const LhsScalar* _lhs, Index lhsStride, RhsScalar* rhs)"
  },
  {
    "label": "OnTheLeft()",
    "kind": "Method",
    "detail": "Function (triangular_solve_vector<LhsScalar,RhsScalar,Index,)",
    "insertText": "OnTheLeft((Mode&Upper)==Upper ? Lower : Upper) | (Mode&UnitDiag), Conjugate,StorageOrder==RowMajor?ColMajor:RowMajor >::run(size, _lhs, lhsStride, rhs)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar,Index,int Mode,bool Conjugate> struct triangular_solve_vector<LhsScalar,RhsScalar,Index,OnTheLeft,Mode,Conjugate,RowMajor> { enum {)",
    "insertText": "IsLower((Mode&Lower)==Lower)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (typedef Map<const Matrix<LhsScalar,Dynamic,Dynamic,RowMajor>,0,OuterStride<>> LhsMap ; const LhsMap)",
    "insertText": "lhs(_lhs,size,size,OuterStride<>(lhsStride))"
  },
  {
    "label": "cjLhs()",
    "kind": "Method",
    "detail": "Function (typedef const_blas_data_mapper<LhsScalar,Index,RowMajor> LhsMapper ; typedef const_blas_data_mapper<RhsScalar,Index,ColMajor> RhsMapper ; internal::conditional<Conjugate,const CwiseUnaryOp<internal::scalar_conjugate_op<LhsScalar>,LhsMap>,const LhsMap&>::type)",
    "insertText": "cjLhs(lhs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index PanelWidth = EIGEN_TUNE_TRIANGULAR_PANEL_WIDTH ;)",
    "insertText": "for(Index pi=IsLower ? 0 : size; IsLower ? pi<size : pi>0; IsLower ? pi+=PanelWidth : pi-=PanelWidth)"
  },
  {
    "label": "actualPanelWidth()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "actualPanelWidth(std::min)(IsLower ? size - pi : pi, PanelWidth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index r = IsLower ? pi : size - pi ;)",
    "insertText": "if(r > 0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (Index startRow = IsLower ? pi : pi - actualPanelWidth ; Index startCol = IsLower ? 0 : pi ; general_matrix_vector_product<Index,LhsScalar,LhsMapper,RowMajor,Conjugate,RhsScalar,RhsMapper,false)",
    "insertText": "run(actualPanelWidth, r, LhsMapper(&lhs.coeffRef(startRow,startCol), lhsStride), RhsMapper(rhs + startCol, 1), rhs + startRow, 1, RhsScalar(-1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index k=0; k<actualPanelWidth; ++k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index i = IsLower ? pi + k : pi - k - 1 ; Index s = IsLower ? pi : i + 1 ;)",
    "insertText": "if(k>0) rhs[i] -= (cjLhs.row(i).segment(s,k).transpose().cwiseProduct(Map<const Matrix<RhsScalar,Dynamic,1> >(rhs+s,k))).sum()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index i = IsLower ? pi + k : pi - k - 1 ;)",
    "insertText": "if(numext::not_equal_strict(rhs[i],RhsScalar(0)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index r = actualPanelWidth - k - 1 ; Index s = IsLower ? i + 1 : i - r ;)",
    "insertText": "if(r>0) Map<Matrix<RhsScalar,Dynamic,1> >(rhs+s,r) -= rhs[i] * cjLhs.col(i).segment(s,r)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,Conjugate,RhsScalar,RhsMapper,false)",
    "insertText": "run(r, actualPanelWidth, LhsMapper(&lhs.coeffRef(endBlock,startBlock), lhsStride), RhsMapper(rhs+startBlock, 1), rhs+endBlock, 1, RhsScalar(-1))"
  }
]