[
  {
    "label": "NetworkMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkMessage"
  },
  {
    "label": "NetworkMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaNetworkBackend . h \" # include \" UbaNetworkClient . h \" namespace uba { struct NetworkMessage {)",
    "insertText": "NetworkMessage(NetworkClient& client, u8 serviceId, u8 messageType, BinaryWriter& sendWriter)"
  },
  {
    "label": "NetworkMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkMessage()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(NetworkClient& client, u8 serviceId, u8 messageType, BinaryWriter& sendWriter)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(BinaryReader& response)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(BinaryReader& response, Timer& outTimer)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using DoneFunc =)",
    "insertText": "void(bool error, void* userData)"
  },
  {
    "label": "SendAsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendAsync(BinaryReader& response, DoneFunc* func, void* userData)"
  },
  {
    "label": "ProcessAsyncResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAsyncResults(BinaryReader& response)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetError()"
  },
  {
    "label": "NetworkMessage()",
    "kind": "Method",
    "detail": "Function (NetworkClient* m_client = nullptr ; BinaryWriter* m_sendWriter = nullptr ; DoneFunc* m_doneFunc = nullptr ; void* m_doneUserData = nullptr ; void* m_response = nullptr ; NetworkBackend::SendContext m_sendContext ; u32 m_responseSize = 0 ; u32 m_responseCapacity = 0 ; u16 m_id = 0 ; Atomic<u32> m_error ; NetworkClient::Connection* m_connection = nullptr ; NetworkClient ;)",
    "insertText": "NetworkMessage(const NetworkMessage&)"
  },
  {
    "label": "NetworkMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkMessage(NetworkMessage&&)"
  }
]