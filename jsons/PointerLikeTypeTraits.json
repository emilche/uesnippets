[
  {
    "label": "PointerLikeTypeTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerLikeTypeTraits"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_POINTERLIKETYPETRAITS_H # define LLVM_SUPPORT_POINTERLIKETYPETRAITS_H # include \" llvm / Support / DataTypes . h \" namespace llvm { template<T> class PointerLikeTypeTraits { } ; template<T> class PointerLikeTypeTraits<T*> { public : void*)",
    "insertText": "getAsVoidPointer(T* P)"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = 2 } ; } ; template<T> class PointerLikeTypeTraits<const T*> { typedef PointerLikeTypeTraits<T*> NonConst ; public : const void*)",
    "insertText": "getAsVoidPointer(const T* P)"
  },
  {
    "label": "getFromVoidPointer()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "getFromVoidPointer(const void *P)"
  },
  {
    "label": "getAsVoidPointer()",
    "kind": "Method",
    "detail": "Function (} enum { NumLowBitsAvailable = NonConst::NumLowBitsAvailable } ; } ; template<> class PointerLikeTypeTraits<uintptr_t> { public : void*)",
    "insertText": "getAsVoidPointer(uintptr_t P)"
  },
  {
    "label": "getFromVoidPointer()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "getFromVoidPointer(void *P)"
  }
]