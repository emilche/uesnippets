[
  {
    "label": "TSerializablePtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSerializablePtr"
  },
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "TSerializablePtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Chaos { template<T> class TSerializablePtr { public :)",
    "insertText": "TSerializablePtr() : Ptr(nullptr)"
  },
  {
    "label": "TSerializablePtr()",
    "kind": "Method",
    "detail": "Function (} template<R>)",
    "insertText": "TSerializablePtr(const TUniquePtr<R>& Unique) : Ptr(Unique.Get())"
  },
  {
    "label": "TSerializablePtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSerializablePtr(TUniquePtr<T>&& Unique)"
  },
  {
    "label": "TSerializablePtr()",
    "kind": "Method",
    "detail": "Function (template<ESPMode TESPMode>)",
    "insertText": "TSerializablePtr(const TSharedPtr<T, TESPMode>& Shared) : Ptr(Shared.Get())"
  },
  {
    "label": "TSerializablePtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSerializablePtr(const TRefCountPtr<T>& RefCount) : Ptr(RefCount.GetReference())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "operator()"
  },
  {
    "label": "SetFromRawLowLevel()",
    "kind": "Method",
    "detail": "Function (const R* RCast = Ptr ; TSerializablePtr<R> Ret ; Ret .)",
    "insertText": "SetFromRawLowLevel(RCast)"
  },
  {
    "label": "TSerializablePtr()",
    "kind": "Method",
    "detail": "Function (Ptr = InPtr ; } private :)",
    "insertText": "TSerializablePtr(T* InPtr) : Ptr(InPtr)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} const T* Ptr ; } ; template<T> uint32)",
    "insertText": "GetTypeHash(const TSerializablePtr<T>& Ptr)"
  },
  {
    "label": "MakeSerializable()",
    "kind": "Method",
    "detail": "Function (} template<T> TSerializablePtr<T>)",
    "insertText": "MakeSerializable(const TUniquePtr<T>& Unique)"
  },
  {
    "label": "MakeSerializable()",
    "kind": "Method",
    "detail": "Function (} template<T> TSerializablePtr<T>)",
    "insertText": "MakeSerializable(const TSerializablePtr<T>& P)"
  },
  {
    "label": "MakeSerializable()",
    "kind": "Method",
    "detail": "Function (template<Ret,T> TSerializablePtr<T>)",
    "insertText": "MakeSerializable(const TUniquePtr<T>&& Unique)"
  },
  {
    "label": "MakeSerializable()",
    "kind": "Method",
    "detail": "Function (template<T,ESPMode TESPMode> TSerializablePtr<T>)",
    "insertText": "MakeSerializable(const TSharedPtr<T, TESPMode>& Shared)"
  },
  {
    "label": "MakeSerializable()",
    "kind": "Method",
    "detail": "Function (} template<T> TSerializablePtr<T>)",
    "insertText": "MakeSerializable(const TRefCountPtr<T>& RefCount)"
  },
  {
    "label": "AsAlwaysSerializable()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<T::AlwaysSerializable,TSerializablePtr<T>>::Type&)",
    "insertText": "AsAlwaysSerializable(T*& Ptr)"
  },
  {
    "label": "AsAlwaysSerializableArray()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<T::AlwaysSerializable,TArray<TSerializablePtr<T>>>::Type&)",
    "insertText": "AsAlwaysSerializableArray(TArray<T*>& Ptrs)"
  }
]