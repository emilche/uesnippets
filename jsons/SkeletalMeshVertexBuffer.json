[
  {
    "label": "FSoftSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftSkinVertex"
  },
  {
    "label": "TGPUSkinVertexBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGPUSkinVertexBase"
  },
  {
    "label": "TGPUSkinVertexFloat16Uvs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGPUSkinVertexFloat16Uvs"
  },
  {
    "label": "TGPUSkinVertexFloat32Uvs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGPUSkinVertexFloat32Uvs"
  },
  {
    "label": "FSkeletalMeshVertexDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshVertexDataInterface"
  },
  {
    "label": "TSkeletalMeshVertexData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSkeletalMeshVertexData"
  },
  {
    "label": "FDummySkeletalMeshVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDummySkeletalMeshVertexBuffer"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PackedNormal . h \" # include \" Components . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" Rendering / StaticMeshVertexBuffer . h \" # include \" RenderMath . h \" struct FSoftSkinVertex ; struct TGPUSkinVertexBase { FPackedNormal TangentX ; FPackedNormal TangentZ ; FVector3f)",
    "insertText": "GetTangentY()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<uint32 InNumTexCoords> struct TGPUSkinVertexFloat16Uvs : public TGPUSkinVertexBase { uint32 NumTexCoords = InNumTexCoords ; EStaticMeshVertexUVType StaticMeshVertexUVType = EStaticMeshVertexUVType::Default ; FVector3f Position ; FVector2DHalf UVs [ NumTexCoords ] ; FArchive&)",
    "insertText": "operator(FArchive& Ar, TGPUSkinVertexFloat16Uvs& V)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (V .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<V . Position ;)",
    "insertText": "for(uint32 UVIndex = 0; UVIndex < NumTexCoords; UVIndex++)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<V . UVs [ UVIndex ] ; } return Ar ; } } ; template<uint32 InNumTexCoords> struct TGPUSkinVertexFloat32Uvs : public TGPUSkinVertexBase { uint32 NumTexCoords = InNumTexCoords ; EStaticMeshVertexUVType StaticMeshVertexUVType = EStaticMeshVertexUVType::HighPrecision ; FVector3f Position ; FVector2f UVs [ NumTexCoords ] ; FArchive&)",
    "insertText": "operator(FArchive& Ar, TGPUSkinVertexFloat32Uvs& V)"
  },
  {
    "label": "FSkeletalMeshVertexDataInterface()",
    "kind": "Method",
    "detail": "Function (Ar<<V . UVs [ UVIndex ] ; } return Ar ; } } ; class FSkeletalMeshVertexDataInterface { public : ~)",
    "insertText": "FSkeletalMeshVertexDataInterface()"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeBuffer(uint32 NumVertices)"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStride()"
  },
  {
    "label": "GetDataPointer()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetDataPointer()"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetResourceArray()",
    "kind": "Method",
    "detail": "Function (FResourceArrayInterface*)",
    "insertText": "GetResourceArray()"
  },
  {
    "label": "TSkeletalMeshVertexData()",
    "kind": "Method",
    "detail": "Function (} ; template<VertexDataType> class TSkeletalMeshVertexData : public FSkeletalMeshVertexDataInterface,public TResourceArray<VertexDataType,VERTEXBUFFER_ALIGNMENT> { public : typedef TResourceArray<VertexDataType,VERTEXBUFFER_ALIGNMENT> ArrayType ;)",
    "insertText": "TSkeletalMeshVertexData(bool InNeedsCPUAccess = false) : TResourceArray<VertexDataType, VERTEXBUFFER_ALIGNMENT>(InNeedsCPUAccess)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(NumVertices)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUninitialized(NumVertices - ArrayType::Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((uint32)ArrayType::Num() > NumVertices)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(NumVertices, ArrayType::Num() - NumVertices)"
  },
  {
    "label": "BulkSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BulkSerialize(Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSkeletalMeshVertexData<VertexDataType>&)",
    "insertText": "operator(const TArray<VertexDataType>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(TArray<VertexDataType, TAlignedHeapAllocator<VERTEXBUFFER_ALIGNMENT> >(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FDummySkeletalMeshVertexBuffer& VertexBuffer)"
  },
  {
    "label": "AllocateData()",
    "kind": "Method",
    "detail": "Function (protected : FShaderResourceViewRHIRef SRVValue ; private : bool bUseFullPrecisionUVs = false ; bool bNeedsCPUAccess = false ; FSkeletalMeshVertexDataInterface* VertexData = nullptr ; uint8* Data = nullptr ; uint32 Stride = 0 ; uint32 NumVertices = 0 ; uint32 NumTexCoords = 0 ; void)",
    "insertText": "AllocateData()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  }
]