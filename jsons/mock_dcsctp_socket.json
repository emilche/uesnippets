[
  {
    "label": "MockDcSctpSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockDcSctpSocket"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PUBLIC_MOCK_DCSCTP_SOCKET_H_ # define NET_DCSCTP_PUBLIC_MOCK_DCSCTP_SOCKET_H_ # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" test / gmock . h \" namespace dcsctp { class MockDcSctpSocket : public DcSctpSocketInterface { public :)",
    "insertText": "MOCK_METHOD(void, ReceivePacket, (rtc::ArrayView<const uint8_t> data), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, HandleTimeout, (TimeoutID timeout_id), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Connect, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, RestoreFromState, (const DcSctpSocketHandoverState&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Shutdown, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Close, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(SocketState, state, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(const DcSctpOptions&, options, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetMaxMessageSize, (size_t max_message_size), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetStreamPriority, (StreamID stream_id, StreamPriority priority), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(StreamPriority, GetStreamPriority, (StreamID stream_id), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(SendStatus, Send, (DcSctpMessage message, const SendOptions& send_options), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(ResetStreamsStatus, ResetStreams, (rtc::ArrayView<const StreamID> outgoing_streams), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(size_t, buffered_amount, (StreamID stream_id), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(size_t, buffered_amount_low_threshold, (StreamID stream_id), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetBufferedAmountLowThreshold, (StreamID stream_id, size_t bytes), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<Metrics>, GetMetrics, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(HandoverReadinessStatus, GetHandoverReadiness, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<DcSctpSocketHandoverState>, GetHandoverStateAndClose, (), (override))"
  }
]