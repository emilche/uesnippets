[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedProcessInformation()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_PROCESS_INFORMATION_H_ # define BASE_WIN_SCOPED_PROCESS_INFORMATION_H_ # include<windows . h> # include \" base / base_export . h \" # include \" base / win / scoped_handle . h \" namespace base { namespace win { class BASE_EXPORT ScopedProcessInformation { public :)",
    "insertText": "ScopedProcessInformation()"
  },
  {
    "label": "ScopedProcessInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedProcessInformation(const PROCESS_INFORMATION& process_info)"
  },
  {
    "label": "ScopedProcessInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedProcessInformation(const ScopedProcessInformation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedProcessInformation&)",
    "insertText": "operator(const ScopedProcessInformation&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const PROCESS_INFORMATION& process_info)"
  },
  {
    "label": "DuplicateFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateFrom(const ScopedProcessInformation& other)"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (PROCESS_INFORMATION)",
    "insertText": "Take()"
  },
  {
    "label": "TakeProcessHandle()",
    "kind": "Method",
    "detail": "Function (HANDLE)",
    "insertText": "TakeProcessHandle()"
  },
  {
    "label": "TakeThreadHandle()",
    "kind": "Method",
    "detail": "Function (HANDLE)",
    "insertText": "TakeThreadHandle()"
  },
  {
    "label": "process_handle()",
    "kind": "Method",
    "detail": "Function (HANDLE)",
    "insertText": "process_handle()"
  },
  {
    "label": "thread_handle()",
    "kind": "Method",
    "detail": "Function (} HANDLE)",
    "insertText": "thread_handle()"
  },
  {
    "label": "process_id()",
    "kind": "Method",
    "detail": "Function (} DWORD)",
    "insertText": "process_id()"
  }
]