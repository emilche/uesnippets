[
  {
    "label": "SPackageDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPackageDesc"
  },
  {
    "label": "SPackageRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SPackageRef"
  },
  {
    "label": "SProjectDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SProjectDesc"
  },
  {
    "label": "SWorkspacePackageRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SWorkspacePackageRef"
  },
  {
    "label": "SWorkspaceDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SWorkspaceDesc"
  },
  {
    "label": "CSourceProjectWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSourceProjectWriter"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / SourceProject / SourceProject . h \" # include \" uLang / SourceProject / IFileSystem . h \" # include \" uLang / Common / Containers / Function . h \" # include \" uLang / Diagnostics / Glitch . h \" # include \" uLang / JSON / JSON . h \" namespace uLang { struct SPackageDesc { CUTF8String _Name ; CUTF8String _DirPath ; TOptional<TArray<CUTF8String>> _FilePaths ; CSourcePackage::SSettings _Settings ; } ; struct SPackageRef { TOptional<CUTF8String> _FilePath ; TOptional<SPackageDesc> _Desc ; bool _ReadOnly = false ; bool _Build = true ; } ; struct SProjectDesc { TArray<SPackageRef> _Packages ; } ; struct SWorkspacePackageRef { CUTF8String _Name ; CUTF8String _DirPath ; } ; struct SWorkspaceDesc { TArray<SWorkspacePackageRef> _Folders ; CUTF8String _WorkspaceFilePath ;)",
    "insertText": "bool(*_AddSettingsFunc)(uLang::JSONDocument*, const CUTF8StringView& WorkspaceFilePath)"
  },
  {
    "label": "CSourceProjectWriter()",
    "kind": "Method",
    "detail": "Function (} ; class CSourceProjectWriter { public :)",
    "insertText": "CSourceProjectWriter(const TSRef<IFileSystem>& FileSystem, const TSRef<CDiagnostics>& Diagnostics) : _FileSystem(FileSystem) , _Diagnostics(Diagnostics)"
  },
  {
    "label": "WriteProject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WriteProject(const CSourceProject& Project, const CUTF8String& DestinationDir, CUTF8String* ResultProjectFilePath = nullptr)"
  },
  {
    "label": "WriteProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteProjectFile(const SProjectDesc& ProjectDesc, const CUTF8String& ProjectFilePath)"
  },
  {
    "label": "WriteVSCodeWorkspaceFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteVSCodeWorkspaceFile(const SWorkspaceDesc& WorkspaceDesc, const CUTF8String& WorkspaceFilePath)"
  },
  {
    "label": "GetProjectDesc()",
    "kind": "Method",
    "detail": "Function (SProjectDesc)",
    "insertText": "GetProjectDesc(const CSourceProject& Project)"
  },
  {
    "label": "GetWorkspaceDesc()",
    "kind": "Method",
    "detail": "Function (SWorkspaceDesc)",
    "insertText": "GetWorkspaceDesc(const CSourceProject& Project, const CUTF8String& ProjectFilePath)"
  },
  {
    "label": "WritePackage()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "WritePackage(const CSourcePackage& Package, const CUTF8String& DestinationDir, SPackageDesc* OutPackageDesc = nullptr)"
  },
  {
    "label": "WriteSnippet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteSnippet(const CSourceModule& Module, const TSRef<ISourceSnippet>& Snippet, const CUTF8String& ContainingDir)"
  },
  {
    "label": "WriteJSONFile()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "WriteJSONFile(const T& Object, bool (*ToJSON)(const T& Value, JSONDocument* JSON), EDiagnostic SerializationError, const CUTF8String& DestinationPath)"
  }
]