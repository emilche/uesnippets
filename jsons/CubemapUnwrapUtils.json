[
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "UTextureRenderTargetCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTargetCube"
  },
  {
    "label": "FCubemapTexturePropertiesVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubemapTexturePropertiesVS"
  },
  {
    "label": "FCubemapTexturePropertiesPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubemapTexturePropertiesPS"
  },
  {
    "label": "FHDROutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHDROutput"
  },
  {
    "label": "FCubeArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubeArray"
  },
  {
    "label": "FMipLevelBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMipLevelBatchedElementParameters"
  },
  {
    "label": "FIESLightProfilePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIESLightProfilePS"
  },
  {
    "label": "FIESLightProfileBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIESLightProfileBatchedElementParameters"
  },
  {
    "label": "GenerateLongLatUnwrap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" BatchedElements . h \" # include \" GlobalShader . h \" class UTextureCube ; class UTextureRenderTargetCube ; namespace CubemapHelpers { bool)",
    "insertText": "GenerateLongLatUnwrap(const UTextureCube* CubeTexture, TArray64<uint8>& BitsOUT, FIntPoint& SizeOUT, EPixelFormat& FormatOUT)"
  },
  {
    "label": "GenerateLongLatUnwrap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateLongLatUnwrap(const UTextureRenderTargetCube* CubeTarget, TArray64<uint8>& BitsOUT, FIntPoint& SizeOUT, EPixelFormat& FormatOUT)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} class FCubemapTexturePropertiesVS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FCubemapTexturePropertiesVS,Global)"
  },
  {
    "label": "FCubemapTexturePropertiesVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCubemapTexturePropertiesVS()"
  },
  {
    "label": "FCubemapTexturePropertiesVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCubemapTexturePropertiesVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FMatrix& TransformValue)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Transform)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FCubemapTexturePropertiesPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FCubemapTexturePropertiesPS,Global)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FHDROutput :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"HDR_OUTPUT\")"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FCubeArray :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"TEXTURECUBE_ARRAY\")"
  },
  {
    "label": "FCubemapTexturePropertiesPS()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FHDROutput,FCubeArray> ; public :)",
    "insertText": "FCubemapTexturePropertiesPS()"
  },
  {
    "label": "FCubemapTexturePropertiesPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCubemapTexturePropertiesPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* InTexture, const FMatrix& InColorWeightsValue, float InMipLevel, float InSliceIndex, bool bInIsTextureCubeArray, const FMatrix44f& InViewMatrix, bool bInShowLongLatUnwrap, float InGammaValue, bool bInUsePointSampling)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, CubeTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, CubeTextureSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PackedProperties0)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ColorWeights)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Gamma)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, NumSlices)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, SliceIndex)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ViewMatrix)"
  },
  {
    "label": "FMipLevelBatchedElementParameters()",
    "kind": "Method",
    "detail": "Function (} ; class FMipLevelBatchedElementParameters : public FBatchedElementParameters { public :)",
    "insertText": "FMipLevelBatchedElementParameters(float InMipLevel, float InSliceIndex, bool bInIsTextureCubeArray, const FMatrix44f& InViewMatrix, bool bInShowLongLatUnwrap, bool bInHDROutput, bool bInUsePointSampling) : bHDROutput(bInHDROutput) , MipLevel(InMipLevel) , SliceIndex(InSliceIndex) , ViewMatrix(InViewMatrix) , bShowLongLatUnwrap(bInShowLongLatUnwrap) , bIsTextureCubeArray(bInIsTextureCubeArray) , bUsePointSampling(bInUsePointSampling)"
  },
  {
    "label": "BindShaders()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindShaders(FRHICommandList& RHICmdList, FGraphicsPipelineStateInitializer& GraphicsPSOInit, ERHIFeatureLevel::Type InFeatureLevel, const FMatrix& InTransform, const float InGamma, const FMatrix& ColorWeights, const FTexture* Texture)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (private : bool bHDROutput ; float MipLevel ; float SliceIndex ; FMatrix44f ViewMatrix ; bool bShowLongLatUnwrap ; bool bIsTextureCubeArray ; bool bUsePointSampling ; } ; class FIESLightProfilePS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FIESLightProfilePS,Global)"
  },
  {
    "label": "FIESLightProfilePS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FIESLightProfilePS()"
  },
  {
    "label": "FIESLightProfilePS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIESLightProfilePS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_IES_PROFILE\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_IES_STANDALONE_TEXTURE\"), 1)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, float InBrightnessInLumens)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, IESTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, IESTextureSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, BrightnessInLumens)"
  },
  {
    "label": "FIESLightProfileBatchedElementParameters()",
    "kind": "Method",
    "detail": "Function (} ; class FIESLightProfileBatchedElementParameters : public FBatchedElementParameters { public :)",
    "insertText": "FIESLightProfileBatchedElementParameters(float InBrightnessInLumens) : BrightnessInLumens(InBrightnessInLumens)"
  }
]