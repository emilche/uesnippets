[
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "UTextureRenderTargetCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTargetCube"
  },
  {
    "label": "FCubemapTexturePropertiesVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubemapTexturePropertiesVS"
  },
  {
    "label": "FCubemapTexturePropertiesPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubemapTexturePropertiesPS"
  },
  {
    "label": "FHDROutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHDROutput"
  },
  {
    "label": "FCubeArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubeArray"
  },
  {
    "label": "FMipLevelBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMipLevelBatchedElementParameters"
  },
  {
    "label": "FIESLightProfilePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIESLightProfilePS"
  },
  {
    "label": "FIESLightProfileBatchedElementParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIESLightProfileBatchedElementParameters"
  },
  {
    "label": "GenerateLongLatUnwrap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateLongLatUnwrap(const UTextureCube* CubeTexture, TArray64<uint8>& BitsOUT, FIntPoint& SizeOUT, EPixelFormat& FormatOUT)"
  },
  {
    "label": "GenerateLongLatUnwrap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateLongLatUnwrap(const UTextureRenderTargetCube* CubeTarget, TArray64<uint8>& BitsOUT, FIntPoint& SizeOUT, EPixelFormat& FormatOUT)"
  },
  {
    "label": "FCubemapTexturePropertiesVS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FCubemapTexturePropertiesVS()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FMatrix& TransformValue)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, Transform)"
  },
  {
    "label": "FCubemapTexturePropertiesPS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FCubemapTexturePropertiesPS()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* InTexture, const FMatrix& InColorWeightsValue, float InMipLevel, float InSliceIndex, bool bInIsTextureCubeArray, const FMatrix44f& InViewMatrix, bool bInShowLongLatUnwrap, float InGammaValue, bool bInUsePointSampling)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, CubeTexture)"
  },
  {
    "label": "FIESLightProfilePS()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FIESLightProfilePS()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, float InBrightnessInLumens)"
  }
]