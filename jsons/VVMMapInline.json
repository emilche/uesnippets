[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FAllocationContext Context, VValue Key, VValue Value)"
  },
  {
    "label": "ExternalMutex()",
    "kind": "Method",
    "detail": "Function (UE::FExternalMutex)",
    "insertText": "ExternalMutex(Mutex)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(ExternalMutex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash =)",
    "insertText": "GetTypeHash(Key)"
  },
  {
    "label": "AddWithoutLocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWithoutLocking(Context, KeyHash, Key, Value)"
  },
  {
    "label": "AddTransactionally()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTransactionally(FAllocationContext Context, VValue Key, VValue Value)"
  },
  {
    "label": "AddWithoutLocking()",
    "kind": "Method",
    "detail": "Function (bool bTransactional = true ;)",
    "insertText": "AddWithoutLocking(Context, KeyHash, Key, Value, bTransactional)"
  },
  {
    "label": "VMapBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VMapBase(FAllocationContext Context, uint32 InitialCapacity, VEmergentType* Type) : VHeapValue(Context, Type) , NumElements(0) , Capacity(0)"
  },
  {
    "label": "SetIsDeeplyMutable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDeeplyMutable()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Context, InitialCapacity)"
  },
  {
    "label": "VMapBase()",
    "kind": "Method",
    "detail": "Function (} template<GetEntryByIndex>)",
    "insertText": "VMapBase(FAllocationContext Context, uint32 MaxNumEntries, const GetEntryByIndex& GetEntry, VEmergentType* Type) : VHeapValue(Context, Type) , NumElements(0) , Capacity(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(Context, MaxNumEntries * 2)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (TPair<VValue,VValue> Pair =)",
    "insertText": "GetEntry(Index)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 KeyHash =)",
    "insertText": "GetTypeHash(Pair.Key)"
  },
  {
    "label": "AddWithoutLocking()",
    "kind": "Method",
    "detail": "Function (TPair<uint32,bool> Res =)",
    "insertText": "AddWithoutLocking(Context, KeyHash, Pair.Key, Pair.Value)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (uint32 Slot = Res .)",
    "insertText": "Get()"
  },
  {
    "label": "GetSequenceTable()",
    "kind": "Method",
    "detail": "Function (SequenceType* SequenceTable =)",
    "insertText": "GetSequenceTable()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 SeqIdx = 0 ;)",
    "insertText": "while(SeqIdx < NumElements)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memmove(SequenceTable + SeqIdx, SequenceTable + SeqIdx + 1, sizeof(SequenceTable[0]) * (NumElements - SeqIdx - 1))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (SequenceTable [ NumElements - 1 ] = Slot ; break ; } + + SeqIdx ; } } } } template<MapType> void)",
    "insertText": "Serialize(MapType*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (uint64 NumElements = 0 ; Visitor .)",
    "insertText": "BeginArray(TEXT(\"Values\"), NumElements)"
  },
  {
    "label": "MapType()",
    "kind": "Method",
    "detail": "Function (This =& VMapBase::New<)",
    "insertText": "MapType(Context, (uint32)NumElements).template StaticCast<MapType>()"
  },
  {
    "label": "VisitPair()",
    "kind": "Method",
    "detail": "Function (VValue Key,Value ; Visitor .)",
    "insertText": "VisitPair([&Visitor, &Key, &Value] { Visitor.Visit(Key, TEXT(\"Key\")); Visitor.Visit(Value, TEXT(\"Value\")); })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (This ->)",
    "insertText": "Add(Context, Key, Value)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (} Visitor .)",
    "insertText": "EndArray()"
  },
  {
    "label": "NumElements()",
    "kind": "Method",
    "detail": "Function (NumElements)",
    "insertText": "NumElements(uint64)"
  },
  {
    "label": "BeginMap()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "BeginMap(TEXT(\"Values\"), NumElements)"
  },
  {
    "label": "VisitPair()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "VisitPair([&Visitor, &MapIt] { Visitor.Visit(MapIt.Key, TEXT(\"Key\")); Visitor.Visit(MapIt.Value, TEXT(\"Value\")); })"
  },
  {
    "label": "EndMap()",
    "kind": "Method",
    "detail": "Function (} Visitor .)",
    "insertText": "EndMap()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} } template<MapType,GetEntryByIndex> VMapBase&)",
    "insertText": "New(FAllocationContext Context, uint32 MaxNumEntries, const GetEntryByIndex& GetEntry)"
  }
]