[
  {
    "label": "UMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshComponent"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "FFlattenMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlattenMaterial"
  },
  {
    "label": "FRawMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMesh"
  },
  {
    "label": "FRawSkinWeight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawSkinWeight"
  },
  {
    "label": "FStaticMeshLODResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshLODResources"
  },
  {
    "label": "FSkeletalMeshLODModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODModel"
  },
  {
    "label": "FSourceMeshDataForDerivedDataTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourceMeshDataForDerivedDataTask"
  },
  {
    "label": "FReferenceSkeleton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeleton"
  },
  {
    "label": "FBoneVertInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneVertInfo"
  },
  {
    "label": "FMeshFace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshFace"
  },
  {
    "label": "FMeshWedge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshWedge"
  },
  {
    "label": "FVertInfluence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertInfluence"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSignedDistanceFieldBuildSectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSignedDistanceFieldBuildSectionData"
  },
  {
    "label": "FOverlappingCorners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingCorners"
  },
  {
    "label": "IMeshUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMeshUtilities"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FStaticMeshLODGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODGroup"
  },
  {
    "label": "FQueuedThreadPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedThreadPool"
  },
  {
    "label": "FDistanceFieldVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldVolumeData"
  },
  {
    "label": "FCardRepresentationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardRepresentationData"
  },
  {
    "label": "MeshBuildOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MeshBuildOptions"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FSoftSkinVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftSkinVertex"
  },
  {
    "label": "FRuntimeSkinWeightProfileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimeSkinWeightProfileData"
  },
  {
    "label": "GenerateUniqueUVsForStaticMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Modules / ModuleInterface . h \" # include \" Components . h \" # include \" MeshBuild . h \" # include \" IMeshMergeUtilities . h \" class UMeshComponent ; class USkeletalMesh ; class UStaticMesh ; class UStaticMeshComponent ; struct FFlattenMaterial ; struct FRawMesh ; struct FRawSkinWeight ; struct FStaticMeshLODResources ; class FSkeletalMeshLODModel ; class FSourceMeshDataForDerivedDataTask ; typedef FIntPoint FMeshIdAndLOD ; struct FFlattenMaterial ; struct FReferenceSkeleton ; struct FStaticMeshLODResources ; class UMeshComponent ; class UStaticMesh ; struct FBoneVertInfo ; namespace SkeletalMeshImportData { struct FMeshFace ; struct FMeshWedge ; struct FVertInfluence ; } ; namespace ETangentOptions { enum Type { None = 0,BlendOverlappingNormals = 0 x1,IgnoreDegenerateTriangles = 0 x2,UseMikkTSpace = 0 x4,} ; } ; struct FSignedDistanceFieldBuildSectionData { EBlendMode BlendMode = BLEND_Opaque ; bool bTwoSided = false ; bool bAffectDistanceFieldLighting = true ; } ; struct FOverlappingCorners ; class IMeshUtilities : public IModuleInterface { public : bool)",
    "insertText": "GenerateUniqueUVsForStaticMesh(const FRawMesh& RawMesh, int32 TextureResolution, TArray<FVector2f>& OutTexCoords)"
  },
  {
    "label": "GenerateUniqueUVsForStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateUniqueUVsForStaticMesh(const FRawMesh& RawMesh, int32 TextureResolution, bool bMergeIdenticalMaterials, TArray<FVector2f>& OutTexCoords)"
  },
  {
    "label": "GetVersionString()",
    "kind": "Method",
    "detail": "Function (public : const FString&)",
    "insertText": "GetVersionString()"
  },
  {
    "label": "FixupMaterialSlotNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupMaterialSlotNames(UStaticMesh* StaticMesh)"
  },
  {
    "label": "FixupMaterialSlotNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupMaterialSlotNames(USkeletalMesh* SkeletalMesh)"
  },
  {
    "label": "BuildStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildStaticMesh(class FStaticMeshRenderData& OutRenderData, UStaticMesh* StaticMesh, const class FStaticMeshLODGroup& LODGroup)"
  },
  {
    "label": "BuildStaticMeshVertexAndIndexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStaticMeshVertexAndIndexBuffers(TArray<FStaticMeshBuildVertex>& OutVertices, TArray<TArray<uint32> >& OutPerSectionIndices, TArray<int32>& OutWedgeMap, const FRawMesh& RawMesh, const FOverlappingCorners& OverlappingCorners, const TMap<uint32, uint32>& MaterialToSectionMapping, float ComparisonThreshold, FVector3f BuildScale, int32 ImportVersion)"
  },
  {
    "label": "GenerateStaticMeshLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStaticMeshLODs(UStaticMesh* StaticMesh, const class FStaticMeshLODGroup& LODGroup)"
  },
  {
    "label": "GenerateSignedDistanceFieldVolumeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSignedDistanceFieldVolumeData(FString MeshName, const FSourceMeshDataForDerivedDataTask& SourceMeshData, const FStaticMeshLODResources& LODModel, class FQueuedThreadPool& ThreadPool, const TArray<FSignedDistanceFieldBuildSectionData>& SectionData, const FBoxSphereBounds3f& Bounds, float DistanceFieldResolutionScale, bool bGenerateAsIfTwoSided, class FDistanceFieldVolumeData& OutData)"
  },
  {
    "label": "GenerateCardRepresentationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCardRepresentationData(FString MeshName, const FSourceMeshDataForDerivedDataTask& SourceMeshData, const FStaticMeshLODResources& LODModel, class FQueuedThreadPool& ThreadPool, const TArray<FSignedDistanceFieldBuildSectionData>& SectionData, const FBoxSphereBounds& Bounds, const class FDistanceFieldVolumeData* DistanceFieldVolumeData, int32 MaxLumenMeshCards, bool bGenerateAsIfTwoSided, class FCardRepresentationData& OutData)"
  },
  {
    "label": "MeshBuildOptions()",
    "kind": "Method",
    "detail": "Function (struct MeshBuildOptions {)",
    "insertText": "MeshBuildOptions() : BoneInfluenceLimit(0) , bRemoveDegenerateTriangles(false) , bComputeNormals(true) , bComputeTangents(true) , bUseMikkTSpace(false) , bComputeWeightedNormals(false) , TargetPlatform(nullptr)"
  },
  {
    "label": "FillOptions()",
    "kind": "Method",
    "detail": "Function (} int32 BoneInfluenceLimit ; bool bRemoveDegenerateTriangles ; bool bComputeNormals ; bool bComputeTangents ; bool bUseMikkTSpace ; bool bComputeWeightedNormals ; FOverlappingThresholds OverlappingThresholds ; const class ITargetPlatform* TargetPlatform ; void)",
    "insertText": "FillOptions(const FSkeletalMeshBuildSettings& SkeletalMeshBuildSettings)"
  },
  {
    "label": "BuildSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (OverlappingThresholds . ThresholdPosition = SkeletalMeshBuildSettings . ThresholdPosition ; OverlappingThresholds . ThresholdTangentNormal = SkeletalMeshBuildSettings . ThresholdTangentNormal ; OverlappingThresholds . ThresholdUV = SkeletalMeshBuildSettings . ThresholdUV ; OverlappingThresholds . MorphThresholdPosition = SkeletalMeshBuildSettings . MorphThresholdPosition ; BoneInfluenceLimit = SkeletalMeshBuildSettings . BoneInfluenceLimit ; bComputeNormals = SkeletalMeshBuildSettings . bRecomputeNormals ; bComputeTangents = SkeletalMeshBuildSettings . bRecomputeTangents ; bUseMikkTSpace = SkeletalMeshBuildSettings . bUseMikkTSpace ; bComputeWeightedNormals = SkeletalMeshBuildSettings . bComputeWeightedNormals ; bRemoveDegenerateTriangles = SkeletalMeshBuildSettings . bRemoveDegenerates ; } } ; bool)",
    "insertText": "BuildSkeletalMesh(FSkeletalMeshLODModel& LODModel, const FString& SkeletalMeshName, const FReferenceSkeleton& RefSkeleton, const TArray<SkeletalMeshImportData::FVertInfluence>& Influences, const TArray<SkeletalMeshImportData::FMeshWedge>& Wedges, const TArray<SkeletalMeshImportData::FMeshFace>& Faces, const TArray<FVector3f>& Points, const TArray<int32>& PointToOriginalMap, const MeshBuildOptions& BuildOptions = MeshBuildOptions(), TArray<FText> * OutWarningMessages = NULL, TArray<FName> * OutWarningNames = NULL)"
  },
  {
    "label": "CacheOptimizeIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOptimizeIndexBuffer(TArray<uint16>& Indices)"
  },
  {
    "label": "CacheOptimizeIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOptimizeIndexBuffer(TArray<uint32>& Indices)"
  },
  {
    "label": "BuildSkeletalAdjacencyIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSkeletalAdjacencyIndexBuffer(const TArray<struct FSoftSkinVertex>& VertexBuffer, const uint32 TexCoordCount, const TArray<uint32>& Indices, TArray<uint32>& OutPnAenIndices)"
  },
  {
    "label": "CalculateTriangleTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTriangleTangent(const FSoftSkinVertex& VertexA, const FSoftSkinVertex& VertexB, const FSoftSkinVertex& VertexC, TArray<FVector3f>& OutTangents, float CompareThreshold)"
  },
  {
    "label": "CalcBoneVertInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcBoneVertInfos(USkeletalMesh* SkeletalMesh, TArray<FBoneVertInfo>& Infos, bool bOnlyDominant)"
  },
  {
    "label": "ConvertMeshesToStaticMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMesh*)",
    "insertText": "ConvertMeshesToStaticMesh(const TArray<UMeshComponent*>& InMeshComponents, const FTransform& InRootTransform = FTransform::Identity, const FString& InPackageName = FString())"
  },
  {
    "label": "CalculateTextureCoordinateBoundsForSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTextureCoordinateBoundsForSkeletalMesh(const FSkeletalMeshLODModel& LODModel, TArray<FBox2D>& OutBounds)"
  },
  {
    "label": "GenerateUniqueUVsForSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateUniqueUVsForSkeletalMesh(const FSkeletalMeshLODModel& LODModel, int32 TextureResolution, TArray<FVector2f>& OutTexCoords)"
  },
  {
    "label": "RemoveBonesFromMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveBonesFromMesh(USkeletalMesh* SkeletalMesh, int32 LODIndex, const TArray<FName>* BoneNamesToRemove)"
  },
  {
    "label": "CalculateTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTangents(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, const TArray<FVector2f>& InUVs, const TArray<uint32>& InSmoothingGroupIndices, const uint32 InTangentOptions, TArray<FVector3f>& OutTangentX, TArray<FVector3f>& OutTangentY, TArray<FVector3f>& OutNormals)"
  },
  {
    "label": "CalculateMikkTSpaceTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMikkTSpaceTangents(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, const TArray<FVector2f>& InUVs, const TArray<FVector3f>& InNormals, bool bIgnoreDegenerateTriangles, TArray<FVector3f>& OutTangentX, TArray<FVector3f>& OutTangentY)"
  },
  {
    "label": "CalculateNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateNormals(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, const TArray<FVector2f>& InUVs, const TArray<uint32>& InSmoothingGroupIndices, const uint32 InTangentOptions, TArray<FVector3f>& OutNormals)"
  },
  {
    "label": "CalculateOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateOverlappingCorners(const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, bool bIgnoreDegenerateTriangles, FOverlappingCorners& OutOverlappingCorners)"
  },
  {
    "label": "RecomputeTangentsAndNormalsForRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeTangentsAndNormalsForRawMesh(bool bRecomputeTangents, bool bRecomputeNormals, const FMeshBuildSettings& InBuildSettings, FRawMesh &OutRawMesh)"
  },
  {
    "label": "RecomputeTangentsAndNormalsForRawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeTangentsAndNormalsForRawMesh(bool bRecomputeTangents, bool bRecomputeNormals, const FMeshBuildSettings& InBuildSettings, const FOverlappingCorners& InOverlappingCorners, FRawMesh &OutRawMesh)"
  },
  {
    "label": "FindOverlappingCorners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOverlappingCorners(FOverlappingCorners& OutOverlappingCorners, const TArray<FVector3f>& InVertices, const TArray<uint32>& InIndices, float ComparisonThreshold)"
  },
  {
    "label": "GenerateRuntimeSkinWeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRuntimeSkinWeightData(const FSkeletalMeshLODModel* ImportedModel, const TArray<FRawSkinWeight>& InRawSkinWeights, bool bInUseHighPrecisionWeights, struct FRuntimeSkinWeightProfileData& InOutSkinWeightOverrideData)"
  },
  {
    "label": "CreateImportDataFromLODModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateImportDataFromLODModel(USkeletalMesh* InSkeletalMesh, bool bInResetReductionAsNeeded = false)"
  }
]