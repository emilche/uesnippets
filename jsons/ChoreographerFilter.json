[
  {
    "label": "ChoreographerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChoreographerFilter"
  },
  {
    "label": "nanoseconds()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<condition_variable> # include<mutex> # include<optional> # include<vector> # include \" Settings . h \" # include \" Thread . h \" namespace swappy { class ChoreographerFilter { public : using Worker = std::function<std::)",
    "insertText": "nanoseconds(std::optional<std::chrono::nanoseconds>)"
  },
  {
    "label": "ChoreographerFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChoreographerFilter(std::chrono::nanoseconds refreshPeriod, std::chrono::nanoseconds appToSfDelay, Worker doWork)"
  },
  {
    "label": "ChoreographerFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ChoreographerFilter()"
  },
  {
    "label": "onChoreographer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onChoreographer(std::optional<std::chrono::nanoseconds> sfToVsyncDelay)"
  },
  {
    "label": "launchThreadsLocked()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "launchThreadsLocked()"
  },
  {
    "label": "terminateThreadsLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "terminateThreadsLocked()"
  },
  {
    "label": "onSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onSettingsChanged()"
  },
  {
    "label": "threadMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "threadMain(bool useAffinity, int32_t thread)"
  }
]