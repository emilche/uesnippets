[
  {
    "label": "FRecastNavMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRecastNavMeshGenerator"
  },
  {
    "label": "FNavLinkId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkId"
  },
  {
    "label": "FPImplRecastNavMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPImplRecastNavMesh"
  },
  {
    "label": "FPImplRecastNavMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" UObject / WeakObjectPtr . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" AI / Navigation / NavigationTypes . h \" # include \" NavMesh / RecastNavMesh . h \" # include \" NavMesh / RecastQueryFilter . h \" # include \" AI / NavigationSystemBase . h \" # include \" VisualLogger / VisualLogger . h \" # if RECAST_INTERNAL_DEBUG_DATA # include \" NavMesh / RecastInternalDebugData . h \" # endif # if WITH_RECAST # include \" Detour / DetourNavMesh . h \" # include \" Detour / DetourNavMeshQuery . h \" # endif class FRecastNavMeshGenerator ; struct FNavLinkId ; # if WITH_RECAST # define RECAST_VERY_SMALL_AGENT_RADIUS 0 . 0 f class FPImplRecastNavMesh { public :)",
    "insertText": "FPImplRecastNavMesh(ARecastNavMesh* Owner)"
  },
  {
    "label": "FPImplRecastNavMesh()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPImplRecastNavMesh()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, int32 NavMeshVersion)"
  },
  {
    "label": "GetDebugGeometryForTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDebugGeometryForTile(FRecastDebugGeometry& OutGeometry, FNavTileRef TileRef)"
  },
  {
    "label": "GetNavMeshBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavMeshBounds()"
  },
  {
    "label": "GetNavMeshTileXY()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavMeshTileXY(const FVector& Point, int32& OutX, int32& OutY)"
  },
  {
    "label": "GetNavMeshTilesIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavMeshTilesIn(const TArray<FBox>& InclusionBounds, TArray<FNavTileRef>& OutRefs)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (} ENavigationQueryResult::Type)",
    "insertText": "FindPath(const FVector& StartLoc, const FVector& EndLoc, const FVector::FReal CostLimit, const bool bRequireNavigableEndLocation, FNavMeshPath& Path, const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "TestPath()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "TestPath(const FVector& StartLoc, const FVector& EndLoc, const bool bRequireNavigableEndLocation, const FNavigationQueryFilter& Filter, const UObject* Owner, int32* NumVisitedNodes = 0)"
  },
  {
    "label": "FindPathCustomAStar()",
    "kind": "Method",
    "detail": "Function (template<TRecastAStar,TRecastAStartGraph,TRecastGraphAStarFilter,TRecastAStarResult> ENavigationQueryResult::Type)",
    "insertText": "FindPathCustomAStar(TRecastAStartGraph& RecastGraphWrapper, TRecastAStar& AStarAlgo, const FVector& StartLoc, const FVector& EndLoc, const FVector::FReal CostLimit, FNavMeshPath& Path, const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Raycast(const FVector& StartLoc, const FVector& EndLoc, const FNavigationQueryFilter& InQueryFilter, const UObject* Owner, ARecastNavMesh::FRaycastResult& RaycastResult, NavNodeRef StartNode = INVALID_NAVNODEREF)"
  },
  {
    "label": "DebugPathfinding()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DebugPathfinding(const FVector& StartLoc, const FVector& EndLoc, const FVector::FReal CostLimit, const bool bRequireNavigableEndLocation, const FNavigationQueryFilter& Filter, const UObject* Owner, TArray<FRecastDebugPathfindingData>& Steps)"
  },
  {
    "label": "GetRandomPoint()",
    "kind": "Method",
    "detail": "Function (FNavLocation)",
    "insertText": "GetRandomPoint(const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "TestClusterPath()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS ENavigationQueryResult::Type)",
    "insertText": "TestClusterPath(const FVector& StartLoc, const FVector& EndLoc, int32* NumVisitedNodes = 0)"
  },
  {
    "label": "GetRandomPointInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInCluster(NavNodeRef ClusterRef, FNavLocation& OutLocation)"
  },
  {
    "label": "FindMoveAlongSurface()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "FindMoveAlongSurface(const FNavLocation& StartLocation, const FVector& TargetPosition, FNavLocation& OutLocation, const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "ProjectPointToNavMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectPointToNavMesh(const FVector& Point, FNavLocation& Result, const FVector& Extent, const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "ProjectPointMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectPointMulti(const FVector& Point, TArray<FNavLocation>& OutLocations, const FVector& Extent, FVector::FReal MinZ, FVector::FReal MaxZ, const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "FindNearestPoly()",
    "kind": "Method",
    "detail": "Function (NavNodeRef)",
    "insertText": "FindNearestPoly(FVector const& Loc, FVector const& Extent, const FNavigationQueryFilter& Filter, const UObject* Owner)"
  },
  {
    "label": "FindPolysAroundCircle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPolysAroundCircle(const FVector& CenterPos, const NavNodeRef CenterNodeRef, const FVector::FReal Radius, const FNavigationQueryFilter& Filter, const UObject* Owner, TArray<NavNodeRef>* OutPolys = nullptr, TArray<NavNodeRef>* OutPolysParent = nullptr, TArray<float>* OutPolysCost = nullptr, int32* OutPolysCount = nullptr)"
  },
  {
    "label": "GetPolysWithinPathingDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolysWithinPathingDistance(FVector const& StartLoc, const FVector::FReal PathingDistance, const FNavigationQueryFilter& Filter, const UObject* Owner, TArray<NavNodeRef>& FoundPolys, FRecastDebugPathfindingData* DebugData)"
  },
  {
    "label": "GetEdgesForPathCorridor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEdgesForPathCorridor(const TArray<NavNodeRef>* PathCorridor, TArray<FNavigationPortalEdge>* PathCorridorEdges)"
  },
  {
    "label": "FindStraightPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindStraightPath(const FVector& StartLoc, const FVector& EndLoc, const TArray<NavNodeRef>& PathCorridor, TArray<FNavPathPoint>& PathPoints, TArray<FNavLinkId>* CustomLinks = NULL)"
  },
  {
    "label": "FilterPolys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterPolys(TArray<NavNodeRef>& PolyRefs, const FRecastQueryFilter* Filter, const UObject* Owner)"
  },
  {
    "label": "UpdateNavigationLinkArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationLinkArea(FNavLinkId UserId, uint8 AreaType, uint16 PolyFlags)"
  },
  {
    "label": "UpdateSegmentLinkArea()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_SEGMENT_LINKS void)",
    "insertText": "UpdateSegmentLinkArea(int32 UserId, uint8 AreaType, uint16 PolyFlags)"
  },
  {
    "label": "GetPolyCenter()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetPolyCenter(NavNodeRef PolyID, FVector& OutCenter)"
  },
  {
    "label": "GetPolyVerts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyVerts(NavNodeRef PolyID, TArray<FVector>& OutVerts)"
  },
  {
    "label": "GetRandomPointInPoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInPoly(NavNodeRef PolyID, FVector& OutPoint)"
  },
  {
    "label": "GetPolySurfaceArea()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetPolySurfaceArea(NavNodeRef PolyID)"
  },
  {
    "label": "GetPolyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyData(NavNodeRef PolyID, uint16& Flags, uint8& AreaType)"
  },
  {
    "label": "GetPolyAreaID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPolyAreaID(NavNodeRef PolyID)"
  },
  {
    "label": "SetPolyAreaID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolyAreaID(NavNodeRef PolyID, uint8 AreaID)"
  },
  {
    "label": "GetPolyNeighbors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyNeighbors(NavNodeRef PolyID, TArray<FNavigationPortalEdge>& Neighbors)"
  },
  {
    "label": "GetPolyNeighbors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyNeighbors(NavNodeRef PolyID, TArray<NavNodeRef>& Neighbors)"
  },
  {
    "label": "GetPolyEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyEdges(NavNodeRef PolyID, TArray<FNavigationPortalEdge>& Edges)"
  },
  {
    "label": "GetPolyWallSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyWallSegments(NavNodeRef PolyID, const FNavigationQueryFilter& InQueryFilter, const UObject* QueryOwner, TArray<FNavigationPortalEdge>& OutNeighbors)"
  },
  {
    "label": "GetClosestPointOnPoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClosestPointOnPoly(NavNodeRef PolyID, const FVector& TestPt, FVector& PointOnPoly)"
  },
  {
    "label": "GetPolyTileIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyTileIndex(NavNodeRef PolyID, uint32& PolyIndex, uint32& TileIndex)"
  },
  {
    "label": "GetPolyTileRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyTileRef(NavNodeRef PolyId, uint32& OutPolyIndex, FNavTileRef& OutTileRef)"
  },
  {
    "label": "GetNavLinkUserId()",
    "kind": "Method",
    "detail": "Function (} FNavLinkId)",
    "insertText": "GetNavLinkUserId(NavNodeRef LinkPolyID)"
  },
  {
    "label": "GetLinkEndPoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLinkEndPoints(NavNodeRef LinkPolyID, FVector& PointA, FVector& PointB)"
  },
  {
    "label": "IsCustomLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomLink(NavNodeRef PolyRef)"
  },
  {
    "label": "GetClusterBounds()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS bool)",
    "insertText": "GetClusterBounds(NavNodeRef ClusterRef, FBox& OutBounds)"
  },
  {
    "label": "GetClusterRefFromPolyRef()",
    "kind": "Method",
    "detail": "Function (NavNodeRef)",
    "insertText": "GetClusterRefFromPolyRef(const NavNodeRef PolyRef)"
  },
  {
    "label": "GetTileIndexFromPolyRef()",
    "kind": "Method",
    "detail": "Function (# endif uint32)",
    "insertText": "GetTileIndexFromPolyRef(const NavNodeRef PolyRef)"
  },
  {
    "label": "GetFilterForbiddenFlags()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetFilterForbiddenFlags(const FRecastQueryFilter* Filter)"
  },
  {
    "label": "SetFilterForbiddenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterForbiddenFlags(FRecastQueryFilter* Filter, uint16 ForbiddenFlags)"
  },
  {
    "label": "OnAreaCostChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAreaCostChanged()"
  },
  {
    "label": "GetRecastMesh()",
    "kind": "Method",
    "detail": "Function (public : dtNavMesh const*)",
    "insertText": "GetRecastMesh()"
  },
  {
    "label": "RemoveTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "RemoveTileCacheLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTileCacheLayer(int32 TileX, int32 TileY, int32 LayerIdx)"
  },
  {
    "label": "AddTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTileCacheLayers(int32 TileX, int32 TileY, const TArray<FNavMeshTileData>& Layers)"
  },
  {
    "label": "AddTileCacheLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTileCacheLayer(int32 TileX, int32 TileY, int32 LayerIdx, const FNavMeshTileData& LayerData)"
  },
  {
    "label": "MarkEmptyTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkEmptyTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "GetTileCacheLayer()",
    "kind": "Method",
    "detail": "Function (FNavMeshTileData)",
    "insertText": "GetTileCacheLayer(int32 TileX, int32 TileY, int32 LayerIdx)"
  },
  {
    "label": "GetTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (TArray<FNavMeshTileData>)",
    "insertText": "GetTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "HasTileCacheLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTileCacheLayers(int32 TileX, int32 TileY)"
  },
  {
    "label": "SetRecastMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecastMesh(dtNavMesh* NavMesh)"
  },
  {
    "label": "GetTotalDataSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetTotalDataSize()"
  },
  {
    "label": "GetCompressedTileCacheSize()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING int32)",
    "insertText": "GetCompressedTileCacheSize()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "CalcSegmentCostOnPoly()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "CalcSegmentCostOnPoly(NavNodeRef PolyID, const dtQueryFilter* Filter, const FVector& StartLoc, const FVector& EndLoc)"
  },
  {
    "label": "SerializeRecastMeshTile()",
    "kind": "Method",
    "detail": "Function (ARecastNavMesh* NavMeshOwner ; dtNavMesh* DetourNavMesh ; TMap<FIntPoint,TArray<FNavMeshTileData>> CompressedTileCacheLayers ; # if RECAST_INTERNAL_DEBUG_DATA TMap<FIntPoint,FRecastInternalDebugData> DebugDataMap ; # endif dtNavMeshQuery SharedNavQuery ; void)",
    "insertText": "SerializeRecastMeshTile(FArchive& Ar, int32 NavMeshVersion, unsigned char*& TileData, int32& TileDataSize)"
  },
  {
    "label": "SerializeCompressedTileCacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCompressedTileCacheData(FArchive& Ar, int32 NavMeshVersion, unsigned char*& CompressedData, int32& CompressedDataSize)"
  },
  {
    "label": "InitPathfinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitPathfinding(const FVector& UnrealStart, const FVector& UnrealEnd, const dtNavMeshQuery& Query, const dtQueryFilter* Filter, FVector& RecastStart, dtPolyRef& StartPoly, FVector& RecastEnd, dtPolyRef& EndPoly)"
  },
  {
    "label": "PostProcessPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessPath(dtStatus PathfindResult, FNavMeshPath& Path, const dtNavMeshQuery& Query, const dtQueryFilter* Filter, NavNodeRef StartNode, NavNodeRef EndNode, FVector UnrealStart, FVector UnrealEnd, FVector RecastStart, FVector RecastEnd, dtQueryResult& PathResult)"
  },
  {
    "label": "GetTilePolyEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTilePolyEdges(const dtMeshTile& Tile, bool bGatherInteriorPolyEdges, bool bGatherExteriorNavMeshEdges, TArray<FVector>& OutInteriorPolyEdgeVerts, TArray<FVector>& OutExteriorNavMeshEdgeVerts)"
  },
  {
    "label": "GetEdgesForPathCorridorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEdgesForPathCorridorImpl(const TArray<NavNodeRef>* PathCorridor, TArray<FNavigationPortalEdge>* PathCorridorEdges, const dtNavMeshQuery& NavQuery)"
  },
  {
    "label": "GetTilesDebugGeometry()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "GetTilesDebugGeometry(const FRecastNavMeshGenerator* Generator, const dtMeshTile& Tile, int32 VertBase, FRecastDebugGeometry& OutGeometry, int32 TileIdx = INDEX_NONE, uint16 ForbiddenFlags = 0)"
  },
  {
    "label": "PostProcessPathInternal()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "PostProcessPathInternal(dtStatus FindPathStatus, FNavMeshPath& Path, const dtNavMeshQuery& NavQuery, const dtQueryFilter* QueryFilter, NavNodeRef StartPolyID, NavNodeRef EndPolyID, const FVector& RecastStartPos, const FVector& RecastEndPos, dtQueryResult& PathResult)"
  },
  {
    "label": "FindPathCustomAStar()",
    "kind": "Method",
    "detail": "Function (} ; template<TRecastAStar,TRecastAStartGraph,TRecastGraphAStarFilter,TRecastAStarResult> ENavigationQueryResult::Type)",
    "insertText": "FindPathCustomAStar(TRecastAStartGraph& RecastGraphWrapper, TRecastAStar& AStarAlgo, const FVector& StartLoc, const FVector& EndLoc, const FVector::FReal CostLimit, FNavMeshPath& Path, const FNavigationQueryFilter& InQueryFilter, const UObject* Owner)"
  },
  {
    "label": "FilterImplementation()",
    "kind": "Method",
    "detail": "Function (const FRecastQueryFilter*)",
    "insertText": "FilterImplementation(const FRecastQueryFilter*)(InQueryFilter.GetImplementation())"
  },
  {
    "label": "UE_VLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG(NavMeshOwner, LogNavigation, Error, TEXT(\"FPImplRecastNavMesh::FindPath failed due to passed filter having NULL implementation!\"))"
  },
  {
    "label": "UE_VLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG(NavMeshOwner, LogNavigation, Warning, TEXT(\"FPImplRecastNavMesh::FindPath failing due to QueryFilter == NULL\"))"
  },
  {
    "label": "AStarFilter()",
    "kind": "Method",
    "detail": "Function (TRecastGraphAStarFilter)",
    "insertText": "AStarFilter(RecastGraphWrapper, *FilterImplementation, InQueryFilter.GetMaxSearchNodes(), CostLimit, Owner)"
  },
  {
    "label": "InitPathfinding()",
    "kind": "Method",
    "detail": "Function (FVector RecastStartPos,RecastEndPos ; NavNodeRef StartPolyID,EndPolyID ; const bool bCanSearch =)",
    "insertText": "InitPathfinding(StartLoc, EndLoc, RecastGraphWrapper.GetRecastQuery(), QueryFilter, RecastStartPos, StartPolyID, RecastEndPos, EndPolyID)"
  },
  {
    "label": "EndNode()",
    "kind": "Method",
    "detail": "Function (TRecastAStar::FSearchNode)",
    "insertText": "EndNode(EndPolyID, RecastEndPos)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (StartNode .)",
    "insertText": "Initialize(RecastGraphWrapper)"
  },
  {
    "label": "FindPath()",
    "kind": "Method",
    "detail": "Function (TRecastAStarResult PathResult ; auto AStarResult = AStarAlgo .)",
    "insertText": "FindPath(StartNode, EndNode, AStarFilter, PathResult)"
  },
  {
    "label": "ConvertToRecastStatus()",
    "kind": "Method",
    "detail": "Function (dtStatus FindPathStatus = RecastGraphWrapper .)",
    "insertText": "ConvertToRecastStatus(AStarAlgo, AStarFilter, AStarResult)"
  }
]