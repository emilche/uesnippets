[
  {
    "label": "PageAccessibilityConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PageAccessibilityConfiguration"
  },
  {
    "label": "Permissions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Permissions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PAGE_ALLOCATOR_H_ # include<cstddef> # include<cstdint> # include \" base / allocator / partition_allocator / page_allocator_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" build / build_config . h \" namespace partition_alloc { struct PageAccessibilityConfiguration { enum Permissions { kInaccessible,kRead,kReadWrite,kReadWriteTagged,kReadExecuteProtected,kReadExecute,kReadWriteExecute,} ; # if)",
    "insertText": "BUILDFLAG(ENABLE_PKEYS) constexpr PageAccessibilityConfiguration(Permissions permissions) : permissions(permissions), pkey(0)"
  },
  {
    "label": "PageAccessibilityConfiguration()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PageAccessibilityConfiguration(Permissions permissions, int pkey) : permissions(permissions), pkey(pkey)"
  },
  {
    "label": "PageAccessibilityConfiguration()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "PageAccessibilityConfiguration(Permissions permissions) : permissions(permissions)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # endif Permissions permissions ; # if)",
    "insertText": "BUILDFLAG(ENABLE_PKEYS)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# endif } ; enum class PageAccessibilityDisposition { kRequireUpdate,kAllowKeepForPerf,} ; enum class PageTag { kFirst = 2 4 0,kBlinkGC = 2 5 2,kPartitionAlloc = 2 5 3,kChromium = 2 5 4,kV8 = 2 5 5,kLast = kV8 } ;)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uintptr_t NextAlignedWithOffset(uintptr_t ptr, uintptr_t alignment, uintptr_t requested_offset)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uintptr_t AllocPages(size_t length, size_t align, PageAccessibilityConfiguration accessibility, PageTag page_tag, int file_descriptor_for_shared_alloc = -1)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uintptr_t AllocPages(uintptr_t address, size_t length, size_t align, PageAccessibilityConfiguration accessibility, PageTag page_tag)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void* AllocPages(void* address, size_t length, size_t align, PageAccessibilityConfiguration accessibility, PageTag page_tag)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uintptr_t AllocPagesWithAlignOffset( uintptr_t address, size_t length, size_t align, size_t align_offset, PageAccessibilityConfiguration page_accessibility, PageTag page_tag, int file_descriptor_for_shared_alloc = -1)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void FreePages(uintptr_t address, size_t length)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void FreePages(void* address, size_t length)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ])",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool TrySetSystemPagesAccess( uintptr_t address, size_t length, PageAccessibilityConfiguration page_accessibility)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ])",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool TrySetSystemPagesAccess( void* address, size_t length, PageAccessibilityConfiguration page_accessibility)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void SetSystemPagesAccess(uintptr_t address, size_t length, PageAccessibilityConfiguration page_accessibility)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void SetSystemPagesAccess(void* address, size_t length, PageAccessibilityConfiguration page_accessibility)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void DecommitSystemPages( uintptr_t address, size_t length, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void DecommitSystemPages( void* address, size_t length, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void DecommitAndZeroSystemPages(uintptr_t address, size_t length)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void DecommitAndZeroSystemPages(void* address, size_t length)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool DecommittedMemoryIsAlwaysZeroed()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# else return true ; # endif })",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void RecommitSystemPages( uintptr_t address, size_t length, PageAccessibilityConfiguration page_accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ])",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool TryRecommitSystemPages( uintptr_t address, size_t length, PageAccessibilityConfiguration page_accessibility, PageAccessibilityDisposition accessibility_disposition)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void DiscardSystemPages(uintptr_t address, size_t length)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void DiscardSystemPages(void* address, size_t length)"
  },
  {
    "label": "RoundUpToSystemPage()",
    "kind": "Method",
    "detail": "Function (PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "RoundUpToSystemPage(uintptr_t address)"
  },
  {
    "label": "RoundDownToSystemPage()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "RoundDownToSystemPage(uintptr_t address)"
  },
  {
    "label": "RoundUpToPageAllocationGranularity()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "RoundUpToPageAllocationGranularity(uintptr_t address)"
  },
  {
    "label": "RoundDownToPageAllocationGranularity()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "RoundDownToPageAllocationGranularity(uintptr_t address)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool ReserveAddressSpace(size_t size)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool ReleaseReservation()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool HasReservationForTesting()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uint32_t GetAllocPageErrorCode()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) size_t GetTotalMappedSize()"
  }
]