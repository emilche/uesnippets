[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLayoutExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutExtender"
  },
  {
    "label": "FExtendedTab",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtendedTab"
  },
  {
    "label": "FExtendedArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtendedArea"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" # include \" Framework / Docking / TabManager . h \" typedef TFunction<)",
    "insertText": "void(TSharedRef<FTabManager::FArea>)"
  },
  {
    "label": "ExtendLayout()",
    "kind": "Method",
    "detail": "Function (enum class ELayoutExtensionPosition { Before,After,Above,Below,} ; class FLayoutExtender : public TSharedFromThis<FLayoutExtender> { public : void)",
    "insertText": "ExtendLayout(FTabId PredicateTabId, ELayoutExtensionPosition Position, FTabManager::FTab TabToAdd)"
  },
  {
    "label": "ExtendArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendArea(FName ExtensionId, const FAreaExtension& AreaExtension)"
  },
  {
    "label": "ExtendStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendStack(FName ExtensionId, ELayoutExtensionPosition Position, FTabManager::FTab TabToAdd)"
  },
  {
    "label": "FindTabExtensions()",
    "kind": "Method",
    "detail": "Function (template<AllocatorType> void)",
    "insertText": "FindTabExtensions(FTabId TabId, ELayoutExtensionPosition Position, TArray<FTabManager::FTab, AllocatorType>& OutValues)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutValues .)",
    "insertText": "Reset()"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (TArray<FExtendedTab,TInlineAllocator<2>> Extensions ; TabExtensions .)",
    "insertText": "MultiFind(TabId, Extensions, true)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutValues .)",
    "insertText": "Add(Extension.TabToAdd)"
  },
  {
    "label": "FindStackExtensions()",
    "kind": "Method",
    "detail": "Function (} } } template<AllocatorType> void)",
    "insertText": "FindStackExtensions(FName ExtensionID, ELayoutExtensionPosition Position, TArray<FTabManager::FTab, AllocatorType>& OutValues)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (TArray<FExtendedTab,TInlineAllocator<2>> Extensions ; StackExtensions .)",
    "insertText": "MultiFind(ExtensionID, Extensions, true)"
  },
  {
    "label": "ExtendAreaRecursive()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ExtendAreaRecursive(const TSharedRef<FTabManager::FArea>& Area)"
  },
  {
    "label": "FExtendedTab()",
    "kind": "Method",
    "detail": "Function (private : struct FExtendedTab {)",
    "insertText": "FExtendedTab(ELayoutExtensionPosition InPosition, const FTabManager::FTab& InTabToAdd) : Position(InPosition), TabToAdd(InTabToAdd)"
  },
  {
    "label": "FExtendedArea()",
    "kind": "Method",
    "detail": "Function (} ELayoutExtensionPosition Position ; FTabManager::FTab TabToAdd ; } ; struct FExtendedArea {)",
    "insertText": "FExtendedArea(const FAreaExtension& InExtensionCallback) : ExtensionCallback(InExtensionCallback)"
  }
]