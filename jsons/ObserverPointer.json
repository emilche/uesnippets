[
  {
    "label": "ObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "TOPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOPtr"
  },
  {
    "label": "CObservedMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CObservedMix"
  },
  {
    "label": "OtherObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherObjectType"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "CObservedMix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Containers / UniquePointer . h \" # ifndef ULANG_CHECK_OBSERVER_POINTERS # define ULANG_CHECK_OBSERVER_POINTERS ULANG_DO_CHECK # endif namespace uLang { # if ULANG_CHECK_OBSERVER_POINTERS template<class ObjectType> class TOPtr ; class CObservedMix { public :)",
    "insertText": "CObservedMix() : _ObserverId(ObserverId_Null)"
  },
  {
    "label": "CObservedMix()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CObservedMix()"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (_ObserverId = ObserverId_Null ; } private : template<class ObjectType> class TOPtr ; EObserverId _ObserverId ; } ; template<class ObjectType> class TOPtr { public : ULANG_FORCEINLINE)",
    "insertText": "TOPtr() : _Object(nullptr), _ObserverId(ObserverId_Null)"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TOPtr & Other) : _Object(Other._Object), _ObserverId(Other._ObserverId)"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TOPtr<OtherObjectType> & Other) : _Object(Other._Object), _ObserverId(Other._ObserverId)"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,class AllocatorType,. . . AllocatorArgsType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & SharedPtr) : _Object(SharedPtr.Get()), _ObserverId(GetId(SharedPtr.Get(), SharedPtr.GetAllocator()))"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,class AllocatorType,. . . AllocatorArgsType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & UniquePtr) : _Object(UniquePtr.Get()), _ObserverId(GetId(UniquePtr.Get(), UniquePtr.GetAllocator()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE TOPtr&)",
    "insertText": "operator(const TOPtr & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_Object = Other . _Object ; _ObserverId = Other . _ObserverId ; return* this ; } template<class OtherObjectType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE TOPtr&)",
    "insertText": "operator(const TOPtr<OtherObjectType> & Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_Object = Other . _Object ; _ObserverId = Other . _ObserverId ; return* this ; } template<class OtherObjectType,bool OtherAllowNull,class AllocatorType,. . . AllocatorArgsType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE TOPtr&)",
    "insertText": "operator(const TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & SharedPtr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (_Object = SharedPtr .)",
    "insertText": "Get()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (_ObserverId =)",
    "insertText": "GetId(SharedPtr.Get(), SharedPtr.GetAllocator())"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (_ObserverId =)",
    "insertText": "GetId(UniquePtr.Get(), UniquePtr.GetAllocator())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE ObjectType&)",
    "insertText": "operator()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(!_Object || _ObserverId == _Object->_ObserverId, \"Observed object has been deleted!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType> ULANG_FORCEINLINE bool)",
    "insertText": "operator(OtherObjectType * Object)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsStale()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetObserverId()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE EObserverId)",
    "insertText": "GetObserverId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EObserverId ObserverId = Object -> _ObserverId ;)",
    "insertText": "if(ObserverId == ObserverId_Null)"
  },
  {
    "label": "GenerateObserverId()",
    "kind": "Method",
    "detail": "Function (Object -> _ObserverId = ObserverId = Allocator .)",
    "insertText": "GenerateObserverId()"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} return ObserverId ; } ObjectType* _Object ; EObserverId _ObserverId ; } ; # else class CObservedMix { } ; template<class ObjectType> class TOPtr { public : ULANG_FORCEINLINE)",
    "insertText": "TOPtr() : _Object(nullptr)"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TOPtr & Other) : _Object(Other._Object)"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TOPtr<OtherObjectType> & Other) : _Object(Other._Object)"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,class AllocatorType,. . . AllocatorArgsType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TSPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & SharedPtr) : _Object(SharedPtr.Get())"
  },
  {
    "label": "TOPtr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherObjectType,bool OtherAllowNull,class AllocatorType,. . . AllocatorArgsType,= TEnableIf<TPointerIsConvertibleFromTo<OtherObjectType,ObjectType>::Value>::Type> ULANG_FORCEINLINE)",
    "insertText": "TOPtr(const TUPtrG<OtherObjectType, OtherAllowNull, AllocatorType, AllocatorArgsType...> & UniquePtr) : _Object(UniquePtr.Get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "operator(const ObjectType * Object)"
  }
]