[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__is_destructible_apply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_destructible_apply"
  },
  {
    "label": "__is_destructor_wellformed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_destructor_wellformed"
  },
  {
    "label": "__destructible_imp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__destructible_imp"
  },
  {
    "label": "__destructible_false",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__destructible_false"
  },
  {
    "label": "is_destructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_destructible"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_DESTRUCTIBLE_H # define _LIBCPP___TYPE_TRAITS_IS_DESTRUCTIBLE_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_function . h> # include<__type_traits / is_reference . h> # include<__type_traits / remove_all_extents . h> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_destructible) template<class _Tp> struct _LIBCPP_TEMPLATE_VIS is_destructible : _BoolConstant<__is_destructible(_Tp)"
  },
  {
    "label": "__is_destructible()",
    "kind": "Method",
    "detail": "Function (} ; # if _LIBCPP_STD_VER> 1 4 template<class _Tp> bool is_destructible_v =)",
    "insertText": "__is_destructible(_Tp)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (# endif # else template<class> struct __is_destructible_apply { typedef int type ; } ; template<_Tp> struct __is_destructor_wellformed { template<_Tp1> true_type)",
    "insertText": "__test(typename __is_destructible_apply<decltype(declval<_Tp1&>().~_Tp1())>::type)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<_Tp1> false_type)",
    "insertText": "__test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (const bool value =)",
    "insertText": "decltype(__test<_Tp>(12))"
  }
]