[
  {
    "label": "FPsymResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPsymResolver"
  },
  {
    "label": "FModuleEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleEntry"
  },
  {
    "label": "FQueuedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedAddress"
  },
  {
    "label": "FQueuedModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedModule"
  },
  {
    "label": "FPsymSymbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPsymSymbol"
  },
  {
    "label": "FPsymLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPsymLine"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "QueueModuleLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueModuleLoad(const uint8* ImageId, uint32 ImageIdSize, FModule* Module)"
  },
  {
    "label": "QueueSymbolResolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueSymbolResolve(uint64 Address, FResolvedSymbol* Symbol)"
  },
  {
    "label": "OnAnalysisComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisComplete()"
  },
  {
    "label": "UpdateResolvedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResolvedSymbol(FResolvedSymbol& Symbol, ESymbolQueryResult Result, const TCHAR* Module, const TCHAR* Name, const TCHAR* File, uint16 Line)"
  },
  {
    "label": "ResolveSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveSymbol(uint64 Address, FResolvedSymbol& Target)"
  },
  {
    "label": "LoadModuleSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadModuleSymbols(const FModule* Module, const TCHAR* Path, const TArrayView<const uint8> ImageId)"
  }
]