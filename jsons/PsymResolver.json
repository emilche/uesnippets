[
  {
    "label": "FPsymResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPsymResolver"
  },
  {
    "label": "FModuleEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleEntry"
  },
  {
    "label": "FQueuedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedAddress"
  },
  {
    "label": "FQueuedModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedModule"
  },
  {
    "label": "FPsymSymbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPsymSymbol"
  },
  {
    "label": "FPsymLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPsymLine"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" HAL / Runnable . h \" # include \" Containers / Queue . h \" # include \" Async / MappedFileHandle . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Common / PagedArray . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / Modules . h \" namespace TraceServices { class FPsymResolver : public FRunnable { public : typedef TArray<TTuple<uint64,FResolvedSymbol*>> SymbolArray ; void)",
    "insertText": "Start()"
  },
  {
    "label": "FPsymResolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPsymResolver(IAnalysisSession& InSession, IResolvedSymbolFilter& InSymbolFilter)"
  },
  {
    "label": "FPsymResolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPsymResolver()"
  },
  {
    "label": "QueueModuleLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueModuleLoad(const uint8* ImageId, uint32 ImageIdSize, FModule* Module)"
  },
  {
    "label": "QueueModuleReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueModuleReload(const FModule* Module, const TCHAR* Path, TFunction<void(SymbolArray&)> ResolveOnSuccess)"
  },
  {
    "label": "QueueSymbolResolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueSymbolResolve(uint64 Address, FResolvedSymbol* Symbol)"
  },
  {
    "label": "OnAnalysisComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisComplete()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(IModuleProvider::FStats* OutStats)"
  },
  {
    "label": "EnumerateSymbolSearchPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSymbolSearchPaths(TFunctionRef<void(FStringView Path)> Callback)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (private : struct FModuleEntry { uint64 Base ; uint32 Size ; const TCHAR* Name ; const TCHAR* Path ; FModule* Module ; TArray<uint8> ImageId ; } ; struct FQueuedAddress { uint64 Address ; FResolvedSymbol* Target ; } ; struct FQueuedModule { const FModule* Module ; const TCHAR* Path ; TArrayView<const uint8> ImageId ; } ; enum : uint32 { MaxNameLen = 5 1 2,} ; uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "UpdateResolvedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResolvedSymbol(FResolvedSymbol& Symbol, ESymbolQueryResult Result, const TCHAR* Module, const TCHAR* Name, const TCHAR* File, uint16 Line)"
  },
  {
    "label": "ResolveSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveSymbol(uint64 Address, FResolvedSymbol& Target)"
  },
  {
    "label": "LoadModuleSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadModuleSymbols(const FModule* Module, const TCHAR* Path, const TArrayView<const uint8> ImageId)"
  },
  {
    "label": "GetModuleForAddress()",
    "kind": "Method",
    "detail": "Function (const FModuleEntry*)",
    "insertText": "GetModuleForAddress(uint64 Address)"
  },
  {
    "label": "FPsymSymbol()",
    "kind": "Method",
    "detail": "Function (FCriticalSection ModulesCs ; TArray<FModuleEntry> LoadedModules ; TQueue<FQueuedModule,EQueueMode::Mpsc> LoadSymbolsQueue ; TQueue<FQueuedAddress,EQueueMode::Mpsc> ResolveQueue ; std::atomic<uint32> ModulesDiscovered ; std::atomic<uint32> ModulesFailed ; std::atomic<uint32> ModulesLoaded ; FCriticalSection SymbolSearchPathsLock ; TArray<FString> SymbolSearchPaths ; bool bRunWorkerThread ; bool bDrainThenStop ; UPTRINT Handle ; IAnalysisSession& Session ; IResolvedSymbolFilter& SymbolFilter ; FRunnableThread* Thread ; struct FPsymSymbol { uint64 Address ; uint32 Size ; const TCHAR* Name ;)",
    "insertText": "FPsymSymbol(uint64 InAddress, uint32 InSize, const TCHAR* InName) : Address(InAddress) , Size(InSize) , Name(InName)"
  },
  {
    "label": "FPsymLine()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPsymLine { uint64 Address ; uint32 Size ; int32 LineNumber ; int32 FileIndex ;)",
    "insertText": "FPsymLine(uint64 InAddress, uint32 InSize, int32 InLineNumber, int32 InFileIndex) : Address(InAddress) , Size(InSize) , LineNumber(InLineNumber) , FileIndex(InFileIndex)"
  }
]