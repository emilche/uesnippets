[
  {
    "label": "FSymslibResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSymslibResolver"
  },
  {
    "label": "FSymsSymbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSymsSymbol"
  },
  {
    "label": "FSymsUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSymsUnit"
  },
  {
    "label": "FSymsInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSymsInstance"
  },
  {
    "label": "FModuleEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleEntry"
  },
  {
    "label": "FQueuedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedAddress"
  },
  {
    "label": "FSymbolStringAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSymbolStringAllocator"
  },
  {
    "label": "FSymslibResolver()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # if PLATFORM_DESKTOP # define UE_SYMSLIB_AVAILABLE 1 # else # define UE_SYMSLIB_AVAILABLE 0 # endif # if UE_SYMSLIB_AVAILABLE # include \" Async / MappedFileHandle . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Common / PagedArray . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / Modules . h \" # include<atomic> # include \" symslib . h \" namespace TraceServices { class FSymslibResolver { public : typedef TArray<TTuple<uint64,FResolvedSymbol*>> SymbolArray ;)",
    "insertText": "FSymslibResolver(IAnalysisSession& InSession, IResolvedSymbolFilter& InSymbolFilter)"
  },
  {
    "label": "FSymslibResolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSymslibResolver()"
  },
  {
    "label": "QueueModuleLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueModuleLoad(const uint8* ImageId, uint32 ImageIdSize, FModule* Module)"
  },
  {
    "label": "QueueModuleReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueModuleReload(FModule* Module, const TCHAR* Path, TFunction<void(SymbolArray&)> ResolveOnSuccess)"
  },
  {
    "label": "QueueSymbolResolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueSymbolResolve(uint64 Address, FResolvedSymbol* Symbol)"
  },
  {
    "label": "OnAnalysisComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisComplete()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(IModuleProvider::FStats* OutStats)"
  },
  {
    "label": "EnumerateSymbolSearchPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSymbolSearchPaths(TFunctionRef<void(FStringView Path)> Callback)"
  },
  {
    "label": "MaybeDispatchQueuedAddresses()",
    "kind": "Method",
    "detail": "Function (private : struct FSymsSymbol { const char* Name ; } ; struct FSymsUnit { SYMS_SpatialMap1D ProcMap ; SYMS_String8Array FileTable ; SYMS_LineTable LineTable ; SYMS_SpatialMap1D LineMap ; } ; struct FSymsInstance { TArray<SYMS_Arena*> Arenas ; TArray<FSymsUnit> Units ; SYMS_SpatialMap1D UnitMap ; SYMS_SpatialMap1D StrippedMap ; FSymsSymbol* StrippedSymbols ; uint64 DefaultBase ; } ; struct FModuleEntry { FModule* Module ; TArray<uint8> ImageId ; FSymsInstance Instance ; } ; struct FQueuedAddress { uint64 Address ; FResolvedSymbol* Target ; } ; enum : uint32 { MaxNameLen = 5 1 2,QueuedAddressLength = 2 0 4 8,SymbolTasksInParallel = 8 } ; void)",
    "insertText": "MaybeDispatchQueuedAddresses()"
  },
  {
    "label": "DispatchQueuedAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchQueuedAddresses()"
  },
  {
    "label": "ResolveSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveSymbols(TArrayView<FQueuedAddress>& QueuedWork)"
  },
  {
    "label": "GetModuleEntry()",
    "kind": "Method",
    "detail": "Function (FModuleEntry*)",
    "insertText": "GetModuleEntry(FModule* Module)"
  },
  {
    "label": "GetModuleForAddress()",
    "kind": "Method",
    "detail": "Function (FModuleEntry*)",
    "insertText": "GetModuleForAddress(uint64 Address)"
  },
  {
    "label": "UpdateResolvedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResolvedSymbol(FResolvedSymbol& Symbol, ESymbolQueryResult Result, const TCHAR* Module, const TCHAR* Name, const TCHAR* File, uint16 Line)"
  },
  {
    "label": "LoadModuleTracked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadModuleTracked(FModuleEntry* Entry, FStringView OverrideSearchPath)"
  },
  {
    "label": "LoadModule()",
    "kind": "Method",
    "detail": "Function (EModuleStatus)",
    "insertText": "LoadModule(FModuleEntry* Entry, FStringView SearchPathView, FStringBuilderBase& OutStatusMessage)"
  },
  {
    "label": "ResolveSymbolTracked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveSymbolTracked(uint64 Address, FResolvedSymbol& Target, class FSymbolStringAllocator& StringAllocator)"
  },
  {
    "label": "ResolveSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveSymbol(uint64 Address, FResolvedSymbol& Target, FSymbolStringAllocator& StringAllocator, FModuleEntry* Entry)"
  },
  {
    "label": "WaitForTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTasks()"
  },
  {
    "label": "UpdateSessionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSessionInfo()"
  }
]