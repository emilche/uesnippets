[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITimeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeline"
  },
  {
    "label": "FTimelineEventInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimelineEventInfo"
  },
  {
    "label": "EnumerateAsyncParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnumerateAsyncParams"
  },
  {
    "label": "EEventEnumerate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Function . h \" namespace TraceServices { enum class EEventEnumerate { Continue,Stop,} ; enum class EEventSortOrder { ByStartTime,ByEndTime,} ; template<InEventType> class ITimeline { public : typedef InEventType EventType ; typedef TFunctionRef<)",
    "insertText": "EEventEnumerate(bool , double , const EventType&)"
  },
  {
    "label": "EEventEnumerate()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "EEventEnumerate(double , double , uint32 , const EventType&)"
  },
  {
    "label": "EEventEnumerate()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "EEventEnumerate(double , double , uint32 , const EventType& , uint32)"
  },
  {
    "label": "EEventEnumerate()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "EEventEnumerate(bool , double , const EventType& , uint32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(uint32)"
  },
  {
    "label": "ITimeline()",
    "kind": "Method",
    "detail": "Function (struct FTimelineEventInfo { double StartTime ; double EndTime ; double ExclTime = 0 . 0 ; EventType Event ; } ; struct EnumerateAsyncParams { double IntervalStart = 0 . 0 ; double IntervalEnd = - 1 . 0 ; double Resolution = 0 ; double MaxOccupancy = 0 . 8 7 5 ; EEventSortOrder SortOrder = EEventSortOrder::ByEndTime ; ITimeline<EventType>::TaskInfoCallback SetupCallback ; ITimeline<EventType>::AsyncEventRangeCallback EventRangeCallback ; ITimeline<EventType>::AsyncEventCallback EventCallback ; } ; ~)",
    "insertText": "ITimeline()"
  },
  {
    "label": "GetModCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetModCount()"
  },
  {
    "label": "GetEventCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetEventCount()"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const InEventType&)",
    "insertText": "GetEvent(uint64 InIndex)"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetStartTime()"
  },
  {
    "label": "GetEndTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetEndTime()"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsDownSampled(double IntervalStart, double IntervalEnd, double Resolution, EventCallback Callback)"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsDownSampled(double IntervalStart, double IntervalEnd, double Resolution, EventRangeCallback Callback)"
  },
  {
    "label": "EnumerateEventsBackwardsDownSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsBackwardsDownSampled(double IntervalEnd, double IntervalStart, double Resolution, EventCallback Callback)"
  },
  {
    "label": "EnumerateEventsBackwardsDownSampled()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EnumerateEventsBackwardsDownSampled(double IntervalEnd, double IntervalStart, double Resolution, EventRangeCallback Callback)"
  },
  {
    "label": "EnumerateEventsDownSampledAsync()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EnumerateEventsDownSampledAsync(const EnumerateAsyncParams& EnumerateAsyncParams)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EnumerateEvents(double IntervalStart, double IntervalEnd, EventCallback Callback)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(double IntervalStart, double IntervalEnd, EventRangeCallback Callback)"
  },
  {
    "label": "EnumerateEventsBackwards()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsBackwards(double IntervalEnd, double IntervalStart, EventCallback Callback)"
  },
  {
    "label": "EnumerateEventsBackwards()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EnumerateEventsBackwards(double IntervalEnd, double IntervalStart, EventRangeCallback Callback)"
  },
  {
    "label": "GetDepthAt()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "GetDepthAt(double Time)"
  }
]