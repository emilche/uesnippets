[
  {
    "label": "small_map_default_init",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "small_map_default_init"
  },
  {
    "label": "has_key_equal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_key_equal"
  },
  {
    "label": "select_equal_key",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "select_equal_key"
  },
  {
    "label": "equal_key",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "equal_key"
  },
  {
    "label": "small_map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "small_map"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIterator"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_SMALL_MAP_H_ # define BASE_CONTAINERS_SMALL_MAP_H_ # include<stddef . h> # include<limits> # include<map> # include<new> # include<utility> # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / memory / raw_ptr . h \" size_t kUsingFullMapSentinel = std::numeric_limits<size_t)",
    "insertText": "max()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace base { namespace internal { template<NormalMap> class small_map_default_init { public : void)",
    "insertText": "operator()(NormalMap* map)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(map) NormalMap()"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} } ; template<M> struct has_key_equal { typedef char sml ; typedef struct { char dummy [ 2 ] ; } big ; template<U> big)",
    "insertText": "test(typename U::key_equal*)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (template<> sml)",
    "insertText": "test(...)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "value(sizeof(test<M>(0)) == sizeof(big))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<M> const bool has_key_equal<M>::value ; template<M,bool has_key_equal_value> struct select_equal_key { struct equal_key { bool)",
    "insertText": "operator()(const typename M::key_type& left, const typename M::key_type& right)"
  },
  {
    "label": "comp()",
    "kind": "Method",
    "detail": "Function (M::key_compare comp ; return !)",
    "insertText": "comp(left, right) && !comp(right, left)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<M> struct select_equal_key<M,true> { typedef M::key_equal equal_key ; } ; } template<NormalMap,size_t kArraySize = 4,EqualKey = internal::select_equal_key<NormalMap,internal::has_key_equal<NormalMap>::value>::equal_key,MapInit = internal::small_map_default_init<NormalMap>> class small_map {)",
    "insertText": "static_assert(kArraySize > 0, \"Initial size must be greater than 0\")"
  },
  {
    "label": "small_map()",
    "kind": "Method",
    "detail": "Function (public : typedef NormalMap::key_type key_type ; typedef NormalMap::mapped_type data_type ; typedef NormalMap::mapped_type mapped_type ; typedef NormalMap::value_type value_type ; typedef EqualKey key_equal ;)",
    "insertText": "small_map() : size_(0), functor_(MapInit())"
  },
  {
    "label": "small_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "small_map(const MapInit& functor) : size_(0), functor_(functor)"
  },
  {
    "label": "small_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "small_map(const small_map& src)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const small_map& src)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "small_map()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "small_map()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} class const_iterator ; class iterator { public : typedef NormalMap::iterator::iterator_category iterator_category ; typedef NormalMap::iterator::value_type value_type ; typedef NormalMap::iterator::difference_type difference_type ; typedef NormalMap::iterator::pointer pointer ; typedef NormalMap::iterator::reference reference ;)",
    "insertText": "iterator() : array_iter_(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + array_iter_ ; } else { + + map_iter_ ; } return* this ; } iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "result(*this)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} private : class small_map ; class const_iterator ;)",
    "insertText": "iterator(value_type* init) : array_iter_(init)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "iterator(const typename NormalMap::iterator& init) : array_iter_(nullptr), map_iter_(init)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (} raw_ptr<value_type> array_iter_ ; NormalMap::iterator map_iter_ ; } ; class const_iterator { public : typedef NormalMap::const_iterator::iterator_category iterator_category ; typedef NormalMap::const_iterator::value_type value_type ; typedef NormalMap::const_iterator::difference_type difference_type ; typedef NormalMap::const_iterator::pointer pointer ; typedef NormalMap::const_iterator::reference reference ;)",
    "insertText": "const_iterator() : array_iter_(nullptr)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "const_iterator(const iterator& other) : array_iter_(other.array_iter_), map_iter_(other.map_iter_)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (} private : class small_map ;)",
    "insertText": "const_iterator(const value_type* init) : array_iter_(init)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "const_iterator(const typename NormalMap::const_iterator& init) : array_iter_(nullptr), map_iter_(init)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} raw_ptr<const value_type> array_iter_ ; NormalMap::const_iterator map_iter_ ; } ; iterator)",
    "insertText": "find(const key_type& key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (key_equal compare ;)",
    "insertText": "if(UsingFullMap())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i = 0; i < size_; ++i)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "iterator(array_ + size_)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "const_iterator(array_ + size_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} data_type&)",
    "insertText": "operator(const key_type& key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const size_t index = i - 1 ;)",
    "insertText": "if(compare(array_[index].first, key))"
  },
  {
    "label": "ConvertToRealMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToRealMap()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&array_[size_]) value_type(key, data_type())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (std::pair<NormalMap::iterator,bool> ret = map_ .)",
    "insertText": "insert(x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(size_ == kArraySize)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DCHECK(size_ < kArraySize)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&array_[size_]) value_type(x)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator> void)",
    "insertText": "insert(InputIterator f, InputIterator l)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(*f)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (+ + f ; } } template<. . . Args> std::pair<iterator,bool>)",
    "insertText": "emplace(Args&&... args)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (std::pair<NormalMap::iterator,bool> ret = map_ .)",
    "insertText": "emplace(std::forward<Args>(args)...)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (} value_type)",
    "insertText": "x(std::forward<Args>(args)...)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (std::pair<NormalMap::iterator,bool> ret = map_ .)",
    "insertText": "emplace(std::move(x))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&array_[size_]) value_type(std::move(x))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "NormalMap()",
    "kind": "Method",
    "detail": "Function (map_ . ~)",
    "insertText": "NormalMap()"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (array_ [ i ] . ~)",
    "insertText": "value_type()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} } size_ = 0 ; } iterator)",
    "insertText": "erase(const iterator& position)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} size_t i = static_cast<)",
    "insertText": "size_t(position.array_iter_ - array_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - size_ ;)",
    "insertText": "if(i != size_)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&array_[i]) value_type(std::move(array_[size_]))"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "erase(const key_type& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator iter =)",
    "insertText": "find(key)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "UsingFullMap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsingFullMap()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (union Storage {)",
    "insertText": "Storage()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} value_type array [ kArraySize ] ; } temp ;)",
    "insertText": "for(size_t i = 0; i < kArraySize; ++i)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&temp.array[i]) value_type(std::move(array_[i]))"
  },
  {
    "label": "functor_()",
    "kind": "Method",
    "detail": "Function (} size_ = kUsingFullMapSentinel ;)",
    "insertText": "functor_(&map_)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (map_ .)",
    "insertText": "insert(std::move(temp.array[i]))"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitFrom(const small_map& src)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (functor_ = src . functor_ ; size_ = src . size_ ;)",
    "insertText": "if(src.UsingFullMap())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&array_[i]) value_type(src.array_[i])"
  }
]