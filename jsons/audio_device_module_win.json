[
  {
    "label": "AudioDeviceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceBuffer"
  },
  {
    "label": "AudioInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioInput"
  },
  {
    "label": "AudioOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioOutput"
  },
  {
    "label": "AudioInput()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_DEVICE_WIN_AUDIO_DEVICE_MODULE_WIN_H_ # define MODULES_AUDIO_DEVICE_WIN_AUDIO_DEVICE_MODULE_WIN_H_ # include<memory> # include<string> # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" modules / audio_device / include / audio_device . h \" namespace webrtc { class AudioDeviceBuffer ; namespace webrtc_win { class AudioInput { public : ~)",
    "insertText": "AudioInput()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Init()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Terminate()"
  },
  {
    "label": "NumDevices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumDevices()"
  },
  {
    "label": "SetDevice()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetDevice(int index)"
  },
  {
    "label": "SetDevice()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetDevice(AudioDeviceModule::WindowsDeviceType device)"
  },
  {
    "label": "DeviceName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DeviceName(int index, std::string* name, std::string* guid)"
  },
  {
    "label": "AttachAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachAudioBuffer(AudioDeviceBuffer* audio_buffer)"
  },
  {
    "label": "RecordingIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordingIsInitialized()"
  },
  {
    "label": "InitRecording()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitRecording()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartRecording()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StopRecording()"
  },
  {
    "label": "Recording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recording()"
  },
  {
    "label": "VolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "VolumeIsAvailable(bool* available)"
  },
  {
    "label": "RestartRecording()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RestartRecording()"
  },
  {
    "label": "Restarting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Restarting()"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetSampleRate(uint32_t sample_rate)"
  },
  {
    "label": "AudioOutput()",
    "kind": "Method",
    "detail": "Function (} ; class AudioOutput { public : ~)",
    "insertText": "AudioOutput()"
  },
  {
    "label": "PlayoutIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayoutIsInitialized()"
  },
  {
    "label": "InitPlayout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitPlayout()"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartPlayout()"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StopPlayout()"
  },
  {
    "label": "Playing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Playing()"
  },
  {
    "label": "RestartPlayout()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RestartPlayout()"
  },
  {
    "label": "CreateWindowsCoreAudioAudioDeviceModuleFromInputAndOutput()",
    "kind": "Method",
    "detail": "Function (} ; rtc::scoped_refptr<AudioDeviceModuleForTest>)",
    "insertText": "CreateWindowsCoreAudioAudioDeviceModuleFromInputAndOutput(std::unique_ptr<AudioInput> audio_input, std::unique_ptr<AudioOutput> audio_output, TaskQueueFactory* task_queue_factory)"
  }
]