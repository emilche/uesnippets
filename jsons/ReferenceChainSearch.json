[
  {
    "label": "FGCObjectInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGCObjectInfo"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGCSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGCSnapshot"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReferenceChainSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceChainSearch"
  },
  {
    "label": "TReferenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReferenceInfo"
  },
  {
    "label": "FGraphNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNode"
  },
  {
    "label": "FReferenceChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceChain"
  },
  {
    "label": "FCallbackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallbackParams"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / ThreadHeartBeat . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / TypeHash . h \" # include \" UObject / GarbageCollection . h \" # include \" UObject / GarbageCollectionHistory . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / PrintStaleReferencesOptions . h \" class FGCObjectInfo ; class FOutputDevice ; class UObject ; struct FGCSnapshot ; template<FuncType> class TFunctionRef ; enum class EReferenceChainSearchMode { Default = 0,ExternalOnly = 1<<0,Shortest = 1<<1,Longest = 1<<2,Direct = 1<<3,FullChain = 1<<4,ShortestToGarbage = 1<<5,Minimal = 1<<6,GCOnly = 1<<7,PrintResults = 1<<1 6,PrintAllResults = 1<<1 7,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EReferenceChainSearchMode)"
  },
  {
    "label": "TReferenceInfo()",
    "kind": "Method",
    "detail": "Function (class FReferenceChainSearch { FSlowHeartBeatScope SuspendHeartBeat ; FDisableHitchDetectorScope SuspendGameThreadHitch ; public : enum class EReferenceType { Unknown = 0,Property = 1,AddReferencedObjects = 2,OuterChain = 3,} ; template<T> struct TReferenceInfo { uint32 MaxStackFrames = 3 0 ; T* Object = nullptr ; TArray<uint64> StackFrames ; EReferenceType Type ; FName ReferencerName ;)",
    "insertText": "TReferenceInfo() : Type(EReferenceType::Unknown)"
  },
  {
    "label": "TReferenceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TReferenceInfo(T* InObject) : Object(InObject) , Type(EReferenceType::Unknown)"
  },
  {
    "label": "TReferenceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TReferenceInfo(T* InObject, EReferenceType InType, FName InReferencerName, TConstArrayView<uint64> InStackFrames = {} ) : Object(InObject) , StackFrames(InStackFrames) , Type(InType) , ReferencerName(InReferencerName)"
  },
  {
    "label": "TReferenceInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TReferenceInfo(TReferenceInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TReferenceInfo&)",
    "insertText": "operator(TReferenceInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TReferenceInfo& Other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Type == EReferenceType::AddReferencedObjects)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "TEXT(\"::AddReferencedObjects()\")"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "FString()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (FGCObjectInfo* ObjectInfo = nullptr ; TSet<FNodeReferenceInfo> ReferencedObjects ; TSet<FGraphNode*> ReferencedByObjects ; int32 Visited = 0 ; int64)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FillReferenceInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FReferenceChain { class FReferenceChainSearch ; FGraphNode* TargetNode = nullptr ; TArray<FGraphNode*> Nodes ; TArray<const FNodeReferenceInfo*> ReferenceInfos ; void)",
    "insertText": "FillReferenceInfo()"
  },
  {
    "label": "FReferenceChain()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FReferenceChain()"
  },
  {
    "label": "FReferenceChain()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FReferenceChain(int32 ReserveDepth)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Reserve(ReserveDepth)"
  },
  {
    "label": "FReferenceChain()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FReferenceChain(FGraphNode* InTargetNode, TArray<FGraphNode*> InNodes, TArray<const FNodeReferenceInfo*> InReferenceInfos) : TargetNode(InTargetNode) , Nodes(MoveTemp(InNodes)) , ReferenceInfos(MoveTemp(InReferenceInfos))"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNode(FGraphNode* InNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Add(InNode)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertNode(FGraphNode* InNode)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Insert(InNode, 0)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} FGraphNode*)",
    "insertText": "GetNode(int32 NodeIndex)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} return Nodes .)",
    "insertText": "Last()"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (} FGraphNode*)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (} FReferenceChain*)",
    "insertText": "Split()"
  },
  {
    "label": "FReferenceChain()",
    "kind": "Method",
    "detail": "Function (FReferenceChain* NewChain = new)",
    "insertText": "FReferenceChain(*this)"
  },
  {
    "label": "GetReferenceInfo()",
    "kind": "Method",
    "detail": "Function (} const FNodeReferenceInfo*)",
    "insertText": "GetReferenceInfo(int32 NodeIndex)"
  },
  {
    "label": "FReferenceChainSearch()",
    "kind": "Method",
    "detail": "Function (} ; struct FCallbackParams { FGCObjectInfo* Object = nullptr ; FGCObjectInfo* Referencer = nullptr ; const FNodeReferenceInfo* ReferenceInfo = nullptr ; int32 Indent = 0 ; FOutputDevice* Out = nullptr ; } ;)",
    "insertText": "FReferenceChainSearch(UObject* InObjectToFindReferencesTo, EReferenceChainSearchMode Mode = EReferenceChainSearchMode::PrintResults, ELogVerbosity::Type InVerbosityForPrint = ELogVerbosity::Log)"
  },
  {
    "label": "FReferenceChainSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReferenceChainSearch(TConstArrayView<UObject*> InObjectsToFindReferencesTo, EReferenceChainSearchMode Mode = EReferenceChainSearchMode::PrintResults, ELogVerbosity::Type InVerbosityForPrint = ELogVerbosity::Log)"
  },
  {
    "label": "FReferenceChainSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReferenceChainSearch(EReferenceChainSearchMode Mode)"
  },
  {
    "label": "FReferenceChainSearch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FReferenceChainSearch()"
  },
  {
    "label": "PerformSearchFromGCSnapshot()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_GC_HISTORY void)",
    "insertText": "PerformSearchFromGCSnapshot(UObject* InObjectToFindReferencesTo, FGCSnapshot& InSnapshot)"
  },
  {
    "label": "PerformSearchFromGCSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformSearchFromGCSnapshot(TConstArrayView<UObject*> InObjectsToFindReferencesTo, FGCSnapshot& InSnapshot)"
  },
  {
    "label": "PrintResults()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "PrintResults(bool bDumpAllChains = false, UObject* TargetObject = nullptr, ELogVerbosity::Type VerbosityForPrint = ELogVerbosity::Log)"
  },
  {
    "label": "SetVerbosityForPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerbosityForPrint(ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "PrintResults()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PrintResults(TFunctionRef<bool(FCallbackParams& Params)> ReferenceCallback, bool bDumpAllChains = false, UObject* TargetObject = nullptr, ELogVerbosity::Type VerbosityForPrint = ELogVerbosity::Log)"
  },
  {
    "label": "GetRootPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRootPath(UObject* TargetObject = nullptr)"
  },
  {
    "label": "GetRootPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRootPath(TFunctionRef<bool(FCallbackParams& Params)> ReferenceCallback, UObject* TargetObject = nullptr)"
  },
  {
    "label": "GetReferenceChains()",
    "kind": "Method",
    "detail": "Function (const TArray<FReferenceChain*>&)",
    "insertText": "GetReferenceChains()"
  },
  {
    "label": "FindAndPrintStaleReferencesToObject()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindAndPrintStaleReferencesToObject(UObject* ObjectToFindReferencesTo, EPrintStaleReferencesOptions Options)"
  },
  {
    "label": "FindAndPrintStaleReferencesToObjects()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "FindAndPrintStaleReferencesToObjects(TConstArrayView<UObject*> ObjectsToFindReferencesTo, EPrintStaleReferencesOptions Options)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (private : TArray<FGCObjectInfo*> ObjectInfosToFindReferencesTo ; EReferenceChainSearchMode SearchMode = EReferenceChainSearchMode::Default ; TArray<FReferenceChain*> ReferenceChains ; TMap<FGCObjectInfo*,FGraphNode*> AllNodes ; TMap<const UObject*,FGCObjectInfo*> ObjectToInfoMap ; ELogVerbosity::Type VerbosityForPrint = ELogVerbosity::Log ; void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "LinkNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNodes(UObject* From, UObject* To, EReferenceType ReferenceType, FName PropertyName, TConstArrayView<uint64> StackFrames = {})"
  },
  {
    "label": "LinkNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkNodes(FGCObjectInfo* From, FGCObjectInfo* To, EReferenceType ReferenceType, FName PropertyName, TConstArrayView<uint64> StackFrames = {})"
  },
  {
    "label": "GetObjectFlags()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetObjectFlags(const FGCObjectInfo& InObject)"
  },
  {
    "label": "DumpChain()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DumpChain(FReferenceChainSearch::FReferenceChain* Chain, TFunctionRef<bool(FCallbackParams& Params)> ReferenceCallback, TMap<uint64, FString>& CallstackCache, FOutputDevice& Out, ELogVerbosity::Type InVerbosityForPrint)"
  }
]