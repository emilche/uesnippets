[
  {
    "label": "FPBDJointSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSettings"
  },
  {
    "label": "FConstraintProfileProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintProfileProperties"
  },
  {
    "label": "FJointHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointHandle"
  },
  {
    "label": "FJointHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Physics / ImmediatePhysics / ImmediatePhysicsChaos / ImmediatePhysicsCore_Chaos . h \" # include \" Physics / ImmediatePhysics / ImmediatePhysicsChaos / ImmediatePhysicsActorHandle_Chaos . h \" # include \" Chaos / Vector . h \" # include \" Engine / EngineTypes . h \" namespace Chaos { class FPBDJointSettings ; } struct FConstraintProfileProperties ; namespace ImmediatePhysics_Chaos { struct FJointHandle { public : using FChaosConstraintContainer = Chaos::FPBDJointConstraints ; using FChaosConstraintHandle = Chaos::FPBDJointConstraintHandle ; using FPBDJointSettings = Chaos::FPBDJointSettings ;)",
    "insertText": "FJointHandle(FChaosConstraintContainer* InConstraints, FConstraintInstance* ConstraintInstance, FActorHandle* InActor1, FActorHandle* InActor2)"
  },
  {
    "label": "FJointHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJointHandle(FChaosConstraintContainer* InConstraints, const FPBDJointSettings& ConstraintSettings, FActorHandle* InActor1, FActorHandle* InActor2)"
  },
  {
    "label": "FJointHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FJointHandle()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (FChaosConstraintHandle*)",
    "insertText": "GetConstraint()"
  },
  {
    "label": "GetActorHandles()",
    "kind": "Method",
    "detail": "Function (const Chaos::TVec2<FActorHandle*>&)",
    "insertText": "GetActorHandles()"
  },
  {
    "label": "SetSoftLinearSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftLinearSettings(bool bLinearSoft, FReal LinearStiffness, FReal LinearDamping)"
  },
  {
    "label": "SetActorInertiaConditioningDirty()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetActorInertiaConditioningDirty()"
  },
  {
    "label": "UpdateJointSettingsFromConstraintProfile()",
    "kind": "Method",
    "detail": "Function (Chaos::TVec2<FActorHandle*> ActorHandles ; FChaosConstraintContainer* Constraints ; FChaosConstraintHandle* ConstraintHandle ; } ; void)",
    "insertText": "UpdateJointSettingsFromConstraintProfile(const FConstraintProfileProperties& Profile, Chaos::FPBDJointSettings& JointSettings)"
  }
]