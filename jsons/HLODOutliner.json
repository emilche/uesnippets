[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ALODActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALODActor"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "IHierarchicalLODUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHierarchicalLODUtilities"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FTreeItemID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeItemID"
  },
  {
    "label": "ITreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITreeItem"
  },
  {
    "label": "FOutlinerAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutlinerAction"
  },
  {
    "label": "ActionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ActionType"
  },
  {
    "label": "SHLODOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHLODOutliner"
  },
  {
    "label": "FLODActorItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODActorItem"
  },
  {
    "label": "FHLODTreeWidgetItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHLODTreeWidgetItem"
  },
  {
    "label": "FStaticMeshActorItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshActorItem"
  },
  {
    "label": "FLODLevelItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODLevelItem"
  },
  {
    "label": "SHLODWidgetItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHLODWidgetItem"
  },
  {
    "label": "FOutlinerAction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" EditorUndoClient . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / NotifyHook . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" TreeItemID . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class AActor ; class ALODActor ; class AWorldSettings ; class FActiveTimerHandle ; class FDragDropEvent ; class IDetailsView ; class IHierarchicalLODUtilities ; class ITableRow ; class SVerticalBox ; class SWidget ; class ULevel ; class UObject ; class UWorld ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; namespace HLODOutliner { struct FTreeItemID ; struct ITreeItem ; typedef TSharedPtr<ITreeItem> FTreeItemPtr ; typedef TSharedRef<ITreeItem> FTreeItemRef ; struct FOutlinerAction { enum ActionType { AddItem,RemoveItem,MoveItem } ;)",
    "insertText": "FOutlinerAction(ActionType InType, FTreeItemPtr InItem) : Type(InType), Item(InItem)"
  },
  {
    "label": "FOutlinerAction()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FOutlinerAction(ActionType InType, FTreeItemPtr InItem, FTreeItemPtr InParentItem) : Type(InType), Item(InItem), ParentItem( InParentItem)"
  },
  {
    "label": "SHLODOutliner()",
    "kind": "Method",
    "detail": "Function (} ; ActionType Type ; FTreeItemPtr Item ; FTreeItemPtr ParentItem ; } ; class SHLODOutliner : public SCompoundWidget,public FNotifyHook,public FEditorUndoClient { typedef STreeView<FTreeItemPtr> SHLODTree ; struct FLODActorItem ; struct FHLODTreeWidgetItem ; struct FStaticMeshActorItem ; struct FLODLevelItem ; class SHLODWidgetItem ; public :)",
    "insertText": "SHLODOutliner()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SHLODOutliner)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "CreateForcedViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateForcedViewWidget()"
  },
  {
    "label": "CreateMainButtonWidgets()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateMainButtonWidgets()"
  },
  {
    "label": "CreateClusterButtonWidgets()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateClusterButtonWidgets()"
  },
  {
    "label": "CreateTreeviewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHLODTree>)",
    "insertText": "CreateTreeviewWidget()"
  },
  {
    "label": "CreateSettingsView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSettingsView()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "GetForceBuildText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetForceBuildText()"
  },
  {
    "label": "GetForceBuildToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetForceBuildToolTip()"
  },
  {
    "label": "GetBuildText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBuildText()"
  },
  {
    "label": "HandleDeleteHLODs()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDeleteHLODs()"
  },
  {
    "label": "CanDeleteHLODs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteHLODs()"
  },
  {
    "label": "HandlePreviewHLODs()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandlePreviewHLODs()"
  },
  {
    "label": "RetrieveActors()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RetrieveActors()"
  },
  {
    "label": "HandleBuildLODActors()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleBuildLODActors()"
  },
  {
    "label": "CanBuildLODActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBuildLODActors()"
  },
  {
    "label": "GetBuildLODActorsTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBuildLODActorsTooltipText()"
  },
  {
    "label": "HandleForceBuildLODActors()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleForceBuildLODActors()"
  },
  {
    "label": "HandleForceRefresh()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleForceRefresh()"
  },
  {
    "label": "HandleSaveAll()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleSaveAll()"
  },
  {
    "label": "GetGenerateClustersText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGenerateClustersText()"
  },
  {
    "label": "GetGenerateClustersTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGenerateClustersTooltip()"
  },
  {
    "label": "GetRegenerateClustersText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRegenerateClustersText()"
  },
  {
    "label": "GetRegenerateClustersTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRegenerateClustersTooltip()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterDelegates()"
  },
  {
    "label": "DeregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeregisterDelegates()"
  },
  {
    "label": "MakeToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeToolBar()"
  },
  {
    "label": "GenerateClustersFromUI()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "GenerateClustersFromUI()"
  },
  {
    "label": "GenerateProxyMeshesFromUI()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "GenerateProxyMeshesFromUI()"
  },
  {
    "label": "BuildClustersAndMeshesFromUI()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "BuildClustersAndMeshesFromUI()"
  },
  {
    "label": "HasHLODActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHLODActors()"
  },
  {
    "label": "ForceViewLODActor()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ForceViewLODActor()"
  },
  {
    "label": "AreHLODsBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreHLODsBuild()"
  },
  {
    "label": "HandleForceLevelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleForceLevelText()"
  },
  {
    "label": "GetForceLevelMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetForceLevelMenuContent()"
  },
  {
    "label": "RestoreForcedLODLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreForcedLODLevel(int32 LODLevel)"
  },
  {
    "label": "SetForcedLODLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForcedLODLevel(int32 LODLevel)"
  },
  {
    "label": "ResetLODLevelForcing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLODLevelForcing()"
  },
  {
    "label": "CreateHierarchicalVolumeForActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateHierarchicalVolumeForActor()"
  },
  {
    "label": "BuildLODActor()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BuildLODActor()"
  },
  {
    "label": "RebuildLODActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildLODActor()"
  },
  {
    "label": "SelectLODActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLODActor()"
  },
  {
    "label": "DeleteCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteCluster()"
  },
  {
    "label": "SelectContainedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectContainedActors()"
  },
  {
    "label": "RemoveStaticMeshActorFromCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStaticMeshActorFromCluster()"
  },
  {
    "label": "ExcludeFromClusterGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExcludeFromClusterGeneration()"
  },
  {
    "label": "RemoveLODActorFromCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLODActorFromCluster()"
  },
  {
    "label": "CreateClusterFromActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateClusterFromActors(const TArray<AActor*>& Actors, uint32 LODLevelIndex)"
  },
  {
    "label": "UpdateDrawDistancesForLODLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDrawDistancesForLODLevel(const uint32 LODLevelIndex)"
  },
  {
    "label": "RemoveLODLevelActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLODLevelActors(const int32 HLODLevelIndex)"
  },
  {
    "label": "GetSpitterWidgetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSpitterWidgetIndex()"
  },
  {
    "label": "OnOutlinerGenerateRow()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<ITableRow>)",
    "insertText": "OnOutlinerGenerateRow(FTreeItemPtr InReflectorNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnOutlinerGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerGetChildren(FTreeItemPtr InParent, TArray<FTreeItemPtr>& OutChildren)"
  },
  {
    "label": "OnOutlinerSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSelectionChanged(FTreeItemPtr TreeItem, ESelectInfo::Type)"
  },
  {
    "label": "OnOutlinerDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerDoubleClick(FTreeItemPtr TreeItem)"
  },
  {
    "label": "OnOpenContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnOpenContextMenu()"
  },
  {
    "label": "OnItemExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemExpansionChanged(FTreeItemPtr TreeItem, bool bIsExpanded)"
  },
  {
    "label": "StartSelection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "StartSelection()"
  },
  {
    "label": "EmptySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptySelection()"
  },
  {
    "label": "DestroySelectionActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySelectionActors()"
  },
  {
    "label": "SelectActorInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectActorInViewport(AActor* Actor, const uint32 SelectionDepth = 0)"
  },
  {
    "label": "SelectLODActorAndContainedActorsInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectLODActorAndContainedActorsInViewport(ALODActor* LODActor, const uint32 SelectionDepth = 0)"
  },
  {
    "label": "SelectContainedActorsInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectContainedActorsInViewport(ALODActor* LODActor, const uint32 SelectionDepth = 0)"
  },
  {
    "label": "AddLODActorForBoundsDrawing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLODActorForBoundsDrawing(AActor* Actor)"
  },
  {
    "label": "EndSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSelection(const bool bChange)"
  },
  {
    "label": "OnLevelSelectionChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnLevelSelectionChanged(UObject* Obj)"
  },
  {
    "label": "OnLevelAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAdded(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnLevelRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemoved(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnLevelActorsAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorsAdded(AActor* InActor)"
  },
  {
    "label": "OnLevelActorsRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorsRemoved(AActor* InActor)"
  },
  {
    "label": "OnMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapChange(uint32 MapFlags)"
  },
  {
    "label": "OnNewCurrentLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewCurrentLevel()"
  },
  {
    "label": "OnMapLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMapLoaded(const FString& Filename, bool bAsTemplate)"
  },
  {
    "label": "OnHLODActorMovedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHLODActorMovedEvent(const AActor* InActor, const AActor* ParentActor)"
  },
  {
    "label": "OnActorMovedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorMovedEvent(AActor* InActor)"
  },
  {
    "label": "OnHLODActorAddedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHLODActorAddedEvent(const AActor* InActor, const AActor* ParentActor)"
  },
  {
    "label": "OnHLODTransitionScreenSizeChangedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHLODTransitionScreenSizeChangedEvent()"
  },
  {
    "label": "OnHLODLevelsArrayChangedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHLODLevelsArrayChangedEvent()"
  },
  {
    "label": "OnHLODActorRemovedFromClusterEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHLODActorRemovedFromClusterEvent(const AActor* InActor, const AActor* ParentActor)"
  },
  {
    "label": "OutlinerEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OutlinerEnabled()"
  },
  {
    "label": "OnBeginPieEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginPieEvent(bool bIsSimulating)"
  },
  {
    "label": "OnEndPieEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPieEvent(bool bIsSimulating)"
  },
  {
    "label": "FullRefresh()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FullRefresh()"
  },
  {
    "label": "UpdateCurrentWorldAndSettings()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "UpdateCurrentWorldAndSettings()"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Populate()"
  },
  {
    "label": "ResetCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCachedData()"
  },
  {
    "label": "GetParentsExpansionState()",
    "kind": "Method",
    "detail": "Function (typedef TMap<FTreeItemID,bool> FParentsExpansionState ; TMap<FTreeItemID,bool>)",
    "insertText": "GetParentsExpansionState()"
  },
  {
    "label": "SetParentsExpansionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentsExpansionState(const FParentsExpansionState& ExpansionStateInfo)"
  },
  {
    "label": "AddItemToTree()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "AddItemToTree(FTreeItemPtr InItem, FTreeItemPtr InParentItem)"
  },
  {
    "label": "MoveItemInTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveItemInTree(FTreeItemPtr InItem, FTreeItemPtr InParentItem)"
  },
  {
    "label": "RemoveItemFromTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveItemFromTree(FTreeItemPtr InItem)"
  },
  {
    "label": "SelectItemInTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectItemInTree(FTreeItemPtr InItem)"
  },
  {
    "label": "UpdateNeedsBuildFlagTimer()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateNeedsBuildFlagTimer(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "CloseOpenAssetEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseOpenAssetEditors()"
  }
]