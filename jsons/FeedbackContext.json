[
  {
    "label": "FContextSupplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextSupplier"
  },
  {
    "label": "SBuildProgressWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBuildProgressWidget"
  },
  {
    "label": "FSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlowTask"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformTime . h \" # include \" Internationalization / Text . h \" # include \" Misc / OutputDevice . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / SlowTask . h \" # include \" Misc / SlowTaskStack . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" class FContextSupplier ; class SBuildProgressWidget ; struct FSlowTask ; class FFeedbackContext : public FOutputDevice { public : void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "YesNof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "YesNof(const FText& Question)"
  },
  {
    "label": "ReceivedUserCancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivedUserCancel()"
  },
  {
    "label": "OnStartSlowTask()",
    "kind": "Method",
    "detail": "Function (FOnStartSlowTask&)",
    "insertText": "OnStartSlowTask()"
  },
  {
    "label": "OnFinalizeSlowTask()",
    "kind": "Method",
    "detail": "Function (FOnFinalizeSlowTask&)",
    "insertText": "OnFinalizeSlowTask()"
  },
  {
    "label": "OnStartSlowTaskWithGuid()",
    "kind": "Method",
    "detail": "Function (FOnStartSlowTaskWithGuid&)",
    "insertText": "OnStartSlowTaskWithGuid()"
  },
  {
    "label": "OnFinalizeSlowTaskWithGuid()",
    "kind": "Method",
    "detail": "Function (FOnFinalizeSlowTaskWithGuid&)",
    "insertText": "OnFinalizeSlowTaskWithGuid()"
  },
  {
    "label": "UpdateProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgress(int32 Numerator, int32 Denominator)"
  },
  {
    "label": "StatusUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatusUpdate(int32 Numerator, int32 Denominator, const FText& StatusText)"
  },
  {
    "label": "StatusForceUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatusForceUpdate(int32 Numerator, int32 Denominator, const FText& StatusText)"
  },
  {
    "label": "EndSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSlowTask()"
  },
  {
    "label": "StartSlowTask()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "StartSlowTask(const FText& Task, bool bShowCancelButton=false)"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (TaskName = Task ; TaskGuid =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (TaskStartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (GIsSlowTask = true ; StartSlowTaskEvent .)",
    "insertText": "Broadcast(TaskName)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (StartSlowTaskWithGuidEvent .)",
    "insertText": "Broadcast(TaskGuid, TaskName)"
  },
  {
    "label": "FinalizeSlowTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinalizeSlowTask()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (FinalizeSlowTaskEvent .)",
    "insertText": "Broadcast(TaskName, TaskDuration)"
  },
  {
    "label": "ProgressReported()",
    "kind": "Method",
    "detail": "Function (GIsSlowTask = false ; } void)",
    "insertText": "ProgressReported(const float TotalProgressInterp, FText DisplayMessage)"
  },
  {
    "label": "IsPlayingInEditor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlayingInEditor()"
  },
  {
    "label": "ResolveVerbosity()",
    "kind": "Method",
    "detail": "Function (ELogVerbosity::Type)",
    "insertText": "ResolveVerbosity(ELogVerbosity::Type Verbosity)"
  },
  {
    "label": "FormatLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatLine(FStringBuilderBase& Out, const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time, ELogVerbosity::Type* OutVerbosity = nullptr)"
  },
  {
    "label": "FormatRecordLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatRecordLine(FStringBuilderBase& Out, const UE::FLogRecord& Record, ELogVerbosity::Type* OutVerbosity = nullptr)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (public : FContextSupplier*)",
    "insertText": "GetContext()"
  },
  {
    "label": "ShowBuildProgressWindow()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<class SBuildProgressWidget>)",
    "insertText": "ShowBuildProgressWindow()"
  },
  {
    "label": "CloseBuildProgressWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CloseBuildProgressWindow()"
  },
  {
    "label": "FFeedbackContext()",
    "kind": "Method",
    "detail": "Function (} bool TreatWarningsAsErrors = false ; bool TreatErrorsAsWarnings = false ;)",
    "insertText": "FFeedbackContext()"
  },
  {
    "label": "GetWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWarnings(TArray<FString>& OutWarnings)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "GetNumWarnings()",
    "kind": "Method",
    "detail": "Function (OutWarnings = Warnings ; } int32)",
    "insertText": "GetNumWarnings()"
  },
  {
    "label": "GetErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetErrors(TArray<FString>& OutErrors)"
  },
  {
    "label": "GetNumErrors()",
    "kind": "Method",
    "detail": "Function (OutErrors = Errors ; } int32)",
    "insertText": "GetNumErrors()"
  },
  {
    "label": "GetErrorsAndWarningsAndEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetErrorsAndWarningsAndEmpty(TArray<FString>& OutWarningsAndErrors)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutWarningsAndErrors =)",
    "insertText": "MoveTemp(Errors)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutWarningsAndErrors + =)",
    "insertText": "MoveTemp(Warnings)"
  },
  {
    "label": "ClearWarningsAndErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearWarningsAndErrors()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Errors .)",
    "insertText": "Empty()"
  },
  {
    "label": "AddToHistory()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddToHistory(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "AddRecordToHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRecordToHistory(const UE::FLogRecord& Record)"
  },
  {
    "label": "FFeedbackContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFeedbackContext(const FFeedbackContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFeedbackContext&)",
    "insertText": "operator(const FFeedbackContext&)"
  },
  {
    "label": "GetScopeStackSharedPtr()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Warnings ; TArray<FString> Errors ; FCriticalSection WarningsAndErrorsCritical ; FText TaskName ; double TaskStartTime ; FOnStartSlowTask StartSlowTaskEvent ; FOnFinalizeSlowTask FinalizeSlowTaskEvent ; FGuid TaskGuid ; FOnStartSlowTaskWithGuid StartSlowTaskWithGuidEvent ; FOnFinalizeSlowTaskWithGuid FinalizeSlowTaskWithGuidEvent ; protected : FSlowTask ; FSlowTaskStack ScopeStack ; TSharedPtr<FSlowTaskStack> ScopeStackSharedPtr ; const TSharedPtr<FSlowTaskStack>&)",
    "insertText": "GetScopeStackSharedPtr()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (ScopeStackSharedPtr =)",
    "insertText": "MakeShareable(const_cast<FSlowTaskStack*>(&ScopeStack), [](FSlowTaskStack*){})"
  },
  {
    "label": "RequestUpdateUI()",
    "kind": "Method",
    "detail": "Function (} return ScopeStackSharedPtr ; } TArray<TUniquePtr<FSlowTask>> LegacyAPIScopes ; void)",
    "insertText": "RequestUpdateUI(bool bForceUpdate = false)"
  },
  {
    "label": "UpdateUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUI()"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FString& InWarning)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Warnings .)",
    "insertText": "Add(InWarning)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddWarning(FString&& InWarning)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Warnings .)",
    "insertText": "Add(MoveTemp(InWarning))"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddError(const FString& InError)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Errors .)",
    "insertText": "Add(InError)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddError(FString&& InError)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Errors .)",
    "insertText": "Add(MoveTemp(InError))"
  }
]