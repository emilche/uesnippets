[
  {
    "label": "FContextSupplier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextSupplier"
  },
  {
    "label": "SBuildProgressWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBuildProgressWidget"
  },
  {
    "label": "FSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlowTask"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "SBuildProgressWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBuildProgressWidget"
  },
  {
    "label": "SBuildProgressWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBuildProgressWidget"
  },
  {
    "label": "YesNof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "YesNof( const FText& Question )"
  },
  {
    "label": "BeginSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSlowTask( const FText& Task, bool ShowProgressDialog, bool bShowCancelButton=false )"
  },
  {
    "label": "UpdateProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgress( int32 Numerator, int32 Denominator )"
  },
  {
    "label": "StatusUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatusUpdate( int32 Numerator, int32 Denominator, const FText& StatusText )"
  },
  {
    "label": "StatusForceUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatusForceUpdate( int32 Numerator, int32 Denominator, const FText& StatusText )"
  },
  {
    "label": "EndSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSlowTask()"
  },
  {
    "label": "FFeedbackContext()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FFeedbackContext()"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "AddToHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToHistory(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, double Time)"
  },
  {
    "label": "AddRecordToHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRecordToHistory(const UE::FLogRecord& Record)"
  },
  {
    "label": "FFeedbackContext()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FFeedbackContext(const FFeedbackContext&)"
  },
  {
    "label": "RequestUpdateUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateUI(bool bForceUpdate = false)"
  },
  {
    "label": "UpdateUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUI()"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  },
  {
    "label": "WarningsAndErrorsLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "WarningsAndErrorsLock(&WarningsAndErrorsCritical)"
  }
]