[
  {
    "label": "FileRotatingStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileRotatingStream"
  },
  {
    "label": "CallSessionFileRotatingStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallSessionFileRotatingStream"
  },
  {
    "label": "FileRotatingStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileRotatingStreamReader"
  },
  {
    "label": "CallSessionFileRotatingStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallSessionFileRotatingStreamReader"
  },
  {
    "label": "FileRotatingStream()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_FILE_ROTATING_STREAM_H_ # define RTC_BASE_FILE_ROTATING_STREAM_H_ # include<stddef . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" rtc_base / system / file_wrapper . h \" namespace rtc { class FileRotatingStream { public :)",
    "insertText": "FileRotatingStream(absl::string_view dir_path, absl::string_view file_prefix, size_t max_file_size, size_t num_files)"
  },
  {
    "label": "FileRotatingStream()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileRotatingStream()"
  },
  {
    "label": "FileRotatingStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileRotatingStream(const FileRotatingStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileRotatingStream&)",
    "insertText": "operator(const FileRotatingStream&)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(const void* data, size_t data_len)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Flush()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open()"
  },
  {
    "label": "DisableBuffering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisableBuffering()"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetFilePath(size_t index)"
  },
  {
    "label": "GetNumFiles()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumFiles()"
  },
  {
    "label": "SetMaxFileSize()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetMaxFileSize(size_t size)"
  },
  {
    "label": "GetRotationIndex()",
    "kind": "Method",
    "detail": "Function (max_file_size_ = size ; } size_t)",
    "insertText": "GetRotationIndex()"
  },
  {
    "label": "OnRotation()",
    "kind": "Method",
    "detail": "Function (rotation_index_ = index ; } void)",
    "insertText": "OnRotation()"
  },
  {
    "label": "OpenCurrentFile()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "OpenCurrentFile()"
  },
  {
    "label": "CloseCurrentFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseCurrentFile()"
  },
  {
    "label": "RotateFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateFiles()"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetFilePath(size_t index, size_t num_files)"
  },
  {
    "label": "CallSessionFileRotatingStream()",
    "kind": "Method",
    "detail": "Function (const std::string dir_path_ ; const std::string file_prefix_ ; webrtc::FileWrapper file_ ; std::vector<std::string> file_names_ ; size_t max_file_size_ ; size_t current_file_index_ ; size_t rotation_index_ ; size_t current_bytes_written_ ; bool disable_buffering_ ; } ; class CallSessionFileRotatingStream : public FileRotatingStream { public :)",
    "insertText": "CallSessionFileRotatingStream(absl::string_view dir_path, size_t max_total_log_size)"
  },
  {
    "label": "CallSessionFileRotatingStream()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CallSessionFileRotatingStream()"
  },
  {
    "label": "CallSessionFileRotatingStream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CallSessionFileRotatingStream(const CallSessionFileRotatingStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallSessionFileRotatingStream&)",
    "insertText": "operator(const CallSessionFileRotatingStream&)"
  },
  {
    "label": "GetRotatingLogSize()",
    "kind": "Method",
    "detail": "Function (private : size_t)",
    "insertText": "GetRotatingLogSize(size_t max_total_log_size)"
  },
  {
    "label": "GetNumRotatingLogFiles()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumRotatingLogFiles(size_t max_total_log_size)"
  },
  {
    "label": "FileRotatingStreamReader()",
    "kind": "Method",
    "detail": "Function (const size_t kRotatingLogFileDefaultSize ; const size_t max_total_log_size_ ; size_t num_rotations_ ; } ; class FileRotatingStreamReader { public :)",
    "insertText": "FileRotatingStreamReader(absl::string_view dir_path, absl::string_view file_prefix)"
  },
  {
    "label": "FileRotatingStreamReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileRotatingStreamReader()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "ReadAll()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadAll(void* buffer, size_t size)"
  },
  {
    "label": "CallSessionFileRotatingStreamReader()",
    "kind": "Method",
    "detail": "Function (private : std::vector<std::string> file_names_ ; } ; class CallSessionFileRotatingStreamReader : public FileRotatingStreamReader { public :)",
    "insertText": "CallSessionFileRotatingStreamReader(absl::string_view dir_path)"
  }
]