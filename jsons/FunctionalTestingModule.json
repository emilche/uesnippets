[
  {
    "label": "IFunctionalTestingModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFunctionalTestingModule"
  },
  {
    "label": "UFunctionalTestingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunctionalTestingManager"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" FunctionalTest . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogFunctionalTest, Log, All)"
  },
  {
    "label": "RunAllTestsOnMap()",
    "kind": "Method",
    "detail": "Function (class IFunctionalTestingModule : public IModuleInterface { public : void)",
    "insertText": "RunAllTestsOnMap(bool bClearLog, bool bRunLooped)"
  },
  {
    "label": "RunTestOnMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTestOnMap(const FString& TestName, bool bClearLog, bool bRunLooped)"
  },
  {
    "label": "MarkPendingActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPendingActivation()"
  },
  {
    "label": "IsActivationPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActivationPending()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinished()"
  },
  {
    "label": "SetManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManager(class UFunctionalTestingManager* NewManager)"
  },
  {
    "label": "GetCurrentManager()",
    "kind": "Method",
    "detail": "Function (class UFunctionalTestingManager*)",
    "insertText": "GetCurrentManager()"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLooping(const bool bLoop)"
  },
  {
    "label": "GetMapTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMapTests(bool bEditorOnlyTests, TArray<FFunctionalTestInfo>& OutTestInfo, TArray<FString>& OutTestMapAssets)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IFunctionalTestingModule&)",
    "insertText": "Get()"
  },
  {
    "label": "FunctionalTesting()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "FunctionalTesting(TEXT(\"FunctionalTesting\"))"
  }
]