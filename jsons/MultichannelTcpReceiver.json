[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FMultichannelTcpReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultichannelTcpReceiver"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" NetworkMessage . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / Runnable . h \" # include \" MultichannelTcpGlobals . h \" class Error ; class FSocket ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnMultichannelTcpReceive, const TArray<uint8>&, uint32, bool)"
  },
  {
    "label": "FMultichannelTcpReceiver()",
    "kind": "Method",
    "detail": "Function (class FMultichannelTcpReceiver : public FRunnable { public :)",
    "insertText": "FMultichannelTcpReceiver(FSocket* InSocket, const FOnMultichannelTcpReceive& InReceiveDelegate ) : Socket(InSocket) , ReceiveDelegate(InReceiveDelegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Thread =)",
    "insertText": "Create(this, TEXT(\"FMultichannelTCPReceiver\"), 8 * 1024, TPri_AboveNormal)"
  },
  {
    "label": "FMultichannelTcpReceiver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMultichannelTcpReceiver()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (Thread ->)",
    "insertText": "Kill(true)"
  },
  {
    "label": "GetBytesReceived()",
    "kind": "Method",
    "detail": "Function (delete Thread ; } } public : int32)",
    "insertText": "GetBytesReceived()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FArrayReader Payload ;)",
    "insertText": "if(FNFSMessageHeader::ReceivePayload(Payload, FSimpleAbstractSocket_FSocket(Socket)) == false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } uint32 Magic ; Payload<<Magic ;)",
    "insertText": "if(Magic != MultichannelMagic)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (break ; } uint32 Channel ; Payload<<Channel ; TArray<uint8> InnerPayload ; Payload<<InnerPayload ; ReceiveDelegate .)",
    "insertText": "Execute(InnerPayload, Channel, Payload.ForceByteSwapping())"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAdd(&BytesReceived, InnerPayload.Num())"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  }
]