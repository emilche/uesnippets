[
  {
    "label": "SwappyVkFunctionProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwappyVkFunctionProvider"
  },
  {
    "label": "SwappyVk_determineDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" jni . h \" # include \" swappy_common . h \" # ifndef VK_NO_PROTOTYPES # define VK_NO_PROTOTYPES 1 # endif # include<vulkan / vulkan . h> # ifdef __cplusplus \" C \" { # endif void)",
    "insertText": "SwappyVk_determineDeviceExtensions(VkPhysicalDevice physicalDevice, uint32_t availableExtensionCount, VkExtensionProperties* pAvailableExtensions, uint32_t* pRequiredExtensionCount, char** pRequiredExtensions)"
  },
  {
    "label": "SwappyVk_setQueueFamilyIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setQueueFamilyIndex(VkDevice device, VkQueue queue, uint32_t queueFamilyIndex)"
  },
  {
    "label": "SwappyVk_initAndGetRefreshCycleDuration_internal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwappyVk_initAndGetRefreshCycleDuration_internal(JNIEnv* env, jobject jactivity, VkPhysicalDevice physicalDevice, VkDevice device, VkSwapchainKHR swapchain, uint64_t* pRefreshDuration)"
  },
  {
    "label": "SwappyVk_initAndGetRefreshCycleDuration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwappyVk_initAndGetRefreshCycleDuration(JNIEnv* env, jobject jactivity, VkPhysicalDevice physicalDevice, VkDevice device, VkSwapchainKHR swapchain, uint64_t* pRefreshDuration)"
  },
  {
    "label": "SwappyVk_setWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setWindow(VkDevice device, VkSwapchainKHR swapchain, ANativeWindow* window)"
  },
  {
    "label": "SwappyVk_setSwapIntervalNS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setSwapIntervalNS(VkDevice device, VkSwapchainKHR swapchain, uint64_t swap_ns)"
  },
  {
    "label": "SwappyVk_queuePresent()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "SwappyVk_queuePresent(VkQueue queue, const VkPresentInfoKHR* pPresentInfo)"
  },
  {
    "label": "SwappyVk_destroySwapchain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_destroySwapchain(VkDevice device, VkSwapchainKHR swapchain)"
  },
  {
    "label": "SwappyVk_destroyDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_destroyDevice(VkDevice device)"
  },
  {
    "label": "SwappyVk_setAutoSwapInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setAutoSwapInterval(bool enabled)"
  },
  {
    "label": "SwappyVk_setAutoPipelineMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setAutoPipelineMode(bool enabled)"
  },
  {
    "label": "SwappyVk_setMaxAutoSwapIntervalNS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setMaxAutoSwapIntervalNS(uint64_t max_swap_ns)"
  },
  {
    "label": "SwappyVk_setFenceTimeoutNS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_setFenceTimeoutNS(uint64_t fence_timeout_ns)"
  },
  {
    "label": "SwappyVk_getFenceTimeoutNS()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "SwappyVk_getFenceTimeoutNS()"
  },
  {
    "label": "SwappyVk_injectTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_injectTracer(const SwappyTracer* tracer)"
  },
  {
    "label": "SwappyVk_uninjectTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_uninjectTracer(const SwappyTracer* tracer)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef struct SwappyVkFunctionProvider {)",
    "insertText": "bool(*init)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*getProcAddr)(const char* name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*close)()"
  },
  {
    "label": "SwappyVk_setFunctionProvider()",
    "kind": "Method",
    "detail": "Function (} SwappyVkFunctionProvider ; void)",
    "insertText": "SwappyVk_setFunctionProvider(const SwappyVkFunctionProvider* pSwappyVkFunctionProvider)"
  },
  {
    "label": "SwappyVk_getSwapIntervalNS()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "SwappyVk_getSwapIntervalNS(VkSwapchainKHR swapchain)"
  },
  {
    "label": "SwappyVk_getSupportedRefreshPeriodsNS()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SwappyVk_getSupportedRefreshPeriodsNS(uint64_t* out_refreshrates, int allocated_entries, VkSwapchainKHR swapchain)"
  },
  {
    "label": "SwappyVk_isEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwappyVk_isEnabled(VkSwapchainKHR swapchain, bool* isEnabled)"
  },
  {
    "label": "SwappyVk_enableStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_enableStats(VkSwapchainKHR swapchain, bool enabled)"
  },
  {
    "label": "SwappyVk_recordFrameStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_recordFrameStart(VkQueue queue, VkSwapchainKHR swapchain, uint32_t image)"
  },
  {
    "label": "SwappyVk_getStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_getStats(VkSwapchainKHR swapchain, SwappyStats *swappyStats)"
  },
  {
    "label": "SwappyVk_clearStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_clearStats(VkSwapchainKHR swapchain)"
  },
  {
    "label": "SwappyVk_resetFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_resetFramePacing(VkSwapchainKHR swapchain)"
  },
  {
    "label": "SwappyVk_enableFramePacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_enableFramePacing(VkSwapchainKHR swapchain, bool enable)"
  },
  {
    "label": "SwappyVk_enableBlockingWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwappyVk_enableBlockingWait(VkSwapchainKHR swapchain, bool enable)"
  }
]