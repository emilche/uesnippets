[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYS_BYTEORDER_H_ # define BASE_SYS_BYTEORDER_H_ # include<stdint . h> # include \" build / build_config . h \" # if)",
    "insertText": "defined(COMPILER_MSVC) #include <stdlib.h> #endif #if defined(COMPILER_MSVC) && !defined(__clang__)"
  },
  {
    "label": "ByteSwap()",
    "kind": "Method",
    "detail": "Function (BASE_BYTESWAPS_CONSTEXPR uint16_t)",
    "insertText": "ByteSwap(uint16_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) return _byteswap_ushort(x)"
  },
  {
    "label": "__builtin_bswap16()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__builtin_bswap16(x)"
  },
  {
    "label": "ByteSwap()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_BYTESWAPS_CONSTEXPR uint32_t)",
    "insertText": "ByteSwap(uint32_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) return _byteswap_ulong(x)"
  },
  {
    "label": "__builtin_bswap32()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__builtin_bswap32(x)"
  },
  {
    "label": "ByteSwap()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_BYTESWAPS_CONSTEXPR uint64_t)",
    "insertText": "ByteSwap(uint64_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) && !defined(__clang__) return _byteswap_uint64(x)"
  },
  {
    "label": "__builtin_bswap64()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__builtin_bswap64(x)"
  },
  {
    "label": "ByteSwapUintPtrT()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_BYTESWAPS_CONSTEXPR uintptr_t)",
    "insertText": "ByteSwapUintPtrT(uintptr_t x)"
  },
  {
    "label": "ByteSwapToLE16()",
    "kind": "Method",
    "detail": "Function (} BASE_BYTESWAPS_CONSTEXPR uint16_t)",
    "insertText": "ByteSwapToLE16(uint16_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ARCH_CPU_LITTLE_ENDIAN)"
  },
  {
    "label": "ByteSwap()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "ByteSwap(x)"
  },
  {
    "label": "ByteSwapToLE32()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_BYTESWAPS_CONSTEXPR uint32_t)",
    "insertText": "ByteSwapToLE32(uint32_t x)"
  },
  {
    "label": "ByteSwapToLE64()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_BYTESWAPS_CONSTEXPR uint64_t)",
    "insertText": "ByteSwapToLE64(uint64_t x)"
  },
  {
    "label": "NetToHost16()",
    "kind": "Method",
    "detail": "Function (# endif } BASE_BYTESWAPS_CONSTEXPR uint16_t)",
    "insertText": "NetToHost16(uint16_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ARCH_CPU_LITTLE_ENDIAN) return ByteSwap(x)"
  },
  {
    "label": "NetToHost32()",
    "kind": "Method",
    "detail": "Function (# else return x ; # endif } BASE_BYTESWAPS_CONSTEXPR uint32_t)",
    "insertText": "NetToHost32(uint32_t x)"
  },
  {
    "label": "NetToHost64()",
    "kind": "Method",
    "detail": "Function (# else return x ; # endif } BASE_BYTESWAPS_CONSTEXPR uint64_t)",
    "insertText": "NetToHost64(uint64_t x)"
  },
  {
    "label": "HostToNet16()",
    "kind": "Method",
    "detail": "Function (# else return x ; # endif } BASE_BYTESWAPS_CONSTEXPR uint16_t)",
    "insertText": "HostToNet16(uint16_t x)"
  },
  {
    "label": "HostToNet32()",
    "kind": "Method",
    "detail": "Function (# else return x ; # endif } BASE_BYTESWAPS_CONSTEXPR uint32_t)",
    "insertText": "HostToNet32(uint32_t x)"
  },
  {
    "label": "HostToNet64()",
    "kind": "Method",
    "detail": "Function (# else return x ; # endif } BASE_BYTESWAPS_CONSTEXPR uint64_t)",
    "insertText": "HostToNet64(uint64_t x)"
  }
]