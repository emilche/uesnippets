[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (private : struct FNode { std::atomic<FNode*> Next { nullptr } ; TTypeCompatibleBytes<T> Value ; } ; FNode Sentinel ; std::atomic<FNode*> Tail {& Sentinel } ; public :)",
    "insertText": "UE_NONCOPYABLE(TDepletableMpmcQueue)"
  },
  {
    "label": "TDepletableMpmcQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDepletableMpmcQueue()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* Node = Sentinel . Next .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(Node->Value.GetTypedPtr())"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Node)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Node = Next ; } } template<. . . ArgTypes> void)",
    "insertText": "Enqueue(ArgTypes&&... Args)"
  },
  {
    "label": "EnqueueAndReturnWasEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueAndReturnWasEmpty(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "EnqueueAndReturnWasEmpty()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes> bool)",
    "insertText": "EnqueueAndReturnWasEmpty(ArgTypes&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FNode* New)",
    "insertText": "new(AllocatorType::Malloc(sizeof(FNode), alignof(FNode)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&New->Value) T(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* Prev = Tail .)",
    "insertText": "exchange(New, std::memory_order_acq_rel)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Prev -> Next .)",
    "insertText": "store(New, std::memory_order_relaxed)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* First = Sentinel . Next .)",
    "insertText": "exchange(nullptr, std::memory_order_relaxed)"
  },
  {
    "label": "Deplete_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deplete_Internal(First, Last, Consumer)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Deplete_Internal()",
    "kind": "Method",
    "detail": "Function (} private : template<F> void)",
    "insertText": "Deplete_Internal(FNode* First, FNode* Last, const F& Consumer)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "GetNext(FNode* Node)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FNode* Next = nullptr ;)",
    "insertText": "while(Next == nullptr)"
  },
  {
    "label": "Consumer()",
    "kind": "Method",
    "detail": "Function (} ; return Next ; } ; auto Consume = [&)",
    "insertText": "Consumer(FNode* Node)"
  },
  {
    "label": "ValuePtr()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "ValuePtr(T*)"
  },
  {
    "label": "Consumer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consumer(MoveTemp(*ValuePtr))"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem(ValuePtr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "while(First != Last)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (FNode* Next =)",
    "insertText": "GetNext(First)"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consume(First)"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (First = Next ; })",
    "insertText": "Consume(Last)"
  }
]