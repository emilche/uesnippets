[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FContextMenuSuppressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextMenuSuppressor"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateFontMeasure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontMeasure"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "IPropertyTypeCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTypeCustomization"
  },
  {
    "label": "FSequencerTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTimeSliderController"
  },
  {
    "label": "FScrubberMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrubberMetrics"
  },
  {
    "label": "FScrubRangeToScreen",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrubRangeToScreen"
  },
  {
    "label": "FDrawTickArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawTickArgs"
  },
  {
    "label": "DragType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DragType"
  },
  {
    "label": "FSequencerTimeSliderController()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" ITimeSlider . h \" # include \" ISequencerModule . h \" # include \" TimeSliderArgs . h \" class FSlateWindowElementList ; struct FContextMenuSuppressor ; struct FSlateBrush ; class FSlateFontMeasure ; class FSequencer ; class IPropertyTypeCustomization ; class FSequencerTimeSliderController : public ITimeSliderController,public TSharedFromThis<FSequencerTimeSliderController> { public :)",
    "insertText": "FSequencerTimeSliderController(const FTimeSliderArgs& InArgs, TWeakPtr<FSequencer> InWeakSequencer)"
  },
  {
    "label": "FSequencerTimeSliderController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequencerTimeSliderController()"
  },
  {
    "label": "DetermineOptimalSpacing()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DetermineOptimalSpacing(float InPixelsPerInput, uint32 MinTick, float MinTickSpacing)"
  },
  {
    "label": "OnPaintTimeSlider()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintTimeSlider(bool bMirrorLabels, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTimeSliderMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTimeSliderMouseMove(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(TSharedRef<const SWidget> WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(TSharedRef<const SWidget> WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetDisplayRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetDisplayRate()"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (} FFrameRate)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (} FAnimatedRange)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "GetClampRange()",
    "kind": "Method",
    "detail": "Function (} FAnimatedRange)",
    "insertText": "GetClampRange()"
  },
  {
    "label": "GetPlayRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "GetPlayRange()"
  },
  {
    "label": "GetTimeBounds()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "GetTimeBounds()"
  },
  {
    "label": "GetSelectionRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FFrameNumber>)",
    "insertText": "GetSelectionRange()"
  },
  {
    "label": "GetScrubPosition()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "GetScrubPosition()"
  },
  {
    "label": "SetScrubPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScrubPosition(FFrameTime InTime, bool bEvaluate)"
  },
  {
    "label": "CommitScrubPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitScrubPosition(InTime, GetPlaybackStatus() == ETimeSliderPlaybackStatus::Scrubbing, bEvaluate)"
  },
  {
    "label": "SetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPlaybackStatus(ETimeSliderPlaybackStatus InStatus)"
  },
  {
    "label": "GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (ETimeSliderPlaybackStatus)",
    "insertText": "GetPlaybackStatus()"
  },
  {
    "label": "ClampViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampViewRange(double& NewRangeMin, double& NewRangeMax)"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(double NewRangeMin, double NewRangeMax, EViewRangeInterpolation Interpolation)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(double NewRangeMin, double NewRangeMax)"
  },
  {
    "label": "SetPlayRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayRange(FFrameNumber RangeStart, int32 RangeDuration)"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(const TRange<FFrameNumber>& NewRange)"
  },
  {
    "label": "ZoomByDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomByDelta(float InDelta, float ZoomBias = 0.5f)"
  },
  {
    "label": "PanByDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PanByDelta(float InDelta)"
  },
  {
    "label": "OnPaintViewArea()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintViewArea(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, bool bEnabled, const FPaintViewAreaArgs& Args)"
  },
  {
    "label": "FScrubRangeToScreen()",
    "kind": "Method",
    "detail": "Function (public : struct FScrubberMetrics { TRange<float> FrameExtentsPx ; TRange<float> HandleRangePx ; ESequencerScrubberStyle Style ; bool bDrawExtents ; } ; struct FScrubRangeToScreen { double ViewStart ; float PixelsPerInput ;)",
    "insertText": "FScrubRangeToScreen(const TRange<double>& InViewInput, const FVector2D& InWidgetSize)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (float ViewInputRange = InViewInput . Size<)",
    "insertText": "double()"
  },
  {
    "label": "GetLowerBoundValue()",
    "kind": "Method",
    "detail": "Function (ViewStart = InViewInput .)",
    "insertText": "GetLowerBoundValue()"
  },
  {
    "label": "ViewInputRange()",
    "kind": "Method",
    "detail": "Function (PixelsPerInput =)",
    "insertText": "ViewInputRange(InWidgetSize.X / ViewInputRange)"
  },
  {
    "label": "LocalXToInput()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "LocalXToInput(float ScreenX)"
  },
  {
    "label": "LocalDeltaXToDeltaInput()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "LocalDeltaXToDeltaInput(float ScreenDeltaX)"
  },
  {
    "label": "InputToLocalX()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "InputToLocalX(double Input)"
  },
  {
    "label": "SetIsEvaluating()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "SetIsEvaluating()"
  },
  {
    "label": "OnMouseMoveImpl()",
    "kind": "Method",
    "detail": "Function (bIsEvaluating = true ; } private : FReply)",
    "insertText": "OnMouseMoveImpl(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bFromTimeSlider)"
  },
  {
    "label": "CommitScrubPosition()",
    "kind": "Method",
    "detail": "Function (private : struct FDrawTickArgs ; void)",
    "insertText": "CommitScrubPosition(FFrameTime NewValue, bool bIsScrubbing, bool bEvaluate)"
  },
  {
    "label": "DrawTicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTicks(FSlateWindowElementList& OutDrawElements, const TRange<double>& ViewRange, const FScrubRangeToScreen& RangeToScreen, FDrawTickArgs& InArgs)"
  },
  {
    "label": "DrawSelectionRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawSelectionRange(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FScrubRangeToScreen& RangeToScreen, const FPaintPlaybackRangeArgs& Args)"
  },
  {
    "label": "DrawPlaybackRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawPlaybackRange(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FScrubRangeToScreen& RangeToScreen, const FPaintPlaybackRangeArgs& Args)"
  },
  {
    "label": "DrawSubSequenceRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawSubSequenceRange(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FScrubRangeToScreen& RangeToScreen, const FPaintPlaybackRangeArgs& Args)"
  },
  {
    "label": "DrawVerticalFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawVerticalFrames(const FGeometry& AllottedGeometry, const FScrubRangeToScreen& RangeToScreen, FSlateWindowElementList& OutDrawElements, int32 LayerId, const ESlateDrawEffect& DrawEffects)"
  },
  {
    "label": "DrawMarkedFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawMarkedFrames(const FGeometry& AllottedGeometry, const FScrubRangeToScreen& RangeToScreen, FSlateWindowElementList& OutDrawElements, int32 LayerId, const ESlateDrawEffect& DrawEffects, const FWidgetStyle& InWidgetStyle, bool bDrawLabels)"
  },
  {
    "label": "HitTestRangeStart()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HitTestRangeStart(const FScrubRangeToScreen& RangeToScreen, const TRange<double>& Range, float HitPixel)"
  },
  {
    "label": "HitTestRangeEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTestRangeEnd(const FScrubRangeToScreen& RangeToScreen, const TRange<double>& Range, float HitPixel)"
  },
  {
    "label": "HitTestMark()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTestMark(const FGeometry& AllottedGeometry, const FScrubRangeToScreen& RangeToScreen, float HitPixel, bool bTestLabelBox, int32* OutMarkIndex = nullptr, FFrameNumber* OutMarkFrameNumber = nullptr)"
  },
  {
    "label": "GetMarkLabelGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMarkLabelGeometry(const FGeometry& AllottedGeometry, const FScrubRangeToScreen& RangeToScreen, const FMovieSceneMarkedFrame& MarkedFrame, FVector2D& OutPosition, FVector2D& OutSize, bool& bIsDrawLeft)"
  },
  {
    "label": "SnapTimeToNearestKey()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "SnapTimeToNearestKey(const FPointerEvent& MouseEvent, const FScrubRangeToScreen& RangeToScreen, float CursorPos, FFrameTime InTime)"
  },
  {
    "label": "SetPlaybackRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeStart(FFrameNumber NewStart)"
  },
  {
    "label": "SetPlaybackRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeEnd(FFrameNumber NewEnd)"
  },
  {
    "label": "SetSelectionRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeStart(FFrameNumber NewStart)"
  },
  {
    "label": "SetSelectionRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeEnd(FFrameNumber NewEnd)"
  },
  {
    "label": "SetMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMark(FFrameNumber DiffFrame)"
  },
  {
    "label": "OpenSetPlaybackRangeMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OpenSetPlaybackRangeMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeScrubTimeFromMouse()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "ComputeScrubTimeFromMouse(const FGeometry& Geometry, const FPointerEvent& MouseEvent, FScrubRangeToScreen RangeToScreen)"
  },
  {
    "label": "ComputeFrameTimeFromMouse()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "ComputeFrameTimeFromMouse(const FGeometry& Geometry, FVector2D ScreenSpacePosition, FScrubRangeToScreen RangeToScreen, bool CheckSnapping = true)"
  },
  {
    "label": "HandleMarkSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMarkSelection(int32 InMarkIndex)"
  },
  {
    "label": "AddMarkAtFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMarkAtFrame(FFrameNumber FrameNumber)"
  },
  {
    "label": "DeleteMarkAtIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMarkAtIndex(int32 InMarkIndex)"
  },
  {
    "label": "DeleteAllMarks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllMarks()"
  },
  {
    "label": "GetScrubPixelMetrics()",
    "kind": "Method",
    "detail": "Function (private : FScrubberMetrics)",
    "insertText": "GetScrubPixelMetrics(const FQualifiedFrameTime& ScrubTime, const FScrubRangeToScreen& RangeToScreen, float DilationPixels = 0.f)"
  },
  {
    "label": "GetHitTestScrubPixelMetrics()",
    "kind": "Method",
    "detail": "Function (FScrubberMetrics)",
    "insertText": "GetHitTestScrubPixelMetrics(const FScrubRangeToScreen& RangeToScreen)"
  },
  {
    "label": "FContextMenuSuppressor()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FSequencer> WeakSequencer ; FTimeSliderArgs TimeSliderArgs ; const FSlateBrush* ScrubFillBrush ; const FSlateBrush* FrameBlockScrubHandleDownBrush,* VanillaScrubHandleDownBrush ; TSharedPtr<FSlateFontMeasure> FontMeasureService ; FSlateFontInfo SmallLayoutFont ; FSlateFontInfo SmallBoldLayoutFont ; float DistanceDragged ; enum DragType { DRAG_SCRUBBING_TIME,DRAG_SETTING_RANGE,DRAG_PLAYBACK_START,DRAG_PLAYBACK_END,DRAG_SELECTION_START,DRAG_SELECTION_END,DRAG_MARK,DRAG_NONE } ; DragType MouseDragType ; bool bMouseDownInRegion ; bool bPanning ; TOptional<FVector2D> MouseDownPosition [ 2 ] ; FGeometry MouseDownGeometry ; TRange<FFrameNumber> MouseDownPlaybackRange ; TRange<FFrameNumber> MouseDownSelectionRange ; TArray<TRange<double>> ViewRangeStack ; int32 HoverMarkIndex ; TMap<int32,FFrameNumber> DragMarkMap ; int32 ContextMenuSuppression ; bool bIsEvaluating = true ; FContextMenuSuppressor ; } ; struct FContextMenuSuppressor {)",
    "insertText": "FContextMenuSuppressor(TSharedRef<FSequencerTimeSliderController> InTimeSliderController) : TimeSliderController(InTimeSliderController)"
  },
  {
    "label": "FContextMenuSuppressor()",
    "kind": "Method",
    "detail": "Function (+ + TimeSliderController -> ContextMenuSuppression ; } ~)",
    "insertText": "FContextMenuSuppressor()"
  },
  {
    "label": "FContextMenuSuppressor()",
    "kind": "Method",
    "detail": "Function (- - TimeSliderController -> ContextMenuSuppression ; } private :)",
    "insertText": "FContextMenuSuppressor(const FContextMenuSuppressor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FContextMenuSuppressor&)",
    "insertText": "operator(const FContextMenuSuppressor&)"
  }
]