[
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "ICookProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookProfilerProvider"
  },
  {
    "label": "IEditableCookProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableCookProfilerProvider"
  },
  {
    "label": "FPackageData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" ProfilingDebugging / CookStats . h \" # include \" Templates / Function . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { struct FPackageData {)",
    "insertText": "FPackageData(uint64 InId)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (uint64 Id = - 1 ; const TCHAR* Name ; double LoadTimeIncl = 0 ; double LoadTimeExcl = 0 ; double SaveTimeIncl = 0 ; double SaveTimeExcl = 0 ; double BeginCacheForCookedPlatformDataIncl = 0 ; double BeginCacheForCookedPlatformDataExcl = 0 ; double IsCachedCookedPlatformDataLoadedIncl = 0 ; double IsCachedCookedPlatformDataLoadedExcl = 0 ; const TCHAR* AssetClass ; } ; class ICookProfilerProvider : public IProvider { public : typedef TFunctionRef<)",
    "insertText": "bool(const FPackageData&)"
  },
  {
    "label": "ICookProfilerProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ICookProfilerProvider()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRead()"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "GetNumPackages()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumPackages()"
  },
  {
    "label": "EnumeratePackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumeratePackages(double StartTime, double EndTime, EnumeratePackagesCallback Callback)"
  },
  {
    "label": "CreateAggregation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAggregation(TArray64<FPackageData>& OutPackages)"
  },
  {
    "label": "IEditableCookProfilerProvider()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableCookProfilerProvider : public IEditableProvider { public : ~)",
    "insertText": "IEditableCookProfilerProvider()"
  },
  {
    "label": "BeginEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEdit()"
  },
  {
    "label": "EndEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEdit()"
  },
  {
    "label": "EditAccessCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditAccessCheck()"
  },
  {
    "label": "EditPackage()",
    "kind": "Method",
    "detail": "Function (FPackageData*)",
    "insertText": "EditPackage(uint64 Id)"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScopeEntry(uint32 ThreadId, uint64 InPackageId, double Timestamp, EPackageEventStatType InType, bool InIsEnterScope)"
  },
  {
    "label": "GetCookProfilerProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetCookProfilerProviderName()"
  },
  {
    "label": "ReadCookProfilerProvider()",
    "kind": "Method",
    "detail": "Function (const ICookProfilerProvider*)",
    "insertText": "ReadCookProfilerProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "EditCookProfilerProvider()",
    "kind": "Method",
    "detail": "Function (IEditableCookProfilerProvider*)",
    "insertText": "EditCookProfilerProvider(IAnalysisSession& Session)"
  }
]