[
  {
    "label": "FMixerSourceVoiceBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceVoiceBuffer"
  },
  {
    "label": "FRawPCMDataBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawPCMDataBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMixerSourceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceBuffer"
  },
  {
    "label": "FMixerSourceBufferInitArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceBufferInitArgs"
  },
  {
    "label": "FDiagnosticState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiagnosticState"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "GetNextBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioMixerBuffer . h \" # include \" AudioMixerSourceManager . h \" # include \" Sound / SoundWave . h \" # include \" Sound / SoundGenerator . h \" namespace Audio { struct FMixerSourceVoiceBuffer ; const int32 MAX_BUFFERS_QUEUED = 3 ; const int32 LOOP_FOREVER = - 1 ; struct FRawPCMDataBuffer { uint8* Data ; uint32 DataSize ; int32 LoopCount ; uint32 CurrentSample ; uint32 NumSamples ; bool)",
    "insertText": "GetNextBuffer(FMixerSourceVoiceBuffer* OutSourceBufferPtr, const uint32 NumSampleToGet)"
  },
  {
    "label": "FRawPCMDataBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRawPCMDataBuffer() : Data(nullptr) , DataSize(0) , LoopCount(0) , CurrentSample(0) , NumSamples(0)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EBufferReadMode : uint8 { Asynchronous,AsynchronousSkipFirstFrame } ; using FMixerSourceBufferPtr = TSharedPtr<class FMixerSourceBuffer,ESPMode::ThreadSafe> ; struct FMixerSourceBufferInitArgs { FDeviceId AudioDeviceID = 0 ; uint64 AudioComponentID = 0 ; uint64 InstanceID = 0 ; int32 SampleRate = 0 ; int32 AudioMixerNumOutputFrames = 0 ; FMixerBuffer* Buffer = nullptr ; USoundWave* SoundWave = nullptr ; ELoopingMode LoopingMode = ELoopingMode::LOOP_Never ; float StartTime = 0 . 0 f ; bool bIsSeeking = false ; bool bForceSyncDecode = false ; bool bIsPreviewSound = false ; } ; class FMixerSourceBuffer : public ISoundWaveClient { public : FMixerSourceBufferPtr)",
    "insertText": "Create(FMixerSourceBufferInitArgs& InArgs, TArray<FAudioParameter>&& InDefaultParams=TArray<FAudioParameter>())"
  },
  {
    "label": "FMixerSourceBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMixerSourceBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "SetDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecoder(ICompressedAudioInfo* InCompressedAudioInfo)"
  },
  {
    "label": "SetPCMData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPCMData(const FRawPCMDataBuffer& InPCMDataBuffer)"
  },
  {
    "label": "SetCachedRealtimeFirstBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedRealtimeFirstBuffers(TArray<uint8>&& InPrecachedBuffer)"
  },
  {
    "label": "OnBufferEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferEnd()"
  },
  {
    "label": "GetNumBuffersQueued()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBuffersQueued()"
  },
  {
    "label": "GetNextBuffer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMixerSourceVoiceBuffer,ESPMode::ThreadSafe>)",
    "insertText": "GetNextBuffer()"
  },
  {
    "label": "DidBufferLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidBufferLoop()"
  },
  {
    "label": "IsAsyncTaskInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncTaskInProgress()"
  },
  {
    "label": "IsAsyncTaskDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncTaskDone()"
  },
  {
    "label": "GetDiagnosticState()",
    "kind": "Method",
    "detail": "Function (struct FDiagnosticState { FName WaveName ; float RunTimeInSecs = 0 . f ; bool bInFlight = false ; bool bProcedural = false ; } ; void)",
    "insertText": "GetDiagnosticState(FDiagnosticState& OutState)"
  },
  {
    "label": "EnsureAsyncTaskFinishes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureAsyncTaskFinishes()"
  },
  {
    "label": "OnBeginGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginGenerate()"
  },
  {
    "label": "OnEndGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndGenerate()"
  },
  {
    "label": "ClearWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWave()"
  },
  {
    "label": "IsGeneratorFinished()",
    "kind": "Method",
    "detail": "Function (SoundWave = nullptr ; } bool)",
    "insertText": "IsGeneratorFinished()"
  },
  {
    "label": "GetCPUCoreUtilization()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_AUDIO_DEBUG double)",
    "insertText": "GetCPUCoreUtilization()"
  },
  {
    "label": "GetRelativeRenderCost()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetRelativeRenderCost()"
  },
  {
    "label": "FMixerSourceBuffer()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMixerSourceBuffer(FMixerSourceBufferInitArgs& InArgs, TArray<FAudioParameter>&& InDefaultParams)"
  },
  {
    "label": "SubmitInitialPCMBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitInitialPCMBuffers()"
  },
  {
    "label": "SubmitInitialRealtimeBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitInitialRealtimeBuffers()"
  },
  {
    "label": "SubmitRealTimeSourceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitRealTimeSourceData(const bool bFinishedOrLooped)"
  },
  {
    "label": "ProcessRealTimeSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRealTimeSource()"
  },
  {
    "label": "SubmitBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitBuffer(TSharedPtr<FMixerSourceVoiceBuffer, ESPMode::ThreadSafe> InSourceVoiceBuffer)"
  },
  {
    "label": "DeleteDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteDecoder()"
  },
  {
    "label": "UpdateCPUCoreUtilization()",
    "kind": "Method",
    "detail": "Function (int32 NumBuffersQeueued ; FRawPCMDataBuffer RawPCMDataBuffer ; TArray<TSharedPtr<FMixerSourceVoiceBuffer,ESPMode::ThreadSafe>> SourceVoiceBuffers ; TQueue<TSharedPtr<FMixerSourceVoiceBuffer,ESPMode::ThreadSafe>> BufferQueue ; int32 CurrentBuffer ; USoundWave* SoundWave ; ISoundGeneratorPtr SoundGenerator ; IAudioTask* AsyncRealtimeAudioTask ; ICompressedAudioInfo* DecompressionState ; ELoopingMode LoopingMode ; int32 NumChannels ; Audio::EBufferType::Type BufferType ; int32 NumPrecacheFrames ; Audio::FDeviceId AuioDeviceID ; uint64 InstanceID ; TArray<uint8> CachedRealtimeFirstBuffer ; FName WaveName ; uint64 AsyncTaskStartTimeInCycles = 0 ; # if ENABLE_AUDIO_DEBUG int32 SampleRate = 0 ; std::atomic<double> CPUCoreUtilization = 0 . 0 ; void)",
    "insertText": "UpdateCPUCoreUtilization(double InCPUTime, double InAudioTime)"
  },
  {
    "label": "SetRelativeRenderCost()",
    "kind": "Method",
    "detail": "Function (# endif std::atomic<float> RelativeRenderCost = 1 . 0 f ; void)",
    "insertText": "SetRelativeRenderCost(float InRelativeRenderCost)"
  },
  {
    "label": "OnBeginDestroy()",
    "kind": "Method",
    "detail": "Function (FCriticalSection SoundWaveCritSec ; FCriticalSection DecodeTaskCritSec ; uint32 bInitialized : 1 ; uint32 bBufferFinished : 1 ; uint32 bPlayedCachedBuffer : 1 ; uint32 bIsSeeking : 1 ; uint32 bLoopCallback : 1 ; uint32 bProcedural : 1 ; uint32 bIsBus : 1 ; uint32 bForceSyncDecode : 1 ; uint32 bHasError : 1 ; bool)",
    "insertText": "OnBeginDestroy(class USoundWave* Wave)"
  },
  {
    "label": "OnIsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnIsReadyForFinishDestroy(class USoundWave* Wave)"
  },
  {
    "label": "OnFinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishDestroy(class USoundWave* Wave)"
  }
]