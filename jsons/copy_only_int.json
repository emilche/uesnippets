[
  {
    "label": "CopyOnlyInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyOnlyInt"
  },
  {
    "label": "CopyOnlyInt()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_COPY_ONLY_INT_H_ # define BASE_TEST_COPY_ONLY_INT_H_ namespace base { class CopyOnlyInt { public :)",
    "insertText": "CopyOnlyInt(int data = 1) : data_(data)"
  },
  {
    "label": "CopyOnlyInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CopyOnlyInt(const CopyOnlyInt& other) : data_(other.data_)"
  },
  {
    "label": "CopyOnlyInt()",
    "kind": "Method",
    "detail": "Function (+ + num_copies_ ; } ~)",
    "insertText": "CopyOnlyInt()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (data_ = 0 ; } bool)",
    "insertText": "operator(const CopyOnlyInt& lhs, const CopyOnlyInt& rhs)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "data()"
  },
  {
    "label": "num_copies()",
    "kind": "Method",
    "detail": "Function (num_copies_ = 0 ; } int)",
    "insertText": "num_copies()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyOnlyInt&)",
    "insertText": "operator(CopyOnlyInt&)"
  }
]