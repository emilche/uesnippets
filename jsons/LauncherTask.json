[
  {
    "label": "FLauncherTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLauncherTask"
  },
  {
    "label": "FLauncherTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" ILauncherTask . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" Launcher / LauncherTaskChainState . h \" # include \" HAL / RunnableThread . h \" class FLauncherTask : public FRunnable,public ILauncherTask { public :)",
    "insertText": "FLauncherTask(const FString& InName, const FString& InDesc) : Name(InName) , Desc(InDesc)"
  },
  {
    "label": "AddContinuation()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "AddContinuation(const TSharedPtr<FLauncherTask>& Task)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Continuations .)",
    "insertText": "AddUnique(Task)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Execute(const FLauncherTaskChainState& ChainState)"
  },
  {
    "label": "TaskName()",
    "kind": "Method",
    "detail": "Function (LocalChainState = ChainState ; FString)",
    "insertText": "TaskName(TEXT(\"FLauncherTask\"))"
  },
  {
    "label": "AppendInt()",
    "kind": "Method",
    "detail": "Function (TaskName .)",
    "insertText": "AppendInt(TaskCounter.Increment())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Status = ELauncherTaskStatus::Busy ; Thread =)",
    "insertText": "Create(this, *TaskName)"
  },
  {
    "label": "GetContinuations()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedPtr<FLauncherTask>>&)",
    "insertText": "GetContinuations()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } } return Result ; } public : bool)",
    "insertText": "Init()"
  },
  {
    "label": "UtcNow()",
    "kind": "Method",
    "detail": "Function (StartTime =)",
    "insertText": "UtcNow()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(0.5f)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (TaskStarted .)",
    "insertText": "Broadcast(Name)"
  },
  {
    "label": "PerformTask()",
    "kind": "Method",
    "detail": "Function (bool bSucceeded =)",
    "insertText": "PerformTask(LocalChainState)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Status = ELauncherTaskStatus::Completed ; } else)",
    "insertText": "if(bCancelling)"
  },
  {
    "label": "ExecuteContinuations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteContinuations()"
  },
  {
    "label": "CancelContinuations()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CancelContinuations()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCancelling = true ;)",
    "insertText": "if(Status == ELauncherTaskStatus::Pending)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Status == ELauncherTaskStatus::Busy)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(EndTime - StartTime)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "OnStarted()",
    "kind": "Method",
    "detail": "Function (} FOnTaskStartedDelegate&)",
    "insertText": "OnStarted()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Continuations [ ContinuationIndex ] ->)",
    "insertText": "Execute(LocalChainState)"
  }
]