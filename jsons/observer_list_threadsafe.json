[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Dispatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dispatcher"
  },
  {
    "label": "NotificationDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotificationDataBase"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "ObserverType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverType"
  },
  {
    "label": "ObserverListThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverListThreadSafe"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NotificationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotificationData"
  },
  {
    "label": "ObserverTaskRunnerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObserverTaskRunnerInfo"
  },
  {
    "label": "ObserverListThreadSafeBase()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_OBSERVER_LIST_THREADSAFE_H_ # define BASE_OBSERVER_LIST_THREADSAFE_H_ # include<unordered_map> # include<utility> # include \" base / base_export . h \" # include \" base / bind . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / containers / contains . h \" # include \" base / dcheck_is_on . h \" # include \" base / lazy_instance . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / ref_counted . h \" # include \" base / observer_list . h \" # include \" base / synchronization / lock . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / threading / sequenced_task_runner_handle . h \" # include \" base / threading / thread_local . h \" # include \" build / build_config . h \" namespace base { namespace internal { class BASE_EXPORT ObserverListThreadSafeBase : public RefCountedThreadSafe<ObserverListThreadSafeBase> { public :)",
    "insertText": "ObserverListThreadSafeBase()"
  },
  {
    "label": "ObserverListThreadSafeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObserverListThreadSafeBase(const ObserverListThreadSafeBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ObserverListThreadSafeBase&)",
    "insertText": "operator(const ObserverListThreadSafeBase&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : template<ObserverType,Method> struct Dispatcher ; template<ObserverType,ReceiverType,. . . Params> struct Dispatcher<ObserverType,)",
    "insertText": "void(ReceiverType::*)(Params...)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(void (ReceiverType::*m)(Params...), Params... params, ObserverType* obj)"
  },
  {
    "label": "NotificationDataBase()",
    "kind": "Method",
    "detail": "Function (} } ; struct NotificationDataBase {)",
    "insertText": "NotificationDataBase(void* observer_list_in, const Location& from_here_in) : observer_list(observer_list_in), from_here(from_here_in)"
  },
  {
    "label": "ObserverListThreadSafe()",
    "kind": "Method",
    "detail": "Function (LazyInstance<ThreadLocalPointer<const NotificationDataBase>>::Leaky tls_current_notification_ ; private : class RefCountedThreadSafe<ObserverListThreadSafeBase> ; } ; } template<class ObserverType> class ObserverListThreadSafe : public internal::ObserverListThreadSafeBase { public : enum class AddObserverResult { kBecameNonEmpty,kWasAlreadyNonEmpty,} ; enum class RemoveObserverResult { kWasOrBecameEmpty,kRemainsNonEmpty,} ;)",
    "insertText": "ObserverListThreadSafe()"
  },
  {
    "label": "ObserverListThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObserverListThreadSafe(ObserverListPolicy policy) : policy_(policy)"
  },
  {
    "label": "ObserverListThreadSafe()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ObserverListThreadSafe(const ObserverListThreadSafe&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ObserverListThreadSafe&)",
    "insertText": "operator(const ObserverListThreadSafe&)"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (AddObserverResult)",
    "insertText": "AddObserver(ObserverType* observer)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(SequencedTaskRunnerHandle::IsSet()) << \"An observer can only be registered when SequencedTaskRunnerHandle \" \"is set. If this is in a unit test, you're likely merely missing a \" \"base::test::(SingleThread)TaskEnvironment in your fixture. \" \"Otherwise, try running this code on a named thread (main/UI/IO)"
  },
  {
    "label": "auto_lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "auto_lock(lock_)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool was_empty = observers_ .)",
    "insertText": "empty()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!Contains(observers_, observer))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const scoped_refptr<SequencedTaskRunner> task_runner =)",
    "insertText": "Get()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (const size_t observer_id = + + observer_id_counter_ ; ObserverTaskRunnerInfo task_info = { task_runner,observer_id } ; observers_ [ observer ] =)",
    "insertText": "move(task_info)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const NotificationDataBase* current_notification = tls_current_notification_ .)",
    "insertText": "Get().Get()"
  },
  {
    "label": "NotificationData()",
    "kind": "Method",
    "detail": "Function (const NotificationData* notification_data = static_cast<const)",
    "insertText": "NotificationData(current_notification)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (task_runner ->)",
    "insertText": "PostTask(current_notification->from_here, BindOnce(&ObserverListThreadSafe<ObserverType>::NotifyWrapper, this, UnsafeDanglingUntriaged(observer), NotificationData(this, observer_id, current_notification->from_here, notification_data->method)))"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (} } return was_empty ? AddObserverResult::kBecameNonEmpty : AddObserverResult::kWasAlreadyNonEmpty ; } RemoveObserverResult)",
    "insertText": "RemoveObserver(ObserverType* observer)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (observers_ .)",
    "insertText": "erase(observer)"
  },
  {
    "label": "AssertEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertEmpty()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() AutoLock auto_lock(lock_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(observers_.empty())"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (# endif } template<Method,. . . Params> void)",
    "insertText": "Notify(const Location& from_here, Method m, Params&&... params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (RepeatingCallback<)",
    "insertText": "void(ObserverType*)> method = BindRepeating(&Dispatcher<ObserverType, Method>::Run, m, std::forward<Params>(params)...)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (observer . second . task_runner ->)",
    "insertText": "PostTask(from_here, BindOnce(&ObserverListThreadSafe<ObserverType>::NotifyWrapper, this, base::UnsafeDanglingUntriaged(observer.first), NotificationData(this, observer.second.observer_id, from_here, method)))"
  },
  {
    "label": "NotificationData()",
    "kind": "Method",
    "detail": "Function (} } private : class RefCountedThreadSafe<ObserverListThreadSafeBase> ; struct NotificationData : public NotificationDataBase {)",
    "insertText": "NotificationData(ObserverListThreadSafe* observer_list_in, size_t observer_id_in, const Location& from_here_in, const RepeatingCallback<void(ObserverType*)>& method_in) : NotificationDataBase(observer_list_in, from_here_in), method(method_in), observer_id(observer_id_in)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} RepeatingCallback<)",
    "insertText": "void(ObserverType*)"
  },
  {
    "label": "NotifyWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWrapper(ObserverType* observer, const NotificationData& notification)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(notification.observer_list, this)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = observers_ .)",
    "insertText": "find(observer)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (tls_current_notification .)",
    "insertText": "Set(&notification)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (notification . method .)",
    "insertText": "Run(observer)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (tls_current_notification .)",
    "insertText": "Set(previous_notification)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} const ObserverListPolicy policy_ = ObserverListPolicy::ALL ; Lock lock_ ; size_t observer_id_counter_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]