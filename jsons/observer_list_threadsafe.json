[
  {
    "label": "previously",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "previously"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Dispatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dispatcher"
  },
  {
    "label": "Dispatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dispatcher"
  },
  {
    "label": "NotificationDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotificationDataBase"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "ObserverType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverType"
  },
  {
    "label": "ObserverListThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverListThreadSafe"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "NotificationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NotificationData"
  },
  {
    "label": "ObserverTaskRunnerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObserverTaskRunnerInfo"
  },
  {
    "label": "auto_lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "auto_lock(lock_)"
  },
  {
    "label": "auto_lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "auto_lock(lock_)"
  },
  {
    "label": "auto_lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "auto_lock(lock_)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "lock(lock_)"
  },
  {
    "label": "auto_lock()",
    "kind": "Method",
    "detail": "Function (AutoLock)",
    "insertText": "auto_lock(lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (observers_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]