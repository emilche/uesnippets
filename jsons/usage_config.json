[
  {
    "label": "FlagsUsageConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagsUsageConfig"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_USAGE_CONFIG_H_ # define ABSL_FLAGS_USAGE_CONFIG_H_ # include<functional> # include<string> # include \" absl / base / config . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace flags_internal { using FlagKindFilter = std::function<)",
    "insertText": "bool(absl::string_view)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (} struct FlagsUsageConfig { flags_internal::FlagKindFilter contains_helpshort_flags ; flags_internal::FlagKindFilter contains_help_flags ; flags_internal::FlagKindFilter contains_helppackage_flags ; std::function<)",
    "insertText": "string()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "string(absl::string_view)"
  },
  {
    "label": "SetFlagsUsageConfig()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetFlagsUsageConfig(FlagsUsageConfig usage_config)"
  },
  {
    "label": "GetUsageConfig()",
    "kind": "Method",
    "detail": "Function (namespace flags_internal { FlagsUsageConfig)",
    "insertText": "GetUsageConfig()"
  },
  {
    "label": "ReportUsageError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportUsageError(absl::string_view msg, bool is_fatal)"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (} ABSL_NAMESPACE_END } \" C \" { void)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslInternalReportFatalUsageError)( absl::string_view)"
  }
]