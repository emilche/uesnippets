[
  {
    "label": "DOTGraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DOTGraphTraits"
  },
  {
    "label": "PassRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassRegistry"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "DOTGraphTraits()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_CFGPRINTER_H # define LLVM_ANALYSIS_CFGPRINTER_H # include \" llvm / IR / CFG . h \" # include \" llvm / IR / Constants . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / Support / GraphWriter . h \" namespace llvm { template<> struct DOTGraphTraits<const Function*> : public DefaultDOTGraphTraits {)",
    "insertText": "DOTGraphTraits(bool isSimple=false) : DefaultDOTGraphTraits(isSimple)"
  },
  {
    "label": "getGraphName()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "getGraphName(const Function *F)"
  },
  {
    "label": "getSimpleNodeLabel()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "getSimpleNodeLabel(const BasicBlock *Node, const Function *)"
  },
  {
    "label": "OS()",
    "kind": "Method",
    "detail": "Function (std::string Str ; raw_string_ostream)",
    "insertText": "OS(Str)"
  },
  {
    "label": "printAsOperand()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "printAsOperand(OS, false)"
  },
  {
    "label": "getCompleteNodeLabel()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "getCompleteNodeLabel(const BasicBlock *Node, const Function *)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (OS<<\" : \" ; } OS<<* Node ; std::string OutStr = OS .)",
    "insertText": "str()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned ColNum = 0 ; unsigned LastSpace = 0 ;)",
    "insertText": "for(unsigned i = 0; i != OutStr.length(); ++i)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (OutStr [ i ] = ' \\ \\ ' ; OutStr .)",
    "insertText": "insert(OutStr.begin()+i+1, 'l')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ColNum = 0 ; LastSpace = 0 ; } else)",
    "insertText": "if(OutStr[i] == ';')"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (unsigned Idx = OutStr .)",
    "insertText": "find('\\n', i+1)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (OutStr .)",
    "insertText": "erase(OutStr.begin()+i, OutStr.begin()+Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - i ; } else)",
    "insertText": "if(ColNum == MaxColumns)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (OutStr .)",
    "insertText": "insert(LastSpace, \"\\\\l...\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ColNum = i - LastSpace ; LastSpace = 0 ; i + = 3 ; } else + + ColNum ;)",
    "insertText": "if(OutStr[i] == ' ')"
  },
  {
    "label": "getNodeLabel()",
    "kind": "Method",
    "detail": "Function (} return OutStr ; } std::string)",
    "insertText": "getNodeLabel(const BasicBlock *Node, const Function *Graph)"
  },
  {
    "label": "getEdgeSourceLabel()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "getEdgeSourceLabel(const BasicBlock *Node, succ_const_iterator I)"
  },
  {
    "label": "getSuccessorIndex()",
    "kind": "Method",
    "detail": "Function (unsigned SuccNo = I .)",
    "insertText": "getSuccessorIndex()"
  },
  {
    "label": "getCaseValue()",
    "kind": "Method",
    "detail": "Function (OS<<Case .)",
    "insertText": "getCaseValue()->getValue()"
  },
  {
    "label": "createCFGPrinterPass()",
    "kind": "Method",
    "detail": "Function (} return \" \" ; } } ; } namespace llvm { class PassRegistry ; class FunctionPass ; FunctionPass*)",
    "insertText": "createCFGPrinterPass()"
  },
  {
    "label": "createCFGOnlyPrinterPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createCFGOnlyPrinterPass()"
  },
  {
    "label": "initializeCFGPrinterPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeCFGPrinterPasses(PassRegistry &Registry)"
  }
]