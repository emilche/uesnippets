[
  {
    "label": "FCameraControllerUserImpulseData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraControllerUserImpulseData"
  },
  {
    "label": "FCameraControllerConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCameraControllerConfig"
  },
  {
    "label": "FEditorCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCameraController"
  },
  {
    "label": "FCameraControllerUserImpulseData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FCameraControllerUserImpulseData { public : float MoveForwardBackwardImpulse ; float MoveRightLeftImpulse ; float MoveUpDownImpulse ; float RotateYawImpulse ; float RotatePitchImpulse ; float RotateRollImpulse ; float RotateYawVelocityModifier ; float RotatePitchVelocityModifier ; float RotateRollVelocityModifier ; float ZoomOutInImpulse ;)",
    "insertText": "FCameraControllerUserImpulseData() : MoveForwardBackwardImpulse( 0.0f ), MoveRightLeftImpulse( 0.0f ), MoveUpDownImpulse( 0.0f ), RotateYawImpulse( 0.0f ), RotatePitchImpulse( 0.0f ), RotateRollImpulse( 0.0f ), RotateYawVelocityModifier( 0.0f ), RotatePitchVelocityModifier( 0.0f ), RotateRollVelocityModifier( 0.0f ), ZoomOutInImpulse( 0.0f)"
  },
  {
    "label": "FCameraControllerConfig()",
    "kind": "Method",
    "detail": "Function (} } ; class FCameraControllerConfig { public : float ImpulseDeadZoneAmount ; bool bUsePhysicsBasedMovement ; float MovementAccelerationRate ; float MovementVelocityDampingAmount ; float MaximumMovementSpeed ; bool bUsePhysicsBasedRotation ; bool bForceRotationalPhysics ; float RotationAccelerationRate ; float RotationVelocityDampingAmount ; float MaximumRotationSpeed ; float MinimumAllowedPitchRotation ; float MaximumAllowedPitchRotation ; bool bEnableFOVRecoil ; bool bUsePhysicsBasedFOV ; float FOVAccelerationRate ; float FOVVelocityDampingAmount ; float MaximumFOVSpeed ; float MinimumAllowedFOV ; float MaximumAllowedFOV ; float TranslationMultiplier ; float RotationMultiplier ; float ZoomMultiplier ; float PitchTrim ; bool bInvertX ; bool bInvertY ; bool bPlanarCamera ; bool bLockedPitch ;)",
    "insertText": "FCameraControllerConfig() : ImpulseDeadZoneAmount( 0.2f ), bUsePhysicsBasedMovement( true ), MovementAccelerationRate( 20000.0f ), MovementVelocityDampingAmount( 10.0f ), MaximumMovementSpeed( MAX_FLT ), bUsePhysicsBasedRotation( false ), bForceRotationalPhysics( false ), RotationAccelerationRate( 1600.0f ), RotationVelocityDampingAmount( 12.0f ), MaximumRotationSpeed( MAX_FLT ), MinimumAllowedPitchRotation( -90.0f ), MaximumAllowedPitchRotation( 90.0f ), bEnableFOVRecoil( true ), bUsePhysicsBasedFOV( true ), FOVAccelerationRate( 1200.0f ), FOVVelocityDampingAmount( 10.0f ), MaximumFOVSpeed( MAX_FLT ), MinimumAllowedFOV( 5.0f ), MaximumAllowedFOV( 170.0f ), TranslationMultiplier(1.0f), RotationMultiplier(1.0f), ZoomMultiplier(1.0f), PitchTrim(0.0f), bInvertX(false), bInvertY(false), bPlanarCamera(false), bLockedPitch(true)"
  },
  {
    "label": "FEditorCameraController()",
    "kind": "Method",
    "detail": "Function (} } ; class FEditorCameraController { public :)",
    "insertText": "FEditorCameraController()"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConfig(const FCameraControllerConfig& InConfig)"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (Config = InConfig ; } FCameraControllerConfig&)",
    "insertText": "GetConfig()"
  },
  {
    "label": "IsRotating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRotating(void)"
  },
  {
    "label": "ResetVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetVelocity()"
  },
  {
    "label": "ApplyImpulseDeadZone()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplyImpulseDeadZone(const FCameraControllerUserImpulseData& InUserImpulse, FCameraControllerUserImpulseData& OutUserImpulse, bool& bOutAnyImpulseData)"
  },
  {
    "label": "UpdatePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePosition(const FCameraControllerUserImpulseData& UserImpulse, const float DeltaTime, const float MovementSpeedScale, const FVector& CameraEuler, FVector& InOutCameraPosition)"
  },
  {
    "label": "UpdateFOV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFOV(const FCameraControllerUserImpulseData& UserImpulse, const float DeltaTime, float& InOutCameraFOV)"
  },
  {
    "label": "ApplyRecoil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRecoil(const float DeltaTime, const bool bAllowRecoilIfNoImpulse, bool bAnyUserImpulse, float& InOutCameraFOV)"
  },
  {
    "label": "UpdateRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRotation(const FCameraControllerUserImpulseData& UserImpulse, const float DeltaTime, FVector &InOutCameraEuler)"
  }
]