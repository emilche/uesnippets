[
  {
    "label": "FSafeRecyclableEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSafeRecyclableEvent"
  },
  {
    "label": "TEventPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEventPool"
  },
  {
    "label": "FSafeRecyclableEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / LockFreeList . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Event . h \" # ifndef USE_EVENT_POOLING # define USE_EVENT_POOLING 1 # endif class FSafeRecyclableEvent final : public FEvent { public : FEvent* InnerEvent ;)",
    "insertText": "FSafeRecyclableEvent(FEvent* InInnerEvent) : InnerEvent(InInnerEvent)"
  },
  {
    "label": "FSafeRecyclableEvent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSafeRecyclableEvent()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (InnerEvent = nullptr ; } bool)",
    "insertText": "Create(bool bIsManualReset = false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return InnerEvent ->)",
    "insertText": "Create(bIsManualReset)"
  },
  {
    "label": "IsManualReset()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "IsManualReset()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Trigger()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Wait(uint32 WaitTime, const bool bIgnoreThreadIdleStats = false)"
  },
  {
    "label": "TEventPool()",
    "kind": "Method",
    "detail": "Function (} } ; template<EEventMode PoolType> class TEventPool { public : # if USE_EVENT_POOLING ~)",
    "insertText": "TEventPool()"
  },
  {
    "label": "EmptyPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyPool()"
  },
  {
    "label": "GetEventFromPool()",
    "kind": "Method",
    "detail": "Function (} # endif FEvent*)",
    "insertText": "GetEventFromPool()"
  },
  {
    "label": "ReturnToPool()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReturnToPool(FEvent* Event)"
  },
  {
    "label": "SafeEvent()",
    "kind": "Method",
    "detail": "Function (FSafeRecyclableEvent*)",
    "insertText": "SafeEvent(FSafeRecyclableEvent*)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# if USE_EVENT_POOLING)",
    "insertText": "while(FEvent* Event = Pool.Pop())"
  },
  {
    "label": "GetRawEvent()",
    "kind": "Method",
    "detail": "Function (delete Event ; } # endif } FEvent*)",
    "insertText": "GetRawEvent()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (FEvent* Event = # if USE_EVENT_POOLING Pool .)",
    "insertText": "Pop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else nullptr ; # endif)",
    "insertText": "if(Event == nullptr)"
  },
  {
    "label": "CreateSynchEvent()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS Event =)",
    "insertText": "CreateSynchEvent(PoolType == EEventMode::ManualReset)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS })",
    "insertText": "check(Event)"
  },
  {
    "label": "AdvanceStats()",
    "kind": "Method",
    "detail": "Function (Event ->)",
    "insertText": "AdvanceStats()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Pool .)",
    "insertText": "Push(Event)"
  }
]