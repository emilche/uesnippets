[
  {
    "label": "FWorldTreeItemID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldTreeItemID"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWorldTreeItemID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / MaxSizeof . h \" # include \" UObject / ObjectKey . h \" namespace WorldHierarchy { struct FWorldTreeItemID { public : enum class EType : uint8 { Object,Folder,MissingObject,Null,} ;)",
    "insertText": "FWorldTreeItemID() : Type(EType::Null), CachedHash(0)"
  },
  {
    "label": "FWorldTreeItemID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldTreeItemID(const UObject* InObject, FName ItemName) : Type(EType::Object)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) FObjectKey(InObject)"
  },
  {
    "label": "CalculateTypeHash()",
    "kind": "Method",
    "detail": "Function (CachedHash =)",
    "insertText": "CalculateTypeHash()"
  },
  {
    "label": "CreateAsMissing()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CreateAsMissing(ItemName)"
  },
  {
    "label": "FWorldTreeItemID()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FWorldTreeItemID(const FObjectKey& InKey) : Type(EType::Object)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) FObjectKey(InKey)"
  },
  {
    "label": "FWorldTreeItemID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldTreeItemID(const FName& InFolder) : Type(EType::Folder)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) FName(InFolder)"
  },
  {
    "label": "FWorldTreeItemID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldTreeItemID(const FWorldTreeItemID& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = Other ; } FWorldTreeItemID&)",
    "insertText": "operator(const FWorldTreeItemID& Other)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (Type = Other . Type ;)",
    "insertText": "switch(Type)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (break ; case EType::Folder : case EType::MissingObject :)",
    "insertText": "new(Data) FName(Other.GetAsNameRef())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FWorldTreeItemID&)",
    "insertText": "operator(FWorldTreeItemID&& Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(*this, Other)"
  },
  {
    "label": "GetAsNameRef()",
    "kind": "Method",
    "detail": "Function (break ; case EType::Folder : case EType::MissingObject :)",
    "insertText": "GetAsNameRef().~FName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (break ; default : break ; } } bool)",
    "insertText": "operator(const FWorldTreeItemID& One, const FWorldTreeItemID& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (break ; case EType::Folder : case EType::MissingObject : Hash =)",
    "insertText": "GetTypeHash(GetAsNameRef())"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (break ; default : break ; } return)",
    "insertText": "HashCombine((uint8)Type, Hash)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FWorldTreeItemID& ItemID)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Type = EType::MissingObject ;)",
    "insertText": "new(Data) FName(ObjectName)"
  },
  {
    "label": "GetAsObjectKey()",
    "kind": "Method",
    "detail": "Function (} FObjectKey&)",
    "insertText": "GetAsObjectKey()"
  },
  {
    "label": "GetAsNameRef()",
    "kind": "Method",
    "detail": "Function (} FName&)",
    "insertText": "GetAsNameRef()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Compare(const FWorldTreeItemID& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSame = false ;)",
    "insertText": "if(Type == Other.Type && CachedHash == Other.CachedHash)"
  },
  {
    "label": "GetAsNameRef()",
    "kind": "Method",
    "detail": "Function (break ; case EType::Folder : case EType::MissingObject : bSame =)",
    "insertText": "GetAsNameRef() == Other.GetAsNameRef()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (break ; case EType::Null : bSame = true ; break ; default :)",
    "insertText": "check(false)"
  }
]