[
  {
    "label": "CBaseReferenceClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseReferenceClock"
  },
  {
    "label": "ConvertToMilliseconds()",
    "kind": "Method",
    "detail": "Function (# ifndef __BASEREFCLOCK__ # define __BASEREFCLOCK__ # include<Schedule . h> const UINT RESOLUTION = 1 ; const INT ADVISE_CACHE = 4 ; const LONGLONG MAX_TIME = 0 x7FFFFFFFFFFFFFFF ; LONGLONG WINAPI)",
    "insertText": "ConvertToMilliseconds(const REFERENCE_TIME& RT)"
  },
  {
    "label": "CBaseReferenceClock()",
    "kind": "Method",
    "detail": "Function (} class CBaseReferenceClock : public CUnknown,public IReferenceClock,public CCritSec,public IReferenceClockTimerControl { protected : ~)",
    "insertText": "CBaseReferenceClock()"
  },
  {
    "label": "CBaseReferenceClock()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CBaseReferenceClock(__in_opt LPCTSTR pName, __inout_opt LPUNKNOWN pUnk, __inout HRESULT *phr, __inout_opt CAMSchedule * pSched = 0)"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void ** ppv)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (DECLARE_IUNKNOWN STDMETHODIMP)",
    "insertText": "GetTime(__out REFERENCE_TIME *pTime)"
  },
  {
    "label": "AdviseTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "AdviseTime(REFERENCE_TIME baseTime, REFERENCE_TIME streamTime, HEVENT hEvent, __out DWORD_PTR *pdwAdviseCookie)"
  },
  {
    "label": "AdvisePeriodic()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "AdvisePeriodic(REFERENCE_TIME StartTime, REFERENCE_TIME PeriodTime, HSEMAPHORE hSemaphore, __out DWORD_PTR *pdwAdviseCookie)"
  },
  {
    "label": "Unadvise()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Unadvise(DWORD_PTR dwAdviseCookie)"
  },
  {
    "label": "GetPrivateTime()",
    "kind": "Method",
    "detail": "Function (REFERENCE_TIME)",
    "insertText": "GetPrivateTime()"
  },
  {
    "label": "SetTimeDelta()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTimeDelta(const REFERENCE_TIME& TimeDelta)"
  },
  {
    "label": "GetSchedule()",
    "kind": "Method",
    "detail": "Function (CAMSchedule*)",
    "insertText": "GetSchedule()"
  },
  {
    "label": "GetDefaultTimerResolution()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetDefaultTimerResolution(__out REFERENCE_TIME* pTimerResolution)"
  },
  {
    "label": "TriggerThread()",
    "kind": "Method",
    "detail": "Function (private : REFERENCE_TIME m_rtPrivateTime ; DWORD m_dwPrevSystemTime ; REFERENCE_TIME m_rtLastGotTime ; REFERENCE_TIME m_rtNextAdvise ; UINT m_TimerResolution ; # ifdef PERF int m_idGetSystemTime ; # endif public : void)",
    "insertText": "TriggerThread()"
  },
  {
    "label": "EXECUTE_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXECUTE_ASSERT(SetEvent(m_pSchedule->GetEvent()))"
  },
  {
    "label": "AdviseThread()",
    "kind": "Method",
    "detail": "Function (} private : BOOL m_bAbort ; HANDLE m_hThread ; HRESULT)",
    "insertText": "AdviseThread()"
  },
  {
    "label": "AdviseThreadFunction()",
    "kind": "Method",
    "detail": "Function (DWORD __stdcall)",
    "insertText": "AdviseThreadFunction(__in LPVOID)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (protected : CAMSchedule* m_pSchedule ; void)",
    "insertText": "Restart(IN REFERENCE_TIME rtMinTime = 0I64)"
  }
]