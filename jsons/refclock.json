[
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "construction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "construction"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "CBaseReferenceClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBaseReferenceClock"
  },
  {
    "label": "CBaseReferenceClock()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseReferenceClock(__in_opt LPCTSTR pName, \n                        __inout_opt LPUNKNOWN pUnk, \n                        __inout HRESULT *phr, \n                        __inout_opt CAMSchedule * pSched = 0 )"
  },
  {
    "label": "NonDelegatingQueryInterface()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "NonDelegatingQueryInterface(REFIID riid, __deref_out void ** ppv)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetTime(__out REFERENCE_TIME *pTime)"
  },
  {
    "label": "AdviseTime()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "AdviseTime(\n        REFERENCE_TIME baseTime,        // base reference time\n        REFERENCE_TIME streamTime,      // stream offset time\n        HEVENT hEvent,                  // advise via this event\n        __out DWORD_PTR *pdwAdviseCookie// where your cookie goes\n    )"
  },
  {
    "label": "AdvisePeriodic()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "AdvisePeriodic(\n        REFERENCE_TIME StartTime,       // starting at this time\n        REFERENCE_TIME PeriodTime,      // time between notifications\n        HSEMAPHORE hSemaphore,          // advise via a semaphore\n        __out DWORD_PTR *pdwAdviseCookie// where your cookie goes\n    )"
  },
  {
    "label": "Unadvise()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "Unadvise(DWORD_PTR dwAdviseCookie)"
  },
  {
    "label": "GetPrivateTime()",
    "kind": "Method",
    "detail": "Function (REFERENCE_TIME)",
    "insertText": "GetPrivateTime()"
  },
  {
    "label": "SetTimeDelta()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetTimeDelta( const REFERENCE_TIME& TimeDelta )"
  },
  {
    "label": "SetDefaultTimerResolution()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetDefaultTimerResolution(\n        REFERENCE_TIME timerResolution // in 100ns\n    )"
  },
  {
    "label": "GetDefaultTimerResolution()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "GetDefaultTimerResolution(\n        __out REFERENCE_TIME* pTimerResolution // in 100ns\n    )"
  },
  {
    "label": "AdviseThread()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AdviseThread()"
  },
  {
    "label": "AdviseThreadFunction()",
    "kind": "Method",
    "detail": "Function (__stdcall)",
    "insertText": "AdviseThreadFunction(__in LPVOID)"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart(IN REFERENCE_TIME rtMinTime = 0I64)"
  }
]