[
  {
    "label": "StreamState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamState"
  },
  {
    "label": "StreamState()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_STREAM_STATE_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_STREAM_STATE_H_ # include<limits> # include<map> # include<set> # include \" absl / types / optional . h \" # include \" api / units / timestamp . h \" # include \" test / pc / e2e / analyzer / video / multi_reader_queue . h \" namespace webrtc { class StreamState { public :)",
    "insertText": "StreamState(size_t sender, std::set<size_t> receivers, Timestamp stream_started_time)"
  },
  {
    "label": "sender()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "sender()"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (frame_ids_ .)",
    "insertText": "PushBack(frame_id)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "PopFront(size_t peer)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty(size_t peer)"
  },
  {
    "label": "Front()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "Front(size_t peer)"
  },
  {
    "label": "AddPeer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPeer(size_t peer)"
  },
  {
    "label": "RemovePeer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePeer(size_t peer)"
  },
  {
    "label": "GetAliveFramesCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetAliveFramesCount()"
  },
  {
    "label": "MarkNextAliveFrameAsDead()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "MarkNextAliveFrameAsDead()"
  },
  {
    "label": "SetLastRenderedFrameTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastRenderedFrameTime(size_t peer, Timestamp time)"
  },
  {
    "label": "last_rendered_frame_time()",
    "kind": "Method",
    "detail": "Function (absl::optional<Timestamp>)",
    "insertText": "last_rendered_frame_time(size_t peer)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (private : size_t kAliveFramesQueueIndex = std::numeric_limits<size_t)",
    "insertText": "max()"
  },
  {
    "label": "GetLongestReceiverQueue()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetLongestReceiverQueue()"
  }
]