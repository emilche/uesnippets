[
  {
    "label": "FPrecacheCallbackHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrecacheCallbackHandler"
  },
  {
    "label": "FAsyncLoadEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncLoadEvent"
  },
  {
    "label": "FAsyncLoadEventQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncLoadEventQueue"
  },
  {
    "label": "FFlushRequestData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlushRequestData"
  },
  {
    "label": "FFlushRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlushRequest"
  },
  {
    "label": "FAsyncLoadingThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadingThread"
  },
  {
    "label": "FMaxPackageSummarySize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaxPackageSummarySize"
  },
  {
    "label": "FAsyncPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage"
  },
  {
    "label": "FEDLBootNotificationManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLBootNotificationManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / AnyOf . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" UObject / ObjectMacros . h \" # include \" Serialization / AsyncLoading . h \" # include \" Serialization / LoadTimeTracePrivate . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / CommandLine . h \" # include \" Misc / App . h \" # include \" HAL / Runnable . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Misc / ConfigCacheIni . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" Serialization / AsyncPackageLoader . h \" # include \" AutoRTFM / AutoRTFM . h \" # include<atomic> struct FPrecacheCallbackHandler ; struct FAsyncLoadEvent { enum { EventSystemPriority_MAX = MAX_int32 } ; int32 UserPriority ; int32 PackageSerialNumber ; int32 EventSystemPriority ; int32 SerialNumber ; TFunction<)",
    "insertText": "void(FAsyncLoadEventArgs& Args)"
  },
  {
    "label": "FAsyncLoadEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncLoadEvent() : UserPriority(0) , PackageSerialNumber(0) , EventSystemPriority(0) , SerialNumber(0)"
  },
  {
    "label": "FAsyncLoadEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAsyncLoadEvent(int32 InUserPriority, int32 InPackageSerialNumber, int32 InEventSystemPriority, int32 InSerialNumber, TFunction<void(FAsyncLoadEventArgs& Args)>&& InPayload) : UserPriority(InUserPriority) , PackageSerialNumber(InPackageSerialNumber) , EventSystemPriority(InEventSystemPriority) , SerialNumber(InSerialNumber) , Payload(Forward<TFunction<void(FAsyncLoadEventArgs& Args)>>(InPayload))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAsyncLoadEvent& Other)"
  },
  {
    "label": "AddAsyncEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAsyncEvent(int32 UserPriority, int32 PackageSerialNumber, int32 EventSystemPriority, TFunction<void(FAsyncLoadEventArgs& Args)>&& Payload)"
  },
  {
    "label": "HeapPush()",
    "kind": "Method",
    "detail": "Function (EventQueue .)",
    "insertText": "HeapPush(FAsyncLoadEvent(UserPriority, PackageSerialNumber, EventSystemPriority, ++RunningSerialNumber, Forward<TFunction<void(FAsyncLoadEventArgs& Args)>>(Payload)))"
  },
  {
    "label": "PopAndExecute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PopAndExecute(FAsyncLoadEventArgs& Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FAsyncLoadEvent Event ; bool bResult = false ; {)",
    "insertText": "if(EventQueue.Num())"
  },
  {
    "label": "HeapPop()",
    "kind": "Method",
    "detail": "Function (EventQueue .)",
    "insertText": "HeapPop(Event, EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ; } })",
    "insertText": "if(bResult)"
  },
  {
    "label": "Payload()",
    "kind": "Method",
    "detail": "Function (Event .)",
    "insertText": "Payload(Args)"
  },
  {
    "label": "FFlushRequestData()",
    "kind": "Method",
    "detail": "Function (} return bResult ; } } ; struct FFlushRequestData {)",
    "insertText": "FFlushRequestData(TConstArrayView<int32> InRequestIDs) : RequestIDs(MakeUnique<std::atomic<int32>[]>(InRequestIDs.Num())) , NumRequests(InRequestIDs.Num())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (RequestIDs .)",
    "insertText": "Get()"
  },
  {
    "label": "GetRequestIDs()",
    "kind": "Method",
    "detail": "Function (} } TConstArrayView<std::atomic<int32>>)",
    "insertText": "GetRequestIDs()"
  },
  {
    "label": "OnRequestComplete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRequestComplete(int32 InCompletedRequest)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (+ + NumCompletedRequests ; } } } bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "FFlushRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFlushRequest(TConstArrayView<int32> InRequestIDs) : Data(MakeShared<FFlushRequestData>(InRequestIDs))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "OnRequestComplete()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnRequestComplete(int32 RequestID)"
  },
  {
    "label": "OnRequestComplete()",
    "kind": "Method",
    "detail": "Function (Data ->)",
    "insertText": "OnRequestComplete(RequestID)"
  },
  {
    "label": "AdjustRequestIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdjustRequestIDs(TMap<int32, int32>& DuplicateRequestMap)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (RequestID .)",
    "insertText": "store(*MainRequest, std::memory_order_relaxed)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } } class FAsyncLoadingThread ; TSharedPtr<FFlushRequestData,ESPMode::ThreadSafe> Data ; } ; struct FMaxPackageSummarySize { int32 Value ; void)",
    "insertText": "Init()"
  },
  {
    "label": "FAsyncLoadingThread()",
    "kind": "Method",
    "detail": "Function (} ; class FAsyncLoadingThread final : public FRunnable,public IAsyncPackageLoader { struct FAsyncPackage ; struct FEDLBootNotificationManager& EDLBootNotificationManager ; FRunnableThread* Thread ; FThreadSafeCounter StopTaskCounter ; bool bThreadStarted ; FEvent* QueuedRequestsEvent ; FEvent* CancelLoadingEvent ; FEvent* ThreadSuspendedEvent ; FEvent* ThreadResumedEvent ; TArray<FAsyncPackageDesc*> QueuedPackages ; # if THREADSAFE_UOBJECTS FCriticalSection QueueCritical ; # endif FThreadSafeBool bShouldCancelLoading ; FThreadSafeCounter IsLoadingSuspended ; TArray<FAsyncPackage*> LoadedPackages ; TMap<FName,FAsyncPackage*> LoadedPackagesNameLookup ; # if THREADSAFE_UOBJECTS FCriticalSection LoadedPackagesCritical ; # endif TArray<FAsyncPackage*> LoadedPackagesToProcess ; TArray<FAsyncPackage*> PackagesToDelete ; TMap<FName,FAsyncPackage*> LoadedPackagesToProcessNameLookup ; # if WITH_EDITOR TSet<FWeakObjectPtr> LoadedAssets ; # endif # if THREADSAFE_UOBJECTS FCriticalSection LoadedPackagesToProcessCritical ; # endif TArray<FFlushRequest,TInlineAllocator<4>> FlushRequests ; # if THREADSAFE_UOBJECTS FCriticalSection FlushRequestCritical ; # endif TMap<int32,int32> DuplicateRequestMap ; TArray<FAsyncPackage*> AsyncPackages ; TMap<FName,FAsyncPackage*> AsyncPackageNameLookup ; public : TArray<FAsyncPackage*> AsyncPackagesReadyForTick ; private : # if THREADSAFE_UOBJECTS FCriticalSection AsyncPackagesCritical ; # endif TSet<int32> PendingRequests ; # if THREADSAFE_UOBJECTS FCriticalSection PendingRequestsCritical ; # endif FThreadSafeCounter QueuedPackagesCounter ; FThreadSafeCounter ExistingAsyncPackagesCounter ; FThreadSafeCounter AsyncThreadReady ; TArray<FAsyncPackageDesc*> QueuedPackagesToCancel ; TSet<FAsyncPackage*> PackagesToCancel ; uint32 AsyncLoadingThreadID ; enum class EAsyncPackageInsertMode { InsertBeforeMatchingPriorities,InsertAfterMatchingPriorities } ; # if LOOKING_FOR_PERF_ISSUES FThreadSafeCounter BlockingCycles ; # endif IAsyncPackageLoader* IoStorePackageLoader = nullptr ; public :)",
    "insertText": "FAsyncLoadingThread(int32 InThreadIndex)"
  },
  {
    "label": "FAsyncLoadingThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncLoadingThread()"
  },
  {
    "label": "GetLoaderType()",
    "kind": "Method",
    "detail": "Function (ELoaderType)",
    "insertText": "GetLoaderType()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "ShouldAlwaysLoadPackageAsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAlwaysLoadPackageAsync(const FPackagePath& InPackagePath)"
  },
  {
    "label": "LoadPackage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadPackage(const FPackagePath& PackagePath, FLoadPackageAsyncOptionalParams OptionalParams)"
  },
  {
    "label": "LoadPackage()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadPackage(const FPackagePath& InPackagePath, FName InCustomName, FLoadPackageAsyncDelegate InCompletionDelegate, EPackageFlags InPackageFlags, int32 InPIEInstanceID, int32 InPackagePriority, const FLinkerInstancingContext* InInstancingContext, uint32 InLoadFlags)"
  },
  {
    "label": "ProcessLoading()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "ProcessLoading(bool bUseTimeLimit, bool bUseFullTimeLimit, double TimeLimit)"
  },
  {
    "label": "ProcessLoadingUntilComplete()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "ProcessLoadingUntilComplete(TFunctionRef<bool()> CompletionPredicate, double TimeLimit)"
  },
  {
    "label": "FlushLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushLoading(TConstArrayView<int32> RequestIDs)"
  },
  {
    "label": "NotifyConstructedDuringAsyncLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyConstructedDuringAsyncLoading(UObject* Object, bool bSubObject)"
  },
  {
    "label": "NotifyUnreachableObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUnreachableObjects(const TArrayView<FUObjectItem*>& UnreachableObjects)"
  },
  {
    "label": "FireCompletedCompiledInImport()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "FireCompletedCompiledInImport(void* AsyncPacakge, FPackageIndex Import)"
  },
  {
    "label": "NotifyRegistrationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRegistrationEvent(const TCHAR* PackageName, const TCHAR* Name, ENotifyRegistrationType NotifyRegistrationType, ENotifyRegistrationPhase NotifyRegistrationPhase, UObject* (*InRegister)(), bool InbDynamic, UObject* FinishedObject)"
  },
  {
    "label": "NotifyRegistrationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRegistrationComplete()"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (FAsyncLoadEventQueue EventQueue ; FAsyncPackage*)",
    "insertText": "GetPackage(FWeakAsyncPackagePtr Ptr)"
  },
  {
    "label": "FindAsyncPackage()",
    "kind": "Method",
    "detail": "Function (FAsyncPackage* Package =)",
    "insertText": "FindAsyncPackage(Ptr.PackageName)"
  },
  {
    "label": "QueueEvent_FinishLinker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_FinishLinker(FWeakAsyncPackagePtr WeakPtr, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_StartImportPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_StartImportPackages(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_SetupImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_SetupImports(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_SetupExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_SetupExports(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_ProcessImportsAndExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_ProcessImportsAndExports(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_ExportsDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_ExportsDone(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_ProcessPostloadWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_ProcessPostloadWait(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "QueueEvent_StartPostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueEvent_StartPostLoad(FAsyncPackage* Pkg, int32 EventSystemPriority = 0)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (AsyncLoadingTickCounter .)",
    "insertText": "Increment()"
  },
  {
    "label": "LeaveAsyncLoadingTick()",
    "kind": "Method",
    "detail": "Function (CurrentAsyncLoadingTickThreadIndex = ThreadIndex ; } void)",
    "insertText": "LeaveAsyncLoadingTick(int32 ThreadIndex)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (int32 AsyncLoadingTickCounterValue = AsyncLoadingTickCounter .)",
    "insertText": "Decrement()"
  },
  {
    "label": "GetIsInAsyncLoadingTick()",
    "kind": "Method",
    "detail": "Function (CurrentAsyncLoadingTickThreadIndex = INDEX_NONE ; } } bool)",
    "insertText": "GetIsInAsyncLoadingTick()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bool Result = false ; UE_AUTORTFM_OPEN { Result = ! ! AsyncLoadingTickCounter .)",
    "insertText": "GetValue()"
  },
  {
    "label": "IsAsyncLoadingPackages()",
    "kind": "Method",
    "detail": "Function (} ; return Result ; } bool)",
    "insertText": "IsAsyncLoadingPackages()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "IsInAsyncLoadThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInAsyncLoadThread()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "if(IsMultithreaded())"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (bResult =)",
    "insertText": "GetCurrentThreadId() == AsyncLoadingThreadID || (IsInGameThread() && GetIsInAsyncLoadingTick())"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (} else { bResult =)",
    "insertText": "IsInGameThread() && GetIsInAsyncLoadingTick()"
  },
  {
    "label": "IsAsyncLoadingSuspendedInternal()",
    "kind": "Method",
    "detail": "Function (} return bResult ; } bool)",
    "insertText": "IsAsyncLoadingSuspendedInternal()"
  },
  {
    "label": "IsAsyncLoadingSuspended()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAsyncLoadingSuspended()"
  },
  {
    "label": "GetAsyncLoadingSuspendedCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAsyncLoadingSuspendedCount()"
  },
  {
    "label": "GetNumQueuedPackages()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumQueuedPackages()"
  },
  {
    "label": "GetNumAsyncPackages()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumAsyncPackages()"
  },
  {
    "label": "FindAsyncPackage()",
    "kind": "Method",
    "detail": "Function (} FAsyncPackage*)",
    "insertText": "FindAsyncPackage(const FName& PackageName)"
  },
  {
    "label": "InsertPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertPackage(FAsyncPackage* Package, bool bReinsert = false, EAsyncPackageInsertMode InsertMode = EAsyncPackageInsertMode::InsertBeforeMatchingPriorities)"
  },
  {
    "label": "QueuePackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "QueuePackage(FAsyncPackageDesc& Package)"
  },
  {
    "label": "CancelLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelLoading()"
  },
  {
    "label": "ShutdownLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownLoading()"
  },
  {
    "label": "SuspendLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendLoading()"
  },
  {
    "label": "ResumeLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeLoading()"
  },
  {
    "label": "CheckForCycles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForCycles()"
  },
  {
    "label": "TickAsyncLoading()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "TickAsyncLoading(bool bUseTimeLimit, bool bUseFullTimeLimit, double TimeLimit, FFlushRequest FlushRequest = FFlushRequest())"
  },
  {
    "label": "TickAsyncThread()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "TickAsyncThread(bool bUseTimeLimit, bool bUseFullTimeLimit, double TimeLimit, bool& bDidSomething, FFlushRequest& FlushRequest)"
  },
  {
    "label": "InitializeLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLoading()"
  },
  {
    "label": "GetAsyncLoadPercentage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAsyncLoadPercentage(const FName& PackageName)"
  },
  {
    "label": "AddPendingRequest()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddPendingRequest(int32 RequestID)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# if THREADSAFE_UOBJECTS FScopeLock)",
    "insertText": "Lock(&PendingRequestsCritical)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(!PendingRequests.Contains(RequestID))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PendingRequests .)",
    "insertText": "Add(RequestID)"
  },
  {
    "label": "RemovePendingRequests()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemovePendingRequests(TArray<int32>& RequestIDs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(int32 ID : RequestIDs)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (PendingRequests .)",
    "insertText": "Remove(ID)"
  },
  {
    "label": "TRACE_LOADTIME_END_REQUEST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_LOADTIME_END_REQUEST(ID)"
  },
  {
    "label": "CompleteFlushRequests()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CompleteFlushRequests(TArray<int32>& RequestIDs)"
  },
  {
    "label": "MapDuplicateRequestID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapDuplicateRequestID(int32 DuplicateRequestId, int32 MainRequestId)"
  },
  {
    "label": "GetQueuedPackagesCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetQueuedPackagesCount()"
  },
  {
    "label": "GetExistingAsyncPackagesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetExistingAsyncPackagesCount()"
  },
  {
    "label": "ContainsRequestInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsRequestInternal(int32 RequestID)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (# endif return PendingRequests .)",
    "insertText": "Contains(RequestID)"
  },
  {
    "label": "ContainsAnyRequestInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAnyRequestInternal(TConstArrayView<int32> RequestIDs)"
  },
  {
    "label": "AnyOf()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "AnyOf(RequestIDs, [this](int32 RequestID){ return PendingRequests.Contains(RequestID); })"
  },
  {
    "label": "ContainsAnyRequestInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsAnyRequestInternal(TConstArrayView<std::atomic<int32>> RequestIDs)"
  },
  {
    "label": "AnyOf()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "AnyOf(RequestIDs, [this](const std::atomic<int32>& RequestID){ return PendingRequests.Contains(RequestID.load(std::memory_order_relaxed)); })"
  },
  {
    "label": "AddFlushRequest()",
    "kind": "Method",
    "detail": "Function (} FFlushRequest)",
    "insertText": "AddFlushRequest(TConstArrayView<int32> RequestIDs)"
  },
  {
    "label": "PeekFlushRequest()",
    "kind": "Method",
    "detail": "Function (FFlushRequest)",
    "insertText": "PeekFlushRequest()"
  },
  {
    "label": "AdjustFlushRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustFlushRequest(FFlushRequest& FlushRequest)"
  },
  {
    "label": "ShouldProcessPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldProcessPackage(FAsyncPackage* InAsyncPackage, const FFlushRequest& FlushRequest)"
  },
  {
    "label": "ProcessLoadedPackages()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "ProcessLoadedPackages(bool bUseTimeLimit, bool bUseFullTimeLimit, double TimeLimit, bool& bDidSomething, const FFlushRequest& FlushRequest)"
  },
  {
    "label": "CreateAsyncPackagesFromQueue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateAsyncPackagesFromQueue(bool bUseTimeLimit, bool bUseFullTimeLimit, double TimeLimit)"
  },
  {
    "label": "ProcessAsyncPackageRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncPackageRequest(FAsyncPackageDesc* InRequest, FAsyncPackage* InRootPackage)"
  },
  {
    "label": "UpdateExistingPackagePriorities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateExistingPackagePriorities(FAsyncPackage* InPackage, TAsyncLoadPriority InNewPriority)"
  },
  {
    "label": "FindExistingPackageAndAddCompletionCallback()",
    "kind": "Method",
    "detail": "Function (FAsyncPackage*)",
    "insertText": "FindExistingPackageAndAddCompletionCallback(FAsyncPackageDesc* PackageRequest, TMap<FName, FAsyncPackage*>& PackageList)"
  },
  {
    "label": "AddToLoadedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToLoadedPackages(FAsyncPackage* Package)"
  },
  {
    "label": "CancelAsyncLoadingInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAsyncLoadingInternal()"
  },
  {
    "label": "FinalizeCancelAsyncLoadingInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeCancelAsyncLoadingInternal()"
  },
  {
    "label": "GetEventGraph()",
    "kind": "Method",
    "detail": "Function (FEventLoadGraph EventGraph ; FPrecacheCallbackHandler* PrecacheHandler ; int32 AsyncLoadingThreadIndex ; FThreadSafeCounter AsyncLoadingTickCounter ; int32 CurrentAsyncLoadingTickThreadIndex ; public : FEventLoadGraph&)",
    "insertText": "GetEventGraph()"
  }
]