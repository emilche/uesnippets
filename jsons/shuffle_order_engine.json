[
  {
    "label": "__ugcd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__ugcd"
  },
  {
    "label": "__uratio",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__uratio"
  },
  {
    "label": "_Engine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Engine"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Sseq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sseq"
  },
  {
    "label": "_Eng",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Eng"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_SHUFFLE_ORDER_ENGINE_H # define _LIBCPP___RANDOM_SHUFFLE_ORDER_ENGINE_H # include<__algorithm / equal . h> # include<__config> # include<__random / is_seed_sequence . h> # include<__utility / move . h> # include<cstdint> # include<iosfwd> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const uint64_t value = __ugcd<_Yp,_Xp % _Yp>::value ; } ; template<uint64_t _Xp> struct __ugcd<_Xp,0> { _LIBCPP_CONSTEXPR const uint64_t value = _Xp ; } ; template<uint64_t _Np,uint64_t _Dp> class __uratio {)",
    "insertText": "static_assert(_Dp != 0, \"__uratio divide by 0\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const uint64_t __gcd = __ugcd<_Np,_Dp>::value ; public : _LIBCPP_CONSTEXPR const uint64_t num = _Np / __gcd ; _LIBCPP_CONSTEXPR const uint64_t den = _Dp / __gcd ; typedef __uratio<num,den> type ; } ; template<class _Engine,size_t __k> class _LIBCPP_TEMPLATE_VIS shuffle_order_engine {)",
    "insertText": "static_assert(0 < __k, \"shuffle_order_engine invalid parameters\")"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (public : typedef _Engine::result_type result_type ; private : _Engine __e_ ; result_type _V_ [ __k ] ; result_type _Y_ ; public : _LIBCPP_CONSTEXPR const size_t table_size = __k ; # ifdef _LIBCPP_CXX03_LANG const result_type _Min = _Engine::_Min ; const result_type _Max = _Engine::_Max ; # else _LIBCPP_CONSTEXPR const result_type _Min =)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const result_type _Max =)",
    "insertText": "max()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "static_assert(_Min < _Max, \"shuffle_order_engine invalid parameters\")"
  },
  {
    "label": "__init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__init()"
  },
  {
    "label": "shuffle_order_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "shuffle_order_engine(const _Engine& __e) : __e_(__e)"
  },
  {
    "label": "shuffle_order_engine()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "shuffle_order_engine(_Engine&& __e) : __e_(_VSTD::move(__e))"
  },
  {
    "label": "shuffle_order_engine()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "shuffle_order_engine(result_type __sd) : __e_(__sd)"
  },
  {
    "label": "shuffle_order_engine()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "shuffle_order_engine(_Sseq& __q, typename enable_if<__is_seed_sequence<_Sseq, shuffle_order_engine>::value && !is_convertible<_Sseq, _Engine>::value>::type* = 0) : __e_(__q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed()"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(result_type __sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "seed(__sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY enable_if<__is_seed_sequence<_Sseq,shuffle_order_engine>::value,void>::type)",
    "insertText": "seed(_Sseq& __q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "seed(__q)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "discard(unsigned long long __z)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY const _Engine&)",
    "insertText": "base()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Eng,size_t _Kp> bool)",
    "insertText": "operator(const shuffle_order_engine<_Eng, _Kp>& __x, const shuffle_order_engine<_Eng, _Kp>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Eng,size_t _Kp> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const shuffle_order_engine<_Eng, _Kp>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Eng,size_t _Kp> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, shuffle_order_engine<_Eng, _Kp>& __x)"
  },
  {
    "label": "__e_()",
    "kind": "Method",
    "detail": "Function (_Y_ =)",
    "insertText": "__e_()"
  },
  {
    "label": "__eval()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "__eval(false_type)"
  },
  {
    "label": "__eval()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "__eval(true_type)"
  },
  {
    "label": "__eval2()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "__eval2(false_type)"
  },
  {
    "label": "__eval2()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "__eval2(true_type)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<uint64_t _Np,uint64_t _Dp> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "enable_if(__uratio<_Np, _Dp>::num > 0xFFFFFFFFFFFFFFFFull / (_Max - _Min)), result_type >::type __eval(__uratio<_Np, _Dp>)"
  },
  {
    "label": "xFFFFFFFFFFFFFFFFull()",
    "kind": "Method",
    "detail": "Function (} template<uint64_t _Np,uint64_t _Dp> _LIBCPP_INLINE_VISIBILITY enable_if<__uratio<_Np,_Dp>::num<= 0)",
    "insertText": "xFFFFFFFFFFFFFFFFull(_Max - _Min), result_type >::type __eval(__uratio<_Np, _Dp>)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t __j = static_cast<)",
    "insertText": "size_t(__uratio<_Np, _Dp>::num * (_Y_ - _Min) / __uratio<_Np, _Dp>::den)"
  },
  {
    "label": "__n()",
    "kind": "Method",
    "detail": "Function (const double _Fp = __d = = 0 ?)",
    "insertText": "__n(2. * 0x8000000000000000ull) : __n / (double)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t __j = static_cast<)",
    "insertText": "size_t(_Fp * (_Y_ - _Min))"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _Ostream ; __os .)",
    "insertText": "flags(_Ostream::dec | _Ostream::left)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__os<<__x . __e_<<__sp<<__x . _V_ [ 0 ] ;)",
    "insertText": "for(size_t __i = 1; __i < _Kp; ++__i)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef shuffle_order_engine<_Eng,_Kp>::result_type result_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_Eng __e ; result_type _Vp [ _Kp + 1 ] ; __is>> __e ;)",
    "insertText": "for(size_t __i = 0; __i < _Kp+1; ++__i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__x . __e_ = __e ;)",
    "insertText": "for(size_t __i = 0; __i < _Kp; ++__i)"
  }
]