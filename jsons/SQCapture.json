[
  {
    "label": "FPhysTestSerializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysTestSerializer"
  },
  {
    "label": "FCollisionFilterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionFilterData"
  },
  {
    "label": "FOverlapHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapHit"
  },
  {
    "label": "FRaycastHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRaycastHit"
  },
  {
    "label": "FSweepHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSweepHit"
  },
  {
    "label": "FChaosArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosArchive"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "FSQCapture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSQCapture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSQCapture()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDRigidsEvolutionFwd . h \" # include \" ChaosInterfaceWrapperCore . h \" # include \" ChaosSQTypes . h \" # include \" CollisionQueryFilterCallbackCore . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" PhysXInterfaceWrapperCore . h \" # include \" PhysXPublicCore . h \" # include \" PhysicsInterfaceDeclaresCore . h \" # include \" PhysicsInterfaceDeclaresCore . h \" # include \" PhysicsInterfaceWrapperShared . h \" # include \" Templates / UniquePtr . h \" class FPhysTestSerializer ; struct FCollisionFilterData ; namespace ChaosInterface { struct FOverlapHit ; struct FRaycastHit ; struct FSweepHit ; } namespace Chaos { class FChaosArchive ; class FImplicitObject ; class FPerShapeData ; } struct FSQCapture { ~)",
    "insertText": "FSQCapture()"
  },
  {
    "label": "FSQCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSQCapture(const FSQCapture&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSQCapture&)",
    "insertText": "operator(const FSQCapture&)"
  },
  {
    "label": "StartCaptureChaosSweep()",
    "kind": "Method",
    "detail": "Function (enum class ESQType : uint8 { Raycast,Sweep,Overlap } SQType ; void)",
    "insertText": "StartCaptureChaosSweep(const Chaos::FPBDRigidsEvolution& Evolution, const Chaos::FImplicitObject& InQueryGeom, const FTransform& InStartTM, const FVector& InDir, float InDeltaMag, FHitFlags InOutputFlags, const ChaosInterface::FQueryFilterData& QueryFilter, const FCollisionFilterData& FilterData, ICollisionQueryFilterCallbackBase& Callback)"
  },
  {
    "label": "EndCaptureChaosSweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCaptureChaosSweep(const ChaosInterface::FSQHitBuffer<ChaosInterface::FSweepHit>& Results)"
  },
  {
    "label": "StartCaptureChaosRaycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCaptureChaosRaycast(const Chaos::FPBDRigidsEvolution& Evolution, const FVector& InStartPoint, const FVector& InDir, float InDeltaMag, FHitFlags InOutputFlags, const ChaosInterface::FQueryFilterData& QueryFilter, const FCollisionFilterData& FilterData, ICollisionQueryFilterCallbackBase& Callback)"
  },
  {
    "label": "EndCaptureChaosRaycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCaptureChaosRaycast(const ChaosInterface::FSQHitBuffer<ChaosInterface::FRaycastHit>& Results)"
  },
  {
    "label": "StartCaptureChaosOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCaptureChaosOverlap(const Chaos::FPBDRigidsEvolution& Evolution, const Chaos::FImplicitObject& InQueryGeom, const FTransform& InStartTM, const ChaosInterface::FQueryFilterData& QueryFilter, const FCollisionFilterData& FilterData, ICollisionQueryFilterCallbackBase& Callback)"
  },
  {
    "label": "EndCaptureChaosOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCaptureChaosOverlap(const ChaosInterface::FSQHitBuffer<ChaosInterface::FOverlapHit>& Results)"
  },
  {
    "label": "GetFilterResult()",
    "kind": "Method",
    "detail": "Function (ECollisionQueryHitType)",
    "insertText": "GetFilterResult(const Chaos::FPerShapeData* Shape, const Chaos::FGeometryParticle* Actor)"
  },
  {
    "label": "FSQCapture()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSQCapture(FPhysTestSerializer& OwningPhysSerializer)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "CaptureChaosFilterResults()",
    "kind": "Method",
    "detail": "Function (FPhysTestSerializer ; TArray<uint8> GeomData ; TArray<uint8> HitData ; FPhysTestSerializer& PhysSerializer ; void)",
    "insertText": "CaptureChaosFilterResults(const Chaos::FPBDRigidsEvolution& Evolution, const FCollisionFilterData& FilterData, ICollisionQueryFilterCallbackBase& Callback)"
  },
  {
    "label": "SerializeChaosBuffers()",
    "kind": "Method",
    "detail": "Function (TMap<Chaos::FGeometryParticle*,TArray<TPair<Chaos::FPerShapeData*,ECollisionQueryHitType>>> ChaosActorToShapeHitsArray ; template<THit> void)",
    "insertText": "SerializeChaosBuffers(Chaos::FChaosArchive& Ar, int32 Version, ChaosInterface::FSQHitBuffer<THit>& ChaosBuffer)"
  },
  {
    "label": "SerializeChaosActorToShapeHitsArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeChaosActorToShapeHitsArray(Chaos::FChaosArchive& Ar)"
  }
]