[
  {
    "label": "mv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mv"
  },
  {
    "label": "mv32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mv32"
  },
  {
    "label": "is_zero_mv()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_MV_H_ # define VPX_VP9_COMMON_VP9_MV_H_ # include \" vpx / vpx_integer . h \" # include \" vp9 / common / vp9_common . h \" # ifdef __cplusplus \" C \" { # endif # define INVALID_MV 0 x80008000 typedef struct mv { int16_t row ; int16_t col ; } MV ; typedef union int_mv { uint32_t as_int ; MV as_mv ; } int_mv ; typedef struct mv32 { int32_t row ; int32_t col ; } MV32 ; int)",
    "insertText": "is_zero_mv(const MV *mv)"
  },
  {
    "label": "is_equal_mv()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "is_equal_mv(const MV *a, const MV *b)"
  },
  {
    "label": "clamp_mv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clamp_mv(MV *mv, int min_col, int max_col, int min_row, int max_row)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (mv -> col =)",
    "insertText": "clamp(mv->col, min_col, max_col)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (mv -> row =)",
    "insertText": "clamp(mv->row, min_row, max_row)"
  }
]