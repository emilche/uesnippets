[
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "FTargetDeviceEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceEntry"
  },
  {
    "label": "SDeviceOutputLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDeviceOutputLog"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SOutputLog . h \" # if OUTPUTLOG_HAS_TARGET_PLATFORMS # include \" Interfaces / TargetDeviceId . h \" # include \" Interfaces / ITargetDevice . h \" # endif class SComboButton ; # if OUTPUTLOG_HAS_TARGET_PLATFORMS struct FTargetDeviceEntry { FTargetDeviceId DeviceId ; const FSlateBrush* DeviceIconBrush ; ITargetDeviceWeakPtr DeviceWeakPtr ; } ; typedef TSharedPtr<FTargetDeviceEntry> FTargetDeviceEntryPtr ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSelectedTargetDeviceChangedDelegate, ITargetDevicePtr)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# endif class SDeviceOutputLog : public SOutputLog { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDeviceOutputLog) : _AutoSelectDevice(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, AutoSelectDevice) SLATE_END_ARGS() virtual ~SDeviceOutputLog()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnSelectedDeviceChanged()",
    "kind": "Method",
    "detail": "Function (# if OUTPUTLOG_HAS_TARGET_PLATFORMS FSelectedTargetDeviceChangedDelegate&)",
    "insertText": "OnSelectedDeviceChanged()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const class FName& Category)"
  },
  {
    "label": "CanBeUsedOnAnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedOnAnyThread()"
  },
  {
    "label": "ExecuteConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteConsoleCommand(const FString& ExecCommand)"
  },
  {
    "label": "HandleTargetPlatformDeviceLost()",
    "kind": "Method",
    "detail": "Function (# if OUTPUTLOG_HAS_TARGET_PLATFORMS void)",
    "insertText": "HandleTargetPlatformDeviceLost(ITargetDeviceRef LostDevice)"
  },
  {
    "label": "HandleTargetPlatformDeviceDiscovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTargetPlatformDeviceDiscovered(ITargetDeviceRef DiscoveredDevice)"
  },
  {
    "label": "AddDeviceEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDeviceEntry(ITargetDeviceRef TargetDevice)"
  },
  {
    "label": "FindDeviceEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDeviceEntry(FTargetDeviceId InDeviceId)"
  },
  {
    "label": "OnDeviceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeviceSelectionChanged(FTargetDeviceEntryPtr DeviceEntry)"
  },
  {
    "label": "MakeDeviceComboButtonMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeDeviceComboButtonMenu()"
  },
  {
    "label": "GenerateWidgetForDeviceComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForDeviceComboBox(const FTargetDeviceEntryPtr& DeviceEntry)"
  },
  {
    "label": "GetTargetDeviceText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTargetDeviceText(FTargetDeviceEntryPtr DeviceEntry)"
  },
  {
    "label": "GetSelectedTargetDeviceText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedTargetDeviceText()"
  },
  {
    "label": "GetTargetDeviceBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTargetDeviceBrush(FTargetDeviceEntryPtr DeviceEntry)"
  },
  {
    "label": "GetSelectedTargetDeviceBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetSelectedTargetDeviceBrush()"
  }
]