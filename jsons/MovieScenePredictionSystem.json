[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FMovieSceneEntityComponentField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEntityComponentField"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UMovieSceneSequencePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequencePlayer"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FEntityImportSequenceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityImportSequenceParams"
  },
  {
    "label": "UMovieSceneAsyncAction_SequencePrediction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneAsyncAction_SequencePrediction"
  },
  {
    "label": "UMovieScenePredictionSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScenePredictionSystem"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SparseArray . h \" # include \" Containers / Array . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Kismet / BlueprintAsyncActionBase . h \" # include \" Misc / FrameTime . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" EntitySystem / Interrogation / MovieSceneInterrogationLinker . h \" # include \" MovieScenePredictionSystem . generated . h \" struct FGuid ; struct FMovieSceneEntityComponentField ; class USceneComponent ; class UMovieSceneSequencePlayer ; class UMovieSceneEntitySystemLinker ; namespace UE { namespace MovieScene { struct FEntityImportSequenceParams ; } })",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FMovieSceneActorPredictionResult, FTransform, PredictedTransform)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FMovieSceneActorPredictionFailure)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(BlueprintType, meta=(ExposedAsyncProxy = \"AsyncTask\", HasDedicatedAsyncNode))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category=Cinematics) static UMovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtTime(UMovieSceneSequencePlayer* Player, USceneComponent* TargetComponent, float TimeInSeconds)"
  },
  {
    "label": "ImportEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportEntities(UE::MovieScene::FInterrogationChannels* Channels)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "ReportResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportResult(UE::MovieScene::FInterrogationChannels* Channels, const TSparseArray<TArray<FTransform>>& AllResults)"
  },
  {
    "label": "ReportResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportResult(UE::MovieScene::FInterrogationChannels* Channels, const TSparseArray<TArray<UE::MovieScene::FIntermediate3DTransform>>& AllResults)"
  },
  {
    "label": "MakePredictionImpl()",
    "kind": "Method",
    "detail": "Function (private : UMovieSceneAsyncAction_SequencePrediction*)",
    "insertText": "MakePredictionImpl(UMovieSceneSequencePlayer* Player, USceneComponent* TargetComponent, float TimeInSeconds, bool bInWorldSpace)"
  },
  {
    "label": "MakePredictionImpl()",
    "kind": "Method",
    "detail": "Function (UMovieSceneAsyncAction_SequencePrediction*)",
    "insertText": "MakePredictionImpl(UMovieSceneSequencePlayer* Player, USceneComponent* TargetComponent, FFrameTime TickResolutionTime, bool bInWorldSpace)"
  },
  {
    "label": "ImportTransformEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ImportTransformEntities(UMovieSceneEntitySystemLinker* Linker, const UE::MovieScene::FEntityImportSequenceParams& ImportParams, const FGuid& ObjectGuid, FFrameTime PredictedTime, const FMovieSceneEntityComponentField* ComponentField, const UE::MovieScene::FInterrogationKey& InterrogationKey)"
  },
  {
    "label": "ImportTransformEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ImportTransformEntities(UObject* PredicateObject, UObject* ObjectContext, const UE::MovieScene::FInterrogationKey& InterrogationKey)"
  },
  {
    "label": "ImportLocalTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportLocalTransforms(UE::MovieScene::FInterrogationChannels* Channels, USceneComponent* InSceneComponent)"
  },
  {
    "label": "ImportTransformHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportTransformHierarchy(UE::MovieScene::FInterrogationChannels* Channels, USceneComponent* InSceneComponent)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FFrameTime RootPredictedTime ; int32 InterrogationIndex ; bool bWorldSpace ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() UMovieScenePredictionSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "AddPendingPrediction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingPrediction(UMovieSceneAsyncAction_SequencePrediction* Prediction)"
  },
  {
    "label": "MakeNewInterrogation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MakeNewInterrogation(FFrameTime InTime)"
  },
  {
    "label": "IsRelevantImpl()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsRelevantImpl(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  }
]