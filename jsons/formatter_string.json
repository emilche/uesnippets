[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Allocator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMATTER_STRING_H # define _LIBCPP___FORMAT_FORMATTER_STRING_H # include<__availability> # include<__config> # include<__format / format_fwd . h> # include<__format / format_parse_context . h> # include<__format / formatter . h> # include<__format / formatter_output . h> # include<__format / parser_std_format_spec . h> # include<__utility / move . h> # include<string> # include<string_view> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "parse(basic_format_parse_context<_CharT>& __parse_ctx) -> decltype(__parse_ctx.begin())"
  },
  {
    "label": "__parse()",
    "kind": "Method",
    "detail": "Function (auto __result = __parser_ .)",
    "insertText": "__parse(__parse_ctx, __format_spec::__fields_string)"
  },
  {
    "label": "__process_display_type_string()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__process_display_type_string(__parser_.__type_)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} __format_spec::__parser<_CharT> __parser_ ; } ; template<__formatter::__char_type _CharT> struct _LIBCPP_TEMPLATE_VIS _LIBCPP_AVAILABILITY_FORMAT formatter<const _CharT*,_CharT> : public __formatter_string<_CharT> { using _Base = __formatter_string<_CharT> ; _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "format(const _CharT* __str, auto& __ctx) const -> decltype(__ctx.out())"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__str, \"The basic_format_arg constructor should have \" \"prevented an invalid pointer.\")"
  },
  {
    "label": "__get_parsed_std_specifications()",
    "kind": "Method",
    "detail": "Function (__format_spec::__parsed_specifications<_CharT> __specs = _Base::__parser_ .)",
    "insertText": "__get_parsed_std_specifications(__ctx)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (auto __out_it = __ctx .)",
    "insertText": "out()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} } ; template<__formatter::__char_type _CharT,size_t _Size> struct _LIBCPP_TEMPLATE_VIS _LIBCPP_AVAILABILITY_FORMAT formatter<_CharT [ _Size ],_CharT> : public __formatter_string<_CharT> { using _Base = __formatter_string<_CharT> ; _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "format(_CharT __str[_Size], auto& __ctx) const -> decltype(__ctx.out())"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} } ; template<__formatter::__char_type _CharT,size_t _Size> struct _LIBCPP_TEMPLATE_VIS _LIBCPP_AVAILABILITY_FORMAT formatter<const _CharT [ _Size ],_CharT> : public __formatter_string<_CharT> { using _Base = __formatter_string<_CharT> ; _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "format(const _CharT __str[_Size], auto& __ctx) const -> decltype(__ctx.out())"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} } ; template<__formatter::__char_type _CharT,class _Traits,class _Allocator> struct _LIBCPP_TEMPLATE_VIS _LIBCPP_AVAILABILITY_FORMAT formatter<basic_string<_CharT,_Traits,_Allocator>,_CharT> : public __formatter_string<_CharT> { using _Base = __formatter_string<_CharT> ; _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "format(const basic_string<_CharT, _Traits, _Allocator>& __str, auto& __ctx) const -> decltype(__ctx.out())"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} } ; template<__formatter::__char_type _CharT,class _Traits> struct _LIBCPP_TEMPLATE_VIS _LIBCPP_AVAILABILITY_FORMAT formatter<basic_string_view<_CharT,_Traits>,_CharT> : public __formatter_string<_CharT> { using _Base = __formatter_string<_CharT> ; _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "format(basic_string_view<_CharT, _Traits> __str, auto& __ctx) const -> decltype(__ctx.out())"
  }
]