[
  {
    "label": "ESourceManagerRenderThreadPhase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESourceManagerRenderThreadPhase"
  },
  {
    "label": "FMixerSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSubmix"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FMixerSourceVoice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceVoice"
  },
  {
    "label": "FMixerSourceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceBuffer"
  },
  {
    "label": "ISourceListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceListener"
  },
  {
    "label": "FMixerSourceSubmixOutputBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceSubmixOutputBuffer"
  },
  {
    "label": "FMixerSourceVoiceBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceVoiceBuffer"
  },
  {
    "label": "FMixerSourceSubmixSend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceSubmixSend"
  },
  {
    "label": "FInitAudioBusSend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitAudioBusSend"
  },
  {
    "label": "FMixerSourceVoiceInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMixerSourceVoiceInitParams"
  },
  {
    "label": "FSourceManagerInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceManagerInitParams"
  },
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FAudioMixerThreadCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioMixerThreadCommand"
  },
  {
    "label": "FAudioMixerSourceWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioMixerSourceWorker"
  },
  {
    "label": "FCommands",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommands"
  },
  {
    "label": "FSourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceInfo"
  },
  {
    "label": "FGameThreadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameThreadInfo"
  },
  {
    "label": "FPendingAudioBusConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingAudioBusConnection"
  },
  {
    "label": "WITH_AUDIO_MIXER_THREAD_COMMAND_DEBUG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioBusSubsystem . h \" # include \" AudioMixerBuffer . h \" # include \" AudioMixerBus . h \" # include \" AudioMixerDevice . h \" # include \" AudioMixerSourceOutputBuffer . h \" # include \" AudioMixerSubmix . h \" # include \" AudioMixerTrace . h \" # include \" Containers / MpscQueue . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / EnvelopeFollower . h \" # include \" DSP / InterpolatedOnePole . h \" # include \" DSP / ParamInterpolator . h \" # include \" IAudioExtensionPlugin . h \" # include \" ISoundfieldFormat . h \" # include \" Sound / SoundModulationDestination . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" Stats / Stats . h \" # include \" AudioMixerSourceManager . generated . h \" # ifndef WITH_AUDIO_MIXER_THREAD_COMMAND_DEBUG # define)",
    "insertText": "WITH_AUDIO_MIXER_THREAD_COMMAND_DEBUG(1) #endif DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Source Manager Update\"), STAT_AudioMixerSourceManagerUpdate, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Source Buffers\"), STAT_AudioMixerSourceBuffers, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Source Effect Buffers\"), STAT_AudioMixerSourceEffectBuffers, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Source Output Buffers\"), STAT_AudioMixerSourceOutputBuffers, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"HRTF\"), STAT_AudioMixerHRTF, STATGROUP_AudioMixer, AUDIOMIXER_API)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "ISourceListener()",
    "kind": "Method",
    "detail": "Function (Begin,PumpMpscCmds,PumpCmds,ProcessModulators,UpdatePendingReleaseData,GenerateSrcAudio_WithBusses,ComputeBusses,GenerateSrcAudio_WithoutBusses,UpdateBusses,SpatialInterface_OnAllSourcesProcessed,SourceDataOverride_OnAllSourcesProcessed,UpdateGameThreadCopies,Finished,} ; namespace Audio { class FMixerSubmix ; class FMixerDevice ; class FMixerSourceVoice ; class FMixerSourceBuffer ; class ISourceListener ; class FMixerSourceSubmixOutputBuffer ; struct FMixerSourceVoiceBuffer { FAlignedFloatBuffer AudioData ; int32 LoopCount = 0 ; bool bRealTimeBuffer = false ; } ; class ISourceListener { public : ~)",
    "insertText": "ISourceListener()"
  },
  {
    "label": "OnBeginGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginGenerate()"
  },
  {
    "label": "OnLoopEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoopEnd()"
  },
  {
    "label": "OnDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDone()"
  },
  {
    "label": "OnEffectTailsDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEffectTailsDone()"
  },
  {
    "label": "AudioBusSends()",
    "kind": "Method",
    "detail": "Function (} ; struct FMixerSourceSubmixSend { FMixerSubmixWeakPtr Submix ; float SendLevel = 0 . 0 f ; bool bIsMainSend = false ; EMixerSourceSubmixSendStage SubmixSendStage = EMixerSourceSubmixSendStage::PostDistanceAttenuation ; ISoundfieldFactory* SoundfieldFactory = nullptr ; } ; struct FInitAudioBusSend { uint32 AudioBusId = INDEX_NONE ; float SendLevel = 0 . 0 f ; int32 BusChannels = 0 ; } ; struct FMixerSourceVoiceInitParams { TSharedPtr<FMixerSourceBuffer,ESPMode::ThreadSafe> MixerSourceBuffer = nullptr ; ISourceListener* SourceListener = nullptr ; TArray<FMixerSourceSubmixSend> SubmixSends ; TArray<FInitAudioBusSend>)",
    "insertText": "AudioBusSends(int32)"
  },
  {
    "label": "FMixerSourceManager()",
    "kind": "Method",
    "detail": "Function (uint32 AudioBusId = INDEX_NONE ; int32 AudioBusChannels = 0 ; float SourceBusDuration = 0 . 0 f ; uint32 SourceEffectChainId = INDEX_NONE ; TArray<FSourceEffectChainEntry> SourceEffectChain ; int32 SourceEffectChainMaxSupportedChannels = 0 ; FMixerSourceVoice* SourceVoice = nullptr ; int32 NumInputChannels = 0 ; int32 NumInputFrames = 0 ; float EnvelopeFollowerAttackTime = 1 0 . 0 f ; float EnvelopeFollowerReleaseTime = 1 0 0 . 0 f ; FString DebugName ; USpatializationPluginSourceSettingsBase* SpatializationPluginSettings = nullptr ; UOcclusionPluginSourceSettingsBase* OcclusionPluginSettings = nullptr ; UReverbPluginSourceSettingsBase* ReverbPluginSettings = nullptr ; USourceDataOverridePluginSourceSettingsBase* SourceDataOverridePluginSettings = nullptr ; FSoundModulationDefaultSettings ModulationSettings ; FQuartzQuantizedRequestData QuantizedRequestData ; FSharedISourceBufferListenerPtr SourceBufferListener ; IAudioLinkFactory::FAudioLinkSourcePushedSharedPtr AudioLink ; FName AudioComponentUserID ; uint64 AudioComponentID = 0 ; bool bIs3D = false ; bool bPlayEffectChainTails = false ; bool bUseHRTFSpatialization = false ; bool bIsExternalSend = false ; bool bIsDebugMode = false ; bool bEnableBusSends = false ; bool bEnableBaseSubmix = false ; bool bEnableSubmixSends = false ; bool bIsVorbis = false ; bool bIsSoundfield = false ; bool bIsSeeking = false ; bool bShouldSourceBufferListenerZeroBuffer = false ; uint32 PlayOrder = INDEX_NONE ; } ; struct FSourceManagerInitParams { int32 NumSources = 0 ; int32 NumSourceWorkers = 0 ; } ; class FMixerSourceManager { public :)",
    "insertText": "FMixerSourceManager(FMixerDevice* InMixerDevice)"
  },
  {
    "label": "FMixerSourceManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMixerSourceManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FSourceManagerInitParams& InitParams)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool bTimedOut = false)"
  },
  {
    "label": "GetFreeSourceId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFreeSourceId(int32& OutSourceId)"
  },
  {
    "label": "GetNumActiveSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveSources()"
  },
  {
    "label": "GetNumActiveAudioBuses()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveAudioBuses()"
  },
  {
    "label": "ReleaseSourceId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSourceId(const int32 SourceId)"
  },
  {
    "label": "InitSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSource(const int32 SourceId, const FMixerSourceVoiceInitParams& InitParams)"
  },
  {
    "label": "StartAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAudioBus(FAudioBusKey InAudioBusKey, int32 InNumChannels, bool bInIsAutomatic)"
  },
  {
    "label": "StopAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAudioBus(FAudioBusKey InAudioBusKey)"
  },
  {
    "label": "IsAudioBusActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioBusActive(FAudioBusKey InAudioBusKey)"
  },
  {
    "label": "GetAudioBusNumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAudioBusNumChannels(FAudioBusKey InAudioBusKey)"
  },
  {
    "label": "AddPatchOutputForAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPatchOutputForAudioBus(FAudioBusKey InAudioBusKey, const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddPatchOutputForAudioBus_AudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPatchOutputForAudioBus_AudioThread(FAudioBusKey InAudioBusKey, const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddPatchInputForAudioBus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPatchInputForAudioBus(FAudioBusKey InAudioBusKey, const FPatchInput& InPatchInput)"
  },
  {
    "label": "AddPatchInputForAudioBus_AudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPatchInputForAudioBus_AudioThread(FAudioBusKey InAudioBusKey, const FPatchInput& InPatchInput)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(const int32 SourceId)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(const int32 SourceId)"
  },
  {
    "label": "CancelQuantizedSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelQuantizedSound(const int32 SourceId)"
  },
  {
    "label": "StopInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopInternal(const int32 SourceId)"
  },
  {
    "label": "StopFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopFade(const int32 SourceId, const int32 NumFrames)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause(const int32 SourceId)"
  },
  {
    "label": "SetPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitch(const int32 SourceId, const float Pitch)"
  },
  {
    "label": "SetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolume(const int32 SourceId, const float Volume)"
  },
  {
    "label": "SetDistanceAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDistanceAttenuation(const int32 SourceId, const float DistanceAttenuation)"
  },
  {
    "label": "SetSpatializationParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpatializationParams(const int32 SourceId, const FSpatializationParams& InParams)"
  },
  {
    "label": "SetChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelMap(const int32 SourceId, const uint32 NumInputChannels, const Audio::FAlignedFloatBuffer& InChannelMap, const bool bInIs3D, const bool bInIsCenterChannelOnly)"
  },
  {
    "label": "SetLPFFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLPFFrequency(const int32 SourceId, const float Frequency)"
  },
  {
    "label": "SetHPFFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHPFFrequency(const int32 SourceId, const float Frequency)"
  },
  {
    "label": "SetModPitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModPitch(const int32 SourceId, const float InModPitch)"
  },
  {
    "label": "SetModVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModVolume(const int32 SourceId, const float InModVolume)"
  },
  {
    "label": "SetModLPFFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModLPFFrequency(const int32 SourceId, const float InModFrequency)"
  },
  {
    "label": "SetModHPFFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModHPFFrequency(const int32 SourceId, const float InModFrequency)"
  },
  {
    "label": "SetModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationRouting(const int32 SourceId, FSoundModulationDefaultSettings& ModulationSettings)"
  },
  {
    "label": "SetSourceBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBufferListener(const int32 SourceId, FSharedISourceBufferListenerPtr& InSourceBufferListener, bool InShouldSourceBufferListenerZeroBuffer)"
  },
  {
    "label": "SetListenerTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListenerTransforms(const TArray<FTransform>& ListenerTransforms)"
  },
  {
    "label": "GetListenerTransforms()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform>*)",
    "insertText": "GetListenerTransforms()"
  },
  {
    "label": "GetNumFramesPlayed()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetNumFramesPlayed(const int32 SourceId)"
  },
  {
    "label": "GetEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEnvelopeValue(const int32 SourceId)"
  },
  {
    "label": "GetCPUCoreUtilization()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_AUDIO_DEBUG double)",
    "insertText": "GetCPUCoreUtilization(const int32 SourceId)"
  },
  {
    "label": "GetRelativeRenderCost()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetRelativeRenderCost(const int32 SourceId)"
  },
  {
    "label": "IsUsingHRTFSpatializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHRTFSpatializer(const int32 SourceId)"
  },
  {
    "label": "NeedsSpeakerMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsSpeakerMap(const int32 SourceId)"
  },
  {
    "label": "ComputeNextBlockOfSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNextBlockOfSamples()"
  },
  {
    "label": "ClearStoppingSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStoppingSounds()"
  },
  {
    "label": "MixOutputBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixOutputBuffers(const int32 SourceId, int32 InNumOutputChannels, const float InSendLevel, EMixerSourceSubmixSendStage InSubmixSendStage, FAlignedFloatBuffer& OutWetBuffer)"
  },
  {
    "label": "Get2DChannelMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get2DChannelMap(const int32 SourceId, int32 InNumOutputChannels, Audio::FAlignedFloatBuffer& OutChannelMap)"
  },
  {
    "label": "GetEncodedOutput()",
    "kind": "Method",
    "detail": "Function (const ISoundfieldAudioPacket*)",
    "insertText": "GetEncodedOutput(const int32 SourceId, const FSoundfieldEncodingKey& InKey)"
  },
  {
    "label": "GetListenerRotation()",
    "kind": "Method",
    "detail": "Function (const FQuat)",
    "insertText": "GetListenerRotation(const int32 SourceId)"
  },
  {
    "label": "SetSubmixSendInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixSendInfo(const int32 SourceId, const FMixerSourceSubmixSend& SubmixSend)"
  },
  {
    "label": "ClearSubmixSendInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSubmixSendInfo(const int32 SourceId, const FMixerSourceSubmixSend& SubmixSend)"
  },
  {
    "label": "SetBusSendInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBusSendInfo(const int32 SourceId, EBusSendType InAudioBusSendType, uint32 AudiobusId, float BusSendLevel)"
  },
  {
    "label": "UpdateDeviceChannelCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceChannelCount(const int32 InNumOutputChannels)"
  },
  {
    "label": "UpdateSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSourceEffectChain(const uint32 SourceEffectChainId, const TArray<FSourceEffectChainEntry>& SourceEffectChain, const bool bPlayEffectChainTails)"
  },
  {
    "label": "PauseSoundForQuantizationCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseSoundForQuantizationCommand(const int32 SourceId)"
  },
  {
    "label": "SetSubBufferDelayForSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubBufferDelayForSound(const int32 SourceId, const int32 FramesToDelay)"
  },
  {
    "label": "UnPauseSoundForQuantizationCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnPauseSoundForQuantizationCommand(const int32 SourceId)"
  },
  {
    "label": "GetPreDistanceAttenuationBuffer()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetPreDistanceAttenuationBuffer(const int32 SourceId)"
  },
  {
    "label": "GetPreEffectBuffer()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetPreEffectBuffer(const int32 SourceId)"
  },
  {
    "label": "GetPreviousSourceBusBuffer()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetPreviousSourceBusBuffer(const int32 SourceId)"
  },
  {
    "label": "GetPreviousAudioBusBuffer()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetPreviousAudioBusBuffer(const int32 AudioBusId)"
  },
  {
    "label": "GetNumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChannels(const int32 SourceId)"
  },
  {
    "label": "GetNumOutputFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumOutputFrames()"
  },
  {
    "label": "PumpCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpCommandQueue()"
  },
  {
    "label": "UpdatePendingReleaseData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePendingReleaseData(bool bForceWait = false)"
  },
  {
    "label": "FlushCommandQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCommandQueue(bool bPumpCommandQueue = false)"
  },
  {
    "label": "AudioMixerThreadMPSCCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioMixerThreadMPSCCommand(TFunction<void()>&& InCommand, const char* InDebugString=nullptr)"
  },
  {
    "label": "AddPendingAudioBusConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingAudioBusConnection(FAudioBusKey AudioBusKey, int32 NumChannels, bool bIsAutomatic, FPatchInput PatchInput)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (PendingAudioBusConnections .)",
    "insertText": "Enqueue(FPendingAudioBusConnection{ FPendingAudioBusConnection::FPatchVariant(TInPlaceType<FPatchInput>(), MoveTemp(PatchInput)), MoveTemp(AudioBusKey), NumChannels, bIsAutomatic })"
  },
  {
    "label": "AddPendingAudioBusConnection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPendingAudioBusConnection(FAudioBusKey AudioBusKey, int32 NumChannels, bool bIsAutomatic, FPatchOutputStrongPtr PatchOutputStrongPtr)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (PendingAudioBusConnections .)",
    "insertText": "Enqueue(FPendingAudioBusConnection{ FPendingAudioBusConnection::FPatchVariant(TInPlaceType<FPatchOutputStrongPtr>(), MoveTemp(PatchOutputStrongPtr)), MoveTemp(AudioBusKey), NumChannels, bIsAutomatic })"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} private : # define INVALID_AUDIO_RENDER_THREAD_ID static_cast<)",
    "insertText": "uint32(-1)"
  },
  {
    "label": "ReleaseSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSource(const int32 SourceId)"
  },
  {
    "label": "BuildSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSourceEffectChain(const int32 SourceId, FSoundEffectSourceInitData& InitData, const TArray<FSourceEffectChainEntry>& SourceEffectChain, TArray<TSoundEffectSourcePtr>& OutSourceEffects)"
  },
  {
    "label": "ResetSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSourceEffectChain(const int32 SourceId)"
  },
  {
    "label": "ReadSourceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSourceFrame(const int32 SourceId)"
  },
  {
    "label": "GenerateSourceAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSourceAudio(const bool bGenerateBuses)"
  },
  {
    "label": "GenerateSourceAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSourceAudio(const bool bGenerateBuses, const int32 SourceIdStart, const int32 SourceIdEnd)"
  },
  {
    "label": "ComputeSourceBuffersForIdRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSourceBuffersForIdRange(const bool bGenerateBuses, const int32 SourceIdStart, const int32 SourceIdEnd)"
  },
  {
    "label": "ComputePostSourceEffectBufferForIdRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePostSourceEffectBufferForIdRange(const bool bGenerateBuses, const int32 SourceIdStart, const int32 SourceIdEnd)"
  },
  {
    "label": "ComputeOutputBuffersForIdRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOutputBuffersForIdRange(const bool bGenerateBuses, const int32 SourceIdStart, const int32 SourceIdEnd)"
  },
  {
    "label": "ConnectBusPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectBusPatches()"
  },
  {
    "label": "ComputeBuses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeBuses()"
  },
  {
    "label": "UpdateBuses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuses()"
  },
  {
    "label": "FAudioMixerThreadCommand()",
    "kind": "Method",
    "detail": "Function (struct FAudioMixerThreadCommand {)",
    "insertText": "FAudioMixerThreadCommand()"
  },
  {
    "label": "FAudioMixerThreadCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioMixerThreadCommand(TFunction<void()>&& InFunction, const char* InDebugString, bool bInDeferExecution = false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "GetSafeDebugString()",
    "kind": "Method",
    "detail": "Function (bool bDeferExecution = false ; # if WITH_AUDIO_MIXER_THREAD_COMMAND_DEBUG const char* DebugString = nullptr ; uint64_t StartExecuteTimeInCycles = 0 ; # endif FString)",
    "insertText": "GetSafeDebugString()"
  },
  {
    "label": "GetExecuteTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetExecuteTimeInSeconds()"
  },
  {
    "label": "AudioMixerThreadCommand()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AudioMixerThreadCommand(TFunction<void()>&& InFunction, const char* InDebugString = nullptr, bool bInDeferExecution = false)"
  },
  {
    "label": "FAudioMixerSourceWorker()",
    "kind": "Method",
    "detail": "Function (const int32 NUM_BYTES_PER_SAMPLE = 2 ; class FAudioMixerSourceWorker : public FNonAbandonableTask { FMixerSourceManager* SourceManager ; int32 StartSourceId ; int32 EndSourceId ; bool bGenerateBuses ; public :)",
    "insertText": "FAudioMixerSourceWorker(FMixerSourceManager* InSourceManager, const int32 InStartSourceId, const int32 InEndSourceId) : SourceManager(InSourceManager) , StartSourceId(InStartSourceId) , EndSourceId(InEndSourceId) , bGenerateBuses(false)"
  },
  {
    "label": "SetGenerateBuses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGenerateBuses(bool bInGenerateBuses)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (bGenerateBuses = bInGenerateBuses ; } void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GenerateSourceAudio()",
    "kind": "Method",
    "detail": "Function (SourceManager ->)",
    "insertText": "GenerateSourceAudio(bGenerateBuses, StartSourceId, EndSourceId)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "FSourceInfo()",
    "kind": "Method",
    "detail": "Function (} } ; FCriticalSection EffectChainMutationCriticalSection ; FMixerDevice* MixerDevice ; FAudioDevice::FAudioSpatializationInterfaceInfo SpatialInterfaceInfo ; TAudioSourceDataOverridePtr SourceDataOverridePlugin ; IAudioLinkFactory* AudioLinkFactory = nullptr ; TArray<FMixerSourceVoice*> MixerSources ; struct FCommands { FThreadSafeCounter NumTimesOvergrown = 0 ; TArray<FAudioMixerThreadCommand> SourceCommandQueue ; } ; FCommands CommandBuffers [ 2 ] ; FThreadSafeCounter RenderThreadCommandBufferIndex ; FEvent* CommandsProcessedEvent ; FCriticalSection CommandBufferIndexCriticalSection ; TArray<int32> DebugSoloSources ; using FAudioMixerMpscCommand = FAudioMixerThreadCommand ; TMpscQueue<FAudioMixerMpscCommand> MpscCommandQueue ; struct FSourceInfo {)",
    "insertText": "FSourceInfo()"
  },
  {
    "label": "ResetModulators()",
    "kind": "Method",
    "detail": "Function (FParam PitchSourceParam ; float VolumeSourceStart ; float VolumeSourceDestination ; float VolumeFadeSlope ; float VolumeFadeStart ; int32 VolumeFadeFramePosition ; int32 VolumeFadeNumFrames ; float DistanceAttenuationSourceStart ; float DistanceAttenuationSourceDestination ; float LowPassFreq ; float HighPassFreq ; Audio::FInterpolatedLPF LowPassFilter ; Audio::FInterpolatedHPF HighPassFilter ; uint32 SourceEffectChainId ; TArray<TSoundEffectSourcePtr> SourceEffects ; TArray<USoundEffectSourcePreset*> SourceEffectPresets ; bool bEffectTailsDone ; FSoundEffectSourceInputData SourceEffectInputData ; FAudioPluginSourceOutputData AudioPluginOutputData ; Audio::FInlineEnvelopeFollower SourceEnvelopeFollower ; float SourceEnvelopeValue ; Audio::FModulationDestination VolumeModulation ; Audio::FModulationDestination PitchModulation ; Audio::FModulationDestination LowpassModulation ; Audio::FModulationDestination HighpassModulation ; float VolumeModulationBase ; float PitchModulationBase ; float LowpassModulationBase ; float HighpassModulationBase ; FSpatializationParams SpatParams ; Audio::FAlignedFloatBuffer ScratchChannelMap ; FQuartzQuantizedCommandHandle QuantizedCommandHandle ; FSharedISourceBufferListenerPtr SourceBufferListener ; IAudioLinkFactory::FAudioLinkSourcePushedSharedPtr AudioLink ; uint8 bIs3D : 1 ; uint8 bIsCenterChannelOnly : 1 ; uint8 bIsActive : 1 ; uint8 bIsPlaying : 1 ; uint8 bIsPaused : 1 ; uint8 bIsPausedForQuantization : 1 ; uint8 bDelayLineSet : 1 ; uint8 bIsStopping : 1 ; uint8 bHasStarted : 1 ; uint8 bIsBusy : 1 ; uint8 bUseHRTFSpatializer : 1 ; uint8 bIsExternalSend : 1 ; uint8 bUseOcclusionPlugin : 1 ; uint8 bUseReverbPlugin : 1 ; uint8 bIsDone : 1 ; uint8 bIsLastBuffer : 1 ; uint8 bEnableBusSends : 1 ; uint8 bEnableBaseSubmix : 1 ; uint8 bEnableSubmixSends : 1 ; uint8 bIsVorbis : 1 ; uint8 bIsSoundfield : 1 ; uint8 bHasPreDistanceAttenuationSend : 1 ; uint8 bModFiltersUpdated : 1 ; uint8 bShouldSourceBufferListenerZeroBuffer : 1 ; int32 NumInputChannels ; int32 NumPostEffectChannels ; int32 NumInputFrames ; uint32 PlayOrder ; uint64 AudioComponentID ; void)",
    "insertText": "ResetModulators(const Audio::FDeviceId InDeviceId)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (VolumeModulation .)",
    "insertText": "Init(InDeviceId, FName(\"Volume\"), false , true)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (PitchModulation .)",
    "insertText": "Init(InDeviceId, FName(\"Pitch\"))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (HighpassModulation .)",
    "insertText": "Init(InDeviceId, FName(\"HPFCutoffFrequency\"))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LowpassModulation .)",
    "insertText": "Init(InDeviceId, FName(\"LPFCutoffFrequency\"))"
  },
  {
    "label": "IsRenderingToSubmixes()",
    "kind": "Method",
    "detail": "Function (VolumeModulationBase = 0 . 0 f ; PitchModulationBase = 0 . 0 f ; HighpassModulationBase = MIN_FILTER_FREQUENCY ; LowpassModulationBase = MAX_FILTER_FREQUENCY ; } bool)",
    "insertText": "IsRenderingToSubmixes()"
  },
  {
    "label": "ApplyDistanceAttenuation()",
    "kind": "Method",
    "detail": "Function (# if AUDIO_MIXER_ENABLE_DEBUG_MODE uint8 bIsDebugMode : 1 ; FString DebugName ; # endif } ; void)",
    "insertText": "ApplyDistanceAttenuation(FSourceInfo& InSourceInfo, int32 NumSamples)"
  },
  {
    "label": "ComputePluginAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePluginAudio(FSourceInfo& InSourceInfo, FMixerSourceSubmixOutputBuffer& InSourceSubmixOutputBuffer, int32 SourceId, int32 NumSamples)"
  },
  {
    "label": "DoStallDiagnostics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoStallDiagnostics()"
  },
  {
    "label": "LogRenderThreadStall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRenderThreadStall()"
  },
  {
    "label": "LogInflightAsyncTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogInflightAsyncTasks()"
  },
  {
    "label": "LogCallstacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCallstacks()"
  },
  {
    "label": "LogCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCallstack(uint32 InThreadId)"
  }
]