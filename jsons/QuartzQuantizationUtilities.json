[
  {
    "label": "FQuartzTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzTickableObject"
  },
  {
    "label": "FQuartzClockTickRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockTickRate"
  },
  {
    "label": "FQuartzQuantizationBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizationBoundary"
  },
  {
    "label": "FQuartzTimeSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTimeSignature"
  },
  {
    "label": "IAudioMixerQuantizedEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerQuantizedEventListener"
  },
  {
    "label": "IQuartzQuantizedCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQuartzQuantizedCommand"
  },
  {
    "label": "FQuartzClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClock"
  },
  {
    "label": "FShareableQuartzCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShareableQuartzCommandQueue"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FQuartzQuantizedCommandDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandDelegateData"
  },
  {
    "label": "FQuartzMetronomeDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzMetronomeDelegateData"
  },
  {
    "label": "FQuartzQueueCommandData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQueueCommandData"
  },
  {
    "label": "FQuartzQuantizedCommandInitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandInitInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQuartzPulseOverrideStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzPulseOverrideStep"
  },
  {
    "label": "FQuartzTransportTimeStamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTransportTimeStamp"
  },
  {
    "label": "FQuartzClockSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockSettings"
  },
  {
    "label": "FQuartLatencyTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartLatencyTracker"
  },
  {
    "label": "FAudioMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioMixer"
  },
  {
    "label": "FQuartzLatencyTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzLatencyTimer"
  },
  {
    "label": "FQuartzCrossThreadMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzCrossThreadMessage"
  },
  {
    "label": "FQuartzOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzOffset"
  },
  {
    "label": "IQueueCommandListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQueueCommandListener"
  },
  {
    "label": "ICommandListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICommandListener"
  },
  {
    "label": "IMetronomeEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMetronomeEventListener"
  },
  {
    "label": "FQuartzGameThreadSubscriber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzGameThreadSubscriber"
  },
  {
    "label": "FQuartzQuantizedRequestData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedRequestData"
  },
  {
    "label": "FQuartzQuantizedCommandHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandHandle"
  },
  {
    "label": "FAudioComponentCommandInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentCommandInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" QuartzCommandQueue . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Containers / Map . h \" # include \" Containers / Queue . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" QuartzQuantizationUtilities . generated . h \" class FQuartzTickableObject ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioQuartz, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (struct FQuartzClockTickRate ; struct FQuartzQuantizationBoundary ; struct FQuartzTimeSignature ; namespace Audio { class IAudioMixerQuantizedEventListener ; class IQuartzQuantizedCommand ; class FQuartzClock ; class FShareableQuartzCommandQueue ; class FMixerDevice ; struct FQuartzQuantizedCommandDelegateData ; struct FQuartzMetronomeDelegateData ; struct FQuartzQueueCommandData ; struct FQuartzQuantizedCommandInitInfo ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Bar)",
    "insertText": "UMETA(DisplayName = \"Bar\", ToolTip = \"(dependent on time signature)\"), Beat UMETA(DisplayName = \"Beat\", ToolTip = \"(dependent on time signature and Pulse Override)\"), ThirtySecondNote UMETA(DisplayName = \"1/32\"), SixteenthNote UMETA(DisplayName = \"1/16\"), EighthNote UMETA(DisplayName = \"1/8\"), QuarterNote UMETA(DisplayName = \"1/4\"), HalfNote UMETA(DisplayName = \"Half\"), WholeNote UMETA(DisplayName = \"Whole\"), DottedSixteenthNote UMETA(DisplayName = \"(dotted) 1/16\"), DottedEighthNote UMETA(DisplayName = \"(dotted) 1/8\"), DottedQuarterNote UMETA(DisplayName = \"(dotted) 1/4\"), DottedHalfNote UMETA(DisplayName = \"(dotted) Half\"), DottedWholeNote UMETA(DisplayName = \"(dotted) Whole\"), SixteenthNoteTriplet UMETA(DisplayName = \"1/16 (triplet)\"), EighthNoteTriplet UMETA(DisplayName = \"1/8 (triplet)\"), QuarterNoteTriplet UMETA(DisplayName = \"1/4 (triplet)\"), HalfNoteTriplet UMETA(DisplayName = \"1/2 (triplet)\"), Tick UMETA(DisplayName = \"On Tick (Smallest Value, same as 1/32)\", ToolTip = \"(same as 1/32)\"), Count UMETA(Hidden), None UMETA(DisplayName = \"None\", ToolTip = \"(Execute as soon as possible)\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (HalfNote)",
    "insertText": "UMETA(DisplayName = \"/2\"), QuarterNote UMETA(DisplayName = \"/4\"), EighthNote UMETA(DisplayName = \"/8\"), SixteenthNote UMETA(DisplayName = \"/16\"), ThirtySecondNote UMETA(DisplayName = \"/32\"), Count UMETA(Hidden)"
  },
  {
    "label": "TimeSignatureQuantizationToCommandQuantization()",
    "kind": "Method",
    "detail": "Function (EQuartzCommandQuantization)",
    "insertText": "TimeSignatureQuantizationToCommandQuantization(const EQuartzTimeSignatureQuantization& BeatType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Quantized Audio Clock Time Signature\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FQuartzTimeSignature()"
  },
  {
    "label": "FQuartzTimeSignature()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FQuartzTimeSignature(const FQuartzTimeSignature& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FQuartzTimeSignature&)",
    "insertText": "operator(const FQuartzTimeSignature& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Quantized Audio TimeStamp\")"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (0 . f } ; bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MetronomeTick)",
    "insertText": "UMETA(DisplayName = \"Metronome Tick\"), CommandEvent UMETA(DisplayName = \"Command Event\"), Count UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType, meta = (DisplayName=\"EQuartz Quantization Reference\"))"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (BarRelative)",
    "insertText": "UMETA(DisplayName = \"Bar Relative\", ToolTip = \"Will occur on the next occurence of this duration from the start of a bar (i.e. On beat 3)\"), TransportRelative UMETA(DisplayName = \"Transport Relative\", ToolTip = \"Will occur on the next multiple of this duration since the clock started ticking (i.e. on the next 4 bar boundary)\"), CurrentTimeRelative UMETA(DisplayName = \"Current Time Relative\", ToolTip = \"Will occur on the next multiple of this duration from the current time (i.e. In three beats)\"), Count UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (CommandOnFailedToQueue)",
    "insertText": "UMETA(DisplayName = \"Failed To Queue\", ToolTip = \"The command will not execute (i.e. Clock doesn't exist or PlayQuantized failed concurrency)\"), CommandOnQueued UMETA(DisplayName = \"Queued\", ToolTip = \"The command has been passed to the Audio Render Thread\"), CommandOnCanceled UMETA(DisplayName = \"Canceled\", ToolTip = \"The command was stopped before it could execute\"), CommandOnAboutToStart UMETA(DisplayName = \"About To Start\", ToolTip = \"execute off this to be in sync w/ sound starting\"), CommandOnStarted UMETA(DisplayName = \"Started\", ToolTip = \"the command was just executed on the Audio Render Thrtead\"), Count UMETA(Hidden)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (PlaySound)",
    "insertText": "UMETA(DisplayName = \"Play Sound\", ToolTip = \"Play a sound on a spample-accurate boundary (taking a voice slot immediately)\"), QueueSoundToPlay UMETA(DisplayName = \"Queue Sound To Play\", ToolTip = \"Queue a sound to play when it gets closer to its quantization boundary (avoids stealing a voice slot right away)\"), RetriggerSound UMETA(DisplayName = \"Re-trigger Sound\", ToolTip = \"Quantized looping of the target sound (event tells the AudioComponent to play the sound again)\"), TickRateChange UMETA(DisplayName = \"Tick Rate Change\", ToolTip = \"Quantized change of the tick-rate (i.e. BPM change)\"), TransportReset UMETA(DisplayName = \"Transport Reset\", ToolTip = \"Quantized reset of the clocks transport (back to time = 0 on the boundary)\"), StartOtherClock UMETA(DisplayName = \"Start Other Clock\", ToolTip = \"Quantized start of another clock. Useful for sample accurate synchronization of clocks (i.e. to handle time signature changes)\"), Notify UMETA(DisplayName = \"Quantized Notify\", ToolTip = \"Command used only to get delegates for timing information (basically an empty command)\"), Custom UMETA(DisplayName = \"Custom\", ToolTip = \"Quantized custom command\")"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams(FOnQuartzMetronomeEvent, FName, ClockName, EQuartzCommandQuantization, QuantizationType, int32, NumBars, int32, Beat, float, BeatFraction)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_FiveParams(FOnQuartzMetronomeEventBP, FName, ClockName, EQuartzCommandQuantization, QuantizationType, int32, NumBars, int32, Beat, float, BeatFraction)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnQuartzCommandEvent, EQuartzCommandDelegateSubType, EventType, FName, Name)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FOnQuartzCommandEventBP, EQuartzCommandDelegateSubType, EventType, FName, Name)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Quantized Audio Clock Settings\")"
  },
  {
    "label": "FQuartLatencyTracker()",
    "kind": "Method",
    "detail": "Function (false } ; } ; class FQuartLatencyTracker { public :)",
    "insertText": "FQuartLatencyTracker()"
  },
  {
    "label": "PushLatencyTrackerResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLatencyTrackerResult(const double& InResult)"
  },
  {
    "label": "GetLifetimeAverageLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLifetimeAverageLatency()"
  },
  {
    "label": "GetMinLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinLatency()"
  },
  {
    "label": "GetMaxLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxLatency()"
  },
  {
    "label": "PushSingleResult()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushSingleResult(const double& InResult)"
  },
  {
    "label": "DigestQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DigestQueue()"
  },
  {
    "label": "FQuartzClockTickRate()",
    "kind": "Method",
    "detail": "Function (TQueue<float,EQueueMode::Mpsc> ResultQueue ; int64 NumEntries { 0 } ; float LifetimeAverage { 0 . f } ; float Min { 0 . 0 f } ; float Max { 0 . 0 f } ; } ; namespace Audio { class FAudioMixer ; struct FQuartzClockTickRate { public :)",
    "insertText": "FQuartzClockTickRate()"
  },
  {
    "label": "SetFramesPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFramesPerTick(int32 InNewFramesPerTick)"
  },
  {
    "label": "SetMillisecondsPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMillisecondsPerTick(double InNewMillisecondsPerTick)"
  },
  {
    "label": "SetSecondsPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSecondsPerTick(double InNewSecondsPerTick)"
  },
  {
    "label": "SetThirtySecondNotesPerMinute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThirtySecondNotesPerMinute(double InNewThirtySecondNotesPerMinute)"
  },
  {
    "label": "SetBeatsPerMinute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBeatsPerMinute(double InNewBeatsPerMinute)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(double InNewSampleRate)"
  },
  {
    "label": "GetFramesPerDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetFramesPerDuration(EQuartzTimeSignatureQuantization InDuration)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(int32 InEventResolutionThreshold = 1)"
  },
  {
    "label": "IsSameTickRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSameTickRate(const FQuartzClockTickRate& Other, bool bAccountForDifferentSampleRates = true)"
  },
  {
    "label": "RecalculateDurationsBasedOnFramesPerTick()",
    "kind": "Method",
    "detail": "Function (private : double FramesPerTick { 1 . 0 } ; double MillisecondsPerTick { 1 . 0 } ; double SecondsPerTick { 1 . 0 } ; double ThirtySecondNotesPerMinute { 1 . 0 } ; double BeatsPerMinute { 0 . 0 } ; double SampleRate { 4 4 1 0 0 . 0 } ; void)",
    "insertText": "RecalculateDurationsBasedOnFramesPerTick()"
  },
  {
    "label": "FQuartzLatencyTimer()",
    "kind": "Method",
    "detail": "Function (} ; class FQuartzLatencyTimer { public :)",
    "insertText": "FQuartzLatencyTimer()"
  },
  {
    "label": "StartTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTimer()"
  },
  {
    "label": "ResetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimer()"
  },
  {
    "label": "StopTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTimer()"
  },
  {
    "label": "GetCurrentTimePassedMs()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentTimePassedMs()"
  },
  {
    "label": "GetResultsMilliseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetResultsMilliseconds()"
  },
  {
    "label": "HasTimerStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimerStarted()"
  },
  {
    "label": "HasTimerStopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimerStopped()"
  },
  {
    "label": "IsTimerRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerRunning()"
  },
  {
    "label": "HasTimerRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimerRun()"
  },
  {
    "label": "FQuartzCrossThreadMessage()",
    "kind": "Method",
    "detail": "Function (private : int64 JourneyStartCycles ; int64 JourneyEndCycles ; } ; class FQuartzCrossThreadMessage : public FQuartzLatencyTimer { public :)",
    "insertText": "FQuartzCrossThreadMessage(bool bAutoStartTimer = true)"
  },
  {
    "label": "RequestSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSent()"
  },
  {
    "label": "RequestReceived()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "RequestReceived()"
  },
  {
    "label": "GetCurrentTimeMilliseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentTimeMilliseconds()"
  },
  {
    "label": "FQuartzOffset()",
    "kind": "Method",
    "detail": "Function (private : FQuartzLatencyTimer Timer ; } ; struct FQuartzOffset { public :)",
    "insertText": "FQuartzOffset(double InOffsetInMilliseconds = 0.0)"
  },
  {
    "label": "FQuartzOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuartzOffset(EQuartzCommandQuantization InDuration, double InMultiplier)"
  },
  {
    "label": "SetOffsetInMilliseconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffsetInMilliseconds(double InMilliseconds)"
  },
  {
    "label": "SetOffsetMusical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffsetMusical(EQuartzCommandQuantization Duration, double Multiplier)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsSetAsMilliseconds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSetAsMilliseconds()"
  },
  {
    "label": "IsSetAsMusicalDuration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetAsMusicalDuration()"
  },
  {
    "label": "GetOffsetInAudioFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOffsetInAudioFrames(const FQuartzClockTickRate& InTickRate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FQuartzOffset& Other)"
  },
  {
    "label": "FQuartzGameThreadSubscriber()",
    "kind": "Method",
    "detail": "Function (private : TOptional<double> OffsetInMilliseconds ; TOptional<TPair<EQuartzCommandQuantization,double>> OffsetAsDuration ; } ; namespace Quartz { class IQueueCommandListener ; class ICommandListener ; class IMetronomeEventListener ; using FQuartzSubscriberCommandQueue = Audio::Quartz::PrivateDefs::TQuartzCommandQueue<IMetronomeEventListener,ICommandListener,IQueueCommandListener> ; using FQuartzGameThreadCommandQueuePtr = TSharedPtr<FQuartzSubscriberCommandQueue,ESPMode::ThreadSafe> ; } struct FQuartzGameThreadSubscriber {)",
    "insertText": "FQuartzGameThreadSubscriber()"
  },
  {
    "label": "FQuartzGameThreadSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuartzGameThreadSubscriber(const Quartz::FQuartzGameThreadCommandQueuePtr& InQueuePtr) : Queue(InQueuePtr)"
  },
  {
    "label": "FQuartzGameThreadSubscriber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuartzGameThreadSubscriber(const Quartz::FQuartzGameThreadCommandQueuePtr& InQueuePtr, FQuartzOffset InOffset) : Offset(InOffset) , Queue(InQueuePtr)"
  },
  {
    "label": "SetOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOffset(FQuartzOffset InOffset)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Offset =)",
    "insertText": "MoveTemp(InOffset)"
  },
  {
    "label": "HasBeenNotifiedOfAboutToStart()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenNotifiedOfAboutToStart()"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const FQuartzQuantizedCommandDelegateData& Data)"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const FQuartzMetronomeDelegateData& Data)"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const FQuartzQueueCommandData& Data)"
  },
  {
    "label": "FQuartzGameThreadCommandQueuePtr()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FQuartzGameThreadCommandQueuePtr()"
  },
  {
    "label": "GetOffsetAsAudioFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOffsetAsAudioFrames()"
  },
  {
    "label": "FQuartzQuantizationBoundary()",
    "kind": "Method",
    "detail": "Function (false } ; TArray<Audio::FQuartzGameThreadSubscriber> GameThreadSubscribers ;)",
    "insertText": "FQuartzQuantizationBoundary(EQuartzCommandQuantization InQuantization = EQuartzCommandQuantization::None, float InMultiplier = 1.0f, EQuarztQuantizationReference InReferencePoint = EQuarztQuantizationReference::BarRelative, bool bInFireOnClockStart = true) : Quantization(InQuantization) , Multiplier(InMultiplier) , CountingReferencePoint(InReferencePoint) , bFireOnClockStart(bInFireOnClockStart)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FQuartzQuantizedCommandInitInfo()",
    "kind": "Method",
    "detail": "Function (} ; namespace Audio { struct FQuartzQuantizedRequestData { FName ClockName ; FName OtherClockName ; TSharedPtr<IQuartzQuantizedCommand> QuantizedCommandPtr ; FQuartzQuantizationBoundary QuantizationBoundary { EQuartzCommandQuantization::Tick,1 . f,EQuarztQuantizationReference::BarRelative,true } ; TArray<FQuartzGameThreadSubscriber> GameThreadSubscribers ; int32 GameThreadDelegateID { - 1 } ; } ; struct FQuartzQuantizedCommandInitInfo {)",
    "insertText": "FQuartzQuantizedCommandInitInfo()"
  },
  {
    "label": "FQuartzQuantizedCommandInitInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuartzQuantizedCommandInitInfo(const FQuartzQuantizedRequestData& RHS, float InSampleRate, int32 InSourceID = INDEX_NONE)"
  },
  {
    "label": "SetOwningClockPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningClockPtr(TSharedPtr<Audio::FQuartzClock> InClockPointer)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (OwningClockPointer = InClockPointer ;)",
    "insertText": "ensure(OwningClockPointer)"
  },
  {
    "label": "IQuartzQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (} FName ClockName ; FName OtherClockName ; TSharedPtr<IQuartzQuantizedCommand> QuantizedCommandPtr { nullptr } ; FQuartzQuantizationBoundary QuantizationBoundary ; TArray<FQuartzGameThreadSubscriber> GameThreadSubscribers ; int32 GameThreadDelegateID { - 1 } ; TSharedPtr<Audio::FQuartzClock> OwningClockPointer { nullptr } ; float SampleRate { 0 } ; int32 SourceID { - 1 } ; int32 FrameOverrideAmount { 0 } ; } ; class IQuartzQuantizedCommand : public FQuartzCrossThreadMessage { public :)",
    "insertText": "IQuartzQuantizedCommand()"
  },
  {
    "label": "GetDeepCopyOfDerivedObject()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IQuartzQuantizedCommand>)",
    "insertText": "GetDeepCopyOfDerivedObject()"
  },
  {
    "label": "AddSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubscriber(FQuartzGameThreadSubscriber InSubscriber)"
  },
  {
    "label": "OnQueued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueued(const FQuartzQuantizedCommandInitInfo& InCommandInitInfo)"
  },
  {
    "label": "OnScheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScheduled(const FQuartzClockTickRate& InTickRate)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int32 NumFramesUntilDeadline)"
  },
  {
    "label": "FailedToQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedToQueue(FQuartzQuantizedRequestData& InGameThreadData)"
  },
  {
    "label": "AboutToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AboutToStart()"
  },
  {
    "label": "OnFinalCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinalCallback(int32 InNumFramesLeft)"
  },
  {
    "label": "OnClockPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClockPaused()"
  },
  {
    "label": "OnClockStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClockStarted()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "OverrideFramesUntilExec()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OverrideFramesUntilExec(int32 NumFramesUntilExec)"
  },
  {
    "label": "GetCommandType()",
    "kind": "Method",
    "detail": "Function (EQuartzCommandType)",
    "insertText": "GetCommandType()"
  },
  {
    "label": "OnQueuedCustom()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnQueuedCustom(const FQuartzQuantizedCommandInitInfo& InCommandInitInfo)"
  },
  {
    "label": "FailedToQueueCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FailedToQueueCustom()"
  },
  {
    "label": "AboutToStartCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AboutToStartCustom()"
  },
  {
    "label": "OnFinalCallbackCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFinalCallbackCustom(int32 InNumFramesLeft)"
  },
  {
    "label": "OnClockPausedCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClockPausedCustom()"
  },
  {
    "label": "OnClockStartedCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClockStartedCustom()"
  },
  {
    "label": "CancelCustom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CancelCustom()"
  },
  {
    "label": "FAudioComponentCommandInfo()",
    "kind": "Method",
    "detail": "Function (} ; } struct FAudioComponentCommandInfo {)",
    "insertText": "FAudioComponentCommandInfo()"
  },
  {
    "label": "FAudioComponentCommandInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAudioComponentCommandInfo(Audio::FQuartzGameThreadSubscriber InSubscriber, FQuartzQuantizationBoundary InAnticaptoryBoundary) : Subscriber(InSubscriber) , AnticipatoryBoundary(InAnticaptoryBoundary)"
  },
  {
    "label": "CommandID()",
    "kind": "Method",
    "detail": "Function (uint32 CommandIDs = 0 ; CommandID = CommandIDs + + ; } Audio::FQuartzGameThreadSubscriber Subscriber ; FQuartzQuantizationBoundary AnticipatoryBoundary ; uint32)",
    "insertText": "CommandID(uint32)"
  }
]