[
  {
    "label": "FQuartzTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzTickableObject"
  },
  {
    "label": "FQuartzClockTickRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockTickRate"
  },
  {
    "label": "FQuartzQuantizationBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizationBoundary"
  },
  {
    "label": "FQuartzTimeSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTimeSignature"
  },
  {
    "label": "IAudioMixerQuantizedEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerQuantizedEventListener"
  },
  {
    "label": "IQuartzQuantizedCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQuartzQuantizedCommand"
  },
  {
    "label": "FQuartzClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClock"
  },
  {
    "label": "FShareableQuartzCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShareableQuartzCommandQueue"
  },
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FQuartzQuantizedCommandDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandDelegateData"
  },
  {
    "label": "FQuartzMetronomeDelegateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzMetronomeDelegateData"
  },
  {
    "label": "FQuartzQueueCommandData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQueueCommandData"
  },
  {
    "label": "FQuartzQuantizedCommandInitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandInitInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQuartzPulseOverrideStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzPulseOverrideStep"
  },
  {
    "label": "FQuartzTimeSignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTimeSignature"
  },
  {
    "label": "FQuartzTransportTimeStamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzTransportTimeStamp"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "FQuartzClockSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockSettings"
  },
  {
    "label": "FQuartzClockSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockSettings"
  },
  {
    "label": "FQuartLatencyTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartLatencyTracker"
  },
  {
    "label": "FAudioMixer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioMixer"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FQuartzClockTickRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzClockTickRate"
  },
  {
    "label": "FAudioMixerClockTickRate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioMixerClockTickRate"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FQuartzLatencyTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzLatencyTimer"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FQuartzCrossThreadMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzCrossThreadMessage"
  },
  {
    "label": "FQuartzOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzOffset"
  },
  {
    "label": "IQueueCommandListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQueueCommandListener"
  },
  {
    "label": "ICommandListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICommandListener"
  },
  {
    "label": "IMetronomeEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMetronomeEventListener"
  },
  {
    "label": "FQuartzGameThreadSubscriber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzGameThreadSubscriber"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "FQuartzQuantizationBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizationBoundary"
  },
  {
    "label": "FQuartzQuantizationBoundary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizationBoundary"
  },
  {
    "label": "FQuartzQuantizedRequestData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedRequestData"
  },
  {
    "label": "FQuartzQuantizedCommandInitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandInitInfo"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "IQuartzQuantizedCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IQuartzQuantizedCommand"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "IAudioMixerQuantizedCommandBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioMixerQuantizedCommandBase"
  },
  {
    "label": "FQuartzQuantizedCommandHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuartzQuantizedCommandHandle"
  },
  {
    "label": "FAudioComponentCommandInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentCommandInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioQuartz, Log, All)"
  },
  {
    "label": "TimeSignatureQuantizationToCommandQuantization()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "TimeSignatureQuantizationToCommandQuantization(const EQuartzTimeSignatureQuantization& BeatType)"
  },
  {
    "label": "FQuartzTimeSignature()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzTimeSignature(const FQuartzTimeSignature& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (Declarations)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FiveParams(FOnQuartzMetronomeEvent, FName, ClockName, EQuartzCommandQuantization, QuantizationType, int32, NumBars, int32, Beat, float, BeatFraction)"
  },
  {
    "label": "FQuartLatencyTracker()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartLatencyTracker()"
  },
  {
    "label": "PushLatencyTrackerResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLatencyTrackerResult(const double& InResult)"
  },
  {
    "label": "GetLifetimeAverageLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLifetimeAverageLatency()"
  },
  {
    "label": "GetMinLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinLatency()"
  },
  {
    "label": "GetMaxLatency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxLatency()"
  },
  {
    "label": "PushSingleResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSingleResult(const double& InResult)"
  },
  {
    "label": "DigestQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DigestQueue()"
  },
  {
    "label": "FQuartzClockTickRate()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzClockTickRate()"
  },
  {
    "label": "SetFramesPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFramesPerTick(int32 InNewFramesPerTick)"
  },
  {
    "label": "SetMillisecondsPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMillisecondsPerTick(double InNewMillisecondsPerTick)"
  },
  {
    "label": "SetSecondsPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSecondsPerTick(double InNewSecondsPerTick)"
  },
  {
    "label": "SetThirtySecondNotesPerMinute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThirtySecondNotesPerMinute(double InNewThirtySecondNotesPerMinute)"
  },
  {
    "label": "SetBeatsPerMinute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBeatsPerMinute(double InNewBeatsPerMinute)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(double InNewSampleRate)"
  },
  {
    "label": "RecalculateDurationsBasedOnFramesPerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateDurationsBasedOnFramesPerTick()"
  },
  {
    "label": "FQuartzLatencyTimer()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzLatencyTimer()"
  },
  {
    "label": "StartTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTimer()"
  },
  {
    "label": "ResetTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimer()"
  },
  {
    "label": "StopTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTimer()"
  },
  {
    "label": "GetCurrentTimePassedMs()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetCurrentTimePassedMs()"
  },
  {
    "label": "GetResultsMilliseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetResultsMilliseconds()"
  },
  {
    "label": "HasTimerStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimerStarted()"
  },
  {
    "label": "HasTimerStopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimerStopped()"
  },
  {
    "label": "IsTimerRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerRunning()"
  },
  {
    "label": "HasTimerRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimerRun()"
  },
  {
    "label": "FQuartzCrossThreadMessage()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzCrossThreadMessage(bool bAutoStartTimer = true)"
  },
  {
    "label": "RequestSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSent()"
  },
  {
    "label": "FQuartzOffset()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzOffset(double InOffsetInMilliseconds = 0.0)"
  },
  {
    "label": "FQuartzOffset()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzOffset(EQuartzCommandQuantization InDuration, double InMultiplier)"
  },
  {
    "label": "SetOffsetInMilliseconds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffsetInMilliseconds(double InMilliseconds)"
  },
  {
    "label": "SetOffsetMusical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffsetMusical(EQuartzCommandQuantization Duration, double Multiplier)"
  },
  {
    "label": "GetOffsetInAudioFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOffsetInAudioFrames(const FQuartzClockTickRate& InTickRate)"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const FQuartzQuantizedCommandDelegateData& Data)"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const FQuartzMetronomeDelegateData& Data)"
  },
  {
    "label": "PushEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushEvent(const FQuartzQueueCommandData& Data)"
  },
  {
    "label": "FinalizeOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FinalizeOffset(const FQuartzClockTickRate& TickRate)"
  },
  {
    "label": "FQuartzQuantizedCommandInitInfo()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FQuartzQuantizedCommandInitInfo(const FQuartzQuantizedRequestData& RHS, float InSampleRate, int32 InSourceID = INDEX_NONE)"
  },
  {
    "label": "IQuartzQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "IQuartzQuantizedCommand()"
  },
  {
    "label": "AddSubscriber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubscriber(FQuartzGameThreadSubscriber InSubscriber)"
  },
  {
    "label": "OnQueued()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueued(const FQuartzQuantizedCommandInitInfo& InCommandInitInfo)"
  },
  {
    "label": "OnScheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScheduled(const FQuartzClockTickRate& InTickRate)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int32 NumFramesUntilDeadline)"
  },
  {
    "label": "FailedToQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedToQueue(FQuartzQuantizedRequestData& InGameThreadData)"
  },
  {
    "label": "AboutToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AboutToStart()"
  },
  {
    "label": "OnFinalCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinalCallback(int32 InNumFramesLeft)"
  },
  {
    "label": "OnClockPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClockPaused()"
  },
  {
    "label": "OnClockStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClockStarted()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Cancel()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  }
]