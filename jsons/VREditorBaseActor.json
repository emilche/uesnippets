[
  {
    "label": "AVREditorBaseActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorBaseActor"
  },
  {
    "label": "UVREditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorMode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameFramework / Actor . h \" # include \" VREditorBaseActor . generated . h \")",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AVREditorBaseActor()"
  },
  {
    "label": "SetVRMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVRMode(class UVREditorMode* InVRMode)"
  },
  {
    "label": "TickManually()",
    "kind": "Method",
    "detail": "Function (enum class EDockedTo { Nothing,LeftHand,RightHand,LeftArm,RightArm,Room,Custom,Dragging,} ; void)",
    "insertText": "TickManually(float DeltaTime)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FTransform& Transform)"
  },
  {
    "label": "SetRelativeOffset()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetRelativeOffset(const FVector& InRelativeOffset)"
  },
  {
    "label": "SetLocalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalRotation(const FRotator& InRelativeRotation)"
  },
  {
    "label": "GetDockedTo()",
    "kind": "Method",
    "detail": "Function (EDockedTo)",
    "insertText": "GetDockedTo()"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(const FTransform& ResultTransform, const float TotalMoveToTime, const EDockedTo ResultDock)"
  },
  {
    "label": "StopMoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMoveTo()"
  },
  {
    "label": "MakeUITransformLockedToHand()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeUITransformLockedToHand(class UViewportInteractor* Interactor, const bool bOnArm, const FVector& InRelativeOffset, const FRotator& InLocalRotation)"
  },
  {
    "label": "UpdateTransformIfDocked()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateTransformIfDocked()"
  },
  {
    "label": "MakeUITransformLockedToHand()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeUITransformLockedToHand(class UViewportInteractor* Interactor, const bool bOnArm)"
  },
  {
    "label": "MakeUITransformLockedToRoom()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeUITransformLockedToRoom()"
  },
  {
    "label": "TickMoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickMoveTo(const float DeltaTime)"
  },
  {
    "label": "MakeCustomUITransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "MakeCustomUITransform()"
  },
  {
    "label": "UpdateFadingState()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateFadingState(const float DeltaTime)"
  }
]