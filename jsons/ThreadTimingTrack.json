[
  {
    "label": "FThreadTrackEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTrackEvent"
  },
  {
    "label": "FTimingEventSearchParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventSearchParameters"
  },
  {
    "label": "FFilterConfigurator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilterConfigurator"
  },
  {
    "label": "FThreadTimingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingSharedState"
  },
  {
    "label": "FThreadTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingTrack"
  },
  {
    "label": "FPendingEventInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingEventInfo"
  },
  {
    "label": "FCpuTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCpuTimingTrack"
  },
  {
    "label": "FGpuTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGpuTimingTrack"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" TraceServices / Model / TimingProfiler . h \" # include \" Insights / ViewModels / TimingEventSearch . h \" # include \" Insights / ViewModels / TimingEventsTrack . h \" class FThreadTrackEvent ; class FTimingEventSearchParameters ; namespace UE::Insights { class FFilterConfigurator ; } namespace UE::Insights::TimingProfiler { class FThreadTimingSharedState ; class FThreadTimingTrack : public FTimingEventsTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FThreadTimingTrack, FTimingEventsTrack)"
  },
  {
    "label": "FThreadTimingTrack()",
    "kind": "Method",
    "detail": "Function (struct FPendingEventInfo { double StartTime ; double EndTime ; uint32 Depth ; uint32 TimerIndex ; } ;)",
    "insertText": "FThreadTimingTrack(FThreadTimingSharedState& InSharedState, const FString& InName, const TCHAR* InGroupName, uint32 InTimelineIndex, uint32 InThreadId) : FTimingEventsTrack(InName) , SharedState(InSharedState) , GroupName(InGroupName) , TimelineIndex(InTimelineIndex) , ThreadId(InThreadId)"
  },
  {
    "label": "FThreadTimingTrack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FThreadTimingTrack()"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetGroupName()"
  },
  {
    "label": "BuildFilteredDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFilteredDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "PostDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDraw(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "GetEvent(float InPosX, float InPosY, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "SearchEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "SearchEvent(const FTimingEventSearchParameters& InSearchParameters)"
  },
  {
    "label": "UpdateEventStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventStats(ITimingEvent& InOutEvent)"
  },
  {
    "label": "OnEventSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEventSelected(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "OnClipboardCopyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClipboardCopyEvent(const ITimingEvent& InSelectedEvent)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetDepthAt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDepthAt(double Time)"
  },
  {
    "label": "SetFilterConfigurator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterConfigurator(TSharedPtr<FFilterConfigurator> InFilterConfigurator)"
  },
  {
    "label": "FindMaxEventInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const ITimingEvent>)",
    "insertText": "FindMaxEventInstance(uint32 TimerId, double StartTime, double EndTime)"
  },
  {
    "label": "FindMinEventInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const ITimingEvent>)",
    "insertText": "FindMinEventInstance(uint32 TimerId, double StartTime, double EndTime)"
  },
  {
    "label": "HasCustomFilter()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "HasCustomFilter()"
  },
  {
    "label": "FindTimingProfilerEvent()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "FindTimingProfilerEvent(const FThreadTrackEvent& InTimingEvent, TFunctionRef<void(double, double, uint32, const TraceServices::FTimingProfilerEvent&)> InFoundPredicate)"
  },
  {
    "label": "FindTimingProfilerEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTimingProfilerEvent(const FTimingEventSearchParameters& InParameters, TFunctionRef<void(double, double, uint32, const TraceServices::FTimingProfilerEvent&)> InFoundPredicate)"
  },
  {
    "label": "GetParentAndRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParentAndRoot(const FThreadTrackEvent& TimingEvent, TSharedPtr<FThreadTrackEvent>& OutParentTimingEvent, TSharedPtr<FThreadTrackEvent>& OutRootTimingEvent)"
  },
  {
    "label": "CreateFThreadTrackEventFromInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFThreadTrackEventFromInfo(const TimelineEventInfo& InEventInfo, const TSharedRef<const FBaseTimingTrack> InTrack, int32 InDepth, TSharedPtr<FThreadTrackEvent> &OutTimingEvent)"
  },
  {
    "label": "TimerIndexToTimerId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimerIndexToTimerId(uint32 InTimerIndex, uint32 & OutTimerId)"
  },
  {
    "label": "FCpuTimingTrack()",
    "kind": "Method",
    "detail": "Function (private : FThreadTimingSharedState& SharedState ; TSharedPtr<FFilterConfigurator> FilterConfigurator ; const TCHAR* GroupName = nullptr ; uint32 TimelineIndex = 0 ; uint32 ThreadId = 0 ; TTimingEventSearchCache<TraceServices::FTimingProfilerEvent> SearchCache ; } ; class FCpuTimingTrack : public FThreadTimingTrack { public :)",
    "insertText": "FCpuTimingTrack(FThreadTimingSharedState& InSharedState, const FString& InName, const TCHAR* InGroupName, uint32 InTimelineIndex, uint32 InThreadId) : FThreadTimingTrack(InSharedState, InName, InGroupName, InTimelineIndex, InThreadId)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} } ; class FGpuTimingTrack : public FThreadTimingTrack { public : uint32 Gpu1ThreadId =)",
    "insertText": "uint32('GPU1')"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Gpu2ThreadId =)",
    "insertText": "uint32('GPU2')"
  },
  {
    "label": "FGpuTimingTrack()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGpuTimingTrack(FThreadTimingSharedState& InSharedState, const FString& InName, const TCHAR* InGroupName, uint32 InTimelineIndex, uint32 InThreadId) : FThreadTimingTrack(InSharedState, InName, InGroupName, InTimelineIndex, InThreadId)"
  }
]