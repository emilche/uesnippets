[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "USubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsystem"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "UEditorDataStorageFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorDataStorageFactory"
  },
  {
    "label": "TTypedElementColumnTypeList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElementColumnTypeList"
  },
  {
    "label": "IEditorDataStorageProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorDataStorageProvider"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" Delegates / Delegate . h \" # include \" Elements / Common / TypedElementCommonTypes . h \" # include \" Elements / Common / TypedElementHandles . h \" # include \" Elements / Common / TypedElementQueryConditions . h \" # include \" Elements / Common / TypedElementQueryDescription . h \" # include \" Elements / Common / TypedElementQueryTypes . h \" # include \" Elements / Framework / TypedElementColumnUtils . h \" # include \" Elements / Interfaces / TypedElementQueryStorageInterfaces . h \" # include \" Features / IModularFeature . h \" # include \" Math / NumericLimits . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" # include \" UObject / Interface . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" class UClass ; class USubsystem ; class UScriptStruct ; class UEditorDataStorageFactory ; using FTypedElementOnDataStorageCreation = FSimpleMulticastDelegate ; using FTypedElementOnDataStorageDestruction = FSimpleMulticastDelegate ; using FTypedElementOnDataStorageUpdate = FSimpleMulticastDelegate ; template<UE::Editor::DataStorage::TColumnType . . . Columns> struct TTypedElementColumnTypeList { const UScriptStruct* ColumnTypes [)",
    "insertText": "sizeof(Columns)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (operator TConstArrayView<const)",
    "insertText": "UScriptStruct()"
  },
  {
    "label": "FindFactory()",
    "kind": "Method",
    "detail": "Function (template<FactoryT> const FactoryT*)",
    "insertText": "FindFactory()"
  },
  {
    "label": "RegisterTable()",
    "kind": "Method",
    "detail": "Function (TableHandle)",
    "insertText": "RegisterTable(TConstArrayView<const UScriptStruct*> ColumnList, const FName Name)"
  },
  {
    "label": "RegisterTable()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType . . . Columns> TableHandle)",
    "insertText": "RegisterTable(const FName Name)"
  },
  {
    "label": "RegisterTable()",
    "kind": "Method",
    "detail": "Function (TableHandle)",
    "insertText": "RegisterTable(TableHandle SourceTable, TConstArrayView<const UScriptStruct*> ColumnList, const FName Name)"
  },
  {
    "label": "RegisterTable()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType . . . Columns> TableHandle)",
    "insertText": "RegisterTable(TableHandle SourceTable, const FName Name)"
  },
  {
    "label": "FindTable()",
    "kind": "Method",
    "detail": "Function (TableHandle)",
    "insertText": "FindTable(const FName Name)"
  },
  {
    "label": "ReserveRow()",
    "kind": "Method",
    "detail": "Function (RowHandle)",
    "insertText": "ReserveRow()"
  },
  {
    "label": "BatchReserveRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchReserveRows(int32 Count, TFunctionRef<void(RowHandle)> ReservationCallback)"
  },
  {
    "label": "BatchReserveRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchReserveRows(TArrayView<RowHandle> ReservedRows)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (RowHandle)",
    "insertText": "AddRow(TableHandle Table)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (RowHandle)",
    "insertText": "AddRow(TableHandle Table, RowCreationCallbackRef OnCreated)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRow(RowHandle ReservedRow, TableHandle Table)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRow(RowHandle ReservedRow, TableHandle Table, RowCreationCallbackRef OnCreated)"
  },
  {
    "label": "BatchAddRow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BatchAddRow(TableHandle Table, int32 Count, RowCreationCallbackRef OnCreated)"
  },
  {
    "label": "BatchAddRow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BatchAddRow(TableHandle Table, TConstArrayView<RowHandle> ReservedHandles, RowCreationCallbackRef OnCreated)"
  },
  {
    "label": "RemoveRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRow(RowHandle Row)"
  },
  {
    "label": "IsRowAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowAvailable(RowHandle Row)"
  },
  {
    "label": "IsRowAssigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowAssigned(RowHandle Row)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(RowHandle Row, const UScriptStruct* ColumnType)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType ColumnType> void)",
    "insertText": "AddColumn(RowHandle Row)"
  },
  {
    "label": "AddColumnData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumnData(RowHandle Row, const UScriptStruct* ColumnType, const ColumnCreationCallbackRef& Initializer, ColumnCopyOrMoveCallback Relocator)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TDataColumnType ColumnType> void)",
    "insertText": "AddColumn(RowHandle Row, ColumnType&& Column)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(RowHandle Row, const UE::Editor::DataStorage::FValueTag& Tag, const FName& Value)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddColumn(RowHandle Row, const FName& Tag)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddColumn(RowHandle Row, const FName& Tag, const FName& Value)"
  },
  {
    "label": "FValueTag()",
    "kind": "Method",
    "detail": "Function (template<> void AddColumn<UE::Editor::)",
    "insertText": "FValueTag(RowHandle Row, const FName& Tag, const FName& Value)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TEnumType EnumT> void)",
    "insertText": "AddColumn(RowHandle Row, EnumT Value)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<auto Value,UE::Editor::DataStorage::TEnumType EnumT =)",
    "insertText": "decltype(Value)> void AddColumn(RowHandle Row)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType DynamicColumnTemplate> void)",
    "insertText": "AddColumn(RowHandle Row, const FName& Identifier)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType DynamicColumnTemplate> void)",
    "insertText": "AddColumn(RowHandle Row, const FName& Identifier, DynamicColumnTemplate&& TemplateInstance)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> Columns)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType . . . Columns> void)",
    "insertText": "AddColumns(RowHandle Row)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(RowHandle Row, const UScriptStruct* ColumnType)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType Column> void)",
    "insertText": "RemoveColumn(RowHandle Row)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(RowHandle Row, const UE::Editor::DataStorage::FValueTag& Tag)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "RemoveColumn(RowHandle Row, const FName& Tag)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType DynamicColumnTemplateType> void)",
    "insertText": "RemoveColumn(RowHandle Row, const FName& Identifier)"
  },
  {
    "label": "FValueTag()",
    "kind": "Method",
    "detail": "Function (template<> void RemoveColumn<UE::Editor::)",
    "insertText": "FValueTag(RowHandle Row, const FName& Tag)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> Columns)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType . . . Columns> void)",
    "insertText": "RemoveColumns(RowHandle Row)"
  },
  {
    "label": "AddRemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRemoveColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> ColumnsToAdd, TConstArrayView<const UScriptStruct*> ColumnsToRemove)"
  },
  {
    "label": "BatchAddRemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddRemoveColumns(TConstArrayView<RowHandle> Rows, TConstArrayView<const UScriptStruct*> ColumnsToAdd, TConstArrayView<const UScriptStruct*> ColumnsToRemove)"
  },
  {
    "label": "GetColumnData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetColumnData(RowHandle Row, const UScriptStruct* ColumnType)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TDataColumnType ColumnType> ColumnType*)",
    "insertText": "GetColumn(RowHandle Row)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TDataColumnType ColumnTypeTemplate> ColumnTypeTemplate*)",
    "insertText": "GetColumn(RowHandle Row, const FName& Identifer)"
  },
  {
    "label": "HasColumns()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "HasColumns()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColumns(RowHandle Row, TConstArrayView<TWeakObjectPtr<const UScriptStruct>> ColumnTypes)"
  },
  {
    "label": "HasColumns()",
    "kind": "Method",
    "detail": "Function (template<UE::Editor::DataStorage::TColumnType . . . ColumnTypes> bool)",
    "insertText": "HasColumns(RowHandle Row)"
  },
  {
    "label": "ListColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListColumns(RowHandle Row, ColumnListCallbackRef Callback)"
  },
  {
    "label": "ListColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListColumns(RowHandle Row, ColumnListWithDataCallbackRef Callback)"
  },
  {
    "label": "MatchesColumns()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesColumns(RowHandle Row, const UE::Editor::DataStorage::Queries::FConditions& Conditions)"
  },
  {
    "label": "FindDynamicColumn()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "FindDynamicColumn(const UE::Editor::DataStorage::FDynamicColumnDescription& Description)"
  },
  {
    "label": "GenerateDynamicColumn()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "GenerateDynamicColumn(const UE::Editor::DataStorage::FDynamicColumnDescription& Description)"
  },
  {
    "label": "DebugPrintQueryCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugPrintQueryCallbacks(FOutputDevice& Output)"
  },
  {
    "label": "RegisterQuery()",
    "kind": "Method",
    "detail": "Function (using EQueryTickPhase = UE::Editor::DataStorage::EQueryTickPhase ; using EQueryTickGroups = UE::Editor::DataStorage::EQueryTickGroups ; using EQueryCallbackType = UE::Editor::DataStorage::EQueryCallbackType ; using EQueryAccessType = UE::Editor::DataStorage::EQueryAccessType ; using EQueryDependencyFlags = UE::Editor::DataStorage::EQueryDependencyFlags ; using FQueryResult = UE::Editor::DataStorage::FQueryResult ; using IQueryContext = UE::Editor::DataStorage::IQueryContext ; using IDirectQueryContext = UE::Editor::DataStorage::IDirectQueryContext ; using ISubqueryContext = UE::Editor::DataStorage::ISubqueryContext ; using FQueryDescription = UE::Editor::DataStorage::FQueryDescription ; using QueryCallback = UE::Editor::DataStorage::QueryCallback ; using QueryCallbackRef = UE::Editor::DataStorage::QueryCallbackRef ; using DirectQueryCallback = UE::Editor::DataStorage::DirectQueryCallback ; using DirectQueryCallbackRef = UE::Editor::DataStorage::DirectQueryCallbackRef ; using SubqueryCallback = UE::Editor::DataStorage::SubqueryCallback ; using SubqueryCallbackRef = UE::Editor::DataStorage::SubqueryCallbackRef ; QueryHandle)",
    "insertText": "RegisterQuery(FQueryDescription&& Query)"
  },
  {
    "label": "UnregisterQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterQuery(QueryHandle Query)"
  },
  {
    "label": "GetQueryDescription()",
    "kind": "Method",
    "detail": "Function (const FQueryDescription&)",
    "insertText": "GetQueryDescription(QueryHandle Query)"
  },
  {
    "label": "GetQueryTickGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetQueryTickGroupName(EQueryTickGroups Group)"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunQuery(QueryHandle Query)"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunQuery(QueryHandle Query, DirectQueryCallbackRef Callback)"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunQuery(QueryHandle Query, UE::Editor::DataStorage::EDirectQueryExecutionFlags Flags, DirectQueryCallbackRef Callback)"
  },
  {
    "label": "ActivateQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateQueries(FName ActivationName)"
  },
  {
    "label": "FindIndexedRow()",
    "kind": "Method",
    "detail": "Function (RowHandle)",
    "insertText": "FindIndexedRow(UE::Editor::DataStorage::IndexHash Index)"
  },
  {
    "label": "IndexRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IndexRow(UE::Editor::DataStorage::IndexHash Index, RowHandle Row)"
  },
  {
    "label": "BatchIndexRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchIndexRows(TConstArrayView<TPair<UE::Editor::DataStorage::IndexHash, RowHandle>> IndexRowPairs)"
  },
  {
    "label": "ReindexRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexRow(UE::Editor::DataStorage::IndexHash OriginalIndex, UE::Editor::DataStorage::IndexHash NewIndex, RowHandle Row)"
  },
  {
    "label": "RemoveIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIndex(UE::Editor::DataStorage::IndexHash Index)"
  },
  {
    "label": "OnUpdate()",
    "kind": "Method",
    "detail": "Function (FTypedElementOnDataStorageUpdate&)",
    "insertText": "OnUpdate()"
  },
  {
    "label": "OnUpdateCompleted()",
    "kind": "Method",
    "detail": "Function (FTypedElementOnDataStorageUpdate&)",
    "insertText": "OnUpdateCompleted()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "GetExternalSystemAddress()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetExternalSystemAddress(UClass* Target)"
  },
  {
    "label": "GetExternalSystem()",
    "kind": "Method",
    "detail": "Function (template<SystemType> SystemType*)",
    "insertText": "GetExternalSystem()"
  },
  {
    "label": "SupportsExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsExtension(FName Extension)"
  },
  {
    "label": "ListExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListExtensions(TFunctionRef<void(FName)> Callback)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(Row, Column::StaticStruct())"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(Row, Column::StaticStruct())"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(Row, { Columns::StaticStruct()...})"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(Row, UE::Editor::DataStorage::FValueTag(Tag), Value)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Editor::DataStorage ;)",
    "insertText": "RemoveColumn(Row, FValueTag(Tag))"
  },
  {
    "label": "FindDynamicColumn()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* StructInfo =)",
    "insertText": "FindDynamicColumn(Description)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(Row, StructInfo)"
  },
  {
    "label": "EnumT()",
    "kind": "Method",
    "detail": "Function (const UEnum* Enum = StaticEnum<)",
    "insertText": "EnumT()"
  },
  {
    "label": "GetNameStringByValue()",
    "kind": "Method",
    "detail": "Function (const FName ValueAsFName =* Enum ->)",
    "insertText": "GetNameStringByValue(static_cast<int64>(Value))"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(Row, UE::Editor::DataStorage::FValueTag(Enum->GetFName()), ValueAsFName)"
  },
  {
    "label": "EnumT()",
    "kind": "Method",
    "detail": "Function (AddColumn<)",
    "insertText": "EnumT(Row, Value)"
  },
  {
    "label": "GenerateDynamicColumn()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* StructInfo =)",
    "insertText": "GenerateDynamicColumn(Description)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(Row, StructInfo)"
  },
  {
    "label": "AddColumnData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumnData(Row, StructInfo, [&TemplateInstance](void* ColumnData, const UScriptStruct&) { if constexpr (std::is_move_constructible_v<DynamicColumnTemplate>) { new(ColumnData) DynamicColumnTemplate(MoveTemp(TemplateInstance)); } else { new(ColumnData) DynamicColumnTemplate(TemplateInstance); } }, [](const UScriptStruct&, void* Destination, void* Source) { if constexpr (std::is_move_assignable_v<DynamicColumnTemplate>) { *static_cast<DynamicColumnTemplate*>(Destination) = MoveTemp(*static_cast<DynamicColumnTemplate*>(Source)); } else { *static_cast<DynamicColumnTemplate*>(Destination) = *static_cast<DynamicColumnTemplate*>(Source); } })"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(Row, UE::Editor::DataStorage::FValueTag(Enum->GetFName()))"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(Row, { Columns::StaticStruct()...})"
  },
  {
    "label": "AddColumnData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumnData(Row, ColumnType::StaticStruct(), [&Column](void* ColumnData, const UScriptStruct&) { if constexpr (std::is_move_constructible_v<ColumnType>) { new(ColumnData) ColumnType(MoveTemp(Column)); } else { new(ColumnData) ColumnType(Column); } }, [](const UScriptStruct&, void* Destination, void* Source) { if constexpr (std::is_move_assignable_v<ColumnType>) { *reinterpret_cast<ColumnType*>(Destination) = MoveTemp(*reinterpret_cast<ColumnType*>(Source)); } else { *reinterpret_cast<ColumnType*>(Destination) = *reinterpret_cast<ColumnType*>(Source); } })"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (} template<UE::Editor::DataStorage::TDataColumnType DynamicColumnTemplate> DynamicColumnTemplate*)",
    "insertText": "GetColumn(RowHandle Row, const FName& Identifier)"
  }
]