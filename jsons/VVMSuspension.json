[
  {
    "label": "FOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOp"
  },
  {
    "label": "VFailureContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VFailureContext"
  },
  {
    "label": "VProcedure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VProcedure"
  },
  {
    "label": "VTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTask"
  },
  {
    "label": "VSuspension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VSuspension"
  },
  {
    "label": "VBytecodeSuspension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VBytecodeSuspension"
  },
  {
    "label": "VLambdaSuspension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VLambdaSuspension"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct FOp ; struct VFailureContext ; struct VProcedure ; struct VTask ; struct VSuspension : VCell {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VCell)"
  },
  {
    "label": "Tail()",
    "kind": "Method",
    "detail": "Function (TWriteBarrier<VFailureContext> FailureContext ; TWriteBarrier<VTask> Task ; TWriteBarrier<VSuspension> Next ; VSuspension&)",
    "insertText": "Tail()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (VSuspension* Current = this ;)",
    "insertText": "while(Current->Next)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Current = Current -> Next .)",
    "insertText": "Get()"
  },
  {
    "label": "VSuspension()",
    "kind": "Method",
    "detail": "Function (} return* Current ; } protected :)",
    "insertText": "VSuspension(FAllocationContext Context, VEmergentType* EmergentType, VFailureContext* FailureContext, VTask* Task) : VCell(Context, EmergentType) , FailureContext(Context, FailureContext) , Task(Context, Task)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (} } ; struct VBytecodeSuspension : public VSuspension {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VSuspension)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; template<Captures> VBytecodeSuspension&)",
    "insertText": "New(FAllocationContext Context, VFailureContext& FailureContext, VTask& Task, VProcedure& Procedure, FOp* PC, const Captures& TheCaptures)"
  },
  {
    "label": "GetCaptures()",
    "kind": "Method",
    "detail": "Function (} TWriteBarrier<VProcedure> Procedure ; FOp* PC ; template<Captures> Captures&)",
    "insertText": "GetCaptures()"
  },
  {
    "label": "CaptureSwitch()",
    "kind": "Method",
    "detail": "Function (} template<TFunc> void)",
    "insertText": "CaptureSwitch(const TFunc& Func)"
  },
  {
    "label": "CapturesOffset()",
    "kind": "Method",
    "detail": "Function (private : template<Captures> size_t)",
    "insertText": "CapturesOffset()"
  },
  {
    "label": "VBytecodeSuspension()",
    "kind": "Method",
    "detail": "Function (} template<Captures>)",
    "insertText": "VBytecodeSuspension(FAllocationContext Context, VFailureContext& FailureContext, VTask& Task, VProcedure& Procedure, FOp* PC, const Captures& TheCaptures) : VSuspension(Context, &GlobalTrivialEmergentType.Get(Context), &FailureContext, &Task) , Procedure(Context, &Procedure) , PC(PC)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&GetCaptures<Captures>()) Captures(Context, TheCaptures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; typedef)",
    "insertText": "void(*CallbackType)(FRunningContext, VLambdaSuspension& This, VSuspension*& ToFire)"
  },
  {
    "label": "Args()",
    "kind": "Method",
    "detail": "Function (TWriteBarrier<VValue>*)",
    "insertText": "Args()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} uint32 NumValues ; CallbackType Callback ; template<. . . Args> VLambdaSuspension&)",
    "insertText": "New(FAllocationContext Context, VFailureContext& FailureContext, VTask& Task, CallbackType Callback, Args&&... TheArgs)"
  },
  {
    "label": "ArgsOffset()",
    "kind": "Method",
    "detail": "Function (} private : size_t)",
    "insertText": "ArgsOffset()"
  },
  {
    "label": "AllocationSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "AllocationSize(uint32 NumValues)"
  },
  {
    "label": "VLambdaSuspension()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgsType>)",
    "insertText": "VLambdaSuspension(FAllocationContext Context, VFailureContext& FailureContext, VTask& Task, CallbackType Callback, ArgsType&&... TheArgs) : VSuspension(Context, &GlobalTrivialEmergentType.Get(Context), &FailureContext, &Task) , NumValues(sizeof...(ArgsType)) , Callback(Callback)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Args())"
  },
  {
    "label": "VValue()",
    "kind": "Method",
    "detail": "Function (TWriteBarrier<)",
    "insertText": "VValue(Context, std::forward<ArgsType>(TheArgs))"
  }
]