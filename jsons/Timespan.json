[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "TIntervalTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntervalTraits"
  },
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "Z_Construct_UScriptStruct_FTimespan_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTimespan_Statics"
  },
  {
    "label": "FTimespan()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Interval . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / AssertionMacros . h \" class FArchive ; class FOutputDevice ; class FString ; class UObject ; template<ElementType> struct TIntervalTraits ; namespace ETimespan { int64 MaxTicks = 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 ; int64 MinTicks = - 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 - 1 ; int64 NanosecondsPerTick = 1 0 0 ; int64 TicksPerDay = 8 6 4 0 0 0 0 0 0 0 0 0 ; int64 TicksPerHour = 3 6 0 0 0 0 0 0 0 0 0 ; int64 TicksPerMicrosecond = 1 0 ; int64 TicksPerMillisecond = 1 0 0 0 0 ; int64 TicksPerMinute = 6 0 0 0 0 0 0 0 0 ; int64 TicksPerSecond = 1 0 0 0 0 0 0 0 ; int64 TicksPerWeek = 6 0 4 8 0 0 0 0 0 0 0 0 0 ; int64 TicksPerYear = 3 6 5* TicksPerDay ; } struct FTimespan { public :)",
    "insertText": "FTimespan() : Ticks(0)"
  },
  {
    "label": "FTimespan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimespan(int64 InTicks) : Ticks(InTicks)"
  },
  {
    "label": "FTimespan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimespan(int32 Hours, int32 Minutes, int32 Seconds)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(0, Hours, Minutes, Seconds, 0)"
  },
  {
    "label": "FTimespan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(Days, Hours, Minutes, Seconds, 0)"
  },
  {
    "label": "FTimespan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assign(Days, Hours, Minutes, Seconds, FractionNano)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : FTimespan)",
    "insertText": "operator(const FTimespan& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ticks + = Other . Ticks ; return* this ; } FTimespan)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ticks - = Other . Ticks ; return* this ; } FTimespan)",
    "insertText": "operator(double Scalar)"
  },
  {
    "label": "Ticks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ticks(int64)((double)Ticks * Scalar)"
  },
  {
    "label": "Ticks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ticks(int64)((double)Ticks / Scalar)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FTimespan const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "GetDays()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDays()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetFractionMicro()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFractionMicro()"
  },
  {
    "label": "GetFractionMilli()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFractionMilli()"
  },
  {
    "label": "GetFractionNano()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFractionNano()"
  },
  {
    "label": "GetFractionTicks()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFractionTicks()"
  },
  {
    "label": "GetHours()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHours()"
  },
  {
    "label": "GetMinutes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMinutes()"
  },
  {
    "label": "GetSeconds()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSeconds()"
  },
  {
    "label": "GetTicks()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetTicks()"
  },
  {
    "label": "GetTotalHours()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTotalHours()"
  },
  {
    "label": "GetTotalMicroseconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTotalMicroseconds()"
  },
  {
    "label": "GetTotalMilliseconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTotalMilliseconds()"
  },
  {
    "label": "GetTotalMinutes()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTotalMinutes()"
  },
  {
    "label": "GetTotalSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTotalSeconds()"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const TCHAR* Format)"
  },
  {
    "label": "FromDays()",
    "kind": "Method",
    "detail": "Function (public : FTimespan)",
    "insertText": "FromDays(double Days)"
  },
  {
    "label": "FromHours()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "FromHours(double Hours)"
  },
  {
    "label": "FromMicroseconds()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "FromMicroseconds(double Microseconds)"
  },
  {
    "label": "FromMilliseconds()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "FromMilliseconds(double Milliseconds)"
  },
  {
    "label": "FromMinutes()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "FromMinutes(double Minutes)"
  },
  {
    "label": "FromSeconds()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "FromSeconds(double Seconds)"
  },
  {
    "label": "MaxValue()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "MaxValue()"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "MinValue()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Parse(const FString& TimespanString, FTimespan& OutTimespan)"
  },
  {
    "label": "Ratio()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Ratio(FTimespan Dividend, FTimespan Divisor)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "Zero()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : class UObject ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FTimespan& Timespan)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FTimespan& Timespan)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Assign(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 FractionNano)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (private : struct Z_Construct_UScriptStruct_FTimespan_Statics ; private : int64 Ticks ; } ; template<> struct TIntervalTraits<FTimespan> { FTimespan)",
    "insertText": "Max()"
  },
  {
    "label": "Lowest()",
    "kind": "Method",
    "detail": "Function (} FTimespan)",
    "insertText": "Lowest()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FTimespan)",
    "insertText": "operator(float Scalar, const FTimespan& Timespan)"
  }
]