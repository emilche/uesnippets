[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorScanOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorScanOp"
  },
  {
    "label": "ReduceBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReduceBlock"
  },
  {
    "label": "ScanLauncher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScanLauncher"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorScanOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_SCAN_H # define EIGEN_CXX11_TENSOR_TENSOR_SCAN_H namespace Eigen { namespace internal { template<Op,XprType> struct traits<TensorScanOp<Op,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<Op,XprType> struct eval<TensorScanOp<Op,XprType>,Eigen::Dense> { typedef const TensorScanOp<Op,XprType>& type ; } ; template<Op,XprType> struct nested<TensorScanOp<Op,XprType>,1,eval<TensorScanOp<Op,XprType>>::type> { typedef TensorScanOp<Op,XprType> type ; } ; } template<Op,XprType> class TensorScanOp : public TensorBase<TensorScanOp<Op,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorScanOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorScanOp>::type Nested ; typedef Eigen::internal::traits<TensorScanOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorScanOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorScanOp(const XprType& expr, const Index& axis, bool exclusive = false, const Op& op = Op()) : m_expr(expr), m_axis(axis), m_accumulator(op), m_exclusive(exclusive)"
  },
  {
    "label": "axis()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Index)",
    "insertText": "axis()"
  },
  {
    "label": "accumulator()",
    "kind": "Method",
    "detail": "Function (Self::CoeffReturnType accum = self .)",
    "insertText": "accumulator().initialize()"
  },
  {
    "label": "accumulator()",
    "kind": "Method",
    "detail": "Function (data [ curr ] = self .)",
    "insertText": "accumulator().finalize(accum)"
  },
  {
    "label": "accumulator()",
    "kind": "Method",
    "detail": "Function (self .)",
    "insertText": "accumulator().reduce(self.inner().coeff(curr), &accum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(Index curr = offset; curr < offset + self.size(); ++curr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(self.exclusive())"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (Index curr = offset + idx3* self .)",
    "insertText": "stride()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(Index idx3 = 0; idx3 < self.size(); idx3++)"
  },
  {
    "label": "ReducePacket()",
    "kind": "Method",
    "detail": "Function (} } } } template<Self> EIGEN_STRONG_INLINE void)",
    "insertText": "ReducePacket(Self& self, Index offset, typename Self::CoeffReturnType* data)"
  },
  {
    "label": "accumulator()",
    "kind": "Method",
    "detail": "Function (using Scalar = Self::CoeffReturnType ; using Packet = Self::PacketReturnType ; Packet accum = self .)",
    "insertText": "accumulator().template initializePacket<Packet>()"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (internal::pstoreu<Scalar,)",
    "insertText": "Packet(data + curr, self.accumulator().finalizePacket(accum))"
  },
  {
    "label": "accumulator()",
    "kind": "Method",
    "detail": "Function (self .)",
    "insertText": "accumulator().reducePacket(self.inner().template packet<Unaligned>(curr), &accum)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } } template<Self,bool Vectorize,bool Parallel> struct ReduceBlock { EIGEN_STRONG_INLINE void)",
    "insertText": "operator()(Self& self, Index idx1, typename Self::CoeffReturnType* data)"
  },
  {
    "label": "ReduceScalar()",
    "kind": "Method",
    "detail": "Function (Index offset = idx1 + idx2 ;)",
    "insertText": "ReduceScalar(self, offset, data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using Packet = Self::PacketReturnType ; const int PacketSize = internal::unpacket_traits<Packet>::size ; Index idx2 = 0 ;)",
    "insertText": "for(; idx2 + PacketSize <= self.stride(); idx2 += PacketSize)"
  },
  {
    "label": "ReducePacket()",
    "kind": "Method",
    "detail": "Function (Index offset = idx1 + idx2 ;)",
    "insertText": "ReducePacket(self, offset, data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; idx2 < self.stride(); idx2++)"
  },
  {
    "label": "Vectorize()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Self,Reducer,Device,bool)",
    "insertText": "Vectorize(TensorEvaluator<typename Self::ChildTypeNoConst, Device>::PacketAccess && internal::reducer_traits<Reducer, Device>::PacketAccess)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(Self& self, typename Self::CoeffReturnType* data)"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (Index total_size =)",
    "insertText": "array_prod(self.dimensions())"
  },
  {
    "label": "block_reducer()",
    "kind": "Method",
    "detail": "Function (ReduceBlock<Self,Vectorize,false> block_reducer ;)",
    "insertText": "block_reducer(self, idx1, data)"
  },
  {
    "label": "AdjustBlockSize()",
    "kind": "Method",
    "detail": "Function (} } } ; # ifdef EIGEN_USE_THREADS EIGEN_STRONG_INLINE Index)",
    "insertText": "AdjustBlockSize(Index item_size, Index block_size)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (EIGEN_CONSTEXPR Index kBlockAlignment = 1 2 8 ; const Index items_per_cacheline = numext::maxi<)",
    "insertText": "Index(1, kBlockAlignment / item_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index num_packets = 0 ;)",
    "insertText": "if(self.stride() >= PacketSize)"
  },
  {
    "label": "device()",
    "kind": "Method",
    "detail": "Function (self .)",
    "insertText": "device().parallelFor( num_packets, TensorOpCost(PacketSize * self.size(), PacketSize * self.size(), 16 * PacketSize * self.size(), true, PacketSize), [=](Index blk_size) { return AdjustBlockSize(PacketSize * sizeof(Scalar), blk_size); }, [&](Index first, Index last) { for (Index packet = first; packet < last; ++packet) { const Index idx2 = packet * PacketSize; ReducePacket(self, idx1 + idx2, data); } })"
  },
  {
    "label": "device()",
    "kind": "Method",
    "detail": "Function (num_scalars - = num_packets* PacketSize ; } self .)",
    "insertText": "device().parallelFor( num_scalars, TensorOpCost(self.size(), self.size(), 16 * self.size()), [=](Index blk_size) { return AdjustBlockSize(sizeof(Scalar), blk_size); }, [&](Index first, Index last) { for (Index scalar = first; scalar < last; ++scalar) { const Index idx2 = num_packets * PacketSize + scalar; ReduceScalar(self, idx1 + idx2, data); } })"
  },
  {
    "label": "device()",
    "kind": "Method",
    "detail": "Function (using Scalar = Self::CoeffReturnType ; self .)",
    "insertText": "device().parallelFor( self.stride(), TensorOpCost(self.size(), self.size(), 16 * self.size()), [=](Index blk_size) { return AdjustBlockSize(sizeof(Scalar), blk_size); }, [&](Index first, Index last) { for (Index idx2 = first; idx2 < last; ++idx2) { ReduceScalar(self, idx1 + idx2, data); } })"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (const Index inner_block_size = self .)",
    "insertText": "stride() * self.size()"
  },
  {
    "label": "parallelize_by_outer_blocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parallelize_by_outer_blocks(total_size >= (self.stride() * inner_block_size))"
  },
  {
    "label": "launcher()",
    "kind": "Method",
    "detail": "Function (ScanLauncher<Self,Reducer,DefaultDevice,Vectorize> launcher ;)",
    "insertText": "launcher(self, data)"
  },
  {
    "label": "device()",
    "kind": "Method",
    "detail": "Function (const Index num_outer_blocks = total_size / inner_block_size ; self .)",
    "insertText": "device().parallelFor( num_outer_blocks, TensorOpCost(inner_block_size, inner_block_size, 16 * PacketSize * inner_block_size, Vectorize, PacketSize), [=](Index blk_size) { return AdjustBlockSize(inner_block_size * sizeof(Scalar), blk_size); }, [&](Index first, Index last) { for (Index idx1 = first; idx1 < last; ++idx1) { ReduceBlock<Self, Vectorize, false> block_reducer; block_reducer(self, idx1 * inner_block_size, data); } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { ReduceBlock<Self,Vectorize,true> block_reducer ;)",
    "insertText": "for(Index idx1 = 0; idx1 < total_size; idx1 += self.stride() * self.size())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } } } ; # endif # if)",
    "insertText": "defined(EIGEN_USE_GPU) && (defined(EIGEN_GPUCC)) template <typename Self, typename Reducer> __global__ EIGEN_HIP_LAUNCH_BOUNDS_1024 void ScanKernel(Self self, Index total_size, typename Self::CoeffReturnType* data)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (Index val = threadIdx . x + blockIdx . x* blockDim . x ; Index)",
    "insertText": "offset(val / self.stride()) * self.stride() * self.size() + val % self.stride()"
  },
  {
    "label": "__syncthreads()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "__syncthreads()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Self,Reducer,bool Vectorize> struct ScanLauncher<Self,Reducer,GpuDevice,Vectorize> { void)",
    "insertText": "operator()(const Self& self, typename Self::CoeffReturnType* data)"
  },
  {
    "label": "num_blocks()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "num_blocks(total_size / self.size() + 63)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (Index block_size = 6 4 ;)",
    "insertText": "LAUNCH_GPU_KERNEL((ScanKernel<Self, Reducer>), num_blocks, block_size, 0, self.device(), self, total_size, data)"
  },
  {
    "label": "PacketAccess()",
    "kind": "Method",
    "detail": "Function (} } ; # endif } template<Op,ArgType,Device> struct TensorEvaluator<const TensorScanOp<Op,ArgType>,Device> { typedef TensorScanOp<Op,ArgType> XprType ; typedef XprType::Index Index ; typedef const ArgType ChildTypeNoConst ; typedef const ArgType ChildType ; const int NumDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; typedef internal::remove_const<XprType::Scalar>::type Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef TensorEvaluator<const TensorScanOp<Op,ArgType>,Device> Self ; typedef StorageMemory<Scalar,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,)",
    "insertText": "PacketAccess(PacketType<CoeffReturnType, Device>::size > 1)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device), m_device(device), m_exclusive(op.exclusive()), m_accumulator(op.accumulator()), m_size(m_impl.dimensions()[op.axis()]), m_stride(1), m_consume_dim(op.axis()), m_output(NULL)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(op.axis() >= 0 && op.axis() < NumDims)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const Dimensions& dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (m_stride = m_stride* dims [ i ] ; } } else { unsigned int axis = internal::convert_index<unsigned)",
    "insertText": "int(op.axis())"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (internal::ScanLauncher<Self,Op,Device> launcher ;)",
    "insertText": "if(data)"
  },
  {
    "label": "launcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "launcher(*this, data)"
  },
  {
    "label": "EvaluatorPointerType()",
    "kind": "Method",
    "detail": "Function (m_output = static_cast<)",
    "insertText": "EvaluatorPointerType(m_device.get((Scalar*) m_device.allocate_temp(total_size * sizeof(Scalar))))"
  },
  {
    "label": "launcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "launcher(*this, m_output)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "deallocate_temp()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate_temp(m_output)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_SYCL EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "bind(cl::sycl::handler &cgh)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  }
]