[
  {
    "label": "FMeshFaceSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshFaceSelection"
  },
  {
    "label": "FMeshEdgeSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshEdgeSelection"
  },
  {
    "label": "FMeshVertexSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshVertexSelection"
  },
  {
    "label": "FMeshVertexSelection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" namespace UE { namespace Geometry { class FMeshFaceSelection ; class FMeshEdgeSelection ; class FMeshVertexSelection { private : const FDynamicMesh3* Mesh ; TSet<int> Selected ; public :)",
    "insertText": "FMeshVertexSelection(const FDynamicMesh3* mesh)"
  },
  {
    "label": "FMeshVertexSelection()",
    "kind": "Method",
    "detail": "Function (Mesh = mesh ; })",
    "insertText": "FMeshVertexSelection(const FDynamicMesh3* mesh, const FMeshFaceSelection& convertT)"
  },
  {
    "label": "FMeshVertexSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshVertexSelection(const FDynamicMesh3* mesh, const FMeshEdgeSelection& convertE)"
  },
  {
    "label": "AsSet()",
    "kind": "Method",
    "detail": "Function (TSet<int>)",
    "insertText": "AsSet()"
  },
  {
    "label": "AsBitArray()",
    "kind": "Method",
    "detail": "Function (} TBitArray<FDefaultBitArrayAllocator>)",
    "insertText": "AsBitArray()"
  },
  {
    "label": "Bitmap()",
    "kind": "Method",
    "detail": "Function (TBitArray<FDefaultBitArrayAllocator>)",
    "insertText": "Bitmap(false, Mesh->MaxVertexID())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Bitmap [ tid ] = true ; } return Bitmap ; } public : TSet<int>::TRangedForIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TSet<int>::TRangedForIterator)",
    "insertText": "end()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "add(int vID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Selected .)",
    "insertText": "Add(vID)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "remove(int vID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Selected .)",
    "insertText": "Remove(vID)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} public : int)",
    "insertText": "Num()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSelected(int vID)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Select(int vID)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(vID)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Select(TArrayView<const int> Vertices)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(VID)"
  },
  {
    "label": "SelectByVertexID()",
    "kind": "Method",
    "detail": "Function (} } } template<PredicateFuncType> void)",
    "insertText": "SelectByVertexID(PredicateFuncType PredicateFunc, bool bSelectTrue = true)"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (int32 NumV = Mesh ->)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(vid)"
  },
  {
    "label": "SelectByPosition()",
    "kind": "Method",
    "detail": "Function (} } } template<PredicateFuncType> void)",
    "insertText": "SelectByPosition(PredicateFuncType PredicateFunc, bool bSelectTrue = true)"
  },
  {
    "label": "SelectTriangleVertices()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SelectTriangleVertices(TArrayView<const int> Triangles)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i tri = Mesh ->)",
    "insertText": "GetTriangle(TID)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(tri.A)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(tri.B)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(tri.C)"
  },
  {
    "label": "SelectTriangleVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SelectTriangleVertices(const FMeshFaceSelection& Triangles)"
  },
  {
    "label": "SelectInteriorVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInteriorVertices(const FMeshFaceSelection& triangles)"
  },
  {
    "label": "SelectConnectedBoundaryV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectConnectedBoundaryV(int vSeed)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<int> queue ; queue .)",
    "insertText": "Add(vSeed)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (int vid = queue .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (found .)",
    "insertText": "Add(nbrid)"
  },
  {
    "label": "SelectEdgeVertices()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "SelectEdgeVertices(TArrayView<const int> Edges)"
  },
  {
    "label": "GetEdgeV()",
    "kind": "Method",
    "detail": "Function (FIndex2i ev = Mesh ->)",
    "insertText": "GetEdgeV(EID)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(ev.A)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(ev.B)"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Deselect(int vID)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(vID)"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Deselect(TArrayView<const int> Vertices)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(VID)"
  },
  {
    "label": "DeselectEdge()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DeselectEdge(int eid)"
  },
  {
    "label": "GetEdgeV()",
    "kind": "Method",
    "detail": "Function (FIndex2i ev = Mesh ->)",
    "insertText": "GetEdgeV(eid)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(ev.A)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(ev.B)"
  },
  {
    "label": "DeselectEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeselectEdges(TArrayView<const int> Edges)"
  },
  {
    "label": "ExpandToOneRingNeighbours()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ExpandToOneRingNeighbours(const TUniqueFunction<bool(int)>& FilterF = nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<int> temp ;)",
    "insertText": "for(int vid : Selected)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(IsSelected(nbr_vid) == false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (temp .)",
    "insertText": "Add(nbr_vid)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int ID : temp)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(ID)"
  },
  {
    "label": "ExpandToOneRingNeighbours()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ExpandToOneRingNeighbours(int nRings, const TUniqueFunction<bool(int)>& FilterF = nullptr)"
  },
  {
    "label": "ExpandToOneRingNeighbours()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandToOneRingNeighbours(FilterF)"
  },
  {
    "label": "ContractByBorderVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ContractByBorderVertices(int32 nRings = 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<int> BorderVertices ;)",
    "insertText": "for(int32 k = 0; k < nRings; ++k)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BorderVertices .)",
    "insertText": "Reset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAnyNeighbourDeselected = false ;)",
    "insertText": "for(int nbr_vid : Mesh->VtxVerticesItr(vid))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAnyNeighbourDeselected = true ; break ; } })",
    "insertText": "if(bAnyNeighbourDeselected)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BorderVertices .)",
    "insertText": "Add(vid)"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Deselect(BorderVertices)"
  },
  {
    "label": "FloodFill()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FloodFill(int vSeed, const TUniqueFunction<bool(int)>& VertIncludedF = nullptr)"
  },
  {
    "label": "FloodFill()",
    "kind": "Method",
    "detail": "Function (TArray<int> Seeds = { vSeed } ;)",
    "insertText": "FloodFill(Seeds, VertIncludedF)"
  },
  {
    "label": "FloodFill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FloodFill(const TArray<int>& Seeds, const TUniqueFunction<bool(int)>& VertIncludedF = nullptr)"
  },
  {
    "label": "stack()",
    "kind": "Method",
    "detail": "Function (TDynamicVector<int>)",
    "insertText": "stack(Seeds)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(Seed)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(stack.Num() > 0)"
  },
  {
    "label": "Back()",
    "kind": "Method",
    "detail": "Function (int vID = stack .)",
    "insertText": "Back()"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (stack .)",
    "insertText": "PopBack()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "add(nbr_vid)"
  }
]