[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_UNIQUE_H # define _LIBCPP___ALGORITHM_RANGES_UNIQUE_H # include<__algorithm / iterator_operations . h> # include<__algorithm / make_projected . h> # include<__algorithm / unique . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / permutable . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__ranges / subrange . h> # include<__utility / forward . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __unique { struct __fn { template<permutable _Iter,sentinel_for<_Iter> _Sent,class _Proj = identity,indirect_equivalence_relation<projected<_Iter,_Proj>> _Comp = ranges::equal_to> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "operator()(_Iter __first, _Sent __last, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__unique<)",
    "insertText": "_RangeAlgPolicy(std::move(__first), std::move(__last), std::__make_projected(__comp, __proj))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Range,class _Proj = identity,indirect_equivalence_relation<projected<iterator_t<_Range>,_Proj>> _Comp = ranges::equal_to> requires permutable<iterator_t<_Range>> _LIBCPP_HIDE_FROM_ABI borrowed_subrange_t<_Range>)",
    "insertText": "operator()(_Range&& __range, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__unique<)",
    "insertText": "_RangeAlgPolicy(ranges::begin(__range), ranges::end(__range), std::__make_projected(__comp, __proj))"
  }
]