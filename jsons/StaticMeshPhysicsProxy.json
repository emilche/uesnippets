[
  {
    "label": "FParticleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleData"
  },
  {
    "label": "FPhysicsProxyKinematicUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsProxyKinematicUpdate"
  },
  {
    "label": "FStubSkeletalMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStubSkeletalMeshData"
  },
  {
    "label": "FStaticMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshPhysicsProxy"
  },
  {
    "label": "FShapeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapeParams"
  },
  {
    "label": "Params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Params"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / PhysicsProxy . h \" # include \" GeometryCollection / GeometryCollectionSimulationTypes . h \" # include \" Chaos / Framework / BufferedData . h \" namespace Chaos { class FParticleData ; } struct FPhysicsProxyKinematicUpdate { FTransform NewTransform ; FVector NewVelocity ; } ; struct FStubSkeletalMeshData { void)",
    "insertText": "Reset()"
  },
  {
    "label": "FShapeParams()",
    "kind": "Method",
    "detail": "Function (} ; } ; class FStaticMeshPhysicsProxy : public TPhysicsProxy<FStaticMeshPhysicsProxy,FStubSkeletalMeshData,FProxyTimestampBase> { typedef TPhysicsProxy<FStaticMeshPhysicsProxy,FStubSkeletalMeshData,FProxyTimestampBase> Base ; public : struct FShapeParams { FVector BoxExtents ; FVector2D CapsuleHalfHeightAndRadius ; float SphereRadius ;)",
    "insertText": "FShapeParams()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(this, 0, sizeof(FShapeParams))"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (} } ; struct Params {)",
    "insertText": "Params() : Name(\"\") , InitialTransform(FTransform::Identity) , InitialLinearVelocity(FVector::ZeroVector) , InitialAngularVelocity(FVector::ZeroVector) , ObjectType(EObjectStateTypeEnum::Chaos_Object_Dynamic) , ShapeType(EImplicitTypeEnum::Chaos_Max) , bSimulating(false) , TargetTransform(nullptr) , Mass(0.0f) , MinRes(5) , MaxRes(10)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} FString Name ; Chaos::FParticles MeshVertexPositions ; TArray<Chaos::TVector<int32,3>> TriIndices ; FShapeParams ShapeParams ; FTransform InitialTransform ; FVector InitialLinearVelocity ; FVector InitialAngularVelocity ; EObjectStateTypeEnum ObjectType ; EImplicitTypeEnum ShapeType ; bool bSimulating ; FTransform* TargetTransform ; Chaos::TSerializablePtr<Chaos::FChaosPhysicsMaterial> PhysicalMaterial ; float Mass ; int32 MinRes ; int32 MaxRes ; } ; using FCallbackInitFunc = TFunction<)",
    "insertText": "void(FStaticMeshPhysicsProxy::Params&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FSyncDynamicFunc = TFunction<)",
    "insertText": "void(const FTransform&)"
  },
  {
    "label": "FStaticMeshPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticMeshPhysicsProxy()"
  },
  {
    "label": "FStaticMeshPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticMeshPhysicsProxy(UObject* InOwner, FCallbackInitFunc InInitFunc, FSyncDynamicFunc InSyncFunc)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "BufferKinematicUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferKinematicUpdate(const FPhysicsProxyKinematicUpdate& InParamUpdate)"
  },
  {
    "label": "IsSimulating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulating()"
  },
  {
    "label": "UpdateKinematicBodiesCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKinematicBodiesCallback(const FParticlesType& Particles, const float Dt, const float Time, FKinematicProxy& Proxy)"
  },
  {
    "label": "StartFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFrameCallback(const float InDt, const float InTime)"
  },
  {
    "label": "EndFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameCallback(const float InDt)"
  },
  {
    "label": "BindParticleCallbackMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindParticleCallbackMapping(Chaos::TArrayCollectionArray<PhysicsProxyWrapper> & PhysicsProxyReverseMap, Chaos::TArrayCollectionArray<int32> & ParticleIDReverseMap)"
  },
  {
    "label": "CreateRigidBodyCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRigidBodyCallback(FParticlesType& InOutParticles)"
  },
  {
    "label": "ParameterUpdateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParameterUpdateCallback(FParticlesType& InParticles, const float InTime)"
  },
  {
    "label": "DisableCollisionsCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableCollisionsCallback(TSet<TTuple<int32, int32>>& InPairs)"
  },
  {
    "label": "AddForceCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceCallback(FParticlesType& InParticles, const float InDt, const int32 InIndex)"
  },
  {
    "label": "BufferCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferCommand(Chaos::FPhysicsSolver* InSolver, const FFieldSystemCommand& InCommand)"
  },
  {
    "label": "SyncBeforeDestroy()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SyncBeforeDestroy()"
  },
  {
    "label": "OnRemoveFromScene()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnRemoveFromScene()"
  },
  {
    "label": "PushToPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushToPhysicsState(const Chaos::FParticleData*)"
  },
  {
    "label": "ClearAccumulatedData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ClearAccumulatedData()"
  },
  {
    "label": "BufferPhysicsResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BufferPhysicsResults()"
  },
  {
    "label": "FlipBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipBuffer()"
  },
  {
    "label": "PullFromPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullFromPhysicsState(const int32 SolverSyncTimestamp)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  }
]