[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "IGameplayMediaEncoderListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameplayMediaEncoderListener"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "SharedPointerInternals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPointerInternals"
  },
  {
    "label": "FGameplayMediaEncoderModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayMediaEncoderModule"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISubmixBufferListener . h \" # include \" Logging / LogMacros . h \" # include \" AudioMixerDevice . h \" # include \" RHI . h \" # include \" RHIResources . h \" # include \" HAL / Thread . h \" THIRD_PARTY_INCLUDES_START # pragma)",
    "insertText": "warning(push) #pragma warning(disable: 4596 6319 6323) #pragma warning(pop)"
  },
  {
    "label": "OnMediaSample()",
    "kind": "Method",
    "detail": "Function (class IGameplayMediaEncoderListener { public : PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "OnMediaSample(const AVEncoder::FMediaPacket& Sample)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : FGameplayMediaEncoder*)",
    "insertText": "Get()"
  },
  {
    "label": "FGameplayMediaEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGameplayMediaEncoder()"
  },
  {
    "label": "RegisterListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterListener(IGameplayMediaEncoderListener* Listener)"
  },
  {
    "label": "UnregisterListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterListener(IGameplayMediaEncoderListener* Listener)"
  },
  {
    "label": "SetVideoBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoBitrate(uint32 Bitrate)"
  },
  {
    "label": "SetVideoFramerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoFramerate(uint32 Framerate)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "InitializeCmd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCmd()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()->Initialize()"
  },
  {
    "label": "ShutdownCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShutdownCmd()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()->Shutdown()"
  },
  {
    "label": "StartCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartCmd()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()->Start()"
  },
  {
    "label": "StopCmd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopCmd()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()->Stop()"
  },
  {
    "label": "GetAudioConfig()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS AVEncoder::FAudioConfig)",
    "insertText": "GetAudioConfig()"
  },
  {
    "label": "GetVideoConfig()",
    "kind": "Method",
    "detail": "Function (AVEncoder::FVideoConfig)",
    "insertText": "GetVideoConfig()"
  },
  {
    "label": "GetMediaTimestamp()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetMediaTimestamp()"
  },
  {
    "label": "OnFrameBufferReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameBufferReady(SWindow& SlateWindow, const FTextureRHIRef& FrameBuffer)"
  },
  {
    "label": "GetListenerName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetListenerName()"
  },
  {
    "label": "OnNewSubmixBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewSubmixBuffer(const USoundSubmix* OwningSubmix, float* AudioData, int32 NumSamples, int32 NumChannels, const int32 SampleRate, double AudioClock)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* AudioData, int32 NumSamples, int32 NumChannels, int32 SampleRate)"
  },
  {
    "label": "ProcessVideoFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessVideoFrame(const FTextureRHIRef& FrameBuffer)"
  },
  {
    "label": "UpdateVideoConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVideoConfig()"
  },
  {
    "label": "OnEncodedAudioFrame()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "OnEncodedAudioFrame(const AVEncoder::FMediaPacket& Packet)"
  },
  {
    "label": "OnEncodedVideoFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodedVideoFrame(uint32 LayerIndex, const TSharedPtr<AVEncoder::FVideoEncoderInputFrame> Frame, const AVEncoder::FCodecPacket& Packet)"
  },
  {
    "label": "ObtainInputFrame()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<AVEncoder::FVideoEncoderInputFrame>)",
    "insertText": "ObtainInputFrame()"
  },
  {
    "label": "CopyTexture()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "CopyTexture(const FTextureRHIRef& SourceTexture, FTextureRHIRef& DestinationTexture)"
  },
  {
    "label": "FloatToPCM16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FloatToPCM16(float const* floatSamples, int32 numSamples, TArray<int16>& out)"
  }
]