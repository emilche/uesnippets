[
  {
    "label": "AudioDecoderPcmU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderPcmU"
  },
  {
    "label": "AudioDecoderPcmA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderPcmA"
  },
  {
    "label": "AudioDecoderPcmU()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_G711_AUDIO_DECODER_PCM_H_ # define MODULES_AUDIO_CODING_CODECS_G711_AUDIO_DECODER_PCM_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" api / audio_codecs / audio_decoder . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / checks . h \" namespace webrtc { class AudioDecoderPcmU final : public AudioDecoder { public :)",
    "insertText": "AudioDecoderPcmU(size_t num_channels) : num_channels_(num_channels)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(num_channels, 1)"
  },
  {
    "label": "AudioDecoderPcmU()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioDecoderPcmU(const AudioDecoderPcmU&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDecoderPcmU&)",
    "insertText": "operator(const AudioDecoderPcmU&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ParsePayload()",
    "kind": "Method",
    "detail": "Function (std::vector<ParseResult>)",
    "insertText": "ParsePayload(rtc::Buffer&& payload, uint32_t timestamp)"
  },
  {
    "label": "PacketDuration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketDuration(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "DecodeInternal()",
    "kind": "Method",
    "detail": "Function (protected : int)",
    "insertText": "DecodeInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  },
  {
    "label": "AudioDecoderPcmA()",
    "kind": "Method",
    "detail": "Function (private : const size_t num_channels_ ; } ; class AudioDecoderPcmA final : public AudioDecoder { public :)",
    "insertText": "AudioDecoderPcmA(size_t num_channels) : num_channels_(num_channels)"
  },
  {
    "label": "AudioDecoderPcmA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioDecoderPcmA(const AudioDecoderPcmA&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDecoderPcmA&)",
    "insertText": "operator(const AudioDecoderPcmA&)"
  }
]