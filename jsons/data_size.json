[
  {
    "label": "DataSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataSize"
  },
  {
    "label": "rtc_units_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc_units_impl"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (# ifndef API_UNITS_DATA_SIZE_H_ # define API_UNITS_DATA_SIZE_H_ # ifdef WEBRTC_UNIT_TEST # include<ostream> # endif # include<string> # include<type_traits> # include \" rtc_base / units / unit_base . h \" namespace webrtc { class DataSize final : public rtc_units_impl::RelativeUnit<DataSize> { public : template<T> DataSize)",
    "insertText": "Bytes(T value)"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (} DataSize)",
    "insertText": "Infinity()"
  },
  {
    "label": "DataSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DataSize()"
  },
  {
    "label": "bytes()",
    "kind": "Method",
    "detail": "Function (template<T = int64_t> T)",
    "insertText": "bytes()"
  },
  {
    "label": "bytes_or()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "bytes_or(int64_t fallback_value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} private : class rtc_units_impl::UnitBase<DataSize> ; using RelativeUnit::RelativeUnit ; bool one_sided = true ; } ; std::string)",
    "insertText": "ToString(DataSize value)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToLogString(DataSize value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& stream, DataSize value)"
  }
]