[
  {
    "label": "TMirrorMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMirrorMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TMirrorMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Plane . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TMirrorMatrix : public TMatrix<T> { public :)",
    "insertText": "TMirrorMatrix(const TPlane<T>& Plane)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TMirrorMatrix(const TMirrorMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "TMirrorMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> TMirrorMatrix<T)",
    "insertText": "TMirrorMatrix(const TPlane<T>& Plane ) : FMatrix( TPlane<T>( -2.f*Plane.X*Plane.X + 1.f, -2.f*Plane.Y*Plane.X, -2.f*Plane.Z*Plane.X, 0.f ), TPlane<T>( -2.f*Plane.X*Plane.Y, -2.f*Plane.Y*Plane.Y + 1.f, -2.f*Plane.Z*Plane.Y, 0.f ), TPlane<T>( -2.f*Plane.X*Plane.Z, -2.f*Plane.Y*Plane.Z, -2.f*Plane.Z*Plane.Z + 1.f, 0.f ), TPlane<T>( 2.f*Plane.X*Plane.W, 2.f*Plane.Y*Plane.W, 2.f*Plane.Z*Plane.W, 1.f ))"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_DECLARE_LWC_TYPE(MirrorMatrix, 44)"
  }
]