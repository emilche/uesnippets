[
  {
    "label": "SPoseViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseViewer"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "FDisplayedPoseInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedPoseInfo"
  },
  {
    "label": "SPoseListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseListRow"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "FDisplayedCurveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedCurveInfo"
  },
  {
    "label": "SCurveListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveListRow"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "SPoseEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseEditor"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" IPersonaPreviewScene . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" IEditableSkeleton . h \" # include \" IPersonaToolkit . h \" # include \" Widgets / Views / SListView . h \" # include \" SAnimEditorBase . h \" # include \" Animation / PoseAsset . h \" # include \" Animation / AnimInstance . h \" class SPoseViewer ; class UAnimSingleNodeInstance ; class FDisplayedPoseInfo { public : FName Name ; float Weight ; TSharedRef<FDisplayedPoseInfo>)",
    "insertText": "Make(const FName& Source)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE(FOnRenameRequested)"
  },
  {
    "label": "FDisplayedPoseInfo()",
    "kind": "Method",
    "detail": "Function (FOnRenameRequested OnRenameRequested ; protected :)",
    "insertText": "FDisplayedPoseInfo(const FName& InSource) : Name(InSource) , Weight(0)"
  },
  {
    "label": "FDisplayedPoseInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplayedPoseInfo()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SListView<TSharedPtr<FDisplayedPoseInfo>> SPoseListType ; class SPoseListRow : public SMultiColumnTableRow<TSharedPtr<FDisplayedPoseInfo>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPoseListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FDisplayedPoseInfo>, Item) SLATE_ARGUMENT(TWeakPtr<SPoseViewer>, PoseViewer) SLATE_ARGUMENT(FText, FilterText)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& OwnerTableView, const TSharedRef<IPersonaPreviewScene>& InPreviewScene)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "OnPoseWeightChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPoseWeightChanged(float NewWeight)"
  },
  {
    "label": "OnPoseWeightValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPoseWeightValueCommitted(float NewWeight, ETextCommit::Type CommitType)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetName()"
  },
  {
    "label": "OnNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "OnVerifyNameChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyNameChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "GetWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWeight()"
  },
  {
    "label": "CanChangeWeight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeWeight()"
  },
  {
    "label": "FDisplayedCurveInfo()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FDisplayedCurveInfo(const FName& InSource) : Name(InSource)"
  },
  {
    "label": "FDisplayedCurveInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplayedCurveInfo()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; typedef SListView<TSharedPtr<FDisplayedCurveInfo>> SCurveListType ; class SCurveListRow : public SMultiColumnTableRow<TSharedPtr<FDisplayedCurveInfo>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCurveListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FDisplayedCurveInfo>, Item) SLATE_ARGUMENT(TWeakPtr<SPoseViewer>, PoseViewer) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& OwnerTableView)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetValue()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDisplayedCurveInfo> Item ; TWeakPtr<SPoseViewer> PoseViewerPtr ; } ; class SPoseViewer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPoseViewer)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TWeakObjectPtr< UPoseAsset >, PoseAsset) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<class IPersonaToolkit>& InPersonaToolkit, const TSharedRef<IEditableSkeleton>& InEditableSkeleton, const TSharedRef<class IPersonaPreviewScene>& InPreviewScene)"
  },
  {
    "label": "SPoseViewer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SPoseViewer()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewMeshChanged(class USkeletalMesh* OldPreviewMesh, class USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& SearchText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& SearchText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GeneratePoseRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GeneratePoseRow(TSharedPtr<FDisplayedPoseInfo> InInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GenerateCurveRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateCurveRow(TSharedPtr<FDisplayedCurveInfo> InInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "IsPoseSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPoseSelected()"
  },
  {
    "label": "IsSinglePoseSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSinglePoseSelected()"
  },
  {
    "label": "IsCurveSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurveSelected()"
  },
  {
    "label": "OnDeletePoses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeletePoses()"
  },
  {
    "label": "OnRenamePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenamePose()"
  },
  {
    "label": "OnDeleteCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteCurves()"
  },
  {
    "label": "OnPastePoseNamesFromClipBoard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPastePoseNamesFromClipBoard(bool bSelectedOnly)"
  },
  {
    "label": "AddCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveOverride(const FName& Name, float Weight)"
  },
  {
    "label": "RemoveCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurveOverride(FName& Name)"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText&)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "ModifyName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ModifyName(FName OldName, FName NewName, bool bSilence = false)"
  },
  {
    "label": "IsBasePose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBasePose(FName PoseName)"
  },
  {
    "label": "UpdateSelectedPoseWithCurrent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSelectedPoseWithCurrent()"
  },
  {
    "label": "AddPoseWithCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoseWithCurrent()"
  },
  {
    "label": "AddPoseWithReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoseWithReference()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "RestartPreviewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartPreviewComponent()"
  },
  {
    "label": "OnGetContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetContextMenuContent()"
  },
  {
    "label": "OnGetContextMenuContentForCurveList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetContextMenuContentForCurveList()"
  },
  {
    "label": "OnListDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListDoubleClick(TSharedPtr<FDisplayedPoseInfo> InItem)"
  },
  {
    "label": "IsNewPoseNameValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNewPoseNameValid(FText& OutReason)"
  },
  {
    "label": "CreatePoseList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePoseList(const FString& SearchText = FString())"
  },
  {
    "label": "CreateCurveList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCurveList(const FString& SearchText = FString())"
  },
  {
    "label": "ApplyCustomCurveOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomCurveOverride(UAnimInstance* AnimInstance)"
  },
  {
    "label": "GetAnimInstance()",
    "kind": "Method",
    "detail": "Function (UAnimInstance*)",
    "insertText": "GetAnimInstance()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class IPersonaPreviewScene> PreviewScenePtr ; TWeakPtr<class IPersonaToolkit> PersonaToolkitPtr ; TWeakPtr<class IEditableSkeleton> EditableSkeletonPtr ; TWeakObjectPtr<UPoseAsset> PoseAssetPtr ; TSharedPtr<SSearchBox> NameFilterBox ; TSharedPtr<SPoseListType> PoseListView ; TArray<TSharedPtr<FDisplayedPoseInfo>> PoseList ; TSharedPtr<SCurveListType> CurveListView ; TArray<TSharedPtr<FDisplayedCurveInfo>> CurveList ; FName NewPoseName ; FText FilterText ; TSharedPtr<FUICommandList> UICommandList ; TMap<FName,float> OverrideCurves ; FOnAddCustomAnimationCurves OnAddAnimationCurveDelegate ; FDelegateHandle OnDelegatePoseListChangedDelegateHandle ; class SPoseListRow ; class SCurveListRow ; } ; class SPoseEditor : public SAnimEditorBase { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPoseEditor ) : _PoseAsset(NULL)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UPoseAsset*, PoseAsset ) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<class IPersonaToolkit>& InPersonaToolkit, const TSharedRef<IEditableSkeleton>& InEditableSkeleton, const TSharedRef<class IPersonaPreviewScene>& InPreviewScene)"
  },
  {
    "label": "GetEditorObject()",
    "kind": "Method",
    "detail": "Function (UAnimationAsset*)",
    "insertText": "GetEditorObject()"
  }
]