[
  {
    "label": "FCuttingPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCuttingPoint"
  },
  {
    "label": "FCuttingGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCuttingGrid"
  },
  {
    "label": "FIsoNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoNode"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FLoopNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopNode"
  },
  {
    "label": "FModelMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelMesh"
  },
  {
    "label": "FPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint"
  },
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "FThinZone2DFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2DFinder"
  },
  {
    "label": "FTopologicalFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalFace"
  },
  {
    "label": "FGridChronos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridChronos"
  },
  {
    "label": "FGridBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGridBase"
  },
  {
    "label": "FGridChronos()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Chrono . h \" # include \" Core / HaveStates . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Math / Point . h \" # include \" Mesh / MeshEnum . h \" # include \" UI / Display . h \" # ifdef CADKERNEL_DEV # include \" UI / DefineForDebug . h \" # endif namespace UE::CADKernel { struct FCuttingPoint ; struct FCuttingGrid ; class FIsoNode ; class FIsoSegment ; class FLoopNode ; class FModelMesh ; class FPoint ; class FPoint2D ; class FThinZone2DFinder ; class FTopologicalFace ; struct FGridChronos { FDuration DefineCuttingParametersDuration ; FDuration GeneratePointCloudDuration ; FDuration ProcessPointCloudDuration ; FDuration FindInnerDomainPointsDuration ; FDuration Build2DLoopDuration ; FDuration RemovePointsClosedToLoopDuration ; FDuration FindPointsCloseToLoopDuration ; FDuration ScaleGridDuration ;)",
    "insertText": "FGridChronos() : DefineCuttingParametersDuration(FChrono::Init()) , GeneratePointCloudDuration(FChrono::Init()) , ProcessPointCloudDuration(FChrono::Init()) , FindInnerDomainPointsDuration(FChrono::Init()) , Build2DLoopDuration(FChrono::Init()) , RemovePointsClosedToLoopDuration(FChrono::Init()) , FindPointsCloseToLoopDuration(FChrono::Init()) , ScaleGridDuration(FChrono::Init())"
  },
  {
    "label": "PrintTimeElapse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTimeElapse()"
  },
  {
    "label": "Elapse()",
    "kind": "Method",
    "detail": "Function (FDuration GridDuration =)",
    "insertText": "Elapse(FChrono::Now())"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (GridDuration + = DefineCuttingParametersDuration ; GridDuration + = GeneratePointCloudDuration ; GridDuration + = FindInnerDomainPointsDuration ; GridDuration + = Build2DLoopDuration ; GridDuration + = RemovePointsClosedToLoopDuration ; GridDuration + = FindPointsCloseToLoopDuration ;)",
    "insertText": "PrintClockElapse(Log, TEXT(\"\"), TEXT(\"Grid\"), GridDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"DefineCuttingParameters\"), DefineCuttingParametersDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"GeneratePointCloud\"), GeneratePointCloudDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"GenerateDomainPoints\"), ProcessPointCloudDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"FindInnerDomainPointsDuration\"), FindInnerDomainPointsDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"FindPointsCloseToLoop\"), FindPointsCloseToLoopDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"RemovePointsClosedToLoop\"), RemovePointsClosedToLoopDuration)"
  },
  {
    "label": "PrintClockElapse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintClockElapse(Log, TEXT(\" \"), TEXT(\"Build2DLoopDuration\"), Build2DLoopDuration)"
  },
  {
    "label": "FGridBase()",
    "kind": "Method",
    "detail": "Function (} } ; class FGridBase : public FHaveStates { protected : FTopologicalFace& Face ; const double Tolerance3D ; int32 CuttingCount [ 2 ] = { 0,0 } ; int32 CuttingSize = 0 ; FCoordinateGrid UniformCuttingCoordinates ; TArray<FPoint2D> Points2D [ EGridSpace::EndGridSpace ] ; TArray<FPoint> Points3D ; TArray<FVector3f> Normals ; public : FGridChronos Chronos ; public :)",
    "insertText": "FGridBase(FTopologicalFace& InFace)"
  },
  {
    "label": "FGridBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGridBase()"
  },
  {
    "label": "Close3DDebugSession()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_ONLY_SURFACE_TO_DEBUG)",
    "insertText": "Close3DDebugSession(bDisplay)"
  },
  {
    "label": "TransformPoints()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "TransformPoints(EGridSpace DestinationSpace, const TArray<FPoint2D>& InPointsToScale, TArray<FPoint2D>& OutScaledPoints)"
  },
  {
    "label": "ScaleGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScaleGrid()"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& CoordinateGrid, bool bWithNormals)"
  },
  {
    "label": "ComputeNewCoordinate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNewCoordinate(const TArray<FPoint2D>& NewGrid, int32 IndexU, int32 IndexV, const FPoint2D& InPoint, FPoint2D& OutNewScaledPoint)"
  },
  {
    "label": "GetCoordinateGrid()",
    "kind": "Method",
    "detail": "Function (const FCoordinateGrid& CoordinateGrid =)",
    "insertText": "GetCoordinateGrid()"
  },
  {
    "label": "NewGrid()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& PointU0V0 =)",
    "insertText": "NewGrid(IndexV + 0) * CuttingCount[EIso::IsoU] + (IndexU + 0)"
  },
  {
    "label": "NewGrid()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& PointU1V0 =)",
    "insertText": "NewGrid(IndexV + 0) * CuttingCount[EIso::IsoU] + (IndexU + 1)"
  },
  {
    "label": "NewGrid()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& PointU0V1 =)",
    "insertText": "NewGrid(IndexV + 1) * CuttingCount[EIso::IsoU] + (IndexU + 0)"
  },
  {
    "label": "NewGrid()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& PointU1V1 =)",
    "insertText": "NewGrid(IndexV + 1) * CuttingCount[EIso::IsoU] + (IndexU + 1)"
  },
  {
    "label": "PointU0V0()",
    "kind": "Method",
    "detail": "Function (const double U1MinusU0 = CoordinateGrid [ EIso::IsoU ] [ IndexU + 1 ] - CoordinateGrid [ EIso::IsoU ] [ IndexU ] ; const double U0MinusU = CoordinateGrid [ EIso::IsoU ] [ IndexU ] - InPoint . U ; const double V1MinusV0 = CoordinateGrid [ EIso::IsoV ] [ IndexV + 1 ] - CoordinateGrid [ EIso::IsoV ] [ IndexV ] ; const double V0MinusV = CoordinateGrid [ EIso::IsoV ] [ IndexV ] - InPoint . V ; OutNewScaledPoint =)",
    "insertText": "PointU0V0(PointU0V0 - PointU1V0) * (U0MinusU / U1MinusU0) + (PointU0V0 - PointU0V1) * (V0MinusV / V1MinusV0) + (PointU0V0 - PointU0V1 + PointU1V1 - PointU1V0) * ((U0MinusU * V0MinusV) / (U1MinusU0 * V1MinusV0))"
  },
  {
    "label": "GetInner2DPoint()",
    "kind": "Method",
    "detail": "Function (} ; public : const FPoint2D&)",
    "insertText": "GetInner2DPoint(EGridSpace Space, int32 Index)"
  },
  {
    "label": "GetInner2DPoint()",
    "kind": "Method",
    "detail": "Function (} const FPoint2D&)",
    "insertText": "GetInner2DPoint(EGridSpace Space, int32 IndexU, int32 IndexV)"
  },
  {
    "label": "GetInner3DPoint()",
    "kind": "Method",
    "detail": "Function (} const FPoint&)",
    "insertText": "GetInner3DPoint(int32 Index)"
  },
  {
    "label": "GetFace()",
    "kind": "Method",
    "detail": "Function (} const FTopologicalFace&)",
    "insertText": "GetFace()"
  },
  {
    "label": "DisplayGridPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayGridPoints(EGridSpace DisplaySpace)"
  },
  {
    "label": "DisplayInnerPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayInnerPoints(TCHAR* Message, EGridSpace DisplaySpace)"
  }
]