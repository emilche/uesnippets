[
  {
    "label": "DistributionCaller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DistributionCaller"
  },
  {
    "label": "Trait",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trait"
  },
  {
    "label": "AlwaysVoid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlwaysVoid"
  },
  {
    "label": "detector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "detector"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_DISTRIBUTION_CALLER_H_ # define ABSL_RANDOM_INTERNAL_DISTRIBUTION_CALLER_H_ # include<utility> # include<type_traits> # include \" absl / base / config . h \" # include \" absl / base / internal / fast_type_id . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<URBG> struct DistributionCaller {)",
    "insertText": "static_assert(!std::is_pointer<URBG>::value, \"You must pass a reference, not a pointer.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<template<class . . .> class Trait,class AlwaysVoid,class . . . Args> struct detector : std::false_type { } ; template<template<class . . .> class Trait,class . . . Args> struct detector<Trait,absl::void_t<Trait<Args . . .>>,Args . . .> : std::true_type { } ; template<class T> using invoke_mock_t =)",
    "insertText": "decltype(std::declval<T*>()->InvokeMock( std::declval<::absl::base_internal::FastTypeIdType>(), std::declval<void*>(), std::declval<void*>()))"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (using HasInvokeMock = detector<invoke_mock_t,void,URBG>::type ; template<DistrT,. . . Args> DistrT::result_type)",
    "insertText": "Impl(std::false_type, URBG* urbg, Args&&... args)"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (DistrT)",
    "insertText": "dist(std::forward<Args>(args)...)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} template<DistrT,. . . Args> DistrT::result_type)",
    "insertText": "Impl(std::true_type, URBG* urbg, Args&&... args)"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (using ResultT = DistrT::result_type ; using ArgTupleT = std::tuple<absl::decay_t<Args> . . .> ; using KeyT =)",
    "insertText": "ResultT(DistrT, ArgTupleT)"
  },
  {
    "label": "arg_tuple()",
    "kind": "Method",
    "detail": "Function (ArgTupleT)",
    "insertText": "arg_tuple(std::forward<Args>(args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ResultT result ;)",
    "insertText": "if(!urbg->InvokeMock(::absl::base_internal::FastTypeId<KeyT>(), &arg_tuple, &result))"
  },
  {
    "label": "DistrT()",
    "kind": "Method",
    "detail": "Function (auto dist = absl::make_from_tuple<)",
    "insertText": "DistrT(arg_tuple)"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "dist(*urbg)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (} return result ; } template<DistrT,. . . Args> DistrT::result_type)",
    "insertText": "Call(URBG* urbg, Args&&... args)"
  }
]