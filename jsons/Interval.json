[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Interval",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Interval"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_INTERVAL_H # define LLVM_ANALYSIS_INTERVAL_H # include \" llvm / ADT / GraphTraits . h \" # include<vector> namespace llvm { class BasicBlock ; class raw_ostream ; class Interval { BasicBlock* HeaderNode ; public : typedef std::vector<BasicBlock*>::iterator succ_iterator ; typedef std::vector<BasicBlock*>::iterator pred_iterator ; typedef std::vector<BasicBlock*>::iterator node_iterator ;)",
    "insertText": "Interval(BasicBlock *Header) : HeaderNode(Header)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "push_back(Header)"
  },
  {
    "label": "getHeaderNode()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getHeaderNode()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &O)"
  },
  {
    "label": "succ_begin()",
    "kind": "Method",
    "detail": "Function (} ; Interval::succ_iterator)",
    "insertText": "succ_begin(Interval *I)"
  },
  {
    "label": "succ_end()",
    "kind": "Method",
    "detail": "Function (} Interval::succ_iterator)",
    "insertText": "succ_end(Interval *I)"
  },
  {
    "label": "pred_begin()",
    "kind": "Method",
    "detail": "Function (} Interval::pred_iterator)",
    "insertText": "pred_begin(Interval *I)"
  },
  {
    "label": "pred_end()",
    "kind": "Method",
    "detail": "Function (} Interval::pred_iterator)",
    "insertText": "pred_end(Interval *I)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} template<> struct GraphTraits<Interval*> { typedef Interval NodeType ; typedef Interval::succ_iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(Interval *I)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<Inverse<Interval*>> { typedef Interval NodeType ; typedef Interval::pred_iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(Inverse<Interval *> G)"
  }
]