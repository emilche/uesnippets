[
  {
    "label": "FSelectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSelectionBase"
  },
  {
    "label": "FOutlinerSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutlinerSelection"
  },
  {
    "label": "FSequencerCoreSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCoreSelection"
  },
  {
    "label": "GetSerialNumber()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Delegates / Delegate . h \" # include \" Misc / Optional . h \" # include \" MVVM / Selection / SequencerCoreSelectionTypes . h \" # include \" MVVM / Selection / SequencerSelectionEventSuppressor . h \" namespace UE::Sequencer { class FSelectionBase ; class FOutlinerSelection ; class FSequencerCoreSelection : public TSharedFromThis<FSequencerCoreSelection> { public : FSimpleMulticastDelegate OnChanged ; uint32)",
    "insertText": "GetSerialNumber()"
  },
  {
    "label": "SuppressEventsLongRunning()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TUniquePtr<FSelectionEventSuppressor>)",
    "insertText": "SuppressEventsLongRunning()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetOutlinerSelection()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FOutlinerSelection>)",
    "insertText": "GetOutlinerSelection()"
  },
  {
    "label": "FSequencerCoreSelection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSequencerCoreSelection()"
  },
  {
    "label": "AddSelectionSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSelectionSet(FSelectionBase* InSelection)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectionSets .)",
    "insertText": "Add(InSelection)"
  },
  {
    "label": "PreBroadcastChangeEvent()",
    "kind": "Method",
    "detail": "Function (InSelection -> Owner = this ; } private : void)",
    "insertText": "PreBroadcastChangeEvent()"
  },
  {
    "label": "PreSelectionSetChangeEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreSelectionSetChangeEvent(FSelectionBase* InSelectionSet)"
  },
  {
    "label": "BroadcastSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastSelectionChanged()"
  }
]