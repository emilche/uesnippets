[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "IsInBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInBounds(uint32 Index)"
  },
  {
    "label": "IsInBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInBounds(const VInt& Index, const uint32 Bounds)"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (const int64 IndexInt64 = Index .)",
    "insertText": "AsInt64()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } } VValue)",
    "insertText": "GetValue(uint32 Index)"
  },
  {
    "label": "V_DIE()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "V_DIE(\"Unhandled EArrayType encountered!\")"
  },
  {
    "label": "ConvertDataToVValues()",
    "kind": "Method",
    "detail": "Function (} } template<bool bTransactional> void)",
    "insertText": "ConvertDataToVValues(FAllocationContext Context, uint32 NewCapacity)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 Num = this ->)",
    "insertText": "Num()"
  },
  {
    "label": "VBuffer()",
    "kind": "Method",
    "detail": "Function (VBuffer NewBuffer =)",
    "insertText": "VBuffer(Context, Num, NewCapacity, EArrayType::VValue)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&NewBuffer.GetData<TWriteBarrier<VValue>>()[Index]) TWriteBarrier<VValue>(Context, GetValue(Index))"
  },
  {
    "label": "bTransactional()",
    "kind": "Method",
    "detail": "Function (} SetBufferWithStoreBarrier<)",
    "insertText": "bTransactional(Context, NewBuffer)"
  },
  {
    "label": "SetValueImpl()",
    "kind": "Method",
    "detail": "Function (} } template<bool bTransactional> void)",
    "insertText": "SetValueImpl(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "GetArrayType()",
    "kind": "Method",
    "detail": "Function (EArrayType ArrayType =)",
    "insertText": "GetArrayType()"
  },
  {
    "label": "bTransactional()",
    "kind": "Method",
    "detail": "Function (SetVValue<)",
    "insertText": "bTransactional(Context, Index, Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ArrayType != DetermineArrayType(Value))"
  },
  {
    "label": "bTransactional()",
    "kind": "Method",
    "detail": "Function (ConvertDataToVValues<)",
    "insertText": "bTransactional(Context, Capacity())"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} else { auto DoSet = [& ] {)",
    "insertText": "switch(ArrayType)"
  },
  {
    "label": "SetChar()",
    "kind": "Method",
    "detail": "Function (break ; case EArrayType::Char8 :)",
    "insertText": "SetChar(Index, Value.AsChar())"
  },
  {
    "label": "SetChar32()",
    "kind": "Method",
    "detail": "Function (break ; case EArrayType::Char32 :)",
    "insertText": "SetChar32(Index, Value.AsChar32())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } ; if)",
    "insertText": "constexpr(bTransactional)"
  },
  {
    "label": "CurrentTransaction()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "CurrentTransaction()->AddAuxRoot(Context, Buffer.Get())"
  },
  {
    "label": "DoSet()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DoSet()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetValue(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (SetValueImpl<)",
    "insertText": "false(Context, Index, Value)"
  },
  {
    "label": "SetValueTransactionally()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueTransactionally(FAllocationContext Context, uint32 Index, VValue Value)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (SetValueImpl<)",
    "insertText": "true(Context, Index, Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Serialize(T*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (std::underlying_type_t<EArrayType> ScratchArrayType ; Visitor .)",
    "insertText": "Visit(ScratchArrayType, TEXT(\"ArrayType\"))"
  },
  {
    "label": "EArrayType()",
    "kind": "Method",
    "detail": "Function (EArrayType ArrayType = static_cast<)",
    "insertText": "EArrayType(ScratchArrayType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 ScratchNumValues = 0 ;)",
    "insertText": "if(ArrayType != EArrayType::VValue)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(ScratchNumValues, TEXT(\"NumValues\"))"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (This =&)",
    "insertText": "New(Context, (uint32)ScratchNumValues, ArrayType)"
  },
  {
    "label": "VisitBulkData()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "VisitBulkData(This->GetData(), This->ByteLength(), TEXT(\"Values\"))"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (} else { Visitor .)",
    "insertText": "BeginArray(TEXT(\"Values\"), ScratchNumValues)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(This->template GetData<TWriteBarrier<VValue>>(), This->template GetData<TWriteBarrier<VValue>>() + ScratchNumValues)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "EndArray()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EArrayType SerializedArrayType = ArrayType ;)",
    "insertText": "if(!This->Num())"
  },
  {
    "label": "EArrayType()",
    "kind": "Method",
    "detail": "Function (SerializedArrayType = EArrayType::None ; } std::underlying_type_t<EArrayType> ScratchArrayType = static_cast<std::underlying_type_t<)",
    "insertText": "EArrayType(SerializedArrayType)"
  },
  {
    "label": "VisitReferencesImpl()",
    "kind": "Method",
    "detail": "Function (} } } template<TVisitor> void)",
    "insertText": "VisitReferencesImpl(TVisitor& Visitor)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VBuffer ThisBuffer = Buffer .)",
    "insertText": "Get()"
  },
  {
    "label": "VisitAux()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "VisitAux(ThisBuffer.GetPtr(), TEXT(\"ValuesBuffer\"))"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(ThisBuffer.GetData<TWriteBarrier<VValue>>(), ThisBuffer.GetData<TWriteBarrier<VValue>>() + ThisBuffer.Num())"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(ThisBuffer.GetData<int32>(), ThisBuffer.GetData<int32>() + ThisBuffer.Num())"
  },
  {
    "label": "BeginString()",
    "kind": "Method",
    "detail": "Function (break ; } case EArrayType::Char8 : { Visitor .)",
    "insertText": "BeginString(TEXT(\"Values\"), ScratchNumValues)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(ThisBuffer.GetData<uint8>(), ThisBuffer.GetData<uint8>() + ThisBuffer.Num())"
  },
  {
    "label": "EndString()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "EndString()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(ThisBuffer.GetData<uint32>(), ThisBuffer.GetData<uint32>() + ThisBuffer.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(ThisBuffer.GetArrayType() == EArrayType::VValue)"
  }
]