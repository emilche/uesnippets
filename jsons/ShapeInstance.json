[
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FShapeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapeInstance"
  },
  {
    "label": "FShapeInstanceProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapeInstanceProxy"
  },
  {
    "label": "FShapeInstanceExtended",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapeInstanceExtended"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / CollisionFilterData . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / PhysicalMaterials . h \" # include \" Chaos / Properties . h \" # include \" Chaos / Serializable . h \" # include \" Chaos / ShapeInstanceFwd . h \" namespace Chaos { class FImplicitObject ; class FShapeInstance ; class FShapeInstanceProxy ; namespace Private { class FShapeInstanceExtended ; } class FPerShapeData { protected : enum class EPerShapeDataType : uint32 { Proxy,Sim,SimExtended,} ; EPerShapeDataType)",
    "insertText": "GetType()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<TLambda>)",
    "insertText": "decltype(auto) DownCast(const TLambda& Lambda)"
  },
  {
    "label": "AsShapeInstanceExtended()",
    "kind": "Method",
    "detail": "Function (Private::FShapeInstanceExtended*)",
    "insertText": "AsShapeInstanceExtended()"
  },
  {
    "label": "AsShapeInstanceProxy()",
    "kind": "Method",
    "detail": "Function (public : FShapeInstanceProxy*)",
    "insertText": "AsShapeInstanceProxy()"
  },
  {
    "label": "AsShapeInstance()",
    "kind": "Method",
    "detail": "Function (FShapeInstance*)",
    "insertText": "AsShapeInstance()"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (FPerShapeData*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, FPerShapeData*)"
  },
  {
    "label": "FPerShapeData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPerShapeData()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "UpdateShapeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapeBounds(const FRigidTransform3& WorldTM)"
  },
  {
    "label": "UpdateShapeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapeBounds(WorldTM)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetUserData()"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserData(void* InUserData)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (const FCollisionFilterData&)",
    "insertText": "GetQueryData()"
  },
  {
    "label": "SetQueryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueryData(const FCollisionFilterData& InQueryData)"
  },
  {
    "label": "GetSimData()",
    "kind": "Method",
    "detail": "Function (const FCollisionFilterData&)",
    "insertText": "GetSimData()"
  },
  {
    "label": "SetSimData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimData(const FCollisionFilterData& InSimData)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectRef)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "GetWorldSpaceShapeBounds()",
    "kind": "Method",
    "detail": "Function (const TAABB<FReal,3>&)",
    "insertText": "GetWorldSpaceShapeBounds()"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldSpaceState(const FRigidTransform3& WorldTransform)"
  },
  {
    "label": "UpdateWorldSpaceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldSpaceState(WorldTransform)"
  },
  {
    "label": "GetLeafGeometry()",
    "kind": "Method",
    "detail": "Function (} const FImplicitObject*)",
    "insertText": "GetLeafGeometry()"
  },
  {
    "label": "GetLeafRelativeTransform()",
    "kind": "Method",
    "detail": "Function (FRigidTransform3)",
    "insertText": "GetLeafRelativeTransform()"
  },
  {
    "label": "GetLeafWorldTransform()",
    "kind": "Method",
    "detail": "Function (FRigidTransform3)",
    "insertText": "GetLeafWorldTransform(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "UpdateLeafWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLeafWorldTransform(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "NumMaterials()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumMaterials()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (const FMaterialHandle&)",
    "insertText": "GetMaterial(const int32 Index)"
  },
  {
    "label": "GetMaterials()",
    "kind": "Method",
    "detail": "Function (const TArray<FMaterialHandle>&)",
    "insertText": "GetMaterials()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(FMaterialHandle InMaterial)"
  },
  {
    "label": "SetMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterials(const TArray<FMaterialHandle>& InMaterials)"
  },
  {
    "label": "SetMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterials(TArray<FMaterialHandle>&& InMaterials)"
  },
  {
    "label": "GetMaterialMasks()",
    "kind": "Method",
    "detail": "Function (const TArray<FMaterialMaskHandle>&)",
    "insertText": "GetMaterialMasks()"
  },
  {
    "label": "SetMaterialMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialMasks(const TArray<FMaterialMaskHandle>& InMaterialMasks)"
  },
  {
    "label": "SetMaterialMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialMasks(TArray<FMaterialMaskHandle>&& InMaterialMasks)"
  },
  {
    "label": "GetMaterialMaskMaps()",
    "kind": "Method",
    "detail": "Function (const TArray<uint32>&)",
    "insertText": "GetMaterialMaskMaps()"
  },
  {
    "label": "SetMaterialMaskMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialMaskMaps(const TArray<uint32>& InMaterialMaskMaps)"
  },
  {
    "label": "SetMaterialMaskMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialMaskMaps(TArray<uint32>&& InMaterialMaskMaps)"
  },
  {
    "label": "GetMaterialMaskMapMaterials()",
    "kind": "Method",
    "detail": "Function (const TArray<FMaterialHandle>&)",
    "insertText": "GetMaterialMaskMapMaterials()"
  },
  {
    "label": "SetMaterialMaskMapMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialMaskMapMaterials(const TArray<FMaterialHandle>& InMaterialMaskMapMaterials)"
  },
  {
    "label": "SetMaterialMaskMapMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialMaskMapMaterials(TArray<FMaterialHandle>&& InMaterialMaskMapMaterials)"
  },
  {
    "label": "GetDirtyFlags()",
    "kind": "Method",
    "detail": "Function (const FShapeDirtyFlags)",
    "insertText": "GetDirtyFlags()"
  },
  {
    "label": "GetQueryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetQueryEnabled()"
  },
  {
    "label": "SetQueryEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueryEnabled(const bool bEnable)"
  },
  {
    "label": "GetSimEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSimEnabled()"
  },
  {
    "label": "SetSimEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimEnabled(const bool bEnable)"
  },
  {
    "label": "GetIsProbe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsProbe()"
  },
  {
    "label": "SetIsProbe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsProbe(const bool bIsProbe)"
  },
  {
    "label": "GetCollisionTraceType()",
    "kind": "Method",
    "detail": "Function (EChaosCollisionTraceFlag)",
    "insertText": "GetCollisionTraceType()"
  },
  {
    "label": "SetCollisionTraceType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionTraceType(const EChaosCollisionTraceFlag InTraceFlag)"
  },
  {
    "label": "GetCollisionData()",
    "kind": "Method",
    "detail": "Function (const FCollisionData&)",
    "insertText": "GetCollisionData()"
  },
  {
    "label": "SetCollisionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionData(const FCollisionData& Data)"
  },
  {
    "label": "GetMaterialData()",
    "kind": "Method",
    "detail": "Function (const FMaterialData&)",
    "insertText": "GetMaterialData()"
  },
  {
    "label": "SetMaterialData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialData(const FMaterialData& Data)"
  },
  {
    "label": "SyncRemoteData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteData(FDirtyPropertiesManager& Manager, int32 ShapeDataIdx, FShapeDirtyData& RemoteData)"
  },
  {
    "label": "SetProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProxy(IPhysicsProxyBase* InProxy)"
  },
  {
    "label": "GetShapeIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetShapeIndex()"
  },
  {
    "label": "ModifyShapeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyShapeIndex(int32 NewShapeIndex)"
  },
  {
    "label": "ModifySimData()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ModifySimData(const Lambda& LambdaFunc)"
  },
  {
    "label": "ModifyMaterials()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ModifyMaterials(const Lambda& LambdaFunc)"
  },
  {
    "label": "ModifyMaterialMasks()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ModifyMaterialMasks(const Lambda& LambdaFunc)"
  },
  {
    "label": "ModifyMaterialMaskMaps()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ModifyMaterialMaskMaps(const Lambda& LambdaFunc)"
  },
  {
    "label": "ModifyMaterialMaskMapMaterials()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ModifyMaterialMaskMapMaterials(const Lambda& LambdaFunc)"
  },
  {
    "label": "FPerShapeData()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FPerShapeData(const EPerShapeDataType InType, int32 InShapeIdx) : Type(InType) , bIsSingleMaterial(false) , ShapeIdx(InShapeIdx) , Geometry() , WorldSpaceShapeBounds(FAABB3(FVec3(0), FVec3(0)))"
  },
  {
    "label": "FPerShapeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerShapeData(const EPerShapeDataType InType, int32 InShapeIdx, const FImplicitObjectPtr& InGeometry) : Type(InType) , bIsSingleMaterial(false) , ShapeIdx(InShapeIdx) , Geometry(InGeometry) , WorldSpaceShapeBounds(FAABB3(FVec3(0), FVec3(0)))"
  },
  {
    "label": "FPerShapeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerShapeData(const EPerShapeDataType InType, const FPerShapeData& Other) : Type(InType) , bIsSingleMaterial(Other.bIsSingleMaterial) , ShapeIdx(Other.ShapeIdx) , Geometry(Other.Geometry) , WorldSpaceShapeBounds(Other.WorldSpaceShapeBounds)"
  },
  {
    "label": "SerializeMaterials()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeMaterials(FChaosArchive& Ar)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FShapeInstanceProxy>)",
    "insertText": "Make(int32 InShapeIdx, const FImplicitObjectPtr& InGeometry)"
  },
  {
    "label": "UpdateGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeometry(TUniquePtr<FShapeInstanceProxy>& InOutShapePtr, const FImplicitObjectPtr& InGeometry)"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (FShapeInstanceProxy*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, FShapeInstanceProxy*)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [InUserData](FCollisionData& Data) { Data.UserData = InUserData; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [InQueryData](FCollisionData& Data) { Data.QueryData = InQueryData; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [InSimData](FCollisionData& Data) { Data.SimData = InSimData; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [InMaterial](FMaterialData& Data) { Data.Materials.Reset(1); Data.Materials.Add(InMaterial); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&InMaterials](FMaterialData& Data) { Data.Materials = InMaterials; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&InMaterials](FMaterialData& Data) { Data.Materials = MoveTemp(InMaterials); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&InMaterialMasks](FMaterialData& Data) { Data.MaterialMasks = InMaterialMasks; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&InMaterialMaskMaps](FMaterialData& Data) { Data.MaterialMaskMaps = InMaterialMaskMaps; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&InMaterialMaskMapMaterials](FMaterialData& Data) { Data.MaterialMaskMapMaterials = InMaterialMaskMapMaterials; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [bEnable](FCollisionData& Data) { Data.bQueryCollision = bEnable; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [bEnable](FCollisionData& Data) { Data.bSimCollision = bEnable; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [bIsProbe](FCollisionData& Data) { Data.bIsProbe = bIsProbe; })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [InTraceFlag](FCollisionData& Data) { Data.CollisionTraceType = InTraceFlag; })"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Write(Data, true, DirtyFlags, Proxy, ShapeIdx)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (RemoteData .)",
    "insertText": "SetFlags(DirtyFlags)"
  },
  {
    "label": "SyncRemote()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "SyncRemote(Manager, ShapeDataIdx, RemoteData)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (DirtyFlags .)",
    "insertText": "Clear()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Proxy = InProxy ;)",
    "insertText": "if(Proxy)"
  },
  {
    "label": "AddDirtyProxyShape()",
    "kind": "Method",
    "detail": "Function (PhysicsSolverBase ->)",
    "insertText": "AddDirtyProxyShape(Proxy, ShapeIdx)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (CollisionData .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&LambdaFunc](FCollisionData& Data) { LambdaFunc(Data.SimData); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&LambdaFunc](FMaterialData& Data) { LambdaFunc(Data.Materials); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&LambdaFunc](FMaterialData& Data) { LambdaFunc(Data.MaterialMasks); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&LambdaFunc](FMaterialData& Data) { LambdaFunc(Data.MaterialMaskMaps); })"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, ShapeIdx, [&LambdaFunc](FMaterialData& Data) { LambdaFunc(Data.MaterialMaskMapMaterials); })"
  },
  {
    "label": "FShapeInstanceProxy()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FShapeInstanceProxy(int32 InShapeIdx) : FPerShapeData(EPerShapeDataType::Proxy, InShapeIdx) , Proxy(nullptr) , CollisionData() , Materials()"
  },
  {
    "label": "FShapeInstanceProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeInstanceProxy(int32 InShapeIdx, const FImplicitObjectPtr& InGeometry) : FPerShapeData(EPerShapeDataType::Proxy, InShapeIdx, InGeometry) , Proxy(nullptr) , CollisionData() , Materials()"
  },
  {
    "label": "UpdateGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeometry(TUniquePtr<FShapeInstance>& InOutShapePtr, const FImplicitObjectPtr& InGeometry)"
  },
  {
    "label": "SerializationFactory()",
    "kind": "Method",
    "detail": "Function (FShapeInstance*)",
    "insertText": "SerializationFactory(FChaosArchive& Ar, FShapeInstance*)"
  },
  {
    "label": "FShapeInstance()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShapeInstance()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(Material.MaterialData != nullptr) ? Material.MaterialData->Materials.Num()"
  },
  {
    "label": "NumMaterialsInternal()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "NumMaterialsInternal(const THandleArray<FChaosPhysicsMaterial>*const SimMaterials)"
  },
  {
    "label": "GetMaterialInternal()",
    "kind": "Method",
    "detail": "Function (} } const FMaterialHandle&)",
    "insertText": "GetMaterialInternal(const int32 Index, const THandleArray<FChaosPhysicsMaterial>*const SimMaterials)"
  },
  {
    "label": "SetMaterialImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialImpl(InMaterial)"
  },
  {
    "label": "GetMaterialDataImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaterialDataImpl()"
  },
  {
    "label": "SetMaterialDataImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialDataImpl(Data)"
  },
  {
    "label": "LambdaFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LambdaFunc(CollisionData.SimData)"
  },
  {
    "label": "LambdaFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LambdaFunc(GetMaterialDataImpl().Materials)"
  },
  {
    "label": "LambdaFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LambdaFunc(GetMaterialDataImpl().MaterialMasks)"
  },
  {
    "label": "LambdaFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LambdaFunc(GetMaterialDataImpl().MaterialMaskMaps)"
  },
  {
    "label": "LambdaFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LambdaFunc(GetMaterialDataImpl().MaterialMaskMapMaterials)"
  },
  {
    "label": "FShapeInstance()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FShapeInstance(int32 InShapeIdx) : FPerShapeData(EPerShapeDataType::Sim, InShapeIdx) , CollisionData()"
  },
  {
    "label": "FShapeInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeInstance(int32 InShapeIdx, const FImplicitObjectPtr& InGeometry) : FPerShapeData(EPerShapeDataType::Sim, InShapeIdx, InGeometry) , CollisionData()"
  },
  {
    "label": "FShapeInstance()",
    "kind": "Method",
    "detail": "Function (bIsSingleMaterial = true ; })",
    "insertText": "FShapeInstance(FShapeInstance&& Other) : FPerShapeData(EPerShapeDataType::Sim, Other) , CollisionData(MoveTemp(Other.CollisionData))"
  },
  {
    "label": "FShapeInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeInstance(const EPerShapeDataType InType, int32 InShapeIdx, FImplicitObjectPtr InGeometry) : FPerShapeData(InType, InShapeIdx, InGeometry) , CollisionData()"
  },
  {
    "label": "FShapeInstance()",
    "kind": "Method",
    "detail": "Function (bIsSingleMaterial = true ; })",
    "insertText": "FShapeInstance(const EPerShapeDataType InType, FShapeInstance&& Other) : FPerShapeData(InType, Other) , CollisionData(MoveTemp(Other.CollisionData))"
  },
  {
    "label": "FMaterialData()",
    "kind": "Method",
    "detail": "Function (const FMaterialHandle ExistingMaterial = Material . MaterialHandle ; Material . MaterialData = new)",
    "insertText": "FMaterialData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsSingleMaterial = false ;)",
    "insertText": "if(ExistingMaterial.IsValid())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Material . MaterialData -> Materials .)",
    "insertText": "Add(ExistingMaterial)"
  },
  {
    "label": "SetMaterialImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaterialImpl(const FMaterialHandle& InMaterial)"
  },
  {
    "label": "SetMaterialDataImpl()",
    "kind": "Method",
    "detail": "Function (delete Material . MaterialData ; } bIsSingleMaterial = true ; } Material . MaterialHandle = InMaterial ; } void)",
    "insertText": "SetMaterialDataImpl(const FMaterialData& Data)"
  },
  {
    "label": "MaterialHandle()",
    "kind": "Method",
    "detail": "Function (const FMaterialHandle)",
    "insertText": "MaterialHandle(Data.Materials.Num() > 0) ? Data.Materials[0] : FMaterialHandle()"
  },
  {
    "label": "SetMaterialImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialImpl(MaterialHandle)"
  },
  {
    "label": "FMaterialUnion()",
    "kind": "Method",
    "detail": "Function (union FMaterialUnion {)",
    "insertText": "FMaterialUnion() : MaterialHandle()"
  },
  {
    "label": "FMaterialUnion()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialUnion()"
  },
  {
    "label": "GetWorldTransform()",
    "kind": "Method",
    "detail": "Function (} FMaterialHandle MaterialHandle ; FMaterialData* MaterialData ; } ; FCollisionData CollisionData ; FMaterialUnion Material ; } ; namespace Private { class FShapeInstanceExtended : public FShapeInstance { public : class FShapeInstance ; FRigidTransform3)",
    "insertText": "GetWorldTransform()"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorldTransform(const FRigidTransform3& LeafWorldTransform)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (WorldPosition = LeafWorldTransform .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (WorldRotation = LeafWorldTransform .)",
    "insertText": "GetRotation()"
  },
  {
    "label": "FShapeInstanceExtended()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FShapeInstanceExtended(int32 InShapeIdx, FImplicitObjectPtr InGeometry) : FShapeInstance(EPerShapeDataType::SimExtended, InShapeIdx, InGeometry)"
  },
  {
    "label": "FShapeInstanceExtended()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeInstanceExtended(FShapeInstance&& PerShapeData) : FShapeInstance(EPerShapeDataType::SimExtended, MoveTemp(PerShapeData))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<TLambda>)",
    "insertText": "decltype(auto) FPerShapeData::DownCast(const TLambda& Lambda)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Lambda(*AsShapeInstance())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, FPerShapeData& Shape)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Shape .)",
    "insertText": "Serialize(Ar)"
  }
]