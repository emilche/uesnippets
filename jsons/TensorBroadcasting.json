[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "is_input_scalar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_input_scalar"
  },
  {
    "label": "TensorBroadcastingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorBroadcastingOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "BlockBroadcastingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockBroadcastingParams"
  },
  {
    "label": "BlockBroadcastingIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockBroadcastingIteratorState"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_BROADCASTING_H # define EIGEN_CXX11_TENSOR_TENSOR_BROADCASTING_H namespace Eigen { namespace internal { template<Broadcast,XprType> struct traits<TensorBroadcastingOp<Broadcast,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<Broadcast,XprType> struct eval<TensorBroadcastingOp<Broadcast,XprType>,Eigen::Dense> { typedef const TensorBroadcastingOp<Broadcast,XprType> EIGEN_DEVICE_REF type ; } ; template<Broadcast,XprType> struct nested<TensorBroadcastingOp<Broadcast,XprType>,1,eval<TensorBroadcastingOp<Broadcast,XprType>>::type> { typedef TensorBroadcastingOp<Broadcast,XprType> type ; } ; template<Dims> struct is_input_scalar { const bool value = false ; } ; template<> struct is_input_scalar<Sizes<>> { const bool value = true ; } ; # ifndef EIGEN_EMULATE_CXX11_META_H template<std::ptrdiff_t . . . Indices> struct is_input_scalar<Sizes<Indices . . .>> { const bool)",
    "insertText": "value(Sizes<Indices...>::total_size == 1)"
  },
  {
    "label": "TensorBroadcastingOp()",
    "kind": "Method",
    "detail": "Function (} ; # endif } template<Broadcast,XprType> class TensorBroadcastingOp : public TensorBase<TensorBroadcastingOp<Broadcast,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorBroadcastingOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorBroadcastingOp>::type Nested ; typedef Eigen::internal::traits<TensorBroadcastingOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorBroadcastingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorBroadcastingOp(const XprType& expr, const Broadcast& broadcast) : m_xpr(expr), m_broadcast(broadcast)"
  },
  {
    "label": "broadcast()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Broadcast&)",
    "insertText": "broadcast()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const InputDimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (isCopy = true ;)",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(input_dims[i] > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = input_dims [ i ]* m_broadcast [ i ] ;)",
    "insertText": "if(m_broadcast[i] != 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (isCopy = false ; } })",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ 0 ] = 1 ; m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ i ] = m_inputStrides [ i - 1 ]* input_dims [ i - 1 ] ; m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; } } else { m_inputStrides [ NumDims - 1 ] = 1 ; m_outputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims-2; i >= 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ i ] = m_inputStrides [ i + 1 ]* input_dims [ i + 1 ] ; m_outputStrides [ i ] = m_outputStrides [ i + 1 ]* m_dimensions [ i + 1 ] ; } })",
    "insertText": "if(input_dims[0] == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (oneByN = false ; break ; } } } else)",
    "insertText": "if(input_dims[NumDims-1] == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nByOne = true ;)",
    "insertText": "for(int i = 0; i < NumDims-1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nByOne = false ; break ; } } })",
    "insertText": "if(!oneByN && !nByOne)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nByOne = true ; oneByN = true ;)",
    "insertText": "for(int i = 1; i < NumDims-1; ++i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "coeffColMajor()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "coeffColMajor(index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(isCopy)"
  },
  {
    "label": "coeffRowMajor()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "coeffRowMajor(index)"
  },
  {
    "label": "indexColMajor()",
    "kind": "Method",
    "detail": "Function (} } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "indexColMajor(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = 0 ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i > 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStrides [ i ] ;)",
    "insertText": "if(internal::index_statically_eq<Broadcast>(i, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(idx < m_impl.dimensions()[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (inputIndex + = idx* m_inputStrides [ i ] ; } else {)",
    "insertText": "if(internal::index_statically_eq<InputDimensions>(i, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(idx % m_impl.dimensions()[i] == 0)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "inputIndex(idx % m_impl.dimensions()[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } index - = idx* m_outputStrides [ i ] ; })",
    "insertText": "if(internal::index_statically_eq<Broadcast>(0, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < m_impl.dimensions()[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (inputIndex + = index ; } else {)",
    "insertText": "if(internal::index_statically_eq<InputDimensions>(0, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index % m_impl.dimensions()[0] == 0)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "inputIndex(index % m_impl.dimensions()[0])"
  },
  {
    "label": "coeffColMajor()",
    "kind": "Method",
    "detail": "Function (} } return inputIndex ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeffColMajor(Index index)"
  },
  {
    "label": "indexRowMajor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "indexRowMajor(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = 0 ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } index - = idx* m_outputStrides [ i ] ; })",
    "insertText": "if(internal::index_statically_eq<Broadcast>(NumDims - 1, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < m_impl.dimensions()[NumDims - 1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (inputIndex + = index ; } else {)",
    "insertText": "if(internal::index_statically_eq<InputDimensions>(NumDims - 1, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index % m_impl.dimensions()[NumDims - 1] == 0)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "inputIndex(index % m_impl.dimensions()[NumDims - 1])"
  },
  {
    "label": "coeffRowMajor()",
    "kind": "Method",
    "detail": "Function (} } return inputIndex ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeffRowMajor(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_GPU_COMPILE_PHASE return m_impl . template packet<)",
    "insertText": "Unaligned(index)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (# else return m_impl . template packet<)",
    "insertText": "LoadMode(index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } else)",
    "insertText": "if(oneByN && !nByOne)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!oneByN && nByOne)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(oneByN && nByOne)"
  },
  {
    "label": "packetOneByNByOne()",
    "kind": "Method",
    "detail": "Function (} } } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetOneByNByOne(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (startDim = NumDims - 1 ; endDim = 1 ; } else { startDim = 0 ; endDim = NumDims - 2 ; } batchedIndex = index % m_outputStrides [ startDim ] ; inputIndex = batchedIndex / m_outputStrides [ endDim ] ; outputOffset = batchedIndex % m_outputStrides [ endDim ] ;)",
    "insertText": "if(outputOffset + PacketSize <= m_outputStrides[endDim])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ 0 ] = m_impl .)",
    "insertText": "coeff(inputIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0, cur = 0; i < PacketSize; ++i, ++cur)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (} else { + + inputIndex ;)",
    "insertText": "inputIndex(inputIndex == m_inputStrides[startDim] ? 0 : inputIndex)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (outputOffset = 0 ; cur = 0 ; } } return internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "packetOneByN()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetOneByN(Index index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dim = NumDims - 1 ; } else { dim = 0 ; } inputIndex = index % m_inputStrides [ dim ] ;)",
    "insertText": "if(inputIndex + PacketSize <= m_inputStrides[dim])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (inputIndex = 0 ; } values [ i ] = m_impl .)",
    "insertText": "coeff(inputIndex++)"
  },
  {
    "label": "packetNByOne()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetNByOne(Index index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dim = 1 ; } else { dim = NumDims - 2 ; } inputIndex = index / m_outputStrides [ dim ] ; outputOffset = index % m_outputStrides [ dim ] ;)",
    "insertText": "if(outputOffset + PacketSize <= m_outputStrides[dim])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { values [ i ] = m_impl .)",
    "insertText": "coeff(++inputIndex)"
  },
  {
    "label": "packetColMajor()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetColMajor(Index index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } inputIndex + = innermostLoc ;)",
    "insertText": "if(innermostLoc + PacketSize <= m_impl.dimensions()[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 1; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] = m_impl .)",
    "insertText": "coeff(inputIndex+i)"
  },
  {
    "label": "coeffColMajor()",
    "kind": "Method",
    "detail": "Function (} else { values [ i ] =)",
    "insertText": "coeffColMajor(originalIndex+i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } index - = idx* m_outputStrides [ i ] ; } Index innermostLoc ;)",
    "insertText": "if(internal::index_statically_eq<Broadcast>(NumDims-1, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < m_impl.dimensions()[NumDims-1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (innermostLoc = index ; } else {)",
    "insertText": "if(internal::index_statically_eq<InputDimensions>(NumDims-1, 1))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index % m_impl.dimensions()[NumDims-1] == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } inputIndex + = innermostLoc ;)",
    "insertText": "if(innermostLoc + PacketSize <= m_impl.dimensions()[NumDims-1])"
  },
  {
    "label": "coeffRowMajor()",
    "kind": "Method",
    "detail": "Function (} else { values [ i ] =)",
    "insertText": "coeffRowMajor(originalIndex+i)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (compute_cost + = TensorOpCost::DivCost<)",
    "insertText": "Index()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (compute_cost + = TensorOpCost::MulCost<)",
    "insertText": "Index() + TensorOpCost::AddCost<Index>()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!internal::index_statically_eq<InputDimensions>(i, 1))"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (compute_cost + = TensorOpCost::MulCost<)",
    "insertText": "Index() + TensorOpCost::ModCost<Index>() + TensorOpCost::AddCost<Index>()"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} } return m_impl .)",
    "insertText": "costPerCoeff(vectorized) + TensorOpCost(0, 0, compute_cost, vectorized, PacketSize)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "firstLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "firstLevelCacheSize()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "blockBroadcastingParams()",
    "kind": "Method",
    "detail": "Function (BlockBroadcastingParams params =)",
    "insertText": "blockBroadcastingParams(desc)"
  },
  {
    "label": "prepareStorage()",
    "kind": "Method",
    "detail": "Function (} const TensorBlock::Storage block_storage =)",
    "insertText": "prepareStorage(desc, scratch)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (ScalarNoConst* materialized_output = block_storage .)",
    "insertText": "data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t materialized_input_size = 0 ; ScalarNoConst* materialized_input = NULL ; array<BlockBroadcastingIteratorState,NumDims> it ; int idx = 0 ;)",
    "insertText": "for(int i = params.inner_dim_count + 1; i < NumDims; ++i)"
  },
  {
    "label": "output_stride()",
    "kind": "Method",
    "detail": "Function (const Index dim = IsColMajor ? i : NumDims - 1 - i ; it [ idx ] . size = params . output_dims [ dim ] ; it [ idx ] . count = 0 ; it [ idx ] . output_stride = m_outputStrides [ dim ] ; it [ idx ] . output_span = it [ idx ] .)",
    "insertText": "output_stride(it[idx].size - 1)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (idx + + ; } Index output_offset = 0 ; const Index output_size = NumDims = = 0 ? 1 : params . output_dims .)",
    "insertText": "TotalSize()"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (ScalarNoConst* bcast_output = materialized_output + num_output_coeffs ; Index bcast_offset = desc .)",
    "insertText": "offset()"
  },
  {
    "label": "BroadcastBlockAlongBcastDim()",
    "kind": "Method",
    "detail": "Function (num_output_coeffs + =)",
    "insertText": "BroadcastBlockAlongBcastDim(params, bcast_offset, scratch, bcast_output, &materialized_input, &materialized_input_size)"
  },
  {
    "label": "AsTensorMaterializedBlock()",
    "kind": "Method",
    "detail": "Function (output_offset + = it [ j ] . output_stride ; break ; } it [ j ] . count = 0 ; output_offset - = it [ j ] . output_span ; } } return block_storage .)",
    "insertText": "AsTensorMaterializedBlock()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} # endif private : const bool IsColMajor = static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "blockBroadcastingParams()",
    "kind": "Method",
    "detail": "Function (struct BlockBroadcastingParams { Dimensions input_dims ; Dimensions output_dims ; Dimensions output_strides ; int inner_dim_count ; int bcast_dim ; Index bcast_dim_size ; Index inner_dim_size ; Dimensions input_block_sizes ; Dimensions input_block_strides ; BroadcastDimensions bcast_block_sizes ; BroadcastDimensions bcast_block_strides ; BroadcastDimensions bcast_input_strides ; } ; struct BlockBroadcastingIteratorState { Index size ; Index count ; Index output_stride ; Index output_span ; } ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE BlockBroadcastingParams)",
    "insertText": "blockBroadcastingParams(TensorBlockDesc& desc)"
  },
  {
    "label": "Dimensions()",
    "kind": "Method",
    "detail": "Function (BlockBroadcastingParams params ; params . input_dims =)",
    "insertText": "Dimensions(m_impl.dimensions())"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (params . output_strides = internal::strides<)",
    "insertText": "Layout(params.output_dims)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ;)",
    "insertText": "if(params.output_dims[dim] == m_dimensions[dim])"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (params . inner_dim_size* = params . output_dims [ dim ] ; + + params . inner_dim_count ; continue ; })",
    "insertText": "eigen_assert(params.output_dims[dim] < m_dimensions[dim])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (params . bcast_dim = dim ; params . bcast_dim_size = params . output_dims [ dim ] ; break ; })",
    "insertText": "for(int i = 0; i < params.inner_dim_count; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ; params . input_block_sizes [ dim ] = params . input_dims [ dim ] ; })",
    "insertText": "for(int i = params.inner_dim_count; i < NumDims; ++i)"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ; params . input_block_sizes [ dim ] = 1 ; } params . input_block_strides = internal::strides<)",
    "insertText": "Layout(params.input_block_sizes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ; const int copy_dim = IsColMajor ? 2* i : 2* NumDims - 2* i - 1 ; const int broadcast_dim = IsColMajor ? copy_dim + 1 : copy_dim - 1 ; params . bcast_block_sizes [ copy_dim ] = params . input_dims [ dim ] ; params . bcast_block_sizes [ broadcast_dim ] = m_broadcast [ dim ] ; params . bcast_block_strides [ copy_dim ] = params . output_strides [ dim ] ; params . bcast_block_strides [ broadcast_dim ] = params . output_strides [ dim ]* params . input_dims [ dim ] ; params . bcast_input_strides [ copy_dim ] = params . input_block_strides [ dim ] ; params . bcast_input_strides [ broadcast_dim ] = 0 ; })",
    "insertText": "for(int i = 2 * params.inner_dim_count; i < 2 * NumDims; ++i)"
  },
  {
    "label": "emptyBlock()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : 2* NumDims - i - 1 ; params . bcast_block_sizes [ dim ] = 1 ; params . bcast_block_strides [ dim ] = 0 ; params . bcast_input_strides [ dim ] = 0 ; } return params ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "emptyBlock()"
  },
  {
    "label": "BroadcastBlockAlongBcastDim()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "BroadcastBlockAlongBcastDim(BlockBroadcastingParams params, Index bcast_offset, TensorBlockScratch& scratch, ScalarNoConst* materialized_output, ScalarNoConst** materialized_input, size_t* materialized_input_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(params.input_dims[params.bcast_dim] == 1)"
  },
  {
    "label": "BroadcastBlock()",
    "kind": "Method",
    "detail": "Function (const int broadcast_bcast_dim = IsColMajor ? 2* params . inner_dim_count + 1 : 2* NumDims - 2* params . inner_dim_count - 2 ; params . bcast_block_sizes [ broadcast_bcast_dim ] = params . bcast_dim_size ; params . bcast_input_strides [ broadcast_bcast_dim ] = 0 ; params . bcast_block_strides [ broadcast_bcast_dim ] = params . output_strides [ params . bcast_dim ] ; return)",
    "insertText": "BroadcastBlock(params.input_block_sizes, params.input_block_strides, params.bcast_block_sizes, params.bcast_block_strides, params.bcast_input_strides, bcast_offset, 0, scratch, materialized_output, materialized_input, materialized_input_size)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} else { Index num_output_coeffs = 0 ; const Index bcast_dim_left_index = bcast_offset / m_outputStrides [ params . bcast_dim ] ; const Index input_bcast_dim_size = params . input_dims [ params . bcast_dim ] ; const Index first_multiple = divup<)",
    "insertText": "Index(bcast_dim_left_index, input_bcast_dim_size)"
  },
  {
    "label": "last_multiple()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "last_multiple(bcast_dim_left_index + params.bcast_dim_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int copy_bcast_dim = IsColMajor ? 2* params . inner_dim_count : 2* NumDims - 2* params . inner_dim_count - 1 ; const int broadcast_bcast_dim = IsColMajor ? 2* params . inner_dim_count + 1 : 2* NumDims - 2* params . inner_dim_count - 2 ;)",
    "insertText": "if(first_multiple > bcast_dim_left_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(first_multiple < last_multiple)"
  },
  {
    "label": "broadcast_bcast_dim()",
    "kind": "Method",
    "detail": "Function (params . input_block_sizes [ params . bcast_dim ] = input_bcast_dim_size ; params . bcast_block_sizes [ copy_bcast_dim ] = input_bcast_dim_size ; params . bcast_input_strides [ copy_bcast_dim ] = params . input_block_strides [ params . bcast_dim ] ; params . bcast_block_strides [ copy_bcast_dim ] = params . output_strides [ params . bcast_dim ] ; params . bcast_block_sizes [)",
    "insertText": "broadcast_bcast_dim(last_multiple - first_multiple)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (params . bcast_input_strides [ broadcast_bcast_dim ] = 0 ; params . bcast_block_strides [ broadcast_bcast_dim ] = params . output_strides [ params . bcast_dim ]* params . input_dims [ params . bcast_dim ] ; const Index)",
    "insertText": "offset(first_multiple - bcast_dim_left_index)"
  },
  {
    "label": "BroadcastBlock()",
    "kind": "Method",
    "detail": "Function (num_output_coeffs + =)",
    "insertText": "BroadcastBlock(params.input_block_sizes, params.input_block_strides, params.bcast_block_sizes, params.bcast_block_strides, params.bcast_input_strides, bcast_offset, offset, scratch, materialized_output, materialized_input, materialized_input_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(last_multiple < bcast_dim_left_index + params.bcast_dim_size)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (const Index tail_size = bcast_dim_left_index + params . bcast_dim_size - last_multiple ; params . input_block_sizes [ params . bcast_dim ] = tail_size ; params . bcast_block_sizes [ copy_bcast_dim ] = tail_size ; params . bcast_input_strides [ copy_bcast_dim ] = params . input_block_strides [ params . bcast_dim ] ; params . bcast_block_strides [ copy_bcast_dim ] = params . output_strides [ params . bcast_dim ] ; params . bcast_block_sizes [ broadcast_bcast_dim ] = 1 ; params . bcast_input_strides [ broadcast_bcast_dim ] = 0 ; params . bcast_block_strides [ broadcast_bcast_dim ] = params . output_strides [ params . bcast_dim ]* params . input_dims [ params . bcast_dim ] ; const Index)",
    "insertText": "offset(last_multiple - bcast_dim_left_index)"
  },
  {
    "label": "BroadcastBlock()",
    "kind": "Method",
    "detail": "Function (} return num_output_coeffs ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "BroadcastBlock(const Dimensions& input_block_sizes, const Dimensions& input_block_strides, const BroadcastDimensions& bcast_block_sizes, const BroadcastDimensions& bcast_block_strides, const BroadcastDimensions& bcast_input_strides, Index bcast_offset, Index offset, TensorBlockScratch& scratch, ScalarNoConst* materialized_output, ScalarNoConst** materialized_input, size_t* materialized_input_size)"
  },
  {
    "label": "input_desc()",
    "kind": "Method",
    "detail": "Function (const Index input_offset = bcast_offset + offset ; TensorBlockDesc)",
    "insertText": "input_desc(IsColMajor ? indexColMajor(input_offset) : indexRowMajor(input_offset), input_block_sizes)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (ArgTensorBlock input_block = m_impl .)",
    "insertText": "block(input_desc, scratch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ScalarNoConst* input_buffer = NULL ;)",
    "insertText": "if(input_block.data() != NULL)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (* materialized_input_size = input_total_size ; void* mem = scratch .)",
    "insertText": "allocate(*materialized_input_size * sizeof(Scalar))"
  },
  {
    "label": "ScalarNoConst()",
    "kind": "Method",
    "detail": "Function (* materialized_input = static_cast<)",
    "insertText": "ScalarNoConst(mem)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} typedef internal::TensorBlockAssignment<ScalarNoConst,NumDims,ArgTensorBlock::XprType,Index> TensorBlockAssignment ;)",
    "insertText": "Run(TensorBlockAssignment::target(input_block_sizes, input_block_strides, *materialized_input), input_block.expr())"
  },
  {
    "label": "src()",
    "kind": "Method",
    "detail": "Function (input_buffer =* materialized_input ; } typedef internal::TensorBlockIO<ScalarNoConst,Index,2* NumDims,Layout> TensorBlockIO ; TensorBlockIO::Src)",
    "insertText": "src(bcast_input_strides, input_buffer)"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (TensorBlockIO::Dst)",
    "insertText": "dst(bcast_block_sizes, bcast_block_strides, materialized_output + offset)"
  }
]