[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "SCompositeFontEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCompositeFontEditor"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SFontEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFontEditorViewport"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "UTextureExporterTGA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureExporterTGA"
  },
  {
    "label": "UTextureFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureFactory"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFontEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFontEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "FEditPropertyChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditPropertyChain"
  },
  {
    "label": "FPropertyAndParent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAndParent"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "FFontEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" EditorUndoClient . h \" # include \" Framework / Docking / TabManager . h \" # include \" HAL / Platform . h \" # include \" IFontEditor . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / NotifyHook . h \" # include \" Misc / Optional . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Toolkits / IToolkit . h \" # include \" UObject / GCObject . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" class FReferenceCollector ; class SCompositeFontEditor ; class SDockTab ; class SEditableTextBox ; class SFontEditorViewport ; class SVerticalBox ; class UFont ; class UTextureExporterTGA ; class UTextureFactory ; struct FPropertyChangedEvent ; enum class EFontCacheType : uint8 ; class FFontEditor : public IFontEditor,public FGCObject,public FNotifyHook,public FEditorUndoClient { public :)",
    "insertText": "FFontEditor()"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "InitFontEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFontEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, UObject* ObjectToEdit)"
  },
  {
    "label": "GetFont()",
    "kind": "Method",
    "detail": "Function (UFont*)",
    "insertText": "GetFont()"
  },
  {
    "label": "SetSelectedPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPage(int32 PageIdx)"
  },
  {
    "label": "RefreshPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPreview()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "ShouldPromptForNewFilesOnReload()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldPromptForNewFilesOnReload(const UObject& object)"
  },
  {
    "label": "OnPreviewTextChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPreviewTextChanged(const FText& Text)"
  },
  {
    "label": "GetDrawFontMetricsState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetDrawFontMetricsState()"
  },
  {
    "label": "OnDrawFontMetricsStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawFontMetricsStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "GetDrawFontScale()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetDrawFontScale()"
  },
  {
    "label": "OnDrawFontScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawFontScaleChanged(float InNewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, class FEditPropertyChain* PropertyThatChanged)"
  },
  {
    "label": "UpdateLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayout()"
  },
  {
    "label": "GetTabSpawnerMenuType()",
    "kind": "Method",
    "detail": "Function (ETabSpawnerMenuType::Type)",
    "insertText": "GetTabSpawnerMenuType(FName InTabName)"
  },
  {
    "label": "CreateInternalWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInternalWidgets()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdate()"
  },
  {
    "label": "OnUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnUpdateEnabled()"
  },
  {
    "label": "OnUpdateAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateAll()"
  },
  {
    "label": "OnUpdateAllEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnUpdateAllEnabled()"
  },
  {
    "label": "OnExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExport()"
  },
  {
    "label": "OnExportEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnExportEnabled()"
  },
  {
    "label": "OnExportAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExportAll()"
  },
  {
    "label": "OnExportAllEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnExportAllEnabled()"
  },
  {
    "label": "OnBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBackgroundColor()"
  },
  {
    "label": "OnBackgroundColorEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnBackgroundColorEnabled()"
  },
  {
    "label": "OnForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnForegroundColor()"
  },
  {
    "label": "OnForegroundColorEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnForegroundColorEnabled()"
  },
  {
    "label": "OnPostReimport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostReimport(UObject* InObject, bool bSuccess)"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* InObject, struct FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "ImportPage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportPage(int32 PageNum, const TCHAR* FileName)"
  },
  {
    "label": "SpawnTab_TexturePagesViewport()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_TexturePagesViewport(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_CompositeFontEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_CompositeFontEditor(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_Preview()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Preview(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_Properties()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Properties(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_PageProperties()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_PageProperties(const FSpawnTabArgs& Args)"
  },
  {
    "label": "AddToSpawnedToolPanels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSpawnedToolPanels(const FName& TabIdentifier, const TSharedRef<SDockTab>& SpawnedTab)"
  },
  {
    "label": "OnObjectReimported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectReimported(UObject* InObject)"
  },
  {
    "label": "RecreateFontObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateFontObject(const EFontCacheType NewCacheType)"
  },
  {
    "label": "GetIsPropertyVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsPropertyVisible(const struct FPropertyAndParent& PropertyAndParent)"
  }
]