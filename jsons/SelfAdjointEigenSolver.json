[
  {
    "label": "GeneralizedSelfAdjointEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeneralizedSelfAdjointEigenSolver"
  },
  {
    "label": "direct_selfadjoint_eigenvalues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "direct_selfadjoint_eigenvalues"
  },
  {
    "label": "SelfAdjointEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelfAdjointEigenSolver"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "computeFromTridiagonal_impl()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINTEIGENSOLVER_H # define EIGEN_SELFADJOINTEIGENSOLVER_H # include \" . / Tridiagonalization . h \" namespace Eigen { template<_MatrixType> class GeneralizedSelfAdjointEigenSolver ; namespace internal { template<SolverType,int Size,bool IsComplex> struct direct_selfadjoint_eigenvalues ; template<MatrixType,DiagType,SubDiagType> EIGEN_DEVICE_FUNC ComputationInfo)",
    "insertText": "computeFromTridiagonal_impl(DiagType& diag, SubDiagType& subdiag, const Index maxIterations, bool computeEigenvectors, MatrixType& eivec)"
  },
  {
    "label": "SelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (} template<_MatrixType> class SelfAdjointEigenSolver { public : typedef _MatrixType MatrixType ; enum { Size = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef Eigen::Index Index ; typedef Matrix<Scalar,Size,Size,ColMajor,MaxColsAtCompileTime,MaxColsAtCompileTime> EigenvectorsType ; typedef NumTraits<Scalar>::Real RealScalar ; struct internal::direct_selfadjoint_eigenvalues<SelfAdjointEigenSolver,Size,NumTraits<Scalar>::IsComplex> ; typedef internal::plain_col_type<MatrixType,RealScalar>::type RealVectorType ; typedef Tridiagonalization<MatrixType> TridiagonalizationType ; typedef TridiagonalizationType::SubDiagonalType SubDiagonalType ; EIGEN_DEVICE_FUNC)",
    "insertText": "SelfAdjointEigenSolver() : m_eivec(), m_eivalues(), m_subdiag(), m_hcoeffs(), m_info(InvalidInput), m_isInitialized(false), m_eigenvectorsOk(false)"
  },
  {
    "label": "SelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "SelfAdjointEigenSolver(Index size) : m_eivec(size, size), m_eivalues(size), m_subdiag(size > 1 ? size - 1 : 1), m_hcoeffs(size > 1 ? size - 1 : 1), m_isInitialized(false), m_eigenvectorsOk(false)"
  },
  {
    "label": "SelfAdjointEigenSolver()",
    "kind": "Method",
    "detail": "Function (} template<InputType> EIGEN_DEVICE_FUNC)",
    "insertText": "SelfAdjointEigenSolver(const EigenBase<InputType>& matrix, int options = ComputeEigenvectors) : m_eivec(matrix.rows(), matrix.cols()), m_eivalues(matrix.cols()), m_subdiag(matrix.rows() > 1 ? matrix.rows() - 1 : 1), m_hcoeffs(matrix.cols() > 1 ? matrix.cols() - 1 : 1), m_isInitialized(false), m_eigenvectorsOk(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived(), options)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<InputType> EIGEN_DEVICE_FUNC SelfAdjointEigenSolver&)",
    "insertText": "compute(const EigenBase<InputType>& matrix, int options = ComputeEigenvectors)"
  },
  {
    "label": "computeDirect()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC SelfAdjointEigenSolver&)",
    "insertText": "computeDirect(const MatrixType& matrix, int options = ComputeEigenvectors)"
  },
  {
    "label": "computeFromTridiagonal()",
    "kind": "Method",
    "detail": "Function (SelfAdjointEigenSolver&)",
    "insertText": "computeFromTridiagonal(const RealVectorType& diag, const SubDiagonalType& subdiag , int options=ComputeEigenvectors)"
  },
  {
    "label": "eigenvectors()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const EigenvectorsType&)",
    "insertText": "eigenvectors()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"SelfAdjointEigenSolver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\")"
  },
  {
    "label": "operatorInverseSqrt()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC MatrixType)",
    "insertText": "operatorInverseSqrt()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "tridiagonal_qr_step()",
    "kind": "Method",
    "detail": "Function (} EigenvectorsType m_eivec ; RealVectorType m_eivalues ; TridiagonalizationType::SubDiagonalType m_subdiag ; TridiagonalizationType::CoeffVectorType m_hcoeffs ; ComputationInfo m_info ; bool m_isInitialized ; bool m_eigenvectorsOk ; } ; namespace internal { template<int StorageOrder,RealScalar,Scalar,Index> EIGEN_DEVICE_FUNC void)",
    "insertText": "tridiagonal_qr_step(RealScalar* diag, RealScalar* subdiag, Index start, Index end, Scalar* matrixQ, Index n)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> template<InputType> EIGEN_DEVICE_FUNC SelfAdjointEigenSolver<MatrixType>& SelfAdjointEigenSolver<MatrixType)",
    "insertText": "compute(const EigenBase<InputType>& a_matrix, int options)"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (const InputType&)",
    "insertText": "matrix(a_matrix.derived())"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(abs)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(matrix.cols() == matrix.rows())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((options&~(EigVecMask|GenEigMask))==0 && (options&EigVecMask)!=EigVecMask && \"invalid option parameter\")"
  },
  {
    "label": "computeEigenvectors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "computeEigenvectors(options&ComputeEigenvectors)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index n = matrix .)",
    "insertText": "cols()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_eivalues .)",
    "insertText": "resize(n,1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_eivec = matrix ; m_eivalues .)",
    "insertText": "coeffRef(0,0) = numext::real(m_eivec.coeff(0,0))"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; m_isInitialized = true ; m_eigenvectorsOk = computeEigenvectors ; return* this ; } RealVectorType& diag = m_eivalues ; EigenvectorsType& mat = m_eivec ; mat = matrix . template triangularView<)",
    "insertText": "Lower()"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (RealScalar scale = mat .)",
    "insertText": "cwiseAbs().maxCoeff()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_subdiag .)",
    "insertText": "resize(n-1)"
  },
  {
    "label": "tridiagonalization_inplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tridiagonalization_inplace(mat, diag, m_subdiag, m_hcoeffs, computeEigenvectors)"
  },
  {
    "label": "computeFromTridiagonal_impl()",
    "kind": "Method",
    "detail": "Function (m_info =)",
    "insertText": "computeFromTridiagonal_impl(diag, m_subdiag, m_maxIterations, computeEigenvectors, m_eivec)"
  },
  {
    "label": "computeFromTridiagonal()",
    "kind": "Method",
    "detail": "Function (m_eivalues* = scale ; m_isInitialized = true ; m_eigenvectorsOk = computeEigenvectors ; return* this ; } template<MatrixType> SelfAdjointEigenSolver<MatrixType>& SelfAdjointEigenSolver<MatrixType)",
    "insertText": "computeFromTridiagonal(const RealVectorType& diag, const SubDiagonalType& subdiag , int options)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_eivalues = diag ; m_subdiag = subdiag ;)",
    "insertText": "if(computeEigenvectors)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "setIdentity(diag.size(), diag.size())"
  },
  {
    "label": "computeFromTridiagonal_impl()",
    "kind": "Method",
    "detail": "Function (} m_info =)",
    "insertText": "computeFromTridiagonal_impl(m_eivalues, m_subdiag, m_maxIterations, computeEigenvectors, m_eivec)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (ComputationInfo info ; typedef MatrixType::Scalar Scalar ; Index n = diag .)",
    "insertText": "size()"
  },
  {
    "label": "considerAsZero()",
    "kind": "Method",
    "detail": "Function (Index end = n - 1 ; Index start = 0 ; Index iter = 0 ; typedef DiagType::RealScalar RealScalar ; const RealScalar)",
    "insertText": "considerAsZero(std::numeric_limits<RealScalar>::min)()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar precision_inv =)",
    "insertText": "RealScalar(1)/NumTraits<RealScalar>::epsilon()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (subdiag [ i ] =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { const RealScalar scaled_subdiag = precision_inv* subdiag [ i ] ;)",
    "insertText": "if(scaled_subdiag * scaled_subdiag <= (numext::abs(diag[i])+numext::abs(diag[i+1])))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "while(end>0 && subdiag[end-1]==RealScalar(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (end - - ; })",
    "insertText": "if(end<=0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iter + + ;)",
    "insertText": "if(iter > maxIterations * n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (start = end - 1 ;)",
    "insertText": "while(start>0 && subdiag[start-1]!=0)"
  },
  {
    "label": "ColMajor()",
    "kind": "Method",
    "detail": "Function (internal::tridiagonal_qr_step<MatrixType::Flags& RowMajorBit ? RowMajor :)",
    "insertText": "ColMajor(diag.data(), subdiag.data(), start, end, computeEigenvectors ? eivec.data() : (Scalar*)0, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iter <= maxIterations * n)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (Index k ; diag .)",
    "insertText": "segment(i,n-i).minCoeff(&k)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(diag[i], diag[k+i])"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } } return info ; } template<SolverType,int Size,bool IsComplex> struct direct_selfadjoint_eigenvalues { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(SolverType& eig, const typename SolverType::MatrixType& A, int options)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (eig .)",
    "insertText": "compute(A,options)"
  },
  {
    "label": "computeRoots()",
    "kind": "Method",
    "detail": "Function (} } ; template<SolverType> struct direct_selfadjoint_eigenvalues<SolverType,3,false> { typedef SolverType::MatrixType MatrixType ; typedef SolverType::RealVectorType VectorType ; typedef SolverType::Scalar Scalar ; typedef SolverType::EigenvectorsType EigenvectorsType ; EIGEN_DEVICE_FUNC void)",
    "insertText": "computeRoots(const MatrixType& m, VectorType& roots)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sqrt) EIGEN_USING_STD(atan2) EIGEN_USING_STD(cos) EIGEN_USING_STD(sin) const Scalar s_inv3 = Scalar(1)/Scalar(3)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const Scalar s_sqrt3 =)",
    "insertText": "sqrt(Scalar(3))"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (Scalar c0 =)",
    "insertText": "m(0,0)*m(1,1)*m(2,2) + Scalar(2)*m(1,0)*m(2,0)*m(2,1) - m(0,0)*m(2,1)*m(2,1) - m(1,1)*m(2,0)*m(2,0) - m(2,2)*m(1,0)*m(1,0)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (Scalar c1 =)",
    "insertText": "m(0,0)*m(1,1) - m(1,0)*m(1,0) + m(0,0)*m(2,2) - m(2,0)*m(2,0) + m(1,1)*m(2,2) - m(2,1)*m(2,1)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (Scalar c2 =)",
    "insertText": "m(0,0) + m(1,1) + m(2,2)"
  },
  {
    "label": "a_over_3()",
    "kind": "Method",
    "detail": "Function (Scalar c2_over_3 = c2* s_inv3 ; Scalar)",
    "insertText": "a_over_3(c2*c2_over_3 - c1)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (a_over_3 =)",
    "insertText": "maxi(a_over_3, Scalar(0))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar half_b =)",
    "insertText": "Scalar(0.5)*(c0 + c2_over_3*(Scalar(2)*c2_over_3*c2_over_3 - c1))"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (Scalar q = a_over_3* a_over_3* a_over_3 - half_b* half_b ; q =)",
    "insertText": "maxi(q, Scalar(0))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (Scalar rho =)",
    "insertText": "sqrt(a_over_3)"
  },
  {
    "label": "atan2()",
    "kind": "Method",
    "detail": "Function (Scalar theta =)",
    "insertText": "atan2(sqrt(q),half_b)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (Scalar cos_theta =)",
    "insertText": "cos(theta)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (Scalar sin_theta =)",
    "insertText": "sin(theta)"
  },
  {
    "label": "roots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roots(0) = c2_over_3 - rho*(cos_theta + s_sqrt3*sin_theta)"
  },
  {
    "label": "roots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roots(1) = c2_over_3 - rho*(cos_theta - s_sqrt3*sin_theta)"
  },
  {
    "label": "roots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roots(2) = c2_over_3 + Scalar(2)"
  },
  {
    "label": "extract_kernel()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "extract_kernel(MatrixType& mat, Ref<VectorType> res, Ref<VectorType> representative)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sqrt)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (Index i0 ; mat .)",
    "insertText": "diagonal().cwiseAbs().maxCoeff(&i0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (representative = mat .)",
    "insertText": "col(i0)"
  },
  {
    "label": "n0()",
    "kind": "Method",
    "detail": "Function (Scalar n0,n1 ; VectorType c0,c1 ;)",
    "insertText": "n0(c0 = representative.cross(mat.col((i0+1)%3))).squaredNorm()"
  },
  {
    "label": "n1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n1(c1 = representative.cross(mat.col((i0+2)%3))).squaredNorm()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mat.cols() == 3 && mat.cols() == mat.rows())"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (EigenvectorsType& eivecs = solver . m_eivec ; VectorType& eivals = solver . m_eivalues ; Scalar shift = mat .)",
    "insertText": "trace() / Scalar(3)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (scaledMat .)",
    "insertText": "diagonal().array()"
  },
  {
    "label": "computeRoots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRoots(scaledMat,eivals)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (eivecs .)",
    "insertText": "setIdentity()"
  },
  {
    "label": "eivals()",
    "kind": "Method",
    "detail": "Function (} else { MatrixType tmp ; tmp = scaledMat ; Scalar d0 =)",
    "insertText": "eivals(2) - eivals(1)"
  },
  {
    "label": "eivals()",
    "kind": "Method",
    "detail": "Function (Scalar d1 =)",
    "insertText": "eivals(1) - eivals(0)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "k(0), l(2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(k,l)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (d0 = d1 ; } { tmp .)",
    "insertText": "diagonal().array () -= eivals(k)"
  },
  {
    "label": "extract_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extract_kernel(tmp, eivecs.col(k), eivecs.col(l))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(d0<=2*Eigen::NumTraits<Scalar>::epsilon()*d1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (eivecs .)",
    "insertText": "col(l) -= eivecs.col(k).dot(eivecs.col(l))*eivecs.col(l)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (eivecs .)",
    "insertText": "col(l).normalize()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} else { tmp = scaledMat ; tmp .)",
    "insertText": "diagonal().array () -= eivals(l)"
  },
  {
    "label": "extract_kernel()",
    "kind": "Method",
    "detail": "Function (VectorType dummy ;)",
    "insertText": "extract_kernel(tmp, eivecs.col(l), dummy)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} eivecs .)",
    "insertText": "col(1) = eivecs.col(2).cross(eivecs.col(0)).normalized()"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (} } eivals* = scale ; eivals .)",
    "insertText": "array()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar t0 =)",
    "insertText": "Scalar(0.5) * sqrt( numext::abs2(m(0,0)-m(1,1)) + Scalar(4)*numext::abs2(m(1,0)))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar t1 =)",
    "insertText": "Scalar(0.5) * (m(0,0) + m(1,1))"
  },
  {
    "label": "roots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roots(0)"
  },
  {
    "label": "roots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "roots(1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "run(SolverType& solver, const MatrixType& mat, int options)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mat.cols() == 2 && mat.cols() == mat.rows())"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (EigenvectorsType& eivecs = solver . m_eivec ; VectorType& eivals = solver . m_eivalues ; Scalar shift = mat .)",
    "insertText": "trace() / Scalar(2)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (MatrixType scaledMat = mat ; scaledMat .)",
    "insertText": "coeffRef(0,1) = mat.coeff(1,0)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} else { scaledMat .)",
    "insertText": "diagonal().array () -= eivals(1)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (Scalar a2 =)",
    "insertText": "abs2(scaledMat(0,0))"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (Scalar c2 =)",
    "insertText": "abs2(scaledMat(1,1))"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (Scalar b2 =)",
    "insertText": "abs2(scaledMat(1,0))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (eivecs .)",
    "insertText": "col(1) << -scaledMat(1,0), scaledMat(0,0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (eivecs .)",
    "insertText": "col(1) /= sqrt(a2+b2)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} else { eivecs .)",
    "insertText": "col(1) << -scaledMat(1,1), scaledMat(1,0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (eivecs .)",
    "insertText": "col(1) /= sqrt(c2+b2)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} eivecs .)",
    "insertText": "col(0) << eivecs.col(1).unitOrthogonal()"
  },
  {
    "label": "computeDirect()",
    "kind": "Method",
    "detail": "Function (solver . m_info = Success ; solver . m_isInitialized = true ; solver . m_eigenvectorsOk = computeEigenvectors ; } } ; } template<MatrixType> EIGEN_DEVICE_FUNC SelfAdjointEigenSolver<MatrixType>& SelfAdjointEigenSolver<MatrixType)",
    "insertText": "computeDirect(const MatrixType& matrix, int options)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::direct_selfadjoint_eigenvalues<SelfAdjointEigenSolver,Size,NumTraits<Scalar>::IsComplex)",
    "insertText": "run(*this,matrix,options)"
  },
  {
    "label": "td()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "td(diag[end-1] - diag[end])*RealScalar(0.5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealScalar e = subdiag [ end - 1 ] ; RealScalar mu = diag [ end ] ;)",
    "insertText": "if(td==RealScalar(0))"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (mu - =)",
    "insertText": "abs(e)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(e != RealScalar(0))"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (const RealScalar e2 =)",
    "insertText": "abs2(e)"
  },
  {
    "label": "hypot()",
    "kind": "Method",
    "detail": "Function (const RealScalar h =)",
    "insertText": "hypot(td,e)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (mu - =)",
    "insertText": "e((td + (td>RealScalar(0) ? h : -h)) / e)"
  },
  {
    "label": "e2()",
    "kind": "Method",
    "detail": "Function (} else { mu - =)",
    "insertText": "e2(td + (td>RealScalar(0) ? h : -h))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } RealScalar x = diag [ start ] - mu ; RealScalar z = subdiag [ start ] ;)",
    "insertText": "for(Index k = start; k < end && z != RealScalar(0); ++k)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<RealScalar> rot ; rot .)",
    "insertText": "makeGivens(x, z)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (RealScalar sdk = rot .)",
    "insertText": "s() * diag[k] + rot.c()"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (RealScalar dkp1 = rot .)",
    "insertText": "s() * subdiag[k] + rot.c()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (diag [ k ] = rot .)",
    "insertText": "c() * (rot.c() * diag[k] - rot.s() * subdiag[k]) - rot.s() * (rot.c() * subdiag[k] - rot.s() * diag[k+1])"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (diag [ k + 1 ] = rot .)",
    "insertText": "s() * sdk + rot.c()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (subdiag [ k ] = rot .)",
    "insertText": "c() * sdk - rot.s()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x = subdiag [ k ] ;)",
    "insertText": "if(k < end - 1)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (z = - rot .)",
    "insertText": "s()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (subdiag [ k + 1 ] = rot .)",
    "insertText": "c()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(matrixQ)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,Dynamic,Dynamic,StorageOrder>>)",
    "insertText": "q(matrixQ,n,n)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (q .)",
    "insertText": "applyOnTheRight(k,k+1,rot)"
  }
]