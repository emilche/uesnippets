[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FRegisterComponentContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisterComponentContext"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FDebugRenderSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugRenderSceneProxy"
  },
  {
    "label": "EDrawType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDrawType"
  },
  {
    "label": "FMaterialCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialCache"
  },
  {
    "label": "FDebugLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLine"
  },
  {
    "label": "FDebugBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugBox"
  },
  {
    "label": "FWireCylinder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWireCylinder"
  },
  {
    "label": "FWireStar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWireStar"
  },
  {
    "label": "FArrowLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArrowLine"
  },
  {
    "label": "FDashedLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDashedLine"
  },
  {
    "label": "FSphere",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSphere"
  },
  {
    "label": "FText3d",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FText3d"
  },
  {
    "label": "FCone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCone"
  },
  {
    "label": "FMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMesh"
  },
  {
    "label": "FCapsule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapsule"
  },
  {
    "label": "FDebugDrawDelegateHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugDrawDelegateHelper"
  },
  {
    "label": "EState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EState"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PrimitiveSceneProxy . h \" # include \" Materials / Material . h \" # include \" DynamicMeshBuilder . h \" class APlayerController ; class FMaterialRenderProxy ; class FMeshElementCollector ; class FPrimitiveDrawInterface ; class FRegisterComponentContext ; class UCanvas ; class UMaterial ; class UPrimitiveComponent ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FDebugDrawDelegate, UCanvas*, APlayerController*)"
  },
  {
    "label": "FDebugRenderSceneProxy()",
    "kind": "Method",
    "detail": "Function (class FDebugRenderSceneProxy : public FPrimitiveSceneProxy { public : ~)",
    "insertText": "FDebugRenderSceneProxy()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FDebugRenderSceneProxy()",
    "kind": "Method",
    "detail": "Function (enum EDrawType { SolidMesh = 0,WireMesh = 1,SolidAndWireMeshes = 2,Invalid = 3,} ;)",
    "insertText": "FDebugRenderSceneProxy(const UPrimitiveComponent* InComponent)"
  },
  {
    "label": "FDebugRenderSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugRenderSceneProxy(FDebugRenderSceneProxy const&)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "DrawLineArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLineArrow(FPrimitiveDrawInterface* PDI,const FVector &Start,const FVector &End,const FColor &Color,float Mag)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "PointInRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PointInRange(const FVector& Start, const FSceneView* View, float Range)"
  },
  {
    "label": "FMaterialCache()",
    "kind": "Method",
    "detail": "Function (} struct FMaterialCache {)",
    "insertText": "FMaterialCache(FMeshElementCollector& InCollector, bool bUseLight = false, UMaterial* InMaterial = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMaterialRenderProxy*)",
    "insertText": "operator(FLinearColor Color)"
  },
  {
    "label": "FDebugLine()",
    "kind": "Method",
    "detail": "Function (FMeshElementCollector& Collector ; TMap<uint32,FMaterialRenderProxy*> MeshColorInstances ; TWeakObjectPtr<UMaterial> SolidMeshMaterial ; bool bUseFakeLight = false ; } ; struct FDebugLine {)",
    "insertText": "FDebugLine(const FVector &InStart, const FVector &InEnd, const FColor &InColor, float InThickness = 0) : Start(InStart) , End(InEnd) , Color(InColor) , Thickness(InThickness)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} FVector Start ; FVector End ; FColor Color ; float Thickness ; void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "FDebugBox()",
    "kind": "Method",
    "detail": "Function (} ; struct FDebugBox {)",
    "insertText": "FDebugBox(const FBox& InBox, const FColor& InColor, EDrawType InDrawTypeOverride = EDrawType::Invalid) : Box(InBox) , Color(InColor) , DrawTypeOverride(InDrawTypeOverride)"
  },
  {
    "label": "FDebugBox()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugBox(const FBox& InBox, const FColor& InColor, const FTransform& InTransform, EDrawType InDrawTypeOverride = EDrawType::Invalid) : Box(InBox) , Color(InColor) , Transform(InTransform) , DrawTypeOverride(InDrawTypeOverride)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI, EDrawType InDrawType, uint32 InDrawAlpha, FMaterialCache& MaterialCache, int32 ViewIndex, FMeshElementCollector& Collector)"
  },
  {
    "label": "FWireCylinder()",
    "kind": "Method",
    "detail": "Function (FBox Box ; FColor Color ; FTransform Transform ; EDrawType DrawTypeOverride = EDrawType::Invalid ; } ; struct FWireCylinder {)",
    "insertText": "FWireCylinder(const FVector& InBase, const FVector& InDirection, const float InRadius, const float InHalfHeight, const FColor &InColor, EDrawType InDrawTypeOverride = EDrawType::Invalid) : Base(InBase) , Direction(InDirection) , Radius(InRadius) , HalfHeight(InHalfHeight) , Color(InColor) , DrawTypeOverride(InDrawTypeOverride)"
  },
  {
    "label": "FWireStar()",
    "kind": "Method",
    "detail": "Function (FVector Base ; FVector Direction ; float Radius ; float HalfHeight ; FColor Color ; EDrawType DrawTypeOverride = EDrawType::Invalid ; } ; struct FWireStar {)",
    "insertText": "FWireStar(const FVector &InPosition, const FColor &InColor, const float &InSize) : Position(InPosition) , Color(InColor) , Size(InSize)"
  },
  {
    "label": "FArrowLine()",
    "kind": "Method",
    "detail": "Function (FVector Position ; FColor Color ; float Size ; } ; struct FArrowLine {)",
    "insertText": "FArrowLine(const FVector &InStart, const FVector &InEnd, const FColor &InColor) : Start(InStart) , End(InEnd) , Color(InColor)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI, const float Mag)"
  },
  {
    "label": "FDashedLine()",
    "kind": "Method",
    "detail": "Function (FVector Start ; FVector End ; FColor Color ; } ; struct FDashedLine {)",
    "insertText": "FDashedLine(const FVector &InStart, const FVector &InEnd, const FColor &InColor, const float InDashSize) : Start(InStart) , End(InEnd) , Color(InColor) , DashSize(InDashSize)"
  },
  {
    "label": "FSphere()",
    "kind": "Method",
    "detail": "Function (FVector Start ; FVector End ; FColor Color ; float DashSize ; } ; struct FSphere {)",
    "insertText": "FSphere()"
  },
  {
    "label": "FSphere()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSphere(const float& InRadius, const FVector& InLocation, const FLinearColor& InColor, EDrawType InDrawTypeOverride = EDrawType::Invalid) : Radius(InRadius) , Location(InLocation) , Color(InColor.ToFColor(true)) , DrawTypeOverride(InDrawTypeOverride)"
  },
  {
    "label": "FText3d()",
    "kind": "Method",
    "detail": "Function (float Radius ; FVector Location ; FColor Color ; EDrawType DrawTypeOverride = EDrawType::Invalid ; } ; struct FText3d {)",
    "insertText": "FText3d()"
  },
  {
    "label": "FText3d()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FText3d(const FString& InString, const FVector& InLocation, const FLinearColor& InColor) : Text(InString) , Location(InLocation) , Color(InColor.ToFColor(true))"
  },
  {
    "label": "FCone()",
    "kind": "Method",
    "detail": "Function (} FString Text ; FVector Location ; FColor Color ; } ; struct FCone {)",
    "insertText": "FCone()"
  },
  {
    "label": "FCone()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCone(const FMatrix& InConeToWorld, const float InAngle1, const float InAngle2, const FLinearColor& InColor, EDrawType InDrawTypeOverride = EDrawType::Invalid) : ConeToWorld(InConeToWorld) , Angle1(InAngle1) , Angle2(InAngle2) , Color(InColor.ToFColor(true)) , DrawTypeOverride(InDrawTypeOverride)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI, EDrawType InDrawType, uint32 InDrawAlpha, FMaterialCache& MaterialCache, int32 ViewIndex, FMeshElementCollector& Collector, TArray<FVector>* VertsCache = nullptr)"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (FMatrix ConeToWorld ; float Angle1 ; float Angle2 ; FColor Color ; EDrawType DrawTypeOverride = EDrawType::Invalid ; } ; struct FMesh { TArray<FDynamicMeshVertex> Vertices ; TArray<uint32> Indices ; FColor Color ; } ; struct FCapsule {)",
    "insertText": "FCapsule()"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCapsule(const FVector& InBase, const float& InRadius, const FVector& x, const FVector& y, const FVector &z, const float& InHalfHeight, const FLinearColor& InColor, EDrawType InDrawTypeOverride = EDrawType::Invalid) : Radius(InRadius) , Base(InBase) , Color(InColor.ToFColor(true)) , HalfHeight(InHalfHeight) , X(x) , Y(y) , Z(z) , DrawTypeOverride(InDrawTypeOverride)"
  },
  {
    "label": "GetDynamicMeshElementsForView()",
    "kind": "Method",
    "detail": "Function (float Radius ; FVector Base ; FColor Color ; float HalfHeight ; FVector X,Y,Z ; EDrawType DrawTypeOverride = EDrawType::Invalid ; } ; TArray<FDebugLine> Lines ; TArray<FDashedLine> DashedLines ; TArray<FArrowLine> ArrowLines ; TArray<FWireCylinder> Cylinders ; TArray<FWireStar> Stars ; TArray<FDebugBox> Boxes ; TArray<FSphere> Spheres ; TArray<FText3d> Texts ; TArray<FCone> Cones ; TArray<FMesh> Meshes ; TArray<FCapsule> Capsules ; uint32 ViewFlagIndex ; float TextWithoutShadowDistance ; FString ViewFlagName ; FDebugDrawDelegate DebugTextDrawingDelegate ; FDelegateHandle DebugTextDrawingDelegateHandle ; EDrawType DrawType ; uint32 DrawAlpha ; TWeakObjectPtr<UMaterial> SolidMeshMaterial ; protected : void)",
    "insertText": "GetDynamicMeshElementsForView(const FSceneView* View, const int32 ViewIndex, const FSceneViewFamily& ViewFamily, const uint32 VisibilityMap, FMeshElementCollector& Collector, FMaterialCache& DefaultMaterialCache, FMaterialCache& SolidMeshMaterialCache)"
  },
  {
    "label": "FDebugDrawDelegateHelper()",
    "kind": "Method",
    "detail": "Function (} ; struct FDebugDrawDelegateHelper {)",
    "insertText": "FDebugDrawDelegateHelper() : State(UndefinedState) , ViewFlagName(TEXT(\"Game\")) , TextWithoutShadowDistance(1500)"
  },
  {
    "label": "FDebugDrawDelegateHelper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDebugDrawDelegateHelper()"
  },
  {
    "label": "InitDelegateHelper()",
    "kind": "Method",
    "detail": "Function (} protected : typedef TArray<FDebugRenderSceneProxy::FText3d> TextArray ; public : void)",
    "insertText": "InitDelegateHelper(const FDebugRenderSceneProxy* InSceneProxy)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Texts .)",
    "insertText": "Reset()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Texts .)",
    "insertText": "Append(InSceneProxy->Texts)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (ViewFlagName = InSceneProxy -> ViewFlagName ; TextWithoutShadowDistance = InSceneProxy -> TextWithoutShadowDistance ;)",
    "insertText": "State(State == UndefinedState)"
  },
  {
    "label": "RegisterDebugDrawDelegateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDebugDrawDelegateInternal()"
  },
  {
    "label": "UnregisterDebugDrawDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDebugDrawDelegate()"
  },
  {
    "label": "ReregisterDebugDrawDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReregisterDebugDrawDelegate()"
  },
  {
    "label": "RequestRegisterDebugDrawDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRegisterDebugDrawDelegate(FRegisterComponentContext* Context)"
  },
  {
    "label": "ProcessDeferredRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredRegister()"
  },
  {
    "label": "DrawDebugLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugLabels(UCanvas* Canvas, APlayerController*)"
  },
  {
    "label": "ResetTexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTexts()"
  },
  {
    "label": "GetTexts()",
    "kind": "Method",
    "detail": "Function (} const TextArray&)",
    "insertText": "GetTexts()"
  }
]