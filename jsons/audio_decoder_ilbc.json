[
  {
    "label": "iLBC_decinst_t_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iLBC_decinst_t_"
  },
  {
    "label": "AudioDecoderIlbcImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoderIlbcImpl"
  },
  {
    "label": "AudioDecoderIlbcImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_ILBC_AUDIO_DECODER_ILBC_H_ # define MODULES_AUDIO_CODING_CODECS_ILBC_AUDIO_DECODER_ILBC_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" api / audio_codecs / audio_decoder . h \" # include \" rtc_base / buffer . h \" typedef struct iLBC_decinst_t_ IlbcDecoderInstance ; namespace webrtc { class AudioDecoderIlbcImpl final : public AudioDecoder { public :)",
    "insertText": "AudioDecoderIlbcImpl()"
  },
  {
    "label": "AudioDecoderIlbcImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDecoderIlbcImpl(const AudioDecoderIlbcImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDecoderIlbcImpl&)",
    "insertText": "operator(const AudioDecoderIlbcImpl&)"
  },
  {
    "label": "HasDecodePlc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDecodePlc()"
  },
  {
    "label": "DecodePlc()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DecodePlc(size_t num_frames, int16_t* decoded)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ParsePayload()",
    "kind": "Method",
    "detail": "Function (std::vector<ParseResult>)",
    "insertText": "ParsePayload(rtc::Buffer&& payload, uint32_t timestamp)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "DecodeInternal()",
    "kind": "Method",
    "detail": "Function (protected : int)",
    "insertText": "DecodeInternal(const uint8_t* encoded, size_t encoded_len, int sample_rate_hz, int16_t* decoded, SpeechType* speech_type)"
  }
]