[
  {
    "label": "FIndexLengthPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexLengthPair"
  },
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "FDuplicatedVerticesBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDuplicatedVerticesBuffer"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GPUSkinVertexFactory . h \" # include \" RenderResource . h \" # include \" Rendering / SkeletalMeshVertexBuffer . h \" struct FIndexLengthPair { uint32 Length ; uint32 Index ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FIndexLengthPair& V)"
  },
  {
    "label": "FDuplicatedVerticesBuffer()",
    "kind": "Method",
    "detail": "Function (Ar<<V . Length<<V . Index ; return Ar ; } } ; template<> struct TCanBulkSerialize<FIndexLengthPair> { enum { Value = true } ; } ; class FDuplicatedVerticesBuffer : public FRenderResource { public : FVertexBufferAndSRV DuplicatedVerticesIndexBuffer ; FVertexBufferAndSRV LengthAndIndexDuplicatedVerticesIndexBuffer ; TSkeletalMeshVertexData<uint32> DupVertData ; TSkeletalMeshVertexData<FIndexLengthPair> DupVertIndexData ; bool bHasOverlappingVertices ;)",
    "insertText": "FDuplicatedVerticesBuffer() #if WITH_EDITOR : DupVertData(true), DupVertIndexData(true) #else : DupVertData(false), DupVertIndexData(false) #endif , bHasOverlappingVertices(false)"
  },
  {
    "label": "FDuplicatedVerticesBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDuplicatedVerticesBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const int32 NumVertices, const TMap<int32, TArray<int32>>& OverlappingVertices)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumDups = 0 ;)",
    "insertText": "for(auto Iter = OverlappingVertices.CreateConstIterator(); Iter; ++Iter)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>& Array = Iter .)",
    "insertText": "Value()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumDups + = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (} DupVertData .)",
    "insertText": "ResizeBuffer(NumDups ? NumDups : 1)"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (DupVertIndexData .)",
    "insertText": "ResizeBuffer(NumVertices ? NumVertices : 1)"
  },
  {
    "label": "GetDataPointer()",
    "kind": "Method",
    "detail": "Function (uint8* VertData = DupVertData .)",
    "insertText": "GetDataPointer()"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (uint32 VertStride = DupVertData .)",
    "insertText": "GetStride()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 SubIndex = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < NumVertices; ++Index)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>* Array = OverlappingVertices .)",
    "insertText": "Find(Index)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (FIndexLengthPair NewEntry ; NewEntry .)",
    "insertText": "Length(Array) ? Array->Num()"
  },
  {
    "label": "SubIndex()",
    "kind": "Method",
    "detail": "Function (NewEntry . Index =)",
    "insertText": "SubIndex((FIndexLengthPair*)(IndexData + Index * IndexStride))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (SubIndex + + ; } } })",
    "insertText": "check(SubIndex == NumDups)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (bHasOverlappingVertices = true ; } else {)",
    "insertText": "Memzero(IndexData, NumVertices * sizeof(FIndexLengthPair))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(VertData, sizeof(uint32))"
  },
  {
    "label": "ReleaseCPUResources()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleaseCPUResources()"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (DupVertData .)",
    "insertText": "Discard()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "DuplicatedVerticesBuffeName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "DuplicatedVerticesBuffeName(TEXT(\"FDuplicatedVerticesBuffer\"))"
  },
  {
    "label": "GetResourceArray()",
    "kind": "Method",
    "detail": "Function ({ FResourceArrayInterface* ResourceArray = DupVertData .)",
    "insertText": "GetResourceArray()"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"DuplicatedVerticesIndexBuffer\"), ResourceArray)"
  },
  {
    "label": "GetOwnerName()",
    "kind": "Method",
    "detail": "Function (CreateInfo . ClassName = DuplicatedVerticesBuffeName ; CreateInfo . OwnerName =)",
    "insertText": "GetOwnerName()"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (DuplicatedVerticesIndexBuffer . VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateVertexBuffer(ResourceArray->GetResourceDataSize(), BUF_Static | BUF_ShaderResource, CreateInfo)"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (DuplicatedVerticesIndexBuffer . VertexBufferRHI ->)",
    "insertText": "SetOwnerName(GetOwnerName())"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (DuplicatedVerticesIndexBuffer . VertexBufferSRV = RHICmdList .)",
    "insertText": "CreateShaderResourceView(DuplicatedVerticesIndexBuffer.VertexBufferRHI, sizeof(uint32), PF_R32_UINT)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"LengthAndIndexDuplicatedVerticesIndexBuffer\"), ResourceArray)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (LengthAndIndexDuplicatedVerticesIndexBuffer . VertexBufferSRV = RHICmdList .)",
    "insertText": "CreateShaderResourceView(LengthAndIndexDuplicatedVerticesIndexBuffer.VertexBufferRHI, sizeof(uint32), PF_R32_UINT)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (DuplicatedVerticesIndexBuffer .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FDuplicatedVerticesBuffer& Data)"
  }
]