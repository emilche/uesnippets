[
  {
    "label": "FApp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FApp"
  },
  {
    "label": "FBlendStateInitializerRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendStateInitializerRHI"
  },
  {
    "label": "FGraphicsPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineStateInitializer"
  },
  {
    "label": "FLastRenderTimeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLastRenderTimeContainer"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FRHIComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeShader"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "IRHIComputeContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHIComputeContext"
  },
  {
    "label": "FDepthStencilStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilStateInitializerRHI"
  },
  {
    "label": "FRasterizerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizerStateInitializerRHI"
  },
  {
    "label": "FRHIResourceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceCreateInfo"
  },
  {
    "label": "FRHIResourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceInfo"
  },
  {
    "label": "FRHIUniformBufferLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferLayout"
  },
  {
    "label": "FSamplerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSamplerStateInitializerRHI"
  },
  {
    "label": "FTextureMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureMemoryStats"
  },
  {
    "label": "FComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputePipelineState"
  },
  {
    "label": "FGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineState"
  },
  {
    "label": "FRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineState"
  },
  {
    "label": "FWorkGraphPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkGraphPipelineState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FRenderThreadIdleScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderThreadIdleScope"
  },
  {
    "label": "FRHICopyTextureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICopyTextureInfo"
  },
  {
    "label": "FRHIBufferRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBufferRange"
  },
  {
    "label": "FRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBuffer"
  },
  {
    "label": "FUpdateTexture3DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTexture3DData"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "FRayTracingShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingShaderBindings"
  },
  {
    "label": "FRayTracingLocalShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingLocalShaderBindings"
  },
  {
    "label": "FLockTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockTracker"
  },
  {
    "label": "FLockParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockParams"
  },
  {
    "label": "FRHICommandBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandBase"
  },
  {
    "label": "TRHILambdaCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRHILambdaCommand"
  },
  {
    "label": "TRHILambdaCommand_NoMarker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRHILambdaCommand_NoMarker"
  },
  {
    "label": "FRHIContextArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIContextArray"
  },
  {
    "label": "TRHILambdaCommandMultiPipe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRHILambdaCommandMultiPipe"
  },
  {
    "label": "FRHICommandListScopedPipelineGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListScopedPipelineGuard"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FRHICommandRHIThreadFence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandRHIThreadFence"
  },
  {
    "label": "FShaderParameterState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderParameterState"
  },
  {
    "label": "FBreadcrumbState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBreadcrumbState"
  },
  {
    "label": "FActivatePipelineCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivatePipelineCommand"
  },
  {
    "label": "FPersistentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentState"
  },
  {
    "label": "FRHICommandListExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListExecutor"
  },
  {
    "label": "FRHICommandListIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListIterator"
  },
  {
    "label": "FRHICommandListScopedFlushAndExecute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListScopedFlushAndExecute"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHICommandList_RecursiveHazardous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList_RecursiveHazardous"
  },
  {
    "label": "FRHIComputeCommandList_RecursiveHazardous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList_RecursiveHazardous"
  },
  {
    "label": "FRHICommandSetGPUMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandSetGPUMask"
  },
  {
    "label": "FUnnamedRhiCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnnamedRhiCommand"
  },
  {
    "label": "FRHICommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommand"
  },
  {
    "label": "CommandName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CommandName"
  },
  {
    "label": "PREPROCESSOR_JOIN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PREPROCESSOR_JOIN"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "FScopedRHIThreadStaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedRHIThreadStaller"
  },
  {
    "label": "FRHICommandListScopedExtendResourceLifetime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListScopedExtendResourceLifetime"
  },
  {
    "label": "FQueuedCommandList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedCommandList"
  },
  {
    "label": "FRHICommandListScopedPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListScopedPipeline"
  },
  {
    "label": "FRHIScopedGPUMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIScopedGPUMask"
  },
  {
    "label": "FScopedUniformBufferStaticBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedUniformBufferStaticBindings"
  },
  {
    "label": "TRHICommandList_RecursiveHazardous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRHICommandList_RecursiveHazardous"
  },
  {
    "label": "TRHIComputeCommandList_RecursiveHazardous",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRHIComputeCommandList_RecursiveHazardous"
  },
  {
    "label": "FTaskPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskPipe"
  },
  {
    "label": "FTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTask"
  },
  {
    "label": "FTranslateState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslateState"
  },
  {
    "label": "FPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineState"
  },
  {
    "label": "FSubmitState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubmitState"
  },
  {
    "label": "FSubmitArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubmitArgs"
  },
  {
    "label": "FRenderTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTask"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_MODULE_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTemplate . h \" # include \" Math / Color . h \" # include \" Math / IntPoint . h \" # include \" Math / IntRect . h \" # include \" Math / Box2D . h \" # include \" Math / PerspectiveMatrix . h \" # include \" Math / TranslationMatrix . h \" # include \" Math / ScaleMatrix . h \" # include \" Math / Float16Color . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" GenericPlatform / GenericPlatformProcess . h \" # include \" Misc / MemStack . h \" # include \" Misc / App . h \" # include \" RHIStats . h \" # include \" HAL / IConsoleManager . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" RHIBreadcrumbs . h \" # include \" RHIGlobals . h \" # include \" RHIShaderParameters . h \" # include \" RHITextureReference . h \" # include \" RHIResourceReplace . h \" # include \" Trace / Trace . h \" # include \" DynamicRHI . h \" # include \" RHITypes . h \" # include \" RHIGlobals . h \")",
    "insertText": "CSV_DECLARE_CATEGORY_MODULE_EXTERN(RHI_API, RHITStalls)"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_MODULE_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_DECLARE_CATEGORY_MODULE_EXTERN(RHI_API, RHITFlushes)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (ERHIAccess)",
    "insertText": "RHIGetDefaultResourceState(ETextureCreateFlags InUsage, bool bInHasInitialData)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (ERHIAccess)",
    "insertText": "RHIGetDefaultResourceState(EBufferUsageFlags InUsage, bool bInHasInitialData)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# define RHICOMMAND_CALLSTACK 0 # if RHICOMMAND_CALLSTACK # include \" HAL / PlatformStackwalk . h \" # endif class FApp ; class FBlendStateInitializerRHI ; class FGraphicsPipelineStateInitializer ; class FLastRenderTimeContainer ; class FRHICommandListBase ; class FRHIComputeShader ; class IRHICommandContext ; class IRHIComputeContext ; struct FDepthStencilStateInitializerRHI ; struct FRasterizerStateInitializerRHI ; struct FRHIResourceCreateInfo ; struct FRHIResourceInfo ; struct FRHIUniformBufferLayout ; struct FSamplerStateInitializerRHI ; struct FTextureMemoryStats ; class FComputePipelineState ; class FGraphicsPipelineState ; class FRayTracingPipelineState ; class FWorkGraphPipelineState ;)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"RHICmdList\"), STATGROUP_RHICMDLIST, STATCAT_Advanced)"
  },
  {
    "label": "UE_TRACE_CHANNEL_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_TRACE_CHANNEL_EXTERN(RHICommandsChannel, RHI_API)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# define RHI_STATS 0 # if RHI_STATS)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"RHICommands\"),STATGROUP_RHI_COMMANDS, STATCAT_Advanced)"
  },
  {
    "label": "RHISTAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RHISTAT(Method) DECLARE_SCOPE_CYCLE_COUNTER(TEXT(#Method), STAT_RHI##Method, STATGROUP_RHI_COMMANDS) #else #define RHISTAT(Method) #endif #if !defined(RHI_EXECUTE_API)"
  },
  {
    "label": "FRenderThreadIdleScope()",
    "kind": "Method",
    "detail": "Function (None,DedicatedThread,Tasks } ; TOptional<ERHIThreadMode> GPendingRHIThreadMode ; namespace ERenderThreadIdleTypes { enum Type { WaitingForAllOtherSleep,WaitingForGPUQuery,WaitingForGPUPresent,Num } ; } uint32 GRenderThreadIdle [ ERenderThreadIdleTypes::Num ] ; struct FRenderThreadIdleScope { FThreadIdleStats::FScopeIdle RHIThreadIdleScope ; const ERenderThreadIdleTypes::Type Type ; const bool bCondition ; const uint32 Start ;)",
    "insertText": "FRenderThreadIdleScope(ERenderThreadIdleTypes::Type Type, bool bInCondition = true) : RHIThreadIdleScope(!(bInCondition && IsInRHIThread())) , Type(Type) , bCondition(bInCondition && IsInRenderingThread()) , Start(bCondition ? FPlatformTime::Cycles() : 0)"
  },
  {
    "label": "FRenderThreadIdleScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRenderThreadIdleScope()"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (GRenderThreadIdle [ Type ] + =)",
    "insertText": "Cycles()"
  },
  {
    "label": "IsRunningRHIInSeparateThread()",
    "kind": "Method",
    "detail": "Function (} } } ; uint64 GInputLatencyTime ; bool)",
    "insertText": "IsRunningRHIInSeparateThread()"
  },
  {
    "label": "GetDestRect()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "GetDestRect()"
  },
  {
    "label": "FUpdateTexture3DData()",
    "kind": "Method",
    "detail": "Function (} FIntVector Size = FIntVector::ZeroValue ; FIntVector SourcePosition = FIntVector::ZeroValue ; FIntVector DestPosition = FIntVector::ZeroValue ; uint32 SourceSliceIndex = 0 ; uint32 DestSliceIndex = 0 ; uint32 NumSlices = 1 ; uint32 SourceMipIndex = 0 ; uint32 DestMipIndex = 0 ; uint32 NumMips = 1 ; } ; struct FRHIBufferRange { class FRHIBuffer* Buffer { nullptr } ; uint64 Offset { 0 } ; uint64 Size { 0 } ; } ; struct FUpdateTexture3DData {)",
    "insertText": "FUpdateTexture3DData(FRHITexture* InTexture, uint32 InMipIndex, const struct FUpdateTextureRegion3D& InUpdateRegion, uint32 InSourceRowPitch, uint32 InSourceDepthPitch, uint8* InSourceData, uint32 InDataSizeBytes, uint32 InFrameNumber) : Texture(InTexture) , MipIndex(InMipIndex) , UpdateRegion(InUpdateRegion) , RowPitch(InSourceRowPitch) , DepthPitch(InSourceDepthPitch) , Data(InSourceData) , DataSizeBytes(InDataSizeBytes) , FrameNumber(InFrameNumber)"
  },
  {
    "label": "FUpdateTexture3DData()",
    "kind": "Method",
    "detail": "Function (} FRHITexture* Texture ; uint32 MipIndex ; FUpdateTextureRegion3D UpdateRegion ; uint32 RowPitch ; uint32 DepthPitch ; uint8* Data ; uint32 DataSizeBytes ; uint32 FrameNumber ; uint8 PlatformData [ 6 4 ] ; private :)",
    "insertText": "FUpdateTexture3DData()"
  },
  {
    "label": "FRayTracingLocalShaderBindings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FRayTracingLocalShaderBindings()"
  },
  {
    "label": "FRayTracingLocalShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingLocalShaderBindings(const FRayTracingLocalShaderBindings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings&)",
    "insertText": "operator(const FRayTracingLocalShaderBindings&)"
  },
  {
    "label": "FRayTracingLocalShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingLocalShaderBindings(FRayTracingLocalShaderBindings&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings&)",
    "insertText": "operator(FRayTracingLocalShaderBindings&&)"
  },
  {
    "label": "FLockParams()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } ; enum class ERayTracingBindingType : uint8 { HitGroup,CallableShader,MissShader,} ; struct FLockTracker { struct FLockParams { void* RHIBuffer ; void* Buffer ; uint32 BufferSize ; uint32 Offset ; EResourceLockMode LockMode ;)",
    "insertText": "FLockParams(void* InRHIBuffer, void* InBuffer, uint32 InOffset, uint32 InBufferSize, EResourceLockMode InLockMode) : RHIBuffer(InRHIBuffer) , Buffer(InBuffer) , BufferSize(InBufferSize) , Offset(InOffset) , LockMode(InLockMode)"
  },
  {
    "label": "FLockTracker()",
    "kind": "Method",
    "detail": "Function (} } ; FCriticalSection CriticalSection ; TArray<FLockParams,TInlineAllocator<1 6>> OutstandingLocks ; uint32 TotalMemoryOutstanding ;)",
    "insertText": "FLockTracker()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding = 0 ; } void)",
    "insertText": "Lock(void* RHIBuffer, void* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "for(auto& Parms : OutstandingLocks)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} # endif OutstandingLocks .)",
    "insertText": "Add(FLockParams(RHIBuffer, Buffer, Offset, SizeRHI, LockMode))"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (TotalMemoryOutstanding + = SizeRHI ; } FLockParams)",
    "insertText": "Unlock(void* RHIBuffer)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (FLockParams Result = OutstandingLocks [ Index ] ; OutstandingLocks .)",
    "insertText": "RemoveAtSwap(Index, EAllowShrinking::No)"
  },
  {
    "label": "ExecuteAndDestruct()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef CONTINUABLE_PSO_VERIFY # define PSO_VERIFY ensure # else # define PSO_VERIFY check # endif struct FRHICommandBase { FRHICommandBase* Next = nullptr ; void)",
    "insertText": "ExecuteAndDestruct(FRHICommandListBase& CmdList)"
  },
  {
    "label": "TRHILambdaCommand()",
    "kind": "Method",
    "detail": "Function (} ; template<RHICmdListType,LAMBDA> struct TRHILambdaCommand final : public FRHICommandBase { LAMBDA Lambda ; # if CPUPROFILERTRACE_ENABLED const TCHAR* Name ; # endif)",
    "insertText": "TRHILambdaCommand(LAMBDA&& InLambda, const TCHAR* InName) : Lambda(Forward<LAMBDA>(InLambda)) #if CPUPROFILERTRACE_ENABLED , Name(InName)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL(Name, RHICommandsChannel)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(*static_cast<RHICmdListType*>(&CmdList))"
  },
  {
    "label": "LAMBDA()",
    "kind": "Method",
    "detail": "Function (Lambda . ~)",
    "insertText": "LAMBDA()"
  },
  {
    "label": "TRHILambdaCommand_NoMarker()",
    "kind": "Method",
    "detail": "Function (} } ; template<RHICmdListType,LAMBDA> struct TRHILambdaCommand_NoMarker final : public FRHICommandBase { LAMBDA Lambda ;)",
    "insertText": "TRHILambdaCommand_NoMarker(LAMBDA&& InLambda) : Lambda(Forward<LAMBDA>(InLambda))"
  },
  {
    "label": "TRHILambdaCommandMultiPipe()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIContextArray : public TRHIPipelineArray<IRHIComputeContext*> { using Base = TRHIPipelineArray<IRHIComputeContext*> ; public : using Base::Base ; } ; template<RHICmdListType,LAMBDA> struct TRHILambdaCommandMultiPipe final : public FRHICommandBase { LAMBDA Lambda ; # if CPUPROFILERTRACE_ENABLED const TCHAR* Name ; # endif ERHIPipeline Pipelines ;)",
    "insertText": "TRHILambdaCommandMultiPipe(LAMBDA&& InLambda, const TCHAR* InName, ERHIPipeline InPipelines) : Lambda(Forward<LAMBDA>(InLambda)) #if CPUPROFILERTRACE_ENABLED , Name(InName) #endif , Pipelines(InPipelines)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "ALLOC_COMMAND(...) new ( AllocCommand(sizeof(__VA_ARGS__), alignof(__VA_ARGS__)) ) __VA_ARGS__ #define ALLOC_COMMAND_CL(RHICmdList, ...) new ( (RHICmdList).AllocCommand(sizeof(__VA_ARGS__), alignof(__VA_ARGS__)) ) __VA_ARGS__ #define CAN_TOGGLE_COMMAND_LIST_BYPASS (!UE_BUILD_SHIPPING && !UE_BUILD_TEST)"
  },
  {
    "label": "FRHICommandListScopedPipelineGuard()",
    "kind": "Method",
    "detail": "Function (FRHICommandListBase& RHICmdList ; bool bPipelineSet = false ; public :)",
    "insertText": "FRHICommandListScopedPipelineGuard(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FRHICommandListScopedPipelineGuard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHICommandListScopedPipelineGuard()"
  },
  {
    "label": "FRHICommandListBase()",
    "kind": "Method",
    "detail": "Function (} ; class FRHICommandListBase { protected : FMemStackBase MemManager ;)",
    "insertText": "FRHICommandListBase(FRHIGPUMask InGPUMask, bool bInImmediate)"
  },
  {
    "label": "FRHICommandListBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRHICommandListBase(FRHICommandListBase const&)"
  },
  {
    "label": "FRHICommandListBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHICommandListBase(FRHICommandListBase&& Other)"
  },
  {
    "label": "FRHICommandListBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHICommandListBase()"
  },
  {
    "label": "IsImmediate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImmediate()"
  },
  {
    "label": "GetAsImmediate()",
    "kind": "Method",
    "detail": "Function (FRHICommandListImmediate&)",
    "insertText": "GetAsImmediate()"
  },
  {
    "label": "GetUsedMemory()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetUsedMemory()"
  },
  {
    "label": "AllowParallelTranslate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowParallelTranslate()"
  },
  {
    "label": "FinishRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecording()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Alloc(int64 AllocSize, int64 Alignment)"
  },
  {
    "label": "AllocCopy()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "AllocCopy(const void* InSourceData, int64 AllocSize, int64 Alignment)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void* NewData =)",
    "insertText": "Alloc(AllocSize, Alignment)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(NewData, InSourceData, AllocSize)"
  },
  {
    "label": "AllocArrayUninitialized()",
    "kind": "Method",
    "detail": "Function (} template<T> const TArrayView<T>)",
    "insertText": "AllocArrayUninitialized(uint32 Num)"
  },
  {
    "label": "AllocArray()",
    "kind": "Method",
    "detail": "Function (} template<T> const TArrayView<T>)",
    "insertText": "AllocArray(TConstArrayView<T> InArray)"
  },
  {
    "label": "AllocCopy()",
    "kind": "Method",
    "detail": "Function (} void* NewArray =)",
    "insertText": "AllocCopy(InArray.GetData(), InArray.Num() * sizeof(T), alignof(T))"
  },
  {
    "label": "AllocString()",
    "kind": "Method",
    "detail": "Function (} TCHAR*)",
    "insertText": "AllocString(const TCHAR* Name)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 Len =)",
    "insertText": "Strlen(Name)"
  },
  {
    "label": "NameCopy()",
    "kind": "Method",
    "detail": "Function (TCHAR*)",
    "insertText": "NameCopy(TCHAR*)Alloc(Len * (int32)sizeof(TCHAR), (int32)sizeof(TCHAR))"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strcpy(NameCopy, Len, Name)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FRHICommandBase*)",
    "insertText": "Result(FRHICommandBase*) MemManager.Alloc(AllocSize, Alignment)"
  },
  {
    "label": "AllocCommand()",
    "kind": "Method",
    "detail": "Function (+ + NumCommands ;* CommandLink = Result ; CommandLink =& Result -> Next ; return Result ; } template<TCmd> void*)",
    "insertText": "AllocCommand()"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (} template<LAMBDA> void)",
    "insertText": "EnqueueLambda(const TCHAR* LambdaName, LAMBDA&& Lambda)"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(*this)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommand<FRHICommandListBase, LAMBDA>)(Forward<LAMBDA>(Lambda), LambdaName)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (} } template<LAMBDA> void)",
    "insertText": "EnqueueLambda(LAMBDA&& Lambda)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueLambda(TEXT(\"TRHILambdaCommand\"), Forward<LAMBDA>(Lambda))"
  },
  {
    "label": "EnqueueLambdaMultiPipe()",
    "kind": "Method",
    "detail": "Function (} enum class EThreadFence { Enabled,Disabled } ; template<LAMBDA> void)",
    "insertText": "EnqueueLambdaMultiPipe(ERHIPipeline Pipelines, EThreadFence ThreadFence, const TCHAR* LambdaName, LAMBDA&& Lambda)"
  },
  {
    "label": "ActivatePipelines()",
    "kind": "Method",
    "detail": "Function (ERHIPipeline OldPipeline = ActivePipelines ;)",
    "insertText": "ActivatePipelines(Pipelines)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FRHIContextArray LocalContexts { InPlace,nullptr } ;)",
    "insertText": "for(ERHIPipeline Pipeline : MakeFlagsRange(Pipelines))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (LocalContexts [ Pipeline ] = Contexts [ Pipeline ] ;)",
    "insertText": "check(LocalContexts[Pipeline])"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Lambda(static_cast<FRHIContextArray const&>(LocalContexts))"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommandMultiPipe<FRHICommandListBase, LAMBDA>)(Forward<LAMBDA>(Lambda), LambdaName, Pipelines)"
  },
  {
    "label": "ActivatePipelines()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ActivatePipelines(OldPipeline)"
  },
  {
    "label": "RHIThreadFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIThreadFence(true)"
  },
  {
    "label": "HasCommands()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasCommands()"
  },
  {
    "label": "IsExecuting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExecuting()"
  },
  {
    "label": "IsTopOfPipe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTopOfPipe()"
  },
  {
    "label": "IsGraphics()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGraphics()"
  },
  {
    "label": "RHIGetUploadContext()",
    "kind": "Method",
    "detail": "Function (UploadContext = GDynamicRHI ->)",
    "insertText": "RHIGetUploadContext()"
  },
  {
    "label": "Bypass()",
    "kind": "Method",
    "detail": "Function (} return* UploadContext ; } bool)",
    "insertText": "Bypass()"
  },
  {
    "label": "ActivatePipelines()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ActivatePipelines(ERHIPipeline Pipelines)"
  },
  {
    "label": "InvalidBufferFatalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidBufferFatalError(const FRHIResourceCreateInfo& CreateInfo, EBufferUsageFlags Usage, uint32 Stride)"
  },
  {
    "label": "SwitchPipeline()",
    "kind": "Method",
    "detail": "Function (public : ERHIPipeline)",
    "insertText": "SwitchPipeline(ERHIPipeline Pipeline)"
  },
  {
    "label": "RHIThreadFence()",
    "kind": "Method",
    "detail": "Function (# endif FGraphEventRef)",
    "insertText": "RHIThreadFence(bool bSetLockFence = false)"
  },
  {
    "label": "ScopedPipeline()",
    "kind": "Method",
    "detail": "Function (FRHICommandListScopedPipelineGuard)",
    "insertText": "ScopedPipeline(*this)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockBuffer(FRHIBuffer* Buffer)"
  },
  {
    "label": "RHIUnlockBuffer()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUnlockBuffer(*this, Buffer)"
  },
  {
    "label": "LockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockBufferMGPU(FRHIBuffer* Buffer, uint32 GPUIndex, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "UnlockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockBufferMGPU(FRHIBuffer* Buffer, uint32 GPUIndex)"
  },
  {
    "label": "RHIUnlockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUnlockBufferMGPU(*this, Buffer, GPUIndex)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateBuffer(uint32 Size, EBufferUsageFlags Usage, uint32 Stride, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (FRHIBufferDesc BufferDesc = CreateInfo . bWithoutNativeResource ?)",
    "insertText": "Null() : FRHIBufferDesc(Size, Stride, Usage)"
  },
  {
    "label": "InvalidBufferFatalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidBufferFatalError(CreateInfo, Usage, Stride)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef Buffer = GDynamicRHI ->)",
    "insertText": "RHICreateBuffer(*this, BufferDesc, ResourceState, CreateInfo)"
  },
  {
    "label": "SetTrackedAccess_Unsafe()",
    "kind": "Method",
    "detail": "Function (Buffer ->)",
    "insertText": "SetTrackedAccess_Unsafe(ResourceState)"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateVertexBuffer(uint32 Size, EBufferUsageFlags Usage, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (ERHIAccess ResourceState =)",
    "insertText": "RHIGetDefaultResourceState(Usage | EBufferUsageFlags::VertexBuffer, false)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateStructuredBuffer(uint32 Stride, uint32 Size, EBufferUsageFlags Usage, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "CreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateStructuredBuffer(uint32 Stride, uint32 Size, EBufferUsageFlags Usage, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (ERHIAccess ResourceState =)",
    "insertText": "RHIGetDefaultResourceState(Usage | EBufferUsageFlags::StructuredBuffer, false)"
  },
  {
    "label": "CreateIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateIndexBuffer(uint32 Stride, uint32 Size, EBufferUsageFlags Usage, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "CreateIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "CreateIndexBuffer(uint32 Stride, uint32 Size, EBufferUsageFlags Usage, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (ERHIAccess ResourceState =)",
    "insertText": "RHIGetDefaultResourceState(Usage | EBufferUsageFlags::IndexBuffer, false)"
  },
  {
    "label": "UpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateUniformBuffer(FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUpdateUniformBuffer(*this, UniformBufferRHI, Contents)"
  },
  {
    "label": "UpdateStreamSourceSlot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStreamSourceSlot(FRHIStreamSourceSlot* StreamSourceSlotRHI, FRHIBuffer* BufferRHI)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueLambda([this, StreamSourceSlotRHI, BufferRHI] (FRHICommandListBase&) { StreamSourceSlotRHI->Buffer = BufferRHI; })"
  },
  {
    "label": "UpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTexture2D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::Textures)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUpdateTexture2D(*this, Texture, MipIndex, UpdateRegion, SourcePitch, SourceData)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "CreateTexture(const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(EnumHasAnyFlags(CreateDesc.Flags, TexCreate_RenderTargetable | TexCreate_DepthStencilTargetable) ? ELLMTag::RenderTargets : ELLMTag::Textures)"
  },
  {
    "label": "NewCreateDesc()",
    "kind": "Method",
    "detail": "Function (FRHITextureCreateDesc)",
    "insertText": "NewCreateDesc(CreateDesc)"
  },
  {
    "label": "SetInitialState()",
    "kind": "Method",
    "detail": "Function (NewCreateDesc .)",
    "insertText": "SetInitialState(RHIGetDefaultResourceState(CreateDesc.Flags, CreateDesc.BulkData != nullptr))"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (} return GDynamicRHI ->)",
    "insertText": "RHICreateTexture(*this, CreateDesc)"
  },
  {
    "label": "UpdateFromBufferTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateFromBufferTexture2D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "RHIUpdateFromBufferTexture2D()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUpdateFromBufferTexture2D(*this, Texture, MipIndex, UpdateRegion, SourcePitch, Buffer, BufferOffset)"
  },
  {
    "label": "UpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTexture3D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUpdateTexture3D(*this, Texture, MipIndex, UpdateRegion, SourceRowPitch, SourceDepthPitch, SourceData)"
  },
  {
    "label": "CreateTextureReference()",
    "kind": "Method",
    "detail": "Function (} FTextureReferenceRHIRef)",
    "insertText": "CreateTextureReference(FRHITexture* InReferencedTexture = nullptr)"
  },
  {
    "label": "UpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTextureReference(FRHITextureReference* TextureRef, FRHITexture* NewTexture)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateShaderResourceView\"))"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceView(FRHITexture* Texture, FRHIViewDesc::FTextureSRV::FInitializer const& ViewDesc)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "CreateUnorderedAccessView(FRHIBuffer* Buffer, FRHIViewDesc::FBufferUAV::FInitializer const& ViewDesc)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateUnorderedAccessView\"))"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "CreateUnorderedAccessView(FRHITexture* Texture, FRHIViewDesc::FTextureUAV::FInitializer const& ViewDesc)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceView(const FShaderResourceViewInitializer& Initializer)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "CreateUnorderedAccessView(FRHIBuffer* Buffer, bool bUseUAVCounter, bool bAppendBuffer)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "CreateUnorderedAccessView(FRHIBuffer* Buffer, uint8 Format)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "CreateUnorderedAccessView(Buffer, FRHIViewDesc::CreateBufferUAV() .SetType(FRHIViewDesc::EBufferType::Typed) .SetFormat(EPixelFormat(Format)))"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} } FUnorderedAccessViewRHIRef)",
    "insertText": "CreateUnorderedAccessView(FRHITexture* Texture, uint32 MipLevel = 0, uint16 FirstArraySlice = 0, uint16 NumArraySlices = 0)"
  },
  {
    "label": "CreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "CreateUnorderedAccessView(FRHITexture* Texture, uint32 MipLevel, uint8 Format, uint16 FirstArraySlice = 0, uint16 NumArraySlices = 0)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceView(FRHIBuffer* Buffer)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef SRVRef =)",
    "insertText": "CreateShaderResourceView(Buffer, FRHIViewDesc::CreateBufferSRV() .SetTypeFromBuffer(Buffer))"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "CreateShaderResourceView(Buffer, FRHIViewDesc::CreateBufferSRV() .SetType(FRHIViewDesc::EBufferType::Typed) .SetFormat(EPixelFormat(Format)))"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} } FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceView(FRHITexture* Texture, const FRHITextureSRVCreateInfo& CreateInfo)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceView(FRHITexture* Texture, uint8 MipLevel)"
  },
  {
    "label": "CreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceView(FRHITexture* Texture, uint8 MipLevel, uint8 NumMipLevels, EPixelFormat Format)"
  },
  {
    "label": "CreateShaderResourceViewWriteMask()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceViewWriteMask(FRHITexture* Texture2DRHI)"
  },
  {
    "label": "CreateShaderResourceViewFMask()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "CreateShaderResourceViewFMask(FRHITexture* Texture2DRHI)"
  },
  {
    "label": "CreateResourceCollection()",
    "kind": "Method",
    "detail": "Function (} FRHIResourceCollectionRef)",
    "insertText": "CreateResourceCollection(TConstArrayView<FRHIResourceCollectionMember> InMembers)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateResourceCollection\"))"
  },
  {
    "label": "CreateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (} FRayTracingGeometryRHIRef)",
    "insertText": "CreateRayTracingGeometry(const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "CreateRayTracingShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} FShaderBindingTableRHIRef)",
    "insertText": "CreateRayTracingShaderBindingTable(const FRayTracingShaderBindingTableInitializer& Initializer)"
  },
  {
    "label": "ReplaceResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceResources(TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "BindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindDebugLabelName(FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIBindDebugLabelName(*this, Texture, Name)"
  },
  {
    "label": "BindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindDebugLabelName(FRHIBuffer* Buffer, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIBindDebugLabelName(*this, Buffer, Name)"
  },
  {
    "label": "BindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindDebugLabelName(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIBindDebugLabelName(*this, UnorderedAccessViewRHI, Name)"
  },
  {
    "label": "GetScratchShaderParameters()",
    "kind": "Method",
    "detail": "Function (} FRHIBatchedShaderParameters&)",
    "insertText": "GetScratchShaderParameters()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderParameters*& ScratchShaderParameters = ShaderParameterState . ScratchShaderParameters ;)",
    "insertText": "if(!ScratchShaderParameters)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ScratchShaderParameters =)",
    "insertText": "new(MemManager) FRHIBatchedShaderParameters(*CreateBatchedShaderParameterAllocator(ERHIBatchedShaderParameterAllocatorPageSize::Small))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ensureMsgf(!ScratchShaderParameters->HasParameters(), TEXT(\"Scratch shader parameters left without committed parameters\")))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ScratchShaderParameters ->)",
    "insertText": "Reset()"
  },
  {
    "label": "GetScratchShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} return* ScratchShaderParameters ; } FRHIBatchedShaderUnbinds&)",
    "insertText": "GetScratchShaderUnbinds()"
  },
  {
    "label": "NeedsShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} return ScratchShaderUnbinds ; } bool)",
    "insertText": "NeedsShaderUnbinds()"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (} protected : FMemStackBase&)",
    "insertText": "GetAllocator()"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIPixelShader* ShaderRHI)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIGeometryShader* ShaderRHI)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIComputeShader* ShaderRHI)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIWorkGraphShader* ShaderRHI)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIMeshShader* ShaderRHI)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIAmplificationShader* ShaderRHI)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateBoundShader(FRHIGraphicsShader* ShaderRHI)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (# if DO_GUARD_SLOW)",
    "insertText": "switch(ShaderRHI->GetFrequency())"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Mesh :)",
    "insertText": "checkSlow(PersistentState.BoundShaderInput.GetMeshShader() == ShaderRHI)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Amplification :)",
    "insertText": "checkSlow(PersistentState.BoundShaderInput.GetAmplificationShader() == ShaderRHI)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Pixel :)",
    "insertText": "checkSlow(PersistentState.BoundShaderInput.PixelShaderRHI == ShaderRHI)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Geometry :)",
    "insertText": "checkSlow(PersistentState.BoundShaderInput.GetGeometryShader() == ShaderRHI)"
  },
  {
    "label": "checkfSlow()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "checkfSlow(false, TEXT(\"Unexpected graphics shader type %d\"), ShaderRHI->GetFrequency())"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "ValidateShaderParameters(const FRHIBatchedShaderParameters& ShaderParameters)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if RHI_VALIDATE_BATCHED_SHADER_PARAMETERS)",
    "insertText": "check(this == &ShaderParameters.Allocator.RHICmdList)"
  },
  {
    "label": "ValidateShaderBundleComputeDispatch()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "ValidateShaderBundleComputeDispatch(TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if RHI_VALIDATE_BATCHED_SHADER_PARAMETERS)",
    "insertText": "for(const FRHIShaderBundleComputeDispatch& Dispatch : Dispatches)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(*Dispatch.Parameters)"
  },
  {
    "label": "CacheActiveRenderTargets()",
    "kind": "Method",
    "detail": "Function (} } # endif } void)",
    "insertText": "CacheActiveRenderTargets(const FRHIRenderPassInfo& Info)"
  },
  {
    "label": "ConvertToRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (FRHISetRenderTargetsInfo RTInfo ; Info .)",
    "insertText": "ConvertToRenderTargetsInfo(RTInfo)"
  },
  {
    "label": "IncrementSubpass()",
    "kind": "Method",
    "detail": "Function (PersistentState . CachedRenderTargets [ RTIdx ] = RTInfo . ColorRenderTarget [ RTIdx ] ; } PersistentState . CachedNumSimultanousRenderTargets = RTInfo . NumColorRenderTargets ; PersistentState . CachedDepthStencilTarget = RTInfo . DepthStencilRenderTarget ; PersistentState . bHasFragmentDensityAttachment = RTInfo . ShadingRateTexture ! = nullptr ; PersistentState . MultiViewCount = RTInfo . MultiViewCount ; } void)",
    "insertText": "IncrementSubpass()"
  },
  {
    "label": "ResetSubpass()",
    "kind": "Method",
    "detail": "Function (PersistentState . SubpassIndex + + ; } void)",
    "insertText": "ResetSubpass(ESubpassHint SubpassHint)"
  },
  {
    "label": "FShaderParameterState()",
    "kind": "Method",
    "detail": "Function (PersistentState . SubpassHint = SubpassHint ; PersistentState . SubpassIndex = 0 ; } protected : FRHICommandBase* Root = nullptr ; FRHICommandBase** CommandLink = nullptr ; IRHICommandContext* GraphicsContext = nullptr ; IRHIComputeContext* ComputeContext = nullptr ; IRHIUploadContext* UploadContext = nullptr ; FRHIContextArray Contexts { InPlace,nullptr } ; uint32 NumCommands = 0 ; bool bExecuting = false ; bool bAllowParallelTranslate = true ; bool bUsesSetTrackedAccess = false ; bool bUsesShaderBundles = false ; bool bUsesLockFence = false ; ERHIPipeline ActivePipelines = ERHIPipeline::None ; # if DO_CHECK ERHIPipeline AllowedPipelines = ERHIPipeline::All ; # endif struct FRHICommandRHIThreadFence* LastLockFenceCommand = nullptr ; FGraphEventRef DispatchEvent ; struct FShaderParameterState { FRHIBatchedShaderParameters* ScratchShaderParameters = nullptr ; FRHIBatchedShaderParametersAllocator* AllocatorsRoot = nullptr ;)",
    "insertText": "FShaderParameterState()"
  },
  {
    "label": "FShaderParameterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderParameterState(FShaderParameterState&& RHS)"
  },
  {
    "label": "FRHIBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (ScratchShaderParameters -> ~)",
    "insertText": "FRHIBatchedShaderParameters()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ScratchShaderParameters = nullptr ; })",
    "insertText": "for(FRHIBatchedShaderParametersAllocator* Node = AllocatorsRoot; Node; Node = Node->Next)"
  },
  {
    "label": "FRHIBatchedShaderParametersAllocator()",
    "kind": "Method",
    "detail": "Function (Node -> ~)",
    "insertText": "FRHIBatchedShaderParametersAllocator()"
  },
  {
    "label": "FPersistentState()",
    "kind": "Method",
    "detail": "Function (} AllocatorsRoot = nullptr ; } } ; FShaderParameterState ShaderParameterState ; FRHIBatchedShaderUnbinds ScratchShaderUnbinds ; # if WITH_RHI_BREADCRUMBS struct { FRHIBreadcrumbNode* Current = FRHIBreadcrumbNode::Sentinel ; FRHIBreadcrumbList UnknownParentList { } ; bool bEmitBreadcrumbs = false ; } CPUBreadcrumbState { } ; struct FBreadcrumbState { FRHIBreadcrumbNode* Current = FRHIBreadcrumbNode::Sentinel ; TOptional<FRHIBreadcrumbNode*> Latest { } ; FRHIBreadcrumbNode* Prev = nullptr ; FRHIBreadcrumbRange Range { } ; } ; TRHIPipelineArray<FBreadcrumbState> GPUBreadcrumbState { InPlace } ; FRHIBreadcrumbAllocatorArray BreadcrumbAllocatorRefs { } ; TSharedPtr<FRHIBreadcrumbAllocator> BreadcrumbAllocator ; struct FActivatePipelineCommand { FActivatePipelineCommand* Next = nullptr ; FRHIBreadcrumbNode* Target = nullptr ; ERHIPipeline Pipelines ; } ; struct { FActivatePipelineCommand* First = nullptr ; FActivatePipelineCommand* Prev = nullptr ; } ActivatePipelineCommands { } ; # endif # if HAS_GPU_STATS TOptional<FRHIDrawStatsCategory const*> InitialDrawStatsCategory { } ; # endif struct FPersistentState { uint32 CachedNumSimultanousRenderTargets = 0 ; TStaticArray<FRHIRenderTargetView,MaxSimultaneousRenderTargets> CachedRenderTargets ; FRHIDepthRenderTargetView CachedDepthStencilTarget ; ESubpassHint SubpassHint = ESubpassHint::None ; uint8 SubpassIndex = 0 ; uint8 MultiViewCount = 0 ; uint8 bHasFragmentDensityAttachment : 1 ; uint8 bInsideRenderPass : 1 ; uint8 bInsideComputePass : 1 ; uint8 bInsideOcclusionQueryBatch : 1 ; uint8 bRecursive : 1 ; uint8 bImmediate : 1 ; FRHIGPUMask CurrentGPUMask ; FRHIGPUMask InitialGPUMask ; FBoundShaderStateInput BoundShaderInput ; FRHIComputeShader* BoundComputeShaderRHI = nullptr ; FRHIWorkGraphShader* BoundWorkGraphShaderRHI = nullptr ; # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbNode* LocalBreadcrumb = FRHIBreadcrumbNode::Sentinel ; # endif # if HAS_GPU_STATS TOptional<FRHIDrawStatsCategory const*> CurrentDrawStatsCategory { } ; # endif TStaticArray<void*,MAX_NUM_GPUS> QueryBatchData_Timestamp { InPlace,nullptr } ; TStaticArray<void*,MAX_NUM_GPUS> QueryBatchData_Occlusion { InPlace,nullptr } ;)",
    "insertText": "FPersistentState(FRHIGPUMask InInitialGPUMask, bool bInImmediate = false) : bHasFragmentDensityAttachment(0) , bInsideRenderPass(0) , bInsideComputePass(0) , bInsideOcclusionQueryBatch(0) , bRecursive(0) , bImmediate(bInImmediate) , CurrentGPUMask(InInitialGPUMask) , InitialGPUMask(InInitialGPUMask)"
  },
  {
    "label": "GetCurrentBreadcrumbRef()",
    "kind": "Method",
    "detail": "Function (} } PersistentState ; FRHIDrawStats DrawStats { } ; public : # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbEventManual ; FRHIBreadcrumbEventScope ; FRHIBreadcrumbNode*&)",
    "insertText": "GetCurrentBreadcrumbRef()"
  },
  {
    "label": "Stats_AddDraw()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Stats_AddDraw()"
  },
  {
    "label": "AddDraw()",
    "kind": "Method",
    "detail": "Function (# if HAS_GPU_STATS DrawStats .)",
    "insertText": "AddDraw(PersistentState.CurrentGPUMask, PersistentState.CurrentDrawStatsCategory.GetValue())"
  },
  {
    "label": "AddDraw()",
    "kind": "Method",
    "detail": "Function (# else DrawStats .)",
    "insertText": "AddDraw(PersistentState.CurrentGPUMask, nullptr)"
  },
  {
    "label": "Stats_AddDrawAndPrimitives()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "Stats_AddDrawAndPrimitives(EPrimitiveType PrimitiveType, uint32 NumPrimitives)"
  },
  {
    "label": "AddDrawAndPrimitives()",
    "kind": "Method",
    "detail": "Function (# if HAS_GPU_STATS DrawStats .)",
    "insertText": "AddDrawAndPrimitives(PersistentState.CurrentGPUMask, PersistentState.CurrentDrawStatsCategory.GetValue(), PrimitiveType, NumPrimitives)"
  },
  {
    "label": "AddDrawAndPrimitives()",
    "kind": "Method",
    "detail": "Function (# else DrawStats .)",
    "insertText": "AddDrawAndPrimitives(PersistentState.CurrentGPUMask, nullptr, PrimitiveType, NumPrimitives)"
  },
  {
    "label": "GetQueryBatchData()",
    "kind": "Method",
    "detail": "Function (# endif } TStaticArray<void*,MAX_NUM_GPUS>&)",
    "insertText": "GetQueryBatchData(ERenderQueryType QueryType)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "FRHICommandListBase()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case RQT_AbsoluteTime : return PersistentState . QueryBatchData_Timestamp ; case RQT_Occlusion : return PersistentState . QueryBatchData_Occlusion ; } } private :)",
    "insertText": "FRHICommandListBase(FPersistentState const& InPersistentState)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute()"
  },
  {
    "label": "ShouldEmitBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (class FRHICommandListExecutor ; class FRHICommandListIterator ; class FRHICommandListScopedFlushAndExecute ; class FRHIComputeCommandList ; class FRHICommandListImmediate ; class FRHICommandList_RecursiveHazardous ; class FRHIComputeCommandList_RecursiveHazardous ; struct FRHICommandSetGPUMask ; template<RHICmdListType,LAMBDA> struct TRHILambdaCommandMultiPipe ; # if WITH_RHI_BREADCRUMBS bool)",
    "insertText": "ShouldEmitBreadcrumbs()"
  },
  {
    "label": "TStr()",
    "kind": "Method",
    "detail": "Function (} # endif struct FUnnamedRhiCommand { const TCHAR*)",
    "insertText": "TStr()"
  },
  {
    "label": "FRHICommand()",
    "kind": "Method",
    "detail": "Function (} } ; template<TCmd,NameType = FUnnamedRhiCommand> struct FRHICommand : public FRHICommandBase { # if RHICOMMAND_CALLSTACK uint64 StackFrames [ 1 6 ] ;)",
    "insertText": "FRHICommand()"
  },
  {
    "label": "CaptureStackBackTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureStackBackTrace(StackFrames, 16)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CommandList/ExecuteAndDestruct\"))"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL_STR(NameType::TStr(), RHICommandsChannel)"
  },
  {
    "label": "TCmd()",
    "kind": "Method",
    "detail": "Function (TCmd* ThisCmd = static_cast<)",
    "insertText": "TCmd(this)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (ThisCmd ->)",
    "insertText": "Execute(CmdList)"
  },
  {
    "label": "TCmd()",
    "kind": "Method",
    "detail": "Function (ThisCmd -> ~)",
    "insertText": "TCmd()"
  },
  {
    "label": "FRHICOMMAND_UNNAMED()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "FRHICOMMAND_UNNAMED(CommandName) \\ struct CommandName final : public FRHICommand<CommandName, FUnnamedRhiCommand> #define FRHICOMMAND_UNNAMED_TPL(TemplateType, CommandName) \\ template<typename TemplateType> \\ struct CommandName final : public FRHICommand<CommandName<TemplateType>, FUnnamedRhiCommand> #define FRHICOMMAND_MACRO(CommandName) \\ struct PREPROCESSOR_JOIN(CommandName##String, __LINE__)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ struct CommandName final : public FRHICommand<CommandName,)",
    "insertText": "PREPROCESSOR_JOIN(CommandName##String, __LINE__)> #define FRHICOMMAND_MACRO_TPL(TemplateType, CommandName) \\ struct PREPROCESSOR_JOIN(CommandName##String, __LINE__)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ template<TemplateType> \\ struct CommandName final : public FRHICommand<CommandName<TemplateType>,)",
    "insertText": "PREPROCESSOR_JOIN(CommandName##String, __LINE__)> FRHICOMMAND_MACRO(FRHICommandBeginUpdateMultiFrameResource)"
  },
  {
    "label": "FRHICommandBeginUpdateMultiFrameResource()",
    "kind": "Method",
    "detail": "Function (FRHITexture* Texture ;)",
    "insertText": "FRHICommandBeginUpdateMultiFrameResource(FRHITexture* InTexture) : Texture(InTexture)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute(FRHICommandListBase& CmdList)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndUpdateMultiFrameResource)"
  },
  {
    "label": "FRHICommandEndUpdateMultiFrameResource()",
    "kind": "Method",
    "detail": "Function (FRHITexture* Texture ;)",
    "insertText": "FRHICommandEndUpdateMultiFrameResource(FRHITexture* InTexture) : Texture(InTexture)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginUpdateMultiFrameUAV)"
  },
  {
    "label": "FRHICommandBeginUpdateMultiFrameUAV()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView* UAV ;)",
    "insertText": "FRHICommandBeginUpdateMultiFrameUAV(FRHIUnorderedAccessView* InUAV) : UAV(InUAV)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndUpdateMultiFrameUAV)"
  },
  {
    "label": "FRHICommandEndUpdateMultiFrameUAV()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView* UAV ;)",
    "insertText": "FRHICommandEndUpdateMultiFrameUAV(FRHIUnorderedAccessView* InUAV) : UAV(InUAV)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_MGPU)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetGPUMask)"
  },
  {
    "label": "FRHICommandSetGPUMask()",
    "kind": "Method",
    "detail": "Function (FRHIGPUMask GPUMask ;)",
    "insertText": "FRHICommandSetGPUMask(FRHIGPUMask InGPUMask) : GPUMask(InGPUMask)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandTransferResources)"
  },
  {
    "label": "FRHICommandTransferResources()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FTransferResourceParams> Params ;)",
    "insertText": "FRHICommandTransferResources(TConstArrayView<FTransferResourceParams> InParams) : Params(InParams)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandTransferResourceSignal)"
  },
  {
    "label": "FRHICommandTransferResourceSignal()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FTransferResourceFenceData*> FenceDatas ; FRHIGPUMask SrcGPUMask ;)",
    "insertText": "FRHICommandTransferResourceSignal(TConstArrayView<FTransferResourceFenceData*> InFenceDatas, FRHIGPUMask InSrcGPUMask) : FenceDatas(InFenceDatas) , SrcGPUMask(InSrcGPUMask)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Execute(FRHICommandListBase & CmdList)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandTransferResourceWait)"
  },
  {
    "label": "FRHICommandTransferResourceWait()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FTransferResourceFenceData*> FenceDatas ;)",
    "insertText": "FRHICommandTransferResourceWait(TConstArrayView<FTransferResourceFenceData*> InFenceDatas) : FenceDatas(InFenceDatas)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCrossGPUTransfer)"
  },
  {
    "label": "FRHICommandCrossGPUTransfer()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FTransferResourceParams> Params ; TConstArrayView<FCrossGPUTransferFence*> PreTransfer ; TConstArrayView<FCrossGPUTransferFence*> PostTransfer ;)",
    "insertText": "FRHICommandCrossGPUTransfer(TConstArrayView<FTransferResourceParams> InParams, TConstArrayView<FCrossGPUTransferFence*> InPreTransfer, TConstArrayView<FCrossGPUTransferFence*> InPostTransfer) : Params(InParams) , PreTransfer(InPreTransfer) , PostTransfer(InPostTransfer)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCrossGPUTransferSignal)"
  },
  {
    "label": "FRHICommandCrossGPUTransferSignal()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FTransferResourceParams> Params ; TConstArrayView<FCrossGPUTransferFence*> PreTransfer ;)",
    "insertText": "FRHICommandCrossGPUTransferSignal(TConstArrayView<FTransferResourceParams> InParams, TConstArrayView<FCrossGPUTransferFence*> InPreTransfer) : Params(InParams) , PreTransfer(InPreTransfer)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCrossGPUTransferWait)"
  },
  {
    "label": "FRHICommandCrossGPUTransferWait()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FCrossGPUTransferFence*> SyncPoints ;)",
    "insertText": "FRHICommandCrossGPUTransferWait(TConstArrayView<FCrossGPUTransferFence*> InSyncPoints) : SyncPoints(InSyncPoints)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetStencilRef)"
  },
  {
    "label": "FRHICommandSetStencilRef()",
    "kind": "Method",
    "detail": "Function (uint32 StencilRef ;)",
    "insertText": "FRHICommandSetStencilRef(uint32 InStencilRef) : StencilRef(InStencilRef)"
  },
  {
    "label": "FRHICOMMAND_MACRO_TPL()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO_TPL(TRHIShader, FRHICommandSetShaderParameters)"
  },
  {
    "label": "FRHICommandSetShaderParameters()",
    "kind": "Method",
    "detail": "Function (TRHIShader* Shader ; TConstArrayView<uint8> ParametersData ; TConstArrayView<FRHIShaderParameter> Parameters ; TConstArrayView<FRHIShaderParameterResource> ResourceParameters ; TConstArrayView<FRHIShaderParameterResource> BindlessParameters ;)",
    "insertText": "FRHICommandSetShaderParameters(TRHIShader* InShader , TConstArrayView<uint8> InParametersData , TConstArrayView<FRHIShaderParameter> InParameters , TConstArrayView<FRHIShaderParameterResource> InResourceParameters , TConstArrayView<FRHIShaderParameterResource> InBindlessParameters ) : Shader(InShader) , ParametersData(InParametersData) , Parameters(InParameters) , ResourceParameters(InResourceParameters) , BindlessParameters(InBindlessParameters)"
  },
  {
    "label": "FRHICOMMAND_MACRO_TPL()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO_TPL(TRHIShader, FRHICommandSetShaderUnbinds)"
  },
  {
    "label": "FRHICommandSetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (TRHIShader* Shader ; TConstArrayView<FRHIShaderParameterUnbind> Unbinds ;)",
    "insertText": "FRHICommandSetShaderUnbinds(TRHIShader * InShader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds) : Shader(InShader) , Unbinds(InUnbinds)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDrawPrimitive)"
  },
  {
    "label": "FRHICommandDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (uint32 BaseVertexIndex ; uint32 NumPrimitives ; uint32 NumInstances ;)",
    "insertText": "FRHICommandDrawPrimitive(uint32 InBaseVertexIndex, uint32 InNumPrimitives, uint32 InNumInstances) : BaseVertexIndex(InBaseVertexIndex) , NumPrimitives(InNumPrimitives) , NumInstances(InNumInstances)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDrawIndexedPrimitive)"
  },
  {
    "label": "FRHICommandDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* IndexBuffer ; int32 BaseVertexIndex ; uint32 FirstInstance ; uint32 NumVertices ; uint32 StartIndex ; uint32 NumPrimitives ; uint32 NumInstances ;)",
    "insertText": "FRHICommandDrawIndexedPrimitive(FRHIBuffer* InIndexBuffer, int32 InBaseVertexIndex, uint32 InFirstInstance, uint32 InNumVertices, uint32 InStartIndex, uint32 InNumPrimitives, uint32 InNumInstances) : IndexBuffer(InIndexBuffer) , BaseVertexIndex(InBaseVertexIndex) , FirstInstance(InFirstInstance) , NumVertices(InNumVertices) , StartIndex(InStartIndex) , NumPrimitives(InNumPrimitives) , NumInstances(InNumInstances)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetBlendFactor)"
  },
  {
    "label": "FRHICommandSetBlendFactor()",
    "kind": "Method",
    "detail": "Function (FLinearColor BlendFactor ;)",
    "insertText": "FRHICommandSetBlendFactor(const FLinearColor& InBlendFactor) : BlendFactor(InBlendFactor)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetStreamSource)"
  },
  {
    "label": "FRHICommandSetStreamSource()",
    "kind": "Method",
    "detail": "Function (uint32 StreamIndex ; FRHIBuffer* VertexBuffer ; uint32 Offset ;)",
    "insertText": "FRHICommandSetStreamSource(uint32 InStreamIndex, FRHIBuffer* InVertexBuffer, uint32 InOffset) : StreamIndex(InStreamIndex) , VertexBuffer(InVertexBuffer) , Offset(InOffset)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetViewport)"
  },
  {
    "label": "FRHICommandSetViewport()",
    "kind": "Method",
    "detail": "Function (float MinX ; float MinY ; float MinZ ; float MaxX ; float MaxY ; float MaxZ ;)",
    "insertText": "FRHICommandSetViewport(float InMinX, float InMinY, float InMinZ, float InMaxX, float InMaxY, float InMaxZ) : MinX(InMinX) , MinY(InMinY) , MinZ(InMinZ) , MaxX(InMaxX) , MaxY(InMaxY) , MaxZ(InMaxZ)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetStereoViewport)"
  },
  {
    "label": "FRHICommandSetStereoViewport()",
    "kind": "Method",
    "detail": "Function (float LeftMinX ; float RightMinX ; float LeftMinY ; float RightMinY ; float MinZ ; float LeftMaxX ; float RightMaxX ; float LeftMaxY ; float RightMaxY ; float MaxZ ;)",
    "insertText": "FRHICommandSetStereoViewport(float InLeftMinX, float InRightMinX, float InLeftMinY, float InRightMinY, float InMinZ, float InLeftMaxX, float InRightMaxX, float InLeftMaxY, float InRightMaxY, float InMaxZ) : LeftMinX(InLeftMinX) , RightMinX(InRightMinX) , LeftMinY(InLeftMinY) , RightMinY(InRightMinY) , MinZ(InMinZ) , LeftMaxX(InLeftMaxX) , RightMaxX(InRightMaxX) , LeftMaxY(InLeftMaxY) , RightMaxY(InRightMaxY) , MaxZ(InMaxZ)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetScissorRect)"
  },
  {
    "label": "FRHICommandSetScissorRect()",
    "kind": "Method",
    "detail": "Function (bool bEnable ; uint32 MinX ; uint32 MinY ; uint32 MaxX ; uint32 MaxY ;)",
    "insertText": "FRHICommandSetScissorRect(bool InbEnable, uint32 InMinX, uint32 InMinY, uint32 InMaxX, uint32 InMaxY) : bEnable(InbEnable) , MinX(InMinX) , MinY(InMinY) , MaxX(InMaxX) , MaxY(InMaxY)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginRenderPass)"
  },
  {
    "label": "FRHICommandBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (FRHIRenderPassInfo Info ; const TCHAR* Name ;)",
    "insertText": "FRHICommandBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName) : Info(InInfo) , Name(InName)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndRenderPass)"
  },
  {
    "label": "FRHICommandEndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHICommandEndRenderPass()"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandNextSubpass)"
  },
  {
    "label": "FRHICommandNextSubpass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHICommandNextSubpass()"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetComputePipelineState)"
  },
  {
    "label": "FRHICommandSetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineState* ComputePipelineState ;)",
    "insertText": "FRHICommandSetComputePipelineState(FComputePipelineState* InComputePipelineState) : ComputePipelineState(InComputePipelineState)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetGraphicsPipelineState)"
  },
  {
    "label": "FRHICommandSetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineState* GraphicsPipelineState ; uint32 StencilRef ; bool bApplyAdditionalState ;)",
    "insertText": "FRHICommandSetGraphicsPipelineState(FGraphicsPipelineState* InGraphicsPipelineState, uint32 InStencilRef, bool bInApplyAdditionalState) : GraphicsPipelineState(InGraphicsPipelineState) , StencilRef(InStencilRef) , bApplyAdditionalState(bInApplyAdditionalState)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ; # if PLATFORM_USE_FALLBACK_PSO)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetGraphicsPipelineStateFromInitializer)"
  },
  {
    "label": "FRHICommandSetGraphicsPipelineStateFromInitializer()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateInitializer PsoInit ; uint32 StencilRef ; bool bApplyAdditionalState ;)",
    "insertText": "FRHICommandSetGraphicsPipelineStateFromInitializer(const FGraphicsPipelineStateInitializer& InPsoInit, uint32 InStencilRef, bool bInApplyAdditionalState) : PsoInit(InPsoInit) , StencilRef(InStencilRef) , bApplyAdditionalState(bInApplyAdditionalState)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDispatchComputeShader)"
  },
  {
    "label": "FRHICommandDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (uint32 ThreadGroupCountX ; uint32 ThreadGroupCountY ; uint32 ThreadGroupCountZ ;)",
    "insertText": "FRHICommandDispatchComputeShader(uint32 InThreadGroupCountX, uint32 InThreadGroupCountY, uint32 InThreadGroupCountZ) : ThreadGroupCountX(InThreadGroupCountX) , ThreadGroupCountY(InThreadGroupCountY) , ThreadGroupCountZ(InThreadGroupCountZ)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDispatchIndirectComputeShader)"
  },
  {
    "label": "FRHICommandDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* ArgumentBuffer ; uint32 ArgumentOffset ;)",
    "insertText": "FRHICommandDispatchIndirectComputeShader(FRHIBuffer* InArgumentBuffer, uint32 InArgumentOffset) : ArgumentBuffer(InArgumentBuffer) , ArgumentOffset(InArgumentOffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using FRHIRecordBundleComputeDispatchCallback = TFunction<)",
    "insertText": "void(FRHIShaderBundleComputeDispatch& Dispatch)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FRHIRecordBundleGraphicsDispatchCallback = TFunction<)",
    "insertText": "void(FRHIShaderBundleGraphicsDispatch& Dispatch)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDispatchComputeShaderBundle)"
  },
  {
    "label": "FRHICommandDispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (FRHIShaderBundle* ShaderBundle ; FRHIBuffer* RecordArgBuffer ; TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters ; TArray<FRHIShaderBundleComputeDispatch> Dispatches ; bool bEmulated ;)",
    "insertText": "FRHICommandDispatchComputeShaderBundle() : ShaderBundle(nullptr) , RecordArgBuffer(nullptr) , bEmulated(true)"
  },
  {
    "label": "FRHICommandDispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandDispatchComputeShaderBundle(FRHIShaderBundle* InShaderBundle, FRHIBuffer* InRecordArgBuffer, TConstArrayView<FRHIShaderParameterResource> InSharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> InDispatches, bool bInEmulated ) : ShaderBundle(InShaderBundle) , RecordArgBuffer(InRecordArgBuffer) , SharedBindlessParameters(InSharedBindlessParameters) , Dispatches(InDispatches) , bEmulated(bInEmulated)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDispatchGraphicsShaderBundle)"
  },
  {
    "label": "FRHICommandDispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (FRHIShaderBundle* ShaderBundle ; FRHIBuffer* RecordArgBuffer ; FRHIShaderBundleGraphicsState BundleState ; TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters ; TArray<FRHIShaderBundleGraphicsDispatch> Dispatches ; bool bEmulated ;)",
    "insertText": "FRHICommandDispatchGraphicsShaderBundle() : ShaderBundle(nullptr) , RecordArgBuffer(nullptr) , bEmulated(true)"
  },
  {
    "label": "FRHICommandDispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandDispatchGraphicsShaderBundle(FRHIShaderBundle* InShaderBundle, FRHIBuffer* InRecordArgBuffer, const FRHIShaderBundleGraphicsState& InBundleState, TConstArrayView<FRHIShaderParameterResource> InSharedBindlessParameters, TConstArrayView<FRHIShaderBundleGraphicsDispatch> InDispatches, bool bInEmulated ) : ShaderBundle(InShaderBundle) , RecordArgBuffer(InRecordArgBuffer) , BundleState(InBundleState) , SharedBindlessParameters(InSharedBindlessParameters) , Dispatches(InDispatches) , bEmulated(bInEmulated)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetShaderRootConstants)"
  },
  {
    "label": "FRHICommandSetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (const FUint32Vector4 Constants ;)",
    "insertText": "FRHICommandSetShaderRootConstants() : Constants()"
  },
  {
    "label": "FRHICommandSetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandSetShaderRootConstants(const FUint32Vector4 InConstants ) : Constants(InConstants)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginUAVOverlap)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndUAVOverlap)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginSpecificUAVOverlap)"
  },
  {
    "label": "FRHICommandBeginSpecificUAVOverlap()",
    "kind": "Method",
    "detail": "Function (TArrayView<FRHIUnorderedAccessView* const> UAVs ;)",
    "insertText": "FRHICommandBeginSpecificUAVOverlap(TArrayView<FRHIUnorderedAccessView* const> InUAVs) : UAVs(InUAVs)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndSpecificUAVOverlap)"
  },
  {
    "label": "FRHICommandEndSpecificUAVOverlap()",
    "kind": "Method",
    "detail": "Function (TArrayView<FRHIUnorderedAccessView* const> UAVs ;)",
    "insertText": "FRHICommandEndSpecificUAVOverlap(TArrayView<FRHIUnorderedAccessView* const> InUAVs) : UAVs(InUAVs)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDrawPrimitiveIndirect)"
  },
  {
    "label": "FRHICommandDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* ArgumentBuffer ; uint32 ArgumentOffset ;)",
    "insertText": "FRHICommandDrawPrimitiveIndirect(FRHIBuffer* InArgumentBuffer, uint32 InArgumentOffset) : ArgumentBuffer(InArgumentBuffer) , ArgumentOffset(InArgumentOffset)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDrawIndexedIndirect)"
  },
  {
    "label": "FRHICommandDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* IndexBufferRHI ; FRHIBuffer* ArgumentsBufferRHI ; uint32 DrawArgumentsIndex ; uint32 NumInstances ;)",
    "insertText": "FRHICommandDrawIndexedIndirect(FRHIBuffer* InIndexBufferRHI, FRHIBuffer* InArgumentsBufferRHI, uint32 InDrawArgumentsIndex, uint32 InNumInstances) : IndexBufferRHI(InIndexBufferRHI) , ArgumentsBufferRHI(InArgumentsBufferRHI) , DrawArgumentsIndex(InDrawArgumentsIndex) , NumInstances(InNumInstances)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDrawIndexedPrimitiveIndirect)"
  },
  {
    "label": "FRHICommandDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* IndexBuffer ; FRHIBuffer* ArgumentsBuffer ; uint32 ArgumentOffset ;)",
    "insertText": "FRHICommandDrawIndexedPrimitiveIndirect(FRHIBuffer* InIndexBuffer, FRHIBuffer* InArgumentsBuffer, uint32 InArgumentOffset) : IndexBuffer(InIndexBuffer) , ArgumentsBuffer(InArgumentsBuffer) , ArgumentOffset(InArgumentOffset)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandMultiDrawIndexedPrimitiveIndirect)"
  },
  {
    "label": "FRHICommandMultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* IndexBuffer ; FRHIBuffer* ArgumentBuffer ; uint32 ArgumentOffset ; FRHIBuffer* CountBuffer ; uint32 CountBufferOffset ; uint32 MaxDrawArguments ;)",
    "insertText": "FRHICommandMultiDrawIndexedPrimitiveIndirect(FRHIBuffer* InIndexBuffer, FRHIBuffer* InArgumentBuffer, uint32 InArgumentOffset, FRHIBuffer* InCountBuffer, uint32 InCountBufferOffset, uint32 InMaxDrawArguments) : IndexBuffer(InIndexBuffer) , ArgumentBuffer(InArgumentBuffer) , ArgumentOffset(InArgumentOffset) , CountBuffer(InCountBuffer) , CountBufferOffset(InCountBufferOffset) , MaxDrawArguments(InMaxDrawArguments)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDispatchMeshShader)"
  },
  {
    "label": "FRHICommandDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (uint32 ThreadGroupCountX ; uint32 ThreadGroupCountY ; uint32 ThreadGroupCountZ ;)",
    "insertText": "FRHICommandDispatchMeshShader(uint32 InThreadGroupCountX, uint32 InThreadGroupCountY, uint32 InThreadGroupCountZ) : ThreadGroupCountX(InThreadGroupCountX) , ThreadGroupCountY(InThreadGroupCountY) , ThreadGroupCountZ(InThreadGroupCountZ)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDispatchIndirectMeshShader)"
  },
  {
    "label": "FRHICommandDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* ArgumentBuffer ; uint32 ArgumentOffset ;)",
    "insertText": "FRHICommandDispatchIndirectMeshShader(FRHIBuffer * InArgumentBuffer, uint32 InArgumentOffset) : ArgumentBuffer(InArgumentBuffer) , ArgumentOffset(InArgumentOffset)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetDepthBounds)"
  },
  {
    "label": "FRHICommandSetDepthBounds()",
    "kind": "Method",
    "detail": "Function (float MinDepth ; float MaxDepth ;)",
    "insertText": "FRHICommandSetDepthBounds(float InMinDepth, float InMaxDepth) : MinDepth(InMinDepth) , MaxDepth(InMaxDepth)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetShadingRate)"
  },
  {
    "label": "FRHICommandSetShadingRate()",
    "kind": "Method",
    "detail": "Function (EVRSShadingRate ShadingRate ; EVRSRateCombiner Combiner ;)",
    "insertText": "FRHICommandSetShadingRate(EVRSShadingRate InShadingRate, EVRSRateCombiner InCombiner) : ShadingRate(InShadingRate), Combiner(InCombiner)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandClearUAVFloat)"
  },
  {
    "label": "FRHICommandClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView* UnorderedAccessViewRHI ; FVector4f Values ;)",
    "insertText": "FRHICommandClearUAVFloat(FRHIUnorderedAccessView* InUnorderedAccessViewRHI, const FVector4f& InValues) : UnorderedAccessViewRHI(InUnorderedAccessViewRHI) , Values(InValues)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandClearUAVUint)"
  },
  {
    "label": "FRHICommandClearUAVUint()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView* UnorderedAccessViewRHI ; FUintVector4 Values ;)",
    "insertText": "FRHICommandClearUAVUint(FRHIUnorderedAccessView* InUnorderedAccessViewRHI, const FUintVector4& InValues) : UnorderedAccessViewRHI(InUnorderedAccessViewRHI) , Values(InValues)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCopyTexture)"
  },
  {
    "label": "FRHICommandCopyTexture()",
    "kind": "Method",
    "detail": "Function (FRHICopyTextureInfo CopyInfo ; FRHITexture* SourceTexture ; FRHITexture* DestTexture ;)",
    "insertText": "FRHICommandCopyTexture(FRHITexture* InSourceTexture, FRHITexture* InDestTexture, const FRHICopyTextureInfo& InCopyInfo) : CopyInfo(InCopyInfo) , SourceTexture(InSourceTexture) , DestTexture(InDestTexture)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandResummarizeHTile)"
  },
  {
    "label": "FRHICommandResummarizeHTile()",
    "kind": "Method",
    "detail": "Function (FRHITexture* DepthTexture ;)",
    "insertText": "FRHICommandResummarizeHTile(FRHITexture* InDepthTexture) : DepthTexture(InDepthTexture)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginTransitions)"
  },
  {
    "label": "FRHICommandBeginTransitions()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FRHITransition*> Transitions ;)",
    "insertText": "FRHICommandBeginTransitions(TArrayView<const FRHITransition*> InTransitions) : Transitions(InTransitions)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndTransitions)"
  },
  {
    "label": "FRHICommandEndTransitions()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FRHITransition*> Transitions ;)",
    "insertText": "FRHICommandEndTransitions(TArrayView<const FRHITransition*> InTransitions) : Transitions(InTransitions)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandResourceTransition)"
  },
  {
    "label": "FRHICommandResourceTransition()",
    "kind": "Method",
    "detail": "Function (FRHITransition* Transition ;)",
    "insertText": "FRHICommandResourceTransition(FRHITransition* InTransition) : Transition(InTransition)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetTrackedAccess)"
  },
  {
    "label": "FRHICommandSetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FRHITrackedAccessInfo> Infos ;)",
    "insertText": "FRHICommandSetTrackedAccess(TArrayView<const FRHITrackedAccessInfo> InInfos) : Infos(InInfos)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetAsyncComputeBudget)"
  },
  {
    "label": "FRHICommandSetAsyncComputeBudget()",
    "kind": "Method",
    "detail": "Function (EAsyncComputeBudget Budget ;)",
    "insertText": "FRHICommandSetAsyncComputeBudget(EAsyncComputeBudget InBudget) : Budget(InBudget)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCopyToStagingBuffer)"
  },
  {
    "label": "FRHICommandCopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* SourceBuffer ; FRHIStagingBuffer* DestinationStagingBuffer ; uint32 Offset ; uint32 NumBytes ;)",
    "insertText": "FRHICommandCopyToStagingBuffer(FRHIBuffer* InSourceBuffer, FRHIStagingBuffer* InDestinationStagingBuffer, uint32 InOffset, uint32 InNumBytes) : SourceBuffer(InSourceBuffer) , DestinationStagingBuffer(InDestinationStagingBuffer) , Offset(InOffset) , NumBytes(InNumBytes)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandWriteGPUFence)"
  },
  {
    "label": "FRHICommandWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (FRHIGPUFence* Fence ;)",
    "insertText": "FRHICommandWriteGPUFence(FRHIGPUFence* InFence) : Fence(InFence)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (Fence -> NumPendingWriteCommands .)",
    "insertText": "Increment()"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetStaticUniformBuffers)"
  },
  {
    "label": "FRHICommandSetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (FUniformBufferStaticBindings UniformBuffers ;)",
    "insertText": "FRHICommandSetStaticUniformBuffers(const FUniformBufferStaticBindings & InUniformBuffers) : UniformBuffers(InUniformBuffers)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetStaticUniformBuffer)"
  },
  {
    "label": "FRHICommandSetStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer* Buffer ; FUniformBufferStaticSlot Slot ;)",
    "insertText": "FRHICommandSetStaticUniformBuffer(FUniformBufferStaticSlot InSlot, FRHIUniformBuffer* InBuffer) : Buffer(InBuffer) , Slot(InSlot)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetUniformBufferDynamicOffset)"
  },
  {
    "label": "FRHICommandSetUniformBufferDynamicOffset()",
    "kind": "Method",
    "detail": "Function (uint32 Offset ; FUniformBufferStaticSlot Slot ;)",
    "insertText": "FRHICommandSetUniformBufferDynamicOffset(FUniformBufferStaticSlot InSlot, uint32 InOffset) : Offset(InOffset) , Slot(InSlot)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginRenderQuery)"
  },
  {
    "label": "FRHICommandBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRHIRenderQuery* RenderQuery ;)",
    "insertText": "FRHICommandBeginRenderQuery(FRHIRenderQuery* InRenderQuery) : RenderQuery(InRenderQuery)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndRenderQuery)"
  },
  {
    "label": "FRHICommandEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRHIRenderQuery* RenderQuery ;)",
    "insertText": "FRHICommandEndRenderQuery(FRHIRenderQuery* InRenderQuery) : RenderQuery(InRenderQuery)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCalibrateTimers)"
  },
  {
    "label": "FRHICommandCalibrateTimers()",
    "kind": "Method",
    "detail": "Function (FRHITimestampCalibrationQuery* CalibrationQuery ;)",
    "insertText": "FRHICommandCalibrateTimers(FRHITimestampCalibrationQuery * CalibrationQuery) : CalibrationQuery(CalibrationQuery)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandPostExternalCommandsReset)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandBeginDrawingViewport)"
  },
  {
    "label": "FRHICommandBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (FRHIViewport* Viewport ; FRHITexture* RenderTargetRHI ;)",
    "insertText": "FRHICommandBeginDrawingViewport(FRHIViewport* InViewport, FRHITexture* InRenderTargetRHI) : Viewport(InViewport) , RenderTargetRHI(InRenderTargetRHI)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandEndDrawingViewport)"
  },
  {
    "label": "FRHICommandEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (FRHIViewport* Viewport ; bool bPresent ; bool bLockToVsync ;)",
    "insertText": "FRHICommandEndDrawingViewport(FRHIViewport* InViewport, bool InbPresent, bool InbLockToVsync) : Viewport(InViewport) , bPresent(InbPresent) , bLockToVsync(InbLockToVsync)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandDiscardRenderTargets)"
  },
  {
    "label": "FRHICommandDiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (uint32 ColorBitMask ; bool Depth ; bool Stencil ;)",
    "insertText": "FRHICommandDiscardRenderTargets(bool InDepth, bool InStencil, uint32 InColorBitMask) : ColorBitMask(InColorBitMask) , Depth(InDepth) , Stencil(InStencil)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCopyBufferRegion)"
  },
  {
    "label": "FRHICommandCopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* DestBuffer ; uint64 DstOffset ; FRHIBuffer* SourceBuffer ; uint64 SrcOffset ; uint64 NumBytes ;)",
    "insertText": "FRHICommandCopyBufferRegion(FRHIBuffer* InDestBuffer, uint64 InDstOffset, FRHIBuffer* InSourceBuffer, uint64 InSrcOffset, uint64 InNumBytes) : DestBuffer(InDestBuffer) , DstOffset(InDstOffset) , SourceBuffer(InSourceBuffer) , SrcOffset(InSrcOffset) , NumBytes(InNumBytes)"
  },
  {
    "label": "FRHICOMMAND_UNNAMED()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_UNNAMED(FRHICommandBindAccelerationStructureMemory)"
  },
  {
    "label": "FRHICommandBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingScene* Scene ; FRHIBuffer* Buffer ; uint32 BufferOffset ;)",
    "insertText": "FRHICommandBindAccelerationStructureMemory(FRHIRayTracingScene* InScene, FRHIBuffer* InBuffer, uint32 InBufferOffset) : Scene(InScene) , Buffer(InBuffer) , BufferOffset(InBufferOffset)"
  },
  {
    "label": "FRHICOMMAND_UNNAMED()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_UNNAMED(FRHICommandBuildAccelerationStructure)"
  },
  {
    "label": "FRHICommandBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (FRayTracingSceneBuildParams SceneBuildParams ;)",
    "insertText": "FRHICommandBuildAccelerationStructure(FRayTracingSceneBuildParams InSceneBuildParams) : SceneBuildParams(MoveTemp(InSceneBuildParams))"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCommitRayTracingBindings)"
  },
  {
    "label": "FRHICommandCommitRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingScene* Scene ;)",
    "insertText": "FRHICommandCommitRayTracingBindings(FRHIRayTracingScene* InScene) : Scene(InScene)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandCommitShaderBindingTable)"
  },
  {
    "label": "FRHICommandCommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (FRHIShaderBindingTable* SBT ;)",
    "insertText": "FRHICommandCommitShaderBindingTable(FRHIShaderBindingTable* InSBT) : SBT(InSBT)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandClearRayTracingBindings)"
  },
  {
    "label": "FRHICommandClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingScene* Scene ;)",
    "insertText": "FRHICommandClearRayTracingBindings(FRHIRayTracingScene* InScene) : Scene(InScene)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandClearShaderBindingTable)"
  },
  {
    "label": "FRHICommandClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (FRHIShaderBindingTable* SBT ;)",
    "insertText": "FRHICommandClearShaderBindingTable(FRHIShaderBindingTable* InSBT) : SBT(InSBT)"
  },
  {
    "label": "FRHICOMMAND_UNNAMED()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_UNNAMED(FRHICommandBuildAccelerationStructures)"
  },
  {
    "label": "FRHICommandBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FRayTracingGeometryBuildParams> Params ; FRHIBufferRange ScratchBufferRange ; FRHIBuffer* ScratchBuffer ;)",
    "insertText": "FRHICommandBuildAccelerationStructures(TConstArrayView<FRayTracingGeometryBuildParams> InParams, const FRHIBufferRange& ScratchBufferRange) : Params(InParams) , ScratchBufferRange(ScratchBufferRange) , ScratchBuffer(ScratchBufferRange.Buffer)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandRayTraceDispatch)"
  },
  {
    "label": "FRHICommandRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineState* Pipeline ; FRHIRayTracingScene* Scene ; FRHIShaderBindingTable* SBT ; FRayTracingShaderBindings GlobalResourceBindings ; FRHIRayTracingShader* RayGenShader ; FRHIBuffer* ArgumentBuffer ; uint32 ArgumentOffset ; uint32 Width ; uint32 Height ;)",
    "insertText": "FRHICommandRayTraceDispatch(FRayTracingPipelineState* InPipeline, FRHIRayTracingShader* InRayGenShader, FRHIRayTracingScene* InScene, const FRayTracingShaderBindings& InGlobalResourceBindings, uint32 InWidth, uint32 InHeight) : Pipeline(InPipeline) , Scene(InScene) , SBT(nullptr) , GlobalResourceBindings(InGlobalResourceBindings) , RayGenShader(InRayGenShader) , ArgumentBuffer(nullptr) , ArgumentOffset(0) , Width(InWidth) , Height(InHeight)"
  },
  {
    "label": "FRHICommandRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandRayTraceDispatch(FRayTracingPipelineState* InPipeline, FRHIRayTracingShader* InRayGenShader, FRHIShaderBindingTable* InSBT, const FRayTracingShaderBindings& InGlobalResourceBindings, uint32 InWidth, uint32 InHeight) : Pipeline(InPipeline) , Scene(nullptr) , SBT(InSBT) , GlobalResourceBindings(InGlobalResourceBindings) , RayGenShader(InRayGenShader) , ArgumentBuffer(nullptr) , ArgumentOffset(0) , Width(InWidth) , Height(InHeight)"
  },
  {
    "label": "FRHICommandRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandRayTraceDispatch(FRayTracingPipelineState* InPipeline, FRHIRayTracingShader* InRayGenShader, FRHIRayTracingScene* InScene, const FRayTracingShaderBindings& InGlobalResourceBindings, FRHIBuffer* InArgumentBuffer, uint32 InArgumentOffset) : Pipeline(InPipeline) , Scene(InScene) , SBT(nullptr) , GlobalResourceBindings(InGlobalResourceBindings) , RayGenShader(InRayGenShader) , ArgumentBuffer(InArgumentBuffer) , ArgumentOffset(InArgumentOffset) , Width(0) , Height(0)"
  },
  {
    "label": "FRHICommandRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandRayTraceDispatch(FRayTracingPipelineState* InPipeline, FRHIRayTracingShader* InRayGenShader, FRHIShaderBindingTable* InSBT, const FRayTracingShaderBindings& InGlobalResourceBindings, FRHIBuffer* InArgumentBuffer, uint32 InArgumentOffset) : Pipeline(InPipeline) , Scene(nullptr) , SBT(InSBT) , GlobalResourceBindings(InGlobalResourceBindings) , RayGenShader(InRayGenShader) , ArgumentBuffer(InArgumentBuffer) , ArgumentOffset(InArgumentOffset) , Width(0) , Height(0)"
  },
  {
    "label": "FRHICOMMAND_MACRO()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHICOMMAND_MACRO(FRHICommandSetBindingsOnShaderBindingTable)"
  },
  {
    "label": "FRHICommandSetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (FRHIShaderBindingTable* SBT = nullptr ; FRHIRayTracingScene* Scene = nullptr ; FRayTracingPipelineState* Pipeline = nullptr ; int32 NumBindings = - 1 ; const FRayTracingLocalShaderBindings* Bindings = nullptr ; ERayTracingBindingType BindingType = ERayTracingBindingType::HitGroup ;)",
    "insertText": "FRHICommandSetBindingsOnShaderBindingTable(FRHIRayTracingScene* InScene, FRayTracingPipelineState* InPipeline, uint32 InNumBindings, const FRayTracingLocalShaderBindings* InBindings, ERayTracingBindingType InBindingType) : Scene(InScene) , Pipeline(InPipeline) , NumBindings(InNumBindings) , Bindings(InBindings) , BindingType(InBindingType)"
  },
  {
    "label": "FRHICommandSetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandSetBindingsOnShaderBindingTable(FRHIShaderBindingTable* InSBT, FRayTracingPipelineState* InPipeline, uint32 InNumBindings, const FRayTracingLocalShaderBindings* InBindings, ERayTracingBindingType InBindingType) : SBT(InSBT) , Pipeline(InPipeline) , NumBindings(InNumBindings) , Bindings(InBindings) , BindingType(InBindingType)"
  },
  {
    "label": "ExecuteSetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIComputePipelineState*)",
    "insertText": "ExecuteSetComputePipelineState(FComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "ExecuteSetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIGraphicsPipelineState*)",
    "insertText": "ExecuteSetGraphicsPipelineState(class FGraphicsPipelineState* GraphicsPipelineState)"
  },
  {
    "label": "FindComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineState*)",
    "insertText": "FindComputePipelineState(FRHIComputeShader* ComputeShader, bool bVerifyUse = true)"
  },
  {
    "label": "GetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineState*)",
    "insertText": "GetComputePipelineState(FRHIComputeCommandList& RHICmdList, FRHIComputeShader* ComputeShader, bool bVerifyUse = true)"
  },
  {
    "label": "FindGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineState*)",
    "insertText": "FindGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer, bool bVerifyUse = true)"
  },
  {
    "label": "GetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineState*)",
    "insertText": "GetGraphicsPipelineState(FRHICommandList& RHICmdList, const FGraphicsPipelineStateInitializer& Initializer, bool bVerifyUse = true)"
  },
  {
    "label": "GetRHIComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIComputePipelineState*)",
    "insertText": "GetRHIComputePipelineState(FComputePipelineState*)"
  },
  {
    "label": "GetRHIWorkGraphPipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIWorkGraphPipelineState*)",
    "insertText": "GetRHIWorkGraphPipelineState(FWorkGraphPipelineState*)"
  },
  {
    "label": "GetRHIRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingPipelineState*)",
    "insertText": "GetRHIRayTracingPipelineState(FRayTracingPipelineState*)"
  },
  {
    "label": "GetRHIRayTracingPipelineStateMaxLocalBindingDataSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRHIRayTracingPipelineStateMaxLocalBindingDataSize(FRayTracingPipelineState*)"
  },
  {
    "label": "OnBoundShaderChanged()",
    "kind": "Method",
    "detail": "Function (class FRHIComputeCommandList : public FRHICommandListBase { protected : void)",
    "insertText": "OnBoundShaderChanged(FRHIComputeShader* InBoundComputeShaderRHI)"
  },
  {
    "label": "FRHIComputeCommandList()",
    "kind": "Method",
    "detail": "Function (PersistentState . BoundComputeShaderRHI = InBoundComputeShaderRHI ; })",
    "insertText": "FRHIComputeCommandList(FRHIGPUMask GPUMask, bool bImmediate) : FRHICommandListBase(GPUMask, bImmediate)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} public : FRHIComputeCommandList&)",
    "insertText": "Get(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FRHIComputeCommandList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIComputeCommandList(FRHIGPUMask GPUMask = FRHIGPUMask::All()) : FRHICommandListBase(GPUMask, false)"
  },
  {
    "label": "FRHIComputeCommandList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIComputeCommandList(FRHICommandListBase&& Other) : FRHICommandListBase(MoveTemp(Other))"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommand<FRHIComputeCommandList, LAMBDA>)(Forward<LAMBDA>(Lambda), LambdaName)"
  },
  {
    "label": "EnqueueLambda_NoMarker()",
    "kind": "Method",
    "detail": "Function (} } template<LAMBDA> void)",
    "insertText": "EnqueueLambda_NoMarker(LAMBDA&& Lambda)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommand_NoMarker<FRHIComputeCommandList, LAMBDA>)(Forward<LAMBDA>(Lambda))"
  },
  {
    "label": "GetBoundComputeShader()",
    "kind": "Method",
    "detail": "Function (} FRHIComputeShader*)",
    "insertText": "GetBoundComputeShader()"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetStaticUniformBuffers(UniformBuffers)"
  },
  {
    "label": "SetStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStaticUniformBuffer(FUniformBufferStaticSlot Slot, FRHIUniformBuffer* Buffer)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetStaticUniformBuffer(Slot, Buffer)"
  },
  {
    "label": "SetUniformBufferDynamicOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUniformBufferDynamicOffset(FUniformBufferStaticSlot Slot, uint32 Offset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetUniformBufferDynamicOffset(Slot, Offset)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderParameters(FRHIComputeShader* InShader , TConstArrayView<uint8> InParametersData , TConstArrayView<FRHIShaderParameter> InParameters , TConstArrayView<FRHIShaderParameterResource> InResourceParameters , TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "ValidateBoundShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateBoundShader(InShader)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetShaderParameters(InShader, InParametersData, InParameters, InResourceParameters, InBindlessParameters)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBatchedShaderParameters(FRHIComputeShader* InShader, FRHIBatchedShaderParameters& InBatchedParameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(Bypass())"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetShaderParameters(InShader, InBatchedParameters.ParametersData, InBatchedParameters.Parameters, InBatchedParameters.ResourceParameters, InBatchedParameters.BindlessParameters)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(InBatchedParameters)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandSetShaderParameters<FRHIComputeShader>)(InShader, InBatchedParameters.ParametersData, InBatchedParameters.Parameters, InBatchedParameters.ResourceParameters, InBatchedParameters.BindlessParameters)"
  },
  {
    "label": "SetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetShaderUnbinds(FRHIComputeShader* InShader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetShaderUnbinds(InShader, InUnbinds)"
  },
  {
    "label": "SetBatchedShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBatchedShaderUnbinds(FRHIComputeShader* InShader, FRHIBatchedShaderUnbinds& InBatchedUnbinds)"
  },
  {
    "label": "SetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderUnbinds(InShader, InBatchedUnbinds.Unbinds)"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetComputePipelineState(FComputePipelineState* ComputePipelineState, FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "OnBoundShaderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBoundShaderChanged(ComputeShader)"
  },
  {
    "label": "ExecuteSetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIComputePipelineState* RHIComputePipelineState =)",
    "insertText": "ExecuteSetComputePipelineState(ComputePipelineState)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetComputePipelineState(RHIComputePipelineState)"
  },
  {
    "label": "SetAsyncComputeBudget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAsyncComputeBudget(EAsyncComputeBudget Budget)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetAsyncComputeBudget(Budget)"
  },
  {
    "label": "DispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIDispatchComputeShader(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ)"
  },
  {
    "label": "DispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIDispatchIndirectComputeShader(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "ClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIClearUAVFloat(UnorderedAccessViewRHI, Values)"
  },
  {
    "label": "ClearUAVUint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIClearUAVUint(UnorderedAccessViewRHI, Values)"
  },
  {
    "label": "BeginTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHI_BREADCRUMB_EVENT_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (# if WITH_PROFILEGPU TAutoConsoleVariable<int32> GProfileGPUTransitions ;)",
    "insertText": "RHI_BREADCRUMB_EVENT_CONDITIONAL(*this, GProfileGPUTransitions.GetValueOnAnyThread() != 0, \"RHIBeginTransitions\")"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIBeginTransitions(Transitions)"
  },
  {
    "label": "MarkBegin()",
    "kind": "Method",
    "detail": "Function (Transition ->)",
    "insertText": "MarkBegin(GetPipeline())"
  },
  {
    "label": "DstTransitionArray()",
    "kind": "Method",
    "detail": "Function (} } else { FRHITransition**)",
    "insertText": "DstTransitionArray(FRHITransition**)Alloc(sizeof(FRHITransition*) * Transitions.Num(), alignof(FRHITransition*))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(DstTransitionArray, Transitions.GetData(), sizeof(FRHITransition*) * Transitions.Num())"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandBeginTransitions)(MakeArrayView((const FRHITransition**)DstTransitionArray, Transitions.Num()))"
  },
  {
    "label": "EndTransitions()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHI_BREADCRUMB_EVENT_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (# if WITH_PROFILEGPU TAutoConsoleVariable<int32> GProfileGPUTransitions ;)",
    "insertText": "RHI_BREADCRUMB_EVENT_CONDITIONAL(*this, GProfileGPUTransitions.GetValueOnAnyThread() != 0, \"RHIEndTransitions\")"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIEndTransitions(Transitions)"
  },
  {
    "label": "MarkEnd()",
    "kind": "Method",
    "detail": "Function (Transition ->)",
    "insertText": "MarkEnd(GetPipeline())"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandEndTransitions)(MakeArrayView((const FRHITransition**)DstTransitionArray, Transitions.Num()))"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Transition(TArrayView<const FRHITransitionInfo> Infos, ERHITransitionCreateFlags CreateFlags = ERHITransitionCreateFlags::None)"
  },
  {
    "label": "BeginTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTransitions(MakeArrayView(&Transition, 1))"
  },
  {
    "label": "EndTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndTransition(const FRHITransition* Transition)"
  },
  {
    "label": "EndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransitions(MakeArrayView(&Transition, 1))"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Transition(const FRHITransitionInfo& Info, ERHITransitionCreateFlags CreateFlags = ERHITransitionCreateFlags::None)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transition(MakeArrayView(&Info, 1), CreateFlags)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Transition(TArrayView<const FRHITransitionInfo> Infos, ERHIPipeline SrcPipelines, ERHIPipeline DstPipelines, ERHITransitionCreateFlags TransitionCreateFlags = ERHITransitionCreateFlags::None)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().SetTrackedAccess(Info)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandSetTrackedAccess)(AllocArray(Infos))"
  },
  {
    "label": "SetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetTrackedAccess(TArrayView<const FRHITransitionInfo> Infos)"
  },
  {
    "label": "SetTrackedAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrackedAccess({ FRHITrackedAccessInfo(Resource, Info.AccessAfter) })"
  },
  {
    "label": "SetShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetShaderRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetShaderRootConstants(Constants)"
  },
  {
    "label": "SetComputeShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetComputeShaderRootConstants(const FUint32Vector4& Constants)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHISetShaderRootConstants(Constants)"
  },
  {
    "label": "DispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchComputeShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleComputeDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDispatchComputeShaderBundle(ShaderBundle, RecordArgBuffer, SharedBindlessParameters, Dispatches, bEmulated)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandDispatchComputeShaderBundle)(ShaderBundle, RecordArgBuffer, SharedBindlessParameters, Dispatches, bEmulated)"
  },
  {
    "label": "DispatchComputeShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchComputeShaderBundle(TFunction<void(FRHICommandDispatchComputeShaderBundle&)>&& RecordCallback)"
  },
  {
    "label": "RecordCallback()",
    "kind": "Method",
    "detail": "Function (FRHICommandDispatchComputeShaderBundle DispatchBundleCommand ;)",
    "insertText": "RecordCallback(DispatchBundleCommand)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (DispatchBundleCommand .)",
    "insertText": "Execute(*this)"
  },
  {
    "label": "ALLOC_COMMAND_CL()",
    "kind": "Method",
    "detail": "Function (} else { FRHICommandDispatchComputeShaderBundle& DispatchBundleCommand =*)",
    "insertText": "ALLOC_COMMAND_CL(*this, FRHICommandDispatchComputeShaderBundle)"
  },
  {
    "label": "ValidateShaderBundleComputeDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderBundleComputeDispatch(DispatchBundleCommand.Dispatches)"
  },
  {
    "label": "DispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DispatchGraphicsShaderBundle(FRHIShaderBundle* ShaderBundle, FRHIBuffer* RecordArgBuffer, const FRHIShaderBundleGraphicsState& BundleState, TConstArrayView<FRHIShaderParameterResource> SharedBindlessParameters, TConstArrayView<FRHIShaderBundleGraphicsDispatch> Dispatches, bool bEmulated)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDispatchGraphicsShaderBundle(ShaderBundle, RecordArgBuffer, BundleState, SharedBindlessParameters, Dispatches, bEmulated)"
  },
  {
    "label": "DispatchGraphicsShaderBundle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchGraphicsShaderBundle(TFunction<void(FRHICommandDispatchGraphicsShaderBundle&)>&& RecordCallback)"
  },
  {
    "label": "ALLOC_COMMAND_CL()",
    "kind": "Method",
    "detail": "Function (} else { FRHICommandDispatchGraphicsShaderBundle& DispatchBundleCommand =*)",
    "insertText": "ALLOC_COMMAND_CL(*this, FRHICommandDispatchGraphicsShaderBundle)"
  },
  {
    "label": "BeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BeginUAVOverlap()"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIBeginUAVOverlap()"
  },
  {
    "label": "EndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUAVOverlap()"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIEndUAVOverlap()"
  },
  {
    "label": "BeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginUAVOverlap(FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "BeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView* UAVs [ 1 ] = { UAV } ;)",
    "insertText": "BeginUAVOverlap(MakeArrayView(UAVs, 1))"
  },
  {
    "label": "EndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUAVOverlap(FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "EndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView* UAVs [ 1 ] = { UAV } ;)",
    "insertText": "EndUAVOverlap(MakeArrayView(UAVs, 1))"
  },
  {
    "label": "BeginUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginUAVOverlap(TArrayView<FRHIUnorderedAccessView* const> UAVs)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIBeginUAVOverlap(UAVs)"
  },
  {
    "label": "InlineUAVs()",
    "kind": "Method",
    "detail": "Function (FRHIUnorderedAccessView**)",
    "insertText": "InlineUAVs(FRHIUnorderedAccessView**)Alloc(AllocSize, alignof(FRHIUnorderedAccessView*))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(InlineUAVs, UAVs.GetData(), AllocSize)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandBeginSpecificUAVOverlap)(MakeArrayView(InlineUAVs, UAVs.Num()))"
  },
  {
    "label": "EndUAVOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUAVOverlap(TArrayView<FRHIUnorderedAccessView* const> UAVs)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIEndUAVOverlap(UAVs)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandEndSpecificUAVOverlap)(MakeArrayView(InlineUAVs, UAVs.Num()))"
  },
  {
    "label": "GetBreadcrumbAllocator()",
    "kind": "Method",
    "detail": "Function (} # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbAllocator&)",
    "insertText": "GetBreadcrumbAllocator()"
  },
  {
    "label": "FRHIBreadcrumbAllocator()",
    "kind": "Method",
    "detail": "Function (BreadcrumbAllocator = MakeShared<)",
    "insertText": "FRHIBreadcrumbAllocator()"
  },
  {
    "label": "BeginBreadcrumbCPU()",
    "kind": "Method",
    "detail": "Function (} return* BreadcrumbAllocator ; } void)",
    "insertText": "BeginBreadcrumbCPU(FRHIBreadcrumbNode* Breadcrumb, bool bLink)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (BreadcrumbAllocatorRefs .)",
    "insertText": "AddUnique(Breadcrumb->Allocator)"
  },
  {
    "label": "BeginCPU()",
    "kind": "Method",
    "detail": "Function (Breadcrumb ->)",
    "insertText": "BeginCPU()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PersistentState . LocalBreadcrumb = Breadcrumb ;)",
    "insertText": "if(bLink)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CPUBreadcrumbState . Current = Breadcrumb ;)",
    "insertText": "if(Breadcrumb->GetParent() == FRHIBreadcrumbNode::Sentinel)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CPUBreadcrumbState . UnknownParentList .)",
    "insertText": "Append(Breadcrumb)"
  },
  {
    "label": "EnqueueLambda_NoMarker()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "EnqueueLambda_NoMarker([Breadcrumb, bLink](FRHICommandListBase& ExecutingCmdList) { ExecutingCmdList.PersistentState.LocalBreadcrumb = Breadcrumb; if (bLink) { ExecutingCmdList.CPUBreadcrumbState.Current = Breadcrumb; Breadcrumb->BeginCPU(); } })"
  },
  {
    "label": "EndBreadcrumbCPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndBreadcrumbCPU(FRHIBreadcrumbNode* Breadcrumb, bool bLink)"
  },
  {
    "label": "EndCPU()",
    "kind": "Method",
    "detail": "Function (Breadcrumb ->)",
    "insertText": "EndCPU()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (PersistentState . LocalBreadcrumb = Breadcrumb ->)",
    "insertText": "GetParent()"
  },
  {
    "label": "EnqueueLambda_NoMarker()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "EnqueueLambda_NoMarker([Breadcrumb, bLink](FRHICommandListBase& ExecutingCmdList) { ExecutingCmdList.PersistentState.LocalBreadcrumb = Breadcrumb->GetParent(); check(ExecutingCmdList.PersistentState.LocalBreadcrumb != FRHIBreadcrumbNode::Sentinel); if (bLink) { ExecutingCmdList.CPUBreadcrumbState.Current = Breadcrumb->GetParent(); check(ExecutingCmdList.CPUBreadcrumbState.Current != FRHIBreadcrumbNode::Sentinel); Breadcrumb->EndCPU(); } })"
  },
  {
    "label": "BeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb, ERHIPipeline Pipeline)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (auto& State = GPUBreadcrumbState [ Pipeline ] ; State . Current = Breadcrumb ; State . Latest = Breadcrumb ;)",
    "insertText": "EnqueueLambda(TEXT(\"BeginBreadcrumbGPU\"), [Breadcrumb, Pipeline](FRHICommandListBase& ExecutingCmdList) { auto& State = ExecutingCmdList.GPUBreadcrumbState[Pipeline]; State.Range.InsertAfter(Breadcrumb, State.Prev, Pipeline); State.Prev = Breadcrumb; State.Current = Breadcrumb; State.Latest = Breadcrumb; ExecutingCmdList.Contexts[Pipeline]->RHIBeginBreadcrumbGPU(Breadcrumb); })"
  },
  {
    "label": "EndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb, ERHIPipeline Pipeline)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueLambda(TEXT(\"EndBreadcrumbGPU\"), [Breadcrumb, Pipeline](FRHICommandListBase& ExecutingCmdList) { auto& State = ExecutingCmdList.GPUBreadcrumbState[Pipeline]; State.Current = Breadcrumb->GetParent(); check(State.Current != FRHIBreadcrumbNode::Sentinel); State.Latest = Breadcrumb->GetParent(); check(State.Latest != FRHIBreadcrumbNode::Sentinel); ExecutingCmdList.Contexts[Pipeline]->RHIEndBreadcrumbGPU(Breadcrumb); })"
  },
  {
    "label": "SubmitCommandsHint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubmitCommandsHint()"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHICopyToStagingBuffer(SourceBuffer, DestinationStagingBuffer, Offset, NumBytes)"
  },
  {
    "label": "WriteGPUFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteGPUFence(FRHIGPUFence* Fence)"
  },
  {
    "label": "RHIWriteGPUFence_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIWriteGPUFence_TopOfPipe(*this, Fence)"
  },
  {
    "label": "SetGPUMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGPUMask(FRHIGPUMask InGPUMask)"
  },
  {
    "label": "RHISetGPUMask()",
    "kind": "Method",
    "detail": "Function (Context ->)",
    "insertText": "RHISetGPUMask(PersistentState.CurrentGPUMask)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} } return ; } else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandSetGPUMask)(PersistentState.CurrentGPUMask)"
  },
  {
    "label": "TransferResources()",
    "kind": "Method",
    "detail": "Function (} # endif } } void)",
    "insertText": "TransferResources(TConstArrayView<FTransferResourceParams> Params)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHITransferResources(Params)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandTransferResources)(AllocArray(Params))"
  },
  {
    "label": "TransferResourceSignal()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "TransferResourceSignal(TConstArrayView<FTransferResourceFenceData*> FenceDatas, FRHIGPUMask SrcGPUMask)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHITransferResourceSignal(FenceDatas, SrcGPUMask)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandTransferResourceSignal)(AllocArray(FenceDatas), SrcGPUMask)"
  },
  {
    "label": "TransferResourceWait()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "TransferResourceWait(TConstArrayView<FTransferResourceFenceData*> FenceDatas)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHITransferResourceWait(FenceDatas)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandTransferResourceWait)(AllocArray(FenceDatas))"
  },
  {
    "label": "CrossGPUTransfer()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "CrossGPUTransfer(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer, TConstArrayView<FCrossGPUTransferFence*> PostTransfer)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHICrossGPUTransfer(Params, PreTransfer, PostTransfer)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandCrossGPUTransfer)(AllocArray(Params), AllocArray(PreTransfer), AllocArray(PostTransfer))"
  },
  {
    "label": "CrossGPUTransferSignal()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "CrossGPUTransferSignal(TConstArrayView<FTransferResourceParams> Params, TConstArrayView<FCrossGPUTransferFence*> PreTransfer)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHICrossGPUTransferSignal(Params, PreTransfer)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandCrossGPUTransferSignal)(AllocArray(Params), AllocArray(PreTransfer))"
  },
  {
    "label": "CrossGPUTransferWait()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "CrossGPUTransferWait(TConstArrayView<FCrossGPUTransferFence*> SyncPoints)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHICrossGPUTransferWait(SyncPoints)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandCrossGPUTransferWait)(AllocArray(SyncPoints))"
  },
  {
    "label": "BuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "BuildAccelerationStructure(FRHIRayTracingGeometry* Geometry)"
  },
  {
    "label": "BuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAccelerationStructures(TConstArrayView<FRayTracingGeometryBuildParams> Params)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIBuildAccelerationStructures(Params, ScratchBufferRange)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} else { size_t DataSize =)",
    "insertText": "sizeof(FRayTracingGeometryBuildParams) * Params.Num()"
  },
  {
    "label": "InlineParams()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryBuildParams*)",
    "insertText": "InlineParams(FRayTracingGeometryBuildParams*) Alloc(DataSize, alignof(FRayTracingGeometryBuildParams))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(InlineParams, Params.GetData(), DataSize)"
  },
  {
    "label": "AllocArray()",
    "kind": "Method",
    "detail": "Function (InlineParams [ i ] . Segments =)",
    "insertText": "AllocArray(Params[i].Segments)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ALLOC_COMMAND(FRHICommandBuildAccelerationStructures)(MakeArrayView(InlineParams, Params.Num()), ScratchBufferRange)"
  },
  {
    "label": "BuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BuildAccelerationStructure(const FRayTracingSceneBuildParams& SceneBuildParams)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIBuildAccelerationStructure(SceneBuildParams)"
  },
  {
    "label": "AllocArray()",
    "kind": "Method",
    "detail": "Function (} else { FRayTracingSceneBuildParams InlineParams = SceneBuildParams ; InlineParams . ReferencedGeometries =)",
    "insertText": "AllocArray(SceneBuildParams.ReferencedGeometries)"
  },
  {
    "label": "AllocArray()",
    "kind": "Method",
    "detail": "Function (InlineParams . PerInstanceGeometries =)",
    "insertText": "AllocArray(SceneBuildParams.PerInstanceGeometries)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandBuildAccelerationStructure)(MoveTemp(InlineParams))"
  },
  {
    "label": "BindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BindAccelerationStructureMemory(FRHIRayTracingScene* Scene, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "GetComputeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComputeContext().RHIBindAccelerationStructureMemory(Scene, Buffer, BufferOffset)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandBindAccelerationStructureMemory)(Scene, Buffer, BufferOffset)"
  },
  {
    "label": "PostExternalCommandsReset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PostExternalCommandsReset()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIPostExternalCommandsReset()"
  },
  {
    "label": "OnBoundShaderChanged()",
    "kind": "Method",
    "detail": "Function (class FRHICommandList : public FRHIComputeCommandList { protected : using FRHIComputeCommandList::OnBoundShaderChanged ; void)",
    "insertText": "OnBoundShaderChanged(const FBoundShaderStateInput& InBoundShaderStateInput)"
  },
  {
    "label": "FRHICommandList()",
    "kind": "Method",
    "detail": "Function (PersistentState . BoundShaderInput = InBoundShaderStateInput ; })",
    "insertText": "FRHICommandList(FRHIGPUMask GPUMask, bool bImmediate) : FRHIComputeCommandList(GPUMask, bImmediate)"
  },
  {
    "label": "FRHICommandList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandList(FRHIGPUMask GPUMask = FRHIGPUMask::All()) : FRHIComputeCommandList(GPUMask)"
  },
  {
    "label": "FRHICommandList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHICommandList(FRHICommandListBase&& Other) : FRHIComputeCommandList(MoveTemp(Other))"
  },
  {
    "label": "GetBoundVertexShader()",
    "kind": "Method",
    "detail": "Function (} FRHIVertexShader*)",
    "insertText": "GetBoundVertexShader()"
  },
  {
    "label": "GetBoundAmplificationShader()",
    "kind": "Method",
    "detail": "Function (} FRHIAmplificationShader*)",
    "insertText": "GetBoundAmplificationShader()"
  },
  {
    "label": "GetBoundPixelShader()",
    "kind": "Method",
    "detail": "Function (} FRHIPixelShader*)",
    "insertText": "GetBoundPixelShader()"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommand<FRHICommandList, LAMBDA>)(Forward<LAMBDA>(Lambda), LambdaName)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} using FRHIComputeCommandList::SetShaderParameters ; void)",
    "insertText": "SetShaderParameters(FRHIGraphicsShader* InShader , TConstArrayView<uint8> InParametersData , TConstArrayView<FRHIShaderParameter> InParameters , TConstArrayView<FRHIShaderParameterResource> InResourceParameters , TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetShaderParameters(InShader, InParametersData, InParameters, InResourceParameters, InBindlessParameters)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (} using FRHIComputeCommandList::SetBatchedShaderParameters ; void)",
    "insertText": "SetBatchedShaderParameters(FRHIGraphicsShader* InShader, FRHIBatchedShaderParameters& InBatchedParameters)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetShaderParameters(InShader, InBatchedParameters.ParametersData, InBatchedParameters.Parameters, InBatchedParameters.ResourceParameters, InBatchedParameters.BindlessParameters)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandSetShaderParameters<FRHIGraphicsShader>)(InShader, InBatchedParameters.ParametersData, InBatchedParameters.Parameters, InBatchedParameters.ResourceParameters, InBatchedParameters.BindlessParameters)"
  },
  {
    "label": "SetShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} } using FRHIComputeCommandList::SetShaderUnbinds ; void)",
    "insertText": "SetShaderUnbinds(FRHIGraphicsShader* InShader, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetShaderUnbinds(InShader, InUnbinds)"
  },
  {
    "label": "SetBatchedShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (} } using FRHIComputeCommandList::SetBatchedShaderUnbinds ; void)",
    "insertText": "SetBatchedShaderUnbinds(FRHIGraphicsShader* InShader, FRHIBatchedShaderUnbinds& InBatchedUnbinds)"
  },
  {
    "label": "SetBlendFactor()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBlendFactor(const FLinearColor& BlendFactor = FLinearColor::White)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetBlendFactor(BlendFactor)"
  },
  {
    "label": "DrawPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDrawPrimitive(BaseVertexIndex, NumPrimitives, NumInstances)"
  },
  {
    "label": "DrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDrawIndexedPrimitive(IndexBuffer, BaseVertexIndex, FirstInstance, NumVertices, StartIndex, NumPrimitives, NumInstances)"
  },
  {
    "label": "SetStreamSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetStreamSource(StreamIndex, VertexBuffer, Offset)"
  },
  {
    "label": "SetStreamSourceSlot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStreamSourceSlot(uint32 StreamIndex, FRHIStreamSourceSlot* StreamSourceSlot, uint32 Offset)"
  },
  {
    "label": "EnqueueLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueLambda([StreamIndex, StreamSourceSlot, Offset] (FRHICommandListBase& RHICmdList) { FRHICommandSetStreamSource Command(StreamIndex, StreamSourceSlot ? StreamSourceSlot->Buffer : nullptr, Offset); Command.Execute(RHICmdList); })"
  },
  {
    "label": "SetStencilRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetStencilRef(StencilRef)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetViewport(MinX, MinY, MinZ, MaxX, MaxY, MaxZ)"
  },
  {
    "label": "SetStereoViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetStereoViewport(LeftMinX, RightMinX, LeftMinY, RightMinY, MinZ, LeftMaxX, RightMaxX, LeftMaxY, RightMaxY, MaxZ)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetScissorRect(bEnable, MinX, MinY, MaxX, MaxY)"
  },
  {
    "label": "ApplyCachedRenderTargets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyCachedRenderTargets(FGraphicsPipelineStateInitializer& GraphicsPSOInit)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . RenderTargetsEnabled = PersistentState . CachedNumSimultanousRenderTargets ;)",
    "insertText": "for(uint32 i = 0; i < GraphicsPSOInit.RenderTargetsEnabled; ++i)"
  },
  {
    "label": "UE_PIXELFORMAT_TO_UINT8()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . RenderTargetFormats [ i ] =)",
    "insertText": "UE_PIXELFORMAT_TO_UINT8(PersistentState.CachedRenderTargets[i].Texture->GetFormat())"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . RenderTargetFlags [ i ] = PersistentState . CachedRenderTargets [ i ] . Texture ->)",
    "insertText": "GetFlags()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { GraphicsPSOInit . RenderTargetFormats [ i ] = PF_Unknown ; })",
    "insertText": "if(GraphicsPSOInit.RenderTargetFormats[i] != PF_Unknown)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . NumSamples = static_cast<)",
    "insertText": "uint16(PersistentState.CachedRenderTargets[i].Texture->GetNumSamples())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(PersistentState.CachedDepthStencilTarget.Texture)"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . DepthStencilTargetFormat = PersistentState . CachedDepthStencilTarget . Texture ->)",
    "insertText": "GetFormat()"
  },
  {
    "label": "GetTexture2DArray()",
    "kind": "Method",
    "detail": "Function (const FRHITexture* TextureArray = PersistentState . CachedDepthStencilTarget . Texture ->)",
    "insertText": "GetTexture2DArray()"
  },
  {
    "label": "GetStencilStoreAction()",
    "kind": "Method",
    "detail": "Function (} else { GraphicsPSOInit . DepthStencilTargetFormat = PF_Unknown ; } GraphicsPSOInit . DepthTargetLoadAction = PersistentState . CachedDepthStencilTarget . DepthLoadAction ; GraphicsPSOInit . DepthTargetStoreAction = PersistentState . CachedDepthStencilTarget . DepthStoreAction ; GraphicsPSOInit . StencilTargetLoadAction = PersistentState . CachedDepthStencilTarget . StencilLoadAction ; GraphicsPSOInit . StencilTargetStoreAction = PersistentState . CachedDepthStencilTarget .)",
    "insertText": "GetStencilStoreAction()"
  },
  {
    "label": "GetDepthStencilAccess()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . DepthStencilAccess = PersistentState . CachedDepthStencilTarget .)",
    "insertText": "GetDepthStencilAccess()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . NumSamples = static_cast<)",
    "insertText": "uint16(PersistentState.CachedDepthStencilTarget.Texture->GetNumSamples())"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} GraphicsPSOInit . SubpassHint = PersistentState . SubpassHint ; GraphicsPSOInit . SubpassIndex = PersistentState . SubpassIndex ; GraphicsPSOInit . MultiViewCount = PersistentState . MultiViewCount ; GraphicsPSOInit . bHasFragmentDensityAttachment = PersistentState . bHasFragmentDensityAttachment ; } void)",
    "insertText": "SetGraphicsPipelineState(class FGraphicsPipelineState* GraphicsPipelineState, const FBoundShaderStateInput& ShaderInput, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "OnBoundShaderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBoundShaderChanged(ShaderInput)"
  },
  {
    "label": "ExecuteSetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FRHIGraphicsPipelineState* RHIGraphicsPipelineState =)",
    "insertText": "ExecuteSetGraphicsPipelineState(GraphicsPipelineState)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetGraphicsPipelineState(RHIGraphicsPipelineState, StencilRef, bApplyAdditionalState)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_USE_FALLBACK_PSO void)",
    "insertText": "SetGraphicsPipelineState(const FGraphicsPipelineStateInitializer& PsoInit, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "OnBoundShaderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBoundShaderChanged(PsoInit.BoundShaderState)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetGraphicsPipelineState(PsoInit, StencilRef, bApplyAdditionalState)"
  },
  {
    "label": "DrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "DrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDrawPrimitiveIndirect(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDrawIndexedIndirect(IndexBufferRHI, ArgumentsBufferRHI, DrawArgumentsIndex, NumInstances)"
  },
  {
    "label": "DrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentsBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDrawIndexedPrimitiveIndirect(IndexBuffer, ArgumentsBuffer, ArgumentOffset)"
  },
  {
    "label": "MultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MultiDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentsBuffer, uint32 ArgumentOffset, FRHIBuffer* CountBuffer, uint32 CountBufferOffset, uint32 MaxDrawArguments)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIMultiDrawIndexedPrimitiveIndirect(IndexBuffer, ArgumentsBuffer, ArgumentOffset, CountBuffer, CountBufferOffset, MaxDrawArguments)"
  },
  {
    "label": "DispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchMeshShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDispatchMeshShader(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ)"
  },
  {
    "label": "DispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchIndirectMeshShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDispatchIndirectMeshShader(ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "SetDepthBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetDepthBounds(MinDepth, MaxDepth)"
  },
  {
    "label": "SetShadingRate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShadingRate(EVRSShadingRate ShadingRate, EVRSRateCombiner Combiner)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetShadingRate(ShadingRate, Combiner)"
  },
  {
    "label": "CopyTexture()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "CopyTexture(FRHITexture* SourceTextureRHI, FRHITexture* DestTextureRHI, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHICopyTexture(SourceTextureRHI, DestTextureRHI, CopyInfo)"
  },
  {
    "label": "ResummarizeHTile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResummarizeHTile(FRHITexture* DepthTexture)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIResummarizeHTile(DepthTexture)"
  },
  {
    "label": "BeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIBeginRenderQuery_TopOfPipe(*this, RenderQuery)"
  },
  {
    "label": "EndRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(*this, RenderQuery)"
  },
  {
    "label": "CalibrateTimers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHICalibrateTimers(CalibrationQuery)"
  },
  {
    "label": "BeginRenderPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* Name)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (InInfo .)",
    "insertText": "Validate()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIBeginRenderPass(InInfo, Name)"
  },
  {
    "label": "AllocString()",
    "kind": "Method",
    "detail": "Function (} else { TCHAR* NameCopy =)",
    "insertText": "AllocString(Name)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALLOC_COMMAND(FRHICommandBeginRenderPass)(InInfo, NameCopy)"
  },
  {
    "label": "CacheActiveRenderTargets()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CacheActiveRenderTargets(InInfo)"
  },
  {
    "label": "ResetSubpass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSubpass(InInfo.SubpassHint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PersistentState . bInsideRenderPass = true ;)",
    "insertText": "if(InInfo.NumOcclusionQueries)"
  },
  {
    "label": "RHIBeginRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (PersistentState . bInsideOcclusionQueryBatch = true ; GDynamicRHI ->)",
    "insertText": "RHIBeginRenderQueryBatch_TopOfPipe(*this, RQT_Occlusion)"
  },
  {
    "label": "EndRenderPass()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EndRenderPass()"
  },
  {
    "label": "RHIEndRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIEndRenderQueryBatch_TopOfPipe(*this, RQT_Occlusion)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIEndRenderPass()"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandEndRenderPass)()"
  },
  {
    "label": "ResetSubpass()",
    "kind": "Method",
    "detail": "Function (} PersistentState . bInsideRenderPass = false ;)",
    "insertText": "ResetSubpass(ESubpassHint::None)"
  },
  {
    "label": "NextSubpass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NextSubpass()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHINextSubpass()"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandNextSubpass)()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIDiscardRenderTargets(Depth, Stencil, ColorBitMask)"
  },
  {
    "label": "CopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHICopyBufferRegion(DestBuffer, DstOffset, SourceBuffer, SrcOffset, NumBytes)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandCopyBufferRegion)(DestBuffer, DstOffset, SourceBuffer, SrcOffset, NumBytes)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHICommitRayTracingBindings(Scene)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandCommitRayTracingBindings)(Scene)"
  },
  {
    "label": "CommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CommitShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHICommitShaderBindingTable(SBT)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandCommitShaderBindingTable)(SBT)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIClearRayTracingBindings(Scene)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandClearRayTracingBindings)(Scene)"
  },
  {
    "label": "ClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIClearShaderBindingTable(SBT)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandClearShaderBindingTable)(SBT)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIRayTraceDispatch(GetRHIRayTracingPipelineState(Pipeline), RayGenShader, Scene, GlobalResourceBindings, Width, Height)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandRayTraceDispatch)(Pipeline, RayGenShader, Scene, GlobalResourceBindings, Width, Height)"
  },
  {
    "label": "RayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RayTraceDispatch(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIRayTraceDispatch(GetRHIRayTracingPipelineState(Pipeline), RayGenShader, SBT, GlobalResourceBindings, Width, Height)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandRayTraceDispatch)(Pipeline, RayGenShader, SBT, GlobalResourceBindings, Width, Height)"
  },
  {
    "label": "RayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RayTraceDispatch(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, FRHIBatchedShaderParameters& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIRayTraceDispatchIndirect(GetRHIRayTracingPipelineState(Pipeline), RayGenShader, Scene, GlobalResourceBindings, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandRayTraceDispatch)(Pipeline, RayGenShader, Scene, GlobalResourceBindings, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RayTraceDispatchIndirect(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHIRayTraceDispatchIndirect(GetRHIRayTracingPipelineState(Pipeline), RayGenShader, SBT, GlobalResourceBindings, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandRayTraceDispatch)(Pipeline, RayGenShader, SBT, GlobalResourceBindings, ArgumentBuffer, ArgumentOffset)"
  },
  {
    "label": "RayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RayTraceDispatchIndirect(FRayTracingPipelineState* Pipeline, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, FRHIBatchedShaderParameters& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings* Bindings = nullptr ; {)",
    "insertText": "if(NumBindings)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 Size =)",
    "insertText": "sizeof(FRayTracingLocalShaderBindings)"
  },
  {
    "label": "Bindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bindings(FRayTracingLocalShaderBindings*)Alloc(Size, alignof(FRayTracingLocalShaderBindings))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Bindings, InBindings, Size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32 i = 0; i < NumBindings; ++i)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS Bindings [ i ] . Geometry = Scene ->)",
    "insertText": "GetInitializer()"
  },
  {
    "label": "RecordIndex()",
    "kind": "Method",
    "detail": "Function (Bindings [ i ] .)",
    "insertText": "RecordIndex(Scene->GetInitializer().SegmentPrefixSum[Bindings[i].InstanceIndex] + Bindings[i].SegmentIndex) * Scene->GetInitializer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Bindings [ i ] . InstanceIndex = INDEX_NONE ; PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(Bindings[i].NumUniformBuffers)"
  },
  {
    "label": "UniformBuffers()",
    "kind": "Method",
    "detail": "Function (Bindings [ i ] .)",
    "insertText": "UniformBuffers(FRHIUniformBuffer**)Alloc(sizeof(FRHIUniformBuffer*) * Bindings[i].NumUniformBuffers, alignof(FRHIUniformBuffer*))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Bindings [ i ] . UniformBuffers [ Index ] = InBindings [ i ] . UniformBuffers [ Index ] ; } })",
    "insertText": "if(Bindings[i].LooseParameterDataSize)"
  },
  {
    "label": "LooseParameterData()",
    "kind": "Method",
    "detail": "Function (Bindings [ i ] .)",
    "insertText": "LooseParameterData(uint8*)Alloc(Bindings[i].LooseParameterDataSize, 16)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Bindings[i].LooseParameterData, InBindings[i].LooseParameterData, Bindings[i].LooseParameterDataSize)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetRayTracingBindings(Scene, GetRHIRayTracingPipelineState(Pipeline), NumBindings, Bindings, BindingType)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandSetBindingsOnShaderBindingTable)(Scene, Pipeline, NumBindings, Bindings, BindingType)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetBindingsOnShaderBindingTable(FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType, bool bCopyDataToInlineStorage = true)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContext().RHISetBindingsOnShaderBindingTable(SBT, GetRHIRayTracingPipelineState(Pipeline), NumBindings, Bindings, BindingType)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(GetRHIRayTracingPipelineStateMaxLocalBindingDataSize(Pipeline) <= SBT->GetInitializer().LocalBindingDataSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings* InlineBindings = nullptr ;)",
    "insertText": "if(bCopyDataToInlineStorage)"
  },
  {
    "label": "InlineBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InlineBindings(FRayTracingLocalShaderBindings*)Alloc(Size, alignof(FRayTracingLocalShaderBindings))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(InlineBindings, Bindings, Size)"
  },
  {
    "label": "UniformBuffers()",
    "kind": "Method",
    "detail": "Function (InlineBindings [ i ] .)",
    "insertText": "UniformBuffers(FRHIUniformBuffer**)Alloc(sizeof(FRHIUniformBuffer*) * InlineBindings[i].NumUniformBuffers, alignof(FRHIUniformBuffer*))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InlineBindings [ i ] . UniformBuffers [ Index ] = Bindings [ i ] . UniformBuffers [ Index ] ; } })",
    "insertText": "if(InlineBindings[i].LooseParameterDataSize)"
  },
  {
    "label": "LooseParameterData()",
    "kind": "Method",
    "detail": "Function (InlineBindings [ i ] .)",
    "insertText": "LooseParameterData(uint8*)Alloc(InlineBindings[i].LooseParameterDataSize, 16)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(InlineBindings[i].LooseParameterData, Bindings[i].LooseParameterData, InlineBindings[i].LooseParameterDataSize)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ALLOC_COMMAND(FRHICommandSetBindingsOnShaderBindingTable)(SBT, Pipeline, NumBindings, InlineBindings, BindingType)"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(FRHICommandSetBindingsOnShaderBindingTable)(SBT, Pipeline, NumBindings, Bindings, BindingType)"
  },
  {
    "label": "SetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SetRayTracingBindings(Scene, Pipeline, NumBindings, Bindings, ERayTracingBindingType::HitGroup, bCopyDataToInlineStorage)"
  },
  {
    "label": "SetRayTracingHitGroups()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetRayTracingHitGroups(FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, bool bCopyDataToInlineStorage = true)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingsOnShaderBindingTable(SBT, Pipeline, NumBindings, Bindings, ERayTracingBindingType::HitGroup, bCopyDataToInlineStorage)"
  },
  {
    "label": "SetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SetRayTracingBindings(Scene, Pipeline, NumBindings, Bindings, ERayTracingBindingType::CallableShader, bCopyDataToInlineStorage)"
  },
  {
    "label": "SetRayTracingCallableShaders()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetRayTracingCallableShaders(FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, bool bCopyDataToInlineStorage = true)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingsOnShaderBindingTable(SBT, Pipeline, NumBindings, Bindings, ERayTracingBindingType::CallableShader, bCopyDataToInlineStorage)"
  },
  {
    "label": "SetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SetRayTracingBindings(Scene, Pipeline, NumBindings, Bindings, ERayTracingBindingType::MissShader, bCopyDataToInlineStorage)"
  },
  {
    "label": "SetRayTracingMissShaders()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetRayTracingMissShaders(FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, bool bCopyDataToInlineStorage = true)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingsOnShaderBindingTable(SBT, Pipeline, NumBindings, Bindings, ERayTracingBindingType::MissShader, bCopyDataToInlineStorage)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FRayTracingLocalShaderBindings* InlineBindings =)",
    "insertText": "new(Alloc<FRayTracingLocalShaderBindings>()) FRayTracingLocalShaderBindings()"
  },
  {
    "label": "RecordIndex()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS InlineBindings -> SegmentIndex = SegmentIndex ; PRAGMA_DISABLE_DEPRECATION_WARNINGS InlineBindings ->)",
    "insertText": "RecordIndex(Scene->GetInitializer().SegmentPrefixSum[InstanceIndex] + SegmentIndex) * Scene->GetInitializer()"
  },
  {
    "label": "NumUniformBuffers()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS InlineBindings -> ShaderIndexInPipeline = HitGroupIndex ; InlineBindings -> UserData = UserData ; InlineBindings ->)",
    "insertText": "NumUniformBuffers(uint16)"
  },
  {
    "label": "LooseParameterDataSize()",
    "kind": "Method",
    "detail": "Function (InlineBindings ->)",
    "insertText": "LooseParameterDataSize(uint16)"
  },
  {
    "label": "UniformBuffers()",
    "kind": "Method",
    "detail": "Function (InlineBindings ->)",
    "insertText": "UniformBuffers(FRHIUniformBuffer**)Alloc(sizeof(FRHIUniformBuffer*) * NumUniformBuffers, alignof(FRHIUniformBuffer*))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InlineBindings -> UniformBuffers [ Index ] = UniformBuffers [ Index ] ; } })",
    "insertText": "if(LooseParameterDataSize)"
  },
  {
    "label": "LooseParameterData()",
    "kind": "Method",
    "detail": "Function (InlineBindings ->)",
    "insertText": "LooseParameterData(uint8*)Alloc(LooseParameterDataSize, 16)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(InlineBindings->LooseParameterData, LooseParameterData, LooseParameterDataSize)"
  },
  {
    "label": "SetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SetRayTracingBindings(Scene, Pipeline, 1, InlineBindings, ERayTracingBindingType::HitGroup, false)"
  },
  {
    "label": "SetRayTracingHitGroup()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetRayTracingHitGroup(FRHIShaderBindingTable* SBT, uint32 RecordIndex, FRHIRayTracingGeometry* Geometry, uint32 GeometrySegmentIndex, FRayTracingPipelineState* Pipeline, uint32 HitGroupIndex, uint32 NumUniformBuffers, FRHIUniformBuffer* const* UniformBuffers, uint32 LooseParameterDataSize, const void* LooseParameterData, uint32 UserData)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetBindingsOnShaderBindingTable(SBT, Pipeline, 1, InlineBindings, ERayTracingBindingType::HitGroup, false)"
  },
  {
    "label": "SetDefaultRayTracingHitGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefaultRayTracingHitGroup(FRHIShaderBindingTable* SBT, FRayTracingPipelineState* Pipeline, uint32 HitGroupIndex)"
  },
  {
    "label": "SetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (InlineBindings -> UniformBuffers [ Index ] = UniformBuffers [ Index ] ; } } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SetRayTracingBindings(Scene, Pipeline, 1, InlineBindings, ERayTracingBindingType::CallableShader, false)"
  },
  {
    "label": "SetRayTracingCallableShader()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetRayTracingCallableShader(FRHIShaderBindingTable* SBT, uint32 RecordIndex, FRayTracingPipelineState* Pipeline, uint32 ShaderIndexInPipeline, uint32 NumUniformBuffers, FRHIUniformBuffer* const* UniformBuffers, uint32 UserData)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (InlineBindings -> UniformBuffers [ Index ] = UniformBuffers [ Index ] ; } })",
    "insertText": "SetBindingsOnShaderBindingTable(SBT, Pipeline, 1, InlineBindings, ERayTracingBindingType::CallableShader, false)"
  },
  {
    "label": "SetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (InlineBindings -> UniformBuffers [ Index ] = UniformBuffers [ Index ] ; } } PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "SetRayTracingBindings(Scene, Pipeline, 1, InlineBindings, ERayTracingBindingType::MissShader, false)"
  },
  {
    "label": "SetRayTracingMissShader()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetRayTracingMissShader(FRHIShaderBindingTable* SBT, uint32 RecordIndex, FRayTracingPipelineState* Pipeline, uint32 ShaderIndexInPipeline, uint32 NumUniformBuffers, FRHIUniformBuffer* const* UniformBuffers, uint32 UserData)"
  },
  {
    "label": "SetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (InlineBindings -> UniformBuffers [ Index ] = UniformBuffers [ Index ] ; } })",
    "insertText": "SetBindingsOnShaderBindingTable(SBT, Pipeline, 1, InlineBindings, ERayTracingBindingType::MissShader, false)"
  },
  {
    "label": "FScopedRHIThreadStaller()",
    "kind": "Method",
    "detail": "Function (} } ; namespace EImmediateFlushType { enum Type { WaitForOutstandingTasksOnly = 0,DispatchToRHIThread = 1,FlushRHIThread = 2,FlushRHIThreadFlushResources = 3 } ; } ; class FScopedRHIThreadStaller { class FRHICommandListImmediate* Immed ; public :)",
    "insertText": "FScopedRHIThreadStaller()"
  },
  {
    "label": "FScopedRHIThreadStaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedRHIThreadStaller(class FRHICommandListImmediate& InImmed, bool bDoStall = true)"
  },
  {
    "label": "RHICreateIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} ; FBufferRHIRef)",
    "insertText": "RHICreateIndexBuffer(uint32 Stride, uint32 Size, uint32 InUsage, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHICreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateVertexBuffer(uint32 Size, uint32 InUsage, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHICreateStructuredBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateStructuredBuffer(uint32 Stride, uint32 Size, uint32 InUsage, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ERHISubmitFlags { None = 0,SubmitToGPU = 1<<0,DeleteResources = 1<<1,FlushRHIThread = 1<<2,EndFrame = 1<<3,# if CAN_TOGGLE_COMMAND_LIST_BYPASS EnableBypass = 1<<4,DisableBypass = 1<<5,# endif # if WITH_RHI_BREADCRUMBS EnableDrawEvents = 1<<6,DisableDrawEvents = 1<<7 # endif } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERHISubmitFlags)"
  },
  {
    "label": "RHIResourceLifetimeReleaseRef()",
    "kind": "Method",
    "detail": "Function (class FRHICommandListImmediate : public FRHICommandList { class FRHICommandListExecutor ; class FRHICommandListScopedExtendResourceLifetime ; void)",
    "insertText": "RHIResourceLifetimeReleaseRef(FRHICommandListImmediate&, int32)"
  },
  {
    "label": "FRHICommandListImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHICommandListImmediate() : FRHICommandList(FRHIGPUMask::All(), true)"
  },
  {
    "label": "FRHICommandListImmediate()",
    "kind": "Method",
    "detail": "Function (# if WITH_RHI_BREADCRUMBS PersistentState . LocalBreadcrumb = nullptr ; # endif # if HAS_GPU_STATS PersistentState . CurrentDrawStatsCategory = nullptr ; # endif } ~)",
    "insertText": "FRHICommandListImmediate()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} public : FRHICommandListImmediate&)",
    "insertText": "Get()"
  },
  {
    "label": "BeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "EndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "FQueuedCommandList()",
    "kind": "Method",
    "detail": "Function (struct FQueuedCommandList { FRHICommandListBase* CmdList = nullptr ;)",
    "insertText": "FQueuedCommandList()"
  },
  {
    "label": "FQueuedCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQueuedCommandList(FRHICommandListBase* InCmdList) : CmdList(InCmdList)"
  },
  {
    "label": "QueueAsyncCommandListSubmit()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ETranslatePriority { Disabled,Normal,High } ; void)",
    "insertText": "QueueAsyncCommandListSubmit(TArrayView<FQueuedCommandList> CommandLists, ETranslatePriority ParallelTranslatePriority = ETranslatePriority::Disabled, int32 MinDrawsPerTranslate = 0)"
  },
  {
    "label": "QueueAsyncCommandListSubmit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsyncCommandListSubmit(FQueuedCommandList QueuedCommandList, ETranslatePriority ParallelTranslatePriority = ETranslatePriority::Disabled, int32 MinDrawsPerTranslate = 0)"
  },
  {
    "label": "QueueAsyncCommandListSubmit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsyncCommandListSubmit(MakeArrayView(&QueuedCommandList, 1), ParallelTranslatePriority, MinDrawsPerTranslate)"
  },
  {
    "label": "ImmediateFlush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ImmediateFlush(EImmediateFlushType::Type FlushType, ERHISubmitFlags SubmitFlags = ERHISubmitFlags::None)"
  },
  {
    "label": "StallRHIThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StallRHIThread()"
  },
  {
    "label": "UnStallRHIThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnStallRHIThread()"
  },
  {
    "label": "IsStalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStalled()"
  },
  {
    "label": "InitializeImmediateContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeImmediateContexts()"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommand<FRHICommandListImmediate, LAMBDA>)(Forward<LAMBDA>(Lambda), LambdaName)"
  },
  {
    "label": "LockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "UnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "UnlockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "UnlockStagingBuffer_RenderThread(*this, StagingBuffer)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (uint64 Size =)",
    "insertText": "Min(SourceBuffer->GetSize(), DestBuffer->GetSize())"
  },
  {
    "label": "CopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyBufferRegion(DestBuffer, 0, SourceBuffer, 0, Size)"
  },
  {
    "label": "GetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetTextureMemoryVisualizeData(FColor* TextureData,int32 SizeX,int32 SizeY,int32 Pitch,int32 PixelSize)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_GetTextureMemoryVisualizeData_Flush)"
  },
  {
    "label": "ImmediateFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmediateFlush(EImmediateFlushType::FlushRHIThread)"
  },
  {
    "label": "AsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "FinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "FinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "LockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bFlushRHIThread = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bFlushRHIThread = true)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "UnlockTexture2D_RenderThread(*this, Texture, MipIndex, bLockWithinMiptail, bFlushRHIThread)"
  },
  {
    "label": "LockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "UnlockTexture2DArray_RenderThread(*this, Texture, TextureIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "BeginUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} FUpdateTexture3DData)",
    "insertText": "BeginUpdateTexture3D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "EndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndUpdateTexture3D(FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIEndUpdateTexture3D(*this, UpdateData)"
  },
  {
    "label": "EndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndMultiUpdateTexture3D(TArray<FUpdateTexture3DData>& UpdateDataArray)"
  },
  {
    "label": "RHIEndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIEndMultiUpdateTexture3D(*this, UpdateDataArray)"
  },
  {
    "label": "LockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(*this, Texture, FaceIndex, ArrayIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "ReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadSurfaceData(FRHITexture* Texture,FIntRect Rect,TArray<FColor>& OutData,FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_ReadSurfaceData_Flush)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIReadSurfaceData(Texture,Rect,OutData,InFlags)"
  },
  {
    "label": "ReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIReadSurfaceData(Texture, Rect, OutData, InFlags)"
  },
  {
    "label": "MapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapStagingSurface(FRHITexture* Texture, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIMapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIMapStagingSurface_RenderThread(*this, Texture, GPUIndex, nullptr, OutData, OutWidth, OutHeight)"
  },
  {
    "label": "MapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIMapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIMapStagingSurface_RenderThread(*this, Texture, GPUIndex, Fence, OutData, OutWidth, OutHeight)"
  },
  {
    "label": "UnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIUnmapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIUnmapStagingSurface_RenderThread(*this, Texture, GPUIndex)"
  },
  {
    "label": "ReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,TArray<FFloat16Color>& OutData,ECubeFace CubeFace,int32 ArrayIndex,int32 MipIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIReadSurfaceFloatData_RenderThread(*this, Texture,Rect,OutData,CubeFace,ArrayIndex,MipIndex)"
  },
  {
    "label": "ReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,TArray<FFloat16Color>& OutData,FReadSurfaceDataFlags Flags)"
  },
  {
    "label": "RHIReadSurfaceFloatData_RenderThread()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIReadSurfaceFloatData_RenderThread(*this, Texture,Rect,OutData,Flags)"
  },
  {
    "label": "Read3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Read3DSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,FIntPoint ZMinMax,TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags Flags = FReadSurfaceDataFlags())"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_Read3DSurfaceFloatData_Flush)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIRead3DSurfaceFloatData(Texture,Rect,ZMinMax,OutData,Flags)"
  },
  {
    "label": "FlushResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushResources()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_FlushResources_Flush)"
  },
  {
    "label": "SubmitAndBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubmitAndBlockUntilGPUIdle()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_SubmitAndBlockUntilGPUIdle_Flush)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "BlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlockUntilGPUIdle()"
  },
  {
    "label": "SubmitCommandsAndFlushGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubmitCommandsAndFlushGPU()"
  },
  {
    "label": "IsRenderingSuspended()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRenderingSuspended()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_IsRenderingSuspended_Flush)"
  },
  {
    "label": "VirtualTextureSetFirstMipInMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VirtualTextureSetFirstMipInMemory(FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipInMemory()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIVirtualTextureSetFirstMipInMemory(*this, Texture, FirstMip)"
  },
  {
    "label": "VirtualTextureSetFirstMipVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VirtualTextureSetFirstMipVisible(FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipVisible()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIVirtualTextureSetFirstMipVisible(*this, Texture, FirstMip)"
  },
  {
    "label": "GetNativeDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeDevice()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_GetNativeDevice_Flush)"
  },
  {
    "label": "GetNativePhysicalDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativePhysicalDevice()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_GetNativePhysicalDevice_Flush)"
  },
  {
    "label": "GetNativeGraphicsQueue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeGraphicsQueue()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_GetNativeGraphicsQueue_Flush)"
  },
  {
    "label": "GetNativeComputeQueue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeComputeQueue()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_GetNativeComputeQueue_Flush)"
  },
  {
    "label": "GetNativeInstance()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeInstance()"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(STAT_RHIMETHOD_GetNativeInstance_Flush)"
  },
  {
    "label": "GetNativeCommandBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeCommandBuffer()"
  },
  {
    "label": "ImmediateFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmediateFlush(EImmediateFlushType::DispatchToRHIThread)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(sizeof(FRHICommandListImmediate) == sizeof(FRHICommandListBase), \"FRHICommandListImmediate should not contain additional members.\")"
  },
  {
    "label": "FRHICommandListScopedFlushAndExecute()",
    "kind": "Method",
    "detail": "Function (class FRHICommandListScopedFlushAndExecute { FRHICommandListImmediate& RHICmdList ; public :)",
    "insertText": "FRHICommandListScopedFlushAndExecute(FRHICommandListImmediate& InRHICmdList) : RHICmdList(InRHICmdList)"
  },
  {
    "label": "FRHICommandListScopedFlushAndExecute()",
    "kind": "Method",
    "detail": "Function (RHICmdList . bExecuting = true ; } ~)",
    "insertText": "FRHICommandListScopedFlushAndExecute()"
  },
  {
    "label": "RHIResourceLifetimeAddRef()",
    "kind": "Method",
    "detail": "Function (RHICmdList . bExecuting = false ; } } ; void)",
    "insertText": "RHIResourceLifetimeAddRef(int32 NumRefs = 1)"
  },
  {
    "label": "RHIResourceLifetimeReleaseRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResourceLifetimeReleaseRef(FRHICommandListImmediate& RHICmdList, int32 NumRefs = 1)"
  },
  {
    "label": "FRHICommandListScopedExtendResourceLifetime()",
    "kind": "Method",
    "detail": "Function (class FRHICommandListScopedExtendResourceLifetime { public :)",
    "insertText": "FRHICommandListScopedExtendResourceLifetime(FRHICommandListImmediate& InRHICmdList) : RHICmdList(InRHICmdList)"
  },
  {
    "label": "RHIResourceLifetimeAddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResourceLifetimeAddRef()"
  },
  {
    "label": "FRHICommandListScopedExtendResourceLifetime()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHICommandListScopedExtendResourceLifetime()"
  },
  {
    "label": "RHIResourceLifetimeReleaseRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResourceLifetimeReleaseRef(RHICmdList)"
  },
  {
    "label": "FRHICommandListScopedPipeline()",
    "kind": "Method",
    "detail": "Function (} private : FRHICommandListImmediate& RHICmdList ; } ; class FRHICommandListScopedPipeline { FRHICommandListBase& RHICmdList ; ERHIPipeline PreviousPipeline ; public :)",
    "insertText": "FRHICommandListScopedPipeline(FRHICommandListBase& RHICmdList, ERHIPipeline Pipeline) : RHICmdList(RHICmdList) , PreviousPipeline(RHICmdList.SwitchPipeline(Pipeline))"
  },
  {
    "label": "FRHICommandListScopedPipeline()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHICommandListScopedPipeline()"
  },
  {
    "label": "SwitchPipeline()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SwitchPipeline(PreviousPipeline)"
  },
  {
    "label": "FRHIScopedGPUMask()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHIScopedGPUMask { FRHIComputeCommandList& RHICmdList ; FRHIGPUMask PrevGPUMask ;)",
    "insertText": "FRHIScopedGPUMask(FRHIComputeCommandList& InRHICmdList, FRHIGPUMask InGPUMask) : RHICmdList(InRHICmdList) , PrevGPUMask(InRHICmdList.GetGPUMask())"
  },
  {
    "label": "SetGPUMask()",
    "kind": "Method",
    "detail": "Function (InRHICmdList .)",
    "insertText": "SetGPUMask(InGPUMask)"
  },
  {
    "label": "FRHIScopedGPUMask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHIScopedGPUMask()"
  },
  {
    "label": "SetGPUMask()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetGPUMask(PrevGPUMask)"
  },
  {
    "label": "FRHIScopedGPUMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIScopedGPUMask(FRHIScopedGPUMask const&)"
  },
  {
    "label": "FRHIScopedGPUMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIScopedGPUMask(FRHIScopedGPUMask&&)"
  },
  {
    "label": "SCOPED_GPU_MASK()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_MGPU # define)",
    "insertText": "SCOPED_GPU_MASK(RHICmdList, GPUMask) FRHIScopedGPUMask PREPROCESSOR_JOIN(ScopedGPUMask, __LINE__)"
  },
  {
    "label": "SCOPED_GPU_MASK()",
    "kind": "Method",
    "detail": "Function (RHICmdList,GPUMask } # else # define)",
    "insertText": "SCOPED_GPU_MASK(RHICmdList, GPUMask)"
  },
  {
    "label": "FScopedUniformBufferStaticBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedUniformBufferStaticBindings(FRHIComputeCommandList& InRHICmdList, FUniformBufferStaticBindings UniformBuffers) : RHICmdList(InRHICmdList)"
  },
  {
    "label": "OnScopeEnter()",
    "kind": "Method",
    "detail": "Function (# if VALIDATE_UNIFORM_BUFFER_STATIC_BINDINGS)",
    "insertText": "OnScopeEnter()"
  },
  {
    "label": "SetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (# endif RHICmdList .)",
    "insertText": "SetStaticUniformBuffers(UniformBuffers)"
  },
  {
    "label": "FScopedUniformBufferStaticBindings()",
    "kind": "Method",
    "detail": "Function (} template<. . . TArgs>)",
    "insertText": "FScopedUniformBufferStaticBindings(FRHIComputeCommandList& InRHICmdList, TArgs... Args) : FScopedUniformBufferStaticBindings(InRHICmdList, FUniformBufferStaticBindings{ Args... })"
  },
  {
    "label": "FScopedUniformBufferStaticBindings()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedUniformBufferStaticBindings()"
  },
  {
    "label": "SetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetStaticUniformBuffers(FUniformBufferStaticBindings())"
  },
  {
    "label": "OnScopeExit()",
    "kind": "Method",
    "detail": "Function (# if VALIDATE_UNIFORM_BUFFER_STATIC_BINDINGS)",
    "insertText": "OnScopeExit()"
  },
  {
    "label": "SCOPED_UNIFORM_BUFFER_STATIC_BINDINGS()",
    "kind": "Method",
    "detail": "Function (# endif } ; # define)",
    "insertText": "SCOPED_UNIFORM_BUFFER_STATIC_BINDINGS(RHICmdList, UniformBuffers) FScopedUniformBufferStaticBindings PREPROCESSOR_JOIN(UniformBuffers, __LINE__)"
  },
  {
    "label": "FRHICommandList_RecursiveHazardous()",
    "kind": "Method",
    "detail": "Function (RHICmdList,UniformBuffers } class FRHICommandList_RecursiveHazardous : public FRHICommandList { public :)",
    "insertText": "FRHICommandList_RecursiveHazardous(IRHICommandContext* Context)"
  },
  {
    "label": "FRHICommandList_RecursiveHazardous()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHICommandList_RecursiveHazardous()"
  },
  {
    "label": "TRHILambdaCommand()",
    "kind": "Method",
    "detail": "Function (} ; template<ContextType> class TRHICommandList_RecursiveHazardous : public FRHICommandList_RecursiveHazardous { template<LAMBDA> struct TRHILambdaCommand final : public FRHICommandBase { LAMBDA Lambda ;)",
    "insertText": "TRHILambdaCommand(LAMBDA&& InLambda) : Lambda(Forward<LAMBDA>(InLambda))"
  },
  {
    "label": "ContextType()",
    "kind": "Method",
    "detail": "Function (ContextType& Context = static_cast<)",
    "insertText": "ContextType(CmdList.GetContext().GetLowestLevelContext())"
  },
  {
    "label": "BeginRecursiveCommand()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "BeginRecursiveCommand()"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(Context)"
  },
  {
    "label": "TRHICommandList_RecursiveHazardous()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "TRHICommandList_RecursiveHazardous(ContextType* Context) : FRHICommandList_RecursiveHazardous(Context)"
  },
  {
    "label": "RunOnContext()",
    "kind": "Method",
    "detail": "Function (} template<LAMBDA> void)",
    "insertText": "RunOnContext(LAMBDA&& Lambda)"
  },
  {
    "label": "ContextType()",
    "kind": "Method",
    "detail": "Function (ContextType& Context = static_cast<)",
    "insertText": "ContextType(GetContext().GetLowestLevelContext())"
  },
  {
    "label": "ALLOC_COMMAND()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ALLOC_COMMAND(TRHILambdaCommand<LAMBDA>)(Forward<LAMBDA>(Lambda))"
  },
  {
    "label": "FRHIComputeCommandList_RecursiveHazardous()",
    "kind": "Method",
    "detail": "Function (} } } ; class FRHIComputeCommandList_RecursiveHazardous : public FRHIComputeCommandList { public :)",
    "insertText": "FRHIComputeCommandList_RecursiveHazardous(IRHIComputeContext* Context)"
  },
  {
    "label": "FRHIComputeCommandList_RecursiveHazardous()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHIComputeCommandList_RecursiveHazardous()"
  },
  {
    "label": "ContextType()",
    "kind": "Method",
    "detail": "Function (ContextType& Context = static_cast<)",
    "insertText": "ContextType(CmdList.GetComputeContext().GetLowestLevelContext())"
  },
  {
    "label": "TRHIComputeCommandList_RecursiveHazardous()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "TRHIComputeCommandList_RecursiveHazardous(ContextType* Context) : FRHIComputeCommandList_RecursiveHazardous(Context)"
  },
  {
    "label": "ContextType()",
    "kind": "Method",
    "detail": "Function (ContextType& Context = static_cast<)",
    "insertText": "ContextType(GetComputeContext().GetLowestLevelContext())"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (} } } ; class FRHICommandListExecutor { public : FRHICommandListImmediate&)",
    "insertText": "GetImmediateCommandList()"
  },
  {
    "label": "LatchBypass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LatchBypass()"
  },
  {
    "label": "Submit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Submit(TConstArrayView<FRHICommandListBase*> AdditionalCommandLists, ERHISubmitFlags SubmitFlags)"
  },
  {
    "label": "WaitOnRHIThreadFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitOnRHIThreadFence(FGraphEventRef& Fence)"
  },
  {
    "label": "WaitForTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTasks()"
  },
  {
    "label": "WaitForTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTasks(WaitOutstandingTasks)"
  },
  {
    "label": "WaitForTasks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForTasks(FGraphEventArray& OutstandingTasks)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ImmediateFlush(EImmediateFlushType::FlushRHIThread)"
  },
  {
    "label": "CleanupGraphEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanupGraphEvents()"
  },
  {
    "label": "UseParallelAlgorithms()",
    "kind": "Method",
    "detail": "Function (# if CAN_TOGGLE_COMMAND_LIST_BYPASS return bLatchedBypass ; # else return false ; # endif } bool)",
    "insertText": "UseParallelAlgorithms()"
  },
  {
    "label": "ShouldUseThreadingForPerformance()",
    "kind": "Method",
    "detail": "Function (# if CAN_TOGGLE_COMMAND_LIST_BYPASS return bLatchedUseParallelAlgorithms ; # else return)",
    "insertText": "ShouldUseThreadingForPerformance() && !Bypass() && (GSupportsParallelRenderingTasksWithSeparateRHIThread || !IsRunningRHIInSeparateThread())"
  },
  {
    "label": "AreRHITasksActive()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "AreRHITasksActive()"
  },
  {
    "label": "AddNextDispatchPrerequisite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNextDispatchPrerequisite(FGraphEventRef Prereq)"
  },
  {
    "label": "GetCompletionEvent()",
    "kind": "Method",
    "detail": "Function (const FGraphEventRef&)",
    "insertText": "GetCompletionEvent()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FTask* Task, FGraphEventRef const& CurrentEvent)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Enqueue(ENamedThreads::Type NamedThread, FGraphEventArray&& Prereqs, TFunction<void()>&& Lambda)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "Close()"
  },
  {
    "label": "EnqueueTranslateTask()",
    "kind": "Method",
    "detail": "Function (LastEvent = nullptr ; } } ; FTaskPipe DispatchPipe ; FTaskPipe RHIThreadPipe ; struct FTranslateState { struct FPipelineState { # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbRange Range { } ; # endif IRHIComputeContext* Context = nullptr ; IRHIPlatformCommandList* FinalizedCmdList = nullptr ; } ; TRHIPipelineArray<FPipelineState> PipelineStates { } ; IRHIUploadContext* UploadContextState = nullptr ; # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbAllocatorArray BreadcrumbAllocatorRefs { } ; # endif FTaskPipe TranslatePipe ; uint32 NumCommands = 0 ; bool bParallel = false ; FRHIDrawStats DrawStats { } ; FTaskPipe*)",
    "insertText": "EnqueueTranslateTask(FGraphEventArray&& Prereqs, TFunction<void()>&& Lambda)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(FRHICommandListBase* CmdList)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "Finalize()"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (} ; struct FSubmitState { FGraphEventRef CompletionEvent ; TArray<TUniquePtr<FTranslateState>> TranslateJobs ; FGraphEventArray TranslateEvents ; FTranslateState* CurrentTranslateJob = nullptr ; int32 MaxCommandsPerTranslate = 0 ; bool bAllowSingleParallelCombine = false ; bool bAllowParallelTranslate = true ; # if WITH_RHI_BREADCRUMBS bool bEmitBreadcrumbs = false ; # endif FRHIDrawStats DrawStats { } ; ERHISubmitFlags SubmitFlags = ERHISubmitFlags::None ; TArray<FRHIResource*> ResourcesToDelete { } ; bool bIncludeExtendedLifetimeResources = false ; void)",
    "insertText": "Dispatch(FRHICommandListBase* CmdList)"
  },
  {
    "label": "Submit()",
    "kind": "Method",
    "detail": "Function (struct FSubmitArgs { # if WITH_RHI_BREADCRUMBS TRHIPipelineArray<FRHIBreadcrumbNode*> GPUBreadcrumbs ; # endif } ; void)",
    "insertText": "Submit(const FSubmitArgs& Args)"
  },
  {
    "label": "FinalizeCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeCurrent()"
  },
  {
    "label": "EnqueueDispatchTask()",
    "kind": "Method",
    "detail": "Function (}* SubmitState = nullptr ; FGraphEventRef LastMutate ; FGraphEventRef LastSubmit ; FGraphEventRef CompletionEvent ; FTaskPipe*)",
    "insertText": "EnqueueDispatchTask(FGraphEventArray&& Prereqs, TFunction<void()>&& Lambda)"
  },
  {
    "label": "EnqueueSubmitTask()",
    "kind": "Method",
    "detail": "Function (FTaskPipe*)",
    "insertText": "EnqueueSubmitTask(FGraphEventArray&& Prereqs, TFunction<void()>&& Lambda)"
  },
  {
    "label": "AllowParallel()",
    "kind": "Method",
    "detail": "Function (FGraphEventArray NextDispatchTaskPrerequisites ; # if WITH_RHI_BREADCRUMBS struct FBreadcrumbState { FRHIBreadcrumbNodeRef Current { } ; FRHIBreadcrumbNodeRef Last { } ; } ; struct { FBreadcrumbState CPU { } ; TRHIPipelineArray<FBreadcrumbState> GPU { InPlace } ; } Breadcrumbs { } ; # endif # if HAS_GPU_STATS FRHIDrawStatsCategory const* CurrentDrawStatsCategory = nullptr ; # endif FRHIDrawStats FrameDrawStats ; uint32 FrameNumber = 0 ; bool)",
    "insertText": "AllowParallel()"
  },
  {
    "label": "GetDesiredThread()",
    "kind": "Method",
    "detail": "Function (class FRenderTask { public : ENamedThreads::Type)",
    "insertText": "GetDesiredThread()"
  },
  {
    "label": "RHIUpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTextureReference(FRHITextureReference* TextureRef, FRHITexture* NewTexture)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UpdateTextureReference(TextureRef, NewTexture)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHICreateTexture(const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(EnumHasAnyFlags(Flags, TexCreate_RenderTargetable | TexCreate_DepthStencilTargetable) ? ELLMTag::RenderTargets : ELLMTag::Textures)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (const ERHIAccess ResourceState = InResourceState = = ERHIAccess::Unknown ?)",
    "insertText": "RHIGetDefaultResourceState((ETextureCreateFlags)Flags, InitialMipData != nullptr)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "RHIAsyncCreateTexture2D(SizeX, SizeY, Format, NumMips, Flags, ERHIAccess::Unknown, InitialMipData, NumInitialMips, OutCompletionEvent)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bFlushRHIThread = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bFlushRHIThread = true)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().UnlockTexture2D(Texture, MipIndex, bLockWithinMiptail, bFlushRHIThread)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().UnlockTexture2DArray(Texture, TextureIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture2D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().UpdateTexture2D(Texture, MipIndex, UpdateRegion, SourcePitch, SourceData)"
  },
  {
    "label": "RHIBeginUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} FUpdateTexture3DData)",
    "insertText": "RHIBeginUpdateTexture3D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndUpdateTexture3D(FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().EndUpdateTexture3D(UpdateData)"
  },
  {
    "label": "RHIEndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndMultiUpdateTexture3D(TArray<FUpdateTexture3DData>& UpdateDataArray)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().EndMultiUpdateTexture3D(UpdateDataArray)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture3D(FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().UpdateTexture3D(Texture, MipIndex, UpdateRegion, SourceRowPitch, SourceDepthPitch, SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().UnlockTextureCubeFace(Texture, FaceIndex, ArrayIndex, MipIndex, bLockWithinMiptail)"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipInMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIVirtualTextureSetFirstMipInMemory(FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().VirtualTextureSetFirstMipInMemory(Texture, FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipVisible()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIVirtualTextureSetFirstMipVisible(FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().VirtualTextureSetFirstMipVisible(Texture, FirstMip)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativePhysicalDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativePhysicalDevice()"
  },
  {
    "label": "RHIGetNativeGraphicsQueue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeGraphicsQueue()"
  },
  {
    "label": "RHIGetNativeComputeQueue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeComputeQueue()"
  },
  {
    "label": "RHIGetNativeInstance()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeInstance()"
  },
  {
    "label": "RHIGetNativeCommandBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeCommandBuffer()"
  },
  {
    "label": "RHICreateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary(EShaderPlatform Platform, FString const& FilePath, FString const& Name)"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, uint32 Offset, uint32 Size)"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 Size)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "GetImmediateCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImmediateCommandList().UnlockStagingBuffer(StagingBuffer)"
  },
  {
    "label": "RHICreateRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (} FRayTracingGeometryRHIRef)",
    "insertText": "RHICreateRayTracingGeometry(const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHICalcRayTracingGeometrySize()",
    "kind": "Method",
    "detail": "Function (} FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingGeometrySize(const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindDebugLabelName(FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().BindDebugLabelName(Texture, Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindDebugLabelName(FRHIBuffer* Buffer, const TCHAR* Name)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().BindDebugLabelName(Buffer, Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindDebugLabelName(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const TCHAR* Name)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().BindDebugLabelName(UnorderedAccessViewRHI, Name)"
  },
  {
    "label": "CopySharedMips()",
    "kind": "Method",
    "detail": "Function (} namespace UE::RHI { void)",
    "insertText": "CopySharedMips(FRHICommandList& RHICmdList, FRHITexture* SrcTexture, FRHITexture* DstTexture)"
  },
  {
    "label": "CopySharedMips_AssumeSRVMaskState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySharedMips_AssumeSRVMaskState(FRHICommandList& RHICmdList, FRHITexture* SrcTexture, FRHITexture* DstTexture)"
  },
  {
    "label": "ConvertRayTracingShaderBindings()",
    "kind": "Method",
    "detail": "Function (FRayTracingShaderBindings)",
    "insertText": "ConvertRayTracingShaderBindings(const FRHIBatchedShaderParameters& BatchedParameters)"
  }
]