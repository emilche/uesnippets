[
  {
    "label": "PropertyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PropertyType"
  },
  {
    "label": "PropertyHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PropertyHeader"
  },
  {
    "label": "PropertyHeader()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_PropertyHeader_h # define Alembic_AbcCoreAbstract_PropertyHeader_h # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / MetaData . h> # include<Alembic / AbcCoreAbstract / DataType . h> # include<Alembic / AbcCoreAbstract / TimeSampling . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { enum PropertyType { kCompoundProperty = 0,kScalarProperty = 1,kArrayProperty = 2 } ; class PropertyHeader { public :)",
    "insertText": "PropertyHeader() : m_name(), m_propertyType( kScalarProperty ), m_metaData(), m_dataType(), m_timeSampling()"
  },
  {
    "label": "PropertyHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PropertyHeader(const std::string &iName, const MetaData &iMetaData ) : m_name( iName ), m_propertyType( kCompoundProperty ), m_metaData( iMetaData ), m_dataType(), m_timeSampling()"
  },
  {
    "label": "PropertyHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PropertyHeader(const std::string &iName, PropertyType iPropType, const MetaData &iMetaData, const DataType &iDataType, const TimeSamplingPtr & iTsamp ) : m_name( iName ), m_propertyType( iPropType ), m_metaData( iMetaData ), m_dataType( iDataType ), m_timeSampling( iTsamp)"
  },
  {
    "label": "PropertyHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PropertyHeader(const PropertyHeader &iCopy ) : m_name( iCopy.m_name ), m_propertyType( iCopy.m_propertyType ), m_metaData( iCopy.m_metaData ), m_dataType( iCopy.m_dataType ), m_timeSampling( iCopy.m_timeSampling)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PropertyHeader&)",
    "insertText": "operator(const PropertyHeader &iCopy)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (m_name = iCopy . m_name ; m_propertyType = iCopy . m_propertyType ; m_metaData = iCopy . m_metaData ; m_dataType = iCopy . m_dataType ; m_timeSampling = iCopy . m_timeSampling ; return* this ; } const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "getPropertyType()",
    "kind": "Method",
    "detail": "Function (m_name = iName ; } PropertyType)",
    "insertText": "getPropertyType()"
  },
  {
    "label": "isScalar()",
    "kind": "Method",
    "detail": "Function (m_propertyType = iPtyp ; } bool)",
    "insertText": "isScalar()"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (} const MetaData&)",
    "insertText": "getMetaData()"
  },
  {
    "label": "getDataType()",
    "kind": "Method",
    "detail": "Function (m_metaData = iMetaData ; } const DataType&)",
    "insertText": "getDataType()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (m_dataType = iDataType ; } TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  }
]