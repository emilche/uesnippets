[
  {
    "label": "AudioMultiVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioMultiVector"
  },
  {
    "label": "BackgroundNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BackgroundNoise"
  },
  {
    "label": "RandomVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomVector"
  },
  {
    "label": "StatisticsCalculator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsCalculator"
  },
  {
    "label": "SyncBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SyncBuffer"
  },
  {
    "label": "Expand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Expand"
  },
  {
    "label": "ChannelParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelParameters"
  },
  {
    "label": "ExpandFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandFactory"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_EXPAND_H_ # define MODULES_AUDIO_CODING_NETEQ_EXPAND_H_ # include<memory> # include \" modules / audio_coding / neteq / audio_vector . h \" namespace webrtc { class AudioMultiVector ; class BackgroundNoise ; class RandomVector ; class StatisticsCalculator ; class SyncBuffer ; class Expand { public :)",
    "insertText": "Expand(BackgroundNoise* background_noise, SyncBuffer* sync_buffer, RandomVector* random_vector, StatisticsCalculator* statistics, int fs, size_t num_channels)"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Expand()"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Expand(const Expand&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Expand&)",
    "insertText": "operator(const Expand&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Process(AudioMultiVector* output)"
  },
  {
    "label": "SetParametersForNormalAfterExpand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParametersForNormalAfterExpand()"
  },
  {
    "label": "SetParametersForMergeAfterExpand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParametersForMergeAfterExpand()"
  },
  {
    "label": "MuteFactor()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "MuteFactor(size_t channel)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(channel, num_channels_)"
  },
  {
    "label": "overlap_length()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "overlap_length()"
  },
  {
    "label": "max_lag()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "max_lag()"
  },
  {
    "label": "InitializeForAnExpandPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForAnExpandPeriod()"
  },
  {
    "label": "TooManyExpands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TooManyExpands()"
  },
  {
    "label": "AnalyzeSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeSignal(int16_t* random_vector)"
  },
  {
    "label": "ChannelParameters()",
    "kind": "Method",
    "detail": "Function (RandomVector* const random_vector_ ; SyncBuffer* const sync_buffer_ ; bool first_expand_ ; const int fs_hz_ ; const size_t num_channels_ ; int consecutive_expands_ ; private : const size_t kUnvoicedLpcOrder = 6 ; const size_t kNumCorrelationCandidates = 3 ; const size_t kDistortionLength = 2 0 ; const size_t kLpcAnalysisLength = 1 6 0 ; const size_t kMaxSampleRate = 4 8 0 0 0 ; const int kNumLags = 3 ; struct ChannelParameters {)",
    "insertText": "ChannelParameters()"
  },
  {
    "label": "Correlation()",
    "kind": "Method",
    "detail": "Function (int16_t mute_factor ; int16_t ar_filter [ kUnvoicedLpcOrder + 1 ] ; int16_t ar_filter_state [ kUnvoicedLpcOrder ] ; int16_t ar_gain ; int16_t ar_gain_scale ; int16_t voice_mix_factor ; int16_t current_voice_mix_factor ; AudioVector expand_vector0 ; AudioVector expand_vector1 ; bool onset ; int mute_slope ; } ; void)",
    "insertText": "Correlation(const int16_t* input, size_t input_length, int16_t* output)"
  },
  {
    "label": "UpdateLagIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLagIndex()"
  },
  {
    "label": "ExpandFactory()",
    "kind": "Method",
    "detail": "Function (BackgroundNoise* const background_noise_ ; StatisticsCalculator* const statistics_ ; const size_t overlap_length_ ; size_t max_lag_ ; size_t expand_lags_ [ kNumLags ] ; int lag_index_direction_ ; int current_lag_index_ ; bool stop_muting_ ; size_t expand_duration_samples_ ; std::unique_ptr<ChannelParameters [ ]> channel_parameters_ ; } ; struct ExpandFactory {)",
    "insertText": "ExpandFactory()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} Expand*)",
    "insertText": "Create(BackgroundNoise* background_noise, SyncBuffer* sync_buffer, RandomVector* random_vector, StatisticsCalculator* statistics, int fs, size_t num_channels)"
  }
]