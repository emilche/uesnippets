[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TMediaSampleQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMediaSampleQueue"
  },
  {
    "label": "FMediaAudioSampleQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaAudioSampleQueue"
  },
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "FMediaAudioSampleSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaAudioSampleSink"
  },
  {
    "label": "IMediaBinarySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaBinarySample"
  },
  {
    "label": "IMediaOverlaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOverlaySample"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "TMediaSampleQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Queue . h \" # include \" HAL / PlatformAtomics . h \" # include \" IMediaSamples . h \" # include \" HAL / CriticalSection . h \" # include \" Math / Interval . h \" # include \" Misc / App . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" # include \" MediaSampleSink . h \" # include \" MediaSampleSource . h \" # include \" IMediaTimeSource . h \" # include \" IMediaAudioSample . h \" # include \" IMediaTextureSample . h \" # include \" IMediaBinarySample . h \" # include \" IMediaOverlaySample . h \" enum class EMediaSampleQueueFetchResult { Found,None,PurgedToEmpty } ; template<SampleType,SinkType = TMediaSampleSink<SampleType>> class TMediaSampleQueue : public SinkType,public TMediaSampleSource<SampleType> { public :)",
    "insertText": "TMediaSampleQueue(int32 InMaxSamplesInQueue = -1) : MaxSamplesInQueue(InMaxSamplesInQueue)"
  },
  {
    "label": "TMediaSampleQueue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TMediaSampleQueue()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "Num()"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Dequeue(TSharedPtr<SampleType, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (OutSample = Sample ; return true ; } bool)",
    "insertText": "Peek(TSharedPtr<SampleType, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "LastSample()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SampleType,ESPMode::ThreadSafe>)",
    "insertText": "LastSample(Samples.Last())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutSampleTimeRanges .)",
    "insertText": "Emplace(TRange<FMediaTimeStamp>(Samples[i]->GetTime(), Samples[i]->GetTime() + Samples[i]->GetDuration()))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "Pop()"
  },
  {
    "label": "FindRangeInQueue()",
    "kind": "Method",
    "detail": "Function (int32 FirstPossibleIndex,LastPossibleIndex,NumOldSamplesAtBegin ;)",
    "insertText": "FindRangeInQueue(TimeRange, bReverse, FirstPossibleIndex, LastPossibleIndex, NumOldSamplesAtBegin)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "RemoveAt(FirstPossibleIndex, LastPossibleIndex - FirstPossibleIndex + 1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutSample .)",
    "insertText": "Reset()"
  },
  {
    "label": "BestDuration()",
    "kind": "Method",
    "detail": "Function (FMediaTimeStamp)",
    "insertText": "BestDuration(FTimespan::Zero(), -1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 BestIndex = FirstPossibleIndex ;)",
    "insertText": "for(int32 Idx = FirstPossibleIndex; Idx <= LastPossibleIndex; ++Idx)"
  },
  {
    "label": "FMediaTimeStamp()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<SampleType,ESPMode::ThreadSafe>& Sample = Samples [ Idx ] ; TRange<FMediaTimeStamp> SampleTimeRange = TRange<)",
    "insertText": "FMediaTimeStamp(Sample->GetTime(), Sample->GetTime() + Sample->GetDuration())"
  },
  {
    "label": "SampleInRangeRange()",
    "kind": "Method",
    "detail": "Function (TRange<FMediaTimeStamp>)",
    "insertText": "SampleInRangeRange(TRange<FMediaTimeStamp>::Intersection(SampleTimeRange, TimeRange))"
  },
  {
    "label": "SampleDuration()",
    "kind": "Method",
    "detail": "Function (FMediaTimeStamp)",
    "insertText": "SampleDuration(SampleInRangeRange.Size<FMediaTimeStamp>())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (BestDuration = SampleDuration ; BestIndex = Idx ; } } })",
    "insertText": "check(BestIndex >= NumOldSamplesAtBegin)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (OutSample = Samples [ BestIndex ] ; Samples .)",
    "insertText": "RemoveAt(FirstPossibleIndex, BestIndex - FirstPossibleIndex + 1)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} else { OutSample = Samples [ FirstPossibleIndex ] ; Samples .)",
    "insertText": "RemoveAt(FirstPossibleIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (OutSample = Sample ; Samples .)",
    "insertText": "RemoveAt(FirstPossibleIndex, Idx - FirstPossibleIndex + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } } })",
    "insertText": "if(NumOldSamplesAtBegin != 0)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "RemoveAt(0, NumOldSamplesAtBegin)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} return OutSample .)",
    "insertText": "IsValid() ? EMediaSampleQueueFetchResult::Found : (NumOldSamplesAtBegin && Samples.IsEmpty() ? EMediaSampleQueueFetchResult::PurgedToEmpty : EMediaSampleQueueFetchResult::None)"
  },
  {
    "label": "PurgeOutdatedSamples()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "PurgeOutdatedSamples(const FMediaTimeStamp& ReferenceTime, bool bReversed, FTimespan MaxAge)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Idx ;)",
    "insertText": "if(!bReversed)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } } } else {)",
    "insertText": "for(Idx = Num - 1; Idx >= 0; --Idx)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (break ; } } } FTimespan Age =)",
    "insertText": "Zero()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (auto Duration = Samples [ Idx ] ->)",
    "insertText": "GetDuration()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Age + = Duration ;)",
    "insertText": "if(Age > MaxAge)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "RemoveAt(0, Idx + 1)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetFlushCount()",
    "kind": "Method",
    "detail": "Function (+ + FlushCount ; } uint32)",
    "insertText": "GetFlushCount()"
  },
  {
    "label": "FindRangeInQueue()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "FindRangeInQueue(const TRange<FMediaTimeStamp>& TimeRange, bool bReverse, int32& FirstPossibleIndex, int32& LastPossibleIndex, int32& NumOldSamplesAtBegin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FirstPossibleIndex = Idx ; } LastPossibleIndex = Idx ; } else {)",
    "insertText": "if(!bReverse ? (SampleTimeRange.GetLowerBoundValue() >= TimeRange.GetUpperBoundValue()) : (SampleTimeRange.GetUpperBoundValue() <= TimeRange.GetLowerBoundValue()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(FirstPossibleIndex < 0)"
  },
  {
    "label": "FMediaAudioSampleQueue()",
    "kind": "Method",
    "detail": "Function (+ + NumOldSamplesAtBegin ; } else { LastPossibleIndex = Idx ; } } } } } FCriticalSection CriticalSection ; TArray<TSharedPtr<SampleType,ESPMode::ThreadSafe>> Samples ; int32 MaxSamplesInQueue ; uint32 FlushCount = 0 ; } ; class FMediaAudioSampleQueue : public TMediaSampleQueue<class IMediaAudioSample,class FMediaAudioSampleSink> { public :)",
    "insertText": "FMediaAudioSampleQueue(uint32 MaxSamplesInQueue = -1) : TMediaSampleQueue<class IMediaAudioSample, class FMediaAudioSampleSink>(MaxSamplesInQueue)"
  },
  {
    "label": "SetAudioTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAudioTime(const FMediaTimeStampSample& InAudioTime)"
  },
  {
    "label": "SetAudioTimeIfEqualFlushCount()",
    "kind": "Method",
    "detail": "Function (AudioTime = InAudioTime ; } void)",
    "insertText": "SetAudioTimeIfEqualFlushCount(const FMediaTimeStampSample& InAudioTime, uint32 InFlushCount)"
  },
  {
    "label": "GetAudioTime()",
    "kind": "Method",
    "detail": "Function (AudioTime = InAudioTime ; } } FMediaTimeStampSample)",
    "insertText": "GetAudioTime()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (AudioTime .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "RequestFlush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestFlush()"
  }
]