[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FBoolProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoolProperty"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "TOutlinerModelMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOutlinerModelMixin"
  },
  {
    "label": "FOutlinerItemModelMixin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / Extensions / ICurveEditorTreeItemExtension . h \" # include \" MVVM / Extensions / IDimmableExtension . h \" # include \" MVVM / Extensions / IGeometryExtension . h \" # include \" MVVM / Extensions / IHoveredExtension . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MVVM / Extensions / IPinnableExtension . h \" # include \" MVVM / Extensions / IMutableExtension . h \" # include \" MVVM / Extensions / ISoloableExtension . h \" # include \" MVVM / Extensions / HierarchicalCacheExtension . h \" # include \" CurveEditorTypes . h \" # include \" Tree / ICurveEditorTreeItem . h \" class UMovieSceneSection ; class UMovieSceneSequence ; class UMovieSceneTrack ; class FBoolProperty ; class FSequencer ; class IDetailsView ; namespace UE { namespace Sequencer { class FSequencerEditorViewModel ; class FOutlinerItemModelMixin : public FOutlinerExtensionShim,public FGeometryExtensionShim,public FPinnableExtensionShim,public FHoveredExtensionShim,public IDimmableExtension,public FCurveEditorTreeItemExtensionShim,public ICurveEditorTreeItem { public : using Implements = TImplements<IOutlinerExtension,IGeometryExtension,IPinnableExtension,IHoveredExtension,IDimmableExtension,ICurveEditorTreeItemExtension> ;)",
    "insertText": "FOutlinerItemModelMixin()"
  },
  {
    "label": "GetEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencerEditorViewModel>)",
    "insertText": "GetEditor()"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "IsExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpanded()"
  },
  {
    "label": "SetExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansion(bool bInIsExpanded)"
  },
  {
    "label": "IsFilteredOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilteredOut()"
  },
  {
    "label": "CreateContextMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateContextMenuWidget(const FCreateOutlinerContextMenuWidgetParams& InParams)"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor()"
  },
  {
    "label": "HasCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCurves()"
  },
  {
    "label": "GetCurveEditorTreeItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ICurveEditorTreeItem>)",
    "insertText": "GetCurveEditorTreeItem()"
  },
  {
    "label": "GetUniquePathName()",
    "kind": "Method",
    "detail": "Function (TOptional<FString>)",
    "insertText": "GetUniquePathName()"
  },
  {
    "label": "GenerateCurveEditorTreeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateCurveEditorTreeWidget(const FName& InColumnName, TWeakPtr<FCurveEditor> InCurveEditor, FCurveEditorTreeItemID InTreeItemID, const TSharedRef<ITableRow>& InTableRow)"
  },
  {
    "label": "CreateCurveModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCurveModels(TArray<TUniquePtr<FCurveModel>>& OutCurveModels)"
  },
  {
    "label": "PassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesFilter(const FCurveEditorTreeFilter* InFilter)"
  },
  {
    "label": "IsPinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPinned()"
  },
  {
    "label": "IsDimmed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDimmed()"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSidebarMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SetIdentifier()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetIdentifier(FName InNewIdentifier)"
  },
  {
    "label": "GetDefaultExpansionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultExpansionState()"
  },
  {
    "label": "SetExpansionWithoutSaving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansionWithoutSaving(bool bInIsExpanded)"
  },
  {
    "label": "BuildSectionColorTintsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSectionColorTintsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildOrganizeContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOrganizeContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildDisplayOptionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDisplayOptionsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildTrackOptionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackOptionsMenu(FMenuBuilder& MenuBuilder, const TArray<UMovieSceneTrack*>& InTracks)"
  },
  {
    "label": "BuildTrackRowOptionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackRowOptionsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AsViewModel()",
    "kind": "Method",
    "detail": "Function (private : FViewModel*)",
    "insertText": "AsViewModel()"
  },
  {
    "label": "IsRootModelPinned()",
    "kind": "Method",
    "detail": "Function (protected : FViewModelListHead OutlinerChildList ; private : bool)",
    "insertText": "IsRootModelPinned()"
  },
  {
    "label": "ToggleRootModelPinned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleRootModelPinned()"
  },
  {
    "label": "SelectedModelsSoloState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "SelectedModelsSoloState()"
  },
  {
    "label": "ToggleSelectedModelsSolo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectedModelsSolo()"
  },
  {
    "label": "SelectedModelsMuteState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "SelectedModelsMuteState()"
  },
  {
    "label": "ToggleSelectedModelsMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectedModelsMuted()"
  },
  {
    "label": "GetSelectedSections()",
    "kind": "Method",
    "detail": "Function (TArray<UMovieSceneSection*>)",
    "insertText": "GetSelectedSections()"
  },
  {
    "label": "GetSelectedTracks()",
    "kind": "Method",
    "detail": "Function (TArray<UMovieSceneTrack*>)",
    "insertText": "GetSelectedTracks()"
  },
  {
    "label": "GetSelectedTrackRows()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<UMovieSceneTrack*,int32>>)",
    "insertText": "GetSelectedTrackRows()"
  },
  {
    "label": "AddEvalOptionsPropertyMenuItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvalOptionsPropertyMenuItem(FMenuBuilder& InMenuBuilder, const FBoolProperty* InProperty, TFunction<bool(UMovieSceneTrack*)> InValidator = nullptr)"
  },
  {
    "label": "AddDisplayOptionsPropertyMenuItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDisplayOptionsPropertyMenuItem(FMenuBuilder& InMenuBuilder, const FBoolProperty* InProperty, TFunction<bool(UMovieSceneTrack*)> InValidator = nullptr)"
  },
  {
    "label": "TOutlinerModelMixin()",
    "kind": "Method",
    "detail": "Function (private : ICastable* CastableThis ; FName TreeItemIdentifier ; FCurveEditorTreeItemID CurveEditorItemID ; bool bInitializedExpansion ; bool bInitializedPinnedState ; } ; template<BaseType> class TOutlinerModelMixin : public BaseType,public FOutlinerItemModelMixin { public : template<. . . ArgTypes>)",
    "insertText": "TOutlinerModelMixin(ArgTypes&&... InArgs) : BaseType(Forward<ArgTypes>(InArgs)...)"
  },
  {
    "label": "RegisterChildList()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterChildList(&this->OutlinerChildList)"
  },
  {
    "label": "TOutlinerModelMixin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOutlinerModelMixin(const TOutlinerModelMixin<BaseType>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TOutlinerModelMixin<BaseType>)",
    "insertText": "operator(const TOutlinerModelMixin<BaseType>&)"
  },
  {
    "label": "TOutlinerModelMixin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TOutlinerModelMixin(TOutlinerModelMixin<BaseType>&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TOutlinerModelMixin<BaseType>)",
    "insertText": "operator(TOutlinerModelMixin<BaseType>&&)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (} ; class FMuteSoloOutlinerItemModel : public FOutlinerItemModel,public IMutableExtension,public ISoloableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FMuteSoloOutlinerItemModel, FOutlinerItemModel, IMutableExtension, ISoloableExtension)"
  },
  {
    "label": "IsSolo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSolo()"
  },
  {
    "label": "SetIsSoloed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSoloed(bool bIsSoloed)"
  },
  {
    "label": "IsMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMuted()"
  },
  {
    "label": "SetIsMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsMuted(bool bIsMuted)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} ; class FOutlinerCacheExtension : public FHierarchicalCacheExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FOutlinerCacheExtension)"
  },
  {
    "label": "FOutlinerCacheExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOutlinerCacheExtension()"
  }
]