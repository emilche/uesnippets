[
  {
    "label": "silk_stereo_find_predictor()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_stereo_find_predictor(                          /* O    Returns predictor in Q13                    */\n    opus_int32                  *ratio_Q14,                     /* O    Ratio of residual and mid energies          */\n    const opus_int16            x[],                            /* I    Basis signal                                */\n    const opus_int16            y[],                            /* I    Target signal                               */\n    opus_int32                  mid_res_amp_Q0[],               /* I/O  Smoothed mid, residual norms                */\n    opus_int                    length,                         /* I    Number of samples                           */\n    opus_int                    smooth_coef_Q16                 /* I    Smoothing coefficient                       */\n)"
  },
  {
    "label": "silk_stereo_encode_pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_encode_pred(\n    ec_enc                      *psRangeEnc,                    /* I/O  Compressor data structure                   */\n    opus_int8                   ix[ 2 ][ 3 ]                    /* I    Quantization indices                        */\n)"
  },
  {
    "label": "silk_stereo_encode_mid_only()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_encode_mid_only(\n    ec_enc                      *psRangeEnc,                    /* I/O  Compressor data structure                   */\n    opus_int8                   mid_only_flag\n)"
  },
  {
    "label": "silk_stereo_decode_pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_decode_pred(\n    ec_dec                      *psRangeDec,                    /* I/O  Compressor data structure                   */\n    opus_int32                  pred_Q13[]                      /* O    Predictors                                  */\n)"
  },
  {
    "label": "silk_stereo_decode_mid_only()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_decode_mid_only(\n    ec_dec                      *psRangeDec,                    /* I/O  Compressor data structure                   */\n    opus_int                    *decode_only_mid                /* O    Flag that only mid channel has been coded   */\n)"
  },
  {
    "label": "silk_encode_signs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_signs(\n    ec_enc                      *psRangeEnc,                        /* I/O  Compressor data structure               */\n    const opus_int8             pulses[],                           /* I    pulse signal                            */\n    opus_int                    length,                             /* I    length of input                         */\n    const opus_int              signalType,                         /* I    Signal type                             */\n    const opus_int              quantOffsetType,                    /* I    Quantization offset type                */\n    const opus_int              sum_pulses[ MAX_NB_SHELL_BLOCKS ]   /* I    Sum of absolute pulses per block        */\n)"
  },
  {
    "label": "silk_decode_signs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_signs(\n    ec_dec                      *psRangeDec,                        /* I/O  Compressor data structure               */\n    opus_int16                  pulses[],                           /* I/O  pulse signal                            */\n    opus_int                    length,                             /* I    length of input                         */\n    const opus_int              signalType,                         /* I    Signal type                             */\n    const opus_int              quantOffsetType,                    /* I    Quantization offset type                */\n    const opus_int              sum_pulses[ MAX_NB_SHELL_BLOCKS ]   /* I    Sum of absolute pulses per block        */\n)"
  },
  {
    "label": "check_control_input()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "check_control_input(\n    silk_EncControlStruct        *encControl                    /* I    Control structure                           */\n)"
  },
  {
    "label": "silk_control_audio_bandwidth()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_control_audio_bandwidth(\n    silk_encoder_state          *psEncC,                        /* I/O  Pointer to Silk encoder state               */\n    silk_EncControlStruct       *encControl                     /* I    Control structure                           */\n)"
  },
  {
    "label": "silk_encode_pulses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_pulses(\n    ec_enc                      *psRangeEnc,                    /* I/O  compressor data structure                   */\n    const opus_int              signalType,                     /* I    Signal type                                 */\n    const opus_int              quantOffsetType,                /* I    quantOffsetType                             */\n    opus_int8                   pulses[],                       /* I    quantization indices                        */\n    const opus_int              frame_length                    /* I    Frame length                                */\n)"
  },
  {
    "label": "silk_shell_encoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_shell_encoder(\n    ec_enc                      *psRangeEnc,                    /* I/O  compressor data structure                   */\n    const opus_int              *pulses0                        /* I    data: nonnegative pulse amplitudes          */\n)"
  },
  {
    "label": "silk_shell_decoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_shell_decoder(\n    opus_int16                  *pulses0,                       /* O    data: nonnegative pulse amplitudes          */\n    ec_dec                      *psRangeDec,                    /* I/O  Compressor data structure                   */\n    const opus_int              pulses4                         /* I    number of pulses per pulse-subframe         */\n)"
  },
  {
    "label": "silk_gains_dequant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_gains_dequant(\n    opus_int32                  gain_Q16[ MAX_NB_SUBFR ],       /* O    quantized gains                             */\n    const opus_int8             ind[ MAX_NB_SUBFR ],            /* I    gain indices                                */\n    opus_int8                   *prev_ind,                      /* I/O  last index in previous frame                */\n    const opus_int              conditional,                    /* I    first gain is delta coded if 1              */\n    const opus_int              nb_subfr                        /* I    number of subframes                          */\n)"
  },
  {
    "label": "silk_gains_ID()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_gains_ID(                                       /* O    returns unique identifier of gains          */\n    const opus_int8             ind[ MAX_NB_SUBFR ],            /* I    gain indices                                */\n    const opus_int              nb_subfr                        /* I    number of subframes                         */\n)"
  },
  {
    "label": "silk_interpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_interpolate(\n    opus_int16                  xi[ MAX_LPC_ORDER ],            /* O    interpolated vector                         */\n    const opus_int16            x0[ MAX_LPC_ORDER ],            /* I    first vector                                */\n    const opus_int16            x1[ MAX_LPC_ORDER ],            /* I    second vector                               */\n    const opus_int              ifact_Q2,                       /* I    interp. factor, weight on 2nd vector        */\n    const opus_int              d                               /* I    number of parameters                        */\n)"
  },
  {
    "label": "silk_quant_LTP_gains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_quant_LTP_gains(\n    opus_int16                  B_Q14[ MAX_NB_SUBFR * LTP_ORDER ],          /* O    Quantized LTP gains             */\n    opus_int8                   cbk_index[ MAX_NB_SUBFR ],                  /* O    Codebook Index                  */\n    opus_int8                   *periodicity_index,                         /* O    Periodicity Index               */\n    opus_int32                  *sum_gain_dB_Q7,                            /* I/O  Cumulative max prediction gain  */\n    opus_int                    *pred_gain_dB_Q7,                           /* O    LTP prediction gain             */\n    const opus_int32            XX_Q17[ MAX_NB_SUBFR*LTP_ORDER*LTP_ORDER ], /* I    Correlation matrix in Q18       */\n    const opus_int32            xX_Q17[ MAX_NB_SUBFR*LTP_ORDER ],           /* I    Correlation vector in Q18       */\n    const opus_int              subfr_len,                                  /* I    Number of samples per subframe  */\n    const opus_int              nb_subfr,                                   /* I    Number of subframes             */\n    int                         arch                                        /* I    Run-time architecture           */\n)"
  },
  {
    "label": "silk_VQ_WMat_EC_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_VQ_WMat_EC_c(\n    opus_int8                   *ind,                           /* O    index of best codebook vector               */\n    opus_int32                  *res_nrg_Q15,                   /* O    best residual energy                        */\n    opus_int32                  *rate_dist_Q8,                  /* O    best total bitrate                          */\n    opus_int                    *gain_Q7,                       /* O    sum of absolute LTP coefficients            */\n    const opus_int32            *XX_Q17,                        /* I    correlation matrix                          */\n    const opus_int32            *xX_Q17,                        /* I    correlation vector                          */\n    const opus_int8             *cb_Q7,                         /* I    codebook                                    */\n    const opus_uint8            *cb_gain_Q7,                    /* I    codebook effective gain                     */\n    const opus_uint8            *cl_Q5,                         /* I    code length for each codebook vector        */\n    const opus_int              subfr_len,                      /* I    number of samples per subframe              */\n    const opus_int32            max_gain_Q7,                    /* I    maximum sum of absolute LTP coefficients    */\n    const opus_int              L                               /* I    number of vectors in codebook               */\n)"
  },
  {
    "label": "silk_NSQ_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NSQ_c(\n    const silk_encoder_state    *psEncC,                                      /* I    Encoder State                   */\n    silk_nsq_state              *NSQ,                                         /* I/O  NSQ state                       */\n    SideInfoIndices             *psIndices,                                   /* I/O  Quantization Indices            */\n    const opus_int16            x16[],                                        /* I    Input                           */\n    opus_int8                   pulses[],                                     /* O    Quantized pulse signal          */\n    const opus_int16            PredCoef_Q12[ 2 * MAX_LPC_ORDER ],            /* I    Short term prediction coefs     */\n    const opus_int16            LTPCoef_Q14[ LTP_ORDER * MAX_NB_SUBFR ],      /* I    Long term prediction coefs      */\n    const opus_int16            AR_Q13[ MAX_NB_SUBFR * MAX_SHAPE_LPC_ORDER ], /* I    Noise shaping coefs             */\n    const opus_int              HarmShapeGain_Q14[ MAX_NB_SUBFR ],            /* I    Long term shaping coefs         */\n    const opus_int              Tilt_Q14[ MAX_NB_SUBFR ],                     /* I    Spectral tilt                   */\n    const opus_int32            LF_shp_Q14[ MAX_NB_SUBFR ],                   /* I    Low frequency shaping coefs     */\n    const opus_int32            Gains_Q16[ MAX_NB_SUBFR ],                    /* I    Quantization step sizes         */\n    const opus_int              pitchL[ MAX_NB_SUBFR ],                       /* I    Pitch lags                      */\n    const opus_int              Lambda_Q10,                                   /* I    Rate/distortion tradeoff        */\n    const opus_int              LTP_scale_Q14                                 /* I    LTP state scaling               */\n)"
  },
  {
    "label": "silk_NSQ_del_dec_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NSQ_del_dec_c(\n    const silk_encoder_state    *psEncC,                                      /* I    Encoder State                   */\n    silk_nsq_state              *NSQ,                                         /* I/O  NSQ state                       */\n    SideInfoIndices             *psIndices,                                   /* I/O  Quantization Indices            */\n    const opus_int16            x16[],                                        /* I    Input                           */\n    opus_int8                   pulses[],                                     /* O    Quantized pulse signal          */\n    const opus_int16            PredCoef_Q12[ 2 * MAX_LPC_ORDER ],            /* I    Short term prediction coefs     */\n    const opus_int16            LTPCoef_Q14[ LTP_ORDER * MAX_NB_SUBFR ],      /* I    Long term prediction coefs      */\n    const opus_int16            AR_Q13[ MAX_NB_SUBFR * MAX_SHAPE_LPC_ORDER ], /* I    Noise shaping coefs             */\n    const opus_int              HarmShapeGain_Q14[ MAX_NB_SUBFR ],            /* I    Long term shaping coefs         */\n    const opus_int              Tilt_Q14[ MAX_NB_SUBFR ],                     /* I    Spectral tilt                   */\n    const opus_int32            LF_shp_Q14[ MAX_NB_SUBFR ],                   /* I    Low frequency shaping coefs     */\n    const opus_int32            Gains_Q16[ MAX_NB_SUBFR ],                    /* I    Quantization step sizes         */\n    const opus_int              pitchL[ MAX_NB_SUBFR ],                       /* I    Pitch lags                      */\n    const opus_int              Lambda_Q10,                                   /* I    Rate/distortion tradeoff        */\n    const opus_int              LTP_scale_Q14                                 /* I    LTP state scaling               */\n)"
  },
  {
    "label": "silk_VAD_Init()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_VAD_Init(                                         /* O    Return value, 0 if success                  */\n    silk_VAD_state              *psSilk_VAD                     /* I/O  Pointer to Silk VAD state                   */\n)"
  },
  {
    "label": "silk_VAD_GetSA_Q8_c()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_VAD_GetSA_Q8_c(                                   /* O    Return value, 0 if success                  */\n    silk_encoder_state          *psEncC,                        /* I/O  Encoder state                               */\n    const opus_int16            pIn[]                           /* I    PCM input                                   */\n)"
  },
  {
    "label": "silk_LP_variable_cutoff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_LP_variable_cutoff(\n    silk_LP_state               *psLP,                          /* I/O  LP filter state                             */\n    opus_int16                  *frame,                         /* I/O  Low-pass filtered output signal             */\n    const opus_int              frame_length                    /* I    Frame length                                */\n)"
  },
  {
    "label": "silk_NLSF_encode()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_NLSF_encode(                                    /* O    Returns RD value in Q25                     */\n          opus_int8             *NLSFIndices,                   /* I    Codebook path vector [ LPC_ORDER + 1 ]      */\n          opus_int16            *pNLSF_Q15,                     /* I/O  Quantized NLSF vector [ LPC_ORDER ]         */\n    const silk_NLSF_CB_struct   *psNLSF_CB,                     /* I    Codebook object                             */\n    const opus_int16            *pW_QW,                         /* I    NLSF weight vector [ LPC_ORDER ]            */\n    const opus_int              NLSF_mu_Q20,                    /* I    Rate weight for the RD optimization         */\n    const opus_int              nSurvivors,                     /* I    Max survivors after first stage             */\n    const opus_int              signalType                      /* I    Signal type: 0/1/2                          */\n)"
  },
  {
    "label": "silk_NLSF_VQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_VQ(\n    opus_int32                  err_Q26[],                      /* O    Quantization errors [K]                     */\n    const opus_int16            in_Q15[],                       /* I    Input vectors to be quantized [LPC_order]   */\n    const opus_uint8            pCB_Q8[],                       /* I    Codebook vectors [K*LPC_order]              */\n    const opus_int16            pWght_Q9[],                     /* I    Codebook weights [K*LPC_order]              */\n    const opus_int              K,                              /* I    Number of codebook vectors                  */\n    const opus_int              LPC_order                       /* I    Number of LPCs                              */\n)"
  },
  {
    "label": "silk_NLSF_del_dec_quant()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_NLSF_del_dec_quant(                             /* O    Returns RD value in Q25                     */\n    opus_int8                   indices[],                      /* O    Quantization indices [ order ]              */\n    const opus_int16            x_Q10[],                        /* I    Input [ order ]                             */\n    const opus_int16            w_Q5[],                         /* I    Weights [ order ]                           */\n    const opus_uint8            pred_coef_Q8[],                 /* I    Backward predictor coefs [ order ]          */\n    const opus_int16            ec_ix[],                        /* I    Indices to entropy coding tables [ order ]  */\n    const opus_uint8            ec_rates_Q5[],                  /* I    Rates []                                    */\n    const opus_int              quant_step_size_Q16,            /* I    Quantization step size                      */\n    const opus_int16            inv_quant_step_size_Q6,         /* I    Inverse quantization step size              */\n    const opus_int32            mu_Q20,                         /* I    R/D tradeoff                                */\n    const opus_int16            order                           /* I    Number of input values                      */\n)"
  },
  {
    "label": "silk_NLSF_unpack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_unpack(\n          opus_int16            ec_ix[],                        /* O    Indices to entropy tables [ LPC_ORDER ]     */\n          opus_uint8            pred_Q8[],                      /* O    LSF predictor [ LPC_ORDER ]                 */\n    const silk_NLSF_CB_struct   *psNLSF_CB,                     /* I    Codebook object                             */\n    const opus_int              CB1_index                       /* I    Index of vector in first LSF codebook       */\n)"
  },
  {
    "label": "silk_NLSF_decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_decode(\n          opus_int16            *pNLSF_Q15,                     /* O    Quantized NLSF vector [ LPC_ORDER ]         */\n          opus_int8             *NLSFIndices,                   /* I    Codebook path vector [ LPC_ORDER + 1 ]      */\n    const silk_NLSF_CB_struct   *psNLSF_CB                      /* I    Codebook object                             */\n)"
  },
  {
    "label": "silk_init_decoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_init_decoder(\n    silk_decoder_state          *psDec                          /* I/O  Decoder state pointer                       */\n)"
  },
  {
    "label": "silk_decode_frame()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_decode_frame(\n    silk_decoder_state          *psDec,                         /* I/O  Pointer to Silk decoder state               */\n    ec_dec                      *psRangeDec,                    /* I/O  Compressor data structure                   */\n    opus_int16                  pOut[],                         /* O    Pointer to output speech frame              */\n    opus_int32                  *pN,                            /* O    Pointer to size of output frame             */\n    opus_int                    lostFlag,                       /* I    0: no loss, 1 loss, 2 decode fec            */\n    opus_int                    condCoding,                     /* I    The type of conditional coding to use       */\n    int                         arch                            /* I    Run-time architecture                       */\n)"
  },
  {
    "label": "silk_decode_indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_indices(\n    silk_decoder_state          *psDec,                         /* I/O  State                                       */\n    ec_dec                      *psRangeDec,                    /* I/O  Compressor data structure                   */\n    opus_int                    FrameIndex,                     /* I    Frame number                                */\n    opus_int                    decode_LBRR,                    /* I    Flag indicating LBRR data is being decoded  */\n    opus_int                    condCoding                      /* I    The type of conditional coding to use       */\n)"
  },
  {
    "label": "silk_decode_parameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_parameters(\n    silk_decoder_state          *psDec,                         /* I/O  State                                       */\n    silk_decoder_control        *psDecCtrl,                     /* I/O  Decoder control                             */\n    opus_int                    condCoding                      /* I    The type of conditional coding to use       */\n)"
  },
  {
    "label": "silk_decode_core()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_core(\n    silk_decoder_state          *psDec,                         /* I/O  Decoder state                               */\n    silk_decoder_control        *psDecCtrl,                     /* I    Decoder control                             */\n    opus_int16                  xq[],                           /* O    Decoded speech                              */\n    const opus_int16            pulses[ MAX_FRAME_LENGTH ],     /* I    Pulse signal                                */\n    int                         arch                            /* I    Run-time architecture                       */\n)"
  },
  {
    "label": "silk_decode_pulses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_pulses(\n    ec_dec                      *psRangeDec,                    /* I/O  Compressor data structure                   */\n    opus_int16                  pulses[],                       /* O    Excitation signal                           */\n    const opus_int              signalType,                     /* I    Sigtype                                     */\n    const opus_int              quantOffsetType,                /* I    quantOffsetType                             */\n    const opus_int              frame_length                    /* I    Frame length                                */\n)"
  },
  {
    "label": "silk_CNG_Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_CNG_Reset(\n    silk_decoder_state          *psDec                          /* I/O  Decoder state                               */\n)"
  },
  {
    "label": "silk_CNG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_CNG(\n    silk_decoder_state          *psDec,                         /* I/O  Decoder state                               */\n    silk_decoder_control        *psDecCtrl,                     /* I/O  Decoder control                             */\n    opus_int16                  frame[],                        /* I/O  Signal                                      */\n    opus_int                    length                          /* I    Length of residual                          */\n)"
  },
  {
    "label": "silk_encode_indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_indices(\n    silk_encoder_state          *psEncC,                        /* I/O  Encoder state                               */\n    ec_enc                      *psRangeEnc,                    /* I/O  Compressor data structure                   */\n    opus_int                    FrameIndex,                     /* I    Frame number                                */\n    opus_int                    encode_LBRR,                    /* I    Flag indicating LBRR data is being encoded  */\n    opus_int                    condCoding                      /* I    The type of conditional coding to use       */\n)"
  }
]