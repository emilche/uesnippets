[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_MAIN_H # define SILK_MAIN_H # include \" SigProc_FIX . h \" # include \" define . h \" # include \" structs . h \" # include \" tables . h \" # include \" PLC . h \" # include \" control . h \" # include \" debug . h \" # include \" entenc . h \" # include \" entdec . h \" # if)",
    "insertText": "defined(OPUS_X86_MAY_HAVE_SSE4_1) #include \"x86/main_sse.h\" #endif #if (defined(OPUS_ARM_ASM) || defined(OPUS_ARM_MAY_HAVE_NEON_INTR)) #include \"arm/NSQ_del_dec_arm.h\" #endif void silk_stereo_LR_to_MS( stereo_enc_state *state, opus_int16 x1[], opus_int16 x2[], opus_int8 ix[ 2 ][ 3 ], opus_int8 *mid_only_flag, opus_int32 mid_side_rates_bps[], opus_int32 total_rate_bps, opus_int prev_speech_act_Q8, opus_int toMono, opus_int fs_kHz, opus_int frame_length)"
  },
  {
    "label": "silk_stereo_MS_to_LR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_MS_to_LR(stereo_dec_state *state, opus_int16 x1[], opus_int16 x2[], const opus_int32 pred_Q13[], opus_int fs_kHz, opus_int frame_length)"
  },
  {
    "label": "silk_stereo_find_predictor()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_stereo_find_predictor(opus_int32 *ratio_Q14, const opus_int16 x[], const opus_int16 y[], opus_int32 mid_res_amp_Q0[], opus_int length, opus_int smooth_coef_Q16)"
  },
  {
    "label": "silk_stereo_quant_pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_quant_pred(opus_int32 pred_Q13[], opus_int8 ix[ 2 ][ 3 ])"
  },
  {
    "label": "silk_stereo_encode_pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_encode_pred(ec_enc *psRangeEnc, opus_int8 ix[ 2 ][ 3 ])"
  },
  {
    "label": "silk_stereo_encode_mid_only()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_encode_mid_only(ec_enc *psRangeEnc, opus_int8 mid_only_flag)"
  },
  {
    "label": "silk_stereo_decode_pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_decode_pred(ec_dec *psRangeDec, opus_int32 pred_Q13[])"
  },
  {
    "label": "silk_stereo_decode_mid_only()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_stereo_decode_mid_only(ec_dec *psRangeDec, opus_int *decode_only_mid)"
  },
  {
    "label": "silk_encode_signs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_signs(ec_enc *psRangeEnc, const opus_int8 pulses[], opus_int length, const opus_int signalType, const opus_int quantOffsetType, const opus_int sum_pulses[ MAX_NB_SHELL_BLOCKS ])"
  },
  {
    "label": "silk_decode_signs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_signs(ec_dec *psRangeDec, opus_int16 pulses[], opus_int length, const opus_int signalType, const opus_int quantOffsetType, const opus_int sum_pulses[ MAX_NB_SHELL_BLOCKS ])"
  },
  {
    "label": "check_control_input()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "check_control_input(silk_EncControlStruct *encControl)"
  },
  {
    "label": "silk_control_audio_bandwidth()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_control_audio_bandwidth(silk_encoder_state *psEncC, silk_EncControlStruct *encControl)"
  },
  {
    "label": "silk_control_SNR()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_control_SNR(silk_encoder_state *psEncC, opus_int32 TargetRate_bps)"
  },
  {
    "label": "silk_encode_pulses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_pulses(ec_enc *psRangeEnc, const opus_int signalType, const opus_int quantOffsetType, opus_int8 pulses[], const opus_int frame_length)"
  },
  {
    "label": "silk_shell_encoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_shell_encoder(ec_enc *psRangeEnc, const opus_int *pulses0)"
  },
  {
    "label": "silk_shell_decoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_shell_decoder(opus_int16 *pulses0, ec_dec *psRangeDec, const opus_int pulses4)"
  },
  {
    "label": "silk_gains_quant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_gains_quant(opus_int8 ind[ MAX_NB_SUBFR ], opus_int32 gain_Q16[ MAX_NB_SUBFR ], opus_int8 *prev_ind, const opus_int conditional, const opus_int nb_subfr)"
  },
  {
    "label": "silk_gains_dequant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_gains_dequant(opus_int32 gain_Q16[ MAX_NB_SUBFR ], const opus_int8 ind[ MAX_NB_SUBFR ], opus_int8 *prev_ind, const opus_int conditional, const opus_int nb_subfr)"
  },
  {
    "label": "silk_gains_ID()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_gains_ID(const opus_int8 ind[ MAX_NB_SUBFR ], const opus_int nb_subfr)"
  },
  {
    "label": "silk_interpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_interpolate(opus_int16 xi[ MAX_LPC_ORDER ], const opus_int16 x0[ MAX_LPC_ORDER ], const opus_int16 x1[ MAX_LPC_ORDER ], const opus_int ifact_Q2, const opus_int d)"
  },
  {
    "label": "silk_quant_LTP_gains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_quant_LTP_gains(opus_int16 B_Q14[ MAX_NB_SUBFR * LTP_ORDER ], opus_int8 cbk_index[ MAX_NB_SUBFR ], opus_int8 *periodicity_index, opus_int32 *sum_gain_dB_Q7, opus_int *pred_gain_dB_Q7, const opus_int32 XX_Q17[ MAX_NB_SUBFR*LTP_ORDER*LTP_ORDER ], const opus_int32 xX_Q17[ MAX_NB_SUBFR*LTP_ORDER ], const opus_int subfr_len, const opus_int nb_subfr, int arch)"
  },
  {
    "label": "silk_VQ_WMat_EC_c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_VQ_WMat_EC_c(opus_int8 *ind, opus_int32 *res_nrg_Q15, opus_int32 *rate_dist_Q8, opus_int *gain_Q7, const opus_int32 *XX_Q17, const opus_int32 *xX_Q17, const opus_int8 *cb_Q7, const opus_uint8 *cb_gain_Q7, const opus_uint8 *cl_Q5, const opus_int subfr_len, const opus_int32 max_gain_Q7, const opus_int L)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OVERRIDE_silk_VQ_WMat_EC) #define silk_VQ_WMat_EC(ind, res_nrg_Q15, rate_dist_Q8, gain_Q7, XX_Q17, xX_Q17, cb_Q7, cb_gain_Q7, cl_Q5, subfr_len, max_gain_Q7, L, arch) \\ ((void)(arch),silk_VQ_WMat_EC_c(ind, res_nrg_Q15, rate_dist_Q8, gain_Q7, XX_Q17, xX_Q17, cb_Q7, cb_gain_Q7, cl_Q5, subfr_len, max_gain_Q7, L)) #endif void silk_NSQ_c( const silk_encoder_state *psEncC, silk_nsq_state *NSQ, SideInfoIndices *psIndices, const opus_int16 x16[], opus_int8 pulses[], const opus_int16 PredCoef_Q12[ 2 * MAX_LPC_ORDER ], const opus_int16 LTPCoef_Q14[ LTP_ORDER * MAX_NB_SUBFR ], const opus_int16 AR_Q13[ MAX_NB_SUBFR * MAX_SHAPE_LPC_ORDER ], const opus_int HarmShapeGain_Q14[ MAX_NB_SUBFR ], const opus_int Tilt_Q14[ MAX_NB_SUBFR ], const opus_int32 LF_shp_Q14[ MAX_NB_SUBFR ], const opus_int32 Gains_Q16[ MAX_NB_SUBFR ], const opus_int pitchL[ MAX_NB_SUBFR ], const opus_int Lambda_Q10, const opus_int LTP_scale_Q14)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OVERRIDE_silk_NSQ) #define silk_NSQ(psEncC, NSQ, psIndices, x16, pulses, PredCoef_Q12, LTPCoef_Q14, AR_Q13, \\ HarmShapeGain_Q14, Tilt_Q14, LF_shp_Q14, Gains_Q16, pitchL, Lambda_Q10, LTP_scale_Q14, arch) \\ ((void)(arch),silk_NSQ_c(psEncC, NSQ, psIndices, x16, pulses, PredCoef_Q12, LTPCoef_Q14, AR_Q13, \\ HarmShapeGain_Q14, Tilt_Q14, LF_shp_Q14, Gains_Q16, pitchL, Lambda_Q10, LTP_scale_Q14)) #endif void silk_NSQ_del_dec_c( const silk_encoder_state *psEncC, silk_nsq_state *NSQ, SideInfoIndices *psIndices, const opus_int16 x16[], opus_int8 pulses[], const opus_int16 PredCoef_Q12[ 2 * MAX_LPC_ORDER ], const opus_int16 LTPCoef_Q14[ LTP_ORDER * MAX_NB_SUBFR ], const opus_int16 AR_Q13[ MAX_NB_SUBFR * MAX_SHAPE_LPC_ORDER ], const opus_int HarmShapeGain_Q14[ MAX_NB_SUBFR ], const opus_int Tilt_Q14[ MAX_NB_SUBFR ], const opus_int32 LF_shp_Q14[ MAX_NB_SUBFR ], const opus_int32 Gains_Q16[ MAX_NB_SUBFR ], const opus_int pitchL[ MAX_NB_SUBFR ], const opus_int Lambda_Q10, const opus_int LTP_scale_Q14)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OVERRIDE_silk_NSQ_del_dec) #define silk_NSQ_del_dec(psEncC, NSQ, psIndices, x16, pulses, PredCoef_Q12, LTPCoef_Q14, AR_Q13, \\ HarmShapeGain_Q14, Tilt_Q14, LF_shp_Q14, Gains_Q16, pitchL, Lambda_Q10, LTP_scale_Q14, arch) \\ ((void)(arch),silk_NSQ_del_dec_c(psEncC, NSQ, psIndices, x16, pulses, PredCoef_Q12, LTPCoef_Q14, AR_Q13, \\ HarmShapeGain_Q14, Tilt_Q14, LF_shp_Q14, Gains_Q16, pitchL, Lambda_Q10, LTP_scale_Q14)) #endif opus_int silk_VAD_Init( silk_VAD_state *psSilk_VAD)"
  },
  {
    "label": "silk_VAD_GetSA_Q8_c()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_VAD_GetSA_Q8_c(silk_encoder_state *psEncC, const opus_int16 pIn[])"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(OVERRIDE_silk_VAD_GetSA_Q8) #define silk_VAD_GetSA_Q8(psEnC, pIn, arch) ((void)(arch),silk_VAD_GetSA_Q8_c(psEnC, pIn)) #endif void silk_LP_variable_cutoff( silk_LP_state *psLP, opus_int16 *frame, const opus_int frame_length)"
  },
  {
    "label": "silk_process_NLSFs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_process_NLSFs(silk_encoder_state *psEncC, opus_int16 PredCoef_Q12[ 2 ][ MAX_LPC_ORDER ], opus_int16 pNLSF_Q15[ MAX_LPC_ORDER ], const opus_int16 prev_NLSFq_Q15[ MAX_LPC_ORDER ])"
  },
  {
    "label": "silk_NLSF_encode()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_NLSF_encode(opus_int8 *NLSFIndices, opus_int16 *pNLSF_Q15, const silk_NLSF_CB_struct *psNLSF_CB, const opus_int16 *pW_QW, const opus_int NLSF_mu_Q20, const opus_int nSurvivors, const opus_int signalType)"
  },
  {
    "label": "silk_NLSF_VQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_VQ(opus_int32 err_Q26[], const opus_int16 in_Q15[], const opus_uint8 pCB_Q8[], const opus_int16 pWght_Q9[], const opus_int K, const opus_int LPC_order)"
  },
  {
    "label": "silk_NLSF_del_dec_quant()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_NLSF_del_dec_quant(opus_int8 indices[], const opus_int16 x_Q10[], const opus_int16 w_Q5[], const opus_uint8 pred_coef_Q8[], const opus_int16 ec_ix[], const opus_uint8 ec_rates_Q5[], const opus_int quant_step_size_Q16, const opus_int16 inv_quant_step_size_Q6, const opus_int32 mu_Q20, const opus_int16 order)"
  },
  {
    "label": "silk_NLSF_unpack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_unpack(opus_int16 ec_ix[], opus_uint8 pred_Q8[], const silk_NLSF_CB_struct *psNLSF_CB, const opus_int CB1_index)"
  },
  {
    "label": "silk_NLSF_decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_NLSF_decode(opus_int16 *pNLSF_Q15, opus_int8 *NLSFIndices, const silk_NLSF_CB_struct *psNLSF_CB)"
  },
  {
    "label": "silk_init_decoder()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_init_decoder(silk_decoder_state *psDec)"
  },
  {
    "label": "silk_decoder_set_fs()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_decoder_set_fs(silk_decoder_state *psDec, opus_int fs_kHz, opus_int32 fs_API_Hz)"
  },
  {
    "label": "silk_decode_frame()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_decode_frame(silk_decoder_state *psDec, ec_dec *psRangeDec, opus_int16 pOut[], opus_int32 *pN, opus_int lostFlag, opus_int condCoding, int arch)"
  },
  {
    "label": "silk_decode_indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_indices(silk_decoder_state *psDec, ec_dec *psRangeDec, opus_int FrameIndex, opus_int decode_LBRR, opus_int condCoding)"
  },
  {
    "label": "silk_decode_parameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_parameters(silk_decoder_state *psDec, silk_decoder_control *psDecCtrl, opus_int condCoding)"
  },
  {
    "label": "silk_decode_core()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_core(silk_decoder_state *psDec, silk_decoder_control *psDecCtrl, opus_int16 xq[], const opus_int16 pulses[ MAX_FRAME_LENGTH ], int arch)"
  },
  {
    "label": "silk_decode_pulses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_decode_pulses(ec_dec *psRangeDec, opus_int16 pulses[], const opus_int signalType, const opus_int quantOffsetType, const opus_int frame_length)"
  },
  {
    "label": "silk_CNG_Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_CNG_Reset(silk_decoder_state *psDec)"
  },
  {
    "label": "silk_CNG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_CNG(silk_decoder_state *psDec, silk_decoder_control *psDecCtrl, opus_int16 frame[], opus_int length)"
  },
  {
    "label": "silk_encode_indices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_encode_indices(silk_encoder_state *psEncC, ec_enc *psRangeEnc, opus_int FrameIndex, opus_int encode_LBRR, opus_int condCoding)"
  }
]