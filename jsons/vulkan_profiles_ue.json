[
  {
    "label": "VpProfileProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpProfileProperties"
  },
  {
    "label": "VpBlockProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpBlockProperties"
  },
  {
    "label": "VpInstanceCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VpInstanceCreateFlagBits"
  },
  {
    "label": "VpInstanceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpInstanceCreateInfo"
  },
  {
    "label": "VpDeviceCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VpDeviceCreateFlagBits"
  },
  {
    "label": "VpDeviceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpDeviceCreateInfo"
  },
  {
    "label": "VpCapabilitiesCreateFlagBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VpCapabilitiesCreateFlagBits"
  },
  {
    "label": "VpVulkanFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpVulkanFunctions"
  },
  {
    "label": "VpCapabilitiesCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpCapabilitiesCreateInfo"
  },
  {
    "label": "VpFeatureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpFeatureDesc"
  },
  {
    "label": "VpPropertyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpPropertyDesc"
  },
  {
    "label": "VpQueueFamilyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpQueueFamilyDesc"
  },
  {
    "label": "VpFormatDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpFormatDesc"
  },
  {
    "label": "VpStructChainerDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpStructChainerDesc"
  },
  {
    "label": "VpVariantDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpVariantDesc"
  },
  {
    "label": "VpCapabilitiesDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpCapabilitiesDesc"
  },
  {
    "label": "VpProfileDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpProfileDesc"
  },
  {
    "label": "FeaturesChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeaturesChain"
  },
  {
    "label": "structure_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "structure_type"
  },
  {
    "label": "ExtensionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExtensionType"
  },
  {
    "label": "VpCapabilities_T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VpCapabilities_T"
  },
  {
    "label": "GPDP2EntryPoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GPDP2EntryPoints"
  },
  {
    "label": "UserData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserData"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # define VPAPI_ATTR # include<vulkan / vulkan . h> # include<cstddef> # include<cstdarg> # include<cstdio> # include<cstring> # include<cstdint> # include<cassert> # include<cmath> # include<string> # include<vector> # include<algorithm> # include<memory> # include<map> # if)",
    "insertText": "defined(VK_VERSION_1_1) #define VP_UE_Vulkan_ES3_1_Android 1 #define VP_UE_VULKAN_ES3_1_ANDROID_NAME \"VP_UE_Vulkan_ES3_1_Android\" #define VP_UE_VULKAN_ES3_1_ANDROID_SPEC_VERSION 1 #define VP_UE_VULKAN_ES3_1_ANDROID_MIN_API_VERSION VK_MAKE_VERSION(1, 1, 0) #endif #if defined(VK_VERSION_1_1) #define VP_UE_Vulkan_SM5 1 #define VP_UE_VULKAN_SM5_NAME \"VP_UE_Vulkan_SM5\" #define VP_UE_VULKAN_SM5_SPEC_VERSION 1 #define VP_UE_VULKAN_SM5_MIN_API_VERSION VK_MAKE_VERSION(1, 1, 0) #endif #if defined(VK_VERSION_1_1) #define VP_UE_Vulkan_SM5_Android 1 #define VP_UE_VULKAN_SM5_ANDROID_NAME \"VP_UE_Vulkan_SM5_Android\" #define VP_UE_VULKAN_SM5_ANDROID_SPEC_VERSION 1 #define VP_UE_VULKAN_SM5_ANDROID_MIN_API_VERSION VK_MAKE_VERSION(1, 1, 0) #endif #if defined(VK_VERSION_1_2) && \\ defined(VK_EXT_scalar_block_layout) && \\ defined(VK_KHR_acceleration_structure) && \\ defined(VK_KHR_buffer_device_address) && \\ defined(VK_KHR_deferred_host_operations) && \\ defined(VK_KHR_ray_query) && \\ defined(VK_KHR_shader_float_controls) && \\ defined(VK_KHR_spirv_1_4) #define VP_UE_Vulkan_SM5_Android_RT 1 #define VP_UE_VULKAN_SM5_ANDROID_RT_NAME \"VP_UE_Vulkan_SM5_Android_RT\" #define VP_UE_VULKAN_SM5_ANDROID_RT_SPEC_VERSION 1 #define VP_UE_VULKAN_SM5_ANDROID_RT_MIN_API_VERSION VK_MAKE_VERSION(1, 2, 0) #endif #if defined(VK_VERSION_1_3) && \\ defined(VK_EXT_descriptor_indexing) && \\ defined(VK_EXT_mesh_shader) && \\ defined(VK_EXT_scalar_block_layout) && \\ defined(VK_EXT_shader_image_atomic_int64) #define VP_UE_Vulkan_SM6 1 #define VP_UE_VULKAN_SM6_NAME \"VP_UE_Vulkan_SM6\" #define VP_UE_VULKAN_SM6_SPEC_VERSION 1 #define VP_UE_VULKAN_SM6_MIN_API_VERSION VK_MAKE_VERSION(1, 3, 0) #endif #if defined(VK_VERSION_1_3) && \\ defined(VK_EXT_descriptor_buffer) && \\ defined(VK_EXT_descriptor_indexing) && \\ defined(VK_EXT_mesh_shader) && \\ defined(VK_EXT_scalar_block_layout) && \\ defined(VK_EXT_scalar_block_layout) && \\ defined(VK_EXT_shader_image_atomic_int64) && \\ defined(VK_KHR_acceleration_structure) && \\ defined(VK_KHR_buffer_device_address) && \\ defined(VK_KHR_deferred_host_operations) && \\ defined(VK_KHR_ray_query) && \\ defined(VK_KHR_ray_tracing_pipeline) && \\ defined(VK_KHR_ray_tracing_position_fetch) && \\ defined(VK_KHR_shader_float_controls) && \\ defined(VK_KHR_spirv_1_4) #define VP_UE_Vulkan_SM6_RT 1 #define VP_UE_VULKAN_SM6_RT_NAME \"VP_UE_Vulkan_SM6_RT\" #define VP_UE_VULKAN_SM6_RT_SPEC_VERSION 1 #define VP_UE_VULKAN_SM6_RT_MIN_API_VERSION VK_MAKE_VERSION(1, 3, 0) #endif #define VP_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 2, 0, VK_HEADER_VERSION)"
  },
  {
    "label": "VK_DEFINE_HANDLE()",
    "kind": "Method",
    "detail": "Function (char profileName [ VP_MAX_PROFILE_NAME_SIZE ] ; uint32_t specVersion ; } VpProfileProperties ; typedef struct VpBlockProperties { VpProfileProperties profiles ; uint32_t apiVersion ; char blockName [ VP_MAX_PROFILE_NAME_SIZE ] ; } VpBlockProperties ; typedef enum VpInstanceCreateFlagBits { VP_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VpInstanceCreateFlagBits ; typedef VkFlags VpInstanceCreateFlags ; typedef struct VpInstanceCreateInfo { const VkInstanceCreateInfo* pCreateInfo ; VpInstanceCreateFlags flags ; uint32_t enabledFullProfileCount ; const VpProfileProperties* pEnabledFullProfiles ; uint32_t enabledProfileBlockCount ; const VpBlockProperties* pEnabledProfileBlocks ; } VpInstanceCreateInfo ; typedef enum VpDeviceCreateFlagBits { VP_DEVICE_CREATE_DISABLE_ROBUST_BUFFER_ACCESS_BIT = 0 x0000001,VP_DEVICE_CREATE_DISABLE_ROBUST_IMAGE_ACCESS_BIT = 0 x0000002,VP_DEVICE_CREATE_DISABLE_ROBUST_ACCESS = VP_DEVICE_CREATE_DISABLE_ROBUST_BUFFER_ACCESS_BIT | VP_DEVICE_CREATE_DISABLE_ROBUST_IMAGE_ACCESS_BIT,VP_DEVICE_CREATE_FLAG_BITS_MAX_ENUM = 0 x7FFFFFFF } VpDeviceCreateFlagBits ; typedef VkFlags VpDeviceCreateFlags ; typedef struct VpDeviceCreateInfo { const VkDeviceCreateInfo* pCreateInfo ; VpDeviceCreateFlags flags ; uint32_t enabledFullProfileCount ; const VpProfileProperties* pEnabledFullProfiles ; uint32_t enabledProfileBlockCount ; const VpBlockProperties* pEnabledProfileBlocks ; } VpDeviceCreateInfo ;)",
    "insertText": "VK_DEFINE_HANDLE(VpCapabilities)"
  },
  {
    "label": "VP_PROFILE_CREATE_STATIC_BIT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_PROFILE_CREATE_STATIC_BIT(1 << 0)"
  },
  {
    "label": "vpCreateCapabilities()",
    "kind": "Method",
    "detail": "Function (typedef VkFlags VpCapabilitiesCreateFlags ; typedef struct VpVulkanFunctions { PFN_vkGetInstanceProcAddr GetInstanceProcAddr ; PFN_vkGetDeviceProcAddr GetDeviceProcAddr ; PFN_vkEnumerateInstanceVersion EnumerateInstanceVersion ; PFN_vkEnumerateInstanceExtensionProperties EnumerateInstanceExtensionProperties ; PFN_vkEnumerateDeviceExtensionProperties EnumerateDeviceExtensionProperties ; PFN_vkGetPhysicalDeviceFeatures2 GetPhysicalDeviceFeatures2 ; PFN_vkGetPhysicalDeviceProperties2 GetPhysicalDeviceProperties2 ; PFN_vkGetPhysicalDeviceFormatProperties2 GetPhysicalDeviceFormatProperties2 ; PFN_vkGetPhysicalDeviceQueueFamilyProperties2 GetPhysicalDeviceQueueFamilyProperties2 ; PFN_vkCreateInstance CreateInstance ; PFN_vkCreateDevice CreateDevice ; } VpVulkanFunctions ; typedef struct VpCapabilitiesCreateInfo { VpCapabilitiesCreateFlags flags ; uint32_t apiVersion ; const VpVulkanFunctions* pVulkanFunctions ; } VpCapabilitiesCreateInfo ; VPAPI_ATTR VkResult)",
    "insertText": "vpCreateCapabilities(const VpCapabilitiesCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VpCapabilities* pCapabilities)"
  },
  {
    "label": "vpDestroyCapabilities()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR void)",
    "insertText": "vpDestroyCapabilities(VpCapabilities capabilities, const VkAllocationCallbacks* pAllocator)"
  },
  {
    "label": "vpGetProfiles()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfiles(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif uint32_t* pPropertyCount, VpProfileProperties* pProperties)"
  },
  {
    "label": "vpGetProfileRequiredProfiles()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileRequiredProfiles(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, uint32_t* pPropertyCount, VpProfileProperties* pProperties)"
  },
  {
    "label": "vpGetProfileAPIVersion()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR uint32_t)",
    "insertText": "vpGetProfileAPIVersion(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile)"
  },
  {
    "label": "vpGetProfileFallbacks()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileFallbacks(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, uint32_t* pPropertyCount, VpProfileProperties* pProperties)"
  },
  {
    "label": "vpHasMultipleVariantsProfile()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpHasMultipleVariantsProfile(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, VkBool32* pHasMultipleVariants)"
  },
  {
    "label": "vpGetInstanceProfileSupport()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetInstanceProfileSupport(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const char* pLayerName, const VpProfileProperties* pProfile, VkBool32* pSupported)"
  },
  {
    "label": "vpGetInstanceProfileVariantsSupport()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetInstanceProfileVariantsSupport(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const char* pLayerName, const VpProfileProperties* pProfile, VkBool32* pSupported, uint32_t* pPropertyCount, VpBlockProperties* pProperties)"
  },
  {
    "label": "vpCreateInstance()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpCreateInstance(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance)"
  },
  {
    "label": "vpGetPhysicalDeviceProfileSupport()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetPhysicalDeviceProfileSupport(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif VkInstance instance, VkPhysicalDevice physicalDevice, const VpProfileProperties* pProfile, VkBool32* pSupported)"
  },
  {
    "label": "vpGetPhysicalDeviceProfileVariantsSupport()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetPhysicalDeviceProfileVariantsSupport(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif VkInstance instance, VkPhysicalDevice physicalDevice, const VpProfileProperties* pProfile, VkBool32* pSupported, uint32_t* pPropertyCount, VpBlockProperties* pProperties)"
  },
  {
    "label": "vpCreateDevice()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpCreateDevice(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif VkPhysicalDevice physicalDevice, const VpDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice)"
  },
  {
    "label": "vpGetProfileInstanceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileInstanceExtensionProperties(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "vpGetProfileDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileDeviceExtensionProperties(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "vpGetProfileFeatures()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileFeatures(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, void* pNext)"
  },
  {
    "label": "vpGetProfileFeatureStructureTypes()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileFeatureStructureTypes(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, uint32_t* pStructureTypeCount, VkStructureType* pStructureTypes)"
  },
  {
    "label": "vpGetProfileProperties()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileProperties(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, void* pNext)"
  },
  {
    "label": "vpGetProfilePropertyStructureTypes()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfilePropertyStructureTypes(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, uint32_t* pStructureTypeCount, VkStructureType* pStructureTypes)"
  },
  {
    "label": "vpGetProfileFormats()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileFormats(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, uint32_t* pFormatCount, VkFormat* pFormats)"
  },
  {
    "label": "vpGetProfileFormatProperties()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileFormatProperties(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, VkFormat format, void* pNext)"
  },
  {
    "label": "vpGetProfileFormatStructureTypes()",
    "kind": "Method",
    "detail": "Function (VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileFormatStructureTypes(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, uint32_t* pStructureTypeCount, VkStructureType* pStructureTypes)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# include<cstdio> # ifndef VP_DEBUG_MESSAGE_CALLBACK # if)",
    "insertText": "defined(ANDROID) || defined(__ANDROID__) #include <android/log.h> #define VP_DEBUG_MESSAGE_CALLBACK(MSG) \\ __android_log_print(ANDROID_LOG_ERROR, \"Profiles ERROR\", \"%s\", MSG)"
  },
  {
    "label": "__android_log_print()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__android_log_print(ANDROID_LOG_DEBUG, \"Profiles WARNING\", \"%s\", MSG) #else #define VP_DEBUG_MESSAGE_CALLBACK(MSG) fprintf(stderr, \"%s\\n\", MSG) #endif #else void VP_DEBUG_MESSAGE_CALLBACK(const char*)"
  },
  {
    "label": "VP_DEBUG_MSG()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "VP_DEBUG_MSG(MSG) VP_DEBUG_MESSAGE_CALLBACK((MSG)) #define VP_DEBUG_MSGF(MSGFMT, ...)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (char msg [ 1 0 2 4 ] ;)",
    "insertText": "snprintf(msg, sizeof(msg) - 1, (MSGFMT), __VA_ARGS__)"
  },
  {
    "label": "VP_DEBUG_MESSAGE_CALLBACK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MESSAGE_CALLBACK(msg)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VP_DEBUG_COND_MSG(COND, MSG) if ((COND))"
  },
  {
    "label": "VP_DEBUG_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MSG((MSG))"
  },
  {
    "label": "VP_DEBUG_COND_MSGF()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VP_DEBUG_COND_MSGF(COND, MSGFMT, ...) if ((COND))"
  },
  {
    "label": "VP_DEBUG_MSGF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MSGF((MSGFMT), __VA_ARGS__)"
  },
  {
    "label": "FormatString()",
    "kind": "Method",
    "detail": "Function (} namespace detail { VPAPI_ATTR std::string)",
    "insertText": "FormatString(const char* message, ...)"
  },
  {
    "label": "STRING_BUFFER()",
    "kind": "Method",
    "detail": "Function (std::size_t const)",
    "insertText": "STRING_BUFFER(4096)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(message != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(strlen(message) >= 1 && strlen(message) < STRING_BUFFER)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (char buffer [ STRING_BUFFER ] ; va_list list ;)",
    "insertText": "va_start(list, message)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vsnprintf(buffer, STRING_BUFFER, message, list)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(list)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (const VkBaseOutStructure* p = static_cast<const)",
    "insertText": "VkBaseOutStructure(pNext)"
  },
  {
    "label": "vpGetStructure()",
    "kind": "Method",
    "detail": "Function (p = p -> pNext ; } return nullptr ; } VPAPI_ATTR void*)",
    "insertText": "vpGetStructure(void* pNext, VkStructureType type)"
  },
  {
    "label": "vpExtractStructure()",
    "kind": "Method",
    "detail": "Function (p = p -> pNext ; } return nullptr ; } VPAPI_ATTR VkBaseOutStructure*)",
    "insertText": "vpExtractStructure(VkPhysicalDeviceFeatures2KHR* pFeatures, VkStructureType structureType)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (VkBaseOutStructure* previous = nullptr ; VkBaseOutStructure* found = nullptr ;)",
    "insertText": "while(current != nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (found = current ;)",
    "insertText": "if(previous != nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (previous -> pNext = current -> pNext ; } current = nullptr ; } else { previous = current ; current = current -> pNext ; } })",
    "insertText": "if(found != nullptr)"
  },
  {
    "label": "GatherStructureTypes()",
    "kind": "Method",
    "detail": "Function (found -> pNext = nullptr ; return found ; } else { return nullptr ; } } VPAPI_ATTR void)",
    "insertText": "GatherStructureTypes(std::vector<VkStructureType>& structureTypes, VkBaseOutStructure* pNext)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (structureTypes .)",
    "insertText": "push_back(pNext->sType)"
  },
  {
    "label": "isMultiple()",
    "kind": "Method",
    "detail": "Function (} pNext = pNext -> pNext ; } } VPAPI_ATTR bool)",
    "insertText": "isMultiple(double source, double multiple)"
  },
  {
    "label": "isPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (} VPAPI_ATTR bool)",
    "insertText": "isPowerOfTwo(double source)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (std::uint64_t value = static_cast<)",
    "insertText": "uint64_t(std::abs(source))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} using PFN_vpStructFiller =)",
    "insertText": "void(*)(VkBaseOutStructure* p)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using PFN_vpStructComparator =)",
    "insertText": "bool(*)(VkBaseOutStructure* p)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using PFN_vpStructChainerCb =)",
    "insertText": "void(*)(VkBaseOutStructure* p, void* pUser)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using PFN_vpStructChainer =)",
    "insertText": "void(*)(VkBaseOutStructure* p, void* pUser, PFN_vpStructChainerCb pfnCb)"
  },
  {
    "label": "vpCheckFlags()",
    "kind": "Method",
    "detail": "Function (struct VpFeatureDesc { PFN_vpStructFiller pfnFiller ; PFN_vpStructComparator pfnComparator ; } ; struct VpPropertyDesc { PFN_vpStructFiller pfnFiller ; PFN_vpStructComparator pfnComparator ; } ; struct VpQueueFamilyDesc { PFN_vpStructFiller pfnFiller ; PFN_vpStructComparator pfnComparator ; } ; struct VpFormatDesc { VkFormat format ; PFN_vpStructFiller pfnFiller ; PFN_vpStructComparator pfnComparator ; } ; struct VpStructChainerDesc { PFN_vpStructChainer pfnFeature ; PFN_vpStructChainer pfnProperty ; PFN_vpStructChainer pfnQueueFamily ; PFN_vpStructChainer pfnFormat ; } ; struct VpVariantDesc { char blockName [ VP_MAX_PROFILE_NAME_SIZE ] ; uint32_t instanceExtensionCount ; const VkExtensionProperties* pInstanceExtensions ; uint32_t deviceExtensionCount ; const VkExtensionProperties* pDeviceExtensions ; uint32_t featureStructTypeCount ; const VkStructureType* pFeatureStructTypes ; VpFeatureDesc feature ; uint32_t propertyStructTypeCount ; const VkStructureType* pPropertyStructTypes ; VpPropertyDesc property ; uint32_t queueFamilyStructTypeCount ; const VkStructureType* pQueueFamilyStructTypes ; uint32_t queueFamilyCount ; const VpQueueFamilyDesc* pQueueFamilies ; uint32_t formatStructTypeCount ; const VkStructureType* pFormatStructTypes ; uint32_t formatCount ; const VpFormatDesc* pFormats ; VpStructChainerDesc chainers ; } ; struct VpCapabilitiesDesc { uint32_t variantCount ; const VpVariantDesc* pVariants ; } ; struct VpProfileDesc { VpProfileProperties props ; uint32_t minApiVersion ; const detail::VpVariantDesc* pMergedCapabilities ; uint32_t requiredProfileCount ; const VpProfileProperties* pRequiredProfiles ; uint32_t requiredCapabilityCount ; const VpCapabilitiesDesc* pRequiredCapabilities ; uint32_t fallbackCount ; const VpProfileProperties* pFallbacks ; } ; template<T> VPAPI_ATTR bool)",
    "insertText": "vpCheckFlags(const T& actual, const uint64_t expected)"
  },
  {
    "label": "featureDesc()",
    "kind": "Method",
    "detail": "Function (} # ifdef VP_UE_Vulkan_ES3_1_Android namespace VP_UE_VULKAN_ES3_1_ANDROID { const VpFeatureDesc)",
    "insertText": "featureDesc(VkBaseOutStructure* p)"
  },
  {
    "label": "propertyDesc()",
    "kind": "Method",
    "detail": "Function (bool ret = true ; return ret ; } } ; const VpPropertyDesc)",
    "insertText": "propertyDesc(VkBaseOutStructure* p)"
  },
  {
    "label": "chainerDesc()",
    "kind": "Method",
    "detail": "Function (bool ret = true ; return ret ; } } ; const VpStructChainerDesc)",
    "insertText": "chainerDesc(VkBaseOutStructure* p, void* pUser, PFN_vpStructChainerCb pfnCb)"
  },
  {
    "label": "pfnCb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pfnCb(p, pUser)"
  },
  {
    "label": "break()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "break(VkBaseOutStructure* p)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bool ret = true ;)",
    "insertText": "switch(p->sType)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceFeatures2KHR->features.fragmentStoresAndAtomics == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceFeatures2KHR->features.fragmentStoresAndAtomics == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceFeatures2KHR::features.fragmentStoresAndAtomics == VK_TRUE\")"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (p -> pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(nullptr))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceProperties2KHR->properties.limits.maxBoundDescriptorSets >= 4)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceProperties2KHR->properties.limits.maxBoundDescriptorSets >= 4), \"Unsupported properties condition: VkPhysicalDeviceProperties2KHR::properties.limits.maxBoundDescriptorSets >= 4\")"
  },
  {
    "label": "VkPhysicalDeviceAccelerationStructureFeaturesKHR()",
    "kind": "Method",
    "detail": "Function (s -> rayQuery = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR : { VkPhysicalDeviceAccelerationStructureFeaturesKHR* s = static_cast<)",
    "insertText": "VkPhysicalDeviceAccelerationStructureFeaturesKHR(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT()",
    "kind": "Method",
    "detail": "Function (s -> accelerationStructure = VK_TRUE ; s -> descriptorBindingAccelerationStructureUpdateAfterBind = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT : { VkPhysicalDeviceScalarBlockLayoutFeaturesEXT* s = static_cast<)",
    "insertText": "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceFeatures2KHR()",
    "kind": "Method",
    "detail": "Function (s -> scalarBlockLayout = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR : { VkPhysicalDeviceFeatures2KHR* s = static_cast<)",
    "insertText": "VkPhysicalDeviceFeatures2KHR(static_cast<void*>(p))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceRayQueryFeaturesKHR->rayQuery == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceRayQueryFeaturesKHR->rayQuery == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceRayQueryFeaturesKHR::rayQuery == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceAccelerationStructureFeaturesKHR->accelerationStructure == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceAccelerationStructureFeaturesKHR->accelerationStructure == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceAccelerationStructureFeaturesKHR->descriptorBindingAccelerationStructureUpdateAfterBind == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceAccelerationStructureFeaturesKHR->descriptorBindingAccelerationStructureUpdateAfterBind == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceAccelerationStructureFeaturesKHR::descriptorBindingAccelerationStructureUpdateAfterBind == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT->scalarBlockLayout == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT->scalarBlockLayout == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceScalarBlockLayoutFeaturesEXT::scalarBlockLayout == VK_TRUE\")"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceRayQueryFeaturesKHR physicalDeviceRayQueryFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR,nullptr } ; VkPhysicalDeviceAccelerationStructureFeaturesKHR physicalDeviceAccelerationStructureFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR,& physicalDeviceRayQueryFeaturesKHR } ; VkPhysicalDeviceScalarBlockLayoutFeaturesEXT physicalDeviceScalarBlockLayoutFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,& physicalDeviceAccelerationStructureFeaturesKHR } ; p -> pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(&physicalDeviceScalarBlockLayoutFeaturesEXT))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceProperties2KHR->properties.limits.maxBoundDescriptorSets >= 7)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceProperties2KHR->properties.limits.maxBoundDescriptorSets >= 7), \"Unsupported properties condition: VkPhysicalDeviceProperties2KHR::properties.limits.maxBoundDescriptorSets >= 7\")"
  },
  {
    "label": "VkPhysicalDeviceDescriptorIndexingFeaturesEXT()",
    "kind": "Method",
    "detail": "Function (s -> shaderImageInt64Atomics = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT : { VkPhysicalDeviceDescriptorIndexingFeaturesEXT* s = static_cast<)",
    "insertText": "VkPhysicalDeviceDescriptorIndexingFeaturesEXT(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceShaderAtomicInt64Features()",
    "kind": "Method",
    "detail": "Function (s -> descriptorBindingPartiallyBound = VK_TRUE ; s -> descriptorBindingUpdateUnusedWhilePending = VK_TRUE ; s -> descriptorBindingVariableDescriptorCount = VK_TRUE ; s -> runtimeDescriptorArray = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES : { VkPhysicalDeviceShaderAtomicInt64Features* s = static_cast<)",
    "insertText": "VkPhysicalDeviceShaderAtomicInt64Features(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures()",
    "kind": "Method",
    "detail": "Function (s -> shaderBufferInt64Atomics = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : { VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures* s = static_cast<)",
    "insertText": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceSynchronization2Features()",
    "kind": "Method",
    "detail": "Function (s -> separateDepthStencilLayouts = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES : { VkPhysicalDeviceSynchronization2Features* s = static_cast<)",
    "insertText": "VkPhysicalDeviceSynchronization2Features(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceMaintenance4Features()",
    "kind": "Method",
    "detail": "Function (s -> synchronization2 = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES : { VkPhysicalDeviceMaintenance4Features* s = static_cast<)",
    "insertText": "VkPhysicalDeviceMaintenance4Features(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceBufferDeviceAddressFeatures()",
    "kind": "Method",
    "detail": "Function (s -> maintenance4 = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES : { VkPhysicalDeviceBufferDeviceAddressFeatures* s = static_cast<)",
    "insertText": "VkPhysicalDeviceBufferDeviceAddressFeatures(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceMeshShaderFeaturesEXT()",
    "kind": "Method",
    "detail": "Function (s -> features . fragmentStoresAndAtomics = VK_TRUE ; s -> features . shaderInt64 = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT : { VkPhysicalDeviceMeshShaderFeaturesEXT* s = static_cast<)",
    "insertText": "VkPhysicalDeviceMeshShaderFeaturesEXT(static_cast<void*>(p))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT->shaderImageInt64Atomics == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT->shaderImageInt64Atomics == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::shaderImageInt64Atomics == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->descriptorBindingPartiallyBound == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->descriptorBindingPartiallyBound == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingPartiallyBound == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->descriptorBindingUpdateUnusedWhilePending == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->descriptorBindingUpdateUnusedWhilePending == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUpdateUnusedWhilePending == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->descriptorBindingVariableDescriptorCount == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->descriptorBindingVariableDescriptorCount == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingVariableDescriptorCount == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->runtimeDescriptorArray == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceDescriptorIndexingFeaturesEXT->runtimeDescriptorArray == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceDescriptorIndexingFeaturesEXT::runtimeDescriptorArray == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceShaderAtomicInt64Features->shaderBufferInt64Atomics == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceShaderAtomicInt64Features->shaderBufferInt64Atomics == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceShaderAtomicInt64Features::shaderBufferInt64Atomics == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures->separateDepthStencilLayouts == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures->separateDepthStencilLayouts == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::separateDepthStencilLayouts == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceSynchronization2Features->synchronization2 == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceSynchronization2Features->synchronization2 == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceSynchronization2Features::synchronization2 == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceMaintenance4Features->maintenance4 == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceMaintenance4Features->maintenance4 == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceMaintenance4Features::maintenance4 == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceBufferDeviceAddressFeatures->bufferDeviceAddress == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceBufferDeviceAddressFeatures->bufferDeviceAddress == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceFeatures2KHR->features.shaderInt64 == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceFeatures2KHR->features.shaderInt64 == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceFeatures2KHR::features.shaderInt64 == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceMeshShaderFeaturesEXT->meshShader == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceMeshShaderFeaturesEXT->meshShader == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceMeshShaderFeaturesEXT::meshShader == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceMeshShaderFeaturesEXT->multiviewMeshShader == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceMeshShaderFeaturesEXT->multiviewMeshShader == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceMeshShaderFeaturesEXT::multiviewMeshShader == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceMeshShaderFeaturesEXT->taskShader == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceMeshShaderFeaturesEXT->taskShader == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceMeshShaderFeaturesEXT::taskShader == VK_TRUE\")"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT physicalDeviceShaderImageAtomicInt64FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDescriptorIndexingFeaturesEXT physicalDeviceDescriptorIndexingFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,& physicalDeviceShaderImageAtomicInt64FeaturesEXT } ; VkPhysicalDeviceShaderAtomicInt64Features physicalDeviceShaderAtomicInt64Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,& physicalDeviceDescriptorIndexingFeaturesEXT } ; VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures physicalDeviceSeparateDepthStencilLayoutsFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,& physicalDeviceShaderAtomicInt64Features } ; VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,& physicalDeviceSeparateDepthStencilLayoutsFeatures } ; VkPhysicalDeviceMaintenance4Features physicalDeviceMaintenance4Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,& physicalDeviceSynchronization2Features } ; VkPhysicalDeviceBufferDeviceAddressFeatures physicalDeviceBufferDeviceAddressFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,& physicalDeviceMaintenance4Features } ; VkPhysicalDeviceScalarBlockLayoutFeaturesEXT physicalDeviceScalarBlockLayoutFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,& physicalDeviceBufferDeviceAddressFeatures } ; VkPhysicalDeviceMeshShaderFeaturesEXT physicalDeviceMeshShaderFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT,& physicalDeviceScalarBlockLayoutFeaturesEXT } ; p -> pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(&physicalDeviceMeshShaderFeaturesEXT))"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceMeshShaderPropertiesEXT physicalDeviceMeshShaderPropertiesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT,nullptr } ; p -> pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(&physicalDeviceMeshShaderPropertiesEXT))"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkFormatProperties3KHR formatProperties3KHR { VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR,nullptr } ; p -> pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(&formatProperties3KHR))"
  },
  {
    "label": "VkPhysicalDeviceMeshShaderPropertiesEXT()",
    "kind": "Method",
    "detail": "Function (s -> properties . limits . maxBoundDescriptorSets = 9 ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT : { VkPhysicalDeviceMeshShaderPropertiesEXT* s = static_cast<)",
    "insertText": "VkPhysicalDeviceMeshShaderPropertiesEXT(static_cast<void*>(p))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceProperties2KHR->properties.limits.maxBoundDescriptorSets >= 9)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceProperties2KHR->properties.limits.maxBoundDescriptorSets >= 9), \"Unsupported properties condition: VkPhysicalDeviceProperties2KHR::properties.limits.maxBoundDescriptorSets >= 9\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceMeshShaderPropertiesEXT->maxMeshWorkGroupInvocations >= 128)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceMeshShaderPropertiesEXT->maxMeshWorkGroupInvocations >= 128), \"Unsupported properties condition: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupInvocations >= 128\")"
  },
  {
    "label": "VK_FORMAT_R64_UINT()",
    "kind": "Method",
    "detail": "Function (} break ; default : break ; } return ret ; } } ; const VpFormatDesc formatDesc [ ] = { {)",
    "insertText": "VK_FORMAT_R64_UINT(VkBaseOutStructure* p)"
  },
  {
    "label": "optimalTilingFeatures()",
    "kind": "Method",
    "detail": "Function (s -> formatProperties .)",
    "insertText": "optimalTilingFeatures(VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(vpCheckFlags(prettify_VkFormatProperties2KHR->formatProperties.optimalTilingFeatures, (VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT)))"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(vpCheckFlags(prettify_VkFormatProperties2KHR->formatProperties.optimalTilingFeatures, (VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT))), \"Unsupported format condition for VK_FORMAT_R64_UINT: VkFormatProperties2KHR::formatProperties.optimalTilingFeatures contains (VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT)\")"
  },
  {
    "label": "VkPhysicalDeviceRayQueryFeaturesKHR()",
    "kind": "Method",
    "detail": "Function (s -> meshShader = VK_TRUE ; s -> multiviewMeshShader = VK_TRUE ; s -> taskShader = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR : { VkPhysicalDeviceRayQueryFeaturesKHR* s = static_cast<)",
    "insertText": "VkPhysicalDeviceRayQueryFeaturesKHR(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR()",
    "kind": "Method",
    "detail": "Function (s -> rayQuery = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR : { VkPhysicalDeviceRayTracingPipelineFeaturesKHR* s = static_cast<)",
    "insertText": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceDescriptorBufferFeaturesEXT()",
    "kind": "Method",
    "detail": "Function (s -> accelerationStructure = VK_TRUE ; s -> descriptorBindingAccelerationStructureUpdateAfterBind = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT : { VkPhysicalDeviceDescriptorBufferFeaturesEXT* s = static_cast<)",
    "insertText": "VkPhysicalDeviceDescriptorBufferFeaturesEXT(static_cast<void*>(p))"
  },
  {
    "label": "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR()",
    "kind": "Method",
    "detail": "Function (s -> descriptorBuffer = VK_TRUE ; } break ; case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR : { VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR* s = static_cast<)",
    "insertText": "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(static_cast<void*>(p))"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceRayTracingPipelineFeaturesKHR->rayTracingPipeline == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceRayTracingPipelineFeaturesKHR->rayTracingPipeline == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipeline == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceRayTracingPipelineFeaturesKHR->rayTraversalPrimitiveCulling == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceRayTracingPipelineFeaturesKHR->rayTraversalPrimitiveCulling == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTraversalPrimitiveCulling == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceDescriptorBufferFeaturesEXT->descriptorBuffer == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceDescriptorBufferFeaturesEXT->descriptorBuffer == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBuffer == VK_TRUE\")"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(prettify_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR->rayTracingPositionFetch == VK_TRUE)"
  },
  {
    "label": "VP_DEBUG_COND_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_COND_MSG(!(prettify_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR->rayTracingPositionFetch == VK_TRUE), \"Unsupported feature condition: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::rayTracingPositionFetch == VK_TRUE\")"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT physicalDeviceShaderImageAtomicInt64FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDescriptorIndexingFeaturesEXT physicalDeviceDescriptorIndexingFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,& physicalDeviceShaderImageAtomicInt64FeaturesEXT } ; VkPhysicalDeviceShaderAtomicInt64Features physicalDeviceShaderAtomicInt64Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,& physicalDeviceDescriptorIndexingFeaturesEXT } ; VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures physicalDeviceSeparateDepthStencilLayoutsFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,& physicalDeviceShaderAtomicInt64Features } ; VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,& physicalDeviceSeparateDepthStencilLayoutsFeatures } ; VkPhysicalDeviceMaintenance4Features physicalDeviceMaintenance4Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,& physicalDeviceSynchronization2Features } ; VkPhysicalDeviceBufferDeviceAddressFeatures physicalDeviceBufferDeviceAddressFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,& physicalDeviceMaintenance4Features } ; VkPhysicalDeviceScalarBlockLayoutFeaturesEXT physicalDeviceScalarBlockLayoutFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,& physicalDeviceBufferDeviceAddressFeatures } ; VkPhysicalDeviceMeshShaderFeaturesEXT physicalDeviceMeshShaderFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT,& physicalDeviceScalarBlockLayoutFeaturesEXT } ; VkPhysicalDeviceRayQueryFeaturesKHR physicalDeviceRayQueryFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR,& physicalDeviceMeshShaderFeaturesEXT } ; VkPhysicalDeviceRayTracingPipelineFeaturesKHR physicalDeviceRayTracingPipelineFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR,& physicalDeviceRayQueryFeaturesKHR } ; VkPhysicalDeviceAccelerationStructureFeaturesKHR physicalDeviceAccelerationStructureFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR,& physicalDeviceRayTracingPipelineFeaturesKHR } ; VkPhysicalDeviceDescriptorBufferFeaturesEXT physicalDeviceDescriptorBufferFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT,& physicalDeviceAccelerationStructureFeaturesKHR } ; VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR physicalDeviceRayTracingPositionFetchFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR,& physicalDeviceDescriptorBufferFeaturesEXT } ; p -> pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(&physicalDeviceRayTracingPositionFetchFeaturesKHR))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (},} ; } } # endif # ifdef VP_UE_Vulkan_ES3_1_Android namespace VP_UE_VULKAN_ES3_1_ANDROID { const VpVariantDesc mergedCapabilities [ ] = { { \" MERGED \",0,nullptr,0,nullptr,0,nullptr,featureDesc,0,nullptr,propertyDesc,0,nullptr,0,nullptr,0,nullptr,0,nullptr,chainerDesc,},} ; namespace baseline { const VpVariantDesc variants [ ] = { { \" baseline \",0,nullptr,0,nullptr,0,nullptr,baseline::featureDesc,0,nullptr,baseline::propertyDesc,0,nullptr,0,nullptr,0,nullptr,0,nullptr,baseline::chainerDesc,},} ; const uint32_t variantCount = static_cast<)",
    "insertText": "uint32_t(std::size(variants))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} const VpCapabilitiesDesc capabilities [ ] = { { baseline::variantCount,baseline::variants },} ; const uint32_t capabilityCount = static_cast<)",
    "insertText": "uint32_t(std::size(capabilities))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef VP_UE_Vulkan_SM5 namespace VP_UE_VULKAN_SM5 { const VpVariantDesc mergedCapabilities [ ] = { { \" MERGED \",0,nullptr,0,nullptr,static_cast<)",
    "insertText": "uint32_t(std::size(featureStructTypes))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} namespace SM5 { const VpVariantDesc variants [ ] = { { \" SM5 \",0,nullptr,0,nullptr,static_cast<)",
    "insertText": "uint32_t(std::size(featureStructTypes)), featureStructTypes, SM5::featureDesc, static_cast<uint32_t>(std::size(propertyStructTypes))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef VP_UE_Vulkan_SM5_Android_RT namespace VP_UE_VULKAN_SM5_ANDROID_RT { const VpVariantDesc mergedCapabilities [ ] = { { \" MERGED \",0,nullptr,static_cast<)",
    "insertText": "uint32_t(std::size(deviceExtensions)), deviceExtensions, static_cast<uint32_t>(std::size(featureStructTypes))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} namespace RayTracing { const VpVariantDesc variants [ ] = { { \" RayTracing \",0,nullptr,static_cast<)",
    "insertText": "uint32_t(std::size(RayTracing::deviceExtensions)), RayTracing::deviceExtensions, static_cast<uint32_t>(std::size(featureStructTypes)), featureStructTypes, RayTracing::featureDesc, static_cast<uint32_t>(std::size(propertyStructTypes))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} namespace SM6 { const VpVariantDesc variants [ ] = { { \" SM6 \",0,nullptr,static_cast<)",
    "insertText": "uint32_t(std::size(SM6::deviceExtensions)), SM6::deviceExtensions, static_cast<uint32_t>(std::size(featureStructTypes)), featureStructTypes, SM6::featureDesc, static_cast<uint32_t>(std::size(propertyStructTypes)), propertyStructTypes, SM6::propertyDesc, 0, nullptr, 0, nullptr, static_cast<uint32_t>(std::size(formatStructTypes)), formatStructTypes, static_cast<uint32_t>(std::size(SM6::formatDesc))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} # endif const VpProfileDesc profiles [ ] = { # ifdef VP_UE_Vulkan_ES3_1_Android VpProfileDesc { VpProfileProperties { VP_UE_VULKAN_ES3_1_ANDROID_NAME,VP_UE_VULKAN_ES3_1_ANDROID_SPEC_VERSION },VP_UE_VULKAN_ES3_1_ANDROID_MIN_API_VERSION,VP_UE_VULKAN_ES3_1_ANDROID::mergedCapabilities,0,nullptr,VP_UE_VULKAN_ES3_1_ANDROID::capabilityCount,VP_UE_VULKAN_ES3_1_ANDROID::capabilities,0,nullptr,},# endif # ifdef VP_UE_Vulkan_SM5 VpProfileDesc { VpProfileProperties { VP_UE_VULKAN_SM5_NAME,VP_UE_VULKAN_SM5_SPEC_VERSION },VP_UE_VULKAN_SM5_MIN_API_VERSION,VP_UE_VULKAN_SM5::mergedCapabilities,0,nullptr,VP_UE_VULKAN_SM5::capabilityCount,VP_UE_VULKAN_SM5::capabilities,0,nullptr,},# endif # ifdef VP_UE_Vulkan_SM5_Android VpProfileDesc { VpProfileProperties { VP_UE_VULKAN_SM5_ANDROID_NAME,VP_UE_VULKAN_SM5_ANDROID_SPEC_VERSION },VP_UE_VULKAN_SM5_ANDROID_MIN_API_VERSION,VP_UE_VULKAN_SM5_ANDROID::mergedCapabilities,0,nullptr,VP_UE_VULKAN_SM5_ANDROID::capabilityCount,VP_UE_VULKAN_SM5_ANDROID::capabilities,0,nullptr,},# endif # ifdef VP_UE_Vulkan_SM5_Android_RT VpProfileDesc { VpProfileProperties { VP_UE_VULKAN_SM5_ANDROID_RT_NAME,VP_UE_VULKAN_SM5_ANDROID_RT_SPEC_VERSION },VP_UE_VULKAN_SM5_ANDROID_RT_MIN_API_VERSION,VP_UE_VULKAN_SM5_ANDROID_RT::mergedCapabilities,0,nullptr,VP_UE_VULKAN_SM5_ANDROID_RT::capabilityCount,VP_UE_VULKAN_SM5_ANDROID_RT::capabilities,0,nullptr,},# endif # ifdef VP_UE_Vulkan_SM6 VpProfileDesc { VpProfileProperties { VP_UE_VULKAN_SM6_NAME,VP_UE_VULKAN_SM6_SPEC_VERSION },VP_UE_VULKAN_SM6_MIN_API_VERSION,VP_UE_VULKAN_SM6::mergedCapabilities,0,nullptr,VP_UE_VULKAN_SM6::capabilityCount,VP_UE_VULKAN_SM6::capabilities,0,nullptr,},# endif # ifdef VP_UE_Vulkan_SM6_RT VpProfileDesc { VpProfileProperties { VP_UE_VULKAN_SM6_RT_NAME,VP_UE_VULKAN_SM6_RT_SPEC_VERSION },VP_UE_VULKAN_SM6_RT_MIN_API_VERSION,VP_UE_VULKAN_SM6_RT::mergedCapabilities,0,nullptr,VP_UE_VULKAN_SM6_RT::capabilityCount,VP_UE_VULKAN_SM6_RT::capabilities,0,nullptr,},# endif } ; const uint32_t profileCount = static_cast<)",
    "insertText": "uint32_t(std::size(profiles))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (struct FeaturesChain { std::map<VkStructureType,std::size_t> structureSize ; template<T> std::size_t)",
    "insertText": "size()"
  },
  {
    "label": "FeaturesChain()",
    "kind": "Method",
    "detail": "Function (} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV physicalDeviceDeviceGeneratedCommandsFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,nullptr } ; VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV,nullptr } ; VkPhysicalDevicePrivateDataFeatures physicalDevicePrivateDataFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,nullptr } ; VkPhysicalDeviceVariablePointersFeatures physicalDeviceVariablePointersFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,nullptr } ; VkPhysicalDeviceMultiviewFeatures physicalDeviceMultiviewFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,nullptr } ; VkPhysicalDevicePresentIdFeaturesKHR physicalDevicePresentIdFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR,nullptr } ; VkPhysicalDevicePresentWaitFeaturesKHR physicalDevicePresentWaitFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR,nullptr } ; VkPhysicalDevice16BitStorageFeatures physicalDevice16BitStorageFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,nullptr } ; VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures physicalDeviceShaderSubgroupExtendedTypesFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,nullptr } ; VkPhysicalDeviceSamplerYcbcrConversionFeatures physicalDeviceSamplerYcbcrConversionFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,nullptr } ; VkPhysicalDeviceProtectedMemoryFeatures physicalDeviceProtectedMemoryFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,nullptr } ; VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT physicalDeviceBlendOperationAdvancedFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,nullptr } ; VkPhysicalDeviceMultiDrawFeaturesEXT physicalDeviceMultiDrawFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT,nullptr } ; VkPhysicalDeviceInlineUniformBlockFeatures physicalDeviceInlineUniformBlockFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,nullptr } ; VkPhysicalDeviceMaintenance4Features physicalDeviceMaintenance4Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,nullptr } ; VkPhysicalDeviceMaintenance5FeaturesKHR physicalDeviceMaintenance5FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR,nullptr } ; VkPhysicalDeviceMaintenance6FeaturesKHR physicalDeviceMaintenance6FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR,nullptr } ; VkPhysicalDeviceMaintenance7FeaturesKHR physicalDeviceMaintenance7FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderDrawParametersFeatures physicalDeviceShaderDrawParametersFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,nullptr } ; VkPhysicalDeviceShaderFloat16Int8Features physicalDeviceShaderFloat16Int8Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,nullptr } ; VkPhysicalDeviceHostQueryResetFeatures physicalDeviceHostQueryResetFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,nullptr } ; VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR physicalDeviceGlobalPriorityQueryFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,nullptr } ; VkPhysicalDeviceDeviceMemoryReportFeaturesEXT physicalDeviceDeviceMemoryReportFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDescriptorIndexingFeatures physicalDeviceDescriptorIndexingFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,nullptr } ; VkPhysicalDeviceTimelineSemaphoreFeatures physicalDeviceTimelineSemaphoreFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,nullptr } ; VkPhysicalDevice8BitStorageFeatures physicalDevice8BitStorageFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,nullptr } ; VkPhysicalDeviceConditionalRenderingFeaturesEXT physicalDeviceConditionalRenderingFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,nullptr } ; VkPhysicalDeviceVulkanMemoryModelFeatures physicalDeviceVulkanMemoryModelFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,nullptr } ; VkPhysicalDeviceShaderAtomicInt64Features physicalDeviceShaderAtomicInt64Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,nullptr } ; VkPhysicalDeviceShaderAtomicFloatFeaturesEXT physicalDeviceShaderAtomicFloatFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,nullptr } ; VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT physicalDeviceShaderAtomicFloat2FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT,nullptr } ; VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR physicalDeviceVertexAttributeDivisorFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR,nullptr } ; VkPhysicalDeviceASTCDecodeFeaturesEXT physicalDeviceASTCDecodeFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceTransformFeedbackFeaturesEXT physicalDeviceTransformFeedbackFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,nullptr } ; VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV physicalDeviceRepresentativeFragmentTestFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,nullptr } ; VkPhysicalDeviceExclusiveScissorFeaturesNV physicalDeviceExclusiveScissorFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,nullptr } ; VkPhysicalDeviceCornerSampledImageFeaturesNV physicalDeviceCornerSampledImageFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,nullptr } ; VkPhysicalDeviceComputeShaderDerivativesFeaturesNV physicalDeviceComputeShaderDerivativesFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,nullptr } ; VkPhysicalDeviceShaderImageFootprintFeaturesNV physicalDeviceShaderImageFootprintFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,nullptr } ; VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV physicalDeviceDedicatedAllocationImageAliasingFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,nullptr } ; VkPhysicalDeviceCopyMemoryIndirectFeaturesNV physicalDeviceCopyMemoryIndirectFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV,nullptr } ; VkPhysicalDeviceMemoryDecompressionFeaturesNV physicalDeviceMemoryDecompressionFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV,nullptr } ; VkPhysicalDeviceShadingRateImageFeaturesNV physicalDeviceShadingRateImageFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,nullptr } ; VkPhysicalDeviceInvocationMaskFeaturesHUAWEI physicalDeviceInvocationMaskFeaturesHUAWEI { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI,nullptr } ; VkPhysicalDeviceMeshShaderFeaturesNV physicalDeviceMeshShaderFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,nullptr } ; VkPhysicalDeviceMeshShaderFeaturesEXT physicalDeviceMeshShaderFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT,nullptr } ; VkPhysicalDeviceAccelerationStructureFeaturesKHR physicalDeviceAccelerationStructureFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR,nullptr } ; VkPhysicalDeviceRayTracingPipelineFeaturesKHR physicalDeviceRayTracingPipelineFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR,nullptr } ; VkPhysicalDeviceRayQueryFeaturesKHR physicalDeviceRayQueryFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR,nullptr } ; VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR physicalDeviceRayTracingMaintenance1FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR,nullptr } ; VkPhysicalDeviceFragmentDensityMapFeaturesEXT physicalDeviceFragmentDensityMapFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,nullptr } ; VkPhysicalDeviceFragmentDensityMap2FeaturesEXT physicalDeviceFragmentDensityMap2FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,nullptr } ; VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM physicalDeviceFragmentDensityMapOffsetFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceScalarBlockLayoutFeatures physicalDeviceScalarBlockLayoutFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,nullptr } ; VkPhysicalDeviceUniformBufferStandardLayoutFeatures physicalDeviceUniformBufferStandardLayoutFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,nullptr } ; VkPhysicalDeviceDepthClipEnableFeaturesEXT physicalDeviceDepthClipEnableFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceMemoryPriorityFeaturesEXT physicalDeviceMemoryPriorityFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,nullptr } ; VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT physicalDevicePageableDeviceLocalMemoryFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT,nullptr } ; VkPhysicalDeviceBufferDeviceAddressFeatures physicalDeviceBufferDeviceAddressFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,nullptr } ; VkPhysicalDeviceBufferDeviceAddressFeaturesEXT physicalDeviceBufferDeviceAddressFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceImagelessFramebufferFeatures physicalDeviceImagelessFramebufferFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,nullptr } ; VkPhysicalDeviceTextureCompressionASTCHDRFeatures physicalDeviceTextureCompressionASTCHDRFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,nullptr } ; VkPhysicalDeviceCooperativeMatrixFeaturesNV physicalDeviceCooperativeMatrixFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,nullptr } ; VkPhysicalDeviceYcbcrImageArraysFeaturesEXT physicalDeviceYcbcrImageArraysFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,nullptr } ; VkPhysicalDevicePresentBarrierFeaturesNV physicalDevicePresentBarrierFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV,nullptr } ; VkPhysicalDevicePerformanceQueryFeaturesKHR physicalDevicePerformanceQueryFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,nullptr } ; VkPhysicalDeviceCoverageReductionModeFeaturesNV physicalDeviceCoverageReductionModeFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,nullptr } ; VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL physicalDeviceShaderIntegerFunctions2FeaturesINTEL { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,nullptr } ; VkPhysicalDeviceShaderClockFeaturesKHR physicalDeviceShaderClockFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,nullptr } ; VkPhysicalDeviceIndexTypeUint8FeaturesKHR physicalDeviceIndexTypeUint8FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderSMBuiltinsFeaturesNV physicalDeviceShaderSMBuiltinsFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,nullptr } ; VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT physicalDeviceFragmentShaderInterlockFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,nullptr } ; VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures physicalDeviceSeparateDepthStencilLayoutsFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,nullptr } ; VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT physicalDevicePrimitiveTopologyListRestartFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT,nullptr } ; VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR physicalDevicePipelineExecutablePropertiesFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures physicalDeviceShaderDemoteToHelperInvocationFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,nullptr } ; VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT physicalDeviceTexelBufferAlignmentFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,nullptr } ; VkPhysicalDeviceSubgroupSizeControlFeatures physicalDeviceSubgroupSizeControlFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,nullptr } ; VkPhysicalDeviceLineRasterizationFeaturesKHR physicalDeviceLineRasterizationFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR,nullptr } ; VkPhysicalDevicePipelineCreationCacheControlFeatures physicalDevicePipelineCreationCacheControlFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,nullptr } ; VkPhysicalDeviceVulkan11Features physicalDeviceVulkan11Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,nullptr } ; VkPhysicalDeviceVulkan12Features physicalDeviceVulkan12Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,nullptr } ; VkPhysicalDeviceVulkan13Features physicalDeviceVulkan13Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES,nullptr } ; VkPhysicalDeviceCoherentMemoryFeaturesAMD physicalDeviceCoherentMemoryFeaturesAMD { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,nullptr } ; VkPhysicalDeviceCustomBorderColorFeaturesEXT physicalDeviceCustomBorderColorFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,nullptr } ; VkPhysicalDeviceBorderColorSwizzleFeaturesEXT physicalDeviceBorderColorSwizzleFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceExtendedDynamicStateFeaturesEXT physicalDeviceExtendedDynamicStateFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceExtendedDynamicState2FeaturesEXT physicalDeviceExtendedDynamicState2FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT,nullptr } ; VkPhysicalDeviceExtendedDynamicState3FeaturesEXT physicalDeviceExtendedDynamicState3FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDiagnosticsConfigFeaturesNV physicalDeviceDiagnosticsConfigFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,nullptr } ; VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures physicalDeviceZeroInitializeWorkgroupMemoryFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,nullptr } ; VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR,nullptr } ; VkPhysicalDeviceRobustness2FeaturesEXT physicalDeviceRobustness2FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,nullptr } ; VkPhysicalDeviceImageRobustnessFeatures physicalDeviceImageRobustnessFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,nullptr } ; VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR,nullptr } ; # ifdef VK_ENABLE_BETA_EXTENSIONS VkPhysicalDevicePortabilitySubsetFeaturesKHR physicalDevicePortabilitySubsetFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR,nullptr } ; # endif VkPhysicalDevice4444FormatsFeaturesEXT physicalDevice4444FormatsFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceSubpassShadingFeaturesHUAWEI physicalDeviceSubpassShadingFeaturesHUAWEI { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI,nullptr } ; VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI physicalDeviceClusterCullingShaderFeaturesHUAWEI { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI,nullptr } ; VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT physicalDeviceShaderImageAtomicInt64FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT,nullptr } ; VkPhysicalDeviceFragmentShadingRateFeaturesKHR physicalDeviceFragmentShadingRateFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderTerminateInvocationFeatures physicalDeviceShaderTerminateInvocationFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,nullptr } ; VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV physicalDeviceFragmentShadingRateEnumsFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV,nullptr } ; VkPhysicalDeviceImage2DViewOf3DFeaturesEXT physicalDeviceImage2DViewOf3DFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT,nullptr } ; VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT physicalDeviceImageSlicedViewOf3DFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT,nullptr } ; VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT physicalDeviceLegacyVertexAttributesFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT,nullptr } ; VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT physicalDeviceMutableDescriptorTypeFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDepthClipControlFeaturesEXT physicalDeviceDepthClipControlFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT,nullptr } ; VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT physicalDeviceVertexInputDynamicStateFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceExternalMemoryRDMAFeaturesNV physicalDeviceExternalMemoryRDMAFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV,nullptr } ; VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR,nullptr } ; VkPhysicalDeviceColorWriteEnableFeaturesEXT physicalDeviceColorWriteEnableFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,nullptr } ; VkPhysicalDeviceHostImageCopyFeaturesEXT physicalDeviceHostImageCopyFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT,nullptr } ; VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT physicalDevicePrimitivesGeneratedQueryFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT,nullptr } ; VkPhysicalDeviceLegacyDitheringFeaturesEXT physicalDeviceLegacyDitheringFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT,nullptr } ; VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT,nullptr } ; VkPhysicalDevicePipelineProtectedAccessFeaturesEXT physicalDevicePipelineProtectedAccessFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceVideoMaintenance1FeaturesKHR physicalDeviceVideoMaintenance1FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR,nullptr } ; VkPhysicalDeviceInheritedViewportScissorFeaturesNV physicalDeviceInheritedViewportScissorFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV,nullptr } ; VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT physicalDeviceYcbcr2Plane444FormatsFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceProvokingVertexFeaturesEXT physicalDeviceProvokingVertexFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDescriptorBufferFeaturesEXT physicalDeviceDescriptorBufferFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT,nullptr } ; VkPhysicalDeviceShaderIntegerDotProductFeatures physicalDeviceShaderIntegerDotProductFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,nullptr } ; VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR physicalDeviceFragmentShaderBarycentricFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR,nullptr } ; VkPhysicalDeviceRayTracingMotionBlurFeaturesNV physicalDeviceRayTracingMotionBlurFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV,nullptr } ; VkPhysicalDeviceRayTracingValidationFeaturesNV physicalDeviceRayTracingValidationFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV,nullptr } ; VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT physicalDeviceRGBA10X6FormatsFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDynamicRenderingFeatures physicalDeviceDynamicRenderingFeatures { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,nullptr } ; VkPhysicalDeviceImageViewMinLodFeaturesEXT physicalDeviceImageViewMinLodFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT,nullptr } ; VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT physicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceLinearColorAttachmentFeaturesNV physicalDeviceLinearColorAttachmentFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV,nullptr } ; VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT physicalDeviceGraphicsPipelineLibraryFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE physicalDeviceDescriptorSetHostMappingFeaturesVALVE { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE,nullptr } ; VkPhysicalDeviceNestedCommandBufferFeaturesEXT physicalDeviceNestedCommandBufferFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT,nullptr } ; VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT physicalDeviceShaderModuleIdentifierFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT,nullptr } ; VkPhysicalDeviceImageCompressionControlFeaturesEXT physicalDeviceImageCompressionControlFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT,nullptr } ; VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT physicalDeviceImageCompressionControlSwapchainFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT,nullptr } ; VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT physicalDeviceSubpassMergeFeedbackFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT,nullptr } ; VkPhysicalDeviceOpacityMicromapFeaturesEXT physicalDeviceOpacityMicromapFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT,nullptr } ; # ifdef VK_ENABLE_BETA_EXTENSIONS VkPhysicalDeviceDisplacementMicromapFeaturesNV physicalDeviceDisplacementMicromapFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV,nullptr } ; # endif VkPhysicalDevicePipelinePropertiesFeaturesEXT physicalDevicePipelinePropertiesFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT,nullptr } ; VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD,nullptr } ; VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT physicalDeviceNonSeamlessCubeMapFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT,nullptr } ; VkPhysicalDevicePipelineRobustnessFeaturesEXT physicalDevicePipelineRobustnessFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceImageProcessingFeaturesQCOM physicalDeviceImageProcessingFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceTilePropertiesFeaturesQCOM physicalDeviceTilePropertiesFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceAmigoProfilingFeaturesSEC physicalDeviceAmigoProfilingFeaturesSEC { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC,nullptr } ; VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDepthClampZeroOneFeaturesEXT physicalDeviceDepthClampZeroOneFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT,nullptr } ; VkPhysicalDeviceAddressBindingReportFeaturesEXT physicalDeviceAddressBindingReportFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT,nullptr } ; VkPhysicalDeviceOpticalFlowFeaturesNV physicalDeviceOpticalFlowFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV,nullptr } ; VkPhysicalDeviceFaultFeaturesEXT physicalDeviceFaultFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT,nullptr } ; VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT physicalDevicePipelineLibraryGroupHandlesFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT,nullptr } ; VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM physicalDeviceShaderCoreBuiltinsFeaturesARM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM,nullptr } ; VkPhysicalDeviceFrameBoundaryFeaturesEXT physicalDeviceFrameBoundaryFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT,nullptr } ; VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT physicalDeviceSwapchainMaintenance1FeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT,nullptr } ; VkPhysicalDeviceDepthBiasControlFeaturesEXT physicalDeviceDepthBiasControlFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT,nullptr } ; VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV physicalDeviceRayTracingInvocationReorderFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV,nullptr } ; VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV physicalDeviceExtendedSparseAddressSpaceFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV,nullptr } ; VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM physicalDeviceMultiviewPerViewViewportsFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR physicalDeviceRayTracingPositionFetchFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR,nullptr } ; VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM physicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceShaderObjectFeaturesEXT physicalDeviceShaderObjectFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT,nullptr } ; VkPhysicalDeviceShaderTileImageFeaturesEXT physicalDeviceShaderTileImageFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT,nullptr } ; # ifdef VK_USE_PLATFORM_SCREEN_QNX VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX physicalDeviceExternalMemoryScreenBufferFeaturesQNX { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX,nullptr } ; # endif VkPhysicalDeviceCooperativeMatrixFeaturesKHR physicalDeviceCooperativeMatrixFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR,nullptr } ; # ifdef VK_ENABLE_BETA_EXTENSIONS VkPhysicalDeviceShaderEnqueueFeaturesAMDX physicalDeviceShaderEnqueueFeaturesAMDX { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX,nullptr } ; # endif VkPhysicalDeviceCubicClampFeaturesQCOM physicalDeviceCubicClampFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceYcbcrDegammaFeaturesQCOM physicalDeviceYcbcrDegammaFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceCubicWeightsFeaturesQCOM physicalDeviceCubicWeightsFeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceImageProcessing2FeaturesQCOM physicalDeviceImageProcessing2FeaturesQCOM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM,nullptr } ; VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV physicalDeviceDescriptorPoolOverallocationFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV,nullptr } ; VkPhysicalDevicePerStageDescriptorSetFeaturesNV physicalDevicePerStageDescriptorSetFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV,nullptr } ; # ifdef VK_USE_PLATFORM_ANDROID_KHR VkPhysicalDeviceExternalFormatResolveFeaturesANDROID physicalDeviceExternalFormatResolveFeaturesANDROID { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID,nullptr } ; # endif VkPhysicalDeviceCudaKernelLaunchFeaturesNV physicalDeviceCudaKernelLaunchFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV,nullptr } ; VkPhysicalDeviceSchedulingControlsFeaturesARM physicalDeviceSchedulingControlsFeaturesARM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM,nullptr } ; VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG physicalDeviceRelaxedLineRasterizationFeaturesIMG { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG,nullptr } ; VkPhysicalDeviceRenderPassStripedFeaturesARM physicalDeviceRenderPassStripedFeaturesARM { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM,nullptr } ; VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR physicalDeviceShaderMaximalReconvergenceFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR physicalDeviceShaderSubgroupRotateFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderExpectAssumeFeaturesKHR physicalDeviceShaderExpectAssumeFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderFloatControls2FeaturesKHR physicalDeviceShaderFloatControls2FeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR,nullptr } ; VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR physicalDeviceDynamicRenderingLocalReadFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderQuadControlFeaturesKHR physicalDeviceShaderQuadControlFeaturesKHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR,nullptr } ; VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV physicalDeviceShaderAtomicFloat16VectorFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV,nullptr } ; VkPhysicalDeviceMapMemoryPlacedFeaturesEXT physicalDeviceMapMemoryPlacedFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT,nullptr } ; VkPhysicalDeviceRawAccessChainsFeaturesNV physicalDeviceRawAccessChainsFeaturesNV { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV,nullptr } ; VkPhysicalDeviceImageAlignmentControlFeaturesMESA physicalDeviceImageAlignmentControlFeaturesMESA { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA,nullptr } ; VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT physicalDeviceShaderReplicatedCompositesFeaturesEXT { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT,nullptr } ; VkPhysicalDeviceFeatures2KHR physicalDeviceFeatures2KHR { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,nullptr } ;)",
    "insertText": "FeaturesChain()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, size<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV, size<VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES, size<VkPhysicalDevicePrivateDataFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, size<VkPhysicalDeviceVariablePointersFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, size<VkPhysicalDeviceMultiviewFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR, size<VkPhysicalDevicePresentIdFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR, size<VkPhysicalDevicePresentWaitFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, size<VkPhysicalDevice16BitStorageFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, size<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, size<VkPhysicalDeviceSamplerYcbcrConversionFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, size<VkPhysicalDeviceProtectedMemoryFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, size<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT, size<VkPhysicalDeviceMultiDrawFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES, size<VkPhysicalDeviceInlineUniformBlockFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES, size<VkPhysicalDeviceMaintenance4Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR, size<VkPhysicalDeviceMaintenance5FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR, size<VkPhysicalDeviceMaintenance6FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR, size<VkPhysicalDeviceMaintenance7FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, size<VkPhysicalDeviceShaderDrawParametersFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, size<VkPhysicalDeviceShaderFloat16Int8Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, size<VkPhysicalDeviceHostQueryResetFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR, size<VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, size<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, size<VkPhysicalDeviceDescriptorIndexingFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, size<VkPhysicalDeviceTimelineSemaphoreFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, size<VkPhysicalDevice8BitStorageFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, size<VkPhysicalDeviceConditionalRenderingFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, size<VkPhysicalDeviceVulkanMemoryModelFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, size<VkPhysicalDeviceShaderAtomicInt64Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, size<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT, size<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR, size<VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, size<VkPhysicalDeviceASTCDecodeFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, size<VkPhysicalDeviceTransformFeedbackFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, size<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, size<VkPhysicalDeviceExclusiveScissorFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, size<VkPhysicalDeviceCornerSampledImageFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, size<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, size<VkPhysicalDeviceShaderImageFootprintFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, size<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV, size<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV, size<VkPhysicalDeviceMemoryDecompressionFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, size<VkPhysicalDeviceShadingRateImageFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI, size<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, size<VkPhysicalDeviceMeshShaderFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT, size<VkPhysicalDeviceMeshShaderFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, size<VkPhysicalDeviceAccelerationStructureFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, size<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, size<VkPhysicalDeviceRayQueryFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR, size<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, size<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, size<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM, size<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, size<VkPhysicalDeviceScalarBlockLayoutFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, size<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, size<VkPhysicalDeviceDepthClipEnableFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, size<VkPhysicalDeviceMemoryPriorityFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT, size<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, size<VkPhysicalDeviceBufferDeviceAddressFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, size<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, size<VkPhysicalDeviceImagelessFramebufferFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES, size<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, size<VkPhysicalDeviceCooperativeMatrixFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, size<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV, size<VkPhysicalDevicePresentBarrierFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, size<VkPhysicalDevicePerformanceQueryFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, size<VkPhysicalDeviceCoverageReductionModeFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, size<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, size<VkPhysicalDeviceShaderClockFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR, size<VkPhysicalDeviceIndexTypeUint8FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, size<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, size<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, size<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT, size<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, size<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES, size<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, size<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES, size<VkPhysicalDeviceSubgroupSizeControlFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR, size<VkPhysicalDeviceLineRasterizationFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES, size<VkPhysicalDevicePipelineCreationCacheControlFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, size<VkPhysicalDeviceVulkan11Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, size<VkPhysicalDeviceVulkan12Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES, size<VkPhysicalDeviceVulkan13Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, size<VkPhysicalDeviceCoherentMemoryFeaturesAMD>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, size<VkPhysicalDeviceCustomBorderColorFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT, size<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, size<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, size<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT, size<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, size<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES, size<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR, size<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, size<VkPhysicalDeviceRobustness2FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES, size<VkPhysicalDeviceImageRobustnessFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, size<VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifdef VK_ENABLE_BETA_EXTENSIONS this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, size<VkPhysicalDevicePortabilitySubsetFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# endif this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, size<VkPhysicalDevice4444FormatsFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI, size<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI, size<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, size<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, size<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES, size<VkPhysicalDeviceShaderTerminateInvocationFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, size<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT, size<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT, size<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT, size<VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT, size<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT, size<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT, size<VkPhysicalDeviceDepthClipControlFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, size<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV, size<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR, size<VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, size<VkPhysicalDeviceColorWriteEnableFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES, size<VkPhysicalDeviceSynchronization2Features>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT, size<VkPhysicalDeviceHostImageCopyFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT, size<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT, size<VkPhysicalDeviceLegacyDitheringFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT, size<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT, size<VkPhysicalDevicePipelineProtectedAccessFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR, size<VkPhysicalDeviceVideoMaintenance1FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, size<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, size<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, size<VkPhysicalDeviceProvokingVertexFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT, size<VkPhysicalDeviceDescriptorBufferFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES, size<VkPhysicalDeviceShaderIntegerDotProductFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR, size<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV, size<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV, size<VkPhysicalDeviceRayTracingValidationFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT, size<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES, size<VkPhysicalDeviceDynamicRenderingFeatures>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT, size<VkPhysicalDeviceImageViewMinLodFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT, size<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV, size<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT, size<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE, size<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT, size<VkPhysicalDeviceNestedCommandBufferFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT, size<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT, size<VkPhysicalDeviceImageCompressionControlFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT, size<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT, size<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT, size<VkPhysicalDeviceOpacityMicromapFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifdef VK_ENABLE_BETA_EXTENSIONS this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV, size<VkPhysicalDeviceDisplacementMicromapFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# endif this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT, size<VkPhysicalDevicePipelinePropertiesFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD, size<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT, size<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT, size<VkPhysicalDevicePipelineRobustnessFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM, size<VkPhysicalDeviceImageProcessingFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM, size<VkPhysicalDeviceTilePropertiesFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC, size<VkPhysicalDeviceAmigoProfilingFeaturesSEC>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT, size<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT, size<VkPhysicalDeviceDepthClampZeroOneFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT, size<VkPhysicalDeviceAddressBindingReportFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV, size<VkPhysicalDeviceOpticalFlowFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT, size<VkPhysicalDeviceFaultFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT, size<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM, size<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT, size<VkPhysicalDeviceFrameBoundaryFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT, size<VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT, size<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT, size<VkPhysicalDeviceDepthBiasControlFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV, size<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV, size<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM, size<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR, size<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM, size<VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT, size<VkPhysicalDeviceShaderObjectFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT, size<VkPhysicalDeviceShaderTileImageFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifdef VK_USE_PLATFORM_SCREEN_QNX this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX, size<VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# endif this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR, size<VkPhysicalDeviceCooperativeMatrixFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifdef VK_ENABLE_BETA_EXTENSIONS this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX, size<VkPhysicalDeviceShaderEnqueueFeaturesAMDX>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# endif this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM, size<VkPhysicalDeviceCubicClampFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM, size<VkPhysicalDeviceYcbcrDegammaFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM, size<VkPhysicalDeviceCubicWeightsFeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM, size<VkPhysicalDeviceImageProcessing2FeaturesQCOM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV, size<VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV, size<VkPhysicalDevicePerStageDescriptorSetFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifdef VK_USE_PLATFORM_ANDROID_KHR this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID, size<VkPhysicalDeviceExternalFormatResolveFeaturesANDROID>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# endif this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV, size<VkPhysicalDeviceCudaKernelLaunchFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM, size<VkPhysicalDeviceSchedulingControlsFeaturesARM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG, size<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM, size<VkPhysicalDeviceRenderPassStripedFeaturesARM>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR, size<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR, size<VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR, size<VkPhysicalDeviceShaderExpectAssumeFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR, size<VkPhysicalDeviceShaderFloatControls2FeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR, size<VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR, size<VkPhysicalDeviceShaderQuadControlFeaturesKHR>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV, size<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT, size<VkPhysicalDeviceMapMemoryPlacedFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV, size<VkPhysicalDeviceRawAccessChainsFeaturesNV>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA, size<VkPhysicalDeviceImageAlignmentControlFeaturesMESA>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT, size<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT>() })"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> structureSize .)",
    "insertText": "insert({ VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR, size<VkPhysicalDeviceFeatures2KHR>() })"
  },
  {
    "label": "ApplyRobustness()",
    "kind": "Method",
    "detail": "Function (void* pNext = nullptr ; physicalDeviceDeviceGeneratedCommandsFeaturesNV . pNext = pNext ; pNext =& physicalDeviceDeviceGeneratedCommandsFeaturesNV ; physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV . pNext = pNext ; pNext =& physicalDeviceDeviceGeneratedCommandsComputeFeaturesNV ; physicalDevicePrivateDataFeatures . pNext = pNext ; pNext =& physicalDevicePrivateDataFeatures ; physicalDeviceVariablePointersFeatures . pNext = pNext ; pNext =& physicalDeviceVariablePointersFeatures ; physicalDeviceMultiviewFeatures . pNext = pNext ; pNext =& physicalDeviceMultiviewFeatures ; physicalDevicePresentIdFeaturesKHR . pNext = pNext ; pNext =& physicalDevicePresentIdFeaturesKHR ; physicalDevicePresentWaitFeaturesKHR . pNext = pNext ; pNext =& physicalDevicePresentWaitFeaturesKHR ; physicalDevice16BitStorageFeatures . pNext = pNext ; pNext =& physicalDevice16BitStorageFeatures ; physicalDeviceShaderSubgroupExtendedTypesFeatures . pNext = pNext ; pNext =& physicalDeviceShaderSubgroupExtendedTypesFeatures ; physicalDeviceSamplerYcbcrConversionFeatures . pNext = pNext ; pNext =& physicalDeviceSamplerYcbcrConversionFeatures ; physicalDeviceProtectedMemoryFeatures . pNext = pNext ; pNext =& physicalDeviceProtectedMemoryFeatures ; physicalDeviceBlendOperationAdvancedFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceBlendOperationAdvancedFeaturesEXT ; physicalDeviceMultiDrawFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceMultiDrawFeaturesEXT ; physicalDeviceInlineUniformBlockFeatures . pNext = pNext ; pNext =& physicalDeviceInlineUniformBlockFeatures ; physicalDeviceMaintenance4Features . pNext = pNext ; pNext =& physicalDeviceMaintenance4Features ; physicalDeviceMaintenance5FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceMaintenance5FeaturesKHR ; physicalDeviceMaintenance6FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceMaintenance6FeaturesKHR ; physicalDeviceMaintenance7FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceMaintenance7FeaturesKHR ; physicalDeviceShaderDrawParametersFeatures . pNext = pNext ; pNext =& physicalDeviceShaderDrawParametersFeatures ; physicalDeviceShaderFloat16Int8Features . pNext = pNext ; pNext =& physicalDeviceShaderFloat16Int8Features ; physicalDeviceHostQueryResetFeatures . pNext = pNext ; pNext =& physicalDeviceHostQueryResetFeatures ; physicalDeviceGlobalPriorityQueryFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceGlobalPriorityQueryFeaturesKHR ; physicalDeviceDeviceMemoryReportFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDeviceMemoryReportFeaturesEXT ; physicalDeviceDescriptorIndexingFeatures . pNext = pNext ; pNext =& physicalDeviceDescriptorIndexingFeatures ; physicalDeviceTimelineSemaphoreFeatures . pNext = pNext ; pNext =& physicalDeviceTimelineSemaphoreFeatures ; physicalDevice8BitStorageFeatures . pNext = pNext ; pNext =& physicalDevice8BitStorageFeatures ; physicalDeviceConditionalRenderingFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceConditionalRenderingFeaturesEXT ; physicalDeviceVulkanMemoryModelFeatures . pNext = pNext ; pNext =& physicalDeviceVulkanMemoryModelFeatures ; physicalDeviceShaderAtomicInt64Features . pNext = pNext ; pNext =& physicalDeviceShaderAtomicInt64Features ; physicalDeviceShaderAtomicFloatFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderAtomicFloatFeaturesEXT ; physicalDeviceShaderAtomicFloat2FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderAtomicFloat2FeaturesEXT ; physicalDeviceVertexAttributeDivisorFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceVertexAttributeDivisorFeaturesKHR ; physicalDeviceASTCDecodeFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceASTCDecodeFeaturesEXT ; physicalDeviceTransformFeedbackFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceTransformFeedbackFeaturesEXT ; physicalDeviceRepresentativeFragmentTestFeaturesNV . pNext = pNext ; pNext =& physicalDeviceRepresentativeFragmentTestFeaturesNV ; physicalDeviceExclusiveScissorFeaturesNV . pNext = pNext ; pNext =& physicalDeviceExclusiveScissorFeaturesNV ; physicalDeviceCornerSampledImageFeaturesNV . pNext = pNext ; pNext =& physicalDeviceCornerSampledImageFeaturesNV ; physicalDeviceComputeShaderDerivativesFeaturesNV . pNext = pNext ; pNext =& physicalDeviceComputeShaderDerivativesFeaturesNV ; physicalDeviceShaderImageFootprintFeaturesNV . pNext = pNext ; pNext =& physicalDeviceShaderImageFootprintFeaturesNV ; physicalDeviceDedicatedAllocationImageAliasingFeaturesNV . pNext = pNext ; pNext =& physicalDeviceDedicatedAllocationImageAliasingFeaturesNV ; physicalDeviceCopyMemoryIndirectFeaturesNV . pNext = pNext ; pNext =& physicalDeviceCopyMemoryIndirectFeaturesNV ; physicalDeviceMemoryDecompressionFeaturesNV . pNext = pNext ; pNext =& physicalDeviceMemoryDecompressionFeaturesNV ; physicalDeviceShadingRateImageFeaturesNV . pNext = pNext ; pNext =& physicalDeviceShadingRateImageFeaturesNV ; physicalDeviceInvocationMaskFeaturesHUAWEI . pNext = pNext ; pNext =& physicalDeviceInvocationMaskFeaturesHUAWEI ; physicalDeviceMeshShaderFeaturesNV . pNext = pNext ; pNext =& physicalDeviceMeshShaderFeaturesNV ; physicalDeviceMeshShaderFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceMeshShaderFeaturesEXT ; physicalDeviceAccelerationStructureFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceAccelerationStructureFeaturesKHR ; physicalDeviceRayTracingPipelineFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceRayTracingPipelineFeaturesKHR ; physicalDeviceRayQueryFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceRayQueryFeaturesKHR ; physicalDeviceRayTracingMaintenance1FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceRayTracingMaintenance1FeaturesKHR ; physicalDeviceFragmentDensityMapFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceFragmentDensityMapFeaturesEXT ; physicalDeviceFragmentDensityMap2FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceFragmentDensityMap2FeaturesEXT ; physicalDeviceFragmentDensityMapOffsetFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceFragmentDensityMapOffsetFeaturesQCOM ; physicalDeviceScalarBlockLayoutFeatures . pNext = pNext ; pNext =& physicalDeviceScalarBlockLayoutFeatures ; physicalDeviceUniformBufferStandardLayoutFeatures . pNext = pNext ; pNext =& physicalDeviceUniformBufferStandardLayoutFeatures ; physicalDeviceDepthClipEnableFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDepthClipEnableFeaturesEXT ; physicalDeviceMemoryPriorityFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceMemoryPriorityFeaturesEXT ; physicalDevicePageableDeviceLocalMemoryFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePageableDeviceLocalMemoryFeaturesEXT ; physicalDeviceBufferDeviceAddressFeatures . pNext = pNext ; pNext =& physicalDeviceBufferDeviceAddressFeatures ; physicalDeviceBufferDeviceAddressFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceBufferDeviceAddressFeaturesEXT ; physicalDeviceImagelessFramebufferFeatures . pNext = pNext ; pNext =& physicalDeviceImagelessFramebufferFeatures ; physicalDeviceTextureCompressionASTCHDRFeatures . pNext = pNext ; pNext =& physicalDeviceTextureCompressionASTCHDRFeatures ; physicalDeviceCooperativeMatrixFeaturesNV . pNext = pNext ; pNext =& physicalDeviceCooperativeMatrixFeaturesNV ; physicalDeviceYcbcrImageArraysFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceYcbcrImageArraysFeaturesEXT ; physicalDevicePresentBarrierFeaturesNV . pNext = pNext ; pNext =& physicalDevicePresentBarrierFeaturesNV ; physicalDevicePerformanceQueryFeaturesKHR . pNext = pNext ; pNext =& physicalDevicePerformanceQueryFeaturesKHR ; physicalDeviceCoverageReductionModeFeaturesNV . pNext = pNext ; pNext =& physicalDeviceCoverageReductionModeFeaturesNV ; physicalDeviceShaderIntegerFunctions2FeaturesINTEL . pNext = pNext ; pNext =& physicalDeviceShaderIntegerFunctions2FeaturesINTEL ; physicalDeviceShaderClockFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderClockFeaturesKHR ; physicalDeviceIndexTypeUint8FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceIndexTypeUint8FeaturesKHR ; physicalDeviceShaderSMBuiltinsFeaturesNV . pNext = pNext ; pNext =& physicalDeviceShaderSMBuiltinsFeaturesNV ; physicalDeviceFragmentShaderInterlockFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceFragmentShaderInterlockFeaturesEXT ; physicalDeviceSeparateDepthStencilLayoutsFeatures . pNext = pNext ; pNext =& physicalDeviceSeparateDepthStencilLayoutsFeatures ; physicalDevicePrimitiveTopologyListRestartFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePrimitiveTopologyListRestartFeaturesEXT ; physicalDevicePipelineExecutablePropertiesFeaturesKHR . pNext = pNext ; pNext =& physicalDevicePipelineExecutablePropertiesFeaturesKHR ; physicalDeviceShaderDemoteToHelperInvocationFeatures . pNext = pNext ; pNext =& physicalDeviceShaderDemoteToHelperInvocationFeatures ; physicalDeviceTexelBufferAlignmentFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceTexelBufferAlignmentFeaturesEXT ; physicalDeviceSubgroupSizeControlFeatures . pNext = pNext ; pNext =& physicalDeviceSubgroupSizeControlFeatures ; physicalDeviceLineRasterizationFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceLineRasterizationFeaturesKHR ; physicalDevicePipelineCreationCacheControlFeatures . pNext = pNext ; pNext =& physicalDevicePipelineCreationCacheControlFeatures ; physicalDeviceVulkan11Features . pNext = pNext ; pNext =& physicalDeviceVulkan11Features ; physicalDeviceVulkan12Features . pNext = pNext ; pNext =& physicalDeviceVulkan12Features ; physicalDeviceVulkan13Features . pNext = pNext ; pNext =& physicalDeviceVulkan13Features ; physicalDeviceCoherentMemoryFeaturesAMD . pNext = pNext ; pNext =& physicalDeviceCoherentMemoryFeaturesAMD ; physicalDeviceCustomBorderColorFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceCustomBorderColorFeaturesEXT ; physicalDeviceBorderColorSwizzleFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceBorderColorSwizzleFeaturesEXT ; physicalDeviceExtendedDynamicStateFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceExtendedDynamicStateFeaturesEXT ; physicalDeviceExtendedDynamicState2FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceExtendedDynamicState2FeaturesEXT ; physicalDeviceExtendedDynamicState3FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceExtendedDynamicState3FeaturesEXT ; physicalDeviceDiagnosticsConfigFeaturesNV . pNext = pNext ; pNext =& physicalDeviceDiagnosticsConfigFeaturesNV ; physicalDeviceZeroInitializeWorkgroupMemoryFeatures . pNext = pNext ; pNext =& physicalDeviceZeroInitializeWorkgroupMemoryFeatures ; physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR ; physicalDeviceRobustness2FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceRobustness2FeaturesEXT ; physicalDeviceImageRobustnessFeatures . pNext = pNext ; pNext =& physicalDeviceImageRobustnessFeatures ; physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR ; # ifdef VK_ENABLE_BETA_EXTENSIONS physicalDevicePortabilitySubsetFeaturesKHR . pNext = pNext ; pNext =& physicalDevicePortabilitySubsetFeaturesKHR ; # endif physicalDevice4444FormatsFeaturesEXT . pNext = pNext ; pNext =& physicalDevice4444FormatsFeaturesEXT ; physicalDeviceSubpassShadingFeaturesHUAWEI . pNext = pNext ; pNext =& physicalDeviceSubpassShadingFeaturesHUAWEI ; physicalDeviceClusterCullingShaderFeaturesHUAWEI . pNext = pNext ; pNext =& physicalDeviceClusterCullingShaderFeaturesHUAWEI ; physicalDeviceShaderImageAtomicInt64FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderImageAtomicInt64FeaturesEXT ; physicalDeviceFragmentShadingRateFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceFragmentShadingRateFeaturesKHR ; physicalDeviceShaderTerminateInvocationFeatures . pNext = pNext ; pNext =& physicalDeviceShaderTerminateInvocationFeatures ; physicalDeviceFragmentShadingRateEnumsFeaturesNV . pNext = pNext ; pNext =& physicalDeviceFragmentShadingRateEnumsFeaturesNV ; physicalDeviceImage2DViewOf3DFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceImage2DViewOf3DFeaturesEXT ; physicalDeviceImageSlicedViewOf3DFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceImageSlicedViewOf3DFeaturesEXT ; physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT ; physicalDeviceLegacyVertexAttributesFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceLegacyVertexAttributesFeaturesEXT ; physicalDeviceMutableDescriptorTypeFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceMutableDescriptorTypeFeaturesEXT ; physicalDeviceDepthClipControlFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDepthClipControlFeaturesEXT ; physicalDeviceVertexInputDynamicStateFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceVertexInputDynamicStateFeaturesEXT ; physicalDeviceExternalMemoryRDMAFeaturesNV . pNext = pNext ; pNext =& physicalDeviceExternalMemoryRDMAFeaturesNV ; physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR ; physicalDeviceColorWriteEnableFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceColorWriteEnableFeaturesEXT ; physicalDeviceSynchronization2Features . pNext = pNext ; pNext =& physicalDeviceSynchronization2Features ; physicalDeviceHostImageCopyFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceHostImageCopyFeaturesEXT ; physicalDevicePrimitivesGeneratedQueryFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePrimitivesGeneratedQueryFeaturesEXT ; physicalDeviceLegacyDitheringFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceLegacyDitheringFeaturesEXT ; physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceMultisampledRenderToSingleSampledFeaturesEXT ; physicalDevicePipelineProtectedAccessFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePipelineProtectedAccessFeaturesEXT ; physicalDeviceVideoMaintenance1FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceVideoMaintenance1FeaturesKHR ; physicalDeviceInheritedViewportScissorFeaturesNV . pNext = pNext ; pNext =& physicalDeviceInheritedViewportScissorFeaturesNV ; physicalDeviceYcbcr2Plane444FormatsFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceYcbcr2Plane444FormatsFeaturesEXT ; physicalDeviceProvokingVertexFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceProvokingVertexFeaturesEXT ; physicalDeviceDescriptorBufferFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDescriptorBufferFeaturesEXT ; physicalDeviceShaderIntegerDotProductFeatures . pNext = pNext ; pNext =& physicalDeviceShaderIntegerDotProductFeatures ; physicalDeviceFragmentShaderBarycentricFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceFragmentShaderBarycentricFeaturesKHR ; physicalDeviceRayTracingMotionBlurFeaturesNV . pNext = pNext ; pNext =& physicalDeviceRayTracingMotionBlurFeaturesNV ; physicalDeviceRayTracingValidationFeaturesNV . pNext = pNext ; pNext =& physicalDeviceRayTracingValidationFeaturesNV ; physicalDeviceRGBA10X6FormatsFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceRGBA10X6FormatsFeaturesEXT ; physicalDeviceDynamicRenderingFeatures . pNext = pNext ; pNext =& physicalDeviceDynamicRenderingFeatures ; physicalDeviceImageViewMinLodFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceImageViewMinLodFeaturesEXT ; physicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT ; physicalDeviceLinearColorAttachmentFeaturesNV . pNext = pNext ; pNext =& physicalDeviceLinearColorAttachmentFeaturesNV ; physicalDeviceGraphicsPipelineLibraryFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceGraphicsPipelineLibraryFeaturesEXT ; physicalDeviceDescriptorSetHostMappingFeaturesVALVE . pNext = pNext ; pNext =& physicalDeviceDescriptorSetHostMappingFeaturesVALVE ; physicalDeviceNestedCommandBufferFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceNestedCommandBufferFeaturesEXT ; physicalDeviceShaderModuleIdentifierFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderModuleIdentifierFeaturesEXT ; physicalDeviceImageCompressionControlFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceImageCompressionControlFeaturesEXT ; physicalDeviceImageCompressionControlSwapchainFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceImageCompressionControlSwapchainFeaturesEXT ; physicalDeviceSubpassMergeFeedbackFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceSubpassMergeFeedbackFeaturesEXT ; physicalDeviceOpacityMicromapFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceOpacityMicromapFeaturesEXT ; # ifdef VK_ENABLE_BETA_EXTENSIONS physicalDeviceDisplacementMicromapFeaturesNV . pNext = pNext ; pNext =& physicalDeviceDisplacementMicromapFeaturesNV ; # endif physicalDevicePipelinePropertiesFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePipelinePropertiesFeaturesEXT ; physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD . pNext = pNext ; pNext =& physicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD ; physicalDeviceNonSeamlessCubeMapFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceNonSeamlessCubeMapFeaturesEXT ; physicalDevicePipelineRobustnessFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePipelineRobustnessFeaturesEXT ; physicalDeviceImageProcessingFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceImageProcessingFeaturesQCOM ; physicalDeviceTilePropertiesFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceTilePropertiesFeaturesQCOM ; physicalDeviceAmigoProfilingFeaturesSEC . pNext = pNext ; pNext =& physicalDeviceAmigoProfilingFeaturesSEC ; physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT ; physicalDeviceDepthClampZeroOneFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDepthClampZeroOneFeaturesEXT ; physicalDeviceAddressBindingReportFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceAddressBindingReportFeaturesEXT ; physicalDeviceOpticalFlowFeaturesNV . pNext = pNext ; pNext =& physicalDeviceOpticalFlowFeaturesNV ; physicalDeviceFaultFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceFaultFeaturesEXT ; physicalDevicePipelineLibraryGroupHandlesFeaturesEXT . pNext = pNext ; pNext =& physicalDevicePipelineLibraryGroupHandlesFeaturesEXT ; physicalDeviceShaderCoreBuiltinsFeaturesARM . pNext = pNext ; pNext =& physicalDeviceShaderCoreBuiltinsFeaturesARM ; physicalDeviceFrameBoundaryFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceFrameBoundaryFeaturesEXT ; physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT ; physicalDeviceSwapchainMaintenance1FeaturesEXT . pNext = pNext ; pNext =& physicalDeviceSwapchainMaintenance1FeaturesEXT ; physicalDeviceDepthBiasControlFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceDepthBiasControlFeaturesEXT ; physicalDeviceRayTracingInvocationReorderFeaturesNV . pNext = pNext ; pNext =& physicalDeviceRayTracingInvocationReorderFeaturesNV ; physicalDeviceExtendedSparseAddressSpaceFeaturesNV . pNext = pNext ; pNext =& physicalDeviceExtendedSparseAddressSpaceFeaturesNV ; physicalDeviceMultiviewPerViewViewportsFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceMultiviewPerViewViewportsFeaturesQCOM ; physicalDeviceRayTracingPositionFetchFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceRayTracingPositionFetchFeaturesKHR ; physicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM ; physicalDeviceShaderObjectFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderObjectFeaturesEXT ; physicalDeviceShaderTileImageFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderTileImageFeaturesEXT ; # ifdef VK_USE_PLATFORM_SCREEN_QNX physicalDeviceExternalMemoryScreenBufferFeaturesQNX . pNext = pNext ; pNext =& physicalDeviceExternalMemoryScreenBufferFeaturesQNX ; # endif physicalDeviceCooperativeMatrixFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceCooperativeMatrixFeaturesKHR ; # ifdef VK_ENABLE_BETA_EXTENSIONS physicalDeviceShaderEnqueueFeaturesAMDX . pNext = pNext ; pNext =& physicalDeviceShaderEnqueueFeaturesAMDX ; # endif physicalDeviceCubicClampFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceCubicClampFeaturesQCOM ; physicalDeviceYcbcrDegammaFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceYcbcrDegammaFeaturesQCOM ; physicalDeviceCubicWeightsFeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceCubicWeightsFeaturesQCOM ; physicalDeviceImageProcessing2FeaturesQCOM . pNext = pNext ; pNext =& physicalDeviceImageProcessing2FeaturesQCOM ; physicalDeviceDescriptorPoolOverallocationFeaturesNV . pNext = pNext ; pNext =& physicalDeviceDescriptorPoolOverallocationFeaturesNV ; physicalDevicePerStageDescriptorSetFeaturesNV . pNext = pNext ; pNext =& physicalDevicePerStageDescriptorSetFeaturesNV ; # ifdef VK_USE_PLATFORM_ANDROID_KHR physicalDeviceExternalFormatResolveFeaturesANDROID . pNext = pNext ; pNext =& physicalDeviceExternalFormatResolveFeaturesANDROID ; # endif physicalDeviceCudaKernelLaunchFeaturesNV . pNext = pNext ; pNext =& physicalDeviceCudaKernelLaunchFeaturesNV ; physicalDeviceSchedulingControlsFeaturesARM . pNext = pNext ; pNext =& physicalDeviceSchedulingControlsFeaturesARM ; physicalDeviceRelaxedLineRasterizationFeaturesIMG . pNext = pNext ; pNext =& physicalDeviceRelaxedLineRasterizationFeaturesIMG ; physicalDeviceRenderPassStripedFeaturesARM . pNext = pNext ; pNext =& physicalDeviceRenderPassStripedFeaturesARM ; physicalDeviceShaderMaximalReconvergenceFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderMaximalReconvergenceFeaturesKHR ; physicalDeviceShaderSubgroupRotateFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderSubgroupRotateFeaturesKHR ; physicalDeviceShaderExpectAssumeFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderExpectAssumeFeaturesKHR ; physicalDeviceShaderFloatControls2FeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderFloatControls2FeaturesKHR ; physicalDeviceDynamicRenderingLocalReadFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceDynamicRenderingLocalReadFeaturesKHR ; physicalDeviceShaderQuadControlFeaturesKHR . pNext = pNext ; pNext =& physicalDeviceShaderQuadControlFeaturesKHR ; physicalDeviceShaderAtomicFloat16VectorFeaturesNV . pNext = pNext ; pNext =& physicalDeviceShaderAtomicFloat16VectorFeaturesNV ; physicalDeviceMapMemoryPlacedFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceMapMemoryPlacedFeaturesEXT ; physicalDeviceRawAccessChainsFeaturesNV . pNext = pNext ; pNext =& physicalDeviceRawAccessChainsFeaturesNV ; physicalDeviceImageAlignmentControlFeaturesMESA . pNext = pNext ; pNext =& physicalDeviceImageAlignmentControlFeaturesMESA ; physicalDeviceShaderReplicatedCompositesFeaturesEXT . pNext = pNext ; pNext =& physicalDeviceShaderReplicatedCompositesFeaturesEXT ; physicalDeviceFeatures2KHR . pNext = pNext ; } VkPhysicalDeviceFeatures2KHR requiredFeaturesChain { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,nullptr } ; VkBaseOutStructure* current = nullptr ; void)",
    "insertText": "ApplyRobustness(const VpDeviceCreateInfo* pCreateInfo)"
  },
  {
    "label": "VkPhysicalDeviceFeatures2KHR()",
    "kind": "Method",
    "detail": "Function (# ifdef VK_VERSION_1_1 VkPhysicalDeviceFeatures2KHR* pFeatures2 = static_cast<)",
    "insertText": "VkPhysicalDeviceFeatures2KHR(vpGetStructure(&this->requiredFeaturesChain, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR))"
  },
  {
    "label": "VkPhysicalDeviceRobustness2FeaturesEXT()",
    "kind": "Method",
    "detail": "Function (pFeatures2 -> features . robustBufferAccess = VK_FALSE ; } # endif # ifdef VK_EXT_robustness2 VkPhysicalDeviceRobustness2FeaturesEXT* pRobustness2FeaturesEXT = static_cast<)",
    "insertText": "VkPhysicalDeviceRobustness2FeaturesEXT(vpGetStructure(&this->requiredFeaturesChain, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pRobustness2FeaturesEXT -> robustBufferAccess2 = VK_FALSE ; })",
    "insertText": "if(pCreateInfo->flags & VP_DEVICE_CREATE_DISABLE_ROBUST_IMAGE_ACCESS_BIT)"
  },
  {
    "label": "VkPhysicalDeviceImageRobustnessFeaturesEXT()",
    "kind": "Method",
    "detail": "Function (pRobustness2FeaturesEXT -> robustImageAccess2 = VK_FALSE ; } } # endif # ifdef VK_EXT_image_robustness VkPhysicalDeviceImageRobustnessFeaturesEXT* pImageRobustnessFeaturesEXT = static_cast<)",
    "insertText": "VkPhysicalDeviceImageRobustnessFeaturesEXT(vpGetStructure( &this->requiredFeaturesChain, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT))"
  },
  {
    "label": "VkPhysicalDeviceVulkan13Features()",
    "kind": "Method",
    "detail": "Function (pImageRobustnessFeaturesEXT -> robustImageAccess = VK_FALSE ; } # endif # ifdef VK_VERSION_1_3 VkPhysicalDeviceVulkan13Features* pVulkan13Features = static_cast<)",
    "insertText": "VkPhysicalDeviceVulkan13Features(vpGetStructure(&this->requiredFeaturesChain, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES))"
  },
  {
    "label": "ApplyFeatures()",
    "kind": "Method",
    "detail": "Function (pVulkan13Features -> robustImageAccess = VK_FALSE ; } # endif } void)",
    "insertText": "ApplyFeatures(const VpDeviceCreateInfo* pCreateInfo)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const std::size_t offset =)",
    "insertText": "sizeof(VkBaseOutStructure)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (const VkBaseOutStructure* q = reinterpret_cast<const)",
    "insertText": "VkBaseOutStructure(pCreateInfo->pCreateInfo->pNext)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const std::size_t count = this -> structureSize [ q -> sType ] ;)",
    "insertText": "for(std::size_t index = 0; index < count; ++index)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (const VkBaseOutStructure* pInputStruct = reinterpret_cast<const)",
    "insertText": "VkBaseOutStructure(q)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkBaseOutStructure* pOutputStruct = reinterpret_cast<)",
    "insertText": "VkBaseOutStructure(detail::vpGetStructure(&this->requiredFeaturesChain, q->sType))"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (const uint8_t* pInputData = reinterpret_cast<const)",
    "insertText": "uint8_t(pInputStruct)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (uint8_t* pOutputData = reinterpret_cast<)",
    "insertText": "uint8_t(pOutputStruct)"
  },
  {
    "label": "VkBool32()",
    "kind": "Method",
    "detail": "Function (const VkBool32* input = reinterpret_cast<const)",
    "insertText": "VkBool32(pInputData)"
  },
  {
    "label": "VkBool32()",
    "kind": "Method",
    "detail": "Function (VkBool32* output = reinterpret_cast<)",
    "insertText": "VkBool32(pOutputData)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (output [)",
    "insertText": "index(output[index] == VK_TRUE || input[index] == VK_TRUE)"
  },
  {
    "label": "ApplyRobustness()",
    "kind": "Method",
    "detail": "Function (} q = q -> pNext ; } this ->)",
    "insertText": "ApplyRobustness(pCreateInfo)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushBack(VkBaseOutStructure* found)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (VkBaseOutStructure* last = reinterpret_cast<)",
    "insertText": "VkBaseOutStructure(&requiredFeaturesChain)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (last = last -> pNext ; } last -> pNext = found ; } void)",
    "insertText": "Build(const std::vector<VkStructureType>& requiredList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const VkStructureType sType = requiredList [ i ] ;)",
    "insertText": "if(sType == VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR)"
  },
  {
    "label": "vpExtractStructure()",
    "kind": "Method",
    "detail": "Function (continue ; } VkBaseOutStructure* found =)",
    "insertText": "vpExtractStructure(&physicalDeviceFeatures2KHR, sType)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "PushBack(found)"
  },
  {
    "label": "vpGetProfileDesc()",
    "kind": "Method",
    "detail": "Function (} } } ; VPAPI_ATTR const VpProfileDesc*)",
    "insertText": "vpGetProfileDesc(const char profileName[VP_MAX_PROFILE_NAME_SIZE])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<VpProfileProperties> gatheredProfiles ;)",
    "insertText": "if(pBlockName == nullptr)"
  },
  {
    "label": "vpGetProfileDesc()",
    "kind": "Method",
    "detail": "Function (const detail::VpProfileDesc* profileDesc =)",
    "insertText": "vpGetProfileDesc(profile.profileName)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (gatheredProfiles .)",
    "insertText": "push_back(profileDesc->pRequiredProfiles[profileIndex])"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} } } gatheredProfiles .)",
    "insertText": "push_back(profile)"
  },
  {
    "label": "VK_API_VERSION_MAJOR()",
    "kind": "Method",
    "detail": "Function (uint32_t actualMajor =)",
    "insertText": "VK_API_VERSION_MAJOR(actual)"
  },
  {
    "label": "VK_API_VERSION_MINOR()",
    "kind": "Method",
    "detail": "Function (uint32_t actualMinor =)",
    "insertText": "VK_API_VERSION_MINOR(actual)"
  },
  {
    "label": "VK_API_VERSION_MAJOR()",
    "kind": "Method",
    "detail": "Function (uint32_t expectedMajor =)",
    "insertText": "VK_API_VERSION_MAJOR(expected)"
  },
  {
    "label": "VK_API_VERSION_MINOR()",
    "kind": "Method",
    "detail": "Function (uint32_t expectedMinor =)",
    "insertText": "VK_API_VERSION_MINOR(expected)"
  },
  {
    "label": "HasExtension()",
    "kind": "Method",
    "detail": "Function (} VPAPI_ATTR bool)",
    "insertText": "HasExtension(const std::vector<VkExtensionProperties>& list, const VkExtensionProperties& element)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool found = false ;)",
    "insertText": "for(size_t i = 0, n = supportedSize; i < n; ++i)"
  },
  {
    "label": "VP_DEBUG_COND_MSGF()",
    "kind": "Method",
    "detail": "Function (found = true ; break ; } })",
    "insertText": "VP_DEBUG_COND_MSGF(!found, \"Unsupported extension: %s\", requestedExtension)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (continue ; } extensions .)",
    "insertText": "push_back(pExtensions[ext_index].extensionName)"
  },
  {
    "label": "GatherBlocks()",
    "kind": "Method",
    "detail": "Function (} } VPAPI_ATTR std::vector<VpBlockProperties>)",
    "insertText": "GatherBlocks(uint32_t enabledFullProfileCount, const VpProfileProperties* pEnabledFullProfiles, uint32_t enabledProfileBlockCount, const VpBlockProperties* pEnabledProfileBlocks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<VpBlockProperties> results ;)",
    "insertText": "for(std::size_t profile_index = 0; profile_index < enabledFullProfileCount; ++profile_index)"
  },
  {
    "label": "GatherProfiles()",
    "kind": "Method",
    "detail": "Function (const std::vector<VpProfileProperties>& gathered_profiles =)",
    "insertText": "GatherProfiles(pEnabledFullProfiles[profile_index])"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (VpBlockProperties block { gathered_profiles [ gathered_index ],0,\" \" } ; results .)",
    "insertText": "push_back(block)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(std::size_t block_index = 0; block_index < enabledProfileBlockCount; ++block_index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (results .)",
    "insertText": "push_back(pEnabledProfileBlocks[block_index])"
  },
  {
    "label": "vpGetInstanceProfileSupportSingleProfile()",
    "kind": "Method",
    "detail": "Function (} return results ; } VPAPI_ATTR VkResult)",
    "insertText": "vpGetInstanceProfileSupportSingleProfile(uint32_t api_version, const std::vector<VkExtensionProperties>& supported_extensions, const VpProfileProperties* pProfile, VkBool32* pSupported, std::vector<VpBlockProperties>& supportedBlocks, std::vector<VpBlockProperties>& unsupportedBlocks)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pProfile != nullptr)"
  },
  {
    "label": "vpGetProfileDesc()",
    "kind": "Method",
    "detail": "Function (const detail::VpProfileDesc* pProfileDesc =)",
    "insertText": "vpGetProfileDesc(pProfile->profileName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pSupported = VK_FALSE ; return VK_ERROR_UNKNOWN ; } VpBlockProperties block {* pProfile,api_version } ;)",
    "insertText": "if(pProfileDesc->props.specVersion < pProfile->specVersion)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(api_version != 0)"
  },
  {
    "label": "VP_DEBUG_MSGF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MSGF(\"Unsupported Profile API version %u.%u.%u on a Vulkan system with version %u.%u.%u\", VK_API_VERSION_MAJOR(pProfileDesc->minApiVersion), VK_API_VERSION_MINOR(pProfileDesc->minApiVersion), VK_API_VERSION_PATCH(pProfileDesc->minApiVersion), VK_API_VERSION_MAJOR(api_version), VK_API_VERSION_MINOR(api_version), VK_API_VERSION_PATCH(api_version))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(uint32_t capability_index = 0; capability_index < pProfileDesc->requiredCapabilityCount; ++capability_index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const VpCapabilitiesDesc& capabilities_desc = pProfileDesc -> pRequiredCapabilities [ capability_index ] ; VkBool32 supported_capabilities = VK_FALSE ;)",
    "insertText": "for(uint32_t variant_index = 0; variant_index < capabilities_desc.variantCount; ++variant_index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const VpVariantDesc& variant_desc = capabilities_desc . pVariants [ variant_index ] ; VkBool32 supported_variant = VK_TRUE ;)",
    "insertText": "for(uint32_t i = 0; i < variant_desc.instanceExtensionCount; ++i)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (supported_variant = VK_FALSE ;)",
    "insertText": "memcpy(block.blockName, variant_desc.blockName, VP_MAX_PROFILE_NAME_SIZE * sizeof(char))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(supported_variant == VK_TRUE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(supported_capabilities == VK_FALSE)"
  },
  {
    "label": "vpGetProfileStructureTypes()",
    "kind": "Method",
    "detail": "Function (* pSupported = VK_FALSE ; return VK_SUCCESS ; } } return VK_SUCCESS ; } enum structure_type { STRUCTURE_FEATURE = 0,STRUCTURE_PROPERTY,STRUCTURE_FORMAT } ; VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileStructureTypes(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, structure_type type, uint32_t* pStructureTypeCount, VkStructureType* pStructureTypes)"
  },
  {
    "label": "VP_USE_OBJECT()",
    "kind": "Method",
    "detail": "Function (# ifdef)",
    "insertText": "VP_USE_OBJECT(void)"
  },
  {
    "label": "GatherProfiles()",
    "kind": "Method",
    "detail": "Function (# endif VkResult result = pBlockName = = nullptr ? VK_SUCCESS : VK_INCOMPLETE ; std::vector<VkStructureType> results ; const std::vector<VpProfileProperties>& gathered_profiles =)",
    "insertText": "GatherProfiles(*pProfile)"
  },
  {
    "label": "vpGetProfileDesc()",
    "kind": "Method",
    "detail": "Function (const detail::VpProfileDesc* profile_desc =)",
    "insertText": "vpGetProfileDesc(gathered_profiles[profile_index].profileName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const detail::VpCapabilitiesDesc& cap_desc = profile_desc -> pRequiredCapabilities [ capability_index ] ;)",
    "insertText": "for(uint32_t variant_index = 0; variant_index < cap_desc.variantCount; ++variant_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const detail::VpVariantDesc& variant = cap_desc . pVariants [ variant_index ] ;)",
    "insertText": "if(pBlockName != nullptr)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (continue ; } result = VK_SUCCESS ; } uint32_t count = 0 ; const VkStructureType* data = nullptr ;)",
    "insertText": "switch(type)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (default : case STRUCTURE_FEATURE : count = variant . featureStructTypeCount ; data = variant . pFeatureStructTypes ; break ; case STRUCTURE_PROPERTY : count = variant . propertyStructTypeCount ; data = variant . pPropertyStructTypes ; break ; case STRUCTURE_FORMAT : count = variant . formatStructTypeCount ; data = variant . pFormatStructTypes ; break ; })",
    "insertText": "for(uint32_t type_index = 0; type_index < count; ++type_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const VkStructureType dataType = data [ type_index ] ;)",
    "insertText": "if(std::find(results.begin(), results.end(), dataType) == std::end(results))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (results .)",
    "insertText": "push_back(dataType)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} } } } } const uint32_t count = static_cast<)",
    "insertText": "uint32_t(results.size())"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sort(results.begin(), results.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pStructureTypeCount = count ; } else {)",
    "insertText": "if(*pStructureTypeCount < count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result = VK_INCOMPLETE ; } else {* pStructureTypeCount = count ; })",
    "insertText": "if(*pStructureTypeCount > 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(pStructureTypes, &results[0], *pStructureTypeCount * sizeof(VkStructureType))"
  },
  {
    "label": "vpGetProfileExtensionProperties()",
    "kind": "Method",
    "detail": "Function (} } return result ; } enum ExtensionType { EXTENSION_INSTANCE,EXTENSION_DEVICE,} ; VPAPI_ATTR VkResult)",
    "insertText": "vpGetProfileExtensionProperties(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif const VpProfileProperties* pProfile, const char* pBlockName, ExtensionType type, uint32_t* pPropertyCount, VkExtensionProperties* pProperties)"
  },
  {
    "label": "GatherProfiles()",
    "kind": "Method",
    "detail": "Function (# endif VkResult result = pBlockName = = nullptr ? VK_SUCCESS : VK_INCOMPLETE ; std::vector<VkExtensionProperties> results ; const std::vector<VpProfileProperties>& gathered_profiles =)",
    "insertText": "GatherProfiles(*pProfile, pBlockName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (default : case EXTENSION_INSTANCE :)",
    "insertText": "for(uint32_t ext_index = 0; ext_index < variant.instanceExtensionCount; ++ext_index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (continue ; } results .)",
    "insertText": "push_back(variant.pInstanceExtensions[ext_index])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} break ; case EXTENSION_DEVICE :)",
    "insertText": "for(uint32_t ext_index = 0; ext_index < variant.deviceExtensionCount; ++ext_index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (continue ; } results .)",
    "insertText": "push_back(variant.pDeviceExtensions[ext_index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pPropertyCount = count ; } else {)",
    "insertText": "if(*pPropertyCount < count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result = VK_INCOMPLETE ; } else {* pPropertyCount = count ; })",
    "insertText": "if(*pPropertyCount > 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(pProperties, &results[0], *pPropertyCount * sizeof(VkExtensionProperties))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } return result ; } } struct VpCapabilities_T : public VpVulkanFunctions { bool singleton = false ; uint32_t apiVersion = VK_API_VERSION_1_0 ; VpCapabilities_T&)",
    "insertText": "Get()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (VpCapabilities_T instance ; VpCapabilitiesCreateInfo createInfo { } ; createInfo . flags = VP_PROFILE_CREATE_STATIC_BIT ; instance .)",
    "insertText": "init(&createInfo)"
  },
  {
    "label": "VpCapabilities_T()",
    "kind": "Method",
    "detail": "Function (instance . singleton = true ; return instance ; })",
    "insertText": "VpCapabilities_T()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this -> GetInstanceProcAddr = nullptr ; this -> GetDeviceProcAddr = nullptr ; this -> EnumerateInstanceVersion = nullptr ; this -> EnumerateInstanceExtensionProperties = nullptr ; this -> EnumerateDeviceExtensionProperties = nullptr ; this -> GetPhysicalDeviceFeatures2 = nullptr ; this -> GetPhysicalDeviceProperties2 = nullptr ; this -> GetPhysicalDeviceFormatProperties2 = nullptr ; this -> GetPhysicalDeviceQueueFamilyProperties2 = nullptr ; this -> CreateInstance = nullptr ; this -> CreateDevice = nullptr ; } VkResult)",
    "insertText": "init(const VpCapabilitiesCreateInfo* pCreateInfo)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pCreateInfo != nullptr)"
  },
  {
    "label": "ImportVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (} VkResult)",
    "insertText": "ImportVulkanFunctions(const VpCapabilitiesCreateInfo* pCreateInfo)"
  },
  {
    "label": "ImportVulkanFunctions_Static()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVulkanFunctions_Static()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pCreateInfo->pVulkanFunctions != nullptr)"
  },
  {
    "label": "ImportVulkanFunctions_Custom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportVulkanFunctions_Custom((VpVulkanFunctions*)pCreateInfo->pVulkanFunctions)"
  },
  {
    "label": "ValidateVulkanFunctions()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ValidateVulkanFunctions()"
  },
  {
    "label": "GetInstanceProcAddr()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetInstanceProcAddr(PFN_vkGetInstanceProcAddr)"
  },
  {
    "label": "GetDeviceProcAddr()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetDeviceProcAddr(PFN_vkGetDeviceProcAddr)"
  },
  {
    "label": "EnumerateInstanceVersion()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "EnumerateInstanceVersion(PFN_vkEnumerateInstanceVersion)"
  },
  {
    "label": "EnumerateInstanceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "EnumerateInstanceExtensionProperties(PFN_vkEnumerateInstanceExtensionProperties)"
  },
  {
    "label": "EnumerateDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "EnumerateDeviceExtensionProperties(PFN_vkEnumerateDeviceExtensionProperties)"
  },
  {
    "label": "GetPhysicalDeviceFeatures2()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetPhysicalDeviceFeatures2(PFN_vkGetPhysicalDeviceFeatures2)"
  },
  {
    "label": "GetPhysicalDeviceProperties2()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetPhysicalDeviceProperties2(PFN_vkGetPhysicalDeviceProperties2)"
  },
  {
    "label": "GetPhysicalDeviceFormatProperties2()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetPhysicalDeviceFormatProperties2(PFN_vkGetPhysicalDeviceFormatProperties2)"
  },
  {
    "label": "GetPhysicalDeviceQueueFamilyProperties2()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GetPhysicalDeviceQueueFamilyProperties2(PFN_vkGetPhysicalDeviceQueueFamilyProperties2)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "CreateInstance(PFN_vkCreateInstance)"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "CreateDevice(PFN_vkCreateDevice)"
  },
  {
    "label": "ImportVulkanFunctions_Custom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ImportVulkanFunctions_Custom(VpVulkanFunctions* pFunctions)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (funcName = pFunctions->funcName)",
    "insertText": "VP_COPY_IF_NOT_NULL(funcName) if(pFunctions->funcName != nullptr)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(GetInstanceProcAddr)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(GetDeviceProcAddr)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(EnumerateInstanceVersion)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(EnumerateInstanceExtensionProperties)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(EnumerateDeviceExtensionProperties)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(GetPhysicalDeviceFeatures2)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(GetPhysicalDeviceProperties2)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(GetPhysicalDeviceFormatProperties2)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(GetPhysicalDeviceQueueFamilyProperties2)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(CreateInstance)"
  },
  {
    "label": "VP_COPY_IF_NOT_NULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_COPY_IF_NOT_NULL(CreateDevice)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (VkResult result = capabilities ->)",
    "insertText": "init(pCreateInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif VkResult result = VK_SUCCESS ;)",
    "insertText": "if(pProperties == nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pPropertyCount = detail::profileCount ; } else {)",
    "insertText": "if(*pPropertyCount < detail::profileCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result = VK_INCOMPLETE ; } else {* pPropertyCount = detail::profileCount ; })",
    "insertText": "for(uint32_t property_index = 0; property_index < *pPropertyCount; ++property_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pPropertyCount = desc -> requiredProfileCount ; } else {)",
    "insertText": "if(*pPropertyCount < desc->requiredProfileCount)"
  },
  {
    "label": "GatherProfiles()",
    "kind": "Method",
    "detail": "Function (# endif const std::vector<VpProfileProperties>& gathered_profiles =)",
    "insertText": "GatherProfiles(*pProfile, nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32_t major = 0 ; uint32_t minor = 0 ; uint32_t patch = 0 ;)",
    "insertText": "for(std::size_t profile_index = 0, profile_count = gathered_profiles.size(); profile_index < profile_count; ++profile_index)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (minor = std::max<)",
    "insertText": "uint32_t(minor, VK_API_VERSION_MINOR(desc->minApiVersion))"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (patch = std::max<)",
    "insertText": "uint32_t(patch, VK_API_VERSION_PATCH(desc->minApiVersion))"
  },
  {
    "label": "VK_MAKE_API_VERSION()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "VK_MAKE_API_VERSION(0, major, minor, patch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pPropertyCount = desc -> fallbackCount ; } else {)",
    "insertText": "if(*pPropertyCount < desc->fallbackCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result = VK_INCOMPLETE ; } else {* pPropertyCount = desc -> fallbackCount ; })",
    "insertText": "for(uint32_t i = 0; i < *pPropertyCount; ++i)"
  },
  {
    "label": "singleton()",
    "kind": "Method",
    "detail": "Function (# endif VkResult result = VK_SUCCESS ; uint32_t api_version = VK_API_VERSION_1_0 ; PFN_vkEnumerateInstanceVersion pfnEnumerateInstanceVersion = vp .)",
    "insertText": "singleton(PFN_vkEnumerateInstanceVersion)VulkanRHI::vkGetInstanceProcAddr(VK_NULL_HANDLE, \"vkEnumerateInstanceVersion\")"
  },
  {
    "label": "pfnEnumerateInstanceVersion()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "pfnEnumerateInstanceVersion(&api_version)"
  },
  {
    "label": "EnumerateInstanceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (* pSupported = VK_FALSE ; return result ; } } uint32_t supported_instance_extension_count = 0 ; result = vp .)",
    "insertText": "EnumerateInstanceExtensionProperties(pLayerName, &supported_instance_extension_count, nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pSupported = VK_FALSE ; return result ; } std::vector<VkExtensionProperties> supported_instance_extensions ;)",
    "insertText": "if(supported_instance_extension_count > 0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (supported_instance_extensions .)",
    "insertText": "resize(supported_instance_extension_count)"
  },
  {
    "label": "EnumerateInstanceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (} result = vp .)",
    "insertText": "EnumerateInstanceExtensionProperties(pLayerName, &supported_instance_extension_count, supported_instance_extensions.data())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pSupported = VK_FALSE ; return result ; } VkBool32 supported = VK_TRUE ;)",
    "insertText": "if(api_version < VK_API_VERSION_1_1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool foundGPDP2 = false ;)",
    "insertText": "for(size_t ext_index = 0, ext_count = supported_instance_extensions.size(); ext_index < ext_count; ++ext_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (foundGPDP2 = true ; break ; } })",
    "insertText": "if(!foundGPDP2)"
  },
  {
    "label": "VP_DEBUG_MSG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MSG(\"Unsupported mandatory extension VK_KHR_get_physical_device_properties2 on Vulkan 1.0\")"
  },
  {
    "label": "vpGetInstanceProfileSupportSingleProfile()",
    "kind": "Method",
    "detail": "Function (std::vector<VpBlockProperties> supported_blocks ; std::vector<VpBlockProperties> unsupported_blocks ; result =)",
    "insertText": "vpGetInstanceProfileSupportSingleProfile(api_version, supported_instance_extensions, pProfile, &supported, supported_blocks, unsupported_blocks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (* pSupported = supported ; return result ; })",
    "insertText": "for(std::size_t required_profile_index = 0; required_profile_index < pProfileDesc->requiredProfileCount; ++required_profile_index)"
  },
  {
    "label": "vpGetInstanceProfileSupportSingleProfile()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "vpGetInstanceProfileSupportSingleProfile(0, supported_instance_extensions, &pProfileDesc->pRequiredProfiles[required_profile_index], &supported, supported_blocks, unsupported_blocks)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (* pPropertyCount = static_cast<)",
    "insertText": "uint32_t(blocks.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(*pPropertyCount < static_cast<uint32_t>(blocks.size()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32_t block_index = 0, block_count = static_cast<uint32_t>(blocks.size()); block_index < block_count; ++block_index)"
  },
  {
    "label": "vpGetInstanceProfileVariantsSupport()",
    "kind": "Method",
    "detail": "Function (uint32_t count = 0 ; return)",
    "insertText": "vpGetInstanceProfileVariantsSupport(#ifdef VP_USE_OBJECT capabilities, #endif pLayerName, pProfile, pSupported, &count, nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(pCreateInfo == nullptr || pInstance == nullptr)"
  },
  {
    "label": "GatherBlocks()",
    "kind": "Method",
    "detail": "Function (} const std::vector<VpBlockProperties>& blocks =)",
    "insertText": "GatherBlocks(pCreateInfo->enabledFullProfileCount, pCreateInfo->pEnabledFullProfiles, pCreateInfo->enabledProfileBlockCount, pCreateInfo->pEnabledProfileBlocks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<const char*> extensions ;)",
    "insertText": "for(std::uint32_t ext_index = 0, ext_count = pCreateInfo->pCreateInfo->enabledExtensionCount; ext_index < ext_count; ++ext_index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (extensions .)",
    "insertText": "push_back(pCreateInfo->pCreateInfo->ppEnabledExtensionNames[ext_index])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(std::size_t block_index = 0, block_count = blocks.size(); block_index < block_count; ++block_index)"
  },
  {
    "label": "vpGetProfileDesc()",
    "kind": "Method",
    "detail": "Function (const detail::VpProfileDesc* profile_desc =)",
    "insertText": "vpGetProfileDesc(blocks[block_index].profiles.profileName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const detail::VpCapabilitiesDesc* caps_desc =& profile_desc -> pRequiredCapabilities [ caps_index ] ;)",
    "insertText": "for(std::size_t variant_index = 0, variant_count = caps_desc->variantCount; variant_index < variant_count; ++variant_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const detail::VpVariantDesc* variant =& caps_desc -> pVariants [ variant_index ] ;)",
    "insertText": "if(strcmp(blocks[block_index].blockName, \"\") != 0)"
  },
  {
    "label": "GetExtensions()",
    "kind": "Method",
    "detail": "Function (continue ; } })",
    "insertText": "GetExtensions(variant->instanceExtensionCount, variant->pInstanceExtensions, extensions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } VkApplicationInfo appInfo { VK_STRUCTURE_TYPE_APPLICATION_INFO } ;)",
    "insertText": "if(pCreateInfo->pCreateInfo->pApplicationInfo != nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (appInfo =* pCreateInfo -> pCreateInfo -> pApplicationInfo ; } else)",
    "insertText": "if(!blocks.empty())"
  },
  {
    "label": "vpGetProfileAPIVersion()",
    "kind": "Method",
    "detail": "Function (appInfo . apiVersion =)",
    "insertText": "vpGetProfileAPIVersion(#ifdef VP_USE_OBJECT capabilities, #endif &blocks[0].profiles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} VkInstanceCreateInfo createInfo =* pCreateInfo -> pCreateInfo ; createInfo . pApplicationInfo =& appInfo ;)",
    "insertText": "if(createInfo.pApplicationInfo->apiVersion < VK_API_VERSION_1_1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool foundGPDP2 = false ;)",
    "insertText": "for(size_t ext_index = 0, ext_count = extensions.size(); ext_index < ext_count; ++ext_index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (extensions .)",
    "insertText": "push_back(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } # ifdef __APPLE__ bool has_portability_ext = false ;)",
    "insertText": "for(std::size_t ext_index = 0, ext_count = extensions.size(); ext_index < ext_count; ++ext_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (has_portability_ext = true ; break ; } })",
    "insertText": "if(!has_portability_ext)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (extensions .)",
    "insertText": "push_back(VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} createInfo . flags | = VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR ; # endif)",
    "insertText": "if(!extensions.empty())"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (createInfo . enabledExtensionCount = static_cast<)",
    "insertText": "uint32_t(extensions.size())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (createInfo . ppEnabledExtensionNames = extensions .)",
    "insertText": "data()"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (} return vp .)",
    "insertText": "CreateInstance(&createInfo, pAllocator, pInstance)"
  },
  {
    "label": "vpGetPhysicalDeviceProfileVariantsSupport()",
    "kind": "Method",
    "detail": "Function (} VPAPI_ATTR VkResult)",
    "insertText": "vpGetPhysicalDeviceProfileVariantsSupport(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif VkInstance instance, VkPhysicalDevice physicalDevice, const VpProfileProperties *pProfile, VkBool32 *pSupported, uint32_t *pPropertyCount, VpBlockProperties* pProperties)"
  },
  {
    "label": "EnumerateDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (# endif VkResult result = VK_SUCCESS ; uint32_t supported_device_extension_count = 0 ; result = vp .)",
    "insertText": "EnumerateDeviceExtensionProperties(physicalDevice, nullptr, &supported_device_extension_count, nullptr)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (supported_device_extensions .)",
    "insertText": "resize(supported_device_extension_count)"
  },
  {
    "label": "EnumerateDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (} result = vp .)",
    "insertText": "EnumerateDeviceExtensionProperties(physicalDevice, nullptr, &supported_device_extension_count, supported_device_extensions.data())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 . pfnGetPhysicalDeviceFeatures2 = vp . GetPhysicalDeviceFeatures2 ; userData . gpdp2 . pfnGetPhysicalDeviceProperties2 = vp . GetPhysicalDeviceProperties2 ; userData . gpdp2 . pfnGetPhysicalDeviceFormatProperties2 = vp . GetPhysicalDeviceFormatProperties2 ; userData . gpdp2 . pfnGetPhysicalDeviceQueueFamilyProperties2 = vp . GetPhysicalDeviceQueueFamilyProperties2 ; })",
    "insertText": "if(userData.gpdp2.pfnGetPhysicalDeviceFeatures2 == nullptr)"
  },
  {
    "label": "pfnGetPhysicalDeviceFeatures2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceFeatures2(PFN_vkGetPhysicalDeviceFeatures2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceFeatures2\")"
  },
  {
    "label": "pfnGetPhysicalDeviceProperties2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceProperties2(PFN_vkGetPhysicalDeviceProperties2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceProperties2\")"
  },
  {
    "label": "pfnGetPhysicalDeviceFormatProperties2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceFormatProperties2(PFN_vkGetPhysicalDeviceFormatProperties2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceFormatProperties2\")"
  },
  {
    "label": "pfnGetPhysicalDeviceQueueFamilyProperties2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceQueueFamilyProperties2(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceQueueFamilyProperties2\")"
  },
  {
    "label": "pfnGetPhysicalDeviceFeatures2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceFeatures2(PFN_vkGetPhysicalDeviceFeatures2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceFeatures2KHR\")"
  },
  {
    "label": "pfnGetPhysicalDeviceProperties2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceProperties2(PFN_vkGetPhysicalDeviceProperties2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceProperties2KHR\")"
  },
  {
    "label": "pfnGetPhysicalDeviceFormatProperties2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceFormatProperties2(PFN_vkGetPhysicalDeviceFormatProperties2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceFormatProperties2KHR\")"
  },
  {
    "label": "pfnGetPhysicalDeviceQueueFamilyProperties2()",
    "kind": "Method",
    "detail": "Function (userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceQueueFamilyProperties2(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)VulkanRHI::vkGetInstanceProcAddr(instance, \"vkGetPhysicalDeviceQueueFamilyProperties2KHR\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(userData.gpdp2.pfnGetPhysicalDeviceFeatures2 == nullptr || userData.gpdp2.pfnGetPhysicalDeviceProperties2 == nullptr || userData.gpdp2.pfnGetPhysicalDeviceFormatProperties2 == nullptr || userData.gpdp2.pfnGetPhysicalDeviceQueueFamilyProperties2 == nullptr)"
  },
  {
    "label": "vpGetProfileDesc()",
    "kind": "Method",
    "detail": "Function (const char* profile_name = gathered_profiles [ profile_index ] . profileName ; const detail::VpProfileDesc* profile_desc =)",
    "insertText": "vpGetProfileDesc(profile_name)"
  },
  {
    "label": "VP_DEBUG_MSGF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MSGF(\"Unsupported requested %s profile version: %u, profile supported at version %u\", profile_name, profile_desc->props.specVersion, pProfile->specVersion)"
  },
  {
    "label": "pfnGetPhysicalDeviceProperties2()",
    "kind": "Method",
    "detail": "Function (supported_profile = false ; } VpBlockProperties block { gathered_profiles [ profile_index ],profile_desc -> minApiVersion } ; { VkPhysicalDeviceProperties2KHR properties2 { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR } ; userData . gpdp2 .)",
    "insertText": "pfnGetPhysicalDeviceProperties2(physicalDevice, &properties2)"
  },
  {
    "label": "VP_DEBUG_MSGF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VP_DEBUG_MSGF(\"Unsupported API version: %u.%u.%u\", VK_API_VERSION_MAJOR(profile_desc->minApiVersion), VK_API_VERSION_MINOR(profile_desc->minApiVersion), VK_API_VERSION_PATCH(profile_desc->minApiVersion))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (supported_profile = false ; } })",
    "insertText": "for(uint32_t required_capability_index = 0; required_capability_index < profile_desc->requiredCapabilityCount; ++required_capability_index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const detail::VpCapabilitiesDesc* required_capabilities =& profile_desc -> pRequiredCapabilities [ required_capability_index ] ; bool supported_block = false ;)",
    "insertText": "for(uint32_t variant_index = 0; variant_index < required_capabilities->variantCount; ++variant_index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const detail::VpVariantDesc& variant_desc = required_capabilities -> pVariants [ variant_index ] ; bool supported_variant = true ;)",
    "insertText": "for(uint32_t ext_index = 0; ext_index < variant_desc.deviceExtensionCount; ++ext_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const char* requested_extension = variant_desc . pDeviceExtensions [ ext_index ] . extensionName ;)",
    "insertText": "if(!detail::CheckExtension(supported_device_extensions.data(), supported_device_extensions.size(), requested_extension))"
  },
  {
    "label": "pfnFeature()",
    "kind": "Method",
    "detail": "Function (supported_variant = false ; } } userData . variant =& variant_desc ; VkPhysicalDeviceFeatures2KHR features { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR } ; userData . variant -> chainers .)",
    "insertText": "pfnFeature(static_cast<VkBaseOutStructure*>(static_cast<void*>(&features)), &userData, [](VkBaseOutStructure* p, void* pUser) { UserData* pUserData = static_cast<UserData*>(pUser); pUserData->gpdp2.pfnGetPhysicalDeviceFeatures2( pUserData->physicalDevice, static_cast<VkPhysicalDeviceFeatures2KHR*>(static_cast<void*>(p))); pUserData->supported = true; while (p != nullptr) { if (!pUserData->variant->feature.pfnComparator(p)) { pUserData->supported = false; } p = p->pNext; } })"
  },
  {
    "label": "pfnProperty()",
    "kind": "Method",
    "detail": "Function (supported_variant = false ; } VkPhysicalDeviceProperties2KHR device_properties2 { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR } ; userData . variant -> chainers .)",
    "insertText": "pfnProperty(static_cast<VkBaseOutStructure*>(static_cast<void*>(&device_properties2)), &userData, [](VkBaseOutStructure* p, void* pUser) { UserData* pUserData = static_cast<UserData*>(pUser); pUserData->gpdp2.pfnGetPhysicalDeviceProperties2( pUserData->physicalDevice, static_cast<VkPhysicalDeviceProperties2KHR*>(static_cast<void*>(p))); pUserData->supported = true; while (p != nullptr) { if (!pUserData->variant->property.pfnComparator(p)) { pUserData->supported = false; } p = p->pNext; } })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (supported_variant = false ; })",
    "insertText": "for(uint32_t format_index = 0; format_index < userData.variant->formatCount && supported_variant; ++format_index)"
  },
  {
    "label": "pfnFormat()",
    "kind": "Method",
    "detail": "Function (userData . index = format_index ; VkFormatProperties2KHR format_properties2 { VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR } ; userData . variant -> chainers .)",
    "insertText": "pfnFormat(static_cast<VkBaseOutStructure*>(static_cast<void*>(&format_properties2)), &userData, [](VkBaseOutStructure* p, void* pUser) { UserData* pUserData = static_cast<UserData*>(pUser); pUserData->gpdp2.pfnGetPhysicalDeviceFormatProperties2( pUserData->physicalDevice, pUserData->variant->pFormats[pUserData->index].format, static_cast<VkFormatProperties2KHR*>(static_cast<void*>(p))); pUserData->supported = true; while (p != nullptr) { if (!pUserData->variant->pFormats[pUserData->index].pfnComparator(p)) { pUserData->supported = false; } p = p->pNext; } })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!supported_block)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (supported_profile = false ; } })",
    "insertText": "if(!supported_profile)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(uint32_t i = 0, n = static_cast<uint32_t>(blocks.size()); i < n; ++i)"
  },
  {
    "label": "vpGetPhysicalDeviceProfileSupport()",
    "kind": "Method",
    "detail": "Function (pProperties [ i ] = blocks [ i ] ; } }* pSupported = supported ? VK_TRUE : VK_FALSE ; return VK_SUCCESS ; } VPAPI_ATTR VkResult)",
    "insertText": "vpGetPhysicalDeviceProfileSupport(#ifdef VP_USE_OBJECT VpCapabilities capabilities, #endif VkInstance instance, VkPhysicalDevice physicalDevice, const VpProfileProperties* pProfile, VkBool32 *pSupported)"
  },
  {
    "label": "vpGetPhysicalDeviceProfileVariantsSupport()",
    "kind": "Method",
    "detail": "Function (uint32_t count = 0 ; return)",
    "insertText": "vpGetPhysicalDeviceProfileVariantsSupport(#ifdef VP_USE_OBJECT capabilities, #endif instance, physicalDevice, pProfile, pSupported, &count, nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(physicalDevice == VK_NULL_HANDLE || pCreateInfo == nullptr || pDevice == nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const detail::VpCapabilitiesDesc* pCapsDesc =& pProfileDesc -> pRequiredCapabilities [ caps_index ] ;)",
    "insertText": "for(std::size_t variant_index = 0, variant_count = pCapsDesc->variantCount; variant_index < variant_count; ++variant_index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } })",
    "insertText": "for(uint32_t type_index = 0; type_index < variant->featureStructTypeCount; ++type_index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const VkStructureType type = variant -> pFeatureStructTypes [ type_index ] ;)",
    "insertText": "if(std::find(structureTypes.begin(), structureTypes.end(), type) == std::end(structureTypes))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (structureTypes .)",
    "insertText": "push_back(type)"
  },
  {
    "label": "GetExtensions()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "GetExtensions(variant->deviceExtensionCount, variant->pDeviceExtensions, extensions)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (} } } VkBaseOutStructure* pNext = static_cast<)",
    "insertText": "VkBaseOutStructure(const_cast<void*>(pCreateInfo->pCreateInfo->pNext))"
  },
  {
    "label": "GatherStructureTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherStructureTypes(structureTypes, pNext)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (chain ->)",
    "insertText": "Build(structureTypes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceFeatures2KHR* pFeatures =& chain -> requiredFeaturesChain ;)",
    "insertText": "if(pCreateInfo->pCreateInfo->pEnabledFeatures)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (const detail::VpVariantDesc* variant =& pCapsDesc -> pVariants [ variant_index ] ; VkBaseOutStructure* base_ptr = reinterpret_cast<)",
    "insertText": "VkBaseOutStructure(pFeatures)"
  },
  {
    "label": "pfnFiller()",
    "kind": "Method",
    "detail": "Function (variant -> feature .)",
    "insertText": "pfnFiller(base_ptr)"
  },
  {
    "label": "ApplyFeatures()",
    "kind": "Method",
    "detail": "Function (base_ptr = base_ptr -> pNext ; } } } } } chain ->)",
    "insertText": "ApplyFeatures(pCreateInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } result = VK_SUCCESS ; })",
    "insertText": "if(variant.feature.pfnFiller == nullptr)"
  },
  {
    "label": "pfnFiller()",
    "kind": "Method",
    "detail": "Function (variant . feature .)",
    "insertText": "pfnFiller(p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VkResult result = pBlockName = = nullptr ? VK_SUCCESS : VK_INCOMPLETE ; VkBool32 multiple_variants = VK_FALSE ;)",
    "insertText": "if(vpHasMultipleVariantsProfile( #ifdef VP_USE_OBJECT capabilities, #endif pProfile, &multiple_variants) == VK_ERROR_UNKNOWN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } result = VK_SUCCESS ; })",
    "insertText": "if(variant.property.pfnFiller == nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } result = VK_SUCCESS ; })",
    "insertText": "for(uint32_t format_index = 0; format_index < variant.formatCount; ++format_index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (results .)",
    "insertText": "push_back(variant.pFormats[format_index].format)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* pFormatCount = count ; } else {)",
    "insertText": "if(*pFormatCount < count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result = VK_INCOMPLETE ; } else {* pFormatCount = count ; })",
    "insertText": "if(*pFormatCount > 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(pFormats, &results[0], *pFormatCount * sizeof(VkFormat))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const detail::VpCapabilitiesDesc& required_capabilities = pProfileDesc -> pRequiredCapabilities [ required_capability_index ] ;)",
    "insertText": "for(uint32_t required_variant_index = 0; required_variant_index < required_capabilities.variantCount; ++required_variant_index)"
  },
  {
    "label": "VkBaseOutStructure()",
    "kind": "Method",
    "detail": "Function (continue ; } VkBaseOutStructure* base_ptr = static_cast<)",
    "insertText": "VkBaseOutStructure(static_cast<void*>(pNext))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (base_ptr = base_ptr -> pNext ; } # if)",
    "insertText": "defined(VK_VERSION_1_3) || defined(VK_KHR_format_feature_flags2) VkFormatProperties2KHR* fp2 = static_cast<VkFormatProperties2KHR*>( detail::vpGetStructure(pNext, VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR))"
  },
  {
    "label": "VkFormatProperties3KHR()",
    "kind": "Method",
    "detail": "Function (VkFormatProperties3KHR* fp3 = static_cast<)",
    "insertText": "VkFormatProperties3KHR(detail::vpGetStructure(pNext, VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR))"
  },
  {
    "label": "pfnFiller()",
    "kind": "Method",
    "detail": "Function (VkFormatProperties2KHR fp { VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR } ; variant . pFormats [ format_index ] .)",
    "insertText": "pfnFiller(static_cast<VkBaseOutStructure*>(static_cast<void*>(&fp)))"
  },
  {
    "label": "VkFormatFeatureFlags2KHR()",
    "kind": "Method",
    "detail": "Function (fp3 -> linearTilingFeatures | = static_cast<)",
    "insertText": "VkFormatFeatureFlags2KHR(fp3->linearTilingFeatures | fp.formatProperties.linearTilingFeatures)"
  },
  {
    "label": "VkFormatFeatureFlags2KHR()",
    "kind": "Method",
    "detail": "Function (fp3 -> optimalTilingFeatures | = static_cast<)",
    "insertText": "VkFormatFeatureFlags2KHR(fp3->optimalTilingFeatures | fp.formatProperties.optimalTilingFeatures)"
  },
  {
    "label": "VkFormatFeatureFlags2KHR()",
    "kind": "Method",
    "detail": "Function (fp3 -> bufferFeatures | = static_cast<)",
    "insertText": "VkFormatFeatureFlags2KHR(fp3->bufferFeatures | fp.formatProperties.bufferFeatures)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(fp2 != nullptr)"
  },
  {
    "label": "VkFormatFeatureFlags()",
    "kind": "Method",
    "detail": "Function (fp2 -> formatProperties . linearTilingFeatures | = static_cast<)",
    "insertText": "VkFormatFeatureFlags(fp2->formatProperties.linearTilingFeatures | fp.linearTilingFeatures)"
  },
  {
    "label": "VkFormatFeatureFlags()",
    "kind": "Method",
    "detail": "Function (fp2 -> formatProperties . optimalTilingFeatures | = static_cast<)",
    "insertText": "VkFormatFeatureFlags(fp2->formatProperties.optimalTilingFeatures | fp.optimalTilingFeatures)"
  },
  {
    "label": "VkFormatFeatureFlags()",
    "kind": "Method",
    "detail": "Function (fp2 -> formatProperties . bufferFeatures | = static_cast<)",
    "insertText": "VkFormatFeatureFlags(fp2->formatProperties.bufferFeatures | fp.bufferFeatures)"
  }
]