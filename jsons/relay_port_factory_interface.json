[
  {
    "label": "AsyncPacketSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncPacketSocket"
  },
  {
    "label": "Network",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Network"
  },
  {
    "label": "PacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSocketFactory"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "TurnCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnCustomizer"
  },
  {
    "label": "FieldTrialsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialsView"
  },
  {
    "label": "Port",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Port"
  },
  {
    "label": "ProtocolAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProtocolAddress"
  },
  {
    "label": "RelayServerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RelayServerConfig"
  },
  {
    "label": "CreateRelayPortArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateRelayPortArgs"
  },
  {
    "label": "RelayPortFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RelayPortFactoryInterface"
  },
  {
    "label": "RelayPortFactoryInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_CLIENT_RELAY_PORT_FACTORY_INTERFACE_H_ # define P2P_CLIENT_RELAY_PORT_FACTORY_INTERFACE_H_ # include<memory> # include<string> # include \" p2p / base / port_interface . h \" # include \" rtc_base / ref_count . h \" namespace rtc { class AsyncPacketSocket ; class Network ; class PacketSocketFactory ; class Thread ; } namespace webrtc { class TurnCustomizer ; class FieldTrialsView ; } namespace cricket { class Port ; struct ProtocolAddress ; struct RelayServerConfig ; struct CreateRelayPortArgs { rtc::Thread* network_thread ; rtc::PacketSocketFactory* socket_factory ; const rtc::Network* network ; const ProtocolAddress* server_address ; const RelayServerConfig* config ; std::string username ; std::string password ; webrtc::TurnCustomizer* turn_customizer = nullptr ; const webrtc::FieldTrialsView* field_trials = nullptr ; int relative_priority = 0 ; } ; class RelayPortFactoryInterface { public : ~)",
    "insertText": "RelayPortFactoryInterface()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<Port>)",
    "insertText": "Create(const CreateRelayPortArgs& args, rtc::AsyncPacketSocket* udp_socket)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Port>)",
    "insertText": "Create(const CreateRelayPortArgs& args, int min_port, int max_port)"
  }
]