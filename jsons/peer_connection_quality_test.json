[
  {
    "label": "PeerConnectionE2EQualityTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionE2EQualityTest"
  },
  {
    "label": "PeerHandleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerHandleImpl"
  },
  {
    "label": "PeerConnectionE2EQualityTest()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_PEER_CONNECTION_QUALITY_TEST_H_ # define TEST_PC_E2E_PEER_CONNECTION_QUALITY_TEST_H_ # include<memory> # include<queue> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / audio_quality_analyzer_interface . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / pclf / media_quality_test_params . h \" # include \" api / test / pclf / peer_configurer . h \" # include \" api / test / peerconnection_quality_test_fixture . h \" # include \" api / test / time_controller . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" test / pc / e2e / analyzer / video / single_process_encoded_image_data_injector . h \" # include \" test / pc / e2e / analyzer / video / video_quality_analyzer_injection_helper . h \" # include \" test / pc / e2e / analyzer_helper . h \" # include \" test / pc / e2e / media / media_helper . h \" # include \" test / pc / e2e / sdp / sdp_changer . h \" # include \" test / pc / e2e / test_activities_executor . h \" # include \" test / pc / e2e / test_peer . h \" namespace webrtc { namespace webrtc_pc_e2e { class PeerConnectionE2EQualityTest : public PeerConnectionE2EQualityTestFixture { public : using QualityMetricsReporter = PeerConnectionE2EQualityTestFixture::QualityMetricsReporter ;)",
    "insertText": "PeerConnectionE2EQualityTest(std::string test_case_name, TimeController& time_controller, std::unique_ptr<AudioQualityAnalyzerInterface> audio_quality_analyzer, std::unique_ptr<VideoQualityAnalyzerInterface> video_quality_analyzer)"
  },
  {
    "label": "PeerConnectionE2EQualityTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerConnectionE2EQualityTest(std::string test_case_name, TimeController& time_controller, std::unique_ptr<AudioQualityAnalyzerInterface> audio_quality_analyzer, std::unique_ptr<VideoQualityAnalyzerInterface> video_quality_analyzer, test::MetricsLogger* metrics_logger)"
  },
  {
    "label": "PeerConnectionE2EQualityTest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnectionE2EQualityTest()"
  },
  {
    "label": "ExecuteAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAt(TimeDelta target_time_since_start, std::function<void(TimeDelta)> func)"
  },
  {
    "label": "ExecuteEvery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteEvery(TimeDelta initial_delay_since_start, TimeDelta interval, std::function<void(TimeDelta)> func)"
  },
  {
    "label": "AddQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQualityMetricsReporter(std::unique_ptr<QualityMetricsReporter> quality_metrics_reporter)"
  },
  {
    "label": "AddPeer()",
    "kind": "Method",
    "detail": "Function (PeerHandle*)",
    "insertText": "AddPeer(const PeerNetworkDependencies& network_dependencies, rtc::FunctionView<void(PeerConfigurer*)> configurer)"
  },
  {
    "label": "AddPeer()",
    "kind": "Method",
    "detail": "Function (PeerHandle*)",
    "insertText": "AddPeer(std::unique_ptr<PeerConfigurer> configurer)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(RunParams run_params)"
  },
  {
    "label": "GetRealTestDuration()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetRealTestDuration()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&lock_)"
  },
  {
    "label": "RTC_CHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_NE(real_test_duration_, TimeDelta::Zero())"
  },
  {
    "label": "GetFieldTrials()",
    "kind": "Method",
    "detail": "Function (} ; std::string)",
    "insertText": "GetFieldTrials(const RunParams& run_params)"
  },
  {
    "label": "OnTrackCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackCallback(absl::string_view peer_name, VideoSubscription peer_subscription, rtc::scoped_refptr<RtpTransceiverInterface> transceiver, std::vector<VideoConfig> remote_video_configs)"
  },
  {
    "label": "SetupCallOnSignalingThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCallOnSignalingThread(const RunParams& run_params)"
  },
  {
    "label": "TearDownCallOnSignalingThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDownCallOnSignalingThread()"
  },
  {
    "label": "SetPeerCodecPreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPeerCodecPreferences(TestPeer* peer)"
  },
  {
    "label": "CreateSignalingInterceptor()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SignalingInterceptor>)",
    "insertText": "CreateSignalingInterceptor(const RunParams& run_params)"
  },
  {
    "label": "WaitUntilIceCandidatesGathered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilIceCandidatesGathered(rtc::Thread* signaling_thread)"
  },
  {
    "label": "WaitUntilPeersAreConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilPeersAreConnected(rtc::Thread* signaling_thread)"
  },
  {
    "label": "ExchangeOfferAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExchangeOfferAnswer(SignalingInterceptor* signaling_interceptor)"
  },
  {
    "label": "ExchangeIceCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExchangeIceCandidates(SignalingInterceptor* signaling_interceptor)"
  },
  {
    "label": "StartVideo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartVideo(const std::vector<rtc::scoped_refptr<TestVideoCapturerVideoTrackSource>>& sources)"
  },
  {
    "label": "TearDownCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDownCall()"
  },
  {
    "label": "ReportGeneralTestResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportGeneralTestResults()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "Now()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TimeController& time_controller_ ; const std::unique_ptr<TaskQueueFactory> task_queue_factory_ ; std::string test_case_name_ ; std::unique_ptr<VideoQualityAnalyzerInjectionHelper> video_quality_analyzer_injection_helper_ ; std::unique_ptr<MediaHelper> media_helper_ ; std::unique_ptr<EncodedImageDataPropagator> encoded_image_data_propagator_ ; std::unique_ptr<AudioQualityAnalyzerInterface> audio_quality_analyzer_ ; std::unique_ptr<TestActivitiesExecutor> executor_ ; test::MetricsLogger* const metrics_logger_ ; std::vector<std::unique_ptr<PeerConfigurer>> peer_configurations_ ; std::vector<PeerHandleImpl> peer_handles_ ; std::unique_ptr<TestPeer> alice_ ; std::unique_ptr<TestPeer> bob_ ; std::vector<std::unique_ptr<QualityMetricsReporter>> quality_metrics_reporters_ ; std::vector<rtc::scoped_refptr<TestVideoCapturerVideoTrackSource>> alice_video_sources_ ; std::vector<rtc::scoped_refptr<TestVideoCapturerVideoTrackSource>> bob_video_sources_ ; std::vector<std::unique_ptr<rtc::VideoSinkInterface<VideoFrame>>> output_video_sinks_ ; AnalyzerHelper analyzer_helper_ ; Mutex lock_ ; TimeDelta real_test_duration_)",
    "insertText": "RTC_GUARDED_BY(lock_) = TimeDelta::Zero()"
  }
]