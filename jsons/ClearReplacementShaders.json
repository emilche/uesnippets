[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TClearReplacementTypeSelector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TClearReplacementTypeSelector"
  },
  {
    "label": "TClearReplacementBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TClearReplacementBase"
  },
  {
    "label": "TThreadGroupSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TThreadGroupSize"
  },
  {
    "label": "TClearReplacementCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClearReplacementCS"
  },
  {
    "label": "TClearReplacementVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClearReplacementVS"
  },
  {
    "label": "TClearReplacementPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClearReplacementPS"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DataDrivenShaderPlatformInfo . h \" # include \" GlobalShader . h \" # include \" Math / IntVector . h \" # include \" Math / UnrealMathSSE . h \" # include \" PipelineStateCache . h \" # include \" PixelFormat . h \" # include \" RenderGraphUtils . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderCompilerCore . h \" # include \" ShaderCore . h \" # include \" ShaderParameterUtils . h \" # include \" ShaderParameters . h \" # include \" Templates / EnableIf . h \" # include \" Templates / Function . h \" class FPointerTableBase ; enum class EClearReplacementResourceType { Buffer = 0,Texture2D = 1,Texture2DArray = 2,Texture3D = 3,StructuredBuffer = 4,LargeBuffer = 5 } ; enum class EClearReplacementValueType { Float,Int32,Uint32 } ; template<EClearReplacementValueType Type> struct TClearReplacementTypeSelector { } ; template<> struct TClearReplacementTypeSelector<EClearReplacementValueType::Float> { typedef float Type ; } ; template<> struct TClearReplacementTypeSelector<EClearReplacementValueType::Int32> { typedef int32 Type ; } ; template<> struct TClearReplacementTypeSelector<EClearReplacementValueType::Uint32> { typedef uint32 Type ; } ; template<EClearReplacementValueType ValueType,uint32 NumChannels,bool bZeroOutput = false,bool bEnableBounds = false> struct TClearReplacementBase : public FGlobalShader {)",
    "insertText": "static_assert(NumChannels >= 1 && NumChannels <= 4, \"Only 1 to 4 channels are supported.\")"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT(TClearReplacementBase, NonVirtual)"
  },
  {
    "label": "TClearReplacementBase()",
    "kind": "Method",
    "detail": "Function (bool bSupportsWrappedGroupCount = bEnableBounds ; protected :)",
    "insertText": "TClearReplacementBase()"
  },
  {
    "label": "TClearReplacementBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TClearReplacementBase(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ClearValueParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ClearValue\"), SPF_Mandatory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bEnableBounds)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (MinBoundsParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"MinBounds\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (MaxBoundsParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"MaxBounds\"), SPF_Mandatory)"
  },
  {
    "label": "GetSourceFilename()",
    "kind": "Method",
    "detail": "Function (} } public : const TCHAR*)",
    "insertText": "GetSourceFilename()"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_CLEAR_VALUE\"), !bZeroOutput)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_BOUNDS\"), bEnableBounds)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"float2\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"float3\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"float4\"))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (break ; } break ; case EClearReplacementValueType::Int32 :)",
    "insertText": "switch(NumChannels)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"int2\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"int3\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"int4\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 2 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"uint2\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 3 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"uint3\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (break ; case 4 : OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"VALUE_TYPE\"), TEXT(\"uint4\"))"
  },
  {
    "label": "GetClearValueParam()",
    "kind": "Method",
    "detail": "Function (break ; } break ; } } template<T = const FShaderParameter&> TEnableIf<! bZeroOutput,T>::Type)",
    "insertText": "GetClearValueParam()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, MinBoundsParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, MaxBoundsParam)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; namespace ClearReplacementCS { template<EClearReplacementResourceType> struct TThreadGroupSize { } ; template<> struct TThreadGroupSize<EClearReplacementResourceType::Buffer> { int32 X = 6 4,Y = 1,Z = 1 ; } ; template<> struct TThreadGroupSize<EClearReplacementResourceType::Texture2D> { int32 X = 8,Y = 8,Z = 1 ; } ; template<> struct TThreadGroupSize<EClearReplacementResourceType::Texture2DArray> { int32 X = 8,Y = 8,Z = 1 ; } ; template<> struct TThreadGroupSize<EClearReplacementResourceType::Texture3D> { int32 X = 4,Y = 4,Z = 4 ; } ; template<> struct TThreadGroupSize<EClearReplacementResourceType::StructuredBuffer> { int32 X = 6 4,Y = 1,Z = 1 ; } ; template<> struct TThreadGroupSize<EClearReplacementResourceType::LargeBuffer> { int32 X = 5 1 2,Y = 1,Z = 1 ; } ; } template<EClearReplacementResourceType ResourceType,BaseType> class TClearReplacementCS : public BaseType {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(TClearReplacementCS, Global, RENDERCORE_API)"
  },
  {
    "label": "bUseWrappedGroupCount()",
    "kind": "Method",
    "detail": "Function (public : uint32 ThreadGroupSizeX = ClearReplacementCS::TThreadGroupSize<ResourceType>::X ; uint32 ThreadGroupSizeY = ClearReplacementCS::TThreadGroupSize<ResourceType>::Y ; uint32 ThreadGroupSizeZ = ClearReplacementCS::TThreadGroupSize<ResourceType>::Z ; bool)",
    "insertText": "bUseWrappedGroupCount(ThreadGroupSizeY == 1) && (ThreadGroupSizeZ == 1)"
  },
  {
    "label": "TClearReplacementCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TClearReplacementCS()"
  },
  {
    "label": "TClearReplacementCS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TClearReplacementCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : BaseType(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ClearResourceParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ClearResource\"), SPF_Mandatory)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEnvironment . CompilerFlags .)",
    "insertText": "Add(CFLAG_ForceBindful)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"THREADGROUPSIZE_X\"), ThreadGroupSizeX)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"THREADGROUPSIZE_Y\"), ThreadGroupSizeY)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"THREADGROUPSIZE_Z\"), ThreadGroupSizeZ)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_WRAPPED_GROUP_COUNT\"), bUseWrappedGroupCount ? 1 : 0)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"RESOURCE_TYPE\"), uint32(ResourceType))"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "GetClearResourceParam()",
    "kind": "Method",
    "detail": "Function (} const FShaderResourceParameter&)",
    "insertText": "GetClearResourceParam()"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetGroupCount(uint32 SizeX, uint32 SizeY, uint32 SizeZ)"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FIntVector(FMath::DivideAndRoundUp(SizeX, ThreadGroupSizeX), FMath::DivideAndRoundUp(SizeY, ThreadGroupSizeY), FMath::DivideAndRoundUp(SizeZ, ThreadGroupSizeZ))"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, ClearResourceParam)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<bool bEnableDepth,BaseType> class TClearReplacementVS : public BaseType {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(TClearReplacementVS, Global, RENDERCORE_API)"
  },
  {
    "label": "TClearReplacementVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TClearReplacementVS()"
  },
  {
    "label": "TClearReplacementVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TClearReplacementVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : BaseType(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (DepthParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"Depth\"), SPF_Mandatory)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_DEPTH\"), bEnableDepth)"
  },
  {
    "label": "GetDepthParam()",
    "kind": "Method",
    "detail": "Function (} template<T = const FShaderParameter&> TEnableIf<bEnableDepth,T>::Type)",
    "insertText": "GetDepthParam()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<bool b128BitOutput,BaseType> class TClearReplacementPS : public BaseType {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(TClearReplacementPS, Global, RENDERCORE_API)"
  },
  {
    "label": "TClearReplacementPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TClearReplacementPS()"
  },
  {
    "label": "TClearReplacementPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TClearReplacementPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : BaseType(Initializer)"
  },
  {
    "label": "SetRenderTargetOutputFormat()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetRenderTargetOutputFormat(0, PF_A32B32G32R32F)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_DEPTH\"), false)"
  },
  {
    "label": "ClearUAVShader_T()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TClearReplacementBase<EClearReplacementValueType::Uint32,1,false,false> FClearReplacementBase_Uint ; typedef TClearReplacementBase<EClearReplacementValueType::Uint32,4,false,false> FClearReplacementBase_Uint4 ; typedef TClearReplacementBase<EClearReplacementValueType::Float,4,false,false> FClearReplacementBase_Float4 ; typedef TClearReplacementBase<EClearReplacementValueType::Uint32,1,true,false> FClearReplacementBase_Uint_Zero ; typedef TClearReplacementBase<EClearReplacementValueType::Float,4,true,false> FClearReplacementBase_Float4_Zero ; typedef TClearReplacementBase<EClearReplacementValueType::Float,4,true,true> FClearReplacementBase_Float4_Zero_Bounds ; typedef TClearReplacementBase<EClearReplacementValueType::Uint32,1,false,true> FClearReplacementBase_Uint_Bounds ; typedef TClearReplacementBase<EClearReplacementValueType::Uint32,4,false,true> FClearReplacementBase_Uint4_Bounds ; typedef TClearReplacementBase<EClearReplacementValueType::Int32,4,false,true> FClearReplacementBase_Sint4_Bounds ; typedef TClearReplacementBase<EClearReplacementValueType::Float,1,false,true> FClearReplacementBase_Float_Bounds ; typedef TClearReplacementBase<EClearReplacementValueType::Float,4,false,true> FClearReplacementBase_Float4_Bounds ; typedef TClearReplacementVS<false,FClearReplacementBase_Float4_Zero> FClearReplacementVS ; typedef TClearReplacementVS<false,FClearReplacementBase_Float4_Zero_Bounds> FClearReplacementVS_Bounds ; typedef TClearReplacementVS<true,FClearReplacementBase_Float4_Zero> FClearReplacementVS_Depth ; typedef TClearReplacementPS<false,FClearReplacementBase_Float4> FClearReplacementPS ; typedef TClearReplacementPS<true,FClearReplacementBase_Float4> FClearReplacementPS_128 ; typedef TClearReplacementPS<false,FClearReplacementBase_Float4_Zero> FClearReplacementPS_Zero ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Uint_Bounds> FClearReplacementCS_Buffer_Uint_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Float_Bounds> FClearReplacementCS_Buffer_Float_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Float4_Bounds> FClearReplacementCS_Buffer_Float4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Uint_Bounds> FClearReplacementCS_LargeBuffer_Uint_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Float_Bounds> FClearReplacementCS_LargeBuffer_Float_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Float4_Bounds> FClearReplacementCS_LargeBuffer_Float4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Uint_Bounds> FClearReplacementCS_StructuredBuffer_Uint_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Float_Bounds> FClearReplacementCS_StructuredBuffer_Float_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Float4_Bounds> FClearReplacementCS_StructuredBuffer_Float4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture3D,FClearReplacementBase_Float4_Bounds> FClearReplacementCS_Texture3D_Float4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2D,FClearReplacementBase_Float4_Bounds> FClearReplacementCS_Texture2D_Float4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Float4_Bounds> FClearReplacementCS_Texture2DArray_Float4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Uint_Zero> FClearReplacementCS_Buffer_Uint_Zero ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Uint_Zero> FClearReplacementCS_StructuredBuffer_Uint_Zero ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Uint_Zero> FClearReplacementCS_Texture2DArray_Uint_Zero ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Uint> FClearReplacementCS_Buffer_Uint ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Uint> FClearReplacementCS_LargeBuffer_Uint ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Uint> FClearReplacementCS_StructuredBuffer_Uint ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Uint> FClearReplacementCS_Texture2DArray_Uint ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture3D,FClearReplacementBase_Float4> FClearReplacementCS_Texture3D_Float4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2D,FClearReplacementBase_Float4> FClearReplacementCS_Texture2D_Float4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Float4> FClearReplacementCS_Texture2DArray_Float4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture3D,FClearReplacementBase_Uint4> FClearReplacementCS_Texture3D_Uint4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2D,FClearReplacementBase_Uint4> FClearReplacementCS_Texture2D_Uint4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Uint4> FClearReplacementCS_Texture2DArray_Uint4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Uint4> FClearReplacementCS_Buffer_Uint4 ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Uint4> FClearReplacementCS_LargeBuffer_Uint4 ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Uint4> FClearReplacementCS_StructuredBuffer_Uint4 ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Uint4_Bounds> FClearReplacementCS_Buffer_Uint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Uint4_Bounds> FClearReplacementCS_LargeBuffer_Uint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Uint4_Bounds> FClearReplacementCS_StructuredBuffer_Uint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture3D,FClearReplacementBase_Uint4_Bounds> FClearReplacementCS_Texture3D_Uint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2D,FClearReplacementBase_Uint4_Bounds> FClearReplacementCS_Texture2D_Uint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Uint4_Bounds> FClearReplacementCS_Texture2DArray_Uint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Buffer,FClearReplacementBase_Sint4_Bounds> FClearReplacementCS_Buffer_Sint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::LargeBuffer,FClearReplacementBase_Sint4_Bounds> FClearReplacementCS_LargeBuffer_Sint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::StructuredBuffer,FClearReplacementBase_Sint4_Bounds> FClearReplacementCS_StructuredBuffer_Sint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture3D,FClearReplacementBase_Sint4_Bounds> FClearReplacementCS_Texture3D_Sint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2D,FClearReplacementBase_Sint4_Bounds> FClearReplacementCS_Texture2D_Sint4_Bounds ; typedef TClearReplacementCS<EClearReplacementResourceType::Texture2DArray,FClearReplacementBase_Sint4_Bounds> FClearReplacementCS_Texture2DArray_Sint4_Bounds ; template<EClearReplacementResourceType ResourceType,EClearReplacementValueType ValueType,uint32 NumChannels,bool bBarriers> void)",
    "insertText": "ClearUAVShader_T(FRHIComputeCommandList& RHICmdList, FRHIUnorderedAccessView* UAV, uint32 SizeX, uint32 SizeY, uint32 SizeZ, const typename TClearReplacementTypeSelector<ValueType>::Type(&ClearValues)[NumChannels], TFunctionRef<void(FRHIComputeShader*, const FShaderResourceParameter&, bool)> ResourceBindCallback)"
  },
  {
    "label": "ComputeShader()",
    "kind": "Method",
    "detail": "Function (typedef TClearReplacementCS<ResourceType,TClearReplacementBase<ValueType,NumChannels,false,true>> FClearShader ; TShaderMapRef<FClearShader>)",
    "insertText": "ComputeShader(GetGlobalShaderMap(GMaxRHIFeatureLevel))"
  },
  {
    "label": "GetComputeShader()",
    "kind": "Method",
    "detail": "Function (FRHIComputeShader* ShaderRHI = ComputeShader .)",
    "insertText": "GetComputeShader()"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(RHICmdList, ShaderRHI)"
  },
  {
    "label": "GetScratchShaderParameters()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderParameters& BatchedParameters = RHICmdList .)",
    "insertText": "GetScratchShaderParameters()"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ComputeShader->GetClearValueParam(), ClearValues)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ComputeShader->GetMinBoundsParam(), FUintVector4(0, 0, 0, 0))"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ComputeShader->GetMaxBoundsParam(), FUintVector4(SizeX, SizeY, SizeZ, 0))"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderParameters(ShaderRHI, BatchedParameters)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "Transition(FRHITransitionInfo(UAV, ERHIAccess::Unknown, ERHIAccess::UAVCompute))"
  },
  {
    "label": "ResourceBindCallback()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ResourceBindCallback(ShaderRHI, ComputeShader->GetClearResourceParam(), true)"
  },
  {
    "label": "GetGroupCount()",
    "kind": "Method",
    "detail": "Function (FIntVector GroupCount =)",
    "insertText": "GetGroupCount(SizeX, SizeY, SizeZ)"
  },
  {
    "label": "DispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DispatchComputeShader(GroupCount.X, GroupCount.Y, GroupCount.Z)"
  },
  {
    "label": "ResourceBindCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResourceBindCallback(ShaderRHI, ComputeShader->GetClearResourceParam(), false)"
  },
  {
    "label": "Transition()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "Transition(FRHITransitionInfo(UAV, ERHIAccess::UAVCompute, ERHIAccess::SRVCompute))"
  },
  {
    "label": "ClearUAVShader_T()",
    "kind": "Method",
    "detail": "Function (} } template<EClearReplacementResourceType ResourceType,EClearReplacementValueType ValueType,uint32 NumChannels,bool bBarriers> void)",
    "insertText": "ClearUAVShader_T(FRHIComputeCommandList& RHICmdList, FRHIUnorderedAccessView* UAV, uint32 SizeX, uint32 SizeY, uint32 SizeZ, const typename TClearReplacementTypeSelector<ValueType>::Type(&ClearValues)[NumChannels])"
  },
  {
    "label": "SetUAVParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetUAVParameter(BatchedParameters, ComputeShader->GetClearResourceParam(), UAV)"
  },
  {
    "label": "GetScratchShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderUnbinds& BatchedUnbinds = RHICmdList .)",
    "insertText": "GetScratchShaderUnbinds()"
  },
  {
    "label": "UnsetUAVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetUAVParameter(BatchedUnbinds, ComputeShader->GetClearResourceParam())"
  },
  {
    "label": "SetBatchedShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderUnbinds(ShaderRHI, BatchedUnbinds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bBarriers)"
  },
  {
    "label": "ClearUAVShader_T()",
    "kind": "Method",
    "detail": "Function (} } template<EClearReplacementResourceType ResourceType,uint32 NumChannels,bool bBarriers> void)",
    "insertText": "ClearUAVShader_T(FRHIComputeCommandList& RHICmdList, FRHIUnorderedAccessView* UAV, uint32 SizeX, uint32 SizeY, uint32 SizeZ, const void* ClearValues, EClearReplacementValueType ValueType)"
  },
  {
    "label": "bBarriers()",
    "kind": "Method",
    "detail": "Function (break ; case EClearReplacementValueType::Uint32 : ClearUAVShader_T<ResourceType,EClearReplacementValueType::Uint32,NumChannels,)",
    "insertText": "bBarriers(RHICmdList, UAV, SizeX, SizeY, SizeZ, *reinterpret_cast<const uint32(*)[NumChannels]>(ClearValues))"
  },
  {
    "label": "bBarriers()",
    "kind": "Method",
    "detail": "Function (break ; case EClearReplacementValueType::Int32 : ClearUAVShader_T<ResourceType,EClearReplacementValueType::Int32,NumChannels,)",
    "insertText": "bBarriers(RHICmdList, UAV, SizeX, SizeY, SizeZ, *reinterpret_cast<const int32(*)[NumChannels]>(ClearValues))"
  }
]