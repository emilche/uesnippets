[
  {
    "label": "FManifestDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManifestDetails"
  },
  {
    "label": "FManifestBuilderConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManifestBuilderConfig"
  },
  {
    "label": "IManifestBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IManifestBuilder"
  },
  {
    "label": "FManifestBuilderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManifestBuilderFactory"
  },
  {
    "label": "FManifestBuilderConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Variant . h \" # include \" BuildPatchManifest . h \" # include \" Core / BlockStructure . h \" # include \" Core / FileSpan . h \" # include \" Generation / FileAttributesParser . h \" namespace BuildPatchServices { struct FManifestDetails { public : EFeatureLevel FeatureLevel ; uint32 AppId ; FString AppName ; FString BuildVersion ; FString LaunchExe ; FString LaunchCommand ; TSet<FString> PrereqIds ; FString PrereqName ; FString PrereqPath ; FString PrereqArgs ; TMap<FString,FVariant> CustomFields ; TMap<FString,FFileAttributes> FileAttributesMap ; } ; struct FManifestBuilderConfig { public :)",
    "insertText": "FManifestBuilderConfig()"
  },
  {
    "label": "IManifestBuilder()",
    "kind": "Method",
    "detail": "Function (public : bool bAllowEmptyBuilds ; } ; class IManifestBuilder { public : ~)",
    "insertText": "IManifestBuilder()"
  },
  {
    "label": "AddChunkMatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChunkMatch(const FGuid& ChunkGuid, const FBlockStructure& Structure)"
  },
  {
    "label": "FinalizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinalizeData(const TArray<FFileSpan>& FileSpans, TArray<FChunkInfo> ChunkInfo)"
  },
  {
    "label": "SaveToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToFile(const FString& Filename)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSharedRef<IManifestBuilder> IManifestBuilderRef ; typedef TSharedPtr<IManifestBuilder> IManifestBuilderPtr ; class FManifestBuilderFactory { public : IManifestBuilderRef)",
    "insertText": "Create(IFileSystem* FileSystem, const FManifestBuilderConfig& Config, const FManifestDetails& Details)"
  }
]