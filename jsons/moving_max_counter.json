[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "MovingMaxCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovingMaxCounter"
  },
  {
    "label": "MovingMaxCounter()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_MOVING_MAX_COUNTER_H_ # define RTC_BASE_NUMERICS_MOVING_MAX_COUNTER_H_ # include<stdint . h> # include<deque> # include<limits> # include<utility> # include \" absl / types / optional . h \" # include \" rtc_base / checks . h \" namespace rtc { template<class T> class MovingMaxCounter { public :)",
    "insertText": "MovingMaxCounter(int64_t window_length_ms)"
  },
  {
    "label": "MovingMaxCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovingMaxCounter(const MovingMaxCounter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MovingMaxCounter&)",
    "insertText": "operator(const MovingMaxCounter&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const T& sample, int64_t current_time_ms)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (absl::optional<T>)",
    "insertText": "Max(int64_t current_time_ms)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RollWindow()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RollWindow(int64_t new_time_ms)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const int64_t window_length_ms_ ; std::deque<std::pair<int64_t,T>> samples_ ; # if RTC_DCHECK_IS_ON int64_t last_call_time_ms_ = std::numeric_limits<int64_t)",
    "insertText": "min()"
  },
  {
    "label": "MovingMaxCounter()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class T> MovingMaxCounter<T)",
    "insertText": "MovingMaxCounter(int64_t window_length_ms) : window_length_ms_(window_length_ms)"
  },
  {
    "label": "RollWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RollWindow(current_time_ms)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (samples_ .)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(samples_.empty() || samples_.back().first < current_time_ms)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (samples_ .)",
    "insertText": "emplace_back(std::make_pair(current_time_ms, sample))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (absl::optional<T> res ;)",
    "insertText": "if(!samples_.empty())"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "emplace(samples_.front().second)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (samples_ .)",
    "insertText": "clear()"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON)",
    "insertText": "RTC_DCHECK_GE(new_time_ms, last_call_time_ms_)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (last_call_time_ms_ = new_time_ms ; # endif const int64_t window_begin_ms = new_time_ms - window_length_ms_ ; auto it = samples_ .)",
    "insertText": "begin()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (+ + it ; } samples_ .)",
    "insertText": "erase(samples_.begin(), it)"
  }
]