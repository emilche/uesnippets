[
  {
    "label": "CoroParallelFor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Async . h \" # include \" Async / ParallelFor . h \" # include \" Coroutine . h \" # if WITH_CPP_COROUTINES template<BodyType,. . . ARGS> void)",
    "insertText": "CoroParallelFor(const TCHAR* DebugName, int32 Num, BodyType Body, EParallelForFlags Flags, ARGS&... Args)"
  },
  {
    "label": "ShouldUseThreadingForPerformance()",
    "kind": "Method",
    "detail": "Function (int32 NumWorkers = 1 ; const bool bIsMultithread =)",
    "insertText": "ShouldUseThreadingForPerformance() || FForkProcessHelper::IsForkedMultithreadInstance()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumWorkers =)",
    "insertText": "int32(LowLevelTasks::FScheduler::Get().GetNumWorkers())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (NumWorkers = LowLevelTasks::)",
    "insertText": "Get().IsWorkerThread()"
  },
  {
    "label": "Min3()",
    "kind": "Method",
    "detail": "Function (NumWorkers =)",
    "insertText": "Min3(NumWorkers, Num, FPlatformMisc::NumberOfCoresIncludingHyperthreads())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumWorkers <= 1)"
  },
  {
    "label": "SYNC_INVOKE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SYNC_INVOKE(Body(Index, Args...))"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "checkSlow(NumWorkers > 0)"
  },
  {
    "label": "bIsUnbalanced()",
    "kind": "Method",
    "detail": "Function (int32 BatchSize = 1 ; int32 NumBatches = Num ; bool)",
    "insertText": "bIsUnbalanced(Flags & EParallelForFlags::Unbalanced)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (BatchSize = FMath::DivideAndRoundUp<)",
    "insertText": "int32(Num, (NumWorkers * Div))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (NumBatches = FMath::DivideAndRoundUp<)",
    "insertText": "int32(Num, BatchSize)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (break ; } } } })",
    "insertText": "checkSlow(BatchSize * NumBatches >= Num)"
  },
  {
    "label": "DoWorkLambda()",
    "kind": "Method",
    "detail": "Function (std::atomic_int BatchItem = { 0 } ; auto)",
    "insertText": "DoWorkLambda(std::atomic_int& InnerBatchItem, BodyType InnerBody, int32 InnerBatchSize, int32 InnerNum, auto&... InnerArgs) -> CORO_TASK(void)"
  },
  {
    "label": "Mark()",
    "kind": "Method",
    "detail": "Function (FMemMark)",
    "insertText": "Mark(FMemStack::Get())"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(CoroTask_ParallelFor)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = InnerBatchItem .)",
    "insertText": "fetch_add(InnerBatchSize, std::memory_order_relaxed)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 EndIndex = FMath::Min<)",
    "insertText": "int32(StartIndex + InnerBatchSize, InnerNum)"
  },
  {
    "label": "CORO_INVOKE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CORO_INVOKE(InnerBody(Index, InnerArgs...))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EndIndex >= InnerNum)"
  },
  {
    "label": "CO_RETURN_TASK()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "CO_RETURN_TASK()"
  },
  {
    "label": "bBackgroundPriority()",
    "kind": "Method",
    "detail": "Function (} ; const ETaskTag LatencySensitiveTasks = ETaskTag::EStaticInit | ETaskTag::EGameThread | ETaskTag::ESlateThread | ETaskTag::ERenderingThread | ETaskTag::ERhiThread ; const bool)",
    "insertText": "bBackgroundPriority(Flags & EParallelForFlags::BackgroundPriority)"
  },
  {
    "label": "bIsLatencySensitive()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsLatencySensitive(FTaskTagScope::GetCurrentTag() & LatencySensitiveTasks)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LowLevelTasks::ETaskPriority Priority = LowLevelTasks::ETaskPriority::Inherit ;)",
    "insertText": "if(bIsLatencySensitive && !bBackgroundPriority)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Priority = LowLevelTasks::ETaskPriority::High ; } else)",
    "insertText": "if(bBackgroundPriority)"
  },
  {
    "label": "LAUNCHED_TASK()",
    "kind": "Method",
    "detail": "Function (Priority = LowLevelTasks::ETaskPriority::BackgroundNormal ; } NumWorkers* = 2 ; TArray<)",
    "insertText": "LAUNCHED_TASK(void)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (WorkerTasks .)",
    "insertText": "Reserve(NumWorkers)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (WorkerTasks .)",
    "insertText": "Push(DoWorkLambda(BatchItem, Body, BatchSize, Num, Args...).Launch(DebugName, Priority, LowLevelTasks::EQueuePreference::GlobalQueuePreference))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32 TaskIndex = WorkerTasks .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(WorkerTasks[TaskIndex].TryExpedite())"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (WorkerTasks .)",
    "insertText": "RemoveAt(TaskIndex)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} TaskIndex - - ; })",
    "insertText": "checkSlow(BatchItem.load(std::memory_order_relaxed) * BatchSize >= Num)"
  }
]