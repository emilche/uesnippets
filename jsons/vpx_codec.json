[
  {
    "label": "vpx_codec_iface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_iface"
  },
  {
    "label": "vpx_codec_priv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_priv"
  },
  {
    "label": "vpx_codec_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_ctx"
  },
  {
    "label": "vpx_codec_dec_cfg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_dec_cfg"
  },
  {
    "label": "vpx_codec_enc_cfg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_codec_enc_cfg"
  },
  {
    "label": "vpx_bit_depth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "vpx_bit_depth"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_VPX_CODEC_H_ # define VPX_VPX_VPX_CODEC_H_ # ifdef __cplusplus \" C \" { # endif # include \" . / vpx_image . h \" # include \" . / vpx_integer . h \" # ifndef VPX_DEPRECATED # if)",
    "insertText": "defined(__GNUC__) && __GNUC__ #define VPX_DEPRECATED __attribute__((deprecated)) #elif defined(_MSC_VER) #define VPX_DEPRECATED #else #define VPX_DEPRECATED #endif #endif #ifndef VPX_DECLSPEC_DEPRECATED #if defined(__GNUC__) && __GNUC__ #define VPX_DECLSPEC_DEPRECATED #elif defined(_MSC_VER) #define VPX_DECLSPEC_DEPRECATED __declspec(deprecated) #else #define VPX_DECLSPEC_DEPRECATED #endif #endif #ifndef VPX_UNUSED #if defined(__GNUC__) || defined(__clang__) #define VPX_UNUSED __attribute__((unused)) #else #define VPX_UNUSED #endif #endif #define VPX_CODEC_ABI_VERSION (4 + VPX_IMAGE_ABI_VERSION)"
  },
  {
    "label": "vpx_codec_version()",
    "kind": "Method",
    "detail": "Function (VPX_CODEC_OK,VPX_CODEC_ERROR,VPX_CODEC_MEM_ERROR,VPX_CODEC_ABI_MISMATCH,VPX_CODEC_INCAPABLE,VPX_CODEC_UNSUP_BITSTREAM,VPX_CODEC_UNSUP_FEATURE,VPX_CODEC_CORRUPT_FRAME,VPX_CODEC_INVALID_PARAM,VPX_CODEC_LIST_END } vpx_codec_err_t ; typedef long vpx_codec_caps_t ; # define VPX_CODEC_CAP_DECODER 0 x1 # define VPX_CODEC_CAP_ENCODER 0 x2 # define VPX_CODEC_CAP_HIGHBITDEPTH 0 x4 typedef long vpx_codec_flags_t ; typedef const struct vpx_codec_iface vpx_codec_iface_t ; typedef struct vpx_codec_priv vpx_codec_priv_t ; typedef const void* vpx_codec_iter_t ; typedef struct vpx_codec_ctx { const char* name ; vpx_codec_iface_t* iface ; vpx_codec_err_t err ; const char* err_detail ; vpx_codec_flags_t init_flags ; union { const struct vpx_codec_dec_cfg* dec ; const struct vpx_codec_enc_cfg* enc ; const void* raw ; } config ; vpx_codec_priv_t* priv ; } vpx_codec_ctx_t ; typedef enum vpx_bit_depth { VPX_BITS_8 = 8,VPX_BITS_10 = 1 0,VPX_BITS_12 = 1 2,} vpx_bit_depth_t ; int)",
    "insertText": "vpx_codec_version(void)"
  },
  {
    "label": "VPX_VERSION_MAJOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VPX_VERSION_MAJOR(v) \\ (((v) >> 16) & 0xff) #define VPX_VERSION_MINOR(v) \\ (((v) >> 8) & 0xff) #define VPX_VERSION_PATCH(v) \\ (((v) >> 0) & 0xff) #define vpx_codec_version_major() ((vpx_codec_version() >> 16) & 0xff) #define vpx_codec_version_minor() ((vpx_codec_version() >> 8) & 0xff) #define vpx_codec_version_patch() ((vpx_codec_version() >> 0) & 0xff) const char *vpx_codec_version_str(void)"
  },
  {
    "label": "vpx_codec_version_extra_str()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "vpx_codec_version_extra_str(void)"
  },
  {
    "label": "vpx_codec_build_config()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "vpx_codec_build_config(void)"
  },
  {
    "label": "vpx_codec_iface_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "vpx_codec_iface_name(vpx_codec_iface_t *iface)"
  },
  {
    "label": "vpx_codec_err_to_string()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "vpx_codec_err_to_string(vpx_codec_err_t err)"
  },
  {
    "label": "vpx_codec_error()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "vpx_codec_error(vpx_codec_ctx_t *ctx)"
  },
  {
    "label": "vpx_codec_error_detail()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "vpx_codec_error_detail(vpx_codec_ctx_t *ctx)"
  },
  {
    "label": "vpx_codec_destroy()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "vpx_codec_destroy(vpx_codec_ctx_t *ctx)"
  },
  {
    "label": "vpx_codec_get_caps()",
    "kind": "Method",
    "detail": "Function (vpx_codec_caps_t)",
    "insertText": "vpx_codec_get_caps(vpx_codec_iface_t *iface)"
  },
  {
    "label": "vpx_codec_control_()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "vpx_codec_control_(vpx_codec_ctx_t *ctx, int ctrl_id, ...)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VPX_DISABLE_CTRL_TYPECHECKS) && VPX_DISABLE_CTRL_TYPECHECKS #define vpx_codec_control(ctx, id, data) vpx_codec_control_(ctx, id, data) #define VPX_CTRL_USE_TYPE(id, typ) #define VPX_CTRL_USE_TYPE_DEPRECATED(id, typ) #define VPX_CTRL_VOID(id, typ) #else #define vpx_codec_control(ctx, id, data) \\ vpx_codec_control_##id(ctx, id, data) #define VPX_CTRL_USE_TYPE(id, typ) \\ static vpx_codec_err_t vpx_codec_control_##id(vpx_codec_ctx_t *, int, typ)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (\\ \\ vpx_codec_err_t vpx_codec_control_ # #)",
    "insertText": "id(vpx_codec_ctx_t *ctx, \\ int ctrl_id, typ data)"
  },
  {
    "label": "vpx_codec_control_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vpx_codec_control_(ctx, ctrl_id, data)"
  },
  {
    "label": "VPX_CTRL_USE_TYPE_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VPX_CTRL_USE_TYPE_DEPRECATED(id, typ) \\ VPX_DECLSPEC_DEPRECATED static vpx_codec_err_t vpx_codec_control_##id( \\ vpx_codec_ctx_t *, int, typ)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (\\ \\ VPX_DECLSPEC_DEPRECATED vpx_codec_err_t vpx_codec_control_ # #)",
    "insertText": "id(\\ vpx_codec_ctx_t *ctx, int ctrl_id, typ data)"
  },
  {
    "label": "VPX_CTRL_VOID()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VPX_CTRL_VOID(id) \\ static vpx_codec_err_t vpx_codec_control_##id(vpx_codec_ctx_t *, int)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (\\ \\ vpx_codec_err_t vpx_codec_control_ # #)",
    "insertText": "id(vpx_codec_ctx_t *ctx, \\ int ctrl_id)"
  },
  {
    "label": "vpx_codec_control_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vpx_codec_control_(ctx, ctrl_id)"
  }
]