[
  {
    "label": "TDynamicMeshAttributeChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicMeshAttributeChange"
  },
  {
    "label": "FChangeElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeElement"
  },
  {
    "label": "FChangeTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeTriangle"
  },
  {
    "label": "FDynamicMeshAttributeChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeChangeSet"
  },
  {
    "label": "FDynamicMeshChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshChange"
  },
  {
    "label": "FChangeVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeVertex"
  },
  {
    "label": "FDynamicMeshAttributeSetChangeTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSetChangeTracker"
  },
  {
    "label": "FElementState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementState"
  },
  {
    "label": "FDynamicMeshChangeTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshChangeTracker"
  },
  {
    "label": "SaveInitialElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" CoreTypes . h \" # include \" DynamicMesh / DynamicAttribute . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicMeshAttributeSet . h \" # include \" DynamicMesh / DynamicMeshOverlay . h \" # include \" DynamicMesh / DynamicMeshTriangleAttribute . h \" # include \" DynamicMesh / InfoTypes . h \" # include \" GeometryTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" IndexTypes . h \" # include \" Misc / Optional . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" namespace UE { namespace Geometry { template<RealType,int ElementSize> class TDynamicMeshAttributeChange { public : void)",
    "insertText": "SaveInitialElement(const TDynamicMeshOverlay<RealType,ElementSize>* Overlay, int ElementID)"
  },
  {
    "label": "SaveInitialTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInitialTriangle(const TDynamicMeshOverlay<RealType,ElementSize>* Overlay, int TriangleID)"
  },
  {
    "label": "StoreFinalElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreFinalElement(const TDynamicMeshOverlay<RealType, ElementSize>* Overlay, int ElementID)"
  },
  {
    "label": "StoreFinalTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreFinalTriangle(const TDynamicMeshOverlay<RealType, ElementSize>* Overlay, int TriangleID)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(TDynamicMeshOverlay<RealType, ElementSize>* Overlay, bool bRevert)"
  },
  {
    "label": "ApplyReplaceChange()",
    "kind": "Method",
    "detail": "Function (protected : struct FChangeElement { int ElementID ; int DataIndex ; int ParentVertexID ; } ; struct FChangeTriangle { int TriangleID ; FIndex3i Elements ; } ; TArray<FChangeElement> OldElements ; TArray<RealType> OldElementData ; TArray<FChangeTriangle> OldTriangles ; TArray<FChangeElement> NewElements ; TArray<RealType> NewElementData ; TArray<FChangeTriangle> NewTriangles ; void)",
    "insertText": "ApplyReplaceChange(TDynamicMeshOverlay<RealType,ElementSize>* Overlay, const TArray<FChangeTriangle>& RemoveTris, const TArray<FChangeElement>& InsertElements, const TArray<RealType>& InsertElementData, const TArray<FChangeTriangle>& InsertTris)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} ; typedef TDynamicMeshAttributeChange<float,2> FDynamicMeshUVChange ; typedef TDynamicMeshAttributeChange<float,3> FDynamicMeshNormalChange ; typedef TDynamicMeshAttributeChange<float,4> FDynamicMeshColorChange ; typedef FDynamicMeshTriangleAttributeChange<int32,1> FDynamicMeshTriGroupChange ; typedef TDynamicMeshAttributeChange<float,1> FDynamicMeshWeightChange ; class FDynamicMeshAttributeChangeSet { public :)",
    "insertText": "UE_NONCOPYABLE(FDynamicMeshAttributeChangeSet)"
  },
  {
    "label": "FDynamicMeshAttributeChangeSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicMeshAttributeChangeSet()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (TArray<FDynamicMeshUVChange> UVChanges ; TArray<FDynamicMeshNormalChange> NormalChanges ; TOptional<FDynamicMeshColorChange> ColorChange ; TOptional<FDynamicMeshTriGroupChange> MaterialIDAttribChange ; TArray<FDynamicMeshTriGroupChange> PolygroupChanges ; TArray<TUniquePtr<FDynamicMeshAttributeChangeBase>> WeightChanges ; TArray<TUniquePtr<FDynamicMeshAttributeChangeBase>> RegisteredAttributeChanges ; bool)",
    "insertText": "Apply(FDynamicMeshAttributeSet* Attributes, bool bRevert)"
  },
  {
    "label": "FDynamicMeshChange()",
    "kind": "Method",
    "detail": "Function (} ; class FDynamicMeshChange { public : ~)",
    "insertText": "FDynamicMeshChange()"
  },
  {
    "label": "SaveInitialVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInitialVertex(const FDynamicMesh3* Mesh, int VertexID)"
  },
  {
    "label": "SaveInitialTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInitialTriangle(const FDynamicMesh3* Mesh, int TriangleID)"
  },
  {
    "label": "StoreFinalVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreFinalVertex(const FDynamicMesh3* Mesh, int VertexID)"
  },
  {
    "label": "StoreFinalTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreFinalTriangle(const FDynamicMesh3* Mesh, int TriangleID)"
  },
  {
    "label": "AttachAttributeChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachAttributeChanges(TUniquePtr<FDynamicMeshAttributeChangeSet> AttribChanges)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> AttributeChanges =)",
    "insertText": "MoveTemp(AttribChanges)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Apply(FDynamicMesh3* Mesh, bool bRevert)"
  },
  {
    "label": "VerifySaveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifySaveState()"
  },
  {
    "label": "HasSavedVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSavedVertex(int VertexID)"
  },
  {
    "label": "GetSavedTriangleList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSavedTriangleList(TArray<int>& TrianglesOut, bool bInitial)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckValidity(EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check)"
  },
  {
    "label": "ApplyReplaceChange()",
    "kind": "Method",
    "detail": "Function (protected : struct FChangeVertex { int VertexID ; FVertexInfo Info ; } ; struct FChangeTriangle { int TriangleID ; FIndex3i Vertices ; FIndex3i Edges ; int GroupID ; } ; TArray<FChangeVertex> OldVertices ; TArray<FChangeTriangle> OldTriangles ; TArray<FChangeVertex> NewVertices ; TArray<FChangeTriangle> NewTriangles ; TUniquePtr<FDynamicMeshAttributeChangeSet> AttributeChanges ; void)",
    "insertText": "ApplyReplaceChange(FDynamicMesh3* Mesh, const TArray<FChangeTriangle>& RemoveTris, const TArray<FChangeVertex>& InsertVerts, const TArray<FChangeTriangle>& InsertTris)"
  },
  {
    "label": "FDynamicMeshAttributeSetChangeTracker()",
    "kind": "Method",
    "detail": "Function (} ; class FDynamicMeshAttributeSetChangeTracker { public :)",
    "insertText": "FDynamicMeshAttributeSetChangeTracker(const FDynamicMeshAttributeSet* Attribs)"
  },
  {
    "label": "BeginChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginChange()"
  },
  {
    "label": "EndChange()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FDynamicMeshAttributeChangeSet>)",
    "insertText": "EndChange()"
  },
  {
    "label": "SaveInitialTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInitialTriangle(int TriangleID)"
  },
  {
    "label": "StoreAllFinalTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreAllFinalTriangles(const TArray<int>& TriangleIDs)"
  },
  {
    "label": "SaveInitialVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInitialVertex(int VertexID)"
  },
  {
    "label": "StoreAllFinalVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreAllFinalVertices(const TArray<int>& VertexIDs)"
  },
  {
    "label": "SaveElement()",
    "kind": "Method",
    "detail": "Function (protected : const FDynamicMeshAttributeSet* Attribs = nullptr ; FDynamicMeshAttributeChangeSet* Change = nullptr ; struct FElementState { int MaxElementID ; TBitArray<> StartElements ; TBitArray<> ChangedElements ; } ; TArray<FElementState> UVStates ; TArray<FElementState> NormalStates ; FElementState ColorState ; template<AttribOverlayType,AttribChangeType> void)",
    "insertText": "SaveElement(int ElementID, FElementState& State, const AttribOverlayType* Overlay, AttribChangeType& ChangeIn)"
  },
  {
    "label": "SaveInitialElement()",
    "kind": "Method",
    "detail": "Function (ChangeIn .)",
    "insertText": "SaveInitialElement(Overlay, ElementID)"
  },
  {
    "label": "FDynamicMeshChangeTracker()",
    "kind": "Method",
    "detail": "Function (State . ChangedElements [ ElementID ] = true ; } } } ; class FDynamicMeshChangeTracker { public :)",
    "insertText": "FDynamicMeshChangeTracker(const FDynamicMesh3* Mesh)"
  },
  {
    "label": "FDynamicMeshChangeTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicMeshChangeTracker()"
  },
  {
    "label": "SaveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTriangle(int32 TriangleID, bool bSaveVertices)"
  },
  {
    "label": "SaveEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveEdge(int32 EdgeID, bool bVertices)"
  },
  {
    "label": "SaveTriangles()",
    "kind": "Method",
    "detail": "Function (template<EnumerableType> void)",
    "insertText": "SaveTriangles(EnumerableType TriangleIDs, bool bSaveVertices)"
  },
  {
    "label": "SaveTrianglesAndNeighbourTris()",
    "kind": "Method",
    "detail": "Function (template<EnumerableType> void)",
    "insertText": "SaveTrianglesAndNeighbourTris(EnumerableType TriangleIDs, bool bSaveVertices)"
  },
  {
    "label": "SaveVertexOneRingTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveVertexOneRingTriangles(int32 VertexID, bool bSaveVertices)"
  },
  {
    "label": "SaveVertexOneRingTriangles()",
    "kind": "Method",
    "detail": "Function (template<EnumerableType> void)",
    "insertText": "SaveVertexOneRingTriangles(EnumerableType VertexIDs, bool bSaveVertices)"
  },
  {
    "label": "SaveVertex()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SaveVertex(int32 VertexID)"
  },
  {
    "label": "SaveVertices()",
    "kind": "Method",
    "detail": "Function (template<EnumerableType> void)",
    "insertText": "SaveVertices(EnumerableType VertexIDs)"
  },
  {
    "label": "GetEdge()",
    "kind": "Method",
    "detail": "Function (const FDynamicMesh3::FEdge Edge = Mesh ->)",
    "insertText": "GetEdge(EdgeID)"
  },
  {
    "label": "SaveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTriangle(Edge.Tri[0], bVertices)"
  },
  {
    "label": "SaveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTriangle(Edge.Tri[1], bVertices)"
  },
  {
    "label": "SaveVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveVertex(VertexID)"
  },
  {
    "label": "SaveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTriangle(TriangleID, bSaveVertices)"
  },
  {
    "label": "GetTriNeighbourTris()",
    "kind": "Method",
    "detail": "Function (FIndex3i TriNbrs = Mesh ->)",
    "insertText": "GetTriNeighbourTris(TriangleID)"
  },
  {
    "label": "SaveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveTriangle(TriNbrs[j], bSaveVertices)"
  },
  {
    "label": "EnumerateVertexTriangles()",
    "kind": "Method",
    "detail": "Function (Mesh ->)",
    "insertText": "EnumerateVertexTriangles(VertexID, [this, bSaveVertices](int32 TriangleID) { SaveTriangle(TriangleID, bSaveVertices); })"
  },
  {
    "label": "SaveVertexOneRingTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveVertexOneRingTriangles(VertexID, bSaveVertices)"
  }
]