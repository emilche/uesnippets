[
  {
    "label": "UDateRelativeDateTimeFormatterStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateRelativeDateTimeFormatterStyle"
  },
  {
    "label": "URelativeDateTimeUnit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URelativeDateTimeUnit"
  },
  {
    "label": "URelativeDateTimeFormatterField",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URelativeDateTimeFormatterField"
  },
  {
    "label": "URelativeDateTimeFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "URelativeDateTimeFormatter"
  },
  {
    "label": "UFormattedRelativeDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UFormattedRelativeDateTime"
  },
  {
    "label": "ureldatefmt_open()",
    "kind": "Method",
    "detail": "Function (# ifndef URELDATEFMT_H # define URELDATEFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING&& ! UCONFIG_NO_BREAK_ITERATION # include \" unicode / unum . h \" # include \" unicode / udisplaycontext . h \" # include \" unicode / localpointer . h \" # include \" unicode / uformattedvalue . h \" typedef enum UDateRelativeDateTimeFormatterStyle { UDAT_STYLE_LONG,UDAT_STYLE_SHORT,UDAT_STYLE_NARROW,# ifndef UDAT_STYLE_COUNT # endif } UDateRelativeDateTimeFormatterStyle ; typedef enum URelativeDateTimeUnit { UDAT_REL_UNIT_YEAR,UDAT_REL_UNIT_QUARTER,UDAT_REL_UNIT_MONTH,UDAT_REL_UNIT_WEEK,UDAT_REL_UNIT_DAY,UDAT_REL_UNIT_HOUR,UDAT_REL_UNIT_MINUTE,UDAT_REL_UNIT_SECOND,UDAT_REL_UNIT_SUNDAY,UDAT_REL_UNIT_MONDAY,UDAT_REL_UNIT_TUESDAY,UDAT_REL_UNIT_WEDNESDAY,UDAT_REL_UNIT_THURSDAY,UDAT_REL_UNIT_FRIDAY,UDAT_REL_UNIT_SATURDAY,# ifndef UDAT_REL_UNIT_COUNT # endif } URelativeDateTimeUnit ; # ifndef typedef enum URelativeDateTimeFormatterField { UDAT_REL_LITERAL_FIELD,UDAT_REL_NUMERIC_FIELD,} URelativeDateTimeFormatterField ; # endif struct URelativeDateTimeFormatter ; typedef struct URelativeDateTimeFormatter URelativeDateTimeFormatter ; U_STABLE URelativeDateTimeFormatter* U_EXPORT2)",
    "insertText": "ureldatefmt_open(const char* locale, UNumberFormat* nfToAdopt, UDateRelativeDateTimeFormatterStyle width, UDisplayContext capitalizationContext, UErrorCode* status)"
  },
  {
    "label": "ureldatefmt_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ureldatefmt_close(URelativeDateTimeFormatter *reldatefmt)"
  },
  {
    "label": "ureldatefmt_openResult()",
    "kind": "Method",
    "detail": "Function (# ifndef struct UFormattedRelativeDateTime ; typedef struct UFormattedRelativeDateTime UFormattedRelativeDateTime ; U_DRAFT UFormattedRelativeDateTime* U_EXPORT2)",
    "insertText": "ureldatefmt_openResult(UErrorCode* ec)"
  },
  {
    "label": "ureldatefmt_resultAsValue()",
    "kind": "Method",
    "detail": "Function (U_DRAFT const UFormattedValue* U_EXPORT2)",
    "insertText": "ureldatefmt_resultAsValue(const UFormattedRelativeDateTime* ufrdt, UErrorCode* ec)"
  },
  {
    "label": "ureldatefmt_closeResult()",
    "kind": "Method",
    "detail": "Function (U_DRAFT void U_EXPORT2)",
    "insertText": "ureldatefmt_closeResult(UFormattedRelativeDateTime* ufrdt)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# endif # if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalURelativeDateTimeFormatterPointer, URelativeDateTimeFormatter, ureldatefmt_close)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUFormattedRelativeDateTimePointer, UFormattedRelativeDateTime, ureldatefmt_closeResult)"
  },
  {
    "label": "ureldatefmt_formatNumeric()",
    "kind": "Method",
    "detail": "Function (# endif U_NAMESPACE_END # endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "ureldatefmt_formatNumeric(const URelativeDateTimeFormatter* reldatefmt, double offset, URelativeDateTimeUnit unit, UChar* result, int32_t resultCapacity, UErrorCode* status)"
  },
  {
    "label": "ureldatefmt_formatNumericToResult()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DRAFT void U_EXPORT2)",
    "insertText": "ureldatefmt_formatNumericToResult(const URelativeDateTimeFormatter* reldatefmt, double offset, URelativeDateTimeUnit unit, UFormattedRelativeDateTime* result, UErrorCode* status)"
  },
  {
    "label": "ureldatefmt_format()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "ureldatefmt_format(const URelativeDateTimeFormatter* reldatefmt, double offset, URelativeDateTimeUnit unit, UChar* result, int32_t resultCapacity, UErrorCode* status)"
  },
  {
    "label": "ureldatefmt_formatToResult()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DRAFT void U_EXPORT2)",
    "insertText": "ureldatefmt_formatToResult(const URelativeDateTimeFormatter* reldatefmt, double offset, URelativeDateTimeUnit unit, UFormattedRelativeDateTime* result, UErrorCode* status)"
  },
  {
    "label": "ureldatefmt_combineDateAndTime()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE int32_t U_EXPORT2)",
    "insertText": "ureldatefmt_combineDateAndTime(const URelativeDateTimeFormatter* reldatefmt, const UChar * relativeDateString, int32_t relativeDateStringLen, const UChar * timeString, int32_t timeStringLen, UChar* result, int32_t resultCapacity, UErrorCode* status)"
  }
]