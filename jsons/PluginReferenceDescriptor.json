[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FPluginReferenceDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginReferenceDescriptor"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const TSharedRef<FJsonObject>& Object, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText* OutFailReason = nullptr, TSharedPtr<FJsonObject> ObjectPtr = nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText& OutFailReason, TSharedPtr<FJsonObject> ObjectPtr = nullptr)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FPluginReferenceDescriptor>& OutModules, FText* OutFailReason = nullptr)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FPluginReferenceDescriptor>& OutModules, FText& OutFailReason)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteArray(TJsonWriter<>& Writer, const TCHAR* ArrayName, const TArray<FPluginReferenceDescriptor>& Plugins)"
  },
  {
    "label": "UpdateArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateArray(FJsonObject& JsonObject, const TCHAR* ArrayName, const TArray<FPluginReferenceDescriptor>& Plugins)"
  }
]