[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FPluginReferenceDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPluginReferenceDescriptor"
  },
  {
    "label": "FPluginReferenceDescriptor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" CustomBuildSteps . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMisc . h \" # include \" LocalizationDescriptor . h \" # include \" Misc / Optional . h \" # include \" ModuleDescriptor . h \" # include \" Serialization / JsonWriter . h \" # include \" Templates / SharedPointer . h \" class FJsonObject ; class FJsonValue ; class FText ; struct FPluginReferenceDescriptor { FString Name ; bool bEnabled ; bool bOptional ; FString Description ; FString MarketplaceURL ; TArray<FString> PlatformAllowList ; TArray<FString> PlatformDenyList ; TArray<EBuildConfiguration> TargetConfigurationAllowList ; TArray<EBuildConfiguration> TargetConfigurationDenyList ; TArray<EBuildTargetType> TargetAllowList ; TArray<EBuildTargetType> TargetDenyList ; TArray<FString> SupportedTargetPlatforms ; bool bHasExplicitPlatforms ; TOptional<int32> RequestedVersion ; # if WITH_EDITOR TSharedPtr<FJsonObject> CachedJson ; TMap<FString,TSharedPtr<FJsonValue>> AdditionalFieldsToWrite ; # endif)",
    "insertText": "FPluginReferenceDescriptor(const FString& InName = TEXT(\"\"), bool bInEnabled = false)"
  },
  {
    "label": "IsEnabledForPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForPlatform(const FString& Platform)"
  },
  {
    "label": "IsEnabledForTargetConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForTargetConfiguration(EBuildConfiguration Configuration)"
  },
  {
    "label": "IsEnabledForTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForTarget(EBuildTargetType TargetType)"
  },
  {
    "label": "IsSupportedTargetPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedTargetPlatform(const FString& Platform)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const TSharedRef<FJsonObject>& Object, FText* OutFailReason = nullptr)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FPluginReferenceDescriptor>& OutModules, FText* OutFailReason = nullptr)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FPluginReferenceDescriptor>& OutModules, FText& OutFailReason)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(TJsonWriter<>& Writer)"
  },
  {
    "label": "UpdateJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJson(FJsonObject& JsonObject)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteArray(TJsonWriter<>& Writer, const TCHAR* ArrayName, const TArray<FPluginReferenceDescriptor>& Plugins)"
  },
  {
    "label": "UpdateArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateArray(FJsonObject& JsonObject, const TCHAR* ArrayName, const TArray<FPluginReferenceDescriptor>& Plugins)"
  },
  {
    "label": "GetAdditionalStringField()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetAdditionalStringField(const FString& Key, FString& OutValue)"
  }
]