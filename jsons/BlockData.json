[
  {
    "label": "TBlockData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBlockData"
  },
  {
    "label": "FBlockToCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockToCopy"
  },
  {
    "label": "GetDataCount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Templates / Tuple . h \" # include \" Core / BlockRange . h \" # include \" Core / BlockStructure . h \" namespace BuildPatchServices { template<ElementType> struct TBlockData { private : struct FBlockToCopy { public : uint64 SortOffset ; FBlockRange CopyBlockRange ; const ElementType* DataPtr ; } ; public : int32)",
    "insertText": "GetDataCount()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTo(TArray<ElementType>& OutData, const FBlockStructure& Structure)"
  },
  {
    "label": "SerializeIntersection()",
    "kind": "Method",
    "detail": "Function (const FBlockStructure LocalSpaceStructure =)",
    "insertText": "SerializeIntersection(DataStructure, Structure)"
  },
  {
    "label": "GetHead()",
    "kind": "Method",
    "detail": "Function (const FBlockEntry* LocalSpaceBlock = LocalSpaceStructure .)",
    "insertText": "GetHead()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Append(Data.GetData() + LocalSpaceBlock->GetOffset(), LocalSpaceBlock->GetSize())"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (LocalSpaceBlock = LocalSpaceBlock ->)",
    "insertText": "GetNext()"
  },
  {
    "label": "AddData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddData(const FBlockStructure& NewStructure, const TArray<ElementType>& NewData)"
  },
  {
    "label": "AddData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddData(NewStructure, NewData.GetData(), NewData.Num())"
  },
  {
    "label": "AddData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddData(const FBlockStructure& NewStructure, const ElementType* NewData, const int32 NewDataCount)"
  },
  {
    "label": "GetHead()",
    "kind": "Method",
    "detail": "Function (const uint64 NewStructureFirst = NewStructure .)",
    "insertText": "GetHead()->GetOffset()"
  },
  {
    "label": "GetTail()",
    "kind": "Method",
    "detail": "Function (const uint64 ThisStructureLast = DataStructure .)",
    "insertText": "GetTail() == nullptr ? 0 : DataStructure.GetTail()->GetOffset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bAppendOnly = NewStructureFirst> = ThisStructureLast ;)",
    "insertText": "if(bAppendOnly)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Append(NewData, NewDataCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} else { TArray<ElementType> CombinedData ; CombinedData .)",
    "insertText": "Reserve(NewDataCount + Data.Num())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint64 FirstByte = 0 ;)",
    "insertText": "while(Block != nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BlocksToCopy .)",
    "insertText": "Add(FBlockToCopy{Block->GetOffset(), FBlockRange::FromFirstAndSize(FirstByte, Block->GetSize()), Data.GetData()})"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (FirstByte + = Block ->)",
    "insertText": "GetSize()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BlocksToCopy .)",
    "insertText": "Add(FBlockToCopy{Block->GetOffset(), FBlockRange::FromFirstAndSize(FirstByte, Block->GetSize()), NewData})"
  },
  {
    "label": "SortBy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SortBy(BlocksToCopy, [] (const FBlockToCopy& BlockToCopy) { return BlockToCopy.SortOffset; })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CombinedData .)",
    "insertText": "Append(BlockToCopy.DataPtr + BlockToCopy.CopyBlockRange.GetFirst(), BlockToCopy.CopyBlockRange.GetSize())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} Data =)",
    "insertText": "MoveTemp(CombinedData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} DataStructure .)",
    "insertText": "Add(NewStructure)"
  },
  {
    "label": "RemoveData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveData(const FBlockStructure& Structure)"
  },
  {
    "label": "CountSize()",
    "kind": "Method",
    "detail": "Function ({ const uint64 StructureSize =)",
    "insertText": "CountSize(Structure)"
  },
  {
    "label": "CountSize()",
    "kind": "Method",
    "detail": "Function (const uint64 DataStructureSize =)",
    "insertText": "CountSize(DataStructure)"
  },
  {
    "label": "CountSize()",
    "kind": "Method",
    "detail": "Function (const uint64 LocalSpaceStructureSize =)",
    "insertText": "CountSize(LocalSpaceStructure)"
  },
  {
    "label": "CountSize()",
    "kind": "Method",
    "detail": "Function (const uint64 IntersectSize =)",
    "insertText": "CountSize(DataStructure.Intersect(Structure))"
  },
  {
    "label": "GetTail()",
    "kind": "Method",
    "detail": "Function (} const FBlockEntry* LocalSpaceBlock = LocalSpaceStructure .)",
    "insertText": "GetTail()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "RemoveAt(LocalSpaceBlock->GetOffset(), LocalSpaceBlock->GetSize(), EAllowShrinking::No)"
  },
  {
    "label": "GetPrevious()",
    "kind": "Method",
    "detail": "Function (LocalSpaceBlock = LocalSpaceBlock ->)",
    "insertText": "GetPrevious()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} DataStructure .)",
    "insertText": "Remove(Structure)"
  }
]