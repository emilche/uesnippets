[
  {
    "label": "StdMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StdMapTraits"
  },
  {
    "label": "StdUnorderedMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StdUnorderedMapTraits"
  },
  {
    "label": "DenseHashMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseHashMap"
  },
  {
    "label": "SparseHashMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseHashMap"
  },
  {
    "label": "GoogleDenseHashMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GoogleDenseHashMapTraits"
  },
  {
    "label": "GoogleSparseHashMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GoogleSparseHashMapTraits"
  },
  {
    "label": "MapTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapTraits"
  },
  {
    "label": "RandomSetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomSetter"
  },
  {
    "label": "ScalarWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarWrapper"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_RANDOMSETTER_H # define EIGEN_RANDOMSETTER_H # if)",
    "insertText": "defined(EIGEN_GOOGLEHASH_SUPPORT)"
  },
  {
    "label": "setInvalidKey()",
    "kind": "Method",
    "detail": "Function (} # endif namespace Eigen { template<Scalar> struct StdMapTraits { typedef int KeyType ; typedef std::map<KeyType,Scalar> Type ; enum { IsSorted = 1 } ; void)",
    "insertText": "setInvalidKey(Type&, const KeyType&)"
  },
  {
    "label": "setInvalidKey()",
    "kind": "Method",
    "detail": "Function (using namespace::google ; template<KeyType,Scalar> struct DenseHashMap { typedef dense_hash_map<KeyType,Scalar> type ; } ; template<KeyType,Scalar> struct SparseHashMap { typedef sparse_hash_map<KeyType,Scalar> type ; } ; } template<Scalar> struct GoogleDenseHashMapTraits { typedef int KeyType ; typedef google::DenseHashMap<KeyType,Scalar>::type Type ; enum { IsSorted = 0 } ; void)",
    "insertText": "setInvalidKey(Type& map, const KeyType& k)"
  },
  {
    "label": "set_empty_key()",
    "kind": "Method",
    "detail": "Function (map .)",
    "insertText": "set_empty_key(k)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<SparseMatrixType,template<T> class MapTraits = # if)",
    "insertText": "defined(EIGEN_GOOGLEHASH_SUPPORT) GoogleDenseHashMapTraits #elif defined(_HASH_MAP)"
  },
  {
    "label": "ScalarWrapper()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrixType::Scalar Scalar ; typedef SparseMatrixType::StorageIndex StorageIndex ; struct ScalarWrapper {)",
    "insertText": "ScalarWrapper() : value(0)"
  },
  {
    "label": "OuterPacketMask()",
    "kind": "Method",
    "detail": "Function (} Scalar value ; } ; typedef MapTraits<ScalarWrapper>::KeyType KeyType ; typedef MapTraits<ScalarWrapper>::Type HashMapType ; const int)",
    "insertText": "OuterPacketMask(1 << OuterPacketBits)"
  },
  {
    "label": "TargetRowMajor()",
    "kind": "Method",
    "detail": "Function (enum { SwapStorage = 1 - MapTraits<ScalarWrapper>::IsSorted,)",
    "insertText": "TargetRowMajor(SparseMatrixType::Flags & RowMajorBit)"
  },
  {
    "label": "RandomSetter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RandomSetter(SparseMatrixType& target) : mp_target(&target)"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (const Index outerSize = SwapStorage ? target .)",
    "insertText": "innerSize() : target.outerSize()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (const Index innerSize = SwapStorage ? target .)",
    "insertText": "outerSize() : target.innerSize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_outerPackets = outerSize>> OuterPacketBits ;)",
    "insertText": "if(outerSize&OuterPacketMask)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (m_hashmaps = new HashMapType [ m_outerPackets ] ; Index aux = innerSize - 1 ; m_keyBitsOffset = 0 ;)",
    "insertText": "while(aux)"
  },
  {
    "label": "ik()",
    "kind": "Method",
    "detail": "Function (+ + m_keyBitsOffset ; aux = aux>> 1 ; } KeyType)",
    "insertText": "ik(1<<(OuterPacketBits+m_keyBitsOffset))"
  },
  {
    "label": "RandomSetter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RandomSetter()"
  },
  {
    "label": "keyBitsMask()",
    "kind": "Method",
    "detail": "Function (KeyType)",
    "insertText": "keyBitsMask(1<<m_keyBitsOffset)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "setZero()"
  },
  {
    "label": "makeCompressed()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "makeCompressed()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "reserve(nonZeros())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index prevOuter = - 1 ;)",
    "insertText": "for(Index k=0; k<m_outerPackets; ++k)"
  },
  {
    "label": "outerOffset()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "outerOffset(1<<OuterPacketBits)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (HashMapType::iterator end = m_hashmaps [ k ] .)",
    "insertText": "end()"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "outer(it->first >> m_keyBitsOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index inner = it -> first& keyBitsMask ;)",
    "insertText": "if(prevOuter!=outer)"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (second.value)",
    "insertText": "insertBackByOuterInner(outer, inner)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } mp_target ->)",
    "insertText": "finalize()"
  },
  {
    "label": "positions()",
    "kind": "Method",
    "detail": "Function (} else { VectorXi)",
    "insertText": "positions(mp_target->outerSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index outer = it -> first& keyBitsMask ; + + positions [ outer ] ; } } StorageIndex count = 0 ;)",
    "insertText": "for(Index j=0; j<mp_target->outerSize(); ++j)"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (StorageIndex tmp = positions [ j ] ; mp_target ->)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "outerIndexPtr()[mp_target->outerSize()"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "resizeNonZeros(count)"
  },
  {
    "label": "inner()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "inner(it->first >> m_keyBitsOffset)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "i(positions[outer]++)"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "valuePtr()[i+1] = mp_target->valuePtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (mp_target ->)",
    "insertText": "innerIndexPtr()[i+1] = mp_target->innerIndexPtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (- - i ; } mp_target ->)",
    "insertText": "innerIndexPtr()[i+1] = internal::convert_index<StorageIndex>(inner)"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (second.value)",
    "insertText": "valuePtr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } delete [ ] m_hashmaps ; } Scalar&)",
    "insertText": "operator() (Index row, Index col)"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (const Index outer = SetterRowMajor ? row : col ; const Index inner = SetterRowMajor ? col : row ; const Index outerMajor = outer>> OuterPacketBits ; const Index outerMinor = outer& OuterPacketMask ; const KeyType key = internal::convert_index<)",
    "insertText": "KeyType((outerMinor<<m_keyBitsOffset) | inner)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index nz = 0 ;)",
    "insertText": "for(Index k=0; k<m_outerPackets; ++k) nz += static_cast<Index>(m_hashmaps[k].size())"
  }
]