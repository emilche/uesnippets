[
  {
    "label": "FHttpThreadBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpThreadBase"
  },
  {
    "label": "FHttpRequestCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestCommon"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IHttpTaskTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpTaskTimerHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHttpStatsPlatformMemoryPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpStatsPlatformMemoryPool"
  },
  {
    "label": "FHttpStatsPlatform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpStatsPlatform"
  },
  {
    "label": "FHttpStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpStats"
  },
  {
    "label": "FHttpManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpManager"
  },
  {
    "label": "FHttpFlushTimeLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpFlushTimeLimit"
  },
  {
    "label": "FHttpStatsHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpStatsHistory"
  },
  {
    "label": "ENUM_RANGE_BY_COUNT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_RANGE_BY_COUNT(EHttpFlushReason, EHttpFlushReason::Count) const TCHAR* LexToString(const EHttpFlushReason& FlushReason)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FHttpManagerRequestAddedDelegate, const FHttpRequestRef&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FHttpManagerRequestCompletedDelegate, const FHttpRequestRef&)"
  },
  {
    "label": "FHttpStats()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHttpStats()"
  },
  {
    "label": "FHttpStats()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHttpStats(const FHttpStats& Other) : RequestsInQueue(Other.RequestsInQueue.load()) , RequestsInFlight(Other.RequestsInFlight.load()) , MaxTimeToConnect(Other.MaxTimeToConnect.load()) , MaxRequestsInQueue(Other.MaxRequestsInQueue.load()) , MaxRequestsInFlight(Other.MaxRequestsInFlight.load()) , MaxTimeToWaitInQueue(Other.MaxTimeToWaitInQueue.load()) , TotalDownloadedBytes(Other.TotalDownloadedBytes.load()) , BandwidthMbps(Other.BandwidthMbps.load()) , HttpDurationMsAvg(Other.HttpDurationMsAvg.load()) , PlatformStats(Other.PlatformStats)"
  },
  {
    "label": "FHttpManager()",
    "kind": "Method",
    "detail": "Function (} } ; class FHttpManager : public FTSTickerObjectBase { public :)",
    "insertText": "FHttpManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "SetRequestAddedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestAddedDelegate(const FHttpManagerRequestAddedDelegate& Delegate)"
  },
  {
    "label": "SetRequestCompletedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestCompletedDelegate(const FHttpManagerRequestCompletedDelegate& Delegate)"
  },
  {
    "label": "RemoveRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRequest(const FHttpRequestRef& Request)"
  },
  {
    "label": "IsValidRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRequest(const IHttpRequest* RequestPtr)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(EHttpFlushReason FlushReason)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "FlushTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushTick(float DeltaSeconds)"
  },
  {
    "label": "AddThreadedRequest()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "AddThreadedRequest(const TSharedRef<FHttpRequestCommon, ESPMode::ThreadSafe>& Request)"
  },
  {
    "label": "CancelThreadedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelThreadedRequest(const TSharedRef<FHttpRequestCommon, ESPMode::ThreadSafe>& Request)"
  },
  {
    "label": "DumpRequests()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "DumpRequests(FOutputDevice& Ar)"
  },
  {
    "label": "SupportsDynamicProxy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDynamicProxy()"
  },
  {
    "label": "SetCorrelationIdMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCorrelationIdMethod(TFunction<FString()> InCorrelationIdMethod)"
  },
  {
    "label": "CreateCorrelationId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateCorrelationId()"
  },
  {
    "label": "IsDomainAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDomainAllowed(const FString& Url)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "FString()> GetDefaultCorrelationIdMethod()"
  },
  {
    "label": "OnBeforeFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeFork()"
  },
  {
    "label": "OnAfterFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterFork()"
  },
  {
    "label": "OnEndFramePostFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndFramePostFork()"
  },
  {
    "label": "UpdateConfigs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfigs()"
  },
  {
    "label": "AddGameThreadTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameThreadTask(TFunction<void()>&& Task, float Delay = 0.0f)"
  },
  {
    "label": "AddHttpThreadTask()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IHttpTaskTimerHandle>)",
    "insertText": "AddHttpThreadTask(TFunction<void()>&& Task, float InDelay = 0.0f)"
  },
  {
    "label": "RemoveHttpThreadTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHttpThreadTask(TSharedPtr<IHttpTaskTimerHandle> HttpTaskTimerHandle)"
  },
  {
    "label": "SetURLRequestFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetURLRequestFilter(const UE::Core::FURLRequestFilter& InURLRequestFilter)"
  },
  {
    "label": "GetHttpStats()",
    "kind": "Method",
    "detail": "Function (URLRequestFilter = InURLRequestFilter ; } FHttpStats)",
    "insertText": "GetHttpStats()"
  },
  {
    "label": "ReloadFlushTimeLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadFlushTimeLimits()"
  },
  {
    "label": "HasAnyBoundDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyBoundDelegate()"
  },
  {
    "label": "UpdateUrlPatternsToLogResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUrlPatternsToLogResponse(IConsoleVariable* CVar)"
  },
  {
    "label": "UpdateUrlPatternsToMockFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUrlPatternsToMockFailure(IConsoleVariable* CVar)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FHttpRequestRef> Requests ; FHttpThreadBase* Thread ; TFunction<)",
    "insertText": "FString()"
  },
  {
    "label": "FHttpFlushTimeLimit()",
    "kind": "Method",
    "detail": "Function (FTSTicker GameThreadTicker ; FCriticalSection GameThreadTickerLock ; bool bFlushing ; FHttpManagerRequestAddedDelegate RequestAddedDelegate ; FHttpManagerRequestCompletedDelegate RequestCompletedDelegate ; UE::Core::FURLRequestFilter URLRequestFilter ; struct FHttpFlushTimeLimit { double SoftLimitSeconds ; double HardLimitSeconds ;)",
    "insertText": "FHttpFlushTimeLimit(double InSoftLimitSeconds, double InHardLimitSeconds) : SoftLimitSeconds(InSoftLimitSeconds), HardLimitSeconds(InHardLimitSeconds)"
  },
  {
    "label": "BroadcastHttpRequestCompleted()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<EHttpFlushReason,FHttpFlushTimeLimit> FlushTimeLimitsMap ; FHttpStats HttpStats ; struct FHttpStatsHistory { int32 HttpHistoryCount = 1 6 ; int32 HistoryIndex = 0 ; int64 DownloadedBytes [ HttpHistoryCount ] = { 0 } ; int64 DurationMs [ HttpHistoryCount ] = { 0 } ; int64 TotalDownloadedBytes = 0 ; int64 TotalUploadedBytes = 0 ; int64 TotalDuration = 0 ; } ; FHttpStatsHistory HttpStatsHistory ; bool bUseEventLoop = true ; TArray<FString> UrlPatternsToLogResponse ; FCriticalSection UrlPatternsToLogResponseCriticalSection ; TMap<FString,int32> UrlPatternsToMockFailure ; FCriticalSection UrlPatternsToMockFailureCriticalSection ; PACKAGE_SCOPE : FCriticalSection RequestLock ; FCriticalSection CompletedRequestLock ; void)",
    "insertText": "BroadcastHttpRequestCompleted(const FHttpRequestRef& Request)"
  },
  {
    "label": "GetThread()",
    "kind": "Method",
    "detail": "Function (FHttpThreadBase*)",
    "insertText": "GetThread()"
  },
  {
    "label": "RecordStatTimeToConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStatTimeToConnect(float Duration)"
  },
  {
    "label": "RecordStatRequestsInFlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStatRequestsInFlight(uint32 RequestsInFlight)"
  },
  {
    "label": "RecordStatRequestsInQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordStatRequestsInQueue(uint32 RequestsInQueue)"
  },
  {
    "label": "RecordMaxTimeToWaitInQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordMaxTimeToWaitInQueue(float Duration)"
  },
  {
    "label": "RecordPlatformStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordPlatformStats(const FHttpStatsPlatform& PlatformStats)"
  },
  {
    "label": "ShouldLogResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLogResponse(FStringView Url)"
  },
  {
    "label": "GetMockFailure()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetMockFailure(FStringView Url)"
  }
]