[
  {
    "label": "FieldTrial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrial"
  },
  {
    "label": "FieldTrialList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialList"
  },
  {
    "label": "PersistentMemoryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentMemoryAllocator"
  },
  {
    "label": "FeatureState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FeatureState"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "instance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "instance"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FeatureList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FeatureList"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "OverrideState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OverrideState"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FeatureList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FeatureList"
  },
  {
    "label": "Feature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Feature"
  },
  {
    "label": "Accessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Accessor"
  },
  {
    "label": "OverrideEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OverrideEntry"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "with"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kDCheckIsFatalFeature)"
  },
  {
    "label": "FeatureList()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FeatureList()"
  },
  {
    "label": "ScopedDisallowOverrides()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedDisallowOverrides(const char* reason)"
  },
  {
    "label": "GetOverrideStateByFeatureName()",
    "kind": "Method",
    "detail": "Function (FeatureList::OverrideState)",
    "insertText": "GetOverrideStateByFeatureName(\n        StringPiece feature_name)"
  },
  {
    "label": "GetParamsByFeatureName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParamsByFeatureName(StringPiece feature_name,\n                                std::map<std::string, std::string>* params)"
  },
  {
    "label": "Accessor()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Accessor(FeatureList* feature_list)"
  },
  {
    "label": "InitializeFromCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromCommandLine(const std::string& enable_features,\n                                 const std::string& disable_features)"
  },
  {
    "label": "InitializeFromSharedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromSharedMemory(PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "AssociateReportingFieldTrial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateReportingFieldTrial(const std::string& feature_name,\n                                    OverrideState for_overridden_state,\n                                    FieldTrial* field_trial)"
  },
  {
    "label": "RegisterFieldTrialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFieldTrialOverride(const std::string& feature_name,\n                                  OverrideState override_state,\n                                  FieldTrial* field_trial)"
  },
  {
    "label": "RegisterExtraFeatureOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtraFeatureOverrides(\n      const std::vector<FeatureOverrideInfo>& extra_overrides)"
  },
  {
    "label": "AddFeaturesToAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFeaturesToAllocator(PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "ConstructAccessor()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Accessor>)",
    "insertText": "ConstructAccessor()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const Feature& feature)"
  },
  {
    "label": "IsValidFeatureOrFieldTrialName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFeatureOrFieldTrialName(StringPiece name)"
  },
  {
    "label": "GetStateIfOverridden()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "GetStateIfOverridden(const Feature& feature)"
  },
  {
    "label": "SplitFeatureListString()",
    "kind": "Method",
    "detail": "Function (std::vector<base::StringPiece>)",
    "insertText": "SplitFeatureListString(\n      base::StringPiece input)"
  },
  {
    "label": "ParseEnableFeatureString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseEnableFeatureString(StringPiece enable_feature,\n                                       std::string* feature_name,\n                                       std::string* study_name,\n                                       std::string* group_name,\n                                       std::string* params)"
  },
  {
    "label": "InitializeInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeInstance(const std::string& enable_features,\n                                 const std::string& disable_features)"
  },
  {
    "label": "InitializeInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeInstance(\n      const std::string& enable_features,\n      const std::string& disable_features,\n      const std::vector<FeatureOverrideInfo>& extra_overrides)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstance(std::unique_ptr<FeatureList> instance)"
  },
  {
    "label": "ClearInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FeatureList>)",
    "insertText": "ClearInstanceForTesting()"
  },
  {
    "label": "RestoreInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreInstanceForTesting(std::unique_ptr<FeatureList> instance)"
  },
  {
    "label": "ForbidUseForCurrentModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForbidUseForCurrentModule()"
  },
  {
    "label": "SetCachingContextForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachingContextForTesting(uint16_t caching_context)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(FeatureListTest, CheckFeatureIdentity)"
  },
  {
    "label": "FinalizeInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeInitialization()"
  },
  {
    "label": "RegisterOverridesFromCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOverridesFromCommandLine(const std::string& feature_list,\n                                        OverrideState overridden_state)"
  },
  {
    "label": "RegisterOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOverride(StringPiece feature_name,\n                        OverrideState overridden_state,\n                        FieldTrial* field_trial)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (feature_identity_tracker_)",
    "insertText": "GUARDED_BY(feature_identity_tracker_lock_)"
  }
]