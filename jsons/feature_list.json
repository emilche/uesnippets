[
  {
    "label": "FieldTrial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrial"
  },
  {
    "label": "FieldTrialList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialList"
  },
  {
    "label": "PersistentMemoryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentMemoryAllocator"
  },
  {
    "label": "FeatureState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FeatureState"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FeatureList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FeatureList"
  },
  {
    "label": "OverrideState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OverrideState"
  },
  {
    "label": "Accessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Accessor"
  },
  {
    "label": "OverrideEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OverrideEntry"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FEATURE_LIST_H_ # define BASE_FEATURE_LIST_H_ # include<atomic> # include<functional> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / containers / flat_map . h \" # include \" base / dcheck_is_on . h \" # include \" base / feature_list_buildflags . h \" # include \" base / gtest_prod_util . h \" # include \" base / logging . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" # include \" base / synchronization / lock . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class FieldTrial ; class FieldTrialList ; class PersistentMemoryAllocator ; enum FeatureState { FEATURE_DISABLED_BY_DEFAULT,FEATURE_ENABLED_BY_DEFAULT,} ; # define)",
    "insertText": "BASE_DECLARE_FEATURE(kFeature) \\ extern CONSTINIT const base::Feature kFeature #define BASE_FEATURE(feature, name, default_state) \\ CONSTINIT const base::Feature feature(name, default_state)"
  },
  {
    "label": "Feature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Feature(const char* name, FeatureState default_state) : name(name), default_state(default_state)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_BANNED_BASE_FEATURE_PREFIX) if (StringPiece(name).find(BUILDFLAG(BANNED_BASE_FEATURE_PREFIX)) == 0)"
  },
  {
    "label": "LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LOG(FATAL) << \"Invalid feature name \" << name << \" starts with \" << BUILDFLAG(BANNED_BASE_FEATURE_PREFIX)"
  },
  {
    "label": "Feature()",
    "kind": "Method",
    "detail": "Function (} # endif })",
    "insertText": "Feature(const Feature&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Feature&)",
    "insertText": "operator(const Feature&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (const char* const name ; const FeatureState default_state ; private : class FeatureList ; std::atomic<uint32_t> cached_value = 0 ; } ; # if)",
    "insertText": "BUILDFLAG(DCHECK_IS_CONFIGURABLE) BASE_EXPORT BASE_DECLARE_FEATURE(kDCheckIsFatalFeature)"
  },
  {
    "label": "FeatureList()",
    "kind": "Method",
    "detail": "Function (# endif class BASE_EXPORT FeatureList { public :)",
    "insertText": "FeatureList()"
  },
  {
    "label": "FeatureList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FeatureList(const FeatureList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FeatureList&)",
    "insertText": "operator(const FeatureList&)"
  },
  {
    "label": "ScopedDisallowOverrides()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ScopedDisallowOverrides { public :)",
    "insertText": "ScopedDisallowOverrides(const char* reason)"
  },
  {
    "label": "ScopedDisallowOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDisallowOverrides(const ScopedDisallowOverrides&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDisallowOverrides&)",
    "insertText": "operator(const ScopedDisallowOverrides&)"
  },
  {
    "label": "ScopedDisallowOverrides()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedDisallowOverrides()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "Accessor()",
    "kind": "Method",
    "detail": "Function (# endif } ; enum OverrideState { OVERRIDE_USE_DEFAULT,OVERRIDE_DISABLE_FEATURE,OVERRIDE_ENABLE_FEATURE,} ; class BASE_EXPORT Accessor { public :)",
    "insertText": "Accessor(const Accessor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Accessor&)",
    "insertText": "operator(const Accessor&)"
  },
  {
    "label": "GetOverrideStateByFeatureName()",
    "kind": "Method",
    "detail": "Function (FeatureList::OverrideState)",
    "insertText": "GetOverrideStateByFeatureName(StringPiece feature_name)"
  },
  {
    "label": "GetParamsByFeatureName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParamsByFeatureName(StringPiece feature_name, std::map<std::string, std::string>* params)"
  },
  {
    "label": "Accessor()",
    "kind": "Method",
    "detail": "Function (private : class FeatureList ;)",
    "insertText": "Accessor(FeatureList* feature_list)"
  },
  {
    "label": "InitializeFromCommandLine()",
    "kind": "Method",
    "detail": "Function (raw_ptr<FeatureList> feature_list_ ; } ; using FeatureOverrideInfo = std::pair<const std::reference_wrapper<const Feature>,OverrideState> ; void)",
    "insertText": "InitializeFromCommandLine(const std::string& enable_features, const std::string& disable_features)"
  },
  {
    "label": "InitializeFromSharedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromSharedMemory(PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "IsFeatureOverridden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureOverridden(const std::string& feature_name)"
  },
  {
    "label": "IsFeatureOverriddenFromCommandLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureOverriddenFromCommandLine(const std::string& feature_name)"
  },
  {
    "label": "IsFeatureOverriddenFromCommandLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureOverriddenFromCommandLine(const std::string& feature_name, OverrideState state)"
  },
  {
    "label": "AssociateReportingFieldTrial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssociateReportingFieldTrial(const std::string& feature_name, OverrideState for_overridden_state, FieldTrial* field_trial)"
  },
  {
    "label": "RegisterFieldTrialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFieldTrialOverride(const std::string& feature_name, OverrideState override_state, FieldTrial* field_trial)"
  },
  {
    "label": "RegisterExtraFeatureOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtraFeatureOverrides(const std::vector<FeatureOverrideInfo>& extra_overrides)"
  },
  {
    "label": "AddFeaturesToAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFeaturesToAllocator(PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "GetFeatureOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFeatureOverrides(std::string* enable_overrides, std::string* disable_overrides, bool include_group_names = false)"
  },
  {
    "label": "GetCommandLineFeatureOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandLineFeatureOverrides(std::string* enable_overrides, std::string* disable_overrides)"
  },
  {
    "label": "GetAssociatedFieldTrialByFeatureName()",
    "kind": "Method",
    "detail": "Function (base::FieldTrial*)",
    "insertText": "GetAssociatedFieldTrialByFeatureName(StringPiece name)"
  },
  {
    "label": "HasAssociatedFieldTrialByFeatureName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAssociatedFieldTrialByFeatureName(StringPiece name)"
  },
  {
    "label": "GetEnabledFieldTrialByFeatureName()",
    "kind": "Method",
    "detail": "Function (FieldTrial*)",
    "insertText": "GetEnabledFieldTrialByFeatureName(StringPiece name)"
  },
  {
    "label": "ConstructAccessor()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Accessor>)",
    "insertText": "ConstructAccessor()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const Feature& feature)"
  },
  {
    "label": "IsValidFeatureOrFieldTrialName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFeatureOrFieldTrialName(StringPiece name)"
  },
  {
    "label": "GetStateIfOverridden()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "GetStateIfOverridden(const Feature& feature)"
  },
  {
    "label": "GetFieldTrial()",
    "kind": "Method",
    "detail": "Function (FieldTrial*)",
    "insertText": "GetFieldTrial(const Feature& feature)"
  },
  {
    "label": "SplitFeatureListString()",
    "kind": "Method",
    "detail": "Function (std::vector<base::StringPiece>)",
    "insertText": "SplitFeatureListString(base::StringPiece input)"
  },
  {
    "label": "ParseEnableFeatureString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseEnableFeatureString(StringPiece enable_feature, std::string* feature_name, std::string* study_name, std::string* group_name, std::string* params)"
  },
  {
    "label": "InitializeInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeInstance(const std::string& enable_features, const std::string& disable_features)"
  },
  {
    "label": "InitializeInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeInstance(const std::string& enable_features, const std::string& disable_features, const std::vector<FeatureOverrideInfo>& extra_overrides)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (FeatureList*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstance(std::unique_ptr<FeatureList> instance)"
  },
  {
    "label": "ClearInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FeatureList>)",
    "insertText": "ClearInstanceForTesting()"
  },
  {
    "label": "RestoreInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreInstanceForTesting(std::unique_ptr<FeatureList> instance)"
  },
  {
    "label": "ForbidUseForCurrentModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForbidUseForCurrentModule()"
  },
  {
    "label": "SetCachingContextForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachingContextForTesting(uint16_t caching_context)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(FeatureListTest, CheckFeatureIdentity)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(FeatureListTest, StoreAndRetrieveFeaturesFromSharedMemory)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(FeatureListTest, StoreAndRetrieveAssociatedFeaturesFromSharedMemory)"
  },
  {
    "label": "OverrideEntry()",
    "kind": "Method",
    "detail": "Function (class Accessor ; struct OverrideEntry { OverrideState overridden_state ; base::FieldTrial* field_trial ; bool overridden_by_field_trial ;)",
    "insertText": "OverrideEntry(OverrideState overridden_state, FieldTrial* field_trial)"
  },
  {
    "label": "GetOverrideEntryByFeatureName()",
    "kind": "Method",
    "detail": "Function (} ; const base::FeatureList::OverrideEntry*)",
    "insertText": "GetOverrideEntryByFeatureName(StringPiece name)"
  },
  {
    "label": "FinalizeInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeInitialization()"
  },
  {
    "label": "IsFeatureEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureEnabled(const Feature& feature)"
  },
  {
    "label": "IsFeatureEnabledIfOverridden()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "IsFeatureEnabledIfOverridden(const Feature& feature)"
  },
  {
    "label": "GetOverrideState()",
    "kind": "Method",
    "detail": "Function (OverrideState)",
    "insertText": "GetOverrideState(const Feature& feature)"
  },
  {
    "label": "GetAssociatedFieldTrial()",
    "kind": "Method",
    "detail": "Function (base::FieldTrial*)",
    "insertText": "GetAssociatedFieldTrial(const Feature& feature)"
  },
  {
    "label": "RegisterOverridesFromCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOverridesFromCommandLine(const std::string& feature_list, OverrideState overridden_state)"
  },
  {
    "label": "RegisterOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOverride(StringPiece feature_name, OverrideState overridden_state, FieldTrial* field_trial)"
  },
  {
    "label": "GetFeatureOverridesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFeatureOverridesImpl(std::string* enable_overrides, std::string* disable_overrides, bool command_line_only, bool include_group_name = false)"
  },
  {
    "label": "CheckFeatureIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckFeatureIdentity(const Feature& feature)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (base::flat_map<std::string,OverrideEntry> overrides_ ; Lock feature_identity_tracker_lock_ ; std::map<std::string,const Feature*> feature_identity_tracker_)",
    "insertText": "GUARDED_BY(feature_identity_tracker_lock_)"
  }
]