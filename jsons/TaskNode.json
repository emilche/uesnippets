[
  {
    "label": "FTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskNode"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" InsightsCore / Table / ViewModels / TableTreeNode . h \" # include \" Insights / TaskGraphProfiler / ViewModels / TaskTable . h \" # include \" Insights / TaskGraphProfiler / ViewModels / TaskEntry . h \" namespace UE::Insights::TaskGraphProfiler { class FTaskNode ; typedef TSharedPtr<class FTaskNode> FTaskNodePtr ; typedef TSharedRef<class FTaskNode> FTaskNodeRef ; typedef TSharedRef<const class FTaskNode> FTaskNodeRefConst ; typedef TWeakPtr<class FTaskNode> FTaskNodeWeak ; class FTaskNode : public FTableTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTaskNode, FTableTreeNode) public: explicit FTaskNode(const FName InName, TWeakPtr<FTaskTable> InParentTable, int32 InRowIndex) : FTableTreeNode(InName, InParentTable, InRowIndex)"
  },
  {
    "label": "FTaskNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTaskNode(const FName InGroupName, TWeakPtr<FTaskTable> InParentTable) : FTableTreeNode(InGroupName, InParentTable)"
  },
  {
    "label": "GetTaskTableChecked()",
    "kind": "Method",
    "detail": "Function (} FTaskTable&)",
    "insertText": "GetTaskTableChecked()"
  },
  {
    "label": "GetParentTable()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FTable>& TablePin =)",
    "insertText": "GetParentTable().Pin()"
  },
  {
    "label": "IsValidTask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidTask()"
  },
  {
    "label": "GetTask()",
    "kind": "Method",
    "detail": "Function (} const FTaskEntry*)",
    "insertText": "GetTask()"
  },
  {
    "label": "GetTaskChecked()",
    "kind": "Method",
    "detail": "Function (} const FTaskEntry&)",
    "insertText": "GetTaskChecked()"
  }
]