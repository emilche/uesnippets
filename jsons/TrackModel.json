[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / OutlinerItemModel . h \" # include \" MVVM / Extensions / IGeometryExtension . h \" # include \" MVVM / Extensions / IGroupableExtension . h \" # include \" MVVM / Extensions / IRenameableExtension . h \" # include \" MVVM / Extensions / IResizableExtension . h \" # include \" MVVM / Extensions / ISortableExtension . h \" # include \" MVVM / Extensions / ITrackAreaExtension . h \" # include \" MVVM / Extensions / ILockableExtension . h \" # include \" MVVM / Extensions / ITrackExtension . h \" # include \" MVVM / Extensions / IDeletableExtension . h \" # include \" MVVM / Extensions / IDraggableOutlinerExtension . h \" # include \" MVVM / Extensions / IDeletableExtension . h \" # include \" MVVM / Extensions / IConditionableExtension . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" EventHandlers / ISignedObjectEventHandler . h \" # include \" MovieSceneSignedObject . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class ISequencer ; class ISequencerSection ; class ISequencerTrackEditor ; class UMovieSceneTrack ; namespace UE { namespace Sequencer { class FSectionModel ; class FTrackModel : public FMuteSoloOutlinerItemModel,public IRenameableExtension,public IResizableExtension,public ITrackExtension,public ITrackAreaExtension,public ILockableExtension,public IGroupableExtension,public ISortableExtension,public IDraggableOutlinerExtension,public IDeletableExtension,public IConditionableExtension,public UE::MovieScene::TIntrusiveEventHandler<UE::MovieScene::ISignedObjectEventHandler>,public UE::MovieScene::IDeferredSignedObjectFlushSignal { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FTrackModel , FMuteSoloOutlinerItemModel , IRenameableExtension , IResizableExtension , ITrackExtension , ITrackAreaExtension , ILockableExtension , IGroupableExtension , ISortableExtension , IDraggableOutlinerExtension , IDeletableExtension , IConditionableExtension)"
  },
  {
    "label": "FTrackModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTrackModel(UMovieSceneTrack* Track)"
  },
  {
    "label": "FTrackModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTrackModel()"
  },
  {
    "label": "GetTopLevelChannels()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetTopLevelChannels()"
  },
  {
    "label": "GetTopLevelChannelType()",
    "kind": "Method",
    "detail": "Function (public : EViewModelListType)",
    "insertText": "GetTopLevelChannelType()"
  },
  {
    "label": "GetTopLevelChannelGroupType()",
    "kind": "Method",
    "detail": "Function (EViewModelListType)",
    "insertText": "GetTopLevelChannelGroupType()"
  },
  {
    "label": "GetTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTrack*)",
    "insertText": "GetTrack()"
  },
  {
    "label": "GetRowIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRowIndex()"
  },
  {
    "label": "GetSectionModels()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetSectionModels()"
  },
  {
    "label": "GetTrackEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerTrackEditor>)",
    "insertText": "GetTrackEditor()"
  },
  {
    "label": "OnModifiedDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModifiedDirectly(UMovieSceneSignedObject*)"
  },
  {
    "label": "OnModifiedIndirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModifiedIndirectly(UMovieSceneSignedObject*)"
  },
  {
    "label": "OnDeferredModifyFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeferredModifyFlush()"
  },
  {
    "label": "GetOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (FOutlinerSizing)",
    "insertText": "GetOutlinerSizing()"
  },
  {
    "label": "CreateOutlinerViewForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateOutlinerViewForColumn(const FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "GetLabelFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetLabelFont()"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetLabelColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLabelColor()"
  },
  {
    "label": "GetLabelToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelToolTipText()"
  },
  {
    "label": "IsDimmed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDimmed()"
  },
  {
    "label": "IsResizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResizable()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float NewSize)"
  },
  {
    "label": "GetLockState()",
    "kind": "Method",
    "detail": "Function (ELockableLockState)",
    "insertText": "GetLockState()"
  },
  {
    "label": "SetIsLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsLocked(bool bIsLocked)"
  },
  {
    "label": "GetCondition()",
    "kind": "Method",
    "detail": "Function (const UMovieSceneCondition*)",
    "insertText": "GetCondition()"
  },
  {
    "label": "GetConditionState()",
    "kind": "Method",
    "detail": "Function (EConditionableConditionState)",
    "insertText": "GetConditionState()"
  },
  {
    "label": "SetConditionEditorForceTrue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConditionEditorForceTrue(bool bEditorForceTrue)"
  },
  {
    "label": "GetTrackAreaParameters()",
    "kind": "Method",
    "detail": "Function (FTrackAreaParameters)",
    "insertText": "GetTrackAreaParameters()"
  },
  {
    "label": "GetTrackAreaModelList()",
    "kind": "Method",
    "detail": "Function (FViewModelVariantIterator)",
    "insertText": "GetTrackAreaModelList()"
  },
  {
    "label": "GetTopLevelChildTrackAreaModels()",
    "kind": "Method",
    "detail": "Function (FViewModelVariantIterator)",
    "insertText": "GetTopLevelChildTrackAreaModels()"
  },
  {
    "label": "CreateCurveModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCurveModels(TArray<TUniquePtr<FCurveModel>>& OutCurveModels)"
  },
  {
    "label": "GetIdentifierForGrouping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIdentifierForGrouping(TStringBuilder<128>& OutString)"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FText& NewName)"
  },
  {
    "label": "IsRenameValidImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenameValidImpl(const FText& NewName, FText& OutErrorMessage)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortChildren()"
  },
  {
    "label": "GetSortingKey()",
    "kind": "Method",
    "detail": "Function (FSortingKey)",
    "insertText": "GetSortingKey()"
  },
  {
    "label": "SetCustomOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomOrder(int32 InCustomOrder)"
  },
  {
    "label": "CanDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDrag()"
  },
  {
    "label": "HasCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCurves()"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetDefaultExpansionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultExpansionState()"
  },
  {
    "label": "BuildSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSidebarMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete(FText* OutErrorMessage)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "OnConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstruct()"
  },
  {
    "label": "ForceUpdate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ForceUpdate()"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindBoundObjects(TArray<UObject*>& OutBoundObjects)"
  }
]