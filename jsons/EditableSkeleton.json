[
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "SBlendProfilePicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlendProfilePicker"
  },
  {
    "label": "SSkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonTree"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "URig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URig"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "FEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditableSkeleton"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UDataAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataAsset"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "FSkeletonTreeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonTreeArgs"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FBlendProfilePickerArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendProfilePickerArgs"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Animation / PreviewAssetAttachComponent . h \" # include \" BoneContainer . h \" # include \" Animation / Skeleton . h \" # include \" Animation / DebugSkelMeshComponent . h \" # include \" IEditableSkeleton . h \" class IPersonaPreviewScene ; class SBlendProfilePicker ; class SSkeletonTree ; class UBlendProfile ; class URig ; class USkeletalMeshSocket ; class FEditableSkeleton : public IEditableSkeleton,public FGCObject,public TSharedFromThis<FEditableSkeleton> { public : const FString SocketCopyPasteHeader ; public :)",
    "insertText": "FEditableSkeleton(USkeleton* InSkeleton)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (const USkeleton&)",
    "insertText": "GetSkeleton()"
  },
  {
    "label": "IsSkeletonValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkeletonValid()"
  },
  {
    "label": "GetBlendProfiles()",
    "kind": "Method",
    "detail": "Function (const TArray<class UBlendProfile*>&)",
    "insertText": "GetBlendProfiles()"
  },
  {
    "label": "GetBlendProfile()",
    "kind": "Method",
    "detail": "Function (class UBlendProfile*)",
    "insertText": "GetBlendProfile(const FName& InBlendProfileName)"
  },
  {
    "label": "CreateNewBlendProfile()",
    "kind": "Method",
    "detail": "Function (class UBlendProfile*)",
    "insertText": "CreateNewBlendProfile(const FName& InBlendProfileName)"
  },
  {
    "label": "RemoveBlendProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBlendProfile(UBlendProfile* InBlendProfile)"
  },
  {
    "label": "RenameBlendProfile()",
    "kind": "Method",
    "detail": "Function (UBlendProfile*)",
    "insertText": "RenameBlendProfile(const FName& InBlendProfileName, const FName& InNewBlendProfileName)"
  },
  {
    "label": "SetBlendProfileScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendProfileScale(const FName& InBlendProfileName, const FName& InBoneName, float InNewScale, bool bInRecurse)"
  },
  {
    "label": "SetBlendProfileMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendProfileMode(FName InBlendProfileName, EBlendProfileMode ProfileMode)"
  },
  {
    "label": "DuplicateSocket()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshSocket*)",
    "insertText": "DuplicateSocket(const FSelectedSocketInfo& SocketInfoToDuplicate, const FName& NewParentBoneName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "ValidatePreviewAttachedObjects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ValidatePreviewAttachedObjects()"
  },
  {
    "label": "DeleteAnimNotifies()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteAnimNotifies(const TArray<FName>& InSelectedNotifyNames, bool bDeleteFromAnimations = true)"
  },
  {
    "label": "DeleteSyncMarkers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteSyncMarkers(const TArray<FName>& ISyncMarkerNames, bool bDeleteFromAnimations = true)"
  },
  {
    "label": "AddNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotify(FName NewName)"
  },
  {
    "label": "AddSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSyncMarker(FName NewName)"
  },
  {
    "label": "RenameNotify()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenameNotify(const FName NewName, const FName OldName, bool bRenameInAnimations = true)"
  },
  {
    "label": "RenameSyncMarker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenameSyncMarker(const FName NewName, const FName OldName, bool bRenameInAnimations = true)"
  },
  {
    "label": "BroadcastNotifyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastNotifyChanged()"
  },
  {
    "label": "GetCompatibleAnimSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompatibleAnimSequences(TArray<struct FAssetData>& OutAssets)"
  },
  {
    "label": "RenameSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSocket(const FName OldSocketName, const FName NewSocketName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "SetSocketParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSocketParent(const FName& SocketName, const FName& NewParentName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "DoesSocketAlreadyExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSocketAlreadyExist(const class USkeletalMeshSocket* InSocket, const FText& InSocketName, ESocketParentType SocketParentType, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "DoesVirtualBoneAlreadyExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesVirtualBoneAlreadyExist(const FString& InVBName)"
  },
  {
    "label": "RenameVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameVirtualBone(const FName OriginalName, const FName InVBName)"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(class USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "LoadAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAdditionalPreviewSkeletalMeshes()"
  },
  {
    "label": "SetAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalPreviewSkeletalMeshes(class UDataAsset* InPreviewCollectionAsset)"
  },
  {
    "label": "RenameRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameRetargetSource(const FName InOldName, const FName InNewName)"
  },
  {
    "label": "AddRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRetargetSource(const FName& InName, USkeletalMesh* InReferenceMesh)"
  },
  {
    "label": "DeleteRetargetSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRetargetSources(const TArray<FName>& InRetargetSourceNames)"
  },
  {
    "label": "RefreshRetargetSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshRetargetSources(const TArray<FName>& InRetargetSourceNames)"
  },
  {
    "label": "AddCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompatibleSkeleton(const USkeleton* InCompatibleSkeleton)"
  },
  {
    "label": "RemoveCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleSkeleton(const USkeleton* InCompatibleSkeleton)"
  },
  {
    "label": "RemoveUnusedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedBones()"
  },
  {
    "label": "UpdateSkeletonReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkeletonReferencePose(USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "RegisterSlotNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSlotNode(const FName& InSlotName)"
  },
  {
    "label": "AddSlotGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSlotGroupName(const FName& InSlotName)"
  },
  {
    "label": "SetSlotGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlotGroupName(const FName& InSlotName, const FName& InGroupName)"
  },
  {
    "label": "DeleteSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSlotName(const FName& InSlotName)"
  },
  {
    "label": "DeleteSlotGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSlotGroup(const FName& InGroupName)"
  },
  {
    "label": "RenameSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSlotName(const FName InOldSlotName, const FName InNewSlotName)"
  },
  {
    "label": "RegisterOnNotifiesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnNotifiesChanged(const FSimpleMulticastDelegate::FDelegate& InDelegate)"
  },
  {
    "label": "UnregisterOnNotifiesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnNotifiesChanged(void* Thing)"
  },
  {
    "label": "RegisterOnSlotsChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSlotsChanged(const FSimpleMulticastDelegate::FDelegate& InOnSlotsChanged)"
  },
  {
    "label": "UnregisterOnSlotsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSlotsChanged(FDelegateHandle InHandle)"
  },
  {
    "label": "SetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingMode(FName InBoneName, EBoneTranslationRetargetingMode::Type NewRetargetingMode)"
  },
  {
    "label": "GetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (EBoneTranslationRetargetingMode::Type)",
    "insertText": "GetBoneTranslationRetargetingMode(FName InBoneName)"
  },
  {
    "label": "RefreshBoneTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneTree()"
  },
  {
    "label": "AddSocket()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshSocket*)",
    "insertText": "AddSocket(const FName& InBoneName)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GenerateUniqueSocketName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GenerateUniqueSocketName(FName InName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "HandlePasteSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePasteSockets(const FName& InBoneName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "HandleAddSocket()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshSocket*)",
    "insertText": "HandleAddSocket(const FName& InBoneName)"
  },
  {
    "label": "HandleAddVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAddVirtualBone(const FName SourceBoneName, const FName TargetBoneName)"
  },
  {
    "label": "HandleAddVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAddVirtualBone(const FName SourceBoneName, const FName TargetBoneName, FName& NewVirtualBoneName)"
  },
  {
    "label": "HandleCustomizeSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCustomizeSocket(USkeletalMeshSocket* InSocketToCustomize, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "HandlePromoteSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePromoteSocket(USkeletalMeshSocket* InSocketToPromote)"
  },
  {
    "label": "HandleRemoveAllAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveAllAssets(TSharedPtr<class IPersonaPreviewScene> InPreviewScene)"
  },
  {
    "label": "HandleAttachAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAttachAssets(const TArray<UObject*>& InObjects, const FName& InAttachToName, bool bAttachToMesh, TSharedPtr<class IPersonaPreviewScene> InPreviewScene)"
  },
  {
    "label": "HandleDeleteAttachedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteAttachedAssets(const TArray<FPreviewAttachedObjectPair>& InAttachedObjects, TSharedPtr<class IPersonaPreviewScene> InPreviewScene)"
  },
  {
    "label": "HandleDeleteSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteSockets(const TArray<FSelectedSocketInfo>& InSocketInfo, TSharedPtr<class IPersonaPreviewScene> InPreviewScene)"
  },
  {
    "label": "HandleDeleteVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteVirtualBones(const TArray<FName>& InVirtualBoneInfo, TSharedPtr<class IPersonaPreviewScene> InPreviewScene)"
  },
  {
    "label": "SetBoneTranslationRetargetingModeRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingModeRecursive(const TArray<FName>& InBoneNames, EBoneTranslationRetargetingMode::Type NewRetargetingMode)"
  },
  {
    "label": "RecursiveSetBlendProfileScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveSetBlendProfileScales(const FName& InBlendProfileName, const TArray<FName>& InBoneNames, float InScaleToSet)"
  },
  {
    "label": "CreateSkeletonTree()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISkeletonTree>)",
    "insertText": "CreateSkeletonTree(const struct FSkeletonTreeArgs& InSkeletonTreeArgs)"
  },
  {
    "label": "CreateBlendProfilePicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "CreateBlendProfilePicker(const struct FBlendProfilePickerArgs& InArgs)"
  },
  {
    "label": "IsEdited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEdited()"
  },
  {
    "label": "RegisterOnSkeletonHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnSkeletonHierarchyChanged(const USkeleton::FOnSkeletonHierarchyChanged& InDelegate)"
  },
  {
    "label": "UnregisterOnSkeletonHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSkeletonHierarchyChanged(void* Thing)"
  },
  {
    "label": "RecreateBoneTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateBoneTree(USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "DeleteAttachedObjects()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DeleteAttachedObjects(FPreviewAssetAttachContainer& AttachedAssets, TSharedPtr<class IPersonaPreviewScene> InPreviewScene)"
  },
  {
    "label": "GetAssetsContainingCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsContainingCurves(const FName& InContainerName, const TArray<FName>& InNames, TArray<FAssetData>& OutAssets)"
  }
]