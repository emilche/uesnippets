[
  {
    "label": "BN_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_set_flags(BIGNUM *b, int n)"
  },
  {
    "label": "BN_get_flags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_get_flags(const BIGNUM *b, int n)"
  },
  {
    "label": "BN_with_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)"
  },
  {
    "label": "BN_GENCB_call()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GENCB_call(BN_GENCB *cb, int a, int b)"
  },
  {
    "label": "BN_GENCB_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_GENCB_free(BN_GENCB *cb)"
  },
  {
    "label": "BN_abs_is_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_abs_is_word(const BIGNUM *a, const BN_ULONG w)"
  },
  {
    "label": "BN_is_zero()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_zero(const BIGNUM *a)"
  },
  {
    "label": "BN_is_one()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_one(const BIGNUM *a)"
  },
  {
    "label": "BN_is_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_word(const BIGNUM *a, const BN_ULONG w)"
  },
  {
    "label": "BN_is_odd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_odd(const BIGNUM *a)"
  },
  {
    "label": "BN_zero_ex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_zero_ex(BIGNUM *a)"
  },
  {
    "label": "BN_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_CTX_free(BN_CTX *c)"
  },
  {
    "label": "BN_CTX_start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_CTX_start(BN_CTX *ctx)"
  },
  {
    "label": "BN_CTX_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_CTX_end(BN_CTX *ctx)"
  },
  {
    "label": "BN_rand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_rand(BIGNUM *rnd, int bits, int top, int bottom)"
  },
  {
    "label": "BN_priv_rand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom)"
  },
  {
    "label": "BN_rand_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_rand_range(BIGNUM *rnd, const BIGNUM *range)"
  },
  {
    "label": "BN_priv_rand_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_priv_rand_range(BIGNUM *rnd, const BIGNUM *range)"
  },
  {
    "label": "BN_pseudo_rand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom)"
  },
  {
    "label": "BN_pseudo_rand_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range)"
  },
  {
    "label": "BN_num_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_num_bits(const BIGNUM *a)"
  },
  {
    "label": "BN_num_bits_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_num_bits_word(BN_ULONG l)"
  },
  {
    "label": "BN_security_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_security_bits(int L, int N)"
  },
  {
    "label": "BN_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_clear_free(BIGNUM *a)"
  },
  {
    "label": "BN_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_swap(BIGNUM *a, BIGNUM *b)"
  },
  {
    "label": "BN_bn2bin()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_bn2bin(const BIGNUM *a, unsigned char *to)"
  },
  {
    "label": "BN_bn2binpad()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen)"
  },
  {
    "label": "BN_bn2lebinpad()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen)"
  },
  {
    "label": "BN_bn2mpi()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_bn2mpi(const BIGNUM *a, unsigned char *to)"
  },
  {
    "label": "BN_sub()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_usub()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_uadd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "BN_sqr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)"
  },
  {
    "label": "BN_set_negative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_set_negative(BIGNUM *b, int n)"
  },
  {
    "label": "BN_is_negative()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_negative(const BIGNUM *b)"
  },
  {
    "label": "BN_div()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,\n           BN_CTX *ctx)"
  },
  {
    "label": "BN_nnmod()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,\n               BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_add_quick()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                     const BIGNUM *m)"
  },
  {
    "label": "BN_mod_sub()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,\n               BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_sub_quick()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                     const BIGNUM *m)"
  },
  {
    "label": "BN_mod_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,\n               BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_sqr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_lshift1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_lshift1_quick()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)"
  },
  {
    "label": "BN_mod_lshift()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,\n                  BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_lshift_quick()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)"
  },
  {
    "label": "BN_mod_word()",
    "kind": "Method",
    "detail": "Function (BN_ULONG)",
    "insertText": "BN_mod_word(const BIGNUM *a, BN_ULONG w)"
  },
  {
    "label": "BN_div_word()",
    "kind": "Method",
    "detail": "Function (BN_ULONG)",
    "insertText": "BN_div_word(BIGNUM *a, BN_ULONG w)"
  },
  {
    "label": "BN_mul_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mul_word(BIGNUM *a, BN_ULONG w)"
  },
  {
    "label": "BN_add_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_add_word(BIGNUM *a, BN_ULONG w)"
  },
  {
    "label": "BN_sub_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_sub_word(BIGNUM *a, BN_ULONG w)"
  },
  {
    "label": "BN_set_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_set_word(BIGNUM *a, BN_ULONG w)"
  },
  {
    "label": "BN_get_word()",
    "kind": "Method",
    "detail": "Function (BN_ULONG)",
    "insertText": "BN_get_word(const BIGNUM *a)"
  },
  {
    "label": "BN_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_cmp(const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_free(BIGNUM *a)"
  },
  {
    "label": "BN_is_bit_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_bit_set(const BIGNUM *a, int n)"
  },
  {
    "label": "BN_lshift()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_lshift(BIGNUM *r, const BIGNUM *a, int n)"
  },
  {
    "label": "BN_lshift1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_lshift1(BIGNUM *r, const BIGNUM *a)"
  },
  {
    "label": "BN_exp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_exp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n               const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_exp_mont()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n                    const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)"
  },
  {
    "label": "BN_mod_exp_mont_consttime()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,\n                              const BIGNUM *m, BN_CTX *ctx,\n                              BN_MONT_CTX *in_mont)"
  },
  {
    "label": "BN_mod_exp_mont_word()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp_mont_word(BIGNUM *r, BN_ULONG a, const BIGNUM *p,\n                         const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)"
  },
  {
    "label": "BN_mod_exp2_mont()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,\n                     const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,\n                     BN_CTX *ctx, BN_MONT_CTX *m_ctx)"
  },
  {
    "label": "BN_mod_exp_simple()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n                      const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "BN_mask_bits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mask_bits(BIGNUM *a, int n)"
  },
  {
    "label": "BN_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_print_fp(FILE *fp, const BIGNUM *a)"
  },
  {
    "label": "BN_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_print(BIO *bio, const BIGNUM *a)"
  },
  {
    "label": "BN_reciprocal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)"
  },
  {
    "label": "BN_rshift()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_rshift(BIGNUM *r, const BIGNUM *a, int n)"
  },
  {
    "label": "BN_rshift1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_rshift1(BIGNUM *r, const BIGNUM *a)"
  },
  {
    "label": "BN_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_clear(BIGNUM *a)"
  },
  {
    "label": "BN_ucmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_ucmp(const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_set_bit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_set_bit(BIGNUM *a, int n)"
  },
  {
    "label": "BN_clear_bit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_clear_bit(BIGNUM *a, int n)"
  },
  {
    "label": "BN_hex2bn()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_hex2bn(BIGNUM **a, const char *str)"
  },
  {
    "label": "BN_dec2bn()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_dec2bn(BIGNUM **a, const char *str)"
  },
  {
    "label": "BN_asc2bn()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_asc2bn(BIGNUM **a, const char *str)"
  },
  {
    "label": "BN_gcd()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "BN_kronecker()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)"
  },
  {
    "label": "BN_consttime_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords)"
  },
  {
    "label": "BN_generate_prime_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,\n                         const BIGNUM *rem, BN_GENCB *cb)"
  },
  {
    "label": "BN_is_prime_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb)"
  },
  {
    "label": "BN_is_prime_fasttest_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,\n                            int do_trial_division, BN_GENCB *cb)"
  },
  {
    "label": "BN_X931_generate_Xpq()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)"
  },
  {
    "label": "BN_X931_derive_prime_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,\n                            const BIGNUM *Xp, const BIGNUM *Xp1,\n                            const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,\n                            BN_GENCB *cb)"
  },
  {
    "label": "BN_X931_generate_prime_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,\n                              BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e,\n                              BN_CTX *ctx, BN_GENCB *cb)"
  },
  {
    "label": "BN_mod_mul_montgomery()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                          BN_MONT_CTX *mont, BN_CTX *ctx)"
  },
  {
    "label": "BN_to_montgomery()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,\n                     BN_CTX *ctx)"
  },
  {
    "label": "BN_from_montgomery()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,\n                       BN_CTX *ctx)"
  },
  {
    "label": "BN_MONT_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_MONT_CTX_free(BN_MONT_CTX *mont)"
  },
  {
    "label": "BN_MONT_CTX_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)"
  },
  {
    "label": "BN_BLINDING_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_BLINDING_free(BN_BLINDING *b)"
  },
  {
    "label": "BN_BLINDING_update()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)"
  },
  {
    "label": "BN_BLINDING_convert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)"
  },
  {
    "label": "BN_BLINDING_invert()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)"
  },
  {
    "label": "BN_BLINDING_convert_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *)"
  },
  {
    "label": "BN_BLINDING_invert_ex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,\n                          BN_CTX *)"
  },
  {
    "label": "BN_BLINDING_is_current_thread()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_is_current_thread(BN_BLINDING *b)"
  },
  {
    "label": "BN_BLINDING_set_current_thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_BLINDING_set_current_thread(BN_BLINDING *b)"
  },
  {
    "label": "BN_BLINDING_lock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_lock(BN_BLINDING *b)"
  },
  {
    "label": "BN_BLINDING_unlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_BLINDING_unlock(BN_BLINDING *b)"
  },
  {
    "label": "BN_BLINDING_get_flags()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "BN_BLINDING_get_flags(const BN_BLINDING *)"
  },
  {
    "label": "BN_BLINDING_set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_BLINDING_set_flags(BN_BLINDING *, unsigned long)"
  },
  {
    "label": "BN_RECP_CTX_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BN_RECP_CTX_free(BN_RECP_CTX *recp)"
  },
  {
    "label": "BN_RECP_CTX_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_mul_reciprocal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,\n                          BN_RECP_CTX *recp, BN_CTX *ctx)"
  },
  {
    "label": "BN_mod_exp_recp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n                    const BIGNUM *m, BN_CTX *ctx)"
  },
  {
    "label": "BN_div_recp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,\n                BN_RECP_CTX *recp, BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)"
  },
  {
    "label": "BN_GF2m_mod()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)"
  },
  {
    "label": "BN_GF2m_mod_mul()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                    const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_sqr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_inv()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_div()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                    const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_exp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                    const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_sqrt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n                     BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_solve_quad()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n                           BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])"
  },
  {
    "label": "BN_GF2m_mod_mul_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                        const int p[], BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_sqr_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],\n                        BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_inv_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],\n                        BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_div_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                        const int p[], BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_exp_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,\n                        const int p[], BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_sqrt_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,\n                         const int p[], BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_mod_solve_quad_arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,\n                               const int p[], BN_CTX *ctx)"
  },
  {
    "label": "BN_GF2m_poly2arr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)"
  },
  {
    "label": "BN_GF2m_arr2poly()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_GF2m_arr2poly(const int p[], BIGNUM *a)"
  },
  {
    "label": "BN_nist_mod_192()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_nist_mod_224()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_nist_mod_256()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_nist_mod_384()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_nist_mod_521()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)"
  },
  {
    "label": "BN_generate_dsa_nonce()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,\n                          const BIGNUM *priv, const unsigned char *message,\n                          size_t message_len, BN_CTX *ctx)"
  },
  {
    "label": "BN_bntest_rand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom)"
  }
]