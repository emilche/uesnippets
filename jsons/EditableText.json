[
  {
    "label": "SEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableText"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "USlateBrushAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateBrushAsset"
  },
  {
    "label": "USlateWidgetStyleAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateWidgetStyleAsset"
  },
  {
    "label": "UEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableText"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / SWidget . h \" # include \" Components / Widget . h \" # include \" Components / TextWidgetTypes . h \" # include \" Widgets / Text / ISlateEditableTextWidget . h \" # include \" EditableText . generated . h \" class SEditableText ; class UMaterialInterface ; class USlateBrushAsset ; class USlateWidgetStyleAsset ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnEditableTextChangedEvent, const FText&, Text)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnEditableTextCommittedEvent, const FText&, Text, ETextCommit::Type, CommitMethod)"
  },
  {
    "label": "GetIsPassword()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsPassword()"
  },
  {
    "label": "GetMinimumDesiredWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinimumDesiredWidth()"
  },
  {
    "label": "SetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCaretMovedWhenGainFocus(bool bIsCaretMovedWhenGainFocus)"
  },
  {
    "label": "GetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsCaretMovedWhenGainFocus()"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(bool bSelectAllTextWhenFocused)"
  },
  {
    "label": "GetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelectAllTextWhenFocused()"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(bool bRevertTextOnEscape)"
  },
  {
    "label": "GetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRevertTextOnEscape()"
  },
  {
    "label": "GetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClearKeyboardFocusOnCommit()"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextOnCommit(bool bSelectAllTextOnCommit)"
  },
  {
    "label": "GetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelectAllTextOnCommit()"
  },
  {
    "label": "SetWidgetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetStyle(const FEditableTextStyle& InEditableTextStyle)"
  },
  {
    "label": "GetIsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsReadOnly()"
  },
  {
    "label": "GetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (ETextOverflowPolicy)",
    "insertText": "GetTextOverflowPolicy()"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(bool bInClearKeyboardFocusOnCommit)"
  },
  {
    "label": "SetKeyboardType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyboardType(EVirtualKeyboardType::Type Type)"
  },
  {
    "label": "SynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SynchronizeProperties()"
  },
  {
    "label": "ReleaseSlateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSlateResources(bool bReleaseChildren)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FText)",
    "insertText": "GetPaletteCategory()"
  },
  {
    "label": "RebuildWidget()",
    "kind": "Method",
    "detail": "Function (# endif protected : TSharedRef<SWidget>)",
    "insertText": "RebuildWidget()"
  },
  {
    "label": "HandleOnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextChanged(const FText& Text)"
  },
  {
    "label": "HandleOnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextCommitted(const FText& Text, ETextCommit::Type CommitMethod)"
  },
  {
    "label": "GetAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedPtr<SWidget>)",
    "insertText": "GetAccessibleWidget()"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (# endif protected : TSharedPtr<SEditableText> MyEditableText ;)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FText, Text)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FText, HintText)"
  },
  {
    "label": "SetTextInternal()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SetTextInternal(const FText& InText)"
  }
]