[
  {
    "label": "SEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableText"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "USlateBrushAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateBrushAsset"
  },
  {
    "label": "USlateWidgetStyleAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateWidgetStyleAsset"
  },
  {
    "label": "UEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableText"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnEditableTextChangedEvent, const FText&, Text)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(FText InText)"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText(FText InHintText)"
  },
  {
    "label": "SetMinimumDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinimumDesiredWidth(float InMinDesiredWidth)"
  },
  {
    "label": "SetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCaretMovedWhenGainFocus(bool bIsCaretMovedWhenGainFocus)"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(bool bSelectAllTextWhenFocused)"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(bool bRevertTextOnEscape)"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextOnCommit(bool bSelectAllTextOnCommit)"
  },
  {
    "label": "SetWidgetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetStyle(const FEditableTextStyle& InEditableTextStyle)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(ETextJustify::Type InJustification)"
  },
  {
    "label": "SetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextOverflowPolicy(ETextOverflowPolicy InOverflowPolicy)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(bool bInClearKeyboardFocusOnCommit)"
  },
  {
    "label": "SetKeyboardType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyboardType(EVirtualKeyboardType::Type Type)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFont(FSlateFontInfo InFontInfo)"
  },
  {
    "label": "SetFontMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFontMaterial(UMaterialInterface* InMaterial)"
  },
  {
    "label": "SetFontOutlineMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFontOutlineMaterial(UMaterialInterface* InMaterial)"
  },
  {
    "label": "HandleOnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextChanged(const FText& Text)"
  },
  {
    "label": "HandleOnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextCommitted(const FText& Text, ETextCommit::Type CommitMethod)"
  },
  {
    "label": "SetTextInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTextInternal(const FText& InText)"
  }
]