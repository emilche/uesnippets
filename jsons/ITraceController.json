[
  {
    "label": "FTraceStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTraceStatus"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChannelPreset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelPreset"
  },
  {
    "label": "FSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSettings"
  },
  {
    "label": "FChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannel"
  },
  {
    "label": "FStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStats"
  },
  {
    "label": "ITraceController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITraceController"
  },
  {
    "label": "IMessageBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageBus"
  },
  {
    "label": "FChannelPreset()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" ITraceControllerCommands . h \" # include \" Misc / DateTime . h \" # include \" Misc / Guid . h \" struct FTraceStatus { enum class EUpdateType : uint8 { Status = 1<<0,Settings = 1<<1,ChannelsDesc = 1<<2,ChannelsStatus = 1<<3,All = Status | Settings | ChannelsDesc | ChannelsStatus } ; enum class ETraceSystemStatus : uint8 { NotAvailable,Available,TracingToServer,TracingToFile,NumValues,} ; struct FChannelPreset {)",
    "insertText": "FChannelPreset(const FString& InName, const FString& InChannels, bool bInIsReadOnly) : Name(InName) , ChannelList(InChannels) , bIsReadOnly(bInIsReadOnly)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} FString Name ; FString ChannelList ; bool bIsReadOnly ; } ; struct FSettings { bool bUseWorkerThread ; bool bUseImportantCache ; uint32 TailSizeBytes ; TArray<FChannelPreset> ChannelPresets ; } ; struct FChannel { FString Name ; FString Description ; uint32 Id ; bool bEnabled ; bool bReadOnly ; } ; struct FStats { uint64 BytesSent ; uint64 BytesTraced ; uint64 MemoryUsed ; uint32 CacheAllocated ; uint32 CacheUsed ; uint32 CacheWaste ; } ; FGuid SessionId ; FGuid InstanceId ; bool bIsTracing = false ; bool bIsPaused = false ; bool bAreStatNamedEventsEnabled = false ; FString Endpoint ; FGuid SessionGuid ; FGuid TraceGuid ; FSettings Settings ; TMap<uint32,FChannel> Channels ; FStats Stats ; FDateTime StatusTimestamp ; ETraceSystemStatus TraceSystemStatus ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FTraceStatus::EUpdateType)"
  },
  {
    "label": "ITraceController()",
    "kind": "Method",
    "detail": "Function (class ITraceController { public : ~)",
    "insertText": "ITraceController()"
  },
  {
    "label": "SendDiscoveryRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendDiscoveryRequest(const FGuid& SessionId, const FGuid& InstanceId)"
  },
  {
    "label": "SendDiscoveryRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendDiscoveryRequest()"
  },
  {
    "label": "SendStatusUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStatusUpdateRequest()"
  },
  {
    "label": "SendChannelUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendChannelUpdateRequest()"
  },
  {
    "label": "SendSettingsUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSettingsUpdateRequest()"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(ITraceController, FStatusRecievedEvent, const FTraceStatus&, FTraceStatus::EUpdateType, ITraceControllerCommands&)"
  },
  {
    "label": "OnStatusReceived()",
    "kind": "Method",
    "detail": "Function (FStatusRecievedEvent&)",
    "insertText": "OnStatusReceived()"
  },
  {
    "label": "HasAvailableInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAvailableInstance(const FGuid& InstanceId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FTraceStatus&, ITraceControllerCommands&)"
  },
  {
    "label": "WithInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithInstance(FGuid InstanceId, FCallback Func)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITraceController>)",
    "insertText": "Create(TSharedPtr<class IMessageBus>& MessageBus)"
  }
]