[
  {
    "label": "plcrash_async_byteorder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_async_byteorder"
  },
  {
    "label": "plcrash_async_file",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_async_file"
  },
  {
    "label": "PLCF_ASSERT()",
    "kind": "Method",
    "detail": "Function (# ifndef PLCRASH_ASYNC_H # define PLCRASH_ASYNC_H # ifdef __cplusplus \" C \" { # endif # include<stdio . h> # include<unistd . h> # include<stdbool . h> # include<stddef . h> # include<assert . h> # include<TargetConditionals . h> # include<mach / mach . h> # if TARGET_OS_IPHONE&& ! TARGET_OS_MACCATALYST # ifdef __LP64__ # define PL_VM_ADDRESS_MAX UINT64_MAX # else # define PL_VM_ADDRESS_MAX UINT32_MAX # endif # ifdef __LP64__ # define PL_VM_SIZE_MAX UINT64_MAX # else # define PL_VM_SIZE_MAX UINT32_MAX # endif # define PL_VM_OFF_MAX PTRDIFF_MAX # define PL_VM_OFF_MIN PTRDIFF_MIN typedef vm_address_t pl_vm_address_t ; typedef vm_size_t pl_vm_size_t ; typedef ptrdiff_t pl_vm_off_t ; # else # include<mach / mach_vm . h> # define PL_HAVE_MACH_VM 1 # define PL_VM_ADDRESS_MAX UINT64_MAX # define PL_VM_SIZE_MAX UINT64_MAX # define PL_VM_OFF_MAX INT64_MAX # define PL_VM_OFF_MIN INT64_MIN typedef mach_vm_address_t pl_vm_address_t ; typedef mach_vm_size_t pl_vm_size_t ; typedef int64_t pl_vm_off_t ; # endif # define PL_VM_ADDRESS_INVALID PL_VM_ADDRESS_MAX # ifdef PLCF_RELEASE_BUILD # define)",
    "insertText": "PLCF_ASSERT(expr) #else #define PLCF_ASSERT(expr) assert(expr) #endif #ifdef PLCF_RELEASE_BUILD #define PLCF_DEBUG(msg, args...) #else #define PLCF_DEBUG(msg, args...)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (\\ char __tmp_output [ 1 2 8 ] ; \\)",
    "insertText": "snprintf(__tmp_output, sizeof(__tmp_output), \"[PLCrashReporter] \")"
  },
  {
    "label": "plcrash_async_writen()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "plcrash_async_writen(STDERR_FILENO, __tmp_output, strlen(__tmp_output))"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "snprintf(__tmp_output, sizeof(__tmp_output), \":%d: \", __LINE__)"
  },
  {
    "label": "plcrash_async_writen()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "plcrash_async_writen(STDERR_FILENO, __func__, strlen(__func__))"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "snprintf(__tmp_output, sizeof(__tmp_output), msg, ## args)"
  },
  {
    "label": "plcrash_async_writen()",
    "kind": "Method",
    "detail": "Function (\\ \\ __tmp_output [ 0 ] = ' \\ n ' ; \\)",
    "insertText": "plcrash_async_writen(STDERR_FILENO, __tmp_output, 1)"
  },
  {
    "label": "plcrash_async_strerror()",
    "kind": "Method",
    "detail": "Function (\\ } # endif typedef enum { PLCRASH_ESUCCESS = 0,PLCRASH_EUNKNOWN,PLCRASH_OUTPUT_ERR,PLCRASH_ENOMEM,PLCRASH_ENOTSUP,PLCRASH_EINVAL,PLCRASH_EINTERNAL,PLCRASH_EACCESS,PLCRASH_ENOTFOUND,PLCRASH_EINVALID_DATA,} plcrash_error_t ; const char*)",
    "insertText": "plcrash_async_strerror(plcrash_error_t error)"
  },
  {
    "label": "plcrash_async_address_apply_offset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_address_apply_offset(pl_vm_address_t base_address, pl_vm_off_t offset, pl_vm_address_t *result)"
  },
  {
    "label": "pl_mach_thread_self()",
    "kind": "Method",
    "detail": "Function (thread_t)",
    "insertText": "pl_mach_thread_self(void)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (typedef struct plcrash_async_byteorder {)",
    "insertText": "uint16_t(*swap16)(uint16_t)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uint32_t(*swap32)(uint32_t)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uint64_t(*swap64)(uint64_t)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus public : uint16_t)",
    "insertText": "swap(uint16_t v)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "swap(uint32_t v)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "swap(uint64_t v)"
  },
  {
    "label": "plcrash_async_byteorder_little_endian()",
    "kind": "Method",
    "detail": "Function (} # endif } plcrash_async_byteorder_t ; const plcrash_async_byteorder_t plcrash_async_byteorder_swapped ; const plcrash_async_byteorder_t plcrash_async_byteorder_direct ; const plcrash_async_byteorder_t*)",
    "insertText": "plcrash_async_byteorder_little_endian(void)"
  },
  {
    "label": "plcrash_async_byteorder_big_endian()",
    "kind": "Method",
    "detail": "Function (const plcrash_async_byteorder_t*)",
    "insertText": "plcrash_async_byteorder_big_endian(void)"
  },
  {
    "label": "plcrash_async_task_memcpy()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_task_memcpy(mach_port_t task, pl_vm_address_t address, pl_vm_off_t offset, void *dest, pl_vm_size_t len)"
  },
  {
    "label": "plcrash_async_task_read_uint8()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_task_read_uint8(task_t task, pl_vm_address_t address, pl_vm_off_t offset, uint8_t *result)"
  },
  {
    "label": "plcrash_async_task_read_uint16()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_task_read_uint16(task_t task, const plcrash_async_byteorder_t *byteorder, pl_vm_address_t address, pl_vm_off_t offset, uint16_t *result)"
  },
  {
    "label": "plcrash_async_task_read_uint32()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_task_read_uint32(task_t task, const plcrash_async_byteorder_t *byteorder, pl_vm_address_t address, pl_vm_off_t offset, uint32_t *result)"
  },
  {
    "label": "plcrash_async_task_read_uint64()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_task_read_uint64(task_t task, const plcrash_async_byteorder_t *byteorder, pl_vm_address_t address, pl_vm_off_t offset, uint64_t *result)"
  },
  {
    "label": "plcrash_async_strcmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "plcrash_async_strcmp(const char *s1, const char *s2)"
  },
  {
    "label": "plcrash_async_strncmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "plcrash_async_strncmp(const char *s1, const char *s2, size_t n)"
  },
  {
    "label": "plcrash_async_memcpy()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "plcrash_async_memcpy(void *dest, const void *source, size_t n)"
  },
  {
    "label": "plcrash_async_memset()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "plcrash_async_memset(void *dest, uint8_t value, size_t n)"
  },
  {
    "label": "plcrash_async_writen()",
    "kind": "Method",
    "detail": "Function (ssize_t)",
    "insertText": "plcrash_async_writen(int fd, const void *data, size_t len)"
  },
  {
    "label": "plcrash_async_file_init()",
    "kind": "Method",
    "detail": "Function (typedef struct plcrash_async_file { int fd ; off_t limit_bytes ; off_t total_bytes ; size_t buflen ; char buffer [ 2 5 6 ] ; } plcrash_async_file_t ; void)",
    "insertText": "plcrash_async_file_init(plcrash_async_file_t *file, int fd, off_t output_limit)"
  },
  {
    "label": "plcrash_async_file_write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_file_write(plcrash_async_file_t *file, const void *data, size_t len)"
  },
  {
    "label": "plcrash_async_file_flush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_file_flush(plcrash_async_file_t *file)"
  },
  {
    "label": "plcrash_async_file_close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_file_close(plcrash_async_file_t *file)"
  }
]