[
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FSequencerDisplayNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerDisplayNode"
  },
  {
    "label": "FTimeToPixel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeToPixel"
  },
  {
    "label": "FLayerBarModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayerBarModel"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "ILayerBarExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayerBarExtension"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "SSequencerLayerBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerLayerBar"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Range . h \" # include \" Misc / FrameNumber . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" # include \" MVVM / Extensions / ViewModelExtensionCollection . h \" class ISequencer ; class FSequencer ; class FScopedTransaction ; class FSequencerDisplayNode ; struct FTimeToPixel ; namespace UE { namespace Sequencer { class FLayerBarModel ; class FSequencerEditorViewModel ; class FViewModel ; class ILayerBarExtension ; class STrackAreaView ; class SSequencerLayerBar : public SCompoundWidget,public ITrackLaneWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSequencerLayerBar)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TWeakPtr<STrackAreaView> InWeakTrackArea, TWeakPtr<FSequencerEditorViewModel> InWeakEditor, TWeakPtr<FLayerBarModel> InWeakLayerBar)"
  },
  {
    "label": "GetLayerBarModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLayerBarModel>)",
    "insertText": "GetLayerBarModel()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencer>)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<const SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (FTrackLaneScreenAlignment)",
    "insertText": "GetAlignment(const FTimeToPixel& TimeToPixel, const FGeometry& InParentGeometry)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScale)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetHandleVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetHandleVisibility()"
  }
]