[
  {
    "label": "UCurrencyUsage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrencyUsage"
  },
  {
    "label": "UCurrNameStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrNameStyle"
  },
  {
    "label": "UCurrCurrencyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrCurrencyType"
  },
  {
    "label": "ucurr_forLocale()",
    "kind": "Method",
    "detail": "Function (# ifndef _UCURR_H_ # define _UCURR_H_ # include \" unicode / utypes . h \" # include \" unicode / uenum . h \" # if ! UCONFIG_NO_FORMATTING enum UCurrencyUsage { UCURR_USAGE_STANDARD = 0,UCURR_USAGE_CASH = 1,# ifndef UCURR_USAGE_COUNT = 2 # endif } ; typedef enum UCurrencyUsage UCurrencyUsage ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucurr_forLocale(const char* locale, UChar* buff, int32_t buffCapacity, UErrorCode* ec)"
  },
  {
    "label": "ucurr_register()",
    "kind": "Method",
    "detail": "Function (typedef enum UCurrNameStyle { UCURR_SYMBOL_NAME,UCURR_LONG_NAME,UCURR_NARROW_SYMBOL_NAME } UCurrNameStyle ; # if ! UCONFIG_NO_SERVICE typedef const void* UCurrRegistryKey ; U_STABLE UCurrRegistryKey U_EXPORT2)",
    "insertText": "ucurr_register(const UChar* isoCode, const char* locale, UErrorCode* status)"
  },
  {
    "label": "ucurr_unregister()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucurr_unregister(UCurrRegistryKey key, UErrorCode* status)"
  },
  {
    "label": "ucurr_getName()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE const UChar* U_EXPORT2)",
    "insertText": "ucurr_getName(const UChar* currency, const char* locale, UCurrNameStyle nameStyle, UBool* isChoiceFormat, int32_t* len, UErrorCode* ec)"
  },
  {
    "label": "ucurr_getPluralName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "ucurr_getPluralName(const UChar* currency, const char* locale, UBool* isChoiceFormat, const char* pluralCount, int32_t* len, UErrorCode* ec)"
  },
  {
    "label": "ucurr_getDefaultFractionDigits()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucurr_getDefaultFractionDigits(const UChar* currency, UErrorCode* ec)"
  },
  {
    "label": "ucurr_getDefaultFractionDigitsForUsage()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucurr_getDefaultFractionDigitsForUsage(const UChar* currency, const UCurrencyUsage usage, UErrorCode* ec)"
  },
  {
    "label": "ucurr_getRoundingIncrement()",
    "kind": "Method",
    "detail": "Function (U_STABLE double U_EXPORT2)",
    "insertText": "ucurr_getRoundingIncrement(const UChar* currency, UErrorCode* ec)"
  },
  {
    "label": "ucurr_getRoundingIncrementForUsage()",
    "kind": "Method",
    "detail": "Function (U_STABLE double U_EXPORT2)",
    "insertText": "ucurr_getRoundingIncrementForUsage(const UChar* currency, const UCurrencyUsage usage, UErrorCode* ec)"
  },
  {
    "label": "ucurr_openISOCurrencies()",
    "kind": "Method",
    "detail": "Function (typedef enum UCurrCurrencyType { UCURR_ALL = INT32_MAX,UCURR_COMMON = 1,UCURR_UNCOMMON = 2,UCURR_DEPRECATED = 4,UCURR_NON_DEPRECATED = 8 } UCurrCurrencyType ; U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucurr_openISOCurrencies(uint32_t currType, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucurr_isAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucurr_isAvailable(const UChar* isoCode, UDate from, UDate to, UErrorCode* errorCode)"
  },
  {
    "label": "ucurr_countCurrencies()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucurr_countCurrencies(const char* locale, UDate date, UErrorCode* ec)"
  },
  {
    "label": "ucurr_forLocaleAndDate()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucurr_forLocaleAndDate(const char* locale, UDate date, int32_t index, UChar* buff, int32_t buffCapacity, UErrorCode* ec)"
  },
  {
    "label": "ucurr_getKeywordValuesForLocale()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucurr_getKeywordValuesForLocale(const char* key, const char* locale, UBool commonlyUsed, UErrorCode* status)"
  },
  {
    "label": "ucurr_getNumericCode()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucurr_getNumericCode(const UChar* currency)"
  }
]