[
  {
    "label": "uses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uses"
  },
  {
    "label": "UCurrencyUsage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrencyUsage"
  },
  {
    "label": "UCurrencyUsage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrencyUsage"
  },
  {
    "label": "UCurrencyUsage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrencyUsage"
  },
  {
    "label": "UCurrNameStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrNameStyle"
  },
  {
    "label": "usage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "usage"
  },
  {
    "label": "usage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "usage"
  },
  {
    "label": "UCurrCurrencyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCurrCurrencyType"
  },
  {
    "label": "ucurr_forLocale()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_forLocale(const char* locale,\n                UChar* buff,\n                int32_t buffCapacity,\n                UErrorCode* ec)"
  },
  {
    "label": "ucurr_register()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_register(const UChar* isoCode, \n                   const char* locale,  \n                   UErrorCode* status)"
  },
  {
    "label": "ucurr_unregister()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_unregister(UCurrRegistryKey key, UErrorCode* status)"
  },
  {
    "label": "ucurr_getName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getName(const UChar* currency,\n              const char* locale,\n              UCurrNameStyle nameStyle,\n              UBool* isChoiceFormat,\n              int32_t* len,\n              UErrorCode* ec)"
  },
  {
    "label": "ucurr_getPluralName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getPluralName(const UChar* currency,\n                    const char* locale,\n                    UBool* isChoiceFormat,\n                    const char* pluralCount,\n                    int32_t* len,\n                    UErrorCode* ec)"
  },
  {
    "label": "ucurr_getDefaultFractionDigitsForUsage()",
    "kind": "Method",
    "detail": "Function (to)",
    "insertText": "ucurr_getDefaultFractionDigitsForUsage(currency,UCURR_USAGE_STANDARD,ec)"
  },
  {
    "label": "ucurr_getDefaultFractionDigits()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getDefaultFractionDigits(const UChar* currency,\n                               UErrorCode* ec)"
  },
  {
    "label": "ucurr_getDefaultFractionDigitsForUsage()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getDefaultFractionDigitsForUsage(const UChar* currency, \n                                       const UCurrencyUsage usage,\n                                       UErrorCode* ec)"
  },
  {
    "label": "ucurr_getRoundingIncrementForUsage()",
    "kind": "Method",
    "detail": "Function (to)",
    "insertText": "ucurr_getRoundingIncrementForUsage(currency,UCURR_USAGE_STANDARD,ec)"
  },
  {
    "label": "ucurr_getRoundingIncrement()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getRoundingIncrement(const UChar* currency,\n                           UErrorCode* ec)"
  },
  {
    "label": "ucurr_getRoundingIncrementForUsage()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getRoundingIncrementForUsage(const UChar* currency,\n                                   const UCurrencyUsage usage,\n                                   UErrorCode* ec)"
  },
  {
    "label": "ucurr_openISOCurrencies()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_openISOCurrencies(uint32_t currType, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucurr_isAvailable()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_isAvailable(const UChar* isoCode, \n             UDate from, \n             UDate to, \n             UErrorCode* errorCode)"
  },
  {
    "label": "ucurr_countCurrencies()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_countCurrencies(const char* locale, \n                 UDate date, \n                 UErrorCode* ec)"
  },
  {
    "label": "ucurr_forLocaleAndDate()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_forLocaleAndDate(const char* locale, \n                UDate date, \n                int32_t index,\n                UChar* buff, \n                int32_t buffCapacity, \n                UErrorCode* ec)"
  },
  {
    "label": "ucurr_getKeywordValuesForLocale()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getKeywordValuesForLocale(const char* key,\n                                const char* locale,\n                                UBool commonlyUsed,\n                                UErrorCode* status)"
  },
  {
    "label": "ucurr_getNumericCode()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucurr_getNumericCode(const UChar* currency)"
  }
]