[
  {
    "label": "FChaosScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosScene"
  },
  {
    "label": "FChaosUserDefinedEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosUserDefinedEntity"
  },
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "FClosestPhysicsObjectResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClosestPhysicsObjectResult"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "FMTDInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMTDInfo"
  },
  {
    "label": "FOverlapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapInfo"
  },
  {
    "label": "FReadPhysicsObjectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadPhysicsObjectInterface"
  },
  {
    "label": "FPhysicsObjectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsObjectInterface"
  },
  {
    "label": "FWritePhysicsObjectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWritePhysicsObjectInterface"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "FPhysicsObjectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsObjectInterface"
  },
  {
    "label": "FPhysicsObjectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsObjectInterface"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (FPhysicsObjectHandle)",
    "insertText": "GetRootObject(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "HasChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChildren(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetClusterHierarchyLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClusterHierarchyLevel(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTransform(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetX(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetCoM()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCoM(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetWorldCoM()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWorldCoM(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetR()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetR(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetV(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetVAtPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetVAtPoint(const FConstPhysicsObjectHandle Object, const FVector& Point)"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetW(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetSpatialIndex()",
    "kind": "Method",
    "detail": "Function (FSpatialAccelerationIdx)",
    "insertText": "GetSpatialIndex(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectRef)",
    "insertText": "GetGeometry(const FConstPhysicsObjectHandle Handle)"
  },
  {
    "label": "GetPhysicsObjectOverlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPhysicsObjectOverlap(const FConstPhysicsObjectHandle ObjectA, const FConstPhysicsObjectHandle ObjectB, bool bTraceComplex, Chaos::FOverlapInfo& OutOverlap)"
  },
  {
    "label": "GetPhysicsObjectOverlapWithTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPhysicsObjectOverlapWithTransform(const FConstPhysicsObjectHandle ObjectA, const FTransform& InTransformA, const FConstPhysicsObjectHandle ObjectB, const FTransform& InTransformB, bool bTraceComplex, Chaos::FOverlapInfo& OutOverlap)"
  },
  {
    "label": "AreAllValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllValid(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllKinematic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllKinematic(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllSleeping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllSleeping(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllRigidBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllRigidBody(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllDynamic(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllDynamicOrSleeping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllDynamicOrSleeping(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllDisabled(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AreAllShapesQueryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllShapesQueryEnabled(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "GetMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMass(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBounds(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "GetWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetWorldBounds(TArrayView<const FConstPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "GetClosestPhysicsBodyFromLocation()",
    "kind": "Method",
    "detail": "Function (FClosestPhysicsObjectResult)",
    "insertText": "GetClosestPhysicsBodyFromLocation(TArrayView<const FConstPhysicsObjectHandle> InObjects, const FVector& WorldLocation)"
  },
  {
    "label": "CreateAccelerationStructureHandle()",
    "kind": "Method",
    "detail": "Function (FAccelerationStructureHandle)",
    "insertText": "CreateAccelerationStructureHandle(const FConstPhysicsObjectHandle Handle)"
  },
  {
    "label": "SetUserDefinedEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserDefinedEntity(TArrayView<const FPhysicsObjectHandle> InObjects, FChaosUserDefinedEntity* UserDefinedEntity)"
  },
  {
    "label": "PutToSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutToSleep(TArrayView<const FPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp(TArrayView<const FPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "ForceKinematic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceKinematic(TArrayView<const FPhysicsObjectHandle> InObjects)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(TArrayView<const FPhysicsObjectHandle> InObjects, const FVector& Force, bool bInvalidate)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque(TArrayView<const FPhysicsObjectHandle> InObjects, const FVector& Torque, bool bInvalidate)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque(TArrayView<const FPhysicsObjectHandle> InObjects, const FVector& Torque, bool bInvalidate, bool bAccelChange = false)"
  },
  {
    "label": "SetLinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearImpulseVelocity(TArrayView<const FPhysicsObjectHandle> InObjects, const FVector& Impulse, bool bVelChange)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(TArrayView<const FPhysicsObjectHandle> InObjects, FVector Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff, bool bApplyStrain, bool bInvalidate, bool bVelChange = false)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(TArrayView<const FPhysicsObjectHandle> InObjects, FVector Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff, bool bApplyStrain, float Strain, bool bInvalidate, bool bVelChange = false, float MinValue = 0.f, float MaxValue = 1.f)"
  },
  {
    "label": "SetLinearEtherDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearEtherDrag(TArrayView<const FPhysicsObjectHandle> InObjects, float InLinearDrag)"
  },
  {
    "label": "SetAngularEtherDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularEtherDrag(TArrayView<const FPhysicsObjectHandle> InObjects, float InAngularDrag)"
  },
  {
    "label": "UpdateShapeCollisionFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapeCollisionFlags(TArrayView<const FPhysicsObjectHandle> InObjects, bool bSimCollision, bool bQueryCollision)"
  },
  {
    "label": "UpdateShapeFilterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShapeFilterData(TArrayView<const FPhysicsObjectHandle> InObjects, const FCollisionFilterData& QueryData, const FCollisionFilterData& SimData)"
  },
  {
    "label": "AddConnectivityEdgesBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnectivityEdgesBetween(TArrayView<const FPhysicsObjectHandle> FromObjects, TArrayView<const FPhysicsObjectHandle> ToObjects, const FClusterCreationParameters& Parameters)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const FPhysicsObjectHandle Object, const FName& InName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName(const FConstPhysicsObjectHandle Object)"
  },
  {
    "label": "SetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetId(const FPhysicsObjectHandle Object, int32 InId)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetId(const FConstPhysicsObjectHandle Object)"
  }
]