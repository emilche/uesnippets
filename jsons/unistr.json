[
  {
    "label": "UConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UConverter"
  },
  {
    "label": "BreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BreakIterator"
  },
  {
    "label": "Edits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edits"
  },
  {
    "label": "Locale",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Locale"
  },
  {
    "label": "StringCharacterIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringCharacterIterator"
  },
  {
    "label": "UnicodeStringAppendable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeStringAppendable"
  },
  {
    "label": "padding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "padding"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "Replaceable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Replaceable"
  },
  {
    "label": "API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "API"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "UnicodeStringAppendable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeStringAppendable"
  },
  {
    "label": "fields",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "fields"
  },
  {
    "label": "UnicodeString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeString"
  },
  {
    "label": "fields",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "fields"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "of"
  },
  {
    "label": "u_strlen()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "u_strlen(const UChar *s)"
  },
  {
    "label": "UStringCaseMapper()",
    "kind": "Method",
    "detail": "Function (U_CALLCONV)",
    "insertText": "UStringCaseMapper(int32_t caseLocale, uint32_t options,\n#if !UCONFIG_NO_BREAK_ITERATION\n                  icu::BreakIterator *iter,\n#endif\n                  char16_t *dest, int32_t destCapacity,\n                  const char16_t *src, int32_t srcLength,\n                  icu::Edits *edits,\n                  UErrorCode &errorCode)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "s(u\"a\\U00010000b\\U0010ffff\\u2029\")"
  },
  {
    "label": "setToBogus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setToBogus()"
  },
  {
    "label": "handleReplaceBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleReplaceBetween(int32_t start,\n                                    int32_t limit,\n                                    const UnicodeString& text)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(int32_t start, int32_t limit, int32_t dest)"
  },
  {
    "label": "padLeading()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "padLeading(int32_t targetLength,\n                    char16_t padChar = 0x0020)"
  },
  {
    "label": "padTrailing()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "padTrailing(int32_t targetLength,\n                     char16_t padChar = 0x0020)"
  },
  {
    "label": "truncate()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "truncate(int32_t targetLength)"
  },
  {
    "label": "releaseBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseBuffer(int32_t newLength=-1)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "UnicodeString()"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_CHAR_EXPLICIT)",
    "insertText": "UnicodeString(char16_t ch)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_CHAR_EXPLICIT)",
    "insertText": "UnicodeString(UChar32 ch)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_STRING_EXPLICIT)",
    "insertText": "UnicodeString(const char16_t *text)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "UnicodeString(const std::nullptr_t text)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "UnicodeString(const std::nullptr_t text, int32_t length)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "UnicodeString(std::nullptr_t buffer, int32_t buffLength, int32_t buffCapacity)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_STRING_EXPLICIT)",
    "insertText": "UnicodeString(const char *codepageData)"
  },
  {
    "label": "ustr()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "ustr(s, -1, US_INV)"
  },
  {
    "label": "fromUTF8()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "fromUTF8(StringPiece utf8)"
  },
  {
    "label": "fromUTF32()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "fromUTF32(const UChar32 *utf32, int32_t length)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "setZeroLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setZeroLength()"
  },
  {
    "label": "setShortLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShortLength(int32_t len)"
  },
  {
    "label": "setLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLength(int32_t len)"
  },
  {
    "label": "setToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setToEmpty()"
  },
  {
    "label": "setArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArray(char16_t *array, int32_t len, int32_t capacity)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "allocate(int32_t capacity)"
  },
  {
    "label": "releaseArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseArray(void)"
  },
  {
    "label": "unBogus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unBogus()"
  },
  {
    "label": "doCodepageCreate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCodepageCreate(const char *codepageData,\n                        int32_t dataLength,\n                        const char *codepage)"
  },
  {
    "label": "doCodepageCreate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCodepageCreate(const char *codepageData,\n                   int32_t dataLength,\n                   UConverter *converter,\n                   UErrorCode &status)"
  },
  {
    "label": "cloneArrayIfNeeded()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "cloneArrayIfNeeded(int32_t newCapacity = -1,\n                            int32_t growCapacity = -1,\n                            UBool doCopyArray = TRUE,\n                            int32_t **pBufferToDelete = 0,\n                            UBool forceClone = FALSE)"
  },
  {
    "label": "addRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRef(void)"
  },
  {
    "label": "removeRef()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "removeRef(void)"
  },
  {
    "label": "doHashCode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doHashCode()"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompare(start, _length, srcText, srcStart, srcLength)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompare(start, _length, srcChars, 0, _length)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompare(start, _length, srcChars, srcStart, srcLength)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompare(start, limit - start,\n           srcText, srcStart, srcLimit - srcStart)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompareCodePointOrder(start, _length, srcText, srcStart, srcLength)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompareCodePointOrder(start, _length, srcChars, 0, _length)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompareCodePointOrder(start, _length, srcChars, srcStart, srcLength)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCompareCodePointOrder(start, limit - start,\n           srcText, srcStart, srcLimit - srcStart)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCaseCompare(start, _length, srcText, srcStart, srcLength, options)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCaseCompare(start, _length, srcChars, 0, _length, options)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCaseCompare(start, _length, srcChars, srcStart, srcLength, options)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCaseCompare(start, limit - start, srcText, srcStart, srcLimit - srcStart, options)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "indexOf(srcChars, 0, srcLength, start, _length)"
  },
  {
    "label": "doIndexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doIndexOf(c, start, _length)"
  },
  {
    "label": "doIndexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doIndexOf(c, start, _length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "lastIndexOf(srcChars, 0, srcLength, start, _length)"
  },
  {
    "label": "doLastIndexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doLastIndexOf(c, start, _length)"
  },
  {
    "label": "doLastIndexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doLastIndexOf(c, start, _length)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, _length, srcText, srcStart, srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, _length, srcChars, 0, srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, _length, srcChars, srcStart, srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, _length, &srcChar, 0, 1)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, limit - start, srcText, srcStart, srcLimit - srcStart)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "extract(start, _length, dst, dst!=0 ? 0xffffffff : 0, codepage)"
  },
  {
    "label": "tempSubString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "tempSubString(start, limit - start)"
  },
  {
    "label": "doCharAt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCharAt(offset)"
  },
  {
    "label": "doCharAt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doCharAt(offset)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "copyFrom(srcText)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doAppend(srcText, srcStart, srcLength)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doAppend(srcChars, srcStart, srcLength)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doAppend(srcChars, 0, srcLength)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doAppend(&srcChar, 0, 1)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doAppend(&ch, 0, 1)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "append(ch)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, 0, srcText, srcStart, srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, 0, srcChars, srcStart, srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, 0, srcChars, 0, srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, 0, &srcChar, 0, 1)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "replace(start, 0, srcChar)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "remove()"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, _length, NULL, 0, 0)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(start, limit - start, NULL, 0, 0)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReplace(0, start, NULL, 0, 0)"
  },
  {
    "label": "unBogus()",
    "kind": "Method",
    "detail": "Function (bogus)",
    "insertText": "unBogus()"
  },
  {
    "label": "doReverse()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "doReverse(start, _length)"
  }
]