[
  {
    "label": "UConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UConverter"
  },
  {
    "label": "BreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BreakIterator"
  },
  {
    "label": "Edits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edits"
  },
  {
    "label": "Locale",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Locale"
  },
  {
    "label": "StringCharacterIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringCharacterIterator"
  },
  {
    "label": "UnicodeStringAppendable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeStringAppendable"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "EInvariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInvariant"
  },
  {
    "label": "u_strlen()",
    "kind": "Method",
    "detail": "Function (# ifndef UNISTR_H # define UNISTR_H # include<cstddef> # include \" unicode / utypes . h \" # include \" unicode / char16ptr . h \" # include \" unicode / rep . h \" # include \" unicode / std_string . h \" # include \" unicode / stringpiece . h \" # include \" unicode / bytestream . h \" struct UConverter ; # ifndef USTRING_H U_STABLE int32_t U_EXPORT2)",
    "insertText": "u_strlen(const UChar *s)"
  },
  {
    "label": "UStringCaseMapper()",
    "kind": "Method",
    "detail": "Function (# endif U_NAMESPACE_BEGIN # if ! UCONFIG_NO_BREAK_ITERATION class BreakIterator ; # endif class Edits ; U_NAMESPACE_END typedef int32_t U_CALLCONV)",
    "insertText": "UStringCaseMapper(int32_t caseLocale, uint32_t options, #if !UCONFIG_NO_BREAK_ITERATION icu::BreakIterator *iter, #endif char16_t *dest, int32_t destCapacity, const char16_t *src, int32_t srcLength, icu::Edits *edits, UErrorCode &errorCode)"
  },
  {
    "label": "UNICODE_STRING()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_BEGIN class Locale ; class StringCharacterIterator ; class UnicodeStringAppendable ; # define US_INV icu::UnicodeString::kInvariant # if ! U_CHAR16_IS_TYPEDEF # define)",
    "insertText": "UNICODE_STRING(cs, _length) icu::UnicodeString(TRUE, u ## cs, _length) #else # define UNICODE_STRING(cs, _length) icu::UnicodeString(TRUE, (const char16_t*)u ## cs, _length) #endif #define UNICODE_STRING_SIMPLE(cs) UNICODE_STRING(cs, -1) #ifndef UNISTR_FROM_CHAR_EXPLICIT # if defined(U_COMBINED_IMPLEMENTATION) || defined(U_COMMON_IMPLEMENTATION) || defined(U_I18N_IMPLEMENTATION) || defined(U_IO_IMPLEMENTATION) # define UNISTR_FROM_CHAR_EXPLICIT explicit # else # define UNISTR_FROM_CHAR_EXPLICIT # endif #endif #ifndef UNISTR_FROM_STRING_EXPLICIT # if defined(U_COMBINED_IMPLEMENTATION) || defined(U_COMMON_IMPLEMENTATION) || defined(U_I18N_IMPLEMENTATION) || defined(U_IO_IMPLEMENTATION)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : enum EInvariant { kInvariant } ; UBool)",
    "insertText": "operator(const UnicodeString& text)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compare(const UnicodeString& text)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compare(int32_t start, int32_t length, const UnicodeString& text)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compare(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compare(ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compare(int32_t start, int32_t length, const char16_t *srcChars)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compare(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compareBetween()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareBetween(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrder(const UnicodeString& text)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t length, const UnicodeString& srcText)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrder(ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t length, const char16_t *srcChars)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compareCodePointOrderBetween()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "compareCodePointOrderBetween(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompare(const UnicodeString& text, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t length, const UnicodeString& srcText, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompare(ConstChar16Ptr srcChars, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t length, const char16_t *srcChars, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "caseCompareBetween()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "caseCompareBetween(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit, uint32_t options)"
  },
  {
    "label": "startsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "startsWith(const UnicodeString& text)"
  },
  {
    "label": "startsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "startsWith(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "startsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "startsWith(ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "startsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "startsWith(const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "endsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "endsWith(const UnicodeString& text)"
  },
  {
    "label": "endsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "endsWith(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "endsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "endsWith(ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "endsWith()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "endsWith(const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(const UnicodeString& text)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(const UnicodeString& text, int32_t start)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(const UnicodeString& text, int32_t start, int32_t length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(const char16_t *srcChars, int32_t srcLength, int32_t start)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(ConstChar16Ptr srcChars, int32_t srcLength, int32_t start, int32_t length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(const char16_t *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(char16_t c)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(UChar32 c)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(char16_t c, int32_t start)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(UChar32 c, int32_t start)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(char16_t c, int32_t start, int32_t length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "indexOf(UChar32 c, int32_t start, int32_t length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(const UnicodeString& text)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(const UnicodeString& text, int32_t start)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(const UnicodeString& text, int32_t start, int32_t length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(const char16_t *srcChars, int32_t srcLength, int32_t start)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(ConstChar16Ptr srcChars, int32_t srcLength, int32_t start, int32_t length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(const char16_t *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(char16_t c)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(UChar32 c)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(char16_t c, int32_t start)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(UChar32 c, int32_t start)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(char16_t c, int32_t start, int32_t length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lastIndexOf(UChar32 c, int32_t start, int32_t length)"
  },
  {
    "label": "charAt()",
    "kind": "Method",
    "detail": "Function (char16_t)",
    "insertText": "charAt(int32_t offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (char16_t)",
    "insertText": "operator(int32_t offset)"
  },
  {
    "label": "char32At()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "char32At(int32_t offset)"
  },
  {
    "label": "getChar32Start()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getChar32Start(int32_t offset)"
  },
  {
    "label": "getChar32Limit()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getChar32Limit(int32_t offset)"
  },
  {
    "label": "moveIndex32()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "moveIndex32(int32_t index, int32_t delta)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extract(int32_t start, int32_t length, Char16Ptr dst, int32_t dstStart = 0)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "extract(Char16Ptr dest, int32_t destCapacity, UErrorCode &errorCode)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extract(int32_t start, int32_t length, UnicodeString& target)"
  },
  {
    "label": "extractBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractBetween(int32_t start, int32_t limit, char16_t *dst, int32_t dstStart = 0)"
  },
  {
    "label": "extractBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extractBetween(int32_t start, int32_t limit, UnicodeString& target)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "extract(int32_t start, int32_t startLength, char *target, int32_t targetCapacity, enum EInvariant inv)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (# if U_CHARSET_IS_UTF8 | | ! UCONFIG_NO_CONVERSION int32_t)",
    "insertText": "extract(int32_t start, int32_t startLength, char *target, uint32_t targetLength)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UCONFIG_NO_CONVERSION int32_t)",
    "insertText": "extract(int32_t start, int32_t startLength, char *target, const char *codepage = 0)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "extract(int32_t start, int32_t startLength, char *target, uint32_t targetLength, const char *codepage)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "extract(char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode)"
  },
  {
    "label": "tempSubString()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString)",
    "insertText": "tempSubString(int32_t start=0, int32_t length=INT32_MAX)"
  },
  {
    "label": "tempSubStringBetween()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "tempSubStringBetween(int32_t start, int32_t limit=INT32_MAX)"
  },
  {
    "label": "toUTF8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toUTF8(ByteSink &sink)"
  },
  {
    "label": "toUTF8String()",
    "kind": "Method",
    "detail": "Function (template<StringClass> StringClass&)",
    "insertText": "toUTF8String(StringClass &result)"
  },
  {
    "label": "sbs()",
    "kind": "Method",
    "detail": "Function (StringByteSink<StringClass>)",
    "insertText": "sbs(&result, length())"
  },
  {
    "label": "toUTF8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toUTF8(sbs)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "length(void)"
  },
  {
    "label": "countChar32()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countChar32(int32_t start=0, int32_t length=INT32_MAX)"
  },
  {
    "label": "hasMoreChar32Than()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasMoreChar32Than(int32_t start, int32_t length, int32_t number)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isEmpty(void)"
  },
  {
    "label": "getCapacity()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getCapacity(void)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "hashCode(void)"
  },
  {
    "label": "isBogus()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isBogus(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "operator(const UnicodeString &srcText)"
  },
  {
    "label": "fastCopyFrom()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "fastCopyFrom(const UnicodeString &src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "operator(UnicodeString &&src)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(UnicodeString &other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "swap(UnicodeString &s1, UnicodeString &s2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (s1 .)",
    "insertText": "swap(s2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "operator(char16_t ch)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "operator(UChar32 ch)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(const UnicodeString& srcText, int32_t srcStart)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(const UnicodeString& srcText)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(const char16_t *srcChars, int32_t srcLength)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(char16_t srcChar)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(UChar32 srcChar)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(UBool isTerminated, ConstChar16Ptr text, int32_t textLength)"
  },
  {
    "label": "setTo()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setTo(char16_t *buffer, int32_t buffLength, int32_t buffCapacity)"
  },
  {
    "label": "setToBogus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setToBogus()"
  },
  {
    "label": "setCharAt()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "setCharAt(int32_t offset, char16_t ch)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "operator(const UnicodeString& srcText)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(const UnicodeString& srcText)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(char16_t srcChar)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "append(UChar32 srcChar)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "insert(int32_t start, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "insert(int32_t start, const UnicodeString& srcText)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "insert(int32_t start, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "insert(int32_t start, ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "insert(int32_t start, char16_t srcChar)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "insert(int32_t start, UChar32 srcChar)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t length, const UnicodeString& srcText)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t length, ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t length, char16_t srcChar)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t length, UChar32 srcChar)"
  },
  {
    "label": "replaceBetween()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replaceBetween(int32_t start, int32_t limit, const UnicodeString& srcText)"
  },
  {
    "label": "replaceBetween()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "replaceBetween(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)"
  },
  {
    "label": "handleReplaceBetween()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleReplaceBetween(int32_t start, int32_t limit, const UnicodeString& text)"
  },
  {
    "label": "hasMetaData()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasMetaData()"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(int32_t start, int32_t limit, int32_t dest)"
  },
  {
    "label": "findAndReplace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "findAndReplace(const UnicodeString& oldText, const UnicodeString& newText)"
  },
  {
    "label": "findAndReplace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "findAndReplace(int32_t start, int32_t length, const UnicodeString& oldText, const UnicodeString& newText)"
  },
  {
    "label": "findAndReplace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "findAndReplace(int32_t start, int32_t length, const UnicodeString& oldText, int32_t oldStart, int32_t oldLength, const UnicodeString& newText, int32_t newStart, int32_t newLength)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "remove(void)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "remove(int32_t start, int32_t length = (int32_t)INT32_MAX)"
  },
  {
    "label": "removeBetween()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "removeBetween(int32_t start, int32_t limit = (int32_t)INT32_MAX)"
  },
  {
    "label": "retainBetween()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "retainBetween(int32_t start, int32_t limit = INT32_MAX)"
  },
  {
    "label": "padLeading()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "padLeading(int32_t targetLength, char16_t padChar = 0x0020)"
  },
  {
    "label": "padTrailing()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "padTrailing(int32_t targetLength, char16_t padChar = 0x0020)"
  },
  {
    "label": "truncate()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "truncate(int32_t targetLength)"
  },
  {
    "label": "trim()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "trim(void)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "reverse(void)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "reverse(int32_t start, int32_t length)"
  },
  {
    "label": "toUpper()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toUpper(void)"
  },
  {
    "label": "toUpper()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toUpper(const Locale& locale)"
  },
  {
    "label": "toLower()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toLower(void)"
  },
  {
    "label": "toLower()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toLower(const Locale& locale)"
  },
  {
    "label": "toTitle()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_BREAK_ITERATION UnicodeString&)",
    "insertText": "toTitle(BreakIterator *titleIter)"
  },
  {
    "label": "toTitle()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toTitle(BreakIterator *titleIter, const Locale &locale)"
  },
  {
    "label": "toTitle()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toTitle(BreakIterator *titleIter, const Locale &locale, uint32_t options)"
  },
  {
    "label": "foldCase()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "foldCase(uint32_t options=0)"
  },
  {
    "label": "getBuffer()",
    "kind": "Method",
    "detail": "Function (char16_t*)",
    "insertText": "getBuffer(int32_t minCapacity)"
  },
  {
    "label": "releaseBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseBuffer(int32_t newLength=-1)"
  },
  {
    "label": "getBuffer()",
    "kind": "Method",
    "detail": "Function (const char16_t*)",
    "insertText": "getBuffer()"
  },
  {
    "label": "getTerminatedBuffer()",
    "kind": "Method",
    "detail": "Function (const char16_t*)",
    "insertText": "getTerminatedBuffer()"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString()"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(int32_t capacity, UChar32 c, int32_t count)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_CHAR_EXPLICIT)",
    "insertText": "UnicodeString(char16_t ch)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_CHAR_EXPLICIT)",
    "insertText": "UnicodeString(UChar32 ch)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (UNISTR_FROM_STRING_EXPLICIT)",
    "insertText": "UnicodeString(const char16_t *text)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (# if ! U_CHAR16_IS_TYPEDEF UNISTR_FROM_STRING_EXPLICIT)",
    "insertText": "UnicodeString(const uint16_t *text) : UnicodeString(ConstChar16Ptr(text))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if U_SIZEOF_WCHAR_T = = 2 | |)",
    "insertText": "defined(U_IN_DOXYGEN) UNISTR_FROM_STRING_EXPLICIT UnicodeString(const wchar_t *text) : UnicodeString(ConstChar16Ptr(text))"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (} # endif UNISTR_FROM_STRING_EXPLICIT)",
    "insertText": "UnicodeString(const std::nullptr_t text)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const char16_t *text, int32_t textLength)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (# if ! U_CHAR16_IS_TYPEDEF)",
    "insertText": "UnicodeString(const uint16_t *text, int32_t length) : UnicodeString(ConstChar16Ptr(text), length)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if U_SIZEOF_WCHAR_T = = 2 | |)",
    "insertText": "defined(U_IN_DOXYGEN) UnicodeString(const wchar_t *text, int32_t length) : UnicodeString(ConstChar16Ptr(text), length)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "UnicodeString(const std::nullptr_t text, int32_t length)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(UBool isTerminated, ConstChar16Ptr text, int32_t textLength)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(char16_t *buffer, int32_t buffLength, int32_t buffCapacity)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (# if ! U_CHAR16_IS_TYPEDEF)",
    "insertText": "UnicodeString(uint16_t *buffer, int32_t buffLength, int32_t buffCapacity) : UnicodeString(Char16Ptr(buffer), buffLength, buffCapacity)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if U_SIZEOF_WCHAR_T = = 2 | |)",
    "insertText": "defined(U_IN_DOXYGEN) UnicodeString(wchar_t *buffer, int32_t buffLength, int32_t buffCapacity) : UnicodeString(Char16Ptr(buffer), buffLength, buffCapacity)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "UnicodeString(std::nullptr_t buffer, int32_t buffLength, int32_t buffCapacity)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (# if U_CHARSET_IS_UTF8 | | ! UCONFIG_NO_CONVERSION UNISTR_FROM_STRING_EXPLICIT)",
    "insertText": "UnicodeString(const char *codepageData)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const char *codepageData, int32_t dataLength)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UCONFIG_NO_CONVERSION)",
    "insertText": "UnicodeString(const char *codepageData, const char *codepage)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const char *codepageData, int32_t dataLength, const char *codepage)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const char *src, int32_t srcLength, UConverter *cnv, UErrorCode &errorCode)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UnicodeString(const char *src, int32_t length, enum EInvariant inv)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const UnicodeString& that)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(UnicodeString &&src)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const UnicodeString& src, int32_t srcStart)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnicodeString(const UnicodeString& src, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Replaceable*)",
    "insertText": "clone()"
  },
  {
    "label": "fromUTF8()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "fromUTF8(StringPiece utf8)"
  },
  {
    "label": "fromUTF32()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "fromUTF32(const UChar32 *utf32, int32_t length)"
  },
  {
    "label": "unescape()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "unescape()"
  },
  {
    "label": "unescapeAt()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "unescapeAt(int32_t &offset)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (protected : int32_t)",
    "insertText": "getLength()"
  },
  {
    "label": "getCharAt()",
    "kind": "Method",
    "detail": "Function (char16_t)",
    "insertText": "getCharAt(int32_t offset)"
  },
  {
    "label": "getChar32At()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "getChar32At(int32_t offset)"
  },
  {
    "label": "setToUTF8()",
    "kind": "Method",
    "detail": "Function (private : UnicodeString&)",
    "insertText": "setToUTF8(StringPiece utf8)"
  },
  {
    "label": "toUTF8()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "toUTF8(int32_t start, int32_t len, char *target, int32_t capacity)"
  },
  {
    "label": "doEquals()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "doEquals(const UnicodeString &text, int32_t len)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "doCompare(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "doCompare(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "doCompareCodePointOrder(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "doCompareCodePointOrder(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "doCaseCompare(int32_t start, int32_t length, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "doCaseCompare(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "doIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "doIndexOf(char16_t c, int32_t start, int32_t length)"
  },
  {
    "label": "doIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "doIndexOf(UChar32 c, int32_t start, int32_t length)"
  },
  {
    "label": "doLastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "doLastIndexOf(char16_t c, int32_t start, int32_t length)"
  },
  {
    "label": "doLastIndexOf()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "doLastIndexOf(UChar32 c, int32_t start, int32_t length)"
  },
  {
    "label": "doExtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doExtract(int32_t start, int32_t length, char16_t *dst, int32_t dstStart)"
  },
  {
    "label": "doExtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doExtract(int32_t start, int32_t length, UnicodeString& target)"
  },
  {
    "label": "doCharAt()",
    "kind": "Method",
    "detail": "Function (char16_t)",
    "insertText": "doCharAt(int32_t offset)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "doReplace(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "doReplace(int32_t start, int32_t length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "doAppend(const UnicodeString& src, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doAppend()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "doAppend(const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doReverse()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "doReverse(int32_t start, int32_t length)"
  },
  {
    "label": "doHashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "doHashCode(void)"
  },
  {
    "label": "getArrayStart()",
    "kind": "Method",
    "detail": "Function (char16_t*)",
    "insertText": "getArrayStart(void)"
  },
  {
    "label": "hasShortLength()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasShortLength()"
  },
  {
    "label": "getShortLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getShortLength()"
  },
  {
    "label": "isWritable()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isWritable()"
  },
  {
    "label": "isBufferWritable()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isBufferWritable()"
  },
  {
    "label": "setZeroLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setZeroLength()"
  },
  {
    "label": "setShortLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShortLength(int32_t len)"
  },
  {
    "label": "setLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLength(int32_t len)"
  },
  {
    "label": "setToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setToEmpty()"
  },
  {
    "label": "setArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArray(char16_t *array, int32_t len, int32_t capacity)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "allocate(int32_t capacity)"
  },
  {
    "label": "releaseArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseArray(void)"
  },
  {
    "label": "unBogus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unBogus()"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "copyFrom(const UnicodeString &src, UBool fastCopy=FALSE)"
  },
  {
    "label": "copyFieldsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFieldsFrom(UnicodeString &src, UBool setSrcToBogus)"
  },
  {
    "label": "pinIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pinIndex(int32_t& start)"
  },
  {
    "label": "pinIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pinIndices(int32_t& start, int32_t& length)"
  },
  {
    "label": "doExtract()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_CONVERSION int32_t)",
    "insertText": "doExtract(int32_t start, int32_t length, char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode)"
  },
  {
    "label": "doCodepageCreate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCodepageCreate(const char *codepageData, int32_t dataLength, const char *codepage)"
  },
  {
    "label": "doCodepageCreate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCodepageCreate(const char *codepageData, int32_t dataLength, UConverter *converter, UErrorCode &status)"
  },
  {
    "label": "cloneArrayIfNeeded()",
    "kind": "Method",
    "detail": "Function (# endif UBool)",
    "insertText": "cloneArrayIfNeeded(int32_t newCapacity = -1, int32_t growCapacity = -1, UBool doCopyArray = TRUE, int32_t **pBufferToDelete = 0, UBool forceClone = FALSE)"
  },
  {
    "label": "caseMap()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "caseMap(int32_t caseLocale, uint32_t options, #if !UCONFIG_NO_BREAK_ITERATION BreakIterator *iter, #endif UStringCaseMapper *stringCaseMapper)"
  },
  {
    "label": "addRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addRef(void)"
  },
  {
    "label": "removeRef()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "removeRef(void)"
  },
  {
    "label": "refCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "refCount(void)"
  },
  {
    "label": "US_STACKBUF_SIZE()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "US_STACKBUF_SIZE(int32_t)(UNISTR_OBJECT_SIZE-sizeof(void *)-2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class UnicodeStringAppendable ; union StackBufferOrFields ; union StackBufferOrFields ; union StackBufferOrFields { struct { int16_t fLengthAndFlags ; char16_t fBuffer [ US_STACKBUF_SIZE ] ; } fStackFields ; struct { int16_t fLengthAndFlags ; int32_t fLength ; int32_t fCapacity ; char16_t* fArray ; } fFields ; } fUnion ; } ; UnicodeString U_EXPORT2)",
    "insertText": "operator(const UnicodeString &s1, const UnicodeString &s2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (start = 0 ; } else)",
    "insertText": "if(start > length())"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (start =)",
    "insertText": "length()"
  },
  {
    "label": "pinIndices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "pinIndices(int32_t& start, int32_t& _length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (start = 0 ; } else)",
    "insertText": "if(start > len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (start = len ; })",
    "insertText": "if(_length < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_length = 0 ; } else)",
    "insertText": "if(_length > (len - start))"
  },
  {
    "label": "_length()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_length(len - start)"
  },
  {
    "label": "getArrayStart()",
    "kind": "Method",
    "detail": "Function (} } char16_t*)",
    "insertText": "getArrayStart()"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (fUnion . fStackFields . fLengthAndFlags = kShortString ; })",
    "insertText": "UnicodeString(const std::nullptr_t)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (fUnion . fStackFields . fLengthAndFlags = kShortString ; })",
    "insertText": "UnicodeString(const std::nullptr_t , int32_t)"
  },
  {
    "label": "UnicodeString()",
    "kind": "Method",
    "detail": "Function (fUnion . fStackFields . fLengthAndFlags = kShortString ; })",
    "insertText": "UnicodeString(std::nullptr_t , int32_t , int32_t)"
  },
  {
    "label": "getCapacity()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getCapacity()"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "hashCode()"
  },
  {
    "label": "isBogus()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "isBogus()"
  },
  {
    "label": "pinIndices()",
    "kind": "Method",
    "detail": "Function (} else { srcText .)",
    "insertText": "pinIndices(srcStart, srcLength)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} else { int32_t len =)",
    "insertText": "length(), textLength = text.length()"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compare(int32_t start, int32_t _length, const UnicodeString& srcText)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compare(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compare(int32_t start, int32_t _length, const char16_t *srcChars)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compare(int32_t start, int32_t _length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doCompareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "doCompareCodePointOrder(int32_t start, int32_t thisLength, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t _length, const UnicodeString& srcText)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t _length, const char16_t *srcChars)"
  },
  {
    "label": "compareCodePointOrder()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "compareCodePointOrder(int32_t start, int32_t _length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "doCaseCompare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "doCaseCompare(int32_t start, int32_t thisLength, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (} } int8_t)",
    "insertText": "caseCompare(const UnicodeString &text, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t _length, const UnicodeString &srcText, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t _length, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t _length, const char16_t *srcChars, uint32_t options)"
  },
  {
    "label": "caseCompare()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "caseCompare(int32_t start, int32_t _length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options)"
  },
  {
    "label": "caseCompareBetween()",
    "kind": "Method",
    "detail": "Function (} int8_t)",
    "insertText": "caseCompareBetween(int32_t start, int32_t limit, const UnicodeString &srcText, int32_t srcStart, int32_t srcLimit, uint32_t options)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "indexOf(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t _length)"
  },
  {
    "label": "pinIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pinIndex(start)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "indexOf(const UnicodeString& text, int32_t start, int32_t _length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "indexOf(ConstChar16Ptr srcChars, int32_t srcLength, int32_t start, int32_t _length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "indexOf(char16_t c, int32_t start, int32_t _length)"
  },
  {
    "label": "indexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "indexOf(UChar32 c, int32_t start, int32_t _length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lastIndexOf(ConstChar16Ptr srcChars, int32_t srcLength, int32_t start, int32_t _length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lastIndexOf(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t _length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (} } return - 1 ; } int32_t)",
    "insertText": "lastIndexOf(const UnicodeString& text, int32_t start, int32_t _length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lastIndexOf(char16_t c, int32_t start, int32_t _length)"
  },
  {
    "label": "lastIndexOf()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lastIndexOf(UChar32 c, int32_t start, int32_t _length)"
  },
  {
    "label": "u_strlen()",
    "kind": "Method",
    "detail": "Function (srcLength =)",
    "insertText": "u_strlen(toUCharPtr(srcChars))"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "doCompare(0, srcLength, srcChars, 0, srcLength)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "doCompare(0, srcLength, srcChars, srcStart, srcLength)"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "doCompare(length() - srcLength, srcLength, srcChars, 0, srcLength)"
  },
  {
    "label": "u_strlen()",
    "kind": "Method",
    "detail": "Function (srcLength =)",
    "insertText": "u_strlen(toUCharPtr(srcChars + srcStart))"
  },
  {
    "label": "doCompare()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "doCompare(length() - srcLength, srcLength, srcChars, srcStart, srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t _length, const UnicodeString& srcText)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t _length, ConstChar16Ptr srcChars, int32_t srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t _length, const char16_t *srcChars, int32_t srcStart, int32_t srcLength)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "replace(int32_t start, int32_t _length, char16_t srcChar)"
  },
  {
    "label": "findAndReplace()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "findAndReplace(int32_t start, int32_t _length, const UnicodeString& oldText, const UnicodeString& newText)"
  },
  {
    "label": "doExtract()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doExtract(int32_t start, int32_t _length, UnicodeString& target)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (target .)",
    "insertText": "replace(0, target.length(), *this, start, _length)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "extract(int32_t start, int32_t _length, Char16Ptr target, int32_t targetStart)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "extract(int32_t start, int32_t _length, UnicodeString& target)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} # if ! UCONFIG_NO_CONVERSION int32_t)",
    "insertText": "extract(int32_t start, int32_t _length, char *dst, const char *codepage)"
  },
  {
    "label": "extractBetween()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "extractBetween(int32_t start, int32_t limit, char16_t *dst, int32_t dstStart)"
  },
  {
    "label": "pinIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pinIndex(limit)"
  },
  {
    "label": "tempSubStringBetween()",
    "kind": "Method",
    "detail": "Function (} UnicodeString)",
    "insertText": "tempSubStringBetween(int32_t start, int32_t limit)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "fLengthAndFlags()",
    "kind": "Method",
    "detail": "Function (fUnion . fFields .)",
    "insertText": "fLengthAndFlags(int16_t)((fUnion.fFields.fLengthAndFlags & kAllStorageFlags) | (len << kLengthShift))"
  },
  {
    "label": "setShortLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShortLength(len)"
  },
  {
    "label": "setLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLength(len)"
  },
  {
    "label": "pinIndex()",
    "kind": "Method",
    "detail": "Function (srcText .)",
    "insertText": "pinIndex(srcStart)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "remove()"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} return* this ; } UnicodeString&)",
    "insertText": "remove(int32_t start, int32_t _length)"
  },
  {
    "label": "doReplace()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "doReplace(start, _length, NULL, 0, 0)"
  },
  {
    "label": "removeBetween()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "removeBetween(int32_t start, int32_t limit)"
  },
  {
    "label": "retainBetween()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "retainBetween(int32_t start, int32_t limit)"
  },
  {
    "label": "truncate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "truncate(limit)"
  },
  {
    "label": "setLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLength(targetLength)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "reverse(int32_t start, int32_t _length)"
  }
]