[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSplineIKCachedBoneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineIKCachedBoneData"
  },
  {
    "label": "FAnimNode_SplineIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SplineIK"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" Components / SplineComponent . h \" # include \" AlphaBlend . h \" # include \" AnimNode_SplineIK . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (None = 0)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSplineIKCachedBoneData() : Bone(NAME_None) , RefSkeletonIndex(INDEX_NONE)"
  },
  {
    "label": "FSplineIKCachedBoneData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSplineIKCachedBoneData(const FName& InBoneName, int32 InRefSkeletonIndex) : Bone(InBoneName) , RefSkeletonIndex(InRefSkeletonIndex)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = \"Parameters\")"
  },
  {
    "label": "FAnimNode_SplineIK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNode_SplineIK()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "OnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitializeAnimInstance(const FAnimInstanceProxy* InProxy, const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "NeedsOnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsOnInitializeAnimInstance()"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetSplineCurves()",
    "kind": "Method",
    "detail": "Function (const FSplineCurves&)",
    "insertText": "GetSplineCurves()"
  },
  {
    "label": "GetControlPoint()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetControlPoint(int32 TransformIndex)"
  },
  {
    "label": "SetControlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPoint(int32 TransformIndex, const FTransform& InTransform)"
  },
  {
    "label": "SetControlPointLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointLocation(int32 TransformIndex, const FVector& InLocation)"
  },
  {
    "label": "SetControlPointRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointRotation(int32 TransformIndex, const FQuat& InRotation)"
  },
  {
    "label": "SetControlPointScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControlPointScale(int32 TransformIndex, const FVector& InScale)"
  },
  {
    "label": "GetNumControlPoints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumControlPoints()"
  },
  {
    "label": "GatherBoneReferences()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherBoneReferences(const FReferenceSkeleton& RefSkeleton)"
  },
  {
    "label": "BuildBoneSpline()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BuildBoneSpline(const FReferenceSkeleton& RefSkeleton)"
  },
  {
    "label": "TransformSpline()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TransformSpline()"
  },
  {
    "label": "FindParamAtFirstSphereIntersection()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindParamAtFirstSphereIntersection(const FVector& InOrigin, float InRadius, int32& StartingLinearIndex)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetTwist()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTwist(float InAlpha, float TotalSplineAlpha)"
  }
]