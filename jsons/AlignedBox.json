[
  {
    "label": "AlignedBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlignedBox"
  },
  {
    "label": "CornerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CornerType"
  },
  {
    "label": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ALIGNEDBOX_H # define EIGEN_ALIGNEDBOX_H namespace Eigen { template<_Scalar,int _AmbientDim> class AlignedBox { public :)",
    "insertText": "EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE(_Scalar,_AmbientDim)"
  },
  {
    "label": "AlignedBox()",
    "kind": "Method",
    "detail": "Function (AmbientDimAtCompileTime = _AmbientDim } ; typedef _Scalar Scalar ; typedef NumTraits<Scalar> ScalarTraits ; typedef Eigen::Index Index ; typedef ScalarTraits::Real RealScalar ; typedef ScalarTraits::NonInteger NonInteger ; typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType ; typedef CwiseBinaryOp<internal::scalar_sum_op<Scalar>,const VectorType,const VectorType> VectorTypeSum ; enum CornerType { Min = 0,Max = 1,BottomLeft = 0,BottomRight = 1,TopLeft = 2,TopRight = 3,BottomLeftFloor = 0,BottomRightFloor = 1,TopLeftFloor = 2,TopRightFloor = 3,BottomLeftCeil = 4,BottomRightCeil = 5,TopLeftCeil = 6,TopRightCeil = 7 } ; EIGEN_DEVICE_FUNC)",
    "insertText": "AlignedBox()"
  },
  {
    "label": "AlignedBox()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "AlignedBox(Index _dim) : m_min(_dim), m_max(_dim)"
  },
  {
    "label": "setEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEmpty()"
  },
  {
    "label": "AlignedBox()",
    "kind": "Method",
    "detail": "Function (} template<OtherVectorType1,OtherVectorType2> EIGEN_DEVICE_FUNC)",
    "insertText": "AlignedBox(const OtherVectorType1& _min, const OtherVectorType2& _max) : m_min(_min), m_max(_max)"
  },
  {
    "label": "AlignedBox()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC)",
    "insertText": "AlignedBox(const MatrixBase<Derived>& p) : m_min(p), m_max(m_min)"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Index)",
    "insertText": "dim()"
  },
  {
    "label": "isNull()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "isNull()"
  },
  {
    "label": "setNull()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "setNull()"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (m_min .)",
    "insertText": "setConstant(ScalarTraits::highest())"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (m_max .)",
    "insertText": "setConstant(ScalarTraits::lowest())"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const)",
    "insertText": "VectorType(min)()"
  },
  {
    "label": "sizes()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const CwiseBinaryOp<internal::scalar_difference_op<Scalar,Scalar>,const VectorType,const VectorType>)",
    "insertText": "sizes()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CwiseBinaryOp<internal::scalar_difference_op<Scalar,Scalar>,const VectorType,const VectorType>)",
    "insertText": "diagonal()"
  },
  {
    "label": "corner()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC VectorType)",
    "insertText": "corner(CornerType corner)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(_AmbientDim <= 3, THIS_METHOD_IS_ONLY_FOR_VECTORS_OF_A_SPECIFIC_SIZE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (VectorType res ; Index mult = 1 ;)",
    "insertText": "for(Index d=0; d<dim(); ++d)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "r(dim())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (r [ d ] = m_min [)",
    "insertText": "d(m_max[d]-m_min[d]) * internal::random<Scalar>(Scalar(0), Scalar(1))"
  },
  {
    "label": "random()",
    "kind": "Method",
    "detail": "Function (} else r [ d ] =)",
    "insertText": "random(m_min[d], m_max[d])"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} return r ; } template<Derived> EIGEN_DEVICE_FUNC bool)",
    "insertText": "contains(const MatrixBase<Derived>& p)"
  },
  {
    "label": "p_n()",
    "kind": "Method",
    "detail": "Function (internal::nested_eval<Derived,2>::type)",
    "insertText": "p_n(p.derived())"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "contains(const AlignedBox& b)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "intersects(const AlignedBox& b)"
  },
  {
    "label": "extend()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC AlignedBox&)",
    "insertText": "extend(const MatrixBase<Derived>& p)"
  },
  {
    "label": "cwiseMin()",
    "kind": "Method",
    "detail": "Function (m_min = m_min .)",
    "insertText": "cwiseMin(p_n)"
  },
  {
    "label": "cwiseMax()",
    "kind": "Method",
    "detail": "Function (m_max = m_max .)",
    "insertText": "cwiseMax(p_n)"
  },
  {
    "label": "cwiseMin()",
    "kind": "Method",
    "detail": "Function (m_min = m_min .)",
    "insertText": "cwiseMin(b.m_min)"
  },
  {
    "label": "cwiseMax()",
    "kind": "Method",
    "detail": "Function (m_max = m_max .)",
    "insertText": "cwiseMax(b.m_max)"
  },
  {
    "label": "cwiseMax()",
    "kind": "Method",
    "detail": "Function (m_min = m_min .)",
    "insertText": "cwiseMax(b.m_min)"
  },
  {
    "label": "cwiseMin()",
    "kind": "Method",
    "detail": "Function (m_max = m_max .)",
    "insertText": "cwiseMin(b.m_max)"
  },
  {
    "label": "merged()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC AlignedBox)",
    "insertText": "merged(const AlignedBox& b)"
  },
  {
    "label": "translate()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC AlignedBox&)",
    "insertText": "translate(const MatrixBase<Derived>& a_t)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (const internal::nested_eval<Derived,2>::type)",
    "insertText": "t(a_t.derived())"
  },
  {
    "label": "translated()",
    "kind": "Method",
    "detail": "Function (m_min + = t ; m_max + = t ; return* this ; } template<Derived> EIGEN_DEVICE_FUNC AlignedBox)",
    "insertText": "translated(const MatrixBase<Derived>& a_t)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (AlignedBox)",
    "insertText": "result(m_min, m_max)"
  },
  {
    "label": "translate()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "translate(a_t)"
  },
  {
    "label": "squaredExteriorDistance()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "squaredExteriorDistance(const AlignedBox& b)"
  },
  {
    "label": "exteriorDistance()",
    "kind": "Method",
    "detail": "Function (template<Derived> EIGEN_DEVICE_FUNC NonInteger)",
    "insertText": "exteriorDistance(const MatrixBase<Derived>& p)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sqrt) return sqrt(NonInteger(squaredExteriorDistance(p)))"
  },
  {
    "label": "exteriorDistance()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC NonInteger)",
    "insertText": "exteriorDistance(const AlignedBox& b)"
  },
  {
    "label": "EIGEN_USING_STD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_USING_STD(sqrt) return sqrt(NonInteger(squaredExteriorDistance(b)))"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} template<int Mode,int Options> EIGEN_DEVICE_FUNC void)",
    "insertText": "transform(const typename Transform<Scalar, AmbientDimAtCompileTime, Mode, Options>::TranslationType& translation)"
  },
  {
    "label": "translate()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "translate(translation)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} template<int Mode,int Options> EIGEN_DEVICE_FUNC void)",
    "insertText": "transform(const Transform<Scalar, AmbientDimAtCompileTime, Mode, Options>& transform)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(Mode == Affine || Mode == AffineCompact || Mode == Isometry, THIS_METHOD_IS_ONLY_FOR_SPECIFIC_TRANSFORMATIONS)"
  },
  {
    "label": "linear()",
    "kind": "Method",
    "detail": "Function (const VectorType rotated_extent_2 = transform .)",
    "insertText": "linear().cwiseAbs() * sizes()"
  },
  {
    "label": "linear()",
    "kind": "Method",
    "detail": "Function (const VectorType rotated_center_2 = transform .)",
    "insertText": "linear() * (this->m_max + this->m_min) + Scalar(2) * transform.translation()"
  },
  {
    "label": "m_max()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "m_max(rotated_center_2 + rotated_extent_2) / Scalar(2)"
  },
  {
    "label": "m_min()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "m_min(rotated_center_2 - rotated_extent_2) / Scalar(2)"
  },
  {
    "label": "transformed()",
    "kind": "Method",
    "detail": "Function (} template<int Mode,int Options> EIGEN_DEVICE_FUNC AlignedBox)",
    "insertText": "transformed(const Transform<Scalar, AmbientDimAtCompileTime, Mode, Options>& transform)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "transform(transform)"
  },
  {
    "label": "AlignedBox()",
    "kind": "Method",
    "detail": "Function (} template<OtherScalarType> EIGEN_DEVICE_FUNC)",
    "insertText": "AlignedBox(const AlignedBox<OtherScalarType,AmbientDimAtCompileTime>& other)"
  },
  {
    "label": "m_min()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_min(other.min)().template cast<Scalar>()"
  },
  {
    "label": "m_max()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_max(other.max)().template cast<Scalar>()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApprox(const AlignedBox& other, const RealScalar& prec = ScalarTraits::dummy_precision())"
  },
  {
    "label": "squaredExteriorDistance()",
    "kind": "Method",
    "detail": "Function (} protected : VectorType m_min,m_max ; } ; template<Scalar,int AmbientDim> template<Derived> EIGEN_DEVICE_FUNC Scalar AlignedBox<Scalar,AmbientDim)",
    "insertText": "squaredExteriorDistance(const MatrixBase<Derived>& a_p)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (internal::nested_eval<Derived,2* AmbientDim>::type)",
    "insertText": "p(a_p.derived())"
  },
  {
    "label": "dist2()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "dist2(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Scalar aux ;)",
    "insertText": "for(Index k=0; k<dim(); ++k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (aux = m_min [ k ] - p [ k ] ; dist2 + = aux* aux ; } else)",
    "insertText": "if(p[k] > m_max[k])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (aux = m_min [ k ] - b . m_max [ k ] ; dist2 + = aux* aux ; } else)",
    "insertText": "if(b.m_min[k] > m_max[k])"
  },
  {
    "label": "EIGEN_MAKE_TYPEDEFS()",
    "kind": "Method",
    "detail": "Function (aux = b . m_min [ k ] - m_max [ k ] ; dist2 + = aux* aux ; } } return dist2 ; } # define)",
    "insertText": "EIGEN_MAKE_TYPEDEFS(Type, TypeSuffix, Size, SizeSuffix)"
  }
]