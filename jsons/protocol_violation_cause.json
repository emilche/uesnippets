[
  {
    "label": "ProtocolViolationCauseConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProtocolViolationCauseConfig"
  },
  {
    "label": "ProtocolViolationCause",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProtocolViolationCause"
  },
  {
    "label": "ProtocolViolationCause()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_ERROR_CAUSE_PROTOCOL_VIOLATION_CAUSE_H_ # define NET_DCSCTP_PACKET_ERROR_CAUSE_PROTOCOL_VIOLATION_CAUSE_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / error_cause / error_cause . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct ProtocolViolationCauseConfig : public ParameterConfig { int kType = 1 3 ; size_t kHeaderSize = 4 ; size_t kVariableLengthAlignment = 1 ; } ; class ProtocolViolationCause : public Parameter,public TLVTrait<ProtocolViolationCauseConfig> { public : int kType = ProtocolViolationCauseConfig::kType ;)",
    "insertText": "ProtocolViolationCause(absl::string_view additional_information) : additional_information_(additional_information)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<ProtocolViolationCause>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "additional_information()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "additional_information()"
  }
]