[
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "AGroupActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGroupActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameFramework / Actor . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" GroupActor . generated . h \" class FLevelEditorViewportClient ; class FViewport ; class UTypedElementSelectionSet ;)",
    "insertText": "UCLASS(hidedropdown,MinimalAPI, notplaceable, NotBlueprintable)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "SetIsTemporarilyHiddenInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsTemporarilyHiddenInEditor(bool bIsHidden)"
  },
  {
    "label": "GetActorBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors)"
  },
  {
    "label": "GetStreamingBounds()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetStreamingBounds(FBox& OutRuntimeBounds, FBox& OutEditorBounds)"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "ForEachActorInGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachActorInGroup(TFunctionRef<void(AActor*, AGroupActor*)> InCallback)"
  },
  {
    "label": "ForEachMovableActorInGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachMovableActorInGroup(const UTypedElementSelectionSet* InSelectionSet, TFunctionRef<void(AActor*, AGroupActor*)> InCallback)"
  },
  {
    "label": "GroupApplyDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupApplyDelta(const FVector& InDrag, const FRotator& InRot, const FVector& InScale)"
  },
  {
    "label": "DrawBracketsForGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBracketsForGroups(class FPrimitiveDrawInterface* PDI, FViewport* Viewport, bool bMustBeSelected=true)"
  },
  {
    "label": "RemoveSubGroupsFromArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubGroupsFromArray(TArray<AGroupActor*>& GroupArray)"
  },
  {
    "label": "GetRootForActor()",
    "kind": "Method",
    "detail": "Function (AGroupActor*)",
    "insertText": "GetRootForActor(AActor* InActor, bool bMustBeLocked=false, bool bMustBeSelected=false, bool bMustBeUnlocked=false, bool bMustBeUnselected=false)"
  },
  {
    "label": "GetParentForActor()",
    "kind": "Method",
    "detail": "Function (AGroupActor*)",
    "insertText": "GetParentForActor(AActor* InActor)"
  },
  {
    "label": "NumActiveGroups()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumActiveGroups(bool bSelected=false, bool bDeepSearch=true)"
  },
  {
    "label": "AddSelectedActorsToSelectedGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedActorsToSelectedGroup()"
  },
  {
    "label": "LockSelectedGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockSelectedGroups()"
  },
  {
    "label": "UnlockSelectedGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockSelectedGroups()"
  },
  {
    "label": "ToggleGroupMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGroupMode()"
  },
  {
    "label": "SelectGroupsInSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectGroupsInSelection()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (bLocked = false ; } ; bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(AActor& InActor)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(AActor& InActor)"
  },
  {
    "label": "HasSelectedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedActors(bool bDeepSearch=true)"
  },
  {
    "label": "ClearAndRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAndRemove()"
  },
  {
    "label": "CenterGroupLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterGroupLocation()"
  },
  {
    "label": "GetGroupActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGroupActors(TArray<AActor*>& OutGroupActors, bool bRecurse=false)"
  },
  {
    "label": "GetSubGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubGroups(TArray<AGroupActor*>& OutSubGroups, bool bRecurse=false)"
  },
  {
    "label": "GetAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllChildren(TArray<AActor*>& OutChildren, bool bRecurse=false)"
  },
  {
    "label": "GetActorNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActorNum()"
  },
  {
    "label": "PostRemove()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PostRemove()"
  },
  {
    "label": "SelectedGroupNeedsFixup()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "SelectedGroupNeedsFixup()"
  },
  {
    "label": "FixupGroupActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupGroupActor()"
  },
  {
    "label": "ActorHasParentInGroup()",
    "kind": "Method",
    "detail": "Function (} ; namespace GroupActorHelpers { bool)",
    "insertText": "ActorHasParentInGroup(const AActor* Actor, const AGroupActor* GroupActor)"
  },
  {
    "label": "ActorHasParentInSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActorHasParentInSelection(const AActor* Actor, FTypedElementListConstRef SelectionSet)"
  }
]