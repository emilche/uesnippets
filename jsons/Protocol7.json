[
  {
    "label": "EProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProtocol"
  },
  {
    "label": "EKnownEventUids",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EKnownEventUids"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UE { namespace Trace { # if)",
    "insertText": "defined(TRACE_PRIVATE_PROTOCOL_7)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (enum EProtocol : uint8 { Id = 7 } ; using Protocol6::EFieldType ; using Protocol6::FEventHeader ; using Protocol6::FImportantEventHeader ; using Protocol6::FEventHeaderSync ; using Protocol6::FAuxHeader ; using Protocol6::EEventFlags ; using Protocol6::EFieldFamily ; using Protocol6::FNewEventEvent ; struct EKnownEventUids { const uint16 Flag_TwoByteUid = 1<<0 ; const uint16 _UidShift = 1 ; enum : uint16 { NewEvent = 0,AuxData,_Unused0,AuxDataTerminal,EnterScope,LeaveScope,EnterScope_TA,LeaveScope_TA,EnterScope_TB,LeaveScope_TB,_Unused1,_Unused2,_Unused3,_Unused4,_Unused5,_Unused6,_WellKnownNum,} ; const uint16 User = _WellKnownNum ; const uint16)",
    "insertText": "Max(1 << (16 - _UidShift))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (const uint16 Invalid = Max ;)",
    "insertText": "static_assert(User == Protocol5::EKnownEventUids::User, \"Protocol7::EKnownEventUids should extend Protocol5\")"
  }
]