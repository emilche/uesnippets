[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimpleSuspensionConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { # define NUM_SUS_AVERAGING 1 0 struct FSimpleSuspensionConfig {)",
    "insertText": "FSimpleSuspensionConfig() : SuspensionAxis(FVector(0.f, 0.f, -1.f)) , SuspensionForceOffset(FVector::ZeroVector) , SuspensionMaxRaise(0.f) , SuspensionMaxDrop(0.f) , MaxLength(0.f) , SpringRate(1.f) , SpringPreload(0.5f) , CompressionDamping(0.9f) , ReboundDamping(0.9f) , RestingForce(0.f) , Swaybar(0.5f) , DampingRatio(0.3f) , WheelLoadRatio(1.f) , RaycastSafetyMargin(0.0f) , SuspensionSmoothing(6)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (MaxLength =)",
    "insertText": "Abs(SuspensionMaxRaise) + FMath::Abs(SuspensionMaxDrop)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (SuspensionSmoothing =)",
    "insertText": "Clamp(SuspensionSmoothing, 0, NUM_SUS_AVERAGING)"
  },
  {
    "label": "SetSuspensionMaxRaise()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSuspensionMaxRaise(float InSuspensionMaxRaise)"
  },
  {
    "label": "SetSuspensionMaxDrop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSuspensionMaxDrop(float InSuspensionMaxDrop)"
  },
  {
    "label": "TraceDir()",
    "kind": "Method",
    "detail": "Function (} FVector SuspensionAxis ; FVector SuspensionForceOffset ; float SuspensionMaxRaise ; float SuspensionMaxDrop ; float MaxLength ; float SpringRate ; float SpringPreload ; float CompressionDamping ; float ReboundDamping ; float RestingForce ; float Swaybar ; float DampingRatio ; float WheelLoadRatio ; float RaycastSafetyMargin ; int SuspensionSmoothing ; } ; struct FSuspensionTrace { FVector Start ; FVector End ; FVector)",
    "insertText": "TraceDir()"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Dir(End - Start)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Length()"
  },
  {
    "label": "FSimpleSuspensionSim()",
    "kind": "Method",
    "detail": "Function (} } ; class FSimpleSuspensionSim : public TVehicleSystem<FSimpleSuspensionConfig> { public :)",
    "insertText": "FSimpleSuspensionSim(const FSimpleSuspensionConfig* SetupIn) : TVehicleSystem<FSimpleSuspensionConfig>(SetupIn) , DisplacementInput(0.f) , LastDisplacement(0.f) , LocalVelocity(FVector::ZeroVector) , SuspensionForce(0.f) , LocalOffset(FVector::ZeroVector) , SpringDisplacement(0.f) , SpringIndex(0) , LastSpringLength(0.f) , AveragingLength() , AveragingCount(0) , AveragingNum(0)"
  },
  {
    "label": "SetSuspensionLength()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSuspensionLength(float InLength, float WheelRadius)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (DisplacementInput = InLength -)",
    "insertText": "Setup()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (DisplacementInput =)",
    "insertText": "Max(0.f, DisplacementInput)"
  },
  {
    "label": "GetNormalizedLength()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetNormalizedLength()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float NormalizedLength = 1 . 0 f ;)",
    "insertText": "if(Setup().MaxLength > SMALL_NUMBER)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} NormalizedLength =)",
    "insertText": "Max(FMath::Min(NormalizedLength, 1.0f), 0.0f)"
  },
  {
    "label": "SetLocalVelocityFromWorld()",
    "kind": "Method",
    "detail": "Function (LocalVelocity = InVelocity ; } void)",
    "insertText": "SetLocalVelocityFromWorld(const FTransform& InWorldTransform, const FVector& InWorldVelocity)"
  },
  {
    "label": "InverseTransformVector()",
    "kind": "Method",
    "detail": "Function (LocalVelocity = InWorldTransform .)",
    "insertText": "InverseTransformVector(InWorldVelocity)"
  },
  {
    "label": "SetLocalRestingPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocalRestingPosition(const FVector& InOffset)"
  },
  {
    "label": "SetSpringIndex()",
    "kind": "Method",
    "detail": "Function (LocalOffset = InOffset ; } void)",
    "insertText": "SetSpringIndex(uint32 InIndex)"
  },
  {
    "label": "UpdateWorldRaycastLocation()",
    "kind": "Method",
    "detail": "Function (SpringIndex = InIndex ; } void)",
    "insertText": "UpdateWorldRaycastLocation(const FTransform& BodyTransform, float WheelRadius, FSuspensionTrace& OutTrace)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (FVector WorldLocation = BodyTransform .)",
    "insertText": "TransformPosition(GetLocalRestingPosition())"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (FVector WorldDirection = BodyTransform .)",
    "insertText": "TransformVector(LocalDirection)"
  },
  {
    "label": "WorldDirection()",
    "kind": "Method",
    "detail": "Function (OutTrace . Start = WorldLocation -)",
    "insertText": "WorldDirection(Setup().SuspensionMaxRaise + Setup().RaycastSafetyMargin)"
  },
  {
    "label": "WorldDirection()",
    "kind": "Method",
    "detail": "Function (OutTrace . End = WorldLocation +)",
    "insertText": "WorldDirection(Setup().SuspensionMaxDrop + WheelRadius)"
  },
  {
    "label": "GetTraceLength()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTraceLength(float WheelRadius)"
  },
  {
    "label": "GetSpringLength()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSpringLength()"
  },
  {
    "label": "GetSuspensionForce()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSuspensionForce()"
  },
  {
    "label": "LocalDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "LocalDirection(0.f, 0.f, 1.f)"
  },
  {
    "label": "GetSuspensionOffset()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSuspensionOffset()"
  },
  {
    "label": "GetLocalRestingPosition()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetLocalRestingPosition()"
  },
  {
    "label": "GetAveragingCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAveragingCount()"
  },
  {
    "label": "SetAveragingNum()",
    "kind": "Method",
    "detail": "Function (AveragingCount = InAveragingCount ; } void)",
    "insertText": "SetAveragingNum(const int32 InAveragingNum)"
  },
  {
    "label": "SetLastSpringLength()",
    "kind": "Method",
    "detail": "Function (AveragingNum = InAveragingNum ; } void)",
    "insertText": "SetLastSpringLength(const float InLastSpringLength)"
  },
  {
    "label": "SetLastDisplacement()",
    "kind": "Method",
    "detail": "Function (LastSpringLength = InLastSpringLength ; } void)",
    "insertText": "SetLastDisplacement(const float InLastDisplacement)"
  },
  {
    "label": "SetAveragingLength()",
    "kind": "Method",
    "detail": "Function (LastDisplacement = InLastDisplacement ; } void)",
    "insertText": "SetAveragingLength(const int32 LengthIndex, const float InAveragingLength)"
  }
]