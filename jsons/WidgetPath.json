[
  {
    "label": "FWidgetMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetMatcher"
  },
  {
    "label": "SLATECORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATECORE_API"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "SLATECORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATECORE_API"
  },
  {
    "label": "EInterruptedPathHandling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EInterruptedPathHandling"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EPathResolutionResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EPathResolutionResult"
  },
  {
    "label": "Result",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Result"
  },
  {
    "label": "FWidgetPath()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FWidgetPath()"
  },
  {
    "label": "PathResult()",
    "kind": "Method",
    "detail": "Function (FArrangedChildren)",
    "insertText": "PathResult(VisibilityFilter)"
  },
  {
    "label": "MoveFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFocus(int32 PathLevel, EUINavigation NavigationType, bool bSearchFromPathWidget = true)"
  },
  {
    "label": "SearchForWidgetRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchForWidgetRecursively( const MatchRuleType& MatchRule, const FArrangedWidget& InCandidate, FArrangedChildren& OutReversedPath, EVisibility VisibilityFilter = EVisibility::Visible )"
  },
  {
    "label": "SearchForWidgetRecursively_Reverse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchForWidgetRecursively_Reverse( const MatchRuleType& MatchRule, const FArrangedWidget& InCandidate, FArrangedChildren& OutReversedPath, EVisibility VisibilityFilter = EVisibility::Visible )"
  }
]