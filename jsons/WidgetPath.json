[
  {
    "label": "FWidgetMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetMatcher"
  },
  {
    "label": "SLATECORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLATECORE_API"
  },
  {
    "label": "EInterruptedPathHandling",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EInterruptedPathHandling"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EPathResolutionResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EPathResolutionResult"
  },
  {
    "label": "Result",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Result"
  },
  {
    "label": "FWidgetMatcher()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Types / SlateEnums . h \" # include \" Layout / Visibility . h \" # include \" Layout / ArrangedWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SWindow . h \" struct FWidgetMatcher {)",
    "insertText": "FWidgetMatcher(const TSharedRef<const SWidget> InWidget ) : WidgetToFind( InWidget)"
  },
  {
    "label": "IsMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMatch(const TSharedRef<const SWidget>& InWidget)"
  },
  {
    "label": "FWidgetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWidgetPath(TSharedPtr<SWindow> InTopLevelWindow, const FArrangedChildren& InWidgetPath)"
  },
  {
    "label": "FWidgetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWidgetPath(TArrayView<FWidgetAndPointer> InWidgetsAndPointers)"
  },
  {
    "label": "GetPathDownTo()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "GetPathDownTo(TSharedRef<const SWidget> MarkerWidget)"
  },
  {
    "label": "GetVirtualPointerPosition()",
    "kind": "Method",
    "detail": "Function (TOptional<FVirtualPointerPosition>)",
    "insertText": "GetVirtualPointerPosition(int32 Index)"
  },
  {
    "label": "FindArrangedWidget()",
    "kind": "Method",
    "detail": "Function (TOptional<FArrangedWidget>)",
    "insertText": "FindArrangedWidget(TSharedRef<const SWidget> WidgetToFind)"
  },
  {
    "label": "FindArrangedWidgetAndCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<FWidgetAndPointer>)",
    "insertText": "FindArrangedWidgetAndCursor(TSharedRef<const SWidget> WidgetToFind)"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "GetWindow()"
  },
  {
    "label": "GetDeepestWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "GetDeepestWindow()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ExtendPathTo()",
    "kind": "Method",
    "detail": "Function (template<MatcherType> bool)",
    "insertText": "ExtendPathTo(const MatcherType& Matcher, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const FArrangedWidget& LastWidget = Widgets .)",
    "insertText": "Last()"
  },
  {
    "label": "GeneratePathToWidget()",
    "kind": "Method",
    "detail": "Function (FArrangedChildren Extension =)",
    "insertText": "GeneratePathToWidget(Matcher, LastWidget, EUINavigation::Next, VisibilityFilter)"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (this -> Widgets .)",
    "insertText": "AddWidget(Extension[WidgetIndex])"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return Extension .)",
    "insertText": "Num()"
  },
  {
    "label": "GeneratePathToWidget()",
    "kind": "Method",
    "detail": "Function (} template<MatcherType> FArrangedChildren)",
    "insertText": "GeneratePathToWidget(const MatcherType& Matcher, const FArrangedWidget& FromWidget, EUINavigation NavigationType = EUINavigation::Next, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "PathResult()",
    "kind": "Method",
    "detail": "Function (FArrangedChildren)",
    "insertText": "PathResult(VisibilityFilter)"
  },
  {
    "label": "SearchForWidgetRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchForWidgetRecursively(Matcher, FromWidget, PathResult, VisibilityFilter)"
  },
  {
    "label": "SearchForWidgetRecursively_Reverse()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SearchForWidgetRecursively_Reverse(Matcher, FromWidget, PathResult, VisibilityFilter)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (} PathResult .)",
    "insertText": "Reverse()"
  },
  {
    "label": "GetLastWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetLastWidget()"
  },
  {
    "label": "SearchForWidgetRecursively()",
    "kind": "Method",
    "detail": "Function (} public : FArrangedChildren Widgets ; TSharedPtr<SWindow> TopLevelWindow ; private : TArray<TOptional<FVirtualPointerPosition>> VirtualPointerPositions ; private : template<MatchRuleType> bool)",
    "insertText": "SearchForWidgetRecursively(const MatchRuleType& MatchRule, const FArrangedWidget& InCandidate, FArrangedChildren& OutReversedPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "SearchForWidgetRecursively_Reverse()",
    "kind": "Method",
    "detail": "Function (template<MatchRuleType> bool)",
    "insertText": "SearchForWidgetRecursively_Reverse(const MatchRuleType& MatchRule, const FArrangedWidget& InCandidate, FArrangedChildren& OutReversedPath, EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "FWeakWidgetPath()",
    "kind": "Method",
    "detail": "Function (} ; class FWeakWidgetPath { public :)",
    "insertText": "FWeakWidgetPath(const FWidgetPath& InWidgetPath = FWidgetPath())"
  },
  {
    "label": "ToWidgetPath()",
    "kind": "Method",
    "detail": "Function (struct EInterruptedPathHandling { enum Type { Truncate,ReturnInvalid } ; } ; FWidgetPath)",
    "insertText": "ToWidgetPath(EInterruptedPathHandling::Type InterruptedPathHandling = EInterruptedPathHandling::Truncate, const FPointerEvent* PointerEvent = nullptr, const EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "ToWidgetPathRef()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FWidgetPath>)",
    "insertText": "ToWidgetPathRef(EInterruptedPathHandling::Type InterruptedPathHandling = EInterruptedPathHandling::Truncate, const FPointerEvent* PointerEvent = nullptr, const EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "ContainsWidget()",
    "kind": "Method",
    "detail": "Function (struct EPathResolutionResult { enum Result { Live,Truncated } ; } ; bool)",
    "insertText": "ContainsWidget(const SWidget* WidgetToFind)"
  },
  {
    "label": "ToWidgetPath()",
    "kind": "Method",
    "detail": "Function (EPathResolutionResult::Result)",
    "insertText": "ToWidgetPath(FWidgetPath& WidgetPath, EInterruptedPathHandling::Type InterruptedPathHandling = EInterruptedPathHandling::Truncate, const FPointerEvent* PointerEvent = nullptr, const EVisibility VisibilityFilter = EVisibility::Visible)"
  },
  {
    "label": "ToNextFocusedPath()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "ToNextFocusedPath(EUINavigation NavigationType)"
  },
  {
    "label": "ToNextFocusedPath()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "ToNextFocusedPath(EUINavigation NavigationType, const FNavigationReply& NavigationReply, const FArrangedWidget& RuleWidget)"
  }
]