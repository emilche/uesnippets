[
  {
    "label": "OpenSSLKeyPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLKeyPair"
  },
  {
    "label": "BoringSSLCertificate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoringSSLCertificate"
  },
  {
    "label": "BoringSSLCertificate()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BORINGSSL_CERTIFICATE_H_ # define RTC_BASE_BORINGSSL_CERTIFICATE_H_ # include<openssl / ossl_typ . h> # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" namespace rtc { class OpenSSLKeyPair ; class BoringSSLCertificate final : public SSLCertificate { public :)",
    "insertText": "BoringSSLCertificate(bssl::UniquePtr<CRYPTO_BUFFER> cert_buffer)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<BoringSSLCertificate>)",
    "insertText": "Generate(OpenSSLKeyPair* key_pair, const SSLIdentityParams& params)"
  },
  {
    "label": "FromPEMString()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<BoringSSLCertificate>)",
    "insertText": "FromPEMString(absl::string_view pem_string)"
  },
  {
    "label": "BoringSSLCertificate()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BoringSSLCertificate()"
  },
  {
    "label": "BoringSSLCertificate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoringSSLCertificate(const BoringSSLCertificate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BoringSSLCertificate&)",
    "insertText": "operator(const BoringSSLCertificate&)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertificate>)",
    "insertText": "Clone()"
  },
  {
    "label": "cert_buffer()",
    "kind": "Method",
    "detail": "Function (CRYPTO_BUFFER*)",
    "insertText": "cert_buffer()"
  },
  {
    "label": "ToPEMString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToPEMString()"
  },
  {
    "label": "ToDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToDER(Buffer* der_buffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const BoringSSLCertificate& other)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(absl::string_view algorithm, unsigned char* digest, size_t size, size_t* length)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(const CRYPTO_BUFFER* cert_buffer, absl::string_view algorithm, unsigned char* digest, size_t size, size_t* length)"
  },
  {
    "label": "GetSignatureDigestAlgorithm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSignatureDigestAlgorithm(std::string* algorithm)"
  },
  {
    "label": "CertificateExpirationTime()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "CertificateExpirationTime()"
  }
]