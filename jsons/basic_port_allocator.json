[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "PortConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PortConfiguration"
  },
  {
    "label": "AllocationSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocationSequence"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "PortData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PortData"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "AllocationSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocationSequence"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "UDPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDPPort"
  },
  {
    "label": "TurnPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnPort"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "AllocationSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocationSequence"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "AddTurnServerForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTurnServerForTesting(const RelayServerConfig& turn_server)"
  },
  {
    "label": "OnIceRegathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceRegathering(PortAllocatorSession* session,\n                        IceRegatheringReason reason)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(RelayPortFactoryInterface* relay_port_factory)"
  },
  {
    "label": "BasicPortAllocatorSession()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "BasicPortAllocatorSession(BasicPortAllocator* allocator,\n                            absl::string_view content_name,\n                            int component,\n                            absl::string_view ice_ufrag,\n                            absl::string_view ice_pwd)"
  },
  {
    "label": "GetPortConfigurations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPortConfigurations()"
  },
  {
    "label": "ConfigReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigReady(std::unique_ptr<PortConfiguration> config)"
  },
  {
    "label": "ConfigReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigReady(PortConfiguration* config)"
  },
  {
    "label": "OnConfigReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigReady(std::unique_ptr<PortConfiguration> config)"
  },
  {
    "label": "OnConfigStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigStop()"
  },
  {
    "label": "AllocatePorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocatePorts()"
  },
  {
    "label": "OnAllocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocate(int allocation_epoch)"
  },
  {
    "label": "DoAllocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoAllocate(bool disable_equivalent_phases)"
  },
  {
    "label": "OnNetworksChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworksChanged()"
  },
  {
    "label": "OnAllocationSequenceObjectsCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocationSequenceObjectsCreated()"
  },
  {
    "label": "DisableEquivalentPhases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableEquivalentPhases(const rtc::Network* network,\n                               PortConfiguration* config,\n                               uint32_t* flags)"
  },
  {
    "label": "AddAllocatedPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAllocatedPort(Port* port, AllocationSequence* seq)"
  },
  {
    "label": "OnCandidateReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateReady(Port* port, const Candidate& c)"
  },
  {
    "label": "OnCandidateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCandidateError(Port* port, const IceCandidateErrorEvent& event)"
  },
  {
    "label": "OnPortComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortComplete(Port* port)"
  },
  {
    "label": "OnPortError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortError(Port* port)"
  },
  {
    "label": "OnProtocolEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProtocolEnabled(AllocationSequence* seq, ProtocolType proto)"
  },
  {
    "label": "OnPortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortDestroyed(PortInterface* port)"
  },
  {
    "label": "MaybeSignalCandidatesAllocationDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalCandidatesAllocationDone()"
  },
  {
    "label": "OnPortAllocationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortAllocationComplete()"
  },
  {
    "label": "Regather()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Regather(const std::vector<const rtc::Network*>& networks,\n                bool disable_equivalent_phases,\n                IceRegatheringReason reason)"
  },
  {
    "label": "PrunePortsAndRemoveCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrunePortsAndRemoveCandidates(\n      const std::vector<PortData*>& port_data_list)"
  },
  {
    "label": "PruneTurnPorts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PruneTurnPorts(Port* newly_pairable_turn_port)"
  },
  {
    "label": "PruneNewlyPairableTurnPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PruneNewlyPairableTurnPort(PortData* newly_pairable_turn_port)"
  },
  {
    "label": "StunServers()",
    "kind": "Method",
    "detail": "Function (ServerAddresses)",
    "insertText": "StunServers()"
  },
  {
    "label": "AddRelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelay(const RelayServerConfig& config)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "OnNetworkFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkFailed()"
  },
  {
    "label": "DisableEquivalentPhases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableEquivalentPhases(const rtc::Network* network,\n                               PortConfiguration* config,\n                               uint32_t* flags)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "CreateTurnPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTurnPort(const RelayServerConfig& config, int relative_priority)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(int epoch)"
  },
  {
    "label": "CreateUDPPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUDPPorts()"
  },
  {
    "label": "CreateTCPPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTCPPorts()"
  },
  {
    "label": "CreateStunPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateStunPorts()"
  },
  {
    "label": "CreateRelayPorts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRelayPorts()"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket,\n                    const char* data,\n                    size_t size,\n                    const rtc::SocketAddress& remote_addr,\n                    const int64_t& packet_time_us)"
  },
  {
    "label": "OnPortDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPortDestroyed(PortInterface* port)"
  }
]