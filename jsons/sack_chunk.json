[
  {
    "label": "SackChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SackChunkConfig"
  },
  {
    "label": "SackChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SackChunk"
  },
  {
    "label": "GapAckBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GapAckBlock"
  },
  {
    "label": "GapAckBlock()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_SACK_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_SACK_CHUNK_H_ # include<stddef . h> # include<cstdint> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct SackChunkConfig : ChunkConfig { int kType = 3 ; size_t kHeaderSize = 1 6 ; size_t kVariableLengthAlignment = 4 ; } ; class SackChunk : public Chunk,public TLVTrait<SackChunkConfig> { public : int kType = SackChunkConfig::kType ; struct GapAckBlock {)",
    "insertText": "GapAckBlock(uint16_t start, uint16_t end) : start(start), end(end)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint16_t start ; uint16_t end ; bool)",
    "insertText": "operator(const GapAckBlock& other)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<SackChunk>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "cumulative_tsn_ack()",
    "kind": "Method",
    "detail": "Function (TSN)",
    "insertText": "cumulative_tsn_ack()"
  }
]