[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimerNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerNode"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" TraceServices / Containers / Timelines . h \" # include \" TraceServices / Model / TimingProfiler . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" namespace UE::Insights::TimingProfiler { enum class ETimerNodeType { CpuScope,GpuScope,ComputeScope,Group,InvalidOrMax,} ; class FTimerNode ; typedef TSharedPtr<class FTimerNode> FTimerNodePtr ; typedef TSharedRef<class FTimerNode> FTimerNodeRef ; typedef TSharedRef<const class FTimerNode> FTimerNodeRefConst ; typedef TWeakPtr<class FTimerNode> FTimerNodeWeak ; class FTimerNode : public FBaseTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimerNode, FBaseTreeNode) public: static constexpr uint32 InvalidTimerId = uint32(-1)"
  },
  {
    "label": "FTimerNode()",
    "kind": "Method",
    "detail": "Function (const FName GpuGroup ; const FName CpuGroup ; public :)",
    "insertText": "FTimerNode(uint32 InTimerId, const TCHAR* InName, ETimerNodeType InType, bool bInIsGroup)"
  },
  {
    "label": "FTimerNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimerNode(const FName InGroupName)"
  },
  {
    "label": "FTimerNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimerNode()"
  },
  {
    "label": "GetTimerId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTimerId()"
  },
  {
    "label": "OnRemovedFromGraph()",
    "kind": "Method",
    "detail": "Function (+ + NumGraphs ; } void)",
    "insertText": "OnRemovedFromGraph()"
  },
  {
    "label": "GetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (- - NumGraphs ; } const TraceServices::FTimingProfilerAggregatedStats&)",
    "insertText": "GetAggregatedStats()"
  },
  {
    "label": "SetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAggregatedStats(const TraceServices::FTimingProfilerAggregatedStats& AggregatedStats)"
  },
  {
    "label": "IsHotPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHotPath()"
  },
  {
    "label": "GetSourceFileAndLine()",
    "kind": "Method",
    "detail": "Function (bIsHotPath = bOnOff ; } bool)",
    "insertText": "GetSourceFileAndLine(FString& OutFile, uint32& OutLine)"
  }
]