[
  {
    "label": "FOscFrequencyMod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOscFrequencyMod"
  },
  {
    "label": "IOscBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOscBase"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FOsc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOsc"
  },
  {
    "label": "FOscFrequencyMod()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" # include \" DSP / ModulationMatrix . h \" # include \" DSP / Noise . h \" namespace Audio { struct FOscFrequencyMod { float Scale ; float ExternalMod ; float Mod ; float Detune ; float PitchBend ; float Octave ; float Semitones ; float Cents ;)",
    "insertText": "FOscFrequencyMod() : Scale(1.0f) , ExternalMod(0.0f) , Mod(0.0f) , Detune(0.0f) , PitchBend(0.0f) , Octave(0.0f) , Semitones(0.0f) , Cents(0.0f)"
  },
  {
    "label": "IOscBase()",
    "kind": "Method",
    "detail": "Function (} } ; class IOscBase { public :)",
    "insertText": "IOscBase()"
  },
  {
    "label": "IOscBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IOscBase(const IOscBase&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const int32 InVoiceId = 0, FModulationMatrix* InMatrix = nullptr, const int32 ModMatrixStage = 1)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Generate(float* AuxOutput = nullptr)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPhase()"
  },
  {
    "label": "SetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGain(const float InGain)"
  },
  {
    "label": "SetGainMod()",
    "kind": "Method",
    "detail": "Function (Gain = InGain ; } void)",
    "insertText": "SetGainMod(const float InGainMod)"
  },
  {
    "label": "SetFrequency()",
    "kind": "Method",
    "detail": "Function (ExternalGainMod = InGainMod ; } void)",
    "insertText": "SetFrequency(const float InFreqBase)"
  },
  {
    "label": "SetFrequencyMod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrequencyMod(const float InFreqMod)"
  },
  {
    "label": "SetNote()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNote(const float InNote)"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "SetOctave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOctave(const float InOctave)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(const float InSampleRate)"
  },
  {
    "label": "SetSemitones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSemitones(const float InSemiTone)"
  },
  {
    "label": "SetDetune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDetune(const float InDetune)"
  },
  {
    "label": "SetPitchBend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitchBend(const float InPitchBend)"
  },
  {
    "label": "SetFreqScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFreqScale(const float InFreqScale)"
  },
  {
    "label": "SetPulseWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPulseWidth(const float InPulseWidth)"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "SetFollowerOsc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFollowerOsc(IOscBase* InFollowerOsc)"
  },
  {
    "label": "GetModDestFrequency()",
    "kind": "Method",
    "detail": "Function (FPatchDestination)",
    "insertText": "GetModDestFrequency()"
  },
  {
    "label": "WrapPhase()",
    "kind": "Method",
    "detail": "Function (Phase + = PhaseInc ; } bool)",
    "insertText": "WrapPhase()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Result = false ;)",
    "insertText": "if(PhaseInc > 0.0f && Phase >= 1.0f)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (Phase =)",
    "insertText": "Fmod(Phase, 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result = true ; } else)",
    "insertText": "if(PhaseInc < 0.0f && Phase <= 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result = true ; })",
    "insertText": "if(Result && FollowerOsc && FollowerOsc->IsSync())"
  },
  {
    "label": "GetPhase()",
    "kind": "Method",
    "detail": "Function (} return Result ; } float)",
    "insertText": "GetPhase()"
  },
  {
    "label": "FOsc()",
    "kind": "Method",
    "detail": "Function (} protected : int32 VoiceId ; float SampleRate ; float Nyquist ; float Freq ; float BaseFreq ; FOscFrequencyMod FreqData ; float Gain ; float ExternalGainMod ; float Phase ; float PhaseInc ; float PulseWidthBase ; float PulseWidthMod ; float PulseWidth ; FModulationMatrix* ModMatrix ; FPatchDestination ModFrequencyDest ; FPatchDestination ModPulseWidthDest ; FPatchDestination ModGainDest ; FPatchDestination ModScaleDest ; FPatchDestination ModAddDest ; IOscBase* FollowerOsc ; bool bIsPlaying ; bool bChanged ; bool bIsSync ; } ; namespace EOsc { enum Type { Sine,Saw,Triangle,Square,Noise,NumOscTypes } ; } class FOsc : public IOscBase { public :)",
    "insertText": "FOsc()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const EOsc::Type InType)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (OscType = InType ; } EOsc::Type)",
    "insertText": "GetType()"
  }
]