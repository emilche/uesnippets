[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<cinttypes> # include<version> # ifdef __clang__ # include<type_traits> # endif # define ZEN_PLATFORM_WINDOWS 0 # define ZEN_PLATFORM_LINUX 0 # define ZEN_PLATFORM_MAC 0 # ifdef _WIN32 # undef ZEN_PLATFORM_WINDOWS # define ZEN_PLATFORM_WINDOWS 1 # define ZEN_PLATFORM_NAME \" Windows \" # elif)",
    "insertText": "defined(__linux__) # undef ZEN_PLATFORM_LINUX # define ZEN_PLATFORM_LINUX 1 # define ZEN_PLATFORM_NAME \"Linux\" #elif defined(__APPLE__) # undef ZEN_PLATFORM_MAC # define ZEN_PLATFORM_MAC 1 # define ZEN_PLATFORM_NAME \"MacOS\" #endif #if ZEN_PLATFORM_WINDOWS # if !defined(NOMINMAX) # define NOMINMAX # endif # if !defined(NOGDI) # define NOGDI # endif # if !defined(WIN32_LEAN_AND_MEAN) # define WIN32_LEAN_AND_MEAN # endif #endif #define ZEN_COMPILER_CLANG 0 #define ZEN_COMPILER_MSC 0 #define ZEN_COMPILER_GCC 0 #ifdef __clang__ # undef ZEN_COMPILER_CLANG # define ZEN_COMPILER_CLANG 1 #elif defined(_MSC_VER) # undef ZEN_COMPILER_MSC # define ZEN_COMPILER_MSC 1 #elif defined(__GNUC__) # undef ZEN_COMPILER_GCC # define ZEN_COMPILER_GCC 1 #else # error Unknown compiler #endif #if ZEN_COMPILER_MSC # pragma warning(disable : 4324) # pragma warning(default : 4668) # pragma warning(default : 4100) # pragma warning( \\ disable : 4373) #endif #ifndef ZEN_THIRD_PARTY_INCLUDES_START # if ZEN_COMPILER_MSC # define ZEN_THIRD_PARTY_INCLUDES_START \\ __pragma(warning(push)) __pragma(warning(disable : 4668)) \\ __pragma(warning(disable : 4305)) \\ __pragma(warning(disable : 4267)) \\ __pragma(warning(disable : 4127)) \\ __pragma(warning(disable : 4189)) \\ __pragma(warning(disable : 5105)) # elif ZEN_COMPILER_CLANG # define ZEN_THIRD_PARTY_INCLUDES_START \\ _Pragma(\"clang diagnostic push\") _Pragma(\"clang diagnostic ignored \\\"-Wundef\\\"\") \\ _Pragma(\"clang diagnostic ignored \\\"-Wunused-parameter\\\"\") _Pragma(\"clang diagnostic ignored \\\"-Wunused-variable\\\"\") # elif ZEN_COMPILER_GCC # define ZEN_THIRD_PARTY_INCLUDES_START \\ _Pragma(\"GCC diagnostic push\") \\ _Pragma(\"GCC diagnostic ignored \\\"-Wunused-parameter\\\"\") _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\") # endif #endif #ifndef ZEN_THIRD_PARTY_INCLUDES_END # if ZEN_COMPILER_MSC # define ZEN_THIRD_PARTY_INCLUDES_END __pragma(warning(pop)) # elif ZEN_COMPILER_CLANG # define ZEN_THIRD_PARTY_INCLUDES_END _Pragma(\"clang diagnostic pop\") # elif ZEN_COMPILER_GCC # define ZEN_THIRD_PARTY_INCLUDES_END _Pragma(\"GCC diagnostic pop\") # endif #endif #if ZEN_COMPILER_MSC # define ZEN_DEBUG_BREAK()"
  },
  {
    "label": "__debugbreak()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__debugbreak()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else # define ZEN_DEBUG_BREAK()"
  },
  {
    "label": "__builtin_trap()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__builtin_trap()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if ZEN_COMPILER_CLANG && __clang_major__ < 12 # error clang-12 onwards is required for C++20 support #endif #if ZEN_COMPILER_GCC && __GNUC__ < 11 # error GCC-11 onwards is required for C++20 support #endif #if defined(_GLIBCXX_RELEASE) && _GLIBCXX_RELEASE < 11 # error GNU libstdc++-11 onwards is required for C++20 support #endif #if defined(_LIBCPP_VERSION) && _LIBCPP_VERSION < 12000 # error LLVM libc++-12 onwards is required for C++20 support #endif #if defined(__amd64__) || defined(_M_X64) # define ZEN_ARCH_X64 1 # define ZEN_ARCH_ARM64 0 #elif defined(__arm64__) || defined(_M_ARM64) # define ZEN_ARCH_X64 0 # define ZEN_ARCH_ARM64 1 #else # error Unknown architecture #endif #ifdef NDEBUG # define ZEN_BUILD_DEBUG 0 # define ZEN_BUILD_RELEASE 1 # define ZEN_BUILD_NAME \"release\" #else # define ZEN_BUILD_DEBUG 1 # define ZEN_BUILD_RELEASE 0 # define ZEN_BUILD_NAME \"debug\" #endif #define ZEN_PLATFORM_SUPPORTS_UNALIGNED_LOADS 1 #if defined(__SIZEOF_WCHAR_T__) && __SIZEOF_WCHAR_T__ == 4 # define ZEN_SIZEOF_WCHAR_T 4 #else static_assert(sizeof(wchar_t) == 2, \"wchar_t is expected to be two bytes in size\")"
  },
  {
    "label": "ZenArrayCountHelper()",
    "kind": "Method",
    "detail": "Function (# define ZEN_SIZEOF_WCHAR_T 2 # endif # ifdef __clang__ template<T> auto)",
    "insertText": "ZenArrayCountHelper(T& t) -> typename std::enable_if<__is_array(T), char (&)[sizeof(t) / sizeof(t[0])"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (# else template<T,uint32_t N>)",
    "insertText": "char(&ZenArrayCountHelper(const T (&)[N]))"
  }
]