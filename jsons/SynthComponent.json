[
  {
    "label": "UAudioBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioBus"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "IAudioBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioBufferListener"
  },
  {
    "label": "USynthComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USynthComponent"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "USynthSound",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USynthSound"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "FSoundAttenuationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundAttenuationSettings"
  },
  {
    "label": "OnGeneratedBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioMixerTypes . h \" # include \" Components / AudioComponent . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" IAudioExtensionPlugin . h \" # include \" Sound / SoundWaveProcedural . h \" # include \" Sound / SoundGenerator . h \" # include \" UObject / ObjectMacros . h \" # include \" SynthComponent . generated . h \" # define SYNTH_GENERATOR_TEST_TONE 0 # if SYNTH_GENERATOR_TEST_TONE # include \" DSP / SinOsc . h \" # endif class UAudioBus ; class USoundSourceBus ; class IAudioBufferListener { public : void)",
    "insertText": "OnGeneratedBuffer(const float* AudioBuffer, const int32 NumSamples, const int32 NumChannels)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; class USynthComponent ; class USoundConcurrency ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnSynthEnvelopeValue, const float, EnvelopeValue)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSynthEnvelopeValueNative, const class UAudioComponent*, const float)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AUDIOMIXER_API void Init(USynthComponent* InSynthComponent, const int32 InNumChannels, const int32 SampleRate, const int32 InCallbackSize)"
  },
  {
    "label": "StartOnAudioDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartOnAudioDevice(FAudioDevice* InAudioDevice)"
  },
  {
    "label": "OnBeginGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginGenerate()"
  },
  {
    "label": "OnGeneratePCMAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnGeneratePCMAudio(TArray<uint8>& OutAudio, int32 NumSamples)"
  },
  {
    "label": "OnEndGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndGenerate()"
  },
  {
    "label": "GetGeneratedPCMDataFormat()",
    "kind": "Method",
    "detail": "Function (Audio::EAudioMixerStreamDataFormat::Type)",
    "insertText": "GetGeneratedPCMDataFormat()"
  },
  {
    "label": "CreateSoundGenerator()",
    "kind": "Method",
    "detail": "Function (ISoundGeneratorPtr)",
    "insertText": "CreateSoundGenerator(const FSoundGeneratorInitParams& InParams)"
  },
  {
    "label": "GetOwningSynthComponent()",
    "kind": "Method",
    "detail": "Function (TArray<float> FloatBuffer ; public : USynthComponent*)",
    "insertText": "GetOwningSynthComponent()"
  },
  {
    "label": "GetOwningSynthComponentPtr()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<USynthComponent>&)",
    "insertText": "GetOwningSynthComponentPtr()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AUDIOMIXER_API USynthComponent(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activate(bool bReset = false)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "IsReadyForOwnerToAutoDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForOwnerToAutoDestroy()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type Reason)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (uint8 bAlwaysPlay : 1 ; void)",
    "insertText": "Initialize(int32 SampleRateOverride = INDEX_NONE)"
  },
  {
    "label": "CreateAudioComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAudioComponent()"
  },
  {
    "label": "GetAudioComponent()",
    "kind": "Method",
    "detail": "Function (UAudioComponent*)",
    "insertText": "GetAudioComponent()"
  },
  {
    "label": "OnAudioComponentEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (FOnSynthEnvelopeValueNative OnAudioEnvelopeValueNative ; void)",
    "insertText": "OnAudioComponentEnvelopeValue(const UAudioComponent* AudioComponent, const USoundWave* SoundWave, const float EnvelopeValue)"
  },
  {
    "label": "AddAudioBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioBufferListener(IAudioBufferListener* InAudioBufferListener)"
  },
  {
    "label": "RemoveAudioBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAudioBufferListener(IAudioBufferListener* InAudioBufferListener)"
  },
  {
    "label": "GetSoundClass()",
    "kind": "Method",
    "detail": "Function (USoundClass*)",
    "insertText": "GetSoundClass()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "SynthCommand()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SynthCommand(TFunction<void()> Command)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(int32& SampleRate)"
  },
  {
    "label": "OnGenerateAudio()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OnGenerateAudio(float* OutAudio, int32 NumSamples)"
  },
  {
    "label": "GetAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDevice*)",
    "insertText": "GetAudioDevice()"
  },
  {
    "label": "CreateSoundGeneratorInternal()",
    "kind": "Method",
    "detail": "Function (int32 NumChannels ; int32 PreferredBufferLength ; private : ISoundGeneratorPtr)",
    "insertText": "CreateSoundGeneratorInternal(const FSoundGeneratorInitParams& InParams)"
  },
  {
    "label": "PumpPendingMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpPendingMessages()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# if SYNTH_GENERATOR_TEST_TONE Audio::FSineOsc TestSineLeft ; Audio::FSineOsc TestSineRight ; # endif bool bIsSynthPlaying ; bool bIsInitialized ; TQueue<TFunction<)",
    "insertText": "void()"
  }
]