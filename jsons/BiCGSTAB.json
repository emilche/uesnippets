[
  {
    "label": "BiCGSTAB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BiCGSTAB"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "bicgstab()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BICGSTAB_H # define EIGEN_BICGSTAB_H namespace Eigen { namespace internal { template<MatrixType,Rhs,Dest,Preconditioner> bool)",
    "insertText": "bicgstab(const MatrixType& mat, const Rhs& rhs, Dest& x, const Preconditioner& precond, Index& iters, typename Dest::RealScalar& tol_error)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; typedef Dest::RealScalar RealScalar ; typedef Dest::Scalar Scalar ; typedef Matrix<Scalar,Dynamic,1> VectorType ; RealScalar tol = tol_error ; Index maxIters = iters ; Index n = mat .)",
    "insertText": "cols()"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (VectorType r = rhs - mat* x ; VectorType r0 = r ; RealScalar r0_sqnorm = r0 .)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "y(n), z(n)"
  },
  {
    "label": "kt()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "kt(n), ks(n)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "s(n), t(n)"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (RealScalar tol2 = tol* tol* rhs_sqnorm ; RealScalar eps2 = NumTraits<Scalar)",
    "insertText": "epsilon()*NumTraits<Scalar>::epsilon()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ; Index restarts = 0 ;)",
    "insertText": "while(r.squaredNorm() > tol2 && i<maxIters)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (Scalar rho_old = rho ; rho = r0 .)",
    "insertText": "dot(r)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "beta(rho/rho_old) * (alpha / w)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (p = r +)",
    "insertText": "beta(p - w * v)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (y = precond .)",
    "insertText": "solve(p)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "noalias()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (alpha = rho / r0 .)",
    "insertText": "dot(v)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (s = r - alpha* v ; z = precond .)",
    "insertText": "solve(s)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (x + = alpha* y + w* z ; r = s - w* t ; + + i ; } tol_error =)",
    "insertText": "sqrt(r.squaredNorm()/rhs_sqnorm)"
  },
  {
    "label": "BiCGSTAB()",
    "kind": "Method",
    "detail": "Function (iters = i ; return true ; } } template<_MatrixType,_Preconditioner = DiagonalPreconditioner<_MatrixType::Scalar>> class BiCGSTAB ; namespace internal { template<_MatrixType,_Preconditioner> struct traits<BiCGSTAB<_MatrixType,_Preconditioner>> { typedef _MatrixType MatrixType ; typedef _Preconditioner Preconditioner ; } ; } template<_MatrixType,_Preconditioner> class BiCGSTAB : public IterativeSolverBase<BiCGSTAB<_MatrixType,_Preconditioner>> { typedef IterativeSolverBase<BiCGSTAB> Base ; using Base::matrix ; using Base::m_error ; using Base::m_iterations ; using Base::m_info ; using Base::m_isInitialized ; public : typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef _Preconditioner Preconditioner ; public :)",
    "insertText": "BiCGSTAB() : Base()"
  },
  {
    "label": "BiCGSTAB()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "BiCGSTAB(const EigenBase<MatrixDerived>& A) : Base(A.derived())"
  },
  {
    "label": "BiCGSTAB()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "BiCGSTAB()"
  },
  {
    "label": "_solve_vector_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_vector_with_guess_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "maxIterations()",
    "kind": "Method",
    "detail": "Function (m_iterations =)",
    "insertText": "maxIterations()"
  },
  {
    "label": "bicgstab()",
    "kind": "Method",
    "detail": "Function (m_error = Base::m_tolerance ; bool ret =)",
    "insertText": "bicgstab(matrix(), b, x, Base::m_preconditioner, m_iterations, m_error)"
  },
  {
    "label": "m_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_info(!ret)"
  }
]