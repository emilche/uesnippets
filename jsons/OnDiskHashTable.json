[
  {
    "label": "OnDiskChainedHashTableGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnDiskChainedHashTableGenerator"
  },
  {
    "label": "Item",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Item"
  },
  {
    "label": "Bucket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Bucket"
  },
  {
    "label": "OnDiskChainedHashTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnDiskChainedHashTable"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "OnDiskIterableChainedHashTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnDiskIterableChainedHashTable"
  },
  {
    "label": "key_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "key_iterator"
  },
  {
    "label": "data_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "data_iterator"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_ONDISKHASHTABLE_H # define LLVM_SUPPORT_ONDISKHASHTABLE_H # include \" llvm / Support / AlignOf . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / EndianStream . h \" # include \" llvm / Support / Host . h \" # include \" llvm / Support / MathExtras . h \" # include \" llvm / Support / raw_ostream . h \" # include<cassert> # include<cstdlib> namespace llvm { template<Info> class OnDiskChainedHashTableGenerator { class Item { public : Info::key_type Key ; Info::data_type Data ; Item* Next ; const Info::hash_value_type Hash ;)",
    "insertText": "Item(typename Info::key_type_ref Key, typename Info::data_type_ref Data, Info &InfoObj) : Key(Key), Data(Data), Next(nullptr), Hash(InfoObj.ComputeHash(Key))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} } ; typedef Info::offset_type offset_type ; offset_type NumBuckets ; offset_type NumEntries ; llvm::SpecificBumpPtrAllocator<Item> BA ; struct Bucket { offset_type Off ; unsigned Length ; Item* Head ; } ; Bucket* Buckets ; private : void)",
    "insertText": "insert(Bucket *Buckets, size_t Size, Item *E)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (Bucket& B = Buckets [ E ->)",
    "insertText": "Hash(Size - 1)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (E -> Next = B . Head ; + + B . Length ; B . Head = E ; } void)",
    "insertText": "resize(size_t NewSize)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (Bucket* NewBuckets = new Bucket [ NewSize ] ;)",
    "insertText": "memset(NewBuckets, 0, NewSize * sizeof(Bucket))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Item* N = E -> Next ; E -> Next = nullptr ;)",
    "insertText": "insert(NewBuckets, NewSize, E)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (E = N ; } delete [ ] Buckets ; NumBuckets = NewSize ; Buckets = NewBuckets ; } public : void)",
    "insertText": "insert(typename Info::key_type_ref Key, typename Info::data_type_ref Data)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Info InfoObj ;)",
    "insertText": "insert(Key, Data, InfoObj)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(typename Info::key_type_ref Key, typename Info::data_type_ref Data, Info &InfoObj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + NumEntries ;)",
    "insertText": "if(4 * NumEntries >= 3 * NumBuckets) resize(NumBuckets * 2)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(Buckets, NumBuckets, new (BA.Allocate()) Item(Key, Data, InfoObj))"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} offset_type)",
    "insertText": "Emit(raw_ostream &Out)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (Info InfoObj ; return)",
    "insertText": "Emit(Out, InfoObj)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (} offset_type)",
    "insertText": "Emit(raw_ostream &Out, Info &InfoObj)"
  },
  {
    "label": "LE()",
    "kind": "Method",
    "detail": "Function (using namespace llvm::support ; endian::Writer<little>)",
    "insertText": "LE(Out)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Bucket& B = Buckets [ I ] ;)",
    "insertText": "if(!B.Head)"
  },
  {
    "label": "tell()",
    "kind": "Method",
    "detail": "Function (B . Off = Out .)",
    "insertText": "tell()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(B.Off && \"Cannot write a bucket at offset 0. Please add padding.\")"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (LE . write<)",
    "insertText": "uint16_t(B.Length)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(B.Length != 0 && \"Bucket has a head but zero length?\")"
  },
  {
    "label": "hash_value_type()",
    "kind": "Method",
    "detail": "Function (LE . write<)",
    "insertText": "hash_value_type(I->Hash)"
  },
  {
    "label": "EmitKeyDataLength()",
    "kind": "Method",
    "detail": "Function (const std::pair<offset_type,offset_type>& Len = InfoObj .)",
    "insertText": "EmitKeyDataLength(Out, I->Key, I->Data)"
  },
  {
    "label": "EmitKey()",
    "kind": "Method",
    "detail": "Function (InfoObj .)",
    "insertText": "EmitKey(Out, I->Key, Len.first)"
  },
  {
    "label": "EmitData()",
    "kind": "Method",
    "detail": "Function (InfoObj .)",
    "insertText": "EmitData(Out, I->Key, I->Data, Len.second)"
  },
  {
    "label": "OffsetToAlignment()",
    "kind": "Method",
    "detail": "Function (uint64_t N =)",
    "insertText": "OffsetToAlignment(TableOff, alignOf<offset_type>())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TableOff + = N ;)",
    "insertText": "while(N--) LE.write<uint8_t>(0)"
  },
  {
    "label": "offset_type()",
    "kind": "Method",
    "detail": "Function (LE . write<)",
    "insertText": "offset_type(NumBuckets)"
  },
  {
    "label": "offset_type()",
    "kind": "Method",
    "detail": "Function (LE . write<)",
    "insertText": "offset_type(NumEntries)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (NumEntries = 0 ; NumBuckets = 6 4 ; Buckets = new Bucket [ NumBuckets ] ;)",
    "insertText": "memset(Buckets, 0, NumBuckets * sizeof(Bucket))"
  },
  {
    "label": "OnDiskChainedHashTableGenerator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OnDiskChainedHashTableGenerator()"
  },
  {
    "label": "OnDiskChainedHashTable()",
    "kind": "Method",
    "detail": "Function (delete [ ] Buckets ; } } ; template<Info> class OnDiskChainedHashTable { const Info::offset_type NumBuckets ; const Info::offset_type NumEntries ; const unsigned char* const Buckets ; const unsigned char* const Base ; Info InfoObj ; public : typedef Info::internal_key_type internal_key_type ; typedef Info::external_key_type external_key_type ; typedef Info::data_type data_type ; typedef Info::hash_value_type hash_value_type ; typedef Info::offset_type offset_type ;)",
    "insertText": "OnDiskChainedHashTable(offset_type NumBuckets, offset_type NumEntries, const unsigned char *Buckets, const unsigned char *Base, const Info &InfoObj = Info()) : NumBuckets(NumBuckets), NumEntries(NumEntries), Buckets(Buckets), Base(Base), InfoObj(InfoObj)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((reinterpret_cast<uintptr_t>(Buckets) & 0x3) == 0 && \"'buckets' must have a 4-byte alignment\")"
  },
  {
    "label": "getNumBuckets()",
    "kind": "Method",
    "detail": "Function (} offset_type)",
    "insertText": "getNumBuckets()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "iterator(const internal_key_type K, const unsigned char *D, offset_type L, Info *InfoObj) : Key(K), Data(D), Len(L), InfoObj(InfoObj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} data_type)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const iterator &X)"
  },
  {
    "label": "GetInternalKey()",
    "kind": "Method",
    "detail": "Function (const internal_key_type& IKey = InfoObj .)",
    "insertText": "GetInternalKey(EKey)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (hash_value_type KeyHash = InfoObj .)",
    "insertText": "ComputeHash(IKey)"
  },
  {
    "label": "find_hashed()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find_hashed(const internal_key_type &IKey, hash_value_type KeyHash, Info *InfoPtr = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace llvm::support ;)",
    "insertText": "if(!InfoPtr)"
  },
  {
    "label": "KeyHash()",
    "kind": "Method",
    "detail": "Function (offset_type Idx =)",
    "insertText": "KeyHash(NumBuckets - 1)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const unsigned char* Bucket = Buckets +)",
    "insertText": "sizeof(offset_type)"
  },
  {
    "label": "aligned()",
    "kind": "Method",
    "detail": "Function (offset_type Offset = endian::readNext<offset_type,little,)",
    "insertText": "aligned(Bucket)"
  },
  {
    "label": "unaligned()",
    "kind": "Method",
    "detail": "Function (const unsigned char* Items = Base + Offset ; unsigned Len = endian::readNext<uint16_t,little,)",
    "insertText": "unaligned(Items)"
  },
  {
    "label": "ReadKeyDataLength()",
    "kind": "Method",
    "detail": "Function (const std::pair<offset_type,offset_type>& L =)",
    "insertText": "ReadKeyDataLength(Items)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (offset_type ItemLen = L . first + L . second ;)",
    "insertText": "if(ItemHash != KeyHash)"
  },
  {
    "label": "ReadKey()",
    "kind": "Method",
    "detail": "Function (Items + = ItemLen ; continue ; } const internal_key_type& X = InfoPtr ->)",
    "insertText": "ReadKey((const unsigned char *const)Items, L.first)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (Items + = ItemLen ; continue ; } return)",
    "insertText": "iterator(X, Items + L.first, L.second, InfoPtr)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "iterator()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "getInfoObj()",
    "kind": "Method",
    "detail": "Function (} Info&)",
    "insertText": "getInfoObj()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (using namespace llvm::support ;)",
    "insertText": "assert(Buckets > Base)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((reinterpret_cast<uintptr_t>(Buckets) & 0x3) == 0 && \"buckets should be 4-byte aligned.\")"
  },
  {
    "label": "aligned()",
    "kind": "Method",
    "detail": "Function (offset_type NumBuckets = endian::readNext<offset_type,little,)",
    "insertText": "aligned(Buckets)"
  },
  {
    "label": "OnDiskIterableChainedHashTable()",
    "kind": "Method",
    "detail": "Function (} } ; template<Info> class OnDiskIterableChainedHashTable : public OnDiskChainedHashTable<Info> { const unsigned char* Payload ; public : typedef OnDiskChainedHashTable<Info> base_type ; typedef base_type::internal_key_type internal_key_type ; typedef base_type::external_key_type external_key_type ; typedef base_type::data_type data_type ; typedef base_type::hash_value_type hash_value_type ; typedef base_type::offset_type offset_type ;)",
    "insertText": "OnDiskIterableChainedHashTable(offset_type NumBuckets, offset_type NumEntries, const unsigned char *Buckets, const unsigned char *Payload, const unsigned char *Base, const Info &InfoObj = Info()) : base_type(NumBuckets, NumEntries, Buckets, Base, InfoObj), Payload(Payload)"
  },
  {
    "label": "key_iterator()",
    "kind": "Method",
    "detail": "Function (} class key_iterator { const unsigned char* Ptr ; offset_type NumItemsInBucketLeft ; offset_type NumEntriesLeft ; Info* InfoObj ; public : typedef external_key_type value_type ;)",
    "insertText": "key_iterator(const unsigned char *const Ptr, offset_type NumEntries, Info *InfoObj) : Ptr(Ptr), NumItemsInBucketLeft(0), NumEntriesLeft(NumEntries), InfoObj(InfoObj)"
  },
  {
    "label": "key_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "key_iterator() : Ptr(nullptr), NumItemsInBucketLeft(0), NumEntriesLeft(0), InfoObj(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const key_iterator &X, const key_iterator &Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace llvm::support ;)",
    "insertText": "if(!NumItemsInBucketLeft)"
  },
  {
    "label": "unaligned()",
    "kind": "Method",
    "detail": "Function (NumItemsInBucketLeft = endian::readNext<uint16_t,little,)",
    "insertText": "unaligned(Ptr)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} Ptr + =)",
    "insertText": "sizeof(hash_value_type)"
  },
  {
    "label": "ReadKeyDataLength()",
    "kind": "Method",
    "detail": "Function (const std::pair<offset_type,offset_type>& L =)",
    "insertText": "ReadKeyDataLength(Ptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Ptr + = L . first + L . second ;)",
    "insertText": "assert(NumItemsInBucketLeft)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (- - NumItemsInBucketLeft ;)",
    "insertText": "assert(NumEntriesLeft)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - NumEntriesLeft ; return* this ; } key_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "ReadKeyDataLength()",
    "kind": "Method",
    "detail": "Function (const std::pair<offset_type,offset_type>& L =)",
    "insertText": "ReadKeyDataLength(LocalPtr)"
  },
  {
    "label": "ReadKey()",
    "kind": "Method",
    "detail": "Function (const internal_key_type& Key = InfoObj ->)",
    "insertText": "ReadKey(LocalPtr, L.first)"
  },
  {
    "label": "key_begin()",
    "kind": "Method",
    "detail": "Function (} } ; key_iterator)",
    "insertText": "key_begin()"
  },
  {
    "label": "key_end()",
    "kind": "Method",
    "detail": "Function (} key_iterator)",
    "insertText": "key_end()"
  },
  {
    "label": "keys()",
    "kind": "Method",
    "detail": "Function (} iterator_range<key_iterator>)",
    "insertText": "keys()"
  },
  {
    "label": "data_iterator()",
    "kind": "Method",
    "detail": "Function (} class data_iterator { const unsigned char* Ptr ; offset_type NumItemsInBucketLeft ; offset_type NumEntriesLeft ; Info* InfoObj ; public : typedef data_type value_type ;)",
    "insertText": "data_iterator(const unsigned char *const Ptr, offset_type NumEntries, Info *InfoObj) : Ptr(Ptr), NumItemsInBucketLeft(0), NumEntriesLeft(NumEntries), InfoObj(InfoObj)"
  },
  {
    "label": "data_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "data_iterator() : Ptr(nullptr), NumItemsInBucketLeft(0), NumEntriesLeft(0), InfoObj(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const data_iterator &X)"
  },
  {
    "label": "data_begin()",
    "kind": "Method",
    "detail": "Function (} } ; data_iterator)",
    "insertText": "data_begin()"
  },
  {
    "label": "data_end()",
    "kind": "Method",
    "detail": "Function (} data_iterator)",
    "insertText": "data_end()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} iterator_range<data_iterator>)",
    "insertText": "data()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} OnDiskIterableChainedHashTable*)",
    "insertText": "Create(const unsigned char *Buckets, const unsigned char *const Payload, const unsigned char *const Base, const Info &InfoObj = Info())"
  }
]