[
  {
    "label": "FHierarchicalLogArchive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalLogArchive"
  },
  {
    "label": "FDataLayerInstanceNames",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataLayerInstanceNames"
  },
  {
    "label": "FWorldPartitionDraw2DContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DContext"
  },
  {
    "label": "UExternalDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerAsset"
  },
  {
    "label": "UExternalDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerInstance"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWorldPartitionRuntimeCellStreamingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionRuntimeCellStreamingData"
  },
  {
    "label": "URuntimeHashExternalStreamingObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeHashExternalStreamingObjectBase"
  },
  {
    "label": "UWorldPartitionRuntimeHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeHash"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UExternalDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerManager"
  },
  {
    "label": "FWorldPartitionQueryCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionQueryCache"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "UWorldPartitionRuntimeCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeCell"
  },
  {
    "label": "UWorldPartitionRuntimeCellData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeCellData"
  },
  {
    "label": "URuntimePartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimePartition"
  },
  {
    "label": "FStreamingSourceCells",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingSourceCells"
  },
  {
    "label": "FAlwaysLoadedActorForPIE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlwaysLoadedActorForPIE"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Misc / Optional . h \" # include \" Engine / World . h \" # include \" WorldPartition . h \" # include \" WorldPartition / ActorDescList . h \" # include \" WorldPartition / WorldPartitionHandle . h \" # include \" WorldPartition / WorldPartitionRuntimeCell . h \" # include \" WorldPartition / WorldPartitionStreamingGeneration . h \" # include \" WorldPartition / WorldPartitionStreamingGenerationContext . h \" # include \" WorldPartition / WorldPartitionRuntimeContainerResolving . h \" # include \" WorldPartition / DataLayer / DataLayerInstanceProviderInterface . h \" # include \" WorldPartition / DataLayer / WorldDataLayers . h \" # if WITH_EDITOR # include \" CookPackageSplitter . h \" # include \" Misc / HierarchicalLogArchive . h \" # endif # include \" WorldPartitionRuntimeHash . generated . h \" struct FHierarchicalLogArchive ; struct FDataLayerInstanceNames ; class FWorldPartitionDraw2DContext ; class UExternalDataLayerAsset ; class UExternalDataLayerInstance ; float GBlockOnSlowStreamingRatio ; float GBlockOnSlowStreamingWarningFactor ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Good,Slow,Critical } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (public : class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (} # if DO_CHECK void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetOwningWorld()",
    "kind": "Method",
    "detail": "Function (# endif UWorld*)",
    "insertText": "GetOwningWorld()"
  },
  {
    "label": "GetOuterWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetOuterWorld()"
  },
  {
    "label": "ForEachStreamingCells()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachStreamingCells(TFunctionRef<void(UWorldPartitionRuntimeCell&)> Func)"
  },
  {
    "label": "OnStreamingObjectLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingObjectLoaded(UWorld* InjectedWorld)"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TSet<TObjectPtr<UDataLayerInstance>>&)",
    "insertText": "GetDataLayerInstances()"
  },
  {
    "label": "GetRootExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (} const UExternalDataLayerInstance*)",
    "insertText": "GetRootExternalDataLayerInstance()"
  },
  {
    "label": "GetLevelMountPointContextObject()",
    "kind": "Method",
    "detail": "Function (} const UObject*)",
    "insertText": "GetLevelMountPointContextObject()"
  },
  {
    "label": "IsLevelPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelPackage()"
  },
  {
    "label": "OnPrepareGeneratorPackageForCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPrepareGeneratorPackageForCook(TArray<UPackage*>& OutModifiedPackages)"
  },
  {
    "label": "OnPopulateGeneratedPackageForCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPopulateGeneratedPackageForCook(const IWorldPartitionCookPackageContext& InCookContext, UPackage* InPackage, TArray<UPackage*>& OutModifiedPackages)"
  },
  {
    "label": "GetCookedExternalStreamingObjectName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetCookedExternalStreamingObjectName()"
  },
  {
    "label": "DumpStateLog()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "DumpStateLog(FHierarchicalLogArchive& Ar)"
  },
  {
    "label": "GetCellForCookPackage()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionRuntimeCell*)",
    "insertText": "GetCellForCookPackage(const FString& InCookPackageName)"
  },
  {
    "label": "PrepareForCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareForCook(const IWorldPartitionCookPackageContext& InCookContext)"
  },
  {
    "label": "AddCellInfo()",
    "kind": "Method",
    "detail": "Function (# endif # if DO_CHECK TWeakObjectPtr<UWorldPartition> TargetInjectedWorldPartition ; # endif class UWorldPartition ; class UExternalDataLayerManager ; } ; struct FWorldPartitionQueryCache { public : void)",
    "insertText": "AddCellInfo(const UWorldPartitionRuntimeCell* Cell, const FSphericalSector& SourceShape)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : TMap<const UWorldPartitionRuntimeCell*,double> CellToSourceMinSqrDistances ; } ; struct FWorldPartitionStreamingContext { public : FWorldPartitionStreamingContext)",
    "insertText": "Create(const UWorld* InWorld)"
  },
  {
    "label": "FWorldPartitionStreamingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorldPartitionStreamingContext()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FWorldPartitionStreamingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorldPartitionStreamingContext(EWorldPartitionDataLayersLogicOperator InDataLayersLogicOperator, const FWorldDataLayersEffectiveStates& InDataLayerEffectiveStates, int32 InUpdateStreamingStateEpoch)"
  },
  {
    "label": "GetResolvingDataLayersRuntimeStateEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetResolvingDataLayersRuntimeStateEpoch()"
  },
  {
    "label": "GetUpdateStreamingStateEpoch()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetUpdateStreamingStateEpoch()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (bool bIsValid ; EWorldPartitionDataLayersLogicOperator DataLayersLogicOperator ; const FWorldDataLayersEffectiveStates* DataLayerEffectiveStates ; int32 UpdateStreamingStateEpoch ; class UWorldPartitionStreamingPolicy ; class UWorldPartitionRuntimeCell ; class UWorldPartitionRuntimeCellData ; } ;)",
    "insertText": "UCLASS(Abstract, Config=Engine, AutoExpandCategories=(WorldPartition), Within=WorldPartition, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "SetDefaultValues()",
    "kind": "Method",
    "detail": "Function (class URuntimePartition ; # if WITH_EDITOR void)",
    "insertText": "SetDefaultValues()"
  },
  {
    "label": "SupportsHLODs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsHLODs()"
  },
  {
    "label": "GenerateStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreaming(class UWorldPartitionStreamingPolicy* StreamingPolicy, const IStreamingGenerationContext* StreamingGenerationContext, TArray<FString>* OutPackagesToGenerate)"
  },
  {
    "label": "SetupHLODActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupHLODActors(const IStreamingGenerationContext* StreamingGenerationContext, const UWorldPartition::FSetupHLODActorsParams& Params)"
  },
  {
    "label": "HasStreamingContent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasStreamingContent()"
  },
  {
    "label": "FlushStreamingContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushStreamingContent()"
  },
  {
    "label": "GetExternalStreamingObjectClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<URuntimeHashExternalStreamingObjectBase>)",
    "insertText": "GetExternalStreamingObjectClass() const PURE_VIRTUAL(UWorldPartitionRuntimeHash::GetExternalStreamingObjectClass, return nullptr;)"
  },
  {
    "label": "PrepareEditorGameWorld()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "PrepareEditorGameWorld()"
  },
  {
    "label": "ShutdownEditorGameWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownEditorGameWorld()"
  },
  {
    "label": "StoreStreamingContentToExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "StoreStreamingContentToExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* OutExternalStreamingObject)"
  },
  {
    "label": "PopulateCellActorInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateCellActorInstances(const TArray<const IStreamingGenerationContext::FActorSetInstance*>& ActorSetInstances, bool bIsMainWorldPartition, bool bIsCellAlwaysLoaded, TArray<IStreamingGenerationContext::FActorInstance>& OutCellActorInstances)"
  },
  {
    "label": "PopulateRuntimeCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateRuntimeCell(UWorldPartitionRuntimeCell* RuntimeCell, const TArray<IStreamingGenerationContext::FActorInstance>& ActorInstances, TArray<FString>* OutPackagesToGenerate)"
  },
  {
    "label": "AddCell()",
    "kind": "Method",
    "detail": "Function (# endif public : class FStreamingSourceCells { public : void)",
    "insertText": "AddCell(const UWorldPartitionRuntimeCell* Cell, const FWorldPartitionStreamingSource& Source, const FSphericalSector& SourceShape, const FWorldPartitionStreamingContext& Context)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetCells()",
    "kind": "Method",
    "detail": "Function (} TSet<const UWorldPartitionRuntimeCell*>&)",
    "insertText": "GetCells()"
  },
  {
    "label": "ForEachStreamingCells()",
    "kind": "Method",
    "detail": "Function (} private : TSet<const UWorldPartitionRuntimeCell*> Cells ; } ; void)",
    "insertText": "ForEachStreamingCells(TFunctionRef<bool(const UWorldPartitionRuntimeCell*)> Func)"
  },
  {
    "label": "ForEachStreamingCellsQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachStreamingCellsQuery(const FWorldPartitionStreamingQuerySource& QuerySource, TFunctionRef<bool(const UWorldPartitionRuntimeCell*)> Func, FWorldPartitionQueryCache* QueryCache = nullptr)"
  },
  {
    "label": "ForEachStreamingCellsSources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachStreamingCellsSources(const TArray<FWorldPartitionStreamingSource>& Sources, TFunctionRef<bool(const UWorldPartitionRuntimeCell*, EStreamingSourceTargetState)> Func, const FWorldPartitionStreamingContext& Context = FWorldPartitionStreamingContext())"
  },
  {
    "label": "ComputeUpdateStreamingHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ComputeUpdateStreamingHash()"
  },
  {
    "label": "GetStreamingPerformance()",
    "kind": "Method",
    "detail": "Function (EWorldPartitionStreamingPerformance)",
    "insertText": "GetStreamingPerformance(const TSet<const UWorldPartitionRuntimeCell*>& CellToActivate)"
  },
  {
    "label": "IsExternalStreamingObjectInjected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalStreamingObjectInjected(URuntimeHashExternalStreamingObjectBase* InExternalStreamingObject)"
  },
  {
    "label": "InjectExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InjectExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "RemoveExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "Draw2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Draw2D(FWorldPartitionDraw2DContext& DrawContext)"
  },
  {
    "label": "ContainsRuntimeHash()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsRuntimeHash(const FString& Name)"
  },
  {
    "label": "CreateRuntimeCell()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionRuntimeCell*)",
    "insertText": "CreateRuntimeCell(UClass* CellClass, UClass* CellDataClass, const FString& CellName, const FString& CellInstanceSuffix, UObject* InOuter = nullptr)"
  },
  {
    "label": "GetStreamingPerformanceForCell()",
    "kind": "Method",
    "detail": "Function (protected : EWorldPartitionStreamingPerformance)",
    "insertText": "GetStreamingPerformanceForCell(const UWorldPartitionRuntimeCell* Cell)"
  },
  {
    "label": "FAlwaysLoadedActorForPIE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA struct FAlwaysLoadedActorForPIE {)",
    "insertText": "FAlwaysLoadedActorForPIE(const FWorldPartitionReference& InReference, AActor* InActor) : Reference(InReference), Actor(InActor)"
  },
  {
    "label": "ForceExternalActorLevelReference()",
    "kind": "Method",
    "detail": "Function (} FWorldPartitionReference Reference ; TWeakObjectPtr<AActor> Actor ; } ; TArray<FAlwaysLoadedActorForPIE> AlwaysLoadedActorsForPIE ; TMap<FString,TObjectPtr<UWorldPartitionRuntimeCell>> PackagesToGenerateForCook ; # endif protected : # if WITH_EDITOR void)",
    "insertText": "ForceExternalActorLevelReference(bool bForceExternalActorLevelReferenceForPIE)"
  },
  {
    "label": "ResolveBlockOnSlowStreamingForCell()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveBlockOnSlowStreamingForCell(bool bInOwnerBlockOnSlowStreaming, bool bInIsHLODCell, const TArray<const UDataLayerInstance*>& InCellDataLayerInstances)"
  },
  {
    "label": "SupportsWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (# endif TSet<TWeakObjectPtr<URuntimeHashExternalStreamingObjectBase>> InjectedExternalStreamingObjects ; bool)",
    "insertText": "SupportsWorldAssetStreaming(const FName& InTargetGrid)"
  },
  {
    "label": "UnregisterWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UnregisterWorldAssetStreaming(const FGuid& InWorldAssetStreamingGuid)"
  },
  {
    "label": "UWorldPartitionRuntimeHash()",
    "kind": "Method",
    "detail": "Function (class UWorldPartition ; using FRuntimeHashConvertFunc = TFunction<)",
    "insertText": "UWorldPartitionRuntimeHash(const UWorldPartitionRuntimeHash*)"
  },
  {
    "label": "RegisterWorldPartitionRuntimeHashConverter()",
    "kind": "Method",
    "detail": "Function (TMap<TPair<const UClass*,const UClass*>,FRuntimeHashConvertFunc> WorldPartitionRuntimeHashConverters ; public : void)",
    "insertText": "RegisterWorldPartitionRuntimeHashConverter(const UClass* InSrcClass, const UClass* InDstClass, FRuntimeHashConvertFunc&& InConverter)"
  },
  {
    "label": "ConvertWorldPartitionHash()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionRuntimeHash*)",
    "insertText": "ConvertWorldPartitionHash(const UWorldPartitionRuntimeHash* InSrcHash, const UClass* InDstClass)"
  },
  {
    "label": "ExecutePreSetupHLODActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePreSetupHLODActors(const UWorldPartition* InWorldPartition, const UWorldPartition::FSetupHLODActorsParams& InParams)"
  },
  {
    "label": "ExecutePostSetupHLODActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePostSetupHLODActors(const UWorldPartition* InWorldPartition, const UWorldPartition::FSetupHLODActorsParams& InParams)"
  },
  {
    "label": "PreSetupHLODActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSetupHLODActors(const UWorldPartition* InWorldPartition, const UWorldPartition::FSetupHLODActorsParams& InParams)"
  },
  {
    "label": "PostSetupHLODActors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostSetupHLODActors(const UWorldPartition* InWorldPartition, const UWorldPartition::FSetupHLODActorsParams& InParams)"
  }
]