[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TBaseTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseTest"
  },
  {
    "label": "TTestRunner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTestRunner"
  },
  {
    "label": "TTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTest"
  },
  {
    "label": "FFunctionRegistrar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionRegistrar"
  },
  {
    "label": "_ClassName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ClassName"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "F"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / Engine . h \" # include \" Misc / AutomationTest . h \" # include \" HAL / Platform . h \" # include \" Commands / TestCommands . h \" # include \" Commands / TestCommandBuilder . h \" # include \" Assert / NoDiscardAsserter . h \" namespace TestDirectoryGenerator { FString)",
    "insertText": "Generate(const FString& Filename)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} enum class ECQTestSuppressLogBehavior { Default,True,False } ; const FString GenerateTestDirectory =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (EAutomationTestFlags DefaultFlags = EAutomationTestFlags_ApplicationContextMask | EAutomationTestFlags::ProductFilter ; template<T> concept HasBeforeAll =)",
    "insertText": "requires(T t)"
  },
  {
    "label": "BeforeAll()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "BeforeAll(FString())"
  },
  {
    "label": "AfterAll()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "AfterAll(FString())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using BeforeAfterAllFunc =)",
    "insertText": "void(*)(const FString&)"
  },
  {
    "label": "TBaseTest()",
    "kind": "Method",
    "detail": "Function (template<AsserterType> struct TBaseTest {)",
    "insertText": "TBaseTest(FAutomationTestBase& TestRunner, bool bInitializing)"
  },
  {
    "label": "TBaseTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBaseTest(const TBaseTest<AsserterType>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TBaseTest&)",
    "insertText": "operator(const TBaseTest<AsserterType>& rhs)"
  },
  {
    "label": "TBaseTest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TBaseTest()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TearDown()"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCommand(IAutomationLatentCommand* Cmd)"
  },
  {
    "label": "AddCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCommand(TSharedPtr<IAutomationLatentCommand> Cmd)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(const FString& InError)"
  },
  {
    "label": "AddErrorIfFalse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddErrorIfFalse(bool bCondition, const FString& InError)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FString& InWarning)"
  },
  {
    "label": "AddInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInfo(const FString& InLogItem)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTest(const FString& MethodName)"
  },
  {
    "label": "AsserterType()",
    "kind": "Method",
    "detail": "Function (bool bInitializing { true } ; BeforeAfterAllFunc BeforeAllFunc = nullptr ; BeforeAfterAllFunc AfterAllFunc = nullptr ; FAutomationTestBase& TestRunner ; AsserterType Assert ; FTestCommandBuilder TestCommandBuilder ; } ; template<AsserterType> struct TTestRunner ; template<AsserterType> using TTestInstanceGenerator = TUniquePtr<TBaseTest<)",
    "insertText": "AsserterType(*)(TTestRunner<AsserterType>&)"
  },
  {
    "label": "TTestRunner()",
    "kind": "Method",
    "detail": "Function (template<AsserterType> struct TTestRunner : public FAutomationTestBase {)",
    "insertText": "TTestRunner(FString Name, int32 LineNumber, const char* FileName, FString TestDir, EAutomationTestFlags TestFlags, TTestInstanceGenerator<AsserterType> Factory)"
  },
  {
    "label": "TTestRunner()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TTestRunner()"
  },
  {
    "label": "GetTestFlags()",
    "kind": "Method",
    "detail": "Function (EAutomationTestFlags)",
    "insertText": "GetTestFlags()"
  },
  {
    "label": "GetTestSourceFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTestSourceFileName()"
  },
  {
    "label": "GetTestSourceFileLine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTestSourceFileLine()"
  },
  {
    "label": "GetTestSourceFileLine()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTestSourceFileLine(const FString& Name)"
  },
  {
    "label": "SuppressLogWarnings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuppressLogWarnings()"
  },
  {
    "label": "SuppressLogErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuppressLogErrors()"
  },
  {
    "label": "GetTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTests(TArray<FString>& OutBeautifiedNames, TArray<FString>& OutTestCommands)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunTest(const FString& RequestedTest)"
  },
  {
    "label": "SetSuppressLogWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressLogWarnings(ECQTestSuppressLogBehavior Behavior = ECQTestSuppressLogBehavior::True)"
  },
  {
    "label": "SetSuppressLogErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuppressLogErrors(ECQTestSuppressLogBehavior Behavior = ECQTestSuppressLogBehavior::True)"
  },
  {
    "label": "GetBeautifiedTestName()",
    "kind": "Method",
    "detail": "Function (protected : FString)",
    "insertText": "GetBeautifiedTestName()"
  },
  {
    "label": "GetRequiredDeviceNum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRequiredDeviceNum()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (ECQTestSuppressLogBehavior SuppressLogWarningsBehavior { ECQTestSuppressLogBehavior::Default } ; ECQTestSuppressLogBehavior SuppressLogErrorsBehavior { ECQTestSuppressLogBehavior::Default } ; } ; template<Derived,AsserterType> struct TTest : TBaseTest<AsserterType> { using TestMethod =)",
    "insertText": "void(Derived::*)()"
  },
  {
    "label": "TTest()",
    "kind": "Method",
    "detail": "Function (using DerivedType = Derived ;)",
    "insertText": "TTest() : TBaseTest<AsserterType>(*Derived::TestRunner, Derived::TestRunner->bInitializing)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (this -> BeforeAllFunc = Derived::BeforeAll ; } if)",
    "insertText": "constexpr(HasAfterAll<Derived>)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (this -> AfterAllFunc = Derived::AfterAll ; } } void)",
    "insertText": "RunTest(const FString& TestName)"
  },
  {
    "label": "FFunctionRegistrar()",
    "kind": "Method",
    "detail": "Function (struct FFunctionRegistrar {)",
    "insertText": "FFunctionRegistrar(FString Name, TestMethod Func, int32 LineNumber)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DerivedType::TestRunner -> TestNames .)",
    "insertText": "Add(Name)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DerivedType::Methods .)",
    "insertText": "Add(Name, Func)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DerivedType::TestRunner -> TestLineNumbers .)",
    "insertText": "Add(Name, LineNumber)"
  },
  {
    "label": "CreateTestClass()",
    "kind": "Method",
    "detail": "Function (} } ; TUniquePtr<TBaseTest<AsserterType>>)",
    "insertText": "CreateTestClass(TTestRunner<AsserterType>& TestRunnerInstance)"
  },
  {
    "label": "DerivedType()",
    "kind": "Method",
    "detail": "Function (DerivedType::TestRunner =& TestRunnerInstance ; return MakeUnique<)",
    "insertText": "DerivedType()"
  },
  {
    "label": "_TEST_CLASS_IMPL()",
    "kind": "Method",
    "detail": "Function (} TMap<FString,TestMethod> Methods { } ; TTestRunner<AsserterType>* TestRunner { nullptr } ; } ; # if WITH_AUTOMATION_WORKER # define)",
    "insertText": "_TEST_CLASS_IMPL(_ClassName, _TestDir, _BaseClass, _AsserterType, _TestFlags)"
  },
  {
    "label": "_Runner()",
    "kind": "Method",
    "detail": "Function (\\ struct F # # _ClassName # # _Runner : public TTestRunner<_AsserterType> \\ { \\ F # # _ClassName # #)",
    "insertText": "_Runner() \\ : TTestRunner(#_ClassName, __LINE__, __FILE__, _TestDir, _TestFlags, TTest<_ClassName, _AsserterType>::CreateTestClass)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!!((_TestFlags) & EAutomationTestFlags_ApplicationContextMask), \\ \"CQTest has no application flag and will not run. See AutomationTest.h.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(!!(((_TestFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::SmokeFilter) || \\ !!(((_TestFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::EngineFilter) || \\ !!(((_TestFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::ProductFilter) || \\ !!(((_TestFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::PerfFilter) || \\ !!(((_TestFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::StressFilter) || \\ !!(((_TestFlags) & EAutomationTestFlags_FilterMask) == EAutomationTestFlags::NegativeFilter), \\ \"All CQTests must have exactly 1 filter type specified. See AutomationTest.h.\")"
  },
  {
    "label": "TEST_METHOD()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ F # # _ClassName # # _Runner _ClassName # # _RunnerInstance ; \\ struct _ClassName : public _BaseClass<_ClassName,_AsserterType> # define)",
    "insertText": "TEST_METHOD(_MethodName)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FString(#_MethodName)"
  },
  {
    "label": "_MethodName()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "_MethodName() #else #define _TEST_CLASS_IMPL(_ClassName, _TestDir, _BaseClass, _AsserterType, _TestFlags) \\ struct _ClassName : public _BaseClass<_ClassName, _AsserterType> #define TEST_METHOD(_MethodName) void _MethodName() #endif #define TEST_CLASS_WITH_ASSERTS(_ClassName, _TestDir, _AsserterType) _TEST_CLASS_IMPL(_ClassName, _TestDir, TTest, _AsserterType, DefaultFlags) #define TEST_CLASS(_ClassName, _TestDir) TEST_CLASS_WITH_ASSERTS(_ClassName, _TestDir, FNoDiscardAsserter) #define TEST_CLASS_WITH_BASE(_ClassName, _TestDir, _BaseClass) _TEST_CLASS_IMPL(_ClassName, _TestDir, _BaseClass, FNoDiscardAsserter, DefaultFlags) #define TEST_CLASS_WITH_FLAGS(_ClassName, _TestDir, _Flags) _TEST_CLASS_IMPL(_ClassName, _TestDir, TTest, FNoDiscardAsserter, _Flags) #define TEST_CLASS_WITH_BASE_AND_FLAGS(_ClassName, _TestDir, _BaseClass, _Flags) _TEST_CLASS_IMPL(_ClassName, _TestDir, _BaseClass, FNoDiscardAsserter, _Flags) #define TEST(_TestName, _TestDir) \\ TEST_CLASS(_TestName, _TestDir)"
  },
  {
    "label": "TEST_METHOD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TEST_METHOD(_TestName##_Method)"
  },
  {
    "label": "_Method()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ void _TestName::_TestName # #)",
    "insertText": "_Method() #define ASSERT_THAT(_assertion) if (!Assert._assertion)"
  }
]