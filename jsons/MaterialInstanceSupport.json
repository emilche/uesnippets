[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FMaterialInstanceCachedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInstanceCachedData"
  },
  {
    "label": "FMICReentranceGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMICReentranceGuard"
  },
  {
    "label": "FHashedMaterialParameterInfoPacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHashedMaterialParameterInfoPacked"
  },
  {
    "label": "THashedMaterialParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THashedMaterialParameterMap"
  },
  {
    "label": "TNamedParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNamedParameter"
  },
  {
    "label": "FMaterialInstanceResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialInstanceResource"
  },
  {
    "label": "FMaterialInstanceParameterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInstanceParameterSet"
  },
  {
    "label": "CacheMaterialInstanceUniformExpressions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderingThread . h \" # include \" MaterialShared . h \" # include \" Materials / MaterialInstance . h \" # include \" Materials / MaterialRenderProxy . h \" # include \" HAL / LowLevelMemTracker . h \" # include<limits> class UTexture ; struct FMaterialInstanceCachedData ; void)",
    "insertText": "CacheMaterialInstanceUniformExpressions(const UMaterialInstance* MaterialInstance, bool bRecreateUniformBuffer = false)"
  },
  {
    "label": "RecacheMaterialInstanceUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecacheMaterialInstanceUniformExpressions(const UMaterialInterface* ParentMaterial, bool bRecreateUniformBuffer)"
  },
  {
    "label": "FMICReentranceGuard()",
    "kind": "Method",
    "detail": "Function (class FMICReentranceGuard { public : # if ! WITH_EDITOR)",
    "insertText": "FMICReentranceGuard(const UMaterialInstance* InMaterial)"
  },
  {
    "label": "IsInGameThread()",
    "kind": "Method",
    "detail": "Function (bIsInGameThread =)",
    "insertText": "IsInGameThread()"
  },
  {
    "label": "UMaterialInstance()",
    "kind": "Method",
    "detail": "Function (Material = const_cast<)",
    "insertText": "UMaterialInstance(InMaterial)"
  },
  {
    "label": "SetReentrantFlag()",
    "kind": "Method",
    "detail": "Function (} Material ->)",
    "insertText": "SetReentrantFlag(true, bIsInGameThread)"
  },
  {
    "label": "FMICReentranceGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMICReentranceGuard()"
  },
  {
    "label": "SetReentrantFlag()",
    "kind": "Method",
    "detail": "Function (Material ->)",
    "insertText": "SetReentrantFlag(false, bIsInGameThread)"
  },
  {
    "label": "FHashedMaterialParameterInfoPacked()",
    "kind": "Method",
    "detail": "Function (} private : bool bIsInGameThread ; UMaterialInstance* Material ; # endif } ; struct FHashedMaterialParameterInfoPacked { FScriptName Name ; int16 Index = 0 ; uint16 HashNext : 1 4 ; uint16 Association : 2 ;)",
    "insertText": "FHashedMaterialParameterInfoPacked()"
  },
  {
    "label": "FHashedMaterialParameterInfoPacked()",
    "kind": "Method",
    "detail": "Function (HashNext = 0 ; Association = 0 ; })",
    "insertText": "FHashedMaterialParameterInfoPacked(const struct FHashedMaterialParameterInfoPacked& Rhs) : Name(Rhs.Name), Index(Rhs.Index), HashNext(0), Association(Rhs.Association)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FHashedMaterialParameterInfoPacked&)",
    "insertText": "operator(const FHashedMaterialParameterInfo& InInfo)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Name = InInfo . Name ;)",
    "insertText": "Index(int16)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Association = InInfo . Association ; return* this ; } bool)",
    "insertText": "operator(const FHashedMaterialParameterInfoPacked& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (int32 Key =)",
    "insertText": "GetTypeHash(Info.Name)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Key(Key << 15)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Key(Key >> 10)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Key(Key << 3)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Key(Key >> 6)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Key(Key << 11)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Key(Key >> 16)"
  },
  {
    "label": "HashAddOneItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HashAddOneItem(int32 AddedIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Array [ AddedIndex ] . Info . HashNext = 0 ;)",
    "insertText": "check(!HashTable.IsEmpty())"
  },
  {
    "label": "TypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 HashIndex =)",
    "insertText": "TypeHash(Array[AddedIndex].Info) & (HashTable.Num() - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ItemIndex = HashTable [ HashIndex ] ;)",
    "insertText": "if(!ItemIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HashTable [ HashIndex ] = AddedIndex + 1 ; } else { ItemIndex - - ;)",
    "insertText": "for(int32 NextItem = Array[ItemIndex].Info.HashNext; NextItem; NextItem = Array[NextItem].Info.HashNext)"
  },
  {
    "label": "HashNext()",
    "kind": "Method",
    "detail": "Function (ItemIndex = NextItem ; } Array [ ItemIndex ] . Info .)",
    "insertText": "HashNext(uint16)"
  },
  {
    "label": "HashAddAllItems()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HashAddAllItems(int32 NumHashBuckets = 0)"
  },
  {
    "label": "GetNumberOfHashBuckets()",
    "kind": "Method",
    "detail": "Function (NumHashBuckets =)",
    "insertText": "GetNumberOfHashBuckets(Array.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Array.IsEmpty())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (HashTable .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { HashTable .)",
    "insertText": "SetNumUninitialized(NumHashBuckets)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(HashTable.GetData(), 0, HashTable.Num() * HashTable.GetTypeSize())"
  },
  {
    "label": "HashAddOneItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashAddOneItem(Index)"
  },
  {
    "label": "FMaterialInstanceResource()",
    "kind": "Method",
    "detail": "Function (} } ; class FMaterialInstanceResource : public FMaterialRenderProxy { public :)",
    "insertText": "FMaterialInstanceResource(UMaterialInstance* InOwner)"
  },
  {
    "label": "GameThread_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThread_Destroy()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "GetMaterialNoFallback()",
    "kind": "Method",
    "detail": "Function (} const FMaterial*)",
    "insertText": "GetMaterialNoFallback(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetFallback()",
    "kind": "Method",
    "detail": "Function (const FMaterialRenderProxy*)",
    "insertText": "GetFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetMaterialInterface()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterialInterface()"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetParameterValue(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, FMaterialParameterValue& OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "GetUserSceneTextureOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserSceneTextureOverride(FName& InOutValue)"
  },
  {
    "label": "GetBlendableLocation()",
    "kind": "Method",
    "detail": "Function (EBlendableLocation)",
    "insertText": "GetBlendableLocation(const FMaterial* Base)"
  },
  {
    "label": "GetBlendablePriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlendablePriority(const FMaterial* Base)"
  },
  {
    "label": "GameThread_SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThread_SetParent(UMaterialInterface* ParentMaterialInterface)"
  },
  {
    "label": "GameThread_UpdateCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThread_UpdateCachedData(const FMaterialInstanceCachedData& CachedData)"
  },
  {
    "label": "InitMIParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMIParameters(struct FMaterialInstanceParameterSet& ParameterSet)"
  },
  {
    "label": "RenderThread_ClearParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderThread_ClearParameters()"
  },
  {
    "label": "InvalidateUniformExpressionCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateUniformExpressionCache(false)"
  },
  {
    "label": "RenderThread_UpdateParameter()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> void)",
    "insertText": "RenderThread_UpdateParameter(const FHashedMaterialParameterInfo& ParameterInfo, const ValueType& Value)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::MaterialInstance)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (THashedMaterialParameterMap<ValueType>& ValueArray = GetValueArray<)",
    "insertText": "ValueType()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (int32 Index = RenderThread_FindParameterByNameInternal<)",
    "insertText": "ValueType(ParameterInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValueArray . Array [ Index ] . Value = Value ; } else { THashedMaterialParameterMap<ValueType>::TNamedParameter NewParameter ; NewParameter . Info = ParameterInfo ; NewParameter . Value = Value ; ValueArray . Array .)",
    "insertText": "Add(NewParameter)"
  },
  {
    "label": "GetNumberOfHashBuckets()",
    "kind": "Method",
    "detail": "Function (const int32 NumHashBuckets =)",
    "insertText": "GetNumberOfHashBuckets(ValueArray.Array.Num())"
  },
  {
    "label": "HashAddOneItem()",
    "kind": "Method",
    "detail": "Function (ValueArray .)",
    "insertText": "HashAddOneItem(ValueArray.Array.Num() - 1)"
  },
  {
    "label": "HashAddAllItems()",
    "kind": "Method",
    "detail": "Function (} else { ValueArray .)",
    "insertText": "HashAddAllItems(NumHashBuckets)"
  },
  {
    "label": "RenderThread_GetParameterValue()",
    "kind": "Method",
    "detail": "Function (} } } template<ValueType> bool)",
    "insertText": "RenderThread_GetParameterValue(const FHashedMaterialParameterInfo& ParameterInfo, FMaterialParameterValue& OutValue)"
  },
  {
    "label": "GetValueArray()",
    "kind": "Method",
    "detail": "Function (OutValue = ValueArray . Array [ Index ] . Value ; return true ; } return false ; } private : template<ValueType> THashedMaterialParameterMap<ValueType>&)",
    "insertText": "GetValueArray()"
  },
  {
    "label": "FinishCacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCacheUniformExpressions()"
  },
  {
    "label": "RenderThread_FindParameterByNameInternal()",
    "kind": "Method",
    "detail": "Function (# define HASHED_MATERIAL_PARAMETER_MAP_VALIDATE 0 template<ValueType> int32)",
    "insertText": "RenderThread_FindParameterByNameInternal(const FHashedMaterialParameterInfo& ParameterInfo)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if HASHED_MATERIAL_PARAMETER_MAP_VALIDATE int32 ValidateItemIndex = INDEX_NONE ;)",
    "insertText": "for(int32 Index = 0; Index < ValueArray.Array.Num(); Index++)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ValidateItemIndex = Index ; break ; } } # endif uint32 HashTableSize = ValueArray . HashTable .)",
    "insertText": "Num()"
  },
  {
    "label": "TypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 HashValue = THashedMaterialParameterMap<ValueType)",
    "insertText": "TypeHash(ParameterInfo)"
  },
  {
    "label": "HashValue()",
    "kind": "Method",
    "detail": "Function (uint32 HashIndex =)",
    "insertText": "HashValue(HashTableSize - 1)"
  },
  {
    "label": "ItemIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ItemIndex(int32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ItemIndex - - ; do {)",
    "insertText": "if(ValueArray.Array[ItemIndex].Info == ParameterInfo)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if HASHED_MATERIAL_PARAMETER_MAP_VALIDATE)",
    "insertText": "check(ValidateItemIndex == ItemIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(ItemIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "check(ValueArray.Array.IsEmpty())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} # if HASHED_MATERIAL_PARAMETER_MAP_VALIDATE)",
    "insertText": "check(ValidateItemIndex == INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParameterType* Parameter =& Parameters [ ParameterIndex ] ;)",
    "insertText": "if(Parameter->ParameterInfo == ParameterInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ParameterType* Parameter =& Parameters [ ParameterIndex ] ;)",
    "insertText": "if(Parameter->IsOverride() && Parameter->IsValid() && Parameter->ParameterInfo == ParameterInfo)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Parameter ->)",
    "insertText": "GetValue(OutResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ParameterType* Parameter =& Parameters [ ParameterIndex ] ;)",
    "insertText": "if(Parameter->IsOverride())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FMaterialParameterInfo ParameterInfo ;)",
    "insertText": "if(Parameter->ParameterInfo.RemapLayerIndex(LayerIndexRemap, ParameterInfo))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool bPreviouslyOverriden = false ; OverridenParameters .)",
    "insertText": "Add(ParameterInfo, &bPreviouslyOverriden)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FMaterialParameterMetadata* Result = bAddIfNotFound ?& OutParameters .)",
    "insertText": "FindOrAdd(ParameterInfo) : OutParameters.Find(ParameterInfo)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Parameter ->)",
    "insertText": "GetValue(*Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(bSetOverride)"
  },
  {
    "label": "RemapLayersForParent()",
    "kind": "Method",
    "detail": "Function (Result -> bOverride = true ; } # endif } } } } } } template<TArrayType> void)",
    "insertText": "RemapLayersForParent(TArrayType& LayerIndexRemap, int32 NumParentLayers, TArrayView<const int32> ParentLayerIndexRemap)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TArrayType NewLayerIndexRemap ; NewLayerIndexRemap .)",
    "insertText": "Init(INDEX_NONE, NumParentLayers)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 ParentLayerIndex = ParentLayerIndexRemap [ i ] ;)",
    "insertText": "if(ParentLayerIndex != INDEX_NONE)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NewLayerIndexRemap [ ParentLayerIndex ] = LayerIndexRemap [ i ] ; } } LayerIndexRemap =)",
    "insertText": "MoveTemp(NewLayerIndexRemap)"
  }
]