[
  {
    "label": "ESteamIPType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamIPType"
  },
  {
    "label": "SteamIPAddress_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamIPAddress_t"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAMTYPES_H # define STEAMTYPES_H # define S_CALLTYPE __cdecl # ifndef WCHARTYPES_H typedef unsigned char uint8 ; # endif # ifdef __GNUC__ # if __GNUC__<4 # error \" Steamworks requires GCC 4 .)",
    "insertText": "X(4.2 or 4.4 have been tested)\" #endif #endif #if defined(__LP64__) || defined(__x86_64__) || defined(_WIN64) || defined(__aarch64__) || defined(__s390x__) #define X64BITS #endif #if !defined(VALVE_BIG_ENDIAN) #if defined(_PS3) #define VALVE_BIG_ENDIAN 1 #endif #if defined( __GNUC__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef signed char int8 ; # if)",
    "insertText": "defined(_WIN32 ) && !defined( __GNUC__)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int16 uint16 ; typedef __int32 int32 ; typedef unsigned __int32 uint32 ; typedef __int64 int64 ; typedef unsigned __int64 uint64 ; typedef int64 lint64 ; typedef uint64 ulint64 ; # ifdef X64BITS typedef __int64 intp ; typedef unsigned __int64 uintp ; # else typedef __int32 intp ; typedef unsigned __int32 uintp ; # endif # else typedef short int16 ; typedef unsigned short uint16 ; typedef int int32 ; typedef unsigned int uint32 ; typedef long long int64 ; typedef unsigned long long uint64 ; typedef long int lint64 ; typedef unsigned long int ulint64 ; # ifdef X64BITS typedef long long intp ; typedef unsigned long long uintp ; # else typedef int intp ; typedef unsigned int uintp ; # endif # endif typedef uint32 AppId_t ; const AppId_t k_uAppIdInvalid = 0 x0 ; typedef uint32 DepotId_t ; const DepotId_t k_uDepotIdInvalid = 0 x0 ; typedef uint32 RTime32 ; typedef uint64 SteamAPICall_t ; const SteamAPICall_t k_uAPICallInvalid = 0 x0 ; typedef uint32 AccountID_t ; typedef uint64 PartyBeaconID_t ; const PartyBeaconID_t k_ulPartyBeaconIdInvalid = 0 ; enum ESteamIPType { k_ESteamIPTypeIPv4 = 0,k_ESteamIPTypeIPv6 = 1,} ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (union { uint32 m_unIPv4 ; uint8 m_rgubIPv6 [ 1 6 ] ; uint64 m_ipv6Qword [ 2 ] ; } ; ESteamIPType m_eType ; bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IPv6Any()",
    "kind": "Method",
    "detail": "Function (SteamIPAddress_t ipOut ; ipOut . m_eType = k_ESteamIPTypeIPv4 ; ipOut . m_unIPv4 = 0 ; return ipOut ; } SteamIPAddress_t)",
    "insertText": "IPv6Any()"
  },
  {
    "label": "IPv4Loopback()",
    "kind": "Method",
    "detail": "Function (SteamIPAddress_t ipOut ; ipOut . m_eType = k_ESteamIPTypeIPv6 ; ipOut . m_ipv6Qword [ 0 ] = 0 ; ipOut . m_ipv6Qword [ 1 ] = 0 ; return ipOut ; } SteamIPAddress_t)",
    "insertText": "IPv4Loopback()"
  },
  {
    "label": "IPv6Loopback()",
    "kind": "Method",
    "detail": "Function (SteamIPAddress_t ipOut ; ipOut . m_eType = k_ESteamIPTypeIPv4 ; ipOut . m_unIPv4 = 0 x7f000001 ; return ipOut ; } SteamIPAddress_t)",
    "insertText": "IPv6Loopback()"
  }
]