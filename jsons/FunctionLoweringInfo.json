[
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "BranchProbabilityInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchProbabilityInfo"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineModuleInfo"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "SelectionDAG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectionDAG"
  },
  {
    "label": "MVT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MVT"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "FunctionLoweringInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionLoweringInfo"
  },
  {
    "label": "LiveOutInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LiveOutInfo"
  },
  {
    "label": "LiveOutInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_FUNCTIONLOWERINGINFO_H # define LLVM_CODEGEN_FUNCTIONLOWERINGINFO_H # include \" llvm / ADT / APInt . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / IndexedMap . h \" # include \" llvm / ADT / Optional . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / CodeGen / ISDOpcodes . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / IR / InlineAsm . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / Target / TargetRegisterInfo . h \" # include<vector> namespace llvm { class AllocaInst ; class BasicBlock ; class BranchProbabilityInfo ; class CallInst ; class Function ; class GlobalVariable ; class Instruction ; class MachineInstr ; class MachineBasicBlock ; class MachineFunction ; class MachineModuleInfo ; class MachineRegisterInfo ; class SelectionDAG ; class MVT ; class TargetLowering ; class Value ; class FunctionLoweringInfo { public : const Function* Fn ; MachineFunction* MF ; const TargetLowering* TLI ; MachineRegisterInfo* RegInfo ; BranchProbabilityInfo* BPI ; bool CanLowerReturn ; unsigned DemoteRegister ; DenseMap<const BasicBlock*,MachineBasicBlock*> MBBMap ; DenseMap<const Value*,unsigned> ValueMap ; typedef DenseMap<const Value*,Optional<int>> StatepointSpilledValueMapTy ; DenseMap<const Instruction*,StatepointSpilledValueMapTy> StatepointRelocatedValues ; DenseMap<const AllocaInst*,int> StaticAllocaMap ; DenseMap<const Argument*,int> ByValArgFrameIndexMap ; SmallVector<MachineInstr*,8> ArgDbgValues ; DenseMap<unsigned,unsigned> RegFixups ; SmallVector<unsigned,5 0> StatepointStackSlots ; MachineBasicBlock* MBB ; MachineBasicBlock::iterator InsertPt ; # ifndef NDEBUG SmallPtrSet<const Instruction*,8> CatchInfoLost ; SmallPtrSet<const Instruction*,8> CatchInfoFound ; # endif struct LiveOutInfo { unsigned NumSignBits : 3 1 ; bool IsValid : 1 ; APInt KnownOne,KnownZero ;)",
    "insertText": "LiveOutInfo() : NumSignBits(0), IsValid(true), KnownOne(1, 0), KnownZero(1, 0)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} } ; DenseMap<const Value*,ISD::NodeType> PreferredExtendType ; SmallPtrSet<const BasicBlock*,4> VisitedBBs ; std::vector<std::pair<MachineInstr*,unsigned>> PHINodesToUpdate ; unsigned OrigNumPHINodesToUpdate ; unsigned ExceptionPointerVirtReg,ExceptionSelectorVirtReg ; void)",
    "insertText": "set(const Function &Fn, MachineFunction &MF, SelectionDAG *DAG)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "isExportedInst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isExportedInst(const Value *V)"
  },
  {
    "label": "CreateReg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "CreateReg(MVT VT)"
  },
  {
    "label": "CreateRegs()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "CreateRegs(Type *Ty)"
  },
  {
    "label": "InitializeRegForValue()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "InitializeRegForValue(const Value *V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (unsigned& R = ValueMap [ V ] ;)",
    "insertText": "assert(R == 0 && \"Already initialized this value register!\")"
  },
  {
    "label": "GetLiveOutRegInfo()",
    "kind": "Method",
    "detail": "Function (} const LiveOutInfo*)",
    "insertText": "GetLiveOutRegInfo(unsigned Reg)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const LiveOutInfo* LOI =& LiveOutRegInfo [ Reg ] ;)",
    "insertText": "if(!LOI->IsValid)"
  },
  {
    "label": "AddLiveOutRegInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLiveOutRegInfo(unsigned Reg, unsigned NumSignBits, const APInt &KnownZero, const APInt &KnownOne)"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (LiveOutRegInfo .)",
    "insertText": "grow(Reg)"
  },
  {
    "label": "ComputePHILiveOutRegInfo()",
    "kind": "Method",
    "detail": "Function (LiveOutInfo& LOI = LiveOutRegInfo [ Reg ] ; LOI . NumSignBits = NumSignBits ; LOI . KnownOne = KnownOne ; LOI . KnownZero = KnownZero ; } void)",
    "insertText": "ComputePHILiveOutRegInfo(const PHINode*)"
  },
  {
    "label": "InvalidatePHILiveOutRegInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePHILiveOutRegInfo(const PHINode *PN)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<const Value*,unsigned>::const_iterator It = ValueMap .)",
    "insertText": "find(PN)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned Reg = It -> second ;)",
    "insertText": "if(Reg == 0)"
  },
  {
    "label": "setArgumentFrameIndex()",
    "kind": "Method",
    "detail": "Function (LiveOutRegInfo [ Reg ] . IsValid = false ; } void)",
    "insertText": "setArgumentFrameIndex(const Argument *A, int FI)"
  },
  {
    "label": "getArgumentFrameIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getArgumentFrameIndex(const Argument *A)"
  },
  {
    "label": "addSEHHandlersForLPads()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "addSEHHandlersForLPads(ArrayRef<const LandingPadInst *> LPads)"
  },
  {
    "label": "ComputeUsesVAFloatArgument()",
    "kind": "Method",
    "detail": "Function (IndexedMap<LiveOutInfo,VirtReg2IndexFunctor> LiveOutRegInfo ; } ; void)",
    "insertText": "ComputeUsesVAFloatArgument(const CallInst &I, MachineModuleInfo *MMI)"
  },
  {
    "label": "AddLandingPadInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLandingPadInfo(const LandingPadInst &I, MachineModuleInfo &MMI, MachineBasicBlock *MBB)"
  }
]