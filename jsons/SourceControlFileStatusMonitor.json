[
  {
    "label": "ISourceControlState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlState"
  },
  {
    "label": "SOURCECONTROL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOURCECONTROL_API"
  },
  {
    "label": "FUintptrHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUintptrHash"
  },
  {
    "label": "FSourceControlFileStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceControlFileStatus"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Ticker . h \" # include \" Delegates / DelegateCombinations . h \" # include \" ISourceControlOperation . h \" # include \" ISourceControlProvider . h \" # include \" ISourceControlState . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" class ISourceControlState ; class FSourceControlFileStatusMonitor : public TSharedFromThis<FSourceControlFileStatusMonitor> { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSourceControlFileStatus, const FString& , const ISourceControlState*)"
  },
  {
    "label": "FSourceControlFileStatusMonitor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSourceControlFileStatusMonitor()"
  },
  {
    "label": "StartMonitoringFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMonitoringFile(uintptr_t OwnerId, const FString& AbsPathname, FOnSourceControlFileStatus OnSourceControlledFileStatus)"
  },
  {
    "label": "StartMonitoringFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMonitoringFiles(uintptr_t OwnerId, const TArray<FString>& AbsPathnames, FOnSourceControlFileStatus OnSourceControlledFileStatus)"
  },
  {
    "label": "StartMonitoringFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMonitoringFiles(uintptr_t OwnerId, const TSet<FString>& AbsPathnames, FOnSourceControlFileStatus OnSourceControlledFileStatus)"
  },
  {
    "label": "StopMonitoringFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMonitoringFile(uintptr_t OwnerId, const FString& AbsPathname)"
  },
  {
    "label": "StopMonitoringFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMonitoringFiles(uintptr_t OwnerId, const TArray<FString>& AbsPathnames)"
  },
  {
    "label": "StopMonitoringFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMonitoringFiles(uintptr_t OwnerId, const TSet<FString>& AbsPathnames)"
  },
  {
    "label": "StopMonitoringFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMonitoringFiles(uintptr_t OwnerId)"
  },
  {
    "label": "SetMonitoringFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMonitoringFiles(uintptr_t OwnerId, TSet<FString>&& AbsPathnames, FOnSourceControlFileStatus OnSourceControlledFileStatus)"
  },
  {
    "label": "GetMonitoredFiles()",
    "kind": "Method",
    "detail": "Function (TSet<FString>)",
    "insertText": "GetMonitoredFiles(uintptr_t OwnerId)"
  },
  {
    "label": "GetStatusAge()",
    "kind": "Method",
    "detail": "Function (TOptional<FTimespan>)",
    "insertText": "GetStatusAge(const FString& AbsPathname)"
  },
  {
    "label": "SetNewRequestProbationPeriodPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewRequestProbationPeriodPolicy(const FTimespan& InPropbationPeriod)"
  },
  {
    "label": "GetNewRequestProbationPeriodPolicy()",
    "kind": "Method",
    "detail": "Function (ProbationPeriodPolicy = InPropbationPeriod ; } FTimespan)",
    "insertText": "GetNewRequestProbationPeriodPolicy()"
  },
  {
    "label": "GetUpdateStatusPeriodPolicy()",
    "kind": "Method",
    "detail": "Function (RefreshPeriodPolicy = InRefreshPeriod ; } FTimespan)",
    "insertText": "GetUpdateStatusPeriodPolicy()"
  },
  {
    "label": "GetMaxFilePerRequestPolicy()",
    "kind": "Method",
    "detail": "Function (MaxFileNumPerRequestPolicy = MaxNum ; } int32)",
    "insertText": "GetMaxFilePerRequestPolicy()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SuspendMonitoringPolicy =)",
    "insertText": "MoveTemp(IsMonitoringSuspended)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} private : struct FUintptrHash : public TDefaultMapKeyFuncs<uintptr_t,FOnSourceControlFileStatus,false> { uint32)",
    "insertText": "GetKeyHash(const uintptr_t& Key)"
  },
  {
    "label": "FSourceControlFileStatus()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSourceControlFileStatus {)",
    "insertText": "FSourceControlFileStatus(uintptr_t OriginalOwnerId, FOnSourceControlFileStatus InFileStatusUpdateDelegate)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OwnerDelegateMap .)",
    "insertText": "Emplace(OriginalOwnerId, MoveTemp(InFileStatusUpdateDelegate))"
  },
  {
    "label": "OnSourceControlStatusUpdate()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ISourceControlState> FileState ; double LastStatusCheckTimestampSecs = 0 . 0 ; TMap<uintptr_t,FOnSourceControlFileStatus,FDefaultSetAllocator,FUintptrHash> OwnerDelegateMap ; } ; private : void)",
    "insertText": "OnSourceControlStatusUpdate(const TSharedRef<ISourceControlOperation>& InOperation, ECommandResult::Type InType)"
  },
  {
    "label": "OnSourceControlProviderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSourceControlProviderChanged(ISourceControlProvider& OldProvider, ISourceControlProvider& NewProvider)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "FindFileStatus()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSourceControlFileStatus>)",
    "insertText": "FindFileStatus(const FString& Pathname)"
  },
  {
    "label": "HasOngoingRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOngoingRequest()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FString,TSharedPtr<FSourceControlFileStatus>> MonitoredFiles ; TArray<FString> RequestedStatusFiles ; FTimespan ProbationPeriodPolicy ; FTimespan RefreshPeriodPolicy ; TFunction<)",
    "insertText": "bool()"
  }
]