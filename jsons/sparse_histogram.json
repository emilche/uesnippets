[
  {
    "label": "HistogramSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramSamples"
  },
  {
    "label": "PersistentHistogramAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentHistogramAllocator"
  },
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SparseHistogramTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseHistogramTest"
  },
  {
    "label": "FactoryGet()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_SPARSE_HISTOGRAM_H_ # define BASE_METRICS_SPARSE_HISTOGRAM_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / metrics / histogram_base . h \" # include \" base / metrics / histogram_samples . h \" # include \" base / synchronization / lock . h \" # include \" base / values . h \" namespace base { class HistogramSamples ; class PersistentHistogramAllocator ; class Pickle ; class PickleIterator ; class BASE_EXPORT SparseHistogram : public HistogramBase { public : HistogramBase*)",
    "insertText": "FactoryGet(const std::string& name, int32_t flags)"
  },
  {
    "label": "PersistentCreate()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "PersistentCreate(PersistentHistogramAllocator* allocator, const char* name, HistogramSamples::Metadata* meta, HistogramSamples::Metadata* logged_meta)"
  },
  {
    "label": "SparseHistogram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SparseHistogram(const SparseHistogram&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SparseHistogram&)",
    "insertText": "operator(const SparseHistogram&)"
  },
  {
    "label": "SparseHistogram()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SparseHistogram()"
  },
  {
    "label": "name_hash()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "name_hash()"
  },
  {
    "label": "GetHistogramType()",
    "kind": "Method",
    "detail": "Function (HistogramType)",
    "insertText": "GetHistogramType()"
  },
  {
    "label": "HasConstructionArguments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConstructionArguments(Sample expected_minimum, Sample expected_maximum, size_t expected_bucket_count)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Sample value)"
  },
  {
    "label": "AddCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCount(Sample value, int count)"
  },
  {
    "label": "AddSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamples(const HistogramSamples& samples)"
  },
  {
    "label": "AddSamplesFromPickle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSamplesFromPickle(base::PickleIterator* iter)"
  },
  {
    "label": "SnapshotSamples()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotSamples()"
  },
  {
    "label": "SnapshotDelta()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotDelta()"
  },
  {
    "label": "SnapshotFinalDelta()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotFinalDelta()"
  },
  {
    "label": "ToGraphDict()",
    "kind": "Method",
    "detail": "Function (base::Value::Dict)",
    "insertText": "ToGraphDict()"
  },
  {
    "label": "SerializeInfoImpl()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SerializeInfoImpl(base::Pickle* pickle)"
  },
  {
    "label": "SparseHistogram()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "SparseHistogram(const char* name)"
  },
  {
    "label": "SparseHistogram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SparseHistogram(PersistentHistogramAllocator* allocator, const char* name, HistogramSamples::Metadata* meta, HistogramSamples::Metadata* logged_meta)"
  },
  {
    "label": "DeserializeHistogramInfo()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT HistogramBase*)",
    "insertText": "DeserializeHistogramInfo(base::PickleIterator* iter)"
  },
  {
    "label": "DeserializeInfoImpl()",
    "kind": "Method",
    "detail": "Function (HistogramBase*)",
    "insertText": "DeserializeInfoImpl(base::PickleIterator* iter)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "GetParameters()"
  }
]