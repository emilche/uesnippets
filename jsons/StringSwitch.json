[
  {
    "label": "StringSwitch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringSwitch"
  },
  {
    "label": "StringSwitch()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_STRINGSWITCH_H # define LLVM_ADT_STRINGSWITCH_H # include \" llvm / ADT / StringRef . h \" # include<cassert> # include<cstring> namespace llvm { template<T,R = T> class StringSwitch { StringRef Str ; const T* Result ; public :)",
    "insertText": "StringSwitch(StringRef S) : Str(S), Result(nullptr)"
  },
  {
    "label": "Case()",
    "kind": "Method",
    "detail": "Function (} template<unsigned N> StringSwitch&)",
    "insertText": "Case(const char (&S)[N], const T& Value)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (Result =& Value ; } return* this ; } template<unsigned N> StringSwitch&)",
    "insertText": "EndsWith(const char (&S)[N], const T &Value)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (Result =& Value ; } return* this ; } template<unsigned N> StringSwitch&)",
    "insertText": "StartsWith(const char (&S)[N], const T &Value)"
  },
  {
    "label": "Cases()",
    "kind": "Method",
    "detail": "Function (Result =& Value ; } return* this ; } template<unsigned N0,unsigned N1> StringSwitch&)",
    "insertText": "Cases(const char (&S0)[N0], const char (&S1)[N1], const T& Value)"
  },
  {
    "label": "Cases()",
    "kind": "Method",
    "detail": "Function (} template<unsigned N0,unsigned N1,unsigned N2> StringSwitch&)",
    "insertText": "Cases(const char (&S0)[N0], const char (&S1)[N1], const char (&S2)[N2], const T& Value)"
  },
  {
    "label": "Cases()",
    "kind": "Method",
    "detail": "Function (} template<unsigned N0,unsigned N1,unsigned N2,unsigned N3> StringSwitch&)",
    "insertText": "Cases(const char (&S0)[N0], const char (&S1)[N1], const char (&S2)[N2], const char (&S3)[N3], const T& Value)"
  },
  {
    "label": "Cases()",
    "kind": "Method",
    "detail": "Function (} template<unsigned N0,unsigned N1,unsigned N2,unsigned N3,unsigned N4> StringSwitch&)",
    "insertText": "Cases(const char (&S0)[N0], const char (&S1)[N1], const char (&S2)[N2], const char (&S3)[N3], const char (&S4)[N4], const T& Value)"
  },
  {
    "label": "Default()",
    "kind": "Method",
    "detail": "Function (} R)",
    "insertText": "Default(const T& Value)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Result && \"Fell off the end of a string-switch\")"
  }
]