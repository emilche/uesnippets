[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FCompositeSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Geo / Surfaces / Surface . h \" namespace UE::CADKernel { class FCompositeSurface : public FSurface { FEntity ; protected : TArray<double> GlobalCoordinates [ 2 ] ; TArray<TSharedPtr<FSurface>> Surfaces ; TArray<FSurfacicBoundary> NativeUVBoundaries ;)",
    "insertText": "FCompositeSurface(const double InToleranceGeometric, int32 USurfaceNum, int32 VSurfaceNum, const TArray<double>& UCoordinates, const TArray<double>& VCoordinates, const TArray<TSharedPtr<FSurface>>& Surfaces)"
  },
  {
    "label": "FCompositeSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompositeSurface()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (Ar<<GlobalCoordinates [ EIso::IsoU ] ; Ar<<GlobalCoordinates [ EIso::IsoV ] ;)",
    "insertText": "SerializeIdents(Ar, Surfaces)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (Ar<<NativeUVBoundaries ; } void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(Surfaces)"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (} ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "GetSurfNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSurfNum(EIso Iso)"
  },
  {
    "label": "InitBoundary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitBoundary()"
  },
  {
    "label": "LinesNotDerivables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinesNotDerivables(const FSurfacicBoundary& Bounds, int32 InDerivativeOrder, FCoordinateGrid& OutNotDerivableCoordinates)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FPoint2D& InSurfacicCoordinate, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(const FSurfacicBoundary& InBoundaries, FCoordinateGrid& OutCoordinates)"
  }
]