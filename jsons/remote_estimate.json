[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "RemoteEstimateSerializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteEstimateSerializer"
  },
  {
    "label": "RemoteEstimate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteEstimate"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_REMOTE_ESTIMATE_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_REMOTE_ESTIMATE_H_ # include<memory> # include<vector> # include \" api / transport / network_types . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / app . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class RemoteEstimateSerializer { public : bool)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> src, NetworkStateEstimate* target)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (rtc::Buffer)",
    "insertText": "Serialize(const NetworkStateEstimate& src)"
  },
  {
    "label": "RemoteEstimateSerializer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RemoteEstimateSerializer()"
  },
  {
    "label": "GetRemoteEstimateSerializer()",
    "kind": "Method",
    "detail": "Function (} ; const RemoteEstimateSerializer*)",
    "insertText": "GetRemoteEstimateSerializer()"
  },
  {
    "label": "RemoteEstimate()",
    "kind": "Method",
    "detail": "Function (class RemoteEstimate : public App { public :)",
    "insertText": "RemoteEstimate()"
  },
  {
    "label": "RemoteEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteEstimate(App&& app)"
  },
  {
    "label": "NameToInt()",
    "kind": "Method",
    "detail": "Function (uint8_t kSubType = 1 3 ; uint32_t kName =)",
    "insertText": "NameToInt(\"goog\")"
  },
  {
    "label": "GetTimestampPeriod()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetTimestampPeriod()"
  },
  {
    "label": "ParseData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseData()"
  },
  {
    "label": "SetEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEstimate(NetworkStateEstimate estimate)"
  },
  {
    "label": "estimate()",
    "kind": "Method",
    "detail": "Function (NetworkStateEstimate)",
    "insertText": "estimate()"
  }
]