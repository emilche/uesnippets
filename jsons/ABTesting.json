[
  {
    "label": "TBitArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBitArray"
  },
  {
    "label": "FABTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FABTest"
  },
  {
    "label": "FSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSample"
  },
  {
    "label": "FScopedABTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedABTimer"
  },
  {
    "label": "FABTest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Math / RandomStream . h \" # include \" Misc / Build . h \" # if ! UE_BUILD_SHIPPING # define ENABLE_ABTEST 1 # else # define ENABLE_ABTEST 0 # endif # include \" ProfilingDebugging / ScopedTimers . h \" template<Allocator> class TBitArray ; # if ENABLE_ABTEST class FABTest { public :)",
    "insertText": "FABTest()"
  },
  {
    "label": "TickAndGetCommand()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "TickAndGetCommand()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "GetDoFirstScopeTest()",
    "kind": "Method",
    "detail": "Function (TotalScopeTimeInFrame + = ScopeTime ; } bool)",
    "insertText": "GetDoFirstScopeTest()"
  },
  {
    "label": "ABTestCmdFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABTestCmdFunc(const TArray<FString>& Args)"
  },
  {
    "label": "StaticIsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticIsActive()"
  },
  {
    "label": "StartFrameLog()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "StartFrameLog()"
  },
  {
    "label": "FrameLogTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameLogTick(double Delta)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(FString* InABTestCmds, bool bScopeTest)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SwitchTest()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "SwitchTest(int32 Index)"
  },
  {
    "label": "FScopedABTimer()",
    "kind": "Method",
    "detail": "Function (FRandomStream Stream ; bool bABTestActive ; bool bABScopeTestActive ; bool bFrameLog ; FString ABTestCmds [ 2 ] ; int32 ABTestNumSamples ; int32 RemainingCoolDown ; int32 CurrentTest ; int32 RemainingTrial ; int32 RemainingPrint ; int32 HistoryNum ; int32 ReportNum ; int32 CoolDown ; int32 MinFramesPerTrial ; int32 NumResamples ; struct FSample { uint32 Micros ; int32 TestIndex ; TBitArray<> InResamples ; } ; TArray<FSample> Samples ; TArray<uint32> ResampleAccumulators ; TArray<uint32> ResampleCount ; uint32 Totals [ 2 ] ; uint32 Counts [ 2 ] ; double TotalTime ; uint32 TotalFrames ; uint32 Spikes ; double TotalScopeTimeInFrame ; uint64 LastGCFrame ; } ; class FScopedABTimer : public FDurationTimer { public :)",
    "insertText": "FScopedABTimer() : FDurationTimer(TimerData) , TimerData(0)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "FScopedABTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedABTimer()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ReportScopeTime(Accumulator)"
  },
  {
    "label": "SCOPED_ABTEST()",
    "kind": "Method",
    "detail": "Function (} private : double TimerData ; } ; # define)",
    "insertText": "SCOPED_ABTEST()"
  },
  {
    "label": "SCOPED_ABTEST_DOFIRSTTEST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_ABTEST_DOFIRSTTEST() FABTest::Get().GetDoFirstScopeTest()"
  }
]