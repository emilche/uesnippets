[
  {
    "label": "IsValidCodepoint()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_UTF_STRING_CONVERSION_UTILS_H_ # define BASE_STRINGS_UTF_STRING_CONVERSION_UTILS_H_ # include<stddef . h> # include<stdint . h> # include<string> # include \" base / base_export . h \" # include \" base / third_party / icu / icu_utf . h \" # include \" build / build_config . h \" namespace base { bool)",
    "insertText": "IsValidCodepoint(base_icu::UChar32 code_point)"
  },
  {
    "label": "IsValidCharacter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidCharacter(base_icu::UChar32 code_point)"
  },
  {
    "label": "ReadUnicodeCharacter()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT bool)",
    "insertText": "ReadUnicodeCharacter(const char* src, size_t src_len, size_t* char_index, base_icu::UChar32* code_point_out)"
  },
  {
    "label": "ReadUnicodeCharacter()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ReadUnicodeCharacter(const char16_t* src, size_t src_len, size_t* char_index, base_icu::UChar32* code_point)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WCHAR_T_IS_UTF32) BASE_EXPORT bool ReadUnicodeCharacter(const wchar_t* src, size_t src_len, size_t* char_index, base_icu::UChar32* code_point)"
  },
  {
    "label": "WriteUnicodeCharacter()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT size_t)",
    "insertText": "WriteUnicodeCharacter(base_icu::UChar32 code_point, std::string* output)"
  },
  {
    "label": "WriteUnicodeCharacter()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "WriteUnicodeCharacter(base_icu::UChar32 code_point, std::u16string* output)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WCHAR_T_IS_UTF32) inline size_t WriteUnicodeCharacter(base_icu::UChar32 code_point, std::wstring* output)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (output ->)",
    "insertText": "push_back(static_cast<wchar_t>(code_point))"
  },
  {
    "label": "PrepareForUTF16Or32Output()",
    "kind": "Method",
    "detail": "Function (template<STRING> void)",
    "insertText": "PrepareForUTF16Or32Output(const char* src, size_t src_len, STRING* output)"
  }
]