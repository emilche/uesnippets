[
  {
    "label": "TImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImpl"
  },
  {
    "label": "TPointerIsConvertibleFromTo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPointerIsConvertibleFromTo"
  },
  {
    "label": "TPointerIsConvertibleFromTo_TestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPointerIsConvertibleFromTo_TestBase"
  },
  {
    "label": "TPointerIsConvertibleFromTo_TestDerived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPointerIsConvertibleFromTo_TestDerived"
  },
  {
    "label": "TPointerIsConvertibleFromTo_Unrelated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPointerIsConvertibleFromTo_Unrelated"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / StaticAssertCompleteType . h \" # include \" Templates / LosesQualifiersFromTo . h \" # include<type_traits> namespace UE::Core::Private::PointerIsConvertibleFromTo { template<From,To,NoCVFrom = std::remove_cv_t<From>,NoCVTo = std::remove_cv_t<To>> struct TImpl { private : uint8)",
    "insertText": "Test(...)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "Test(To*)"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(From, \"TPointerIsConvertibleFromTo must not be instantiated with incomplete types\")"
  },
  {
    "label": "UE_STATIC_ASSERT_COMPLETE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_STATIC_ASSERT_COMPLETE_TYPE(To, \"TPointerIsConvertibleFromTo must not be instantiated with incomplete types\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : enum { Value =)",
    "insertText": "sizeof(Test((From*)nullptr))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<From,To,NoCVFrom> struct TImpl<From,To,NoCVFrom,NoCVFrom> { enum { Value = ! TLosesQualifiersFromTo<From,To>::Value } ; } ; template<From,To,NoCVFrom> struct TImpl<From,To,NoCVFrom,void> { enum { Value = ! TLosesQualifiersFromTo<From,To>::Value } ; } ; template<From,To> struct TImpl<From,To,void,void> { enum { Value = ! TLosesQualifiersFromTo<From,To>::Value } ; } ; template<From,To,NoCVTo> struct TImpl<From,To,void,NoCVTo> { enum { Value = false } ; } ; } template<From,To> struct TPointerIsConvertibleFromTo : UE::Core::Private::PointerIsConvertibleFromTo::TImpl<From,To> { } ; class TPointerIsConvertibleFromTo_TestBase { } ; class TPointerIsConvertibleFromTo_TestDerived : public TPointerIsConvertibleFromTo_TestBase { } ; class TPointerIsConvertibleFromTo_Unrelated { } ;)",
    "insertText": "static_assert(TPointerIsConvertibleFromTo<bool, bool>::Value, \"Platform TPointerIsConvertibleFromTo test failed.\")"
  }
]