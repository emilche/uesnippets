[
  {
    "label": "ImmutableString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableString"
  },
  {
    "label": "Hasher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hasher"
  },
  {
    "label": "Comparator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Comparator"
  },
  {
    "label": "LongString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LongString"
  },
  {
    "label": "ShortString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShortString"
  },
  {
    "label": "ToUtf8String()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Memory . h \" # include \" LC_Platform . h \" # include \" LC_Foundation_Windows . h \" # include<string> class ImmutableString ; namespace string { ImmutableString)",
    "insertText": "ToUtf8String(const wchar_t* str)"
  },
  {
    "label": "ToUtf8String()",
    "kind": "Method",
    "detail": "Function (ImmutableString)",
    "insertText": "ToUtf8String(const wchar_t* str, size_t count)"
  },
  {
    "label": "ToUtf8String()",
    "kind": "Method",
    "detail": "Function (ImmutableString)",
    "insertText": "ToUtf8String(const std::wstring& str)"
  },
  {
    "label": "ToAnsiString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToAnsiString(const ImmutableString& utf8Str)"
  },
  {
    "label": "ToWideString()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToWideString(const ImmutableString& utf8Str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class ImmutableString { public : const uint32_t NOT_FOUND = 0 xFFFFFFFFu ; struct Hasher { LC_ALWAYS_INLINE size_t)",
    "insertText": "operator()(const ImmutableString& key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct Comparator { LC_ALWAYS_INLINE bool)",
    "insertText": "operator()(const ImmutableString& lhs, const ImmutableString& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const ImmutableString& rhs)"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (const char* rhsStr = rhs .)",
    "insertText": "c_str()"
  },
  {
    "label": "ImmutableString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ImmutableString(void)"
  },
  {
    "label": "ImmutableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmutableString(const char* str)"
  },
  {
    "label": "ImmutableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmutableString(const char* str, size_t length)"
  },
  {
    "label": "ImmutableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmutableString(const ImmutableString& other)"
  },
  {
    "label": "ImmutableString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmutableString(ImmutableString&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ImmutableString&)",
    "insertText": "operator(const ImmutableString& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ImmutableString&)",
    "insertText": "operator(ImmutableString&& other)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "Find(char character)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetHash(void)"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (} else { return m_data . longString . length ; } } const char*)",
    "insertText": "c_str(void)"
  },
  {
    "label": "IsShortString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShortString(void)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(void)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (struct LongString { const char* str ; uint32_t length ; uint32_t hash ; } ; struct ShortString { const uint8_t MSB_SET_MASK = 0 x80u ; const uint8_t MSB_CLEAR_MASK = 0 x7Fu ; char str [)",
    "insertText": "sizeof(const char*) + sizeof(uint32_t)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint8_t length ; uint32_t hash ; } ;)",
    "insertText": "static_assert(sizeof(LongString) == sizeof(ShortString), \"Broken short string optimization\")"
  }
]