[
  {
    "label": "IChunkStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkStore"
  },
  {
    "label": "IChunkReferenceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkReferenceTracker"
  },
  {
    "label": "IInstallerError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallerError"
  },
  {
    "label": "IInstallChunkSourceStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallChunkSourceStat"
  },
  {
    "label": "IFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileSystem"
  },
  {
    "label": "IBuildManifestSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildManifestSet"
  },
  {
    "label": "IInstallChunkSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallChunkSource"
  },
  {
    "label": "FInstallSourceConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallSourceConfig"
  },
  {
    "label": "FInstallChunkSourceFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallChunkSourceFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IInstallChunkSource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / ChunkSource . h \" # include \" Installer / Controllable . h \" # include \" Common / SpeedRecorder . h \" # include \" BuildPatchManifest . h \" namespace BuildPatchServices { class IChunkStore ; class IChunkReferenceTracker ; class IInstallerError ; class IInstallChunkSourceStat ; class IFileSystem ; class IBuildManifestSet ; class IInstallChunkSource : public IChunkSource,public IControllable { public : ~)",
    "insertText": "IInstallChunkSource()"
  },
  {
    "label": "GetAvailableChunks()",
    "kind": "Method",
    "detail": "Function (} const TSet<FGuid>&)",
    "insertText": "GetAvailableChunks()"
  },
  {
    "label": "HarvestRemainingChunksFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HarvestRemainingChunksFromFile(const FString& FilePath)"
  },
  {
    "label": "FInstallSourceConfig()",
    "kind": "Method",
    "detail": "Function (} ; struct FInstallSourceConfig { TSet<FGuid> ChunkIgnoreSet ; int32 BatchFetchMinimum ; int32 BatchFetchMaximum ;)",
    "insertText": "FInstallSourceConfig() : ChunkIgnoreSet() , BatchFetchMinimum(10) , BatchFetchMaximum(40)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; class FInstallChunkSourceFactory { public : IInstallChunkSource*)",
    "insertText": "Create(FInstallSourceConfig Configuration, IFileSystem* FileSystem, IChunkStore* ChunkStore, IChunkReferenceTracker* ChunkReferenceTracker, IInstallerError* InstallerError, IInstallChunkSourceStat* InstallChunkSourceStat, const TMultiMap<FString, FBuildPatchAppManifestRef>& InstallationSources, IBuildManifestSet* ManifestSet)"
  },
  {
    "label": "IInstallChunkSourceStat()",
    "kind": "Method",
    "detail": "Function (} ; class IInstallChunkSourceStat { public : enum class ELoadResult : uint8 { Success = 0,MissingHashInfo,MissingPartInfo,OpenFileFail,IncorrectFileSize,HashCheckFailed,Aborted } ; public : ~)",
    "insertText": "IInstallChunkSourceStat()"
  },
  {
    "label": "OnBatchStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBatchStarted(const TArray<FGuid>& ChunkIds)"
  },
  {
    "label": "OnLoadStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadStarted(const FGuid& ChunkId)"
  },
  {
    "label": "OnLoadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadComplete(const FGuid& ChunkId, const ELoadResult& Result, const ISpeedRecorder::FRecord& Record)"
  },
  {
    "label": "OnAcceptedNewRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAcceptedNewRequirements(const TSet<FGuid>& ChunkIds)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ; const TCHAR*)",
    "insertText": "ToString(const IInstallChunkSourceStat::ELoadResult& LoadResult)"
  }
]