[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "IAnimationDataModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataModel"
  },
  {
    "label": "IAnimationDataController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationDataController"
  },
  {
    "label": "ANIMATIONDATACONTROLLER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMATIONDATACONTROLLER_API"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CurveDataAbstraction . h \" # include \" Misc / Change . h \" # include \" Misc / CoreMiscDefines . h \" # include \" Animation / AnimData / IAnimationDataModel . h \" # include \" Animation / AnimTypes . h \" # include \" Misc / FrameRate . h \" class UObject ; class IAnimationDataModel ; class IAnimationDataController ; # if WITH_EDITOR namespace UE { namespace Anim { class FAnimDataBaseAction : public FSwapChange { public : TUniquePtr<FChange>)",
    "insertText": "Execute(UObject* Object)"
  },
  {
    "label": "FAnimDataBaseAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimDataBaseAction()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ExecuteInternal()",
    "kind": "Method",
    "detail": "Function (protected : TUniquePtr<FChange>)",
    "insertText": "ExecuteInternal(IAnimationDataModel* Model, IAnimationDataController* Controller)"
  },
  {
    "label": "ToStringInternal()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToStringInternal()"
  },
  {
    "label": "FOpenBracketAction()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenBracketAction : public FAnimDataBaseAction { public :)",
    "insertText": "FOpenBracketAction(const FString& InDescription) : Description(InDescription)"
  },
  {
    "label": "FOpenBracketAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOpenBracketAction()"
  },
  {
    "label": "FCloseBracketAction()",
    "kind": "Method",
    "detail": "Function (protected : FString Description ; } ; class FCloseBracketAction : public FAnimDataBaseAction { public :)",
    "insertText": "FCloseBracketAction(const FString& InDescription) : Description(InDescription)"
  },
  {
    "label": "FCloseBracketAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCloseBracketAction()"
  },
  {
    "label": "FAddTrackAction()",
    "kind": "Method",
    "detail": "Function (protected : FString Description ; } ; class FAddTrackAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddTrackAction(const FName& InName, TArray<FTransform>&& InTransformData)"
  },
  {
    "label": "FAddTrackAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAddTrackAction()"
  },
  {
    "label": "FRemoveTrackAction()",
    "kind": "Method",
    "detail": "Function (protected : FName Name ; TArray<FTransform> TransformData ; } ; class FRemoveTrackAction : public FAnimDataBaseAction { public :)",
    "insertText": "FRemoveTrackAction(const FName& InName)"
  },
  {
    "label": "FRemoveTrackAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRemoveTrackAction()"
  },
  {
    "label": "FSetTrackKeysAction()",
    "kind": "Method",
    "detail": "Function (protected : FName Name ; } ; class FSetTrackKeysAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetTrackKeysAction(const FName& InName, TArray<FTransform>& InTransformData)"
  },
  {
    "label": "FSetTrackKeysAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSetTrackKeysAction()"
  },
  {
    "label": "FResizePlayLengthInFramesAction()",
    "kind": "Method",
    "detail": "Function (protected : FName Name ; TArray<FTransform> TransformData ; } ; class FResizePlayLengthInFramesAction : public FAnimDataBaseAction { public :)",
    "insertText": "FResizePlayLengthInFramesAction(const IAnimationDataModel* InModel, FFrameNumber F0, FFrameNumber F1)"
  },
  {
    "label": "FResizePlayLengthInFramesAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FResizePlayLengthInFramesAction()"
  },
  {
    "label": "FSetFrameRateAction()",
    "kind": "Method",
    "detail": "Function (protected : FFrameNumber Length ; FFrameNumber Frame0 ; FFrameNumber Frame1 ; } ; class FSetFrameRateAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetFrameRateAction(const IAnimationDataModel* InModel)"
  },
  {
    "label": "FSetFrameRateAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSetFrameRateAction()"
  },
  {
    "label": "FAddCurveAction()",
    "kind": "Method",
    "detail": "Function (protected : FFrameRate FrameRate ; } ; class FAddCurveAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddCurveAction(const FAnimationCurveIdentifier& InCurveId, int32 InFlags) : CurveId(InCurveId), Flags(InFlags)"
  },
  {
    "label": "FAddCurveAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAddCurveAction()"
  },
  {
    "label": "FAddFloatCurveAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; int32 Flags ; } ; class FAddFloatCurveAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddFloatCurveAction(const FAnimationCurveIdentifier& InCurveId, int32 InFlags, const TArray<FRichCurveKey>& InKeys, const FLinearColor& InColor) : CurveId(InCurveId), Flags(InFlags), Keys(InKeys), Color(InColor)"
  },
  {
    "label": "FAddFloatCurveAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAddFloatCurveAction()"
  },
  {
    "label": "FAddTransformCurveAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; int32 Flags ; TArray<FRichCurveKey> Keys ; FLinearColor Color ; } ; class FAddTransformCurveAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddTransformCurveAction(const FAnimationCurveIdentifier& InCurveId, int32 InFlags, const FTransformCurve& InTransformCurve)"
  },
  {
    "label": "FAddTransformCurveAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAddTransformCurveAction()"
  },
  {
    "label": "FRemoveCurveAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; int32 Flags ; TArray<FRichCurveKey> SubCurveKeys [ 9 ] ; } ; class FRemoveCurveAction : public FAnimDataBaseAction { public :)",
    "insertText": "FRemoveCurveAction(const FAnimationCurveIdentifier& InCurveId) : CurveId(InCurveId)"
  },
  {
    "label": "FRemoveCurveAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRemoveCurveAction()"
  },
  {
    "label": "FSetCurveFlagsAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; } ; class FSetCurveFlagsAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetCurveFlagsAction(const FAnimationCurveIdentifier& InCurveId, int32 InFlags, ERawCurveTrackTypes InCurveType) : CurveId(InCurveId), Flags(InFlags), CurveType(InCurveType)"
  },
  {
    "label": "FSetCurveFlagsAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetCurveFlagsAction()"
  },
  {
    "label": "FRenameCurveAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; int32 Flags ; ERawCurveTrackTypes CurveType ; } ; class FRenameCurveAction : public FAnimDataBaseAction { public :)",
    "insertText": "FRenameCurveAction(const FAnimationCurveIdentifier& InCurveId, const FAnimationCurveIdentifier& InNewCurveId) : CurveId(InCurveId), NewCurveId(InNewCurveId)"
  },
  {
    "label": "FRenameCurveAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRenameCurveAction()"
  },
  {
    "label": "FScaleCurveAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; FAnimationCurveIdentifier NewCurveId ; } ; class FScaleCurveAction : public FAnimDataBaseAction { public :)",
    "insertText": "FScaleCurveAction(const FAnimationCurveIdentifier& InCurveId, float InOrigin, float InFactor, ERawCurveTrackTypes InCurveType)"
  },
  {
    "label": "FScaleCurveAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScaleCurveAction()"
  },
  {
    "label": "FAddRichCurveKeyAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; ERawCurveTrackTypes CurveType ; float Origin ; float Factor ; } ; class FAddRichCurveKeyAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddRichCurveKeyAction(const FAnimationCurveIdentifier& InCurveId, const FRichCurveKey& InKey) : CurveId(InCurveId), Key(InKey)"
  },
  {
    "label": "FAddRichCurveKeyAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAddRichCurveKeyAction()"
  },
  {
    "label": "FSetRichCurveKeyAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; ERawCurveTrackTypes CurveType ; FRichCurveKey Key ; } ; class FSetRichCurveKeyAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetRichCurveKeyAction(const FAnimationCurveIdentifier& InCurveId, const FRichCurveKey& InKey) : CurveId(InCurveId), Key(InKey)"
  },
  {
    "label": "FSetRichCurveKeyAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetRichCurveKeyAction()"
  },
  {
    "label": "FRemoveRichCurveKeyAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; FRichCurveKey Key ; } ; class FRemoveRichCurveKeyAction : public FAnimDataBaseAction { public :)",
    "insertText": "FRemoveRichCurveKeyAction(const FAnimationCurveIdentifier& InCurveId, const float InTime) : CurveId(InCurveId), Time(InTime)"
  },
  {
    "label": "FRemoveRichCurveKeyAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRemoveRichCurveKeyAction()"
  },
  {
    "label": "FSetRichCurveKeysAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; float Time ; } ; class FSetRichCurveKeysAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetRichCurveKeysAction(const FAnimationCurveIdentifier& InCurveId, const TArray<FRichCurveKey>& InKeys) : CurveId(InCurveId), Keys(InKeys)"
  },
  {
    "label": "FSetRichCurveKeysAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetRichCurveKeysAction()"
  },
  {
    "label": "FSetRichCurveAttributesAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; TArray<FRichCurveKey> Keys ; } ; class FSetRichCurveAttributesAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetRichCurveAttributesAction(const FAnimationCurveIdentifier& InCurveId, const FCurveAttributes& InAttributes) : CurveId(InCurveId), Attributes(InAttributes)"
  },
  {
    "label": "FSetRichCurveAttributesAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetRichCurveAttributesAction()"
  },
  {
    "label": "FSetCurveColorAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; FCurveAttributes Attributes ; } ; class FSetCurveColorAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetCurveColorAction(const FAnimationCurveIdentifier& InCurveId, const FLinearColor& InColor) : CurveId(InCurveId), Color(InColor)"
  },
  {
    "label": "FSetCurveColorAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetCurveColorAction()"
  },
  {
    "label": "FSetCurveCommentAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; FLinearColor Color ; } ; class FSetCurveCommentAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetCurveCommentAction(const FAnimationCurveIdentifier& InCurveId, const FString& InComment) : CurveId(InCurveId), Comment(InComment)"
  },
  {
    "label": "FSetCurveCommentAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetCurveCommentAction()"
  },
  {
    "label": "FAddAtributeAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationCurveIdentifier CurveId ; FString Comment ; } ; class FAddAtributeAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddAtributeAction(const FAnimatedBoneAttribute& InAttribute)"
  },
  {
    "label": "FAddAtributeAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAddAtributeAction()"
  },
  {
    "label": "FRemoveAtributeAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationAttributeIdentifier AttributeId ; TArray<FAttributeKey> Keys ; } ; class FRemoveAtributeAction : public FAnimDataBaseAction { public :)",
    "insertText": "FRemoveAtributeAction(const FAnimationAttributeIdentifier& InAttributeId) : AttributeId(InAttributeId)"
  },
  {
    "label": "FRemoveAtributeAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRemoveAtributeAction()"
  },
  {
    "label": "FAddAtributeKeyAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationAttributeIdentifier AttributeId ; } ; class FAddAtributeKeyAction : public FAnimDataBaseAction { public :)",
    "insertText": "FAddAtributeKeyAction(const FAnimationAttributeIdentifier& InAttributeId, const FAttributeKey& InKey) : AttributeId(InAttributeId), Key(InKey)"
  },
  {
    "label": "FAddAtributeKeyAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAddAtributeKeyAction()"
  },
  {
    "label": "FSetAtributeKeyAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationAttributeIdentifier AttributeId ; FAttributeKey Key ; } ; class FSetAtributeKeyAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetAtributeKeyAction(const FAnimationAttributeIdentifier& InAttributeId, const FAttributeKey& InKey) : AttributeId(InAttributeId), Key(InKey)"
  },
  {
    "label": "FSetAtributeKeyAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSetAtributeKeyAction()"
  },
  {
    "label": "FRemoveAtributeKeyAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationAttributeIdentifier AttributeId ; FAttributeKey Key ; } ; class FRemoveAtributeKeyAction : public FAnimDataBaseAction { public :)",
    "insertText": "FRemoveAtributeKeyAction(const FAnimationAttributeIdentifier& InAttributeId, float InTime) : AttributeId(InAttributeId), Time(InTime)"
  },
  {
    "label": "FRemoveAtributeKeyAction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRemoveAtributeKeyAction()"
  },
  {
    "label": "FSetAtributeKeysAction()",
    "kind": "Method",
    "detail": "Function (protected : FAnimationAttributeIdentifier AttributeId ; float Time ; } ; class FSetAtributeKeysAction : public FAnimDataBaseAction { public :)",
    "insertText": "FSetAtributeKeysAction(const FAnimatedBoneAttribute& InAttribute)"
  },
  {
    "label": "FSetAtributeKeysAction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSetAtributeKeysAction()"
  }
]