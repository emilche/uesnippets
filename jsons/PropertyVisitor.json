[
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FEditPropertyChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditPropertyChain"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FArchiveSerializedPropertyChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveSerializedPropertyChain"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPropertyVisitorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyVisitorInfo"
  },
  {
    "label": "FPropertyVisitorPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyVisitorPath"
  },
  {
    "label": "FPropertyVisitorScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyVisitorScope"
  },
  {
    "label": "FPropertyVisitorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyVisitorData"
  },
  {
    "label": "FPropertyVisitorInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" class FProperty ; class FEditPropertyChain ; struct FPropertyChangedEvent ; struct FArchiveSerializedPropertyChain ; enum class EPropertyVisitorControlFlow : uint8 { Stop,StepOver,StepOut,StepInto,} ; enum class EPropertyVisitorInfoType : uint8 { None,StaticArrayIndex,ContainerIndex,MapKey,MapValue,} ; struct FPropertyVisitorInfo {)",
    "insertText": "FPropertyVisitorInfo(const FProperty* InProperty, int32 InIndex = INDEX_NONE, EPropertyVisitorInfoType InPropertyInfo = EPropertyVisitorInfoType::None) : Property(InProperty) , Index(InIndex) , PropertyInfo(InPropertyInfo) , bContainsInnerProperties(false)"
  },
  {
    "label": "FPropertyVisitorInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyVisitorInfo(const FPropertyVisitorInfo&)"
  },
  {
    "label": "FPropertyVisitorInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyVisitorInfo(FPropertyVisitorInfo&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyVisitorInfo&)",
    "insertText": "operator(const FPropertyVisitorInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyVisitorInfo&)",
    "insertText": "operator(FPropertyVisitorInfo&&)"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIndex(int32 InIndex, EPropertyVisitorInfoType InPropertyInfo)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (Index = InIndex ; PropertyInfo = InPropertyInfo ; } bool)",
    "insertText": "Identical(const FPropertyVisitorInfo& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FPropertyVisitorInfo& A, const FPropertyVisitorInfo& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPropertyVisitorInfo& A)"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (} const FProperty* Property ; const UStruct* ParentStructType = nullptr ; int32 Index ; EPropertyVisitorInfoType PropertyInfo ; bool bContainsInnerProperties ; } ; struct FPropertyVisitorPath { public :)",
    "insertText": "FPropertyVisitorPath()"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyVisitorPath(const FPropertyVisitorPath&)"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyVisitorPath(FPropertyVisitorPath&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyVisitorPath&)",
    "insertText": "operator(const FPropertyVisitorPath&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyVisitorPath&)",
    "insertText": "operator(FPropertyVisitorPath&&)"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyVisitorPath(const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(Info)"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyVisitorPath(TArrayView<const FPropertyVisitorInfo> InPath)"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (Path = InPath ; })",
    "insertText": "FPropertyVisitorPath(const FPropertyChangedEvent& PropertyEvent, const FEditPropertyChain& PropertyChain)"
  },
  {
    "label": "FPropertyVisitorPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyVisitorPath(const FArchiveSerializedPropertyChain& PropertyChain)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} FPropertyVisitorInfo)",
    "insertText": "Pop()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (} FPropertyVisitorInfo&)",
    "insertText": "Top()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (} const TArray<FPropertyVisitorInfo>&)",
    "insertText": "GetPath()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPropertyVisitorPath& A)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(const TCHAR* Separator = TEXT(\".\"))"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FStringBuilderBase& Out, const TCHAR* Separator = TEXT(\".\"))"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FStringBuilderBase& Out, const TCHAR* Separator = TEXT(\".\"))"
  },
  {
    "label": "Contained()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contained(const FPropertyVisitorPath& OtherPath, bool* bIsEqual = nullptr)"
  },
  {
    "label": "GetPropertyDataPtr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetPropertyDataPtr(UObject* Object)"
  },
  {
    "label": "GetRootIterator()",
    "kind": "Method",
    "detail": "Function (using Iterator = TArray<FPropertyVisitorInfo>::TConstIterator ; Iterator)",
    "insertText": "GetRootIterator()"
  },
  {
    "label": "InvalidIterator()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "InvalidIterator()"
  },
  {
    "label": "ToSerializedPropertyChain()",
    "kind": "Method",
    "detail": "Function (FArchiveSerializedPropertyChain)",
    "insertText": "ToSerializedPropertyChain()"
  },
  {
    "label": "FPropertyVisitorScope()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FPropertyVisitorInfo> Path ; } ; struct FPropertyVisitorScope { public :)",
    "insertText": "FPropertyVisitorScope(FPropertyVisitorPath& InPath, const FPropertyVisitorInfo& Info) : Path(InPath)"
  },
  {
    "label": "FPropertyVisitorScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPropertyVisitorScope()"
  },
  {
    "label": "FPropertyVisitorData()",
    "kind": "Method",
    "detail": "Function (} protected : FPropertyVisitorPath& Path ; } ; struct FPropertyVisitorData {)",
    "insertText": "FPropertyVisitorData(void* InPropertyData, void* InParentStructData) : PropertyData(InPropertyData) , ParentStructData(InParentStructData)"
  },
  {
    "label": "VisitPropertyData()",
    "kind": "Method",
    "detail": "Function (} FPropertyVisitorData)",
    "insertText": "VisitPropertyData(void* InPropertyData)"
  },
  {
    "label": "ResolveVisitedPathInfo()",
    "kind": "Method",
    "detail": "Function (} void* PropertyData = nullptr ; void* ParentStructData = nullptr ; } ; namespace PropertyVisitorHelpers { namespace Private { template<Type> void*)",
    "insertText": "ResolveVisitedPathInfo(const Type* This, void* Data, const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "ResolveVisitedPath()",
    "kind": "Method",
    "detail": "Function (} } template<Type> void*)",
    "insertText": "ResolveVisitedPath(const Type* RootObject, void* RootData, const FPropertyVisitorPath& Path)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* FoundPropertyData = nullptr ;)",
    "insertText": "if(const TArray<FPropertyVisitorInfo>& PathArray = Path.GetPath(); PathArray.Num() > 0)"
  },
  {
    "label": "ResolveVisitedPathInfo()",
    "kind": "Method",
    "detail": "Function (FoundPropertyData =)",
    "insertText": "ResolveVisitedPathInfo(RootObject, RootData, PathArray[0])"
  },
  {
    "label": "ResolveVisitedPathInfo()",
    "kind": "Method",
    "detail": "Function (const FPropertyVisitorInfo& PreviousInfo = PathArray [ PathIndex - 1 ] ; FoundPropertyData =)",
    "insertText": "ResolveVisitedPathInfo(PreviousInfo.Property, FoundPropertyData, PathArray[PathIndex])"
  },
  {
    "label": "ResolveVisitedPathInfo_Generic()",
    "kind": "Method",
    "detail": "Function (} } return FoundPropertyData ; } template<Type> void*)",
    "insertText": "ResolveVisitedPathInfo_Generic(Type* This, FPropertyVisitorPath& Path, void* Data, const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "VisitorData()",
    "kind": "Method",
    "detail": "Function (void* FoundInnerData = nullptr ; FPropertyVisitorData)",
    "insertText": "VisitorData(Data, nullptr)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (This ->)",
    "insertText": "Visit(Path, VisitorData, [&FoundInnerData, &Info, InnerPathDepth = Path.Num() + 1](const FPropertyVisitorPath& InnerPath, const FPropertyVisitorData& InnerVisitorData) { if (InnerPath.Num() < InnerPathDepth) { return EPropertyVisitorControlFlow::StepInto; } void* InnerData = InnerVisitorData.PropertyData; if (Info == InnerPath.Top()) { FoundInnerData = InnerData; return EPropertyVisitorControlFlow::Stop; } return EPropertyVisitorControlFlow::StepOver; })"
  },
  {
    "label": "ResolveVisitedPathInfo_Generic()",
    "kind": "Method",
    "detail": "Function (FPropertyVisitorPath Path ; return)",
    "insertText": "ResolveVisitedPathInfo_Generic(This, Path, Data, Info)"
  },
  {
    "label": "PathToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "PathToString(TArrayView<const FPropertyVisitorInfo> Path, const TCHAR* Separator = TEXT(\".\"))"
  },
  {
    "label": "PathToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PathToString(TArrayView<const FPropertyVisitorInfo> Path, FStringBuilderBase& Out, const TCHAR* Separator = TEXT(\".\"))"
  },
  {
    "label": "PathAppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PathAppendString(TArrayView<const FPropertyVisitorInfo> Path, FStringBuilderBase& Out, const TCHAR* Separator = TEXT(\".\"))"
  },
  {
    "label": "PathIsContainedWithin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PathIsContainedWithin(TArrayView<const FPropertyVisitorInfo> Path, TArrayView<const FPropertyVisitorInfo> OtherPath, bool* bIsEqual = nullptr)"
  },
  {
    "label": "PathToSerializedPropertyChain()",
    "kind": "Method",
    "detail": "Function (FArchiveSerializedPropertyChain)",
    "insertText": "PathToSerializedPropertyChain(TArrayView<const FPropertyVisitorInfo> Path)"
  }
]