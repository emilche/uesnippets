[
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FEntityAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocation"
  },
  {
    "label": "FEntityDataLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityDataLocation"
  },
  {
    "label": "IMovieSceneEntityMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneEntityMutation"
  },
  {
    "label": "IMovieScenePerEntityMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieScenePerEntityMutation"
  },
  {
    "label": "IMovieSceneConditionalEntityMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneConditionalEntityMutation"
  },
  {
    "label": "FAddSingleMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddSingleMutation"
  },
  {
    "label": "FRemoveSingleMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveSingleMutation"
  },
  {
    "label": "FAddMultipleMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddMultipleMutation"
  },
  {
    "label": "FRemoveMultipleMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveMultipleMutation"
  },
  {
    "label": "IMovieSceneEntityMutation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / IntegerSequence . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" namespace UE { namespace MovieScene { class FEntityManager ; struct FEntityAllocation ; struct FEntityDataLocation ; struct IMovieSceneEntityMutation { ~)",
    "insertText": "IMovieSceneEntityMutation()"
  },
  {
    "label": "CreateMutation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateMutation(FEntityManager* EntityManager, FComponentMask* InOutEntityComponentTypes)"
  },
  {
    "label": "InitializeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAllocation(FEntityAllocation* Allocation, const FComponentMask& AllocationType)"
  },
  {
    "label": "InitializeUnmodifiedAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeUnmodifiedAllocation(FEntityAllocation* Allocation, const FComponentMask& AllocationType)"
  },
  {
    "label": "IMovieScenePerEntityMutation()",
    "kind": "Method",
    "detail": "Function (} } ; struct IMovieScenePerEntityMutation { ~)",
    "insertText": "IMovieScenePerEntityMutation()"
  },
  {
    "label": "InitializeEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeEntities(const FEntityRange& EntityRange, const FComponentMask& AllocationType)"
  },
  {
    "label": "MarkAllocation()",
    "kind": "Method",
    "detail": "Function (} } ; struct IMovieSceneConditionalEntityMutation : IMovieScenePerEntityMutation { void)",
    "insertText": "MarkAllocation(FEntityAllocation* Allocation, TBitArray<>& OutEntitiesToMutate)"
  },
  {
    "label": "FAddSingleMutation()",
    "kind": "Method",
    "detail": "Function (} ; struct FAddSingleMutation : IMovieSceneEntityMutation { FComponentTypeID ComponentToAdd ;)",
    "insertText": "FAddSingleMutation(FComponentTypeID InType) : ComponentToAdd(InType)"
  },
  {
    "label": "FRemoveSingleMutation()",
    "kind": "Method",
    "detail": "Function (} ; struct FRemoveSingleMutation : IMovieSceneEntityMutation { FComponentTypeID ComponentToRemove ;)",
    "insertText": "FRemoveSingleMutation(FComponentTypeID InType) : ComponentToRemove(InType)"
  },
  {
    "label": "RemoveComponent()",
    "kind": "Method",
    "detail": "Function (} ; struct FRemoveMultipleMutation : IMovieSceneEntityMutation { FComponentMask MaskToRemove ; void)",
    "insertText": "RemoveComponent(FComponentTypeID InComponentType)"
  }
]