[
  {
    "label": "NSAutoreleasePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSAutoreleasePool"
  },
  {
    "label": "ScopedNSProtocolTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopedNSProtocolTraits"
  },
  {
    "label": "scoped_nsprotocol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_nsprotocol"
  },
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "scoped_nsobject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_nsobject"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_SCOPED_NSOBJECT_H_ # define BASE_MAC_SCOPED_NSOBJECT_H_ # include<type_traits> # import<Foundation / NSObject . h> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / mac / scoped_typeref . h \" # if)",
    "insertText": "defined(__has_feature) && __has_feature(objc_arc)"
  },
  {
    "label": "InvalidValue()",
    "kind": "Method",
    "detail": "Function (namespace base { namespace internal { template<NST> struct ScopedNSProtocolTraits { NST)",
    "insertText": "InvalidValue()"
  },
  {
    "label": "autorelease()",
    "kind": "Method",
    "detail": "Function ([ nst release ] ; } } ; } template<NST> class scoped_nsprotocol : public ScopedTypeRef<NST,internal::ScopedNSProtocolTraits<NST>> { public : using ScopedTypeRef<NST,internal::ScopedNSProtocolTraits<NST>>::ScopedTypeRef ; NST)",
    "insertText": "autorelease()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } ; template<class C> void)",
    "insertText": "swap(scoped_nsprotocol<C>& p1, scoped_nsprotocol<C>& p2)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (p1 .)",
    "insertText": "swap(p2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class C> bool)",
    "insertText": "operator(C p1, const scoped_nsprotocol<C>& p2)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<NST> class scoped_nsobject : public scoped_nsprotocol<NST*> { public : using scoped_nsprotocol<NST*>::scoped_nsprotocol ;)",
    "insertText": "static_assert(std::is_same<NST, NSAutoreleasePool>::value == false, \"Use @autoreleasepool instead\")"
  }
]