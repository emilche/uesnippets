[
  {
    "label": "IRequestManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRequestManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IEventLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEventLoop"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" EventLoop / EventLoopTimer . h \" # include \" Misc / Timespan . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" namespace UE::EventLoop { class IRequestManager ; enum class EEventLoopStatus : uint8 { Unintialized,Running,Terminated,} ; using FAsyncTask = TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "IEventLoop()",
    "kind": "Method",
    "detail": "Function (class IEventLoop : public TSharedFromThis<IEventLoop,ESPMode::ThreadSafe> { public : ~)",
    "insertText": "IEventLoop()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "RequestShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestShutdown(FOnShutdownComplete&& OnShutdownComplete = FOnShutdownComplete())"
  },
  {
    "label": "SetTimer()",
    "kind": "Method",
    "detail": "Function (FTimerHandle)",
    "insertText": "SetTimer(FTimerCallback&& Callback, FTimespan InRate, bool InbRepeat = false, TOptional<FTimespan> InFirstDelay = TOptional<FTimespan>())"
  },
  {
    "label": "ClearTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTimer(FTimerHandle& InHandle, FOnTimerCleared&& OnTimerCleared = FOnTimerCleared())"
  },
  {
    "label": "PostAsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAsyncTask(FAsyncTask&& Task)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "RunOnce()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunOnce(FTimespan WaitTime)"
  },
  {
    "label": "GetLoopTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetLoopTime()"
  }
]