[
  {
    "label": "OCIOEXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OCIOEXPORT"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "getElementName()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_OCIO_OPENCOLORTRANSFORMS_H # define INCLUDED_OCIO_OPENCOLORTRANSFORMS_H # include<initializer_list> # include<limits> # include \" OpenColorTypes . h \" # ifndef OCIO_NAMESPACE # error This header cannot be used directly . Use<OpenColorIO / OpenColorIO . h> instead . # endif namespace OCIO_NAMESPACE { class OCIOEXPORT FormatMetadata { public : const char*)",
    "insertText": "getElementName()"
  },
  {
    "label": "setElementName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setElementName(const char *)"
  },
  {
    "label": "getElementValue()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getElementValue()"
  },
  {
    "label": "setElementValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setElementValue(const char *)"
  },
  {
    "label": "getNumAttributes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumAttributes()"
  },
  {
    "label": "getAttributeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getAttributeName(int i)"
  },
  {
    "label": "getAttributeValue()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getAttributeValue(int i)"
  },
  {
    "label": "getAttributeValue()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getAttributeValue(const char * name)"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(const char * name, const char * value)"
  },
  {
    "label": "getNumChildrenElements()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumChildrenElements()"
  },
  {
    "label": "getChildElement()",
    "kind": "Method",
    "detail": "Function (const FormatMetadata&)",
    "insertText": "getChildElement(int i)"
  },
  {
    "label": "addChildElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addChildElement(const char * name, const char * value)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FormatMetadata&)",
    "insertText": "operator(const FormatMetadata & rhs)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getName()"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(const char * name)"
  },
  {
    "label": "getID()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getID()"
  },
  {
    "label": "setID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setID(const char * id)"
  },
  {
    "label": "FormatMetadata()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FormatMetadata()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const FormatMetadata &)"
  },
  {
    "label": "createEditableCopy()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT Transform { public : TransformRcPtr)",
    "insertText": "createEditableCopy()"
  },
  {
    "label": "getDirection()",
    "kind": "Method",
    "detail": "Function (TransformDirection)",
    "insertText": "getDirection()"
  },
  {
    "label": "setDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDirection(TransformDirection dir)"
  },
  {
    "label": "getTransformType()",
    "kind": "Method",
    "detail": "Function (TransformType)",
    "insertText": "getTransformType()"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "validate()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transform(const Transform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Transform&)",
    "insertText": "operator(const Transform &)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Transform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream&, const Transform&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT AllocationTransform : public Transform { public : AllocationTransformRcPtr)",
    "insertText": "Create()"
  },
  {
    "label": "getAllocation()",
    "kind": "Method",
    "detail": "Function (Allocation)",
    "insertText": "getAllocation()"
  },
  {
    "label": "setAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAllocation(Allocation allocation)"
  },
  {
    "label": "getNumVars()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumVars()"
  },
  {
    "label": "getVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getVars(float * vars)"
  },
  {
    "label": "setVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVars(int numvars, const float * vars)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AllocationTransform&)",
    "insertText": "operator(const AllocationTransform &)"
  },
  {
    "label": "AllocationTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AllocationTransform()"
  },
  {
    "label": "AllocationTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocationTransform(const AllocationTransform &)"
  },
  {
    "label": "deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleter(AllocationTransform * t)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (class Impl ; Impl* m_impl ; Impl*)",
    "insertText": "getImpl()"
  },
  {
    "label": "setStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStyle(const char * style)"
  },
  {
    "label": "getDescription()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getDescription()"
  },
  {
    "label": "BuiltinTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BuiltinTransform()"
  },
  {
    "label": "BuiltinTransform()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "BuiltinTransform(const BuiltinTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BuiltinTransform&)",
    "insertText": "operator(const BuiltinTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const BuiltinTransform &)"
  },
  {
    "label": "CreateFromFile()",
    "kind": "Method",
    "detail": "Function (CDLTransformRcPtr)",
    "insertText": "CreateFromFile(const char * src, const char * cccid)"
  },
  {
    "label": "CreateGroupFromFile()",
    "kind": "Method",
    "detail": "Function (GroupTransformRcPtr)",
    "insertText": "CreateGroupFromFile(const char * src)"
  },
  {
    "label": "getFormatMetadata()",
    "kind": "Method",
    "detail": "Function (const FormatMetadata&)",
    "insertText": "getFormatMetadata()"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const CDLTransform & other)"
  },
  {
    "label": "getStyle()",
    "kind": "Method",
    "detail": "Function (CDLStyle)",
    "insertText": "getStyle()"
  },
  {
    "label": "setStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStyle(CDLStyle style)"
  },
  {
    "label": "getSlope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getSlope(double * rgb)"
  },
  {
    "label": "setSlope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSlope(const double * rgb)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffset(double * rgb)"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffset(const double * rgb)"
  },
  {
    "label": "getPower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPower(double * rgb)"
  },
  {
    "label": "setPower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPower(const double * rgb)"
  },
  {
    "label": "getSOP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getSOP(double * vec9)"
  },
  {
    "label": "setSOP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSOP(const double * vec9)"
  },
  {
    "label": "getSat()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getSat()"
  },
  {
    "label": "setSat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSat(double sat)"
  },
  {
    "label": "getSatLumaCoefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getSatLumaCoefs(double * rgb)"
  },
  {
    "label": "getFirstSOPDescription()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getFirstSOPDescription()"
  },
  {
    "label": "setFirstSOPDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFirstSOPDescription(const char * description)"
  },
  {
    "label": "CDLTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CDLTransform(const CDLTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CDLTransform&)",
    "insertText": "operator(const CDLTransform &)"
  },
  {
    "label": "CDLTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CDLTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const CDLTransform &)"
  },
  {
    "label": "getSrc()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getSrc()"
  },
  {
    "label": "setSrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSrc(const char * src)"
  },
  {
    "label": "getDst()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getDst()"
  },
  {
    "label": "setDst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDst(const char * dst)"
  },
  {
    "label": "getDataBypass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getDataBypass()"
  },
  {
    "label": "setDataBypass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDataBypass(bool enabled)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ColorSpaceTransform&)",
    "insertText": "operator(const ColorSpaceTransform &)"
  },
  {
    "label": "ColorSpaceTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ColorSpaceTransform()"
  },
  {
    "label": "ColorSpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ColorSpaceTransform(const ColorSpaceTransform &)"
  },
  {
    "label": "deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleter(ColorSpaceTransform * t)"
  },
  {
    "label": "setSrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSrc(const char * name)"
  },
  {
    "label": "getDisplay()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getDisplay()"
  },
  {
    "label": "setDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDisplay(const char * display)"
  },
  {
    "label": "getView()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getView()"
  },
  {
    "label": "setView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setView(const char * view)"
  },
  {
    "label": "getLooksBypass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getLooksBypass()"
  },
  {
    "label": "setLooksBypass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLooksBypass(bool bypass)"
  },
  {
    "label": "setDataBypass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDataBypass(bool bypass)"
  },
  {
    "label": "DisplayViewTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DisplayViewTransform()"
  },
  {
    "label": "DisplayViewTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayViewTransform(const DisplayViewTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DisplayViewTransform&)",
    "insertText": "operator(const DisplayViewTransform &)"
  },
  {
    "label": "deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleter(DisplayViewTransform * t)"
  },
  {
    "label": "GradingRGBM()",
    "kind": "Method",
    "detail": "Function (struct OCIOEXPORT GradingRGBM {)",
    "insertText": "GradingRGBM()"
  },
  {
    "label": "GradingRGBM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingRGBM(double red, double green, double blue, double master) : m_red(red) , m_green(green) , m_blue(blue) , m_master(master)"
  },
  {
    "label": "GradingRGBM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GradingRGBM(const double(&rgbm)[4]) : m_red(rgbm[0]) , m_green(rgbm[1]) , m_blue(rgbm[2]) , m_master(rgbm[3])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double m_red { 0 . } ; double m_green { 0 . } ; double m_blue { 0 . } ; double m_master { 0 . } ; } ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingRGBM & lhs, const GradingRGBM & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingRGBM &)"
  },
  {
    "label": "GradingPrimary()",
    "kind": "Method",
    "detail": "Function (struct OCIOEXPORT GradingPrimary {)",
    "insertText": "GradingPrimary()"
  },
  {
    "label": "GradingPrimary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingPrimary(GradingStyle style) : m_pivot(style == GRADING_LOG ? -0.2 : 0.18) , m_clampBlack(NoClampBlack()) , m_clampWhite(NoClampWhite())"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (} GradingRGBM m_brightness { 0 . 0,0 . 0,0 . 0,0 . 0 } ; GradingRGBM m_contrast { 1 . 0,1 . 0,1 . 0,1 . 0 } ; GradingRGBM m_gamma { 1 . 0,1 . 0,1 . 0,1 . 0 } ; GradingRGBM m_offset { 0 . 0,0 . 0,0 . 0,0 . 0 } ; GradingRGBM m_exposure { 0 . 0,0 . 0,0 . 0,0 . 0 } ; GradingRGBM m_lift { 0 . 0,0 . 0,0 . 0,0 . 0 } ; GradingRGBM m_gain { 1 . 0,1 . 0,1 . 0,1 . 0 } ; double m_saturation { 1 . 0 } ; double m_pivot ; double m_pivotBlack { 0 . 0 } ; double m_pivotWhite { 1 . 0 } ; double m_clampBlack ; double m_clampWhite ; void)",
    "insertText": "validate(GradingStyle style)"
  },
  {
    "label": "NoClampBlack()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "NoClampBlack()"
  },
  {
    "label": "NoClampWhite()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "NoClampWhite()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingPrimary & lhs, const GradingPrimary & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingPrimary &)"
  },
  {
    "label": "GradingControlPoint()",
    "kind": "Method",
    "detail": "Function (struct OCIOEXPORT GradingControlPoint {)",
    "insertText": "GradingControlPoint()"
  },
  {
    "label": "GradingControlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingControlPoint(float x, float y) : m_x(x), m_y(y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float m_x { 0 . f } ; float m_y { 0 . f } ; } ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingControlPoint & lhs, const GradingControlPoint & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingControlPoint &)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT GradingBSplineCurve { public : GradingBSplineCurveRcPtr)",
    "insertText": "Create(size_t size)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (GradingBSplineCurveRcPtr)",
    "insertText": "Create(std::initializer_list<GradingControlPoint> values)"
  },
  {
    "label": "getNumControlPoints()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumControlPoints()"
  },
  {
    "label": "setNumControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumControlPoints(size_t size)"
  },
  {
    "label": "getControlPoint()",
    "kind": "Method",
    "detail": "Function (const GradingControlPoint&)",
    "insertText": "getControlPoint(size_t index)"
  },
  {
    "label": "getSlope()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getSlope(size_t index)"
  },
  {
    "label": "setSlope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSlope(size_t index, float slope)"
  },
  {
    "label": "slopesAreDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "slopesAreDefault()"
  },
  {
    "label": "GradingBSplineCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingBSplineCurve(const GradingBSplineCurve &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GradingBSplineCurve&)",
    "insertText": "operator(const GradingBSplineCurve &)"
  },
  {
    "label": "GradingBSplineCurve()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GradingBSplineCurve()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingBSplineCurve & lhs, const GradingBSplineCurve & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingBSplineCurve &)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT GradingRGBCurve { public : GradingRGBCurveRcPtr)",
    "insertText": "Create(GradingStyle style)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (GradingRGBCurveRcPtr)",
    "insertText": "Create(const ConstGradingRGBCurveRcPtr & rhs)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (GradingRGBCurveRcPtr)",
    "insertText": "Create(const ConstGradingBSplineCurveRcPtr & red, const ConstGradingBSplineCurveRcPtr & green, const ConstGradingBSplineCurveRcPtr & blue, const ConstGradingBSplineCurveRcPtr & master)"
  },
  {
    "label": "isIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdentity()"
  },
  {
    "label": "getCurve()",
    "kind": "Method",
    "detail": "Function (ConstGradingBSplineCurveRcPtr)",
    "insertText": "getCurve(RGBCurveType c)"
  },
  {
    "label": "GradingRGBCurve()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GradingRGBCurve()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingRGBCurve & lhs, const GradingRGBCurve & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingRGBCurve &)"
  },
  {
    "label": "GradingRGBMSW()",
    "kind": "Method",
    "detail": "Function (struct OCIOEXPORT GradingRGBMSW {)",
    "insertText": "GradingRGBMSW()"
  },
  {
    "label": "GradingRGBMSW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingRGBMSW(double red, double green, double blue, double master, double start, double width) : m_red (red) , m_green (green) , m_blue (blue) , m_master(master) , m_start (start) , m_width (width)"
  },
  {
    "label": "GradingRGBMSW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GradingRGBMSW(const double(&rgbmsw)[6]) : m_red (rgbmsw[0]) , m_green (rgbmsw[1]) , m_blue (rgbmsw[2]) , m_master(rgbmsw[3]) , m_start (rgbmsw[4]) , m_width (rgbmsw[5])"
  },
  {
    "label": "GradingRGBMSW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GradingRGBMSW(double start, double width) : m_start(start) , m_width(width)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double m_red { 1 . } ; double m_green { 1 . } ; double m_blue { 1 . } ; double m_master { 1 . } ; double m_start { 0 . } ; double m_width { 1 . } ; } ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingRGBMSW & lhs, const GradingRGBMSW & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingRGBMSW &)"
  },
  {
    "label": "GradingTone()",
    "kind": "Method",
    "detail": "Function (struct OCIOEXPORT GradingTone {)",
    "insertText": "GradingTone()"
  },
  {
    "label": "GradingTone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingTone(GradingStyle style) : m_blacks(style == GRADING_LIN ? GradingRGBMSW(0., 4.) : (style == GRADING_LOG ? GradingRGBMSW(0.4, 0.4) : GradingRGBMSW(0.4, 0.4))) , m_shadows(style == GRADING_LIN ? GradingRGBMSW(2., -7.) : (style == GRADING_LOG ? GradingRGBMSW(0.5, 0.) : GradingRGBMSW(0.6, 0.))) , m_midtones(style == GRADING_LIN ? GradingRGBMSW(0., 8.) : (style == GRADING_LOG ? GradingRGBMSW(0.4, 0.6) : GradingRGBMSW(0.4, 0.7))) , m_highlights(style == GRADING_LIN ? GradingRGBMSW(-2., 9.) : (style == GRADING_LOG ? GradingRGBMSW(0.3, 1.) : GradingRGBMSW(0.2, 1.))) , m_whites(style == GRADING_LIN ? GradingRGBMSW(0., 8.) : (style == GRADING_LOG ? GradingRGBMSW(0.4, 0.5) : GradingRGBMSW(0.5, 0.5)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GradingRGBMSW m_blacks ; GradingRGBMSW m_shadows ; GradingRGBMSW m_midtones ; GradingRGBMSW m_highlights ; GradingRGBMSW m_whites ; double m_scontrast { 1 . 0 } ; } ; OCIOEXPORT bool)",
    "insertText": "operator(const GradingTone & lhs, const GradingTone & rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingTone &)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT DynamicProperty { public : DynamicPropertyType)",
    "insertText": "getType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DynamicProperty&)",
    "insertText": "operator(const DynamicProperty &)"
  },
  {
    "label": "DynamicProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DynamicProperty(const DynamicProperty &)"
  },
  {
    "label": "DynamicProperty()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DynamicProperty()"
  },
  {
    "label": "AsDouble()",
    "kind": "Method",
    "detail": "Function (} ; namespace DynamicPropertyValue { OCIOEXPORT DynamicPropertyDoubleRcPtr)",
    "insertText": "AsDouble(DynamicPropertyRcPtr & prop)"
  },
  {
    "label": "AsGradingPrimary()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT DynamicPropertyGradingPrimaryRcPtr)",
    "insertText": "AsGradingPrimary(DynamicPropertyRcPtr & prop)"
  },
  {
    "label": "AsGradingRGBCurve()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT DynamicPropertyGradingRGBCurveRcPtr)",
    "insertText": "AsGradingRGBCurve(DynamicPropertyRcPtr & prop)"
  },
  {
    "label": "AsGradingTone()",
    "kind": "Method",
    "detail": "Function (OCIOEXPORT DynamicPropertyGradingToneRcPtr)",
    "insertText": "AsGradingTone(DynamicPropertyRcPtr & prop)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} class OCIOEXPORT DynamicPropertyDouble { public : double)",
    "insertText": "getValue()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(double value)"
  },
  {
    "label": "DynamicPropertyDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DynamicPropertyDouble(const DynamicPropertyDouble &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DynamicPropertyDouble&)",
    "insertText": "operator(const DynamicPropertyDouble &)"
  },
  {
    "label": "DynamicPropertyDouble()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DynamicPropertyDouble()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const GradingPrimary & value)"
  },
  {
    "label": "DynamicPropertyGradingPrimary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DynamicPropertyGradingPrimary(const DynamicPropertyGradingPrimary &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DynamicPropertyGradingPrimary&)",
    "insertText": "operator(const DynamicPropertyGradingPrimary &)"
  },
  {
    "label": "DynamicPropertyGradingPrimary()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DynamicPropertyGradingPrimary()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const ConstGradingRGBCurveRcPtr & value)"
  },
  {
    "label": "DynamicPropertyGradingRGBCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DynamicPropertyGradingRGBCurve(const DynamicPropertyGradingRGBCurve &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DynamicPropertyGradingRGBCurve&)",
    "insertText": "operator(const DynamicPropertyGradingRGBCurve &)"
  },
  {
    "label": "DynamicPropertyGradingRGBCurve()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DynamicPropertyGradingRGBCurve()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const GradingTone & value)"
  },
  {
    "label": "DynamicPropertyGradingTone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DynamicPropertyGradingTone(const DynamicPropertyGradingTone &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DynamicPropertyGradingTone&)",
    "insertText": "operator(const DynamicPropertyGradingTone &)"
  },
  {
    "label": "DynamicPropertyGradingTone()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DynamicPropertyGradingTone()"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const ExponentTransform & other)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getValue(double(&vec4)[4])"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const double(&vec4)[4])"
  },
  {
    "label": "getNegativeStyle()",
    "kind": "Method",
    "detail": "Function (NegativeStyle)",
    "insertText": "getNegativeStyle()"
  },
  {
    "label": "setNegativeStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNegativeStyle(NegativeStyle style)"
  },
  {
    "label": "ExponentTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExponentTransform(const ExponentTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ExponentTransform&)",
    "insertText": "operator(const ExponentTransform &)"
  },
  {
    "label": "ExponentTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ExponentTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const ExponentTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const ExponentWithLinearTransform & other)"
  },
  {
    "label": "getGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getGamma(double(&values)[4])"
  },
  {
    "label": "setGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGamma(const double(&values)[4])"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffset(double(&values)[4])"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffset(const double(&values)[4])"
  },
  {
    "label": "ExponentWithLinearTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExponentWithLinearTransform(const ExponentWithLinearTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ExponentWithLinearTransform&)",
    "insertText": "operator(const ExponentWithLinearTransform &)"
  },
  {
    "label": "ExponentWithLinearTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ExponentWithLinearTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const ExponentWithLinearTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const ExposureContrastTransform & other)"
  },
  {
    "label": "setStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStyle(ExposureContrastStyle style)"
  },
  {
    "label": "getExposure()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getExposure()"
  },
  {
    "label": "setExposure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setExposure(double exposure)"
  },
  {
    "label": "isExposureDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isExposureDynamic()"
  },
  {
    "label": "makeExposureDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeExposureDynamic()"
  },
  {
    "label": "makeExposureNonDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeExposureNonDynamic()"
  },
  {
    "label": "getContrast()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getContrast()"
  },
  {
    "label": "setContrast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContrast(double contrast)"
  },
  {
    "label": "isContrastDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isContrastDynamic()"
  },
  {
    "label": "makeContrastDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeContrastDynamic()"
  },
  {
    "label": "makeContrastNonDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeContrastNonDynamic()"
  },
  {
    "label": "getGamma()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getGamma()"
  },
  {
    "label": "setGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGamma(double gamma)"
  },
  {
    "label": "isGammaDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isGammaDynamic()"
  },
  {
    "label": "makeGammaDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeGammaDynamic()"
  },
  {
    "label": "makeGammaNonDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeGammaNonDynamic()"
  },
  {
    "label": "getPivot()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getPivot()"
  },
  {
    "label": "setPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPivot(double pivot)"
  },
  {
    "label": "getLogExposureStep()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getLogExposureStep()"
  },
  {
    "label": "setLogExposureStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLogExposureStep(double logExposureStep)"
  },
  {
    "label": "getLogMidGray()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getLogMidGray()"
  },
  {
    "label": "setLogMidGray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLogMidGray(double logMidGray)"
  },
  {
    "label": "ExposureContrastTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ExposureContrastTransform()"
  },
  {
    "label": "ExposureContrastTransform()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ExposureContrastTransform(const ExposureContrastTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ExposureContrastTransform&)",
    "insertText": "operator(const ExposureContrastTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const ExposureContrastTransform &)"
  },
  {
    "label": "getCCCId()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getCCCId()"
  },
  {
    "label": "setCCCId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCCCId(const char * id)"
  },
  {
    "label": "getCDLStyle()",
    "kind": "Method",
    "detail": "Function (CDLStyle)",
    "insertText": "getCDLStyle()"
  },
  {
    "label": "setCDLStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCDLStyle(CDLStyle)"
  },
  {
    "label": "getInterpolation()",
    "kind": "Method",
    "detail": "Function (Interpolation)",
    "insertText": "getInterpolation()"
  },
  {
    "label": "setInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInterpolation(Interpolation interp)"
  },
  {
    "label": "GetNumFormats()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumFormats()"
  },
  {
    "label": "GetFormatNameByIndex()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFormatNameByIndex(int index)"
  },
  {
    "label": "GetFormatExtensionByIndex()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetFormatExtensionByIndex(int index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FileTransform&)",
    "insertText": "operator(const FileTransform &)"
  },
  {
    "label": "FileTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileTransform()"
  },
  {
    "label": "FileTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileTransform(const FileTransform &)"
  },
  {
    "label": "deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleter(FileTransform * t)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT FixedFunctionTransform : public Transform { public : FixedFunctionTransformRcPtr)",
    "insertText": "Create(FixedFunctionStyle style)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FixedFunctionTransformRcPtr)",
    "insertText": "Create(FixedFunctionStyle style, const double * params, size_t num)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const FixedFunctionTransform & other)"
  },
  {
    "label": "setStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStyle(FixedFunctionStyle style)"
  },
  {
    "label": "getNumParams()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumParams()"
  },
  {
    "label": "getParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getParams(double * params)"
  },
  {
    "label": "setParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setParams(const double * params, size_t num)"
  },
  {
    "label": "FixedFunctionTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixedFunctionTransform(const FixedFunctionTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FixedFunctionTransform&)",
    "insertText": "operator(const FixedFunctionTransform &)"
  },
  {
    "label": "FixedFunctionTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FixedFunctionTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const FixedFunctionTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const GradingPrimaryTransform & other)"
  },
  {
    "label": "setStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStyle(GradingStyle style)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const GradingPrimary & values)"
  },
  {
    "label": "isDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDynamic()"
  },
  {
    "label": "makeDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeDynamic()"
  },
  {
    "label": "makeNonDynamic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeNonDynamic()"
  },
  {
    "label": "GradingPrimaryTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingPrimaryTransform(const GradingPrimaryTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GradingPrimaryTransform&)",
    "insertText": "operator(const GradingPrimaryTransform &)"
  },
  {
    "label": "GradingPrimaryTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GradingPrimaryTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingPrimaryTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const GradingRGBCurveTransform & other)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const ConstGradingRGBCurveRcPtr & values)"
  },
  {
    "label": "getSlope()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getSlope(RGBCurveType c, size_t index)"
  },
  {
    "label": "setSlope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSlope(RGBCurveType c, size_t index, float slope)"
  },
  {
    "label": "slopesAreDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "slopesAreDefault(RGBCurveType c)"
  },
  {
    "label": "getBypassLinToLog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getBypassLinToLog()"
  },
  {
    "label": "setBypassLinToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBypassLinToLog(bool bypass)"
  },
  {
    "label": "GradingRGBCurveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingRGBCurveTransform(const GradingRGBCurveTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GradingRGBCurveTransform&)",
    "insertText": "operator(const GradingRGBCurveTransform &)"
  },
  {
    "label": "GradingRGBCurveTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GradingRGBCurveTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingRGBCurveTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const GradingToneTransform & other)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const GradingTone & values)"
  },
  {
    "label": "GradingToneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GradingToneTransform(const GradingToneTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GradingToneTransform&)",
    "insertText": "operator(const GradingToneTransform &)"
  },
  {
    "label": "GradingToneTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GradingToneTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GradingToneTransform &)"
  },
  {
    "label": "getTransform()",
    "kind": "Method",
    "detail": "Function (ConstTransformRcPtr)",
    "insertText": "getTransform(int index)"
  },
  {
    "label": "getNumTransforms()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getNumTransforms()"
  },
  {
    "label": "appendTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendTransform(TransformRcPtr transform)"
  },
  {
    "label": "prependTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prependTransform(TransformRcPtr transform)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(const ConstConfigRcPtr & config, const char * formatName, std::ostream & os)"
  },
  {
    "label": "GetNumWriteFormats()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumWriteFormats()"
  },
  {
    "label": "GroupTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupTransform(const GroupTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GroupTransform&)",
    "insertText": "operator(const GroupTransform &)"
  },
  {
    "label": "GroupTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GroupTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const GroupTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const LogAffineTransform & other)"
  },
  {
    "label": "getBase()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getBase()"
  },
  {
    "label": "setBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBase(double base)"
  },
  {
    "label": "getLogSideSlopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getLogSideSlopeValue(double(&values)[3])"
  },
  {
    "label": "setLogSideSlopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLogSideSlopeValue(const double(&values)[3])"
  },
  {
    "label": "getLogSideOffsetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getLogSideOffsetValue(double(&values)[3])"
  },
  {
    "label": "setLogSideOffsetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLogSideOffsetValue(const double(&values)[3])"
  },
  {
    "label": "getLinSideSlopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getLinSideSlopeValue(double(&values)[3])"
  },
  {
    "label": "setLinSideSlopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLinSideSlopeValue(const double(&values)[3])"
  },
  {
    "label": "getLinSideOffsetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getLinSideOffsetValue(double(&values)[3])"
  },
  {
    "label": "setLinSideOffsetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLinSideOffsetValue(const double(&values)[3])"
  },
  {
    "label": "LogAffineTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAffineTransform(const LogAffineTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LogAffineTransform&)",
    "insertText": "operator(const LogAffineTransform &)"
  },
  {
    "label": "LogAffineTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LogAffineTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const LogAffineTransform &)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class OCIOEXPORT LogCameraTransform : public Transform { public : LogCameraTransformRcPtr)",
    "insertText": "Create(const double(&linSideBreakValues)[3])"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const LogCameraTransform & other)"
  },
  {
    "label": "getLinSideBreakValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getLinSideBreakValue(double(&values)[3])"
  },
  {
    "label": "setLinSideBreakValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLinSideBreakValue(const double(&values)[3])"
  },
  {
    "label": "getLinearSlopeValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getLinearSlopeValue(double(&values)[3])"
  },
  {
    "label": "setLinearSlopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLinearSlopeValue(const double(&values)[3])"
  },
  {
    "label": "unsetLinearSlopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unsetLinearSlopeValue()"
  },
  {
    "label": "LogCameraTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCameraTransform(const LogCameraTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LogCameraTransform&)",
    "insertText": "operator(const LogCameraTransform &)"
  },
  {
    "label": "LogCameraTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LogCameraTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const LogCameraTransform &)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const LogTransform & other)"
  },
  {
    "label": "setBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBase(double val)"
  },
  {
    "label": "LogTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogTransform(const LogTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LogTransform&)",
    "insertText": "operator(const LogTransform &)"
  },
  {
    "label": "LogTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LogTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const LogTransform &)"
  },
  {
    "label": "getLooks()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getLooks()"
  },
  {
    "label": "setLooks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLooks(const char * looks)"
  },
  {
    "label": "getSkipColorSpaceConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getSkipColorSpaceConversion()"
  },
  {
    "label": "setSkipColorSpaceConversion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSkipColorSpaceConversion(bool skip)"
  },
  {
    "label": "GetLooksResultColorSpace()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLooksResultColorSpace(const ConstConfigRcPtr & config, const ConstContextRcPtr & context, const char * looks)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LookTransform&)",
    "insertText": "operator(const LookTransform &)"
  },
  {
    "label": "LookTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LookTransform()"
  },
  {
    "label": "LookTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LookTransform(const LookTransform &)"
  },
  {
    "label": "deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleter(LookTransform * t)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Lut1DTransformRcPtr)",
    "insertText": "Create(unsigned long length, bool isHalfDomain)"
  },
  {
    "label": "setFileOutputBitDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFileOutputBitDepth(BitDepth bitDepth)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const Lut1DTransform & other)"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "getLength()"
  },
  {
    "label": "setLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLength(unsigned long length)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getValue(unsigned long index, float & r, float & g, float & b)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(unsigned long index, float r, float g, float b)"
  },
  {
    "label": "getInputHalfDomain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getInputHalfDomain()"
  },
  {
    "label": "setInputHalfDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInputHalfDomain(bool isHalfDomain)"
  },
  {
    "label": "getOutputRawHalfs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getOutputRawHalfs()"
  },
  {
    "label": "setOutputRawHalfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOutputRawHalfs(bool isRawHalfs)"
  },
  {
    "label": "getHueAdjust()",
    "kind": "Method",
    "detail": "Function (Lut1DHueAdjust)",
    "insertText": "getHueAdjust()"
  },
  {
    "label": "setHueAdjust()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHueAdjust(Lut1DHueAdjust algo)"
  },
  {
    "label": "setInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInterpolation(Interpolation algo)"
  },
  {
    "label": "Lut1DTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lut1DTransform(const Lut1DTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Lut1DTransform&)",
    "insertText": "operator(const Lut1DTransform &)"
  },
  {
    "label": "Lut1DTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Lut1DTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream&, const Lut1DTransform&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Lut3DTransformRcPtr)",
    "insertText": "Create(unsigned long gridSize)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const Lut3DTransform & other)"
  },
  {
    "label": "getGridSize()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "getGridSize()"
  },
  {
    "label": "setGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGridSize(unsigned long gridSize)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getValue(unsigned long indexR, unsigned long indexG, unsigned long indexB, float & r, float & g, float & b)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(unsigned long indexR, unsigned long indexG, unsigned long indexB, float r, float g, float b)"
  },
  {
    "label": "Lut3DTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lut3DTransform(const Lut3DTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Lut3DTransform&)",
    "insertText": "operator(const Lut3DTransform &)"
  },
  {
    "label": "Lut3DTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Lut3DTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream&, const Lut3DTransform&)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const MatrixTransform & other)"
  },
  {
    "label": "getMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMatrix(double * m44)"
  },
  {
    "label": "setMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMatrix(const double * m44)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffset(double * offset4)"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOffset(const double * offset4)"
  },
  {
    "label": "getFileInputBitDepth()",
    "kind": "Method",
    "detail": "Function (BitDepth)",
    "insertText": "getFileInputBitDepth()"
  },
  {
    "label": "setFileInputBitDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFileInputBitDepth(BitDepth bitDepth)"
  },
  {
    "label": "getFileOutputBitDepth()",
    "kind": "Method",
    "detail": "Function (BitDepth)",
    "insertText": "getFileOutputBitDepth()"
  },
  {
    "label": "Fit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fit(double * m44, double* offset4, const double * oldmin4, const double * oldmax4, const double * newmin4, const double * newmax4)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Identity(double * m44, double * offset4)"
  },
  {
    "label": "Sat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sat(double * m44, double * offset4, double sat, const double * lumaCoef3)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(double * m44, double * offset4, const double * scale4)"
  },
  {
    "label": "View()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "View(double * m44, double * offset4, int * channelHot4, const double * lumaCoef3)"
  },
  {
    "label": "MatrixTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatrixTransform(const MatrixTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MatrixTransform&)",
    "insertText": "operator(const MatrixTransform &)"
  },
  {
    "label": "MatrixTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MatrixTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const MatrixTransform &)"
  },
  {
    "label": "setStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStyle(RangeStyle style)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equals(const RangeTransform & other)"
  },
  {
    "label": "getMinInValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getMinInValue()"
  },
  {
    "label": "setMinInValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinInValue(double val)"
  },
  {
    "label": "hasMinInValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasMinInValue()"
  },
  {
    "label": "unsetMinInValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unsetMinInValue()"
  },
  {
    "label": "setMaxInValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxInValue(double val)"
  },
  {
    "label": "getMaxInValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getMaxInValue()"
  },
  {
    "label": "hasMaxInValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasMaxInValue()"
  },
  {
    "label": "unsetMaxInValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unsetMaxInValue()"
  },
  {
    "label": "setMinOutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinOutValue(double val)"
  },
  {
    "label": "getMinOutValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getMinOutValue()"
  },
  {
    "label": "hasMinOutValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasMinOutValue()"
  },
  {
    "label": "unsetMinOutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unsetMinOutValue()"
  },
  {
    "label": "setMaxOutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxOutValue(double val)"
  },
  {
    "label": "getMaxOutValue()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "getMaxOutValue()"
  },
  {
    "label": "hasMaxOutValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasMaxOutValue()"
  },
  {
    "label": "unsetMaxOutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unsetMaxOutValue()"
  },
  {
    "label": "RangeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeTransform(const RangeTransform &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RangeTransform&)",
    "insertText": "operator(const RangeTransform &)"
  },
  {
    "label": "RangeTransform()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RangeTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; OCIOEXPORT std::ostream&)",
    "insertText": "operator(std::ostream &, const RangeTransform &)"
  }
]