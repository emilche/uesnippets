[
  {
    "label": "FWorldLocations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldLocations"
  },
  {
    "label": "ULocationBasedNetObjectPrioritizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocationBasedNetObjectPrioritizer"
  },
  {
    "label": "FObjectLocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectLocationInfo"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / Prioritization / NetObjectPrioritizer . h \" # include \" Net / Core / NetBitArray . h \" # include \" Math / VectorRegister . h \" # include \" UObject / StrongObjectPtr . h \" # include \" LocationBasedNetObjectPrioritizer . generated . h \" namespace UE::Net { class FWorldLocations ; })",
    "insertText": "UCLASS(Transient, MinimalAPI, Abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: IRISCORE_API virtual void Init(FNetObjectPrioritizerInitParams& Params)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "OnMaxInternalNetRefIndexIncreased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaxInternalNetRefIndexIncreased(uint32 NewMaxInternalIndex)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddObject(uint32 ObjectIndex, FNetObjectPrioritizerAddObjectParams& Params)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(uint32 ObjectIndex, const FNetObjectPrioritizationInfo& Info)"
  },
  {
    "label": "UpdateObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateObjects(FNetObjectPrioritizerUpdateParams&)"
  },
  {
    "label": "ULocationBasedNetObjectPrioritizer()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ULocationBasedNetObjectPrioritizer()"
  },
  {
    "label": "IsUsingWorldLocations()",
    "kind": "Method",
    "detail": "Function (struct FObjectLocationInfo : public FNetObjectPrioritizationInfo { bool)",
    "insertText": "IsUsingWorldLocations()"
  },
  {
    "label": "IsUsingLocationInState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingLocationInState()"
  },
  {
    "label": "SetLocationStateOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocationStateOffset(uint16 Offset)"
  },
  {
    "label": "GetLocationStateOffset()",
    "kind": "Method",
    "detail": "Function (Data [ 0 ] = Offset ; } uint16)",
    "insertText": "GetLocationStateOffset()"
  },
  {
    "label": "GetLocationStateIndex()",
    "kind": "Method",
    "detail": "Function (Data [ 1 ] = Index ; } uint16)",
    "insertText": "GetLocationStateIndex()"
  },
  {
    "label": "GetLocationIndex()",
    "kind": "Method",
    "detail": "Function (Data [ 2 ] = Index& 6 5 5 3 5 U ; Data [ 3 ] = Index>> 1 6 U ; } uint32)",
    "insertText": "GetLocationIndex()"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (} } ; VectorRegister)",
    "insertText": "GetLocation(const FObjectLocationInfo& Info)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocation(const FObjectLocationInfo& Info, VectorRegister Location)"
  },
  {
    "label": "UpdateLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLocation(const uint32 ObjectIndex, const FObjectLocationInfo& Info, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "AllocLocation()",
    "kind": "Method",
    "detail": "Function (private : enum : unsigned { LocationsChunkSize = 6 4* 1 0 2 4,InvalidStateIndex = 6 5 5 3 5 U,InvalidStateOffset = 6 5 5 3 5 U,} ; uint32)",
    "insertText": "AllocLocation()"
  },
  {
    "label": "FreeLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeLocation(uint32 Index)"
  }
]