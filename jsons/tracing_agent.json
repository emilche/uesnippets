[
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "TraceConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceConfig"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACING_AGENT_H_ # define BASE_TRACE_EVENT_TRACING_AGENT_H_ # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / ref_counted_memory . h \" namespace base { class TimeTicks ; namespace trace_event { class TraceConfig ; class BASE_EXPORT TracingAgent { public : using StartAgentTracingCallback = base::OnceCallback<)",
    "insertText": "void(const std::string& agent_name, bool success)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using StopAgentTracingCallback = base::OnceCallback<)",
    "insertText": "void(const std::string& agent_name, const std::string& events_label, const scoped_refptr<base::RefCountedString>& events_str_ptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using RecordClockSyncMarkerCallback = base::OnceCallback<)",
    "insertText": "void(const std::string& sync_id, const TimeTicks& issue_ts, const TimeTicks& issue_end_ts)"
  },
  {
    "label": "TracingAgent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TracingAgent()"
  },
  {
    "label": "GetTracingAgentName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTracingAgentName()"
  },
  {
    "label": "GetTraceEventLabel()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTraceEventLabel()"
  },
  {
    "label": "StartAgentTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAgentTracing(const TraceConfig& trace_config, StartAgentTracingCallback callback)"
  },
  {
    "label": "StopAgentTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAgentTracing(StopAgentTracingCallback callback)"
  },
  {
    "label": "SupportsExplicitClockSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsExplicitClockSync()"
  },
  {
    "label": "RecordClockSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordClockSyncMarker(const std::string& sync_id, RecordClockSyncMarkerCallback callback)"
  }
]