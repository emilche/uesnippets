[
  {
    "label": "FBowyerWatsonTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBowyerWatsonTriangulator"
  },
  {
    "label": "FTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangle"
  },
  {
    "label": "FTriangle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / SlopeUtils . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoCell . h \" # include \" UI / Display . h \" # ifdef CADKERNEL_DEV # include \" UI / DefineForDebug . h \" # endif namespace UE::CADKernel { class FBowyerWatsonTriangulator { protected : struct FTriangle { int32 VertexIndices [ 3 ] ; double SquareRadius ; FPoint Center ;)",
    "insertText": "FTriangle(const int32& Index0, const int32& Index1, const int32& Index2, const TArray<TPair<int32, FPoint2D>>& InVertices)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(Index0, Index1, Index2, InVertices)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const int32& Index0, const int32& Index1, const int32& Index2, const TArray<TPair<int32, FPoint2D>>& InVertices)"
  },
  {
    "label": "Triangle()",
    "kind": "Method",
    "detail": "Function (VertexIndices [ 0 ] = Index0 ; VertexIndices [ 1 ] = Index1 ; VertexIndices [ 2 ] = Index2 ; FTriangle2D)",
    "insertText": "Triangle(InVertices[Index0].Value, InVertices[Index1].Value, InVertices[Index2].Value)"
  },
  {
    "label": "CircumCircleCenterWithSquareRadius()",
    "kind": "Method",
    "detail": "Function (Center = Triangle .)",
    "insertText": "CircumCircleCenterWithSquareRadius(SquareRadius)"
  },
  {
    "label": "FBowyerWatsonTriangulator()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "FBowyerWatsonTriangulator(TArray<TPair<int32, FPoint2D>>& InVertices, TArray<int32>& OutEdgeVertices) : VerticesCount(InVertices.Num()) , Vertices(InVertices) , EdgeVertexIndices(OutEdgeVertices)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Triangulate()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (FTimePoint StartTime =)",
    "insertText": "Now()"
  },
  {
    "label": "DelaunayDebugSession()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_BOWYERWATSON F3DDebugSession)",
    "insertText": "DelaunayDebugSession(bDisplay, TEXT(\"Delaunay Algo\"))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (# endif Vertices .)",
    "insertText": "Sort([](const TPair<int32, FPoint2D>& Vertex1, const TPair<int32, FPoint2D>& Vertex2) {return (Vertex1.Value.U + Vertex1.Value.V) > (Vertex2.Value.U + Vertex2.Value.V); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_BOWYERWATSON)",
    "insertText": "if(bDisplay)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "_(TEXT(\"Vertices\"))"
  },
  {
    "label": "DisplayPoint2DWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint2DWithScale(Vertex.Value , EVisuProperty::YellowPoint, Vertex.Key)"
  },
  {
    "label": "MakeBoundingMesh()",
    "kind": "Method",
    "detail": "Function (} } # endif)",
    "insertText": "MakeBoundingMesh()"
  },
  {
    "label": "DisplayTriangles()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_BOWYERWATSON_STEP)",
    "insertText": "DisplayTriangles()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait(bDisplay)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (int32 StopIndex = 2 0 6 ; # endif EdgeVertexIndices .)",
    "insertText": "Reserve(TriangleSet.Num() * 6)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 VertexIndex = 0 ;)",
    "insertText": "for(int32 VIndex = 0; VIndex < VerticesCount; ++VIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (VertexIndex = VIndex / 2 ; } else { VertexIndex = VerticesCount - 1 - VIndex / 2 ; } SelectedTriangleIndices .)",
    "insertText": "Reset(VerticesCount)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& NewVertex = Vertices [ VertexIndex ] . Value ; # ifdef DEBUG_BOWYERWATSON_STEP F3DDebugSession)",
    "insertText": "_(bDisplay, FString::Printf(TEXT(\"Step %d\"), VIndex))"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "_(TEXT(\"New Point\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(NewVertex * DisplayScale, EVisuProperty::YellowPoint, Vertices[VertexIndex].Key)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait(VIndex >= StopIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # endif bool bHaveDoubt = false ; { double IncreaseFactor = 1 . 0 0 1 ; double ReducingFactor = 0 . 9 9 9 / IncreaseFactor ; double LargeReducingFactor = 0 . 9 9 ;)",
    "insertText": "for(int32 TriangleIndex = 0; TriangleIndex < TriangleSet.Num(); TriangleIndex++)"
  },
  {
    "label": "SquareDistance()",
    "kind": "Method",
    "detail": "Function (const FPoint2D Center = TriangleSet [ TriangleIndex ] . Center ; const double SquareDistanceToCenter = Center .)",
    "insertText": "SquareDistance(NewVertex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double SquareRadiusMax = TriangleSet [ TriangleIndex ] . SquareRadius* IncreaseFactor ; const double SquareRadiusMin = SquareRadiusMax* ReducingFactor ; const double SquareRadiusMinMin = SquareRadiusMin* LargeReducingFactor ;)",
    "insertText": "if(SquareDistanceToCenter < SquareRadiusMin)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectedTriangleIndices .)",
    "insertText": "Add(TriangleIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHaveDoubt = true ; } } else {)",
    "insertText": "if(SquareDistanceToCenter < SquareRadiusMax)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } } # ifdef DEBUG_BOWYERWATSON_STEP)",
    "insertText": "if(bHaveDoubt && (VIndex >= StopIndex))"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "A(bDisplay, TEXT(\"HaveDoubt\"))"
  },
  {
    "label": "DisplaySelectedTrianglesAndComplements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySelectedTrianglesAndComplements()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(!bHaveDoubt)"
  },
  {
    "label": "DoSelectedTrianglesFormSinglePartition()",
    "kind": "Method",
    "detail": "Function (bHaveDoubt = !)",
    "insertText": "DoSelectedTrianglesFormSinglePartition()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SelectedTriangleIndices.Num() == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TriangleIndex = - 1 ; } } } else)",
    "insertText": "if(bHaveDoubt)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TArray<int32> TmpTriangleIndices ; TmpTriangleIndices =)",
    "insertText": "MoveTemp(SelectedTriangleIndices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SelectedTriangleIndices .)",
    "insertText": "Reset(TmpTriangleIndices.Num())"
  },
  {
    "label": "AddTrianglesContainingNewVertexToSelectedTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrianglesContainingNewVertexToSelectedTriangles(NewVertex, TmpTriangleIndices)"
  },
  {
    "label": "AddConnectedTrianglesToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnectedTrianglesToSelection(TmpTriangleIndices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } # ifdef DEBUG_BOWYERWATSON_STEP)",
    "insertText": "if(VIndex == StopIndex)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(AdditionalTriangleIndices.Num() > 0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<int32> BoundaryVertex ; BoundaryVertex .)",
    "insertText": "Reserve(SelectedTriangleIndices.Num() + AdditionalTriangleIndices.Num() + 3)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (const int32 StartVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ Index ] ; BoundaryVertex .)",
    "insertText": "AddUnique(StartVertex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } TArray<TPair<int32,double>> BoundaryVertexToSlope ;)",
    "insertText": "for(int32 Index : BoundaryVertex)"
  },
  {
    "label": "ComputeSlope()",
    "kind": "Method",
    "detail": "Function (FPoint2D Vertex = Vertices [ Index ] . Value ; double Slope =)",
    "insertText": "ComputeSlope(NewVertex, Vertex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (BoundaryVertexToSlope .)",
    "insertText": "Emplace(Index, Slope)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} BoundaryVertexToSlope .)",
    "insertText": "Sort([](const TPair<int32, double>& Vertex1, const TPair<int32, double>& Vertex2) {return Vertex1.Value < Vertex2.Value; })"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bTriangleHasBeenAdded = true ;)",
    "insertText": "while(bTriangleHasBeenAdded)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bTriangleHasBeenAdded = false ;)",
    "insertText": "for(int32& TriangleIndex : AdditionalTriangleIndices)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } FTriangle& CandidateTriangle = TriangleSet [ TriangleIndex ] ; int32 CandidateVertexIndex = - 1 ; int32 ConnectedVertex = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < 3; Index++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Candidate = CandidateTriangle . VertexIndices [ Index ] ;)",
    "insertText": "if(BoundaryVertex.Find(Candidate) == INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CandidateVertexIndex = Candidate ; } else { ConnectedVertex + + ; } })",
    "insertText": "if(ConnectedVertex != 2)"
  },
  {
    "label": "DisplaySelectedTrianglesBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySelectedTrianglesBoundary(BoundaryVertexToSlope)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function ({ F3DDebugSession)",
    "insertText": "A(TEXT(\"New Sel triangle\"))"
  },
  {
    "label": "DisplayTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayTriangle(TriangleIndex, EVisuProperty::YellowCurve)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} { F3DDebugSession)",
    "insertText": "A(TEXT(\"Candidate Point\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(Vertices[CandidateVertexIndex].Value * DisplayScale, EVisuProperty::BluePoint)"
  },
  {
    "label": "ComputeSlope()",
    "kind": "Method",
    "detail": "Function (} # endif double NewVertexSlope =)",
    "insertText": "ComputeSlope(NewVertex, CandidateVertex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = - 1 ; int32 EndIndex = 0 ;)",
    "insertText": "for(int32 ApexIndex = 0; ApexIndex < BoundaryVertexToSlope.Num(); ++ApexIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (EndIndex = ApexIndex ; break ; } } StartIndex = EndIndex = = 0 ? BoundaryVertexToSlope .)",
    "insertText": "Num()"
  },
  {
    "label": "ComputeSlope()",
    "kind": "Method",
    "detail": "Function (FPoint2D StartPoint = Vertices [ BoundaryVertexToSlope [ StartIndex ] . Key ] . Value ; double SlopeNewStartPlusPi =)",
    "insertText": "ComputeSlope(NewVertex, StartPoint)"
  },
  {
    "label": "ComputeSlope()",
    "kind": "Method",
    "detail": "Function (FPoint2D EndPoint = Vertices [ BoundaryVertexToSlope [ EndIndex ] . Key ] . Value ; double SlopeNewEndMinusPi =)",
    "insertText": "ComputeSlope(NewVertex, EndPoint)"
  },
  {
    "label": "DisplayLocalVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayLocalVoronoiDiagram(CandidateVertex, NewVertex, StartPoint, EndPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(SlopeStartCandidate > 0 && SlopeStartCandidate < Slope::RightSlope && SlopeEndCandidate > Slope::ThreeRightSlope && SlopeEndCandidate < Slope::TwoPiSlope)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bTriangleHasBeenAdded = true ;)",
    "insertText": "if(EndIndex == 0 && NewVertexSlope > BoundaryVertexToSlope.Last().Value)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (BoundaryVertexToSlope .)",
    "insertText": "Emplace(CandidateVertexIndex, NewVertexSlope)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (} else { BoundaryVertexToSlope .)",
    "insertText": "EmplaceAt(EndIndex, CandidateVertexIndex, NewVertexSlope)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} BoundaryVertex .)",
    "insertText": "Add(CandidateVertexIndex)"
  },
  {
    "label": "DisplaySelectedTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySelectedTriangles()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif } TriangleIndex = - 1 ; } } } # ifdef DEBUG_BOWYERWATSON_STEP)",
    "insertText": "if(VIndex >= StopIndex)"
  },
  {
    "label": "FindBoundaryEdgesOfSelectedTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindBoundaryEdgesOfSelectedTriangles(EdgeVertexIndices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_BOWYERWATSON_STEP)",
    "insertText": "if(bDisplay && VIndex >= StopIndex)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "_(TEXT(\"To remesh\"))"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "DisplaySegment(Vertices[EdgeVertexIndices[EdgeIndex]].Value * DisplayScale, Vertices[EdgeVertexIndices[EdgeIndex + 1]].Value * DisplayScale, 0, EVisuProperty::YellowCurve)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (} # endif { # ifdef DEBUG_BOWYERWATSON_STEP F3DDebugSession)",
    "insertText": "_(bDisplay && VIndex >= StopIndex, TEXT(\"New Triangles\"))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif int32 EdgeIndex = 0 ;)",
    "insertText": "for(int32 TriangleIndex : SelectedTriangleIndices)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EdgeIndex + = 2 ; } TriangleSet [ TriangleIndex ] .)",
    "insertText": "Set(EdgeVertexIndices[EdgeIndex + 1], EdgeVertexIndices[EdgeIndex], VertexIndex, Vertices)"
  },
  {
    "label": "DisplayTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayTriangle(TriangleIndex, EVisuProperty::BlueCurve)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # endif EdgeIndex + = 2 ; })",
    "insertText": "for(; EdgeIndex < EdgeVertexIndices.Num(); EdgeIndex += 2)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (continue ; } TriangleSet .)",
    "insertText": "Emplace(EdgeVertexIndices[EdgeIndex + 1], EdgeVertexIndices[EdgeIndex], VertexIndex, Vertices)"
  },
  {
    "label": "DisplayTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayTriangle(TriangleSet.Num() - 1, EVisuProperty::BlueCurve)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} # endif EdgeVertexIndices .)",
    "insertText": "Reset(TriangleSet.Num() * 6)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ;)",
    "insertText": "for(; Index < 3; Index++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } } bool bIsOuter = Index<3 ; int32 EndVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ 2 ] ;)",
    "insertText": "for(Index = 0; Index < 3; Index++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 StartVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ Index ] ;)",
    "insertText": "if(StartVertex < VerticesCount && EndVertex < VerticesCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Endex = 0 ;)",
    "insertText": "for(; Endex < EdgeVertexIndices.Num(); Endex += 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EdgeInstanceCount [ Endex / 2 ] + + ; } break ; } })",
    "insertText": "if(Endex == EdgeVertexIndices.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EdgeVertexIndices .)",
    "insertText": "Add(StartVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EdgeVertexIndices .)",
    "insertText": "Add(EndVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EdgeInstanceCount .)",
    "insertText": "Add(bIsOuter ? 0 : 1)"
  },
  {
    "label": "DisplayEdges()",
    "kind": "Method",
    "detail": "Function (} } EndVertex = StartVertex ; } } # ifdef DEBUG_BOWYERWATSON)",
    "insertText": "DisplayEdges()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (# endif Vertices .)",
    "insertText": "SetNum(VerticesCount)"
  },
  {
    "label": "OuterEdgeCount()",
    "kind": "Method",
    "detail": "Function (Indice = Vertices [ Indice ] . Key ; } } int32)",
    "insertText": "OuterEdgeCount()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 EdgeCount = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < EdgeVertexIndices.Num() / 2; ++Index)"
  },
  {
    "label": "GetOuterEdges()",
    "kind": "Method",
    "detail": "Function (EdgeCount + + ; } } return EdgeCount ; } void)",
    "insertText": "GetOuterEdges(TArray<int32>& OuterEdgeIndices)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OuterEdgeIndices .)",
    "insertText": "Reserve(EdgeCount)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OuterEdgeIndices .)",
    "insertText": "Add(EdgeVertexIndices[Index++])"
  },
  {
    "label": "GetOuterVertices()",
    "kind": "Method",
    "detail": "Function (} else { Index + = 2 ; } } } void)",
    "insertText": "GetOuterVertices(TSet<int32>& OuterVertexIndices)"
  },
  {
    "label": "GetOuterVertices()",
    "kind": "Method",
    "detail": "Function (} else { Index + = 2 ; } } } TArray<int32>)",
    "insertText": "GetOuterVertices()"
  },
  {
    "label": "GetOuterVertices()",
    "kind": "Method",
    "detail": "Function (TSet<int32> OuterVertices ;)",
    "insertText": "GetOuterVertices(OuterVertices)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMesh(TArray<int32>& Triangles)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Reset(TriangleSet.Num() * 3)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Append(Triangle.VertexIndices, 3)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FAABB2D VerticesBBox ;)",
    "insertText": "for(const TPair<int32, FPoint2D>& Vertex : Vertices)"
  },
  {
    "label": "DiagonalLength()",
    "kind": "Method",
    "detail": "Function (VerticesBBox + = Vertex . Value ; } const double DiagonalLength = VerticesBBox .)",
    "insertText": "DiagonalLength()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (VerticesBBox .)",
    "insertText": "Offset(DiagonalLength)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Emplace(VerticesId++, VerticesBBox.GetCorner(3))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Emplace(VerticesId++, VerticesBBox.GetCorner(2))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Emplace(VerticesId++, VerticesBBox.GetCorner(0))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Emplace(VerticesId++, VerticesBBox.GetCorner(1))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TriangleSet .)",
    "insertText": "Emplace(VerticesCount, VerticesCount + 1, VerticesCount + 2, Vertices)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (TriangleSet .)",
    "insertText": "Emplace(VerticesCount + 2, VerticesCount + 3, VerticesCount, Vertices)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Vertices .)",
    "insertText": "Reserve(VerticesCount + 4)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TriangleSet .)",
    "insertText": "Reserve(VerticesCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (EdgeVertexIndices .)",
    "insertText": "Reserve(4 * VerticesCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (EdgeInstanceCount .)",
    "insertText": "Reserve(2 * VerticesCount)"
  },
  {
    "label": "FindBoundaryEdgesOfSelectedTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindBoundaryEdgesOfSelectedTriangles(TArray<int32>& BoundaryEdgeVertexIndices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BoundaryEdgeVertexIndices .)",
    "insertText": "Reset(SelectedTriangleIndices.Num() * 6)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 StartVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ Index ] ; int32 Endex = 0 ;)",
    "insertText": "for(; Endex < BoundaryEdgeVertexIndices.Num(); Endex += 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BoundaryEdgeVertexIndices [ Endex ] = - 1 ; BoundaryEdgeVertexIndices [ Endex + 1 ] = - 1 ; break ; } })",
    "insertText": "if(Endex == BoundaryEdgeVertexIndices.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = - 1 ; int32 LastIndex = - 1 ;)",
    "insertText": "for(int32 EdgeIndex = 0; EdgeIndex < EdgeVertexIndices.Num(); EdgeIndex += 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 EdgeIndex = 0 ;)",
    "insertText": "for(; EdgeIndex < IndiceCount; EdgeIndex += 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LastIndex = EdgeVertexIndices [ EdgeIndex + 1 ] ; EdgeVertexIndices [ EdgeIndex ] = - 1 ; EdgeVertexIndices [ EdgeIndex + 1 ] = - 1 ; } })",
    "insertText": "if(EdgeIndex == IndiceCount)"
  },
  {
    "label": "ComputePositiveSlope()",
    "kind": "Method",
    "detail": "Function (const FPoint2D& Point0 = Vertices [ TriangleSet [ CandiadateTriangle ] . VertexIndices [ 0 ] ] . Value ; const FPoint2D& Point1 = Vertices [ TriangleSet [ CandiadateTriangle ] . VertexIndices [ 1 ] ] . Value ; const FPoint2D& Point2 = Vertices [ TriangleSet [ CandiadateTriangle ] . VertexIndices [ 2 ] ] . Value ; double Slope0 =)",
    "insertText": "ComputePositiveSlope(Point0, Point1, NewVertex)"
  },
  {
    "label": "AddConnectedTrianglesToSelection()",
    "kind": "Method",
    "detail": "Function (TriangleIndex = - 1 ; } } } void)",
    "insertText": "AddConnectedTrianglesToSelection(TArray<int32>& CandiadateTriangles)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (EdgeVertexIndices .)",
    "insertText": "Reset((SelectedTriangleIndices.Num() + CandiadateTriangles.Num()) * 6)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bTriangleHasBeenAdded = false ;)",
    "insertText": "for(int32& TriangleIndex : CandiadateTriangles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 StartVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ Index ] ;)",
    "insertText": "for(int32 Endex = 0; Endex < EdgeVertexIndices.Num(); Endex += 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EdgeVertexIndices [ Endex ] = - 1 ; EdgeVertexIndices [ Endex + 1 ] = - 1 ; bEdgeIsFound = true ; break ; } })",
    "insertText": "if(bEdgeIsFound)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EndVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ 2 ] ;)",
    "insertText": "for(int32 Endex = 0; Endex < 3; Endex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 StartVertex = TriangleSet [ TriangleIndex ] . VertexIndices [ Endex ] ;)",
    "insertText": "if(Endex != Index)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(Vertices[EdgeVertexIndices[Index]].Value * DisplayScale, Vertices[EdgeVertexIndices[Index + 1]].Value * DisplayScale, 0, EVisuProperty::YellowCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DisplaySegment(Vertices[EdgeVertexIndices[Index]].Value * DisplayScale, Vertices[EdgeVertexIndices[Index + 1]].Value * DisplayScale, 0, EVisuProperty::PurpleCurve)"
  },
  {
    "label": "DisplayTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayTriangle(Index, EVisuProperty::BlueCurve)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function ({ F3DDebugSession)",
    "insertText": "A(bDisplay, TEXT(\"Select Triangles Add\"))"
  },
  {
    "label": "DisplayTriangle()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "DisplayTriangle(int32 Index, EVisuProperty Property)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(Vertices[TriangleSet[Index].VertexIndices[1]].Value * DisplayScale, Vertices[TriangleSet[Index].VertexIndices[2]].Value * DisplayScale, 0, Property)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(Vertices[TriangleSet[Index].VertexIndices[2]].Value * DisplayScale, Vertices[TriangleSet[Index].VertexIndices[0]].Value * DisplayScale, 0, Property)"
  },
  {
    "label": "DisplaySelectedTrianglesBoundary()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DisplaySelectedTrianglesBoundary(TArray<TPair<int32, double>> VertexToSlop)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "A(TEXT(\"Selected Triangles Boundary\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (FPoint2D VertexPoint = Vertices [ VertexToSlop [ Index ] . Key ] . Value ;)",
    "insertText": "DisplayPoint(VertexPoint * DisplayScale, EVisuProperty::GreenPoint)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(VertexPoint * DisplayScale, Previous * DisplayScale, 0, EVisuProperty::GreenCurve)"
  },
  {
    "label": "DisplayLocalVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (Previous = VertexPoint ; } } void)",
    "insertText": "DisplayLocalVoronoiDiagram(const FPoint2D& CandidateVertex, const FPoint2D& NewVertex, const FPoint2D& StartPoint, const FPoint2D& EndPoint)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "B(TEXT(\"Voronoi Diagram\"))"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function ({ F3DDebugSession)",
    "insertText": "A(TEXT(\"New Vertex\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(NewVertex * DisplayScale, EVisuProperty::RedPoint)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} { F3DDebugSession)",
    "insertText": "A(TEXT(\"Candidate\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(CandidateVertex * DisplayScale, EVisuProperty::BluePoint)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} { F3DDebugSession)",
    "insertText": "A(TEXT(\"Start\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(StartPoint * DisplayScale, EVisuProperty::YellowPoint)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (FPoint2D Normal = NewVertex - StartPoint ; double HalfPi = - DOUBLE_PI / 2 . ; Normal .)",
    "insertText": "Normalize()"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (FPoint2D Tangent = Normal .)",
    "insertText": "Rotate(HalfPi)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (FPoint2D TangentPoint = StartPoint + Tangent ;)",
    "insertText": "DisplaySegment(StartPoint * DisplayScale, TangentPoint * DisplayScale, 1, EVisuProperty::YellowCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(NewVertex * DisplayScale, StartPoint * DisplayScale, 1, EVisuProperty::YellowCurve)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} { F3DDebugSession)",
    "insertText": "A(TEXT(\"Start - Candidate\"))"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(StartPoint * DisplayScale, CandidateVertex * DisplayScale, 1, EVisuProperty::YellowCurve)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} { F3DDebugSession)",
    "insertText": "A(TEXT(\"End\"))"
  },
  {
    "label": "DisplayPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoint(EndPoint * DisplayScale, EVisuProperty::OrangePoint)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (FPoint2D TangentPoint = EndPoint + Tangent ;)",
    "insertText": "DisplaySegment(EndPoint * DisplayScale, TangentPoint * DisplayScale, 1, EVisuProperty::OrangeCurve)"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(NewVertex * DisplayScale, EndPoint * DisplayScale, 1, EVisuProperty::OrangeCurve)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} { F3DDebugSession)",
    "insertText": "A(TEXT(\"End - Candidate\"))"
  },
  {
    "label": "DisplaySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegment(EndPoint * DisplayScale, CandidateVertex * DisplayScale, 1, EVisuProperty::OrangeCurve)"
  }
]