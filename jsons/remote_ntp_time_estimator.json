[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "RemoteNtpTimeEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteNtpTimeEstimator"
  },
  {
    "label": "RemoteNtpTimeEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_INCLUDE_REMOTE_NTP_TIME_ESTIMATOR_H_ # define MODULES_RTP_RTCP_INCLUDE_REMOTE_NTP_TIME_ESTIMATOR_H_ # include<stdint . h> # include \" absl / types / optional . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / numerics / moving_percentile_filter . h \" # include \" system_wrappers / include / rtp_to_ntp_estimator . h \" namespace webrtc { class Clock ; class RemoteNtpTimeEstimator { public :)",
    "insertText": "RemoteNtpTimeEstimator(Clock* clock)"
  },
  {
    "label": "RemoteNtpTimeEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteNtpTimeEstimator(const RemoteNtpTimeEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RemoteNtpTimeEstimator&)",
    "insertText": "operator(const RemoteNtpTimeEstimator&)"
  },
  {
    "label": "RemoteNtpTimeEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RemoteNtpTimeEstimator()"
  },
  {
    "label": "UpdateRtcpTimestamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateRtcpTimestamp(TimeDelta rtt, NtpTime sender_send_time, uint32_t rtp_timestamp)"
  },
  {
    "label": "Estimate()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "Estimate(uint32_t rtp_timestamp)"
  },
  {
    "label": "EstimateNtp()",
    "kind": "Method",
    "detail": "Function (NtpTime ntp_time =)",
    "insertText": "EstimateNtp(rtp_timestamp)"
  },
  {
    "label": "EstimateNtp()",
    "kind": "Method",
    "detail": "Function (} NtpTime)",
    "insertText": "EstimateNtp(uint32_t rtp_timestamp)"
  },
  {
    "label": "EstimateRemoteToLocalClockOffset()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "EstimateRemoteToLocalClockOffset()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (private : Clock* clock_ ; MovingMedianFilter<int64_t> ntp_clocks_offset_estimator_ ; RtpToNtpEstimator rtp_to_ntp_ ; Timestamp last_timing_log_ =)",
    "insertText": "MinusInfinity()"
  }
]