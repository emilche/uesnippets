[
  {
    "label": "UProceduralFoliageComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UProceduralFoliageComponent"
  },
  {
    "label": "FActorPartitionIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPartitionIdentifier"
  },
  {
    "label": "AInstancedFoliageActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AInstancedFoliageActor"
  },
  {
    "label": "FFoliageInstanceBaseCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageInstanceBaseCache"
  },
  {
    "label": "FRadialDamageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRadialDamageEvent"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "FFoliageMeshInfo_Deprecated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageMeshInfo_Deprecated"
  },
  {
    "label": "FFoliageMeshInfo_Deprecated2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFoliageMeshInfo_Deprecated2"
  },
  {
    "label": "UFoliageEditorSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFoliageEditorSubsystem"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / World . h \" # include \" GameFramework / Actor . h \" # include \" FoliageType_InstancedStaticMesh . h \" # include \" FoliageInstanceBase . h \" # include \" InstancedFoliage . h \" # include \" InstancedFoliageCustomVersion . h \" # include \" ISMPartition / ISMPartitionActor . h \" # include \" InstancedFoliageActor . generated . h \" # if WITH_EDITOR class UProceduralFoliageComponent ; struct FActorPartitionIdentifier ; # endif typedef TFunction<)",
    "insertText": "bool(const UPrimitiveComponent*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(notplaceable, hidecategories = (Object, Rendering, Mobility), MinimalAPI, NotBlueprintable)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetBaseComponentFromBaseId()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "GetBaseComponentFromBaseId(const FFoliageInstanceBaseId& BaseId)"
  },
  {
    "label": "ForEachFoliageInfo()",
    "kind": "Method",
    "detail": "Function (# endif private : struct FFoliageInstanceBaseCache ; TMap<TObjectPtr<UFoliageType>,TUniqueObj<FFoliageInfo>> FoliageInfos ; public : bool)",
    "insertText": "ForEachFoliageInfo(TFunctionRef<bool(UFoliageType* FoliageType, FFoliageInfo& FoliageInfo)> InOperation)"
  },
  {
    "label": "GetFoliageInfos()",
    "kind": "Method",
    "detail": "Function (const TMap<UFoliageType*,TUniqueObj<FFoliageInfo>>&)",
    "insertText": "GetFoliageInfos()"
  },
  {
    "label": "AddFoliageInfo()",
    "kind": "Method",
    "detail": "Function (} TUniqueObj<FFoliageInfo>&)",
    "insertText": "AddFoliageInfo(UFoliageType* FoliageType)"
  },
  {
    "label": "AddFoliageInfo()",
    "kind": "Method",
    "detail": "Function (TUniqueObj<FFoliageInfo>&)",
    "insertText": "AddFoliageInfo(UFoliageType* FoliageType, TUniqueObj<FFoliageInfo>&& FoliageInfo)"
  },
  {
    "label": "RemoveFoliageInfoAndCopyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFoliageInfoAndCopyValue(UFoliageType* FoliageType, TUniqueObj<FFoliageInfo>& OutFoliageInfo)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "RerunConstructionScripts()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RerunConstructionScripts()"
  },
  {
    "label": "IsLevelBoundsRelevant()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsLevelBoundsRelevant()"
  },
  {
    "label": "CanMoveFoliageInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveFoliageInstance(const FFoliageInstanceId& InstanceId, const ETypedElementWorldType WorldType)"
  },
  {
    "label": "GetFoliageInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFoliageInstanceTransform(const FFoliageInstanceId& InstanceId, FTransform& OutInstanceTransform, bool bWorldSpace)"
  },
  {
    "label": "SetFoliageInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFoliageInstanceTransform(const FFoliageInstanceId& InstanceId, const FTransform& InstanceTransform, bool bWorldSpace, bool bTeleport)"
  },
  {
    "label": "NotifyFoliageInstanceMovementStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoliageInstanceMovementStarted(const FFoliageInstanceId& InstanceId)"
  },
  {
    "label": "NotifyFoliageInstanceMovementOngoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoliageInstanceMovementOngoing(const FFoliageInstanceId& InstanceId)"
  },
  {
    "label": "NotifyFoliageInstanceMovementEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoliageInstanceMovementEnded(const FFoliageInstanceId& InstanceId)"
  },
  {
    "label": "NotifyFoliageInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoliageInstanceSelectionChanged(const FFoliageInstanceId& InstanceId, const bool bIsSelected)"
  },
  {
    "label": "DeleteFoliageInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFoliageInstances(TArrayView<const FFoliageInstanceId> InstanceIds)"
  },
  {
    "label": "DuplicateFoliageInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateFoliageInstances(TArrayView<const FFoliageInstanceId> InstanceIds, TArray<FFoliageInstanceId>& OutNewInstanceIds)"
  },
  {
    "label": "GetFoliageTypeForInfo()",
    "kind": "Method",
    "detail": "Function (UFoliageType*)",
    "insertText": "GetFoliageTypeForInfo(const FFoliageInfo* FoliageInfo)"
  },
  {
    "label": "HandleFoliageInstancePreMove()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if WITH_EDITOR void)",
    "insertText": "HandleFoliageInstancePreMove(const FFoliageInstanceId& InstanceId)"
  },
  {
    "label": "HandleFoliageInstancePostMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFoliageInstancePostMove(const FFoliageInstanceId& InstanceId)"
  },
  {
    "label": "GetSMInstanceManager()",
    "kind": "Method",
    "detail": "Function (# endif ISMInstanceManager*)",
    "insertText": "GetSMInstanceManager(const FSMInstanceId& InstanceId)"
  },
  {
    "label": "InternalTakeRadialDamage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InternalTakeRadialDamage(float Damage, struct FRadialDamageEvent const& RadialDamageEvent, class AController* EventInstigator, AActor* DamageCauser)"
  },
  {
    "label": "EnterEditMode()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR void)",
    "insertText": "EnterEditMode()"
  },
  {
    "label": "ExitEditMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitEditMode()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "IsListedInSceneOutliner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsListedInSceneOutliner()"
  },
  {
    "label": "CleanupDeletedFoliageType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupDeletedFoliageType()"
  },
  {
    "label": "DetectFoliageTypeChangeAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectFoliageTypeChangeAndUpdate()"
  },
  {
    "label": "GetDefaultGridSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDefaultGridSize(UWorld* InWorld)"
  },
  {
    "label": "ShouldIncludeGridSizeInName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIncludeGridSizeInName(UWorld* InWorld, const FActorPartitionIdentifier& InIdentifier)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSelectionChanged, bool, const TArray<AActor*>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnSelectionChanged SelectionChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnInstanceCoundChanged, const UFoliageType*)"
  },
  {
    "label": "GetLocalFoliageTypeForSource()",
    "kind": "Method",
    "detail": "Function (FOnInstanceCoundChanged InstanceCountChanged ; # endif UFoliageType*)",
    "insertText": "GetLocalFoliageTypeForSource(const UObject* InSource, FFoliageInfo** OutMeshInfo = nullptr)"
  },
  {
    "label": "GetAllFoliageTypesForSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllFoliageTypesForSource(const UObject* InSource, TArray<const UFoliageType*>& OutFoliageTypes)"
  },
  {
    "label": "FindFoliageTypeOfClass()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo*)",
    "insertText": "FindFoliageTypeOfClass(TSubclassOf<UFoliageType_InstancedStaticMesh> Class)"
  },
  {
    "label": "GetOverlappingSphereCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOverlappingSphereCount(const UFoliageType* FoliageType, const FSphere& Sphere)"
  },
  {
    "label": "GetOverlappingBoxCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOverlappingBoxCount(const UFoliageType* FoliageType, const FBox& Box)"
  },
  {
    "label": "GetOverlappingBoxTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingBoxTransforms(const UFoliageType* FoliageType, const FBox& Box, TArray<FTransform>& OutTransforms)"
  },
  {
    "label": "GetOverlappingMeshCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverlappingMeshCounts(const FSphere& Sphere, TMap<UStaticMesh*, int32>& OutCounts)"
  },
  {
    "label": "FindInfo()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo*)",
    "insertText": "FindInfo(const UFoliageType* InType)"
  },
  {
    "label": "GetInstancedFoliageActorForCurrentLevel()",
    "kind": "Method",
    "detail": "Function (AInstancedFoliageActor*)",
    "insertText": "GetInstancedFoliageActorForCurrentLevel(const UWorld* InWorld, bool bCreateIfNone = false)"
  },
  {
    "label": "GetInstancedFoliageActorForLevel()",
    "kind": "Method",
    "detail": "Function (AInstancedFoliageActor*)",
    "insertText": "GetInstancedFoliageActorForLevel(ULevel* Level, bool bCreateIfNone = false)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR AInstancedFoliageActor*)",
    "insertText": "Get(UWorld* InWorld, bool bCreateIfNone, ULevel* InLevelHint = nullptr, const FVector& InLocationHint = FVector(ForceInitToZero))"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (AInstancedFoliageActor*)",
    "insertText": "GetDefault(UWorld* InWorld)"
  },
  {
    "label": "UpdateInstancePartitioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstancePartitioning(UWorld* InWorld)"
  },
  {
    "label": "MoveSelectedInstancesToActorEditorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedInstancesToActorEditorContext(UWorld* InWorld)"
  },
  {
    "label": "FoliageTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FoliageTrace(const UWorld* InWorld, FHitResult& OutHit, const FDesiredFoliageInstance& DesiredInstance, FName InTraceTag = NAME_None, bool InbReturnFaceIndex = false, const FFoliageTraceFilterFunc& FilterFunc = FFoliageTraceFilterFunc(), bool bAverageNormal = false)"
  },
  {
    "label": "CheckCollisionWithWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckCollisionWithWorld(const UWorld* InWorld, const UFoliageType* Settings, const FFoliageInstance& Inst, const FVector& HitNormal, const FVector& HitLocation, UPrimitiveComponent* HitComponent)"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "ShouldExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExport()"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldImport(FStringView ActorPropString, bool IsMovingLevel)"
  },
  {
    "label": "MapRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapRebuild()"
  },
  {
    "label": "MoveInstancesForComponentToCurrentLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesForComponentToCurrentLevel(UActorComponent* InComponent)"
  },
  {
    "label": "MoveInstancesForComponentToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesForComponentToLevel(UActorComponent* InComponent, ULevel* TargetLevel)"
  },
  {
    "label": "MoveInstancesToNewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesToNewComponent(UPrimitiveComponent* InOldComponent, UPrimitiveComponent* InNewComponent)"
  },
  {
    "label": "MoveInstancesToNewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesToNewComponent(UPrimitiveComponent* InOldComponent, const FBox& InBoxWithInstancesToMove, UPrimitiveComponent* InNewComponent)"
  },
  {
    "label": "MoveInstancesToNewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesToNewComponent(UWorld* InWorld, UPrimitiveComponent* InOldComponent, const FBox& InBoxWithInstancesToMove, UPrimitiveComponent* InNewComponent)"
  },
  {
    "label": "MoveInstancesToNewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesToNewComponent(UWorld* InWorld, UPrimitiveComponent* InOldComponent, UPrimitiveComponent* InNewComponent)"
  },
  {
    "label": "MoveSelectedInstancesToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedInstancesToLevel(ULevel* InTargetLevel)"
  },
  {
    "label": "MoveAllInstancesToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAllInstancesToLevel(ULevel* InTargetLevel)"
  },
  {
    "label": "MoveInstancesToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesToLevel(ULevel* InTargetLevel, TSet<int32>& InInstanceList, FFoliageInfo* InCurrentMeshInfo, UFoliageType* InFoliageType, bool bSelect = false)"
  },
  {
    "label": "GetInstancesForComponent()",
    "kind": "Method",
    "detail": "Function (TMap<UFoliageType*,TArray<const FFoliageInstancePlacementInfo*>>)",
    "insertText": "GetInstancesForComponent(UActorComponent* InComponent)"
  },
  {
    "label": "DeleteInstancesForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteInstancesForComponent(UActorComponent* InComponent)"
  },
  {
    "label": "DeleteInstancesForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteInstancesForComponent(UActorComponent* InComponent, const UFoliageType* InFoliageType)"
  },
  {
    "label": "DeleteInstancesForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteInstancesForComponent(UWorld* InWorld, UActorComponent* InComponent)"
  },
  {
    "label": "DeleteInstancesForProceduralFoliageComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInstancesForProceduralFoliageComponent(const UProceduralFoliageComponent* InProceduralFoliageComponent, bool bInRebuildTree)"
  },
  {
    "label": "DeleteInstancesForProceduralFoliageComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInstancesForProceduralFoliageComponent(const FGuid& InProceduralGuid, bool bInRebuildTree)"
  },
  {
    "label": "DeleteInstancesForAllProceduralFoliageComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInstancesForAllProceduralFoliageComponents(bool bInRebuildTree)"
  },
  {
    "label": "ContainsInstancesFromProceduralFoliageComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsInstancesFromProceduralFoliageComponent(const UProceduralFoliageComponent* InProceduralFoliageComponent)"
  },
  {
    "label": "ContainsInstancesFromProceduralFoliageComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsInstancesFromProceduralFoliageComponent(const FGuid& InProceduralGuid)"
  },
  {
    "label": "FindOrAddMesh()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo*)",
    "insertText": "FindOrAddMesh(UFoliageType* InType)"
  },
  {
    "label": "AddFoliageType()",
    "kind": "Method",
    "detail": "Function (UFoliageType*)",
    "insertText": "AddFoliageType(const UFoliageType* InType, FFoliageInfo** OutInfo = nullptr)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo*)",
    "insertText": "AddMesh(UStaticMesh* InMesh, UFoliageType** OutSettings = nullptr, const UFoliageType_InstancedStaticMesh* DefaultSettings = nullptr)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (FFoliageInfo*)",
    "insertText": "AddMesh(UFoliageType* InType)"
  },
  {
    "label": "RemoveFoliageType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFoliageType(UFoliageType** InFoliageType, int32 Num)"
  },
  {
    "label": "SelectInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectInstance(UInstancedStaticMeshComponent* InComponent, int32 InComponentInstanceIndex, bool bToggle)"
  },
  {
    "label": "SelectInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectInstance(AActor* InActor, bool bToggle)"
  },
  {
    "label": "GetSelectionBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetSelectionBoundingBox()"
  },
  {
    "label": "HasSelectedInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedInstances()"
  },
  {
    "label": "GetSelectedInstancesFoliageType()",
    "kind": "Method",
    "detail": "Function (TMap<UFoliageType*,FFoliageInfo*>)",
    "insertText": "GetSelectedInstancesFoliageType()"
  },
  {
    "label": "FindFoliageType()",
    "kind": "Method",
    "detail": "Function (const UFoliageType*)",
    "insertText": "FindFoliageType(const FFoliageInfo* InFoliageInfo)"
  },
  {
    "label": "GetAllInstancesFoliageType()",
    "kind": "Method",
    "detail": "Function (TMap<UFoliageType*,FFoliageInfo*>)",
    "insertText": "GetAllInstancesFoliageType()"
  },
  {
    "label": "ApplySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySelection(bool bApply)"
  },
  {
    "label": "GetSelectionLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelectionLocation(FBox& OutLocation)"
  },
  {
    "label": "HasFoliageAttached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFoliageAttached(UActorComponent* InComponent)"
  },
  {
    "label": "NotifyFoliageTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoliageTypeChanged(UFoliageType* FoliageType, bool bSourceChanged)"
  },
  {
    "label": "NotifyFoliageTypeWillChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoliageTypeWillChange(UFoliageType* FoliageType)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(AInstancedFoliageActor, FOnFoliageTypeMeshChanged, UFoliageType*)"
  },
  {
    "label": "OnFoliageTypeMeshChanged()",
    "kind": "Method",
    "detail": "Function (FOnFoliageTypeMeshChanged&)",
    "insertText": "OnFoliageTypeMeshChanged()"
  },
  {
    "label": "RemoveBaseComponentOnFoliageTypeInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBaseComponentOnFoliageTypeInstances(UFoliageType* FoliageType)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITORONLY_DATA TMap<UFoliageType*,TUniqueObj<struct FFoliageMeshInfo_Deprecated>> FoliageMeshes_Deprecated ; TMap<UFoliageType*,TUniqueObj<struct FFoliageMeshInfo_Deprecated2>> FoliageMeshes_Deprecated2 ; # endif # if WITH_EDITOR void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "MoveInstancesToNewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesToNewComponent(UPrimitiveComponent* InOldComponent, UPrimitiveComponent* InNewComponent, TFunctionRef<TArray<int32>(const FFoliageInfo&)> GetInstancesToMoveFunc)"
  },
  {
    "label": "DeleteInstancesForProceduralFoliageComponentInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInstancesForProceduralFoliageComponentInternal(const FGuid& InProceduralGuid, bool bInRebuildTree, bool bInDeleteAll)"
  },
  {
    "label": "MoveInstancesForMovedComponent()",
    "kind": "Method",
    "detail": "Function (class UFoliageEditorSubsystem ; bool)",
    "insertText": "MoveInstancesForMovedComponent(UActorComponent* InComponent)"
  },
  {
    "label": "UpdateInstancePartitioningForMovedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstancePartitioningForMovedComponent(UActorComponent* InComponent)"
  },
  {
    "label": "MoveInstancesForMovedOwnedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveInstancesForMovedOwnedActors(AActor* InActor)"
  },
  {
    "label": "UpdateFoliageActorInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFoliageActorInstance(AActor* InActor)"
  },
  {
    "label": "DeleteFoliageActorInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFoliageActorInstance(AActor* InActor)"
  },
  {
    "label": "PostApplyLevelOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostApplyLevelOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "PostApplyLevelTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostApplyLevelTransform(const FTransform& InTransform)"
  }
]