[
  {
    "label": "FPostProcessSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettings"
  },
  {
    "label": "EDepthOfFieldMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDepthOfFieldMethod"
  },
  {
    "label": "EAutoExposureMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAutoExposureMethod"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EBloomMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBloomMethod"
  },
  {
    "label": "ETemperatureMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETemperatureMethod"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FColorGradePerRangeSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorGradePerRangeSettings"
  },
  {
    "label": "FColorGradingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorGradingSettings"
  },
  {
    "label": "FFilmStockSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilmStockSettings"
  },
  {
    "label": "FGaussianSumBloomSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGaussianSumBloomSettings"
  },
  {
    "label": "FConvolutionBloomSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvolutionBloomSettings"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FLensBloomSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLensBloomSettings"
  },
  {
    "label": "FLensImperfectionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLensImperfectionSettings"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FLensSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLensSettings"
  },
  {
    "label": "FCameraExposureSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCameraExposureSettings"
  },
  {
    "label": "UCurveFloat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveFloat"
  },
  {
    "label": "FWeightedBlendable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedBlendable"
  },
  {
    "label": "FWeightedBlendables",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedBlendables"
  },
  {
    "label": "FPostProcessSettingsDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessSettingsDebugInfo"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScene"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / ScriptInterface . h \" # include \" Engine / BlendableInterface . h \" # include \" SceneUtils . h \" # include \" Engine / EngineTypes . h \" # include \" Scene . generated . h \" struct FPostProcessSettings ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (AEM_Histogram)",
    "insertText": "UMETA(DisplayName = \"Auto Exposure Histogram\"), AEM_Basic UMETA(DisplayName = \"Auto Exposure Basic\"), AEM_Manual UMETA(DisplayName = \"Manual\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Bilateral)",
    "insertText": "UMETA(DisplayName = \"Bilateral\"), Fusion UMETA(DisplayName = \"Fusion (Experimental)\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (BM_SOG)",
    "insertText": "UMETA(DisplayName = \"Standard\"), BM_FFT UMETA(DisplayName = \"Convolution\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (TEMP_WhiteBalance)",
    "insertText": "UMETA(DisplayName = \"White Balance\"), TEMP_ColorTemperature UMETA(DisplayName = \"Color Temperature\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ScreenSpace)",
    "insertText": "UMETA(DisplayName = \"Screen Space\"), RayTracing UMETA(DisplayName = \"Ray Tracing\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Default)",
    "insertText": "UMETA(DisplayName = \"Project Default\"), SurfaceCache UMETA(DisplayName = \"Surface Cache\"), HitLightingForReflections UMETA(DisplayName = \"Hit Lighting for Reflections\"), HitLighting UMETA(DisplayName = \"Hit Lighting\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Raster)",
    "insertText": "UMETA(DisplayName = \"Raster\"), RayTracing UMETA(DisplayName = \"Ray Tracing\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Disabled)",
    "insertText": "UMETA(DisplayName = \"Disabled\"), Hard_shadows UMETA(DisplayName = \"Hard Shadows\"), Area_shadows UMETA(DisplayName = \"Area Shadows\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Usual = 0)",
    "insertText": "UMETA(DisplayName = \"Usual\", ToolTip = \"The PlanarReflection actor works as usual on all platforms.\"), MobilePPRExclusive = 1 UMETA(DisplayName = \"MobilePPR Exclusive\", ToolTip = \"The PlanarReflection actor is only used for mobile pixel projection reflection, it will not affect PC/Console. MobileMSAA will be disabled as a side effect.\"), MobilePPR = 2 UMETA(DisplayName = \"MobilePPR\", ToolTip = \"The PlanarReflection actor still works as usual on PC/Console platform and is used for mobile pixel projected reflection on mobile platform. MobileMSAA will be disabled as a side effect.\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Disabled = 0)",
    "insertText": "UMETA(DisplayName = \"Disabled\", ToolTip = \"Disabled.\"), BestPerformance = 1 UMETA(DisplayName = \"Best Performance\", ToolTip = \"Best performance but may have some artifacts in some view angles.\"), BetterQuality = 2 UMETA(DisplayName = \"Better Quality\", ToolTip = \"Better quality and reasonable performance and could fix some artifacts, but the PlanarReflection mesh has to render twice.\"), BestQuality = 3 UMETA(DisplayName = \"Best Quality\", ToolTip = \"Best quality but will be much heavier.\")"
  },
  {
    "label": "GetMobilePlanarReflectionMode()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMobilePlanarReflectionMode()"
  },
  {
    "label": "GetMobilePixelProjectedReflectionQuality()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMobilePixelProjectedReflectionQuality()"
  },
  {
    "label": "IsMobilePixelProjectedReflectionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobilePixelProjectedReflectionEnabled(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "IsUsingMobilePixelProjectedReflection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingMobilePixelProjectedReflection(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Interp, BlueprintReadWrite, Category = \"Color Grading\", meta = (UIMin = \"0.0\", UIMax = \"2.0\", Delta = \"0.01\", ColorGradingMode = \"saturation\", SupportDynamicSliderMaxValue = \"true\", DisplayName = \"Saturation\"))"
  },
  {
    "label": "FColorGradePerRangeSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColorGradePerRangeSettings()"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (Saturation =)",
    "insertText": "FVector4(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (Offset =)",
    "insertText": "FVector4(0.0f, 0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Interp,BlueprintReadWrite, Category = \"Color Grading\")"
  },
  {
    "label": "FColorGradingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColorGradingSettings()"
  },
  {
    "label": "ExportToPostProcessSettings()",
    "kind": "Method",
    "detail": "Function (ShadowsMax = 0 . 0 9 f ; HighlightsMin = 0 . 5 f ; HighlightsMax = 1 . 0 f ; } void)",
    "insertText": "ExportToPostProcessSettings(FPostProcessSettings* OutPostProcessSettings)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Interp, BlueprintReadWrite, Category = \"Film Stock\", meta = (UIMin = \"0.0\", UIMax = \"1.0\", DisplayName = \"Slope\"))"
  },
  {
    "label": "FFilmStockSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilmStockSettings()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Interp, BlueprintReadWrite, Category=\"Lens|Bloom\", meta=(ClampMin = \"0.0\", UIMax = \"8.0\", DisplayName = \"Intensity\"))"
  },
  {
    "label": "FGaussianSumBloomSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGaussianSumBloomSettings()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Intensity = 0 . 6 7 5 f ; Threshold = - 1 . 0 f ; SizeScale = 4 . 0 ; Filter1Tint =)",
    "insertText": "FLinearColor(0.3465f, 0.3465f, 0.3465f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Filter1Size = 0 . 3 f ; Filter2Tint =)",
    "insertText": "FLinearColor(0.138f, 0.138f, 0.138f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Filter2Size = 1 . 0 f ; Filter3Tint =)",
    "insertText": "FLinearColor(0.1176f, 0.1176f, 0.1176f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Filter3Size = 2 . 0 f ; Filter4Tint =)",
    "insertText": "FLinearColor(0.066f, 0.066f, 0.066f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Filter5Size = 3 0 . 0 f ; Filter6Tint =)",
    "insertText": "FLinearColor(0.061f, 0.061f, 0.061f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Lens|Bloom\", meta = (DisplayName = \"Convolution Kernel\"))"
  },
  {
    "label": "FConvolutionBloomSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConvolutionBloomSettings()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (Texture = nullptr ; ScatterDispersion = 1 . 0 f ; Size = 1 . f ; CenterUV =)",
    "insertText": "FVector2D(0.5f, 0.5f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Interp, BlueprintReadWrite, Category = \"Gaussian Sum Method\")"
  },
  {
    "label": "FLensBloomSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLensBloomSettings()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Lens|Dirt Mask\", meta=(DisplayName = \"Dirt Mask Texture\"))"
  },
  {
    "label": "FLensImperfectionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLensImperfectionSettings()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (DirtMask = nullptr ; DirtMaskIntensity = 0 . 0 f ; DirtMaskTint =)",
    "insertText": "FLinearColor(0.5f, 0.5f, 0.5f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Interp, BlueprintReadWrite, Category = \"Lens\")"
  },
  {
    "label": "FLensSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLensSettings()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Exposure\", meta=(DisplayName = \"Method\"))"
  },
  {
    "label": "FCameraExposureSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCameraExposureSettings()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(interp, BlueprintReadWrite, Category=FWeightedBlendable, meta=(ClampMin = \"0.0\", ClampMax = \"1.0\", Delta = \"0.01\"))"
  },
  {
    "label": "FWeightedBlendable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWeightedBlendable() : Weight(-1) , Object(0)"
  },
  {
    "label": "FWeightedBlendable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeightedBlendable(float InWeight, UObject* InObject) : Weight(InWeight) , Object(InObject)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FWeightedBlendables()"
  },
  {
    "label": "FWeightedBlendables()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeightedBlendables(const TArray<FWeightedBlendable>& InArray) : Array(InArray)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; struct FPostProcessSettingsDebugInfo { FString Name ; float Priority ; float CurrentBlendWeight ; bool bIsEnabled ; bool bIsUnbound ; } ;)",
    "insertText": "USTRUCT(BlueprintType, meta=(HiddenByDefault, DisableSplitPin))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Overrides, meta=(PinHiddenByDefault, InlineEditConditionToggle))"
  },
  {
    "label": "OnAfterLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterLoad()"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (FWeightedBlendable)",
    "insertText": "Element(1.0f, Blendables_DEPRECATED[i])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (WeightedBlendables . Array .)",
    "insertText": "Add(Element)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } Blendables_DEPRECATED .)",
    "insertText": "Empty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOverride_BloomConvolutionPreFilterMin = bOverride_BloomConvolutionPreFilter_DEPRECATED ; bOverride_BloomConvolutionPreFilterMax = bOverride_BloomConvolutionPreFilter_DEPRECATED ; bOverride_BloomConvolutionPreFilterMult = bOverride_BloomConvolutionPreFilter_DEPRECATED ; })",
    "insertText": "if(BloomConvolutionPreFilter_DEPRECATED.X > -1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BloomConvolutionPreFilterMin = BloomConvolutionPreFilter_DEPRECATED . X ; BloomConvolutionPreFilterMax = BloomConvolutionPreFilter_DEPRECATED . Y ; BloomConvolutionPreFilterMult = BloomConvolutionPreFilter_DEPRECATED . Z ; })",
    "insertText": "if(bOverride_LocalExposureContrastScale_DEPRECATED)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOverride_LocalExposureHighlightContrastScale = bOverride_LocalExposureContrastScale_DEPRECATED ; bOverride_LocalExposureShadowContrastScale = bOverride_LocalExposureContrastScale_DEPRECATED ; })",
    "insertText": "if(LocalExposureContrastScale_DEPRECATED != 1.0f)"
  },
  {
    "label": "AddBlendable()",
    "kind": "Method",
    "detail": "Function (LocalExposureHighlightContrastScale = LocalExposureContrastScale_DEPRECATED ; LocalExposureShadowContrastScale = LocalExposureContrastScale_DEPRECATED ; } } # endif void)",
    "insertText": "AddBlendable(TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (WeightedBlendables . Array [ i ] . Weight = InWeight ; return ; } } WeightedBlendables . Array .)",
    "insertText": "Add(FWeightedBlendable(InWeight, Object))"
  },
  {
    "label": "RemoveBlendable()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveBlendable(TScriptInterface<IBlendableInterface> InBlendableObject)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (WeightedBlendables . Array .)",
    "insertText": "RemoveAt(i)"
  },
  {
    "label": "FPostProcessSettings()",
    "kind": "Method",
    "detail": "Function (- - i ; - - count ; } } } })",
    "insertText": "FPostProcessSettings()"
  },
  {
    "label": "FPostProcessSettings()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FPostProcessSettings(const FPostProcessSettings&)"
  },
  {
    "label": "FPostProcessSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPostProcessSettings(FPostProcessSettings&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPostProcessSettings&)",
    "insertText": "operator(const FPostProcessSettings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPostProcessSettings&)",
    "insertText": "operator(FPostProcessSettings&&)"
  },
  {
    "label": "SetBaseValues()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "SetBaseValues()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (AmbientCubemapIntensity = 0 . 0 f ; ColorGradingIntensity = 0 . 0 f ; } int32 kDefaultDepthOfFieldBladeCount = 5 ; # if WITH_EDITORONLY_DATA bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_EDITORONLY_DATA template<> struct TStructOpsTypeTraits<FPostProcessSettings> : public TStructOpsTypeTraitsBase2<FPostProcessSettings> { enum { WithSerializer = true,WithPostSerialize = true,} ; } ; # endif)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  }
]