[
  {
    "label": "FPoint2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint2D"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (} ; public : const FPoint ZeroPoint ; const FPoint UnitPoint ; const FPoint FarawayPoint ; const int32 Dimension ;)",
    "insertText": "FPoint(double InCoordX = 0., double InCoordY = 0., double InCoordZ = 0.)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (X = InCoordX ; Y = InCoordY ; Z = InCoordZ ; })",
    "insertText": "FPoint(const FPoint2D& InPoint2D)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPoint(const double* const InPoint) : X(InPoint[0]) , Y(InPoint[1]) , Z(InPoint[2])"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPoint(const FPoint& Point) : X(Point.X) , Y(Point.Y) , Z(Point.Z)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XYZ [ Index ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "operator(const FPoint& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "operator(const FVector& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "operator(const FVector3f& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "operator(double InvScale)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (X - = Point . X ; Y - = Point . Y ; Z - = Point . Z ; return* this ; } FPoint&)",
    "insertText": "operator(double Scale)"
  },
  {
    "label": "NonUniformScale()",
    "kind": "Method",
    "detail": "Function (X* = Scale ; Y* = Scale ; Z* = Scale ; return* this ; } void)",
    "insertText": "NonUniformScale(const FPoint& Scale)"
  },
  {
    "label": "RealCompare()",
    "kind": "Method",
    "detail": "Function (int32 Compare =)",
    "insertText": "RealCompare(X, Other.X)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FVector()"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FVector3f()"
  },
  {
    "label": "SetMin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMin(const FPoint& Point)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "Min(X, Point.X)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "Min(Y, Point.Y)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Z =)",
    "insertText": "Min(Z, Point.Z)"
  },
  {
    "label": "SetMax()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMax(const FPoint& Point)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "Max(X, Point.X)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "Max(Y, Point.Y)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Z =)",
    "insertText": "Max(Z, Point.Z)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(double InCoordX = 0., double InCoordY = 0., double InCoordZ = 0.)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (X = InCoordX ; Y = InCoordY ; Z = InCoordZ ; } void)",
    "insertText": "Set(double* InCoordinates)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (X = InCoordinates [ 0 ] ; Y = InCoordinates [ 1 ] ; Z = InCoordinates [ 2 ] ; } double)",
    "insertText": "Length()"
  },
  {
    "label": "SquareLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SquareLength()"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (} FPoint&)",
    "insertText": "Normalize()"
  },
  {
    "label": "Middle()",
    "kind": "Method",
    "detail": "Function (} else { return* this / Norm ; } } FPoint)",
    "insertText": "Middle(const FPoint& Point)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Distance(const FPoint& Point)"
  },
  {
    "label": "SquareDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SquareDistance(const FPoint& Point)"
  },
  {
    "label": "ComputeCosinus()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeCosinus(const FPoint& OtherVector)"
  },
  {
    "label": "ComputeSinus()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeSinus(const FPoint& OtherVector)"
  },
  {
    "label": "ComputeAngle()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeAngle(const FPoint& OtherVector)"
  },
  {
    "label": "SignedAngle()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SignedAngle(const FPoint& Vector2, const FPoint& Normal)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPoint& Point)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(&Point, sizeof(FPoint))"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FPoint& Other, double Tolerance = UE_DOUBLE_SMALL_NUMBER)"
  },
  {
    "label": "FPointH()",
    "kind": "Method",
    "detail": "Function (} ; public : const FPointH ZeroPoint ; const FPointH FarawayPoint ; const int32 Dimension ;)",
    "insertText": "FPointH() : X(0.) , Y(0.) , Z(0.) , W(1.)"
  },
  {
    "label": "FPointH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPointH(const FPoint& Point, double Weight) : X(Point.X* Weight) , Y(Point.Y* Weight) , Z(Point.Z* Weight) , W(Weight)"
  },
  {
    "label": "FPointH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPointH(const double InX, const double InY, const double InZ, const double InW) : X(InX) , Y(InY) , Z(InZ) , W(InW)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return XYZW [ Index ] ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } FPointH)",
    "insertText": "operator(const FPointH& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPointH)",
    "insertText": "operator(double Factor)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FPoint()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPointH& Point)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(&Point, sizeof(FPointH))"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (} ; public : const FPoint2D ZeroPoint ; const FPoint2D FarawayPoint ; const int32 Dimension ;)",
    "insertText": "FPoint2D()"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (U = V = 0 . 0 ; })",
    "insertText": "FPoint2D(double NewU, double NewV) : U(NewU) , V(NewV)"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPoint2D(const FPoint& Point) : U(Point.X) , V(Point.Y)"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPoint2D(const FPoint2D& Point) : U(Point.U) , V(Point.V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint2D&)",
    "insertText": "operator(const FPoint2D& Point)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (U = Point . U ; V = Point . V ; return* this ; } FPoint2D)",
    "insertText": "Rotate(double Theta)"
  },
  {
    "label": "Middle()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "Middle(const FPoint2D& Point)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Distance(const FPoint2D& Point)"
  },
  {
    "label": "SquareDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SquareDistance(const FPoint2D& Point)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (} FPoint2D&)",
    "insertText": "Normalize(double& Norm)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPoint2D& other)"
  },
  {
    "label": "RealCompare()",
    "kind": "Method",
    "detail": "Function (int32 cmp =)",
    "insertText": "RealCompare(U, other.U)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(double NewU, double NewV = 0.)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (U = NewU ; V = NewV ; } void)",
    "insertText": "Set(double* NewCoordinate)"
  },
  {
    "label": "GetPerpendicularVector()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "GetPerpendicularVector()"
  },
  {
    "label": "DiagonalAxisCoordinate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "DiagonalAxisCoordinate()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(&Point, sizeof(FPoint2D))"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FPoint2D& Other, double Tolerance = UE_DOUBLE_SMALL_NUMBER)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FPoint(const FPoint2D& Point)"
  },
  {
    "label": "FFPoint()",
    "kind": "Method",
    "detail": "Function (} ; const FFPoint ZeroPoint ; const FFPoint FarawayPoint ; const int32 Dimension ;)",
    "insertText": "FFPoint(float InX = 0., float InY = 0., float InZ = 0.)"
  },
  {
    "label": "FFPoint()",
    "kind": "Method",
    "detail": "Function (X = InX ; Y = InY ; Z = InZ ; })",
    "insertText": "FFPoint(const FPoint& Point)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(float)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Y(float)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Z(float)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(&Point, sizeof(FFPoint))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "operator(float Scale, const FPoint& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "operator(double Scale, const FPoint2D& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "operator(float Scale, const FPoint2D& Point)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetTypeHash(const UE::CADKernel::FPoint& Point)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const UE::CADKernel::FPoint2D& Point)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const UE::CADKernel::FPointH& Point)"
  }
]