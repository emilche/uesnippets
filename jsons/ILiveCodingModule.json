[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ILiveCodingModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILiveCodingModule"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Modules / ModuleInterface . h \" # define LIVE_CODING_MODULE_NAME \" LiveCoding \" class FText ; enum class ELiveCodingCompileFlags : uint8 { None = 0,WaitForCompletion = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ELiveCodingCompileFlags)"
  },
  {
    "label": "EnableByDefault()",
    "kind": "Method",
    "detail": "Function (Success,NoChanges,InProgress,CompileStillActive,NotStarted,Failure,Cancelled,} ; class ILiveCodingModule : public IModuleInterface { public : void)",
    "insertText": "EnableByDefault(bool bEnabled)"
  },
  {
    "label": "IsEnabledByDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledByDefault()"
  },
  {
    "label": "HasStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStarted()"
  },
  {
    "label": "EnableForSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableForSession(bool bEnabled)"
  },
  {
    "label": "IsEnabledForSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForSession()"
  },
  {
    "label": "CanEnableForSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnableForSession()"
  },
  {
    "label": "GetEnableErrorText()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetEnableErrorText()"
  },
  {
    "label": "AutomaticallyCompileNewClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutomaticallyCompileNewClasses()"
  },
  {
    "label": "ShowConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowConsole()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compile(ELiveCodingCompileFlags CompileFlags, ELiveCodingCompileResult* Result)"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnPatchCompleteDelegate)"
  },
  {
    "label": "GetOnPatchCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (FOnPatchCompleteDelegate&)",
    "insertText": "GetOnPatchCompleteDelegate()"
  }
]