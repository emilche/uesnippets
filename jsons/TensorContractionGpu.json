[
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "LaunchKernels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LaunchKernels"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_GPU_H # define EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_GPU_H # if)",
    "insertText": "defined(EIGEN_USE_GPU) && defined(EIGEN_GPUCC)"
  },
  {
    "label": "EigenContractionKernelInternal()",
    "kind": "Method",
    "detail": "Function (template<Scalar,Index,LhsMapper,RhsMapper,OutputMapper,bool needs_edge_check> __device__ EIGEN_STRONG_INLINE void)",
    "insertText": "EigenContractionKernelInternal(const LhsMapper lhs, const RhsMapper rhs, const OutputMapper output, Scalar* lhs_shmem, Scalar* rhs_shmem, const Index m_size, const Index n_size, const Index k_size)"
  },
  {
    "label": "prefetchIntoRegisters()",
    "kind": "Method",
    "detail": "Function (const Index m_block_idx = blockIdx . x ; const Index n_block_idx = blockIdx . y ; const Index base_m = 6 4* m_block_idx ; const Index base_n = 6 4* n_block_idx ; Scalar lhs_pf0 ; Scalar lhs_pf1 ; Scalar lhs_pf2 ; Scalar lhs_pf3 ; Scalar lhs_pf4 ; Scalar lhs_pf5 ; Scalar lhs_pf6 ; Scalar lhs_pf7 ; Scalar rhs_pf0 ; Scalar rhs_pf1 ; Scalar rhs_pf2 ; Scalar rhs_pf3 ; Scalar rhs_pf4 ; Scalar rhs_pf5 ; Scalar rhs_pf6 ; Scalar rhs_pf7 ; const Index lhs_store_idx_base = threadIdx . y* 7 2 + threadIdx . x* 9 + threadIdx . z ; const Index rhs_store_idx_base = threadIdx . y* 7 2 + threadIdx . z* 8 + threadIdx . x ; const Index lhs_store_idx_0 = lhs_store_idx_base + 5 7 6* 0 ; const Index lhs_store_idx_1 = lhs_store_idx_base + 5 7 6* 1 ; const Index lhs_store_idx_2 = lhs_store_idx_base + 5 7 6* 2 ; const Index lhs_store_idx_3 = lhs_store_idx_base + 5 7 6* 3 ; const Index lhs_store_idx_4 = lhs_store_idx_base + 5 7 6* 4 ; const Index lhs_store_idx_5 = lhs_store_idx_base + 5 7 6* 5 ; const Index lhs_store_idx_6 = lhs_store_idx_base + 5 7 6* 6 ; const Index lhs_store_idx_7 = lhs_store_idx_base + 5 7 6* 7 ; const Index rhs_store_idx_0 = rhs_store_idx_base + 5 7 6* 0 ; const Index rhs_store_idx_1 = rhs_store_idx_base + 5 7 6* 1 ; const Index rhs_store_idx_2 = rhs_store_idx_base + 5 7 6* 2 ; const Index rhs_store_idx_3 = rhs_store_idx_base + 5 7 6* 3 ; const Index rhs_store_idx_4 = rhs_store_idx_base + 5 7 6* 4 ; const Index rhs_store_idx_5 = rhs_store_idx_base + 5 7 6* 5 ; const Index rhs_store_idx_6 = rhs_store_idx_base + 5 7 6* 6 ; const Index rhs_store_idx_7 = rhs_store_idx_base + 5 7 6* 7 ; const Index load_idx_vert = threadIdx . x + 8* threadIdx . y ; const Index lhs_vert = base_m + load_idx_vert ; # define)",
    "insertText": "prefetchIntoRegisters(base_k)"
  },
  {
    "label": "conv()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf0 =)",
    "insertText": "conv(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "if(!needs_edge_check || lhs_vert < m_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ const Index lhs_horiz_0 = base_k + threadIdx . z + 0* 8 ; \\ const Index lhs_horiz_1 = base_k + threadIdx . z + 1* 8 ; \\ const Index lhs_horiz_2 = base_k + threadIdx . z + 2* 8 ; \\ const Index lhs_horiz_3 = base_k + threadIdx . z + 3* 8 ; \\ const Index lhs_horiz_4 = base_k + threadIdx . z + 4* 8 ; \\ const Index lhs_horiz_5 = base_k + threadIdx . z + 5* 8 ; \\ const Index lhs_horiz_6 = base_k + threadIdx . z + 6* 8 ; \\ const Index lhs_horiz_7 = base_k + threadIdx . z + 7* 8 ; \\ \\)",
    "insertText": "if(!needs_edge_check || lhs_horiz_7 < k_size)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf0 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_0)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf1 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_1)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf2 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_2)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf3 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_3)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf4 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_4)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf5 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_5)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf6 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_6)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ lhs_pf7 =)",
    "insertText": "lhs(lhs_vert, lhs_horiz_7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_6 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_5 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_4 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_3 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_2 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_1 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(lhs_horiz_0 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ \\ const Index rhs_vert = base_k + load_idx_vert ; \\)",
    "insertText": "if(!needs_edge_check || rhs_vert < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ const Index rhs_horiz_0 = base_n + threadIdx . z + 0* 8 ; \\ const Index rhs_horiz_1 = base_n + threadIdx . z + 1* 8 ; \\ const Index rhs_horiz_2 = base_n + threadIdx . z + 2* 8 ; \\ const Index rhs_horiz_3 = base_n + threadIdx . z + 3* 8 ; \\ const Index rhs_horiz_4 = base_n + threadIdx . z + 4* 8 ; \\ const Index rhs_horiz_5 = base_n + threadIdx . z + 5* 8 ; \\ const Index rhs_horiz_6 = base_n + threadIdx . z + 6* 8 ; \\ const Index rhs_horiz_7 = base_n + threadIdx . z + 7* 8 ; \\ \\)",
    "insertText": "if(rhs_horiz_7 < n_size)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf0 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_0)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf1 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_1)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf2 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_2)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf3 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_3)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf4 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_4)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf5 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_5)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf6 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_6)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ rhs_pf7 =)",
    "insertText": "rhs(rhs_vert, rhs_horiz_7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_6 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_5 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_4 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_3 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_2 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_1 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(rhs_horiz_0 < n_size)"
  },
  {
    "label": "writeRegToShmem()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ # define)",
    "insertText": "writeRegToShmem(_)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ rhs_shmem [ rhs_store_idx_0 ] = rhs_pf0 ; \\ \\ lhs_shmem [ lhs_store_idx_1 ] = lhs_pf1 ; \\ rhs_shmem [ rhs_store_idx_1 ] = rhs_pf1 ; \\ \\ lhs_shmem [ lhs_store_idx_2 ] = lhs_pf2 ; \\ rhs_shmem [ rhs_store_idx_2 ] = rhs_pf2 ; \\ \\ lhs_shmem [ lhs_store_idx_3 ] = lhs_pf3 ; \\ rhs_shmem [ rhs_store_idx_3 ] = rhs_pf3 ; \\ \\ lhs_shmem [ lhs_store_idx_4 ] = lhs_pf4 ; \\ rhs_shmem [ rhs_store_idx_4 ] = rhs_pf4 ; \\ \\ lhs_shmem [ lhs_store_idx_5 ] = lhs_pf5 ; \\ rhs_shmem [ rhs_store_idx_5 ] = rhs_pf5 ; \\ \\ lhs_shmem [ lhs_store_idx_6 ] = lhs_pf6 ; \\ rhs_shmem [ rhs_store_idx_6 ] = rhs_pf6 ; \\ \\ lhs_shmem [ lhs_store_idx_7 ] = lhs_pf7 ; \\ rhs_shmem [ rhs_store_idx_7 ] = rhs_pf7 ; \\ # define)",
    "insertText": "res(i, j) _res_##i##j #define initResultRow(i) \\ Scalar res(i, 0) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 1) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 2) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 3) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 4) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 5) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 6) = conv(0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\ Scalar)",
    "insertText": "res(i, 7) = conv(0)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (\\ internal::scalar_cast_op<int,Scalar> conv ;)",
    "insertText": "initResultRow(0)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(1)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(2)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(3)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(4)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(5)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(6)"
  },
  {
    "label": "initResultRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResultRow(7)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# undef initResultRow)",
    "insertText": "for(Index base_k = 0; base_k < k_size; base_k += 64)"
  },
  {
    "label": "__syncthreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__syncthreads()"
  },
  {
    "label": "writeRegToShmem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRegToShmem()"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "lcol(i) _lcol##i Scalar lcol(0)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(1)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(2)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(3)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(4)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(5)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(6)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "lcol(7)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "rrow(j) _rrow##j Scalar rrow(0)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(1)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(2)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(3)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(4)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(5)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(6)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "rrow(7)"
  },
  {
    "label": "lhs_element()",
    "kind": "Method",
    "detail": "Function (const Scalar* lhs_block =& lhs_shmem [ threadIdx . x + 9* threadIdx . y ] ; const Scalar* rhs_block =& rhs_shmem [ threadIdx . x + 8* threadIdx . z ] ; # define)",
    "insertText": "lhs_element(i, j) lhs_block[72 * ((i) + 8 * (j))] #define rhs_element(i, j) rhs_block[72 * ((i) + 8 * (j))] #define loadData(i, j) \\ lcol(0) = lhs_element(0, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(0) = rhs_element(i, 0)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(1) = lhs_element(1, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(1) = rhs_element(i, 1)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(2) = lhs_element(2, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(2) = rhs_element(i, 2)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(3) = lhs_element(3, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(3) = rhs_element(i, 3)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(4) = lhs_element(4, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(4) = rhs_element(i, 4)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(5) = lhs_element(5, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(5) = rhs_element(i, 5)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(6) = lhs_element(6, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(6) = rhs_element(i, 6)"
  },
  {
    "label": "lcol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lcol(7) = lhs_element(7, j)"
  },
  {
    "label": "rrow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rrow(7) = rhs_element(i, 7)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "computeCol(j) \\ res(0, j) += lcol(0) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(1, j) += lcol(1) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(2, j) += lcol(2) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(3, j) += lcol(3) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(4, j) += lcol(4) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(5, j) += lcol(5) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(6, j) += lcol(6) * rrow(j)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "res(7, j) += lcol(7) * rrow(j)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "computePass(i) \\ loadData(i, i)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "computeCol(0)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(1)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(2)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(3)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(4)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(5)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(6)"
  },
  {
    "label": "computeCol()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computeCol(7)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "computePass(0)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(1)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(2)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(3)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(4)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(5)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(6)"
  },
  {
    "label": "computePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computePass(7)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# undef lcol # undef rrow # undef lhs_element # undef rhs_element # undef loadData # undef computeCol # undef computePass } # if)",
    "insertText": "defined(EIGEN_HIPCC) || (defined(EIGEN_CUDA_SDK_VER) && EIGEN_CUDA_SDK_VER < 90000) #define shuffleInc(i, j, mask) res(i, j) += __shfl_xor(res(i, j), mask) #else #define shuffleInc(i, j, mask) res(i, j) += __shfl_xor_sync(0xFFFFFFFF, res(i, j), mask) #endif #define reduceRow(i, mask) \\ shuffleInc(i, 0, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 1, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 2, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 3, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 4, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 5, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 6, mask)"
  },
  {
    "label": "shuffleInc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "shuffleInc(i, 7, mask)"
  },
  {
    "label": "reduceMatrix()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "reduceMatrix(mask) \\ reduceRow(0, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(1, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(2, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(3, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(4, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(5, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(6, mask)"
  },
  {
    "label": "reduceRow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceRow(7, mask)"
  },
  {
    "label": "reduceMatrix()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "reduceMatrix(1)"
  },
  {
    "label": "reduceMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reduceMatrix(2)"
  },
  {
    "label": "reduceMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reduceMatrix(4)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "writeResultShmem(i, j) \\ lhs_shmem[i + 8 * threadIdx.y + 64 * threadIdx.z + 512 * j] = res(i, j)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "writeRow(i) \\ writeResultShmem(i, 0)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 1)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 2)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 3)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 4)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 5)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 6)"
  },
  {
    "label": "writeResultShmem()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "writeResultShmem(i, 7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(threadIdx.x == 0)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(0)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(1)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(2)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(3)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(4)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(5)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(6)"
  },
  {
    "label": "writeRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeRow(7)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (} # undef writeResultShmem # undef writeRow const int max_i_write =)",
    "insertText": "mini((int)((m_size - base_m - threadIdx.y + 7) / 8), 8)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const int max_j_write =)",
    "insertText": "mini((int)((n_size - base_n - threadIdx.z + 7) / 8), 8)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (Scalar val0 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 0 ] ; Scalar val1 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 1 ] ; Scalar val2 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 2 ] ; Scalar val3 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 3 ] ; Scalar val4 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 4 ] ; Scalar val5 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 5 ] ; Scalar val6 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 6 ] ; Scalar val7 = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* 7 ] ;)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 0)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 1)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 2)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 3)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 4)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 5)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 6)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * 7)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { # pragma unroll 7)",
    "insertText": "for(int j = 0; j < max_j_write; j++)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (Scalar val = lhs_shmem [ threadIdx . x + 8* threadIdx . y + 6 4* threadIdx . z + 5 1 2* j ] ;)",
    "insertText": "output(base_m + threadIdx.y + 8 * threadIdx.x, base_n + threadIdx.z + 8 * j)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } } # undef res } template<Scalar,Index,LhsMapper,RhsMapper,OutputMapper> __global__ void # if)",
    "insertText": "defined(EIGEN_HIPCC) __launch_bounds__(512, 1) #else __launch_bounds__(512) #endif EigenContractionKernel(const LhsMapper lhs, const RhsMapper rhs, const OutputMapper output, const Index m_size, const Index n_size, const Index k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__shared__ Scalar lhs_shmem [ 7 2* 6 4 ] ; __shared__ Scalar rhs_shmem [ 7 2* 6 4 ] ; const Index m_block_idx = blockIdx . x ; const Index n_block_idx = blockIdx . y ; const Index base_m = 6 4* m_block_idx ; const Index base_n = 6 4* n_block_idx ;)",
    "insertText": "if(base_m + 63 < m_size && base_n + 63 < n_size)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (EigenContractionKernelInternal<Scalar,Index,LhsMapper,RhsMapper,OutputMapper,)",
    "insertText": "false(lhs, rhs, output, lhs_shmem, rhs_shmem, m_size, n_size, k_size)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (} else { EigenContractionKernelInternal<Scalar,Index,LhsMapper,RhsMapper,OutputMapper,)",
    "insertText": "true(lhs, rhs, output, lhs_shmem, rhs_shmem, m_size, n_size, k_size)"
  },
  {
    "label": "EigenFloatContractionKernelInternal16x16()",
    "kind": "Method",
    "detail": "Function (} } template<Index,LhsMapper,RhsMapper,OutputMapper,bool CHECK_LHS_BOUNDARY,bool CHECK_RHS_BOUNDARY> __device__ __forceinline__ void)",
    "insertText": "EigenFloatContractionKernelInternal16x16(const LhsMapper lhs, const RhsMapper rhs, const OutputMapper output, float2 lhs_shmem2[][16], float2 rhs_shmem2[][8], const Index m_size, const Index n_size, const Index k_size, const Index base_m, const Index base_n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float4 lhs_pf0,rhs_pf0 ; float4 results [ 4 ] ;)",
    "insertText": "for(int i=0; i < 4; i++)"
  },
  {
    "label": "prefetch_lhs()",
    "kind": "Method",
    "detail": "Function (results [ i ] . x = results [ i ] . y = results [ i ] . z = results [ i ] . w = 0 ; } # define)",
    "insertText": "prefetch_lhs(reg, row, col) \\ if (!CHECK_LHS_BOUNDARY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(col < k_size)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (\\ reg = lhs . template loadPacket<float4,)",
    "insertText": "Unaligned(row, col)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(row + 3 < m_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(row + 2 < m_size)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ reg . x =)",
    "insertText": "lhs(row + 0, col)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ reg . y =)",
    "insertText": "lhs(row + 1, col)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ reg . z =)",
    "insertText": "lhs(row + 2, col)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(row + 1 < m_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if(row < m_size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ Index lhs_vert = base_m + threadIdx . x* 4 ;)",
    "insertText": "for(Index k = 0; k < k_size; k += 16)"
  },
  {
    "label": "float4()",
    "kind": "Method",
    "detail": "Function (lhs_pf0 = internal::pset1<)",
    "insertText": "float4(0)"
  },
  {
    "label": "prefetch_lhs()",
    "kind": "Method",
    "detail": "Function (Index lhs_horiz = threadIdx . y + k ;)",
    "insertText": "prefetch_lhs(lhs_pf0, lhs_vert, lhs_horiz) Index rhs_vert = k+(threadIdx.x%4)"
  },
  {
    "label": "rhs_horiz0()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "rhs_horiz0(threadIdx.x>>2)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (rhs_pf0 = rhs . template loadPacket<float4,)",
    "insertText": "Unaligned(rhs_vert, rhs_horiz0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(rhs_vert + 2 < k_size)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (rhs_pf0 . x =)",
    "insertText": "rhs(rhs_vert, rhs_horiz0)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (rhs_pf0 . y =)",
    "insertText": "rhs(rhs_vert + 1, rhs_horiz0)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (rhs_pf0 . z =)",
    "insertText": "rhs(rhs_vert + 2, rhs_horiz0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(rhs_vert + 1 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(rhs_vert < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(rhs_horiz0 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((rhs_vert + 2) < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((rhs_vert + 1) < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } float x1,x2 ;)",
    "insertText": "if((threadIdx.x%8) < 4)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (x1 = rhs_pf0 . y ; x2 = rhs_pf0 . w ; } else { x1 = rhs_pf0 . x ; x2 = rhs_pf0 . z ; } # if)",
    "insertText": "defined(EIGEN_HIPCC) || (defined(EIGEN_CUDA_SDK_VER) && EIGEN_CUDA_SDK_VER < 90000) x1 = __shfl_xor(x1, 4)"
  },
  {
    "label": "__shfl_xor()",
    "kind": "Method",
    "detail": "Function (x2 =)",
    "insertText": "__shfl_xor(x2, 4)"
  },
  {
    "label": "__shfl_xor_sync()",
    "kind": "Method",
    "detail": "Function (# else x1 =)",
    "insertText": "__shfl_xor_sync(0xFFFFFFFF, x1, 4)"
  },
  {
    "label": "__shfl_xor_sync()",
    "kind": "Method",
    "detail": "Function (x2 =)",
    "insertText": "__shfl_xor_sync(0xFFFFFFFF, x2, 4)"
  },
  {
    "label": "rhs_shmem2()",
    "kind": "Method",
    "detail": "Function (rhs_pf0 . y = x1 ; rhs_pf0 . w = x2 ; } else { rhs_pf0 . x = x1 ; rhs_pf0 . z = x2 ; })",
    "insertText": "rhs_shmem2(threadIdx.x>>3)+ threadIdx.y*2][threadIdx.x%8] = make_float2(rhs_pf0.x, rhs_pf0.y)"
  },
  {
    "label": "rhs_shmem2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rhs_shmem2(threadIdx.x>>3)+ threadIdx.y*2+32][threadIdx.x%8] = make_float2(rhs_pf0.z, rhs_pf0.w)"
  },
  {
    "label": "make_float2()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y ] [ threadIdx . x ] =)",
    "insertText": "make_float2(lhs_pf0.x, lhs_pf0.y)"
  },
  {
    "label": "make_float2()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y + 1 6 ] [ threadIdx . x ] =)",
    "insertText": "make_float2(lhs_pf0.z, lhs_pf0.w)"
  },
  {
    "label": "add_vals()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "add_vals(fl1, fl2, fr1, fr2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# pragma unroll)",
    "insertText": "for(int koff = 0; koff < 16; koff ++)"
  },
  {
    "label": "rhs_shmem2()",
    "kind": "Method",
    "detail": "Function (float2 fl1 = lhs_shmem2 [ koff ] [ threadIdx . x ] ; float2 fl2 = lhs_shmem2 [ koff + 1 6 ] [ threadIdx . x ] ; int start_feature = threadIdx . y* 4 ; float2 fr1 =)",
    "insertText": "rhs_shmem2(start_feature>>1) + 32*((koff%4)/2)][koff/4 + (koff%2)"
  },
  {
    "label": "rhs_shmem2()",
    "kind": "Method",
    "detail": "Function (float2 fr2 =)",
    "insertText": "rhs_shmem2(start_feature>>1) + 1 + 32*((koff%4)/2)][koff/4 + (koff%2)"
  },
  {
    "label": "add_vals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_vals(fl1, fl2, fr1, fr2) } __syncthreads()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # undef prefetch_lhs # undef add_vals Index horiz_base = threadIdx . y* 4 + base_n ;)",
    "insertText": "if(!CHECK_LHS_BOUNDARY && !CHECK_RHS_BOUNDARY)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(lhs_vert, horiz_base + i)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(lhs_vert + 1, horiz_base + i)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(lhs_vert + 2, horiz_base + i)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(lhs_vert + 3, horiz_base + i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!CHECK_RHS_BOUNDARY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(lhs_vert + 2 < m_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(lhs_vert + 1 < m_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(lhs_vert < m_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(!CHECK_LHS_BOUNDARY)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(int i = 0; i < 4; i++)"
  },
  {
    "label": "EigenFloatContractionKernelInternal()",
    "kind": "Method",
    "detail": "Function (} } } } template<Index,LhsMapper,RhsMapper,OutputMapper,bool CHECK_LHS_BOUNDARY,bool CHECK_RHS_BOUNDARY> __device__ __forceinline__ void)",
    "insertText": "EigenFloatContractionKernelInternal(const LhsMapper lhs, const RhsMapper rhs, const OutputMapper output, float2 lhs_shmem2[][32], float2 rhs_shmem2[][8], const Index m_size, const Index n_size, const Index k_size, const Index base_m, const Index base_n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float4 lhs_pf0,lhs_pf1,lhs_pf2,lhs_pf3 ; float4 rhs_pf0,rhs_pf1 ; float4 results [ 8 ] ;)",
    "insertText": "for(int i=0; i < 8; i++)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (results [ i ] . x = results [ i ] . y = results [ i ] . z = results [ i ] . w = 0 ; } Index lhs_vert = base_m + threadIdx .)",
    "insertText": "x(threadIdx.y%4)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (lhs_pf0 = lhs . template loadPacket<float4,)",
    "insertText": "Unaligned(lhs_vert, (threadIdx.y/4+k))"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (lhs_pf1 = lhs . template loadPacket<float4,)",
    "insertText": "Unaligned(lhs_vert, (threadIdx.y/4+k+8))"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (lhs_pf2 = lhs . template loadPacket<float4,)",
    "insertText": "Unaligned(lhs_vert, (threadIdx.y/4+k+16))"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (lhs_pf3 = lhs . template loadPacket<float4,)",
    "insertText": "Unaligned(lhs_vert, (threadIdx.y/4+k+24))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((threadIdx.y/4+k+16) < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((threadIdx.y/4+k+8) < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((threadIdx.y/4+k) < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(lhs_vert + 3 < m_size)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf0 . x =)",
    "insertText": "lhs(lhs_vert + 0, (threadIdx.y/4+k))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf0 . y =)",
    "insertText": "lhs(lhs_vert + 1, (threadIdx.y/4+k))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf0 . z =)",
    "insertText": "lhs(lhs_vert + 2, (threadIdx.y/4+k))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf1 . x =)",
    "insertText": "lhs(lhs_vert + 0, (threadIdx.y/4+k+8))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf1 . y =)",
    "insertText": "lhs(lhs_vert + 1, (threadIdx.y/4+k+8))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf1 . z =)",
    "insertText": "lhs(lhs_vert + 2, (threadIdx.y/4+k+8))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf2 . x =)",
    "insertText": "lhs(lhs_vert + 0, (threadIdx.y/4+k+16))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf2 . y =)",
    "insertText": "lhs(lhs_vert + 1, (threadIdx.y/4+k+16))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf2 . z =)",
    "insertText": "lhs(lhs_vert + 2, (threadIdx.y/4+k+16))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf3 . x =)",
    "insertText": "lhs(lhs_vert + 0, (threadIdx.y/4+k+24))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf3 . y =)",
    "insertText": "lhs(lhs_vert + 1, (threadIdx.y/4+k+24))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (lhs_pf3 . z =)",
    "insertText": "lhs(lhs_vert + 2, (threadIdx.y/4+k+24))"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (rhs_pf1 = rhs . template loadPacket<float4,)",
    "insertText": "Unaligned(rhs_vert, rhs_horiz1)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (rhs_pf1 . x =)",
    "insertText": "rhs(rhs_vert, rhs_horiz1)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (rhs_pf1 . y =)",
    "insertText": "rhs(rhs_vert + 1, rhs_horiz1)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (rhs_pf1 . z =)",
    "insertText": "rhs(rhs_vert + 2, rhs_horiz1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(rhs_horiz1 < n_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(k+threadIdx.x*4 + 1 < k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(k+threadIdx.x*4 < k_size)"
  },
  {
    "label": "make_float2()",
    "kind": "Method",
    "detail": "Function (rhs_shmem2 [ threadIdx . y ] [ threadIdx . x ] =)",
    "insertText": "make_float2(rhs_pf0.x, rhs_pf1.x)"
  },
  {
    "label": "make_float2()",
    "kind": "Method",
    "detail": "Function (rhs_shmem2 [ threadIdx . y + 3 2 ] [ threadIdx . x ] =)",
    "insertText": "make_float2(rhs_pf0.y, rhs_pf1.y)"
  },
  {
    "label": "make_float2()",
    "kind": "Method",
    "detail": "Function (rhs_shmem2 [ threadIdx . y + 6 4 ] [ threadIdx . x ] =)",
    "insertText": "make_float2(rhs_pf0.z, rhs_pf1.z)"
  },
  {
    "label": "make_float2()",
    "kind": "Method",
    "detail": "Function (rhs_shmem2 [ threadIdx . y + 9 6 ] [ threadIdx . x ] =)",
    "insertText": "make_float2(rhs_pf0.w, rhs_pf1.w)"
  },
  {
    "label": "add_vals()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "add_vals(a_feat1, a_feat2, f1, f2, f3, f4)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (\\ results [ 1 ] . x + = a_feat1 . x* f1 . y ; \\ results [ 2 ] . x + = a_feat1 . x* f2 . x ; \\ results [ 3 ] . x + = a_feat1 . x* f2 . y ; \\ results [ 4 ] . x + = a_feat1 . x* f3 . x ; \\ results [ 5 ] . x + = a_feat1 . x* f3 . y ; \\ results [ 6 ] . x + = a_feat1 . x* f4 . x ; \\ results [ 7 ] . x + = a_feat1 . x* f4 . y ; \\ \\ results [ 0 ] . y + = a_feat1 . y* f1 . x ; \\ results [ 1 ] . y + = a_feat1 . y* f1 . y ; \\ results [ 2 ] . y + = a_feat1 . y* f2 . x ; \\ results [ 3 ] . y + = a_feat1 . y* f2 . y ; \\ results [ 4 ] . y + = a_feat1 . y* f3 . x ; \\ results [ 5 ] . y + = a_feat1 . y* f3 . y ; \\ results [ 6 ] . y + = a_feat1 . y* f4 . x ; \\ results [ 7 ] . y + = a_feat1 . y* f4 . y ; \\ \\ results [ 0 ] . z + = a_feat2 . x* f1 . x ; \\ results [ 1 ] . z + = a_feat2 . x* f1 . y ; \\ results [ 2 ] . z + = a_feat2 . x* f2 . x ; \\ results [ 3 ] . z + = a_feat2 . x* f2 . y ; \\ results [ 4 ] . z + = a_feat2 . x* f3 . x ; \\ results [ 5 ] . z + = a_feat2 . x* f3 . y ; \\ results [ 6 ] . z + = a_feat2 . x* f4 . x ; \\ results [ 7 ] . z + = a_feat2 . x* f4 . y ; \\ \\ results [ 0 ] . w + = a_feat2 . y* f1 . x ; \\ results [ 1 ] . w + = a_feat2 . y* f1 . y ; \\ results [ 2 ] . w + = a_feat2 . y* f2 . x ; \\ results [ 3 ] . w + = a_feat2 . y* f2 . y ; \\ results [ 4 ] . w + = a_feat2 . y* f3 . x ; \\ results [ 5 ] . w + = a_feat2 . y* f3 . y ; \\ results [ 6 ] . w + = a_feat2 . y* f4 . x ; \\ results [ 7 ] . w + = a_feat2 . y* f4 . y ; \\ lhs_shmem2 [ threadIdx . y / 4 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf0.x, lhs_pf0.y)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 8 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf1.x, lhs_pf1.y)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 1 6 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf2.x, lhs_pf2.y)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 2 4 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf3.x, lhs_pf3.y)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 3 2 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf0.z, lhs_pf0.w)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 4 0 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf1.z, lhs_pf1.w)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 4 8 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf2.z, lhs_pf2.w)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (lhs_shmem2 [ threadIdx . y / 4 + 5 6 ] [ threadIdx .)",
    "insertText": "x(threadIdx.y%4)*8] = make_float2(lhs_pf3.z, lhs_pf3.w)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# pragma unroll)",
    "insertText": "for(int koff = 0; koff < 32; koff ++)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (float2 a3 = lhs_shmem2 [ koff ] [ threadIdx .)",
    "insertText": "x(threadIdx.y % 4)"
  },
  {
    "label": "start_feature()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "start_feature(threadIdx.y / 4)"
  },
  {
    "label": "start_feature()",
    "kind": "Method",
    "detail": "Function (float2 br1 = rhs_shmem2 [)",
    "insertText": "start_feature(koff % 4)"
  },
  {
    "label": "add_vals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_vals(a3, a4, br1, br2, br3, br4) } __syncthreads()"
  },
  {
    "label": "horiz_base()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "horiz_base(threadIdx.y/4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(int i = 0; i < 8; i++)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } } } template<Index,LhsMapper,RhsMapper,OutputMapper> __global__ void # if)",
    "insertText": "defined(EIGEN_HIPCC) __launch_bounds__(256, 1) #else __launch_bounds__(256) #endif EigenFloatContractionKernel(const LhsMapper lhs, const RhsMapper rhs, const OutputMapper output, const Index m_size, const Index n_size, const Index k_size)"
  },
  {
    "label": "check_rhs()",
    "kind": "Method",
    "detail": "Function (__shared__ float2 lhs_shmem [ 6 4* 3 2 ] ; __shared__ float2 rhs_shmem [ 1 2 8* 8 ] ; typedef float2 LHS_MEM [ 6 4 ] [ 3 2 ] ; typedef float2 RHS_MEM [ 1 2 8 ] [ 8 ] ; const Index m_block_idx = blockIdx . x ; const Index n_block_idx = blockIdx . y ; const Index base_m = 1 2 8* m_block_idx ; const Index base_n = 6 4* n_block_idx ; bool)",
    "insertText": "check_rhs(base_n + 63)"
  },
  {
    "label": "check_lhs128()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "check_lhs128(base_m + 127)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (EigenFloatContractionKernelInternal<Index,LhsMapper,RhsMapper,OutputMapper,false,)",
    "insertText": "false(lhs, rhs, output, *((LHS_MEM *) lhs_shmem), *((RHS_MEM *) rhs_shmem), m_size, n_size, k_size, base_m, base_n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!check_lhs128)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (EigenFloatContractionKernelInternal<Index,LhsMapper,RhsMapper,OutputMapper,false,)",
    "insertText": "true(lhs, rhs, output, *((LHS_MEM *) lhs_shmem), *((RHS_MEM *) rhs_shmem), m_size, n_size, k_size, base_m, base_n)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } } template<Index,LhsMapper,RhsMapper,OutputMapper> __global__ void # if)",
    "insertText": "defined(EIGEN_HIPCC) __launch_bounds__(256, 1) #else __launch_bounds__(256) #endif EigenFloatContractionKernel16x16(const LhsMapper lhs, const RhsMapper rhs, const OutputMapper output, const Index m_size, const Index n_size, const Index k_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__shared__ float2 lhs_shmem [ 3 2 ] [ 1 6 ] ; __shared__ float2 rhs_shmem [ 6 4 ] [ 8 ] ; const Index m_block_idx = blockIdx . x ; const Index n_block_idx = blockIdx . y ; const Index base_m = 6 4* m_block_idx ; const Index base_n = 6 4* n_block_idx ;)",
    "insertText": "if(base_m + 63 < m_size)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (EigenFloatContractionKernelInternal16x16<Index,LhsMapper,RhsMapper,OutputMapper,false,)",
    "insertText": "false(lhs, rhs, output, lhs_shmem, rhs_shmem, m_size, n_size, k_size, base_m, base_n)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (} else { EigenFloatContractionKernelInternal16x16<Index,LhsMapper,RhsMapper,OutputMapper,false,)",
    "insertText": "true(lhs, rhs, output, lhs_shmem, rhs_shmem, m_size, n_size, k_size, base_m, base_n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(base_n + 63 < n_size)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} } } template<Indices,LeftArgType,RightArgType,OutputKernelType> struct TensorEvaluator<const TensorContractionOp<Indices,LeftArgType,RightArgType,OutputKernelType>,GpuDevice> : public TensorContractionEvaluatorBase<TensorEvaluator<const TensorContractionOp<Indices,LeftArgType,RightArgType,OutputKernelType>,GpuDevice>> { typedef GpuDevice Device ; typedef TensorEvaluator<const TensorContractionOp<Indices,LeftArgType,RightArgType,OutputKernelType>,Device> Self ; typedef TensorContractionEvaluatorBase<Self> Base ; typedef TensorContractionOp<Indices,LeftArgType,RightArgType,OutputKernelType> XprType ; typedef internal::remove_const<XprType::Scalar>::type Scalar ; typedef XprType::Index Index ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,GpuDevice>::type PacketReturnType ; enum { Layout = TensorEvaluator<LeftArgType,Device>::Layout,} ; typedef internal::conditional<static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const int LDims = internal::array_size<TensorEvaluator<EvalLeftArgType,Device>::Dimensions>::value ; const int RDims = internal::array_size<TensorEvaluator<EvalRightArgType,Device>::Dimensions>::value ; const int ContractDims = internal::array_size<Indices>::value ; typedef array<Index,LDims> left_dim_mapper_t ; typedef array<Index,RDims> right_dim_mapper_t ; typedef array<Index,ContractDims> contract_t ; typedef array<Index,LDims - ContractDims> left_nocontract_t ; typedef array<Index,RDims - ContractDims> right_nocontract_t ; const int NumDims = LDims + RDims - 2* ContractDims ; typedef DSizes<Index,NumDims> Dimensions ; typedef internal::remove_const<EvalLeftArgType::Scalar>::type LhsScalar ; typedef internal::remove_const<EvalRightArgType::Scalar>::type RhsScalar ; typedef TensorEvaluator<EvalLeftArgType,Device> LeftEvaluator ; typedef TensorEvaluator<EvalRightArgType,Device> RightEvaluator ; typedef LeftEvaluator::Dimensions LeftDimensions ; typedef RightEvaluator::Dimensions RightDimensions ;)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<OutputKernelType, const NoOpOutputKernel>::value), GPU_TENSOR_CONTRACTION_DOES_NOT_SUPPORT_OUTPUT_KERNELS)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(Scalar* data)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (this -> m_leftImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(data)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(this->m_result)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (evalTyped<true,true,true,)",
    "insertText": "Unaligned(buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(this->m_rhs_inner_dim_reordered)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(this->m_rhs_inner_dim_contiguous)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} } } } template<LhsScalar,RhsScalar,Index,LhsMapper,RhsMapper,OutputMapper> struct LaunchKernels { void)",
    "insertText": "Run(const LhsMapper& lhs, const RhsMapper& rhs, const OutputMapper& output, Index m, Index n, Index k, const GpuDevice& device)"
  },
  {
    "label": "m_blocks()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "m_blocks(m + 63)"
  },
  {
    "label": "n_blocks()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "n_blocks(n + 63)"
  },
  {
    "label": "num_blocks()",
    "kind": "Method",
    "detail": "Function (const dim3)",
    "insertText": "num_blocks(m_blocks, n_blocks, 1)"
  },
  {
    "label": "block_size()",
    "kind": "Method",
    "detail": "Function (const dim3)",
    "insertText": "block_size(8, 8, 8)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenContractionKernel<Scalar, Index, LhsMapper, RhsMapper, OutputMapper>), num_blocks, block_size, 0, device, lhs, rhs, output, m, n, k)"
  },
  {
    "label": "block_size()",
    "kind": "Method",
    "detail": "Function (const dim3)",
    "insertText": "block_size(16, 16, 1)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenFloatContractionKernel16x16<Index, LhsMapper, RhsMapper, OutputMapper>), num_blocks, block_size, 0, device, lhs, rhs, output, m, n, k)"
  },
  {
    "label": "m_blocks()",
    "kind": "Method",
    "detail": "Function (} else { const Index)",
    "insertText": "m_blocks(m + 127)"
  },
  {
    "label": "block_size()",
    "kind": "Method",
    "detail": "Function (const dim3)",
    "insertText": "block_size(8, 32, 1)"
  },
  {
    "label": "LAUNCH_GPU_KERNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAUNCH_GPU_KERNEL((EigenFloatContractionKernel<Index, LhsMapper, RhsMapper, OutputMapper>), num_blocks, block_size, 0, device, lhs, rhs, output, m, n, k)"
  },
  {
    "label": "evalTyped()",
    "kind": "Method",
    "detail": "Function (} } } ; template<bool lhs_inner_dim_contiguous,bool rhs_inner_dim_contiguous,bool rhs_inner_dim_reordered,int Alignment> void)",
    "insertText": "evalTyped(Scalar* buffer)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (m_i_size)",
    "insertText": "EIGEN_UNUSED_VARIABLE(k)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (const Index n = this -> m_j_size ; this -> m_device .)",
    "insertText": "memset(buffer, 0, m * n * sizeof(Scalar))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorContractionInputMapper<LhsScalar,Index,internal::Lhs,LeftEvaluator,left_nocontract_t,contract_t,4,lhs_inner_dim_contiguous,false,Unaligned> LhsMapper ; typedef internal::TensorContractionInputMapper<RhsScalar,Index,internal::Rhs,RightEvaluator,right_nocontract_t,contract_t,4,rhs_inner_dim_contiguous,rhs_inner_dim_reordered,Unaligned> RhsMapper ; typedef internal::blas_data_mapper<Scalar,Index,ColMajor> OutputMapper ; LhsMapper)",
    "insertText": "lhs(this->m_leftImpl, this->m_left_nocontract_strides, this->m_i_strides, this->m_left_contracting_strides, this->m_k_strides)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(this->m_rightImpl, this->m_right_nocontract_strides, this->m_j_strides, this->m_right_contracting_strides, this->m_k_strides)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (OutputMapper)",
    "insertText": "output(buffer, m)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_USE_HIP) setGpuSharedMemConfig(hipSharedMemBankSizeEightByte)"
  },
  {
    "label": "setGpuSharedMemConfig()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "setGpuSharedMemConfig(cudaSharedMemBankSizeEightByte)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (# endif LaunchKernels<LhsScalar,RhsScalar,Index,LhsMapper,RhsMapper,OutputMapper)",
    "insertText": "Run(lhs, rhs, output, m, n, k, this->m_device)"
  }
]