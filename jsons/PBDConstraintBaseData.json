[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "CONSTRAINT_JOINT_PROPERPETY_IMPL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / Transform . h \" # include \" Chaos / Vector . h \" # include \" Chaos / Framework / PhysicsProxyBase . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Properties . h \" namespace Chaos { enum class EConstraintType { NoneType = 0,JointConstraintType = 1,SpringConstraintType = 2,SuspensionConstraintType = 3,CharacterGroundConstraintType = 4,} ; # define)",
    "insertText": "CONSTRAINT_JOINT_PROPERPETY_IMPL(TYPE, FNAME, ENAME, VNAME)\\ void Set##FNAME(TYPE InValue)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (VNAME = InValue ; MDirtyFlags .)",
    "insertText": "MarkDirty(ENAME)"
  },
  {
    "label": "SetProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProxy(Proxy)"
  },
  {
    "label": "FNAME()",
    "kind": "Method",
    "detail": "Function (} } \\ TYPE Get # #)",
    "insertText": "FNAME()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (PROP .)",
    "insertText": "Modify(true, DirtyFlags, Proxy, [&InValue](auto& Data) { Data.VNAME = InValue; })"
  },
  {
    "label": "FConstraintBase()",
    "kind": "Method",
    "detail": "Function (} \\ class FConstraintBase { public : ~)",
    "insertText": "FConstraintBase()"
  },
  {
    "label": "FConstraintBase()",
    "kind": "Method",
    "detail": "Function (} typedef TVector<TGeometryParticleHandle<FReal,3>*,2> FParticleHandlePair ;)",
    "insertText": "FConstraintBase(EConstraintType InType)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EConstraintType)",
    "insertText": "GetType()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty(const EChaosPropertyFlags CheckBits)"
  },
  {
    "label": "ClearDirtyFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDirtyFlags()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (DirtyFlags .)",
    "insertText": "Clear()"
  },
  {
    "label": "GetDirtyFlags()",
    "kind": "Method",
    "detail": "Function (} const FDirtyChaosPropertyFlags&)",
    "insertText": "GetDirtyFlags()"
  },
  {
    "label": "SetProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProxy(IPhysicsProxyBase* InProxy)"
  },
  {
    "label": "SyncRemoteData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteData(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (RemoteData .)",
    "insertText": "SetFlags(DirtyFlags)"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteDataImp(Manager, DataIdx, RemoteData)"
  },
  {
    "label": "SyncRemoteDataImp()",
    "kind": "Method",
    "detail": "Function (} protected : EConstraintType Type ; class IPhysicsProxyBase* Proxy ; FDirtyChaosPropertyFlags DirtyFlags ; void)",
    "insertText": "SyncRemoteDataImp(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  }
]