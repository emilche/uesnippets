[
  {
    "label": "FSequencerSelectedKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSelectedKey"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FSectionContextMenu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionContextMenu"
  },
  {
    "label": "FPasteContextMenuArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteContextMenuArgs"
  },
  {
    "label": "FPasteContextMenu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteContextMenu"
  },
  {
    "label": "FPasteDestination",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteDestination"
  },
  {
    "label": "FPasteFromHistoryContextMenu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPasteFromHistoryContextMenu"
  },
  {
    "label": "FKeyContextMenu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyContextMenu"
  },
  {
    "label": "FEasingContextMenu",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEasingContextMenu"
  },
  {
    "label": "BuildMenu()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SequencerHotspots . h \" # include \" Sequencer . h \" # include \" SequencerClipboardReconciler . h \" # include \" ScopedTransaction . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" Curves / RealCurve . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" struct FSequencerSelectedKey ; class FMenuBuilder ; class FExtender ; class UMovieSceneSection ; struct FSectionContextMenu : TSharedFromThis<FSectionContextMenu> { void)",
    "insertText": "BuildMenu(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, TWeakPtr<FSequencer> InWeakSequencer, FFrameTime InMouseDownTime)"
  },
  {
    "label": "BuildKeyEditMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildKeyEditMenu(FMenuBuilder& MenuBuilder, TWeakPtr<FSequencer> InWeakSequencer, FFrameTime InMouseDownTime)"
  },
  {
    "label": "FSectionContextMenu()",
    "kind": "Method",
    "detail": "Function (private : using TSharedFromThis::AsShared ;)",
    "insertText": "FSectionContextMenu(TWeakPtr<FSequencer> InWeakSequencer, FFrameTime InMouseDownTime)"
  },
  {
    "label": "PopulateMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateMenu(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender)"
  },
  {
    "label": "AddEditMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEditMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AddOrderMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrderMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AddKeyInterpolationMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyInterpolationMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AddKeyEditMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyEditMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "AddBlendTypeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBlendTypeMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SelectAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllKeys()"
  },
  {
    "label": "CopyAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAllKeys()"
  },
  {
    "label": "CanSelectAllKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectAllKeys()"
  },
  {
    "label": "SetSectionToKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionToKey()"
  },
  {
    "label": "IsSectionToKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionToKey()"
  },
  {
    "label": "CanSetSectionToKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetSectionToKey()"
  },
  {
    "label": "AutoSizeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSizeSection()"
  },
  {
    "label": "ReduceKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReduceKeys()"
  },
  {
    "label": "SetInterpTangentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterpTangentMode(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "CanAutoSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAutoSize()"
  },
  {
    "label": "CanReduceKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReduceKeys()"
  },
  {
    "label": "CanSetInterpTangentMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetInterpTangentMode()"
  },
  {
    "label": "ToggleSectionActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSectionActive()"
  },
  {
    "label": "IsSectionActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionActive()"
  },
  {
    "label": "ToggleSectionLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSectionLocked()"
  },
  {
    "label": "IsSectionLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionLocked()"
  },
  {
    "label": "DeleteSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSection()"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront()"
  },
  {
    "label": "SendToBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendToBack()"
  },
  {
    "label": "BringForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringForward()"
  },
  {
    "label": "SendBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBackward()"
  },
  {
    "label": "GetSupportedBlendTypes()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBlendTypeField)",
    "insertText": "GetSupportedBlendTypes()"
  },
  {
    "label": "PasteInto()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSequencer> WeakSequencer ; FFrameTime MouseDownTime ; TMap<FName,TArray<FMovieSceneChannelHandle>> ChannelsByType ; TMap<FName,TArray<UMovieSceneSection*>> SectionsByType ; } ; struct FPasteContextMenuArgs { FPasteContextMenuArgs)",
    "insertText": "PasteInto(TArray<UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>> InNodes, FFrameNumber InTime, TSharedPtr<FMovieSceneClipboard> InClipboard = nullptr)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FPasteContextMenuArgs Args ; Args . Clipboard = InClipboard ; Args . DestinationNodes =)",
    "insertText": "MoveTemp(InNodes)"
  },
  {
    "label": "PasteAt()",
    "kind": "Method",
    "detail": "Function (Args . PasteAtTime = InTime ; return Args ; } FPasteContextMenuArgs)",
    "insertText": "PasteAt(FFrameNumber InTime, TSharedPtr<FMovieSceneClipboard> InClipboard = nullptr)"
  },
  {
    "label": "BuildMenu()",
    "kind": "Method",
    "detail": "Function (FPasteContextMenuArgs Args ; Args . Clipboard = InClipboard ; Args . PasteAtTime = InTime ; return Args ; } TSharedPtr<FMovieSceneClipboard> Clipboard ; FFrameNumber PasteAtTime ; TArray<UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>> DestinationNodes ; } ; struct FPasteContextMenu : TSharedFromThis<FPasteContextMenu> { bool)",
    "insertText": "BuildMenu(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, TWeakPtr<FSequencer> InWeakSequencer, const FPasteContextMenuArgs& Args)"
  },
  {
    "label": "CreateMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FPasteContextMenu>)",
    "insertText": "CreateMenu(TWeakPtr<FSequencer> InWeakSequencer, const FPasteContextMenuArgs& Args)"
  },
  {
    "label": "IsValidPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPaste()"
  },
  {
    "label": "AutoPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutoPaste()"
  },
  {
    "label": "FPasteContextMenu()",
    "kind": "Method",
    "detail": "Function (private : using TSharedFromThis::AsShared ;)",
    "insertText": "FPasteContextMenu(TWeakPtr<FSequencer> InWeakSequencer, const FPasteContextMenuArgs& InArgs) : WeakSequencer(InWeakSequencer) , bPasteFirstOnly(true) , Args(InArgs)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Setup()"
  },
  {
    "label": "AddPasteMenuForTrackType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPasteMenuForTrackType(FMenuBuilder& MenuBuilder, int32 DestinationIndex)"
  },
  {
    "label": "BeginPasteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPasteInto()"
  },
  {
    "label": "PasteInto()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PasteInto(int32 DestinationIndex, FName KeyAreaName, TSet<FSequencerSelectedKey>& NewSelection)"
  },
  {
    "label": "EndPasteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPasteInto(bool bAnythingPasted, const TSet<FSequencerSelectedKey>& NewSelection)"
  },
  {
    "label": "GatherPasteDestinationsForNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherPasteDestinationsForNode(const UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>& InNode, UMovieSceneSection* InSection, const FName& CurrentScope, TMap<FName, FSequencerClipboardReconciler>& Map)"
  },
  {
    "label": "FPasteFromHistoryContextMenu()",
    "kind": "Method",
    "detail": "Function (private : using TSharedFromThis::AsShared ;)",
    "insertText": "FPasteFromHistoryContextMenu(TWeakPtr<FSequencer> InWeakSequencer, const FPasteContextMenuArgs& InArgs) : WeakSequencer(InWeakSequencer) , Args(InArgs)"
  },
  {
    "label": "BuildMenu()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<FSequencer> WeakSequencer ; FPasteContextMenuArgs Args ; } ; struct FKeyContextMenu : TSharedFromThis<FKeyContextMenu> { void)",
    "insertText": "BuildMenu(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, TWeakPtr<FSequencer> InWeakSequencer)"
  },
  {
    "label": "FKeyContextMenu()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FKeyContextMenu(TWeakPtr<FSequencer> InWeakSequencer) : WeakSequencer(InWeakSequencer)"
  },
  {
    "label": "AddPropertiesMenu()",
    "kind": "Method",
    "detail": "Function (} using TSharedFromThis::AsShared ; void)",
    "insertText": "AddPropertiesMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildMenu()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSequencer> WeakSequencer ; TSharedPtr<FStructOnScope> KeyStruct ; TWeakObjectPtr<UMovieSceneSection> KeyStructSection ; } ; struct FEasingContextMenu : TSharedFromThis<FEasingContextMenu> { void)",
    "insertText": "BuildMenu(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, const TArray<UE::Sequencer::FEasingAreaHandle>& InEasings, TWeakPtr<FSequencer> InWeakSequencer, FFrameTime InMouseDownTime)"
  },
  {
    "label": "FEasingContextMenu()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FEasingContextMenu(const TArray<UE::Sequencer::FEasingAreaHandle>& InEasings, TWeakPtr<FSequencer> InWeakSequencer) : Easings(InEasings) , WeakSequencer(InWeakSequencer)"
  },
  {
    "label": "GetEasingTypeText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEasingTypeText()"
  },
  {
    "label": "EasingTypeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EasingTypeMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "EasingOptionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EasingOptionsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "OnEasingTypeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEasingTypeChanged(UClass* NewClass)"
  },
  {
    "label": "OnUpdateLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateLength(int32 NewLength)"
  },
  {
    "label": "GetCurrentLength()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetCurrentLength()"
  },
  {
    "label": "GetAutoEasingCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetAutoEasingCheckState()"
  },
  {
    "label": "SetAutoEasing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoEasing(bool bAutoEasing)"
  }
]