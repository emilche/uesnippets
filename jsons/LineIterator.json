[
  {
    "label": "MemoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBuffer"
  },
  {
    "label": "line_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "line_iterator"
  },
  {
    "label": "line_iterator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_LINEITERATOR_H # define LLVM_SUPPORT_LINEITERATOR_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / DataTypes . h \" # include<iterator> namespace llvm { class MemoryBuffer ; class line_iterator { const MemoryBuffer* Buffer ; char CommentMarker ; bool SkipBlanks ; unsigned LineNumber ; StringRef CurrentLine ; public : using iterator_category = std::forward_iterator_tag ; using value_type = StringRef ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "line_iterator() : Buffer(nullptr)"
  },
  {
    "label": "line_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "line_iterator(const MemoryBuffer &Buffer, bool SkipBlanks = true, char CommentMarker = '\\0')"
  },
  {
    "label": "is_at_eof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_at_eof()"
  },
  {
    "label": "line_number()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "line_number()"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (line_iterator)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const line_iterator &LHS, const line_iterator &RHS)"
  }
]