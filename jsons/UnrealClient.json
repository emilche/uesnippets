[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FViewportFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportFrame"
  },
  {
    "label": "FScreenshotRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenshotRequest"
  },
  {
    "label": "FStatUnitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatUnitData"
  },
  {
    "label": "FStatHitchesData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatHitchesData"
  },
  {
    "label": "FHitProxyMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyMap"
  },
  {
    "label": "FCommonViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommonViewportClient"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputKeyEventArgs . h \" # include \" Engine / EngineBaseTypes . h \" # include \" UObject / GCObject . h \" # include \" RenderResource . h \" # include \" HitProxies . h \" # include \" RenderGraphDefinitions . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" DynamicRenderScaling . h \" class FCanvas ; class FRDGBuilder ; class FViewport ; class FViewportClient ; class UModel ; class FRenderTarget { public :)",
    "insertText": "FRenderTarget()"
  },
  {
    "label": "GetRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (const FTextureRHIRef&)",
    "insertText": "GetRenderTargetTexture()"
  },
  {
    "label": "GetRenderTargetUAV()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "GetRenderTargetUAV()"
  },
  {
    "label": "GetRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetRenderTargetTexture(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetShaderResourceTexture()",
    "kind": "Method",
    "detail": "Function (const FTextureRHIRef&)",
    "insertText": "GetShaderResourceTexture()"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetDisplayGamma()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDisplayGamma()"
  },
  {
    "label": "GetEngineDisplayGamma()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEngineDisplayGamma()"
  },
  {
    "label": "GetDisplayColorGamut()",
    "kind": "Method",
    "detail": "Function (EDisplayColorGamut)",
    "insertText": "GetDisplayColorGamut()"
  },
  {
    "label": "HasToggleFreezeCommand()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "HasToggleFreezeCommand()"
  },
  {
    "label": "ReadPixelsPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPixelsPtr(FColor* OutImageBytes, FReadSurfaceDataFlags InFlags = FReadSurfaceDataFlags(RCM_UNorm, CubeFace_MAX), FIntRect InSrcRect = FIntRect(0, 0, 0, 0))"
  },
  {
    "label": "ReadFloat16Pixels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFloat16Pixels(TArray<FFloat16Color>& OutImageData, FReadSurfaceDataFlags InFlags = FReadSurfaceDataFlags(RCM_UNorm, CubeFace_MAX), FIntRect InSrcRect = FIntRect(0, 0, 0, 0))"
  },
  {
    "label": "ReadLinearColorPixels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadLinearColorPixels(TArray<FLinearColor>& OutImageData, FReadSurfaceDataFlags InFlags = FReadSurfaceDataFlags(RCM_MinMax, CubeFace_MAX), FIntRect InSrcRect = FIntRect(0, 0, 0, 0))"
  },
  {
    "label": "ReadLinearColorPixelsPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadLinearColorPixelsPtr(FLinearColor* OutImageBytes, FReadSurfaceDataFlags InFlags = FReadSurfaceDataFlags(RCM_MinMax, CubeFace_MAX), FIntRect InSrcRect = FIntRect(0, 0, 0, 0))"
  },
  {
    "label": "GetGPUMask()",
    "kind": "Method",
    "detail": "Function (FRHIGPUMask)",
    "insertText": "GetGPUMask(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (} protected : FTextureRHIRef RenderTargetTextureRHI ; } ; class FViewportFrame { public : class FViewport*)",
    "insertText": "GetViewport()"
  },
  {
    "label": "ResizeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeFrame(uint32 NewSizeX,uint32 NewSizeY,EWindowMode::Type NewWindowMode)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} ; # define MAX_HITPROXYSIZE 2 0 0)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnScreenshotRequestProcessed)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnScreenshotCaptured, int32 , int32 , const TArray<FColor>&)"
  },
  {
    "label": "RequestScreenshot()",
    "kind": "Method",
    "detail": "Function (struct FScreenshotRequest { void)",
    "insertText": "RequestScreenshot(bool bInShowUI)"
  },
  {
    "label": "RequestScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestScreenshot(const FString& InFilename, bool bInShowUI, bool bAddFilenameSuffix, bool bHdrScreenshot=false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFilename()"
  },
  {
    "label": "GetHighresScreenshotMaskColorArray()",
    "kind": "Method",
    "detail": "Function (TArray<FColor>*)",
    "insertText": "GetHighresScreenshotMaskColorArray()"
  },
  {
    "label": "GetHighresScreenshotMaskExtents()",
    "kind": "Method",
    "detail": "Function (FIntPoint&)",
    "insertText": "GetHighresScreenshotMaskExtents()"
  },
  {
    "label": "OnScreenshotRequestProcessed()",
    "kind": "Method",
    "detail": "Function (FOnScreenshotRequestProcessed&)",
    "insertText": "OnScreenshotRequestProcessed()"
  },
  {
    "label": "FStatUnitData()",
    "kind": "Method",
    "detail": "Function (struct FStatUnitData { float RenderThreadTime ; float RenderThreadTimeCriticalPath ; float GameThreadTime ; float GameThreadTimeCriticalPath ; float GPUFrameTime [ MAX_NUM_GPUS ] ; float GPUClockFraction [ MAX_NUM_GPUS ] ; float GPUUsageFraction [ MAX_NUM_GPUS ] ; float GPUExternalUsageFraction [ MAX_NUM_GPUS ] ; float FrameTime ; float RHITTime ; float InputLatencyTime ; float RawRenderThreadTime ; float RawRenderThreadTimeCriticalPath ; float RawGameThreadTime ; float RawGameThreadTimeCriticalPath ; float RawGPUFrameTime [ MAX_NUM_GPUS ] ; float RawGPUClockFraction [ MAX_NUM_GPUS ] ; float RawGPUUsageFraction [ MAX_NUM_GPUS ] ; float RawGPUExternalUsageFraction [ MAX_NUM_GPUS ] ; float RawFrameTime ; float RawRHITTime ; float RawInputLatencyTime ; double LastTime ; # if ! UE_BUILD_SHIPPING const int32 NumberOfSamples = 2 0 0 ; int32 CurrentIndex ; TArray<float> RenderThreadTimes ; TArray<float> GameThreadTimes ; TArray<float> GPUFrameTimes [ MAX_NUM_GPUS ] ; TArray<float> FrameTimes ; TArray<float> RHITTimes ; TArray<float> InputLatencyTimes ; DynamicRenderScaling::TMap<TArray<float>> ResolutionFractions ; # endif)",
    "insertText": "FStatUnitData() : RenderThreadTime(0.0f) , RenderThreadTimeCriticalPath(0.0f) , GameThreadTime(0.0f) , GameThreadTimeCriticalPath(0.0f)"
  },
  {
    "label": "FrameTime()",
    "kind": "Method",
    "detail": "Function (0 . 0 f },GPUClockFraction { 0 . 0 f },GPUUsageFraction { 0 . 0 f },GPUExternalUsageFraction { 0 . 0 f },)",
    "insertText": "FrameTime(0.0f) , RHITTime(0.0f) , InputLatencyTime(0.0f) , RawRenderThreadTime(0.0f) , RawRenderThreadTimeCriticalPath(0.0f) , RawGameThreadTime(0.0f) , RawGameThreadTimeCriticalPath(0.0f)"
  },
  {
    "label": "RawFrameTime()",
    "kind": "Method",
    "detail": "Function (0 . 0 f },RawGPUClockFraction { 0 . 0 f },RawGPUUsageFraction { 0 . 0 f },RawGPUExternalUsageFraction { 0 . 0 f },)",
    "insertText": "RawFrameTime(0.0f) , RawRHITTime(0.0f) , RawInputLatencyTime(0.0f) , LastTime(0.0)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING CurrentIndex = 0 ; RenderThreadTimes .)",
    "insertText": "AddZeroed(NumberOfSamples)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (const DynamicRenderScaling::FBudget& Budget =** BudgetIt ; ResolutionFractions [ Budget ] .)",
    "insertText": "Reserve(NumberOfSamples)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ResolutionFractions [ Budget ] .)",
    "insertText": "Add(-1.0f)"
  },
  {
    "label": "DrawStat()",
    "kind": "Method",
    "detail": "Function (} } # endif } int32)",
    "insertText": "DrawStat(FViewport* InViewport, FCanvas* InCanvas, int32 InX, int32 InY)"
  },
  {
    "label": "FStatHitchesData()",
    "kind": "Method",
    "detail": "Function (} ; struct FStatHitchesData { double LastTime ; const int32 NumHitches = 2 0 ; TArray<float> Hitches ; TArray<double> When ; int32 OverwriteIndex ; int32 Count ;)",
    "insertText": "FStatHitchesData() : LastTime(0.0) , OverwriteIndex(0) , Count(0)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Hitches .)",
    "insertText": "AddZeroed(NumHitches)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ; class FViewport : public FRenderTarget,protected FRenderResource { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnViewportResized, FViewport*, uint32)"
  },
  {
    "label": "FViewport()",
    "kind": "Method",
    "detail": "Function (FOnViewportResized ViewportResizedEvent ;)",
    "insertText": "FViewport(FViewportClient* InViewportClient)"
  },
  {
    "label": "FViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FViewport()"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetWindow()"
  },
  {
    "label": "MoveWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindow(int32 NewPosX, int32 NewPosY, int32 NewSizeX, int32 NewSizeY)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "HasMouseCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMouseCapture()"
  },
  {
    "label": "LockMouseToViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LockMouseToViewport(bool bLock)"
  },
  {
    "label": "ShowCursor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowCursor(bool bVisible)"
  },
  {
    "label": "UpdateMouseCursor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateMouseCursor(bool bSetCursor)"
  },
  {
    "label": "SetSoftwareCursorPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSoftwareCursorPosition(FVector2D Position)"
  },
  {
    "label": "IsSoftwareCursorVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSoftwareCursorVisible()"
  },
  {
    "label": "KeyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyState(FKey Key)"
  },
  {
    "label": "GetMouseX()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMouseX()"
  },
  {
    "label": "GetMouseY()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMouseY()"
  },
  {
    "label": "GetMousePos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMousePos(FIntPoint& MousePosition, const bool bLocalPosition = true)"
  },
  {
    "label": "GetTabletPressure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTabletPressure()"
  },
  {
    "label": "IsFullscreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullscreen()"
  },
  {
    "label": "VirtualDesktopPixelToViewport()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "VirtualDesktopPixelToViewport(FIntPoint VirtualDesktopPointPx)"
  },
  {
    "label": "ViewportToVirtualDesktopPixel()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "ViewportToVirtualDesktopPixel(FVector2D ViewportCoordinate)"
  },
  {
    "label": "GetDebugCanvas()",
    "kind": "Method",
    "detail": "Function (FCanvas*)",
    "insertText": "GetDebugCanvas()"
  },
  {
    "label": "SetPreCaptureMousePosFromSlateCursor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreCaptureMousePosFromSlateCursor()"
  },
  {
    "label": "EnqueueBeginRenderFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueBeginRenderFrame(const bool bShouldPresent)"
  },
  {
    "label": "EnqueueEndRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueEndRenderFrame(const bool bLockToVsync, const bool bShouldPresent)"
  },
  {
    "label": "BeginRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRenderFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "EndRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRenderFrame(FRHICommandListImmediate& RHICmdList, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "IsKeyboardAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyboardAvailable(int32 ControllerID)"
  },
  {
    "label": "InvalidateDisplay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateDisplay()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(bool bShouldPresent = true)"
  },
  {
    "label": "DeferInvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferInvalidateHitProxy()"
  },
  {
    "label": "InvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateHitProxy()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "GetRawHitProxyData()",
    "kind": "Method",
    "detail": "Function (const TArray<FColor>&)",
    "insertText": "GetRawHitProxyData(FIntRect InRect)"
  },
  {
    "label": "GetHitProxyMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHitProxyMap(FIntRect InRect, TArray<HHitProxy*>& OutMap)"
  },
  {
    "label": "GetHitProxy()",
    "kind": "Method",
    "detail": "Function (HHitProxy*)",
    "insertText": "GetHitProxy(int32 X,int32 Y)"
  },
  {
    "label": "GetActorsAndModelsInHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorsAndModelsInHitProxy(FIntRect InRect, TSet<AActor*>& OutActors, TSet<UModel*>& OutModels)"
  },
  {
    "label": "GetElementHandleAtPoint()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle)",
    "insertText": "GetElementHandleAtPoint(int32 X, int32 Y)"
  },
  {
    "label": "GetElementHandlesInRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementHandlesInRect(FIntRect InRect, FTypedElementListRef OutElementHandles)"
  },
  {
    "label": "GetViewportFrame()",
    "kind": "Method",
    "detail": "Function (FViewportFrame*)",
    "insertText": "GetViewportFrame()"
  },
  {
    "label": "CalculateViewExtents()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "CalculateViewExtents(float AspectRatio, const FIntRect& ViewRect)"
  },
  {
    "label": "CalculateViewExtents()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "CalculateViewExtents(float AspectRatio, float DesiredAspectRatio, const FIntRect& ViewRect, const FIntPoint& DestSize)"
  },
  {
    "label": "SetViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportClient(FViewportClient* InViewportClient)"
  },
  {
    "label": "GetInitialPositionXY()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetInitialPositionXY()"
  },
  {
    "label": "GetClient()",
    "kind": "Method",
    "detail": "Function (} FViewportClient*)",
    "insertText": "GetClient()"
  },
  {
    "label": "IsGameRenderingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameRenderingEnabled()"
  },
  {
    "label": "GetViewportRHI()",
    "kind": "Method",
    "detail": "Function (const FViewportRHIRef&)",
    "insertText": "GetViewportRHI()"
  },
  {
    "label": "DrawStatsHUD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawStatsHUD(FCanvas* InCanvas, const int32 InX, const int32 InY)"
  },
  {
    "label": "IsPlayInEditorViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInEditorViewport()"
  },
  {
    "label": "IsSlateViewport()",
    "kind": "Method",
    "detail": "Function (bIsPlayInEditorViewport = bInPlayInEditorViewport ; } bool)",
    "insertText": "IsSlateViewport()"
  },
  {
    "label": "TakeHighResScreenShot()",
    "kind": "Method",
    "detail": "Function (bIsHDR = bHDR ; } FString AppVersionString ; bool)",
    "insertText": "TakeHighResScreenShot()"
  },
  {
    "label": "IsStereoRenderingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStereoRenderingAllowed()"
  },
  {
    "label": "GetViewportType()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetViewportType()"
  },
  {
    "label": "HighResScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighResScreenshot()"
  },
  {
    "label": "EnumerateHitProxiesInRect()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnumerateHitProxiesInRect(FIntRect InRect, TFunctionRef<bool(HHitProxy*)> InCallback)"
  },
  {
    "label": "FHitProxyMap()",
    "kind": "Method",
    "detail": "Function (protected : class FHitProxyMap : public FHitProxyConsumer,public FRenderTarget,public FGCObject { public :)",
    "insertText": "FHitProxyMap()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 NewSizeX,uint32 NewSizeY)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "AddHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHitProxy(HHitProxy* HitProxy)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetHitProxyTexture()",
    "kind": "Method",
    "detail": "Function (const FTextureRHIRef&)",
    "insertText": "GetHitProxyTexture(void)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "IsCtrlDown()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsCtrlDown(FViewport* Viewport)"
  },
  {
    "label": "IsShiftDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShiftDown(FViewport* Viewport)"
  },
  {
    "label": "IsAltDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAltDown(FViewport* Viewport)"
  },
  {
    "label": "GetViewportScreenShot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewportScreenShot(FViewport* Viewport, TArray<FColor>& Bitmap, const FIntRect& ViewRect = FIntRect())"
  },
  {
    "label": "GetViewportScreenShotHDR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewportScreenShotHDR(FViewport* Viewport, TArray<FLinearColor>& Bitmap, const FIntRect& ViewRect = FIntRect())"
  },
  {
    "label": "GetHighResScreenShotInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHighResScreenShotInput(const TCHAR* Cmd, FOutputDevice& Ar, uint32& OutXRes, uint32& OutYRes, float& OutResMult, FIntRect& OutCaptureRegion, bool& OutShouldEnableMask, bool& OutDumpBufferVisualizationTargets, bool& OutCaptureHDR, FString& OutFilenameOverride, bool& OutUseDateTimeAsFileName)"
  }
]