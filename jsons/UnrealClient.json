[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FViewportFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportFrame"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FScreenshotRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenshotRequest"
  },
  {
    "label": "FStatUnitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatUnitData"
  },
  {
    "label": "FStatHitchesData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatHitchesData"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FHitProxyMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHitProxyMap"
  },
  {
    "label": "FCommonViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommonViewportClient"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FRenderTarget()"
  },
  {
    "label": "GetEngineDisplayGamma()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEngineDisplayGamma()"
  },
  {
    "label": "ReadFloat16Pixels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFloat16Pixels(TArray<FFloat16Color>& OutImageData, ECubeFace CubeFace)"
  },
  {
    "label": "RequestScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestScreenshot(bool bInShowUI)"
  },
  {
    "label": "RequestScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestScreenshot(const FString& InFilename, bool bInShowUI, bool bAddFilenameSuffix, bool bHdrScreenshot=false)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "CreateViewportScreenShotFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewportScreenShotFilename( FString& InOutFilename )"
  },
  {
    "label": "GetMemoryString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMemoryString( const double Value, const bool bAutoType = true )"
  },
  {
    "label": "DrawStat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawStat(FViewport* InViewport, FCanvas* InCanvas, int32 InX, int32 InY)"
  },
  {
    "label": "DrawStat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawStat(FViewport* InViewport, FCanvas* InCanvas, int32 InX, int32 InY)"
  },
  {
    "label": "FViewport()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FViewport(FViewportClient* InViewportClient)"
  },
  {
    "label": "EnqueueBeginRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueBeginRenderFrame(const bool bShouldPresent)"
  },
  {
    "label": "EnqueueEndRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueEndRenderFrame(const bool bLockToVsync, const bool bShouldPresent)"
  },
  {
    "label": "BeginRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRenderFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "EndRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRenderFrame(FRHICommandListImmediate& RHICmdList, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw( bool bShouldPresent = true )"
  },
  {
    "label": "DeferInvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferInvalidateHitProxy()"
  },
  {
    "label": "InvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateHitProxy()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "GetHitProxyMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHitProxyMap(FIntRect InRect, TArray<HHitProxy*>& OutMap)"
  },
  {
    "label": "GetActorsAndModelsInHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActorsAndModelsInHitProxy(FIntRect InRect, TSet<AActor*>& OutActors, TSet<UModel*>& OutModels)"
  },
  {
    "label": "GetElementHandleAtPoint()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle)",
    "insertText": "GetElementHandleAtPoint(int32 X, int32 Y)"
  },
  {
    "label": "GetElementHandlesInRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementHandlesInRect(FIntRect InRect, FTypedElementListRef OutElementHandles)"
  },
  {
    "label": "CalculateViewExtents()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "CalculateViewExtents(float AspectRatio, const FIntRect& ViewRect)"
  },
  {
    "label": "CalculateViewExtents()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "CalculateViewExtents(float AspectRatio, float DesiredAspectRatio, const FIntRect& ViewRect, const FIntPoint& DestSize)"
  },
  {
    "label": "SetViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportClient( FViewportClient* InViewportClient )"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FIntPoint(SizeX, SizeY)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FIntPoint(InitialPositionX, InitialPositionY)"
  },
  {
    "label": "SetGameRenderingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameRenderingEnabled(bool bIsEnabled, int32 PresentAndStopMovieDelay=0)"
  },
  {
    "label": "UpdateRenderTargetSurfaceRHIToCurrentBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderTargetSurfaceRHIToCurrentBackBuffer()"
  },
  {
    "label": "SetInitialSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialSize( FIntPoint InitialSizeXY )"
  },
  {
    "label": "TakeHighResScreenShot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeHighResScreenShot()"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "UpdateViewportRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewportRHI(bool bDestroyed, uint32 NewSizeX, uint32 NewSizeY, EWindowMode::Type NewWindowMode, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "HighResScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighResScreenshot()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 NewSizeX,uint32 NewSizeY)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FIntPoint(SizeX, SizeY)"
  },
  {
    "label": "IsCtrlDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCtrlDown(FViewport* Viewport)"
  },
  {
    "label": "IsShiftDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShiftDown(FViewport* Viewport)"
  },
  {
    "label": "IsAltDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAltDown(FViewport* Viewport)"
  },
  {
    "label": "GetHighResScreenShotInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHighResScreenShotInput(const TCHAR* Cmd, FOutputDevice& Ar, uint32& OutXRes, uint32& OutYRes, float& OutResMult, FIntRect& OutCaptureRegion, bool& OutShouldEnableMask, bool& OutDumpBufferVisualizationTargets, bool& OutCaptureHDR, FString& OutFilenameOverride, bool& OutUseDateTimeAsFileName)"
  }
]