[
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FComponentAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentAccess"
  },
  {
    "label": "FReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadAccess"
  },
  {
    "label": "FWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteAccess"
  },
  {
    "label": "FOptionalComponentAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalComponentAccess"
  },
  {
    "label": "FOptionalReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalReadAccess"
  },
  {
    "label": "FOptionalWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalWriteAccess"
  },
  {
    "label": "FEntityIDAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityIDAccess"
  },
  {
    "label": "TReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadAccess"
  },
  {
    "label": "FErasedReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErasedReadAccess"
  },
  {
    "label": "FErasedOptionalReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErasedOptionalReadAccess"
  },
  {
    "label": "FErasedWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FErasedWriteAccess"
  },
  {
    "label": "TWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteAccess"
  },
  {
    "label": "TOptionalReadAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptionalReadAccess"
  },
  {
    "label": "TOptionalWriteAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptionalWriteAccess"
  },
  {
    "label": "TUnpackMultiComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUnpackMultiComponentData"
  },
  {
    "label": "TReadOneOfAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOneOfAccessor"
  },
  {
    "label": "TReadOneOrMoreOfAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOneOrMoreOfAccessor"
  },
  {
    "label": "PreLockComponentData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" EntitySystem / EntityAllocationIterator . h \" # include \" EntitySystem / MovieSceneComponentPtr . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneSystemTaskDependencies . h \" # include \" EntitySystem / RelativePtr . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" MovieSceneEntityIDs . h \" # include \" Templates / Tuple . h \" # include<initializer_list> namespace UE { namespace MovieScene { class FEntityManager ; using FPreLockedDataPtr = TRelativePtr<void,uint32> ; struct FComponentAccess { FComponentTypeID ComponentType ; void)",
    "insertText": "PreLockComponentData(const FEntityAllocation* Allocation, FPreLockedDataPtr* PrelockedComponentData)"
  },
  {
    "label": "GetComponentHeaderChecked()",
    "kind": "Method",
    "detail": "Function (const FComponentHeader& Header = Allocation ->)",
    "insertText": "GetComponentHeaderChecked(ComponentType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PrelockedComponentData ->)",
    "insertText": "Reset(Allocation->GetComponentDataAddress(), Header.Components)"
  },
  {
    "label": "FReadAccess()",
    "kind": "Method",
    "detail": "Function (} } ; struct FReadAccess : FComponentAccess {)",
    "insertText": "FReadAccess(FComponentTypeID InComponentType)"
  },
  {
    "label": "FWriteAccess()",
    "kind": "Method",
    "detail": "Function (InComponentType } { } } ; struct FWriteAccess : FComponentAccess {)",
    "insertText": "FWriteAccess(FComponentTypeID InComponentType)"
  },
  {
    "label": "FindComponentHeader()",
    "kind": "Method",
    "detail": "Function (const FComponentHeader* Header = Allocation ->)",
    "insertText": "FindComponentHeader(ComponentType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PrelockedComponentData ->)",
    "insertText": "Reset(Allocation->GetComponentDataAddress(), Header->Components)"
  },
  {
    "label": "FOptionalReadAccess()",
    "kind": "Method",
    "detail": "Function (} } } ; struct FOptionalReadAccess : FOptionalComponentAccess {)",
    "insertText": "FOptionalReadAccess(FComponentTypeID InComponentType)"
  },
  {
    "label": "FOptionalWriteAccess()",
    "kind": "Method",
    "detail": "Function (InComponentType } { } } ; struct FOptionalWriteAccess : FOptionalComponentAccess {)",
    "insertText": "FOptionalWriteAccess(FComponentTypeID InComponentType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PrelockedComponentData ->)",
    "insertText": "Reset(Allocation, Allocation->GetRawEntityIDs())"
  },
  {
    "label": "ResolvePreLockedComponentData()",
    "kind": "Method",
    "detail": "Function (} TRead<FMovieSceneEntityID>)",
    "insertText": "ResolvePreLockedComponentData(const FEntityAllocation* Allocation, const FPreLockedDataPtr* Ptr, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "LockComponentData()",
    "kind": "Method",
    "detail": "Function (} TRead<FMovieSceneEntityID>)",
    "insertText": "LockComponentData(const FEntityAllocation* Allocation, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "TReadAccess()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TReadAccess : FReadAccess { using AccessType = const T ; int32 PreLockedDataNum = 1 ;)",
    "insertText": "TReadAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "FErasedReadAccess()",
    "kind": "Method",
    "detail": "Function (} } ; struct FErasedReadAccess : FReadAccess { int32 PreLockedDataNum = 1 ;)",
    "insertText": "FErasedReadAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PrelockedComponentData ->)",
    "insertText": "Reset(Allocation, &Header)"
  },
  {
    "label": "FErasedOptionalReadAccess()",
    "kind": "Method",
    "detail": "Function (} } ; struct FErasedOptionalReadAccess : FReadAccess { int32 PreLockedDataNum = 1 ;)",
    "insertText": "FErasedOptionalReadAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PrelockedComponentData ->)",
    "insertText": "Reset(Allocation, Header)"
  },
  {
    "label": "FErasedWriteAccess()",
    "kind": "Method",
    "detail": "Function (} } ; struct FErasedWriteAccess : FWriteAccess { int32 PreLockedDataNum = 1 ;)",
    "insertText": "FErasedWriteAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "TWriteAccess()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TWriteAccess : FWriteAccess { using AccessType = T ; int32 PreLockedDataNum = 1 ;)",
    "insertText": "TWriteAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "TOptionalReadAccess()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TOptionalReadAccess : FOptionalReadAccess { using AccessType = const T ; int32 PreLockedDataNum = 1 ;)",
    "insertText": "TOptionalReadAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "TOptionalWriteAccess()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TOptionalWriteAccess : FOptionalWriteAccess { using AccessType = T ; int32 PreLockedDataNum = 1 ;)",
    "insertText": "TOptionalWriteAccess(FComponentTypeID InComponentTypeID)"
  },
  {
    "label": "ResolvePreLockedComponentData()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . .> struct TUnpackMultiComponentData ; template<. . . T,int . . . Indices> struct TUnpackMultiComponentData<TIntegerSequence<int,Indices . . .>,T . . .> { TMultiComponentData<TReadOptional<T> . . .>)",
    "insertText": "ResolvePreLockedComponentData(const FEntityAllocation* Allocation, const FOptionalReadAccess* ComponentTypes, const FPreLockedDataPtr* PrelockedComponentData, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "LockComponentData()",
    "kind": "Method",
    "detail": "Function (} TMultiComponentLock<TReadOptional<T> . . .>)",
    "insertText": "LockComponentData(const FEntityAllocation* Allocation, const FOptionalReadAccess* ComponentTypes, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . T> struct TReadOneOfAccessor { using AccessType = TMultiComponentLock<TReadOptional<T> . . .> ; int32 PreLockedDataNum =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "TReadOneOfAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TReadOneOfAccessor(TComponentTypeID<T>... InComponentTypeIDs)"
  },
  {
    "label": "PreLockComponentData()",
    "kind": "Method",
    "detail": "Function (ComponentTypes [ Index ] .)",
    "insertText": "PreLockComponentData(Allocation, &PrelockedComponentData[Index])"
  },
  {
    "label": "ResolvePreLockedComponentData()",
    "kind": "Method",
    "detail": "Function (} } TMultiComponentData<TReadOptional<T> . . .>)",
    "insertText": "ResolvePreLockedComponentData(const FEntityAllocation* Allocation, const FPreLockedDataPtr* PrelockedComponentData, FEntityAllocationWriteContext WriteContext)"
  },
  {
    "label": "TReadOneOrMoreOfAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TReadOneOrMoreOfAccessor(TComponentTypeID<T>... InComponentTypeIDs)"
  },
  {
    "label": "AddAccessorToFilter()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddAccessorToFilter(const FEntityIDAccess*, FEntityComponentFilter* OutFilter)"
  },
  {
    "label": "AddAccessorToFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAccessorToFilter(const FComponentAccess* In, FEntityComponentFilter* OutFilter)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (OutFilter ->)",
    "insertText": "All({ In->ComponentType })"
  },
  {
    "label": "AddAccessorToFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAccessorToFilter(const FOptionalComponentAccess* In, FEntityComponentFilter* OutFilter)"
  },
  {
    "label": "AddAccessorToFilter()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> void)",
    "insertText": "AddAccessorToFilter(const TReadOneOfAccessor<T...>* In, FEntityComponentFilter* OutFilter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FComponentMask Mask ;)",
    "insertText": "for(int32 Index = 0; Index < sizeof...(T); ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FComponentTypeID Component = In -> ComponentTypes [ Index ] . ComponentType ;)",
    "insertText": "if(Component)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Mask .)",
    "insertText": "Set(Component)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "check(Mask.NumComponents() != 0)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (OutFilter ->)",
    "insertText": "Complex(Mask, EComplexFilterMode::OneOf)"
  },
  {
    "label": "AddAccessorToFilter()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> void)",
    "insertText": "AddAccessorToFilter(const TReadOneOrMoreOfAccessor<T...>* In, FEntityComponentFilter* OutFilter)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (OutFilter ->)",
    "insertText": "Complex(Mask, EComplexFilterMode::OneOrMoreOf)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulatePrerequisites(const FEntityIDAccess*, const FSystemTaskPrerequisites& InPrerequisites, FGraphEventArray* OutGatheredPrereqs)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulatePrerequisites(const FComponentAccess* In, const FSystemTaskPrerequisites& InPrerequisites, FGraphEventArray* OutGatheredPrereqs)"
  },
  {
    "label": "FilterByComponent()",
    "kind": "Method",
    "detail": "Function (InPrerequisites .)",
    "insertText": "FilterByComponent(*OutGatheredPrereqs, In->ComponentType)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulatePrerequisites(const FOptionalComponentAccess* In, const FSystemTaskPrerequisites& InPrerequisites, FGraphEventArray* OutGatheredPrereqs)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (} } template<. . . T> void)",
    "insertText": "PopulatePrerequisites(const TReadOneOfAccessor<T...>* In, const FSystemTaskPrerequisites& InPrerequisites, FGraphEventArray* OutGatheredPrereqs)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulatePrerequisites(&In->ComponentTypes[Index], InPrerequisites, OutGatheredPrereqs)"
  },
  {
    "label": "PopulatePrerequisites()",
    "kind": "Method",
    "detail": "Function (} } template<. . . T> void)",
    "insertText": "PopulatePrerequisites(const TReadOneOrMoreOfAccessor<T...>* In, const FSystemTaskPrerequisites& InPrerequisites, FGraphEventArray* OutGatheredPrereqs)"
  },
  {
    "label": "PopulateSubsequents()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopulateSubsequents(const FWriteAccess* In, const FGraphEventRef& InEvent, FSystemSubsequentTasks& OutSubsequents)"
  },
  {
    "label": "AddComponentTask()",
    "kind": "Method",
    "detail": "Function (OutSubsequents .)",
    "insertText": "AddComponentTask(In->ComponentType, InEvent)"
  },
  {
    "label": "PopulateSubsequents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateSubsequents(const FOptionalWriteAccess* In, const FGraphEventRef& InEvent, FSystemSubsequentTasks& OutSubsequents)"
  },
  {
    "label": "PopulateSubsequents()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopulateSubsequents(const void* In, const FGraphEventRef& InEvent, FSystemSubsequentTasks& OutSubsequents)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateReadWriteDependencies(const FEntityIDAccess*, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateReadWriteDependencies(const FReadAccess* In, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (OutReadDependencies .)",
    "insertText": "Set(In->ComponentType)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateReadWriteDependencies(const FOptionalReadAccess* In, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopulateReadWriteDependencies(const FWriteAccess* In, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateReadWriteDependencies(const FOptionalWriteAccess* In, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} } template<. . . T> void)",
    "insertText": "PopulateReadWriteDependencies(const TReadOneOfAccessor<T...>* In, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateReadWriteDependencies(&In->ComponentTypes[Index], OutReadDependencies, OutWriteDependencies)"
  },
  {
    "label": "PopulateReadWriteDependencies()",
    "kind": "Method",
    "detail": "Function (} } template<. . . T> void)",
    "insertText": "PopulateReadWriteDependencies(const TReadOneOrMoreOfAccessor<T...>* In, FComponentMask& OutReadDependencies, FComponentMask& OutWriteDependencies)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasBeenWrittenToSince(const FEntityIDAccess* In, FEntityAllocation* Allocation, uint64 InSystemSerial)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenWrittenToSince(const FComponentAccess* In, FEntityAllocation* Allocation, uint64 InSystemSerial)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenWrittenToSince(const FOptionalComponentAccess* In, FEntityAllocation* Allocation, uint64 InSystemSerial)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<. . . T> bool)",
    "insertText": "HasBeenWrittenToSince(const TReadOneOfAccessor<T...>* In, FEntityAllocation* Allocation, uint64 InSystemSerial)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (bAnyWrittenTo | =)",
    "insertText": "HasBeenWrittenToSince(&In->ComponentTypes[Index], Allocation, InSystemSerial)"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} return bAnyWrittenTo ; } template<. . . T> bool)",
    "insertText": "HasBeenWrittenToSince(const TReadOneOrMoreOfAccessor<T...>* In, FEntityAllocation* Allocation, uint64 InSystemSerial)"
  },
  {
    "label": "IsAccessorValid()",
    "kind": "Method",
    "detail": "Function (} return bAnyWrittenTo ; } bool)",
    "insertText": "IsAccessorValid(const FEntityIDAccess*)"
  },
  {
    "label": "IsAccessorValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAccessorValid(const FOptionalComponentAccess* In)"
  },
  {
    "label": "IsAccessorValid()",
    "kind": "Method",
    "detail": "Function (bValid | =)",
    "insertText": "IsAccessorValid(&In->ComponentTypes[Index])"
  },
  {
    "label": "IsAccessorValid()",
    "kind": "Method",
    "detail": "Function (} return bValid ; } template<. . . T> bool)",
    "insertText": "IsAccessorValid(const TReadOneOrMoreOfAccessor<T...>* In)"
  },
  {
    "label": "HasAccessorWork()",
    "kind": "Method",
    "detail": "Function (} return bValid ; } bool)",
    "insertText": "HasAccessorWork(const FEntityManager*, const FEntityIDAccess*)"
  },
  {
    "label": "HasAccessorWork()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAccessorWork(const FEntityManager* EntityManager, const FOptionalComponentAccess* In)"
  },
  {
    "label": "HasAccessorWork()",
    "kind": "Method",
    "detail": "Function (bAnyWork | =)",
    "insertText": "HasAccessorWork(EntityManager, &In->ComponentTypes[Index])"
  },
  {
    "label": "HasAccessorWork()",
    "kind": "Method",
    "detail": "Function (} return bAnyWork ; } template<. . . T> bool)",
    "insertText": "HasAccessorWork(const FEntityManager* EntityManager, const TReadOneOrMoreOfAccessor<T...>* In)"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (} return bAnyWork ; } # if UE_MOVIESCENE_ENTITY_DEBUG void)",
    "insertText": "AccessorToString(const FReadAccess* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessorToString(const FWriteAccess* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessorToString(const FOptionalReadAccess* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessorToString(const FOptionalWriteAccess* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessorToString(const FEntityIDAccess*, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "OneOfAccessorToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OneOfAccessorToString(const FOptionalReadAccess* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (template<. . . T> void)",
    "insertText": "AccessorToString(const TReadOneOfAccessor<T...>* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "OneOfAccessorToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OneOfAccessorToString(&In->ComponentTypes[Index], EntityManager, Strings.Emplace_GetRef())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} OutString + =)",
    "insertText": "Printf(TEXT(\"\\n\\tRead One Of: [ %s ]\"), *FString::Join(Strings, TEXT(\",\")))"
  },
  {
    "label": "AccessorToString()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> void)",
    "insertText": "AccessorToString(const TReadOneOrMoreOfAccessor<T...>* In, FEntityManager* EntityManager, FString& OutString)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} OutString + =)",
    "insertText": "Printf(TEXT(\"\\n\\tRead One Or More Of: [ %s ]\"), *FString::Join(Strings, TEXT(\",\")))"
  }
]