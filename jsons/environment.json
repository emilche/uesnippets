[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ENVIRONMENT_H_ # define BASE_ENVIRONMENT_H_ # include<map> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" build / build_config . h \" namespace base { namespace env_vars { # if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "Environment()",
    "kind": "Method",
    "detail": "Function (# endif } class BASE_EXPORT Environment { public : ~)",
    "insertText": "Environment()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Environment>)",
    "insertText": "Create()"
  },
  {
    "label": "GetVar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVar(StringPiece variable_name, std::string* result)"
  },
  {
    "label": "HasVar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVar(StringPiece variable_name)"
  },
  {
    "label": "SetVar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVar(StringPiece variable_name, const std::string& new_value)"
  },
  {
    "label": "UnSetVar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnSetVar(StringPiece variable_name)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  }
]