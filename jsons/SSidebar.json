[
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FSidebarDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSidebarDrawer"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SScrollBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBox"
  },
  {
    "label": "SSidebarButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarButton"
  },
  {
    "label": "SSidebarContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarContainer"
  },
  {
    "label": "SSidebarDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarDrawer"
  },
  {
    "label": "STabDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STabDrawer"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FSidebarState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarState"
  },
  {
    "label": "FTabId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabId"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SidebarDrawerConfig . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Layout / SSplitter . h \" # include \" Widgets / SCompoundWidget . h \" class FExtender ; class FSidebarDrawer ; class ISidebarDrawerContent ; class SBox ; class SOverlay ; class SScrollBox ; class SSidebarButton ; class SSidebarContainer ; class SSidebarDrawer ; class STabDrawer ; class SVerticalBox ; class UToolMenu ; struct FSidebarState ; struct FTabId ; enum class ESidebarTabLocation : uint8 { Left,Right,Top,Bottom } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSidebarStateChanged, const FSidebarState&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SSidebar : public SCompoundWidget { public : class SSidebarContainer ; float MinTabButtonSize = 1 0 0 . f ; float MaxTabButtonSize = 2 0 0 . f ; float TabButtonThickness = 2 5 . f ;)",
    "insertText": "SLATE_BEGIN_ARGS(SSidebar) : _HideWhenAllDocked(false) , _AlwaysUseMaxButtonSize(false) , _DisablePin(false) , _DisableDock(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(ESidebarTabLocation, TabLocation) SLATE_ARGUMENT(float, InitialDrawerSize) SLATE_ARGUMENT(FOnGetContent, OnGetContent) SLATE_ARGUMENT(bool, HideWhenAllDocked) SLATE_ARGUMENT(bool, AlwaysUseMaxButtonSize) SLATE_ARGUMENT(bool, DisablePin) SLATE_ARGUMENT(bool, DisableDock) SLATE_EVENT(FOnSidebarStateChanged, OnStateChanged) SLATE_END_ARGS() virtual ~SSidebar()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<SSidebarContainer>& InContainerWidget)"
  },
  {
    "label": "RegisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawer(FSidebarDrawerConfig&& InDrawerConfig)"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawer(const FName InDrawerId)"
  },
  {
    "label": "ContainsDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDrawer(const FName InDrawerId)"
  },
  {
    "label": "GetDrawerCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDrawerCount()"
  },
  {
    "label": "RegisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawerSection(const FName InDrawerId, const TSharedPtr<ISidebarDrawerContent>& InSection)"
  },
  {
    "label": "UnregisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawerSection(const FName InDrawerId, const FName InSectionId)"
  },
  {
    "label": "ContainsDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDrawerSection(const FName InDrawerId, const FName InSectionId)"
  },
  {
    "label": "TryOpenDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryOpenDrawer(const FName InDrawerId)"
  },
  {
    "label": "CloseAllDrawers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllDrawers(const bool bInAnimate = true)"
  },
  {
    "label": "HasDrawerOpened()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDrawerOpened()"
  },
  {
    "label": "IsDrawerOpened()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawerOpened(const FName InDrawerId)"
  },
  {
    "label": "GetOpenedDrawerId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetOpenedDrawerId()"
  },
  {
    "label": "HasDrawerPinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDrawerPinned()"
  },
  {
    "label": "IsDrawerPinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawerPinned(const FName InDrawerId)"
  },
  {
    "label": "GetPinnedDrawerIds()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetPinnedDrawerIds()"
  },
  {
    "label": "SetDrawerPinned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawerPinned(const FName InDrawerId, const bool bInIsPinned)"
  },
  {
    "label": "HasDrawerDocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDrawerDocked()"
  },
  {
    "label": "IsDrawerDocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawerDocked(const FName InDrawerId)"
  },
  {
    "label": "GetDockedDrawerIds()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetDockedDrawerIds()"
  },
  {
    "label": "SetDrawerDocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawerDocked(const FName InDrawerId, const bool bInIsDocked)"
  },
  {
    "label": "UndockAllDrawers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndockAllDrawers()"
  },
  {
    "label": "UnpinAllDrawers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinAllDrawers()"
  },
  {
    "label": "IsHorizontal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHorizontal()"
  },
  {
    "label": "IsVertical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVertical()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (FSidebarState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetTabLocation()",
    "kind": "Method",
    "detail": "Function (ESidebarTabLocation)",
    "insertText": "GetTabLocation()"
  },
  {
    "label": "GetMainContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetMainContent()"
  },
  {
    "label": "RebuildDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildDrawer(const FName InDrawerId, const bool bInOnlyIfOpen = true)"
  },
  {
    "label": "OnTabDrawerButtonPressed()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnTabDrawerButtonPressed(const TSharedRef<FSidebarDrawer>& InDrawer)"
  },
  {
    "label": "OnDrawerTabPinToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawerTabPinToggled(const TSharedRef<FSidebarDrawer>& InDrawer, const bool bIsPinned)"
  },
  {
    "label": "OnDrawerTabDockToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawerTabDockToggled(const TSharedRef<FSidebarDrawer>& InDrawer, const bool bIsDocked)"
  },
  {
    "label": "OnGetTabDrawerContextMenuWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetTabDrawerContextMenuWidget(TSharedRef<FSidebarDrawer> InDrawer)"
  },
  {
    "label": "BuildOptionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOptionsMenu(UToolMenu* const InMenu)"
  },
  {
    "label": "RemoveDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDrawer(const TSharedRef<FSidebarDrawer>& InDrawer)"
  },
  {
    "label": "RemoveAllDrawers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllDrawers()"
  },
  {
    "label": "FindDrawer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSidebarDrawer>)",
    "insertText": "FindDrawer(const FName InDrawerId)"
  },
  {
    "label": "SetWidgetDrawerSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetDrawerSize(const TSharedRef<FSidebarDrawer>& InDrawer)"
  },
  {
    "label": "AreAllDrawersDocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllDrawersDocked()"
  },
  {
    "label": "GetAllDrawers()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<FSidebarDrawer>>&)",
    "insertText": "GetAllDrawers()"
  }
]