[
  {
    "label": "FGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphTrack"
  },
  {
    "label": "FGraphSeries",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphSeries"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "FPointInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointInfo"
  },
  {
    "label": "FPointInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FGraphTrack ; class FGraphSeries ; class FTimingTrackViewport ; class FGraphTrackBuilder { private : struct FPointInfo { bool bValid ; float X ; float Y ;)",
    "insertText": "FPointInfo() : bValid(false)"
  },
  {
    "label": "FGraphTrackBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "FGraphTrackBuilder(FGraphTrack& InTrack, FGraphSeries& InSeries, const FTimingTrackViewport& InViewport)"
  },
  {
    "label": "FGraphTrackBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGraphTrackBuilder()"
  },
  {
    "label": "FGraphTrackBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphTrackBuilder(const FGraphTrackBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGraphTrackBuilder&)",
    "insertText": "operator(const FGraphTrackBuilder&)"
  },
  {
    "label": "GetTrack()",
    "kind": "Method",
    "detail": "Function (FGraphTrack&)",
    "insertText": "GetTrack()"
  },
  {
    "label": "BeginPoints()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BeginPoints()"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPoint(double Time, double Value)"
  },
  {
    "label": "FlushPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPoints()"
  },
  {
    "label": "EndPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPoints()"
  },
  {
    "label": "BeginConnectedLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginConnectedLines()"
  },
  {
    "label": "AddConnectedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnectedLine(double Time, double Value, bool bNewBatch)"
  },
  {
    "label": "FlushConnectedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushConnectedLine()"
  },
  {
    "label": "AddConnectedLinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnectedLinePoint(float X, float Y)"
  },
  {
    "label": "EndConnectedLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndConnectedLines()"
  },
  {
    "label": "BeginBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBoxes()"
  },
  {
    "label": "AddBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBox(double Time, double Duration, double Value)"
  },
  {
    "label": "FlushBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushBox()"
  },
  {
    "label": "EndBoxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBoxes()"
  }
]