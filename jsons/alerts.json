[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TriageAlert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TriageAlert"
  },
  {
    "label": "TriageHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriageHelper"
  },
  {
    "label": "TriageHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_ALERTS_H_ # define RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_ALERTS_H_ # include<stdio . h> # include<map> # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" logging / rtc_event_log / rtc_event_log_parser . h \" # include \" rtc_tools / rtc_event_log_visualizer / analyzer_common . h \" namespace webrtc { enum class TriageAlertType { kUnknown = 0,kIncomingRtpGap,kOutgoingRtpGap,kIncomingRtcpGap,kOutgoingRtcpGap,kIncomingSeqNumJump,kOutgoingSeqNumJump,kIncomingCaptureTimeJump,kOutgoingCaptureTimeJump,kOutgoingHighLoss,kLast,} ; struct TriageAlert { TriageAlertType type = TriageAlertType::kUnknown ; int count = 0 ; float first_occurrence = - 1 ; std::string explanation ; } ; class TriageHelper { public :)",
    "insertText": "TriageHelper(const AnalyzerConfig& config) : config_(config)"
  },
  {
    "label": "TriageHelper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TriageHelper(const TriageHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TriageHelper&)",
    "insertText": "operator(const TriageHelper&)"
  },
  {
    "label": "AnalyzeLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeLog(const ParsedRtcEventLog& parsed_log)"
  },
  {
    "label": "AnalyzeStreamGaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeStreamGaps(const ParsedRtcEventLog& parsed_log, PacketDirection direction)"
  },
  {
    "label": "AnalyzeTransmissionGaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeTransmissionGaps(const ParsedRtcEventLog& parsed_log, PacketDirection direction)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(FILE* file)"
  },
  {
    "label": "ProcessAlerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAlerts(std::function<void(int, float, std::string)> f)"
  },
  {
    "label": "Alert()",
    "kind": "Method",
    "detail": "Function (private : AnalyzerConfig config_ ; std::map<TriageAlertType,TriageAlert> triage_alerts_ ; void)",
    "insertText": "Alert(TriageAlertType type, float time_seconds, absl::string_view explanation)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::map<TriageAlertType,TriageAlert>::iterator it = triage_alerts_ .)",
    "insertText": "find(type)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (TriageAlert alert ; alert . type = type ; alert . first_occurrence = time_seconds ; alert . count = 1 ; alert . explanation =)",
    "insertText": "string(explanation)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (triage_alerts_ .)",
    "insertText": "insert(std::make_pair(type, alert))"
  }
]