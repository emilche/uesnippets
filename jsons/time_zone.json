[
  {
    "label": "time_zone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "time_zone"
  },
  {
    "label": "absolute_lookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "absolute_lookup"
  },
  {
    "label": "civil_lookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "civil_lookup"
  },
  {
    "label": "civil_kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "civil_kind"
  },
  {
    "label": "civil_transition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "civil_transition"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "split_seconds()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_H_ # define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_H_ # include<chrono> # include<cstdint> # include<limits> # include<string> # include<utility> # include \" absl / base / config . h \" # include \" absl / time / internal / cctz / include / cctz / civil_time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { template<D> using time_point = std::chrono::time_point<std::chrono::system_clock,D> ; using seconds = std::chrono::duration<std::int_fast64_t> ; using sys_seconds = seconds ; namespace detail { template<D> std::pair<time_point<seconds>,D>)",
    "insertText": "split_seconds(const time_point<D>& tp)"
  },
  {
    "label": "split_seconds()",
    "kind": "Method",
    "detail": "Function (std::pair<time_point<seconds>,seconds>)",
    "insertText": "split_seconds(const time_point<seconds>& tp)"
  },
  {
    "label": "time_zone()",
    "kind": "Method",
    "detail": "Function (} class time_zone { public :)",
    "insertText": "time_zone() : time_zone(nullptr)"
  },
  {
    "label": "time_zone()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "time_zone(const time_zone&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (time_zone&)",
    "insertText": "operator(const time_zone&)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "name()"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (struct absolute_lookup { civil_second cs ; int offset ; bool is_dst ; const char* abbr ; } ; absolute_lookup)",
    "insertText": "lookup(const time_point<seconds>& tp)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (template<D> absolute_lookup)",
    "insertText": "lookup(const time_point<D>& tp)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} struct civil_lookup { enum civil_kind { UNIQUE,SKIPPED,REPEATED,} kind ; time_point<seconds> pre ; time_point<seconds> trans ; time_point<seconds> post ; } ; civil_lookup)",
    "insertText": "lookup(const civil_second& cs)"
  },
  {
    "label": "next_transition()",
    "kind": "Method",
    "detail": "Function (struct civil_transition { civil_second from ; civil_second to ; } ; bool)",
    "insertText": "next_transition(const time_point<seconds>& tp, civil_transition* trans)"
  },
  {
    "label": "next_transition()",
    "kind": "Method",
    "detail": "Function (template<D> bool)",
    "insertText": "next_transition(const time_point<D>& tp, civil_transition* trans)"
  },
  {
    "label": "prev_transition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "prev_transition(const time_point<seconds>& tp, civil_transition* trans)"
  },
  {
    "label": "prev_transition()",
    "kind": "Method",
    "detail": "Function (template<D> bool)",
    "insertText": "prev_transition(const time_point<D>& tp, civil_transition* trans)"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "version()"
  },
  {
    "label": "description()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "description()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(time_zone lhs, time_zone rhs)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H h, time_zone tz)"
  },
  {
    "label": "time_zone()",
    "kind": "Method",
    "detail": "Function (} class Impl ; private :)",
    "insertText": "time_zone(const Impl* impl) : impl_(impl)"
  },
  {
    "label": "effective_impl()",
    "kind": "Method",
    "detail": "Function (} const Impl&)",
    "insertText": "effective_impl()"
  },
  {
    "label": "load_time_zone()",
    "kind": "Method",
    "detail": "Function (const Impl* impl_ ; } ; bool)",
    "insertText": "load_time_zone(const std::string& name, time_zone* tz)"
  },
  {
    "label": "utc_time_zone()",
    "kind": "Method",
    "detail": "Function (time_zone)",
    "insertText": "utc_time_zone()"
  },
  {
    "label": "fixed_time_zone()",
    "kind": "Method",
    "detail": "Function (time_zone)",
    "insertText": "fixed_time_zone(const seconds& offset)"
  },
  {
    "label": "local_time_zone()",
    "kind": "Method",
    "detail": "Function (time_zone)",
    "insertText": "local_time_zone()"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (template<D> civil_second)",
    "insertText": "convert(const time_point<D>& tp, const time_zone& tz)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (} time_point<seconds>)",
    "insertText": "convert(const civil_second& cs, const time_zone& tz)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (const time_zone::civil_lookup cl = tz .)",
    "insertText": "lookup(cs)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parse(const std::string&, const std::string&, const time_zone&, time_point<seconds>*, femtoseconds*, std::string* err = nullptr)"
  },
  {
    "label": "join_seconds()",
    "kind": "Method",
    "detail": "Function (template<Rep,std::intmax_t Denom> bool)",
    "insertText": "join_seconds(const time_point<seconds>& sec, const femtoseconds& fs, time_point<std::chrono::duration<Rep, std::ratio<1, Denom>>>* tpp)"
  },
  {
    "label": "join_seconds()",
    "kind": "Method",
    "detail": "Function (template<Rep,std::intmax_t Num> bool)",
    "insertText": "join_seconds(const time_point<seconds>& sec, const femtoseconds& fs, time_point<std::chrono::duration<Rep, std::ratio<Num, 1>>>* tpp)"
  },
  {
    "label": "join_seconds()",
    "kind": "Method",
    "detail": "Function (template<Rep> bool)",
    "insertText": "join_seconds(const time_point<seconds>& sec, const femtoseconds& fs, time_point<std::chrono::duration<Rep, std::ratio<1, 1>>>* tpp)"
  },
  {
    "label": "join_seconds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "join_seconds(const time_point<seconds>& sec, const femtoseconds&, time_point<seconds>* tpp)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} template<D> std::string)",
    "insertText": "format(const std::string& fmt, const time_point<D>& tp, const time_zone& tz)"
  },
  {
    "label": "split_seconds()",
    "kind": "Method",
    "detail": "Function (const auto p =)",
    "insertText": "split_seconds(tp)"
  },
  {
    "label": "femtoseconds()",
    "kind": "Method",
    "detail": "Function (const auto n = std::chrono::duration_cast<)",
    "insertText": "femtoseconds(p.second)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (} template<D> bool)",
    "insertText": "parse(const std::string& fmt, const std::string& input, const time_zone& tz, time_point<D>* tpp)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (time_point<seconds> sec ; detail::femtoseconds fs ; return)",
    "insertText": "parse(fmt, input, tz, &sec, &fs) && detail::join_seconds(sec, fs, tpp)"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (auto sec = std::chrono::time_point_cast<)",
    "insertText": "seconds(tp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto sub = tp - sec ;)",
    "insertText": "if(sub.count() < 0)"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (sec - =)",
    "insertText": "seconds(1)"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (} return { sec,std::chrono::duration_cast<)",
    "insertText": "D(sub)"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (using D = std::chrono::duration<Rep,std::ratio<1,Denom>> ;* tpp = std::chrono::time_point_cast<)",
    "insertText": "D(sec)"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (* tpp + = std::chrono::duration_cast<)",
    "insertText": "D(fs)"
  },
  {
    "label": "time_since_epoch()",
    "kind": "Method",
    "detail": "Function (using D = std::chrono::duration<Rep,std::ratio<Num,1>> ; auto count = sec .)",
    "insertText": "time_since_epoch().count()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (count / = Num ; } else { count / = Num ; count - = 1 ; })",
    "insertText": "if(count > (std::numeric_limits<Rep>::max)())"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (* tpp = time_point<)",
    "insertText": "D()"
  },
  {
    "label": "Rep()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "Rep(count)"
  }
]