[
  {
    "label": "FBreakpointParentItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBreakpointParentItem"
  },
  {
    "label": "FDebugLineItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugLineItem"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FTraceStackParentItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceStackParentItem"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHeaderRow"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintGeneratedClass"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FLineItemWithChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLineItemWithChildren"
  },
  {
    "label": "EDebugLineType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDebugLineType"
  },
  {
    "label": "ESearchFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESearchFlags"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FDebugLineItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateConstants . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FBreakpointParentItem ; class FDebugLineItem ; class FName ; class FTraceStackParentItem ; class ITableRow ; class SCheckBox ; class SComboButton ; class SHeaderRow ; class SSearchBox ; class SWidget ; class UBlueprint ; class UBlueprintGeneratedClass ; class UEdGraphPin ; class UObject ; struct FGeometry ; typedef TSharedPtr<class FDebugLineItem> FDebugTreeItemPtr ; class FDebugLineItem : public TSharedFromThis<FDebugLineItem> { public : class FLineItemWithChildren ; enum EDebugLineType { DLT_Message,DLT_TraceStackParent,DLT_TraceStackChild,DLT_Parent,DLT_SelfWatch,DLT_Watch,DLT_WatchChild,DLT_LatentAction,DLT_Breakpoint,DLT_BreakpointParent } ; enum ESearchFlags { SF_None = 0,SF_RootNode = 1<<0,SF_ContainerElement = 1<<1 } ; ~)",
    "insertText": "FDebugLineItem()"
  },
  {
    "label": "GenerateNameWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GenerateNameWidget(TSharedPtr<FString> InSearchString)"
  },
  {
    "label": "GenerateValueWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateValueWidget(TSharedPtr<FString> InSearchString)"
  },
  {
    "label": "MakeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeMenu(class FMenuBuilder& MenuBuilder, bool bInDebuggerTab)"
  },
  {
    "label": "ExtendContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendContextMenu(class FMenuBuilder& MenuBuilder, bool bInDebuggerTab)"
  },
  {
    "label": "GatherChildrenBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherChildrenBase(TArray<FDebugTreeItemPtr>& OutChildren, const FString& InSearchString, bool bRespectSearch = true)"
  },
  {
    "label": "HasChildren()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChildren()"
  },
  {
    "label": "CanHaveChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveChildren()"
  },
  {
    "label": "GetValueIcon()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetValueIcon()"
  },
  {
    "label": "GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHighlightText(const TSharedPtr<FString> InSearchString)"
  },
  {
    "label": "GetBlueprintForObject()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetBlueprintForObject(UObject* ParentObject)"
  },
  {
    "label": "GetClassForObject()",
    "kind": "Method",
    "detail": "Function (UBlueprintGeneratedClass*)",
    "insertText": "GetClassForObject(UObject* ParentObject)"
  },
  {
    "label": "IsDebugLineTypeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugLineTypeActive(EDebugLineType Type)"
  },
  {
    "label": "OnDebugLineTypeActiveChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDebugLineTypeActiveChanged(ECheckBoxState CheckState, EDebugLineType Type)"
  },
  {
    "label": "SetBreakpointParentItemBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBreakpointParentItemBlueprint(FDebugTreeItemPtr InBreakpointParentItem, TWeakObjectPtr<UBlueprint> InBlueprint)"
  },
  {
    "label": "UpdateSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSearch(const FString& InSearchString, ESearchFlags SearchFlags)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "DoParentsMatchSearch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoParentsMatchSearch()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescription()"
  },
  {
    "label": "FDebugLineItem()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDebugLineItem(EDebugLineType InType) : Type(InType)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} FDebugLineItem*)",
    "insertText": "Duplicate()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compare(const FDebugLineItem* Other)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "UpdateData()",
    "kind": "Method",
    "detail": "Function ([ [ maybe_unused ] ] void)",
    "insertText": "UpdateData(const FDebugLineItem& NewerData)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "HasName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasName()"
  },
  {
    "label": "HasValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValue()"
  },
  {
    "label": "CopyNameToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyNameToClipboard()"
  },
  {
    "label": "CopyValueToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValueToClipboard()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (protected : EDebugLineType Type ; uint16 ActiveTypeBitset ; bool bVisible = false ; bool bParentsMatchSearch = false ; } ; class SKismetDebugTreeView : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SKismetDebugTreeView) : _SelectionMode(ESelectionMode::Single) , _OnExpansionChanged() , _InDebuggerTab(false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(ESelectionMode::Type, SelectionMode) SLATE_EVENT(STreeView<FDebugTreeItemPtr>::FOnExpansionChanged, OnExpansionChanged) SLATE_ARGUMENT(bool, InDebuggerTab) SLATE_ARGUMENT(TSharedPtr<SHeaderRow>, HeaderRow) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "AddTreeItemUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTreeItemUnique(const FDebugTreeItemPtr& Item)"
  },
  {
    "label": "RemoveTreeItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTreeItem(const FDebugTreeItemPtr& Item)"
  },
  {
    "label": "ClearTreeItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTreeItems()"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const FText& InSearchText)"
  },
  {
    "label": "RequestUpdateFilteredItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateFilteredItems()"
  },
  {
    "label": "GetRootTreeItems()",
    "kind": "Method",
    "detail": "Function (const TArray<FDebugTreeItemPtr>&)",
    "insertText": "GetRootTreeItems()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedItems(TArray<FDebugTreeItemPtr>& OutItems)"
  },
  {
    "label": "ClearExpandedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExpandedItems()"
  },
  {
    "label": "IsScrolling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrolling()"
  },
  {
    "label": "SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansion(FDebugTreeItemPtr InItem, bool bInShouldExpandItem)"
  },
  {
    "label": "UpdateFilteredItems()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateFilteredItems()"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(FDebugTreeItemPtr InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildren(FDebugTreeItemPtr InParent, TArray<FDebugTreeItemPtr>& OutChildren)"
  },
  {
    "label": "OnMakeContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnMakeContextMenu()"
  },
  {
    "label": "MakeTraceStackParentItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STreeView<FDebugTreeItemPtr>> TreeView ; TArray<FDebugTreeItemPtr> FilteredTreeRoots ; TArray<FDebugTreeItemPtr> RootTreeItems ; TSharedPtr<FString> SearchString ; bool bFilteredItemsDirty ; FDebugTreeItemPtr SearchMessageItem ; bool bInDebuggerTab ; public : FDebugTreeItemPtr)",
    "insertText": "MakeTraceStackParentItem()"
  },
  {
    "label": "MakeBreakpointParentItem()",
    "kind": "Method",
    "detail": "Function (FDebugTreeItemPtr)",
    "insertText": "MakeBreakpointParentItem(TWeakObjectPtr<UBlueprint> InBlueprint)"
  },
  {
    "label": "MakeMessageItem()",
    "kind": "Method",
    "detail": "Function (FDebugTreeItemPtr)",
    "insertText": "MakeMessageItem(const FString& InMessage)"
  },
  {
    "label": "MakeParentItem()",
    "kind": "Method",
    "detail": "Function (FDebugTreeItemPtr)",
    "insertText": "MakeParentItem(UObject* InObject)"
  },
  {
    "label": "MakeWatchLineItem()",
    "kind": "Method",
    "detail": "Function (FDebugTreeItemPtr)",
    "insertText": "MakeWatchLineItem(const UEdGraphPin* InPinRef, UObject* InDebugObject)"
  }
]