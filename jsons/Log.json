[
  {
    "label": "logger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "logger"
  },
  {
    "label": "instance()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef LOG_H_SPSC31OG # define LOG_H_SPSC31OG # ifdef RPCLIB_ENABLE_LOGGING # include \" format . h \" # include<chrono> # include<cstdlib> # include<iomanip> # include<mutex> # include<sstream> # include<inttypes . h> # include<math . h> # include<stdio . h> # include<time . h> # ifdef _MSC_VER # include<Windows . h> # endif namespace rpc { namespace detail { class logger { public : logger&)",
    "insertText": "instance()"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (logger inst ; return inst ; } template<. . . Args> void)",
    "insertText": "trace(const char *channel, const char *file, const char *func, std::size_t line, const char *msg, Args... args)"
  },
  {
    "label": "basic_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "basic_log(\"TRACE\", channel, RPCLIB_FMT::format(\"{} ({}:{})\", RPCLIB_FMT::format(msg, args...), file, line))"
  },
  {
    "label": "debug()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "debug(const char *channel, const char *file, const char *func, std::size_t line, const char *msg, Args... args)"
  },
  {
    "label": "basic_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "basic_log(\"DEBUG\", channel, RPCLIB_FMT::format(\"{} ({}:{})\", RPCLIB_FMT::format(msg, args...), file, line))"
  },
  {
    "label": "warn()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "warn(const char *channel, const char *msg, Args... args)"
  },
  {
    "label": "basic_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "basic_log(\"WARN\", channel, RPCLIB_FMT::format(msg, args...))"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "error(const char *channel, const char *msg, Args... args)"
  },
  {
    "label": "basic_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "basic_log(\"ERROR\", channel, RPCLIB_FMT::format(msg, args...))"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "info(const char *channel, const char *msg, Args... args)"
  },
  {
    "label": "basic_log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "basic_log(\"INFO\", channel, RPCLIB_FMT::format(msg, args...))"
  },
  {
    "label": "logger()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "logger()"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (} # ifdef _MSC_VER std::string)",
    "insertText": "now()"
  },
  {
    "label": "GetSystemTime()",
    "kind": "Method",
    "detail": "Function (std::stringstream ss ; SYSTEMTIME t ;)",
    "insertText": "GetSystemTime(&t)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (ss<<)",
    "insertText": "format(\"{}-{}-{} {}:{}:{}.{:03}\", t.wYear, t.wMonth, t.wDay, t.wHour, t.wMinute, t.wSecond, t.wMilliseconds)"
  },
  {
    "label": "clock_gettime()",
    "kind": "Method",
    "detail": "Function (std::stringstream ss ; timespec now_t = { } ;)",
    "insertText": "clock_gettime(CLOCK_REALTIME, &now_t)"
  },
  {
    "label": "put_time()",
    "kind": "Method",
    "detail": "Function (ss<<)",
    "insertText": "put_time(std::localtime(reinterpret_cast<time_t *>(&now_t.tv_sec)), \"%F %T\") << RPCLIB_FMT::format( \".{:03}\", round(static_cast<double>(now_t.tv_nsec) / 1.0e6))"
  },
  {
    "label": "basic_log()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "basic_log(const char *severity, const char *channel, std::string const &msg)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (using RPCLIB_FMT::arg ; std::lock_guard<std::mutex>)",
    "insertText": "lock(mut_print_)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(\"{time:16} {severity:6} {channel:12} {msg:40}\\n\", arg(\"severity\", severity), arg(\"channel\", channel), arg(\"time\", now()), arg(\"msg\", msg))"
  },
  {
    "label": "RPCLIB_CREATE_LOG_CHANNEL()",
    "kind": "Method",
    "detail": "Function (} private : std::mutex mut_print_ ; } ; } } # ifdef _MSC_VER # define)",
    "insertText": "RPCLIB_CREATE_LOG_CHANNEL(Name)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__GNUC__) #define RPCLIB_CREATE_LOG_CHANNEL(Name) \\ _Pragma(\"GCC diagnostic push\") \\ _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")"
  },
  {
    "label": "_Pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_Pragma(\"GCC diagnostic pop\") #elif defined(__clang__) _Pragma(\"clang diagnostic push\") \\ _Pragma(\"clang diagnostic ignored \\\"-Wunused-variable\\\"\")"
  }
]