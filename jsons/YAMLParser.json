[
  {
    "label": "here",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "here"
  },
  {
    "label": "MemoryBufferRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBufferRef"
  },
  {
    "label": "SourceMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SourceMgr"
  },
  {
    "label": "Twine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Twine"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "document_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "document_iterator"
  },
  {
    "label": "Document",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Document"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "Scanner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scanner"
  },
  {
    "label": "Token",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Token"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stream"
  },
  {
    "label": "Document",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Document"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "NodeKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NodeKind"
  },
  {
    "label": "NullNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NullNode"
  },
  {
    "label": "ScalarNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarNode"
  },
  {
    "label": "BlockScalarNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockScalarNode"
  },
  {
    "label": "KeyValueNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyValueNode"
  },
  {
    "label": "BaseT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseT"
  },
  {
    "label": "ValueT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueT"
  },
  {
    "label": "basic_collection_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_collection_iterator"
  },
  {
    "label": "CollectionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollectionType"
  },
  {
    "label": "CollectionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollectionType"
  },
  {
    "label": "MappingNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappingNode"
  },
  {
    "label": "MappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MappingType"
  },
  {
    "label": "basic_collection_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_collection_iterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SequenceNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceNode"
  },
  {
    "label": "SequenceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SequenceType"
  },
  {
    "label": "basic_collection_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_collection_iterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AliasNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasNode"
  },
  {
    "label": "Document",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Document"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "document_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "document_iterator"
  },
  {
    "label": "document_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "document_iterator"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (yaml::Stream)",
    "insertText": "stream(input, sm)"
  },
  {
    "label": "dumpTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dumpTokens(StringRef Input, raw_ostream &)"
  },
  {
    "label": "scanTokens()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "scanTokens(StringRef Input)"
  },
  {
    "label": "escape()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "escape(StringRef Input)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (document_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (document_iterator)",
    "insertText": "end()"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skip()"
  },
  {
    "label": "failed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "failed()"
  },
  {
    "label": "printError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printError(Node *N, const Twine &Msg)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (Token)",
    "insertText": "getNext()"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (CollectionType::iterator)",
    "insertText": "ret(&C)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increment()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increment()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator()"
  },
  {
    "label": "skip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "skip()"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (Token)",
    "insertText": "getNext()"
  },
  {
    "label": "parseDirectives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "parseDirectives()"
  },
  {
    "label": "parseYAMLDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseYAMLDirective()"
  },
  {
    "label": "parseTAGDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseTAGDirective()"
  },
  {
    "label": "expectToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "expectToken(int TK)"
  }
]