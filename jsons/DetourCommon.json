[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "dtRotation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "dtRotation"
  },
  {
    "label": "dtSwap()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURCOMMON_H # define DETOURCOMMON_H # include \" CoreMinimal . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" HAL / PlatformMath . h \" # define DT_STATS STATS template<class T> void)",
    "insertText": "dtSwap(T& a, T& b)"
  },
  {
    "label": "dtMin()",
    "kind": "Method",
    "detail": "Function (T t = a ; a = b ; b = t ; } template<class T> T)",
    "insertText": "dtMin(T a, T b)"
  },
  {
    "label": "dtMax()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "dtMax(T a, T b)"
  },
  {
    "label": "dtAbs()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "dtAbs(T a)"
  },
  {
    "label": "dtClamp()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "dtClamp(dtReal v, dtReal mn, dtReal mx)"
  },
  {
    "label": "dtFloor()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtFloor(float x)"
  },
  {
    "label": "dtFloor()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtFloor(double x)"
  },
  {
    "label": "dtCeil()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtCeil(float x)"
  },
  {
    "label": "dtCeil()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtCeil(double x)"
  },
  {
    "label": "dtSin()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtSin(float x)"
  },
  {
    "label": "dtSin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtSin(double x)"
  },
  {
    "label": "dtCos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtCos(float x)"
  },
  {
    "label": "dtCos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtCos(double x)"
  },
  {
    "label": "dtAtan2()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtAtan2(float x, float y)"
  },
  {
    "label": "dtAtan2()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtAtan2(double x, double y)"
  },
  {
    "label": "dtSqrt()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtSqrt(float x)"
  },
  {
    "label": "dtSqrt()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtSqrt(double x)"
  },
  {
    "label": "dtfMod()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtfMod(float x, float y)"
  },
  {
    "label": "dtfMod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "dtfMod(double x, double y)"
  },
  {
    "label": "dtLerp()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "dtLerp(float a, float b, float t)"
  },
  {
    "label": "dtVcross()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtVcross(dtReal* dest, const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtVdot()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 1 ]* v2 [ 2 ] - v1 [ 2 ]* v2 [ 1 ] ; dest [ 1 ] = v1 [ 2 ]* v2 [ 0 ] - v1 [ 0 ]* v2 [ 2 ] ; dest [ 2 ] = v1 [ 0 ]* v2 [ 1 ] - v1 [ 1 ]* v2 [ 0 ] ; } dtReal)",
    "insertText": "dtVdot(const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtVlerp()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 0 ] + v2 [ 0 ]* s ; dest [ 1 ] = v1 [ 1 ] + v2 [ 1 ]* s ; dest [ 2 ] = v1 [ 2 ] + v2 [ 2 ]* s ; } void)",
    "insertText": "dtVlerp(dtReal* dest, const dtReal* v1, const dtReal* v2, const dtReal t)"
  },
  {
    "label": "v1()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] =)",
    "insertText": "v1(v2[0]-v1[0])"
  },
  {
    "label": "v1()",
    "kind": "Method",
    "detail": "Function (dest [ 1 ] =)",
    "insertText": "v1(v2[1]-v1[1])"
  },
  {
    "label": "v1()",
    "kind": "Method",
    "detail": "Function (dest [ 2 ] =)",
    "insertText": "v1(v2[2]-v1[2])"
  },
  {
    "label": "dtVadd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtVadd(dtReal* dest, const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtVsub()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 0 ] + v2 [ 0 ] ; dest [ 1 ] = v1 [ 1 ] + v2 [ 1 ] ; dest [ 2 ] = v1 [ 2 ] + v2 [ 2 ] ; } void)",
    "insertText": "dtVsub(dtReal* dest, const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtVscale()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 0 ] - v2 [ 0 ] ; dest [ 1 ] = v1 [ 1 ] - v2 [ 1 ] ; dest [ 2 ] = v1 [ 2 ] - v2 [ 2 ] ; } void)",
    "insertText": "dtVscale(dtReal* dest, const dtReal* v, const dtReal t)"
  },
  {
    "label": "dtVmin()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v [ 0 ]* t ; dest [ 1 ] = v [ 1 ]* t ; dest [ 2 ] = v [ 2 ]* t ; } void)",
    "insertText": "dtVmin(dtReal* mn, const dtReal* v)"
  },
  {
    "label": "dtMin()",
    "kind": "Method",
    "detail": "Function (mn [ 0 ] =)",
    "insertText": "dtMin(mn[0], v[0])"
  },
  {
    "label": "dtMin()",
    "kind": "Method",
    "detail": "Function (mn [ 1 ] =)",
    "insertText": "dtMin(mn[1], v[1])"
  },
  {
    "label": "dtMin()",
    "kind": "Method",
    "detail": "Function (mn [ 2 ] =)",
    "insertText": "dtMin(mn[2], v[2])"
  },
  {
    "label": "dtVmax()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtVmax(dtReal* mx, const dtReal* v)"
  },
  {
    "label": "dtMax()",
    "kind": "Method",
    "detail": "Function (mx [ 0 ] =)",
    "insertText": "dtMax(mx[0], v[0])"
  },
  {
    "label": "dtMax()",
    "kind": "Method",
    "detail": "Function (mx [ 1 ] =)",
    "insertText": "dtMax(mx[1], v[1])"
  },
  {
    "label": "dtMax()",
    "kind": "Method",
    "detail": "Function (mx [ 2 ] =)",
    "insertText": "dtMax(mx[2], v[2])"
  },
  {
    "label": "dtVset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtVset(dtReal* dest, const dtReal x, const dtReal y, const dtReal z)"
  },
  {
    "label": "dtVcopy()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = x ; dest [ 1 ] = y ; dest [ 2 ] = z ; } void)",
    "insertText": "dtVcopy(dtReal* dest, const dtReal* a)"
  },
  {
    "label": "dtVlen()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = a [ 0 ] ; dest [ 1 ] = a [ 1 ] ; dest [ 2 ] = a [ 2 ] ; } dtReal)",
    "insertText": "dtVlen(const dtReal* v)"
  },
  {
    "label": "dtVlenSqr()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "dtVlenSqr(const dtReal* v)"
  },
  {
    "label": "dtSqrt()",
    "kind": "Method",
    "detail": "Function (const dtReal dx = v2 [ 0 ] - v1 [ 0 ] ; const dtReal dy = v2 [ 1 ] - v1 [ 1 ] ; const dtReal dz = v2 [ 2 ] - v1 [ 2 ] ; return)",
    "insertText": "dtSqrt(dx*dx + dy*dy + dz*dz)"
  },
  {
    "label": "dtVdistSqr()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "dtVdistSqr(const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtVdist2D()",
    "kind": "Method",
    "detail": "Function (const dtReal dx = v2 [ 0 ] - v1 [ 0 ] ; const dtReal dy = v2 [ 1 ] - v1 [ 1 ] ; const dtReal dz = v2 [ 2 ] - v1 [ 2 ] ; return dx* dx + dy* dy + dz* dz ; } dtReal)",
    "insertText": "dtVdist2D(const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtSqrt()",
    "kind": "Method",
    "detail": "Function (const dtReal dx = v2 [ 0 ] - v1 [ 0 ] ; const dtReal dz = v2 [ 2 ] - v1 [ 2 ] ; return)",
    "insertText": "dtSqrt(dx*dx + dz*dz)"
  },
  {
    "label": "dtVdist2DSqr()",
    "kind": "Method",
    "detail": "Function (} dtReal)",
    "insertText": "dtVdist2DSqr(const dtReal* v1, const dtReal* v2)"
  },
  {
    "label": "dtVnormalize()",
    "kind": "Method",
    "detail": "Function (const dtReal dx = v2 [ 0 ] - v1 [ 0 ] ; const dtReal dz = v2 [ 2 ] - v1 [ 2 ] ; return dx* dx + dz* dz ; } void)",
    "insertText": "dtVnormalize(dtReal* v)"
  },
  {
    "label": "dtSqrt()",
    "kind": "Method",
    "detail": "Function (dtReal d = 1 . 0 f /)",
    "insertText": "dtSqrt(dtSqr(v[0]) + dtSqr(v[1]) + dtSqr(v[2]))"
  },
  {
    "label": "dtVisEqual()",
    "kind": "Method",
    "detail": "Function (v [ 0 ]* = d ; v [ 1 ]* = d ; v [ 2 ]* = d ; } bool)",
    "insertText": "dtVisEqual(const unsigned short* a, const unsigned short* b)"
  },
  {
    "label": "dtSqr()",
    "kind": "Method",
    "detail": "Function (const dtReal thr =)",
    "insertText": "dtSqr(dtReal(1.)/16384.0f)"
  },
  {
    "label": "dtVdistSqr()",
    "kind": "Method",
    "detail": "Function (const dtReal d =)",
    "insertText": "dtVdistSqr(p0, p1)"
  },
  {
    "label": "dtOverlapQuantBounds()",
    "kind": "Method",
    "detail": "Function (const dtReal abx = b [ 0 ] - a [ 0 ] ; const dtReal abz = b [ 2 ] - a [ 2 ] ; const dtReal acx = c [ 0 ] - a [ 0 ] ; const dtReal acz = c [ 2 ] - a [ 2 ] ; return acx* abz - abx* acz ; } bool)",
    "insertText": "dtOverlapQuantBounds(const unsigned short amin[3], const unsigned short amax[3], const unsigned short bmin[3], const unsigned short bmax[3])"
  },
  {
    "label": "overlap()",
    "kind": "Method",
    "detail": "Function (bool overlap = true ;)",
    "insertText": "overlap(amin[0] > bmax[0] || amax[0] < bmin[0])"
  },
  {
    "label": "overlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "overlap(amin[1] > bmax[1] || amax[1] < bmin[1])"
  },
  {
    "label": "overlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "overlap(amin[2] > bmax[2] || amax[2] < bmin[2])"
  },
  {
    "label": "dtClosestHeightPointTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtClosestHeightPointTriangle(const dtReal* p, const dtReal* a, const dtReal* b, const dtReal* c, dtReal& h)"
  },
  {
    "label": "dtIntersectSegmentPoly2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtIntersectSegmentPoly2D(const dtReal* p0, const dtReal* p1, const dtReal* verts, int nverts, dtReal& tmin, dtReal& tmax, int& segMin, int& segMax)"
  },
  {
    "label": "dtIntersectSegSeg2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtIntersectSegSeg2D(const dtReal* ap, const dtReal* aq, const dtReal* bp, const dtReal* bq, dtReal& s, dtReal& t)"
  },
  {
    "label": "dtPointInPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtPointInPolygon(const dtReal* pt, const dtReal* verts, const int nverts)"
  },
  {
    "label": "dtDistancePtPolyEdgesSqr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtDistancePtPolyEdgesSqr(const dtReal* pt, const dtReal* verts, const int nverts, dtReal* ed, dtReal* et)"
  },
  {
    "label": "dtDistancePtSegSqr2D()",
    "kind": "Method",
    "detail": "Function (dtReal)",
    "insertText": "dtDistancePtSegSqr2D(const dtReal* pt, const dtReal* p, const dtReal* q, dtReal& t)"
  },
  {
    "label": "dtDistancePtSegSqr()",
    "kind": "Method",
    "detail": "Function (dtReal)",
    "insertText": "dtDistancePtSegSqr(const dtReal* pt, const dtReal* p, const dtReal* q)"
  },
  {
    "label": "dtCalcPolyCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtCalcPolyCenter(dtReal* tc, const unsigned short* idx, int nidx, const dtReal* verts)"
  },
  {
    "label": "dtOverlapPolyPoly2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dtOverlapPolyPoly2D(const dtReal* polya, const int npolya, const dtReal* polyb, const int npolyb)"
  },
  {
    "label": "dtNextPow2()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "dtNextPow2(unsigned int v)"
  },
  {
    "label": "dtIlog2()",
    "kind": "Method",
    "detail": "Function (v - - ; v | = v>> 1 ; v | = v>> 2 ; v | = v>> 4 ; v | = v>> 8 ; v | = v>> 1 6 ; v + + ; return v ; } unsigned int)",
    "insertText": "dtIlog2(unsigned int v)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (unsigned int r ; unsigned int shift ;)",
    "insertText": "r(v > 0xffff)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (v>> = r ;)",
    "insertText": "shift(v > 0xff)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (v>> = shift ; r | = shift ;)",
    "insertText": "shift(v > 0xf)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (v>> = shift ; r | = shift ;)",
    "insertText": "shift(v > 0x3)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (v>> = shift ; r | = shift ;)",
    "insertText": "r(v >> 1)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if DT_LARGE_WORLD_COORDINATES_DISABLED)",
    "insertText": "return(x + 3)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(x + 7)"
  },
  {
    "label": "dtOppositeTile()",
    "kind": "Method",
    "detail": "Function (# endif } int)",
    "insertText": "dtOppositeTile(int side)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapByte(unsigned char* a, unsigned char* b)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (unsigned char tmp =* a ;* a =* b ;* b = tmp ; } void)",
    "insertText": "dtSwapEndian(unsigned short* v)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "x(unsigned char*)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x+0, x+1)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(short* v)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(unsigned int* v)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x+0, x+3)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x+1, x+2)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(int* v)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(unsigned long long int* v)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x + 0, x + 7)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x + 1, x + 6)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x + 2, x + 5)"
  },
  {
    "label": "dtSwapByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtSwapByte(x + 3, x + 4)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(long long int* v)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(float* v)"
  },
  {
    "label": "dtSwapEndian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtSwapEndian(double* v)"
  },
  {
    "label": "dtRandomPointInConvexPoly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dtRandomPointInConvexPoly(const dtReal* pts, const int npts, dtReal* areas, const dtReal s, const dtReal t, dtReal* out)"
  },
  {
    "label": "dtSelectRotation()",
    "kind": "Method",
    "detail": "Function (enum dtRotation { DT_ROTATE_0,DT_ROTATE_90,DT_ROTATE_180,DT_ROTATE_270 } ; dtRotation)",
    "insertText": "dtSelectRotation(dtReal rotationDeg)"
  },
  {
    "label": "dtVRot90()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtVRot90(dtReal* dest, const dtReal* v, const dtRotation rot)"
  },
  {
    "label": "dtVRot90()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtVRot90(unsigned short* dest, const unsigned short* v, const dtRotation rot)"
  },
  {
    "label": "dtRotate90()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtRotate90(dtReal* dest, const dtReal* v, const dtReal* center, const dtRotation rot)"
  },
  {
    "label": "dtRotate90()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtRotate90(unsigned short* dest, const unsigned short* v, const unsigned short* center, const dtRotation rot)"
  }
]