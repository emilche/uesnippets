[
  {
    "label": "IConsoleCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IConsoleCommand"
  },
  {
    "label": "IConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleVariable"
  },
  {
    "label": "ISettingsSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISettingsSection"
  },
  {
    "label": "ULiveCodingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULiveCodingSettings"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FReload",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReload"
  },
  {
    "label": "FNullReload",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullReload"
  },
  {
    "label": "FLiveCodingModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLiveCodingModule"
  },
  {
    "label": "ModuleChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ModuleChange"
  },
  {
    "label": "ReservePagesGlobalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReservePagesGlobalData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLiveCodingModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ILiveCodingModule . h \" # include \" LiveCodingSettings . h \" # include \" Delegates / Delegate . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SharedPointer . h \" # include \" Internationalization / Text . h \" # include \" Async / TaskGraphFwd . h \" # include<atomic> struct IConsoleCommand ; class IConsoleVariable ; class ISettingsSection ; class ULiveCodingSettings ; class FOutputDevice ; # if WITH_EDITOR class FReload ; # else class FNullReload ; # endif class FLiveCodingModule final : public ILiveCodingModule { public :)",
    "insertText": "FLiveCodingModule()"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "EnableByDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableByDefault(bool bInEnabled)"
  },
  {
    "label": "IsEnabledByDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledByDefault()"
  },
  {
    "label": "EnableForSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableForSession(bool bInEnabled)"
  },
  {
    "label": "IsEnabledForSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForSession()"
  },
  {
    "label": "GetEnableErrorText()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetEnableErrorText()"
  },
  {
    "label": "AutomaticallyCompileNewClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AutomaticallyCompileNewClasses()"
  },
  {
    "label": "CanEnableForSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnableForSession()"
  },
  {
    "label": "HasStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStarted()"
  },
  {
    "label": "ShowConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowConsole()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compile(ELiveCodingCompileFlags CompileFlags, ELiveCodingCompileResult* Result)"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "GetOnPatchCompleteDelegate()",
    "kind": "Method",
    "detail": "Function (FOnPatchCompleteDelegate&)",
    "insertText": "GetOnPatchCompleteDelegate()"
  },
  {
    "label": "BeginReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReload()"
  },
  {
    "label": "AttemptSyncLivePatching()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AttemptSyncLivePatching()"
  },
  {
    "label": "OnDllNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDllNotification(unsigned int Reason, const void* DataPtr, void* Context)"
  },
  {
    "label": "OnDllLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDllLoaded(const FString& FullPath)"
  },
  {
    "label": "OnDllUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDllUnloaded(const FString& FullPath)"
  },
  {
    "label": "IsUEDll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUEDll(const FString& FullPath)"
  },
  {
    "label": "IsPatchDll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPatchDll(const FString& FullPath)"
  },
  {
    "label": "HideConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideConsole()"
  },
  {
    "label": "EnableConsoleCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableConsoleCommand(FOutputDevice& out)"
  },
  {
    "label": "StartLiveCodingAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartLiveCodingAsync(ELiveCodingStartupMode StartupMode)"
  },
  {
    "label": "SetupConsolePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupConsolePath()"
  },
  {
    "label": "StartLiveCoding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartLiveCoding(ELiveCodingStartupMode StartupMode)"
  },
  {
    "label": "OnModulesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModulesChanged(FName ModuleName, EModuleChangeReason Reason)"
  },
  {
    "label": "UpdateModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModules(bool bAllowStarting)"
  },
  {
    "label": "ShouldPreloadModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPreloadModule(const TSet<FName>& PreloadedFileNames, const FString& FullFilePath)"
  },
  {
    "label": "IsReinstancingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReinstancingEnabled()"
  },
  {
    "label": "WaitForStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForStartup()"
  },
  {
    "label": "HasStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStarted(bool bAllowStarting)"
  },
  {
    "label": "ShowConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowConsole(bool bAllowStarting)"
  },
  {
    "label": "SetBuildArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBuildArguments()"
  },
  {
    "label": "GetReservePagesGlobalData()",
    "kind": "Method",
    "detail": "Function (struct ModuleChange { FName FullName ; bool bLoaded ; } ; struct ReservePagesGlobalData { FCriticalSection ModuleChangeCs ; TArray<ModuleChange> ModuleChanges ; TArray<uintptr_t> ReservedPages ; int LastReservePagesModuleCount = 0 ; FGraphEventRef ReservePagesTaskRef ; } ; ReservePagesGlobalData&)",
    "insertText": "GetReservePagesGlobalData()"
  },
  {
    "label": "ReservePagesTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReservePagesTask()"
  },
  {
    "label": "ShowNotification()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ShowNotification(bool Success, const FText& Title, const FText* SubText)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# endif private : enum class EState { NotRunning,Starting,Running,RunningAndEnabled,} ; ULiveCodingSettings* Settings ; TSharedPtr<ISettingsSection> SettingsSection ; bool bSettingsEnabledLastTick = false ; bool bEnableReinstancingLastTick = false ; bool bBuildArgumentsSet = false ; std::atomic<EState> State = EState::NotRunning ; std::atomic<bool> bUpdateModulesInTick = false ; bool bHasReinstancingOccurred = false ; bool bHasPatchBeenLoaded = false ; ELiveCodingCompileResult LastResults = ELiveCodingCompileResult::Success ; TSet<FName> ConfiguredModules ; TArray<void*> LppPendingTokens ; void* CallbackCookie = nullptr ; FString LastKnownTargetName =)",
    "insertText": "FString()"
  }
]