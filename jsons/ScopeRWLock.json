[
  {
    "label": "FReadScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadScopeLock"
  },
  {
    "label": "FWriteScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteScopeLock"
  },
  {
    "label": "FRWScopeLockType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FRWScopeLockType"
  },
  {
    "label": "FRWScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRWScopeLock"
  },
  {
    "label": "FReadScopeLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / CriticalSection . h \" # include \" AutoRTFM / AutoRTFM . h \" # include \" Templates / Function . h \" class FReadScopeLock { public : UE_NODISCARD_CTOR)",
    "insertText": "FReadScopeLock(FRWLock& InLock) : Lock(InLock)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN { Lock .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PushOnAbortHandler(this, [this](){ this->Lock.ReadUnlock(); })"
  },
  {
    "label": "FReadScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FReadScopeLock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN { Lock .)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "PopOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PopOnAbortHandler(this)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} private : FRWLock& Lock ;)",
    "insertText": "UE_NONCOPYABLE(FReadScopeLock)"
  },
  {
    "label": "FWriteScopeLock()",
    "kind": "Method",
    "detail": "Function (} ; class FWriteScopeLock { public : UE_NODISCARD_CTOR)",
    "insertText": "FWriteScopeLock(FRWLock& InLock) : Lock(InLock)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "FWriteScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FWriteScopeLock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} private : FRWLock& Lock ;)",
    "insertText": "UE_NONCOPYABLE(FWriteScopeLock)"
  },
  {
    "label": "FRWScopeLock()",
    "kind": "Method",
    "detail": "Function (} ; enum FRWScopeLockType { SLT_ReadOnly = 0,SLT_Write,} ; class FRWScopeLock { public : UE_NODISCARD_CTOR)",
    "insertText": "FRWScopeLock(FRWLock& InLockObject,FRWScopeLockType InLockType) : LockObject(InLockObject) , LockType(InLockType)"
  },
  {
    "label": "ReleaseReadOnlyLockAndAcquireWriteLock_USE_WITH_CAUTION()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleaseReadOnlyLockAndAcquireWriteLock_USE_WITH_CAUTION()"
  },
  {
    "label": "FRWScopeLock()",
    "kind": "Method",
    "detail": "Function (LockType = SLT_Write ; } } ~)",
    "insertText": "FRWScopeLock()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "UE_NONCOPYABLE(FRWScopeLock)"
  }
]