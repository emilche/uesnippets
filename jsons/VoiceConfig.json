[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "FVoiceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoiceSettings"
  },
  {
    "label": "UVOIPTalker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVOIPTalker"
  },
  {
    "label": "UVOIPStatics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVOIPStatics"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / Engine . h \" # include \" Misc / ConfigCacheIni . h \" # include \" DSP / EnvelopeFollower . h \" # include \" Sound / AudioSettings . h \" # include \" Sound / SoundAttenuation . h \" # include \" GameFramework / PlayerState . h \" # include \" Components / SynthComponent . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" VoiceConfig . generated . h \" # if PLATFORM_WINDOWS # define USE_DEFAULT_VOICE_SAMPLE_RATE 0 # else # define USE_DEFAULT_VOICE_SAMPLE_RATE 1 # endif # define VOICE_CONFIG_LEAK_WARNING_THRESHOLD 4 8 enum class EAudioEncodeHint : uint8 { VoiceEncode_Voice,VoiceEncode_Audio } ; namespace MicSilenceDetectionConfig { const Audio::EPeakMode::Type LevelDetectionMode = Audio::EPeakMode::Type::Peak ; const bool IsAnalog = false ; const int32 PacketBufferSlack = 2 0 ; } class USoundAttenuation ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Audio|Voice|Spatialization\")"
  },
  {
    "label": "FVoiceSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoiceSettings() : ComponentToAttachTo(nullptr) , AttenuationSettings(nullptr) , SourceEffectChain(nullptr)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(Blueprintable, BlueprintType, ClassGroup = VOIP, meta = (BlueprintSpawnableComponent, ShortTooltip = \"A VOIPTalker is a component that can be used to control the audio characteristics of a player's voice.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UVOIPTalker(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "UVOIPTalker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UVOIPTalker()"
  },
  {
    "label": "OnTalkingBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTalkingBegin(UAudioComponent* AudioComponent)"
  },
  {
    "label": "BPOnTalkingBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BPOnTalkingBegin(AudioComponent)"
  },
  {
    "label": "OnTalkingEnd()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnTalkingEnd()"
  },
  {
    "label": "BPOnTalkingEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BPOnTalkingEnd()"
  },
  {
    "label": "OnAudioComponentEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnAudioComponentEnvelopeValue(const UAudioComponent* InAudioComponent, const float EnvelopeValue)"
  },
  {
    "label": "OnComponentDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentDestroyed(bool bDestroyingHierarchy)"
  },
  {
    "label": "UnregisterFromVoiceTalkerMap()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UnregisterFromVoiceTalkerMap()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : FUniqueNetIdWrapper PlayerId ; float CachedVolumeLevel ; uint8 bIsRegistered : 1 ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static ENGINE_API int32 GetVoiceSampleRate()"
  },
  {
    "label": "GetVoiceNumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVoiceNumChannels()"
  },
  {
    "label": "GetMaxVoiceDataSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxVoiceDataSize()"
  },
  {
    "label": "GetMaxUncompressedVoiceDataSizePerChannel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxUncompressedVoiceDataSizePerChannel()"
  },
  {
    "label": "GetMaxCompressedVoiceDataSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxCompressedVoiceDataSize()"
  },
  {
    "label": "GetRemoteTalkerTimeoutDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRemoteTalkerTimeoutDuration()"
  },
  {
    "label": "GetAudioEncodingHint()",
    "kind": "Method",
    "detail": "Function (EAudioEncodeHint)",
    "insertText": "GetAudioEncodingHint()"
  },
  {
    "label": "GetBufferingDelay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBufferingDelay()"
  },
  {
    "label": "GetVoiceNoiseGateLevel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVoiceNoiseGateLevel()"
  },
  {
    "label": "GetNumBufferedPackets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBufferedPackets()"
  },
  {
    "label": "GetPlayerStateFromUniqueNetId()",
    "kind": "Method",
    "detail": "Function (APlayerState*)",
    "insertText": "GetPlayerStateFromUniqueNetId(UWorld* InWorld, const FUniqueNetIdWrapper& InPlayerId)"
  },
  {
    "label": "SetVOIPTalkerForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVOIPTalkerForPlayer(const FUniqueNetIdWrapper& InPlayerId, UVOIPTalker* InTalker)"
  },
  {
    "label": "GetVOIPTalkerForPlayer()",
    "kind": "Method",
    "detail": "Function (UVOIPTalker*)",
    "insertText": "GetVOIPTalkerForPlayer(const FUniqueNetIdWrapper& InUniqueId, FVoiceSettings& OutSettings, UWorld* InWorld = nullptr, APlayerState** OutPlayerState = nullptr)"
  },
  {
    "label": "GetVOIPTalkerForPlayer()",
    "kind": "Method",
    "detail": "Function (UVOIPTalker*)",
    "insertText": "GetVOIPTalkerForPlayer(const FUniqueNetIdWrapper& InPlayerId)"
  },
  {
    "label": "IsVOIPTalkerStillAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVOIPTalkerStillAlive(UVOIPTalker* InTalker)"
  },
  {
    "label": "ResetPlayerVoiceTalker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPlayerVoiceTalker(APlayerState* InPlayerState)"
  },
  {
    "label": "ResetPlayerVoiceTalker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPlayerVoiceTalker(const FUniqueNetIdWrapper& InPlayerId)"
  },
  {
    "label": "ClearAllSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllSettings()"
  }
]