[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "UGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollection"
  },
  {
    "label": "FBoneMapVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneMapVertexBuffer"
  },
  {
    "label": "FGeometryCollectionMeshResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionMeshResources"
  },
  {
    "label": "FGeometryCollectionMeshElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionMeshElement"
  },
  {
    "label": "FGeometryCollectionMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionMeshDescription"
  },
  {
    "label": "FGeometryCollectionRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionRenderData"
  },
  {
    "label": "FBoneMapVertexBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RawIndexBuffer . h \" # include \" Rendering / ColorVertexBuffer . h \" # include \" Rendering / NaniteResources . h \" # include \" Rendering / PositionVertexBuffer . h \" # include \" Rendering / StaticMeshVertexBuffer . h \" class FGeometryCollection ; class UGeometryCollection ; class FBoneMapVertexBuffer : public FVertexBuffer { public : ~)",
    "insertText": "FBoneMapVertexBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(TArray<uint16> const& InBoneMap, bool bInNeedsCPUAccess = true)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, bool bInNeedsCPUAccess)"
  },
  {
    "label": "GetSRV()",
    "kind": "Method",
    "detail": "Function (FRHIShaderResourceView*)",
    "insertText": "GetSRV()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "AllocateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateData(bool bInNeedsCPUAccess = true)"
  },
  {
    "label": "ResizeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeBuffer(uint32 InNumVertices)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (const EPixelFormat PixelFormat = PF_R16_UINT ; const uint32 PixelFormatStride = 2 ; private : uint32 NumVertices = 0 ; bool bNeedsCPUAccess = true ; FShaderResourceViewRHIRef VertexBufferSRV = nullptr ; FStaticMeshVertexDataInterface* BoneMapData = nullptr ; uint8* Data = nullptr ; } ; struct FGeometryCollectionMeshResources { FRawStaticIndexBuffer IndexBuffer ; FPositionVertexBuffer PositionVertexBuffer ; FStaticMeshVertexBuffer StaticMeshVertexBuffer ; FColorVertexBuffer ColorVertexBuffer ; FBoneMapVertexBuffer BoneMapVertexBuffer ; void)",
    "insertText": "InitResources(UGeometryCollection const& Owner)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FGeometryCollectionMeshElement { int16 TransformIndex ; uint8 MaterialIndex ; uint8 bIsInternal ; uint32 TriangleStart ; uint32 TriangleCount ; uint32 VertexStart ; uint32 VertexEnd ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FGeometryCollectionMeshElement& Item)"
  },
  {
    "label": "FGeometryCollectionRenderData()",
    "kind": "Method",
    "detail": "Function (} ; class FGeometryCollectionRenderData { public :)",
    "insertText": "FGeometryCollectionRenderData()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TUniquePtr<FGeometryCollectionRenderData>)",
    "insertText": "Create(FGeometryCollection& InCollection, bool bInEnableNanite, bool bInEnableNaniteFallback, bool bInUseFullPrecisionUVs, bool bConvertVertexColorsToSRGB)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsInitialized()"
  }
]