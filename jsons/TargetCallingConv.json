[
  {
    "label": "ArgFlagsTy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArgFlagsTy"
  },
  {
    "label": "InputArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InputArg"
  },
  {
    "label": "OutputArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OutputArg"
  },
  {
    "label": "ArgFlagsTy()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TARGET_TARGETCALLINGCONV_H # define LLVM_TARGET_TARGETCALLINGCONV_H # include \" llvm / CodeGen / ValueTypes . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / MathExtras . h \" # include<string> # include<limits . h> namespace llvm { namespace ISD { struct ArgFlagsTy { private : const uint64_t NoFlagSet = 0 ULL ; const uint64_t ZExt = 1 ULL<<0 ; const uint64_t ZExtOffs = 0 ; const uint64_t SExt = 1 ULL<<1 ; const uint64_t SExtOffs = 1 ; const uint64_t InReg = 1 ULL<<2 ; const uint64_t InRegOffs = 2 ; const uint64_t SRet = 1 ULL<<3 ; const uint64_t SRetOffs = 3 ; const uint64_t ByVal = 1 ULL<<4 ; const uint64_t ByValOffs = 4 ; const uint64_t Nest = 1 ULL<<5 ; const uint64_t NestOffs = 5 ; const uint64_t Returned = 1 ULL<<6 ; const uint64_t ReturnedOffs = 6 ; const uint64_t ByValAlign = 0 xFULL<<7 ; const uint64_t ByValAlignOffs = 7 ; const uint64_t Split = 1 ULL<<1 1 ; const uint64_t SplitOffs = 1 1 ; const uint64_t InAlloca = 1 ULL<<1 2 ; const uint64_t InAllocaOffs = 1 2 ; const uint64_t OrigAlign = 0 x1FULL<<2 7 ; const uint64_t OrigAlignOffs = 2 7 ; const uint64_t ByValSize = 0 x3fffffffULL<<3 2 ; const uint64_t ByValSizeOffs = 3 2 ; const uint64_t InConsecutiveRegsLast = 0 x1ULL<<6 2 ; const uint64_t InConsecutiveRegsLastOffs = 6 2 ; const uint64_t InConsecutiveRegs = 0 x1ULL<<6 3 ; const uint64_t InConsecutiveRegsOffs = 6 3 ; const uint64_t One = 1 ULL ; uint64_t Flags ; public :)",
    "insertText": "ArgFlagsTy() : Flags(0)"
  },
  {
    "label": "isZExt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isZExt()"
  },
  {
    "label": "isSExt()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<ZExtOffs ; } bool)",
    "insertText": "isSExt()"
  },
  {
    "label": "isInReg()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<SExtOffs ; } bool)",
    "insertText": "isInReg()"
  },
  {
    "label": "isSRet()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<InRegOffs ; } bool)",
    "insertText": "isSRet()"
  },
  {
    "label": "isByVal()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<SRetOffs ; } bool)",
    "insertText": "isByVal()"
  },
  {
    "label": "isInAlloca()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<ByValOffs ; } bool)",
    "insertText": "isInAlloca()"
  },
  {
    "label": "isNest()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<InAllocaOffs ; } bool)",
    "insertText": "isNest()"
  },
  {
    "label": "isReturned()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<NestOffs ; } bool)",
    "insertText": "isReturned()"
  },
  {
    "label": "isInConsecutiveRegs()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<ReturnedOffs ; } bool)",
    "insertText": "isInConsecutiveRegs()"
  },
  {
    "label": "isInConsecutiveRegsLast()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<InConsecutiveRegsOffs ; } bool)",
    "insertText": "isInConsecutiveRegsLast()"
  },
  {
    "label": "getByValAlign()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<InConsecutiveRegsLastOffs ; } unsigned)",
    "insertText": "getByValAlign()"
  },
  {
    "label": "setByValAlign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setByValAlign(unsigned A)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & ~ByValAlign) | (uint64_t(Log2_32(A) + 1) << ByValAlignOffs)"
  },
  {
    "label": "isSplit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSplit()"
  },
  {
    "label": "getOrigAlign()",
    "kind": "Method",
    "detail": "Function (Flags | = One<<SplitOffs ; } unsigned)",
    "insertText": "getOrigAlign()"
  },
  {
    "label": "setOrigAlign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOrigAlign(unsigned A)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & ~OrigAlign) | (uint64_t(Log2_32(A) + 1) << OrigAlignOffs)"
  },
  {
    "label": "getByValSize()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getByValSize()"
  },
  {
    "label": "setByValSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setByValSize(unsigned S)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & ~ByValSize) | (uint64_t(S) << ByValSizeOffs)"
  },
  {
    "label": "getRawBits()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getRawBits()"
  },
  {
    "label": "InputArg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InputArg(ArgFlagsTy flags, EVT vt, EVT argvt, bool used, unsigned origIdx, unsigned partOffs) : Flags(flags), Used(used), OrigArgIndex(origIdx), PartOffset(partOffs)"
  },
  {
    "label": "getSimpleVT()",
    "kind": "Method",
    "detail": "Function (VT = vt .)",
    "insertText": "getSimpleVT()"
  },
  {
    "label": "isOrigArg()",
    "kind": "Method",
    "detail": "Function (ArgVT = argvt ; } bool)",
    "insertText": "isOrigArg()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(OrigArgIndex != NoArgIndex && \"Implicit machine-level argument\")"
  },
  {
    "label": "OutputArg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OutputArg(ArgFlagsTy flags, EVT vt, EVT argvt, bool isfixed, unsigned origIdx, unsigned partOffs) : Flags(flags), IsFixed(isfixed), OrigArgIndex(origIdx), PartOffset(partOffs)"
  }
]