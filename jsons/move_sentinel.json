[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_S2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_S2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_MOVE_SENTINEL_H # define _LIBCPP___ITERATOR_MOVE_SENTINEL_H # include<__concepts / assignable . h> # include<__concepts / convertible_to . h> # include<__concepts / semiregular . h> # include<__config> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "move_sentinel()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "move_sentinel()"
  },
  {
    "label": "move_sentinel()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "move_sentinel(_Sent __s) : __last_(std::move(__s))"
  },
  {
    "label": "move_sentinel()",
    "kind": "Method",
    "detail": "Function (} template<class _S2> requires convertible_to<const _S2&,_Sent> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "move_sentinel(const move_sentinel<_S2>& __s) : __last_(__s.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _S2> requires assignable_from<_Sent&,const _S2&> _LIBCPP_HIDE_FROM_ABI move_sentinel&)",
    "insertText": "operator(const move_sentinel<_S2>& __s)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (__last_ = __s .)",
    "insertText": "base()"
  }
]