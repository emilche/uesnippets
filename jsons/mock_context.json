[
  {
    "label": "MockContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockContext"
  },
  {
    "label": "MyInitialTsn()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_MOCK_CONTEXT_H_ # define NET_DCSCTP_SOCKET_MOCK_CONTEXT_H_ # include<cstdint> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_options . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / socket / context . h \" # include \" net / dcsctp / socket / mock_dcsctp_socket_callbacks . h \" # include \" test / gmock . h \" namespace dcsctp { class MockContext : public Context { public : TSN)",
    "insertText": "MyInitialTsn()"
  },
  {
    "label": "PeerInitialTsn()",
    "kind": "Method",
    "detail": "Function (} TSN)",
    "insertText": "PeerInitialTsn()"
  },
  {
    "label": "PeerVerificationTag()",
    "kind": "Method",
    "detail": "Function (} VerificationTag)",
    "insertText": "PeerVerificationTag()"
  },
  {
    "label": "MockContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MockContext(MockDcSctpSocketCallbacks* callbacks) : callbacks_(*callbacks)"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, is_connection_established) .WillByDefault(testing::Return(true))"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, my_initial_tsn) .WillByDefault(testing::Return(MyInitialTsn()))"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, peer_initial_tsn) .WillByDefault(testing::Return(PeerInitialTsn()))"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, callbacks).WillByDefault(testing::ReturnRef(callbacks_))"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, current_rto).WillByDefault(testing::Return(DurationMs(123)))"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, Send).WillByDefault([this](SctpPacket::Builder& builder) { callbacks_.SendPacketWithStatus(builder.Build()); })"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(bool, is_connection_established, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(TSN, my_initial_tsn, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(TSN, peer_initial_tsn, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(DcSctpSocketCallbacks&, callbacks, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, ObserveRTT, (DurationMs rtt_ms), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(DurationMs, current_rto, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, IncrementTxErrorCounter, (absl::string_view reason), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, ClearTxErrorCounter, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, HasTooManyTxErrors, (), (const, override))"
  },
  {
    "label": "PacketBuilder()",
    "kind": "Method",
    "detail": "Function (SctpPacket::Builder)",
    "insertText": "PacketBuilder()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(void, Send, (SctpPacket::Builder & builder), (override))"
  }
]