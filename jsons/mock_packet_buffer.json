[
  {
    "label": "MockPacketBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockPacketBuffer"
  },
  {
    "label": "MockPacketBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_MOCK_MOCK_PACKET_BUFFER_H_ # define MODULES_AUDIO_CODING_NETEQ_MOCK_MOCK_PACKET_BUFFER_H_ # include \" modules / audio_coding / neteq / packet_buffer . h \" # include \" test / gmock . h \" namespace webrtc { class MockPacketBuffer : public PacketBuffer { public :)",
    "insertText": "MockPacketBuffer(size_t max_number_of_packets, const TickTimer* tick_timer) : PacketBuffer(max_number_of_packets, tick_timer)"
  },
  {
    "label": "MockPacketBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MockPacketBuffer()"
  },
  {
    "label": "Die()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Die()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(void, Die, ())"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Flush, (StatisticsCalculator * stats), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, PartialFlush, (int target_level_ms, size_t sample_rate, size_t last_decoded_length, StatisticsCalculator* stats), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, Empty, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, InsertPacket, (Packet && packet, StatisticsCalculator* stats, size_t last_decoded_length, size_t sample_rate, int target_level_ms, const DecoderDatabase& decoder_database), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, InsertPacketList, (PacketList * packet_list, const DecoderDatabase& decoder_database, absl::optional<uint8_t>* current_rtp_payload_type, absl::optional<uint8_t>* current_cng_rtp_payload_type, StatisticsCalculator* stats, size_t last_decoded_length, size_t sample_rate, int target_level_ms), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, NextTimestamp, (uint32_t * next_timestamp), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, NextHigherTimestamp, (uint32_t timestamp, uint32_t* next_timestamp), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(const Packet*, PeekNextPacket, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<Packet>, GetNextPacket, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, DiscardNextPacket, (StatisticsCalculator * stats), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, DiscardOldPackets, (uint32_t timestamp_limit, uint32_t horizon_samples, StatisticsCalculator* stats), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, DiscardAllOldPackets, (uint32_t timestamp_limit, StatisticsCalculator* stats), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(size_t, NumPacketsInBuffer, (), (const, override))"
  }
]