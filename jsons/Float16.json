[
  {
    "label": "TCanBulkSerialize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCanBulkSerialize"
  },
  {
    "label": "FFloat16",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloat16"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Serialization / Archive . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Float32 . h \" # include \" Serialization / MemoryLayout . h \" template<T> struct TCanBulkSerialize ; class FFloat16 { public : float MaxF16Float = 6 5 5 0 4 . f ; uint16 Encoded ;)",
    "insertText": "FFloat16()"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFloat16(const FFloat16& FP16Value)"
  },
  {
    "label": "FFloat16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFloat16(float FP32Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFloat16&)",
    "insertText": "operator(float FP32Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFloat16&)",
    "insertText": "operator(const FFloat16& FP16Value)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "float()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(float FP32Value)"
  },
  {
    "label": "SetClamped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClamped(float FP32Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FMath::Clamp(FP32Value,-MaxF16Float,MaxF16Float))"
  },
  {
    "label": "SetTruncate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTruncate(float FP32Value)"
  },
  {
    "label": "SetZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetZero()"
  },
  {
    "label": "SetOne()",
    "kind": "Method",
    "detail": "Function (Encoded = 0 ; } void)",
    "insertText": "SetOne()"
  },
  {
    "label": "GetClampedNonNegativeAndFinite()",
    "kind": "Method",
    "detail": "Function (Encoded = 0 x3c00 ; } FFloat16)",
    "insertText": "GetClampedNonNegativeAndFinite()"
  },
  {
    "label": "GetClampedFinite()",
    "kind": "Method",
    "detail": "Function (FFloat16)",
    "insertText": "GetClampedFinite()"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFloat()"
  },
  {
    "label": "IsNegative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNegative()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FFloat16& V)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FP32Value)"
  },
  {
    "label": "StoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreHalf(&Encoded, FP32Value)"
  },
  {
    "label": "FP32()",
    "kind": "Method",
    "detail": "Function (union { struct { # if PLATFORM_LITTLE_ENDIAN uint16 Mantissa : 1 0 ; uint16 Exponent : 5 ; uint16 Sign : 1 ; # else uint16 Sign : 1 ; uint16 Exponent : 5 ; uint16 Mantissa : 1 0 ; # endif } Components ; uint16 Encoded ; } FP16 ; FFloat32)",
    "insertText": "FP32(FP32Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FP16 . Components . Sign = FP32 . Components . Sign ;)",
    "insertText": "if(FP32.Components.Exponent <= 112)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FP16 . Components . Exponent = 0 ; FP16 . Components . Mantissa = 0 ; const int32 NewExp = FP32 . Components . Exponent - 1 2 7 + 1 5 ;)",
    "insertText": "if((14 - NewExp) <= 24)"
  },
  {
    "label": "Mantissa()",
    "kind": "Method",
    "detail": "Function (uint32 Mantissa = FP32 . Components . Mantissa | 0 x800000 ; FP16 . Components .)",
    "insertText": "Mantissa(uint16)(Mantissa >> (14 - NewExp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FP16 . Encoded + + ; } } } else)",
    "insertText": "if(FP32.Components.Exponent >= 143)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (FP16 . Components . Exponent = 3 0 ; FP16 . Components . Mantissa = 1 0 2 3 ; } else { FP16 . Components . Exponent =)",
    "insertText": "uint16(int32(FP32.Components.Exponent) - 127 + 15)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (FP16 . Components . Mantissa =)",
    "insertText": "uint16(FP32.Components.Mantissa >> 13)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FFloat16 ReturnValue ;)",
    "insertText": "if(Encoded < 0x7c00)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FFloat16 ReturnValue ;)",
    "insertText": "if((Encoded&0x7c00) == 0x7c00)"
  }
]