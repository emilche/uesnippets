[
  {
    "label": "FTraceAuxiliary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceAuxiliary"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChannelPreset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelPreset"
  },
  {
    "label": "FOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptions"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "FTraceServerControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTraceServerControls"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" CoreGlobals . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Misc / Build . h \" # if !)",
    "insertText": "defined(UE_TRACE_SERVER_CONTROLS_ENABLED) # define UE_TRACE_SERVER_CONTROLS_ENABLED (PLATFORM_DESKTOP && !UE_BUILD_SHIPPING && !IS_PROGRAM)"
  },
  {
    "label": "FChannelPreset()",
    "kind": "Method",
    "detail": "Function (public : enum class ETraceSystemStatus : uint8 { NotAvailable,Available,TracingToServer,TracingToFile,NumValues,} ; enum class EEnumerateResult : uint8 { Continue,Stop,} ; struct FChannelPreset {)",
    "insertText": "FChannelPreset(const TCHAR* InName,const TCHAR* InChannels, bool bInIsReadOnly) : Name(InName) , ChannelList(InChannels) , bIsReadOnly(bInIsReadOnly)"
  },
  {
    "label": "EEnumerateResult()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* Name ; const TCHAR* ChannelList ; bool bIsReadOnly = false ; } ; typedef TFunctionRef<)",
    "insertText": "EEnumerateResult(const FChannelPreset& Preset)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# if NO_LOGGING typedef FNoLoggingCategory FLogCategoryAlias ; # else typedef FLogCategoryBase FLogCategoryAlias ; # endif enum class EConnectionType : uint8 { Network,File,None,} ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE(FOnConnection)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams(FOnTraceStarted, FTraceAuxiliary::EConnectionType TraceType, const FString& TraceDestination)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams(FOnTraceStopped, FTraceAuxiliary::EConnectionType TraceType, const FString& TraceDestination)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams(FOnSnapshotSaved, FTraceAuxiliary::EConnectionType TraceType, const FString& TraceDestination)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (struct FOptions { bool bNoWorkerThread = false ; bool bTruncateFile = false ; bool bExcludeTail = false ; } ; bool)",
    "insertText": "Start(EConnectionType Type, const TCHAR* Target, const TCHAR* Channels = TEXT(\"default\"), FOptions* Options = nullptr, const FLogCategoryAlias& LogCategory = LogCore)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Stop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Pause()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resume()"
  },
  {
    "label": "WriteSnapshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteSnapshot(const TCHAR* FilePath)"
  },
  {
    "label": "SendSnapshot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendSnapshot(const TCHAR* Host = nullptr, uint32 Port = 0)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TCHAR* CommandLine)"
  },
  {
    "label": "InitializePresets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePresets(const TCHAR* CommandLine)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "TryAutoConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryAutoConnect()"
  },
  {
    "label": "EnableCommandlineChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCommandlineChannels()"
  },
  {
    "label": "EnableChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableChannels(TConstArrayView<uint32> ChannelIds)"
  },
  {
    "label": "DisableChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableChannels(TConstArrayView<uint32> ChannelIds)"
  },
  {
    "label": "DisableChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableChannels(const TCHAR* Channels = nullptr)"
  },
  {
    "label": "GetTraceDestinationString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTraceDestinationString()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected(FGuid& OutSessionGuid, FGuid& OutTraceGuid)"
  },
  {
    "label": "GetConnectionType()",
    "kind": "Method",
    "detail": "Function (EConnectionType)",
    "insertText": "GetConnectionType()"
  },
  {
    "label": "GetActiveChannelsString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActiveChannelsString(FStringBuilderBase& String)"
  },
  {
    "label": "Panic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Panic()"
  },
  {
    "label": "GetInitializeDesc()",
    "kind": "Method",
    "detail": "Function (struct UE::Trace::FInitializeDesc const*)",
    "insertText": "GetInitializeDesc()"
  },
  {
    "label": "EnumerateFixedChannelPresets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFixedChannelPresets(PresetCallback Callback)"
  },
  {
    "label": "EnumerateChannelPresetsFromSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateChannelPresetsFromSettings(PresetCallback Callback)"
  },
  {
    "label": "GetTraceSystemStatus()",
    "kind": "Method",
    "detail": "Function (FOnConnection OnConnection ; FOnTraceStarted OnTraceStarted ; FOnTraceStopped OnTraceStopped ; FOnSnapshotSaved OnSnapshotSaved ; ETraceSystemStatus)",
    "insertText": "GetTraceSystemStatus()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} ; # if UE_TRACE_SERVER_CONTROLS_ENABLED class FTraceServerControls { public : bool)",
    "insertText": "Start()"
  }
]