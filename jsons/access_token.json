[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "GetSid()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_ACCESS_TOKEN_H_ # define BASE_WIN_ACCESS_TOKEN_H_ # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / win / scoped_handle . h \" # include \" base / win / sid . h \" # include \" base / win / windows_types . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace win { class BASE_EXPORT AccessToken { public : class BASE_EXPORT Group { public : const Sid&)",
    "insertText": "GetSid()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsDenyOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDenyOnly()"
  },
  {
    "label": "IsLogonId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLogonId()"
  },
  {
    "label": "Group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Group(Sid&& sid, DWORD attributes)"
  },
  {
    "label": "Group()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Group(Group&&)"
  },
  {
    "label": "Group()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Group()"
  },
  {
    "label": "GetLuid()",
    "kind": "Method",
    "detail": "Function (private : Sid sid_ ; DWORD attributes_ ; } ; class BASE_EXPORT Privilege { public : CHROME_LUID)",
    "insertText": "GetLuid()"
  },
  {
    "label": "Privilege()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Privilege(CHROME_LUID luid, DWORD attributes)"
  },
  {
    "label": "Dacl()",
    "kind": "Method",
    "detail": "Function (private : CHROME_LUID luid_ ; DWORD attributes_ ; } ; class BASE_EXPORT Dacl { public :)",
    "insertText": "Dacl(const ACL* dacl)"
  },
  {
    "label": "Dacl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dacl(const Dacl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Dacl&)",
    "insertText": "operator(const Dacl&)"
  },
  {
    "label": "Dacl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dacl(Dacl&&)"
  },
  {
    "label": "Dacl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Dacl()"
  },
  {
    "label": "GetAcl()",
    "kind": "Method",
    "detail": "Function (ACL*)",
    "insertText": "GetAcl()"
  },
  {
    "label": "FromToken()",
    "kind": "Method",
    "detail": "Function (private : std::vector<char> acl_buffer_ ; } ; absl::optional<AccessToken>)",
    "insertText": "FromToken(HANDLE token)"
  },
  {
    "label": "FromProcess()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromProcess(HANDLE process, bool impersonation = false)"
  },
  {
    "label": "FromCurrentProcess()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromCurrentProcess(bool impersonation = false)"
  },
  {
    "label": "FromThread()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromThread(HANDLE thread, bool open_as_self = true)"
  },
  {
    "label": "FromCurrentThread()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromCurrentThread(bool open_as_self = true)"
  },
  {
    "label": "FromEffective()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromEffective()"
  },
  {
    "label": "AccessToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessToken(const AccessToken&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AccessToken&)",
    "insertText": "operator(const AccessToken&)"
  },
  {
    "label": "AccessToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessToken(AccessToken&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AccessToken&)",
    "insertText": "operator(AccessToken&&)"
  },
  {
    "label": "AccessToken()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AccessToken()"
  },
  {
    "label": "User()",
    "kind": "Method",
    "detail": "Function (Sid)",
    "insertText": "User()"
  },
  {
    "label": "UserGroup()",
    "kind": "Method",
    "detail": "Function (Group)",
    "insertText": "UserGroup()"
  },
  {
    "label": "Owner()",
    "kind": "Method",
    "detail": "Function (Sid)",
    "insertText": "Owner()"
  },
  {
    "label": "PrimaryGroup()",
    "kind": "Method",
    "detail": "Function (Sid)",
    "insertText": "PrimaryGroup()"
  },
  {
    "label": "LogonId()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "LogonId()"
  },
  {
    "label": "IntegrityLevel()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "IntegrityLevel()"
  },
  {
    "label": "SessionId()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "SessionId()"
  },
  {
    "label": "Groups()",
    "kind": "Method",
    "detail": "Function (std::vector<Group>)",
    "insertText": "Groups()"
  },
  {
    "label": "IsRestricted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRestricted()"
  },
  {
    "label": "RestrictedSids()",
    "kind": "Method",
    "detail": "Function (std::vector<Group>)",
    "insertText": "RestrictedSids()"
  },
  {
    "label": "IsAppContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAppContainer()"
  },
  {
    "label": "AppContainerSid()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "AppContainerSid()"
  },
  {
    "label": "Capabilities()",
    "kind": "Method",
    "detail": "Function (std::vector<Group>)",
    "insertText": "Capabilities()"
  },
  {
    "label": "LinkedToken()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "LinkedToken()"
  },
  {
    "label": "DefaultDacl()",
    "kind": "Method",
    "detail": "Function (absl::optional<Dacl>)",
    "insertText": "DefaultDacl()"
  },
  {
    "label": "Id()",
    "kind": "Method",
    "detail": "Function (CHROME_LUID)",
    "insertText": "Id()"
  },
  {
    "label": "AuthenticationId()",
    "kind": "Method",
    "detail": "Function (CHROME_LUID)",
    "insertText": "AuthenticationId()"
  },
  {
    "label": "Privileges()",
    "kind": "Method",
    "detail": "Function (std::vector<Privilege>)",
    "insertText": "Privileges()"
  },
  {
    "label": "IsElevated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsElevated()"
  },
  {
    "label": "IsMember()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMember(const Sid& sid)"
  },
  {
    "label": "IsMember()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMember(WellKnownSid known_sid)"
  },
  {
    "label": "IsImpersonation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImpersonation()"
  },
  {
    "label": "IsIdentification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentification()"
  },
  {
    "label": "AccessToken()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "AccessToken(HANDLE token)"
  }
]