[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Dacl()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Dacl(const ACL* dacl)"
  },
  {
    "label": "FromToken()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromToken(HANDLE token)"
  },
  {
    "label": "FromProcess()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromProcess(HANDLE process,\n                                                 bool impersonation = false)"
  },
  {
    "label": "FromCurrentProcess()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromCurrentProcess(\n      bool impersonation = false)"
  },
  {
    "label": "FromThread()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromThread(HANDLE thread,\n                                                bool open_as_self = true)"
  },
  {
    "label": "FromCurrentThread()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromCurrentThread(\n      bool open_as_self = true)"
  },
  {
    "label": "FromEffective()",
    "kind": "Method",
    "detail": "Function (absl::optional<AccessToken>)",
    "insertText": "FromEffective()"
  },
  {
    "label": "AccessToken()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "AccessToken(HANDLE token)"
  }
]