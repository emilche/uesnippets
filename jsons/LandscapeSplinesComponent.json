[
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "UControlPointMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UControlPointMeshComponent"
  },
  {
    "label": "ULandscapeSplineControlPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplineControlPoint"
  },
  {
    "label": "ULandscapeSplineSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplineSegment"
  },
  {
    "label": "UMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshComponent"
  },
  {
    "label": "USplineMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMeshComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "ILandscapeSplineInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILandscapeSplineInterface"
  },
  {
    "label": "FForeignControlPointData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForeignControlPointData"
  },
  {
    "label": "FForeignSplineSegmentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForeignSplineSegmentData"
  },
  {
    "label": "FForeignWorldSplineData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForeignWorldSplineData"
  },
  {
    "label": "ULandscapeSplinesComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeSplinesComponent"
  },
  {
    "label": "FLandscapeToolSplines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeToolSplines"
  },
  {
    "label": "FLandscapeSplinesSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeSplinesSceneProxy"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" LandscapeInfo . h \" # include \" Components / PrimitiveComponent . h \" # include \" Components / SplineComponent . h \" # include \" LandscapeSplinesComponent . generated . h \" class ALandscapeProxy ; class FPrimitiveSceneProxy ; class UControlPointMeshComponent ; class ULandscapeSplineControlPoint ; class ULandscapeSplineSegment ; class UMeshComponent ; class USplineMeshComponent ; class UStaticMesh ; class UTexture2D ; class ILandscapeSplineInterface ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FForeignControlPointData& LHS, const FForeignControlPointData& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FForeignSplineSegmentData& LHS, const FForeignSplineSegmentData& RHS)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FindControlPoint()",
    "kind": "Method",
    "detail": "Function (FForeignControlPointData*)",
    "insertText": "FindControlPoint(ULandscapeSplineControlPoint* InIdentifer)"
  },
  {
    "label": "FindSegmentData()",
    "kind": "Method",
    "detail": "Function (FForeignSplineSegmentData*)",
    "insertText": "FindSegmentData(ULandscapeSplineSegment* InIdentifer)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "GetSplineOwner()",
    "kind": "Method",
    "detail": "Function (ILandscapeSplineInterface*)",
    "insertText": "GetSplineOwner()"
  },
  {
    "label": "CheckSplinesValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckSplinesValid()"
  },
  {
    "label": "ModifySplines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ModifySplines(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "GetControlPoints()",
    "kind": "Method",
    "detail": "Function (const TArray<TObjectPtr<ULandscapeSplineControlPoint>>&)",
    "insertText": "GetControlPoints()"
  },
  {
    "label": "HasAnyControlPointsOrSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyControlPointsOrSegments()"
  },
  {
    "label": "ShowSplineEditorMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowSplineEditorMesh(bool bShow)"
  },
  {
    "label": "RebuildAllSplines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAllSplines(bool bBuildCollision = true)"
  },
  {
    "label": "GetStreamingSplinesComponentByLocation()",
    "kind": "Method",
    "detail": "Function (ULandscapeSplinesComponent*)",
    "insertText": "GetStreamingSplinesComponentByLocation(const FVector& LocalLocation, bool bCreate = true)"
  },
  {
    "label": "GetStreamingSplinesComponentForLevel()",
    "kind": "Method",
    "detail": "Function (ULandscapeSplinesComponent*)",
    "insertText": "GetStreamingSplinesComponentForLevel(ULevel* Level, bool bCreate = true)"
  },
  {
    "label": "GetAllStreamingSplinesComponents()",
    "kind": "Method",
    "detail": "Function (TArray<ULandscapeSplinesComponent*>)",
    "insertText": "GetAllStreamingSplinesComponents()"
  },
  {
    "label": "UpdateModificationKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModificationKey(ULandscapeSplineSegment* Owner)"
  },
  {
    "label": "UpdateModificationKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModificationKey(ULandscapeSplineControlPoint* Owner)"
  },
  {
    "label": "AddForeignMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForeignMeshComponent(ULandscapeSplineSegment* Owner, USplineMeshComponent* Component)"
  },
  {
    "label": "RemoveForeignMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForeignMeshComponent(ULandscapeSplineSegment* Owner, USplineMeshComponent* Component)"
  },
  {
    "label": "RemoveAllForeignMeshComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllForeignMeshComponents(ULandscapeSplineSegment* Owner)"
  },
  {
    "label": "AddForeignMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForeignMeshComponent(ULandscapeSplineControlPoint* Owner, UControlPointMeshComponent* Component)"
  },
  {
    "label": "RemoveForeignMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveForeignMeshComponent(ULandscapeSplineControlPoint* Owner, UControlPointMeshComponent* Component)"
  },
  {
    "label": "DestroyOrphanedForeignSplineMeshComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOrphanedForeignSplineMeshComponents(UWorld* OwnerWorld)"
  },
  {
    "label": "DestroyOrphanedForeignControlPointMeshComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOrphanedForeignControlPointMeshComponents(UWorld* OwnerWorld)"
  },
  {
    "label": "DestroyUnreferencedForeignMeshComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyUnreferencedForeignMeshComponents()"
  },
  {
    "label": "ForEachUnreferencedForeignMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachUnreferencedForeignMeshComponent(TFunctionRef<bool(ULandscapeSplineSegment*, USplineMeshComponent*, ULandscapeSplineControlPoint*, UControlPointMeshComponent*)> Func)"
  },
  {
    "label": "GetForeignMeshComponent()",
    "kind": "Method",
    "detail": "Function (UControlPointMeshComponent*)",
    "insertText": "GetForeignMeshComponent(ULandscapeSplineControlPoint* Owner)"
  },
  {
    "label": "GetForeignMeshComponents()",
    "kind": "Method",
    "detail": "Function (TArray<USplineMeshComponent*>)",
    "insertText": "GetForeignMeshComponents(ULandscapeSplineSegment* Owner)"
  },
  {
    "label": "GetOwnerForMeshComponent()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetOwnerForMeshComponent(const UMeshComponent* SplineMeshComponent)"
  },
  {
    "label": "AutoFixMeshComponentErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoFixMeshComponentErrors(UWorld* OtherWorld)"
  },
  {
    "label": "IsUsingEditorMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingEditorMesh(const USplineMeshComponent* SplineMeshComponent)"
  },
  {
    "label": "IsUsingLayerInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingLayerInfo(const ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "ForEachControlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachControlPoint(TFunctionRef<void(ULandscapeSplineControlPoint*)> Func)"
  },
  {
    "label": "CopyToSplineComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToSplineComponent(USplineComponent* SplineComponent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (# endif FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  }
]