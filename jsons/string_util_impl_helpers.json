[
  {
    "label": "ReplacementOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReplacementOffset"
  },
  {
    "label": "Char",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Char"
  },
  {
    "label": "CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharT"
  },
  {
    "label": "SubstringMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubstringMatcher"
  },
  {
    "label": "CharacterMatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CharacterMatcher"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "string_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "string_type"
  },
  {
    "label": "ReplacementOffset()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_UTIL_IMPL_HELPERS_H_ # define BASE_STRINGS_STRING_UTIL_IMPL_HELPERS_H_ # include<algorithm> # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / logging . h \" # include \" base / notreached . h \" # include \" base / ranges / algorithm . h \" # include \" base / strings / string_piece . h \" # include \" base / third_party / icu / icu_utf . h \" namespace base::internal { struct ReplacementOffset {)",
    "insertText": "ReplacementOffset(uintptr_t parameter, size_t offset) : parameter(parameter), offset(offset)"
  },
  {
    "label": "CompareParameter()",
    "kind": "Method",
    "detail": "Function (} size_t parameter ; size_t offset ; } ; bool)",
    "insertText": "CompareParameter(const ReplacementOffset& elem1, const ReplacementOffset& elem2)"
  },
  {
    "label": "ToLowerASCIIImpl()",
    "kind": "Method",
    "detail": "Function (} template<T,CharT = T::value_type> std::basic_string<CharT>)",
    "insertText": "ToLowerASCIIImpl(T str)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::basic_string<CharT> ret ; ret .)",
    "insertText": "reserve(str.size())"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (const size_t last_char = input .)",
    "insertText": "length()"
  },
  {
    "label": "first_good_char()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "first_good_char(positions & TRIM_LEADING) ? input.find_first_not_of(trim_chars)"
  },
  {
    "label": "last_good_char()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "last_good_char(positions & TRIM_TRAILING) ? input.find_last_not_of(trim_chars)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool input_was_empty = input .)",
    "insertText": "empty()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (output ->)",
    "insertText": "clear()"
  },
  {
    "label": "TrimStringPieceT()",
    "kind": "Method",
    "detail": "Function (} template<T,CharT = T::value_type> T)",
    "insertText": "TrimStringPieceT(T input, T trim_chars, TrimPositions positions)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "begin(positions & TRIM_LEADING) ? input.find_first_not_of(trim_chars)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "end(positions & TRIM_TRAILING) ? input.find_last_not_of(trim_chars) + 1 : input.size()"
  },
  {
    "label": "CollapseWhitespaceT()",
    "kind": "Method",
    "detail": "Function (} template<T,CharT = T::value_type> std::basic_string<CharT>)",
    "insertText": "CollapseWhitespaceT(T text, bool trim_sequences_with_line_breaks)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (std::basic_string<CharT> result ; result .)",
    "insertText": "resize(text.size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool in_whitespace = true ; bool already_trimmed = true ; size_t chars_written = 0 ;)",
    "insertText": "for(auto c : text)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (in_whitespace = true ; result [ chars_written + + ] = L ' ' ; })",
    "insertText": "if(trim_sequences_with_line_breaks && !already_trimmed && ((c == '\\n') || (c == '\\r')))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (already_trimmed = true ; - - chars_written ; } } else { in_whitespace = false ; already_trimmed = false ; result [ chars_written + + ] = c ; } })",
    "insertText": "if(in_whitespace && !already_trimmed)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (- - chars_written ; } result .)",
    "insertText": "resize(chars_written)"
  },
  {
    "label": "MachineWord()",
    "kind": "Method",
    "detail": "Function (MachineWord NonASCIIMasks [ ] = { 0,)",
    "insertText": "MachineWord(0x8080808080808080ULL), MachineWord(0xFF80FF80FF80FF80ULL), 0, MachineWord(0xFFFFFF80FFFFFF80ULL)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (MachineWord non_ascii_bit_mask = NonASCIIMasks [)",
    "insertText": "sizeof(Char)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (MachineWord all_char_bits = 0 ; const Char* end = characters + length ;)",
    "insertText": "while(!IsMachineWordAligned(characters) && characters < end) all_char_bits |= static_cast<MachineWord>(*characters++)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t chars_per_word =)",
    "insertText": "sizeof(MachineWord) / sizeof(Char)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int batch_count = 1 6 ;)",
    "insertText": "while(characters <= end - batch_count * chars_per_word)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (all_char_bits = 0 ;)",
    "insertText": "for(int i = 0; i < batch_count; ++i)"
  },
  {
    "label": "all_char_bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "all_char_bits(reinterpret_cast<const MachineWord*>(characters))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (characters + = chars_per_word ; })",
    "insertText": "if(all_char_bits & non_ascii_bit_mask)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} all_char_bits = 0 ;)",
    "insertText": "while(characters <= end - chars_per_word)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (characters + = chars_per_word ; })",
    "insertText": "while(characters < end) all_char_bits |= static_cast<MachineWord>(*characters++)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} template<)",
    "insertText": "bool(*Validator)(base_icu::UChar32)> inline bool DoIsStringUTF8(StringPiece str)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (const uint8_t* src = reinterpret_cast<const)",
    "insertText": "uint8_t(str.data())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t char_index = 0 ;)",
    "insertText": "while(char_index < src_len)"
  },
  {
    "label": "CBU8_NEXT()",
    "kind": "Method",
    "detail": "Function (base_icu::UChar32 code_point ;)",
    "insertText": "CBU8_NEXT(src, char_index, src_len, code_point)"
  },
  {
    "label": "StartsWithT()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<T,CharT = T::value_type> bool)",
    "insertText": "StartsWithT(T str, T search_for, CompareCase case_sensitivity)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (BasicStringPiece<CharT> source = str .)",
    "insertText": "substr(0, search_for.size())"
  },
  {
    "label": "NOTREACHED()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "NOTREACHED()"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (BasicStringPiece<CharT> source = str .)",
    "insertText": "substr(str.size() - search_for.size(), search_for.size())"
  },
  {
    "label": "MatchSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "MatchSize()"
  },
  {
    "label": "MakeSubstringMatcher()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,CharT = T::value_type> auto)",
    "insertText": "MakeSubstringMatcher(T find_this)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (size_t first_match = matcher .)",
    "insertText": "Find(*str, initial_offset)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "replace(first_match, find_length, replace_with.data(), replace_length)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (auto*)",
    "insertText": "buffer((*str)[0])"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(buffer + offset, replace_with.data(), replace_length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t expansion = 0 ;)",
    "insertText": "if(replace_length > find_length)"
  },
  {
    "label": "expansion_per_match()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "expansion_per_match(replace_length - find_length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t num_matches = 0 ;)",
    "insertText": "for(size_t match = first_match; match != std::basic_string<CharT>::npos; match = matcher.Find(*str, match + find_length))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (expansion + = expansion_per_match ; + + num_matches ; } const size_t final_length = str_length + expansion ;)",
    "insertText": "if(str->capacity() < final_length)"
  },
  {
    "label": "src()",
    "kind": "Method",
    "detail": "Function (std::basic_string<CharT>)",
    "insertText": "src(str->get_allocator())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "swap(src)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "reserve(final_length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t pos = 0 ;)",
    "insertText": "for(size_t match = first_match;; match = matcher.Find(src, pos))"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "append(src, pos, match - pos)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "append(replace_with.data(), replace_length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos = match + find_length ;)",
    "insertText": "if(!--num_matches)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} str ->)",
    "insertText": "append(src, pos, str_length - pos)"
  },
  {
    "label": "replace()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "replace(shift_dst, str_length - shift_src, *str, shift_src, str_length - shift_src)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t write_offset = first_match ; size_t read_offset = first_match + expansion ; do {)",
    "insertText": "if(replace_length)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(buffer + write_offset, replace_with.data(), replace_length)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (write_offset + = replace_length ; } read_offset + = find_length ; size_t match =)",
    "insertText": "min(matcher.Find(*str, read_offset), str_length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t length = match - read_offset ;)",
    "insertText": "if(length)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(buffer + write_offset, buffer + read_offset, length)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (write_offset + = length ; read_offset + = length ; } })",
    "insertText": "while(read_offset < str_length)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "resize(write_offset)"
  },
  {
    "label": "WriteIntoT()",
    "kind": "Method",
    "detail": "Function (} template<class string_type> string_type::value_type*)",
    "insertText": "WriteIntoT(string_type* str, size_t length_with_null)"
  },
  {
    "label": "DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_GE(length_with_null, 1u)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "reserve(length_with_null)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (str ->)",
    "insertText": "resize(length_with_null - 1)"
  },
  {
    "label": "JoinStringT()",
    "kind": "Method",
    "detail": "Function (} template<list_type,T,CharT = T::value_type> std::basic_string<CharT>)",
    "insertText": "JoinStringT(list_type parts, T sep)"
  },
  {
    "label": "total_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "total_size(parts.size() - 1) * sep.size()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::basic_string<CharT> result ; result .)",
    "insertText": "reserve(total_size)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto iter = parts .)",
    "insertText": "begin()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(iter != parts.end())"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "append(iter->data(), iter->size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + iter ;)",
    "insertText": "for(; iter != parts.end(); ++iter)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "append(sep.data(), sep.size())"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DCHECK_EQ(total_size, result.size())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t substitutions = subst .)",
    "insertText": "size()"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(substitutions, 11U)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t sub_length = 0 ;)",
    "insertText": "for(const auto& cur : subst) sub_length += cur.length()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::basic_string<CharT> formatted ; formatted .)",
    "insertText": "reserve(format_string.length() + sub_length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<ReplacementOffset> r_offsets ;)",
    "insertText": "for(auto i = format_string.begin(); i != format_string.end(); ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + i ;)",
    "insertText": "if('$' == *i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + i ; } - - i ; } else {)",
    "insertText": "if(*i < '1' || *i > '9')"
  },
  {
    "label": "DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DLOG(ERROR) << \"Invalid placeholder: $\" << std::basic_string<CharT>(1, *i)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (continue ; } size_t index = static_cast<)",
    "insertText": "size_t(*i - '1')"
  },
  {
    "label": "r_offset()",
    "kind": "Method",
    "detail": "Function (ReplacementOffset)",
    "insertText": "r_offset(index, formatted.size())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (r_offsets .)",
    "insertText": "insert(ranges::upper_bound(r_offsets, r_offset, &CompareParameter), r_offset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(index < substitutions) formatted.append(subst.at(index))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} } } else { formatted .)",
    "insertText": "push_back(*i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(offsets)"
  },
  {
    "label": "lcpyT()",
    "kind": "Method",
    "detail": "Function (} return formatted ; } template<CHAR> size_t)",
    "insertText": "lcpyT(CHAR* dst, const CHAR* src, size_t dst_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(dst_size != 0)"
  }
]