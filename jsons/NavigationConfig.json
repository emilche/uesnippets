[
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnalogNavigationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalogNavigationKey"
  },
  {
    "label": "FAnalogNavigationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalogNavigationState"
  },
  {
    "label": "FUserNavigationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUserNavigationState"
  },
  {
    "label": "FNavigationConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationConfig"
  },
  {
    "label": "FNullNavigationConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullNavigationConfig"
  },
  {
    "label": "FTwinStickNavigationConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTwinStickNavigationConfig"
  },
  {
    "label": "FAnalogNavigationKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Input / Events . h \" struct FKeyEvent ; enum class EUINavigation : uint8 ; struct FAnalogNavigationKey { FKey AnalogKey ; EUINavigation NavigationDir ;)",
    "insertText": "FAnalogNavigationKey(const FKey& InKey, const EUINavigation InNavDir) : AnalogKey(InKey) , NavigationDir(InNavDir)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAnalogNavigationKey& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 KeyHash =)",
    "insertText": "GetTypeHash(InAnalogNavKey.AnalogKey)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 NavDirHash =)",
    "insertText": "GetTypeHash(InAnalogNavKey.NavigationDir)"
  },
  {
    "label": "FAnalogNavigationState()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAnalogNavigationState { double LastNavigationTime ; int32 Repeats ;)",
    "insertText": "FAnalogNavigationState() : LastNavigationTime(0) , Repeats(0)"
  },
  {
    "label": "FNavigationConfig()",
    "kind": "Method",
    "detail": "Function (} } ; struct FUserNavigationState { public : TMap<FAnalogNavigationKey,FAnalogNavigationState> AnalogNavigationState ; } ; class FNavigationConfig : public TSharedFromThis<FNavigationConfig> { public :)",
    "insertText": "FNavigationConfig()"
  },
  {
    "label": "GetNavigationDirectionFromKey()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromKey(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetNavigationDirectionFromAnalog()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromAnalog(const FAnalogInputEvent& InAnalogEvent)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "OnUserRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUserRemoved(int32 UserIndex)"
  },
  {
    "label": "OnNavigationChangedFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationChangedFocus(TSharedPtr<SWidget> OldWidget, TSharedPtr<SWidget> NewWidget, FFocusEvent FocusEvent)"
  },
  {
    "label": "GetNavigationActionFromKey()",
    "kind": "Method",
    "detail": "Function (} EUINavigationAction)",
    "insertText": "GetNavigationActionFromKey(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "IsAnalogEventBeyondNavigationThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnalogEventBeyondNavigationThreshold(const FAnalogInputEvent& InAnalogEvent)"
  },
  {
    "label": "GetRepeatRateForPressure()",
    "kind": "Method",
    "detail": "Function (public : bool bTabNavigation ; bool bKeyNavigation ; bool bAnalogNavigation ; bool bIgnoreModifiersForNavigationActions ; float AnalogNavigationHorizontalThreshold ; float AnalogNavigationVerticalThreshold ; FKey AnalogHorizontalKey ; FKey AnalogVerticalKey ; TMap<FKey,EUINavigation> KeyEventRules ; TMap<FKey,EUINavigationAction> KeyActionRules ; protected : float)",
    "insertText": "GetRepeatRateForPressure(float InPressure, int32 InRepeats)"
  },
  {
    "label": "GetNavigationDirectionFromAnalogInternal()",
    "kind": "Method",
    "detail": "Function (EUINavigation)",
    "insertText": "GetNavigationDirectionFromAnalogInternal(const FAnalogInputEvent& InAnalogEvent)"
  },
  {
    "label": "IsAnalogHorizontalKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnalogHorizontalKey(const FKey& InKey)"
  },
  {
    "label": "FTwinStickNavigationConfig()",
    "kind": "Method",
    "detail": "Function (bTabNavigation = false ; bKeyNavigation = false ; bAnalogNavigation = false ; } } ; class FTwinStickNavigationConfig : public FNavigationConfig { public :)",
    "insertText": "FTwinStickNavigationConfig()"
  },
  {
    "label": "IsAnalogVerticalKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnalogVerticalKey(const FKey& InKey)"
  }
]