[
  {
    "label": "ArchiveMemberHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArchiveMemberHeader"
  },
  {
    "label": "Archive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Archive"
  },
  {
    "label": "Child",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Child"
  },
  {
    "label": "child_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "child_iterator"
  },
  {
    "label": "Symbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Symbol"
  },
  {
    "label": "symbol_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "symbol_iterator"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_ARCHIVE_H # define LLVM_OBJECT_ARCHIVE_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / Object / Binary . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / ErrorOr . h \" # include \" llvm / Support / FileSystem . h \" # include \" llvm / Support / MemoryBuffer . h \" namespace llvm { namespace object { struct ArchiveMemberHeader { char Name [ 1 6 ] ; char LastModified [ 1 2 ] ; char UID [ 6 ] ; char GID [ 6 ] ; char AccessMode [ 8 ] ; char Size [ 1 0 ] ; char Terminator [ 2 ] ; llvm::StringRef)",
    "insertText": "getName()"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSize()"
  },
  {
    "label": "getAccessMode()",
    "kind": "Method",
    "detail": "Function (sys::fs::perms)",
    "insertText": "getAccessMode()"
  },
  {
    "label": "getLastModified()",
    "kind": "Method",
    "detail": "Function (sys::TimeValue)",
    "insertText": "getLastModified()"
  },
  {
    "label": "getRawLastModified()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "getRawLastModified()"
  },
  {
    "label": "getUID()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getUID()"
  },
  {
    "label": "getGID()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getGID()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} ; class Archive : public Binary { void)",
    "insertText": "anchor()"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (public : class Child { const Archive* Parent ; StringRef Data ; uint16_t StartOfFile ; const ArchiveMemberHeader*)",
    "insertText": "getHeader()"
  },
  {
    "label": "Child()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "Child(const Archive *Parent, const char *Start)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Child &other)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Parent == other.Parent)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} Child)",
    "insertText": "getNext()"
  },
  {
    "label": "getRawName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getRawName()"
  },
  {
    "label": "getRawSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getRawSize()"
  },
  {
    "label": "getBuffer()",
    "kind": "Method",
    "detail": "Function (ErrorOr<StringRef>)",
    "insertText": "getBuffer()"
  },
  {
    "label": "getChildOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getChildOffset()"
  },
  {
    "label": "getMemoryBufferRef()",
    "kind": "Method",
    "detail": "Function (ErrorOr<MemoryBufferRef>)",
    "insertText": "getMemoryBufferRef()"
  },
  {
    "label": "getAsBinary()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Binary>>)",
    "insertText": "getAsBinary(LLVMContext *Context = nullptr)"
  },
  {
    "label": "child_iterator()",
    "kind": "Method",
    "detail": "Function (} ; class child_iterator { Child child ; public :)",
    "insertText": "child_iterator() : child(Child(nullptr, nullptr))"
  },
  {
    "label": "child_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "child_iterator(const Child &c) : child(c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const Child*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const child_iterator &other)"
  },
  {
    "label": "Symbol()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Symbol(const Archive *p, uint32_t symi, uint32_t stri) : Parent(p) , SymbolIndex(symi) , StringIndex(stri)"
  },
  {
    "label": "getMember()",
    "kind": "Method",
    "detail": "Function (ErrorOr<child_iterator>)",
    "insertText": "getMember()"
  },
  {
    "label": "symbol_iterator()",
    "kind": "Method",
    "detail": "Function (} ; class symbol_iterator { Symbol symbol ; public :)",
    "insertText": "symbol_iterator(const Symbol &s) : symbol(s)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Archive>>)",
    "insertText": "create(MemoryBufferRef Source)"
  },
  {
    "label": "kind()",
    "kind": "Method",
    "detail": "Function (enum Kind { K_GNU,K_MIPS64,K_BSD,K_COFF } ; Kind)",
    "insertText": "kind()"
  },
  {
    "label": "isThin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isThin()"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (child_iterator)",
    "insertText": "child_end()"
  },
  {
    "label": "children()",
    "kind": "Method",
    "detail": "Function (iterator_range<child_iterator>)",
    "insertText": "children(bool SkipInternal = true)"
  },
  {
    "label": "symbol_begin()",
    "kind": "Method",
    "detail": "Function (} symbol_iterator)",
    "insertText": "symbol_begin()"
  },
  {
    "label": "symbol_end()",
    "kind": "Method",
    "detail": "Function (symbol_iterator)",
    "insertText": "symbol_end()"
  },
  {
    "label": "symbols()",
    "kind": "Method",
    "detail": "Function (iterator_range<symbol_iterator>)",
    "insertText": "symbols()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(Binary const *v)"
  },
  {
    "label": "findSym()",
    "kind": "Method",
    "detail": "Function (} child_iterator)",
    "insertText": "findSym(StringRef name)"
  },
  {
    "label": "hasSymbolTable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasSymbolTable()"
  },
  {
    "label": "getSymbolTableChild()",
    "kind": "Method",
    "detail": "Function (child_iterator)",
    "insertText": "getSymbolTableChild()"
  },
  {
    "label": "getNumberOfSymbols()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getNumberOfSymbols()"
  }
]