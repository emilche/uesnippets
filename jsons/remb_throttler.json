[
  {
    "label": "RembThrottler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RembThrottler"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_REMB_THROTTLER_H_ # define MODULES_CONGESTION_CONTROLLER_REMB_THROTTLER_H_ # include<functional> # include<vector> # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / remote_bitrate_estimator / include / remote_bitrate_estimator . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class RembThrottler : public RemoteBitrateObserver { public : using RembSender = std::function<)",
    "insertText": "void(int64_t bitrate_bps, std::vector<uint32_t> ssrcs)"
  },
  {
    "label": "RembThrottler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RembThrottler(RembSender remb_sender, Clock* clock)"
  },
  {
    "label": "SetMaxDesiredReceiveBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDesiredReceiveBitrate(DataRate bitrate)"
  },
  {
    "label": "OnReceiveBitrateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceiveBitrateChanged(const std::vector<uint32_t>& ssrcs, uint32_t bitrate_bps)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : const RembSender remb_sender_ ; Clock* const clock_ ; Mutex mutex_ ; Timestamp last_remb_time_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]