[
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / Extensions / HierarchicalCacheExtension . h \" namespace UE { namespace Sequencer { class ISoloableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ISoloableExtension) virtual ~ISoloableExtension()"
  },
  {
    "label": "IsSolo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSolo()"
  },
  {
    "label": "SetIsSoloed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSoloed(bool bIsSoloed)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class ECachedSoloState { None = 0,Soloable = 1<<0,SoloableChildren = 1<<1,Soloed = 1<<2,PartiallySoloedChildren = 1<<3,ImplicitlySoloedByParent = 1<<4,InheritedFromChildren = SoloableChildren | PartiallySoloedChildren,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECachedSoloState)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(FSoloStateCacheExtension)"
  },
  {
    "label": "FSoloStateCacheExtension()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSoloStateCacheExtension()"
  },
  {
    "label": "ComputeFlagsForModel()",
    "kind": "Method",
    "detail": "Function (} private : ECachedSoloState)",
    "insertText": "ComputeFlagsForModel(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "PostComputeChildrenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostComputeChildrenFlags(const FViewModelPtr& ViewModel, ECachedSoloState& OutThisModelFlags, ECachedSoloState& OutPropagateToParentFlags)"
  }
]