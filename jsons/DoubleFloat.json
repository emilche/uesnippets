[
  {
    "label": "FDFScalar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFScalar"
  },
  {
    "label": "FDFVector2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFVector2"
  },
  {
    "label": "FDFVector3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFVector3"
  },
  {
    "label": "FDFVector4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFVector4"
  },
  {
    "label": "FDFMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFMatrix"
  },
  {
    "label": "FDFInverseMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDFInverseMatrix"
  },
  {
    "label": "GetDouble()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / MathFwd . h \" # include \" Math / Matrix . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" struct FDFScalar { double)",
    "insertText": "GetDouble()"
  },
  {
    "label": "FDFScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFScalar(double In)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (High = static_cast<)",
    "insertText": "float(In)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Low = static_cast<)",
    "insertText": "float(In - High)"
  },
  {
    "label": "FDFScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFScalar(float High, float Low) : High(High), Low(Low)"
  },
  {
    "label": "FDFScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFScalar()"
  },
  {
    "label": "GetVector2d()",
    "kind": "Method",
    "detail": "Function (float High = 0 ; float Low = 0 ; } ; struct FDFVector2 { FVector2d)",
    "insertText": "GetVector2d()"
  },
  {
    "label": "FDFVector2()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "FDFVector2(const UE::Math::TVector2<TInputScalar>& In)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FDFScalar)",
    "insertText": "X(In.X)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (FDFScalar)",
    "insertText": "Y(In.Y)"
  },
  {
    "label": "FDFVector2()",
    "kind": "Method",
    "detail": "Function (High = { X . High,Y . High } ; Low = { X . Low,Y . Low } ; })",
    "insertText": "FDFVector2(FVector2f High, FVector2f Low) : High(High), Low(Low)"
  },
  {
    "label": "FDFVector2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFVector2()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FDFScalar)",
    "insertText": "X()"
  },
  {
    "label": "FDFVector3()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "FDFVector3(const UE::Math::TVector<TInputScalar>& In)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (FDFScalar)",
    "insertText": "Z(In.Z)"
  },
  {
    "label": "FDFVector3()",
    "kind": "Method",
    "detail": "Function (High = { X . High,Y . High,Z . High } ; Low = { X . Low,Y . Low,Z . Low } ; })",
    "insertText": "FDFVector3(FVector3f High, FVector3f Low) : High(High), Low(Low)"
  },
  {
    "label": "FDFVector3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFVector3()"
  },
  {
    "label": "FDFVector4()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "FDFVector4(const UE::Math::TVector4<TInputScalar>& In)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (FDFScalar)",
    "insertText": "W(In.W)"
  },
  {
    "label": "FDFVector4()",
    "kind": "Method",
    "detail": "Function (High = FVector4f { X . High,Y . High,Z . High,W . High } ; Low = FVector4f { X . Low,Y . Low,Z . Low,W . Low } ; } template<TInputScalar = double>)",
    "insertText": "FDFVector4(const UE::Math::TVector<TInputScalar>& In, TInputScalar InW)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (FDFScalar)",
    "insertText": "W(InW)"
  },
  {
    "label": "FDFVector4()",
    "kind": "Method",
    "detail": "Function (High = FVector4f { X . High,Y . High,Z . High,W . High } ; Low = FVector4f { X . Low,Y . Low,Z . Low,W . Low } ; })",
    "insertText": "FDFVector4(FVector4f High, FVector4f Low) : High(High), Low(Low)"
  },
  {
    "label": "FDFVector4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFVector4()"
  },
  {
    "label": "FDFMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFMatrix()"
  },
  {
    "label": "SafeCastMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix44f M { } ; FVector3f PostTranslation { } ; FMatrix44f)",
    "insertText": "SafeCastMatrix(const FMatrix& Matrix)"
  },
  {
    "label": "MakeToRelativeWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FDFMatrix)",
    "insertText": "MakeToRelativeWorldMatrix(const FVector3f Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "MakeToRelativeWorldMatrixDouble()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "MakeToRelativeWorldMatrixDouble(const FVector Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "MakeClampedToRelativeWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FDFMatrix)",
    "insertText": "MakeClampedToRelativeWorldMatrix(const FVector3f Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "MakeClampedToRelativeWorldMatrixDouble()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "MakeClampedToRelativeWorldMatrixDouble(const FVector Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "FDFInverseMatrix()",
    "kind": "Method",
    "detail": "Function (} ; struct FDFInverseMatrix {)",
    "insertText": "FDFInverseMatrix(FMatrix44f M, FVector3f PreTranslation) : M(M), PreTranslation(PreTranslation)"
  },
  {
    "label": "FDFInverseMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDFInverseMatrix()"
  },
  {
    "label": "MakeFromRelativeWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix44f M { } ; FVector3f PreTranslation { } ; FDFInverseMatrix)",
    "insertText": "MakeFromRelativeWorldMatrix(const FVector3f Origin, const FMatrix& FromWorld)"
  },
  {
    "label": "MakeFromRelativeWorldMatrixDouble()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "MakeFromRelativeWorldMatrixDouble(const FVector Origin, const FMatrix& FromWorld)"
  }
]