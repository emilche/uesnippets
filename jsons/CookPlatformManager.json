[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "IAssetRegistryReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistryReporter"
  },
  {
    "label": "FPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformData"
  },
  {
    "label": "FPlatformManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformManager"
  },
  {
    "label": "FReadScopeLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadScopeLock"
  },
  {
    "label": "FPlatformData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Commandlets / AssetRegistryGenerator . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" CookTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Templates / Atomic . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" class ITargetPlatform ; class UCookOnTheFlyServer ; namespace UE::Cook { class IAssetRegistryReporter ; } namespace UE { namespace Cook { struct FPlatformData {)",
    "insertText": "FPlatformData()"
  },
  {
    "label": "FPlatformManager()",
    "kind": "Method",
    "detail": "Function (FName PlatformName ; ITargetPlatform* TargetPlatform ; TUniquePtr<FAssetRegistryGenerator> RegistryGenerator ; TUniquePtr<UE::Cook::IAssetRegistryReporter> RegistryReporter ; bool bIsSandboxInitialized = false ; bool bFullBuild = false ; bool bAllowIterativeResults = true ; bool bIterateSharedBuild = false ; bool bWorkerOnSharedSandbox = false ; TAtomic<double> LastReferenceTime ; TAtomic<uint32> ReferenceCount ; } ; typedef const ITargetPlatform* FPlatformId ; struct FPlatformManager { public : ~)",
    "insertText": "FPlatformManager()"
  },
  {
    "label": "GetSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (const TArray<const ITargetPlatform*>&)",
    "insertText": "GetSessionPlatforms()"
  },
  {
    "label": "GetNumSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSessionPlatforms()"
  },
  {
    "label": "HasSessionPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSessionPlatform(FPlatformId TargetPlatform)"
  },
  {
    "label": "SelectSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSessionPlatforms(UCookOnTheFlyServer& COTFS, const TArrayView<FPlatformId const>& TargetPlatforms)"
  },
  {
    "label": "ClearSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSessionPlatforms(UCookOnTheFlyServer& COTFS)"
  },
  {
    "label": "AddSessionPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSessionPlatform(UCookOnTheFlyServer& COTFS, FPlatformId TargetPlatform)"
  },
  {
    "label": "GetPlatformData()",
    "kind": "Method",
    "detail": "Function (FPlatformData*)",
    "insertText": "GetPlatformData(FPlatformId Platform)"
  },
  {
    "label": "GetPlatformDataByName()",
    "kind": "Method",
    "detail": "Function (FPlatformData*)",
    "insertText": "GetPlatformDataByName(FName PlatformName)"
  },
  {
    "label": "CreatePlatformData()",
    "kind": "Method",
    "detail": "Function (FPlatformData&)",
    "insertText": "CreatePlatformData(const ITargetPlatform* Platform)"
  },
  {
    "label": "IsPlatformInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformInitialized(FPlatformId Platform)"
  },
  {
    "label": "SetArePlatformsPrepopulated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArePlatformsPrepopulated(bool bValue)"
  },
  {
    "label": "GetArePlatformsPrepopulated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetArePlatformsPrepopulated()"
  },
  {
    "label": "PruneUnreferencedSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneUnreferencedSessionPlatforms(UCookOnTheFlyServer& CookOnTheFlyServer)"
  },
  {
    "label": "AddRefCookOnTheFlyPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefCookOnTheFlyPlatform(FName PlatformName, UCookOnTheFlyServer& CookOnTheFlyServer)"
  },
  {
    "label": "ReleaseCookOnTheFlyPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCookOnTheFlyPlatform(FName TargetPlatform)"
  },
  {
    "label": "RemapTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (TMap<ITargetPlatform*,ITargetPlatform*>)",
    "insertText": "RemapTargetPlatforms()"
  },
  {
    "label": "FReadScopeLock()",
    "kind": "Method",
    "detail": "Function (struct FReadScopeLock { ~)",
    "insertText": "FReadScopeLock()"
  },
  {
    "label": "FReadScopeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReadScopeLock(FReadScopeLock&& Other)"
  },
  {
    "label": "FReadScopeLock()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FReadScopeLock(FPlatformManager& InPlatformManager)"
  },
  {
    "label": "FReadScopeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReadScopeLock(const FReadScopeLock& Other)"
  },
  {
    "label": "ReadLockPlatforms()",
    "kind": "Method",
    "detail": "Function (bool bAttached = false ; FPlatformManager& PlatformManager ; struct FPlatformManager ; } ; FReadScopeLock)",
    "insertText": "ReadLockPlatforms()"
  },
  {
    "label": "InitializeTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTls()"
  },
  {
    "label": "IsInPlatformsLock()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsInPlatformsLock()"
  },
  {
    "label": "SetIsInPlatformsLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsInPlatformsLock(bool bValue)"
  },
  {
    "label": "RemapMapKeys()",
    "kind": "Method",
    "detail": "Function (uint32 IsInPlatformsLockTLSSlot ; TFastPointerMap<FPlatformId,FPlatformData*> PlatformDatas ; TMap<FName,FPlatformData*> PlatformDatasByName ; FRWLock PlatformDatasLock ; TArray<FPlatformId> SessionPlatforms ; FRWLock SessionLock ; bool bArePlatformsPrepopulated = false ; bool bHasSelectedSessionPlatforms = false ; } ; } } template<Value> void)",
    "insertText": "RemapMapKeys(TFastPointerMap<const ITargetPlatform*, Value>& Map, const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TFastPointerMap<const ITargetPlatform*,Value> NewMap ; NewMap .)",
    "insertText": "Reserve(Map.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewMap .)",
    "insertText": "Add(Remap[OldPair.Key], MoveTemp(OldPair.Value))"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Swap(Map, NewMap)"
  },
  {
    "label": "RemapArrayElements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemapArrayElements(TArray<const ITargetPlatform*>& Array, const TMap<ITargetPlatform*, ITargetPlatform*>& Remap)"
  }
]