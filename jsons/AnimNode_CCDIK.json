[
  {
    "label": "FAnimNode_CCDIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_CCDIK"
  },
  {
    "label": "EBoneControlSpace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBoneControlSpace"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimNode_SkeletalControlBase . h \" # include \" CCDIK . h \" # include \" EngineDefines . h \" # include \" AnimNode_CCDIK . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = Effector, meta = (PinShownByDefault))"
  },
  {
    "label": "FAnimNode_CCDIK()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimNode_CCDIK()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetCurrentLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCurrentLocation(FCSPose<FCompactPose>& MeshBases, const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetTargetTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTargetTransform(const FTransform& InComponentTransform, FCSPose<FCompactPose>& MeshBases, FBoneSocketTarget& InTarget, EBoneControlSpace Space, const FVector& InOffset)"
  },
  {
    "label": "ResizeRotationLimitPerJoints()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR # if UE_ENABLE_DEBUG_DRAWING TArray<FVector> DebugLines ; # endif void)",
    "insertText": "ResizeRotationLimitPerJoints(int32 NewSize)"
  }
]