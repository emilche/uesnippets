[
  {
    "label": "FGenericPlatformManualResetEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericPlatformManualResetEvent"
  },
  {
    "label": "FGenericPlatformManualResetEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / PlatformMath . h \" # include \" Misc / MonotonicTime . h \" # include<atomic> # include<chrono> # include<condition_variable> # include<mutex> namespace UE::HAL::Private { class FGenericPlatformManualResetEvent { public :)",
    "insertText": "FGenericPlatformManualResetEvent()"
  },
  {
    "label": "FGenericPlatformManualResetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGenericPlatformManualResetEvent(const FGenericPlatformManualResetEvent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGenericPlatformManualResetEvent&)",
    "insertText": "operator(const FGenericPlatformManualResetEvent&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (bWait .)",
    "insertText": "store(true, std::memory_order_release)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Wait()"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntil(FMonotonicTimePoint::Infinity())"
  },
  {
    "label": "WaitUntil()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WaitUntil(FMonotonicTimePoint WaitTime)"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Notify()"
  },
  {
    "label": "SelfLock()",
    "kind": "Method",
    "detail": "Function (std::unique_lock)",
    "insertText": "SelfLock(Lock)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (bWait .)",
    "insertText": "store(false, std::memory_order_relaxed)"
  },
  {
    "label": "notify_one()",
    "kind": "Method",
    "detail": "Function (Condition .)",
    "insertText": "notify_one()"
  }
]