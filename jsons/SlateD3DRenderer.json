[
  {
    "label": "FSlateD3DTextureManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateD3DTextureManager"
  },
  {
    "label": "FSlateD3D11RenderingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateD3D11RenderingPolicy"
  },
  {
    "label": "FSlateD3DViewport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateD3DViewport"
  },
  {
    "label": "FSlateD3DRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateD3DRenderer"
  },
  {
    "label": "FSlateD3DViewport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / RefCounting . h \" # include \" Rendering / SlateRenderer . h \" # include \" Rendering / SlateDrawBuffer . h \" # include \" StandaloneRendererPlatformHeaders . h \" class FSlateD3DTextureManager ; class FSlateD3D11RenderingPolicy ; struct FSlateD3DViewport { FMatrix ProjectionMatrix ; D3D11_VIEWPORT ViewportInfo ; TRefCountPtr<IDXGISwapChain> D3DSwapChain ; TRefCountPtr<ID3D11Texture2D> BackBufferTexture ; TRefCountPtr<ID3D11RenderTargetView> RenderTargetView ; TRefCountPtr<ID3D11DepthStencilView> DepthStencilView ; bool bFullscreen ;)",
    "insertText": "FSlateD3DViewport() : bFullscreen( false)"
  },
  {
    "label": "FSlateD3DViewport()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSlateD3DViewport()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (BackBufferTexture .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "LogSlateD3DRendererFailure()",
    "kind": "Method",
    "detail": "Function (} } ; TRefCountPtr<ID3D11Device> GD3DDevice ; TRefCountPtr<ID3D11DeviceContext> GD3DDeviceContext ; bool GEncounteredCriticalD3DDeviceError ; void)",
    "insertText": "LogSlateD3DRendererFailure(const FString& Description, HRESULT Hr)"
  },
  {
    "label": "FSlateD3DRenderer()",
    "kind": "Method",
    "detail": "Function (class FSlateD3DRenderer : public FSlateRenderer { public :)",
    "insertText": "FSlateD3DRenderer(const ISlateStyle &InStyle)"
  },
  {
    "label": "FSlateD3DRenderer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateD3DRenderer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "AcquireDrawBuffer()",
    "kind": "Method",
    "detail": "Function (FSlateDrawBuffer&)",
    "insertText": "AcquireDrawBuffer()"
  },
  {
    "label": "ReleaseDrawBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDrawBuffer(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "DrawWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindows(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDestroyed(const TSharedRef<SWindow>& InWindow)"
  },
  {
    "label": "CreateViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewport(const TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "RequestResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestResize(const TSharedPtr<SWindow>& InWindow, uint32 NewSizeX, uint32 NewSizeY)"
  },
  {
    "label": "UpdateFullscreenState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFullscreenState(const TSharedRef<SWindow> InWindow, uint32 OverrideResX, uint32 OverrideResY)"
  },
  {
    "label": "SetSystemResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemResolution(uint32 Width, uint32 Height)"
  },
  {
    "label": "RestoreSystemResolution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestoreSystemResolution(const TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "ReleaseDynamicResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseDynamicResource(const FSlateBrush& Brush)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDynamicImageResource(FName ResourceName, uint32 Width, uint32 Height, const TArray< uint8 >& Bytes)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDynamicImageResource(FName ResourceName, FSlateTextureDataRef TextureData)"
  },
  {
    "label": "GetResourceHandle()",
    "kind": "Method",
    "detail": "Function (FSlateResourceHandle)",
    "insertText": "GetResourceHandle(const FSlateBrush& Brush, FVector2f LocalSize, float DrawScale)"
  },
  {
    "label": "RemoveDynamicBrushResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDynamicBrushResource(TSharedPtr<FSlateDynamicImageBrush> BrushToRemove)"
  },
  {
    "label": "LoadStyleResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStyleResources(const ISlateStyle& Style)"
  },
  {
    "label": "CreateUpdatableTexture()",
    "kind": "Method",
    "detail": "Function (FSlateUpdatableTexture*)",
    "insertText": "CreateUpdatableTexture(uint32 Width, uint32 Height)"
  },
  {
    "label": "CreateSharedHandleTexture()",
    "kind": "Method",
    "detail": "Function (FSlateUpdatableTexture*)",
    "insertText": "CreateSharedHandleTexture(void* SharedHandle)"
  },
  {
    "label": "ReleaseUpdatableTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUpdatableTexture(FSlateUpdatableTexture* Texture)"
  },
  {
    "label": "GetTextureAtlasProvider()",
    "kind": "Method",
    "detail": "Function (ISlateAtlasProvider*)",
    "insertText": "GetTextureAtlasProvider()"
  },
  {
    "label": "GetResourceCriticalSection()",
    "kind": "Method",
    "detail": "Function (FCriticalSection*)",
    "insertText": "GetResourceCriticalSection()"
  },
  {
    "label": "RegisterCurrentScene()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegisterCurrentScene(FSceneInterface* Scene)"
  },
  {
    "label": "GetCurrentSceneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentSceneIndex()"
  },
  {
    "label": "SetCurrentSceneIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSceneIndex(int32 InIndex)"
  },
  {
    "label": "ClearScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearScenes()"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDevice()"
  },
  {
    "label": "CreateDepthStencilBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDepthStencilBuffer(FSlateD3DViewport& Viewport)"
  },
  {
    "label": "HasLostDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLostDevice()"
  },
  {
    "label": "Private_CreateViewport()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Private_CreateViewport(TSharedRef<SWindow> InWindow, const FVector2D& WindowSize)"
  },
  {
    "label": "Private_ResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_ResizeViewport(const TSharedRef<SWindow> InWindow, uint32 Width, uint32 Height, bool bFullscreen)"
  },
  {
    "label": "CreateBackBufferResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBackBufferResources(TRefCountPtr<IDXGISwapChain>& InSwapChain, TRefCountPtr<ID3D11Texture2D>& OutBackBuffer, TRefCountPtr<ID3D11RenderTargetView>& OutRTV)"
  }
]