[
  {
    "label": "FRHIR10G10B10A2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIR10G10B10A2"
  },
  {
    "label": "FRHIRGBA16",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIRGBA16"
  },
  {
    "label": "FRHIRG16",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIRG16"
  },
  {
    "label": "ConvertRawR16DataToFColor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Float16Color . h \" # include \" Math / PackedVector . h \" # include \" Math / Plane . h \" # include \" Math / UnrealMathUtility . h \" # include \" RHI . h \" # include \" RHITypes . h \" namespace { struct FRHIR10G10B10A2 { uint32 R : 1 0 ; uint32 G : 1 0 ; uint32 B : 1 0 ; uint32 A : 2 ; } ; struct FRHIRGBA16 { uint16 R ; uint16 G ; uint16 B ; uint16 A ; } ; struct FRHIRG16 { uint16 R ; uint16 G ; } ; void)",
    "insertText": "ConvertRawR16DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (uint16*)",
    "insertText": "SrcPtr(uint16*)(In + Y * SrcPitch)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FColor* DestPtr = Out + Y* Width ;)",
    "insertText": "for(uint32 X = 0; X < Width; X++)"
  },
  {
    "label": "Requantize16to8()",
    "kind": "Method",
    "detail": "Function (uint16 Value16 =* SrcPtr ; int Value =)",
    "insertText": "Requantize16to8(Value16)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FColor(Value, Value, Value)"
  },
  {
    "label": "ConvertRawR8G8B8A8DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR8G8B8A8DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FColor*)",
    "insertText": "SrcPtr(FColor*)(In + Y * SrcPitch)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FColor(SrcPtr->B, SrcPtr->G, SrcPtr->R, SrcPtr->A)"
  },
  {
    "label": "ConvertRawB8G8R8A8DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawB8G8R8A8DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 DstPitch = Width*)",
    "insertText": "sizeof(FColor)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Out, In, Width * Height * sizeof(FColor))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(SrcPitch > DstPitch)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (FColor* DestPtr = Out + Y* Width ;)",
    "insertText": "Memcpy(DestPtr, SrcPtr, DstPitch)"
  },
  {
    "label": "ConvertRawR16G16B16A16FDataToFFloat16Color()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ConvertRawR16G16B16A16FDataToFFloat16Color(uint32 Width, uint32 Height, uint8* In, uint32 SrcPitch, FFloat16Color* Out)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 DstPitch = Width*)",
    "insertText": "sizeof(FFloat16Color)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Out, In, Width * Height * sizeof(FFloat16Color))"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FFloat16Color*)",
    "insertText": "SrcPtr(FFloat16Color*)(In + Y * SrcPitch)"
  },
  {
    "label": "ConvertRawR10G10B10A2DataToFColor()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ConvertRawR10G10B10A2DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FRHIR10G10B10A2*)",
    "insertText": "SrcPtr(FRHIR10G10B10A2*)(In + Y * SrcPitch)"
  },
  {
    "label": "MakeRequantizeFrom1010102()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "MakeRequantizeFrom1010102(SrcPtr->R, SrcPtr->G, SrcPtr->B, SrcPtr->A)"
  },
  {
    "label": "ConvertRawB10G10R10A2DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawB10G10R10A2DataToFColor(uint32 Width, uint32 Height, uint8* In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "MakeRequantizeFrom1010102()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "MakeRequantizeFrom1010102(SrcPtr->B, SrcPtr->G, SrcPtr->R, SrcPtr->A)"
  },
  {
    "label": "ConvertRawR16G16B16A16FDataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR16G16B16A16FDataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, bool LinearToGamma)"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (FPlane)",
    "insertText": "MinValue(0.0f, 0.0f, 0.0f, 0.0f), MaxValue(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FFloat16*)",
    "insertText": "SrcPtr(FFloat16*)(In + Y * SrcPitch)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MinValue . X = FMath::Min<)",
    "insertText": "float(SrcPtr[0], MinValue.X)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MinValue . Y = FMath::Min<)",
    "insertText": "float(SrcPtr[1], MinValue.Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MinValue . Z = FMath::Min<)",
    "insertText": "float(SrcPtr[2], MinValue.Z)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MinValue . W = FMath::Min<)",
    "insertText": "float(SrcPtr[3], MinValue.W)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MaxValue . X = FMath::Max<)",
    "insertText": "float(SrcPtr[0], MaxValue.X)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MaxValue . Y = FMath::Max<)",
    "insertText": "float(SrcPtr[1], MaxValue.Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MaxValue . Z = FMath::Max<)",
    "insertText": "float(SrcPtr[2], MaxValue.Z)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MaxValue . W = FMath::Max<)",
    "insertText": "float(SrcPtr[3], MaxValue.W)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 4 ; } })",
    "insertText": "for(uint32 Y = 0; Y < Height; Y++)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor((SrcPtr[0] - MinValue.X) / (MaxValue.X - MinValue.X), (SrcPtr[1] - MinValue.Y) / (MaxValue.Y - MinValue.Y), (SrcPtr[2] - MinValue.Z) / (MaxValue.Z - MinValue.Z), (SrcPtr[3] - MinValue.W) / (MaxValue.W - MinValue.W) ).ToFColor(LinearToGamma)"
  },
  {
    "label": "ConvertRawR11G11B10DataToFColor()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 4 ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR11G11B10DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, bool LinearToGamma)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FFloat3Packed*)",
    "insertText": "SrcPtr(FFloat3Packed*)(In + Y * SrcPitch)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Value(*SrcPtr).ToLinearColor()"
  },
  {
    "label": "ToFColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr = Value .)",
    "insertText": "ToFColor(LinearToGamma)"
  },
  {
    "label": "ConvertRawR9G9B9E5DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR9G9B9E5DataToFColor(uint32 Width, uint32 Height, uint8* In, uint32 SrcPitch, FColor* Out, bool LinearToGamma)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FFloat3PackedSE*)",
    "insertText": "SrcPtr(FFloat3PackedSE*)(In + Y * SrcPitch)"
  },
  {
    "label": "ConvertRawR32G32B32A32DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR32G32B32A32DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, bool LinearToGamma)"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (FPlane)",
    "insertText": "MinValue(0.0f, 0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "MaxValue()",
    "kind": "Method",
    "detail": "Function (FPlane)",
    "insertText": "MaxValue(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "SrcPtr(float*)(In + Y * SrcPitch)"
  },
  {
    "label": "ConvertRawR24G8DataToFColor()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 4 ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR24G8DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "GetLinearToGamma()",
    "kind": "Method",
    "detail": "Function (bool bLinearToGamma = InFlags .)",
    "insertText": "GetLinearToGamma()"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "SrcPtr(uint32 *)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FColor NormalizedColor ;)",
    "insertText": "if(InFlags.GetOutputStencil())"
  },
  {
    "label": "DeviceStencil()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "DeviceStencil(*SrcPtr & 0xFF000000)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (NormalizedColor =)",
    "insertText": "FColor(DeviceStencil, DeviceStencil, DeviceStencil, 0xFF)"
  },
  {
    "label": "DeviceZ()",
    "kind": "Method",
    "detail": "Function (} else { float)",
    "insertText": "DeviceZ(*SrcPtr & 0xffffff) / (float)(1 << 24)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (float LinearValue =)",
    "insertText": "Min(InFlags.ComputeNormalizedDepth(DeviceZ), 1.0f)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (NormalizedColor =)",
    "insertText": "FLinearColor(LinearValue, LinearValue, LinearValue, 0).ToFColor(bLinearToGamma)"
  },
  {
    "label": "ConvertRawDepthStencil64DataToFColor()",
    "kind": "Method",
    "detail": "Function (}* DestPtr = NormalizedColor ; + + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawDepthStencil64DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "SrcPtr(float *)(In + Y * SrcPitch)"
  },
  {
    "label": "DeviceZ()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DeviceZ(*SrcPtr)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 1 ; + + DestPtr ;)",
    "insertText": "UE_LOG(LogRHI, Warning, TEXT(\"CPU read of R32G8X24 is not tested and may not function.\"))"
  },
  {
    "label": "ConvertRawR16G16B16A16DataToFColor()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ConvertRawR16G16B16A16DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, bool bLinearToGamma = false)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FRHIRGBA16*)",
    "insertText": "SrcPtr(FRHIRGBA16*)(In + Y * SrcPitch)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(FColor::DequantizeUNorm16ToFloat(SrcPtr->R), FColor::DequantizeUNorm16ToFloat(SrcPtr->G), FColor::DequantizeUNorm16ToFloat(SrcPtr->B), FColor::DequantizeUNorm16ToFloat(SrcPtr->A) ).ToFColor(bLinearToGamma)"
  },
  {
    "label": "ConvertRawR16G16DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR16G16DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FRHIRG16*)",
    "insertText": "SrcPtr(FRHIRG16*)(In + Y * SrcPitch)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FColor(FColor::Requantize16to8(SrcPtr->R), FColor::Requantize16to8(SrcPtr->G), 0)"
  },
  {
    "label": "ConvertRawR8DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR8DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "SrcPtr(uint8*)(In + Y * SrcPitch)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FColor(*SrcPtr, *SrcPtr, *SrcPtr, *SrcPtr)"
  },
  {
    "label": "ConvertRawR8G8DataToFColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR8G8DataToFColor(uint32 Width, uint32 Height, uint8* In, uint32 SrcPitch, FColor* Out)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FColor(*SrcPtr, *(SrcPtr + 1), 0)"
  },
  {
    "label": "ConvertRawD32S8DataToFColor()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 2 ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawD32S8DataToFColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "SrcPtr(uint32*)(In + Y * SrcPitch)"
  },
  {
    "label": "ConvertRawR16UDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } } void)",
    "insertText": "ConvertRawR16UDataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "Value16()",
    "kind": "Method",
    "detail": "Function (uint16 Value16 =* SrcPtr ; float Value =)",
    "insertText": "Value16(1.f/0xffff)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(Value, Value, Value)"
  },
  {
    "label": "ConvertRawR16FDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR16FDataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FFloat16*)",
    "insertText": "SrcPtr(FFloat16 *)(In + Y * SrcPitch)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float Value = SrcPtr ->)",
    "insertText": "GetFloat()"
  },
  {
    "label": "ConvertRawR8G8B8A8DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR8G8B8A8DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(sRGBColor)"
  },
  {
    "label": "ConvertRawB8G8R8A8DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawB8G8R8A8DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(*SrcPtr)"
  },
  {
    "label": "ConvertRawA2B10G10R10DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawA2B10G10R10DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor((float)SrcPtr->R / 1023.0f, (float)SrcPtr->G / 1023.0f, (float)SrcPtr->B / 1023.0f, (float)SrcPtr->A / 3.0f)"
  },
  {
    "label": "ConvertRawR16G16B16A16FDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR16G16B16A16FDataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor((float)SrcPtr[0], (float)SrcPtr[1], (float)SrcPtr[2], (float)SrcPtr[3])"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor((SrcPtr[0] - MinValue.X) / (MaxValue.X - MinValue.X), (SrcPtr[1] - MinValue.Y) / (MaxValue.Y - MinValue.Y), (SrcPtr[2] - MinValue.Z) / (MaxValue.Z - MinValue.Z), (SrcPtr[3] - MinValue.W) / (MaxValue.W - MinValue.W))"
  },
  {
    "label": "ConvertRawR11G11B10FDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + DestPtr ; SrcPtr + = 4 ; } } } } void)",
    "insertText": "ConvertRawR11G11B10FDataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "DestPtr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "DestPtr(*SrcPtr).ToLinearColor()"
  },
  {
    "label": "ConvertRawR32G32B32A32DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + DestPtr ; + + SrcPtr ; } } } void)",
    "insertText": "ConvertRawR32G32B32A32DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (FLinearColor*)",
    "insertText": "SrcPtr(FLinearColor*)"
  },
  {
    "label": "DestPtr()",
    "kind": "Method",
    "detail": "Function (FLinearColor*)",
    "insertText": "DestPtr(FLinearColor*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const int32 ImageSize =)",
    "insertText": "sizeof(FLinearColor)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(DestPtr, SrcPtr, ImageSize)"
  },
  {
    "label": "SrcPtr()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 4 ; } } float*)",
    "insertText": "SrcPtr(float*)"
  },
  {
    "label": "ConvertRawR24G8DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + DestPtr ; SrcPtr + = 4 ; } } } } void)",
    "insertText": "ConvertRawR24G8DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "DeviceStencil()",
    "kind": "Method",
    "detail": "Function (float DeviceStencil = 0 . 0 f ;)",
    "insertText": "DeviceStencil(float)((*SrcPtr & 0xFF000000) >> 24)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(LinearValue, DeviceStencil, 0.0f, 0.0f)"
  },
  {
    "label": "ConvertRawDepthStencil64DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + DestPtr ; + + SrcPtr ; } } } void)",
    "insertText": "ConvertRawDepthStencil64DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "SrcStart()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "SrcStart(uint8 *)(In + Y * SrcPitch)"
  },
  {
    "label": "DeviceZ()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DeviceZ((float *)(SrcStart))"
  },
  {
    "label": "DeviceStencil()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DeviceStencil(float)(*(SrcStart + 4))"
  },
  {
    "label": "ConvertRawR16G16B16A16DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (SrcStart + = 8 ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR16G16B16A16DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor((float)SrcPtr->R / 65535.0f, (float)SrcPtr->G / 65535.0f, (float)SrcPtr->B / 65535.0f, (float)SrcPtr->A / 65535.0f)"
  },
  {
    "label": "ConvertRawR16G16DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } void)",
    "insertText": "ConvertRawR16G16DataToFLinearColor(uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor((float)SrcPtr->R / 65535.0f, (float)SrcPtr->G / 65535.0f, 0)"
  },
  {
    "label": "ConvertRAWSurfaceDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } } } ; bool)",
    "insertText": "ConvertRAWSurfaceDataToFLinearColor(EPixelFormat Format, uint32 Width, uint32 Height, uint8 *In, uint32 SrcPitch, FLinearColor* Out, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "ConvertRawR16UDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR16UDataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawR16FDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR16FDataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawR8G8B8A8DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR8G8B8A8DataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawB8G8R8A8DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawB8G8R8A8DataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawA2B10G10R10DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawA2B10G10R10DataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawR16G16B16A16FDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR16G16B16A16FDataToFLinearColor(Width, Height, In, SrcPitch, Out, InFlags)"
  },
  {
    "label": "ConvertRawR11G11B10FDataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR11G11B10FDataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawR32G32B32A32DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR32G32B32A32DataToFLinearColor(Width, Height, In, SrcPitch, Out, InFlags)"
  },
  {
    "label": "ConvertRawR24G8DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR24G8DataToFLinearColor(Width, Height, In, SrcPitch, Out, InFlags)"
  },
  {
    "label": "ConvertRawDepthStencil64DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawDepthStencil64DataToFLinearColor(Width, Height, In, SrcPitch, Out, InFlags)"
  },
  {
    "label": "ConvertRawR16G16B16A16DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR16G16B16A16DataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "ConvertRawR16G16DataToFLinearColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertRawR16G16DataToFLinearColor(Width, Height, In, SrcPitch, Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(SrcPtr[0].GetFloat(), SrcPtr[1].GetFloat(), 0.f,1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 2 ; + + DestPtr ; } } return true ; } else)",
    "insertText": "if(Format == PF_G32R32F)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(SrcPtr[0], SrcPtr[1], 0.f, 1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SrcPtr + = 2 ; + + DestPtr ; } } return true ; } else)",
    "insertText": "if(Format == PF_R32_FLOAT)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (* DestPtr =)",
    "insertText": "FLinearColor(SrcPtr[0], 0.f, 0.f, 1.f)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + SrcPtr ; + + DestPtr ; } } return true ; } else {)",
    "insertText": "check(0)"
  }
]