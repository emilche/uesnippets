[
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAutomationTaskStatusBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTaskStatusBase"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "FAutomationWaitForLoadingOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationWaitForLoadingOptions"
  },
  {
    "label": "FUNCTIONALTESTING_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUNCTIONALTESTING_API"
  },
  {
    "label": "FConsoleVariableSwapperTempl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleVariableSwapperTempl"
  },
  {
    "label": "FAutomationTestScreenshotEnvSetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestScreenshotEnvSetup"
  },
  {
    "label": "FAutomationViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationViewExtension"
  },
  {
    "label": "BindTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindTask(TUniquePtr<FAutomationTaskStatusBase> inTask)"
  },
  {
    "label": "FinishLoadingBeforeScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishLoadingBeforeScreenshot()"
  },
  {
    "label": "TakeAutomationScreenshotInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeAutomationScreenshotInternal(UObject* WorldContextObject, const FString& ScreenShotName, const FString& Notes, FAutomationScreenshotOptions Options)"
  },
  {
    "label": "BuildScreenshotData()",
    "kind": "Method",
    "detail": "Function (FAutomationScreenshotData)",
    "insertText": "BuildScreenshotData(const FString& MapOrContext, const FString& ScreenShotName, int32 Width, int32 Height)"
  },
  {
    "label": "BuildScreenshotData()",
    "kind": "Method",
    "detail": "Function (FAutomationScreenshotData)",
    "insertText": "BuildScreenshotData(UWorld* InWorld, const FString& ScreenShotName, int32 Width, int32 Height)"
  },
  {
    "label": "GetAutomationScreenshotSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetAutomationScreenshotSize(const FAutomationScreenshotOptions& Options)"
  },
  {
    "label": "TakeAutomationScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeAutomationScreenshot(UObject* WorldContextObject, FLatentActionInfo LatentInfo, const FString& Name, const FString& Notes, const FAutomationScreenshotOptions& Options)"
  },
  {
    "label": "TakeAutomationScreenshotAtCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeAutomationScreenshotAtCamera(UObject* WorldContextObject, FLatentActionInfo LatentInfo, ACameraActor* Camera, const FString& NameOverride, const FString& Notes, const FAutomationScreenshotOptions& Options)"
  },
  {
    "label": "TakeAutomationScreenshotOfUI_Immediate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TakeAutomationScreenshotOfUI_Immediate(UObject* WorldContextObject, const FString& Name, const FAutomationScreenshotOptions& Options)"
  },
  {
    "label": "TakeAutomationScreenshotOfUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeAutomationScreenshotOfUI(UObject* WorldContextObject, FLatentActionInfo LatentInfo, const FString& Name, const FAutomationScreenshotOptions& Options)"
  },
  {
    "label": "EnableStatGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableStatGroup(UObject* WorldContextObject, FName GroupName)"
  },
  {
    "label": "DisableStatGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableStatGroup(UObject* WorldContextObject, FName GroupName)"
  },
  {
    "label": "GetStatIncAverage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStatIncAverage(FName StatName)"
  },
  {
    "label": "GetStatIncMax()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStatIncMax(FName StatName)"
  },
  {
    "label": "GetStatExcAverage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStatExcAverage(FName StatName)"
  },
  {
    "label": "GetStatExcMax()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStatExcMax(FName StatName)"
  },
  {
    "label": "GetStatCallCount()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStatCallCount(FName StatName)"
  },
  {
    "label": "AreAutomatedTestsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAutomatedTestsRunning()"
  },
  {
    "label": "AutomationWaitForLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutomationWaitForLoading(UObject* WorldContextObject, FLatentActionInfo LatentInfo, FAutomationWaitForLoadingOptions Options)"
  },
  {
    "label": "SetTestTelemetryStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTestTelemetryStorage(FString StorageName)"
  },
  {
    "label": "GetDefaultScreenshotOptionsForGameplay()",
    "kind": "Method",
    "detail": "Function (FAutomationScreenshotOptions)",
    "insertText": "GetDefaultScreenshotOptionsForGameplay(EComparisonTolerance Tolerance = EComparisonTolerance::Low, float Delay = 0.2)"
  },
  {
    "label": "GetDefaultScreenshotOptionsForRendering()",
    "kind": "Method",
    "detail": "Function (FAutomationScreenshotOptions)",
    "insertText": "GetDefaultScreenshotOptionsForRendering(EComparisonTolerance Tolerance = EComparisonTolerance::Low, float Delay = 0.2)"
  },
  {
    "label": "AddExpectedLogError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedLogError(FString ExpectedPatternString, int32 Occurrences = 1, bool ExactMatch = false, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedPlainLogError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedPlainLogError(FString ExpectedString, int32 Occurrences = 1, bool ExactMatch = false)"
  },
  {
    "label": "AddExpectedLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedLogMessage(FString ExpectedPatternString, int32 Occurrences = 1, bool ExactMatch = false, bool IsRegex = true)"
  },
  {
    "label": "AddExpectedPlainLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExpectedPlainLogMessage(FString ExpectedString, int32 Occurrences = 1, bool ExactMatch = false)"
  },
  {
    "label": "SetScalabilityQualityLevelRelativeToMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalabilityQualityLevelRelativeToMax(UObject* WorldContextObject, int32 Value = 1)"
  },
  {
    "label": "SetScalabilityQualityToEpic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalabilityQualityToEpic(UObject* WorldContextObject)"
  },
  {
    "label": "SetScalabilityQualityToLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScalabilityQualityToLow(UObject* WorldContextObject)"
  },
  {
    "label": "SetEditorViewportViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorViewportViewMode(EViewModeIndex Index)"
  },
  {
    "label": "SetEditorViewportVisualizeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorViewportVisualizeBuffer(FName BufferName)"
  },
  {
    "label": "AddTestInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestInfo(const FString& InLogItem)"
  },
  {
    "label": "AddTestWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestWarning(const FString& InLogItem)"
  },
  {
    "label": "AddTestError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestError(const FString& InLogItem)"
  },
  {
    "label": "FConsoleVariableSwapperTempl()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FConsoleVariableSwapperTempl(FString InConsoleVariableName)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(T Value)"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "FAutomationTestScreenshotEnvSetup()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAutomationTestScreenshotEnvSetup()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(UWorld* InWorld, FAutomationScreenshotOptions& InOutOptions)"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  }
]