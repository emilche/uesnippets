[
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "FCacheGetChunkRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheGetChunkRequest"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FPageKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageKey"
  },
  {
    "label": "FStreamingRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingRequest"
  },
  {
    "label": "FStreamingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingManager"
  },
  {
    "label": "FStreamingUpdateTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingUpdateTask"
  },
  {
    "label": "FResourcePrefetch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourcePrefetch"
  },
  {
    "label": "FAsyncState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncState"
  },
  {
    "label": "FGPUStreamingRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUStreamingRequest"
  },
  {
    "label": "FPendingPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingPage"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHeapBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeapBuffer"
  },
  {
    "label": "FVirtualPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualPage"
  },
  {
    "label": "FNewPageRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewPageRequest"
  },
  {
    "label": "FRegisteredPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredPage"
  },
  {
    "label": "FResidentPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResidentPage"
  },
  {
    "label": "FRootPageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootPageInfo"
  },
  {
    "label": "FHierarchyDepthManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyDepthManager"
  },
  {
    "label": "FRingBufferAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRingBufferAllocator"
  },
  {
    "label": "FStreamingPageUploader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingPageUploader"
  },
  {
    "label": "FReadbackManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadbackManager"
  },
  {
    "label": "FQualityScalingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQualityScalingManager"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IO / IoDispatcher . h \" # include \" Memory / SharedBuffer . h \" # include \" NaniteResources . h \" # include \" UnifiedBuffer . h \" # include \" SpanAllocator . h \" namespace UE { namespace DerivedData { class FRequestOwner ; struct FCacheGetChunkRequest ; } } class FRDGBuilder ; namespace Nanite { struct FPageKey { uint32 RuntimeResourceID = INDEX_NONE ; uint32 PageIndex = INDEX_NONE ; uint32)",
    "insertText": "GetTypeHash(const FPageKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPageKey& Other)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FResources* Resources)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FResources* Resources)"
  },
  {
    "label": "BeginAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAsyncUpdate(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "EndAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAsyncUpdate(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "IsAsyncUpdateInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncUpdateInProgress()"
  },
  {
    "label": "SubmitFrameStreamingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitFrameStreamingRequests(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetStreamingRequestsBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer*)",
    "insertText": "GetStreamingRequestsBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetHierarchySRV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRV*)",
    "insertText": "GetHierarchySRV(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetClusterPageDataSRV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRV*)",
    "insertText": "GetClusterPageDataSRV(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetImposterDataSRV()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRV*)",
    "insertText": "GetImposterDataSRV(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetStreamingRequestsBufferVersion()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStreamingRequestsBufferVersion()"
  },
  {
    "label": "GetQualityScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetQualityScaleFactor()"
  },
  {
    "label": "PrefetchResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrefetchResource(const FResources* Resource, uint32 NumFramesUntilRender)"
  },
  {
    "label": "RequestNanitePages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestNanitePages(TArrayView<uint32> RequestData)"
  },
  {
    "label": "GetRequestRecordBuffer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR uint64)",
    "insertText": "GetRequestRecordBuffer(TArray<uint32>& OutRequestData)"
  },
  {
    "label": "SetRequestRecordBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequestRecordBuffer(uint64 Handle)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (# endif private : class FStreamingUpdateTask ; struct FResourcePrefetch { uint32 RuntimeResourceID ; uint32 NumFramesUntilRender ; } ; struct FAsyncState { struct FGPUStreamingRequest* GPUStreamingRequestsPtr = nullptr ; uint32 NumGPUStreamingRequests = 0 ; uint32 NumReadyPages = 0 ; bool bUpdateActive = false ; bool bBuffersTransitionedToWrite = false ; } ; struct FPendingPage { # if WITH_EDITOR FSharedBuffer SharedBuffer ; enum class EState { None,DDC_Pending,DDC_Ready,DDC_Failed,Memory,Disk,} State = EState::None ; uint32 RetryCount = 0 ; # endif FIoBuffer RequestBuffer ; FBulkDataBatchReadRequest Request ; uint32 GPUPageIndex = INDEX_NONE ; FPageKey InstallKey ; uint32 BytesLeftToStream = 0 ; } ; struct FHeapBuffer { int32 TotalUpload = 0 ; FSpanAllocator Allocator ; FRDGScatterUploadBuffer UploadBuffer ; TRefCountPtr<FRDGPooledBuffer> DataBuffer ; void)",
    "insertText": "Release()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UploadBuffer = { } ; DataBuffer = { } ; } } ; struct FVirtualPage { uint32 Priority = 0 u ; uint32 RegisteredPageIndex = INDEX_NONE ; bool)",
    "insertText": "operator(const FVirtualPage& Other)"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (TMap<FPageKey,uint32> PageRequestRecordMap ; # endif TArray<uint32> PendingExplicitRequests ; TArray<FResourcePrefetch> PendingResourcePrefetches ; TArray<FStreamingRequest> PrioritizedRequestsHeap ; TArray<uint32> GPUPageDependencies ; TArray<FPageKey> SelectedPages ; bool)",
    "insertText": "AddRequest(uint32 RuntimeResourceID, uint32 PageIndex, uint32 VirtualPageIndex, uint32 Priority)"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRequest(uint32 RuntimeResourceID, uint32 PageIndex, uint32 Priority)"
  },
  {
    "label": "AddPendingGPURequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingGPURequests()"
  },
  {
    "label": "AddPendingExplicitRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingExplicitRequests()"
  },
  {
    "label": "AddPendingResourcePrefetchRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingResourcePrefetchRequests()"
  },
  {
    "label": "AddParentRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParentRequests()"
  },
  {
    "label": "AddParentRegisteredRequestsRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParentRegisteredRequestsRecursive(uint32 RegisteredPageIndex, uint32 Priority)"
  },
  {
    "label": "AddParentNewRequestsRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParentNewRequestsRecursive(const FResources& Resources, uint32 RuntimeResourceID, uint32 PageIndex, uint32 VirtualPageRangeStart, uint32 Priority)"
  },
  {
    "label": "GetRootPage()",
    "kind": "Method",
    "detail": "Function (FRootPageInfo*)",
    "insertText": "GetRootPage(uint32 RuntimeResourceID)"
  },
  {
    "label": "GetResources()",
    "kind": "Method",
    "detail": "Function (FResources*)",
    "insertText": "GetResources(uint32 RuntimeResourceID)"
  },
  {
    "label": "SelectHighestPriorityPagesAndUpdateLRU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectHighestPriorityPagesAndUpdateLRU(uint32 MaxSelectedPages)"
  },
  {
    "label": "RegisterStreamingPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStreamingPage(uint32 RegisteredPageIndex, const FPageKey& Key)"
  },
  {
    "label": "UnregisterStreamingPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterStreamingPage(const FPageKey& Key)"
  },
  {
    "label": "MoveToEndOfLRUList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEndOfLRUList(uint32 RegisteredPageIndex)"
  },
  {
    "label": "CompactLRU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactLRU()"
  },
  {
    "label": "VerifyLRU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyLRU()"
  },
  {
    "label": "ApplyFixups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFixups(const FFixupChunk& FixupChunk, const FResources& Resources, bool bIsUninstall)"
  },
  {
    "label": "ArePageDependenciesCommitted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePageDependenciesCommitted(uint32 RuntimeResourceID, uint32 DependencyPageStart, uint32 DependencyPageNum)"
  },
  {
    "label": "ProcessNewResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNewResources(FRDGBuilder& GraphBuilder, FRDGBuffer* ClusterPageDataBuffer)"
  },
  {
    "label": "ResizePoolAllocationIfNeeded()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer*)",
    "insertText": "ResizePoolAllocationIfNeeded(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "DetermineReadyPages()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "DetermineReadyPages(uint32& TotalPageSize)"
  },
  {
    "label": "InstallReadyPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallReadyPages(uint32 NumReadyPages)"
  },
  {
    "label": "UninstallGPUPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninstallGPUPage(uint32 GPUPageIndex, bool bApplyFixup)"
  },
  {
    "label": "AddClusterLeafFlagUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClusterLeafFlagUpdate(uint32 MaxStreamingPages, uint32 GPUPageIndex, uint32 ClusterIndex, uint32 NumClusters, bool bReset, bool bUninstall)"
  },
  {
    "label": "FlushClusterLeafFlagUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushClusterLeafFlagUpdates(FRDGBuilder& GraphBuilder, FRDGBuffer* ClusterPageDataBuffer)"
  },
  {
    "label": "ResetStreamingStateCPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStreamingStateCPU()"
  },
  {
    "label": "UpdatePageConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePageConfiguration()"
  },
  {
    "label": "AsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncUpdate()"
  },
  {
    "label": "SanityCheckStreamingRequests()",
    "kind": "Method",
    "detail": "Function (# if NANITE_SANITY_CHECK_STREAMING_REQUESTS void)",
    "insertText": "SanityCheckStreamingRequests(const struct FGPUStreamingRequest* StreamingRequestsPtr, const uint32 NumStreamingRequests)"
  },
  {
    "label": "RecordGPURequests()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "RecordGPURequests()"
  },
  {
    "label": "BuildDDCRequest()",
    "kind": "Method",
    "detail": "Function (UE::DerivedData::FCacheGetChunkRequest)",
    "insertText": "BuildDDCRequest(const FResources& Resources, const FPageStreamingState& PageStreamingState, const uint32 PendingPageIndex)"
  },
  {
    "label": "RequestDDCData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDDCData(TConstArrayView<UE::DerivedData::FCacheGetChunkRequest> DDCRequests)"
  }
]