[
  {
    "label": "SupportsOstreamOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SupportsOstreamOperator"
  },
  {
    "label": "SupportsToString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SupportsToString"
  },
  {
    "label": "is_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_iterator"
  },
  {
    "label": "priority_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "priority_tag"
  },
  {
    "label": "IsScopedEnumImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsScopedEnumImpl"
  },
  {
    "label": "is_scoped_enum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_scoped_enum"
  },
  {
    "label": "remove_cvref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "remove_cvref"
  },
  {
    "label": "IterValueImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterValueImpl"
  },
  {
    "label": "IterValuePointerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterValuePointerImpl"
  },
  {
    "label": "projected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "projected"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEMPLATE_UTIL_H_ # define BASE_TEMPLATE_UTIL_H_ # include<stddef . h> # include<iosfwd> # include<iterator> # include<type_traits> # include<utility> # include \" base / compiler_specific . h \" namespace base { namespace internal { template<T,= void> struct SupportsOstreamOperator : std::false_type { } ; template<T> struct SupportsOstreamOperator<T,)",
    "insertText": "decltype(void(std::declval<std::ostream&>() << std::declval<T>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T,= void> struct SupportsToString : std::false_type { } ; template<T> struct SupportsToString<T,)",
    "insertText": "decltype(void(std::declval<T>().ToString()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T,= void> struct is_iterator : std::false_type { } ; template<T> struct is_iterator<T,std::void_t<std::iterator_traits<T>::iterator_category>> : std::true_type { } ; template<size_t I> struct priority_tag : priority_tag<I - 1> { } ; template<> struct priority_tag<0> { } ; } namespace internal { template<T,bool = std::is_enum<T>::value> struct IsScopedEnumImpl : std::false_type { } ; template<T> struct IsScopedEnumImpl<T,true> : std::negation<std::is_convertible<T,std::underlying_type_t<T>>> { } ; } template<T> struct is_scoped_enum : internal::IsScopedEnumImpl<T> { } ; template<T> struct remove_cvref { using type = std::remove_cv_t<std::remove_reference_t<T>> ; } ; template<T> using remove_cvref_t = remove_cvref<T>::type ; template<Iter> struct IterValueImpl { using value_type = std::iterator_traits<Iter>::value_type ; } ; template<T,bool Cond = false> struct IterValuePointerImpl { } ; template<T> struct IterValuePointerImpl<T*,true> { using value_type = std::iterator_traits<T*>::value_type ; } ; template<T> struct IterValueImpl<T*> { using value_type = IterValuePointerImpl<T*,std::is_object_v<T>>::value_type ; } ; template<Iter> using iter_value_t = IterValueImpl<remove_cvref_t<Iter>>::value_type ; template<Iter> using iter_reference_t =)",
    "insertText": "decltype(*std::declval<Iter&>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Func,. . . Iters> using indirect_result_t = std::invoke_result_t<Func,iter_reference_t<Iters> . . .> ; template<Iter,Proj,IndirectResultT = indirect_result_t<Proj,Iter>> struct projected { using value_type = remove_cvref_t<IndirectResultT> ; IndirectResultT)",
    "insertText": "operator()"
  }
]