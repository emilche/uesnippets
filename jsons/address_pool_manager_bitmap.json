[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "AddressPoolManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddressPoolManager"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_ADDRESS_POOL_MANAGER_BITMAP_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_ADDRESS_POOL_MANAGER_BITMAP_H_ # include<array> # include<atomic> # include<bitset> # include<limits> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_lock . h \" # include \" build / build_config . h \" # if !)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (namespace internal { class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "PartitionPageShift()",
    "kind": "Method",
    "detail": "Function (public : uint64_t kGiB = 1 0 2 4* 1 0 2 4* 1 0 2 4 ull ; uint64_t kAddressSpaceSize = 4 ull* kGiB ; size_t kBitShiftOfBRPPoolBitmap =)",
    "insertText": "PartitionPageShift()"
  },
  {
    "label": "PartitionPageSize()",
    "kind": "Method",
    "detail": "Function (size_t kBytesPer1BitOfBRPPoolBitmap =)",
    "insertText": "PartitionPageSize()"
  },
  {
    "label": "DirectMapAllocationGranularityShift()",
    "kind": "Method",
    "detail": "Function (size_t kGuardOffsetOfBRPPoolBitmap = 1 ; size_t kGuardBitsOfBRPPoolBitmap = 2 ; size_t kBRPPoolBits = kAddressSpaceSize / kBytesPer1BitOfBRPPoolBitmap ; size_t kBitShiftOfRegularPoolBitmap =)",
    "insertText": "DirectMapAllocationGranularityShift()"
  },
  {
    "label": "DirectMapAllocationGranularity()",
    "kind": "Method",
    "detail": "Function (size_t kBytesPer1BitOfRegularPoolBitmap =)",
    "insertText": "DirectMapAllocationGranularity()"
  },
  {
    "label": "IsManagedByRegularPool()",
    "kind": "Method",
    "detail": "Function (size_t kRegularPoolBits = kAddressSpaceSize / kBytesPer1BitOfRegularPoolBitmap ; bool)",
    "insertText": "IsManagedByRegularPool(uintptr_t address)"
  },
  {
    "label": "IsManagedByBRPPool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsManagedByBRPPool(uintptr_t address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) static void BanSuperPageFromBRPPool(uintptr_t address)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (brp_forbidden_super_page_map_ [ address>> kSuperPageShift ] .)",
    "insertText": "store(true, std::memory_order_relaxed)"
  },
  {
    "label": "IsAllowedSuperPageForBRPPool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllowedSuperPageForBRPPool(uintptr_t address)"
  },
  {
    "label": "IncrementBlocklistHitCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncrementBlocklistHitCount()"
  },
  {
    "label": "GetLock()",
    "kind": "Method",
    "detail": "Function (+ + blocklist_hit_count_ ; } # endif private : class AddressPoolManager ; Lock&)",
    "insertText": "GetLock()"
  },
  {
    "label": "PA_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::bitset<kRegularPoolBits> regular_pool_bits_)",
    "insertText": "PA_GUARDED_BY(GetLock())"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT)"
  },
  {
    "label": "IsManagedByPartitionAlloc()",
    "kind": "Method",
    "detail": "Function (std::atomic_size_t blocklist_hit_count_ ; # endif } ; } PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAlloc(uintptr_t address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) PA_DCHECK(!internal::AddressPoolManagerBitmap::IsManagedByBRPPool(address))"
  },
  {
    "label": "IsManagedByRegularPool()",
    "kind": "Method",
    "detail": "Function (# endif return internal::)",
    "insertText": "IsManagedByRegularPool(address) #if BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) || internal::AddressPoolManagerBitmap::IsManagedByBRPPool(address)"
  },
  {
    "label": "IsManagedByPartitionAllocRegularPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAllocRegularPool(uintptr_t address)"
  },
  {
    "label": "IsManagedByPartitionAllocBRPPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAllocBRPPool(uintptr_t address)"
  },
  {
    "label": "IsManagedByPartitionAllocConfigurablePool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAllocConfigurablePool(uintptr_t address)"
  }
]