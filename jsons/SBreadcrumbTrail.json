[
  {
    "label": "SBreadcrumbTrailBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBreadcrumbTrailBase"
  },
  {
    "label": "SBreadcrumbTrail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBreadcrumbTrail"
  },
  {
    "label": "FCrumbItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrumbItem"
  },
  {
    "label": "ScrollToStart()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Input / SMenuAnchor . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / Layout / SScrollBox . h \" class SBreadcrumbTrailBase : public SCompoundWidget { public : void)",
    "insertText": "ScrollToStart()"
  },
  {
    "label": "ScrollToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToEnd()"
  },
  {
    "label": "FCrumbItem()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SScrollBox> CrumbBox ; } ; template<ItemType> class SBreadcrumbTrail : public SBreadcrumbTrailBase { private : struct FCrumbItem { int32 CrumbID ; TSharedRef<SButton> Button ; TSharedRef<SMenuAnchor> Delimiter ; TSharedRef<SVerticalBox> ButtonBox ; TSharedRef<SVerticalBox> DelimiterBox ; ItemType CrumbData ;)",
    "insertText": "FCrumbItem(int32 InCrumbID, TSharedRef<SButton> InButton, TSharedRef<SMenuAnchor> InDelimiter, TSharedRef<SVerticalBox> InButtonBox, TSharedRef<SVerticalBox> InDelimiterBox, ItemType InCrumbData) : CrumbID(InCrumbID) , Button(InButton) , Delimiter(InDelimiter) , ButtonBox(InButtonBox) , DelimiterBox(InDelimiterBox) , CrumbData(InCrumbData)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCrumbPushed, const ItemType&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCrumbPopped, const ItemType&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCrumbClicked, const ItemType&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FHasCrumbMenuContent, const ItemType&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedRef< SWidget >, FGetCrumbMenuContent, const ItemType&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedRef<SWidget>, FGetCrumbButtonContent, const ItemType& , const FTextBlockStyle* InTextStyle)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SBreadcrumbTrail ) : _ButtonStyle( &FCoreStyle::Get().GetWidgetStyle< FButtonStyle >( \"BreadcrumbButton\" ) ) , _TextStyle( &FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"NormalText\") ) , _ButtonContentPadding(FMargin(4.0, 2.0)) , _DelimiterImage( FCoreStyle::Get().GetBrush(\"BreadcrumbTrail.Delimiter\") ) , _ShowLeadingDelimiter(false) , _PersistentBreadcrumbs(false) , _HasCrumbMenuContent() , _GetCrumbMenuContent()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FButtonStyle, ButtonStyle ) SLATE_STYLE_ARGUMENT( FTextBlockStyle, TextStyle ) SLATE_ATTRIBUTE( FMargin, ButtonContentPadding ) SLATE_ATTRIBUTE( const FSlateBrush*, DelimiterImage ) SLATE_ATTRIBUTE( bool, ShowLeadingDelimiter ) SLATE_EVENT( FOnCrumbPushed, OnCrumbPushed ) SLATE_EVENT( FOnCrumbPopped, OnCrumbPopped ) SLATE_EVENT( FOnCrumbClicked, OnCrumbClicked ) SLATE_ARGUMENT( bool, PersistentBreadcrumbs ) SLATE_EVENT( FHasCrumbMenuContent, HasCrumbMenuContent ) SLATE_EVENT( FGetCrumbMenuContent, GetCrumbMenuContent ) SLATE_EVENT( FGetCrumbButtonContent, GetCrumbButtonContent ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (ButtonStyle = InArgs . _ButtonStyle ; TextStyle = InArgs . _TextStyle ; ButtonContentPadding = InArgs . _ButtonContentPadding ; DelimiterImage = InArgs . _DelimiterImage ; ShowLeadingDelimiter = InArgs . _ShowLeadingDelimiter ; OnCrumbPushed = InArgs . _OnCrumbPushed ; OnCrumbPopped = InArgs . _OnCrumbPopped ; OnCrumbClicked = InArgs . _OnCrumbClicked ; bHasStaticBreadcrumbs = InArgs . _PersistentBreadcrumbs ; HasCrumbMenuContentCallback = InArgs . _HasCrumbMenuContent ; GetCrumbMenuContentCallback = InArgs . _GetCrumbMenuContent ; GetCrumbButtonContentCallback = InArgs . _GetCrumbButtonContent ; NextValidCrumbID = 0 ; ChildSlot [)",
    "insertText": "SAssignNew(CrumbBox, SScrollBox) .Orientation(Orient_Horizontal) .ScrollBarVisibility(EVisibility::Collapsed)"
  },
  {
    "label": "AddLeadingDelimiter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLeadingDelimiter()"
  },
  {
    "label": "PushCrumb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushCrumb(const TAttribute<FText>& CrumbText, const ItemType& NewCrumbData)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SButton> NewButton ; TSharedPtr<SMenuAnchor> NewDelimiter ; TSharedPtr<SVerticalBox> NewButtonBox ; TSharedPtr<SVerticalBox> NewDelimiterBox ; TSharedRef<SWidget> ContentWidget = GetCrumbButtonContentCallback .)",
    "insertText": "IsBound() ? GetCrumbButtonContentCallback.Execute(NewCrumbData, TextStyle)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (CrumbBox ->)",
    "insertText": "AddSlot() [ SAssignNew(NewButtonBox, SVerticalBox) +SVerticalBox::Slot() .FillHeight( 1.0f ) [ SAssignNew(NewButton, SButton) .ButtonStyle(ButtonStyle) .ContentPadding(ButtonContentPadding) .TextStyle(TextStyle) .Text(CrumbText) .OnClicked( this, &SBreadcrumbTrail::CrumbButtonClicked, NextValidCrumbID ) .Content()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget> DelimiterContent = SNullWidget::NullWidget ;)",
    "insertText": "if(GetCrumbMenuContentCallback.IsBound())"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (DelimiterContent =)",
    "insertText": "SNew(SButton) .VAlign(EVerticalAlignment::VAlign_Center) .ButtonStyle(ButtonStyle) .Visibility(this, &SBreadcrumbTrail::GetCrumbDelimiterVisibility, NextValidCrumbID) .OnClicked(this, &SBreadcrumbTrail::OnCrumbDelimiterClicked, NextValidCrumbID) .ContentPadding(FMargin(3, 0)) [ SNew(SImage) .Image(DelimiterImage) .ColorAndOpacity(FSlateColor::UseForeground())"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} else { DelimiterContent =)",
    "insertText": "SNew(SButton) .VAlign(EVerticalAlignment::VAlign_Center) .ButtonStyle(ButtonStyle) .Visibility( this, &SBreadcrumbTrail::GetDelimiterVisibility, NextValidCrumbID ) .ContentPadding( FMargin(3, 0) ) [ SNew(SImage) .Image(DelimiterImage) .ColorAndOpacity(FSlateColor::UseForeground())"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} CrumbBox ->)",
    "insertText": "AddSlot() [ SAssignNew(NewDelimiterBox, SVerticalBox) +SVerticalBox::Slot() .FillHeight(1.0f) [ SAssignNew( NewDelimiter, SMenuAnchor ) .OnGetMenuContent( this, &SBreadcrumbTrail::GetCrumbMenuContent, NextValidCrumbID)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (CrumbList .)",
    "insertText": "Emplace(NextValidCrumbID, NewButton.ToSharedRef(), NewDelimiter.ToSharedRef(), NewButtonBox.ToSharedRef(), NewDelimiterBox.ToSharedRef(), NewCrumbData)"
  },
  {
    "label": "NextValidCrumbID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextValidCrumbID(NextValidCrumbID + 1) % (INT_MAX - 1)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnCrumbPushed .)",
    "insertText": "ExecuteIfBound(NewCrumbData)"
  },
  {
    "label": "PopCrumb()",
    "kind": "Method",
    "detail": "Function (} ItemType)",
    "insertText": "PopCrumb()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const FCrumbItem& LastCrumbItem = CrumbList .)",
    "insertText": "Pop()"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (CrumbBox ->)",
    "insertText": "RemoveSlot(LastCrumbItem.ButtonBox)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (CrumbBox ->)",
    "insertText": "RemoveSlot(LastCrumbItem.DelimiterBox)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnCrumbPopped .)",
    "insertText": "ExecuteIfBound(LastCrumbItem.CrumbData)"
  },
  {
    "label": "HasCrumbs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCrumbs()"
  },
  {
    "label": "NumCrumbs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumCrumbs()"
  },
  {
    "label": "ClearCrumbs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCrumbs(bool bPopAllCrumbsToClear = false)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (} } else { CrumbBox ->)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CrumbList .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetAllCrumbData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllCrumbData(TArray<ItemType>& CrumbData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CrumbData .)",
    "insertText": "Add(CrumbList[CrumbIdx].CrumbData)"
  },
  {
    "label": "GetCrumbDelimiterVisibility()",
    "kind": "Method",
    "detail": "Function (} } private : EVisibility)",
    "insertText": "GetCrumbDelimiterVisibility(int32 CrumbID)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Unhandled()"
  },
  {
    "label": "SetIsOpen()",
    "kind": "Method",
    "detail": "Function (CrumbList [ CrumbListIdx ] . Delimiter ->)",
    "insertText": "SetIsOpen(true)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (Reply =)",
    "insertText": "Handled()"
  },
  {
    "label": "GetCrumbMenuContent()",
    "kind": "Method",
    "detail": "Function (break ; } } } return Reply ; } TSharedRef<SWidget>)",
    "insertText": "GetCrumbMenuContent(int32 CrumbId)"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (break ; } } return MenuContent .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "GetDelimiterVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetDelimiterVisibility(int32 CrumbID)"
  },
  {
    "label": "CrumbButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "CrumbButtonClicked(int32 CrumbID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 CrumbIdx = INDEX_NONE ;)",
    "insertText": "if(bHasStaticBreadcrumbs)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnCrumbClicked .)",
    "insertText": "ExecuteIfBound(CrumbList[CrumbListIdx].CrumbData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } } } else {)",
    "insertText": "for(int32 CrumbListIdx = 0; CrumbListIdx < NumCrumbs(); ++CrumbListIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CrumbIdx = CrumbListIdx ; break ; } })",
    "insertText": "if(CrumbIdx != INDEX_NONE)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (} OnCrumbClicked .)",
    "insertText": "ExecuteIfBound(CrumbList.Last().CrumbData)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (CrumbBox ->)",
    "insertText": "AddSlot() .VAlign(VAlign_Center) [ SNew(SImage) .Image(DelimiterImage) .Visibility( this, &SBreadcrumbTrail::GetLeadingDelimiterVisibility)"
  }
]