[
  {
    "label": "FStructuredArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStructuredArchiveChildReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveChildReader"
  },
  {
    "label": "FElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElement"
  },
  {
    "label": "FIdGenerator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIdGenerator"
  },
  {
    "label": "FContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContainer"
  },
  {
    "label": "GetCurrentSlotElementIdImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreTypes . h \" # include \" Formatters / BinaryArchiveFormatter . h \" # include \" Misc / Build . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" Serialization / StructuredArchiveDefines . h \" # include \" Serialization / StructuredArchiveFormatter . h \" # include \" Serialization / StructuredArchiveFwd . h \" # include \" Serialization / StructuredArchiveNameHelpers . h \" # include \" Serialization / StructuredArchiveSlotBase . h \" # include \" Serialization / StructuredArchiveSlots . h \" # include \" Templates / UniqueObj . h \" class FStructuredArchive ; namespace UE::StructuredArchive::Private { enum class EElementType : unsigned char { Root,Record,Array,Stream,Map,AttributedValue,} ; enum class EEnteringAttributeState { NotEnteringAttribute,EnteringAttribute,} ; FElementId)",
    "insertText": "GetCurrentSlotElementIdImpl(FStructuredArchive& Ar)"
  },
  {
    "label": "GetFormatterImpl()",
    "kind": "Method",
    "detail": "Function (FArchiveFormatterType&)",
    "insertText": "GetFormatterImpl(FStructuredArchive& Ar)"
  },
  {
    "label": "FStructuredArchive()",
    "kind": "Method",
    "detail": "Function (} class FStructuredArchive { FStructuredArchiveSlot ; FStructuredArchiveRecord ; FStructuredArchiveArray ; FStructuredArchiveStream ; FStructuredArchiveMap ; public : using FSlot = FStructuredArchiveSlot ; using FRecord = FStructuredArchiveRecord ; using FArray = FStructuredArchiveArray ; using FStream = FStructuredArchiveStream ; using FMap = FStructuredArchiveMap ;)",
    "insertText": "FStructuredArchive(FArchiveFormatterType& InFormatter)"
  },
  {
    "label": "FStructuredArchive()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStructuredArchive()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (FStructuredArchiveSlot)",
    "insertText": "Open()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GetArchiveState()",
    "kind": "Method",
    "detail": "Function (} const FArchiveState&)",
    "insertText": "GetArchiveState()"
  },
  {
    "label": "FStructuredArchive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructuredArchive(const FStructuredArchive&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStructuredArchive&)",
    "insertText": "operator(const FStructuredArchive&)"
  },
  {
    "label": "FElement()",
    "kind": "Method",
    "detail": "Function (FArchiveFormatterType& Formatter ; # if WITH_TEXT_ARCHIVE_SUPPORT const bool bRequiresStructuralMetadata ; struct FElement { UE::StructuredArchive::Private::FElementId Id ; UE::StructuredArchive::Private::EElementType Type ;)",
    "insertText": "FElement(UE::StructuredArchive::Private::FElementId InId, UE::StructuredArchive::Private::EElementType InType) : Id(InId) , Type(InType)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (} } ; struct FIdGenerator { UE::StructuredArchive::Private::FElementId)",
    "insertText": "Generate()"
  },
  {
    "label": "EnterSlot()",
    "kind": "Method",
    "detail": "Function (} private : uint32 NextId = 1 ; } ; FIdGenerator ElementIdGenerator ; UE::StructuredArchive::Private::FElementId RootElementId ; UE::StructuredArchive::Private::FElementId CurrentSlotElementId ; TArray<FElement,TNonRelocatableInlineAllocator<3 2>> CurrentScope ; # if DO_STRUCTURED_ARCHIVE_CONTAINER_CHECKS struct FContainer ; TArray<TUniqueObj<FContainer>> CurrentContainer ; # endif UE::StructuredArchive::Private::EEnteringAttributeState CurrentEnteringAttributeState = UE::StructuredArchive::Private::EEnteringAttributeState::NotEnteringAttribute ; void)",
    "insertText": "EnterSlot(UE::StructuredArchive::Private::FSlotPosition Slot, bool bEnteringAttributedValue = false)"
  },
  {
    "label": "EnterSlotAsType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EnterSlotAsType(UE::StructuredArchive::Private::FSlotPosition Slot, UE::StructuredArchive::Private::EElementType ElementType)"
  },
  {
    "label": "LeaveSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveSlot()"
  },
  {
    "label": "SetScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScope(UE::StructuredArchive::Private::FSlotPosition Slot)"
  },
  {
    "label": "FStructuredArchive()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if ! WITH_TEXT_ARCHIVE_SUPPORT)",
    "insertText": "FStructuredArchive(FArchiveFormatterType& InFormatter) : Formatter(InFormatter)"
  },
  {
    "label": "GetUnderlyingArchiveImpl()",
    "kind": "Method",
    "detail": "Function (} # endif namespace UE::StructuredArchive::Private { FArchive&)",
    "insertText": "GetUnderlyingArchiveImpl(FStructuredArchive& StructuredArchive)"
  },
  {
    "label": "GetUnderlyingArchiveStateImpl()",
    "kind": "Method",
    "detail": "Function (} FArchiveState&)",
    "insertText": "GetUnderlyingArchiveStateImpl(FStructuredArchive& StructuredArchive)"
  },
  {
    "label": "GetCurrentSlotElementIdImpl()",
    "kind": "Method",
    "detail": "Function (} # if WITH_TEXT_ARCHIVE_SUPPORT FElementId)",
    "insertText": "GetCurrentSlotElementIdImpl(FStructuredArchive& StructuredArchive)"
  }
]