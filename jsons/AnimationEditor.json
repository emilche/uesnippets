[
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "IAnimSequenceCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimSequenceCurveEditor"
  },
  {
    "label": "IAnimationSequenceBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimationSequenceBrowser"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "FAnimationEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationEditor"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "IPersonaViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaViewport"
  },
  {
    "label": "FAnimationEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" IAnimationEditor . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SharedPointer . h \" # include \" Tickable . h \" # include \" TickableEditorObject . h \" # include \" Toolkits / IToolkit . h \" # include \" Types / SlateEnums . h \" # include \" UObject / GCObject . h \" # include \" UObject / NameTypes . h \" class IDetailLayoutBuilder ; class FExtender ; class FMenuBuilder ; class FReferenceCollector ; class IAnimSequenceCurveEditor ; class IAnimationSequenceBrowser ; class ISkeletonTreeItem ; class ITimeSliderController ; class SDockTab ; class SWidget ; class UAnimSequence ; class UAnimSequenceBase ; class UAnimationAsset ; class UObject ; class USkeletalMeshComponent ; struct FAssetData ; struct FToolMenuContext ; namespace AnimationEditorModes { const FName AnimationEditorMode ; } namespace AnimationEditorTabs { const FName DetailsTab ; const FName SkeletonTreeTab ; const FName ViewportTab ; const FName AdvancedPreviewTab ; const FName DocumentTab ; const FName CurveEditorTab ; const FName AssetBrowserTab ; const FName AssetDetailsTab ; const FName CurveNamesTab ; const FName SlotNamesTab ; const FName AnimMontageSectionsTab ; const FName FindReplaceTab ; } class FAnimationEditor : public IAnimationEditor,public FGCObject,public FTickableEditorObject { public : ~)",
    "insertText": "FAnimationEditor()"
  },
  {
    "label": "InitAnimationEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAnimationEditor(const EToolkitMode::Type Mode, const TSharedPtr<class IToolkitHost>& InitToolkitHost, class UAnimationAsset* InAnimationAsset)"
  },
  {
    "label": "SetAnimationAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationAsset(UAnimationAsset* AnimAsset)"
  },
  {
    "label": "GetAssetBrowser()",
    "kind": "Method",
    "detail": "Function (IAnimationSequenceBrowser*)",
    "insertText": "GetAssetBrowser()"
  },
  {
    "label": "EditCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditCurves(UAnimSequenceBase* InAnimSequence, const TArray<FCurveEditInfo>& InCurveInfo, const TSharedPtr<ITimeSliderController>& InExternalTimeSliderController)"
  },
  {
    "label": "StopEditingCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEditingCurves(const TArray<FCurveEditInfo>& InCurveInfo)"
  },
  {
    "label": "GetPersonaToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaToolkit>)",
    "insertText": "GetPersonaToolkit()"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "InitToolMenuContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitToolMenuContext(FToolMenuContext& MenuContext)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetSkeletonTree()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class ISkeletonTree>)",
    "insertText": "GetSkeletonTree()"
  },
  {
    "label": "HandleDetailsCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDetailsCreated(const TSharedRef<class IDetailsView>& InDetailsView)"
  },
  {
    "label": "HandleGetAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "HandleGetAsset()"
  },
  {
    "label": "HandleOpenNewAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOpenNewAsset(UObject* InNewAsset)"
  },
  {
    "label": "HandleAnimationSequenceBrowserCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnimationSequenceBrowserCreated(const TSharedRef<class IAnimationSequenceBrowser>& InSequenceBrowser)"
  },
  {
    "label": "HandleSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSelectionChanged(const TArrayView<TSharedPtr<ISkeletonTreeItem>>& InSelectedItems, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "HandleObjectSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectSelected(UObject* InObject)"
  },
  {
    "label": "HandleObjectsSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsSelected(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "HandleSectionsChanged()",
    "kind": "Method",
    "detail": "Function (private : enum class EExportSourceOption : uint8 { CurrentAnimation_AnimData,CurrentAnimation_PreviewMesh,Max } ; void)",
    "insertText": "HandleSectionsChanged()"
  },
  {
    "label": "HasValidAnimationSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidAnimationSequence()"
  },
  {
    "label": "CanSetKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetKey()"
  },
  {
    "label": "OnSetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetKey()"
  },
  {
    "label": "OnReimportAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReimportAnimation(bool bWithDialog)"
  },
  {
    "label": "OnApplyCompression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplyCompression()"
  },
  {
    "label": "OnExportToFBX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExportToFBX(const EExportSourceOption Option)"
  },
  {
    "label": "ExportToFBX()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportToFBX(const TArray<UObject*> NewAssets, bool bRecordAnimation)"
  },
  {
    "label": "OnAddLoopingInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddLoopingInterpolation()"
  },
  {
    "label": "OnRemoveBoneTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveBoneTrack()"
  },
  {
    "label": "GenerateExportAssetMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateExportAssetMenu()"
  },
  {
    "label": "FillExportAssetMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillExportAssetMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "CopyCurveToSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurveToSoundWave(const FAssetData& SoundWaveAssetData)"
  },
  {
    "label": "ConditionalRefreshEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalRefreshEditor(UObject* InObject)"
  },
  {
    "label": "HandlePostReimport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostReimport(UObject* InObject, bool bSuccess)"
  },
  {
    "label": "HandlePostImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostImport(class UFactory* InFactory, UObject* InObject)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExtendMenu()"
  },
  {
    "label": "ExtendToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolbar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OpenNewAnimationDocumentTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "OpenNewAnimationDocumentTab(UAnimationAsset* InAnimAsset)"
  },
  {
    "label": "RecordMeshToAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordMeshToAnimation(USkeletalMeshComponent* PreviewComponent, UAnimSequence* NewAsset)"
  },
  {
    "label": "GetAnimationEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FAnimationEditor>)",
    "insertText": "GetAnimationEditor(const FToolMenuContext& InMenuContext)"
  },
  {
    "label": "HandleOnPreviewSceneSettingsCustomized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnPreviewSceneSettingsCustomized(IDetailLayoutBuilder& DetailBuilder)"
  }
]