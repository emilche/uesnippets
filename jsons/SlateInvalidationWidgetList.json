[
  {
    "label": "FSlateInvalidationWidgetList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetList"
  },
  {
    "label": "FSlateInvalidationWidgetSortOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateInvalidationWidgetSortOrder"
  },
  {
    "label": "FIndexRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexRange"
  },
  {
    "label": "FArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArguments"
  },
  {
    "label": "IProcessChildOrderInvalidationCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IProcessChildOrderInvalidationCallback"
  },
  {
    "label": "FReIndexOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReIndexOperation"
  },
  {
    "label": "FReSortOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReSortOperation"
  },
  {
    "label": "FWidgetAttributeIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetAttributeIterator"
  },
  {
    "label": "FWidgetVolatileUpdateIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetVolatileUpdateIterator"
  },
  {
    "label": "FCutResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCutResult"
  },
  {
    "label": "FArrayNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArrayNode"
  },
  {
    "label": "FIndexRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" FastUpdate / SlateElementSortedArray . h \" # include \" FastUpdate / SlateInvalidationRootHandle . h \" # include \" FastUpdate / SlateInvalidationWidgetIndex . h \" # include \" FastUpdate / SlateInvalidationWidgetSortOrder . h \" # include \" FastUpdate / WidgetUpdateFlags . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / SWidget . h \" # define UE_SLATE_WITH_INVALIDATIONWIDGETLIST_RANGECHECK UE_BUILD_DEBUG # define UE_SLATE_WITH_INVALIDATIONWIDGETLIST_CHILDORDERCHECK UE_BUILD_DEBUG | | UE_BUILD_DEVELOPMENT class FSlateInvalidationWidgetList { struct FSlateInvalidationWidgetSortOrder ; public : using InvalidationWidgetType = FWidgetProxy ; private : using IndexType = FSlateInvalidationWidgetIndex::IndexType ; using ElementListType = TArray<InvalidationWidgetType> ; using WidgetListType = TSlateElementSortedArray<IndexType> ; public : struct FIndexRange { private : FSlateInvalidationWidgetIndex InclusiveMin = FSlateInvalidationWidgetIndex::Invalid ; FSlateInvalidationWidgetIndex InclusiveMax = FSlateInvalidationWidgetIndex::Invalid ; FSlateInvalidationWidgetSortOrder OrderMin ; FSlateInvalidationWidgetSortOrder OrderMax ; public :)",
    "insertText": "FIndexRange()"
  },
  {
    "label": "FIndexRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FIndexRange(const FSlateInvalidationWidgetList& Self, FSlateInvalidationWidgetIndex InFrom, FSlateInvalidationWidgetIndex InEnd) : InclusiveMin(InFrom), InclusiveMax(InEnd) , OrderMin(Self, InFrom), OrderMax(Self, InEnd)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_WITH_INVALIDATIONWIDGETLIST_RANGECHECK)",
    "insertText": "check(OrderMin <= OrderMax)"
  },
  {
    "label": "Include()",
    "kind": "Method",
    "detail": "Function (# endif } [ [ nodiscard ] ] bool)",
    "insertText": "Include(FSlateInvalidationWidgetSortOrder Other)"
  },
  {
    "label": "BuildWidgetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWidgetList(const TSharedRef<SWidget>& Root)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SWidget>)",
    "insertText": "GetRoot()"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const FIndexRange&)",
    "insertText": "GetRange()"
  },
  {
    "label": "FReSortOperation()",
    "kind": "Method",
    "detail": "Function (private : const FIndexRange& Range ; FSlateInvalidationWidgetIndex ReIndexTarget = FSlateInvalidationWidgetIndex::Invalid ; } ; struct FReSortOperation {)",
    "insertText": "FReSortOperation(const FIndexRange& InRange) : Range(InRange)"
  },
  {
    "label": "ProxiesReIndexed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProxiesReIndexed(const FReIndexOperation& Operation)"
  },
  {
    "label": "ProxiesPreResort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProxiesPreResort(const FReSortOperation& Operation)"
  },
  {
    "label": "ProxiesPostResort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProxiesPostResort()"
  },
  {
    "label": "ProxiesBuilt()",
    "kind": "Method",
    "detail": "Function (} # if UE_SLATE_WITH_INVALIDATIONWIDGETLIST_CHILDORDERCHECK void)",
    "insertText": "ProxiesBuilt(const FIndexRange& Range)"
  },
  {
    "label": "ProcessChildOrderInvalidation()",
    "kind": "Method",
    "detail": "Function (} # endif } ; bool)",
    "insertText": "ProcessChildOrderInvalidation(FSlateInvalidationWidgetIndex WidgetIndex, IProcessChildOrderInvalidationCallback& Callback)"
  },
  {
    "label": "ProcessAttributeRegistrationInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAttributeRegistrationInvalidation(const InvalidationWidgetType& InvalidationWidget)"
  },
  {
    "label": "ProcessVolatileUpdateInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessVolatileUpdateInvalidation(InvalidationWidgetType& InvalidationWidget)"
  },
  {
    "label": "ForEachWidget()",
    "kind": "Method",
    "detail": "Function (template<Predicate> void)",
    "insertText": "ForEachWidget(Predicate Pred)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 ArrayIndex = FirstArrayIndex ;)",
    "insertText": "while(ArrayIndex != INDEX_NONE)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ElementListType& ElementList = Data [ ArrayIndex ] . ElementList ; const int32 ElementNum = ElementList .)",
    "insertText": "Num()"
  },
  {
    "label": "Pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pred(*Widget)"
  },
  {
    "label": "ForEachInvalidationWidget()",
    "kind": "Method",
    "detail": "Function (} } ArrayIndex = Data [ ArrayIndex ] . NextArrayIndex ; } } template<Predicate> void)",
    "insertText": "ForEachInvalidationWidget(Predicate Pred)"
  },
  {
    "label": "Pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pred(ElementList[ElementIndex])"
  },
  {
    "label": "ForEachInvalidationWidget()",
    "kind": "Method",
    "detail": "Function (} ArrayIndex = Data [ ArrayIndex ] . NextArrayIndex ; } } template<Predicate> void)",
    "insertText": "ForEachInvalidationWidget(FSlateInvalidationWidgetIndex BellowWidgetIndex, Predicate Pred)"
  },
  {
    "label": "BeginInvalidationWidget()",
    "kind": "Method",
    "detail": "Function (const InvalidationWidgetType&)",
    "insertText": "BeginInvalidationWidget(*this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FSlateInvalidationWidgetIndex EndWidgetIndex = BeginInvalidationWidget . LeafMostChildIndex ;)",
    "insertText": "if(BellowWidgetIndex == EndWidgetIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ArrayIndex = Data [ ArrayIndex ] . NextArrayIndex ; })",
    "insertText": "if(!bSameWidgetArrayIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} ArrayIndex = Data [ ArrayIndex ] . NextArrayIndex ; } {)",
    "insertText": "check(ArrayIndex == EndWidgetIndex.ArrayIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ElementListType& ElementList = Data [ ArrayIndex ] . ElementList ; const int32 ElementNum = EndWidgetIndex . ElementIndex + 1 ;)",
    "insertText": "for(int32 ElementIndex = Data[ArrayIndex].StartIndex; ElementIndex < ElementNum; ++ElementIndex)"
  },
  {
    "label": "FWidgetAttributeIterator()",
    "kind": "Method",
    "detail": "Function (} } } } } struct FWidgetAttributeIterator { private : const FSlateInvalidationWidgetList& WidgetList ; FSlateInvalidationWidgetIndex CurrentWidgetIndex ; FSlateInvalidationWidgetSortOrder CurrentWidgetSortOrder ; int32 AttributeIndex ; FSlateInvalidationWidgetIndex MoveToWidgetIndexOnNextAdvance ; bool bNeedsWidgetFixUp ; public : ~)",
    "insertText": "FWidgetAttributeIterator()"
  },
  {
    "label": "FWidgetAttributeIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWidgetAttributeIterator(const FSlateInvalidationWidgetList& InWidgetList)"
  },
  {
    "label": "FWidgetAttributeIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWidgetAttributeIterator(const FWidgetAttributeIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWidgetAttributeIterator&)",
    "insertText": "operator(const FWidgetAttributeIterator&)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(FSlateInvalidationWidgetIndex SeekTo)"
  },
  {
    "label": "GetCurrentIndex()",
    "kind": "Method",
    "detail": "Function (FSlateInvalidationWidgetIndex)",
    "insertText": "GetCurrentIndex()"
  },
  {
    "label": "AdvanceToNextSibling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceToNextSibling()"
  },
  {
    "label": "AdvanceToNextParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceToNextParent()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CreateWidgetAttributeIterator()",
    "kind": "Method",
    "detail": "Function (} ; FWidgetAttributeIterator)",
    "insertText": "CreateWidgetAttributeIterator()"
  },
  {
    "label": "FWidgetVolatileUpdateIterator()",
    "kind": "Method",
    "detail": "Function (} public : struct FWidgetVolatileUpdateIterator { private : const FSlateInvalidationWidgetList& WidgetList ; FSlateInvalidationWidgetIndex CurrentWidgetIndex ; int32 AttributeIndex ; bool bSkipCollapsed ; public :)",
    "insertText": "FWidgetVolatileUpdateIterator(const FSlateInvalidationWidgetList& InWidgetList, bool bInSkipCollapsed)"
  },
  {
    "label": "SkipToNextExpend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipToNextExpend()"
  },
  {
    "label": "AdvanceArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceArray(int32 ArrayIndex)"
  },
  {
    "label": "CreateWidgetVolatileUpdateIterator()",
    "kind": "Method",
    "detail": "Function (} ; FWidgetVolatileUpdateIterator)",
    "insertText": "CreateWidgetVolatileUpdateIterator(bool bSkipCollapsed)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : InvalidationWidgetType&)",
    "insertText": "operator(const FSlateInvalidationWidgetIndex Index)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_WITH_INVALIDATIONWIDGETLIST_RANGECHECK)",
    "insertText": "check(IsValidIndex(Index))"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (# endif return Data [ Index . ArrayIndex ] . ElementList [ Index . ElementIndex ] ; } bool)",
    "insertText": "IsValidIndex(const FSlateInvalidationWidgetIndex Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} return false ; } [ [ nodiscard ] ] bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FirstIndex()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "FirstIndex()"
  },
  {
    "label": "LastIndex()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "LastIndex()"
  },
  {
    "label": "IncrementIndex()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "IncrementIndex(FSlateInvalidationWidgetIndex Index)"
  },
  {
    "label": "DecrementIndex()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "DecrementIndex(FSlateInvalidationWidgetIndex Index)"
  },
  {
    "label": "FindNextSibling()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSlateInvalidationWidgetIndex)",
    "insertText": "FindNextSibling(FSlateInvalidationWidgetIndex WidgetIndex)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FindWidget()",
    "kind": "Method",
    "detail": "Function (public : # if UE_SLATE_WITH_INVALIDATIONWIDGETLIST_DEBUGGING FSlateInvalidationWidgetIndex)",
    "insertText": "FindWidget(const SWidget& Widget)"
  },
  {
    "label": "RemoveWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidget(const FSlateInvalidationWidgetIndex ToRemove)"
  },
  {
    "label": "RemoveWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidget(const SWidget& WidgetToRemove)"
  },
  {
    "label": "FindChildren()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TArray<TSharedPtr<SWidget>>)",
    "insertText": "FindChildren(const SWidget& Widget)"
  },
  {
    "label": "DeepCompare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeepCompare(const FSlateInvalidationWidgetList& Other)"
  },
  {
    "label": "LogWidgetsList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogWidgetsList(bool bOnlyVisible)"
  },
  {
    "label": "VerifyWidgetsIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyWidgetsIndex()"
  },
  {
    "label": "VerifyProxiesWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyProxiesWidget()"
  },
  {
    "label": "VerifySortOrder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifySortOrder()"
  },
  {
    "label": "VerifyElementIndexList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyElementIndexList()"
  },
  {
    "label": "ShouldDoRecursion()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "ShouldDoRecursion(const SWidget& Widget)"
  },
  {
    "label": "ShouldDoRecursion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldDoRecursion(const TSharedRef<const SWidget>& Widget)"
  },
  {
    "label": "ShouldBeAdded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldBeAdded(const SWidget& Widget)"
  },
  {
    "label": "ShouldBeAdded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldBeAdded(const TSharedRef<const SWidget>& Widget)"
  },
  {
    "label": "ShouldBeAddedToAttributeList()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldBeAddedToAttributeList(const TSharedRef<const SWidget>& Widget)"
  },
  {
    "label": "HasVolatileUpdateFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVolatileUpdateFlags(EWidgetUpdateFlags UpdateFlags)"
  },
  {
    "label": "ShouldBeAddedToVolatileUpdateList()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldBeAddedToVolatileUpdateList(const SWidget& Widget)"
  },
  {
    "label": "ShouldBeAddedToVolatileUpdateList()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldBeAddedToVolatileUpdateList(const TSharedRef<const SWidget>& Widget)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} private : template<. . . ArgsType> FSlateInvalidationWidgetIndex)",
    "insertText": "Emplace(ArgsType&&... Args)"
  },
  {
    "label": "AddArrayNodeIfNeeded()",
    "kind": "Method",
    "detail": "Function (const IndexType ArrayIndex =)",
    "insertText": "AddArrayNodeIfNeeded(true)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (const IndexType)",
    "insertText": "ElementIndex(IndexType)Data[ArrayIndex].ElementList.Emplace(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "InsertArrayNodeIfNeeded()",
    "kind": "Method",
    "detail": "Function (const IndexType ArrayIndex =)",
    "insertText": "InsertArrayNodeIfNeeded(AfterArrayIndex, true)"
  },
  {
    "label": "AddArrayNodeIfNeeded()",
    "kind": "Method",
    "detail": "Function (int32 OldElementIndexStart = INDEX_NONE ; } ; private : [ [ nodiscard ] ] IndexType)",
    "insertText": "AddArrayNodeIfNeeded(bool bReserveElementList)"
  },
  {
    "label": "InsertArrayNodeIfNeeded()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] IndexType)",
    "insertText": "InsertArrayNodeIfNeeded(IndexType AfterArrayIndex, bool bReserveElementList)"
  },
  {
    "label": "InsertDataNodeAfter()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] IndexType)",
    "insertText": "InsertDataNodeAfter(IndexType AfterIndex, bool bReserveElementList)"
  },
  {
    "label": "RemoveDataNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDataNode(IndexType Index)"
  },
  {
    "label": "RebuildOrderIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildOrderIndex(IndexType StartFrom)"
  },
  {
    "label": "UpdateParentLeafIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParentLeafIndex(const InvalidationWidgetType& InvalidationWidget, FSlateInvalidationWidgetIndex OldIndex, FSlateInvalidationWidgetIndex NewIndex)"
  },
  {
    "label": "CutArray()",
    "kind": "Method",
    "detail": "Function (FCutResult)",
    "insertText": "CutArray(const FSlateInvalidationWidgetIndex WhereToCut)"
  },
  {
    "label": "Internal_BuildWidgetList_Recursive()",
    "kind": "Method",
    "detail": "Function (private : FSlateInvalidationWidgetIndex)",
    "insertText": "Internal_BuildWidgetList_Recursive(SWidget& Widget, FSlateInvalidationWidgetIndex ParentIndex, IndexType& LastestIndex, FSlateInvalidationWidgetVisibility ParentVisibility, bool bParentVolatile)"
  },
  {
    "label": "Internal_RebuildWidgetListTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Internal_RebuildWidgetListTree(SWidget& Widget, int32 ChildAtIndex)"
  },
  {
    "label": "Internal_FindChildren()",
    "kind": "Method",
    "detail": "Function (using FFindChildrenElement = TPair<SWidget*,FSlateInvalidationWidgetIndex> ; void)",
    "insertText": "Internal_FindChildren(FSlateInvalidationWidgetIndex WidgetIndex, TArray<FFindChildrenElement, FConcurrentLinearArrayAllocator>& Widgets)"
  },
  {
    "label": "Internal_RemoveRangeFromSameParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Internal_RemoveRangeFromSameParent(const FIndexRange Range)"
  },
  {
    "label": "Internal_CutArray()",
    "kind": "Method",
    "detail": "Function (FCutResult)",
    "insertText": "Internal_CutArray(const FSlateInvalidationWidgetIndex WhereToCut)"
  },
  {
    "label": "FArrayNode()",
    "kind": "Method",
    "detail": "Function (private : struct FArrayNode {)",
    "insertText": "FArrayNode()"
  },
  {
    "label": "RemoveElementIndexBiggerOrEqualThan()",
    "kind": "Method",
    "detail": "Function (int32 PreviousArrayIndex = INDEX_NONE ; int32 NextArrayIndex = INDEX_NONE ; int32 SortOrder = 0 ; IndexType StartIndex = 0 ; ElementListType ElementList ; WidgetListType ElementIndexList_WidgetWithRegisteredSlateAttribute ; WidgetListType ElementIndexList_VolatileUpdateWidget ; void)",
    "insertText": "RemoveElementIndexBiggerOrEqualThan(IndexType ElementIndex)"
  },
  {
    "label": "RemoveElementIndexBetweenOrEqualThan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElementIndexBetweenOrEqualThan(IndexType StartElementIndex, IndexType EndElementIndex)"
  }
]