[
  {
    "label": "RTCStatsObtainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCStatsObtainer"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_RTC_STATS_OBTAINER_H_ # define PC_TEST_RTC_STATS_OBTAINER_H_ # include \" api / make_ref_counted . h \" # include \" api / sequence_checker . h \" # include \" api / stats / rtc_stats_collector_callback . h \" # include \" api / stats / rtc_stats_report . h \" # include \" rtc_base / gunit . h \" namespace webrtc { class RTCStatsObtainer : public RTCStatsCollectorCallback { public : rtc::scoped_refptr<RTCStatsObtainer>)",
    "insertText": "Create(rtc::scoped_refptr<const RTCStatsReport>* report_ptr = nullptr)"
  },
  {
    "label": "OnStatsDelivered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStatsDelivered(const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(thread_checker_.IsCurrent())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (report_ = report ;)",
    "insertText": "if(report_ptr_)"
  },
  {
    "label": "report()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<const RTCStatsReport>)",
    "insertText": "report()"
  }
]