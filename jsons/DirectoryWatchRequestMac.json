[
  {
    "label": "FDirectoryWatchRequestMac",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDirectoryWatchRequestMac"
  },
  {
    "label": "FDirectoryWatchRequestMac()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" IDirectoryWatcher . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include<CoreServices / CoreServices . h> # include \" Misc / ScopeRWLock . h \" class FDirectoryWatchRequestMac { public :)",
    "insertText": "FDirectoryWatchRequestMac()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const FString& InDirectory)"
  },
  {
    "label": "AddDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddDelegate(const IDirectoryWatcher::FDirectoryChanged& InDelegate, uint32 Flags)"
  },
  {
    "label": "RemoveDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDelegate(FDelegateHandle InHandle)"
  },
  {
    "label": "HasDelegates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDelegates()"
  },
  {
    "label": "EndWatchRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWatchRequest()"
  },
  {
    "label": "ProcessPendingNotifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingNotifications()"
  },
  {
    "label": "DirectoryWatchMacCallback()",
    "kind": "Method",
    "detail": "Function (private : FSEventStreamRef EventStream ; bool bRunning ; bool bEndWatchRequestInvoked ; typedef TPair<IDirectoryWatcher::FDirectoryChanged,uint32> FWatchDelegate ; TArray<FWatchDelegate> Delegates ; TArray<TPair<FFileChangeData,bool>> FileChanges ; FRWLock FileChangesLock ; void)",
    "insertText": "DirectoryWatchMacCallback(ConstFSEventStreamRef StreamRef, void* WatchRequestPtr, size_t EventCount, void* EventPaths, const FSEventStreamEventFlags EventFlags[], const FSEventStreamEventId EventIDs[])"
  },
  {
    "label": "ProcessChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessChanges(size_t EventCount, void* EventPaths, const FSEventStreamEventFlags EventFlags[])"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(void)"
  }
]