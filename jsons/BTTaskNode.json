[
  {
    "label": "UBTService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTService"
  },
  {
    "label": "FBTTaskMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTTaskMemory"
  },
  {
    "label": "UBTTaskNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTTaskNode"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BehaviorTree / BTNode . h \" # include \" BTTaskNode . generated . h \" class UBTService ; struct FBTTaskMemory : public FBTInstancedNodeMemory { float NextTickRemainingTime = 0 . f ; float AccumulatedDeltaTime = 0 . f ; } ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "GetSpecialMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetSpecialMemorySize()"
  },
  {
    "label": "AbortTask()",
    "kind": "Method",
    "detail": "Function (protected : EBTNodeResult::Type)",
    "insertText": "AbortTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "SetNextTickTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextTickTime(uint8* NodeMemory, float RemainingTime)"
  },
  {
    "label": "GetNodeIconName()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR FName)",
    "insertText": "GetNodeIconName()"
  },
  {
    "label": "OnGameplayTaskDeactivated()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnGameplayTaskDeactivated(UGameplayTask& Task)"
  },
  {
    "label": "ReceivedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedMessage(UBrainComponent* BrainComp, const FAIMessage& Message)"
  },
  {
    "label": "WrappedExecuteTask()",
    "kind": "Method",
    "detail": "Function (EBTNodeResult::Type)",
    "insertText": "WrappedExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "WrappedAbortTask()",
    "kind": "Method",
    "detail": "Function (EBTNodeResult::Type)",
    "insertText": "WrappedAbortTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "WrappedTickTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrappedTickTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds, float& NextNeededDeltaTime)"
  },
  {
    "label": "WrappedOnTaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WrappedOnTaskFinished(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTNodeResult::Type TaskResult)"
  },
  {
    "label": "FinishLatentTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishLatentTask(UBehaviorTreeComponent& OwnerComp, EBTNodeResult::Type TaskResult)"
  },
  {
    "label": "FinishLatentAbort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishLatentAbort(UBehaviorTreeComponent& OwnerComp)"
  },
  {
    "label": "ShouldIgnoreRestartSelf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIgnoreRestartSelf()"
  },
  {
    "label": "TickTask()",
    "kind": "Method",
    "detail": "Function (uint32 bNotifyTick : 1 ; uint32 bNotifyTaskFinished : 1 ; void)",
    "insertText": "TickTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds)"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessage(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, FName Message, int32 RequestID, bool bSuccess)"
  },
  {
    "label": "OnTaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskFinished(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTNodeResult::Type TaskResult)"
  },
  {
    "label": "WaitForMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForMessage(UBehaviorTreeComponent& OwnerComp, FName MessageType)"
  },
  {
    "label": "WaitForMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForMessage(UBehaviorTreeComponent& OwnerComp, FName MessageType, int32 RequestID)"
  },
  {
    "label": "StopWaitingForMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWaitingForMessages(UBehaviorTreeComponent& OwnerComp)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (template<TickTask,OnTaskFinished> void)",
    "insertText": "InitNotifyFlags(TickTask, OnTaskFinished)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyTick = ! std::is_same_v<)",
    "insertText": "decltype(&UBTTaskNode::TickTask)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyTaskFinished = ! std::is_same_v<)",
    "insertText": "decltype(&UBTTaskNode::OnTaskFinished)"
  },
  {
    "label": "INIT_TASK_NODE_NOTIFY_FLAGS()",
    "kind": "Method",
    "detail": "Function (} uint8 bTickIntervals : 1 ; } ; # define)",
    "insertText": "INIT_TASK_NODE_NOTIFY_FLAGS()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using NodeType = TRemovePointer<)",
    "insertText": "decltype(this)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "InitNotifyFlags(&NodeType::TickTask, &NodeType::OnTaskFinished)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) FORCEINLINE bool UBTTaskNode::ShouldIgnoreRestartSelf()"
  }
]