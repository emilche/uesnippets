[
  {
    "label": "MoveOnlyInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MoveOnlyInt"
  },
  {
    "label": "MoveOnlyInt()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_CONTAINERS_MOVE_ONLY_INT_H_ # define RTC_BASE_CONTAINERS_MOVE_ONLY_INT_H_ namespace webrtc { class MoveOnlyInt { public :)",
    "insertText": "MoveOnlyInt(int data = 1) : data_(data)"
  },
  {
    "label": "MoveOnlyInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MoveOnlyInt(const MoveOnlyInt& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MoveOnlyInt&)",
    "insertText": "operator(const MoveOnlyInt& other)"
  },
  {
    "label": "MoveOnlyInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveOnlyInt(MoveOnlyInt&& other) : data_(other.data_)"
  },
  {
    "label": "MoveOnlyInt()",
    "kind": "Method",
    "detail": "Function (other . data_ = 0 ; } ~)",
    "insertText": "MoveOnlyInt()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (data_ = 0 ; } MoveOnlyInt&)",
    "insertText": "operator(MoveOnlyInt&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (data_ = other . data_ ; other . data_ = 0 ; return* this ; } bool)",
    "insertText": "operator(const MoveOnlyInt& lhs, const MoveOnlyInt& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const MoveOnlyInt& lhs, int rhs)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "data()"
  }
]