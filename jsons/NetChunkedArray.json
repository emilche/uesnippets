[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TNetChunkedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNetChunkedArray"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ChunkedArray . h \" namespace UE::Net { enum class EInitMemory : uint8 { Zero,Constructor } ; template<InElementType,uint32 ElementsPerChunk = 1 0 0,AllocatorType = FDefaultAllocator> class TNetChunkedArray : public TChunkedArray<InElementType,)",
    "insertText": "sizeof(InElementType)"
  },
  {
    "label": "TNetChunkedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TNetChunkedArray(int32 InNumElements = 0, EInitMemory InitMemory = EInitMemory::Constructor)"
  },
  {
    "label": "NumChunks()",
    "kind": "Method",
    "detail": "Function (NumElementsPerChunk)",
    "insertText": "NumChunks(this->NumElements + this->NumElementsPerChunk - 1)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (this -> Chunks .)",
    "insertText": "Empty(NumChunks)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Super::FChunk* StartChunks = new Super::FChunk [ NumChunks ] ;)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < NumChunks; ChunkIndex++)"
  },
  {
    "label": "CurrentChunk()",
    "kind": "Method",
    "detail": "Function (Super::FChunk*)",
    "insertText": "CurrentChunk(StartChunks + ChunkIndex)"
  },
  {
    "label": "FChunk()",
    "kind": "Method",
    "detail": "Function (FMemory::Memset<)",
    "insertText": "FChunk(*CurrentChunk, 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} this -> Chunks .)",
    "insertText": "Add(CurrentChunk)"
  },
  {
    "label": "TNetChunkedArray()",
    "kind": "Method",
    "detail": "Function (} NumPreAllocatedChunks = NumChunks ; })",
    "insertText": "TNetChunkedArray(const TNetChunkedArray& OtherChunkedArray)"
  },
  {
    "label": "CopyIncludingPreAllocatedChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyIncludingPreAllocatedChunks(OtherChunkedArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TNetChunkedArray&)",
    "insertText": "operator(const TNetChunkedArray& OtherChunkedArray)"
  },
  {
    "label": "MoveIncludingPreAllocatedChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveIncludingPreAllocatedChunks(OtherChunkedArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TNetChunkedArray&)",
    "insertText": "operator(TNetChunkedArray&& OtherChunkedArray)"
  },
  {
    "label": "TNetChunkedArray()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ~)",
    "insertText": "TNetChunkedArray()"
  },
  {
    "label": "InvalidatePreAllocatedChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePreAllocatedChunks()"
  },
  {
    "label": "NumChunks()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumChunks()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Capacity()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 Slack = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(int32 NewSize = 0)"
  },
  {
    "label": "AddToIndexUninitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToIndexUninitialized(int32 Index)"
  },
  {
    "label": "NewElementCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NewElementCount(Index - this->NumElements)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Add(NewElementCount)"
  },
  {
    "label": "AddToIndexZeroed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddToIndexZeroed(int32 Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 OldChunkCount = this -> Chunks .)",
    "insertText": "Num()"
  },
  {
    "label": "AddToIndexUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToIndexUninitialized(Index)"
  },
  {
    "label": "FChunk()",
    "kind": "Method",
    "detail": "Function (FMemory::Memset<)",
    "insertText": "FChunk(*this->Chunks.GetData()[ChunkIndex], 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Super::FChunk* FirstChunk = nullptr ;)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < NumPreAllocatedChunks; ChunkIndex++)"
  },
  {
    "label": "FirstChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FirstChunk(FirstChunk == nullptr) ? this->Chunks.GetData()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (this -> Chunks .)",
    "insertText": "GetData()"
  },
  {
    "label": "CopyIncludingPreAllocatedChunks()",
    "kind": "Method",
    "detail": "Function (} delete [ ] FirstChunk ; NumPreAllocatedChunks = 0 ; } void)",
    "insertText": "CopyIncludingPreAllocatedChunks(const TNetChunkedArray& ChunkedArray)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Super::FChunk* PreAllocatedChunks = new Super::FChunk [ this -> NumPreAllocatedChunks ] ;)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < this->NumPreAllocatedChunks; ChunkIndex++)"
  },
  {
    "label": "CurrentChunk()",
    "kind": "Method",
    "detail": "Function (Super::FChunk*)",
    "insertText": "CurrentChunk(PreAllocatedChunks + ChunkIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 ChunkIndex = this->NumPreAllocatedChunks; ChunkIndex < NumChunks; ChunkIndex++)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this -> Chunks .)",
    "insertText": "Add(new typename Super::FChunk(*CurrentChunk))"
  },
  {
    "label": "MoveIncludingPreAllocatedChunks()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveIncludingPreAllocatedChunks(TNetChunkedArray& ChunkedArray)"
  },
  {
    "label": "Chunks()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Chunks(typename Super::ChunksType&&)"
  }
]