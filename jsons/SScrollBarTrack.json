[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SScrollBarTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBarTrack"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "FTrackSizeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackSizeInfo"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class SScrollBarTrack : public SPanel { public : class FSlot : public TSlotBase<FSlot> { public :)",
    "insertText": "FSlot() : TSlotBase<FSlot>()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SScrollBarTrack) : _TopSlot() , _ThumbSlot() , _BottomSlot() , _Orientation(Orient_Vertical)"
  },
  {
    "label": "SLATE_NAMED_SLOT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_NAMED_SLOT(FArguments, TopSlot) SLATE_NAMED_SLOT(FArguments, ThumbSlot) SLATE_NAMED_SLOT(FArguments, BottomSlot) SLATE_ARGUMENT(EOrientation, Orientation) SLATE_END_ARGS() SScrollBarTrack() : Children(this)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "FTrackSizeInfo()",
    "kind": "Method",
    "detail": "Function (struct FTrackSizeInfo {)",
    "insertText": "FTrackSizeInfo(const FGeometry& TrackGeometry, EOrientation InOrientation, float InMinThumbSize, float ThumbSizeAsFractionOfTrack, float ThumbOffsetAsFractionOfTrack)"
  },
  {
    "label": "BiasedTrackSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BiasedTrackSize((InOrientation == Orient_Horizontal) ? TrackGeometry.GetLocalSize().X : TrackGeometry.GetLocalSize().Y)"
  },
  {
    "label": "ThumbSizeAsFractionOfTrack()",
    "kind": "Method",
    "detail": "Function (const float AccurateThumbSize =)",
    "insertText": "ThumbSizeAsFractionOfTrack(BiasedTrackSize)"
  },
  {
    "label": "GetThumbEnd()",
    "kind": "Method",
    "detail": "Function (ThumbStart = BiasedTrackSize* ThumbOffsetAsFractionOfTrack ; ThumbSize = InMinThumbSize + AccurateThumbSize ; } float BiasedTrackSize ; float ThumbStart ; float ThumbSize ; float)",
    "insertText": "GetThumbEnd()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "SetSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizes(float InThumbOffsetFraction, float InThumbSizeFraction)"
  },
  {
    "label": "IsNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNeeded()"
  },
  {
    "label": "DistanceFromTop()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DistanceFromTop()"
  },
  {
    "label": "DistanceFromBottom()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DistanceFromBottom()"
  },
  {
    "label": "GetMinThumbSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinThumbSize()"
  },
  {
    "label": "GetThumbSizeFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetThumbSizeFraction()"
  },
  {
    "label": "SetIsAlwaysVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsAlwaysVisible(bool InIsAlwaysVisible)"
  }
]