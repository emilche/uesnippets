[
  {
    "label": "FD3D12CommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandList"
  },
  {
    "label": "FD3D12Resource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Resource"
  },
  {
    "label": "FD3D12StateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12StateCache"
  },
  {
    "label": "FD3D12CommandListManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandListManager"
  },
  {
    "label": "FD3D12CommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContext"
  },
  {
    "label": "FD3D12SegListAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SegListAllocator"
  },
  {
    "label": "FD3D12PoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12PoolAllocator"
  },
  {
    "label": "FD3D12ComputePipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ComputePipelineState"
  },
  {
    "label": "FD3D12WorkGraphPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12WorkGraphPipelineState"
  },
  {
    "label": "FD3D12GraphicsPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12GraphicsPipelineState"
  },
  {
    "label": "FD3D12ResourceDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceDesc"
  },
  {
    "label": "FD3D12SyncPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SyncPoint"
  },
  {
    "label": "FD3D12RayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingGeometry"
  },
  {
    "label": "FD3D12RayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingScene"
  },
  {
    "label": "FD3D12RayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingPipelineState"
  },
  {
    "label": "FD3D12RayTracingShaderBindingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingShaderBindingTable"
  },
  {
    "label": "FD3D12RayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingShader"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12PendingResourceBarrier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12PendingResourceBarrier"
  },
  {
    "label": "FD3D12Heap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Heap"
  },
  {
    "label": "TZeroedStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TZeroedStruct"
  },
  {
    "label": "FD3D12ReservedResourceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ReservedResourceData"
  },
  {
    "label": "FD3D12ResourceTypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceTypeHelper"
  },
  {
    "label": "FD3D12BuddyAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BuddyAllocator"
  },
  {
    "label": "FD3D12BuddyAllocatorPrivateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12BuddyAllocatorPrivateData"
  },
  {
    "label": "FD3D12BlockAllocatorPrivateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12BlockAllocatorPrivateData"
  },
  {
    "label": "FD3D12SegListAllocatorPrivateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12SegListAllocatorPrivateData"
  },
  {
    "label": "FD3D12PoolAllocatorPrivateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PoolAllocatorPrivateData"
  },
  {
    "label": "FD3D12ResourceAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceAllocator"
  },
  {
    "label": "FD3D12BaseShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BaseShaderResource"
  },
  {
    "label": "FD3D12ResourceLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceLocation"
  },
  {
    "label": "EAllocatorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAllocatorType"
  },
  {
    "label": "ID3D12ResourceAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ID3D12ResourceAllocator"
  },
  {
    "label": "FD3D12LockedResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12LockedResource"
  },
  {
    "label": "FD3D12ShaderResourceRenameListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ShaderResourceRenameListener"
  },
  {
    "label": "FD3D12UniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UniformBuffer"
  },
  {
    "label": "FD3D12ConstantBufferView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ConstantBufferView"
  },
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FD3D12Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Buffer"
  },
  {
    "label": "FD3D12ResourceBarrierBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceBarrierBatcher"
  },
  {
    "label": "FD3D12ResourceBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ResourceBarrier"
  },
  {
    "label": "FD3D12QueryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12QueryAllocator"
  },
  {
    "label": "FD3D12StagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12StagingBuffer"
  },
  {
    "label": "FD3D12DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DynamicRHI"
  },
  {
    "label": "FD3D12ShaderBundle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ShaderBundle"
  },
  {
    "label": "FD3D12GPUFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12GPUFence"
  },
  {
    "label": "TD3D12ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ResourceTraits"
  },
  {
    "label": "D3D12_RESOURCE_STATES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoundShaderStateCache . h \" # include \" D3D12DirectCommandListManager . h \" # include \" D3D12NvidiaExtensions . h \" # include \" D3D12Residency . h \" # include \" D3D12ShaderResources . h \" # include \" D3D12State . h \" # include \" D3D12Util . h \" # include \" RHIPoolAllocator . h \" # include \" Templates / UniquePtr . h \" D3D12_RESOURCE_STATES BackBufferBarrierWriteTransitionTargets =)",
    "insertText": "D3D12_RESOURCE_STATES(uint32(D3D12_RESOURCE_STATE_RENDER_TARGET) | uint32(D3D12_RESOURCE_STATE_UNORDERED_ACCESS) | uint32(D3D12_RESOURCE_STATE_STREAM_OUT) | uint32(D3D12_RESOURCE_STATE_COPY_DEST) | uint32(D3D12_RESOURCE_STATE_RESOLVE_DEST))"
  },
  {
    "label": "ApplyCustomTextureLayout()",
    "kind": "Method",
    "detail": "Function (class FD3D12CommandList ; class FD3D12Resource ; class FD3D12StateCache ; class FD3D12CommandListManager ; class FD3D12CommandContext ; class FD3D12SegListAllocator ; class FD3D12PoolAllocator ; struct FD3D12ComputePipelineState ; struct FD3D12WorkGraphPipelineState ; struct FD3D12GraphicsPipelineState ; struct FD3D12ResourceDesc ; class FD3D12SyncPoint ; using FD3D12SyncPointRef = TRefCountPtr<FD3D12SyncPoint> ; # if D3D12_RHI_RAYTRACING class FD3D12RayTracingGeometry ; class FD3D12RayTracingScene ; class FD3D12RayTracingPipelineState ; class FD3D12RayTracingShaderBindingTable ; class FD3D12RayTracingShader ; # endif # ifndef D3D12_WITH_CUSTOM_TEXTURE_LAYOUT # define D3D12_WITH_CUSTOM_TEXTURE_LAYOUT 0 # endif # if D3D12_WITH_CUSTOM_TEXTURE_LAYOUT void)",
    "insertText": "ApplyCustomTextureLayout(FD3D12ResourceDesc& TextureLayout, FD3D12Adapter& Adapter)"
  },
  {
    "label": "FD3D12PendingResourceBarrier()",
    "kind": "Method",
    "detail": "Function (# endif enum class ED3D12ResourceStateMode { Default,SingleState,MultiState,} ; class FD3D12PendingResourceBarrier { public : FD3D12Resource* Resource ; D3D12_RESOURCE_STATES State ; uint32 SubResource ;)",
    "insertText": "FD3D12PendingResourceBarrier(FD3D12Resource* Resource, D3D12_RESOURCE_STATES State, uint32 SubResource) : Resource(Resource) , State(State) , SubResource(SubResource)"
  },
  {
    "label": "FD3D12Heap()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12Heap : public FThreadSafeRefCountedObject,public FD3D12DeviceChild,public FD3D12MultiNodeGPUObject { public :)",
    "insertText": "FD3D12Heap(FD3D12Device* Parent, FRHIGPUMask VisibleNodes, HeapId InTraceParentHeapId = EMemoryTraceRootHeap::VideoMemory)"
  },
  {
    "label": "FD3D12Heap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12Heap()"
  },
  {
    "label": "GetHeap()",
    "kind": "Method",
    "detail": "Function (ID3D12Heap*)",
    "insertText": "GetHeap()"
  },
  {
    "label": "SetHeap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeap(ID3D12Heap* HeapIn, const TCHAR* const InName, bool bTrack = true, bool bForceGetGPUAddress = false)"
  },
  {
    "label": "BeginTrackingResidency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingResidency(uint64 Size)"
  },
  {
    "label": "DisallowTrackingResidency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowTrackingResidency()"
  },
  {
    "label": "DeferDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferDelete()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_RESIDENCY_MANAGEMENT)",
    "insertText": "if(bRequiresResidencyTracking)"
  },
  {
    "label": "GetGPUVirtualAddress()",
    "kind": "Method",
    "detail": "Function (} else # endif { return { } ; } } D3D12_GPU_VIRTUAL_ADDRESS)",
    "insertText": "GetGPUVirtualAddress()"
  },
  {
    "label": "GetIsTransient()",
    "kind": "Method",
    "detail": "Function (bIsTransient = bInIsTransient ; } bool)",
    "insertText": "GetIsTransient()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TZeroedStruct { TZeroedStruct<)",
    "insertText": "T()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(T))"
  },
  {
    "label": "FD3D12ResourceDesc()",
    "kind": "Method",
    "detail": "Function (} } ; struct FD3D12ResourceDesc : public TZeroedStruct<FD3D12ResourceDesc>,D3D12_RESOURCE_DESC {)",
    "insertText": "FD3D12ResourceDesc() : TZeroedStruct<FD3D12ResourceDesc>()"
  },
  {
    "label": "FD3D12ResourceDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12ResourceDesc(const CD3DX12_RESOURCE_DESC& Other) : TZeroedStruct<FD3D12ResourceDesc>() , D3D12_RESOURCE_DESC(Other)"
  },
  {
    "label": "FD3D12ResourceDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12ResourceDesc(const D3D12_RESOURCE_DESC& Other) : TZeroedStruct<FD3D12ResourceDesc>() , D3D12_RESOURCE_DESC(Other)"
  },
  {
    "label": "NeedsUAVAliasWorkarounds()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat PixelFormat { PF_Unknown } ; EPixelFormat UAVPixelFormat { PF_Unknown } ; # if D3D12RHI_NEEDS_VENDOR_EXTENSIONS bool bRequires64BitAtomicSupport : 1 = false ; # endif bool bReservedResource : 1 = false ; bool bBackBuffer : 1 = false ; bool bExternal : 1 = false ; # if D3D12RHI_SUPPORTS_UNCOMPRESSED_UAV bool)",
    "insertText": "NeedsUAVAliasWorkarounds()"
  },
  {
    "label": "FD3D12Resource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12Resource(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, ID3D12Resource* InResource, D3D12_RESOURCE_STATES InInitialResourceState, FD3D12ResourceDesc const& InDesc, FD3D12Heap* InHeap = nullptr, D3D12_HEAP_TYPE InHeapType = D3D12_HEAP_TYPE_DEFAULT)"
  },
  {
    "label": "FD3D12Resource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12Resource(FD3D12Device* ParentDevice, FRHIGPUMask VisibleNodes, ID3D12Resource* InResource, D3D12_RESOURCE_STATES InInitialResourceState, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InDefaultResourceState, FD3D12ResourceDesc const& InDesc, FD3D12Heap* InHeap, D3D12_HEAP_TYPE InHeapType)"
  },
  {
    "label": "FD3D12Resource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12Resource()"
  },
  {
    "label": "ID3D12Resource()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "ID3D12Resource()"
  },
  {
    "label": "GetUAVAccessResource()",
    "kind": "Method",
    "detail": "Function (} ID3D12Resource*)",
    "insertText": "GetUAVAccessResource()"
  },
  {
    "label": "SetUAVAccessResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUAVAccessResource(ID3D12Resource* InUAVAccessResource)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (UAVAccessResource = InUAVAccessResource ; } void*)",
    "insertText": "Map(const D3D12_RANGE* ReadRange = nullptr)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ResourceBaseAddress)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (} + + NumMapCalls ; return ResourceBaseAddress ; } void)",
    "insertText": "Unmap()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - NumMapCalls ;)",
    "insertText": "if(NumMapCalls == 0)"
  },
  {
    "label": "Unmap()",
    "kind": "Method",
    "detail": "Function (Resource ->)",
    "insertText": "Unmap(0, nullptr)"
  },
  {
    "label": "GetPageable()",
    "kind": "Method",
    "detail": "Function (ResourceBaseAddress = nullptr ; } } ID3D12Pageable*)",
    "insertText": "GetPageable()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (const FD3D12ResourceDesc&)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetResourceBaseAddress()",
    "kind": "Method",
    "detail": "Function (GPUVirtualAddress = Value ; } void*)",
    "insertText": "GetResourceBaseAddress()"
  },
  {
    "label": "GetPlaneCount()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetPlaneCount()"
  },
  {
    "label": "RequiresResourceStateTracking()",
    "kind": "Method",
    "detail": "Function (CompressedState = State ; } # endif bool)",
    "insertText": "RequiresResourceStateTracking()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (DebugName =)",
    "insertText": "FName(Name)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(Resource, Name)"
  },
  {
    "label": "ShouldDeferDelete()",
    "kind": "Method",
    "detail": "Function (bDeferDelete = false ; } bool)",
    "insertText": "ShouldDeferDelete()"
  },
  {
    "label": "IsReservedResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReservedResource()"
  },
  {
    "label": "IsPlacedResource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlacedResource()"
  },
  {
    "label": "StartTrackingForResidency()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartTrackingForResidency()"
  },
  {
    "label": "IsResident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResident()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_RESIDENCY_MANAGEMENT)",
    "insertText": "if(NeedsDeferredResidencyUpdate())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_RESIDENCY_MANAGEMENT)",
    "insertText": "if(!bRequiresResidencyTracking)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsReservedResource())"
  },
  {
    "label": "FD3D12ResourceTypeHelper()",
    "kind": "Method",
    "detail": "Function (} # else return { } ; # endif } struct FD3D12ResourceTypeHelper {)",
    "insertText": "FD3D12ResourceTypeHelper(const FD3D12ResourceDesc& Desc, D3D12_HEAP_TYPE HeapType) : bSRV(!EnumHasAnyFlags(Desc.Flags, D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE)), bDSV(EnumHasAnyFlags(Desc.Flags, D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL)), bRTV(EnumHasAnyFlags(Desc.Flags, D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET)), bUAV(EnumHasAnyFlags(Desc.Flags, D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS) || Desc.NeedsUAVAliasWorkarounds()), bWritable(bDSV || bRTV || bUAV), bSRVOnly(bSRV && !bWritable), bBuffer(Desc.Dimension == D3D12_RESOURCE_DIMENSION_BUFFER), bReadBackResource(HeapType == D3D12_HEAP_TYPE_READBACK)"
  },
  {
    "label": "GetOptimalInitialState()",
    "kind": "Method",
    "detail": "Function (} const D3D12_RESOURCE_STATES)",
    "insertText": "GetOptimalInitialState(ERHIAccess InResourceState, bool bAccurateWriteableStates)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(bSRVOnly)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bWritable)"
  },
  {
    "label": "InitalizeResourceState()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitalizeResourceState(D3D12_RESOURCE_STATES InInitialState, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InDefaultState)"
  },
  {
    "label": "GetMipLevels()",
    "kind": "Method",
    "detail": "Function (SubresourceCount =)",
    "insertText": "GetMipLevels() * GetArraySize() * GetPlaneCount()"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_DEBUG)",
    "insertText": "InterlockedIncrement(&NoStateTrackingResourceCount)"
  },
  {
    "label": "DetermineResourceStates()",
    "kind": "Method",
    "detail": "Function (# endif DefaultResourceState = InDefaultState ; WritableState = D3D12_RESOURCE_STATE_CORRUPT ; ReadableState = D3D12_RESOURCE_STATE_CORRUPT ; bRequiresResourceStateTracking = false ; } else {)",
    "insertText": "DetermineResourceStates(InDefaultState, InResourceStateMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bRequiresResourceStateTracking)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if D3D12_RHI_RAYTRACING)",
    "insertText": "check(InDefaultState != D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE && InInitialState != D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# endif ResourceState .)",
    "insertText": "Initialize(SubresourceCount)"
  },
  {
    "label": "SetResourceState()",
    "kind": "Method",
    "detail": "Function (ResourceState .)",
    "insertText": "SetResourceState(InInitialState)"
  },
  {
    "label": "DetermineResourceStates()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DetermineResourceStates(D3D12_RESOURCE_STATES InDefaultState, ED3D12ResourceStateMode InResourceStateMode)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (const FD3D12ResourceTypeHelper)",
    "insertText": "Type(Desc, HeapType)"
  },
  {
    "label": "SetCompressedState()",
    "kind": "Method",
    "detail": "Function (bDepthStencil = Type . bDSV ; # ifdef PLATFORM_SUPPORTS_RESOURCE_COMPRESSION)",
    "insertText": "SetCompressedState(D3D12_RESOURCE_STATE_COMMON)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(Type.bWritable || InResourceStateMode == ED3D12ResourceStateMode::MultiState)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (WritableState = D3D12_RESOURCE_STATE_RENDER_TARGET ; ReadableState = Type . bSRV ? D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE : D3D12_RESOURCE_STATE_CORRUPT ; } else)",
    "insertText": "if(Type.bDSV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(InDefaultState != D3D12_RESOURCE_STATE_TBD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DefaultResourceState = InDefaultState ; } else)",
    "insertText": "if(Type.bBuffer)"
  },
  {
    "label": "DefaultResourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultResourceState(HeapType == D3D12_HEAP_TYPE_READBACK)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Type.bSRVOnly)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DefaultResourceState = D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE ; } } } } ; typedef class FD3D12BuddyAllocator FD3D12BaseAllocatorType ; struct FD3D12BuddyAllocatorPrivateData { uint32 Offset ; uint32 Order ; void)",
    "insertText": "Init()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PoolData .)",
    "insertText": "Reset()"
  },
  {
    "label": "FD3D12ResourceLocation()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12ResourceAllocator ; class FD3D12BaseShaderResource ; class FD3D12ResourceLocation : public FRHIPoolResource,public FD3D12DeviceChild,public FNoncopyable { public : enum class ResourceLocationType : uint8 { eUndefined,eStandAlone,eSubAllocation,eFastAllocation,eMultiFrameFastAllocation,eAliased,eNodeReference,eHeapAliased,} ; enum EAllocatorType : uint8 { AT_Default,AT_SegList,AT_Pool,AT_Unknown = 0 xff } ;)",
    "insertText": "FD3D12ResourceLocation(FD3D12Device* Parent)"
  },
  {
    "label": "FD3D12ResourceLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ResourceLocation(FD3D12ResourceLocation&& Other) : FD3D12ResourceLocation(Other.GetParentDevice())"
  },
  {
    "label": "TransferOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferOwnership(*this, Other)"
  },
  {
    "label": "FD3D12ResourceLocation()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D12ResourceLocation()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "TransferOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferOwnership(FD3D12ResourceLocation& Destination, FD3D12ResourceLocation& Source)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(FD3D12BaseShaderResource* InOwner)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (Owner = InOwner ; } void)",
    "insertText": "SetType(ResourceLocationType Value)"
  },
  {
    "label": "SetResource()",
    "kind": "Method",
    "detail": "Function (Type = Value ; } void)",
    "insertText": "SetResource(FD3D12Resource* Value)"
  },
  {
    "label": "SetAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllocator(FD3D12BaseAllocatorType* Value)"
  },
  {
    "label": "SetSegListAllocator()",
    "kind": "Method",
    "detail": "Function (Allocator = Value ; AllocatorType = AT_Default ; } void)",
    "insertText": "SetSegListAllocator(FD3D12SegListAllocator* Value)"
  },
  {
    "label": "SetPoolAllocator()",
    "kind": "Method",
    "detail": "Function (SegListAllocator = Value ; AllocatorType = AT_SegList ; } void)",
    "insertText": "SetPoolAllocator(FD3D12PoolAllocator* Value)"
  },
  {
    "label": "ClearAllocator()",
    "kind": "Method",
    "detail": "Function (PoolAllocator = Value ; AllocatorType = AT_Pool ; } void)",
    "insertText": "ClearAllocator()"
  },
  {
    "label": "SetMappedBaseAddress()",
    "kind": "Method",
    "detail": "Function (Allocator = nullptr ; AllocatorType = AT_Unknown ; } void)",
    "insertText": "SetMappedBaseAddress(void* Value)"
  },
  {
    "label": "SetGPUVirtualAddress()",
    "kind": "Method",
    "detail": "Function (MappedBaseAddress = Value ; } void)",
    "insertText": "SetGPUVirtualAddress(D3D12_GPU_VIRTUAL_ADDRESS Value)"
  },
  {
    "label": "SetOffsetFromBaseOfResource()",
    "kind": "Method",
    "detail": "Function (GPUVirtualAddress = Value ; } void)",
    "insertText": "SetOffsetFromBaseOfResource(uint64 Value)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (OffsetFromBaseOfResource = Value ; } void)",
    "insertText": "SetSize(uint64 Value)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Size = Value ; } ResourceLocationType)",
    "insertText": "GetType()"
  },
  {
    "label": "UnlockPoolData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockPoolData()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStandaloneOrPooledPlacedResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStandaloneOrPooledPlacedResource()"
  },
  {
    "label": "AsHeapAliased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsHeapAliased(FD3D12Resource* Resource)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(FD3D12ResourceLocation::ResourceLocationType::eHeapAliased)"
  },
  {
    "label": "SetResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResource(Resource)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSize(0)"
  },
  {
    "label": "SetMappedBaseAddress()",
    "kind": "Method",
    "detail": "Function (D3D12_RANGE range = { 0,0 } ;)",
    "insertText": "SetMappedBaseAddress(Resource->Map(&range))"
  },
  {
    "label": "SetGPUVirtualAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetGPUVirtualAddress(Resource->GetGPUVirtualAddress())"
  },
  {
    "label": "AsFastAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AsFastAllocation(FD3D12Resource* Resource, uint32 BufferSize, D3D12_GPU_VIRTUAL_ADDRESS GPUBase, void* CPUBase, uint64 ResourceOffsetBase, uint64 Offset, bool bMultiFrame = false)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (Resource ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(ResourceLocationType::eMultiFrameFastAllocation)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetType(ResourceLocationType::eFastAllocation)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSize(BufferSize)"
  },
  {
    "label": "SetOffsetFromBaseOfResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOffsetFromBaseOfResource(ResourceOffsetBase + Offset)"
  },
  {
    "label": "SetMappedBaseAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMappedBaseAddress((uint8*)CPUBase + Offset)"
  },
  {
    "label": "SetGPUVirtualAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetGPUVirtualAddress(GPUBase + Offset)"
  },
  {
    "label": "Alias()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Alias(FD3D12ResourceLocation& Destination, FD3D12ResourceLocation& Source)"
  },
  {
    "label": "ReferenceNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReferenceNode(FD3D12Device* NodeDevice, FD3D12ResourceLocation& Destination, FD3D12ResourceLocation& Source)"
  },
  {
    "label": "IsAliased()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAliased()"
  },
  {
    "label": "SetTransient()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransient(bool bInTransient)"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (bTransient = bInTransient ; } bool)",
    "insertText": "IsTransient()"
  },
  {
    "label": "InternalClear()",
    "kind": "Method",
    "detail": "Function (} private : template<bool bReleaseResource> void)",
    "insertText": "InternalClear()"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "UpdateStandAloneStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStandAloneStats(bool bIncrement)"
  },
  {
    "label": "AllocateTexture()",
    "kind": "Method",
    "detail": "Function (FD3D12BaseShaderResource* Owner { } ; FD3D12Resource* UnderlyingResource { } ; union { FD3D12BaseAllocatorType* Allocator ; FD3D12SegListAllocator* SegListAllocator ; FD3D12PoolAllocator* PoolAllocator ; } ; union PrivateAllocatorData { FD3D12BuddyAllocatorPrivateData BuddyAllocatorPrivateData ; FD3D12BlockAllocatorPrivateData BlockAllocatorPrivateData ; FD3D12SegListAllocatorPrivateData SegListAllocatorPrivateData ; FD3D12PoolAllocatorPrivateData PoolAllocatorPrivateData ; } AllocatorData ; void* MappedBaseAddress { } ; D3D12_GPU_VIRTUAL_ADDRESS GPUVirtualAddress { } ; uint64 OffsetFromBaseOfResource { } ; uint64 Size { } ; ResourceLocationType Type { ResourceLocationType::eUndefined } ; EAllocatorType AllocatorType { AT_Unknown } ; bool bTransient { false } ; } ; struct ID3D12ResourceAllocator { void)",
    "insertText": "AllocateTexture(uint32 GPUIndex, D3D12_HEAP_TYPE InHeapType, const FD3D12ResourceDesc& InDesc, EPixelFormat InUEFormat, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, const D3D12_CLEAR_VALUE* InClearValue, const TCHAR* InName, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "AllocateResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateResource(uint32 GPUIndex, D3D12_HEAP_TYPE InHeapType, const FD3D12ResourceDesc& InDesc, uint64 InSize, uint32 InAllocationAlignment, ED3D12ResourceStateMode InResourceStateMode, D3D12_RESOURCE_STATES InCreateState, const D3D12_CLEAR_VALUE* InClearValue, const TCHAR* InName, FD3D12ResourceLocation& ResourceLocation)"
  },
  {
    "label": "FD3D12LockedResource()",
    "kind": "Method",
    "detail": "Function (} ; struct FD3D12LockedResource : public FD3D12DeviceChild {)",
    "insertText": "FD3D12LockedResource(FD3D12Device* Device) : FD3D12DeviceChild(Device) , ResourceLocation(Device)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (bLocked = false ; bLockedForReadOnly = false ; LockOffset = 0 ; LockSize = 0 ;)",
    "insertText": "Memzero(Footprint)"
  },
  {
    "label": "ResourceRenamed()",
    "kind": "Method",
    "detail": "Function (} FD3D12ResourceLocation ResourceLocation ; D3D12_SUBRESOURCE_FOOTPRINT Footprint = { } ; uint32 LockOffset = 0 ; uint32 LockSize = 0 ; uint32 bLocked : 1 = false ; uint32 bLockedForReadOnly : 1 = false ; uint32 bHasNeverBeenLocked : 1 = true ; } ; struct FD3D12ShaderResourceRenameListener { void)",
    "insertText": "ResourceRenamed(FD3D12ContextArray const& Contexts, FD3D12BaseShaderResource* InRenamedResource, FD3D12ResourceLocation* InNewResourceLocation)"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D12BaseShaderResource : public FD3D12DeviceChild,public IRefCountedObject { private : FCriticalSection RenameListenersCS ; TArray<FD3D12ShaderResourceRenameListener*> RenameListeners ; public : FD3D12Resource*)",
    "insertText": "GetResource()"
  },
  {
    "label": "AddRenameListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRenameListener(FD3D12ShaderResourceRenameListener* InRenameListener)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&RenameListenersCS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RenameListeners .)",
    "insertText": "Add(InRenameListener)"
  },
  {
    "label": "RemoveRenameListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveRenameListener(FD3D12ShaderResourceRenameListener* InRenameListener)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (uint32 Removed = RenameListeners .)",
    "insertText": "Remove(InRenameListener)"
  }
]