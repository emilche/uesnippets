[
  {
    "label": "Config",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Config"
  },
  {
    "label": "VisualizerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VisualizerConfig"
  },
  {
    "label": "Visualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Visualizer"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "HitTestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HitTestResult"
  },
  {
    "label": "Font",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Font"
  },
  {
    "label": "ProcessBrushes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessBrushes"
  },
  {
    "label": "UBA_VISUALIZER_FLAG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaNetworkClient . h \" # include \" UbaThread . h \" # include \" UbaTraceReader . h \" namespace uba { class Config ; # define UBA_VISUALIZER_FLAGS1 \\)",
    "insertText": "UBA_VISUALIZER_FLAG(Progress, true, L\"progress\") \\ UBA_VISUALIZER_FLAG(Status, true, L\"status\") \\ UBA_VISUALIZER_FLAG(ActiveProcesses, false, L\"active processes\") \\ UBA_VISUALIZER_FLAG(TitleBars, true, L\"instance title bars\") \\ UBA_VISUALIZER_FLAG(DetailedData, false, L\"detailed data (use -UbaDetailedTrace for even more)\") \\ UBA_VISUALIZER_FLAG(NetworkStats, true, L\"network stats\") \\ UBA_VISUALIZER_FLAG(CpuMemStats, true, L\"cpu/mem stats\") \\ UBA_VISUALIZER_FLAG(ProcessBars, true, L\"process bars\") \\ UBA_VISUALIZER_FLAG(FinishedProcesses, true, L\"finished process bars\") \\ UBA_VISUALIZER_FLAG(Timeline, true, L\"timeline\") \\ UBA_VISUALIZER_FLAG(Workers, false, L\"workers (threads on host taking care of requests from helpers)\") \\ UBA_VISUALIZER_FLAG(CursorLine, false, L\"cursor (vertical line)\") \\ #define UBA_VISUALIZER_FLAGS2 \\ UBA_VISUALIZER_FLAG(ShowProcessText, true, L\"Show text in process bars\") \\ UBA_VISUALIZER_FLAG(ShowReadWriteColors, true, L\"Show colors for read/write times in process bars\") \\ UBA_VISUALIZER_FLAG(ScaleHorizontalWithScrollWheel, false, L\"Use scroll wheel to scale horizontally\") \\ UBA_VISUALIZER_FLAG(DarkMode, false, L\"Use dark mode to draw visualizer\") \\ UBA_VISUALIZER_FLAG(AutoSaveSettings, true, L\"Auto save Position/Settings on close\") \\ UBA_VISUALIZER_FLAG(ShowAllTraces, true, L\"Show all traces started on channel\") \\ UBA_VISUALIZER_FLAG(SortActiveRemoteSessions, true, L\"Sort active sessions on top\") \\ UBA_VISUALIZER_FLAG(AutoScaleHorizontal, true, L\"Automatically scale horizontally to fit processes\") \\ UBA_VISUALIZER_FLAG(LockTimelineToBottom, true, L\"Lock timeline to always paint at bottom\")"
  },
  {
    "label": "VisualizerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisualizerConfig(const tchar* filename)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(Logger& logger)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(Logger& logger)"
  },
  {
    "label": "UBA_VISUALIZER_FLAG()",
    "kind": "Method",
    "detail": "Function (TString filename ; int x = 1 0 0 ; int y = 1 0 0 ; u32 width = 1 5 0 0 ; u32 height = 1 5 0 0 ; u32 fontSize = 1 3 ; TString fontName ; u32 maxActiveVisible = 5 ; u32 maxActiveProcessHeight = 1 6 ; # define)",
    "insertText": "UBA_VISUALIZER_FLAG(name, defaultValue, desc)"
  },
  {
    "label": "Visualizer()",
    "kind": "Method",
    "detail": "Function (UBA_VISUALIZER_FLAGS2 # undef UBA_VISUALIZER_FLAG u64 parent = 0 ; } ; class Visualizer { public :)",
    "insertText": "Visualizer(VisualizerConfig& config, Logger& logger)"
  },
  {
    "label": "Visualizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Visualizer()"
  },
  {
    "label": "ShowUsingListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingListener(const wchar_t* channelName)"
  },
  {
    "label": "ShowUsingNamedTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingNamedTrace(const wchar_t* namedTrace)"
  },
  {
    "label": "ShowUsingSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingSocket(NetworkBackend& backend, const wchar_t* host, u16 port = DefaultPort)"
  },
  {
    "label": "ShowUsingFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingFile(const wchar_t* fileName, u32 replay)"
  },
  {
    "label": "HasWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasWindow()"
  },
  {
    "label": "GetHwnd()",
    "kind": "Method",
    "detail": "Function (HWND)",
    "insertText": "GetHwnd()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(bool lock)"
  },
  {
    "label": "StartHwndThread()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "StartHwndThread()"
  },
  {
    "label": "Unselect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Unselect()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PaintClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintClient(const Function<void(HDC hdc, HDC memDC, RECT& clientRect)>& paintFunc)"
  },
  {
    "label": "PaintAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintAll(HDC hdc, const RECT& clientRect)"
  },
  {
    "label": "PaintActiveProcesses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintActiveProcesses(int& posY, const RECT& clientRect, const Function<void(TraceView::ProcessLocation&, u32, bool)>& drawProcess)"
  },
  {
    "label": "PaintProcessRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintProcessRect(TraceView::Process& process, HDC hdc, RECT rect, const RECT& progressRect, bool selected, bool writingBitmap)"
  },
  {
    "label": "PaintTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintTimeline(HDC hdc, const RECT& clientRect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using DrawTextFunc = Function<)",
    "insertText": "void(const StringBufferBase& text, RECT& rect)"
  },
  {
    "label": "PaintDetailedStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintDetailedStats(int& posY, const RECT& progressRect, TraceView::Session& session, bool isRemote, u64 playTime, const DrawTextFunc& drawTextFunc)"
  },
  {
    "label": "GetPlayTime()",
    "kind": "Method",
    "detail": "Function (struct Stats { u64 recvBytesPerSecond = 0 ; u64 sendBytesPerSecond = 0 ; u64 ping = 0 ; u64 memAvail = 0 ; u64 memTotal = 0 ; float cpuLoad = 0 ; } ; struct HitTestResult { u32 section = ~ 0 u ; TraceView::ProcessLocation processLocation ; bool processSelected = false ; u32 sessionSelectedIndex = ~ 0 u ; bool statsSelected = false ; Stats stats ; u32 buttonSelected = ~ 0 u ; float timelineSelected = 0 ; u32 fetchedFilesSelected = ~ 0 u ; bool workSelected = false ; u32 workTrack = ~ 0 u ; u32 workIndex = ~ 0 u ; TString hyperLink ; } ; u64)",
    "insertText": "GetPlayTime()"
  },
  {
    "label": "GetTimelineHeight()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTimelineHeight()"
  },
  {
    "label": "GetTimelineTop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTimelineTop(const RECT& clientRect)"
  },
  {
    "label": "HitTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitTest(HitTestResult& outResult, const POINT& pos)"
  },
  {
    "label": "WriteProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteProcessStats(Logger& out, const TraceView::Process& process)"
  },
  {
    "label": "CopyTextToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextToClipboard(const TString& str)"
  },
  {
    "label": "UnselectAndRedraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnselectAndRedraw()"
  },
  {
    "label": "UpdateAutoscroll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAutoscroll()"
  },
  {
    "label": "UpdateSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSelection()"
  },
  {
    "label": "UpdateScrollbars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollbars(bool redraw)"
  },
  {
    "label": "GetTitlePrefix()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "GetTitlePrefix(StringBufferBase& out)"
  },
  {
    "label": "InitBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBrushes()"
  },
  {
    "label": "ThreadLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadLoop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause(bool pause)"
  },
  {
    "label": "StartDragToScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDragToScroll(const POINT& anchor)"
  },
  {
    "label": "StopDragToScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDragToScroll()"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings()"
  },
  {
    "label": "DirtyBitmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyBitmaps(bool full)"
  },
  {
    "label": "UpdateFont()",
    "kind": "Method",
    "detail": "Function (struct Font { HFONT handle = 0 ; HFONT handleUnderlined = 0 ; int height = 0 ; int offset = 0 ; } ; void)",
    "insertText": "UpdateFont(Font& font, int height, bool createUnderline)"
  },
  {
    "label": "UpdateDefaultFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDefaultFont()"
  },
  {
    "label": "UpdateProcessFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProcessFont()"
  },
  {
    "label": "ChangeFontSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFontSize(int offset)"
  },
  {
    "label": "Redraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redraw(bool now)"
  },
  {
    "label": "SetActiveFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveFont(const Font& font)"
  },
  {
    "label": "PostNewTrace()",
    "kind": "Method",
    "detail": "Function (StringBuffer<2 5 6> m_namedTrace ; StringBuffer<2 5 6> m_fileName ; u32 m_replay = 0 ; u64 m_startTime = 0 ; u64 m_pauseTime = 0 ; struct ProcessBrushes { HBRUSH inProgress = 0 ; HBRUSH success = 0 ; HBRUSH error = 0 ; HBRUSH returned = 0 ; HBRUSH recv = 0 ; HBRUSH send = 0 ; HBRUSH cacheFetch = 0 ; } ; ProcessBrushes m_processBrushes [ 2 ] ; Atomic<bool> m_looping ; HWND m_hwnd = 0 ; HWND m_parentHwnd = 0 ; COLORREF m_textColor = { } ; COLORREF m_textWarningColor = { } ; COLORREF m_textErrorColor = { } ; COLORREF m_sendColor = { } ; COLORREF m_recvColor = { } ; COLORREF m_cpuColor = { } ; COLORREF m_memColor = { } ; HBRUSH m_backgroundBrush = 0 ; HBRUSH m_tooltipBackgroundBrush = 0 ; HBRUSH m_workBrush = 0 ; HPEN m_textPen = 0 ; HPEN m_separatorPen = 0 ; HPEN m_sendPen = 0 ; HPEN m_recvPen = 0 ; HPEN m_cpuPen = 0 ; HPEN m_memPen = 0 ; HPEN m_processUpdatePen = 0 ; HPEN m_checkboxPen = 0 ; int m_boxHeight = 1 2 ; int m_sessionStepY = 0 ; Font m_defaultFont ; Font m_processFont ; Font m_timelineFont ; Font m_popupFont ; int m_processFontOffsetY = 0 ; Font m_activeProcessFont [ 3 2 ] ; u32 m_activeProcessCountHistory [ 5 ] ; u32 m_activeProcessCountHistoryIterator = 0 ; HDC m_activeHdc = 0 ; Font m_activeFont ; int m_progressRectLeft = 3 0 ; Logger& m_logger ; VisualizerConfig m_config ; TraceReader m_trace ; TraceView m_traceView ; NetworkClient* m_client = nullptr ; Event m_clientDisconnect ; StringBuffer<2 5 6> m_listenChannel ; StringBuffer<2 5 6> m_newTraceName ; Event m_listenTimeout ; int m_contentWidth = 0 ; int m_contentHeight = 0 ; int m_contentWidthWhenThumbTrack = 0 ; float m_scrollPosX = 0 ; float m_scrollPosY = 0 ; float m_zoomValue = 0 . 5 f ; float m_horizontalScaleValue = 0 . 5 f ; bool m_autoScroll = true ; bool m_paused = false ; u64 m_pauseStart = 0 ; int BitmapCacheHeight = 1 0 2 4* 1 0 2 4 ; HBITMAP m_lastBitmap = 0 ; int m_lastBitmapOffset = BitmapCacheHeight ; u32 m_activeSection = ~ 0 u ; TraceView::ProcessLocation m_processSelectedLocation ; bool m_processSelected = false ; u32 m_sessionSelectedIndex = ~ 0 u ; bool m_statsSelected = false ; Stats m_stats ; u32 m_buttonSelected = ~ 0 u ; float m_timelineSelected = 0 ; u32 m_fetchedFilesSelected = ~ 0 u ; TString m_hyperLinkSelected ; bool m_workSelected = false ; u32 m_workTrack = ~ 0 u ; u32 m_workIndex = ~ 0 u ; bool m_mouseOverWindow = false ; bool m_showPopup = false ; bool m_locked = false ; HBITMAP m_cachedBitmap = 0 ; RECT m_cachedBitmapRect = { INT_MIN,INT_MIN,INT_MIN,INT_MIN } ; Vector<HBITMAP> m_textBitmaps ; POINT m_mouseAnchor = { } ; float m_scrollAtAnchorX = 0 ; float m_scrollAtAnchorY = 0 ; int m_dragToScrollCounter = 0 ; Thread m_thread ; void)",
    "insertText": "PostNewTrace(u32 replay, bool paused)"
  },
  {
    "label": "PostNewTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNewTitle(const StringView& title)"
  },
  {
    "label": "PostQuit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostQuit()"
  },
  {
    "label": "WinProc()",
    "kind": "Method",
    "detail": "Function (LRESULT)",
    "insertText": "WinProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "StaticWinProc()",
    "kind": "Method",
    "detail": "Function (LRESULT CALLBACK)",
    "insertText": "StaticWinProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)"
  }
]