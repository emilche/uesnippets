[
  {
    "label": "Config",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Config"
  },
  {
    "label": "VisualizerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VisualizerConfig"
  },
  {
    "label": "Visualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Visualizer"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "HitTestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HitTestResult"
  },
  {
    "label": "Font",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Font"
  },
  {
    "label": "ProcessBrushes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessBrushes"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(Logger& logger)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(Logger& logger)"
  },
  {
    "label": "Visualizer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Visualizer(VisualizerConfig& config, Logger& logger)"
  },
  {
    "label": "ShowUsingListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingListener(const wchar_t* channelName)"
  },
  {
    "label": "ShowUsingNamedTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingNamedTrace(const wchar_t* namedTrace)"
  },
  {
    "label": "ShowUsingSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingSocket(NetworkBackend& backend, const wchar_t* host, u16 port = DefaultPort)"
  },
  {
    "label": "ShowUsingFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowUsingFile(const wchar_t* fileName, u32 replay)"
  },
  {
    "label": "HasWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasWindow()"
  },
  {
    "label": "GetHwnd()",
    "kind": "Method",
    "detail": "Function (HWND)",
    "insertText": "GetHwnd()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(bool lock)"
  },
  {
    "label": "StartHwndThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartHwndThread()"
  },
  {
    "label": "Unselect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Unselect()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "PaintAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintAll(HDC hdc, const RECT& clientRect)"
  },
  {
    "label": "PaintProcessRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintProcessRect(TraceView::Process& process, HDC hdc, RECT rect, const RECT& progressRect, bool selected, bool writingBitmap)"
  },
  {
    "label": "PaintTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintTimeline(HDC hdc, const RECT& clientRect)"
  },
  {
    "label": "PaintDetailedStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintDetailedStats(int& posY, const RECT& progressRect, TraceView::Session& session, bool isRemote, u64 playTime, const DrawTextFunc& drawTextFunc)"
  },
  {
    "label": "GetPlayTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetPlayTime()"
  },
  {
    "label": "GetTimelineHeight()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTimelineHeight()"
  },
  {
    "label": "GetTimelineTop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTimelineTop(const RECT& clientRect)"
  },
  {
    "label": "HitTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitTest(HitTestResult& outResult, const POINT& pos)"
  },
  {
    "label": "WriteProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteProcessStats(Logger& out, const TraceView::Process& process)"
  },
  {
    "label": "CopyTextToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextToClipboard(const TString& str)"
  },
  {
    "label": "UnselectAndRedraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnselectAndRedraw()"
  },
  {
    "label": "UpdateAutoscroll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateAutoscroll()"
  },
  {
    "label": "UpdateSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateSelection()"
  },
  {
    "label": "UpdateScrollbars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScrollbars(bool redraw)"
  },
  {
    "label": "InitBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBrushes()"
  },
  {
    "label": "ThreadLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadLoop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause(bool pause)"
  },
  {
    "label": "StartDragToScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDragToScroll(const POINT& anchor)"
  },
  {
    "label": "StopDragToScroll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDragToScroll()"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings()"
  },
  {
    "label": "DirtyBitmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyBitmaps(bool full)"
  },
  {
    "label": "UpdateFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFont(Font& font, int height, bool createUnderline)"
  },
  {
    "label": "UpdateDefaultFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDefaultFont()"
  },
  {
    "label": "UpdateProcessFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProcessFont()"
  },
  {
    "label": "ChangeFontSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeFontSize(int offset)"
  },
  {
    "label": "Redraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redraw(bool now)"
  },
  {
    "label": "SetActiveFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveFont(const Font& font)"
  },
  {
    "label": "PostNewTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNewTrace(u32 replay, bool paused)"
  },
  {
    "label": "PostNewTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNewTitle(const StringView& title)"
  },
  {
    "label": "PostQuit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostQuit()"
  },
  {
    "label": "WinProc()",
    "kind": "Method",
    "detail": "Function (LRESULT)",
    "insertText": "WinProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)"
  },
  {
    "label": "StaticWinProc()",
    "kind": "Method",
    "detail": "Function (CALLBACK)",
    "insertText": "StaticWinProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)"
  }
]