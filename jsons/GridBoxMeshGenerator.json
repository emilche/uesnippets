[
  {
    "label": "FGridBoxMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGridBoxMeshGenerator"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshShapeGenerator . h \" # include \" OrientedBoxTypes . h \" # include \" Util / IndexUtil . h \" namespace UE { namespace Geometry { class FGridBoxMeshGenerator : public FMeshShapeGenerator { public : FOrientedBox3d Box ; FIndex3i EdgeVertices { 8,8,8 } ; bool bScaleUVByAspectRatio = true ; bool bPolygroupPerQuad = false ; public : FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FIndex3i N = EdgeVertices ; N . A =)",
    "insertText": "Max(2, N.A)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (N . B =)",
    "insertText": "Max(2, N.B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (N . C =)",
    "insertText": "Max(2, N.C)"
  },
  {
    "label": "Nscale()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "Nscale(1.0 / (N.A-1), 1.0 / (N.B-1), 1.0 / (N.C-1))"
  },
  {
    "label": "NumUVsAndNormals()",
    "kind": "Method",
    "detail": "Function (FIndex3i NInternal = N ; NInternal . A - = 2 ; NInternal . B - = 2 ; NInternal . C - = 2 ; FIndex3i NTri = N ; NTri . A - - ; NTri . B - - ; NTri . C - - ; int)",
    "insertText": "NumUVsAndNormals(N.A * N.B + N.B * N.C + N.C * N.A)"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumVertices(NInternal.A + NInternal.B + NInternal.C) * 4 + (NInternal.A*NInternal.B + NInternal.B*NInternal.C + NInternal.C*NInternal.A)"
  },
  {
    "label": "NumTriangles()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumTriangles(NTri.A * NTri.B + NTri.B * NTri.C + NTri.C * NTri.A)"
  },
  {
    "label": "SetBufferSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferSizes(NumVertices, NumTriangles, NumUVsAndNormals, NumUVsAndNormals)"
  },
  {
    "label": "VerticesPerFace()",
    "kind": "Method",
    "detail": "Function (int FaceDimOrder [ 3 ] { 1,2,0 } ; int D [ 2 ] [ 3 ] { { 1,2,0 },{ 2,0,1 } } ; FIndex3i)",
    "insertText": "VerticesPerFace(N.B * N.C, N.A * N.C, N.A * N.B)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int>> FaceVertIndices ; FaceVertIndices .)",
    "insertText": "SetNum(6)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (int FaceIdxForDim = FaceDimOrder [ Dim ]* 2 ; int VertexNum = VerticesPerFace [ Dim ] ; FaceVertIndices [ FaceIdxForDim ] .)",
    "insertText": "SetNum(VertexNum)"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (} auto ToFaceV = [& N,&)",
    "insertText": "D(int Dim, int D0, int D1)"
  },
  {
    "label": "GetCorner()",
    "kind": "Method",
    "detail": "Function (Vertices [ i ] = Box .)",
    "insertText": "GetCorner(i)"
  },
  {
    "label": "GetCornerSide()",
    "kind": "Method",
    "detail": "Function (FIndex3i CornerSides =)",
    "insertText": "GetCornerSide(i)"
  },
  {
    "label": "Dim()",
    "kind": "Method",
    "detail": "Function (int FaceIdx = FaceDimOrder [ Dim ]* 2 + CornerSides [ Dim ] ; int D0Ind = CornerSides [ D [ 0 ] [)",
    "insertText": "Dim(N[D[0][Dim]] - 1)"
  },
  {
    "label": "Dim()",
    "kind": "Method",
    "detail": "Function (int D1Ind = CornerSides [ D [ 1 ] [)",
    "insertText": "Dim(N[D[1][Dim]] - 1)"
  },
  {
    "label": "ToFaceV()",
    "kind": "Method",
    "detail": "Function (int CornerVInd =)",
    "insertText": "ToFaceV(Dim, D0Ind, D1Ind)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FaceVertIndices [ FaceIdx ] [ CornerVInd ] = i ; } } int CurrentVertIndex = 8 ;)",
    "insertText": "for(int Dim = 0; Dim < 3; Dim++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int EdgeLen = N [ Dim ] ;)",
    "insertText": "if(EdgeLen <= 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; } int MajorFaceInd = FaceDimOrder [ Dim ]* 2 ; int FaceInds [ 2 ] { - 1,- 1 } ; int DSides [ 2 ] { 0,0 } ;)",
    "insertText": "for(DSides[0] = 0; DSides[0] < 2; DSides[0]++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FaceInds [ 0 ] = FaceDimOrder [ D [ 0 ] [ Dim ] ]* 2 + DSides [ 0 ] ;)",
    "insertText": "for(DSides[1] = 0; DSides[1] < 2; DSides[1]++)"
  },
  {
    "label": "ToFaceV()",
    "kind": "Method",
    "detail": "Function (FaceInds [ 1 ] = FaceDimOrder [ D [ 1 ] [ Dim ] ]* 2 + DSides [ 1 ] ; int MajorCornerInd =)",
    "insertText": "ToFaceV(Dim, DSides[0] * (N[D[0][Dim]] - 1), DSides[1] * (N[D[1][Dim]] - 1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FVector3d Corners [ 2 ] { Vertices [ FaceVertIndices [ MajorFaceInd ] [ MajorCornerInd ] ],Vertices [ FaceVertIndices [ MajorFaceInd + 1 ] [ MajorCornerInd ] ] } ;)",
    "insertText": "for(int EdgeVert = 1; EdgeVert + 1 < EdgeLen; EdgeVert++)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (Vertices [ CurrentVertIndex ] =)",
    "insertText": "Lerp(Corners[0], Corners[1], EdgeVert * Nscale[Dim])"
  },
  {
    "label": "ToFaceV()",
    "kind": "Method",
    "detail": "Function (int FaceInd = FaceInds [ WhichFace ] ; int FaceDim = D [ WhichFace ] [ Dim ] ; int SubDims [ 2 ] ; SubDims [ 1 - WhichFace ] = EdgeVert ; SubDims [ WhichFace ] = NTri [ D [ WhichFace ] [ FaceDim ] ]* DSides [ 1 - WhichFace ] ; int FaceV =)",
    "insertText": "ToFaceV(FaceDim, SubDims[0], SubDims[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int FaceIdxBase = FaceDimOrder [ Dim ]* 2 ; int FaceInternalVNum = NInternal [ D [ 0 ] [ Dim ] ]* NInternal [ D [ 1 ] [ Dim ] ] ;)",
    "insertText": "if(FaceInternalVNum <= 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "for(int Side = 0; Side < 2; Side++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int MajorFaceInd = FaceIdxBase + Side ;)",
    "insertText": "for(int D0 = 1; D0 + 1 < N[D[0][Dim]]; D0++)"
  },
  {
    "label": "ToFaceV()",
    "kind": "Method",
    "detail": "Function (int BotInd =)",
    "insertText": "ToFaceV(Dim, D0, 0)"
  },
  {
    "label": "ToFaceV()",
    "kind": "Method",
    "detail": "Function (int TopInd =)",
    "insertText": "ToFaceV(Dim, D0, N[D[1][Dim]] - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FVector3d Edges [ 2 ] { Vertices [ FaceVertIndices [ MajorFaceInd ] [ BotInd ] ],Vertices [ FaceVertIndices [ MajorFaceInd ] [ TopInd ] ] } ;)",
    "insertText": "for(int D1 = 1; D1 + 1 < N[D[1][Dim]]; D1++)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (Vertices [ CurrentVertIndex ] =)",
    "insertText": "Lerp(Edges[0], Edges[1], D1 * Nscale[D[1][Dim]])"
  },
  {
    "label": "ToFaceV()",
    "kind": "Method",
    "detail": "Function (FaceVertIndices [ MajorFaceInd ] [)",
    "insertText": "ToFaceV(Dim, D0, D1)"
  },
  {
    "label": "MaxAbsElement()",
    "kind": "Method",
    "detail": "Function (CurrentVertIndex + + ; } } } } double MaxDimension =)",
    "insertText": "MaxAbsElement(2.0*Box.Extents)"
  },
  {
    "label": "UVScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UVScale(bScaleUVByAspectRatio) ? (1.0f / (float)MaxDimension)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (int FaceIdxBase = FaceDimOrder [ Dim ]* 2 ; int Minor1Flip [ 3 ] = { - 1,1,1 } ; int Minor2Flip [ 3 ] = { - 1,- 1,1 } ; double FaceWidth =)",
    "insertText": "Abs(Box.Extents[D[0][Dim]])"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (int SideOpp = 1 - Side ; int SideSign = Side* 2 - 1 ; FVector3f)",
    "insertText": "Normal(0, 0, 0)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Normal [ Dim ] =)",
    "insertText": "float(2 * Side - 1)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normal(FVector3f)Box.Frame.FromFrameVector((FVector3d)Normal)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int MajorFaceInd = FaceIdxBase + Side ; int FaceUVStartInd = CurrentUVIdx ; FVector2f UV ; int UVXDim = Dim = = 1 ? 1 : 0 ; int UVYDim = 1 - UVXDim ;)",
    "insertText": "for(int D0 = 0; D0 < N[D[0][Dim]]; D0++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UV [ UVXDim ] =)",
    "insertText": "float(D0 * Nscale[D[0][Dim]] - .5)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UV [ UVYDim ] =)",
    "insertText": "float(D1 * Nscale[D[1][Dim]] - .5)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UV . X* =)",
    "insertText": "float(SideSign * Minor1Flip[Dim])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UV . Y* =)",
    "insertText": "float(Minor2Flip[Dim])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UV [ UVXDim ] =)",
    "insertText": "float((UV[UVXDim] + .5f) * WidthUVScale)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UV [ UVYDim ] =)",
    "insertText": "float((UV[UVYDim] + .5f) * HeightUVScale)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CurrentUVIdx + + ; } })",
    "insertText": "for(int D0 = 0; D0 + 1 < N[D[0][Dim]]; D0++)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangle(CurrentTriIdx, FaceVertIndices[MajorFaceInd][ToFaceV(Dim, D0, D1)], FaceVertIndices[MajorFaceInd][ToFaceV(Dim, D0+SideOpp, D1+Side)], FaceVertIndices[MajorFaceInd][ToFaceV(Dim, D0+1, D1+1)])"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(CurrentTriIdx, FaceUVStartInd + D1 + (D0) * N[D[1][Dim]], FaceUVStartInd + D1+Side + (D0+SideOpp) * N[D[1][Dim]], FaceUVStartInd + D1+1 + (D0+1) * N[D[1][Dim]])"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(CurrentTriIdx, FaceUVStartInd + D1 + (D0) * N[D[1][Dim]], FaceUVStartInd + D1+Side + (D0+SideOpp) * N[D[1][Dim]], FaceUVStartInd + D1+1 + (D0+1) * N[D[1][Dim]])"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(CurrentTriIdx, (bPolygroupPerQuad) ? CurrentQuadIdx : MajorFaceInd)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (CurrentTriIdx + + ;)",
    "insertText": "SetTriangle(CurrentTriIdx, FaceVertIndices[MajorFaceInd][ToFaceV(Dim, D0, D1)], FaceVertIndices[MajorFaceInd][ToFaceV(Dim, D0+1, D1+1)], FaceVertIndices[MajorFaceInd][ToFaceV(Dim, D0+Side, D1+SideOpp)])"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(CurrentTriIdx, FaceUVStartInd + D1 + (D0) * N[D[1][Dim]], FaceUVStartInd + D1+1 + (D0+1) * N[D[1][Dim]], FaceUVStartInd + D1+SideOpp + (D0+Side) * N[D[1][Dim]])"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(CurrentTriIdx, FaceUVStartInd + D1 + (D0) * N[D[1][Dim]], FaceUVStartInd + D1+1 + (D0+1) * N[D[1][Dim]], FaceUVStartInd + D1+SideOpp + (D0+Side) * N[D[1][Dim]])"
  }
]