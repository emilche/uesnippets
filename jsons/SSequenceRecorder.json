[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SProgressBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProgressBar"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SSequenceRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequenceRecorder"
  },
  {
    "label": "USequenceRecorderActorGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecorderActorGroup"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" ActorRecording . h \" # include \" SequenceRecordingBase . h \" # include \" PropertyEditorDelegates . h \" # include \" ISinglePropertyView . h \" # include \" IStructureDetailsView . h \" class FActiveTimerHandle ; class FUICommandList ; class FUICommandInfo ; class IDetailsView ; class SProgressBar ; class FDragDropOperation ; class SEditableTextBox ; class SSequenceRecorder : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SSequenceRecorder)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& Args)"
  },
  {
    "label": "SSequenceRecorder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSequenceRecorder()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "MakeListViewWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeListViewWidget(UActorRecording* Recording, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetRecordingActorName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRecordingActorName(UActorRecording* Recording)"
  },
  {
    "label": "OnActorListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorListSelectionChanged(UActorRecording* Recording, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "OnListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListSelectionChanged(USequenceRecordingBase* Recording)"
  },
  {
    "label": "HandleRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecord()"
  },
  {
    "label": "StartDelayedRecord()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "StartDelayedRecord(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "CanRecord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRecord()"
  },
  {
    "label": "IsRecordVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordVisible()"
  },
  {
    "label": "HandleStopAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStopAll()"
  },
  {
    "label": "CanStopAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStopAll()"
  },
  {
    "label": "IsStopAllVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStopAllVisible()"
  },
  {
    "label": "HandleAddRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddRecording()"
  },
  {
    "label": "HandleRecordingGroupAddedToSequenceRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecordingGroupAddedToSequenceRecorder(TWeakObjectPtr<class USequenceRecorderActorGroup> ActorGroup)"
  },
  {
    "label": "CanAddRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddRecording()"
  },
  {
    "label": "HandleAddCurrentPlayerRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddCurrentPlayerRecording()"
  },
  {
    "label": "CanAddCurrentPlayerRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddCurrentPlayerRecording()"
  },
  {
    "label": "HandleRemoveRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveRecording()"
  },
  {
    "label": "CanRemoveRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveRecording()"
  },
  {
    "label": "HandleRemoveAllRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveAllRecordings()"
  },
  {
    "label": "CanRemoveAllRecordings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveAllRecordings()"
  },
  {
    "label": "HandleAddRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddRecordingGroup()"
  },
  {
    "label": "CanAddRecordingGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddRecordingGroup()"
  },
  {
    "label": "HandleRemoveRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveRecordingGroup()"
  },
  {
    "label": "CanRemoveRecordingGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveRecordingGroup()"
  },
  {
    "label": "HandleDuplicateRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDuplicateRecordingGroup()"
  },
  {
    "label": "CanDuplicateRecordingGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateRecordingGroup()"
  },
  {
    "label": "HandleRecordingProfileNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecordingProfileNameCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "HandleRefreshItems()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "HandleRefreshItems(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "HandleMapUnload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMapUnload(UObject* Object)"
  },
  {
    "label": "GetDelayPercent()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetDelayPercent()"
  },
  {
    "label": "OnDelayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDelayChanged(float NewValue)"
  },
  {
    "label": "GetDelayProgressVisibilty()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDelayProgressVisibilty()"
  },
  {
    "label": "GetTargetSequenceName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTargetSequenceName()"
  },
  {
    "label": "OnRecordingActorListDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRecordingActorListDrop(const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent)"
  },
  {
    "label": "OnRecordingActorListAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRecordingActorListAllowDrop(TSharedPtr<FDragDropOperation> DragDropOperation)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FUICommandList>)",
    "insertText": "GetCommandList()"
  }
]