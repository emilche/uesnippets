[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SProgressBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProgressBar"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SSequenceRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequenceRecorder"
  },
  {
    "label": "USequenceRecorderActorGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceRecorderActorGroup"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& Args)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnActorListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorListSelectionChanged(UActorRecording* Recording, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "OnListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListSelectionChanged(USequenceRecordingBase* Recording)"
  },
  {
    "label": "HandleRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecord()"
  },
  {
    "label": "StartDelayedRecord()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "StartDelayedRecord(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "HandleStopAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStopAll()"
  },
  {
    "label": "HandleAddRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddRecording()"
  },
  {
    "label": "HandleRecordingGroupAddedToSequenceRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecordingGroupAddedToSequenceRecorder(TWeakObjectPtr<class USequenceRecorderActorGroup> ActorGroup)"
  },
  {
    "label": "HandleAddCurrentPlayerRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddCurrentPlayerRecording()"
  },
  {
    "label": "HandleRemoveRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveRecording()"
  },
  {
    "label": "HandleRemoveAllRecordings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveAllRecordings()"
  },
  {
    "label": "HandleAddRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddRecordingGroup()"
  },
  {
    "label": "HandleRemoveRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemoveRecordingGroup()"
  },
  {
    "label": "HandleDuplicateRecordingGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDuplicateRecordingGroup()"
  },
  {
    "label": "HandleRecordingProfileNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecordingProfileNameCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "HandleRefreshItems()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "HandleRefreshItems(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "HandleMapUnload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMapUnload(UObject* Object)"
  },
  {
    "label": "OnDelayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDelayChanged(float NewValue)"
  },
  {
    "label": "OnRecordingActorListDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRecordingActorListDrop( const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent )"
  },
  {
    "label": "OnRecordingActorListAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRecordingActorListAllowDrop( TSharedPtr<FDragDropOperation> DragDropOperation )"
  },
  {
    "label": "HandleLoadRecordingActorGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLoadRecordingActorGroup(FName Name)"
  }
]