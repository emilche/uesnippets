[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoTriangulator"
  },
  {
    "label": "FLoopConnexion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoopConnexion"
  },
  {
    "label": "FCellLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellLoop"
  },
  {
    "label": "FCellCorner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellCorner"
  },
  {
    "label": "FCellConnexion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellConnexion"
  },
  {
    "label": "FCellPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellPath"
  },
  {
    "label": "FCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCell"
  },
  {
    "label": "FCellLoop()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Factory . h \" # include \" Core / Types . h \" # include \" Mesh / MeshEnum . h \" # include \" Mesh / Meshers / IsoTriangulator . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoNode . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoSegment . h \" # include \" Mesh / Meshers / IsoTriangulator / IntersectionSegmentTool . h \" # include \" Mesh / Structure / Grid . h \" # include \" Topo / TopologicalFace . h \" namespace UE::CADKernel { class FGrid ; class FIsoTriangulator ; struct FLoopConnexion ; struct FCellLoop { int32 Id ; FPoint2D Barycenter ; TArray<FLoopNode*> Nodes ; TArray<FCellConnexion*> Connexions ; bool bIsOuterLoop = false ; bool bIsConnected = false ;)",
    "insertText": "FCellLoop(const int32 InIndex, TArray<FLoopNode*>& InNodes, const FGrid& Grid) : Id(InIndex) , Barycenter(FPoint2D::ZeroPoint) , Nodes(InNodes) , bIsOuterLoop(Nodes[0]->GetLoopIndex() == 0)"
  },
  {
    "label": "Get2DPoint()",
    "kind": "Method",
    "detail": "Function (Barycenter + = Node ->)",
    "insertText": "Get2DPoint(EGridSpace::UniformScaled, Grid)"
  },
  {
    "label": "Barycenter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Barycenter(double)Nodes.Num()"
  },
  {
    "label": "FCellLoop()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCellLoop(const int32 InIndex) : Id(InIndex) , Barycenter(FPoint::ZeroPoint)"
  },
  {
    "label": "FCellLoop()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCellLoop()"
  },
  {
    "label": "IsCellCorner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCellCorner()"
  },
  {
    "label": "FCellCorner()",
    "kind": "Method",
    "detail": "Function (} ; struct FCellCorner : public FCellLoop { FIsoInnerNode& CornerNode ;)",
    "insertText": "FCellCorner(const int32 InIndex, FIsoInnerNode& InNode, const FGrid& Grid) : FCellLoop(InIndex) , CornerNode(InNode)"
  },
  {
    "label": "bIsOuterLoop()",
    "kind": "Method",
    "detail": "Function (bIsConnexionWithOuter = Loop1 .)",
    "insertText": "bIsOuterLoop(!Loop2.IsCellCorner() && Loop2.bIsOuterLoop)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Loop1 . Connexions .)",
    "insertText": "Add(this)"
  },
  {
    "label": "GetOtherLoop()",
    "kind": "Method",
    "detail": "Function (} const FCellLoop*)",
    "insertText": "GetOtherLoop(const FCellLoop* Loop)"
  },
  {
    "label": "IsShortestPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShortestPath(const int32 MaxLoopCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TMap<const FCellLoop*,double> DistanceToLoops ; DistanceToLoops .)",
    "insertText": "Reserve(MaxLoopCount)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DistanceToLoops .)",
    "insertText": "Add(&Loop2, 0.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DistanceToCurrent = DistanceToLoop . Value ; CurrentLoop =& DistanceToLoop ; } })",
    "insertText": "if(!CurrentLoop || CurrentLoop->Value > MinDistance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FCellConnexion* Connexion : CurrentLoop->Key->Connexions)"
  },
  {
    "label": "GetOtherLoop()",
    "kind": "Method",
    "detail": "Function (continue ; } const FCellLoop* NextLoop = Connexion ->)",
    "insertText": "GetOtherLoop(CurrentLoop->Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(NextLoop->bIsOuterLoop)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (continue ; } const double DistanceToNextByCurrent = CurrentLoop -> Value + Connexion -> MinDistance ; double* DistanceToNextLoop = DistanceToLoops .)",
    "insertText": "Find(NextLoop)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (* DistanceToNextLoop = DistanceToNextByCurrent ; } } else { DistanceToLoops .)",
    "insertText": "Add(NextLoop, DistanceToNextByCurrent)"
  },
  {
    "label": "IsShortestPathToOuterLoop()",
    "kind": "Method",
    "detail": "Function (} } CurrentLoop -> Value = - HUGE_VALUE ; } return true ; } bool)",
    "insertText": "IsShortestPathToOuterLoop(const int32 MaxLoopCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DistanceToCurrent = DistanceToLoop . Value ; CurrentLoopPair =& DistanceToLoop ; } })",
    "insertText": "if(!CurrentLoopPair || CurrentLoopPair->Value > MinDistance)"
  },
  {
    "label": "GetOtherLoop()",
    "kind": "Method",
    "detail": "Function (continue ; } const FCellLoop* NextLoop = Connexion ->)",
    "insertText": "GetOtherLoop(CurrentLoop)"
  },
  {
    "label": "IsShortestPathToCorner()",
    "kind": "Method",
    "detail": "Function (} } CurrentLoopDistance = - HUGE_VALUE ; } return true ; } bool)",
    "insertText": "IsShortestPathToCorner(const int32 MaxLoopCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } const double DistanceToNextByCurrent = CurrentLoopDistance + Connexion -> MinDistance ;)",
    "insertText": "if(NextLoop->IsCellCorner())"
  },
  {
    "label": "FCell()",
    "kind": "Method",
    "detail": "Function (} } CurrentLoopDistance = - HUGE_VALUE ; } return true ; } } ; struct FCellPath { double Length = 0 ; FCellLoop* CurrentLoop ; TArray<FCellLoop> Path ; } ; struct FCell { FIsoTriangulator& Triangulator ; const FGrid& Grid ; int32 Id ; int32 InnerLoopCount = 0 ; int32 OuterLoopCount = 0 ; TArray<FIsoSegment*> CandidateSegments ; TArray<FIsoSegment*> FinalSegments ; FIntersectionSegmentTool IntersectionTool ; TArray<FCellLoop> CellLoops ; TArray<FCellCorner> CellCorners ; TArray<FCellConnexion> LoopConnexions ; TArray<int32> LoopCellBorderIndices ;)",
    "insertText": "FCell(const int32 InLoopIndex, TArray<FLoopNode*>& InNodes, FIsoTriangulator& InTriangulator) : Triangulator(InTriangulator) , Grid(Triangulator.GetGrid()) , Id(InLoopIndex) , IntersectionTool(Triangulator.GetGrid(), Triangulator.Tolerances.GeometricTolerance)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NodeCount = InNodes .)",
    "insertText": "Num()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(InNodes, [&](const FLoopNode* LoopNode1, const FLoopNode* LoopNode2) { return LoopNode1->GetGlobalIndex() < LoopNode2->GetGlobalIndex(); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 LoopCount = 0 ; FLoopNode* PreviousNode = nullptr ;)",
    "insertText": "for(FLoopNode* Node : InNodes)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (LoopCount + + ; } PreviousNode = Node ; } CellLoops .)",
    "insertText": "Reserve(LoopCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (LoopCount = 0 ; TArray<FLoopNode*> LoopNodes ; LoopNodes .)",
    "insertText": "Reserve(NodeCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (int32 LoopIndex = - 1 ; FCellLoop* FirstLoopCell = nullptr ; TFunction<)",
    "insertText": "void(TArray<FLoopNode*>&)> MakeLoopCell = [&FirstLoopCell, &CellLoops = CellLoops, &LoopIndex, &Grid = Grid](TArray<FLoopNode*>& LoopNodes)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (LoopNodes .)",
    "insertText": "Append(FirstLoopCell->Nodes)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (FirstLoopCell -> Nodes = LoopNodes ; } else { CellLoops .)",
    "insertText": "Emplace(CellLoops.Num(), LoopNodes, Grid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LoopIndex != LoopNodes[0]->GetLoopIndex())"
  },
  {
    "label": "GetLoopIndex()",
    "kind": "Method",
    "detail": "Function (LoopIndex = LoopNodes [ 0 ] ->)",
    "insertText": "GetLoopIndex()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (FirstLoopCell =& CellLoops .)",
    "insertText": "Last()"
  },
  {
    "label": "SetMarker1()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "SetMarker1()"
  },
  {
    "label": "GetPreviousNode()",
    "kind": "Method",
    "detail": "Function (continue ; } FLoopNode* StartNode =& Node ->)",
    "insertText": "GetPreviousNode()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!StartNode->HasMarker1())"
  },
  {
    "label": "GetNextNode()",
    "kind": "Method",
    "detail": "Function (StartNode =& StartNode ->)",
    "insertText": "GetNextNode()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} LoopNodes .)",
    "insertText": "Reset(NodeCount)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FLoopNode* NextNode = StartNode ;)",
    "insertText": "while(NextNode->HasMarker1NotMarker2())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LoopNodes .)",
    "insertText": "Add(NextNode)"
  },
  {
    "label": "SetMarker2()",
    "kind": "Method",
    "detail": "Function (NextNode ->)",
    "insertText": "SetMarker2()"
  },
  {
    "label": "MakeLoopCell()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MakeLoopCell(LoopNodes)"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const FCellLoop& LoopCell : CellLoops)"
  },
  {
    "label": "InitLoopConnexions()",
    "kind": "Method",
    "detail": "Function (OuterLoopCount + + ; } else { InnerLoopCount + + ; } } } void)",
    "insertText": "InitLoopConnexions()"
  },
  {
    "label": "GetLoopBarycenters()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<int32,FPoint2D>>)",
    "insertText": "GetLoopBarycenters()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<int32,FPoint2D>> LoopBarycenters ; LoopBarycenters .)",
    "insertText": "Reserve(CellLoops.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (LoopBarycenters .)",
    "insertText": "Emplace(LoopCell.Id, LoopCell.Barycenter)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "MoveTemp(LoopBarycenters)"
  },
  {
    "label": "FindCandidateToConnectLoopsByNeighborhood()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindCandidateToConnectLoopsByNeighborhood()"
  },
  {
    "label": "FindCandidateToConnectCellCornerToLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindCandidateToConnectCellCornerToLoops()"
  },
  {
    "label": "SelectSegmentToConnectLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSegmentToConnectLoops(TFactory<FIsoSegment>& SegmentFactory)"
  },
  {
    "label": "SelectSegmentToConnectLoopToCorner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSegmentToConnectLoopToCorner(TFactory<FIsoSegment>& SegmentFactory)"
  },
  {
    "label": "CheckAllLoopsConnectedTogetherAndConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckAllLoopsConnectedTogetherAndConnect()"
  },
  {
    "label": "TryToConnectTwoSubLoopsWithShortestSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToConnectTwoSubLoopsWithShortestSegment(FCellConnexion& LoopConnexion)"
  },
  {
    "label": "TryToCreateSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToCreateSegment(FCellConnexion& LoopConnexion)"
  }
]