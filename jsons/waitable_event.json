[
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Waiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Waiter"
  },
  {
    "label": "WaitableEventWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaitableEventWatcher"
  },
  {
    "label": "ReceiveRight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveRight"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "WaitableEventKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WaitableEventKernel"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNCHRONIZATION_WAITABLE_EVENT_H_ # define BASE_SYNCHRONIZATION_WAITABLE_EVENT_H_ # include<stddef . h> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/scoped_handle.h\" #elif BUILDFLAG(IS_APPLE) #include <mach/mach.h> #include <list> #include <memory> #include \"base/callback_forward.h\" #include \"base/mac/scoped_mach_port.h\" #include \"base/memory/ref_counted.h\" #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "WaitableEvent()",
    "kind": "Method",
    "detail": "Function (class TimeDelta ; class BASE_EXPORT WaitableEvent { public : enum class ResetPolicy { MANUAL,AUTOMATIC } ; enum class InitialState { SIGNALED,NOT_SIGNALED } ;)",
    "insertText": "WaitableEvent(ResetPolicy reset_policy = ResetPolicy::MANUAL, InitialState initial_state = InitialState::NOT_SIGNALED)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) explicit WaitableEvent(win::ScopedHandle event_handle)"
  },
  {
    "label": "WaitableEvent()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "WaitableEvent(const WaitableEvent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WaitableEvent&)",
    "insertText": "operator(const WaitableEvent&)"
  },
  {
    "label": "WaitableEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WaitableEvent()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Signal()"
  },
  {
    "label": "IsSignaled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSignaled()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void NOT_TAIL_CALLED)",
    "insertText": "Wait()"
  },
  {
    "label": "TimedWait()",
    "kind": "Method",
    "detail": "Function (bool NOT_TAIL_CALLED)",
    "insertText": "TimedWait(TimeDelta wait_delta)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) HANDLE handle()"
  },
  {
    "label": "declare_only_used_while_idle()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "declare_only_used_while_idle()"
  },
  {
    "label": "WaitMany()",
    "kind": "Method",
    "detail": "Function (waiting_is_blocking_ = false ; } size_t NOT_TAIL_CALLED)",
    "insertText": "WaitMany(WaitableEvent** waitables, size_t count)"
  },
  {
    "label": "Fire()",
    "kind": "Method",
    "detail": "Function (class Waiter { public : bool)",
    "insertText": "Fire(WaitableEvent* signaling_event)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compare(void* tag)"
  },
  {
    "label": "Waiter()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Waiter()"
  },
  {
    "label": "SignalImpl()",
    "kind": "Method",
    "detail": "Function (} ; private : class WaitableEventWatcher ; void)",
    "insertText": "SignalImpl()"
  },
  {
    "label": "TimedWaitImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimedWaitImpl(TimeDelta wait_delta)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_APPLE) static bool PeekPort(mach_port_t port, bool dequeue)"
  },
  {
    "label": "ReceiveRight()",
    "kind": "Method",
    "detail": "Function (class ReceiveRight : public RefCountedThreadSafe<ReceiveRight> { public :)",
    "insertText": "ReceiveRight(mach_port_t name)"
  },
  {
    "label": "ReceiveRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveRight(const ReceiveRight&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReceiveRight&)",
    "insertText": "operator(const ReceiveRight&)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (mach_port_t)",
    "insertText": "Name()"
  },
  {
    "label": "ReceiveRight()",
    "kind": "Method",
    "detail": "Function (} private : class RefCountedThreadSafe<ReceiveRight> ; ~)",
    "insertText": "ReceiveRight()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (mac::ScopedMachReceiveRight right_ ; } ; const ResetPolicy policy_ ; scoped_refptr<ReceiveRight> receive_right_ ; mac::ScopedMachSendRight send_right_ ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "WaitableEventKernel()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "WaitableEventKernel(ResetPolicy reset_policy, InitialState initial_state)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Dequeue(Waiter* waiter, void* tag)"
  },
  {
    "label": "WaitableEventKernel()",
    "kind": "Method",
    "detail": "Function (base::Lock lock_ ; const bool manual_reset_ ; bool signaled_ ; std::list<Waiter*> waiters_ ; private : class RefCountedThreadSafe<WaitableEventKernel> ; ~)",
    "insertText": "WaitableEventKernel()"
  },
  {
    "label": "EnqueueMany()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::pair<WaitableEvent*,size_t> WaiterAndIndex ; size_t)",
    "insertText": "EnqueueMany(WaiterAndIndex* waitables, size_t count, Waiter* waiter)"
  },
  {
    "label": "SignalAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignalAll()"
  },
  {
    "label": "SignalOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignalOne()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(Waiter* waiter)"
  }
]