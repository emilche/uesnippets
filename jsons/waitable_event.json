[
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Waiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Waiter"
  },
  {
    "label": "WaitableEventWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaitableEventWatcher"
  },
  {
    "label": "ReceiveRight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveRight"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "WaitableEventKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WaitableEventKernel"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "WaitableEvent()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "WaitableEvent(win::ScopedHandle event_handle)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Signal()"
  },
  {
    "label": "IsSignaled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSignaled()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (NOT_TAIL_CALLED)",
    "insertText": "Wait()"
  },
  {
    "label": "TimedWait()",
    "kind": "Method",
    "detail": "Function (NOT_TAIL_CALLED)",
    "insertText": "TimedWait(TimeDelta wait_delta)"
  },
  {
    "label": "WaitMany()",
    "kind": "Method",
    "detail": "Function (NOT_TAIL_CALLED)",
    "insertText": "WaitMany(WaitableEvent** waitables,\n                                         size_t count)"
  },
  {
    "label": "SignalImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalImpl()"
  },
  {
    "label": "TimedWaitImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimedWaitImpl(TimeDelta wait_delta)"
  },
  {
    "label": "PeekPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekPort(mach_port_t port, bool dequeue)"
  },
  {
    "label": "ReceiveRight()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ReceiveRight(mach_port_t name)"
  },
  {
    "label": "WaitableEventKernel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WaitableEventKernel(ResetPolicy reset_policy, InitialState initial_state)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Dequeue(Waiter* waiter, void* tag)"
  },
  {
    "label": "EnqueueMany()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EnqueueMany(WaiterAndIndex* waitables,\n                            size_t count, Waiter* waiter)"
  },
  {
    "label": "SignalAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignalAll()"
  },
  {
    "label": "SignalOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignalOne()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enqueue(Waiter* waiter)"
  }
]