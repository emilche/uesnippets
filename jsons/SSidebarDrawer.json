[
  {
    "label": "FSidebarDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSidebarDrawer"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "SSidebarDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSidebarDrawer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSplitterStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplitterStyle"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SSidebarButton . h \" # include \" Animation / CurveSequence . h \" # include \" Application / ThrottleManager . h \" # include \" Framework / SlateDelegates . h \" # include \" Layout / Geometry . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / SCompoundWidget . h \" class FSidebarDrawer ; class ISidebarDrawerContent ; class SSidebarDrawer ; enum class ESidebarTabLocation : uint8 ; struct FSplitterStyle ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FGenericSidebarDrawerWidgetDelegate, const TSharedRef<SSidebarDrawer>&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSidebarDrawerTargetSizeChanged, const TSharedRef<SSidebarDrawer>&, float)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SSidebarDrawer : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSidebarDrawer) : _ShadowOffset(FVector2D(8.f, 8.f)) , _ExpanderHandleSize(5.f)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ARGUMENT(float, MinDrawerSize) SLATE_ARGUMENT(float, MaxDrawerSize) SLATE_ARGUMENT(float, TargetDrawerSize) SLATE_ARGUMENT(FVector2D, ShadowOffset) SLATE_ARGUMENT(float, ExpanderHandleSize) SLATE_EVENT(FOnSidebarDrawerTargetSizeChanged, OnDrawerSizeChanged) SLATE_EVENT(FGenericSidebarDrawerWidgetDelegate, OnDrawerFocused) SLATE_EVENT(FGenericSidebarDrawerWidgetDelegate, OnDrawerFocusLost) SLATE_EVENT(FGenericSidebarDrawerWidgetDelegate, OnOpenAnimationFinish) SLATE_EVENT(FGenericSidebarDrawerWidgetDelegate, OnCloseAnimationFinish) SLATE_END_ARGS() ~SSidebarDrawer()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FSidebarDrawer>& InDrawer, const ESidebarTabLocation InTabLocation)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open(const bool bInAnimateOpen = true)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(const bool bInAnimateOpen = true)"
  },
  {
    "label": "IsOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOpen()"
  },
  {
    "label": "IsClosing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosing()"
  },
  {
    "label": "SetCurrentSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSize(const float InSize)"
  },
  {
    "label": "GetDrawer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSidebarDrawer>)",
    "insertText": "GetDrawer()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (protected : float AnimationLength = 0 . 1 5 f ; bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(const float InLayoutScaleMultiplier)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& InAllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& InAllottedGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& InAllottedGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& InAllottedGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& InGeometry, const FPointerEvent& InCursorEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& InArgs, const FGeometry& InAllottedGeometry, const FSlateRect& InCullingRect , FSlateWindowElementList& OutDrawElements, int32 InLayerId, const FWidgetStyle& InWidgetStyle, bool bInParentEnabled)"
  },
  {
    "label": "GetRenderTransformedGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetRenderTransformedGeometry(const FGeometry& InAllottedGeometry)"
  },
  {
    "label": "GetResizeHandleGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetResizeHandleGeometry(const FGeometry& InAllottedGeometry)"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateAnimation(const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnGlobalFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGlobalFocusChanging(const FFocusEvent& InFocusEvent , const FWeakWidgetPath& InOldFocusedWidgetPath, const TSharedPtr<SWidget>& InOldFocusedWidget , const FWidgetPath& InNewFocusedWidgetPath, const TSharedPtr<SWidget>& InNewFocusedWidget)"
  }
]